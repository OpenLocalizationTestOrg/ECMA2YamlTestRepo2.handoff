{"nodes":[{"pos":[1771,1847],"content":"Manages a list of <bpt id=\"p1\">&lt;xref href=\"System.Windows.Forms.Binding\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects.","needQuote":true,"needEscape":true,"source":"Manages a list of <xref href=\"System.Windows.Forms.Binding\"></xref> objects."},{"pos":[1860,3496],"content":"The CurrencyManager derives from the <xref:System.Windows.Forms.BindingManagerBase> class. Use the <xref:System.Windows.Forms.BindingContext> to return either a CurrencyManager or a <xref:System.Windows.Forms.PropertyManager>. The actual object returned depends on the data source and data member passed to the <xref:System.Windows.Forms.BindingContext.Item%2A> property of the <xref:System.Windows.Forms.BindingContext>. If the data source is an object that can return only a single property (instead of a list of objects), the type will be a <xref:System.Windows.Forms.PropertyManager>. For example, if you specify a <xref:System.Windows.Forms.TextBox> as the data source, a <xref:System.Windows.Forms.PropertyManager> will be returned. If, on the other hand, the data source is an object that implements the <xref:System.Collections.IList>, <xref:System.ComponentModel.IListSource>, or <xref:System.ComponentModel.IBindingList> interface, a CurrencyManager will be returned.       The <xref:System.Windows.Forms.BindingManagerBase.Current%2A> property returns the current item in the underlying list. To change the current item, set the <xref:System.Windows.Forms.BindingManagerBase.Position%2A> property to a new value. The value must be greater than 0 and must be less than the value of the <xref:System.Windows.Forms.BindingManagerBase.Count%2A> property.       If the underlying data source implements the <xref:System.ComponentModel.IBindingList> interface, and the <xref:System.ComponentModel.IBindingList.AllowNew%2A> property is set to `true`, you can use the <xref:System.Windows.Forms.CurrencyManager.AddNew%2A> method.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The CurrencyManager derives from the &lt;xref:System.Windows.Forms.BindingManagerBase&gt; class.","pos":[0,90],"source":"The CurrencyManager derives from the <xref:System.Windows.Forms.BindingManagerBase> class."},{"content":"Use the &lt;xref:System.Windows.Forms.BindingContext&gt; to return either a CurrencyManager or a &lt;xref:System.Windows.Forms.PropertyManager&gt;.","pos":[91,226],"source":" Use the <xref:System.Windows.Forms.BindingContext> to return either a CurrencyManager or a <xref:System.Windows.Forms.PropertyManager>."},{"content":"The actual object returned depends on the data source and data member passed to the &lt;xref:System.Windows.Forms.BindingContext.Item%2A&gt; property of the &lt;xref:System.Windows.Forms.BindingContext&gt;.","pos":[227,421],"source":" The actual object returned depends on the data source and data member passed to the <xref:System.Windows.Forms.BindingContext.Item%2A> property of the <xref:System.Windows.Forms.BindingContext>."},{"content":"If the data source is an object that can return only a single property (instead of a list of objects), the type will be a &lt;xref:System.Windows.Forms.PropertyManager&gt;.","pos":[422,588],"source":" If the data source is an object that can return only a single property (instead of a list of objects), the type will be a <xref:System.Windows.Forms.PropertyManager>."},{"content":"For example, if you specify a &lt;xref:System.Windows.Forms.TextBox&gt; as the data source, a &lt;xref:System.Windows.Forms.PropertyManager&gt; will be returned.","pos":[589,738],"source":" For example, if you specify a <xref:System.Windows.Forms.TextBox> as the data source, a <xref:System.Windows.Forms.PropertyManager> will be returned."},{"content":"If, on the other hand, the data source is an object that implements the &lt;xref:System.Collections.IList&gt;, &lt;xref:System.ComponentModel.IListSource&gt;, or &lt;xref:System.ComponentModel.IBindingList&gt; interface, a CurrencyManager will be returned.","pos":[739,977],"source":" If, on the other hand, the data source is an object that implements the <xref:System.Collections.IList>, <xref:System.ComponentModel.IListSource>, or <xref:System.ComponentModel.IBindingList> interface, a CurrencyManager will be returned."},{"content":"The &lt;xref:System.Windows.Forms.BindingManagerBase.Current%2A&gt; property returns the current item in the underlying list.","pos":[984,1103],"source":"       The <xref:System.Windows.Forms.BindingManagerBase.Current%2A> property returns the current item in the underlying list."},{"content":"To change the current item, set the &lt;xref:System.Windows.Forms.BindingManagerBase.Position%2A&gt; property to a new value.","pos":[1104,1223],"source":" To change the current item, set the <xref:System.Windows.Forms.BindingManagerBase.Position%2A> property to a new value."},{"content":"The value must be greater than 0 and must be less than the value of the &lt;xref:System.Windows.Forms.BindingManagerBase.Count%2A&gt; property.","pos":[1224,1361],"source":" The value must be greater than 0 and must be less than the value of the <xref:System.Windows.Forms.BindingManagerBase.Count%2A> property."},{"content":"If the underlying data source implements the &lt;xref:System.ComponentModel.IBindingList&gt; interface, and the &lt;xref:System.ComponentModel.IBindingList.AllowNew%2A&gt; property is set to <ph id=\"ph1\">`true`</ph>, you can use the &lt;xref:System.Windows.Forms.CurrencyManager.AddNew%2A&gt; method.","pos":[1368,1632],"source":"       If the underlying data source implements the <xref:System.ComponentModel.IBindingList> interface, and the <xref:System.ComponentModel.IBindingList.AllowNew%2A> property is set to `true`, you can use the <xref:System.Windows.Forms.CurrencyManager.AddNew%2A> method."}]},{"pos":[5721,5760],"content":"Adds a new item to the underlying list.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds a new item to the underlying list.","pos":[0,39]}]},{"pos":[5773,6674],"content":"This method is supported only if the data source implements the <xref:System.ComponentModel.IBindingList> interface and the data source allows adding rows (<xref:System.ComponentModel.IBindingList.AllowNew%2A> is `true`).      > [!NOTE] >  This property was designed to allow complex-bound controls, such as the <xref:System.Windows.Forms.DataGrid> control, to add new items to list.       You typically use this property only if you are creating your own control that incorporates the <xref:System.Windows.Forms.CurrencyManager>. Otherwise, to add items if the data source is a <xref:System.Data.DataView>, use the <xref:System.Data.DataView.AddNew%2A?displayProperty=fullName> method of the <xref:System.Data.DataView> class. If the data source is a <xref:System.Data.DataTable>, use the <xref:System.Data.DataTable.NewRow%2A> method and add the row to the <xref:System.Data.DataRowCollection>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method is supported only if the data source implements the &lt;xref:System.ComponentModel.IBindingList&gt; interface and the data source allows adding rows (&lt;xref:System.ComponentModel.IBindingList.AllowNew%2A&gt; is <ph id=\"ph1\">`true`</ph>).","pos":[0,221],"source":"This method is supported only if the data source implements the <xref:System.ComponentModel.IBindingList> interface and the data source allows adding rows (<xref:System.ComponentModel.IBindingList.AllowNew%2A> is `true`)."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  This property was designed to allow complex-bound controls, such as the &lt;xref:System.Windows.Forms.DataGrid&gt; control, to add new items to list.","pos":[227,383],"source":"      > [!NOTE] >  This property was designed to allow complex-bound controls, such as the <xref:System.Windows.Forms.DataGrid> control, to add new items to list."},{"content":"You typically use this property only if you are creating your own control that incorporates the &lt;xref:System.Windows.Forms.CurrencyManager&gt;.","pos":[390,530],"source":"       You typically use this property only if you are creating your own control that incorporates the <xref:System.Windows.Forms.CurrencyManager>."},{"content":"Otherwise, to add items if the data source is a &lt;xref:System.Data.DataView&gt;, use the &lt;xref:System.Data.DataView.AddNew%2A?displayProperty=fullName&gt; method of the &lt;xref:System.Data.DataView&gt; class.","pos":[531,727],"source":" Otherwise, to add items if the data source is a <xref:System.Data.DataView>, use the <xref:System.Data.DataView.AddNew%2A?displayProperty=fullName> method of the <xref:System.Data.DataView> class."},{"content":"If the data source is a &lt;xref:System.Data.DataTable&gt;, use the &lt;xref:System.Data.DataTable.NewRow%2A&gt; method and add the row to the &lt;xref:System.Data.DataRowCollection&gt;.","pos":[728,896],"source":" If the data source is a <xref:System.Data.DataTable>, use the <xref:System.Data.DataTable.NewRow%2A> method and add the row to the <xref:System.Data.DataRowCollection>."}]},{"pos":[7371,7632],"content":"The underlying data source does not implement <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.IBindingList\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, or the data source has thrown an exception because the user has attempted to add a row to a read-only or fixed-size <bpt id=\"p2\">&lt;xref href=\"System.Data.DataView\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The underlying data source does not implement <xref href=\"System.ComponentModel.IBindingList\"></xref>, or the data source has thrown an exception because the user has attempted to add a row to a read-only or fixed-size <xref href=\"System.Data.DataView\"></xref>."},{"pos":[8057,8092],"content":"Cancels the current edit operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Cancels the current edit operation.","pos":[0,35]}]},{"pos":[8105,8990],"content":"This method is supported only if the objects contained by the data source implement the <xref:System.ComponentModel.IEditableObject> interface. If the objects contained within the data source do not implement the <xref:System.ComponentModel.IEditableObject> interface, changes made to the data will not be discarded.      > [!NOTE] >  This property was designed to be used by complex data-bound controls, such as the <xref:System.Windows.Forms.DataGrid> control, to cancel edits. For example, when the user presses the ESC key, the CancelCurrentEdit method is called on the <xref:System.Windows.Forms.CurrencyManager> for the <xref:System.Windows.Forms.DataGrid>. Unless you are creating a control that requires this same functionality, you should not use this method. Instead, use the <xref:System.Data.DataRowView.CancelEdit%2A> method of the <xref:System.Data.DataRowView> class.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method is supported only if the objects contained by the data source implement the &lt;xref:System.ComponentModel.IEditableObject&gt; interface.","pos":[0,143],"source":"This method is supported only if the objects contained by the data source implement the <xref:System.ComponentModel.IEditableObject> interface."},{"content":"If the objects contained within the data source do not implement the &lt;xref:System.ComponentModel.IEditableObject&gt; interface, changes made to the data will not be discarded.","pos":[144,316],"source":" If the objects contained within the data source do not implement the <xref:System.ComponentModel.IEditableObject> interface, changes made to the data will not be discarded."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  This property was designed to be used by complex data-bound controls, such as the &lt;xref:System.Windows.Forms.DataGrid&gt; control, to cancel edits.","pos":[322,479],"source":"      > [!NOTE] >  This property was designed to be used by complex data-bound controls, such as the <xref:System.Windows.Forms.DataGrid> control, to cancel edits."},{"content":"For example, when the user presses the ESC key, the CancelCurrentEdit method is called on the &lt;xref:System.Windows.Forms.CurrencyManager&gt; for the &lt;xref:System.Windows.Forms.DataGrid&gt;.","pos":[480,663],"source":" For example, when the user presses the ESC key, the CancelCurrentEdit method is called on the <xref:System.Windows.Forms.CurrencyManager> for the <xref:System.Windows.Forms.DataGrid>."},{"content":"Unless you are creating a control that requires this same functionality, you should not use this method.","pos":[664,768]},{"content":"Instead, use the &lt;xref:System.Data.DataRowView.CancelEdit%2A&gt; method of the &lt;xref:System.Data.DataRowView&gt; class.","pos":[769,882],"source":" Instead, use the <xref:System.Data.DataRowView.CancelEdit%2A> method of the <xref:System.Data.DataRowView> class."}]},{"pos":[10042,10104],"content":"Throws an exception if there is no list, or the list is empty.","needQuote":true,"needEscape":true,"nodes":[{"content":"Throws an exception if there is no list, or the list is empty.","pos":[0,62]}]},{"pos":[10330,10369],"content":"There is no list, or the list is empty.","needQuote":true,"needEscape":true,"nodes":[{"content":"There is no list, or the list is empty.","pos":[0,39]}]},{"pos":[10730,10767],"content":"Gets the number of items in the list.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the number of items in the list.","pos":[0,37]}]},{"pos":[10779,10994],"content":"Use the count property to determine when the end of a list has been reached. Because the <xref:System.Windows.Forms.CurrencyManager> maintains a 0-based array of items, the end of the list is always Count minus one.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use the count property to determine when the end of a list has been reached. Because the <xref:System.Windows.Forms.CurrencyManager> maintains a 0-based array of items, the end of the list is always Count minus one.","pos":[0,215],"nodes":[{"content":"Use the count property to determine when the end of a list has been reached.","pos":[0,76]},{"content":"Because the &lt;xref:System.Windows.Forms.CurrencyManager&gt; maintains a 0-based array of items, the end of the list is always Count minus one.","pos":[77,215],"source":" Because the <xref:System.Windows.Forms.CurrencyManager> maintains a 0-based array of items, the end of the list is always Count minus one."}]}]},{"pos":[11596,11628],"content":"The number of items in the list.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of items in the list.","pos":[0,32]}]},{"pos":[12072,12106],"content":"Gets the current item in the list.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the current item in the list.","pos":[0,34]}]},{"pos":[12118,12383],"content":"In order to get the current item, you must know its data type in order to cast it correctly. For example, if the data source is a <xref:System.Data.DataView> or <xref:System.Data.DataTable>, you must cast the current item as a <xref:System.Data.DataRowView> object.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"In order to get the current item, you must know its data type in order to cast it correctly. For example, if the data source is a <xref:System.Data.DataView> or <xref:System.Data.DataTable>, you must cast the current item as a <xref:System.Data.DataRowView> object.","pos":[0,265],"nodes":[{"content":"In order to get the current item, you must know its data type in order to cast it correctly.","pos":[0,92]},{"content":"For example, if the data source is a &lt;xref:System.Data.DataView&gt; or &lt;xref:System.Data.DataTable&gt;, you must cast the current item as a &lt;xref:System.Data.DataRowView&gt; object.","pos":[93,265],"source":" For example, if the data source is a <xref:System.Data.DataView> or <xref:System.Data.DataTable>, you must cast the current item as a <xref:System.Data.DataRowView> object."}]}]},{"pos":[12996,13037],"content":"A list item of type <xref:System.Object>.","needQuote":true,"needEscape":true,"nodes":[{"content":"A list item of type &lt;xref:System.Object&gt;.","pos":[0,41],"source":"A list item of type <xref:System.Object>."}]},{"pos":[13522,13554],"content":"Ends the current edit operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Ends the current edit operation.","pos":[0,32]}]},{"pos":[13567,14218],"content":"This method is supported only if the objects contained by the data source implement the <xref:System.ComponentModel.IEditableObject> or <xref:System.ComponentModel.ICancelAddNew> interfaces.      > [!NOTE] >  This property was designed to be used by complex data-bound controls, such as the <xref:System.Windows.Forms.DataGridView> control. Unless you are creating a control that requires this same functionality, you should not use this method. Instead, if the data source is either a <xref:System.Data.DataView> or <xref:System.Data.DataTable>, use the <xref:System.Data.DataRowView.EndEdit%2A> method of the <xref:System.Data.DataRowView> class.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method is supported only if the objects contained by the data source implement the &lt;xref:System.ComponentModel.IEditableObject&gt; or &lt;xref:System.ComponentModel.ICancelAddNew&gt; interfaces.","pos":[0,190],"source":"This method is supported only if the objects contained by the data source implement the <xref:System.ComponentModel.IEditableObject> or <xref:System.ComponentModel.ICancelAddNew> interfaces."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  This property was designed to be used by complex data-bound controls, such as the &lt;xref:System.Windows.Forms.DataGridView&gt; control.","pos":[196,340],"source":"      > [!NOTE] >  This property was designed to be used by complex data-bound controls, such as the <xref:System.Windows.Forms.DataGridView> control."},{"content":"Unless you are creating a control that requires this same functionality, you should not use this method.","pos":[341,445]},{"content":"Instead, if the data source is either a &lt;xref:System.Data.DataView&gt; or &lt;xref:System.Data.DataTable&gt;, use the &lt;xref:System.Data.DataRowView.EndEdit%2A&gt; method of the &lt;xref:System.Data.DataRowView&gt; class.","pos":[446,648],"source":" Instead, if the data source is either a <xref:System.Data.DataView> or <xref:System.Data.DataTable>, use the <xref:System.Data.DataRowView.EndEdit%2A> method of the <xref:System.Data.DataRowView> class."}]},{"pos":[15235,15271],"content":"Specifies the data type of the list.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies the data type of the list.","pos":[0,36]}]},{"pos":[15376,15388],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[15830,15894],"content":"Gets the property descriptor collection for the underlying list.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the property descriptor collection for the underlying list.","pos":[0,64]}]},{"pos":[15906,16060],"content":"The <xref:System.ComponentModel.PropertyDescriptorCollection> for the <xref:System.Windows.Forms.CurrencyManager> is used to specify a column in the list.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.ComponentModel.PropertyDescriptorCollection&gt; for the &lt;xref:System.Windows.Forms.CurrencyManager&gt; is used to specify a column in the list.","pos":[0,154],"source":"The <xref:System.ComponentModel.PropertyDescriptorCollection> for the <xref:System.Windows.Forms.CurrencyManager> is used to specify a column in the list."}]},{"pos":[17102,17189],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.PropertyDescriptorCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for the list.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.ComponentModel.PropertyDescriptorCollection\"></xref> for the list."},{"pos":[17756,17861],"content":"Gets the name of the list supplying the data for the binding using the specified set of bound properties.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the name of the list supplying the data for the binding using the specified set of bound properties.","pos":[0,105]}]},{"pos":[17873,17994],"content":"For the GetListName method to be successful, the underlying list must be of type <xref:System.ComponentModel.ITypedList>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"For the GetListName method to be successful, the underlying list must be of type &lt;xref:System.ComponentModel.ITypedList&gt;.","pos":[0,121],"source":"For the GetListName method to be successful, the underlying list must be of type <xref:System.ComponentModel.ITypedList>."}]},{"pos":[18202,18300],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Collections.ArrayList\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> of properties to be found in the data source.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Collections.ArrayList\"></xref> of properties to be found in the data source."},{"pos":[18358,18502],"content":"If successful, a <xref:System.String> containing name of the list supplying the data for the binding; otherwise, an <xref:System.String> string.","needQuote":true,"needEscape":true,"nodes":[{"content":"If successful, a &lt;xref:System.String&gt; containing name of the list supplying the data for the binding; otherwise, an &lt;xref:System.String&gt; string.","pos":[0,144],"source":"If successful, a <xref:System.String> containing name of the list supplying the data for the binding; otherwise, an <xref:System.String> string."}]},{"pos":[18969,19015],"content":"Occurs when the current item has been altered.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs when the current item has been altered.","pos":[0,46]}]},{"pos":[19028,20288],"content":"The ItemChanged event will occur when the user calls the <xref:System.Windows.Forms.BindingManagerBase.ResumeBinding%2A> or <xref:System.Windows.Forms.BindingManagerBase.SuspendBinding%2A> method.       The ItemChanged event occurs only when the item itself has been changed in some manner. For example, if the value of an item is changed from 10 to 42, the event will occur. This should not be confused with the <xref:System.Windows.Forms.BindingManagerBase.PositionChanged> event where the item has been changed to a new item.       The event will also occur if the underlying data changes. For example, if you change the value of a <xref:System.Data.DataRowView>, the ItemChanged event will occur.      > [!NOTE] >  If you are creating your own control that uses the <xref:System.Windows.Forms.CurrencyManager>, you should use the <xref:System.ComponentModel.IBindingList.ListChanged?displayProperty=fullName> instead of the ItemChanged event. The <xref:System.ComponentModel.ListChangedEventArgs.ListChangedType%2A> property of the <xref:System.ComponentModel.ListChangedEventArgs> enables you to determine the type of action that has occurred.       For more information about handling events, see [Events](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The ItemChanged event will occur when the user calls the &lt;xref:System.Windows.Forms.BindingManagerBase.ResumeBinding%2A&gt; or &lt;xref:System.Windows.Forms.BindingManagerBase.SuspendBinding%2A&gt; method.","pos":[0,196],"source":"The ItemChanged event will occur when the user calls the <xref:System.Windows.Forms.BindingManagerBase.ResumeBinding%2A> or <xref:System.Windows.Forms.BindingManagerBase.SuspendBinding%2A> method."},{"content":"The ItemChanged event occurs only when the item itself has been changed in some manner.","pos":[203,290]},{"content":"For example, if the value of an item is changed from 10 to 42, the event will occur.","pos":[291,375]},{"content":"This should not be confused with the &lt;xref:System.Windows.Forms.BindingManagerBase.PositionChanged&gt; event where the item has been changed to a new item.","pos":[376,528],"source":" This should not be confused with the <xref:System.Windows.Forms.BindingManagerBase.PositionChanged> event where the item has been changed to a new item."},{"content":"The event will also occur if the underlying data changes.","pos":[535,592]},{"content":"For example, if you change the value of a &lt;xref:System.Data.DataRowView&gt;, the ItemChanged event will occur.","pos":[593,700],"source":" For example, if you change the value of a <xref:System.Data.DataRowView>, the ItemChanged event will occur."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If you are creating your own control that uses the &lt;xref:System.Windows.Forms.CurrencyManager&gt;, you should use the &lt;xref:System.ComponentModel.IBindingList.ListChanged?displayProperty=fullName&gt; instead of the ItemChanged event.","pos":[706,946],"source":"      > [!NOTE] >  If you are creating your own control that uses the <xref:System.Windows.Forms.CurrencyManager>, you should use the <xref:System.ComponentModel.IBindingList.ListChanged?displayProperty=fullName> instead of the ItemChanged event."},{"content":"The &lt;xref:System.ComponentModel.ListChangedEventArgs.ListChangedType%2A&gt; property of the &lt;xref:System.ComponentModel.ListChangedEventArgs&gt; enables you to determine the type of action that has occurred.","pos":[947,1148],"source":" The <xref:System.ComponentModel.ListChangedEventArgs.ListChangedType%2A> property of the <xref:System.ComponentModel.ListChangedEventArgs> enables you to determine the type of action that has occurred."},{"content":"For more information about handling events, see <bpt id=\"p1\">[</bpt>Events<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1155,1251],"source":"       For more information about handling events, see [Events](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[20998,21010],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[21383,21464],"content":"Gets the list for this <bpt id=\"p1\">&lt;xref href=\"System.Windows.Forms.CurrencyManager\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets the list for this <xref href=\"System.Windows.Forms.CurrencyManager\"></xref>."},{"pos":[21477,22815],"content":"The object returned by the List property can be cast to any type that implements the <xref:System.Collections.IList> interface. This will be commonly used when you know the type of the underlying list. For example, if you are data-bound to a <xref:System.Data.DataSet>, the underlying list is a <xref:System.Data.DataView> (which implements <xref:System.Collections.IList>). Other classes that implement the interface (this is not a complete list) include <xref:System.Array>, <xref:System.Collections.ArrayList>, and <xref:System.Collections.CollectionBase>.       How you use the List property depends on the class that implements the <xref:System.Collections.IList> interface. For example, you can use the List property to determine the name of the list. If the data source implements the <xref:System.ComponentModel.ITypedList> interface, you can use the <xref:System.ComponentModel.ITypedList.GetListName%2A> method to return the name of the current table. This is shown in the C# code below:      ```c#   private void PrintCurrentListName(DataGrid myDataGrid){       CurrencyManager myCM = (CurrencyManager)       BindingContext[myDataGrid.DataSource, myDataGrid.DataMember];       IList myList = myCM.List;       ITypedList thisList = (ITypedList) myList;       Console.WriteLine(thisList.GetListName(null));    }   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The object returned by the List property can be cast to any type that implements the &lt;xref:System.Collections.IList&gt; interface.","pos":[0,127],"source":"The object returned by the List property can be cast to any type that implements the <xref:System.Collections.IList> interface."},{"content":"This will be commonly used when you know the type of the underlying list.","pos":[128,201]},{"content":"For example, if you are data-bound to a &lt;xref:System.Data.DataSet&gt;, the underlying list is a &lt;xref:System.Data.DataView&gt; (which implements &lt;xref:System.Collections.IList&gt;).","pos":[202,374],"source":" For example, if you are data-bound to a <xref:System.Data.DataSet>, the underlying list is a <xref:System.Data.DataView> (which implements <xref:System.Collections.IList>)."},{"content":"Other classes that implement the interface (this is not a complete list) include &lt;xref:System.Array&gt;, &lt;xref:System.Collections.ArrayList&gt;, and &lt;xref:System.Collections.CollectionBase&gt;.","pos":[375,559],"source":" Other classes that implement the interface (this is not a complete list) include <xref:System.Array>, <xref:System.Collections.ArrayList>, and <xref:System.Collections.CollectionBase>."},{"content":"How you use the List property depends on the class that implements the &lt;xref:System.Collections.IList&gt; interface.","pos":[566,679],"source":"       How you use the List property depends on the class that implements the <xref:System.Collections.IList> interface."},{"content":"For example, you can use the List property to determine the name of the list.","pos":[680,757]},{"content":"If the data source implements the &lt;xref:System.ComponentModel.ITypedList&gt; interface, you can use the &lt;xref:System.ComponentModel.ITypedList.GetListName%2A&gt; method to return the name of the current table.","pos":[758,961],"source":" If the data source implements the <xref:System.ComponentModel.ITypedList> interface, you can use the <xref:System.ComponentModel.ITypedList.GetListName%2A> method to return the name of the current table."},{"content":"This is shown in the C# code below:      <ph id=\"ph1\">```c#   private void PrintCurrentListName(DataGrid myDataGrid){       CurrencyManager myCM = (CurrencyManager)       BindingContext[myDataGrid.DataSource, myDataGrid.DataMember];       IList myList = myCM.List;       ITypedList thisList = (ITypedList) myList;       Console.WriteLine(thisList.GetListName(null));    }   ```</ph>","pos":[962,1326],"source":" This is shown in the C# code below:      ```c#   private void PrintCurrentListName(DataGrid myDataGrid){       CurrencyManager myCM = (CurrencyManager)       BindingContext[myDataGrid.DataSource, myDataGrid.DataMember];       IList myList = myCM.List;       ITypedList thisList = (ITypedList) myList;       Console.WriteLine(thisList.GetListName(null));    }   ```"}]},{"pos":[23722,23780],"content":"An <xref:System.Collections.IList> that contains the list.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Collections.IList&gt; that contains the list.","pos":[0,58],"source":"An <xref:System.Collections.IList> that contains the list."}]},{"pos":[24240,24300],"content":"Occurs when the list changes or an item in the list changes.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs when the list changes or an item in the list changes.","pos":[0,60]}]},{"pos":[24313,24975],"content":"The ListChanged event is thrown by the <xref:System.Windows.Forms.CurrencyManager> class when changes to an item are made using methods such as <xref:System.Windows.Forms.CurrencyManager.EndCurrentEdit%2A>, <xref:System.Windows.Forms.CurrencyManager.CancelCurrentEdit%2A>, and <xref:System.Windows.Forms.CurrencyManager.Refresh%2A>. This event can also occur when the data source is edited directly if it implements the <xref:System.ComponentModel.IBindingListView> interface.       The associated `OnListChanged` method is a private method in this class.       For more information about handling events, see [Events](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The ListChanged event is thrown by the &lt;xref:System.Windows.Forms.CurrencyManager&gt; class when changes to an item are made using methods such as &lt;xref:System.Windows.Forms.CurrencyManager.EndCurrentEdit%2A&gt;, &lt;xref:System.Windows.Forms.CurrencyManager.CancelCurrentEdit%2A&gt;, and &lt;xref:System.Windows.Forms.CurrencyManager.Refresh%2A&gt;.","pos":[0,332],"source":"The ListChanged event is thrown by the <xref:System.Windows.Forms.CurrencyManager> class when changes to an item are made using methods such as <xref:System.Windows.Forms.CurrencyManager.EndCurrentEdit%2A>, <xref:System.Windows.Forms.CurrencyManager.CancelCurrentEdit%2A>, and <xref:System.Windows.Forms.CurrencyManager.Refresh%2A>."},{"content":"This event can also occur when the data source is edited directly if it implements the &lt;xref:System.ComponentModel.IBindingListView&gt; interface.","pos":[333,476],"source":" This event can also occur when the data source is edited directly if it implements the <xref:System.ComponentModel.IBindingListView> interface."},{"content":"The associated <ph id=\"ph1\">`OnListChanged`</ph> method is a private method in this class.","pos":[483,555],"source":"       The associated `OnListChanged` method is a private method in this class."},{"content":"For more information about handling events, see <bpt id=\"p1\">[</bpt>Events<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[562,658],"source":"       For more information about handling events, see [Events](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[26184,26196],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[26606,26714],"content":"Specifies the current position of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Forms.CurrencyManager\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> in the list.","needQuote":true,"needEscape":true,"source":"Specifies the current position of the <xref href=\"System.Windows.Forms.CurrencyManager\"></xref> in the list."},{"pos":[26726,27019],"content":"If the value of the <xref:System.Windows.Forms.CurrencyManager.Count%2A> property is greater than 0, the listposition field is a number between 0 and <xref:System.Windows.Forms.CurrencyManager.Count%2A> minus 1. If <xref:System.Windows.Forms.CurrencyManager.Count%2A> is 0, listposition is -1.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"If the value of the <xref:System.Windows.Forms.CurrencyManager.Count%2A> property is greater than 0, the listposition field is a number between 0 and <xref:System.Windows.Forms.CurrencyManager.Count%2A> minus 1. If <xref:System.Windows.Forms.CurrencyManager.Count%2A> is 0, listposition is -1.","pos":[0,293],"nodes":[{"content":"If the value of the &lt;xref:System.Windows.Forms.CurrencyManager.Count%2A&gt; property is greater than 0, the listposition field is a number between 0 and &lt;xref:System.Windows.Forms.CurrencyManager.Count%2A&gt; minus 1.","pos":[0,211],"source":"If the value of the <xref:System.Windows.Forms.CurrencyManager.Count%2A> property is greater than 0, the listposition field is a number between 0 and <xref:System.Windows.Forms.CurrencyManager.Count%2A> minus 1."},{"content":"If &lt;xref:System.Windows.Forms.CurrencyManager.Count%2A&gt; is 0, listposition is -1.","pos":[212,293],"source":" If <xref:System.Windows.Forms.CurrencyManager.Count%2A> is 0, listposition is -1."}]}]},{"pos":[27127,27139],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[27564,27658],"content":"Occurs when the metadata of the <xref:System.Windows.Forms.CurrencyManager.List*> has changed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs when the metadata of the &lt;xref:System.Windows.Forms.CurrencyManager.List*&gt; has changed.","pos":[0,94],"source":"Occurs when the metadata of the <xref:System.Windows.Forms.CurrencyManager.List*> has changed."}]},{"pos":[27671,28177],"content":"The metadata of the <xref:System.Windows.Forms.CurrencyManager.List%2A> consists of the schema of the underlying <xref:System.Windows.Forms.Binding.DataSource%2A?displayProperty=fullName>. The MetaDataChanged event is raised when that schema has changed. For example, the MetaDataChanged event is raised when a <xref:System.Data.DataColumn> is programmatically added to a <xref:System.Data.DataTable>.       For more information about handling events, see [Events](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The metadata of the &lt;xref:System.Windows.Forms.CurrencyManager.List%2A&gt; consists of the schema of the underlying &lt;xref:System.Windows.Forms.Binding.DataSource%2A?displayProperty=fullName&gt;.","pos":[0,188],"source":"The metadata of the <xref:System.Windows.Forms.CurrencyManager.List%2A> consists of the schema of the underlying <xref:System.Windows.Forms.Binding.DataSource%2A?displayProperty=fullName>."},{"content":"The MetaDataChanged event is raised when that schema has changed.","pos":[189,254]},{"content":"For example, the MetaDataChanged event is raised when a &lt;xref:System.Data.DataColumn&gt; is programmatically added to a &lt;xref:System.Data.DataTable&gt;.","pos":[255,401],"source":" For example, the MetaDataChanged event is raised when a <xref:System.Data.DataColumn> is programmatically added to a <xref:System.Data.DataTable>."},{"content":"For more information about handling events, see <bpt id=\"p1\">[</bpt>Events<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[408,504],"source":"       For more information about handling events, see [Events](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[29339,29351],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[29851,29944],"content":"Raises the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Forms.BindingManagerBase.CurrentChanged\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event.","needQuote":true,"needEscape":true,"source":"Raises the <xref href=\"System.Windows.Forms.BindingManagerBase.CurrentChanged\"></xref> event."},{"pos":[30100,30157],"content":"The <xref:System.EventArgs> that contains the event data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.EventArgs&gt; that contains the event data.","pos":[0,57],"source":"The <xref:System.EventArgs> that contains the event data."}]},{"pos":[30744,30841],"content":"Raises the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Forms.BindingManagerBase.CurrentItemChanged\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event.","needQuote":true,"needEscape":true,"source":"Raises the <xref href=\"System.Windows.Forms.BindingManagerBase.CurrentItemChanged\"></xref> event."},{"pos":[31001,31058],"content":"The <xref:System.EventArgs> that contains the event data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.EventArgs&gt; that contains the event data.","pos":[0,57],"source":"The <xref:System.EventArgs> that contains the event data."}]},{"pos":[31697,31784],"content":"Raises the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Forms.CurrencyManager.ItemChanged\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event.","needQuote":true,"needEscape":true,"source":"Raises the <xref href=\"System.Windows.Forms.CurrencyManager.ItemChanged\"></xref> event."},{"pos":[31797,32120],"content":"Raising an event invokes the event handler through a delegate. For more information, see [Events](~/add/includes/ajax-current-ext-md.md).       The OnItemChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Raising an event invokes the event handler through a delegate.","pos":[0,62]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Events<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[63,137],"source":" For more information, see [Events](~/add/includes/ajax-current-ext-md.md)."},{"content":"The OnItemChanged method also allows derived classes to handle the event without attaching a delegate.","pos":[144,246]},{"content":"This is the preferred technique for handling the event in a derived class.","pos":[247,321]}]},{"pos":[32330,32425],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Windows.Forms.ItemChangedEventArgs\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains the event data.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Windows.Forms.ItemChangedEventArgs\"></xref> that contains the event data."},{"pos":[32994,33085],"content":"Raises the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Forms.CurrencyManager.MetaDataChanged\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event.","needQuote":true,"needEscape":true,"source":"Raises the <xref href=\"System.Windows.Forms.CurrencyManager.MetaDataChanged\"></xref> event."},{"pos":[33098,33425],"content":"Raising an event invokes the event handler through a delegate. For more information, see [Events](~/add/includes/ajax-current-ext-md.md).       The OnMetaDataChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Raising an event invokes the event handler through a delegate.","pos":[0,62]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Events<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[63,137],"source":" For more information, see [Events](~/add/includes/ajax-current-ext-md.md)."},{"content":"The OnMetaDataChanged method also allows derived classes to handle the event without attaching a delegate.","pos":[144,250]},{"content":"This is the preferred technique for handling the event in a derived class.","pos":[251,325]}]},{"pos":[33574,33630],"content":"An <xref:System.EventArgs> that contains the event data.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.EventArgs&gt; that contains the event data.","pos":[0,56],"source":"An <xref:System.EventArgs> that contains the event data."}]},{"pos":[34203,34297],"content":"Raises the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Forms.BindingManagerBase.PositionChanged\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event.","needQuote":true,"needEscape":true,"source":"Raises the <xref href=\"System.Windows.Forms.BindingManagerBase.PositionChanged\"></xref> event."},{"pos":[34310,34637],"content":"Raising an event invokes the event handler through a delegate. For more information, see [Events](~/add/includes/ajax-current-ext-md.md).       The OnPositionChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Raising an event invokes the event handler through a delegate.","pos":[0,62]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Events<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[63,137],"source":" For more information, see [Events](~/add/includes/ajax-current-ext-md.md)."},{"content":"The OnPositionChanged method also allows derived classes to handle the event without attaching a delegate.","pos":[144,250]},{"content":"This is the preferred technique for handling the event in a derived class.","pos":[251,325]}]},{"pos":[34794,34850],"content":"An <xref:System.EventArgs> that contains the event data.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.EventArgs&gt; that contains the event data.","pos":[0,56],"source":"An <xref:System.EventArgs> that contains the event data."}]},{"pos":[35311,35364],"content":"Gets or sets the position you are at within the list.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the position you are at within the list.","pos":[0,53]}]},{"pos":[35377,36521],"content":"An important property of the <xref:System.Windows.Forms.CurrencyManager> class is the Position property. In a list of items, you can view only one item out of the entire list. To determine which item is viewed, set the Position to a number between 0 (the beginning of the list) and <xref:System.Windows.Forms.CurrencyManager.Count%2A> minus 1 (the end of the list).       Therefore, the Position determines the currency, or place in the list, of all controls bound to the same <xref:System.Windows.Forms.CurrencyManager>. For example, imagine a list consisting of two columns called \"FirstName\" and \"LastName\". Two <xref:System.Windows.Forms.TextBox> controls are bound to the same list; the first control is bound to the first column, and the second control is bound to the second column. When the Position of the common <xref:System.Windows.Forms.CurrencyManager> is set to the third position, both controls display the appropriate values for that position in the list. In other words, if the item at position three consists of the first name \"John\" and the last name \"Smith\", the bound controls will display \"John\" and \"Smith\".","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"An important property of the <xref:System.Windows.Forms.CurrencyManager> class is the Position property. In a list of items, you can view only one item out of the entire list. To determine which item is viewed, set the Position to a number between 0 (the beginning of the list) and <xref:System.Windows.Forms.CurrencyManager.Count%2A> minus 1 (the end of the list).       Therefore, the Position determines the currency, or place in the list, of all controls bound to the same <xref:System.Windows.Forms.CurrencyManager>. For example, imagine a list consisting of two columns called \"FirstName\" and \"LastName\". Two <xref:System.Windows.Forms.TextBox> controls are bound to the same list; the first control is bound to the first column, and the second control is bound to the second column. When the Position of the common <xref:System.Windows.Forms.CurrencyManager> is set to the third position, both controls display the appropriate values for that position in the list. In other words, if the item at position three consists of the first name \"John\" and the last name \"Smith\", the bound controls will display \"John\" and \"Smith\".","pos":[0,1130],"nodes":[{"content":"An important property of the &lt;xref:System.Windows.Forms.CurrencyManager&gt; class is the Position property.","pos":[0,104],"source":"An important property of the <xref:System.Windows.Forms.CurrencyManager> class is the Position property."},{"content":"In a list of items, you can view only one item out of the entire list.","pos":[105,175]},{"content":"To determine which item is viewed, set the Position to a number between 0 (the beginning of the list) and &lt;xref:System.Windows.Forms.CurrencyManager.Count%2A&gt; minus 1 (the end of the list).","pos":[176,365],"source":" To determine which item is viewed, set the Position to a number between 0 (the beginning of the list) and <xref:System.Windows.Forms.CurrencyManager.Count%2A> minus 1 (the end of the list)."},{"content":"Therefore, the Position determines the currency, or place in the list, of all controls bound to the same &lt;xref:System.Windows.Forms.CurrencyManager&gt;.","pos":[372,521],"source":"       Therefore, the Position determines the currency, or place in the list, of all controls bound to the same <xref:System.Windows.Forms.CurrencyManager>."},{"content":"For example, imagine a list consisting of two columns called \"FirstName\" and \"LastName\".","pos":[522,610]},{"content":"Two &lt;xref:System.Windows.Forms.TextBox&gt; controls are bound to the same list; the first control is bound to the first column, and the second control is bound to the second column.","pos":[611,789],"source":" Two <xref:System.Windows.Forms.TextBox> controls are bound to the same list; the first control is bound to the first column, and the second control is bound to the second column."},{"content":"When the Position of the common &lt;xref:System.Windows.Forms.CurrencyManager&gt; is set to the third position, both controls display the appropriate values for that position in the list.","pos":[790,971],"source":" When the Position of the common <xref:System.Windows.Forms.CurrencyManager> is set to the third position, both controls display the appropriate values for that position in the list."},{"content":"In other words, if the item at position three consists of the first name \"John\" and the last name \"Smith\", the bound controls will display \"John\" and \"Smith\".","pos":[972,1130]}]}]},{"pos":[37110,37192],"content":"A number between 0 and <xref:System.Windows.Forms.CurrencyManager.Count*> minus 1.","needQuote":true,"needEscape":true,"nodes":[{"content":"A number between 0 and &lt;xref:System.Windows.Forms.CurrencyManager.Count*&gt; minus 1.","pos":[0,82],"source":"A number between 0 and <xref:System.Windows.Forms.CurrencyManager.Count*> minus 1."}]},{"pos":[37643,37688],"content":"Forces a repopulation of the data-bound list.","needQuote":true,"needEscape":true,"nodes":[{"content":"Forces a repopulation of the data-bound list.","pos":[0,45]}]},{"pos":[37700,37840],"content":"Use the Refresh method when the data source does not support notification when it is changed (for example, if it is an <xref:System.Array>).","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use the Refresh method when the data source does not support notification when it is changed (for example, if it is an &lt;xref:System.Array&gt;).","pos":[0,140],"source":"Use the Refresh method when the data source does not support notification when it is changed (for example, if it is an <xref:System.Array>)."}]},{"pos":[39026,39066],"content":"Removes the item at the specified index.","needQuote":true,"needEscape":true,"nodes":[{"content":"Removes the item at the specified index.","pos":[0,40]}]},{"pos":[39078,39403],"content":"The RemoveAt method was designed to allow complex controls, such as the <xref:System.Windows.Forms.DataGrid> control, to remove items from the list. You should not use this method to actually remove items. Instead, use the <xref:System.Data.DataView.Delete%2A> method of the <xref:System.Data.DataView> class to delete items.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The RemoveAt method was designed to allow complex controls, such as the <xref:System.Windows.Forms.DataGrid> control, to remove items from the list. You should not use this method to actually remove items. Instead, use the <xref:System.Data.DataView.Delete%2A> method of the <xref:System.Data.DataView> class to delete items.","pos":[0,325],"nodes":[{"content":"The RemoveAt method was designed to allow complex controls, such as the &lt;xref:System.Windows.Forms.DataGrid&gt; control, to remove items from the list.","pos":[0,148],"source":"The RemoveAt method was designed to allow complex controls, such as the <xref:System.Windows.Forms.DataGrid> control, to remove items from the list."},{"content":"You should not use this method to actually remove items.","pos":[149,205]},{"content":"Instead, use the &lt;xref:System.Data.DataView.Delete%2A&gt; method of the &lt;xref:System.Data.DataView&gt; class to delete items.","pos":[206,325],"source":" Instead, use the <xref:System.Data.DataView.Delete%2A> method of the <xref:System.Data.DataView> class to delete items."}]}]},{"pos":[40019,40065],"content":"The index of the item to remove from the list.","needQuote":true,"needEscape":true,"nodes":[{"content":"The index of the item to remove from the list.","pos":[0,46]}]},{"pos":[40247,40299],"content":"There is no row at the specified <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">index</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"There is no row at the specified <code>index</code>."},{"pos":[40704,40725],"content":"Resumes data binding.","needQuote":true,"needEscape":true,"nodes":[{"content":"Resumes data binding.","pos":[0,21]}]},{"pos":[40738,42196],"content":"<xref:System.Windows.Forms.CurrencyManager.SuspendBinding%2A> and ResumeBinding are two methods that allow the temporary suspension and resumption of in a simple data binding scenario. You would typically suspend data binding if the user must be allowed to make several edits to data fields before validation occurs. For example, if one field must be changed in accordance with a second, but where validating the first field would cause the second field to be in error.      > [!NOTE] >  Using <xref:System.Windows.Forms.CurrencyManager.SuspendBinding%2A> prevents changes from being pushed into the data source until ResumeBinding is called but does not prevent changes in the data source from affecting the bound controls. Controls that use complex data binding, such as the <xref:System.Windows.Forms.DataGridView> control, update their values based on change events such as the <xref:System.Windows.Forms.CurrencyManager.ListChanged> event. Calling this method will not prevent these events from occurring. For this reason, <xref:System.Windows.Forms.CurrencyManager.SuspendBinding%2A> and ResumeBinding are designed for use with simple-bound controls, such as a <xref:System.Windows.Forms.TextBox>. Alternatively, you can use these methods in a complex binding scenario if you suppress <xref:System.Windows.Forms.BindingSource.ListChanged> events by setting the <xref:System.Windows.Forms.BindingSource.RaiseListChangedEvents%2A> property to `false`.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"&lt;xref:System.Windows.Forms.CurrencyManager.SuspendBinding%2A&gt; and ResumeBinding are two methods that allow the temporary suspension and resumption of in a simple data binding scenario.","pos":[0,184],"source":"<xref:System.Windows.Forms.CurrencyManager.SuspendBinding%2A> and ResumeBinding are two methods that allow the temporary suspension and resumption of in a simple data binding scenario."},{"content":"You would typically suspend data binding if the user must be allowed to make several edits to data fields before validation occurs.","pos":[185,316]},{"content":"For example, if one field must be changed in accordance with a second, but where validating the first field would cause the second field to be in error.","pos":[317,469]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Using &lt;xref:System.Windows.Forms.CurrencyManager.SuspendBinding%2A&gt; prevents changes from being pushed into the data source until ResumeBinding is called but does not prevent changes in the data source from affecting the bound controls.","pos":[475,724],"source":"      > [!NOTE] >  Using <xref:System.Windows.Forms.CurrencyManager.SuspendBinding%2A> prevents changes from being pushed into the data source until ResumeBinding is called but does not prevent changes in the data source from affecting the bound controls."},{"content":"Controls that use complex data binding, such as the &lt;xref:System.Windows.Forms.DataGridView&gt; control, update their values based on change events such as the &lt;xref:System.Windows.Forms.CurrencyManager.ListChanged&gt; event.","pos":[725,944],"source":" Controls that use complex data binding, such as the <xref:System.Windows.Forms.DataGridView> control, update their values based on change events such as the <xref:System.Windows.Forms.CurrencyManager.ListChanged> event."},{"content":"Calling this method will not prevent these events from occurring.","pos":[945,1010]},{"content":"For this reason, &lt;xref:System.Windows.Forms.CurrencyManager.SuspendBinding%2A&gt; and ResumeBinding are designed for use with simple-bound controls, such as a &lt;xref:System.Windows.Forms.TextBox&gt;.","pos":[1011,1203],"source":" For this reason, <xref:System.Windows.Forms.CurrencyManager.SuspendBinding%2A> and ResumeBinding are designed for use with simple-bound controls, such as a <xref:System.Windows.Forms.TextBox>."},{"content":"Alternatively, you can use these methods in a complex binding scenario if you suppress &lt;xref:System.Windows.Forms.BindingSource.ListChanged&gt; events by setting the &lt;xref:System.Windows.Forms.BindingSource.RaiseListChangedEvents%2A&gt; property to <ph id=\"ph1\">`false`</ph>.","pos":[1204,1455],"source":" Alternatively, you can use these methods in a complex binding scenario if you suppress <xref:System.Windows.Forms.BindingSource.ListChanged> events by setting the <xref:System.Windows.Forms.BindingSource.RaiseListChangedEvents%2A> property to `false`."}]},{"pos":[43224,43302],"content":"Suspends data binding to prevents changes from updating the bound data source.","needQuote":true,"needEscape":true,"nodes":[{"content":"Suspends data binding to prevents changes from updating the bound data source.","pos":[0,78]}]},{"pos":[43315,44923],"content":"The SuspendBinding and <xref:System.Windows.Forms.BindingSource.ResumeBinding%2A> methods allow the temporary suspension and resumption of data binding in a simple binding scenario. You would typically suspend data binding if the user must make several edits to data fields before validation occurs. For example, if one field must be changed in accordance with a second, but where validating the first field would cause the second field to be in error.      > [!NOTE] >  <xref:System.Windows.Forms.BindingSource.SuspendBinding%2A> prevents changes from being applied to the data source until <xref:System.Windows.Forms.BindingSource.ResumeBinding%2A> is called, but does not actually prevent any events from occurring. Controls that use complex data binding, such as the <xref:System.Windows.Forms.DataGridView> control, update their values based on change events, such as the <xref:System.Windows.Forms.CurrencyManager.ListChanged> event. Therefore, calling <xref:System.Windows.Forms.BindingSource.SuspendBinding%2A> will not prevent complex-bound controls from receiving events to update the data source. For this reason, <xref:System.Windows.Forms.BindingSource.SuspendBinding%2A> and <xref:System.Windows.Forms.BindingSource.ResumeBinding%2A> are designed for use with simple-bound controls, such as the <xref:System.Windows.Forms.TextBox> control. Alternatively, you can use these methods in a complex binding scenario if you suppress <xref:System.Windows.Forms.BindingSource.ListChanged> events by setting the <xref:System.Windows.Forms.BindingSource.RaiseListChangedEvents%2A> property to `false`.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The SuspendBinding and &lt;xref:System.Windows.Forms.BindingSource.ResumeBinding%2A&gt; methods allow the temporary suspension and resumption of data binding in a simple binding scenario.","pos":[0,181],"source":"The SuspendBinding and <xref:System.Windows.Forms.BindingSource.ResumeBinding%2A> methods allow the temporary suspension and resumption of data binding in a simple binding scenario."},{"content":"You would typically suspend data binding if the user must make several edits to data fields before validation occurs.","pos":[182,299]},{"content":"For example, if one field must be changed in accordance with a second, but where validating the first field would cause the second field to be in error.","pos":[300,452]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  &lt;xref:System.Windows.Forms.BindingSource.SuspendBinding%2A&gt; prevents changes from being applied to the data source until &lt;xref:System.Windows.Forms.BindingSource.ResumeBinding%2A&gt; is called, but does not actually prevent any events from occurring.","pos":[458,718],"source":"      > [!NOTE] >  <xref:System.Windows.Forms.BindingSource.SuspendBinding%2A> prevents changes from being applied to the data source until <xref:System.Windows.Forms.BindingSource.ResumeBinding%2A> is called, but does not actually prevent any events from occurring."},{"content":"Controls that use complex data binding, such as the &lt;xref:System.Windows.Forms.DataGridView&gt; control, update their values based on change events, such as the &lt;xref:System.Windows.Forms.CurrencyManager.ListChanged&gt; event.","pos":[719,939],"source":" Controls that use complex data binding, such as the <xref:System.Windows.Forms.DataGridView> control, update their values based on change events, such as the <xref:System.Windows.Forms.CurrencyManager.ListChanged> event."},{"content":"Therefore, calling &lt;xref:System.Windows.Forms.BindingSource.SuspendBinding%2A&gt; will not prevent complex-bound controls from receiving events to update the data source.","pos":[940,1107],"source":" Therefore, calling <xref:System.Windows.Forms.BindingSource.SuspendBinding%2A> will not prevent complex-bound controls from receiving events to update the data source."},{"content":"For this reason, &lt;xref:System.Windows.Forms.BindingSource.SuspendBinding%2A&gt; and &lt;xref:System.Windows.Forms.BindingSource.ResumeBinding%2A&gt; are designed for use with simple-bound controls, such as the &lt;xref:System.Windows.Forms.TextBox&gt; control.","pos":[1108,1353],"source":" For this reason, <xref:System.Windows.Forms.BindingSource.SuspendBinding%2A> and <xref:System.Windows.Forms.BindingSource.ResumeBinding%2A> are designed for use with simple-bound controls, such as the <xref:System.Windows.Forms.TextBox> control."},{"content":"Alternatively, you can use these methods in a complex binding scenario if you suppress &lt;xref:System.Windows.Forms.BindingSource.ListChanged&gt; events by setting the &lt;xref:System.Windows.Forms.BindingSource.RaiseListChangedEvents%2A&gt; property to <ph id=\"ph1\">`false`</ph>.","pos":[1354,1605],"source":" Alternatively, you can use these methods in a complex binding scenario if you suppress <xref:System.Windows.Forms.BindingSource.ListChanged> events by setting the <xref:System.Windows.Forms.BindingSource.RaiseListChangedEvents%2A> property to `false`."}]},{"pos":[45959,45993],"content":"Updates the status of the binding.","needQuote":true,"needEscape":true,"nodes":[{"content":"Updates the status of the binding.","pos":[0,34]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Forms.CurrencyManager\n  id: CurrencyManager\n  children:\n  - System.Windows.Forms.CurrencyManager.AddNew\n  - System.Windows.Forms.CurrencyManager.CancelCurrentEdit\n  - System.Windows.Forms.CurrencyManager.CheckEmpty\n  - System.Windows.Forms.CurrencyManager.Count\n  - System.Windows.Forms.CurrencyManager.Current\n  - System.Windows.Forms.CurrencyManager.EndCurrentEdit\n  - System.Windows.Forms.CurrencyManager.finalType\n  - System.Windows.Forms.CurrencyManager.GetItemProperties\n  - System.Windows.Forms.CurrencyManager.GetListName(System.Collections.ArrayList)\n  - System.Windows.Forms.CurrencyManager.ItemChanged\n  - System.Windows.Forms.CurrencyManager.List\n  - System.Windows.Forms.CurrencyManager.ListChanged\n  - System.Windows.Forms.CurrencyManager.listposition\n  - System.Windows.Forms.CurrencyManager.MetaDataChanged\n  - System.Windows.Forms.CurrencyManager.OnCurrentChanged(System.EventArgs)\n  - System.Windows.Forms.CurrencyManager.OnCurrentItemChanged(System.EventArgs)\n  - System.Windows.Forms.CurrencyManager.OnItemChanged(System.Windows.Forms.ItemChangedEventArgs)\n  - System.Windows.Forms.CurrencyManager.OnMetaDataChanged(System.EventArgs)\n  - System.Windows.Forms.CurrencyManager.OnPositionChanged(System.EventArgs)\n  - System.Windows.Forms.CurrencyManager.Position\n  - System.Windows.Forms.CurrencyManager.Refresh\n  - System.Windows.Forms.CurrencyManager.RemoveAt(System.Int32)\n  - System.Windows.Forms.CurrencyManager.ResumeBinding\n  - System.Windows.Forms.CurrencyManager.SuspendBinding\n  - System.Windows.Forms.CurrencyManager.UpdateIsBinding\n  langs:\n  - csharp\n  name: CurrencyManager\n  nameWithType: CurrencyManager\n  fullName: System.Windows.Forms.CurrencyManager\n  type: Class\n  summary: Manages a list of <xref href=\"System.Windows.Forms.Binding\"></xref> objects.\n  remarks: \"The CurrencyManager derives from the <xref:System.Windows.Forms.BindingManagerBase> class. Use the <xref:System.Windows.Forms.BindingContext> to return either a CurrencyManager or a <xref:System.Windows.Forms.PropertyManager>. The actual object returned depends on the data source and data member passed to the <xref:System.Windows.Forms.BindingContext.Item%2A> property of the <xref:System.Windows.Forms.BindingContext>. If the data source is an object that can return only a single property (instead of a list of objects), the type will be a <xref:System.Windows.Forms.PropertyManager>. For example, if you specify a <xref:System.Windows.Forms.TextBox> as the data source, a <xref:System.Windows.Forms.PropertyManager> will be returned. If, on the other hand, the data source is an object that implements the <xref:System.Collections.IList>, <xref:System.ComponentModel.IListSource>, or <xref:System.ComponentModel.IBindingList> interface, a CurrencyManager will be returned.  \\n  \\n The <xref:System.Windows.Forms.BindingManagerBase.Current%2A> property returns the current item in the underlying list. To change the current item, set the <xref:System.Windows.Forms.BindingManagerBase.Position%2A> property to a new value. The value must be greater than 0 and must be less than the value of the <xref:System.Windows.Forms.BindingManagerBase.Count%2A> property.  \\n  \\n If the underlying data source implements the <xref:System.ComponentModel.IBindingList> interface, and the <xref:System.ComponentModel.IBindingList.AllowNew%2A> property is set to `true`, you can use the <xref:System.Windows.Forms.CurrencyManager.AddNew%2A> method.\"\n  example:\n  - \"The following code example binds a <xref:System.Windows.Forms.TextBox> control to a column in a <xref:System.Data.DataTable>, gets the CurrencyManager for the binding, and sets its position.  \\n  \\n [!code-cs[Classic CurrencyManager Example#1](~/add/codesnippet/csharp/t-system.windows.forms.c_31_1.cs)]\\n [!code-cpp[Classic CurrencyManager Example#1](~/add/codesnippet/cpp/t-system.windows.forms.c_31_1.cpp)]\\n [!code-vb[Classic CurrencyManager Example#1](~/add/codesnippet/visualbasic/t-system.windows.forms.c_31_1.vb)]\"\n  syntax:\n    content: 'public class CurrencyManager : System.Windows.Forms.BindingManagerBase'\n  inheritance:\n  - System.Object\n  - System.Windows.Forms.BindingManagerBase\n  implements: []\n  inheritedMembers:\n  - System.Windows.Forms.BindingManagerBase.BindingComplete\n  - System.Windows.Forms.BindingManagerBase.Bindings\n  - System.Windows.Forms.BindingManagerBase.CurrentChanged\n  - System.Windows.Forms.BindingManagerBase.CurrentItemChanged\n  - System.Windows.Forms.BindingManagerBase.DataError\n  - System.Windows.Forms.BindingManagerBase.GetItemProperties(System.Collections.ArrayList,System.Collections.ArrayList)\n  - System.Windows.Forms.BindingManagerBase.GetItemProperties(System.Type,System.Int32,System.Collections.ArrayList,System.Collections.ArrayList)\n  - System.Windows.Forms.BindingManagerBase.IsBindingSuspended\n  - System.Windows.Forms.BindingManagerBase.OnBindingComplete(System.Windows.Forms.BindingCompleteEventArgs)\n  - System.Windows.Forms.BindingManagerBase.onCurrentChangedHandler\n  - System.Windows.Forms.BindingManagerBase.OnDataError(System.Exception)\n  - System.Windows.Forms.BindingManagerBase.onPositionChangedHandler\n  - System.Windows.Forms.BindingManagerBase.PositionChanged\n  - System.Windows.Forms.BindingManagerBase.PullData\n  - System.Windows.Forms.BindingManagerBase.PushData\n  platform:\n  - net462\n- uid: System.Windows.Forms.CurrencyManager.AddNew\n  id: AddNew\n  parent: System.Windows.Forms.CurrencyManager\n  langs:\n  - csharp\n  name: AddNew()\n  nameWithType: CurrencyManager.AddNew()\n  fullName: System.Windows.Forms.CurrencyManager.AddNew()\n  type: Method\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Adds a new item to the underlying list.\n  remarks: \"This method is supported only if the data source implements the <xref:System.ComponentModel.IBindingList> interface and the data source allows adding rows (<xref:System.ComponentModel.IBindingList.AllowNew%2A> is `true`).  \\n  \\n> [!NOTE]\\n>  This property was designed to allow complex-bound controls, such as the <xref:System.Windows.Forms.DataGrid> control, to add new items to list.  \\n  \\n You typically use this property only if you are creating your own control that incorporates the <xref:System.Windows.Forms.CurrencyManager>. Otherwise, to add items if the data source is a <xref:System.Data.DataView>, use the <xref:System.Data.DataView.AddNew%2A?displayProperty=fullName> method of the <xref:System.Data.DataView> class. If the data source is a <xref:System.Data.DataTable>, use the <xref:System.Data.DataTable.NewRow%2A> method and add the row to the <xref:System.Data.DataRowCollection>.\"\n  example:\n  - \"The following code example adds a new item to the list with the AddNew method.  \\n  \\n [!code-cpp[Classic CurrencyManager.AddNew Example#1](~/add/codesnippet/cpp/m-system.windows.forms.c_53_1.cpp)]\\n [!code-cs[Classic CurrencyManager.AddNew Example#1](~/add/codesnippet/csharp/m-system.windows.forms.c_53_1.cs)]\\n [!code-vb[Classic CurrencyManager.AddNew Example#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_53_1.vb)]\"\n  syntax:\n    content: public override void AddNew ();\n    parameters: []\n  overload: System.Windows.Forms.CurrencyManager.AddNew*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The underlying data source does not implement <xref href=\"System.ComponentModel.IBindingList\"></xref>, or the data source has thrown an exception because the user has attempted to add a row to a read-only or fixed-size <xref href=\"System.Data.DataView\"></xref>.\n  platform:\n  - net462\n- uid: System.Windows.Forms.CurrencyManager.CancelCurrentEdit\n  id: CancelCurrentEdit\n  parent: System.Windows.Forms.CurrencyManager\n  langs:\n  - csharp\n  name: CancelCurrentEdit()\n  nameWithType: CurrencyManager.CancelCurrentEdit()\n  fullName: System.Windows.Forms.CurrencyManager.CancelCurrentEdit()\n  type: Method\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Cancels the current edit operation.\n  remarks: \"This method is supported only if the objects contained by the data source implement the <xref:System.ComponentModel.IEditableObject> interface. If the objects contained within the data source do not implement the <xref:System.ComponentModel.IEditableObject> interface, changes made to the data will not be discarded.  \\n  \\n> [!NOTE]\\n>  This property was designed to be used by complex data-bound controls, such as the <xref:System.Windows.Forms.DataGrid> control, to cancel edits. For example, when the user presses the ESC key, the CancelCurrentEdit method is called on the <xref:System.Windows.Forms.CurrencyManager> for the <xref:System.Windows.Forms.DataGrid>. Unless you are creating a control that requires this same functionality, you should not use this method. Instead, use the <xref:System.Data.DataRowView.CancelEdit%2A> method of the <xref:System.Data.DataRowView> class.\"\n  example:\n  - \"The following code example uses the CancelCurrentEdit when the user presses the ESC key.  \\n  \\n [!code-cs[Classic CurrencyManager.CancelCurrentEdit Example#1](~/add/codesnippet/csharp/m-system.windows.forms.c_77_1.cs)]\\n [!code-vb[Classic CurrencyManager.CancelCurrentEdit Example#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_77_1.vb)]\\n [!code-cpp[Classic CurrencyManager.CancelCurrentEdit Example#1](~/add/codesnippet/cpp/m-system.windows.forms.c_77_1.cpp)]\"\n  syntax:\n    content: public override void CancelCurrentEdit ();\n    parameters: []\n  overload: System.Windows.Forms.CurrencyManager.CancelCurrentEdit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.CurrencyManager.CheckEmpty\n  id: CheckEmpty\n  parent: System.Windows.Forms.CurrencyManager\n  langs:\n  - csharp\n  name: CheckEmpty()\n  nameWithType: CurrencyManager.CheckEmpty()\n  fullName: System.Windows.Forms.CurrencyManager.CheckEmpty()\n  type: Method\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Throws an exception if there is no list, or the list is empty.\n  syntax:\n    content: protected void CheckEmpty ();\n    parameters: []\n  overload: System.Windows.Forms.CurrencyManager.CheckEmpty*\n  exceptions:\n  - type: System.Exception\n    commentId: T:System.Exception\n    description: There is no list, or the list is empty.\n  platform:\n  - net462\n- uid: System.Windows.Forms.CurrencyManager.Count\n  id: Count\n  parent: System.Windows.Forms.CurrencyManager\n  langs:\n  - csharp\n  name: Count\n  nameWithType: CurrencyManager.Count\n  fullName: System.Windows.Forms.CurrencyManager.Count\n  type: Property\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Gets the number of items in the list.\n  remarks: Use the count property to determine when the end of a list has been reached. Because the <xref:System.Windows.Forms.CurrencyManager> maintains a 0-based array of items, the end of the list is always Count minus one.\n  example:\n  - \"The following code example iterates through the list until the final item, determined by the Count property, is reached.  \\n  \\n [!code-cs[Classic CurrencyManager.Count Example#1](~/add/codesnippet/csharp/p-system.windows.forms.c_28_1.cs)]\\n [!code-cpp[Classic CurrencyManager.Count Example#1](~/add/codesnippet/cpp/p-system.windows.forms.c_28_1.cpp)]\\n [!code-vb[Classic CurrencyManager.Count Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.c_28_1.vb)]\"\n  syntax:\n    content: public override int Count { get; }\n    return:\n      type: System.Int32\n      description: The number of items in the list.\n  overload: System.Windows.Forms.CurrencyManager.Count*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.CurrencyManager.Current\n  id: Current\n  parent: System.Windows.Forms.CurrencyManager\n  langs:\n  - csharp\n  name: Current\n  nameWithType: CurrencyManager.Current\n  fullName: System.Windows.Forms.CurrencyManager.Current\n  type: Property\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Gets the current item in the list.\n  remarks: In order to get the current item, you must know its data type in order to cast it correctly. For example, if the data source is a <xref:System.Data.DataView> or <xref:System.Data.DataTable>, you must cast the current item as a <xref:System.Data.DataRowView> object.\n  example:\n  - \"The following code example uses the Current property to print the `ContactName` field for the current item in the list.  \\n  \\n [!code-cs[Classic CurrencyManager.Current Example#1](~/add/codesnippet/csharp/p-system.windows.forms.c_57_1.cs)]\\n [!code-vb[Classic CurrencyManager.Current Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.c_57_1.vb)]\\n [!code-cpp[Classic CurrencyManager.Current Example#1](~/add/codesnippet/cpp/p-system.windows.forms.c_57_1.cpp)]\"\n  syntax:\n    content: public override object Current { get; }\n    return:\n      type: System.Object\n      description: A list item of type <xref:System.Object>.\n  overload: System.Windows.Forms.CurrencyManager.Current*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.CurrencyManager.EndCurrentEdit\n  id: EndCurrentEdit\n  parent: System.Windows.Forms.CurrencyManager\n  langs:\n  - csharp\n  name: EndCurrentEdit()\n  nameWithType: CurrencyManager.EndCurrentEdit()\n  fullName: System.Windows.Forms.CurrencyManager.EndCurrentEdit()\n  type: Method\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Ends the current edit operation.\n  remarks: \"This method is supported only if the objects contained by the data source implement the <xref:System.ComponentModel.IEditableObject> or <xref:System.ComponentModel.ICancelAddNew> interfaces.  \\n  \\n> [!NOTE]\\n>  This property was designed to be used by complex data-bound controls, such as the <xref:System.Windows.Forms.DataGridView> control. Unless you are creating a control that requires this same functionality, you should not use this method. Instead, if the data source is either a <xref:System.Data.DataView> or <xref:System.Data.DataTable>, use the <xref:System.Data.DataRowView.EndEdit%2A> method of the <xref:System.Data.DataRowView> class.\"\n  example:\n  - \"The following code example demonstrates how to use the EndCurrentEdit method.  \\n  \\n [!code-cpp[Classic CurrencyManager.EndCurrentEdit Example#1](~/add/codesnippet/cpp/m-system.windows.forms.c_109_1.cpp)]\\n [!code-vb[Classic CurrencyManager.EndCurrentEdit Example#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_109_1.vb)]\\n [!code-cs[Classic CurrencyManager.EndCurrentEdit Example#1](~/add/codesnippet/csharp/m-system.windows.forms.c_109_1.cs)]\"\n  syntax:\n    content: public override void EndCurrentEdit ();\n    parameters: []\n  overload: System.Windows.Forms.CurrencyManager.EndCurrentEdit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.CurrencyManager.finalType\n  id: finalType\n  parent: System.Windows.Forms.CurrencyManager\n  langs:\n  - csharp\n  name: finalType\n  nameWithType: CurrencyManager.finalType\n  fullName: System.Windows.Forms.CurrencyManager.finalType\n  type: Field\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Specifies the data type of the list.\n  syntax:\n    content: protected Type finalType;\n    return:\n      type: System.Type\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.CurrencyManager.GetItemProperties\n  id: GetItemProperties\n  parent: System.Windows.Forms.CurrencyManager\n  langs:\n  - csharp\n  name: GetItemProperties()\n  nameWithType: CurrencyManager.GetItemProperties()\n  fullName: System.Windows.Forms.CurrencyManager.GetItemProperties()\n  type: Method\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Gets the property descriptor collection for the underlying list.\n  remarks: The <xref:System.ComponentModel.PropertyDescriptorCollection> for the <xref:System.Windows.Forms.CurrencyManager> is used to specify a column in the list.\n  example:\n  - \"The following code example uses the GetItemProperties method to return a <xref:System.ComponentModel.PropertyDescriptorCollection> for a <xref:System.Windows.Forms.BindingManagerBase>. The example then prints out the <xref:System.ComponentModel.MemberDescriptor.Name%2A> and <xref:System.ComponentModel.PropertyDescriptor.PropertyType%2A> of each <xref:System.ComponentModel.PropertyDescriptor> in the collection.  \\n  \\n [!code-cs[Classic CurrencyManager.GetItemProperties Example#1](~/add/codesnippet/csharp/m-system.windows.forms.c_97_1.cs)]\\n [!code-cpp[Classic CurrencyManager.GetItemProperties Example#1](~/add/codesnippet/cpp/m-system.windows.forms.c_97_1.cpp)]\\n [!code-vb[Classic CurrencyManager.GetItemProperties Example#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_97_1.vb)]\"\n  syntax:\n    content: public override System.ComponentModel.PropertyDescriptorCollection GetItemProperties ();\n    parameters: []\n    return:\n      type: System.ComponentModel.PropertyDescriptorCollection\n      description: A <xref href=\"System.ComponentModel.PropertyDescriptorCollection\"></xref> for the list.\n  overload: System.Windows.Forms.CurrencyManager.GetItemProperties*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.CurrencyManager.GetListName(System.Collections.ArrayList)\n  id: GetListName(System.Collections.ArrayList)\n  parent: System.Windows.Forms.CurrencyManager\n  langs:\n  - csharp\n  name: GetListName(ArrayList)\n  nameWithType: CurrencyManager.GetListName(ArrayList)\n  fullName: System.Windows.Forms.CurrencyManager.GetListName(ArrayList)\n  type: Method\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Gets the name of the list supplying the data for the binding using the specified set of bound properties.\n  remarks: For the GetListName method to be successful, the underlying list must be of type <xref:System.ComponentModel.ITypedList>.\n  syntax:\n    content: protected override string GetListName (System.Collections.ArrayList listAccessors);\n    parameters:\n    - id: listAccessors\n      type: System.Collections.ArrayList\n      description: An <xref href=\"System.Collections.ArrayList\"></xref> of properties to be found in the data source.\n    return:\n      type: System.String\n      description: If successful, a <xref:System.String> containing name of the list supplying the data for the binding; otherwise, an <xref:System.String> string.\n  overload: System.Windows.Forms.CurrencyManager.GetListName*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.CurrencyManager.ItemChanged\n  id: ItemChanged\n  parent: System.Windows.Forms.CurrencyManager\n  langs:\n  - csharp\n  name: ItemChanged\n  nameWithType: CurrencyManager.ItemChanged\n  fullName: System.Windows.Forms.CurrencyManager.ItemChanged\n  type: Event\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Occurs when the current item has been altered.\n  remarks: \"The ItemChanged event will occur when the user calls the <xref:System.Windows.Forms.BindingManagerBase.ResumeBinding%2A> or <xref:System.Windows.Forms.BindingManagerBase.SuspendBinding%2A> method.  \\n  \\n The ItemChanged event occurs only when the item itself has been changed in some manner. For example, if the value of an item is changed from 10 to 42, the event will occur. This should not be confused with the <xref:System.Windows.Forms.BindingManagerBase.PositionChanged> event where the item has been changed to a new item.  \\n  \\n The event will also occur if the underlying data changes. For example, if you change the value of a <xref:System.Data.DataRowView>, the ItemChanged event will occur.  \\n  \\n> [!NOTE]\\n>  If you are creating your own control that uses the <xref:System.Windows.Forms.CurrencyManager>, you should use the <xref:System.ComponentModel.IBindingList.ListChanged?displayProperty=fullName> instead of the ItemChanged event. The <xref:System.ComponentModel.ListChangedEventArgs.ListChangedType%2A> property of the <xref:System.ComponentModel.ListChangedEventArgs> enables you to determine the type of action that has occurred.  \\n  \\n For more information about handling events, see [Events](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"The following code example adds event handlers for the ItemChanged and <xref:System.Windows.Forms.BindingManagerBase.PositionChanged> events.  \\n  \\n [!code-cpp[Classic CurrencyManager.ItemChanged Example#1](~/add/codesnippet/cpp/e-system.windows.forms.c_44_1.cpp)]\\n [!code-vb[Classic CurrencyManager.ItemChanged Example#1](~/add/codesnippet/visualbasic/e-system.windows.forms.c_44_1.vb)]\\n [!code-cs[Classic CurrencyManager.ItemChanged Example#1](~/add/codesnippet/csharp/e-system.windows.forms.c_44_1.cs)]\"\n  syntax:\n    content: public event System.Windows.Forms.ItemChangedEventHandler ItemChanged;\n    return:\n      type: System.Windows.Forms.ItemChangedEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.CurrencyManager.List\n  id: List\n  parent: System.Windows.Forms.CurrencyManager\n  langs:\n  - csharp\n  name: List\n  nameWithType: CurrencyManager.List\n  fullName: System.Windows.Forms.CurrencyManager.List\n  type: Property\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Gets the list for this <xref href=\"System.Windows.Forms.CurrencyManager\"></xref>.\n  remarks: \"The object returned by the List property can be cast to any type that implements the <xref:System.Collections.IList> interface. This will be commonly used when you know the type of the underlying list. For example, if you are data-bound to a <xref:System.Data.DataSet>, the underlying list is a <xref:System.Data.DataView> (which implements <xref:System.Collections.IList>). Other classes that implement the interface (this is not a complete list) include <xref:System.Array>, <xref:System.Collections.ArrayList>, and <xref:System.Collections.CollectionBase>.  \\n  \\n How you use the List property depends on the class that implements the <xref:System.Collections.IList> interface. For example, you can use the List property to determine the name of the list. If the data source implements the <xref:System.ComponentModel.ITypedList> interface, you can use the <xref:System.ComponentModel.ITypedList.GetListName%2A> method to return the name of the current table. This is shown in the C# code below:  \\n  \\n```c#  \\nprivate void PrintCurrentListName(DataGrid myDataGrid){   \\n   CurrencyManager myCM = (CurrencyManager)   \\n   BindingContext[myDataGrid.DataSource, myDataGrid.DataMember];   \\n   IList myList = myCM.List;   \\n   ITypedList thisList = (ITypedList) myList;   \\n   Console.WriteLine(thisList.GetListName(null));   \\n}  \\n```\"\n  example:\n  - \"The following code example allows users to edit a set of records, but not add any new ones. In the <xref:System.Windows.Forms.DataGrid.Navigate> event of a <xref:System.Windows.Forms.DataGrid> control, the <xref:System.Collections.IList> returned by the List property is cast to a <xref:System.Data.DataView> variable. The <xref:System.Data.DataView.AllowNew%2A> property of the <xref:System.Data.DataView> is set to `false`.  \\n  \\n [!code-cs[CurrencyManager.List Example#1](~/add/codesnippet/csharp/p-system.windows.forms.c_107_1.cs)]\\n [!code-cpp[CurrencyManager.List Example#1](~/add/codesnippet/cpp/p-system.windows.forms.c_107_1.cpp)]\\n [!code-vb[CurrencyManager.List Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.c_107_1.vb)]\"\n  syntax:\n    content: public System.Collections.IList List { get; }\n    return:\n      type: System.Collections.IList\n      description: An <xref:System.Collections.IList> that contains the list.\n  overload: System.Windows.Forms.CurrencyManager.List*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.CurrencyManager.ListChanged\n  id: ListChanged\n  parent: System.Windows.Forms.CurrencyManager\n  langs:\n  - csharp\n  name: ListChanged\n  nameWithType: CurrencyManager.ListChanged\n  fullName: System.Windows.Forms.CurrencyManager.ListChanged\n  type: Event\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Occurs when the list changes or an item in the list changes.\n  remarks: \"The ListChanged event is thrown by the <xref:System.Windows.Forms.CurrencyManager> class when changes to an item are made using methods such as <xref:System.Windows.Forms.CurrencyManager.EndCurrentEdit%2A>, <xref:System.Windows.Forms.CurrencyManager.CancelCurrentEdit%2A>, and <xref:System.Windows.Forms.CurrencyManager.Refresh%2A>. This event can also occur when the data source is edited directly if it implements the <xref:System.ComponentModel.IBindingListView> interface.  \\n  \\n The associated `OnListChanged` method is a private method in this class.  \\n  \\n For more information about handling events, see [Events](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the ListChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \\n  \\n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.CurrencyManager> named `CurrencyManager1`. Then ensure that the event handler is associated with the ListChanged event.  \\n  \\n [!code-cs[System.Windows.Forms.EventExamples#192](~/add/codesnippet/csharp/e-system.windows.forms.c_59_1.cs)]\\n [!code-vb[System.Windows.Forms.EventExamples#192](~/add/codesnippet/visualbasic/e-system.windows.forms.c_59_1.vb)]\"\n  syntax:\n    content: public event System.ComponentModel.ListChangedEventHandler ListChanged;\n    return:\n      type: System.ComponentModel.ListChangedEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.CurrencyManager.listposition\n  id: listposition\n  parent: System.Windows.Forms.CurrencyManager\n  langs:\n  - csharp\n  name: listposition\n  nameWithType: CurrencyManager.listposition\n  fullName: System.Windows.Forms.CurrencyManager.listposition\n  type: Field\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Specifies the current position of the <xref href=\"System.Windows.Forms.CurrencyManager\"></xref> in the list.\n  remarks: If the value of the <xref:System.Windows.Forms.CurrencyManager.Count%2A> property is greater than 0, the listposition field is a number between 0 and <xref:System.Windows.Forms.CurrencyManager.Count%2A> minus 1. If <xref:System.Windows.Forms.CurrencyManager.Count%2A> is 0, listposition is -1.\n  syntax:\n    content: protected int listposition;\n    return:\n      type: System.Int32\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.CurrencyManager.MetaDataChanged\n  id: MetaDataChanged\n  parent: System.Windows.Forms.CurrencyManager\n  langs:\n  - csharp\n  name: MetaDataChanged\n  nameWithType: CurrencyManager.MetaDataChanged\n  fullName: System.Windows.Forms.CurrencyManager.MetaDataChanged\n  type: Event\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Occurs when the metadata of the <xref:System.Windows.Forms.CurrencyManager.List*> has changed.\n  remarks: \"The metadata of the <xref:System.Windows.Forms.CurrencyManager.List%2A> consists of the schema of the underlying <xref:System.Windows.Forms.Binding.DataSource%2A?displayProperty=fullName>. The MetaDataChanged event is raised when that schema has changed. For example, the MetaDataChanged event is raised when a <xref:System.Data.DataColumn> is programmatically added to a <xref:System.Data.DataTable>.  \\n  \\n For more information about handling events, see [Events](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the MetaDataChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \\n  \\n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.CurrencyManager> named `CurrencyManager1`. Then ensure that the event handler is associated with the MetaDataChanged event.  \\n  \\n [!code-cs[System.Windows.Forms.EventExamples#193](~/add/codesnippet/csharp/e-system.windows.forms.c_76_1.cs)]\\n [!code-vb[System.Windows.Forms.EventExamples#193](~/add/codesnippet/visualbasic/e-system.windows.forms.c_76_1.vb)]\"\n  syntax:\n    content: public event EventHandler MetaDataChanged;\n    return:\n      type: System.EventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.CurrencyManager.OnCurrentChanged(System.EventArgs)\n  id: OnCurrentChanged(System.EventArgs)\n  parent: System.Windows.Forms.CurrencyManager\n  langs:\n  - csharp\n  name: OnCurrentChanged(EventArgs)\n  nameWithType: CurrencyManager.OnCurrentChanged(EventArgs)\n  fullName: System.Windows.Forms.CurrencyManager.OnCurrentChanged(EventArgs)\n  type: Method\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Raises the <xref href=\"System.Windows.Forms.BindingManagerBase.CurrentChanged\"></xref> event.\n  syntax:\n    content: protected override void OnCurrentChanged (EventArgs e);\n    parameters:\n    - id: e\n      type: System.EventArgs\n      description: The <xref:System.EventArgs> that contains the event data.\n  overload: System.Windows.Forms.CurrencyManager.OnCurrentChanged*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.CurrencyManager.OnCurrentItemChanged(System.EventArgs)\n  id: OnCurrentItemChanged(System.EventArgs)\n  parent: System.Windows.Forms.CurrencyManager\n  langs:\n  - csharp\n  name: OnCurrentItemChanged(EventArgs)\n  nameWithType: CurrencyManager.OnCurrentItemChanged(EventArgs)\n  fullName: System.Windows.Forms.CurrencyManager.OnCurrentItemChanged(EventArgs)\n  type: Method\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Raises the <xref href=\"System.Windows.Forms.BindingManagerBase.CurrentItemChanged\"></xref> event.\n  syntax:\n    content: protected override void OnCurrentItemChanged (EventArgs e);\n    parameters:\n    - id: e\n      type: System.EventArgs\n      description: The <xref:System.EventArgs> that contains the event data.\n  overload: System.Windows.Forms.CurrencyManager.OnCurrentItemChanged*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.CurrencyManager.OnItemChanged(System.Windows.Forms.ItemChangedEventArgs)\n  id: OnItemChanged(System.Windows.Forms.ItemChangedEventArgs)\n  parent: System.Windows.Forms.CurrencyManager\n  langs:\n  - csharp\n  name: OnItemChanged(ItemChangedEventArgs)\n  nameWithType: CurrencyManager.OnItemChanged(ItemChangedEventArgs)\n  fullName: System.Windows.Forms.CurrencyManager.OnItemChanged(ItemChangedEventArgs)\n  type: Method\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Raises the <xref href=\"System.Windows.Forms.CurrencyManager.ItemChanged\"></xref> event.\n  remarks: \"Raising an event invokes the event handler through a delegate. For more information, see [Events](~/add/includes/ajax-current-ext-md.md).  \\n  \\n The OnItemChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.\"\n  syntax:\n    content: protected virtual void OnItemChanged (System.Windows.Forms.ItemChangedEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Forms.ItemChangedEventArgs\n      description: An <xref href=\"System.Windows.Forms.ItemChangedEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.Forms.CurrencyManager.OnItemChanged*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.CurrencyManager.OnMetaDataChanged(System.EventArgs)\n  id: OnMetaDataChanged(System.EventArgs)\n  parent: System.Windows.Forms.CurrencyManager\n  langs:\n  - csharp\n  name: OnMetaDataChanged(EventArgs)\n  nameWithType: CurrencyManager.OnMetaDataChanged(EventArgs)\n  fullName: System.Windows.Forms.CurrencyManager.OnMetaDataChanged(EventArgs)\n  type: Method\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Raises the <xref href=\"System.Windows.Forms.CurrencyManager.MetaDataChanged\"></xref> event.\n  remarks: \"Raising an event invokes the event handler through a delegate. For more information, see [Events](~/add/includes/ajax-current-ext-md.md).  \\n  \\n The OnMetaDataChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.\"\n  syntax:\n    content: protected void OnMetaDataChanged (EventArgs e);\n    parameters:\n    - id: e\n      type: System.EventArgs\n      description: An <xref:System.EventArgs> that contains the event data.\n  overload: System.Windows.Forms.CurrencyManager.OnMetaDataChanged*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.CurrencyManager.OnPositionChanged(System.EventArgs)\n  id: OnPositionChanged(System.EventArgs)\n  parent: System.Windows.Forms.CurrencyManager\n  langs:\n  - csharp\n  name: OnPositionChanged(EventArgs)\n  nameWithType: CurrencyManager.OnPositionChanged(EventArgs)\n  fullName: System.Windows.Forms.CurrencyManager.OnPositionChanged(EventArgs)\n  type: Method\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Raises the <xref href=\"System.Windows.Forms.BindingManagerBase.PositionChanged\"></xref> event.\n  remarks: \"Raising an event invokes the event handler through a delegate. For more information, see [Events](~/add/includes/ajax-current-ext-md.md).  \\n  \\n The OnPositionChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.\"\n  syntax:\n    content: protected virtual void OnPositionChanged (EventArgs e);\n    parameters:\n    - id: e\n      type: System.EventArgs\n      description: An <xref:System.EventArgs> that contains the event data.\n  overload: System.Windows.Forms.CurrencyManager.OnPositionChanged*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.CurrencyManager.Position\n  id: Position\n  parent: System.Windows.Forms.CurrencyManager\n  langs:\n  - csharp\n  name: Position\n  nameWithType: CurrencyManager.Position\n  fullName: System.Windows.Forms.CurrencyManager.Position\n  type: Property\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Gets or sets the position you are at within the list.\n  remarks: \"An important property of the <xref:System.Windows.Forms.CurrencyManager> class is the Position property. In a list of items, you can view only one item out of the entire list. To determine which item is viewed, set the Position to a number between 0 (the beginning of the list) and <xref:System.Windows.Forms.CurrencyManager.Count%2A> minus 1 (the end of the list).  \\n  \\n Therefore, the Position determines the currency, or place in the list, of all controls bound to the same <xref:System.Windows.Forms.CurrencyManager>. For example, imagine a list consisting of two columns called \\\"FirstName\\\" and \\\"LastName\\\". Two <xref:System.Windows.Forms.TextBox> controls are bound to the same list; the first control is bound to the first column, and the second control is bound to the second column. When the Position of the common <xref:System.Windows.Forms.CurrencyManager> is set to the third position, both controls display the appropriate values for that position in the list. In other words, if the item at position three consists of the first name \\\"John\\\" and the last name \\\"Smith\\\", the bound controls will display \\\"John\\\" and \\\"Smith\\\".\"\n  example:\n  - \"The following code examples use the Position property to allow navigation through a list.  \\n  \\n [!code-cpp[Classic CurrencyManager.Position Example#1](~/add/codesnippet/cpp/p-system.windows.forms.c_83_1.cpp)]\\n [!code-cs[Classic CurrencyManager.Position Example#1](~/add/codesnippet/csharp/p-system.windows.forms.c_83_1.cs)]\\n [!code-vb[Classic CurrencyManager.Position Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.c_83_1.vb)]\"\n  syntax:\n    content: public override int Position { get; set; }\n    return:\n      type: System.Int32\n      description: A number between 0 and <xref:System.Windows.Forms.CurrencyManager.Count*> minus 1.\n  overload: System.Windows.Forms.CurrencyManager.Position*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.CurrencyManager.Refresh\n  id: Refresh\n  parent: System.Windows.Forms.CurrencyManager\n  langs:\n  - csharp\n  name: Refresh()\n  nameWithType: CurrencyManager.Refresh()\n  fullName: System.Windows.Forms.CurrencyManager.Refresh()\n  type: Method\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Forces a repopulation of the data-bound list.\n  remarks: Use the Refresh method when the data source does not support notification when it is changed (for example, if it is an <xref:System.Array>).\n  example:\n  - \"The following code example creates an array and binds it to a <xref:System.Windows.Forms.TextBox> control, and then changes one value. The Refresh method can be called to update the value displayed by the <xref:System.Windows.Forms.TextBox> control.  \\n  \\n [!code-cs[Classic CurrencyManager.Refresh Example#1](~/add/codesnippet/csharp/m-system.windows.forms.c_16_1.cs)]\\n [!code-cpp[Classic CurrencyManager.Refresh Example#1](~/add/codesnippet/cpp/m-system.windows.forms.c_16_1.cpp)]\\n [!code-vb[Classic CurrencyManager.Refresh Example#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_16_1.vb)]\"\n  syntax:\n    content: public void Refresh ();\n    parameters: []\n  overload: System.Windows.Forms.CurrencyManager.Refresh*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.CurrencyManager.RemoveAt(System.Int32)\n  id: RemoveAt(System.Int32)\n  parent: System.Windows.Forms.CurrencyManager\n  langs:\n  - csharp\n  name: RemoveAt(Int32)\n  nameWithType: CurrencyManager.RemoveAt(Int32)\n  fullName: System.Windows.Forms.CurrencyManager.RemoveAt(Int32)\n  type: Method\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Removes the item at the specified index.\n  remarks: The RemoveAt method was designed to allow complex controls, such as the <xref:System.Windows.Forms.DataGrid> control, to remove items from the list. You should not use this method to actually remove items. Instead, use the <xref:System.Data.DataView.Delete%2A> method of the <xref:System.Data.DataView> class to delete items.\n  example:\n  - \"The following code example uses the RemoveAt method to remove the item at position 0 in the list.  \\n  \\n [!code-cs[Classic CurrencyManager.RemoveAt Example#1](~/add/codesnippet/csharp/m-system.windows.forms.c_71_1.cs)]\\n [!code-cpp[Classic CurrencyManager.RemoveAt Example#1](~/add/codesnippet/cpp/m-system.windows.forms.c_71_1.cpp)]\\n [!code-vb[Classic CurrencyManager.RemoveAt Example#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_71_1.vb)]\"\n  syntax:\n    content: public override void RemoveAt (int index);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The index of the item to remove from the list.\n  overload: System.Windows.Forms.CurrencyManager.RemoveAt*\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: There is no row at the specified <code>index</code>.\n  platform:\n  - net462\n- uid: System.Windows.Forms.CurrencyManager.ResumeBinding\n  id: ResumeBinding\n  parent: System.Windows.Forms.CurrencyManager\n  langs:\n  - csharp\n  name: ResumeBinding()\n  nameWithType: CurrencyManager.ResumeBinding()\n  fullName: System.Windows.Forms.CurrencyManager.ResumeBinding()\n  type: Method\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Resumes data binding.\n  remarks: \"<xref:System.Windows.Forms.CurrencyManager.SuspendBinding%2A> and ResumeBinding are two methods that allow the temporary suspension and resumption of in a simple data binding scenario. You would typically suspend data binding if the user must be allowed to make several edits to data fields before validation occurs. For example, if one field must be changed in accordance with a second, but where validating the first field would cause the second field to be in error.  \\n  \\n> [!NOTE]\\n>  Using <xref:System.Windows.Forms.CurrencyManager.SuspendBinding%2A> prevents changes from being pushed into the data source until ResumeBinding is called but does not prevent changes in the data source from affecting the bound controls. Controls that use complex data binding, such as the <xref:System.Windows.Forms.DataGridView> control, update their values based on change events such as the <xref:System.Windows.Forms.CurrencyManager.ListChanged> event. Calling this method will not prevent these events from occurring. For this reason, <xref:System.Windows.Forms.CurrencyManager.SuspendBinding%2A> and ResumeBinding are designed for use with simple-bound controls, such as a <xref:System.Windows.Forms.TextBox>. Alternatively, you can use these methods in a complex binding scenario if you suppress <xref:System.Windows.Forms.BindingSource.ListChanged> events by setting the <xref:System.Windows.Forms.BindingSource.RaiseListChangedEvents%2A> property to `false`.\"\n  example:\n  - \"The following code example demonstrates how to use the ResumeBinding method.  \\n  \\n [!code-vb[BindingManagerBase_Suspend_Resume_Binding#2](~/add/codesnippet/visualbasic/m-system.windows.forms.c_40_1.vb)]\\n [!code-cs[BindingManagerBase_Suspend_Resume_Binding#2](~/add/codesnippet/csharp/m-system.windows.forms.c_40_1.cs)]\\n [!code-cpp[BindingManagerBase_Suspend_Resume_Binding#2](~/add/codesnippet/cpp/m-system.windows.forms.c_40_1.cpp)]\"\n  syntax:\n    content: public override void ResumeBinding ();\n    parameters: []\n  overload: System.Windows.Forms.CurrencyManager.ResumeBinding*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.CurrencyManager.SuspendBinding\n  id: SuspendBinding\n  parent: System.Windows.Forms.CurrencyManager\n  langs:\n  - csharp\n  name: SuspendBinding()\n  nameWithType: CurrencyManager.SuspendBinding()\n  fullName: System.Windows.Forms.CurrencyManager.SuspendBinding()\n  type: Method\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Suspends data binding to prevents changes from updating the bound data source.\n  remarks: \"The SuspendBinding and <xref:System.Windows.Forms.BindingSource.ResumeBinding%2A> methods allow the temporary suspension and resumption of data binding in a simple binding scenario. You would typically suspend data binding if the user must make several edits to data fields before validation occurs. For example, if one field must be changed in accordance with a second, but where validating the first field would cause the second field to be in error.  \\n  \\n> [!NOTE]\\n>  <xref:System.Windows.Forms.BindingSource.SuspendBinding%2A> prevents changes from being applied to the data source until <xref:System.Windows.Forms.BindingSource.ResumeBinding%2A> is called, but does not actually prevent any events from occurring. Controls that use complex data binding, such as the <xref:System.Windows.Forms.DataGridView> control, update their values based on change events, such as the <xref:System.Windows.Forms.CurrencyManager.ListChanged> event. Therefore, calling <xref:System.Windows.Forms.BindingSource.SuspendBinding%2A> will not prevent complex-bound controls from receiving events to update the data source. For this reason, <xref:System.Windows.Forms.BindingSource.SuspendBinding%2A> and <xref:System.Windows.Forms.BindingSource.ResumeBinding%2A> are designed for use with simple-bound controls, such as the <xref:System.Windows.Forms.TextBox> control. Alternatively, you can use these methods in a complex binding scenario if you suppress <xref:System.Windows.Forms.BindingSource.ListChanged> events by setting the <xref:System.Windows.Forms.BindingSource.RaiseListChangedEvents%2A> property to `false`.\"\n  example:\n  - \"The following code example demonstrates how to use the SuspendBinding method.  \\n  \\n [!code-vb[BindingManagerBase_Suspend_Resume_Binding#1](~/add/codesnippet/visualbasic/m-system.windows.forms.c_69_1.vb)]\\n [!code-cs[BindingManagerBase_Suspend_Resume_Binding#1](~/add/codesnippet/csharp/m-system.windows.forms.c_69_1.cs)]\\n [!code-cpp[BindingManagerBase_Suspend_Resume_Binding#1](~/add/codesnippet/cpp/m-system.windows.forms.c_69_1.cpp)]\"\n  syntax:\n    content: public override void SuspendBinding ();\n    parameters: []\n  overload: System.Windows.Forms.CurrencyManager.SuspendBinding*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.CurrencyManager.UpdateIsBinding\n  id: UpdateIsBinding\n  parent: System.Windows.Forms.CurrencyManager\n  langs:\n  - csharp\n  name: UpdateIsBinding()\n  nameWithType: CurrencyManager.UpdateIsBinding()\n  fullName: System.Windows.Forms.CurrencyManager.UpdateIsBinding()\n  type: Method\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Updates the status of the binding.\n  syntax:\n    content: protected override void UpdateIsBinding ();\n    parameters: []\n  overload: System.Windows.Forms.CurrencyManager.UpdateIsBinding*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Windows.Forms.BindingManagerBase\n  isExternal: false\n  name: System.Windows.Forms.BindingManagerBase\n- uid: System.NotSupportedException\n  isExternal: true\n  name: System.NotSupportedException\n- uid: System.Exception\n  isExternal: true\n  name: System.Exception\n- uid: System.IndexOutOfRangeException\n  isExternal: true\n  name: System.IndexOutOfRangeException\n- uid: System.Windows.Forms.CurrencyManager.AddNew\n  parent: System.Windows.Forms.CurrencyManager\n  isExternal: false\n  name: AddNew()\n  nameWithType: CurrencyManager.AddNew()\n  fullName: System.Windows.Forms.CurrencyManager.AddNew()\n- uid: System.Windows.Forms.CurrencyManager.CancelCurrentEdit\n  parent: System.Windows.Forms.CurrencyManager\n  isExternal: false\n  name: CancelCurrentEdit()\n  nameWithType: CurrencyManager.CancelCurrentEdit()\n  fullName: System.Windows.Forms.CurrencyManager.CancelCurrentEdit()\n- uid: System.Windows.Forms.CurrencyManager.CheckEmpty\n  parent: System.Windows.Forms.CurrencyManager\n  isExternal: false\n  name: CheckEmpty()\n  nameWithType: CurrencyManager.CheckEmpty()\n  fullName: System.Windows.Forms.CurrencyManager.CheckEmpty()\n- uid: System.Windows.Forms.CurrencyManager.Count\n  parent: System.Windows.Forms.CurrencyManager\n  isExternal: false\n  name: Count\n  nameWithType: CurrencyManager.Count\n  fullName: System.Windows.Forms.CurrencyManager.Count\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Windows.Forms.CurrencyManager.Current\n  parent: System.Windows.Forms.CurrencyManager\n  isExternal: false\n  name: Current\n  nameWithType: CurrencyManager.Current\n  fullName: System.Windows.Forms.CurrencyManager.Current\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Windows.Forms.CurrencyManager.EndCurrentEdit\n  parent: System.Windows.Forms.CurrencyManager\n  isExternal: false\n  name: EndCurrentEdit()\n  nameWithType: CurrencyManager.EndCurrentEdit()\n  fullName: System.Windows.Forms.CurrencyManager.EndCurrentEdit()\n- uid: System.Windows.Forms.CurrencyManager.finalType\n  parent: System.Windows.Forms.CurrencyManager\n  isExternal: false\n  name: finalType\n  nameWithType: CurrencyManager.finalType\n  fullName: System.Windows.Forms.CurrencyManager.finalType\n- uid: System.Type\n  parent: System\n  isExternal: true\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Windows.Forms.CurrencyManager.GetItemProperties\n  parent: System.Windows.Forms.CurrencyManager\n  isExternal: false\n  name: GetItemProperties()\n  nameWithType: CurrencyManager.GetItemProperties()\n  fullName: System.Windows.Forms.CurrencyManager.GetItemProperties()\n- uid: System.ComponentModel.PropertyDescriptorCollection\n  parent: System.ComponentModel\n  isExternal: false\n  name: PropertyDescriptorCollection\n  nameWithType: PropertyDescriptorCollection\n  fullName: System.ComponentModel.PropertyDescriptorCollection\n- uid: System.Windows.Forms.CurrencyManager.GetListName(System.Collections.ArrayList)\n  parent: System.Windows.Forms.CurrencyManager\n  isExternal: false\n  name: GetListName(ArrayList)\n  nameWithType: CurrencyManager.GetListName(ArrayList)\n  fullName: System.Windows.Forms.CurrencyManager.GetListName(ArrayList)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Collections.ArrayList\n  parent: System.Collections\n  isExternal: false\n  name: ArrayList\n  nameWithType: ArrayList\n  fullName: System.Collections.ArrayList\n- uid: System.Windows.Forms.CurrencyManager.ItemChanged\n  parent: System.Windows.Forms.CurrencyManager\n  isExternal: false\n  name: ItemChanged\n  nameWithType: CurrencyManager.ItemChanged\n  fullName: System.Windows.Forms.CurrencyManager.ItemChanged\n- uid: System.Windows.Forms.ItemChangedEventHandler\n  parent: System.Windows.Forms\n  isExternal: false\n  name: ItemChangedEventHandler\n  nameWithType: ItemChangedEventHandler\n  fullName: System.Windows.Forms.ItemChangedEventHandler\n- uid: System.Windows.Forms.CurrencyManager.List\n  parent: System.Windows.Forms.CurrencyManager\n  isExternal: false\n  name: List\n  nameWithType: CurrencyManager.List\n  fullName: System.Windows.Forms.CurrencyManager.List\n- uid: System.Collections.IList\n  parent: System.Collections\n  isExternal: true\n  name: IList\n  nameWithType: IList\n  fullName: System.Collections.IList\n- uid: System.Windows.Forms.CurrencyManager.ListChanged\n  parent: System.Windows.Forms.CurrencyManager\n  isExternal: false\n  name: ListChanged\n  nameWithType: CurrencyManager.ListChanged\n  fullName: System.Windows.Forms.CurrencyManager.ListChanged\n- uid: System.ComponentModel.ListChangedEventHandler\n  parent: System.ComponentModel\n  isExternal: false\n  name: ListChangedEventHandler\n  nameWithType: ListChangedEventHandler\n  fullName: System.ComponentModel.ListChangedEventHandler\n- uid: System.Windows.Forms.CurrencyManager.listposition\n  parent: System.Windows.Forms.CurrencyManager\n  isExternal: false\n  name: listposition\n  nameWithType: CurrencyManager.listposition\n  fullName: System.Windows.Forms.CurrencyManager.listposition\n- uid: System.Windows.Forms.CurrencyManager.MetaDataChanged\n  parent: System.Windows.Forms.CurrencyManager\n  isExternal: false\n  name: MetaDataChanged\n  nameWithType: CurrencyManager.MetaDataChanged\n  fullName: System.Windows.Forms.CurrencyManager.MetaDataChanged\n- uid: System.EventHandler\n  parent: System\n  isExternal: true\n  name: EventHandler\n  nameWithType: EventHandler\n  fullName: System.EventHandler\n- uid: System.Windows.Forms.CurrencyManager.OnCurrentChanged(System.EventArgs)\n  parent: System.Windows.Forms.CurrencyManager\n  isExternal: false\n  name: OnCurrentChanged(EventArgs)\n  nameWithType: CurrencyManager.OnCurrentChanged(EventArgs)\n  fullName: System.Windows.Forms.CurrencyManager.OnCurrentChanged(EventArgs)\n- uid: System.EventArgs\n  parent: System\n  isExternal: true\n  name: EventArgs\n  nameWithType: EventArgs\n  fullName: System.EventArgs\n- uid: System.Windows.Forms.CurrencyManager.OnCurrentItemChanged(System.EventArgs)\n  parent: System.Windows.Forms.CurrencyManager\n  isExternal: false\n  name: OnCurrentItemChanged(EventArgs)\n  nameWithType: CurrencyManager.OnCurrentItemChanged(EventArgs)\n  fullName: System.Windows.Forms.CurrencyManager.OnCurrentItemChanged(EventArgs)\n- uid: System.Windows.Forms.CurrencyManager.OnItemChanged(System.Windows.Forms.ItemChangedEventArgs)\n  parent: System.Windows.Forms.CurrencyManager\n  isExternal: false\n  name: OnItemChanged(ItemChangedEventArgs)\n  nameWithType: CurrencyManager.OnItemChanged(ItemChangedEventArgs)\n  fullName: System.Windows.Forms.CurrencyManager.OnItemChanged(ItemChangedEventArgs)\n- uid: System.Windows.Forms.ItemChangedEventArgs\n  parent: System.Windows.Forms\n  isExternal: false\n  name: ItemChangedEventArgs\n  nameWithType: ItemChangedEventArgs\n  fullName: System.Windows.Forms.ItemChangedEventArgs\n- uid: System.Windows.Forms.CurrencyManager.OnMetaDataChanged(System.EventArgs)\n  parent: System.Windows.Forms.CurrencyManager\n  isExternal: false\n  name: OnMetaDataChanged(EventArgs)\n  nameWithType: CurrencyManager.OnMetaDataChanged(EventArgs)\n  fullName: System.Windows.Forms.CurrencyManager.OnMetaDataChanged(EventArgs)\n- uid: System.Windows.Forms.CurrencyManager.OnPositionChanged(System.EventArgs)\n  parent: System.Windows.Forms.CurrencyManager\n  isExternal: false\n  name: OnPositionChanged(EventArgs)\n  nameWithType: CurrencyManager.OnPositionChanged(EventArgs)\n  fullName: System.Windows.Forms.CurrencyManager.OnPositionChanged(EventArgs)\n- uid: System.Windows.Forms.CurrencyManager.Position\n  parent: System.Windows.Forms.CurrencyManager\n  isExternal: false\n  name: Position\n  nameWithType: CurrencyManager.Position\n  fullName: System.Windows.Forms.CurrencyManager.Position\n- uid: System.Windows.Forms.CurrencyManager.Refresh\n  parent: System.Windows.Forms.CurrencyManager\n  isExternal: false\n  name: Refresh()\n  nameWithType: CurrencyManager.Refresh()\n  fullName: System.Windows.Forms.CurrencyManager.Refresh()\n- uid: System.Windows.Forms.CurrencyManager.RemoveAt(System.Int32)\n  parent: System.Windows.Forms.CurrencyManager\n  isExternal: false\n  name: RemoveAt(Int32)\n  nameWithType: CurrencyManager.RemoveAt(Int32)\n  fullName: System.Windows.Forms.CurrencyManager.RemoveAt(Int32)\n- uid: System.Windows.Forms.CurrencyManager.ResumeBinding\n  parent: System.Windows.Forms.CurrencyManager\n  isExternal: false\n  name: ResumeBinding()\n  nameWithType: CurrencyManager.ResumeBinding()\n  fullName: System.Windows.Forms.CurrencyManager.ResumeBinding()\n- uid: System.Windows.Forms.CurrencyManager.SuspendBinding\n  parent: System.Windows.Forms.CurrencyManager\n  isExternal: false\n  name: SuspendBinding()\n  nameWithType: CurrencyManager.SuspendBinding()\n  fullName: System.Windows.Forms.CurrencyManager.SuspendBinding()\n- uid: System.Windows.Forms.CurrencyManager.UpdateIsBinding\n  parent: System.Windows.Forms.CurrencyManager\n  isExternal: false\n  name: UpdateIsBinding()\n  nameWithType: CurrencyManager.UpdateIsBinding()\n  fullName: System.Windows.Forms.CurrencyManager.UpdateIsBinding()\n- uid: System.Windows.Forms.CurrencyManager.AddNew*\n  parent: System.Windows.Forms.CurrencyManager\n  isExternal: false\n  name: AddNew\n  nameWithType: CurrencyManager.AddNew\n- uid: System.Windows.Forms.CurrencyManager.CancelCurrentEdit*\n  parent: System.Windows.Forms.CurrencyManager\n  isExternal: false\n  name: CancelCurrentEdit\n  nameWithType: CurrencyManager.CancelCurrentEdit\n- uid: System.Windows.Forms.CurrencyManager.CheckEmpty*\n  parent: System.Windows.Forms.CurrencyManager\n  isExternal: false\n  name: CheckEmpty\n  nameWithType: CurrencyManager.CheckEmpty\n- uid: System.Windows.Forms.CurrencyManager.Count*\n  parent: System.Windows.Forms.CurrencyManager\n  isExternal: false\n  name: Count\n  nameWithType: CurrencyManager.Count\n- uid: System.Windows.Forms.CurrencyManager.Current*\n  parent: System.Windows.Forms.CurrencyManager\n  isExternal: false\n  name: Current\n  nameWithType: CurrencyManager.Current\n- uid: System.Windows.Forms.CurrencyManager.EndCurrentEdit*\n  parent: System.Windows.Forms.CurrencyManager\n  isExternal: false\n  name: EndCurrentEdit\n  nameWithType: CurrencyManager.EndCurrentEdit\n- uid: System.Windows.Forms.CurrencyManager.GetItemProperties*\n  parent: System.Windows.Forms.CurrencyManager\n  isExternal: false\n  name: GetItemProperties\n  nameWithType: CurrencyManager.GetItemProperties\n- uid: System.Windows.Forms.CurrencyManager.GetListName*\n  parent: System.Windows.Forms.CurrencyManager\n  isExternal: false\n  name: GetListName\n  nameWithType: CurrencyManager.GetListName\n- uid: System.Windows.Forms.CurrencyManager.List*\n  parent: System.Windows.Forms.CurrencyManager\n  isExternal: false\n  name: List\n  nameWithType: CurrencyManager.List\n- uid: System.Windows.Forms.CurrencyManager.OnCurrentChanged*\n  parent: System.Windows.Forms.CurrencyManager\n  isExternal: false\n  name: OnCurrentChanged\n  nameWithType: CurrencyManager.OnCurrentChanged\n- uid: System.Windows.Forms.CurrencyManager.OnCurrentItemChanged*\n  parent: System.Windows.Forms.CurrencyManager\n  isExternal: false\n  name: OnCurrentItemChanged\n  nameWithType: CurrencyManager.OnCurrentItemChanged\n- uid: System.Windows.Forms.CurrencyManager.OnItemChanged*\n  parent: System.Windows.Forms.CurrencyManager\n  isExternal: false\n  name: OnItemChanged\n  nameWithType: CurrencyManager.OnItemChanged\n- uid: System.Windows.Forms.CurrencyManager.OnMetaDataChanged*\n  parent: System.Windows.Forms.CurrencyManager\n  isExternal: false\n  name: OnMetaDataChanged\n  nameWithType: CurrencyManager.OnMetaDataChanged\n- uid: System.Windows.Forms.CurrencyManager.OnPositionChanged*\n  parent: System.Windows.Forms.CurrencyManager\n  isExternal: false\n  name: OnPositionChanged\n  nameWithType: CurrencyManager.OnPositionChanged\n- uid: System.Windows.Forms.CurrencyManager.Position*\n  parent: System.Windows.Forms.CurrencyManager\n  isExternal: false\n  name: Position\n  nameWithType: CurrencyManager.Position\n- uid: System.Windows.Forms.CurrencyManager.Refresh*\n  parent: System.Windows.Forms.CurrencyManager\n  isExternal: false\n  name: Refresh\n  nameWithType: CurrencyManager.Refresh\n- uid: System.Windows.Forms.CurrencyManager.RemoveAt*\n  parent: System.Windows.Forms.CurrencyManager\n  isExternal: false\n  name: RemoveAt\n  nameWithType: CurrencyManager.RemoveAt\n- uid: System.Windows.Forms.CurrencyManager.ResumeBinding*\n  parent: System.Windows.Forms.CurrencyManager\n  isExternal: false\n  name: ResumeBinding\n  nameWithType: CurrencyManager.ResumeBinding\n- uid: System.Windows.Forms.CurrencyManager.SuspendBinding*\n  parent: System.Windows.Forms.CurrencyManager\n  isExternal: false\n  name: SuspendBinding\n  nameWithType: CurrencyManager.SuspendBinding\n- uid: System.Windows.Forms.CurrencyManager.UpdateIsBinding*\n  parent: System.Windows.Forms.CurrencyManager\n  isExternal: false\n  name: UpdateIsBinding\n  nameWithType: CurrencyManager.UpdateIsBinding\n"}