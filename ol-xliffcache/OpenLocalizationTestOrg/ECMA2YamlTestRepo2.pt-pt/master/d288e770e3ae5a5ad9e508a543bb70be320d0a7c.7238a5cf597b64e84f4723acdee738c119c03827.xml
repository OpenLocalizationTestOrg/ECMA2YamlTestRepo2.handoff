{"nodes":[{"pos":[599,656],"content":"Correlates traces that are part of a logical transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"Correlates traces that are part of a logical transaction.","pos":[0,57]}]},{"pos":[669,1728],"content":"Traces generated from a single logical operation can be tagged with an operation-unique identity, in order to distinguish them from traces from a different logical operation. For example, it may be useful to group correlated traces by ASP.NET request. The CorrelationManager class provides methods used to store a logical operation identity in a thread-bound context and automatically tag each trace event generated by the thread with the stored identity.       Logical operations can also be nested. The <xref:System.Diagnostics.CorrelationManager.LogicalOperationStack%2A> property exposes the stack of nested logical operation identities. Each call to the <xref:System.Diagnostics.CorrelationManager.StartLogicalOperation%2A> method pushes a new logical operation identity onto the stack. Each call to the <xref:System.Diagnostics.CorrelationManager.StopLogicalOperation%2A> method pops a logical operation identity off the stack.      > [!NOTE] >  Logical operation identities are objects, allowing the use of a type for a logical operation identity.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Traces generated from a single logical operation can be tagged with an operation-unique identity, in order to distinguish them from traces from a different logical operation.","pos":[0,174]},{"content":"For example, it may be useful to group correlated traces by ASP.NET request.","pos":[175,251]},{"content":"The CorrelationManager class provides methods used to store a logical operation identity in a thread-bound context and automatically tag each trace event generated by the thread with the stored identity.","pos":[252,455]},{"content":"Logical operations can also be nested.","pos":[462,500]},{"content":"The &lt;xref:System.Diagnostics.CorrelationManager.LogicalOperationStack%2A&gt; property exposes the stack of nested logical operation identities.","pos":[501,641],"source":" The <xref:System.Diagnostics.CorrelationManager.LogicalOperationStack%2A> property exposes the stack of nested logical operation identities."},{"content":"Each call to the &lt;xref:System.Diagnostics.CorrelationManager.StartLogicalOperation%2A&gt; method pushes a new logical operation identity onto the stack.","pos":[642,791],"source":" Each call to the <xref:System.Diagnostics.CorrelationManager.StartLogicalOperation%2A> method pushes a new logical operation identity onto the stack."},{"content":"Each call to the &lt;xref:System.Diagnostics.CorrelationManager.StopLogicalOperation%2A&gt; method pops a logical operation identity off the stack.","pos":[792,933],"source":" Each call to the <xref:System.Diagnostics.CorrelationManager.StopLogicalOperation%2A> method pops a logical operation identity off the stack."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Logical operation identities are objects, allowing the use of a type for a logical operation identity.","pos":[939,1054],"source":"      > [!NOTE] >  Logical operation identities are objects, allowing the use of a type for a logical operation identity."}]},{"pos":[2885,2933],"content":"Gets or sets the identity for a global activity.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the identity for a global activity.","pos":[0,48]}]},{"pos":[2945,3310],"content":"The ActivityId property gets and sets the global activity identity in the <xref:System.Runtime.Remoting.Messaging.CallContext> for the thread. The ActivityId is used for trace transfer operations in trace listeners that override the <xref:System.Diagnostics.TraceListener.TraceTransfer%2A> method, such as the <xref:System.Diagnostics.XmlWriterTraceListener> class.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The ActivityId property gets and sets the global activity identity in the <xref:System.Runtime.Remoting.Messaging.CallContext> for the thread. The ActivityId is used for trace transfer operations in trace listeners that override the <xref:System.Diagnostics.TraceListener.TraceTransfer%2A> method, such as the <xref:System.Diagnostics.XmlWriterTraceListener> class.","pos":[0,365],"nodes":[{"content":"The ActivityId property gets and sets the global activity identity in the &lt;xref:System.Runtime.Remoting.Messaging.CallContext&gt; for the thread.","pos":[0,142],"source":"The ActivityId property gets and sets the global activity identity in the <xref:System.Runtime.Remoting.Messaging.CallContext> for the thread."},{"content":"The ActivityId is used for trace transfer operations in trace listeners that override the &lt;xref:System.Diagnostics.TraceListener.TraceTransfer%2A&gt; method, such as the &lt;xref:System.Diagnostics.XmlWriterTraceListener&gt; class.","pos":[143,365],"source":" The ActivityId is used for trace transfer operations in trace listeners that override the <xref:System.Diagnostics.TraceListener.TraceTransfer%2A> method, such as the <xref:System.Diagnostics.XmlWriterTraceListener> class."}]}]},{"pos":[3426,3493],"content":"A <xref:System.Guid> structure that identifies the global activity.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Guid&gt; structure that identifies the global activity.","pos":[0,67],"source":"A <xref:System.Guid> structure that identifies the global activity."}]},{"pos":[4003,4058],"content":"Gets the logical operation stack from the call context.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the logical operation stack from the call context.","pos":[0,55]}]},{"pos":[4070,4395],"content":"Each call to the <xref:System.Diagnostics.CorrelationManager.StartLogicalOperation%2A> method pushes a new logical operation identity onto the LogicalOperationStack property's stack. Each call to the <xref:System.Diagnostics.CorrelationManager.StopLogicalOperation%2A> method pops a logical operation identity from the stack.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Each call to the <xref:System.Diagnostics.CorrelationManager.StartLogicalOperation%2A> method pushes a new logical operation identity onto the LogicalOperationStack property's stack. Each call to the <xref:System.Diagnostics.CorrelationManager.StopLogicalOperation%2A> method pops a logical operation identity from the stack.","pos":[0,325],"nodes":[{"content":"Each call to the &lt;xref:System.Diagnostics.CorrelationManager.StartLogicalOperation%2A&gt; method pushes a new logical operation identity onto the LogicalOperationStack property's stack.","pos":[0,182],"source":"Each call to the <xref:System.Diagnostics.CorrelationManager.StartLogicalOperation%2A> method pushes a new logical operation identity onto the LogicalOperationStack property's stack."},{"content":"Each call to the &lt;xref:System.Diagnostics.CorrelationManager.StopLogicalOperation%2A&gt; method pops a logical operation identity from the stack.","pos":[183,325],"source":" Each call to the <xref:System.Diagnostics.CorrelationManager.StopLogicalOperation%2A> method pops a logical operation identity from the stack."}]}]},{"pos":[4550,4670],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Collections.Stack\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that represents the logical operation stack for the call context.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Collections.Stack\"></xref> object that represents the logical operation stack for the call context."},{"pos":[5195,5234],"content":"Starts a logical operation on a thread.","needQuote":true,"needEscape":true,"nodes":[{"content":"Starts a logical operation on a thread.","pos":[0,39]}]},{"pos":[5246,5352],"content":"The logical operation is started using an automatically generated GUID for a logical operation identifier.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The logical operation is started using an automatically generated GUID for a logical operation identifier.","pos":[0,106]}]},{"pos":[6005,6072],"content":"Starts a logical operation with the specified identity on a thread.","needQuote":true,"needEscape":true,"nodes":[{"content":"Starts a logical operation with the specified identity on a thread.","pos":[0,67]}]},{"pos":[6084,6362],"content":"The `operationId` parameter can be any object, such as a <xref:System.String> that allows the operation to be identified for tracing purposes. The object represented by `operationId` is added to the <xref:System.Diagnostics.CorrelationManager.LogicalOperationStack%2A> property.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <ph id=\"ph1\">`operationId`</ph> parameter can be any object, such as a &lt;xref:System.String&gt; that allows the operation to be identified for tracing purposes.","pos":[0,142],"source":"The `operationId` parameter can be any object, such as a <xref:System.String> that allows the operation to be identified for tracing purposes."},{"content":"The object represented by <ph id=\"ph1\">`operationId`</ph> is added to the &lt;xref:System.Diagnostics.CorrelationManager.LogicalOperationStack%2A&gt; property.","pos":[143,278],"source":" The object represented by `operationId` is added to the <xref:System.Diagnostics.CorrelationManager.LogicalOperationStack%2A> property."}]},{"pos":[7023,7059],"content":"An object identifying the operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object identifying the operation.","pos":[0,36]}]},{"pos":[7249,7352],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">operationId</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>operationId</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[7782,7818],"content":"Stops the current logical operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Stops the current logical operation.","pos":[0,36]}]},{"pos":[7830,7996],"content":"The logical operation is halted and the logical operation identity is removed from the <xref:System.Diagnostics.CorrelationManager.LogicalOperationStack%2A> property.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The logical operation is halted and the logical operation identity is removed from the &lt;xref:System.Diagnostics.CorrelationManager.LogicalOperationStack%2A&gt; property.","pos":[0,166],"source":"The logical operation is halted and the logical operation identity is removed from the <xref:System.Diagnostics.CorrelationManager.LogicalOperationStack%2A> property."}]},{"pos":[8272,8371],"content":"The <xref:System.Diagnostics.CorrelationManager.LogicalOperationStack*> property is an empty stack.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Diagnostics.CorrelationManager.LogicalOperationStack*&gt; property is an empty stack.","pos":[0,99],"source":"The <xref:System.Diagnostics.CorrelationManager.LogicalOperationStack*> property is an empty stack."}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Diagnostics.CorrelationManager\n  id: CorrelationManager\n  children:\n  - System.Diagnostics.CorrelationManager.ActivityId\n  - System.Diagnostics.CorrelationManager.LogicalOperationStack\n  - System.Diagnostics.CorrelationManager.StartLogicalOperation\n  - System.Diagnostics.CorrelationManager.StartLogicalOperation(System.Object)\n  - System.Diagnostics.CorrelationManager.StopLogicalOperation\n  langs:\n  - csharp\n  name: CorrelationManager\n  nameWithType: CorrelationManager\n  fullName: System.Diagnostics.CorrelationManager\n  type: Class\n  summary: Correlates traces that are part of a logical transaction.\n  remarks: \"Traces generated from a single logical operation can be tagged with an operation-unique identity, in order to distinguish them from traces from a different logical operation. For example, it may be useful to group correlated traces by ASP.NET request. The CorrelationManager class provides methods used to store a logical operation identity in a thread-bound context and automatically tag each trace event generated by the thread with the stored identity.  \\n  \\n Logical operations can also be nested. The <xref:System.Diagnostics.CorrelationManager.LogicalOperationStack%2A> property exposes the stack of nested logical operation identities. Each call to the <xref:System.Diagnostics.CorrelationManager.StartLogicalOperation%2A> method pushes a new logical operation identity onto the stack. Each call to the <xref:System.Diagnostics.CorrelationManager.StopLogicalOperation%2A> method pops a logical operation identity off the stack.  \\n  \\n> [!NOTE]\\n>  Logical operation identities are objects, allowing the use of a type for a logical operation identity.\"\n  example:\n  - \"The following code example demonstrates the use of the CorrelationManager class by identifying the logical operation associated with a traced event. Two logical operations are started, one in the main thread and the other in a worker thread. An error event is logged in both logical operations.  \\n  \\n [!code-cpp[System.Diagnostics.CorrelationManager#1](~/add/codesnippet/cpp/t-system.diagnostics.cor_1.cpp)]\\n [!code-cs[System.Diagnostics.CorrelationManager#1](~/add/codesnippet/csharp/t-system.diagnostics.cor_1.cs)]\\n [!code-vb[System.Diagnostics.CorrelationManager#1](~/add/codesnippet/visualbasic/t-system.diagnostics.cor_1.vb)]\"\n  syntax:\n    content: public class CorrelationManager\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Diagnostics.CorrelationManager.ActivityId\n  id: ActivityId\n  parent: System.Diagnostics.CorrelationManager\n  langs:\n  - csharp\n  name: ActivityId\n  nameWithType: CorrelationManager.ActivityId\n  fullName: System.Diagnostics.CorrelationManager.ActivityId\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Gets or sets the identity for a global activity.\n  remarks: The ActivityId property gets and sets the global activity identity in the <xref:System.Runtime.Remoting.Messaging.CallContext> for the thread. The ActivityId is used for trace transfer operations in trace listeners that override the <xref:System.Diagnostics.TraceListener.TraceTransfer%2A> method, such as the <xref:System.Diagnostics.XmlWriterTraceListener> class.\n  syntax:\n    content: public Guid ActivityId { get; set; }\n    return:\n      type: System.Guid\n      description: A <xref:System.Guid> structure that identifies the global activity.\n  overload: System.Diagnostics.CorrelationManager.ActivityId*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.CorrelationManager.LogicalOperationStack\n  id: LogicalOperationStack\n  parent: System.Diagnostics.CorrelationManager\n  langs:\n  - csharp\n  name: LogicalOperationStack\n  nameWithType: CorrelationManager.LogicalOperationStack\n  fullName: System.Diagnostics.CorrelationManager.LogicalOperationStack\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Gets the logical operation stack from the call context.\n  remarks: Each call to the <xref:System.Diagnostics.CorrelationManager.StartLogicalOperation%2A> method pushes a new logical operation identity onto the LogicalOperationStack property's stack. Each call to the <xref:System.Diagnostics.CorrelationManager.StopLogicalOperation%2A> method pops a logical operation identity from the stack.\n  syntax:\n    content: public System.Collections.Stack LogicalOperationStack { get; }\n    return:\n      type: System.Collections.Stack\n      description: A <xref href=\"System.Collections.Stack\"></xref> object that represents the logical operation stack for the call context.\n  overload: System.Diagnostics.CorrelationManager.LogicalOperationStack*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.CorrelationManager.StartLogicalOperation\n  id: StartLogicalOperation\n  parent: System.Diagnostics.CorrelationManager\n  langs:\n  - csharp\n  name: StartLogicalOperation()\n  nameWithType: CorrelationManager.StartLogicalOperation()\n  fullName: System.Diagnostics.CorrelationManager.StartLogicalOperation()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Starts a logical operation on a thread.\n  remarks: The logical operation is started using an automatically generated GUID for a logical operation identifier.\n  syntax:\n    content: public void StartLogicalOperation ();\n    parameters: []\n  overload: System.Diagnostics.CorrelationManager.StartLogicalOperation*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.CorrelationManager.StartLogicalOperation(System.Object)\n  id: StartLogicalOperation(System.Object)\n  parent: System.Diagnostics.CorrelationManager\n  langs:\n  - csharp\n  name: StartLogicalOperation(Object)\n  nameWithType: CorrelationManager.StartLogicalOperation(Object)\n  fullName: System.Diagnostics.CorrelationManager.StartLogicalOperation(Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Starts a logical operation with the specified identity on a thread.\n  remarks: The `operationId` parameter can be any object, such as a <xref:System.String> that allows the operation to be identified for tracing purposes. The object represented by `operationId` is added to the <xref:System.Diagnostics.CorrelationManager.LogicalOperationStack%2A> property.\n  example:\n  - \"The following code example demonstrates the use of the StartLogicalOperation method by initializing a logical operation to be associated with the main thread. For the complete code example, see the <xref:System.Diagnostics.CorrelationManager> class.  \\n  \\n [!code-cs[System.Diagnostics.CorrelationManager#2](~/add/codesnippet/csharp/m-system.diagnostics.cor_1.cs)]\\n [!code-vb[System.Diagnostics.CorrelationManager#2](~/add/codesnippet/visualbasic/m-system.diagnostics.cor_1.vb)]\"\n  syntax:\n    content: public void StartLogicalOperation (object operationId);\n    parameters:\n    - id: operationId\n      type: System.Object\n      description: An object identifying the operation.\n  overload: System.Diagnostics.CorrelationManager.StartLogicalOperation*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>operationId</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Diagnostics.CorrelationManager.StopLogicalOperation\n  id: StopLogicalOperation\n  parent: System.Diagnostics.CorrelationManager\n  langs:\n  - csharp\n  name: StopLogicalOperation()\n  nameWithType: CorrelationManager.StopLogicalOperation()\n  fullName: System.Diagnostics.CorrelationManager.StopLogicalOperation()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Stops the current logical operation.\n  remarks: The logical operation is halted and the logical operation identity is removed from the <xref:System.Diagnostics.CorrelationManager.LogicalOperationStack%2A> property.\n  syntax:\n    content: public void StopLogicalOperation ();\n    parameters: []\n  overload: System.Diagnostics.CorrelationManager.StopLogicalOperation*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The <xref:System.Diagnostics.CorrelationManager.LogicalOperationStack*> property is an empty stack.\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.Diagnostics.CorrelationManager.ActivityId\n  parent: System.Diagnostics.CorrelationManager\n  isExternal: false\n  name: ActivityId\n  nameWithType: CorrelationManager.ActivityId\n  fullName: System.Diagnostics.CorrelationManager.ActivityId\n- uid: System.Guid\n  parent: System\n  isExternal: true\n  name: Guid\n  nameWithType: Guid\n  fullName: System.Guid\n- uid: System.Diagnostics.CorrelationManager.LogicalOperationStack\n  parent: System.Diagnostics.CorrelationManager\n  isExternal: false\n  name: LogicalOperationStack\n  nameWithType: CorrelationManager.LogicalOperationStack\n  fullName: System.Diagnostics.CorrelationManager.LogicalOperationStack\n- uid: System.Collections.Stack\n  parent: System.Collections\n  isExternal: false\n  name: Stack\n  nameWithType: Stack\n  fullName: System.Collections.Stack\n- uid: System.Diagnostics.CorrelationManager.StartLogicalOperation\n  parent: System.Diagnostics.CorrelationManager\n  isExternal: false\n  name: StartLogicalOperation()\n  nameWithType: CorrelationManager.StartLogicalOperation()\n  fullName: System.Diagnostics.CorrelationManager.StartLogicalOperation()\n- uid: System.Diagnostics.CorrelationManager.StartLogicalOperation(System.Object)\n  parent: System.Diagnostics.CorrelationManager\n  isExternal: false\n  name: StartLogicalOperation(Object)\n  nameWithType: CorrelationManager.StartLogicalOperation(Object)\n  fullName: System.Diagnostics.CorrelationManager.StartLogicalOperation(Object)\n- uid: System.Diagnostics.CorrelationManager.StopLogicalOperation\n  parent: System.Diagnostics.CorrelationManager\n  isExternal: false\n  name: StopLogicalOperation()\n  nameWithType: CorrelationManager.StopLogicalOperation()\n  fullName: System.Diagnostics.CorrelationManager.StopLogicalOperation()\n- uid: System.Diagnostics.CorrelationManager.ActivityId*\n  parent: System.Diagnostics.CorrelationManager\n  isExternal: false\n  name: ActivityId\n  nameWithType: CorrelationManager.ActivityId\n- uid: System.Diagnostics.CorrelationManager.LogicalOperationStack*\n  parent: System.Diagnostics.CorrelationManager\n  isExternal: false\n  name: LogicalOperationStack\n  nameWithType: CorrelationManager.LogicalOperationStack\n- uid: System.Diagnostics.CorrelationManager.StartLogicalOperation*\n  parent: System.Diagnostics.CorrelationManager\n  isExternal: false\n  name: StartLogicalOperation\n  nameWithType: CorrelationManager.StartLogicalOperation\n- uid: System.Diagnostics.CorrelationManager.StopLogicalOperation*\n  parent: System.Diagnostics.CorrelationManager\n  isExternal: false\n  name: StopLogicalOperation\n  nameWithType: CorrelationManager.StopLogicalOperation\n"}