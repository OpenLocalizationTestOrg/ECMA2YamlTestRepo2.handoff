{"nodes":[{"pos":[1463,1581],"content":"Exposes a stream around an anonymous pipe, which supports both synchronous and asynchronous read and write operations.","needQuote":true,"needEscape":true,"nodes":[{"content":"Exposes a stream around an anonymous pipe, which supports both synchronous and asynchronous read and write operations.","pos":[0,118]}]},{"pos":[1594,3111],"content":"Anonymous pipes help provide safe and secure interprocess communication between child and parent processes. The AnonymousPipeServerStream class enables a parent process to send or receive information from a child process.       Anonymous pipes are unnamed, one-way pipes that typically transfer data between parent and child processes. Anonymous pipes are always local; they cannot be used over a network. A <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection> is not supported because anonymous pipes are defined to be one-way.       Anonymous pipes do not support <xref:System.IO.Pipes.PipeTransmissionMode> read modes.       The client side of an anonymous pipe must be created from a pipe handle provided by the server side by calling the <xref:System.IO.Pipes.AnonymousPipeServerStream.GetClientHandleAsString%2A> method. The string is then passed as a parameter when creating the client process. From the client process, it is then passed to the <xref:System.IO.Pipes.AnonymousPipeClientStream> constructor as the `pipeHandleAsString` parameter.       The AnonymousPipeServerStream object must dispose the client handle using the <xref:System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle%2A> method in order to be notified when the client exits.      > [!NOTE] >  For [!INCLUDE[winxppro](~/add/includes/winxppro-md.md)] and [!INCLUDE[win2kserver](~/add/includes/win2kserver-md.md)], a maximum of 10 pipes can simultaneously connect over the network.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Anonymous pipes help provide safe and secure interprocess communication between child and parent processes.","pos":[0,107]},{"content":"The AnonymousPipeServerStream class enables a parent process to send or receive information from a child process.","pos":[108,221]},{"content":"Anonymous pipes are unnamed, one-way pipes that typically transfer data between parent and child processes.","pos":[228,335]},{"content":"Anonymous pipes are always local; they cannot be used over a network.","pos":[336,405]},{"content":"A &lt;xref:System.IO.Pipes.PipeDirection&gt; value of &lt;xref:System.IO.Pipes.PipeDirection&gt; is not supported because anonymous pipes are defined to be one-way.","pos":[406,558],"source":" A <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection> is not supported because anonymous pipes are defined to be one-way."},{"content":"Anonymous pipes do not support &lt;xref:System.IO.Pipes.PipeTransmissionMode&gt; read modes.","pos":[565,651],"source":"       Anonymous pipes do not support <xref:System.IO.Pipes.PipeTransmissionMode> read modes."},{"content":"The client side of an anonymous pipe must be created from a pipe handle provided by the server side by calling the &lt;xref:System.IO.Pipes.AnonymousPipeServerStream.GetClientHandleAsString%2A&gt; method.","pos":[658,856],"source":"       The client side of an anonymous pipe must be created from a pipe handle provided by the server side by calling the <xref:System.IO.Pipes.AnonymousPipeServerStream.GetClientHandleAsString%2A> method."},{"content":"The string is then passed as a parameter when creating the client process.","pos":[857,931]},{"content":"From the client process, it is then passed to the &lt;xref:System.IO.Pipes.AnonymousPipeClientStream&gt; constructor as the <ph id=\"ph1\">`pipeHandleAsString`</ph> parameter.","pos":[932,1081],"source":" From the client process, it is then passed to the <xref:System.IO.Pipes.AnonymousPipeClientStream> constructor as the `pipeHandleAsString` parameter."},{"content":"The AnonymousPipeServerStream object must dispose the client handle using the &lt;xref:System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle%2A&gt; method in order to be notified when the client exits.","pos":[1088,1302],"source":"       The AnonymousPipeServerStream object must dispose the client handle using the <xref:System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle%2A> method in order to be notified when the client exits."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  For <ph id=\"ph2\">[!INCLUDE[winxppro](~/add/includes/winxppro-md.md)]</ph> and <ph id=\"ph3\">[!INCLUDE[win2kserver](~/add/includes/win2kserver-md.md)]</ph>, a maximum of 10 pipes can simultaneously connect over the network.","pos":[1308,1506],"source":"      > [!NOTE] >  For [!INCLUDE[winxppro](~/add/includes/winxppro-md.md)] and [!INCLUDE[win2kserver](~/add/includes/win2kserver-md.md)], a maximum of 10 pipes can simultaneously connect over the network."}]},{"pos":[6775,6878],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"></xref> class."},{"pos":[6891,7466],"content":"For <xref:System.IO.Pipes.AnonymousPipeServerStream> constructors without a <xref:System.IO.Pipes.PipeDirection> parameter, the default direction is <xref:System.IO.Pipes.PipeDirection>. A <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection> is not supported because anonymous pipes are defined to be one-way.       This constructor creates an <xref:System.IO.Pipes.AnonymousPipeServerStream> object that has the default buffer size, no pipe security, and a <xref:System.IO.HandleInheritability> value of <xref:System.IO.HandleInheritability>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"For <xref:System.IO.Pipes.AnonymousPipeServerStream> constructors without a <xref:System.IO.Pipes.PipeDirection> parameter, the default direction is <xref:System.IO.Pipes.PipeDirection>. A <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection> is not supported because anonymous pipes are defined to be one-way.       This constructor creates an <xref:System.IO.Pipes.AnonymousPipeServerStream> object that has the default buffer size, no pipe security, and a <xref:System.IO.HandleInheritability> value of <xref:System.IO.HandleInheritability>.","pos":[0,573],"nodes":[{"content":"For &lt;xref:System.IO.Pipes.AnonymousPipeServerStream&gt; constructors without a &lt;xref:System.IO.Pipes.PipeDirection&gt; parameter, the default direction is &lt;xref:System.IO.Pipes.PipeDirection&gt;.","pos":[0,186],"source":"For <xref:System.IO.Pipes.AnonymousPipeServerStream> constructors without a <xref:System.IO.Pipes.PipeDirection> parameter, the default direction is <xref:System.IO.Pipes.PipeDirection>."},{"content":"A &lt;xref:System.IO.Pipes.PipeDirection&gt; value of &lt;xref:System.IO.Pipes.PipeDirection&gt; is not supported because anonymous pipes are defined to be one-way.","pos":[187,339],"source":" A <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection> is not supported because anonymous pipes are defined to be one-way."},{"content":"This constructor creates an &lt;xref:System.IO.Pipes.AnonymousPipeServerStream&gt; object that has the default buffer size, no pipe security, and a &lt;xref:System.IO.HandleInheritability&gt; value of &lt;xref:System.IO.HandleInheritability&gt;.","pos":[346,573],"source":"       This constructor creates an <xref:System.IO.Pipes.AnonymousPipeServerStream> object that has the default buffer size, no pipe security, and a <xref:System.IO.HandleInheritability> value of <xref:System.IO.HandleInheritability>."}]}]},{"pos":[8168,8305],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified pipe direction.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"></xref> class with the specified pipe direction."},{"pos":[8318,8706],"content":"A <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection> is not supported because anonymous pipes are defined to be one-way.       This constructor creates an <xref:System.IO.Pipes.AnonymousPipeServerStream> object that has the default buffer size, no pipe security, and a <xref:System.IO.HandleInheritability> value of <xref:System.IO.HandleInheritability>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"A <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection> is not supported because anonymous pipes are defined to be one-way.       This constructor creates an <xref:System.IO.Pipes.AnonymousPipeServerStream> object that has the default buffer size, no pipe security, and a <xref:System.IO.HandleInheritability> value of <xref:System.IO.HandleInheritability>.","pos":[0,386],"nodes":[{"content":"A &lt;xref:System.IO.Pipes.PipeDirection&gt; value of &lt;xref:System.IO.Pipes.PipeDirection&gt; is not supported because anonymous pipes are defined to be one-way.","pos":[0,152],"source":"A <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection> is not supported because anonymous pipes are defined to be one-way."},{"content":"This constructor creates an &lt;xref:System.IO.Pipes.AnonymousPipeServerStream&gt; object that has the default buffer size, no pipe security, and a &lt;xref:System.IO.HandleInheritability&gt; value of &lt;xref:System.IO.HandleInheritability&gt;.","pos":[159,386],"source":"       This constructor creates an <xref:System.IO.Pipes.AnonymousPipeServerStream> object that has the default buffer size, no pipe security, and a <xref:System.IO.HandleInheritability> value of <xref:System.IO.HandleInheritability>."}]}]},{"pos":[8905,9117],"content":"One of the enumeration values that determines the direction of the pipe.       Anonymous pipes can only be in one direction, so `direction` cannot be set to <xref href=\"System.IO.Pipes.PipeDirection\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"One of the enumeration values that determines the direction of the pipe.","pos":[0,72]},{"content":"Anonymous pipes can only be in one direction, so <ph id=\"ph1\">`direction`</ph> cannot be set to <bpt id=\"p1\">&lt;xref href=\"System.IO.Pipes.PipeDirection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[79,208],"source":"       Anonymous pipes can only be in one direction, so `direction` cannot be set to <xref href=\"System.IO.Pipes.PipeDirection\"></xref>."}]},{"pos":[9296,9380],"content":"<ph id=\"ph1\">&lt;code&gt;direction&lt;/code&gt;</ph> is set to <bpt id=\"p1\">&lt;xref href=\"System.IO.Pipes.PipeDirection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>direction</code> is set to <xref href=\"System.IO.Pipes.PipeDirection\"></xref>."},{"pos":[10049,10210],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified pipe direction and inheritability mode.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"></xref> class with the specified pipe direction and inheritability mode."},{"pos":[10223,10522],"content":"A <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection> is not supported because anonymous pipes are defined to be one-way.       This constructor creates an <xref:System.IO.Pipes.AnonymousPipeServerStream> object that has the default buffer size and no pipe security.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"A <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection> is not supported because anonymous pipes are defined to be one-way.       This constructor creates an <xref:System.IO.Pipes.AnonymousPipeServerStream> object that has the default buffer size and no pipe security.","pos":[0,297],"nodes":[{"content":"A &lt;xref:System.IO.Pipes.PipeDirection&gt; value of &lt;xref:System.IO.Pipes.PipeDirection&gt; is not supported because anonymous pipes are defined to be one-way.","pos":[0,152],"source":"A <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection> is not supported because anonymous pipes are defined to be one-way."},{"content":"This constructor creates an &lt;xref:System.IO.Pipes.AnonymousPipeServerStream&gt; object that has the default buffer size and no pipe security.","pos":[159,297],"source":"       This constructor creates an <xref:System.IO.Pipes.AnonymousPipeServerStream> object that has the default buffer size and no pipe security."}]}]},{"pos":[11484,11696],"content":"One of the enumeration values that determines the direction of the pipe.       Anonymous pipes can only be in one direction, so `direction` cannot be set to <xref href=\"System.IO.Pipes.PipeDirection\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"One of the enumeration values that determines the direction of the pipe.","pos":[0,72]},{"content":"Anonymous pipes can only be in one direction, so <ph id=\"ph1\">`direction`</ph> cannot be set to <bpt id=\"p1\">&lt;xref href=\"System.IO.Pipes.PipeDirection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[79,208],"source":"       Anonymous pipes can only be in one direction, so `direction` cannot be set to <xref href=\"System.IO.Pipes.PipeDirection\"></xref>."}]},{"pos":[11785,11999],"content":"One of the enumeration values that determines whether the underlying handle can be inherited by child processes. Must be set to either <xref:System.IO.HandleInheritability> or <xref:System.IO.HandleInheritability>.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the enumeration values that determines whether the underlying handle can be inherited by child processes. Must be set to either <xref:System.IO.HandleInheritability> or <xref:System.IO.HandleInheritability>.","pos":[0,214],"nodes":[{"content":"One of the enumeration values that determines whether the underlying handle can be inherited by child processes.","pos":[0,112]},{"content":"Must be set to either &lt;xref:System.IO.HandleInheritability&gt; or &lt;xref:System.IO.HandleInheritability&gt;.","pos":[113,214],"source":" Must be set to either <xref:System.IO.HandleInheritability> or <xref:System.IO.HandleInheritability>."}]}]},{"pos":[12189,12317],"content":"<ph id=\"ph1\">&lt;code&gt;inheritability&lt;/code&gt;</ph> is not set to either <ph id=\"ph2\">&lt;xref:System.IO.HandleInheritability&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.IO.HandleInheritability&gt;</ph>.","needQuote":true,"needEscape":true,"source":"<code>inheritability</code> is not set to either <xref:System.IO.HandleInheritability> or <xref:System.IO.HandleInheritability>."},{"pos":[12420,12504],"content":"<ph id=\"ph1\">&lt;code&gt;direction&lt;/code&gt;</ph> is set to <bpt id=\"p1\">&lt;xref href=\"System.IO.Pipes.PipeDirection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>direction</code> is set to <xref href=\"System.IO.Pipes.PipeDirection\"></xref>."},{"pos":[13310,13445],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class from the specified pipe handles.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"></xref> class from the specified pipe handles."},{"pos":[13457,13609],"content":"A <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection> is not supported because anonymous pipes are defined to be one-way.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"A &lt;xref:System.IO.Pipes.PipeDirection&gt; value of &lt;xref:System.IO.Pipes.PipeDirection&gt; is not supported because anonymous pipes are defined to be one-way.","pos":[0,152],"source":"A <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection> is not supported because anonymous pipes are defined to be one-way."}]},{"pos":[13937,14149],"content":"One of the enumeration values that determines the direction of the pipe.       Anonymous pipes can only be in one direction, so `direction` cannot be set to <xref href=\"System.IO.Pipes.PipeDirection\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"One of the enumeration values that determines the direction of the pipe.","pos":[0,72]},{"content":"Anonymous pipes can only be in one direction, so <ph id=\"ph1\">`direction`</ph> cannot be set to <bpt id=\"p1\">&lt;xref href=\"System.IO.Pipes.PipeDirection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[79,208],"source":"       Anonymous pipes can only be in one direction, so `direction` cannot be set to <xref href=\"System.IO.Pipes.PipeDirection\"></xref>."}]},{"pos":[14256,14380],"content":"A safe handle for the pipe that this <bpt id=\"p1\">&lt;xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object will encapsulate.","needQuote":true,"needEscape":true,"source":"A safe handle for the pipe that this <xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"></xref> object will encapsulate."},{"pos":[14486,14578],"content":"A safe handle for the <bpt id=\"p1\">&lt;xref href=\"System.IO.Pipes.AnonymousPipeClientStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"A safe handle for the <xref href=\"System.IO.Pipes.AnonymousPipeClientStream\"></xref> object."},{"pos":[14748,14840],"content":"<ph id=\"ph1\">&lt;code&gt;serverSafePipeHandle&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;clientSafePipeHandle&lt;/code&gt;</ph> is an invalid handle.","needQuote":true,"needEscape":true,"source":"<code>serverSafePipeHandle</code> or <code>clientSafePipeHandle</code> is an invalid handle."},{"pos":[14943,15078],"content":"<ph id=\"ph1\">&lt;code&gt;serverSafePipeHandle&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;clientSafePipeHandle&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>serverSafePipeHandle</code> or <code>clientSafePipeHandle</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[15181,15265],"content":"<ph id=\"ph1\">&lt;code&gt;direction&lt;/code&gt;</ph> is set to <bpt id=\"p1\">&lt;xref href=\"System.IO.Pipes.PipeDirection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>direction</code> is set to <xref href=\"System.IO.Pipes.PipeDirection\"></xref>."},{"pos":[15355,15453],"content":"An I/O error, such as a disk error, has occurred.       -or-       The stream has been closed.","needQuote":false,"needEscape":true,"nodes":[{"content":"An I/O error, such as a disk error, has occurred.       -or-       The stream has been closed.","pos":[0,94],"nodes":[{"content":"An I/O error, such as a disk error, has occurred.","pos":[0,49]},{"content":"-or-       The stream has been closed.","pos":[56,94]}]}]},{"pos":[16167,16342],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified pipe direction, inheritability mode, and buffer size.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"></xref> class with the specified pipe direction, inheritability mode, and buffer size."},{"pos":[16355,16622],"content":"A <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection> is not supported because anonymous pipes are defined to be one-way.       This constructor creates an <xref:System.IO.Pipes.AnonymousPipeServerStream> object without pipe security.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"A <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection> is not supported because anonymous pipes are defined to be one-way.       This constructor creates an <xref:System.IO.Pipes.AnonymousPipeServerStream> object without pipe security.","pos":[0,265],"nodes":[{"content":"A &lt;xref:System.IO.Pipes.PipeDirection&gt; value of &lt;xref:System.IO.Pipes.PipeDirection&gt; is not supported because anonymous pipes are defined to be one-way.","pos":[0,152],"source":"A <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection> is not supported because anonymous pipes are defined to be one-way."},{"content":"This constructor creates an &lt;xref:System.IO.Pipes.AnonymousPipeServerStream&gt; object without pipe security.","pos":[159,265],"source":"       This constructor creates an <xref:System.IO.Pipes.AnonymousPipeServerStream> object without pipe security."}]}]},{"pos":[16884,17096],"content":"One of the enumeration values that determines the direction of the pipe.       Anonymous pipes can only be in one direction, so `direction` cannot be set to <xref href=\"System.IO.Pipes.PipeDirection\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"One of the enumeration values that determines the direction of the pipe.","pos":[0,72]},{"content":"Anonymous pipes can only be in one direction, so <ph id=\"ph1\">`direction`</ph> cannot be set to <bpt id=\"p1\">&lt;xref href=\"System.IO.Pipes.PipeDirection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[79,208],"source":"       Anonymous pipes can only be in one direction, so `direction` cannot be set to <xref href=\"System.IO.Pipes.PipeDirection\"></xref>."}]},{"pos":[17185,17399],"content":"One of the enumeration values that determines whether the underlying handle can be inherited by child processes. Must be set to either <xref:System.IO.HandleInheritability> or <xref:System.IO.HandleInheritability>.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the enumeration values that determines whether the underlying handle can be inherited by child processes. Must be set to either <xref:System.IO.HandleInheritability> or <xref:System.IO.HandleInheritability>.","pos":[0,214],"nodes":[{"content":"One of the enumeration values that determines whether the underlying handle can be inherited by child processes.","pos":[0,112]},{"content":"Must be set to either &lt;xref:System.IO.HandleInheritability&gt; or &lt;xref:System.IO.HandleInheritability&gt;.","pos":[113,214],"source":" Must be set to either <xref:System.IO.HandleInheritability> or <xref:System.IO.HandleInheritability>."}]}]},{"pos":[17465,17535],"content":"The size of the buffer. This value must be greater than or equal to 0.","needQuote":true,"needEscape":true,"nodes":[{"content":"The size of the buffer. This value must be greater than or equal to 0.","pos":[0,70],"nodes":[{"content":"The size of the buffer.","pos":[0,23]},{"content":"This value must be greater than or equal to 0.","pos":[24,70]}]}]},{"pos":[17726,17915],"content":"<code>inheritability</code> is not set to either <xref:System.IO.HandleInheritability> or <xref:System.IO.HandleInheritability>.       -or-       <code>bufferSize</code> is less than 0.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;inheritability&lt;/code&gt;</ph> is not set to either <ph id=\"ph2\">&lt;xref:System.IO.HandleInheritability&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.IO.HandleInheritability&gt;</ph>.","pos":[0,128],"source":"<code>inheritability</code> is not set to either <xref:System.IO.HandleInheritability> or <xref:System.IO.HandleInheritability>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;bufferSize&lt;/code&gt;</ph> is less than 0.","pos":[135,185],"source":"       -or-       <code>bufferSize</code> is less than 0."}]},{"pos":[18019,18103],"content":"<ph id=\"ph1\">&lt;code&gt;direction&lt;/code&gt;</ph> is set to <bpt id=\"p1\">&lt;xref href=\"System.IO.Pipes.PipeDirection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>direction</code> is set to <xref href=\"System.IO.Pipes.PipeDirection\"></xref>."},{"pos":[18913,19103],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified pipe direction, inheritability mode, buffer size, and pipe security.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"></xref> class with the specified pipe direction, inheritability mode, buffer size, and pipe security."},{"pos":[19115,19267],"content":"A <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection> is not supported because anonymous pipes are defined to be one-way.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"A &lt;xref:System.IO.Pipes.PipeDirection&gt; value of &lt;xref:System.IO.Pipes.PipeDirection&gt; is not supported because anonymous pipes are defined to be one-way.","pos":[0,152],"source":"A <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection> is not supported because anonymous pipes are defined to be one-way."}]},{"pos":[19571,19783],"content":"One of the enumeration values that determines the direction of the pipe.       Anonymous pipes can only be in one direction, so `direction` cannot be set to <xref href=\"System.IO.Pipes.PipeDirection\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"One of the enumeration values that determines the direction of the pipe.","pos":[0,72]},{"content":"Anonymous pipes can only be in one direction, so <ph id=\"ph1\">`direction`</ph> cannot be set to <bpt id=\"p1\">&lt;xref href=\"System.IO.Pipes.PipeDirection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[79,208],"source":"       Anonymous pipes can only be in one direction, so `direction` cannot be set to <xref href=\"System.IO.Pipes.PipeDirection\"></xref>."}]},{"pos":[19872,19984],"content":"One of the enumeration values that determines whether the underlying handle can be inherited by child processes.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the enumeration values that determines whether the underlying handle can be inherited by child processes.","pos":[0,112]}]},{"pos":[20050,20120],"content":"The size of the buffer. This value must be greater than or equal to 0.","needQuote":true,"needEscape":true,"nodes":[{"content":"The size of the buffer. This value must be greater than or equal to 0.","pos":[0,70],"nodes":[{"content":"The size of the buffer.","pos":[0,23]},{"content":"This value must be greater than or equal to 0.","pos":[24,70]}]}]},{"pos":[20204,20281],"content":"An object that determines the access control and audit security for the pipe.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that determines the access control and audit security for the pipe.","pos":[0,77]}]},{"pos":[20472,20661],"content":"<code>inheritability</code> is not set to either <xref:System.IO.HandleInheritability> or <xref:System.IO.HandleInheritability>.       -or-       <code>bufferSize</code> is less than 0.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;inheritability&lt;/code&gt;</ph> is not set to either <ph id=\"ph2\">&lt;xref:System.IO.HandleInheritability&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.IO.HandleInheritability&gt;</ph>.","pos":[0,128],"source":"<code>inheritability</code> is not set to either <xref:System.IO.HandleInheritability> or <xref:System.IO.HandleInheritability>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;bufferSize&lt;/code&gt;</ph> is less than 0.","pos":[135,185],"source":"       -or-       <code>bufferSize</code> is less than 0."}]},{"pos":[20765,20849],"content":"<ph id=\"ph1\">&lt;code&gt;direction&lt;/code&gt;</ph> is set to <bpt id=\"p1\">&lt;xref href=\"System.IO.Pipes.PipeDirection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>direction</code> is set to <xref href=\"System.IO.Pipes.PipeDirection\"></xref>."},{"pos":[21296,21500],"content":"Gets the safe handle for the <bpt id=\"p1\">&lt;xref href=\"System.IO.Pipes.AnonymousPipeClientStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that is currently connected to the <bpt id=\"p2\">&lt;xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Gets the safe handle for the <xref href=\"System.IO.Pipes.AnonymousPipeClientStream\"></xref> object that is currently connected to the <xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"></xref> object."},{"pos":[21512,21869],"content":"The <xref:System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle%2A> method should be called after a client handle has been passed to a client process. If this method is not called, the <xref:System.IO.Pipes.AnonymousPipeServerStream> object will not receive notice when the client disposes of its <xref:System.IO.Pipes.PipeStream> object.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <xref:System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle%2A> method should be called after a client handle has been passed to a client process. If this method is not called, the <xref:System.IO.Pipes.AnonymousPipeServerStream> object will not receive notice when the client disposes of its <xref:System.IO.Pipes.PipeStream> object.","pos":[0,357],"nodes":[{"content":"The &lt;xref:System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle%2A&gt; method should be called after a client handle has been passed to a client process.","pos":[0,169],"source":"The <xref:System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle%2A> method should be called after a client handle has been passed to a client process."},{"content":"If this method is not called, the &lt;xref:System.IO.Pipes.AnonymousPipeServerStream&gt; object will not receive notice when the client disposes of its &lt;xref:System.IO.Pipes.PipeStream&gt; object.","pos":[170,357],"source":" If this method is not called, the <xref:System.IO.Pipes.AnonymousPipeServerStream> object will not receive notice when the client disposes of its <xref:System.IO.Pipes.PipeStream> object."}]}]},{"pos":[22059,22251],"content":"A handle for the <bpt id=\"p1\">&lt;xref href=\"System.IO.Pipes.AnonymousPipeClientStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that is currently connected to the <bpt id=\"p2\">&lt;xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"A handle for the <xref href=\"System.IO.Pipes.AnonymousPipeClientStream\"></xref> object that is currently connected to the <xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"></xref> object."},{"pos":[22927,22939],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[23520,23628],"content":"Closes the local copy of the <bpt id=\"p1\">&lt;xref href=\"System.IO.Pipes.AnonymousPipeClientStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object's handle.","needQuote":true,"needEscape":true,"source":"Closes the local copy of the <xref href=\"System.IO.Pipes.AnonymousPipeClientStream\"></xref> object's handle."},{"pos":[23640,23941],"content":"The DisposeLocalCopyOfClientHandle method should be called after the client handle has been passed to the client. If this method is not called, the <xref:System.IO.Pipes.AnonymousPipeServerStream> object will not receive notice when the client disposes of its <xref:System.IO.Pipes.PipeStream> object.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The DisposeLocalCopyOfClientHandle method should be called after the client handle has been passed to the client. If this method is not called, the <xref:System.IO.Pipes.AnonymousPipeServerStream> object will not receive notice when the client disposes of its <xref:System.IO.Pipes.PipeStream> object.","pos":[0,301],"nodes":[{"content":"The DisposeLocalCopyOfClientHandle method should be called after the client handle has been passed to the client.","pos":[0,113]},{"content":"If this method is not called, the &lt;xref:System.IO.Pipes.AnonymousPipeServerStream&gt; object will not receive notice when the client disposes of its &lt;xref:System.IO.Pipes.PipeStream&gt; object.","pos":[114,301],"source":" If this method is not called, the <xref:System.IO.Pipes.AnonymousPipeServerStream> object will not receive notice when the client disposes of its <xref:System.IO.Pipes.PipeStream> object."}]}]},{"pos":[25246,25431],"content":"Releases unmanaged resources and performs other cleanup operations before the <bpt id=\"p1\">&lt;xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance is reclaimed by garbage collection.","needQuote":true,"needEscape":true,"source":"Releases unmanaged resources and performs other cleanup operations before the <xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"></xref> instance is reclaimed by garbage collection."},{"pos":[26051,26161],"content":"Gets the connected <bpt id=\"p1\">&lt;xref href=\"System.IO.Pipes.AnonymousPipeClientStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object's handle as a string.","needQuote":true,"needEscape":true,"source":"Gets the connected <xref href=\"System.IO.Pipes.AnonymousPipeClientStream\"></xref> object's handle as a string."},{"pos":[26173,26530],"content":"The <xref:System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle%2A> method should be called after a client handle has been passed to a client process. If this method is not called, the <xref:System.IO.Pipes.AnonymousPipeServerStream> object will not receive notice when the client disposes of its <xref:System.IO.Pipes.PipeStream> object.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <xref:System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle%2A> method should be called after a client handle has been passed to a client process. If this method is not called, the <xref:System.IO.Pipes.AnonymousPipeServerStream> object will not receive notice when the client disposes of its <xref:System.IO.Pipes.PipeStream> object.","pos":[0,357],"nodes":[{"content":"The &lt;xref:System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle%2A&gt; method should be called after a client handle has been passed to a client process.","pos":[0,169],"source":"The <xref:System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle%2A> method should be called after a client handle has been passed to a client process."},{"content":"If this method is not called, the &lt;xref:System.IO.Pipes.AnonymousPipeServerStream&gt; object will not receive notice when the client disposes of its &lt;xref:System.IO.Pipes.PipeStream&gt; object.","pos":[170,357],"source":" If this method is not called, the <xref:System.IO.Pipes.AnonymousPipeServerStream> object will not receive notice when the client disposes of its <xref:System.IO.Pipes.PipeStream> object."}]}]},{"pos":[27394,27512],"content":"A string that represents the connected <bpt id=\"p1\">&lt;xref href=\"System.IO.Pipes.AnonymousPipeClientStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object's handle.","needQuote":true,"needEscape":true,"source":"A string that represents the connected <xref href=\"System.IO.Pipes.AnonymousPipeClientStream\"></xref> object's handle."},{"pos":[27995,28201],"content":"Sets the reading mode for the <xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"></xref> object. For anonymous pipes, transmission mode must be <xref href=\"System.IO.Pipes.PipeTransmissionMode\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sets the reading mode for the <bpt id=\"p1\">&lt;xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","pos":[0,100],"source":"Sets the reading mode for the <xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"></xref> object."},{"content":"For anonymous pipes, transmission mode must be <bpt id=\"p1\">&lt;xref href=\"System.IO.Pipes.PipeTransmissionMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[101,206],"source":" For anonymous pipes, transmission mode must be <xref href=\"System.IO.Pipes.PipeTransmissionMode\"></xref>."}]},{"pos":[28213,28298],"content":"Anonymous pipes do not support <xref:System.IO.Pipes.PipeTransmissionMode> read mode.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Anonymous pipes do not support &lt;xref:System.IO.Pipes.PipeTransmissionMode&gt; read mode.","pos":[0,85],"source":"Anonymous pipes do not support <xref:System.IO.Pipes.PipeTransmissionMode> read mode."}]},{"pos":[29146,29241],"content":"The reading mode for the <bpt id=\"p1\">&lt;xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"The reading mode for the <xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"></xref> object."},{"pos":[29434,29567],"content":"The transmission mode is not valid. For anonymous pipes, only <xref href=\"System.IO.Pipes.PipeTransmissionMode\"></xref> is supported.","needQuote":true,"needEscape":true,"nodes":[{"content":"The transmission mode is not valid.","pos":[0,35]},{"content":"For anonymous pipes, only <bpt id=\"p1\">&lt;xref href=\"System.IO.Pipes.PipeTransmissionMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is supported.","pos":[36,133],"source":" For anonymous pipes, only <xref href=\"System.IO.Pipes.PipeTransmissionMode\"></xref> is supported."}]},{"pos":[29670,29795],"content":"The property is set to <bpt id=\"p1\">&lt;xref href=\"System.IO.Pipes.PipeTransmissionMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, which is not supported for anonymous pipes.","needQuote":true,"needEscape":true,"source":"The property is set to <xref href=\"System.IO.Pipes.PipeTransmissionMode\"></xref>, which is not supported for anonymous pipes."},{"pos":[29884,29937],"content":"The connection is broken or another I/O error occurs.","needQuote":true,"needEscape":true,"nodes":[{"content":"The connection is broken or another I/O error occurs.","pos":[0,53]}]},{"pos":[30044,30063],"content":"The pipe is closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The pipe is closed.","pos":[0,19]}]},{"pos":[30490,30560],"content":"Gets the pipe transmission mode that is supported by the current pipe.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the pipe transmission mode that is supported by the current pipe.","pos":[0,70]}]},{"pos":[30572,30657],"content":"Anonymous pipes do not support <xref:System.IO.Pipes.PipeTransmissionMode> read mode.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Anonymous pipes do not support &lt;xref:System.IO.Pipes.PipeTransmissionMode&gt; read mode.","pos":[0,85],"source":"Anonymous pipes do not support <xref:System.IO.Pipes.PipeTransmissionMode> read mode."}]},{"pos":[31534,31634],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.IO.Pipes.PipeTransmissionMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that is supported by the current pipe.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.IO.Pipes.PipeTransmissionMode\"></xref> that is supported by the current pipe."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.IO.Pipes.AnonymousPipeServerStream\n  id: AnonymousPipeServerStream\n  children:\n  - System.IO.Pipes.AnonymousPipeServerStream.#ctor\n  - System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection)\n  - System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability)\n  - System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,Microsoft.Win32.SafeHandles.SafePipeHandle,Microsoft.Win32.SafeHandles.SafePipeHandle)\n  - System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability,System.Int32)\n  - System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability,System.Int32,System.IO.Pipes.PipeSecurity)\n  - System.IO.Pipes.AnonymousPipeServerStream.ClientSafePipeHandle\n  - System.IO.Pipes.AnonymousPipeServerStream.Dispose(System.Boolean)\n  - System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle\n  - System.IO.Pipes.AnonymousPipeServerStream.Finalize\n  - System.IO.Pipes.AnonymousPipeServerStream.GetClientHandleAsString\n  - System.IO.Pipes.AnonymousPipeServerStream.ReadMode\n  - System.IO.Pipes.AnonymousPipeServerStream.TransmissionMode\n  langs:\n  - csharp\n  name: AnonymousPipeServerStream\n  nameWithType: AnonymousPipeServerStream\n  fullName: System.IO.Pipes.AnonymousPipeServerStream\n  type: Class\n  summary: Exposes a stream around an anonymous pipe, which supports both synchronous and asynchronous read and write operations.\n  remarks: \"Anonymous pipes help provide safe and secure interprocess communication between child and parent processes. The AnonymousPipeServerStream class enables a parent process to send or receive information from a child process.  \\n  \\n Anonymous pipes are unnamed, one-way pipes that typically transfer data between parent and child processes. Anonymous pipes are always local; they cannot be used over a network. A <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection> is not supported because anonymous pipes are defined to be one-way.  \\n  \\n Anonymous pipes do not support <xref:System.IO.Pipes.PipeTransmissionMode> read modes.  \\n  \\n The client side of an anonymous pipe must be created from a pipe handle provided by the server side by calling the <xref:System.IO.Pipes.AnonymousPipeServerStream.GetClientHandleAsString%2A> method. The string is then passed as a parameter when creating the client process. From the client process, it is then passed to the <xref:System.IO.Pipes.AnonymousPipeClientStream> constructor as the `pipeHandleAsString` parameter.  \\n  \\n The AnonymousPipeServerStream object must dispose the client handle using the <xref:System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle%2A> method in order to be notified when the client exits.  \\n  \\n> [!NOTE]\\n>  For [!INCLUDE[winxppro](~/add/includes/winxppro-md.md)] and [!INCLUDE[win2kserver](~/add/includes/win2kserver-md.md)], a maximum of 10 pipes can simultaneously connect over the network.\"\n  example:\n  - \"The following example demonstrates a way to send a string from a parent process to a child process using anonymous pipes. This example creates an AnonymousPipeServerStream object in a parent process with a <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection>. It also creates an <xref:System.IO.Pipes.AnonymousPipeClientStream> object in a child process with a <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection>. The parent process then sends a user-supplied string to the child process. The string is displayed to the console.  \\n  \\n This example is for the server process, which uses the AnonymousPipeServerStream class. For the entire code example, including the code for both the pipe client and server, see [How to: Use Anonymous Pipes for Local Interprocess Communication](~/add/includes/ajax-current-ext-md.md).  \\n  \\n [!code-cs[System.IO.Pipes.AnonymousPipeServerStream_Sample#01](~/add/codesnippet/csharp/t-system.io.pipes.anonym_1_1.cs)]\\n [!code-vb[System.IO.Pipes.AnonymousPipeServerStream_Sample#01](~/add/codesnippet/visualbasic/t-system.io.pipes.anonym_1_1.vb)]\\n [!code-cpp[System.IO.Pipes.AnonymousPipeServerStream_Sample#01](~/add/codesnippet/cpp/t-system.io.pipes.anonym_1_1.cpp)]\"\n  syntax:\n    content: 'public sealed class AnonymousPipeServerStream : System.IO.Pipes.PipeStream'\n  inheritance:\n  - System.IO.Stream\n  - System.IO.Pipes.PipeStream\n  implements: []\n  inheritedMembers:\n  - System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  - System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  - System.IO.Pipes.PipeStream.CanRead\n  - System.IO.Pipes.PipeStream.CanSeek\n  - System.IO.Pipes.PipeStream.CanWrite\n  - System.IO.Pipes.PipeStream.CheckPipePropertyOperations\n  - System.IO.Pipes.PipeStream.CheckReadOperations\n  - System.IO.Pipes.PipeStream.CheckWriteOperations\n  - System.IO.Pipes.PipeStream.EndRead(System.IAsyncResult)\n  - System.IO.Pipes.PipeStream.EndWrite(System.IAsyncResult)\n  - System.IO.Pipes.PipeStream.Flush\n  - System.IO.Pipes.PipeStream.GetAccessControl\n  - System.IO.Pipes.PipeStream.InBufferSize\n  - System.IO.Pipes.PipeStream.InitializeHandle(Microsoft.Win32.SafeHandles.SafePipeHandle,System.Boolean,System.Boolean)\n  - System.IO.Pipes.PipeStream.IsAsync\n  - System.IO.Pipes.PipeStream.IsConnected\n  - System.IO.Pipes.PipeStream.IsHandleExposed\n  - System.IO.Pipes.PipeStream.IsMessageComplete\n  - System.IO.Pipes.PipeStream.Length\n  - System.IO.Pipes.PipeStream.OutBufferSize\n  - System.IO.Pipes.PipeStream.Position\n  - System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)\n  - System.IO.Pipes.PipeStream.ReadByte\n  - System.IO.Pipes.PipeStream.SafePipeHandle\n  - System.IO.Pipes.PipeStream.Seek(System.Int64,System.IO.SeekOrigin)\n  - System.IO.Pipes.PipeStream.SetAccessControl(System.IO.Pipes.PipeSecurity)\n  - System.IO.Pipes.PipeStream.SetLength(System.Int64)\n  - System.IO.Pipes.PipeStream.WaitForPipeDrain\n  - System.IO.Pipes.PipeStream.Write(System.Byte[],System.Int32,System.Int32)\n  - System.IO.Pipes.PipeStream.WriteByte(System.Byte)\n  platform:\n  - net462\n- uid: System.IO.Pipes.AnonymousPipeServerStream.#ctor\n  id: '#ctor'\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  langs:\n  - csharp\n  name: AnonymousPipeServerStream()\n  nameWithType: AnonymousPipeServerStream.AnonymousPipeServerStream()\n  fullName: System.IO.Pipes.AnonymousPipeServerStream.AnonymousPipeServerStream()\n  type: Constructor\n  assemblies:\n  - System.Core\n  namespace: System.IO.Pipes\n  summary: Initializes a new instance of the <xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"></xref> class.\n  remarks: \"For <xref:System.IO.Pipes.AnonymousPipeServerStream> constructors without a <xref:System.IO.Pipes.PipeDirection> parameter, the default direction is <xref:System.IO.Pipes.PipeDirection>. A <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection> is not supported because anonymous pipes are defined to be one-way.  \\n  \\n This constructor creates an <xref:System.IO.Pipes.AnonymousPipeServerStream> object that has the default buffer size, no pipe security, and a <xref:System.IO.HandleInheritability> value of <xref:System.IO.HandleInheritability>.\"\n  syntax:\n    content: public AnonymousPipeServerStream ();\n    parameters: []\n  overload: System.IO.Pipes.AnonymousPipeServerStream.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection)\n  id: '#ctor(System.IO.Pipes.PipeDirection)'\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  langs:\n  - csharp\n  name: AnonymousPipeServerStream(PipeDirection)\n  nameWithType: AnonymousPipeServerStream.AnonymousPipeServerStream(PipeDirection)\n  fullName: System.IO.Pipes.AnonymousPipeServerStream.AnonymousPipeServerStream(PipeDirection)\n  type: Constructor\n  assemblies:\n  - System.Core\n  namespace: System.IO.Pipes\n  summary: Initializes a new instance of the <xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"></xref> class with the specified pipe direction.\n  remarks: \"A <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection> is not supported because anonymous pipes are defined to be one-way.  \\n  \\n This constructor creates an <xref:System.IO.Pipes.AnonymousPipeServerStream> object that has the default buffer size, no pipe security, and a <xref:System.IO.HandleInheritability> value of <xref:System.IO.HandleInheritability>.\"\n  syntax:\n    content: public AnonymousPipeServerStream (System.IO.Pipes.PipeDirection direction);\n    parameters:\n    - id: direction\n      type: System.IO.Pipes.PipeDirection\n      description: \"One of the enumeration values that determines the direction of the pipe.  \\n  \\n Anonymous pipes can only be in one direction, so `direction` cannot be set to <xref href=\\\"System.IO.Pipes.PipeDirection\\\"></xref>.\"\n  overload: System.IO.Pipes.AnonymousPipeServerStream.#ctor*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>direction</code> is set to <xref href=\"System.IO.Pipes.PipeDirection\"></xref>.\n  platform:\n  - net462\n- uid: System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability)\n  id: '#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability)'\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  langs:\n  - csharp\n  name: AnonymousPipeServerStream(PipeDirection,HandleInheritability)\n  nameWithType: AnonymousPipeServerStream.AnonymousPipeServerStream(PipeDirection,HandleInheritability)\n  fullName: System.IO.Pipes.AnonymousPipeServerStream.AnonymousPipeServerStream(PipeDirection,HandleInheritability)\n  type: Constructor\n  assemblies:\n  - System.Core\n  namespace: System.IO.Pipes\n  summary: Initializes a new instance of the <xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"></xref> class with the specified pipe direction and inheritability mode.\n  remarks: \"A <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection> is not supported because anonymous pipes are defined to be one-way.  \\n  \\n This constructor creates an <xref:System.IO.Pipes.AnonymousPipeServerStream> object that has the default buffer size and no pipe security.\"\n  example:\n  - \"The following example demonstrates a method to send a string from a parent process to a child process using anonymous pipes. In this example, an <xref:System.IO.Pipes.AnonymousPipeServerStream> object is created in a parent process with a <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection>.  \\n  \\n [!code-cs[System.IO.Pipes.AnonymousPipeServerStream_Sample#01](~/add/codesnippet/csharp/d22da34b-b931-48af-8c21-_1.cs)]\\n [!code-vb[System.IO.Pipes.AnonymousPipeServerStream_Sample#01](~/add/codesnippet/visualbasic/d22da34b-b931-48af-8c21-_1.vb)]\\n [!code-cpp[System.IO.Pipes.AnonymousPipeServerStream_Sample#01](~/add/codesnippet/cpp/d22da34b-b931-48af-8c21-_1.cpp)]\"\n  syntax:\n    content: public AnonymousPipeServerStream (System.IO.Pipes.PipeDirection direction, System.IO.HandleInheritability inheritability);\n    parameters:\n    - id: direction\n      type: System.IO.Pipes.PipeDirection\n      description: \"One of the enumeration values that determines the direction of the pipe.  \\n  \\n Anonymous pipes can only be in one direction, so `direction` cannot be set to <xref href=\\\"System.IO.Pipes.PipeDirection\\\"></xref>.\"\n    - id: inheritability\n      type: System.IO.HandleInheritability\n      description: One of the enumeration values that determines whether the underlying handle can be inherited by child processes. Must be set to either <xref:System.IO.HandleInheritability> or <xref:System.IO.HandleInheritability>.\n  overload: System.IO.Pipes.AnonymousPipeServerStream.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>inheritability</code> is not set to either <xref:System.IO.HandleInheritability> or <xref:System.IO.HandleInheritability>.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>direction</code> is set to <xref href=\"System.IO.Pipes.PipeDirection\"></xref>.\n  platform:\n  - net462\n- uid: System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,Microsoft.Win32.SafeHandles.SafePipeHandle,Microsoft.Win32.SafeHandles.SafePipeHandle)\n  id: '#ctor(System.IO.Pipes.PipeDirection,Microsoft.Win32.SafeHandles.SafePipeHandle,Microsoft.Win32.SafeHandles.SafePipeHandle)'\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  langs:\n  - csharp\n  name: AnonymousPipeServerStream(PipeDirection,SafePipeHandle,SafePipeHandle)\n  nameWithType: AnonymousPipeServerStream.AnonymousPipeServerStream(PipeDirection,SafePipeHandle,SafePipeHandle)\n  fullName: System.IO.Pipes.AnonymousPipeServerStream.AnonymousPipeServerStream(PipeDirection,SafePipeHandle,SafePipeHandle)\n  type: Constructor\n  assemblies:\n  - System.Core\n  namespace: System.IO.Pipes\n  summary: Initializes a new instance of the <xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"></xref> class from the specified pipe handles.\n  remarks: A <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection> is not supported because anonymous pipes are defined to be one-way.\n  syntax:\n    content: public AnonymousPipeServerStream (System.IO.Pipes.PipeDirection direction, Microsoft.Win32.SafeHandles.SafePipeHandle serverSafePipeHandle, Microsoft.Win32.SafeHandles.SafePipeHandle clientSafePipeHandle);\n    parameters:\n    - id: direction\n      type: System.IO.Pipes.PipeDirection\n      description: \"One of the enumeration values that determines the direction of the pipe.  \\n  \\n Anonymous pipes can only be in one direction, so `direction` cannot be set to <xref href=\\\"System.IO.Pipes.PipeDirection\\\"></xref>.\"\n    - id: serverSafePipeHandle\n      type: Microsoft.Win32.SafeHandles.SafePipeHandle\n      description: A safe handle for the pipe that this <xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"></xref> object will encapsulate.\n    - id: clientSafePipeHandle\n      type: Microsoft.Win32.SafeHandles.SafePipeHandle\n      description: A safe handle for the <xref href=\"System.IO.Pipes.AnonymousPipeClientStream\"></xref> object.\n  overload: System.IO.Pipes.AnonymousPipeServerStream.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>serverSafePipeHandle</code> or <code>clientSafePipeHandle</code> is an invalid handle.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>serverSafePipeHandle</code> or <code>clientSafePipeHandle</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>direction</code> is set to <xref href=\"System.IO.Pipes.PipeDirection\"></xref>.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"An I/O error, such as a disk error, has occurred.  \\n  \\n -or-  \\n  \\n The stream has been closed.\"\n  platform:\n  - net462\n- uid: System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability,System.Int32)\n  id: '#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability,System.Int32)'\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  langs:\n  - csharp\n  name: AnonymousPipeServerStream(PipeDirection,HandleInheritability,Int32)\n  nameWithType: AnonymousPipeServerStream.AnonymousPipeServerStream(PipeDirection,HandleInheritability,Int32)\n  fullName: System.IO.Pipes.AnonymousPipeServerStream.AnonymousPipeServerStream(PipeDirection,HandleInheritability,Int32)\n  type: Constructor\n  assemblies:\n  - System.Core\n  namespace: System.IO.Pipes\n  summary: Initializes a new instance of the <xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"></xref> class with the specified pipe direction, inheritability mode, and buffer size.\n  remarks: \"A <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection> is not supported because anonymous pipes are defined to be one-way.  \\n  \\n This constructor creates an <xref:System.IO.Pipes.AnonymousPipeServerStream> object without pipe security.\"\n  syntax:\n    content: public AnonymousPipeServerStream (System.IO.Pipes.PipeDirection direction, System.IO.HandleInheritability inheritability, int bufferSize);\n    parameters:\n    - id: direction\n      type: System.IO.Pipes.PipeDirection\n      description: \"One of the enumeration values that determines the direction of the pipe.  \\n  \\n Anonymous pipes can only be in one direction, so `direction` cannot be set to <xref href=\\\"System.IO.Pipes.PipeDirection\\\"></xref>.\"\n    - id: inheritability\n      type: System.IO.HandleInheritability\n      description: One of the enumeration values that determines whether the underlying handle can be inherited by child processes. Must be set to either <xref:System.IO.HandleInheritability> or <xref:System.IO.HandleInheritability>.\n    - id: bufferSize\n      type: System.Int32\n      description: The size of the buffer. This value must be greater than or equal to 0.\n  overload: System.IO.Pipes.AnonymousPipeServerStream.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>inheritability</code> is not set to either <xref:System.IO.HandleInheritability> or <xref:System.IO.HandleInheritability>.  \\n  \\n -or-  \\n  \\n <code>bufferSize</code> is less than 0.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>direction</code> is set to <xref href=\"System.IO.Pipes.PipeDirection\"></xref>.\n  platform:\n  - net462\n- uid: System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability,System.Int32,System.IO.Pipes.PipeSecurity)\n  id: '#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability,System.Int32,System.IO.Pipes.PipeSecurity)'\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  langs:\n  - csharp\n  name: AnonymousPipeServerStream(PipeDirection,HandleInheritability,Int32,PipeSecurity)\n  nameWithType: AnonymousPipeServerStream.AnonymousPipeServerStream(PipeDirection,HandleInheritability,Int32,PipeSecurity)\n  fullName: System.IO.Pipes.AnonymousPipeServerStream.AnonymousPipeServerStream(PipeDirection,HandleInheritability,Int32,PipeSecurity)\n  type: Constructor\n  assemblies:\n  - System.Core\n  namespace: System.IO.Pipes\n  summary: Initializes a new instance of the <xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"></xref> class with the specified pipe direction, inheritability mode, buffer size, and pipe security.\n  remarks: A <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection> is not supported because anonymous pipes are defined to be one-way.\n  syntax:\n    content: public AnonymousPipeServerStream (System.IO.Pipes.PipeDirection direction, System.IO.HandleInheritability inheritability, int bufferSize, System.IO.Pipes.PipeSecurity pipeSecurity);\n    parameters:\n    - id: direction\n      type: System.IO.Pipes.PipeDirection\n      description: \"One of the enumeration values that determines the direction of the pipe.  \\n  \\n Anonymous pipes can only be in one direction, so `direction` cannot be set to <xref href=\\\"System.IO.Pipes.PipeDirection\\\"></xref>.\"\n    - id: inheritability\n      type: System.IO.HandleInheritability\n      description: One of the enumeration values that determines whether the underlying handle can be inherited by child processes.\n    - id: bufferSize\n      type: System.Int32\n      description: The size of the buffer. This value must be greater than or equal to 0.\n    - id: pipeSecurity\n      type: System.IO.Pipes.PipeSecurity\n      description: An object that determines the access control and audit security for the pipe.\n  overload: System.IO.Pipes.AnonymousPipeServerStream.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>inheritability</code> is not set to either <xref:System.IO.HandleInheritability> or <xref:System.IO.HandleInheritability>.  \\n  \\n -or-  \\n  \\n <code>bufferSize</code> is less than 0.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>direction</code> is set to <xref href=\"System.IO.Pipes.PipeDirection\"></xref>.\n  platform:\n  - net462\n- uid: System.IO.Pipes.AnonymousPipeServerStream.ClientSafePipeHandle\n  id: ClientSafePipeHandle\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  langs:\n  - csharp\n  name: ClientSafePipeHandle\n  nameWithType: AnonymousPipeServerStream.ClientSafePipeHandle\n  fullName: System.IO.Pipes.AnonymousPipeServerStream.ClientSafePipeHandle\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.IO.Pipes\n  summary: Gets the safe handle for the <xref href=\"System.IO.Pipes.AnonymousPipeClientStream\"></xref> object that is currently connected to the <xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"></xref> object.\n  remarks: The <xref:System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle%2A> method should be called after a client handle has been passed to a client process. If this method is not called, the <xref:System.IO.Pipes.AnonymousPipeServerStream> object will not receive notice when the client disposes of its <xref:System.IO.Pipes.PipeStream> object.\n  syntax:\n    content: public Microsoft.Win32.SafeHandles.SafePipeHandle ClientSafePipeHandle { get; }\n    return:\n      type: Microsoft.Win32.SafeHandles.SafePipeHandle\n      description: A handle for the <xref href=\"System.IO.Pipes.AnonymousPipeClientStream\"></xref> object that is currently connected to the <xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"></xref> object.\n  overload: System.IO.Pipes.AnonymousPipeServerStream.ClientSafePipeHandle*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IO.Pipes.AnonymousPipeServerStream.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: AnonymousPipeServerStream.Dispose(Boolean)\n  fullName: System.IO.Pipes.AnonymousPipeServerStream.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.IO.Pipes\n  syntax:\n    content: protected override void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: To be added.\n  overload: System.IO.Pipes.AnonymousPipeServerStream.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle\n  id: DisposeLocalCopyOfClientHandle\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  langs:\n  - csharp\n  name: DisposeLocalCopyOfClientHandle()\n  nameWithType: AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle()\n  fullName: System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle()\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.IO.Pipes\n  summary: Closes the local copy of the <xref href=\"System.IO.Pipes.AnonymousPipeClientStream\"></xref> object's handle.\n  remarks: The DisposeLocalCopyOfClientHandle method should be called after the client handle has been passed to the client. If this method is not called, the <xref:System.IO.Pipes.AnonymousPipeServerStream> object will not receive notice when the client disposes of its <xref:System.IO.Pipes.PipeStream> object.\n  example:\n  - \"The following example demonstrates a way to send a string from a parent process to a child process by using anonymous pipes. In this example, an <xref:System.IO.Pipes.AnonymousPipeServerStream> object is created in a parent process with a <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection>.  \\n  \\n [!code-cs[System.IO.Pipes.AnonymousPipeServerStream_Sample#01](~/add/codesnippet/csharp/m-system.io.pipes.anonym_1_1.cs)]\\n [!code-vb[System.IO.Pipes.AnonymousPipeServerStream_Sample#01](~/add/codesnippet/visualbasic/m-system.io.pipes.anonym_1_1.vb)]\\n [!code-cpp[System.IO.Pipes.AnonymousPipeServerStream_Sample#01](~/add/codesnippet/cpp/m-system.io.pipes.anonym_1_1.cpp)]\"\n  syntax:\n    content: public void DisposeLocalCopyOfClientHandle ();\n    parameters: []\n  overload: System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IO.Pipes.AnonymousPipeServerStream.Finalize\n  id: Finalize\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  langs:\n  - csharp\n  name: Finalize()\n  nameWithType: AnonymousPipeServerStream.Finalize()\n  fullName: System.IO.Pipes.AnonymousPipeServerStream.Finalize()\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.IO.Pipes\n  summary: Releases unmanaged resources and performs other cleanup operations before the <xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"></xref> instance is reclaimed by garbage collection.\n  syntax:\n    content: ~AnonymousPipeServerStream ();\n    parameters: []\n  overload: System.IO.Pipes.AnonymousPipeServerStream.Finalize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IO.Pipes.AnonymousPipeServerStream.GetClientHandleAsString\n  id: GetClientHandleAsString\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  langs:\n  - csharp\n  name: GetClientHandleAsString()\n  nameWithType: AnonymousPipeServerStream.GetClientHandleAsString()\n  fullName: System.IO.Pipes.AnonymousPipeServerStream.GetClientHandleAsString()\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.IO.Pipes\n  summary: Gets the connected <xref href=\"System.IO.Pipes.AnonymousPipeClientStream\"></xref> object's handle as a string.\n  remarks: The <xref:System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle%2A> method should be called after a client handle has been passed to a client process. If this method is not called, the <xref:System.IO.Pipes.AnonymousPipeServerStream> object will not receive notice when the client disposes of its <xref:System.IO.Pipes.PipeStream> object.\n  example:\n  - \"The following example demonstrates a way to send a string from a parent process to a child process by using anonymous pipes. In this example, an <xref:System.IO.Pipes.AnonymousPipeServerStream> object is created in a parent process with a <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection>.  \\n  \\n [!code-cs[System.IO.Pipes.AnonymousPipeServerStream_Sample#01](~/add/codesnippet/csharp/m-system.io.pipes.anonym_2_1.cs)]\\n [!code-vb[System.IO.Pipes.AnonymousPipeServerStream_Sample#01](~/add/codesnippet/visualbasic/m-system.io.pipes.anonym_2_1.vb)]\\n [!code-cpp[System.IO.Pipes.AnonymousPipeServerStream_Sample#01](~/add/codesnippet/cpp/m-system.io.pipes.anonym_2_1.cpp)]\"\n  syntax:\n    content: public string GetClientHandleAsString ();\n    parameters: []\n    return:\n      type: System.String\n      description: A string that represents the connected <xref href=\"System.IO.Pipes.AnonymousPipeClientStream\"></xref> object's handle.\n  overload: System.IO.Pipes.AnonymousPipeServerStream.GetClientHandleAsString*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IO.Pipes.AnonymousPipeServerStream.ReadMode\n  id: ReadMode\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  langs:\n  - csharp\n  name: ReadMode\n  nameWithType: AnonymousPipeServerStream.ReadMode\n  fullName: System.IO.Pipes.AnonymousPipeServerStream.ReadMode\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.IO.Pipes\n  summary: Sets the reading mode for the <xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"></xref> object. For anonymous pipes, transmission mode must be <xref href=\"System.IO.Pipes.PipeTransmissionMode\"></xref>.\n  remarks: Anonymous pipes do not support <xref:System.IO.Pipes.PipeTransmissionMode> read mode.\n  example:\n  - \"The following example demonstrates a way to send a string from a parent process to a child process by using anonymous pipes. In this example, the <xref:System.NotSupportedException> is caught when the ReadMode property is set to <xref:System.IO.Pipes.PipeTransmissionMode>.  \\n  \\n [!code-cs[System.IO.Pipes.AnonymousPipeServerStream_Sample#01](~/add/codesnippet/csharp/p-system.io.pipes.anonym_1_1.cs)]\\n [!code-vb[System.IO.Pipes.AnonymousPipeServerStream_Sample#01](~/add/codesnippet/visualbasic/p-system.io.pipes.anonym_1_1.vb)]\\n [!code-cpp[System.IO.Pipes.AnonymousPipeServerStream_Sample#01](~/add/codesnippet/cpp/p-system.io.pipes.anonym_1_1.cpp)]\"\n  syntax:\n    content: public override System.IO.Pipes.PipeTransmissionMode ReadMode { set; }\n    return:\n      type: System.IO.Pipes.PipeTransmissionMode\n      description: The reading mode for the <xref href=\"System.IO.Pipes.AnonymousPipeServerStream\"></xref> object.\n  overload: System.IO.Pipes.AnonymousPipeServerStream.ReadMode*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The transmission mode is not valid. For anonymous pipes, only <xref href=\"System.IO.Pipes.PipeTransmissionMode\"></xref> is supported.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The property is set to <xref href=\"System.IO.Pipes.PipeTransmissionMode\"></xref>, which is not supported for anonymous pipes.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: The connection is broken or another I/O error occurs.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The pipe is closed.\n  platform:\n  - net462\n- uid: System.IO.Pipes.AnonymousPipeServerStream.TransmissionMode\n  id: TransmissionMode\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  langs:\n  - csharp\n  name: TransmissionMode\n  nameWithType: AnonymousPipeServerStream.TransmissionMode\n  fullName: System.IO.Pipes.AnonymousPipeServerStream.TransmissionMode\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.IO.Pipes\n  summary: Gets the pipe transmission mode that is supported by the current pipe.\n  remarks: Anonymous pipes do not support <xref:System.IO.Pipes.PipeTransmissionMode> read mode.\n  example:\n  - \"The following example demonstrates a way to send a string from a parent process to a child process by using anonymous pipes. In this example, an <xref:System.IO.Pipes.AnonymousPipeServerStream> object is created in a parent process and the TransmissionMode property is displayed to the console.  \\n  \\n [!code-cs[System.IO.Pipes.AnonymousPipeServerStream_Sample#01](~/add/codesnippet/csharp/p-system.io.pipes.anonym_0_1.cs)]\\n [!code-vb[System.IO.Pipes.AnonymousPipeServerStream_Sample#01](~/add/codesnippet/visualbasic/p-system.io.pipes.anonym_0_1.vb)]\\n [!code-cpp[System.IO.Pipes.AnonymousPipeServerStream_Sample#01](~/add/codesnippet/cpp/p-system.io.pipes.anonym_0_1.cpp)]\"\n  syntax:\n    content: public override System.IO.Pipes.PipeTransmissionMode TransmissionMode { get; }\n    return:\n      type: System.IO.Pipes.PipeTransmissionMode\n      description: The <xref href=\"System.IO.Pipes.PipeTransmissionMode\"></xref> that is supported by the current pipe.\n  overload: System.IO.Pipes.AnonymousPipeServerStream.TransmissionMode*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.IO.Pipes.PipeStream\n  isExternal: false\n  name: System.IO.Pipes.PipeStream\n- uid: System.NotSupportedException\n  isExternal: true\n  name: System.NotSupportedException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.IO.IOException\n  isExternal: true\n  name: System.IO.IOException\n- uid: System.ObjectDisposedException\n  isExternal: true\n  name: System.ObjectDisposedException\n- uid: System.IO.Pipes.AnonymousPipeServerStream.#ctor\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  isExternal: false\n  name: AnonymousPipeServerStream()\n  nameWithType: AnonymousPipeServerStream.AnonymousPipeServerStream()\n  fullName: System.IO.Pipes.AnonymousPipeServerStream.AnonymousPipeServerStream()\n- uid: System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection)\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  isExternal: false\n  name: AnonymousPipeServerStream(PipeDirection)\n  nameWithType: AnonymousPipeServerStream.AnonymousPipeServerStream(PipeDirection)\n  fullName: System.IO.Pipes.AnonymousPipeServerStream.AnonymousPipeServerStream(PipeDirection)\n- uid: System.IO.Pipes.PipeDirection\n  parent: System.IO.Pipes\n  isExternal: false\n  name: PipeDirection\n  nameWithType: PipeDirection\n  fullName: System.IO.Pipes.PipeDirection\n- uid: System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability)\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  isExternal: false\n  name: AnonymousPipeServerStream(PipeDirection,HandleInheritability)\n  nameWithType: AnonymousPipeServerStream.AnonymousPipeServerStream(PipeDirection,HandleInheritability)\n  fullName: System.IO.Pipes.AnonymousPipeServerStream.AnonymousPipeServerStream(PipeDirection,HandleInheritability)\n- uid: System.IO.HandleInheritability\n  parent: System.IO\n  isExternal: true\n  name: HandleInheritability\n  nameWithType: HandleInheritability\n  fullName: System.IO.HandleInheritability\n- uid: System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,Microsoft.Win32.SafeHandles.SafePipeHandle,Microsoft.Win32.SafeHandles.SafePipeHandle)\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  isExternal: false\n  name: AnonymousPipeServerStream(PipeDirection,SafePipeHandle,SafePipeHandle)\n  nameWithType: AnonymousPipeServerStream.AnonymousPipeServerStream(PipeDirection,SafePipeHandle,SafePipeHandle)\n  fullName: System.IO.Pipes.AnonymousPipeServerStream.AnonymousPipeServerStream(PipeDirection,SafePipeHandle,SafePipeHandle)\n- uid: Microsoft.Win32.SafeHandles.SafePipeHandle\n  parent: Microsoft.Win32.SafeHandles\n  isExternal: false\n  name: SafePipeHandle\n  nameWithType: SafePipeHandle\n  fullName: Microsoft.Win32.SafeHandles.SafePipeHandle\n- uid: System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability,System.Int32)\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  isExternal: false\n  name: AnonymousPipeServerStream(PipeDirection,HandleInheritability,Int32)\n  nameWithType: AnonymousPipeServerStream.AnonymousPipeServerStream(PipeDirection,HandleInheritability,Int32)\n  fullName: System.IO.Pipes.AnonymousPipeServerStream.AnonymousPipeServerStream(PipeDirection,HandleInheritability,Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability,System.Int32,System.IO.Pipes.PipeSecurity)\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  isExternal: false\n  name: AnonymousPipeServerStream(PipeDirection,HandleInheritability,Int32,PipeSecurity)\n  nameWithType: AnonymousPipeServerStream.AnonymousPipeServerStream(PipeDirection,HandleInheritability,Int32,PipeSecurity)\n  fullName: System.IO.Pipes.AnonymousPipeServerStream.AnonymousPipeServerStream(PipeDirection,HandleInheritability,Int32,PipeSecurity)\n- uid: System.IO.Pipes.PipeSecurity\n  parent: System.IO.Pipes\n  isExternal: false\n  name: PipeSecurity\n  nameWithType: PipeSecurity\n  fullName: System.IO.Pipes.PipeSecurity\n- uid: System.IO.Pipes.AnonymousPipeServerStream.ClientSafePipeHandle\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  isExternal: false\n  name: ClientSafePipeHandle\n  nameWithType: AnonymousPipeServerStream.ClientSafePipeHandle\n  fullName: System.IO.Pipes.AnonymousPipeServerStream.ClientSafePipeHandle\n- uid: System.IO.Pipes.AnonymousPipeServerStream.Dispose(System.Boolean)\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: AnonymousPipeServerStream.Dispose(Boolean)\n  fullName: System.IO.Pipes.AnonymousPipeServerStream.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  isExternal: false\n  name: DisposeLocalCopyOfClientHandle()\n  nameWithType: AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle()\n  fullName: System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle()\n- uid: System.IO.Pipes.AnonymousPipeServerStream.Finalize\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  isExternal: false\n  name: Finalize()\n  nameWithType: AnonymousPipeServerStream.Finalize()\n  fullName: System.IO.Pipes.AnonymousPipeServerStream.Finalize()\n- uid: System.IO.Pipes.AnonymousPipeServerStream.GetClientHandleAsString\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  isExternal: false\n  name: GetClientHandleAsString()\n  nameWithType: AnonymousPipeServerStream.GetClientHandleAsString()\n  fullName: System.IO.Pipes.AnonymousPipeServerStream.GetClientHandleAsString()\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.IO.Pipes.AnonymousPipeServerStream.ReadMode\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  isExternal: false\n  name: ReadMode\n  nameWithType: AnonymousPipeServerStream.ReadMode\n  fullName: System.IO.Pipes.AnonymousPipeServerStream.ReadMode\n- uid: System.IO.Pipes.PipeTransmissionMode\n  parent: System.IO.Pipes\n  isExternal: false\n  name: PipeTransmissionMode\n  nameWithType: PipeTransmissionMode\n  fullName: System.IO.Pipes.PipeTransmissionMode\n- uid: System.IO.Pipes.AnonymousPipeServerStream.TransmissionMode\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  isExternal: false\n  name: TransmissionMode\n  nameWithType: AnonymousPipeServerStream.TransmissionMode\n  fullName: System.IO.Pipes.AnonymousPipeServerStream.TransmissionMode\n- uid: System.IO.Pipes.AnonymousPipeServerStream.#ctor*\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  isExternal: false\n  name: AnonymousPipeServerStream\n  nameWithType: AnonymousPipeServerStream.AnonymousPipeServerStream\n- uid: System.IO.Pipes.AnonymousPipeServerStream.ClientSafePipeHandle*\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  isExternal: false\n  name: ClientSafePipeHandle\n  nameWithType: AnonymousPipeServerStream.ClientSafePipeHandle\n- uid: System.IO.Pipes.AnonymousPipeServerStream.Dispose*\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  isExternal: false\n  name: Dispose\n  nameWithType: AnonymousPipeServerStream.Dispose\n- uid: System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle*\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  isExternal: false\n  name: DisposeLocalCopyOfClientHandle\n  nameWithType: AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle\n- uid: System.IO.Pipes.AnonymousPipeServerStream.Finalize*\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  isExternal: false\n  name: Finalize\n  nameWithType: AnonymousPipeServerStream.Finalize\n- uid: System.IO.Pipes.AnonymousPipeServerStream.GetClientHandleAsString*\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  isExternal: false\n  name: GetClientHandleAsString\n  nameWithType: AnonymousPipeServerStream.GetClientHandleAsString\n- uid: System.IO.Pipes.AnonymousPipeServerStream.ReadMode*\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  isExternal: false\n  name: ReadMode\n  nameWithType: AnonymousPipeServerStream.ReadMode\n- uid: System.IO.Pipes.AnonymousPipeServerStream.TransmissionMode*\n  parent: System.IO.Pipes.AnonymousPipeServerStream\n  isExternal: false\n  name: TransmissionMode\n  nameWithType: AnonymousPipeServerStream.TransmissionMode\n"}