{"nodes":[{"pos":[3586,3638],"content":"Provides a standard set of editing related commands.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides a standard set of editing related commands.","pos":[0,52]}]},{"pos":[3651,9618],"content":"The following table shows the editing commands and the associated default key gestures (with key names from the <xref:System.Windows.Input.Key> and <xref:System.Windows.Input.ModifierKeys> enumerations).      |Editing command|Default key gesture|   |---------------------|-------------------------|   |<xref:System.Windows.Documents.EditingCommands.AlignCenter%2A>|`Ctrl`+`E`|   |<xref:System.Windows.Documents.EditingCommands.AlignJustify%2A>|`Ctrl`+`J`|   |<xref:System.Windows.Documents.EditingCommands.AlignLeft%2A>|`Ctrl`+`L`|   |<xref:System.Windows.Documents.EditingCommands.AlignRight%2A>|`Ctrl`+`R`|   |<xref:System.Windows.Documents.EditingCommands.Backspace%2A>|`Backspace`|   |<xref:System.Windows.Documents.EditingCommands.CorrectSpellingError%2A>|no default key gesture|   |<xref:System.Windows.Documents.EditingCommands.DecreaseFontSize%2A>|`Ctrl`+`OemOpenBrackets`|   |<xref:System.Windows.Documents.EditingCommands.DecreaseIndentation%2A>|`Ctrl`+`Shift`+`T`|   |<xref:System.Windows.Documents.EditingCommands.Delete%2A>|`Delete`|   |<xref:System.Windows.Documents.EditingCommands.DeleteNextWord%2A>|`Ctrl`+`Delete`|   |<xref:System.Windows.Documents.EditingCommands.DeletePreviousWord%2A>|`Ctrl`+`Backspace`|   |<xref:System.Windows.Documents.EditingCommands.EnterLineBreak%2A>|`Shift`+`Enter`|   |<xref:System.Windows.Documents.EditingCommands.EnterParagraphBreak%2A>|`Enter`|   |<xref:System.Windows.Documents.EditingCommands.IgnoreSpellingError%2A>|no default key gesture|   |<xref:System.Windows.Documents.EditingCommands.IncreaseFontSize%2A>|`Ctrl`+`OemCloseBrackets`|   |<xref:System.Windows.Documents.EditingCommands.IncreaseIndentation%2A>|`Ctrl`+`T`|   |<xref:System.Windows.Documents.EditingCommands.MoveDownByLine%2A>|`Down`|   |<xref:System.Windows.Documents.EditingCommands.MoveDownByPage%2A>|`PageDown`|   |<xref:System.Windows.Documents.EditingCommands.MoveDownByParagraph%2A>|`Ctrl`+`Down`|   |<xref:System.Windows.Documents.EditingCommands.MoveLeftByCharacter%2A>|`Left`|   |<xref:System.Windows.Documents.EditingCommands.MoveLeftByWord%2A>|`Ctrl`+`Left`|   |<xref:System.Windows.Documents.EditingCommands.MoveRightByCharacter%2A>|`Right`|   |<xref:System.Windows.Documents.EditingCommands.MoveRightByWord%2A>|`Ctrl`+`Right`|   |<xref:System.Windows.Documents.EditingCommands.MoveToDocumentEnd%2A>|`Ctrl`+`End`|   |<xref:System.Windows.Documents.EditingCommands.MoveToDocumentStart%2A>|`Ctrl`+`Home`|   |<xref:System.Windows.Documents.EditingCommands.MoveToLineEnd%2A>|`End`|   |<xref:System.Windows.Documents.EditingCommands.MoveToLineStart%2A>|`Home`|   |<xref:System.Windows.Documents.EditingCommands.MoveUpByLine%2A>|`Up`|   |<xref:System.Windows.Documents.EditingCommands.MoveUpByPage%2A>|`PageUp`|   |<xref:System.Windows.Documents.EditingCommands.MoveUpByParagraph%2A>|`Ctrl`+`Up`|   |<xref:System.Windows.Documents.EditingCommands.SelectDownByLine%2A>|`Shift`+`Down`|   |<xref:System.Windows.Documents.EditingCommands.SelectDownByPage%2A>|`Shift`+`PageDown`|   |<xref:System.Windows.Documents.EditingCommands.SelectDownByParagraph%2A>|`Ctrl`+`Shift`+`Down`|   |<xref:System.Windows.Documents.EditingCommands.SelectLeftByCharacter%2A>|`Shift`+`Left`|   |<xref:System.Windows.Documents.EditingCommands.SelectLeftByWord%2A>|`Ctrl`+`Shift`+`Left`|   |<xref:System.Windows.Documents.EditingCommands.SelectRightByCharacter%2A>|`Shift`+`Right`|   |<xref:System.Windows.Documents.EditingCommands.SelectRightByWord%2A>|`Ctrl`+`Shift`+`Right`|   |<xref:System.Windows.Documents.EditingCommands.SelectToDocumentEnd%2A>|`Ctrl`+`Shift`+`End`|   |<xref:System.Windows.Documents.EditingCommands.SelectToDocumentStart%2A>|`Ctrl`+`Shift`+`Home`|   |<xref:System.Windows.Documents.EditingCommands.SelectToLineEnd%2A>|`Shift`+`End`|   |<xref:System.Windows.Documents.EditingCommands.SelectToLineStart%2A>|`Shift`+`Home`|   |<xref:System.Windows.Documents.EditingCommands.SelectUpByLine%2A>|`Shift`+`Up`|   |<xref:System.Windows.Documents.EditingCommands.SelectUpByPage%2A>|`Shift`+`PageUp`|   |<xref:System.Windows.Documents.EditingCommands.SelectUpByParagraph%2A>|`Ctrl`+`Shift`+`Up`|   |<xref:System.Windows.Documents.EditingCommands.TabBackward%2A>|`Shift`+`Tab`|   |<xref:System.Windows.Documents.EditingCommands.TabForward%2A>|`Tab`|   |<xref:System.Windows.Documents.EditingCommands.ToggleBold%2A>|`Ctrl`+`B`|   |<xref:System.Windows.Documents.EditingCommands.ToggleBullets%2A>|`Ctrl`+`Shift`+`L`|   |<xref:System.Windows.Documents.EditingCommands.ToggleInsert%2A>|`Insert`|   |<xref:System.Windows.Documents.EditingCommands.ToggleItalic%2A>|`Ctrl`+`I`|   |<xref:System.Windows.Documents.EditingCommands.ToggleNumbering%2A>|`Ctrl`+`Shift`+`N`|   |<xref:System.Windows.Documents.EditingCommands.ToggleSubscript%2A>|`Ctrl`+`OemPlus`|   |<xref:System.Windows.Documents.EditingCommands.ToggleSuperscript%2A>|`Ctrl`+`Shift+OemPlus`|   |<xref:System.Windows.Documents.EditingCommands.ToggleUnderline%2A>|`Ctrl`+`U`|       Caret movement commands and selection expanding commands share a common set of default key gestures, the general difference being the addition of the <xref:System.Windows.Input.ModifierKeys> key to differentiate selection commands from caret movement commands.  For example, the <xref:System.Windows.Documents.EditingCommands.MoveLeftByCharacter%2A> command has a default key gesture of <xref:System.Windows.Input.Key>, and the corresponding <xref:System.Windows.Documents.EditingCommands.SelectLeftByCharacter%2A> command has a default key gesture of <xref:System.Windows.Input.ModifierKeys>+<xref:System.Windows.Input.Key>.       In general, the command definitions provided by the EditingCommands class do not make use of command parameters (the `parameter` parameter expected by the <xref:System.Windows.Input.ICommand.Execute%2A> method).       For more information on commands and commanding, see [Input Overview](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The following table shows the editing commands and the associated default key gestures (with key names from the &lt;xref:System.Windows.Input.Key&gt; and &lt;xref:System.Windows.Input.ModifierKeys&gt; enumerations).","pos":[0,203],"source":"The following table shows the editing commands and the associated default key gestures (with key names from the <xref:System.Windows.Input.Key> and <xref:System.Windows.Input.ModifierKeys> enumerations)."},{"content":"|Editing command|Default key gesture|   |---------------------|-------------------------|   |&lt;xref:System.Windows.Documents.EditingCommands.AlignCenter%2A&gt;|<ph id=\"ph1\">`Ctrl`</ph><ph id=\"ph2\">+</ph><ph id=\"ph3\">`E`</ph>|   |&lt;xref:System.Windows.Documents.EditingCommands.AlignJustify%2A&gt;|<ph id=\"ph4\">`Ctrl`</ph><ph id=\"ph5\">+</ph><ph id=\"ph6\">`J`</ph>|   |&lt;xref:System.Windows.Documents.EditingCommands.AlignLeft%2A&gt;|<ph id=\"ph7\">`Ctrl`</ph><ph id=\"ph8\">+</ph><ph id=\"ph9\">`L`</ph>|   |&lt;xref:System.Windows.Documents.EditingCommands.AlignRight%2A&gt;|<ph id=\"ph10\">`Ctrl`</ph><ph id=\"ph11\">+</ph><ph id=\"ph12\">`R`</ph>|   |&lt;xref:System.Windows.Documents.EditingCommands.Backspace%2A&gt;|<ph id=\"ph13\">`Backspace`</ph>|   |&lt;xref:System.Windows.Documents.EditingCommands.CorrectSpellingError%2A&gt;|no default key gesture|   |&lt;xref:System.Windows.Documents.EditingCommands.DecreaseFontSize%2A&gt;|<ph id=\"ph14\">`Ctrl`</ph><ph id=\"ph15\">+</ph><ph id=\"ph16\">`OemOpenBrackets`</ph>|   |&lt;xref:System.Windows.Documents.EditingCommands.DecreaseIndentation%2A&gt;|<ph id=\"ph17\">`Ctrl`</ph><ph id=\"ph18\">+</ph><ph id=\"ph19\">`Shift`</ph><ph id=\"ph20\">+</ph><ph id=\"ph21\">`T`</ph>|   |&lt;xref:System.Windows.Documents.EditingCommands.Delete%2A&gt;|<ph id=\"ph22\">`Delete`</ph>|   |&lt;xref:System.Windows.Documents.EditingCommands.DeleteNextWord%2A&gt;|<ph id=\"ph23\">`Ctrl`</ph><ph id=\"ph24\">+</ph><ph id=\"ph25\">`Delete`</ph>|   |&lt;xref:System.Windows.Documents.EditingCommands.DeletePreviousWord%2A&gt;|<ph id=\"ph26\">`Ctrl`</ph><ph id=\"ph27\">+</ph><ph id=\"ph28\">`Backspace`</ph>|   |&lt;xref:System.Windows.Documents.EditingCommands.EnterLineBreak%2A&gt;|<ph id=\"ph29\">`Shift`</ph><ph id=\"ph30\">+</ph><ph id=\"ph31\">`Enter`</ph>|   |&lt;xref:System.Windows.Documents.EditingCommands.EnterParagraphBreak%2A&gt;|<ph id=\"ph32\">`Enter`</ph>|   |&lt;xref:System.Windows.Documents.EditingCommands.IgnoreSpellingError%2A&gt;|no default key gesture|   |&lt;xref:System.Windows.Documents.EditingCommands.IncreaseFontSize%2A&gt;|<ph id=\"ph33\">`Ctrl`</ph><ph id=\"ph34\">+</ph><ph id=\"ph35\">`OemCloseBrackets`</ph>|   |&lt;xref:System.Windows.Documents.EditingCommands.IncreaseIndentation%2A&gt;|<ph id=\"ph36\">`Ctrl`</ph><ph id=\"ph37\">+</ph><ph id=\"ph38\">`T`</ph>|   |&lt;xref:System.Windows.Documents.EditingCommands.MoveDownByLine%2A&gt;|<ph id=\"ph39\">`Down`</ph>|   |&lt;xref:System.Windows.Documents.EditingCommands.MoveDownByPage%2A&gt;|<ph id=\"ph40\">`PageDown`</ph>|   |&lt;xref:System.Windows.Documents.EditingCommands.MoveDownByParagraph%2A&gt;|<ph id=\"ph41\">`Ctrl`</ph><ph id=\"ph42\">+</ph><ph id=\"ph43\">`Down`</ph>|   |&lt;xref:System.Windows.Documents.EditingCommands.MoveLeftByCharacter%2A&gt;|<ph id=\"ph44\">`Left`</ph>|   |&lt;xref:System.Windows.Documents.EditingCommands.MoveLeftByWord%2A&gt;|<ph id=\"ph45\">`Ctrl`</ph><ph id=\"ph46\">+</ph><ph id=\"ph47\">`Left`</ph>|   |&lt;xref:System.Windows.Documents.EditingCommands.MoveRightByCharacter%2A&gt;|<ph id=\"ph48\">`Right`</ph>|   |&lt;xref:System.Windows.Documents.EditingCommands.MoveRightByWord%2A&gt;|<ph id=\"ph49\">`Ctrl`</ph><ph id=\"ph50\">+</ph><ph id=\"ph51\">`Right`</ph>|   |&lt;xref:System.Windows.Documents.EditingCommands.MoveToDocumentEnd%2A&gt;|<ph id=\"ph52\">`Ctrl`</ph><ph id=\"ph53\">+</ph><ph id=\"ph54\">`End`</ph>|   |&lt;xref:System.Windows.Documents.EditingCommands.MoveToDocumentStart%2A&gt;|<ph id=\"ph55\">`Ctrl`</ph><ph id=\"ph56\">+</ph><ph id=\"ph57\">`Home`</ph>|   |&lt;xref:System.Windows.Documents.EditingCommands.MoveToLineEnd%2A&gt;|<ph id=\"ph58\">`End`</ph>|   |&lt;xref:System.Windows.Documents.EditingCommands.MoveToLineStart%2A&gt;|<ph id=\"ph59\">`Home`</ph>|   |&lt;xref:System.Windows.Documents.EditingCommands.MoveUpByLine%2A&gt;|<ph id=\"ph60\">`Up`</ph>|   |&lt;xref:System.Windows.Documents.EditingCommands.MoveUpByPage%2A&gt;|<ph id=\"ph61\">`PageUp`</ph>|   |&lt;xref:System.Windows.Documents.EditingCommands.MoveUpByParagraph%2A&gt;|<ph id=\"ph62\">`Ctrl`</ph><ph id=\"ph63\">+</ph><ph id=\"ph64\">`Up`</ph>|   |&lt;xref:System.Windows.Documents.EditingCommands.SelectDownByLine%2A&gt;|<ph id=\"ph65\">`Shift`</ph><ph id=\"ph66\">+</ph><ph id=\"ph67\">`Down`</ph>|   |&lt;xref:System.Windows.Documents.EditingCommands.SelectDownByPage%2A&gt;|<ph id=\"ph68\">`Shift`</ph><ph id=\"ph69\">+</ph><ph id=\"ph70\">`PageDown`</ph>|   |&lt;xref:System.Windows.Documents.EditingCommands.SelectDownByParagraph%2A&gt;|<ph id=\"ph71\">`Ctrl`</ph><ph id=\"ph72\">+</ph><ph id=\"ph73\">`Shift`</ph><ph id=\"ph74\">+</ph><ph id=\"ph75\">`Down`</ph>|   |&lt;xref:System.Windows.Documents.EditingCommands.SelectLeftByCharacter%2A&gt;|<ph id=\"ph76\">`Shift`</ph><ph id=\"ph77\">+</ph><ph id=\"ph78\">`Left`</ph>|   |&lt;xref:System.Windows.Documents.EditingCommands.SelectLeftByWord%2A&gt;|<ph id=\"ph79\">`Ctrl`</ph><ph id=\"ph80\">+</ph><ph id=\"ph81\">`Shift`</ph><ph id=\"ph82\">+</ph><ph id=\"ph83\">`Left`</ph>|   |&lt;xref:System.Windows.Documents.EditingCommands.SelectRightByCharacter%2A&gt;|<ph id=\"ph84\">`Shift`</ph><ph id=\"ph85\">+</ph><ph id=\"ph86\">`Right`</ph>|   |&lt;xref:System.Windows.Documents.EditingCommands.SelectRightByWord%2A&gt;|<ph id=\"ph87\">`Ctrl`</ph><ph id=\"ph88\">+</ph><ph id=\"ph89\">`Shift`</ph><ph id=\"ph90\">+</ph><ph id=\"ph91\">`Right`</ph>|   |&lt;xref:System.Windows.Documents.EditingCommands.SelectToDocumentEnd%2A&gt;|<ph id=\"ph92\">`Ctrl`</ph><ph id=\"ph93\">+</ph><ph id=\"ph94\">`Shift`</ph><ph id=\"ph95\">+</ph><ph id=\"ph96\">`End`</ph>|   |&lt;xref:System.Windows.Documents.EditingCommands.SelectToDocumentStart%2A&gt;|<ph id=\"ph97\">`Ctrl`</ph><ph id=\"ph98\">+</ph><ph id=\"ph99\">`Shift`</ph><ph id=\"ph100\">+</ph><ph id=\"ph101\">`Home`</ph>|   |&lt;xref:System.Windows.Documents.EditingCommands.SelectToLineEnd%2A&gt;|<ph id=\"ph102\">`Shift`</ph><ph id=\"ph103\">+</ph><ph id=\"ph104\">`End`</ph>|   |&lt;xref:System.Windows.Documents.EditingCommands.SelectToLineStart%2A&gt;|<ph id=\"ph105\">`Shift`</ph><ph id=\"ph106\">+</ph><ph id=\"ph107\">`Home`</ph>|   |&lt;xref:System.Windows.Documents.EditingCommands.SelectUpByLine%2A&gt;|<ph id=\"ph108\">`Shift`</ph><ph id=\"ph109\">+</ph><ph id=\"ph110\">`Up`</ph>|   |&lt;xref:System.Windows.Documents.EditingCommands.SelectUpByPage%2A&gt;|<ph id=\"ph111\">`Shift`</ph><ph id=\"ph112\">+</ph><ph id=\"ph113\">`PageUp`</ph>|   |&lt;xref:System.Windows.Documents.EditingCommands.SelectUpByParagraph%2A&gt;|<ph id=\"ph114\">`Ctrl`</ph><ph id=\"ph115\">+</ph><ph id=\"ph116\">`Shift`</ph><ph id=\"ph117\">+</ph><ph id=\"ph118\">`Up`</ph>|   |&lt;xref:System.Windows.Documents.EditingCommands.TabBackward%2A&gt;|<ph id=\"ph119\">`Shift`</ph><ph id=\"ph120\">+</ph><ph id=\"ph121\">`Tab`</ph>|   |&lt;xref:System.Windows.Documents.EditingCommands.TabForward%2A&gt;|<ph id=\"ph122\">`Tab`</ph>|   |&lt;xref:System.Windows.Documents.EditingCommands.ToggleBold%2A&gt;|<ph id=\"ph123\">`Ctrl`</ph><ph id=\"ph124\">+</ph><ph id=\"ph125\">`B`</ph>|   |&lt;xref:System.Windows.Documents.EditingCommands.ToggleBullets%2A&gt;|<ph id=\"ph126\">`Ctrl`</ph><ph id=\"ph127\">+</ph><ph id=\"ph128\">`Shift`</ph><ph id=\"ph129\">+</ph><ph id=\"ph130\">`L`</ph>|   |&lt;xref:System.Windows.Documents.EditingCommands.ToggleInsert%2A&gt;|<ph id=\"ph131\">`Insert`</ph>|   |&lt;xref:System.Windows.Documents.EditingCommands.ToggleItalic%2A&gt;|<ph id=\"ph132\">`Ctrl`</ph><ph id=\"ph133\">+</ph><ph id=\"ph134\">`I`</ph>|   |&lt;xref:System.Windows.Documents.EditingCommands.ToggleNumbering%2A&gt;|<ph id=\"ph135\">`Ctrl`</ph><ph id=\"ph136\">+</ph><ph id=\"ph137\">`Shift`</ph><ph id=\"ph138\">+</ph><ph id=\"ph139\">`N`</ph>|   |&lt;xref:System.Windows.Documents.EditingCommands.ToggleSubscript%2A&gt;|<ph id=\"ph140\">`Ctrl`</ph><ph id=\"ph141\">+</ph><ph id=\"ph142\">`OemPlus`</ph>|   |&lt;xref:System.Windows.Documents.EditingCommands.ToggleSuperscript%2A&gt;|<ph id=\"ph143\">`Ctrl`</ph><ph id=\"ph144\">+</ph><ph id=\"ph145\">`Shift+OemPlus`</ph>|   |&lt;xref:System.Windows.Documents.EditingCommands.ToggleUnderline%2A&gt;|<ph id=\"ph146\">`Ctrl`</ph><ph id=\"ph147\">+</ph><ph id=\"ph148\">`U`</ph>|       Caret movement commands and selection expanding commands share a common set of default key gestures, the general difference being the addition of the &lt;xref:System.Windows.Input.ModifierKeys&gt; key to differentiate selection commands from caret movement commands.","pos":[209,5205],"source":"      |Editing command|Default key gesture|   |---------------------|-------------------------|   |<xref:System.Windows.Documents.EditingCommands.AlignCenter%2A>|`Ctrl`+`E`|   |<xref:System.Windows.Documents.EditingCommands.AlignJustify%2A>|`Ctrl`+`J`|   |<xref:System.Windows.Documents.EditingCommands.AlignLeft%2A>|`Ctrl`+`L`|   |<xref:System.Windows.Documents.EditingCommands.AlignRight%2A>|`Ctrl`+`R`|   |<xref:System.Windows.Documents.EditingCommands.Backspace%2A>|`Backspace`|   |<xref:System.Windows.Documents.EditingCommands.CorrectSpellingError%2A>|no default key gesture|   |<xref:System.Windows.Documents.EditingCommands.DecreaseFontSize%2A>|`Ctrl`+`OemOpenBrackets`|   |<xref:System.Windows.Documents.EditingCommands.DecreaseIndentation%2A>|`Ctrl`+`Shift`+`T`|   |<xref:System.Windows.Documents.EditingCommands.Delete%2A>|`Delete`|   |<xref:System.Windows.Documents.EditingCommands.DeleteNextWord%2A>|`Ctrl`+`Delete`|   |<xref:System.Windows.Documents.EditingCommands.DeletePreviousWord%2A>|`Ctrl`+`Backspace`|   |<xref:System.Windows.Documents.EditingCommands.EnterLineBreak%2A>|`Shift`+`Enter`|   |<xref:System.Windows.Documents.EditingCommands.EnterParagraphBreak%2A>|`Enter`|   |<xref:System.Windows.Documents.EditingCommands.IgnoreSpellingError%2A>|no default key gesture|   |<xref:System.Windows.Documents.EditingCommands.IncreaseFontSize%2A>|`Ctrl`+`OemCloseBrackets`|   |<xref:System.Windows.Documents.EditingCommands.IncreaseIndentation%2A>|`Ctrl`+`T`|   |<xref:System.Windows.Documents.EditingCommands.MoveDownByLine%2A>|`Down`|   |<xref:System.Windows.Documents.EditingCommands.MoveDownByPage%2A>|`PageDown`|   |<xref:System.Windows.Documents.EditingCommands.MoveDownByParagraph%2A>|`Ctrl`+`Down`|   |<xref:System.Windows.Documents.EditingCommands.MoveLeftByCharacter%2A>|`Left`|   |<xref:System.Windows.Documents.EditingCommands.MoveLeftByWord%2A>|`Ctrl`+`Left`|   |<xref:System.Windows.Documents.EditingCommands.MoveRightByCharacter%2A>|`Right`|   |<xref:System.Windows.Documents.EditingCommands.MoveRightByWord%2A>|`Ctrl`+`Right`|   |<xref:System.Windows.Documents.EditingCommands.MoveToDocumentEnd%2A>|`Ctrl`+`End`|   |<xref:System.Windows.Documents.EditingCommands.MoveToDocumentStart%2A>|`Ctrl`+`Home`|   |<xref:System.Windows.Documents.EditingCommands.MoveToLineEnd%2A>|`End`|   |<xref:System.Windows.Documents.EditingCommands.MoveToLineStart%2A>|`Home`|   |<xref:System.Windows.Documents.EditingCommands.MoveUpByLine%2A>|`Up`|   |<xref:System.Windows.Documents.EditingCommands.MoveUpByPage%2A>|`PageUp`|   |<xref:System.Windows.Documents.EditingCommands.MoveUpByParagraph%2A>|`Ctrl`+`Up`|   |<xref:System.Windows.Documents.EditingCommands.SelectDownByLine%2A>|`Shift`+`Down`|   |<xref:System.Windows.Documents.EditingCommands.SelectDownByPage%2A>|`Shift`+`PageDown`|   |<xref:System.Windows.Documents.EditingCommands.SelectDownByParagraph%2A>|`Ctrl`+`Shift`+`Down`|   |<xref:System.Windows.Documents.EditingCommands.SelectLeftByCharacter%2A>|`Shift`+`Left`|   |<xref:System.Windows.Documents.EditingCommands.SelectLeftByWord%2A>|`Ctrl`+`Shift`+`Left`|   |<xref:System.Windows.Documents.EditingCommands.SelectRightByCharacter%2A>|`Shift`+`Right`|   |<xref:System.Windows.Documents.EditingCommands.SelectRightByWord%2A>|`Ctrl`+`Shift`+`Right`|   |<xref:System.Windows.Documents.EditingCommands.SelectToDocumentEnd%2A>|`Ctrl`+`Shift`+`End`|   |<xref:System.Windows.Documents.EditingCommands.SelectToDocumentStart%2A>|`Ctrl`+`Shift`+`Home`|   |<xref:System.Windows.Documents.EditingCommands.SelectToLineEnd%2A>|`Shift`+`End`|   |<xref:System.Windows.Documents.EditingCommands.SelectToLineStart%2A>|`Shift`+`Home`|   |<xref:System.Windows.Documents.EditingCommands.SelectUpByLine%2A>|`Shift`+`Up`|   |<xref:System.Windows.Documents.EditingCommands.SelectUpByPage%2A>|`Shift`+`PageUp`|   |<xref:System.Windows.Documents.EditingCommands.SelectUpByParagraph%2A>|`Ctrl`+`Shift`+`Up`|   |<xref:System.Windows.Documents.EditingCommands.TabBackward%2A>|`Shift`+`Tab`|   |<xref:System.Windows.Documents.EditingCommands.TabForward%2A>|`Tab`|   |<xref:System.Windows.Documents.EditingCommands.ToggleBold%2A>|`Ctrl`+`B`|   |<xref:System.Windows.Documents.EditingCommands.ToggleBullets%2A>|`Ctrl`+`Shift`+`L`|   |<xref:System.Windows.Documents.EditingCommands.ToggleInsert%2A>|`Insert`|   |<xref:System.Windows.Documents.EditingCommands.ToggleItalic%2A>|`Ctrl`+`I`|   |<xref:System.Windows.Documents.EditingCommands.ToggleNumbering%2A>|`Ctrl`+`Shift`+`N`|   |<xref:System.Windows.Documents.EditingCommands.ToggleSubscript%2A>|`Ctrl`+`OemPlus`|   |<xref:System.Windows.Documents.EditingCommands.ToggleSuperscript%2A>|`Ctrl`+`Shift+OemPlus`|   |<xref:System.Windows.Documents.EditingCommands.ToggleUnderline%2A>|`Ctrl`+`U`|       Caret movement commands and selection expanding commands share a common set of default key gestures, the general difference being the addition of the <xref:System.Windows.Input.ModifierKeys> key to differentiate selection commands from caret movement commands."},{"content":"For example, the &lt;xref:System.Windows.Documents.EditingCommands.MoveLeftByCharacter%2A&gt; command has a default key gesture of &lt;xref:System.Windows.Input.Key&gt;, and the corresponding &lt;xref:System.Windows.Documents.EditingCommands.SelectLeftByCharacter%2A&gt; command has a default key gesture of &lt;xref:System.Windows.Input.ModifierKeys&gt;+&lt;xref:System.Windows.Input.Key&gt;.","pos":[5207,5570],"source":"  For example, the <xref:System.Windows.Documents.EditingCommands.MoveLeftByCharacter%2A> command has a default key gesture of <xref:System.Windows.Input.Key>, and the corresponding <xref:System.Windows.Documents.EditingCommands.SelectLeftByCharacter%2A> command has a default key gesture of <xref:System.Windows.Input.ModifierKeys>+<xref:System.Windows.Input.Key>."},{"content":"In general, the command definitions provided by the EditingCommands class do not make use of command parameters (the <ph id=\"ph1\">`parameter`</ph> parameter expected by the &lt;xref:System.Windows.Input.ICommand.Execute%2A&gt; method).","pos":[5577,5788],"source":"       In general, the command definitions provided by the EditingCommands class do not make use of command parameters (the `parameter` parameter expected by the <xref:System.Windows.Input.ICommand.Execute%2A> method)."},{"content":"For more information on commands and commanding, see <bpt id=\"p1\">[</bpt>Input Overview<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[5795,5904],"source":"       For more information on commands and commanding, see [Input Overview](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[11471,11590],"content":"Represents the AlignCenter command, which requests that the current paragraph or a selection of paragraphs be centered.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the AlignCenter command, which requests that the current paragraph or a selection of paragraphs be centered.","pos":[0,119]}]},{"pos":[11603,12509],"content":"This command operates at the <xref:System.Windows.Documents.Paragraph> level.  If this command is invoked on a partial selection of content within a paragraph (including an empty selection where the caret is within a paragraph), the requested effect is applied to the entire paragraph.  If this command is invoked on a selection that spans multiple paragraphs, the effect is applied to the entire contents of each paragraph that participates in the selection.       The following figure shows an example of centered content.       ![Screenshot: TextAlign property value of Center](~/add/media/flowdoc-textalign-center.png \"Screenshot: TextAlign property value of Center\")       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.      <a name=\"xamlAttributeUsage_AlignCenter\"></a>    ## XAML Attribute Usage      ```   <object property=\"AlignCenter\"/>   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This command operates at the &lt;xref:System.Windows.Documents.Paragraph&gt; level.","pos":[0,77],"source":"This command operates at the <xref:System.Windows.Documents.Paragraph> level."},{"content":"If this command is invoked on a partial selection of content within a paragraph (including an empty selection where the caret is within a paragraph), the requested effect is applied to the entire paragraph.","pos":[79,285]},{"content":"If this command is invoked on a selection that spans multiple paragraphs, the effect is applied to the entire contents of each paragraph that participates in the selection.","pos":[287,459]},{"content":"The following figure shows an example of centered content.","pos":[466,524]},{"content":"<bpt id=\"p1\">![</bpt>Screenshot: TextAlign property value of Center<ept id=\"p1\">]</ept><bpt id=\"p2\">(~/add/media/flowdoc-textalign-center.png \"</bpt>Screenshot: TextAlign property value of Center<ept id=\"p2\">\")</ept>       This command is natively supported by &lt;xref:System.Windows.Controls.RichTextBox&gt;.","pos":[531,759],"source":"![Screenshot: TextAlign property value of Center](~/add/media/flowdoc-textalign-center.png \"Screenshot: TextAlign property value of Center\")       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_AlignCenter\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object property=\"AlignCenter\"/&gt;   ```</ph>","pos":[765,887],"source":"<a name=\"xamlAttributeUsage_AlignCenter\"></a>    ## XAML Attribute Usage      ```   <object property=\"AlignCenter\"/>   ```"}]},{"pos":[13998,14182],"content":"The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_E\" name=\"E\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The requested command.","pos":[0,22]},{"content":"The default key gesture for this command is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept><ph id=\"ph1\">+</ph><bpt id=\"p2\">&lt;xref uid=\"langword_csharp_E\" name=\"E\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[24,184],"source":"  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_E\" name=\"E\" href=\"\"></xref>."}]},{"pos":[14678,14799],"content":"Represents the AlignJustify command, which requests that the current paragraph or a selection of paragraphs be justified.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the AlignJustify command, which requests that the current paragraph or a selection of paragraphs be justified.","pos":[0,121]}]},{"pos":[14812,16459],"content":"This command operates at the <xref:System.Windows.Documents.Paragraph> level.  If this command is invoked on a partial selection of content within a paragraph (including an empty selection where the caret is within a paragraph), the requested effect is applied to the entire paragraph.  If this command is invoked on a selection that spans multiple paragraphs, the effect is applied to all the paragraphs in the selection.       When content is justified, the horizontal spacing within each line of content is adjusted so that the justified lines are of equal or near-equal width.  Content is typically justified to create smooth edges on the sides of the content.       Because it is often shorter than the rest, the last line in a paragraph may remain unjustified after this command is invoked.       The following figure shows unjustified (left-aligned) content.       ![Screenshot: Content is unjustified](~/add/media/content-unjustified.png \"Screenshot: Content is unjustified\")       The following figure shows the same content after it has been justified.       ![Screenshot of content justified text](~/add/media/content-justified.png \"Screenshot of content justified text\")       There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.      <a name=\"xamlAttributeUsage_AlignJustify\"></a>    ## XAML Attribute Usage      ```   <object property=\"AlignJustify\"/>   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This command operates at the &lt;xref:System.Windows.Documents.Paragraph&gt; level.","pos":[0,77],"source":"This command operates at the <xref:System.Windows.Documents.Paragraph> level."},{"content":"If this command is invoked on a partial selection of content within a paragraph (including an empty selection where the caret is within a paragraph), the requested effect is applied to the entire paragraph.","pos":[79,285]},{"content":"If this command is invoked on a selection that spans multiple paragraphs, the effect is applied to all the paragraphs in the selection.","pos":[287,422]},{"content":"When content is justified, the horizontal spacing within each line of content is adjusted so that the justified lines are of equal or near-equal width.","pos":[429,580]},{"content":"Content is typically justified to create smooth edges on the sides of the content.","pos":[582,664]},{"content":"Because it is often shorter than the rest, the last line in a paragraph may remain unjustified after this command is invoked.","pos":[671,796]},{"content":"The following figure shows unjustified (left-aligned) content.","pos":[803,865]},{"content":"<bpt id=\"p1\">![</bpt>Screenshot: Content is unjustified<ept id=\"p1\">]</ept><bpt id=\"p2\">(~/add/media/content-unjustified.png \"</bpt>Screenshot: Content is unjustified<ept id=\"p2\">\")</ept>       The following figure shows the same content after it has been justified.","pos":[872,1062],"source":"![Screenshot: Content is unjustified](~/add/media/content-unjustified.png \"Screenshot: Content is unjustified\")       The following figure shows the same content after it has been justified."},{"content":"<bpt id=\"p1\">![</bpt>Screenshot of content justified text<ept id=\"p1\">]</ept><bpt id=\"p2\">(~/add/media/content-justified.png \"</bpt>Screenshot of content justified text<ept id=\"p2\">\")</ept>       There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.","pos":[1069,1398],"source":"![Screenshot of content justified text](~/add/media/content-justified.png \"Screenshot of content justified text\")       There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer."},{"content":"This command is natively supported by &lt;xref:System.Windows.Controls.RichTextBox&gt;.","pos":[1405,1486],"source":"       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_AlignJustify\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object property=\"AlignJustify\"/&gt;   ```</ph>","pos":[1492,1616],"source":"<a name=\"xamlAttributeUsage_AlignJustify\"></a>    ## XAML Attribute Usage      ```   <object property=\"AlignJustify\"/>   ```"}]},{"pos":[17949,18133],"content":"The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_J\" name=\"J\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The requested command.","pos":[0,22]},{"content":"The default key gesture for this command is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept><ph id=\"ph1\">+</ph><bpt id=\"p2\">&lt;xref uid=\"langword_csharp_J\" name=\"J\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[24,184],"source":"  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_J\" name=\"J\" href=\"\"></xref>."}]},{"pos":[18615,18708],"content":"Represents the AlignLeft command, which requests that a selection of content be aligned left.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the AlignLeft command, which requests that a selection of content be aligned left.","pos":[0,93]}]},{"pos":[18721,19839],"content":"This command operates at the <xref:System.Windows.Documents.Paragraph> level.  If this command is invoked on a partial selection of content within a paragraph (including an empty selection where the caret is within a paragraph), the requested effect is applied to the entire paragraph.  If this command is invoked on a selection that spans multiple paragraphs, the effect is applied to the entire contents of each paragraph that participates in the selection.       The following figure shows an example of left-aligned content.       ![Screenshot: TextAlign property value of Left](~/add/media/flowdoc-textalign-left.png \"Screenshot: TextAlign property value of Left\")       There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.      <a name=\"xamlAttributeUsage_AlignLeft\"></a>    ## XAML Attribute Usage      ```   <object property=\"AlignLeft\"/>   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This command operates at the &lt;xref:System.Windows.Documents.Paragraph&gt; level.","pos":[0,77],"source":"This command operates at the <xref:System.Windows.Documents.Paragraph> level."},{"content":"If this command is invoked on a partial selection of content within a paragraph (including an empty selection where the caret is within a paragraph), the requested effect is applied to the entire paragraph.","pos":[79,285]},{"content":"If this command is invoked on a selection that spans multiple paragraphs, the effect is applied to the entire contents of each paragraph that participates in the selection.","pos":[287,459]},{"content":"The following figure shows an example of left-aligned content.","pos":[466,528]},{"content":"<bpt id=\"p1\">![</bpt>Screenshot: TextAlign property value of Left<ept id=\"p1\">]</ept><bpt id=\"p2\">(~/add/media/flowdoc-textalign-left.png \"</bpt>Screenshot: TextAlign property value of Left<ept id=\"p2\">\")</ept>       There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.","pos":[535,885],"source":"![Screenshot: TextAlign property value of Left](~/add/media/flowdoc-textalign-left.png \"Screenshot: TextAlign property value of Left\")       There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer."},{"content":"This command is natively supported by &lt;xref:System.Windows.Controls.RichTextBox&gt;.","pos":[892,973],"source":"       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_AlignLeft\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object property=\"AlignLeft\"/&gt;   ```</ph>","pos":[979,1097],"source":"<a name=\"xamlAttributeUsage_AlignLeft\"></a>    ## XAML Attribute Usage      ```   <object property=\"AlignLeft\"/>   ```"}]},{"pos":[21326,21510],"content":"The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_L\" name=\"L\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The requested command.","pos":[0,22]},{"content":"The default key gesture for this command is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept><ph id=\"ph1\">+</ph><bpt id=\"p2\">&lt;xref uid=\"langword_csharp_L\" name=\"L\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[24,184],"source":"  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_L\" name=\"L\" href=\"\"></xref>."}]},{"pos":[21994,22089],"content":"Represents the AlignRight command, which requests that a selection of content be aligned right.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the AlignRight command, which requests that a selection of content be aligned right.","pos":[0,95]}]},{"pos":[22102,23208],"content":"This command operates at the <xref:System.Windows.Documents.Paragraph> level.  If this command is invoked on a partial selection of content within a paragraph (including an empty selection where the caret is within a paragraph), the requested effect is applied to the entire paragraph.  If this command is invoked on a selection that spans multiple paragraphs, the effect is applied to the entire contents of each paragraph that participates in the selection.       The following figure shows an example of right-aligned content.       ![Screenshot: TextAlign value of Right](~/add/media/flowdoc-textalign-right.png \"Screenshot: TextAlign value of Right\")       There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.      <a name=\"xamlAttributeUsage_AlignRight\"></a>    ## XAML Attribute Usage      ```   <object property=\"AlignRight\"/>   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This command operates at the &lt;xref:System.Windows.Documents.Paragraph&gt; level.","pos":[0,77],"source":"This command operates at the <xref:System.Windows.Documents.Paragraph> level."},{"content":"If this command is invoked on a partial selection of content within a paragraph (including an empty selection where the caret is within a paragraph), the requested effect is applied to the entire paragraph.","pos":[79,285]},{"content":"If this command is invoked on a selection that spans multiple paragraphs, the effect is applied to the entire contents of each paragraph that participates in the selection.","pos":[287,459]},{"content":"The following figure shows an example of right-aligned content.","pos":[466,529]},{"content":"<bpt id=\"p1\">![</bpt>Screenshot: TextAlign value of Right<ept id=\"p1\">]</ept><bpt id=\"p2\">(~/add/media/flowdoc-textalign-right.png \"</bpt>Screenshot: TextAlign value of Right<ept id=\"p2\">\")</ept>       There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.","pos":[536,871],"source":"![Screenshot: TextAlign value of Right](~/add/media/flowdoc-textalign-right.png \"Screenshot: TextAlign value of Right\")       There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer."},{"content":"This command is natively supported by &lt;xref:System.Windows.Controls.RichTextBox&gt;.","pos":[878,959],"source":"       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_AlignRight\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object property=\"AlignRight\"/&gt;   ```</ph>","pos":[965,1085],"source":"<a name=\"xamlAttributeUsage_AlignRight\"></a>    ## XAML Attribute Usage      ```   <object property=\"AlignRight\"/>   ```"}]},{"pos":[24696,24880],"content":"The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_R\" name=\"R\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The requested command.","pos":[0,22]},{"content":"The default key gesture for this command is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept><ph id=\"ph1\">+</ph><bpt id=\"p2\">&lt;xref uid=\"langword_csharp_R\" name=\"R\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[24,184],"source":"  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_R\" name=\"R\" href=\"\"></xref>."}]},{"pos":[25360,25491],"content":"Represents the Backspace command, which requests that a backspace be entered at the current position or over the current selection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the Backspace command, which requests that a backspace be entered at the current position or over the current selection.","pos":[0,131]}]},{"pos":[25504,26511],"content":"When invoked on an empty selection, this command deletes the character or paragraph separator just before the caret. When invoked on a non-empty selection, this command deletes the selection.       This command retains any formatting from the deleted selection for content immediately inserted at the same location after this command is invoked.  Contrast with the <xref:System.Windows.Documents.EditingCommands.Delete%2A> command, which does not retain previous formatting.       There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.      <a name=\"xamlAttributeUsage_Backspace\"></a>    ## XAML Attribute Usage      ```   <object property=\"Backspace\"/>   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"When invoked on an empty selection, this command deletes the character or paragraph separator just before the caret.","pos":[0,116]},{"content":"When invoked on a non-empty selection, this command deletes the selection.","pos":[117,191]},{"content":"This command retains any formatting from the deleted selection for content immediately inserted at the same location after this command is invoked.","pos":[198,345]},{"content":"Contrast with the &lt;xref:System.Windows.Documents.EditingCommands.Delete%2A&gt; command, which does not retain previous formatting.","pos":[347,474],"source":"  Contrast with the <xref:System.Windows.Documents.EditingCommands.Delete%2A> command, which does not retain previous formatting."},{"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.","pos":[481,690]},{"content":"This command is natively supported by &lt;xref:System.Windows.Controls.RichTextBox&gt;, &lt;xref:System.Windows.Controls.TextBox&gt;, and &lt;xref:System.Windows.Controls.PasswordBox&gt;.","pos":[697,866],"source":"       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_Backspace\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object property=\"Backspace\"/&gt;   ```</ph>","pos":[872,990],"source":"<a name=\"xamlAttributeUsage_Backspace\"></a>    ## XAML Attribute Usage      ```   <object property=\"Backspace\"/>   ```"}]},{"pos":[27998,28137],"content":"The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Backspace\" name=\"Backspace\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The requested command.","pos":[0,22]},{"content":"The default key gesture for this command is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Backspace\" name=\"Backspace\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[24,139],"source":"  The default key gesture for this command is <xref uid=\"langword_csharp_Backspace\" name=\"Backspace\" href=\"\"></xref>."}]},{"pos":[28671,28793],"content":"Represents the CorrectSpellingError command, which requests that any misspelled word at the current position be corrected.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the CorrectSpellingError command, which requests that any misspelled word at the current position be corrected.","pos":[0,122]}]},{"pos":[28806,29172],"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.      <a name=\"xamlAttributeUsage_CorrectSpellingError\"></a>    ## XAML Attribute Usage      ```   <object property=\"CorrectSpellingError\"/>   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.","pos":[0,209]},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_CorrectSpellingError\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object property=\"CorrectSpellingError\"/&gt;   ```</ph>","pos":[215,355],"source":"<a name=\"xamlAttributeUsage_CorrectSpellingError\"></a>    ## XAML Attribute Usage      ```   <object property=\"CorrectSpellingError\"/>   ```"}]},{"pos":[29358,29422],"content":"The requested command.  This command has no default key gesture.","needQuote":true,"needEscape":true,"nodes":[{"content":"The requested command.  This command has no default key gesture.","pos":[0,64],"nodes":[{"content":"The requested command.","pos":[0,22]},{"content":"This command has no default key gesture.","pos":[24,64]}]}]},{"pos":[29947,30072],"content":"Represents the DecreaseFontSize command, which requests that the font size for the current selection be decreased by 1 point.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the DecreaseFontSize command, which requests that the font size for the current selection be decreased by 1 point.","pos":[0,125]}]},{"pos":[30085,30705],"content":"If this command is invoked on an empty selection where the caret is within a word, the selection is automatically expanded to apply the command to the entire word.       There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.      <a name=\"xamlAttributeUsage_DecreaseFontSize\"></a>    ## XAML Attribute Usage      ```   <object property=\"DecreaseFontSize\"/>   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If this command is invoked on an empty selection where the caret is within a word, the selection is automatically expanded to apply the command to the entire word.","pos":[0,163]},{"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.","pos":[170,379]},{"content":"This command is natively supported by &lt;xref:System.Windows.Controls.RichTextBox&gt;.","pos":[386,467],"source":"       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_DecreaseFontSize\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object property=\"DecreaseFontSize\"/&gt;   ```</ph>","pos":[473,605],"source":"<a name=\"xamlAttributeUsage_DecreaseFontSize\"></a>    ## XAML Attribute Usage      ```   <object property=\"DecreaseFontSize\"/>   ```"}]},{"pos":[32199,32411],"content":"The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_OemOpenBrackets\" name=\"OemOpenBrackets\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The requested command.","pos":[0,22]},{"content":"The default key gesture for this command is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept><ph id=\"ph1\">+</ph><bpt id=\"p2\">&lt;xref uid=\"langword_csharp_OemOpenBrackets\" name=\"OemOpenBrackets\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[24,212],"source":"  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_OemOpenBrackets\" name=\"OemOpenBrackets\" href=\"\"></xref>."}]},{"pos":[32947,33078],"content":"Represents the DecreaseIndentation command, which requests that indentation for the current paragraph be decreased by one tab stop.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the DecreaseIndentation command, which requests that indentation for the current paragraph be decreased by one tab stop.","pos":[0,131]}]},{"pos":[33091,33742],"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.      > [!IMPORTANT] >  This command has no effect on a text element unless the <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A> property of the text element is set to `true`.      <a name=\"xamlAttributeUsage_DecreaseIndentation\"></a>    ## XAML Attribute Usage      ```   <object property=\"DecreaseIndentation\"/>   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.","pos":[0,209]},{"content":"This command is natively supported by &lt;xref:System.Windows.Controls.RichTextBox&gt;.","pos":[216,297],"source":"       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>."},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  This command has no effect on a text element unless the &lt;xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A&gt; property of the text element is set to <ph id=\"ph2\">`true`</ph>.","pos":[303,491],"source":"      > [!IMPORTANT] >  This command has no effect on a text element unless the <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A> property of the text element is set to `true`."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_DecreaseIndentation\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object property=\"DecreaseIndentation\"/&gt;   ```</ph>","pos":[497,635],"source":"<a name=\"xamlAttributeUsage_DecreaseIndentation\"></a>    ## XAML Attribute Usage      ```   <object property=\"DecreaseIndentation\"/>   ```"}]},{"pos":[35239,35486],"content":"The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"></xref>+<xref uid=\"langword_csharp_T\" name=\"T\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The requested command.","pos":[0,22]},{"content":"The default key gesture for this command is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept><ph id=\"ph1\">+</ph><bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept><ph id=\"ph2\">+</ph><bpt id=\"p3\">&lt;xref uid=\"langword_csharp_T\" name=\"T\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","pos":[24,247],"source":"  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"></xref>+<xref uid=\"langword_csharp_T\" name=\"T\" href=\"\"></xref>."}]},{"pos":[35960,36044],"content":"Represents the Delete command, which requests that the current selection be deleted.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the Delete command, which requests that the current selection be deleted.","pos":[0,84]}]},{"pos":[36057,36876],"content":"This command discards any formatting from the deleted selection.  Contrast with the <xref:System.Windows.Documents.EditingCommands.Backspace%2A> command, which retains any formatting from the deleted selection for content immediately inserted at the same location after this command is invoked.       There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.      <a name=\"xamlAttributeUsage_Delete\"></a>    ## XAML Attribute Usage      ```   <object property=\"Delete\"/>   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This command discards any formatting from the deleted selection.","pos":[0,64]},{"content":"Contrast with the &lt;xref:System.Windows.Documents.EditingCommands.Backspace%2A&gt; command, which retains any formatting from the deleted selection for content immediately inserted at the same location after this command is invoked.","pos":[66,294],"source":"  Contrast with the <xref:System.Windows.Documents.EditingCommands.Backspace%2A> command, which retains any formatting from the deleted selection for content immediately inserted at the same location after this command is invoked."},{"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.","pos":[301,510]},{"content":"This command is natively supported by &lt;xref:System.Windows.Controls.RichTextBox&gt;, &lt;xref:System.Windows.Controls.TextBox&gt;, and &lt;xref:System.Windows.Controls.PasswordBox&gt;.","pos":[517,686],"source":"       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_Delete\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object property=\"Delete\"/&gt;   ```</ph>","pos":[692,804],"source":"<a name=\"xamlAttributeUsage_Delete\"></a>    ## XAML Attribute Usage      ```   <object property=\"Delete\"/>   ```"}]},{"pos":[38360,38493],"content":"The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Delete\" name=\"Delete\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The requested command.","pos":[0,22]},{"content":"The default key gesture for this command is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Delete\" name=\"Delete\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[24,133],"source":"  The default key gesture for this command is <xref uid=\"langword_csharp_Delete\" name=\"Delete\" href=\"\"></xref>."}]},{"pos":[38994,39111],"content":"Represents the DeleteNextWord command, which requests that the next word (relative to a current position) be deleted.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the DeleteNextWord command, which requests that the next word (relative to a current position) be deleted.","pos":[0,117]}]},{"pos":[39124,39786],"content":"If the caret is within a word, the remainder of the word between the current position and the end of the word is deleted.       There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.      <a name=\"xamlAttributeUsage_DeleteNextWord\"></a>    ## XAML Attribute Usage      ```   <object property=\"DeleteNextWord\"/>   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If the caret is within a word, the remainder of the word between the current position and the end of the word is deleted.","pos":[0,121]},{"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.","pos":[128,337]},{"content":"This command is natively supported by &lt;xref:System.Windows.Controls.RichTextBox&gt;, &lt;xref:System.Windows.Controls.TextBox&gt;, and &lt;xref:System.Windows.Controls.PasswordBox&gt;.","pos":[344,513],"source":"       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_DeleteNextWord\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object property=\"DeleteNextWord\"/&gt;   ```</ph>","pos":[519,647],"source":"<a name=\"xamlAttributeUsage_DeleteNextWord\"></a>    ## XAML Attribute Usage      ```   <object property=\"DeleteNextWord\"/>   ```"}]},{"pos":[41278,41472],"content":"The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_Delete\" name=\"Delete\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The requested command.","pos":[0,22]},{"content":"The default key gesture for this command is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept><ph id=\"ph1\">+</ph><bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Delete\" name=\"Delete\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[24,194],"source":"  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_Delete\" name=\"Delete\" href=\"\"></xref>."}]},{"pos":[42001,42126],"content":"Represents the DeletePreviousWord command, which requests that the previous word (relative to a current position) be deleted.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the DeletePreviousWord command, which requests that the previous word (relative to a current position) be deleted.","pos":[0,125]}]},{"pos":[42139,42815],"content":"If the caret is within a word, the remainder of the word between the current position and the beginning of the word is deleted.       There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.      <a name=\"xamlAttributeUsage_DeletePreviousWord\"></a>    ## XAML Attribute Usage      ```   <object property=\"DeletePreviousWord\"/>   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If the caret is within a word, the remainder of the word between the current position and the beginning of the word is deleted.","pos":[0,127]},{"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.","pos":[134,343]},{"content":"This command is natively supported by &lt;xref:System.Windows.Controls.RichTextBox&gt;, &lt;xref:System.Windows.Controls.TextBox&gt;, and &lt;xref:System.Windows.Controls.PasswordBox&gt;.","pos":[350,519],"source":"       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_DeletePreviousWord\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object property=\"DeletePreviousWord\"/&gt;   ```</ph>","pos":[525,661],"source":"<a name=\"xamlAttributeUsage_DeletePreviousWord\"></a>    ## XAML Attribute Usage      ```   <object property=\"DeletePreviousWord\"/>   ```"}]},{"pos":[44311,44511],"content":"The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_Backspace\" name=\"Backspace\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The requested command.","pos":[0,22]},{"content":"The default key gesture for this command is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept><ph id=\"ph1\">+</ph><bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Backspace\" name=\"Backspace\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[24,200],"source":"  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_Backspace\" name=\"Backspace\" href=\"\"></xref>."}]},{"pos":[45024,45162],"content":"Represents the EnterLineBreak command, which requests that a line break be inserted at the current position or over the current selection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the EnterLineBreak command, which requests that a line break be inserted at the current position or over the current selection.","pos":[0,138]}]},{"pos":[45175,45873],"content":"For editors that support flow content, such as <xref:System.Windows.Controls.RichTextBox>, this command causes a <xref:System.Windows.Documents.LineBreak> element to be inserted at the current position.       There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.       This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>.      <a name=\"xamlAttributeUsage_EnterLineBreak\"></a>    ## XAML Attribute Usage      ```   <object property=\"EnterLineBreak\"/>   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"For editors that support flow content, such as &lt;xref:System.Windows.Controls.RichTextBox&gt;, this command causes a &lt;xref:System.Windows.Documents.LineBreak&gt; element to be inserted at the current position.","pos":[0,202],"source":"For editors that support flow content, such as <xref:System.Windows.Controls.RichTextBox>, this command causes a <xref:System.Windows.Documents.LineBreak> element to be inserted at the current position."},{"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.","pos":[209,418]},{"content":"This command is natively supported by &lt;xref:System.Windows.Controls.RichTextBox&gt; and &lt;xref:System.Windows.Controls.TextBox&gt;.","pos":[425,549],"source":"       This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_EnterLineBreak\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object property=\"EnterLineBreak\"/&gt;   ```</ph>","pos":[555,683],"source":"<a name=\"xamlAttributeUsage_EnterLineBreak\"></a>    ## XAML Attribute Usage      ```   <object property=\"EnterLineBreak\"/>   ```"}]},{"pos":[47365,47559],"content":"The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"></xref>+<xref uid=\"langword_csharp_Enter\" name=\"Enter\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The requested command.","pos":[0,22]},{"content":"The default key gesture for this command is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept><ph id=\"ph1\">+</ph><bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Enter\" name=\"Enter\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[24,194],"source":"  The default key gesture for this command is <xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"></xref>+<xref uid=\"langword_csharp_Enter\" name=\"Enter\" href=\"\"></xref>."}]},{"pos":[48093,48241],"content":"Represents the EnterParagraphBreak command, which requests that a paragraph break be inserted at the current position or over the current selection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the EnterParagraphBreak command, which requests that a paragraph break be inserted at the current position or over the current selection.","pos":[0,148]}]},{"pos":[48254,49123],"content":"This command is equivalent to the user pressing the ENTER key.       There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.       This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox> (when the <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsReturn%2A> property is `true`).      > [!IMPORTANT] >  This command has no effect on a text element unless the <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsReturn%2A> property of the text element is set to `true`.      <a name=\"xamlAttributeUsage_EnterParagraphBreak\"></a>    ## XAML Attribute Usage      ```   <object property=\"EnterParagraphBreak\"/>   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This command is equivalent to the user pressing the ENTER key.","pos":[0,62]},{"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.","pos":[69,278]},{"content":"This command is natively supported by &lt;xref:System.Windows.Controls.RichTextBox&gt; and &lt;xref:System.Windows.Controls.TextBox&gt; (when the &lt;xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsReturn%2A&gt; property is <ph id=\"ph1\">`true`</ph>).","pos":[285,510],"source":"       This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox> (when the <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsReturn%2A> property is `true`)."},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  This command has no effect on a text element unless the &lt;xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsReturn%2A&gt; property of the text element is set to <ph id=\"ph2\">`true`</ph>.","pos":[516,707],"source":"      > [!IMPORTANT] >  This command has no effect on a text element unless the <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsReturn%2A> property of the text element is set to `true`."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_EnterParagraphBreak\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object property=\"EnterParagraphBreak\"/&gt;   ```</ph>","pos":[713,851],"source":"<a name=\"xamlAttributeUsage_EnterParagraphBreak\"></a>    ## XAML Attribute Usage      ```   <object property=\"EnterParagraphBreak\"/>   ```"}]},{"pos":[50620,50751],"content":"The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Enter\" name=\"Enter\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The requested command.","pos":[0,22]},{"content":"The default key gesture for this command is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Enter\" name=\"Enter\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[24,131],"source":"  The default key gesture for this command is <xref uid=\"langword_csharp_Enter\" name=\"Enter\" href=\"\"></xref>."}]},{"pos":[51290,51451],"content":"Represents the IgnoreSpellingError command, which requests that any instances of misspelled words at the current position or in the current selection be ignored.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the IgnoreSpellingError command, which requests that any instances of misspelled words at the current position or in the current selection be ignored.","pos":[0,161]}]},{"pos":[51464,51828],"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.      <a name=\"xamlAttributeUsage_IgnoreSpellingError\"></a>    ## XAML Attribute Usage      ```   <object property=\"IgnoreSpellingError\"/>   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.","pos":[0,209]},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_IgnoreSpellingError\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object property=\"IgnoreSpellingError\"/&gt;   ```</ph>","pos":[215,353],"source":"<a name=\"xamlAttributeUsage_IgnoreSpellingError\"></a>    ## XAML Attribute Usage      ```   <object property=\"IgnoreSpellingError\"/>   ```"}]},{"pos":[52013,52077],"content":"The requested command.  This command has no default key gesture.","needQuote":true,"needEscape":true,"nodes":[{"content":"The requested command.  This command has no default key gesture.","pos":[0,64],"nodes":[{"content":"The requested command.","pos":[0,22]},{"content":"This command has no default key gesture.","pos":[24,64]}]}]},{"pos":[52601,52726],"content":"Represents the IncreaseFontSize command, which requests that the font size for the current selection be increased by 1 point.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the IncreaseFontSize command, which requests that the font size for the current selection be increased by 1 point.","pos":[0,125]}]},{"pos":[52739,53345],"content":"If this command is invoked on an empty selection where the caret is within a word, the selection is expanded to apply the command to the entire word.       There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.      <a name=\"xamlAttributeUsage_IncreaseFontSize\"></a>    ## XAML Attribute Usage      ```   <object property=\"IncreaseFontSize\"/>   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If this command is invoked on an empty selection where the caret is within a word, the selection is expanded to apply the command to the entire word.","pos":[0,149]},{"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.","pos":[156,365]},{"content":"This command is natively supported by &lt;xref:System.Windows.Controls.RichTextBox&gt;.","pos":[372,453],"source":"       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_IncreaseFontSize\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object property=\"IncreaseFontSize\"/&gt;   ```</ph>","pos":[459,591],"source":"<a name=\"xamlAttributeUsage_IncreaseFontSize\"></a>    ## XAML Attribute Usage      ```   <object property=\"IncreaseFontSize\"/>   ```"}]},{"pos":[54839,55053],"content":"The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_OemCloseBrackets\" name=\"OemCloseBrackets\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The requested command.","pos":[0,22]},{"content":"The default key gesture for this command is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept><ph id=\"ph1\">+</ph><bpt id=\"p2\">&lt;xref uid=\"langword_csharp_OemCloseBrackets\" name=\"OemCloseBrackets\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[24,214],"source":"  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_OemCloseBrackets\" name=\"OemCloseBrackets\" href=\"\"></xref>."}]},{"pos":[55589,55720],"content":"Represents the IncreaseIndentation command, which requests that indentation for the current paragraph be increased by one tab stop.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the IncreaseIndentation command, which requests that indentation for the current paragraph be increased by one tab stop.","pos":[0,131]}]},{"pos":[55733,56384],"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.      > [!IMPORTANT] >  This command has no effect on a text element unless the <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A> property of the text element is set to `true`.      <a name=\"xamlAttributeUsage_IncreaseIndentation\"></a>    ## XAML Attribute Usage      ```   <object property=\"IncreaseIndentation\"/>   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.","pos":[0,209]},{"content":"This command is natively supported by &lt;xref:System.Windows.Controls.RichTextBox&gt;.","pos":[216,297],"source":"       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>."},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  This command has no effect on a text element unless the &lt;xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A&gt; property of the text element is set to <ph id=\"ph2\">`true`</ph>.","pos":[303,491],"source":"      > [!IMPORTANT] >  This command has no effect on a text element unless the <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A> property of the text element is set to `true`."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_IncreaseIndentation\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object property=\"IncreaseIndentation\"/&gt;   ```</ph>","pos":[497,635],"source":"<a name=\"xamlAttributeUsage_IncreaseIndentation\"></a>    ## XAML Attribute Usage      ```   <object property=\"IncreaseIndentation\"/>   ```"}]},{"pos":[57881,58065],"content":"The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_T\" name=\"T\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The requested command.","pos":[0,22]},{"content":"The default key gesture for this command is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept><ph id=\"ph1\">+</ph><bpt id=\"p2\">&lt;xref uid=\"langword_csharp_T\" name=\"T\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[24,184],"source":"  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_T\" name=\"T\" href=\"\"></xref>."}]},{"pos":[58579,58670],"content":"Represents the MoveDownByLine command, which requests that the caret move down by one line.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the MoveDownByLine command, which requests that the caret move down by one line.","pos":[0,91]}]},{"pos":[58683,59170],"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.       This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>.      <a name=\"xamlAttributeUsage_MoveDownByLine\"></a>    ## XAML Attribute Usage      ```   <object property=\"MoveDownByLine\"/>   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.","pos":[0,209]},{"content":"This command is natively supported by &lt;xref:System.Windows.Controls.RichTextBox&gt; and &lt;xref:System.Windows.Controls.TextBox&gt;.","pos":[216,340],"source":"       This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_MoveDownByLine\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object property=\"MoveDownByLine\"/&gt;   ```</ph>","pos":[346,474],"source":"<a name=\"xamlAttributeUsage_MoveDownByLine\"></a>    ## XAML Attribute Usage      ```   <object property=\"MoveDownByLine\"/>   ```"}]},{"pos":[60662,60791],"content":"The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Down\" name=\"Down\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The requested command.","pos":[0,22]},{"content":"The default key gesture for this command is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Down\" name=\"Down\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[24,129],"source":"  The default key gesture for this command is <xref uid=\"langword_csharp_Down\" name=\"Down\" href=\"\"></xref>."}]},{"pos":[61300,61391],"content":"Represents the MoveDownByPage command, which requests that the caret move down by one page.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the MoveDownByPage command, which requests that the caret move down by one page.","pos":[0,91]}]},{"pos":[61404,61891],"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.       This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>.      <a name=\"xamlAttributeUsage_MoveDownByPage\"></a>    ## XAML Attribute Usage      ```   <object property=\"MoveDownByPage\"/>   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.","pos":[0,209]},{"content":"This command is natively supported by &lt;xref:System.Windows.Controls.RichTextBox&gt; and &lt;xref:System.Windows.Controls.TextBox&gt;.","pos":[216,340],"source":"       This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_MoveDownByPage\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object property=\"MoveDownByPage\"/&gt;   ```</ph>","pos":[346,474],"source":"<a name=\"xamlAttributeUsage_MoveDownByPage\"></a>    ## XAML Attribute Usage      ```   <object property=\"MoveDownByPage\"/>   ```"}]},{"pos":[63383,63520],"content":"The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_PageDown\" name=\"PageDown\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The requested command.","pos":[0,22]},{"content":"The default key gesture for this command is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_PageDown\" name=\"PageDown\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[24,137],"source":"  The default key gesture for this command is <xref uid=\"langword_csharp_PageDown\" name=\"PageDown\" href=\"\"></xref>."}]},{"pos":[64054,64155],"content":"Represents the MoveDownByParagraph command, which requests that the caret move down by one paragraph.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the MoveDownByParagraph command, which requests that the caret move down by one paragraph.","pos":[0,101]}]},{"pos":[64168,64907],"content":"This command positions the caret at the beginning of the next paragraph.       This command behaves like <xref:System.Windows.Documents.EditingCommands.MoveToDocumentEnd%2A> when invoked on a <xref:System.Windows.Controls.TextBox>.       There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.       This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>.      <a name=\"xamlAttributeUsage_MoveDownByParagraph\"></a>    ## XAML Attribute Usage      ```   <object property=\"MoveDownByParagraph\"/>   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This command positions the caret at the beginning of the next paragraph.","pos":[0,72]},{"content":"This command behaves like &lt;xref:System.Windows.Documents.EditingCommands.MoveToDocumentEnd%2A&gt; when invoked on a &lt;xref:System.Windows.Controls.TextBox&gt;.","pos":[79,231],"source":"       This command behaves like <xref:System.Windows.Documents.EditingCommands.MoveToDocumentEnd%2A> when invoked on a <xref:System.Windows.Controls.TextBox>."},{"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.","pos":[238,447]},{"content":"This command is natively supported by &lt;xref:System.Windows.Controls.RichTextBox&gt; and &lt;xref:System.Windows.Controls.TextBox&gt;.","pos":[454,578],"source":"       This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_MoveDownByParagraph\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object property=\"MoveDownByParagraph\"/&gt;   ```</ph>","pos":[584,722],"source":"<a name=\"xamlAttributeUsage_MoveDownByParagraph\"></a>    ## XAML Attribute Usage      ```   <object property=\"MoveDownByParagraph\"/>   ```"}]},{"pos":[66404,66594],"content":"The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_Down\" name=\"Down\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The requested command.","pos":[0,22]},{"content":"The default key gesture for this command is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept><ph id=\"ph1\">+</ph><bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Down\" name=\"Down\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[24,190],"source":"  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_Down\" name=\"Down\" href=\"\"></xref>."}]},{"pos":[67133,67231],"content":"Represents the MoveLeftByCharacter command, which requests that the caret move one character left.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the MoveLeftByCharacter command, which requests that the caret move one character left.","pos":[0,98]}]},{"pos":[67244,67786],"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.      <a name=\"xamlAttributeUsage_MoveLeftByCharacter\"></a>    ## XAML Attribute Usage      ```   <object property=\"MoveLeftByCharacter\"/>   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.","pos":[0,209]},{"content":"This command is natively supported by &lt;xref:System.Windows.Controls.RichTextBox&gt;, &lt;xref:System.Windows.Controls.TextBox&gt;, and &lt;xref:System.Windows.Controls.PasswordBox&gt;.","pos":[216,385],"source":"       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_MoveLeftByCharacter\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object property=\"MoveLeftByCharacter\"/&gt;   ```</ph>","pos":[391,529],"source":"<a name=\"xamlAttributeUsage_MoveLeftByCharacter\"></a>    ## XAML Attribute Usage      ```   <object property=\"MoveLeftByCharacter\"/>   ```"}]},{"pos":[69283,69412],"content":"The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Left\" name=\"Left\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The requested command.","pos":[0,22]},{"content":"The default key gesture for this command is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Left\" name=\"Left\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[24,129],"source":"  The default key gesture for this command is <xref uid=\"langword_csharp_Left\" name=\"Left\" href=\"\"></xref>."}]},{"pos":[69926,70014],"content":"Represents the MoveLeftByWord command, which requests that the caret move one word left.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the MoveLeftByWord command, which requests that the caret move one word left.","pos":[0,88]}]},{"pos":[70027,70738],"content":"If the caret is within a word, this command moves the caret to the beginning of that word.  Otherwise, this command moves the caret to the beginning of the previous word.       There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.      <a name=\"xamlAttributeUsage_MoveLeftByWord\"></a>    ## XAML Attribute Usage      ```   <object property=\"MoveLeftByWord\"/>   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If the caret is within a word, this command moves the caret to the beginning of that word.","pos":[0,90]},{"content":"Otherwise, this command moves the caret to the beginning of the previous word.","pos":[92,170]},{"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.","pos":[177,386]},{"content":"This command is natively supported by &lt;xref:System.Windows.Controls.RichTextBox&gt;, &lt;xref:System.Windows.Controls.TextBox&gt;, and &lt;xref:System.Windows.Controls.PasswordBox&gt;.","pos":[393,562],"source":"       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_MoveLeftByWord\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object property=\"MoveLeftByWord\"/&gt;   ```</ph>","pos":[568,696],"source":"<a name=\"xamlAttributeUsage_MoveLeftByWord\"></a>    ## XAML Attribute Usage      ```   <object property=\"MoveLeftByWord\"/>   ```"}]},{"pos":[72230,72420],"content":"The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_Left\" name=\"Left\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The requested command.","pos":[0,22]},{"content":"The default key gesture for this command is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept><ph id=\"ph1\">+</ph><bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Left\" name=\"Left\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[24,190],"source":"  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_Left\" name=\"Left\" href=\"\"></xref>."}]},{"pos":[72959,73059],"content":"Represents the MoveRightByCharacter command, which requests that the caret move one character right.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the MoveRightByCharacter command, which requests that the caret move one character right.","pos":[0,100]}]},{"pos":[73072,73616],"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.      <a name=\"xamlAttributeUsage_MoveRightByCharacter\"></a>    ## XAML Attribute Usage      ```   <object property=\"MoveRightByCharacter\"/>   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.","pos":[0,209]},{"content":"This command is natively supported by &lt;xref:System.Windows.Controls.RichTextBox&gt;, &lt;xref:System.Windows.Controls.TextBox&gt;, and &lt;xref:System.Windows.Controls.PasswordBox&gt;.","pos":[216,385],"source":"       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_MoveRightByCharacter\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object property=\"MoveRightByCharacter\"/&gt;   ```</ph>","pos":[391,531],"source":"<a name=\"xamlAttributeUsage_MoveRightByCharacter\"></a>    ## XAML Attribute Usage      ```   <object property=\"MoveRightByCharacter\"/>   ```"}]},{"pos":[75114,75245],"content":"The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Right\" name=\"Right\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The requested command.","pos":[0,22]},{"content":"The default key gesture for this command is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Right\" name=\"Right\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[24,131],"source":"  The default key gesture for this command is <xref uid=\"langword_csharp_Right\" name=\"Right\" href=\"\"></xref>."}]},{"pos":[75765,75858],"content":"Represents the MoveRightByWord command, which requests that the caret move right by one word.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the MoveRightByWord command, which requests that the caret move right by one word.","pos":[0,93]}]},{"pos":[75871,76574],"content":"If the caret is within a word, this command moves the caret to the end of that word.  Otherwise, this command moves the caret to the beginning of the next word.       There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.      <a name=\"xamlAttributeUsage_MoveRightByWord\"></a>    ## XAML Attribute Usage      ```   <object property=\"MoveRightByWord\"/>   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If the caret is within a word, this command moves the caret to the end of that word.","pos":[0,84]},{"content":"Otherwise, this command moves the caret to the beginning of the next word.","pos":[86,160]},{"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.","pos":[167,376]},{"content":"This command is natively supported by &lt;xref:System.Windows.Controls.RichTextBox&gt;, &lt;xref:System.Windows.Controls.TextBox&gt;, and &lt;xref:System.Windows.Controls.PasswordBox&gt;.","pos":[383,552],"source":"       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_MoveRightByWord\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object property=\"MoveRightByWord\"/&gt;   ```</ph>","pos":[558,688],"source":"<a name=\"xamlAttributeUsage_MoveRightByWord\"></a>    ## XAML Attribute Usage      ```   <object property=\"MoveRightByWord\"/>   ```"}]},{"pos":[78067,78259],"content":"The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_Right\" name=\"Right\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The requested command.","pos":[0,22]},{"content":"The default key gesture for this command is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept><ph id=\"ph1\">+</ph><bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Right\" name=\"Right\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[24,192],"source":"  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_Right\" name=\"Right\" href=\"\"></xref>."}]},{"pos":[78784,78888],"content":"Represents the MoveToDocumentEnd command, which requests that the caret move to the very end of content.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the MoveToDocumentEnd command, which requests that the caret move to the very end of content.","pos":[0,104]}]},{"pos":[78901,79753],"content":"A *text container* is the element that forms the ultimate border for the content at hand.  <xref:System.Windows.Controls.TextBlock> and <xref:System.Windows.Documents.FlowDocument> are examples of text containers.  The content collectively contained within a text container is referred to as a *document*.       There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.      <a name=\"xamlAttributeUsage_MoveToDocumentEnd\"></a>    ## XAML Attribute Usage      ```   <object property=\"MoveToDocumentEnd\"/>   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"A <bpt id=\"p1\">*</bpt>text container<ept id=\"p1\">*</ept> is the element that forms the ultimate border for the content at hand.","pos":[0,89],"source":"A *text container* is the element that forms the ultimate border for the content at hand."},{"content":"&lt;xref:System.Windows.Controls.TextBlock&gt; and &lt;xref:System.Windows.Documents.FlowDocument&gt; are examples of text containers.","pos":[91,213],"source":"  <xref:System.Windows.Controls.TextBlock> and <xref:System.Windows.Documents.FlowDocument> are examples of text containers."},{"content":"The content collectively contained within a text container is referred to as a <bpt id=\"p1\">*</bpt>document<ept id=\"p1\">*</ept>.","pos":[215,305],"source":"  The content collectively contained within a text container is referred to as a *document*."},{"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.","pos":[312,521]},{"content":"This command is natively supported by &lt;xref:System.Windows.Controls.RichTextBox&gt;, &lt;xref:System.Windows.Controls.TextBox&gt;, and &lt;xref:System.Windows.Controls.PasswordBox&gt;.","pos":[528,697],"source":"       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_MoveToDocumentEnd\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object property=\"MoveToDocumentEnd\"/&gt;   ```</ph>","pos":[703,837],"source":"<a name=\"xamlAttributeUsage_MoveToDocumentEnd\"></a>    ## XAML Attribute Usage      ```   <object property=\"MoveToDocumentEnd\"/>   ```"}]},{"pos":[81248,81436],"content":"The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_End\" name=\"End\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The requested command.","pos":[0,22]},{"content":"The default key gesture for this command is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept><ph id=\"ph1\">+</ph><bpt id=\"p2\">&lt;xref uid=\"langword_csharp_End\" name=\"End\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[24,188],"source":"  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_End\" name=\"End\" href=\"\"></xref>."}]},{"pos":[81973,82085],"content":"Represents the MoveToDocumentStart command, which requests that the caret move to the very beginning of content.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the MoveToDocumentStart command, which requests that the caret move to the very beginning of content.","pos":[0,112]}]},{"pos":[82098,82954],"content":"A *text container* is the element that forms the ultimate border for the content at hand.  <xref:System.Windows.Controls.TextBlock> and <xref:System.Windows.Documents.FlowDocument> are examples of text containers.  The content collectively contained within a text container is referred to as a *document*.       There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.      <a name=\"xamlAttributeUsage_MoveToDocumentStart\"></a>    ## XAML Attribute Usage      ```   <object property=\"MoveToDocumentStart\"/>   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"A <bpt id=\"p1\">*</bpt>text container<ept id=\"p1\">*</ept> is the element that forms the ultimate border for the content at hand.","pos":[0,89],"source":"A *text container* is the element that forms the ultimate border for the content at hand."},{"content":"&lt;xref:System.Windows.Controls.TextBlock&gt; and &lt;xref:System.Windows.Documents.FlowDocument&gt; are examples of text containers.","pos":[91,213],"source":"  <xref:System.Windows.Controls.TextBlock> and <xref:System.Windows.Documents.FlowDocument> are examples of text containers."},{"content":"The content collectively contained within a text container is referred to as a <bpt id=\"p1\">*</bpt>document<ept id=\"p1\">*</ept>.","pos":[215,305],"source":"  The content collectively contained within a text container is referred to as a *document*."},{"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.","pos":[312,521]},{"content":"This command is natively supported by &lt;xref:System.Windows.Controls.RichTextBox&gt;, &lt;xref:System.Windows.Controls.TextBox&gt;, and &lt;xref:System.Windows.Controls.PasswordBox&gt;.","pos":[528,697],"source":"       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_MoveToDocumentStart\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object property=\"MoveToDocumentStart\"/&gt;   ```</ph>","pos":[703,841],"source":"<a name=\"xamlAttributeUsage_MoveToDocumentStart\"></a>    ## XAML Attribute Usage      ```   <object property=\"MoveToDocumentStart\"/>   ```"}]},{"pos":[84451,84641],"content":"The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_Home\" name=\"Home\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The requested command.","pos":[0,22]},{"content":"The default key gesture for this command is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept><ph id=\"ph1\">+</ph><bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Home\" name=\"Home\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[24,190],"source":"  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_Home\" name=\"Home\" href=\"\"></xref>."}]},{"pos":[85150,85254],"content":"Represents the MoveToLineEnd command, which requests that the caret move to the end of the current line.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the MoveToLineEnd command, which requests that the caret move to the end of the current line.","pos":[0,104]}]},{"pos":[85267,85797],"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.      <a name=\"xamlAttributeUsage_MoveToLineEnd\"></a>    ## XAML Attribute Usage      ```   <object property=\"MoveToLineEnd\"/>   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.","pos":[0,209]},{"content":"This command is natively supported by &lt;xref:System.Windows.Controls.RichTextBox&gt;, &lt;xref:System.Windows.Controls.TextBox&gt;, and &lt;xref:System.Windows.Controls.PasswordBox&gt;.","pos":[216,385],"source":"       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_MoveToLineEnd\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object property=\"MoveToLineEnd\"/&gt;   ```</ph>","pos":[391,517],"source":"<a name=\"xamlAttributeUsage_MoveToLineEnd\"></a>    ## XAML Attribute Usage      ```   <object property=\"MoveToLineEnd\"/>   ```"}]},{"pos":[87288,87415],"content":"The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_End\" name=\"End\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The requested command.","pos":[0,22]},{"content":"The default key gesture for this command is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_End\" name=\"End\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[24,127],"source":"  The default key gesture for this command is <xref uid=\"langword_csharp_End\" name=\"End\" href=\"\"></xref>."}]},{"pos":[87928,88040],"content":"Represents the MoveToLineStart command, which requests that the caret move to the beginning of the current line.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the MoveToLineStart command, which requests that the caret move to the beginning of the current line.","pos":[0,112]}]},{"pos":[88053,88587],"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.      <a name=\"xamlAttributeUsage_MoveToLineStart\"></a>    ## XAML Attribute Usage      ```   <object property=\"MoveToLineStart\"/>   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.","pos":[0,209]},{"content":"This command is natively supported by &lt;xref:System.Windows.Controls.RichTextBox&gt;, &lt;xref:System.Windows.Controls.TextBox&gt;, and &lt;xref:System.Windows.Controls.PasswordBox&gt;.","pos":[216,385],"source":"       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_MoveToLineStart\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object property=\"MoveToLineStart\"/&gt;   ```</ph>","pos":[391,521],"source":"<a name=\"xamlAttributeUsage_MoveToLineStart\"></a>    ## XAML Attribute Usage      ```   <object property=\"MoveToLineStart\"/>   ```"}]},{"pos":[90080,90209],"content":"The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Home\" name=\"Home\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The requested command.","pos":[0,22]},{"content":"The default key gesture for this command is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Home\" name=\"Home\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[24,129],"source":"  The default key gesture for this command is <xref uid=\"langword_csharp_Home\" name=\"Home\" href=\"\"></xref>."}]},{"pos":[90709,90796],"content":"Represents the MoveUpByLine command, which requests that the caret move up by one line.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the MoveUpByLine command, which requests that the caret move up by one line.","pos":[0,87]}]},{"pos":[90809,91292],"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.       This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>.      <a name=\"xamlAttributeUsage_MoveUpByLine\"></a>    ## XAML Attribute Usage      ```   <object property=\"MoveUpByLine\"/>   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.","pos":[0,209]},{"content":"This command is natively supported by &lt;xref:System.Windows.Controls.RichTextBox&gt; and &lt;xref:System.Windows.Controls.TextBox&gt;.","pos":[216,340],"source":"       This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_MoveUpByLine\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object property=\"MoveUpByLine\"/&gt;   ```</ph>","pos":[346,470],"source":"<a name=\"xamlAttributeUsage_MoveUpByLine\"></a>    ## XAML Attribute Usage      ```   <object property=\"MoveUpByLine\"/>   ```"}]},{"pos":[92782,92907],"content":"The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Up\" name=\"Up\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The requested command.","pos":[0,22]},{"content":"The default key gesture for this command is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Up\" name=\"Up\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[24,125],"source":"  The default key gesture for this command is <xref uid=\"langword_csharp_Up\" name=\"Up\" href=\"\"></xref>."}]},{"pos":[93404,93491],"content":"Represents the MoveUpByPage command, which requests that the caret move up by one page.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the MoveUpByPage command, which requests that the caret move up by one page.","pos":[0,87]}]},{"pos":[93504,93987],"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.       This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>.      <a name=\"xamlAttributeUsage_MoveUpByPage\"></a>    ## XAML Attribute Usage      ```   <object property=\"MoveUpByPage\"/>   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.","pos":[0,209]},{"content":"This command is natively supported by &lt;xref:System.Windows.Controls.RichTextBox&gt; and &lt;xref:System.Windows.Controls.TextBox&gt;.","pos":[216,340],"source":"       This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_MoveUpByPage\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object property=\"MoveUpByPage\"/&gt;   ```</ph>","pos":[346,470],"source":"<a name=\"xamlAttributeUsage_MoveUpByPage\"></a>    ## XAML Attribute Usage      ```   <object property=\"MoveUpByPage\"/>   ```"}]},{"pos":[95477,95610],"content":"The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_PageUp\" name=\"PageUp\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The requested command.","pos":[0,22]},{"content":"The default key gesture for this command is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_PageUp\" name=\"PageUp\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[24,133],"source":"  The default key gesture for this command is <xref uid=\"langword_csharp_PageUp\" name=\"PageUp\" href=\"\"></xref>."}]},{"pos":[96132,96229],"content":"Represents the MoveUpByParagraph command, which requests that the caret move up by one paragraph.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the MoveUpByParagraph command, which requests that the caret move up by one paragraph.","pos":[0,97]}]},{"pos":[96242,96979],"content":"This command positions the caret at the beginning of the next paragraph.       This command behaves like <xref:System.Windows.Documents.EditingCommands.MoveToDocumentStart%2A> when invoked on a <xref:System.Windows.Controls.TextBox>.       There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.       This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>.      <a name=\"xamlAttributeUsage_MoveUpByParagraph\"></a>    ## XAML Attribute Usage      ```   <object property=\"MoveUpByParagraph\"/>   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This command positions the caret at the beginning of the next paragraph.","pos":[0,72]},{"content":"This command behaves like &lt;xref:System.Windows.Documents.EditingCommands.MoveToDocumentStart%2A&gt; when invoked on a &lt;xref:System.Windows.Controls.TextBox&gt;.","pos":[79,233],"source":"       This command behaves like <xref:System.Windows.Documents.EditingCommands.MoveToDocumentStart%2A> when invoked on a <xref:System.Windows.Controls.TextBox>."},{"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.","pos":[240,449]},{"content":"This command is natively supported by &lt;xref:System.Windows.Controls.RichTextBox&gt; and &lt;xref:System.Windows.Controls.TextBox&gt;.","pos":[456,580],"source":"       This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_MoveUpByParagraph\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object property=\"MoveUpByParagraph\"/&gt;   ```</ph>","pos":[586,720],"source":"<a name=\"xamlAttributeUsage_MoveUpByParagraph\"></a>    ## XAML Attribute Usage      ```   <object property=\"MoveUpByParagraph\"/>   ```"}]},{"pos":[98474,98660],"content":"The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_Up\" name=\"Up\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The requested command.","pos":[0,22]},{"content":"The default key gesture for this command is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept><ph id=\"ph1\">+</ph><bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Up\" name=\"Up\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[24,186],"source":"  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_Up\" name=\"Up\" href=\"\"></xref>."}]},{"pos":[99182,99294],"content":"Represents the SelectDownByLine command, which requests that the current selection be expanded down by one line.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the SelectDownByLine command, which requests that the current selection be expanded down by one line.","pos":[0,112]}]},{"pos":[99307,99843],"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.      <a name=\"xamlAttributeUsage_SelectDownByLine\"></a>    ## XAML Attribute Usage      ```   <object property=\"SelectDownByLine\"/>   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.","pos":[0,209]},{"content":"This command is natively supported by &lt;xref:System.Windows.Controls.RichTextBox&gt;, &lt;xref:System.Windows.Controls.TextBox&gt;, and &lt;xref:System.Windows.Controls.PasswordBox&gt;.","pos":[216,385],"source":"       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_SelectDownByLine\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object property=\"SelectDownByLine\"/&gt;   ```</ph>","pos":[391,523],"source":"<a name=\"xamlAttributeUsage_SelectDownByLine\"></a>    ## XAML Attribute Usage      ```   <object property=\"SelectDownByLine\"/>   ```"}]},{"pos":[101337,101529],"content":"The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"></xref>+<xref uid=\"langword_csharp_Down\" name=\"Down\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The requested command.","pos":[0,22]},{"content":"The default key gesture for this command is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept><ph id=\"ph1\">+</ph><bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Down\" name=\"Down\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[24,192],"source":"  The default key gesture for this command is <xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"></xref>+<xref uid=\"langword_csharp_Down\" name=\"Down\" href=\"\"></xref>."}]},{"pos":[102050,102162],"content":"Represents the SelectDownByPage command, which requests that the current selection be expanded down by one page.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the SelectDownByPage command, which requests that the current selection be expanded down by one page.","pos":[0,112]}]},{"pos":[102175,102711],"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.      <a name=\"xamlAttributeUsage_SelectDownByPage\"></a>    ## XAML Attribute Usage      ```   <object property=\"SelectDownByPage\"/>   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.","pos":[0,209]},{"content":"This command is natively supported by &lt;xref:System.Windows.Controls.RichTextBox&gt;, &lt;xref:System.Windows.Controls.TextBox&gt;, and &lt;xref:System.Windows.Controls.PasswordBox&gt;.","pos":[216,385],"source":"       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_SelectDownByPage\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object property=\"SelectDownByPage\"/&gt;   ```</ph>","pos":[391,523],"source":"<a name=\"xamlAttributeUsage_SelectDownByPage\"></a>    ## XAML Attribute Usage      ```   <object property=\"SelectDownByPage\"/>   ```"}]},{"pos":[104205,104405],"content":"The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"></xref>+<xref uid=\"langword_csharp_PageDown\" name=\"PageDown\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The requested command.","pos":[0,22]},{"content":"The default key gesture for this command is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept><ph id=\"ph1\">+</ph><bpt id=\"p2\">&lt;xref uid=\"langword_csharp_PageDown\" name=\"PageDown\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[24,200],"source":"  The default key gesture for this command is <xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"></xref>+<xref uid=\"langword_csharp_PageDown\" name=\"PageDown\" href=\"\"></xref>."}]},{"pos":[104951,105073],"content":"Represents the SelectDownByParagraph command, which requests that the current selection be expanded down by one paragraph.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the SelectDownByParagraph command, which requests that the current selection be expanded down by one paragraph.","pos":[0,122]}]},{"pos":[105086,105889],"content":"This command expands the selection to the beginning of the next paragraph.  Otherwise, this command expands the selection to the end of the current paragraph.  The expanded selection includes the paragraph break that marks the end of the paragraph.       There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.      <a name=\"xamlAttributeUsage_SelectDownByParagraph\"></a>    ## XAML Attribute Usage      ```   <object property=\"SelectDownByParagraph\"/>   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This command expands the selection to the beginning of the next paragraph.","pos":[0,74]},{"content":"Otherwise, this command expands the selection to the end of the current paragraph.","pos":[76,158]},{"content":"The expanded selection includes the paragraph break that marks the end of the paragraph.","pos":[160,248]},{"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.","pos":[255,464]},{"content":"This command is natively supported by &lt;xref:System.Windows.Controls.RichTextBox&gt;, &lt;xref:System.Windows.Controls.TextBox&gt;, and &lt;xref:System.Windows.Controls.PasswordBox&gt;.","pos":[471,640],"source":"       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_SelectDownByParagraph\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object property=\"SelectDownByParagraph\"/&gt;   ```</ph>","pos":[646,788],"source":"<a name=\"xamlAttributeUsage_SelectDownByParagraph\"></a>    ## XAML Attribute Usage      ```   <object property=\"SelectDownByParagraph\"/>   ```"}]},{"pos":[107388,107641],"content":"The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"></xref>+<xref uid=\"langword_csharp_Down\" name=\"Down\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The requested command.","pos":[0,22]},{"content":"The default key gesture for this command is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept><ph id=\"ph1\">+</ph><bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept><ph id=\"ph2\">+</ph><bpt id=\"p3\">&lt;xref uid=\"langword_csharp_Down\" name=\"Down\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","pos":[24,253],"source":"  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"></xref>+<xref uid=\"langword_csharp_Down\" name=\"Down\" href=\"\"></xref>."}]},{"pos":[108192,108314],"content":"Represents the SelectLeftByCharacter command, which requests that the current selection be expanded left by one character.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the SelectLeftByCharacter command, which requests that the current selection be expanded left by one character.","pos":[0,122]}]},{"pos":[108327,108873],"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.      <a name=\"xamlAttributeUsage_SelectLeftByCharacter\"></a>    ## XAML Attribute Usage      ```   <object property=\"SelectLeftByCharacter\"/>   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.","pos":[0,209]},{"content":"This command is natively supported by &lt;xref:System.Windows.Controls.RichTextBox&gt;, &lt;xref:System.Windows.Controls.TextBox&gt;, and &lt;xref:System.Windows.Controls.PasswordBox&gt;.","pos":[216,385],"source":"       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_SelectLeftByCharacter\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object property=\"SelectLeftByCharacter\"/&gt;   ```</ph>","pos":[391,533],"source":"<a name=\"xamlAttributeUsage_SelectLeftByCharacter\"></a>    ## XAML Attribute Usage      ```   <object property=\"SelectLeftByCharacter\"/>   ```"}]},{"pos":[110372,110564],"content":"The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"></xref>+<xref uid=\"langword_csharp_Left\" name=\"Left\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The requested command.","pos":[0,22]},{"content":"The default key gesture for this command is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept><ph id=\"ph1\">+</ph><bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Left\" name=\"Left\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[24,192],"source":"  The default key gesture for this command is <xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"></xref>+<xref uid=\"langword_csharp_Left\" name=\"Left\" href=\"\"></xref>."}]},{"pos":[111090,111202],"content":"Represents the SelectLeftByWord command, which requests that the current selection be expanded left by one word.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the SelectLeftByWord command, which requests that the current selection be expanded left by one word.","pos":[0,112]}]},{"pos":[111215,112160],"content":"If the caret is within a word, this command expands the selection to the beginning of that word.  Otherwise, this command expands the selection to the beginning of the previous word.       The expanded selection does not include the word delimiter.  Contrast with <xref:System.Windows.Documents.EditingCommands.SelectRightByWord%2A>, which does include the word delimiter in the expanded selection.       There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.      <a name=\"xamlAttributeUsage_SelectLeftByWord\"></a>    ## XAML Attribute Usage      ```   <object property=\"SelectLeftByWord\"/>   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If the caret is within a word, this command expands the selection to the beginning of that word.","pos":[0,96]},{"content":"Otherwise, this command expands the selection to the beginning of the previous word.","pos":[98,182]},{"content":"The expanded selection does not include the word delimiter.","pos":[189,248]},{"content":"Contrast with &lt;xref:System.Windows.Documents.EditingCommands.SelectRightByWord%2A&gt;, which does include the word delimiter in the expanded selection.","pos":[250,398],"source":"  Contrast with <xref:System.Windows.Documents.EditingCommands.SelectRightByWord%2A>, which does include the word delimiter in the expanded selection."},{"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.","pos":[405,614]},{"content":"This command is natively supported by &lt;xref:System.Windows.Controls.RichTextBox&gt;, &lt;xref:System.Windows.Controls.TextBox&gt;, and &lt;xref:System.Windows.Controls.PasswordBox&gt;.","pos":[621,790],"source":"       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_SelectLeftByWord\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object property=\"SelectLeftByWord\"/&gt;   ```</ph>","pos":[796,928],"source":"<a name=\"xamlAttributeUsage_SelectLeftByWord\"></a>    ## XAML Attribute Usage      ```   <object property=\"SelectLeftByWord\"/>   ```"}]},{"pos":[113654,113907],"content":"The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"></xref>+<xref uid=\"langword_csharp_Left\" name=\"Left\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The requested command.","pos":[0,22]},{"content":"The default key gesture for this command is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept><ph id=\"ph1\">+</ph><bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept><ph id=\"ph2\">+</ph><bpt id=\"p3\">&lt;xref uid=\"langword_csharp_Left\" name=\"Left\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","pos":[24,253],"source":"  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"></xref>+<xref uid=\"langword_csharp_Left\" name=\"Left\" href=\"\"></xref>."}]},{"pos":[114458,114582],"content":"Represents the SelectRightByCharacter command, which requests that the current selection be expanded right by one character.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the SelectRightByCharacter command, which requests that the current selection be expanded right by one character.","pos":[0,124]}]},{"pos":[114595,115143],"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.      <a name=\"xamlAttributeUsage_SelectRightByCharacter\"></a>    ## XAML Attribute Usage      ```   <object property=\"SelectRightByCharacter\"/>   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.","pos":[0,209]},{"content":"This command is natively supported by &lt;xref:System.Windows.Controls.RichTextBox&gt;, &lt;xref:System.Windows.Controls.TextBox&gt;, and &lt;xref:System.Windows.Controls.PasswordBox&gt;.","pos":[216,385],"source":"       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_SelectRightByCharacter\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object property=\"SelectRightByCharacter\"/&gt;   ```</ph>","pos":[391,535],"source":"<a name=\"xamlAttributeUsage_SelectRightByCharacter\"></a>    ## XAML Attribute Usage      ```   <object property=\"SelectRightByCharacter\"/>   ```"}]},{"pos":[116643,116837],"content":"The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"></xref>+<xref uid=\"langword_csharp_Right\" name=\"Right\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The requested command.","pos":[0,22]},{"content":"The default key gesture for this command is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept><ph id=\"ph1\">+</ph><bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Right\" name=\"Right\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[24,194],"source":"  The default key gesture for this command is <xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"></xref>+<xref uid=\"langword_csharp_Right\" name=\"Right\" href=\"\"></xref>."}]},{"pos":[117369,117483],"content":"Represents the SelectRightByWord command, which requests that the current selection be expanded right by one word.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the SelectRightByWord command, which requests that the current selection be expanded right by one word.","pos":[0,114]}]},{"pos":[117496,118421],"content":"If the caret is within a word, this command expands the selection to the end of that word.  Otherwise, this command expands the selection to the end of the next word.       The expanded selection includes the word delimiter.  Contrast with <xref:System.Windows.Documents.EditingCommands.SelectLeftByWord%2A> which does not include the word delimiter in the expanded selection.       There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.      <a name=\"xamlAttributeUsage_SelectRightByWord\"></a>    ## XAML Attribute Usage      ```   <object property=\"SelectRightByWord\"/>   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If the caret is within a word, this command expands the selection to the end of that word.","pos":[0,90]},{"content":"Otherwise, this command expands the selection to the end of the next word.","pos":[92,166]},{"content":"The expanded selection includes the word delimiter.","pos":[173,224]},{"content":"Contrast with &lt;xref:System.Windows.Documents.EditingCommands.SelectLeftByWord%2A&gt; which does not include the word delimiter in the expanded selection.","pos":[226,376],"source":"  Contrast with <xref:System.Windows.Documents.EditingCommands.SelectLeftByWord%2A> which does not include the word delimiter in the expanded selection."},{"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.","pos":[383,592]},{"content":"This command is natively supported by &lt;xref:System.Windows.Controls.RichTextBox&gt;, &lt;xref:System.Windows.Controls.TextBox&gt;, and &lt;xref:System.Windows.Controls.PasswordBox&gt;.","pos":[599,768],"source":"       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_SelectRightByWord\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object property=\"SelectRightByWord\"/&gt;   ```</ph>","pos":[774,908],"source":"<a name=\"xamlAttributeUsage_SelectRightByWord\"></a>    ## XAML Attribute Usage      ```   <object property=\"SelectRightByWord\"/>   ```"}]},{"pos":[119916,120171],"content":"The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"></xref>+<xref uid=\"langword_csharp_Right\" name=\"Right\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The requested command.","pos":[0,22]},{"content":"The default key gesture for this command is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept><ph id=\"ph1\">+</ph><bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept><ph id=\"ph2\">+</ph><bpt id=\"p3\">&lt;xref uid=\"langword_csharp_Right\" name=\"Right\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","pos":[24,255],"source":"  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"></xref>+<xref uid=\"langword_csharp_Right\" name=\"Right\" href=\"\"></xref>."}]},{"pos":[120708,120833],"content":"Represents the SelectToDocumentEnd command, which requests that the current selection be expanded to the very end of content.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the SelectToDocumentEnd command, which requests that the current selection be expanded to the very end of content.","pos":[0,125]}]},{"pos":[120846,121702],"content":"A *text container* is the element that forms the ultimate border for the content at hand.  <xref:System.Windows.Controls.TextBlock> and <xref:System.Windows.Documents.FlowDocument> are examples of text containers.  The content collectively contained within a text container is referred to as a *document*.       There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.      <a name=\"xamlAttributeUsage_SelectToDocumentEnd\"></a>    ## XAML Attribute Usage      ```   <object property=\"SelectToDocumentEnd\"/>   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"A <bpt id=\"p1\">*</bpt>text container<ept id=\"p1\">*</ept> is the element that forms the ultimate border for the content at hand.","pos":[0,89],"source":"A *text container* is the element that forms the ultimate border for the content at hand."},{"content":"&lt;xref:System.Windows.Controls.TextBlock&gt; and &lt;xref:System.Windows.Documents.FlowDocument&gt; are examples of text containers.","pos":[91,213],"source":"  <xref:System.Windows.Controls.TextBlock> and <xref:System.Windows.Documents.FlowDocument> are examples of text containers."},{"content":"The content collectively contained within a text container is referred to as a <bpt id=\"p1\">*</bpt>document<ept id=\"p1\">*</ept>.","pos":[215,305],"source":"  The content collectively contained within a text container is referred to as a *document*."},{"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.","pos":[312,521]},{"content":"This command is natively supported by &lt;xref:System.Windows.Controls.RichTextBox&gt;, &lt;xref:System.Windows.Controls.TextBox&gt;, and &lt;xref:System.Windows.Controls.PasswordBox&gt;.","pos":[528,697],"source":"       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_SelectToDocumentEnd\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object property=\"SelectToDocumentEnd\"/&gt;   ```</ph>","pos":[703,841],"source":"<a name=\"xamlAttributeUsage_SelectToDocumentEnd\"></a>    ## XAML Attribute Usage      ```   <object property=\"SelectToDocumentEnd\"/>   ```"}]},{"pos":[123199,123450],"content":"The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"></xref>+<xref uid=\"langword_csharp_End\" name=\"End\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The requested command.","pos":[0,22]},{"content":"The default key gesture for this command is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept><ph id=\"ph1\">+</ph><bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept><ph id=\"ph2\">+</ph><bpt id=\"p3\">&lt;xref uid=\"langword_csharp_End\" name=\"End\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","pos":[24,251],"source":"  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"></xref>+<xref uid=\"langword_csharp_End\" name=\"End\" href=\"\"></xref>."}]},{"pos":[123999,124132],"content":"Represents the SelectToDocumentStart command, which requests that the current selection be expanded to the very beginning of content.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the SelectToDocumentStart command, which requests that the current selection be expanded to the very beginning of content.","pos":[0,133]}]},{"pos":[124145,125005],"content":"A *text container* is the element that forms the ultimate border for the content at hand.  <xref:System.Windows.Controls.TextBlock> and <xref:System.Windows.Documents.FlowDocument> are examples of text containers.  The content collectively contained within a text container is referred to as a *document*.       There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.      <a name=\"xamlAttributeUsage_SelectToDocumentStart\"></a>    ## XAML Attribute Usage      ```   <object property=\"SelectToDocumentStart\"/>   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"A <bpt id=\"p1\">*</bpt>text container<ept id=\"p1\">*</ept> is the element that forms the ultimate border for the content at hand.","pos":[0,89],"source":"A *text container* is the element that forms the ultimate border for the content at hand."},{"content":"&lt;xref:System.Windows.Controls.TextBlock&gt; and &lt;xref:System.Windows.Documents.FlowDocument&gt; are examples of text containers.","pos":[91,213],"source":"  <xref:System.Windows.Controls.TextBlock> and <xref:System.Windows.Documents.FlowDocument> are examples of text containers."},{"content":"The content collectively contained within a text container is referred to as a <bpt id=\"p1\">*</bpt>document<ept id=\"p1\">*</ept>.","pos":[215,305],"source":"  The content collectively contained within a text container is referred to as a *document*."},{"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.","pos":[312,521]},{"content":"This command is natively supported by &lt;xref:System.Windows.Controls.RichTextBox&gt;, &lt;xref:System.Windows.Controls.TextBox&gt;, and &lt;xref:System.Windows.Controls.PasswordBox&gt;.","pos":[528,697],"source":"       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_SelectToDocumentStart\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object property=\"SelectToDocumentStart\"/&gt;   ```</ph>","pos":[703,845],"source":"<a name=\"xamlAttributeUsage_SelectToDocumentStart\"></a>    ## XAML Attribute Usage      ```   <object property=\"SelectToDocumentStart\"/>   ```"}]},{"pos":[126504,126757],"content":"The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"></xref>+<xref uid=\"langword_csharp_Home\" name=\"Home\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The requested command.","pos":[0,22]},{"content":"The default key gesture for this command is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept><ph id=\"ph1\">+</ph><bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept><ph id=\"ph2\">+</ph><bpt id=\"p3\">&lt;xref uid=\"langword_csharp_Home\" name=\"Home\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","pos":[24,253],"source":"  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"></xref>+<xref uid=\"langword_csharp_Home\" name=\"Home\" href=\"\"></xref>."}]},{"pos":[127278,127403],"content":"Represents the SelectToLineEnd command, which requests that the current selection be expanded to the end of the current line.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the SelectToLineEnd command, which requests that the current selection be expanded to the end of the current line.","pos":[0,125]}]},{"pos":[127416,127950],"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.      <a name=\"xamlAttributeUsage_SelectToLineEnd\"></a>    ## XAML Attribute Usage      ```   <object property=\"SelectToLineEnd\"/>   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.","pos":[0,209]},{"content":"This command is natively supported by &lt;xref:System.Windows.Controls.RichTextBox&gt;, &lt;xref:System.Windows.Controls.TextBox&gt;, and &lt;xref:System.Windows.Controls.PasswordBox&gt;.","pos":[216,385],"source":"       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_SelectToLineEnd\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object property=\"SelectToLineEnd\"/&gt;   ```</ph>","pos":[391,521],"source":"<a name=\"xamlAttributeUsage_SelectToLineEnd\"></a>    ## XAML Attribute Usage      ```   <object property=\"SelectToLineEnd\"/>   ```"}]},{"pos":[129443,129633],"content":"The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"></xref>+<xref uid=\"langword_csharp_End\" name=\"End\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The requested command.","pos":[0,22]},{"content":"The default key gesture for this command is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept><ph id=\"ph1\">+</ph><bpt id=\"p2\">&lt;xref uid=\"langword_csharp_End\" name=\"End\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[24,190],"source":"  The default key gesture for this command is <xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"></xref>+<xref uid=\"langword_csharp_End\" name=\"End\" href=\"\"></xref>."}]},{"pos":[130158,130291],"content":"Represents the SelectToLineStart command, which requests that the current selection be expanded to the beginning of the current line.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the SelectToLineStart command, which requests that the current selection be expanded to the beginning of the current line.","pos":[0,133]}]},{"pos":[130304,130842],"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.      <a name=\"xamlAttributeUsage_SelectToLineStart\"></a>    ## XAML Attribute Usage      ```   <object property=\"SelectToLineStart\"/>   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.","pos":[0,209]},{"content":"This command is natively supported by &lt;xref:System.Windows.Controls.RichTextBox&gt;, &lt;xref:System.Windows.Controls.TextBox&gt;, and &lt;xref:System.Windows.Controls.PasswordBox&gt;.","pos":[216,385],"source":"       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_SelectToLineStart\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object property=\"SelectToLineStart\"/&gt;   ```</ph>","pos":[391,525],"source":"<a name=\"xamlAttributeUsage_SelectToLineStart\"></a>    ## XAML Attribute Usage      ```   <object property=\"SelectToLineStart\"/>   ```"}]},{"pos":[132337,132529],"content":"The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"></xref>+<xref uid=\"langword_csharp_Home\" name=\"Home\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The requested command.","pos":[0,22]},{"content":"The default key gesture for this command is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept><ph id=\"ph1\">+</ph><bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Home\" name=\"Home\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[24,192],"source":"  The default key gesture for this command is <xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"></xref>+<xref uid=\"langword_csharp_Home\" name=\"Home\" href=\"\"></xref>."}]},{"pos":[133041,133149],"content":"Represents the SelectUpByLine command, which requests that the current selection be expanded up by one line.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the SelectUpByLine command, which requests that the current selection be expanded up by one line.","pos":[0,108]}]},{"pos":[133162,133694],"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.      <a name=\"xamlAttributeUsage_SelectUpByLine\"></a>    ## XAML Attribute Usage      ```   <object property=\"SelectUpByLine\"/>   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.","pos":[0,209]},{"content":"This command is natively supported by &lt;xref:System.Windows.Controls.RichTextBox&gt;, &lt;xref:System.Windows.Controls.TextBox&gt;, and &lt;xref:System.Windows.Controls.PasswordBox&gt;.","pos":[216,385],"source":"       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_SelectUpByLine\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object property=\"SelectUpByLine\"/&gt;   ```</ph>","pos":[391,519],"source":"<a name=\"xamlAttributeUsage_SelectUpByLine\"></a>    ## XAML Attribute Usage      ```   <object property=\"SelectUpByLine\"/>   ```"}]},{"pos":[135186,135374],"content":"The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"></xref>+<xref uid=\"langword_csharp_Up\" name=\"Up\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The requested command.","pos":[0,22]},{"content":"The default key gesture for this command is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept><ph id=\"ph1\">+</ph><bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Up\" name=\"Up\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[24,188],"source":"  The default key gesture for this command is <xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"></xref>+<xref uid=\"langword_csharp_Up\" name=\"Up\" href=\"\"></xref>."}]},{"pos":[135883,135992],"content":"Represents the SelectUpByPage command, which requests that the current selection be expanded  up by one page.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the SelectUpByPage command, which requests that the current selection be expanded  up by one page.","pos":[0,109]}]},{"pos":[136005,136537],"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.      <a name=\"xamlAttributeUsage_SelectUpByPage\"></a>    ## XAML Attribute Usage      ```   <object property=\"SelectUpByPage\"/>   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.","pos":[0,209]},{"content":"This command is natively supported by &lt;xref:System.Windows.Controls.RichTextBox&gt;, &lt;xref:System.Windows.Controls.TextBox&gt;, and &lt;xref:System.Windows.Controls.PasswordBox&gt;.","pos":[216,385],"source":"       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_SelectUpByPage\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object property=\"SelectUpByPage\"/&gt;   ```</ph>","pos":[391,519],"source":"<a name=\"xamlAttributeUsage_SelectUpByPage\"></a>    ## XAML Attribute Usage      ```   <object property=\"SelectUpByPage\"/>   ```"}]},{"pos":[138029,138225],"content":"The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"></xref>+<xref uid=\"langword_csharp_PageUp\" name=\"PageUp\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The requested command.","pos":[0,22]},{"content":"The default key gesture for this command is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept><ph id=\"ph1\">+</ph><bpt id=\"p2\">&lt;xref uid=\"langword_csharp_PageUp\" name=\"PageUp\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[24,196],"source":"  The default key gesture for this command is <xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"></xref>+<xref uid=\"langword_csharp_PageUp\" name=\"PageUp\" href=\"\"></xref>."}]},{"pos":[138759,138877],"content":"Represents the SelectUpByParagraph command, which requests that the current selection be expanded up by one paragraph.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the SelectUpByParagraph command, which requests that the current selection be expanded up by one paragraph.","pos":[0,118]}]},{"pos":[138890,139658],"content":"If the caret is at the beginning of a paragraph, this command expands the selection to the beginning of the previous paragraph.  Otherwise, this command expands the selection to the beginning of the current paragraph.       There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.      <a name=\"xamlAttributeUsage_SelectUpByParagraph\"></a>    ## XAML Attribute Usage      ```   <object property=\"SelectUpByParagraph\"/>   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If the caret is at the beginning of a paragraph, this command expands the selection to the beginning of the previous paragraph.","pos":[0,127]},{"content":"Otherwise, this command expands the selection to the beginning of the current paragraph.","pos":[129,217]},{"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.","pos":[224,433]},{"content":"This command is natively supported by &lt;xref:System.Windows.Controls.RichTextBox&gt;, &lt;xref:System.Windows.Controls.TextBox&gt;, and &lt;xref:System.Windows.Controls.PasswordBox&gt;.","pos":[440,609],"source":"       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_SelectUpByParagraph\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object property=\"SelectUpByParagraph\"/&gt;   ```</ph>","pos":[615,753],"source":"<a name=\"xamlAttributeUsage_SelectUpByParagraph\"></a>    ## XAML Attribute Usage      ```   <object property=\"SelectUpByParagraph\"/>   ```"}]},{"pos":[141155,141404],"content":"The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"></xref>+<xref uid=\"langword_csharp_Up\" name=\"Up\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The requested command.","pos":[0,22]},{"content":"The default key gesture for this command is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept><ph id=\"ph1\">+</ph><bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept><ph id=\"ph2\">+</ph><bpt id=\"p3\">&lt;xref uid=\"langword_csharp_Up\" name=\"Up\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","pos":[24,249],"source":"  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"></xref>+<xref uid=\"langword_csharp_Up\" name=\"Up\" href=\"\"></xref>."}]},{"pos":[141903,141938],"content":"Represents the TabBackward command.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the TabBackward command.","pos":[0,35]}]},{"pos":[141951,142950],"content":"The behavior for this command depends on the current selection. If the selection is non-empty, this command is equivalent to <xref:System.Windows.Documents.EditingCommands.DecreaseIndentation%2A>. If the caret is in a table cell (represented by the <xref:System.Windows.Documents.TableCell> element), this command moves the caret to the previous cell. Otherwise, a tab character is inserted in current position.       There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.       This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox> (when the <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A> property is `true`).      <a name=\"xamlAttributeUsage_TabBackward\"></a>    ## XAML Attribute Usage      ```   <object property=\"TabBackward\"/>   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The behavior for this command depends on the current selection.","pos":[0,63]},{"content":"If the selection is non-empty, this command is equivalent to &lt;xref:System.Windows.Documents.EditingCommands.DecreaseIndentation%2A&gt;.","pos":[64,196],"source":" If the selection is non-empty, this command is equivalent to <xref:System.Windows.Documents.EditingCommands.DecreaseIndentation%2A>."},{"content":"If the caret is in a table cell (represented by the &lt;xref:System.Windows.Documents.TableCell&gt; element), this command moves the caret to the previous cell.","pos":[197,351],"source":" If the caret is in a table cell (represented by the <xref:System.Windows.Documents.TableCell> element), this command moves the caret to the previous cell."},{"content":"Otherwise, a tab character is inserted in current position.","pos":[352,411]},{"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.","pos":[418,627]},{"content":"This command is natively supported by &lt;xref:System.Windows.Controls.RichTextBox&gt; and &lt;xref:System.Windows.Controls.TextBox&gt; (when the &lt;xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A&gt; property is <ph id=\"ph1\">`true`</ph>).","pos":[634,856],"source":"       This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox> (when the <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A> property is `true`)."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_TabBackward\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object property=\"TabBackward\"/&gt;   ```</ph>","pos":[862,984],"source":"<a name=\"xamlAttributeUsage_TabBackward\"></a>    ## XAML Attribute Usage      ```   <object property=\"TabBackward\"/>   ```"}]},{"pos":[144376,144566],"content":"The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"></xref>+<xref uid=\"langword_csharp_Tab\" name=\"Tab\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The requested command.","pos":[0,22]},{"content":"The default key gesture for this command is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept><ph id=\"ph1\">+</ph><bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Tab\" name=\"Tab\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[24,190],"source":"  The default key gesture for this command is <xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"></xref>+<xref uid=\"langword_csharp_Tab\" name=\"Tab\" href=\"\"></xref>."}]},{"pos":[145052,145086],"content":"Represents the TabForward command.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the TabForward command.","pos":[0,34]}]},{"pos":[145099,146354],"content":"The behavior for this command depends on the current selection. If the selection is non-empty, or if the selection is empty and the current caret position is at the beginning of a  paragraph, this command is equivalent to <xref:System.Windows.Documents.EditingCommands.IncreaseIndentation%2A>. If the caret is in a table cell (represented by the <xref:System.Windows.Documents.TableCell> element), this command moves the caret to the next cell. If the caret is in the last cell of a table, this command causes a new row to be appended to the table, with the caret positioned in the first cell of the new row.  Otherwise, a tab character is inserted in current position.       There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.       This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox> (when the <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A> property is `true`).      <a name=\"xamlAttributeUsage_TabForward\"></a>    ## XAML Attribute Usage      ```   <object property=\"TabForward\"/>   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The behavior for this command depends on the current selection.","pos":[0,63]},{"content":"If the selection is non-empty, or if the selection is empty and the current caret position is at the beginning of a  paragraph, this command is equivalent to &lt;xref:System.Windows.Documents.EditingCommands.IncreaseIndentation%2A&gt;.","pos":[64,293],"source":" If the selection is non-empty, or if the selection is empty and the current caret position is at the beginning of a  paragraph, this command is equivalent to <xref:System.Windows.Documents.EditingCommands.IncreaseIndentation%2A>."},{"content":"If the caret is in a table cell (represented by the &lt;xref:System.Windows.Documents.TableCell&gt; element), this command moves the caret to the next cell.","pos":[294,444],"source":" If the caret is in a table cell (represented by the <xref:System.Windows.Documents.TableCell> element), this command moves the caret to the next cell."},{"content":"If the caret is in the last cell of a table, this command causes a new row to be appended to the table, with the caret positioned in the first cell of the new row.","pos":[445,608]},{"content":"Otherwise, a tab character is inserted in current position.","pos":[610,669]},{"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.","pos":[676,885]},{"content":"This command is natively supported by &lt;xref:System.Windows.Controls.RichTextBox&gt; and &lt;xref:System.Windows.Controls.TextBox&gt; (when the &lt;xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A&gt; property is <ph id=\"ph1\">`true`</ph>).","pos":[892,1114],"source":"       This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox> (when the <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A> property is `true`)."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_TabForward\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object property=\"TabForward\"/&gt;   ```</ph>","pos":[1120,1240],"source":"<a name=\"xamlAttributeUsage_TabForward\"></a>    ## XAML Attribute Usage      ```   <object property=\"TabForward\"/>   ```"}]},{"pos":[147779,147906],"content":"The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Tab\" name=\"Tab\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The requested command.","pos":[0,22]},{"content":"The default key gesture for this command is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Tab\" name=\"Tab\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[24,127],"source":"  The default key gesture for this command is <xref uid=\"langword_csharp_Tab\" name=\"Tab\" href=\"\"></xref>."}]},{"pos":[148391,148544],"content":"Represents the ToggleBold command, which requests that <bpt id=\"p1\">&lt;xref href=\"System.Windows.Documents.Bold\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> formatting be toggled on the current selection.","needQuote":true,"needEscape":true,"source":"Represents the ToggleBold command, which requests that <xref href=\"System.Windows.Documents.Bold\"></xref> formatting be toggled on the current selection."},{"pos":[148557,149556],"content":"If the <xref:System.Windows.FontWeight> for the current selection is in the range from <xref:System.Windows.FontWeights.Thin%2A> to <xref:System.Windows.FontWeights.SemiBold%2A>, <xref:System.Windows.FontWeights.Bold%2A> is applied to the current selection.  Otherwise, <xref:System.Windows.FontWeights.Normal%2A> is applied.  For a comparative list of <xref:System.Windows.FontWeight> values, see <xref:System.Windows.FontWeights>.       When the selection is empty and the caret is within a word, the selection is expanded to include the entire word.       There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.      <a name=\"xamlAttributeUsage_ToggleBold\"></a>    ## XAML Attribute Usage      ```   <object property=\"ToggleBold\"/>   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If the &lt;xref:System.Windows.FontWeight&gt; for the current selection is in the range from &lt;xref:System.Windows.FontWeights.Thin%2A&gt; to &lt;xref:System.Windows.FontWeights.SemiBold%2A&gt;, &lt;xref:System.Windows.FontWeights.Bold%2A&gt; is applied to the current selection.","pos":[0,257],"source":"If the <xref:System.Windows.FontWeight> for the current selection is in the range from <xref:System.Windows.FontWeights.Thin%2A> to <xref:System.Windows.FontWeights.SemiBold%2A>, <xref:System.Windows.FontWeights.Bold%2A> is applied to the current selection."},{"content":"Otherwise, &lt;xref:System.Windows.FontWeights.Normal%2A&gt; is applied.","pos":[259,325],"source":"  Otherwise, <xref:System.Windows.FontWeights.Normal%2A> is applied."},{"content":"For a comparative list of &lt;xref:System.Windows.FontWeight&gt; values, see &lt;xref:System.Windows.FontWeights&gt;.","pos":[327,432],"source":"  For a comparative list of <xref:System.Windows.FontWeight> values, see <xref:System.Windows.FontWeights>."},{"content":"When the selection is empty and the caret is within a word, the selection is expanded to include the entire word.","pos":[439,552]},{"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.","pos":[559,768]},{"content":"This command is natively supported by &lt;xref:System.Windows.Controls.RichTextBox&gt;.","pos":[775,856],"source":"       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_ToggleBold\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object property=\"ToggleBold\"/&gt;   ```</ph>","pos":[862,982],"source":"<a name=\"xamlAttributeUsage_ToggleBold\"></a>    ## XAML Attribute Usage      ```   <object property=\"ToggleBold\"/>   ```"}]},{"pos":[151044,151228],"content":"The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_B\" name=\"B\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The requested command.","pos":[0,22]},{"content":"The default key gesture for this command is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept><ph id=\"ph1\">+</ph><bpt id=\"p2\">&lt;xref uid=\"langword_csharp_B\" name=\"B\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[24,184],"source":"  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_B\" name=\"B\" href=\"\"></xref>."}]},{"pos":[151728,151884],"content":"Represents the ToggleBullets command, which requests that unordered list (also referred to as bulleted list) formatting be toggled on the current selection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the ToggleBullets command, which requests that unordered list (also referred to as bulleted list) formatting be toggled on the current selection.","pos":[0,156]}]},{"pos":[151897,152807],"content":"This command operates at the <xref:System.Windows.Documents.Paragraph> level.  If this command is invoked on a partial selection of content within a paragraph (including an empty selection where the caret is within a paragraph), the requested effect is applied to the entire paragraph.  If this command is invoked on a selection that spans multiple paragraphs, the effect is applied to the entire contents of each paragraph that participates in the selection.       There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.      <a name=\"xamlAttributeUsage_ToggleBullets\"></a>    ## XAML Attribute Usage      ```   <object property=\"ToggleBullets\"/>   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This command operates at the &lt;xref:System.Windows.Documents.Paragraph&gt; level.","pos":[0,77],"source":"This command operates at the <xref:System.Windows.Documents.Paragraph> level."},{"content":"If this command is invoked on a partial selection of content within a paragraph (including an empty selection where the caret is within a paragraph), the requested effect is applied to the entire paragraph.","pos":[79,285]},{"content":"If this command is invoked on a selection that spans multiple paragraphs, the effect is applied to the entire contents of each paragraph that participates in the selection.","pos":[287,459]},{"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.","pos":[466,675]},{"content":"This command is natively supported by &lt;xref:System.Windows.Controls.RichTextBox&gt;.","pos":[682,763],"source":"       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_ToggleBullets\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object property=\"ToggleBullets\"/&gt;   ```</ph>","pos":[769,895],"source":"<a name=\"xamlAttributeUsage_ToggleBullets\"></a>    ## XAML Attribute Usage      ```   <object property=\"ToggleBullets\"/>   ```"}]},{"pos":[154298,154545],"content":"The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"></xref>+<xref uid=\"langword_csharp_L\" name=\"L\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The requested command.","pos":[0,22]},{"content":"The default key gesture for this command is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept><ph id=\"ph1\">+</ph><bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept><ph id=\"ph2\">+</ph><bpt id=\"p3\">&lt;xref uid=\"langword_csharp_L\" name=\"L\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","pos":[24,247],"source":"  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"></xref>+<xref uid=\"langword_csharp_L\" name=\"L\" href=\"\"></xref>."}]},{"pos":[155043,155138],"content":"Represents the ToggleInsert command, which toggles the typing mode between Insert and Overtype.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the ToggleInsert command, which toggles the typing mode between Insert and Overtype.","pos":[0,95]}]},{"pos":[155151,155679],"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.      <a name=\"xamlAttributeUsage_ToggleInsert\"></a>    ## XAML Attribute Usage      ```   <object property=\"ToggleInsert\"/>   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.","pos":[0,209]},{"content":"This command is natively supported by &lt;xref:System.Windows.Controls.RichTextBox&gt;, &lt;xref:System.Windows.Controls.TextBox&gt;, and &lt;xref:System.Windows.Controls.PasswordBox&gt;.","pos":[216,385],"source":"       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_ToggleInsert\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object property=\"ToggleInsert\"/&gt;   ```</ph>","pos":[391,515],"source":"<a name=\"xamlAttributeUsage_ToggleInsert\"></a>    ## XAML Attribute Usage      ```   <object property=\"ToggleInsert\"/>   ```"}]},{"pos":[157169,157302],"content":"The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Insert\" name=\"Insert\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The requested command.","pos":[0,22]},{"content":"The default key gesture for this command is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Insert\" name=\"Insert\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[24,133],"source":"  The default key gesture for this command is <xref uid=\"langword_csharp_Insert\" name=\"Insert\" href=\"\"></xref>."}]},{"pos":[157799,157956],"content":"Represents the ToggleItalic command, which requests that <bpt id=\"p1\">&lt;xref href=\"System.Windows.Documents.Italic\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> formatting be toggled on the current selection.","needQuote":true,"needEscape":true,"source":"Represents the ToggleItalic command, which requests that <xref href=\"System.Windows.Documents.Italic\"></xref> formatting be toggled on the current selection."},{"pos":[157969,158798],"content":"If the <xref:System.Windows.FontStyle> for the current selection is <xref:System.Windows.FontStyles.Normal%2A>, <xref:System.Windows.FontStyles.Italic%2A> is applied to the current selection.  Otherwise, <xref:System.Windows.FontStyles.Normal%2A> is applied.       When the selection is empty and the caret is within a word, the selection is expanded to include the entire word.       There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.      <a name=\"xamlAttributeUsage_ToggleItalic\"></a>    ## XAML Attribute Usage      ```   <object property=\"ToggleItalic\"/>   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If the &lt;xref:System.Windows.FontStyle&gt; for the current selection is &lt;xref:System.Windows.FontStyles.Normal%2A&gt;, &lt;xref:System.Windows.FontStyles.Italic%2A&gt; is applied to the current selection.","pos":[0,191],"source":"If the <xref:System.Windows.FontStyle> for the current selection is <xref:System.Windows.FontStyles.Normal%2A>, <xref:System.Windows.FontStyles.Italic%2A> is applied to the current selection."},{"content":"Otherwise, &lt;xref:System.Windows.FontStyles.Normal%2A&gt; is applied.","pos":[193,258],"source":"  Otherwise, <xref:System.Windows.FontStyles.Normal%2A> is applied."},{"content":"When the selection is empty and the caret is within a word, the selection is expanded to include the entire word.","pos":[265,378]},{"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.","pos":[385,594]},{"content":"This command is natively supported by &lt;xref:System.Windows.Controls.RichTextBox&gt;.","pos":[601,682],"source":"       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_ToggleItalic\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object property=\"ToggleItalic\"/&gt;   ```</ph>","pos":[688,812],"source":"<a name=\"xamlAttributeUsage_ToggleItalic\"></a>    ## XAML Attribute Usage      ```   <object property=\"ToggleItalic\"/>   ```"}]},{"pos":[160288,160472],"content":"The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_I\" name=\"I\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The requested command.","pos":[0,22]},{"content":"The default key gesture for this command is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept><ph id=\"ph1\">+</ph><bpt id=\"p2\">&lt;xref uid=\"langword_csharp_I\" name=\"I\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[24,184],"source":"  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_I\" name=\"I\" href=\"\"></xref>."}]},{"pos":[160984,161140],"content":"Represents the ToggleNumbering command, which requests that ordered list (also referred to as numbered list) formatting be toggled on the current selection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the ToggleNumbering command, which requests that ordered list (also referred to as numbered list) formatting be toggled on the current selection.","pos":[0,156]}]},{"pos":[161153,162067],"content":"This command operates at the <xref:System.Windows.Documents.Paragraph> level.  If this command is invoked on a partial selection of content within a paragraph (including an empty selection where the caret is within a paragraph), the requested effect is applied to the entire paragraph.  If this command is invoked on a selection that spans multiple paragraphs, the effect is applied to the entire contents of each paragraph that participates in the selection.       There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.      <a name=\"xamlAttributeUsage_ToggleNumbering\"></a>    ## XAML Attribute Usage      ```   <object property=\"ToggleNumbering\"/>   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This command operates at the &lt;xref:System.Windows.Documents.Paragraph&gt; level.","pos":[0,77],"source":"This command operates at the <xref:System.Windows.Documents.Paragraph> level."},{"content":"If this command is invoked on a partial selection of content within a paragraph (including an empty selection where the caret is within a paragraph), the requested effect is applied to the entire paragraph.","pos":[79,285]},{"content":"If this command is invoked on a selection that spans multiple paragraphs, the effect is applied to the entire contents of each paragraph that participates in the selection.","pos":[287,459]},{"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.","pos":[466,675]},{"content":"This command is natively supported by &lt;xref:System.Windows.Controls.RichTextBox&gt;.","pos":[682,763],"source":"       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_ToggleNumbering\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object property=\"ToggleNumbering\"/&gt;   ```</ph>","pos":[769,899],"source":"<a name=\"xamlAttributeUsage_ToggleNumbering\"></a>    ## XAML Attribute Usage      ```   <object property=\"ToggleNumbering\"/>   ```"}]},{"pos":[163560,163807],"content":"The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"></xref>+<xref uid=\"langword_csharp_N\" name=\"N\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The requested command.","pos":[0,22]},{"content":"The default key gesture for this command is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept><ph id=\"ph1\">+</ph><bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept><ph id=\"ph2\">+</ph><bpt id=\"p3\">&lt;xref uid=\"langword_csharp_N\" name=\"N\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","pos":[24,247],"source":"  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"></xref>+<xref uid=\"langword_csharp_N\" name=\"N\" href=\"\"></xref>."}]},{"pos":[164322,164439],"content":"Represents the ToggleSubscript command, which requests that subscript formatting be toggled on the current selection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the ToggleSubscript command, which requests that subscript formatting be toggled on the current selection.","pos":[0,117]}]},{"pos":[164452,164808],"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.      <a name=\"xamlAttributeUsage_ToggleSubscript\"></a>    ## XAML Attribute Usage      ```   <object property=\"ToggleSubscript\"/>   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.","pos":[0,209]},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_ToggleSubscript\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object property=\"ToggleSubscript\"/&gt;   ```</ph>","pos":[215,345],"source":"<a name=\"xamlAttributeUsage_ToggleSubscript\"></a>    ## XAML Attribute Usage      ```   <object property=\"ToggleSubscript\"/>   ```"}]},{"pos":[166301,166497],"content":"The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_OemPlus\" name=\"OemPlus\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The requested command.","pos":[0,22]},{"content":"The default key gesture for this command is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept><ph id=\"ph1\">+</ph><bpt id=\"p2\">&lt;xref uid=\"langword_csharp_OemPlus\" name=\"OemPlus\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[24,196],"source":"  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_OemPlus\" name=\"OemPlus\" href=\"\"></xref>."}]},{"pos":[167022,167143],"content":"Represents the ToggleSuperscript command, which requests that superscript formatting be toggled on the current selection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the ToggleSuperscript command, which requests that superscript formatting be toggled on the current selection.","pos":[0,121]}]},{"pos":[167156,167516],"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.      <a name=\"xamlAttributeUsage_ToggleSuperscript\"></a>    ## XAML Attribute Usage      ```   <object property=\"ToggleSuperscript\"/>   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.","pos":[0,209]},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_ToggleSuperscript\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object property=\"ToggleSuperscript\"/&gt;   ```</ph>","pos":[215,349],"source":"<a name=\"xamlAttributeUsage_ToggleSuperscript\"></a>    ## XAML Attribute Usage      ```   <object property=\"ToggleSuperscript\"/>   ```"}]},{"pos":[169011,169270],"content":"The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"></xref>+<xref uid=\"langword_csharp_OemPlus\" name=\"OemPlus\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The requested command.","pos":[0,22]},{"content":"The default key gesture for this command is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept><ph id=\"ph1\">+</ph><bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept><ph id=\"ph2\">+</ph><bpt id=\"p3\">&lt;xref uid=\"langword_csharp_OemPlus\" name=\"OemPlus\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","pos":[24,259],"source":"  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"></xref>+<xref uid=\"langword_csharp_OemPlus\" name=\"OemPlus\" href=\"\"></xref>."}]},{"pos":[169787,169950],"content":"Represents the ToggleUnderline command, which requests that <bpt id=\"p1\">&lt;xref href=\"System.Windows.Documents.Underline\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> formatting be toggled on the current selection.","needQuote":true,"needEscape":true,"source":"Represents the ToggleUnderline command, which requests that <xref href=\"System.Windows.Documents.Underline\"></xref> formatting be toggled on the current selection."},{"pos":[169963,170531],"content":"When the selection is empty and the caret is within a word, the selection is expanded to include the entire word.       There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.      <a name=\"xamlAttributeUsage_ToggleUnderline\"></a>    ## XAML Attribute Usage      ```   <object property=\"ToggleUnderline\"/>   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"When the selection is empty and the caret is within a word, the selection is expanded to include the entire word.","pos":[0,113]},{"content":"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.","pos":[120,329]},{"content":"This command is natively supported by &lt;xref:System.Windows.Controls.RichTextBox&gt;.","pos":[336,417],"source":"       This command is natively supported by <xref:System.Windows.Controls.RichTextBox>."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_ToggleUnderline\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object property=\"ToggleUnderline\"/&gt;   ```</ph>","pos":[423,553],"source":"<a name=\"xamlAttributeUsage_ToggleUnderline\"></a>    ## XAML Attribute Usage      ```   <object property=\"ToggleUnderline\"/>   ```"}]},{"pos":[172024,172208],"content":"The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_U\" name=\"U\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The requested command.","pos":[0,22]},{"content":"The default key gesture for this command is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept><ph id=\"ph1\">+</ph><bpt id=\"p2\">&lt;xref uid=\"langword_csharp_U\" name=\"U\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[24,184],"source":"  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_U\" name=\"U\" href=\"\"></xref>."}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Documents.EditingCommands\n  id: EditingCommands\n  children:\n  - System.Windows.Documents.EditingCommands.AlignCenter\n  - System.Windows.Documents.EditingCommands.AlignJustify\n  - System.Windows.Documents.EditingCommands.AlignLeft\n  - System.Windows.Documents.EditingCommands.AlignRight\n  - System.Windows.Documents.EditingCommands.Backspace\n  - System.Windows.Documents.EditingCommands.CorrectSpellingError\n  - System.Windows.Documents.EditingCommands.DecreaseFontSize\n  - System.Windows.Documents.EditingCommands.DecreaseIndentation\n  - System.Windows.Documents.EditingCommands.Delete\n  - System.Windows.Documents.EditingCommands.DeleteNextWord\n  - System.Windows.Documents.EditingCommands.DeletePreviousWord\n  - System.Windows.Documents.EditingCommands.EnterLineBreak\n  - System.Windows.Documents.EditingCommands.EnterParagraphBreak\n  - System.Windows.Documents.EditingCommands.IgnoreSpellingError\n  - System.Windows.Documents.EditingCommands.IncreaseFontSize\n  - System.Windows.Documents.EditingCommands.IncreaseIndentation\n  - System.Windows.Documents.EditingCommands.MoveDownByLine\n  - System.Windows.Documents.EditingCommands.MoveDownByPage\n  - System.Windows.Documents.EditingCommands.MoveDownByParagraph\n  - System.Windows.Documents.EditingCommands.MoveLeftByCharacter\n  - System.Windows.Documents.EditingCommands.MoveLeftByWord\n  - System.Windows.Documents.EditingCommands.MoveRightByCharacter\n  - System.Windows.Documents.EditingCommands.MoveRightByWord\n  - System.Windows.Documents.EditingCommands.MoveToDocumentEnd\n  - System.Windows.Documents.EditingCommands.MoveToDocumentStart\n  - System.Windows.Documents.EditingCommands.MoveToLineEnd\n  - System.Windows.Documents.EditingCommands.MoveToLineStart\n  - System.Windows.Documents.EditingCommands.MoveUpByLine\n  - System.Windows.Documents.EditingCommands.MoveUpByPage\n  - System.Windows.Documents.EditingCommands.MoveUpByParagraph\n  - System.Windows.Documents.EditingCommands.SelectDownByLine\n  - System.Windows.Documents.EditingCommands.SelectDownByPage\n  - System.Windows.Documents.EditingCommands.SelectDownByParagraph\n  - System.Windows.Documents.EditingCommands.SelectLeftByCharacter\n  - System.Windows.Documents.EditingCommands.SelectLeftByWord\n  - System.Windows.Documents.EditingCommands.SelectRightByCharacter\n  - System.Windows.Documents.EditingCommands.SelectRightByWord\n  - System.Windows.Documents.EditingCommands.SelectToDocumentEnd\n  - System.Windows.Documents.EditingCommands.SelectToDocumentStart\n  - System.Windows.Documents.EditingCommands.SelectToLineEnd\n  - System.Windows.Documents.EditingCommands.SelectToLineStart\n  - System.Windows.Documents.EditingCommands.SelectUpByLine\n  - System.Windows.Documents.EditingCommands.SelectUpByPage\n  - System.Windows.Documents.EditingCommands.SelectUpByParagraph\n  - System.Windows.Documents.EditingCommands.TabBackward\n  - System.Windows.Documents.EditingCommands.TabForward\n  - System.Windows.Documents.EditingCommands.ToggleBold\n  - System.Windows.Documents.EditingCommands.ToggleBullets\n  - System.Windows.Documents.EditingCommands.ToggleInsert\n  - System.Windows.Documents.EditingCommands.ToggleItalic\n  - System.Windows.Documents.EditingCommands.ToggleNumbering\n  - System.Windows.Documents.EditingCommands.ToggleSubscript\n  - System.Windows.Documents.EditingCommands.ToggleSuperscript\n  - System.Windows.Documents.EditingCommands.ToggleUnderline\n  langs:\n  - csharp\n  name: EditingCommands\n  nameWithType: EditingCommands\n  fullName: System.Windows.Documents.EditingCommands\n  type: Class\n  summary: Provides a standard set of editing related commands.\n  remarks: \"The following table shows the editing commands and the associated default key gestures (with key names from the <xref:System.Windows.Input.Key> and <xref:System.Windows.Input.ModifierKeys> enumerations).  \\n  \\n|Editing command|Default key gesture|  \\n|---------------------|-------------------------|  \\n|<xref:System.Windows.Documents.EditingCommands.AlignCenter%2A>|`Ctrl`+`E`|  \\n|<xref:System.Windows.Documents.EditingCommands.AlignJustify%2A>|`Ctrl`+`J`|  \\n|<xref:System.Windows.Documents.EditingCommands.AlignLeft%2A>|`Ctrl`+`L`|  \\n|<xref:System.Windows.Documents.EditingCommands.AlignRight%2A>|`Ctrl`+`R`|  \\n|<xref:System.Windows.Documents.EditingCommands.Backspace%2A>|`Backspace`|  \\n|<xref:System.Windows.Documents.EditingCommands.CorrectSpellingError%2A>|no default key gesture|  \\n|<xref:System.Windows.Documents.EditingCommands.DecreaseFontSize%2A>|`Ctrl`+`OemOpenBrackets`|  \\n|<xref:System.Windows.Documents.EditingCommands.DecreaseIndentation%2A>|`Ctrl`+`Shift`+`T`|  \\n|<xref:System.Windows.Documents.EditingCommands.Delete%2A>|`Delete`|  \\n|<xref:System.Windows.Documents.EditingCommands.DeleteNextWord%2A>|`Ctrl`+`Delete`|  \\n|<xref:System.Windows.Documents.EditingCommands.DeletePreviousWord%2A>|`Ctrl`+`Backspace`|  \\n|<xref:System.Windows.Documents.EditingCommands.EnterLineBreak%2A>|`Shift`+`Enter`|  \\n|<xref:System.Windows.Documents.EditingCommands.EnterParagraphBreak%2A>|`Enter`|  \\n|<xref:System.Windows.Documents.EditingCommands.IgnoreSpellingError%2A>|no default key gesture|  \\n|<xref:System.Windows.Documents.EditingCommands.IncreaseFontSize%2A>|`Ctrl`+`OemCloseBrackets`|  \\n|<xref:System.Windows.Documents.EditingCommands.IncreaseIndentation%2A>|`Ctrl`+`T`|  \\n|<xref:System.Windows.Documents.EditingCommands.MoveDownByLine%2A>|`Down`|  \\n|<xref:System.Windows.Documents.EditingCommands.MoveDownByPage%2A>|`PageDown`|  \\n|<xref:System.Windows.Documents.EditingCommands.MoveDownByParagraph%2A>|`Ctrl`+`Down`|  \\n|<xref:System.Windows.Documents.EditingCommands.MoveLeftByCharacter%2A>|`Left`|  \\n|<xref:System.Windows.Documents.EditingCommands.MoveLeftByWord%2A>|`Ctrl`+`Left`|  \\n|<xref:System.Windows.Documents.EditingCommands.MoveRightByCharacter%2A>|`Right`|  \\n|<xref:System.Windows.Documents.EditingCommands.MoveRightByWord%2A>|`Ctrl`+`Right`|  \\n|<xref:System.Windows.Documents.EditingCommands.MoveToDocumentEnd%2A>|`Ctrl`+`End`|  \\n|<xref:System.Windows.Documents.EditingCommands.MoveToDocumentStart%2A>|`Ctrl`+`Home`|  \\n|<xref:System.Windows.Documents.EditingCommands.MoveToLineEnd%2A>|`End`|  \\n|<xref:System.Windows.Documents.EditingCommands.MoveToLineStart%2A>|`Home`|  \\n|<xref:System.Windows.Documents.EditingCommands.MoveUpByLine%2A>|`Up`|  \\n|<xref:System.Windows.Documents.EditingCommands.MoveUpByPage%2A>|`PageUp`|  \\n|<xref:System.Windows.Documents.EditingCommands.MoveUpByParagraph%2A>|`Ctrl`+`Up`|  \\n|<xref:System.Windows.Documents.EditingCommands.SelectDownByLine%2A>|`Shift`+`Down`|  \\n|<xref:System.Windows.Documents.EditingCommands.SelectDownByPage%2A>|`Shift`+`PageDown`|  \\n|<xref:System.Windows.Documents.EditingCommands.SelectDownByParagraph%2A>|`Ctrl`+`Shift`+`Down`|  \\n|<xref:System.Windows.Documents.EditingCommands.SelectLeftByCharacter%2A>|`Shift`+`Left`|  \\n|<xref:System.Windows.Documents.EditingCommands.SelectLeftByWord%2A>|`Ctrl`+`Shift`+`Left`|  \\n|<xref:System.Windows.Documents.EditingCommands.SelectRightByCharacter%2A>|`Shift`+`Right`|  \\n|<xref:System.Windows.Documents.EditingCommands.SelectRightByWord%2A>|`Ctrl`+`Shift`+`Right`|  \\n|<xref:System.Windows.Documents.EditingCommands.SelectToDocumentEnd%2A>|`Ctrl`+`Shift`+`End`|  \\n|<xref:System.Windows.Documents.EditingCommands.SelectToDocumentStart%2A>|`Ctrl`+`Shift`+`Home`|  \\n|<xref:System.Windows.Documents.EditingCommands.SelectToLineEnd%2A>|`Shift`+`End`|  \\n|<xref:System.Windows.Documents.EditingCommands.SelectToLineStart%2A>|`Shift`+`Home`|  \\n|<xref:System.Windows.Documents.EditingCommands.SelectUpByLine%2A>|`Shift`+`Up`|  \\n|<xref:System.Windows.Documents.EditingCommands.SelectUpByPage%2A>|`Shift`+`PageUp`|  \\n|<xref:System.Windows.Documents.EditingCommands.SelectUpByParagraph%2A>|`Ctrl`+`Shift`+`Up`|  \\n|<xref:System.Windows.Documents.EditingCommands.TabBackward%2A>|`Shift`+`Tab`|  \\n|<xref:System.Windows.Documents.EditingCommands.TabForward%2A>|`Tab`|  \\n|<xref:System.Windows.Documents.EditingCommands.ToggleBold%2A>|`Ctrl`+`B`|  \\n|<xref:System.Windows.Documents.EditingCommands.ToggleBullets%2A>|`Ctrl`+`Shift`+`L`|  \\n|<xref:System.Windows.Documents.EditingCommands.ToggleInsert%2A>|`Insert`|  \\n|<xref:System.Windows.Documents.EditingCommands.ToggleItalic%2A>|`Ctrl`+`I`|  \\n|<xref:System.Windows.Documents.EditingCommands.ToggleNumbering%2A>|`Ctrl`+`Shift`+`N`|  \\n|<xref:System.Windows.Documents.EditingCommands.ToggleSubscript%2A>|`Ctrl`+`OemPlus`|  \\n|<xref:System.Windows.Documents.EditingCommands.ToggleSuperscript%2A>|`Ctrl`+`Shift+OemPlus`|  \\n|<xref:System.Windows.Documents.EditingCommands.ToggleUnderline%2A>|`Ctrl`+`U`|  \\n  \\n Caret movement commands and selection expanding commands share a common set of default key gestures, the general difference being the addition of the <xref:System.Windows.Input.ModifierKeys> key to differentiate selection commands from caret movement commands.  For example, the <xref:System.Windows.Documents.EditingCommands.MoveLeftByCharacter%2A> command has a default key gesture of <xref:System.Windows.Input.Key>, and the corresponding <xref:System.Windows.Documents.EditingCommands.SelectLeftByCharacter%2A> command has a default key gesture of <xref:System.Windows.Input.ModifierKeys>+<xref:System.Windows.Input.Key>.  \\n  \\n In general, the command definitions provided by the EditingCommands class do not make use of command parameters (the `parameter` parameter expected by the <xref:System.Windows.Input.ICommand.Execute%2A> method).  \\n  \\n For more information on commands and commanding, see [Input Overview](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"The following example demonstrates how to invoke an editing command on an object that supports the command.  \\n  \\n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \\n  \\n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \\n  \\n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \\n  \\n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]\"\n  syntax:\n    content: public static class EditingCommands\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Windows.Documents.EditingCommands.AlignCenter\n  id: AlignCenter\n  parent: System.Windows.Documents.EditingCommands\n  langs:\n  - csharp\n  name: AlignCenter\n  nameWithType: EditingCommands.AlignCenter\n  fullName: System.Windows.Documents.EditingCommands.AlignCenter\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Represents the AlignCenter command, which requests that the current paragraph or a selection of paragraphs be centered.\n  remarks: \"This command operates at the <xref:System.Windows.Documents.Paragraph> level.  If this command is invoked on a partial selection of content within a paragraph (including an empty selection where the caret is within a paragraph), the requested effect is applied to the entire paragraph.  If this command is invoked on a selection that spans multiple paragraphs, the effect is applied to the entire contents of each paragraph that participates in the selection.  \\n  \\n The following figure shows an example of centered content.  \\n  \\n ![Screenshot: TextAlign property value of Center](~/add/media/flowdoc-textalign-center.png \\\"Screenshot: TextAlign property value of Center\\\")  \\n  \\n This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.  \\n  \\n<a name=\\\"xamlAttributeUsage_AlignCenter\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object property=\\\"AlignCenter\\\"/>  \\n```\"\n  example:\n  - \"The following example demonstrates how to invoke an editing command on an object that supports the command.  \\n  \\n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \\n  \\n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \\n  \\n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \\n  \\n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]\"\n  syntax:\n    content: public static System.Windows.Input.RoutedUICommand AlignCenter { get; }\n    return:\n      type: System.Windows.Input.RoutedUICommand\n      description: The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_E\" name=\"E\" href=\"\"></xref>.\n  overload: System.Windows.Documents.EditingCommands.AlignCenter*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Documents.EditingCommands.AlignJustify\n  id: AlignJustify\n  parent: System.Windows.Documents.EditingCommands\n  langs:\n  - csharp\n  name: AlignJustify\n  nameWithType: EditingCommands.AlignJustify\n  fullName: System.Windows.Documents.EditingCommands.AlignJustify\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Represents the AlignJustify command, which requests that the current paragraph or a selection of paragraphs be justified.\n  remarks: \"This command operates at the <xref:System.Windows.Documents.Paragraph> level.  If this command is invoked on a partial selection of content within a paragraph (including an empty selection where the caret is within a paragraph), the requested effect is applied to the entire paragraph.  If this command is invoked on a selection that spans multiple paragraphs, the effect is applied to all the paragraphs in the selection.  \\n  \\n When content is justified, the horizontal spacing within each line of content is adjusted so that the justified lines are of equal or near-equal width.  Content is typically justified to create smooth edges on the sides of the content.  \\n  \\n Because it is often shorter than the rest, the last line in a paragraph may remain unjustified after this command is invoked.  \\n  \\n The following figure shows unjustified (left-aligned) content.  \\n  \\n ![Screenshot: Content is unjustified](~/add/media/content-unjustified.png \\\"Screenshot: Content is unjustified\\\")  \\n  \\n The following figure shows the same content after it has been justified.  \\n  \\n ![Screenshot of content justified text](~/add/media/content-justified.png \\\"Screenshot of content justified text\\\")  \\n  \\n There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  \\n  \\n This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.  \\n  \\n<a name=\\\"xamlAttributeUsage_AlignJustify\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object property=\\\"AlignJustify\\\"/>  \\n```\"\n  example:\n  - \"The following example demonstrates how to invoke an editing command on an object that supports the command.  \\n  \\n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \\n  \\n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \\n  \\n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \\n  \\n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]\"\n  syntax:\n    content: public static System.Windows.Input.RoutedUICommand AlignJustify { get; }\n    return:\n      type: System.Windows.Input.RoutedUICommand\n      description: The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_J\" name=\"J\" href=\"\"></xref>.\n  overload: System.Windows.Documents.EditingCommands.AlignJustify*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Documents.EditingCommands.AlignLeft\n  id: AlignLeft\n  parent: System.Windows.Documents.EditingCommands\n  langs:\n  - csharp\n  name: AlignLeft\n  nameWithType: EditingCommands.AlignLeft\n  fullName: System.Windows.Documents.EditingCommands.AlignLeft\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Represents the AlignLeft command, which requests that a selection of content be aligned left.\n  remarks: \"This command operates at the <xref:System.Windows.Documents.Paragraph> level.  If this command is invoked on a partial selection of content within a paragraph (including an empty selection where the caret is within a paragraph), the requested effect is applied to the entire paragraph.  If this command is invoked on a selection that spans multiple paragraphs, the effect is applied to the entire contents of each paragraph that participates in the selection.  \\n  \\n The following figure shows an example of left-aligned content.  \\n  \\n ![Screenshot: TextAlign property value of Left](~/add/media/flowdoc-textalign-left.png \\\"Screenshot: TextAlign property value of Left\\\")  \\n  \\n There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  \\n  \\n This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.  \\n  \\n<a name=\\\"xamlAttributeUsage_AlignLeft\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object property=\\\"AlignLeft\\\"/>  \\n```\"\n  example:\n  - \"The following example demonstrates how to invoke an editing command on an object that supports the command.  \\n  \\n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \\n  \\n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \\n  \\n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \\n  \\n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]\"\n  syntax:\n    content: public static System.Windows.Input.RoutedUICommand AlignLeft { get; }\n    return:\n      type: System.Windows.Input.RoutedUICommand\n      description: The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_L\" name=\"L\" href=\"\"></xref>.\n  overload: System.Windows.Documents.EditingCommands.AlignLeft*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Documents.EditingCommands.AlignRight\n  id: AlignRight\n  parent: System.Windows.Documents.EditingCommands\n  langs:\n  - csharp\n  name: AlignRight\n  nameWithType: EditingCommands.AlignRight\n  fullName: System.Windows.Documents.EditingCommands.AlignRight\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Represents the AlignRight command, which requests that a selection of content be aligned right.\n  remarks: \"This command operates at the <xref:System.Windows.Documents.Paragraph> level.  If this command is invoked on a partial selection of content within a paragraph (including an empty selection where the caret is within a paragraph), the requested effect is applied to the entire paragraph.  If this command is invoked on a selection that spans multiple paragraphs, the effect is applied to the entire contents of each paragraph that participates in the selection.  \\n  \\n The following figure shows an example of right-aligned content.  \\n  \\n ![Screenshot: TextAlign value of Right](~/add/media/flowdoc-textalign-right.png \\\"Screenshot: TextAlign value of Right\\\")  \\n  \\n There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  \\n  \\n This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.  \\n  \\n<a name=\\\"xamlAttributeUsage_AlignRight\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object property=\\\"AlignRight\\\"/>  \\n```\"\n  example:\n  - \"The following example demonstrates how to invoke an editing command on an object that supports the command.  \\n  \\n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \\n  \\n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \\n  \\n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \\n  \\n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]\"\n  syntax:\n    content: public static System.Windows.Input.RoutedUICommand AlignRight { get; }\n    return:\n      type: System.Windows.Input.RoutedUICommand\n      description: The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_R\" name=\"R\" href=\"\"></xref>.\n  overload: System.Windows.Documents.EditingCommands.AlignRight*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Documents.EditingCommands.Backspace\n  id: Backspace\n  parent: System.Windows.Documents.EditingCommands\n  langs:\n  - csharp\n  name: Backspace\n  nameWithType: EditingCommands.Backspace\n  fullName: System.Windows.Documents.EditingCommands.Backspace\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Represents the Backspace command, which requests that a backspace be entered at the current position or over the current selection.\n  remarks: \"When invoked on an empty selection, this command deletes the character or paragraph separator just before the caret. When invoked on a non-empty selection, this command deletes the selection.  \\n  \\n This command retains any formatting from the deleted selection for content immediately inserted at the same location after this command is invoked.  Contrast with the <xref:System.Windows.Documents.EditingCommands.Delete%2A> command, which does not retain previous formatting.  \\n  \\n There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  \\n  \\n This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.  \\n  \\n<a name=\\\"xamlAttributeUsage_Backspace\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object property=\\\"Backspace\\\"/>  \\n```\"\n  example:\n  - \"The following example demonstrates how to invoke an editing command on an object that supports the command.  \\n  \\n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \\n  \\n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \\n  \\n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \\n  \\n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]\"\n  syntax:\n    content: public static System.Windows.Input.RoutedUICommand Backspace { get; }\n    return:\n      type: System.Windows.Input.RoutedUICommand\n      description: The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Backspace\" name=\"Backspace\" href=\"\"></xref>.\n  overload: System.Windows.Documents.EditingCommands.Backspace*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Documents.EditingCommands.CorrectSpellingError\n  id: CorrectSpellingError\n  parent: System.Windows.Documents.EditingCommands\n  langs:\n  - csharp\n  name: CorrectSpellingError\n  nameWithType: EditingCommands.CorrectSpellingError\n  fullName: System.Windows.Documents.EditingCommands.CorrectSpellingError\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Represents the CorrectSpellingError command, which requests that any misspelled word at the current position be corrected.\n  remarks: \"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  \\n  \\n<a name=\\\"xamlAttributeUsage_CorrectSpellingError\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object property=\\\"CorrectSpellingError\\\"/>  \\n```\"\n  syntax:\n    content: public static System.Windows.Input.RoutedUICommand CorrectSpellingError { get; }\n    return:\n      type: System.Windows.Input.RoutedUICommand\n      description: The requested command.  This command has no default key gesture.\n  overload: System.Windows.Documents.EditingCommands.CorrectSpellingError*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Documents.EditingCommands.DecreaseFontSize\n  id: DecreaseFontSize\n  parent: System.Windows.Documents.EditingCommands\n  langs:\n  - csharp\n  name: DecreaseFontSize\n  nameWithType: EditingCommands.DecreaseFontSize\n  fullName: System.Windows.Documents.EditingCommands.DecreaseFontSize\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Represents the DecreaseFontSize command, which requests that the font size for the current selection be decreased by 1 point.\n  remarks: \"If this command is invoked on an empty selection where the caret is within a word, the selection is automatically expanded to apply the command to the entire word.  \\n  \\n There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  \\n  \\n This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.  \\n  \\n<a name=\\\"xamlAttributeUsage_DecreaseFontSize\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object property=\\\"DecreaseFontSize\\\"/>  \\n```\"\n  example:\n  - \"The following example demonstrates how to invoke an editing command on an object that supports the command.  \\n  \\n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \\n  \\n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \\n  \\n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \\n  \\n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]\"\n  syntax:\n    content: public static System.Windows.Input.RoutedUICommand DecreaseFontSize { get; }\n    return:\n      type: System.Windows.Input.RoutedUICommand\n      description: The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_OemOpenBrackets\" name=\"OemOpenBrackets\" href=\"\"></xref>.\n  overload: System.Windows.Documents.EditingCommands.DecreaseFontSize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Documents.EditingCommands.DecreaseIndentation\n  id: DecreaseIndentation\n  parent: System.Windows.Documents.EditingCommands\n  langs:\n  - csharp\n  name: DecreaseIndentation\n  nameWithType: EditingCommands.DecreaseIndentation\n  fullName: System.Windows.Documents.EditingCommands.DecreaseIndentation\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Represents the DecreaseIndentation command, which requests that indentation for the current paragraph be decreased by one tab stop.\n  remarks: \"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  \\n  \\n This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.  \\n  \\n> [!IMPORTANT]\\n>  This command has no effect on a text element unless the <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A> property of the text element is set to `true`.  \\n  \\n<a name=\\\"xamlAttributeUsage_DecreaseIndentation\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object property=\\\"DecreaseIndentation\\\"/>  \\n```\"\n  example:\n  - \"The following example demonstrates how to invoke an editing command on an object that supports the command.  \\n  \\n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \\n  \\n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \\n  \\n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \\n  \\n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]\"\n  syntax:\n    content: public static System.Windows.Input.RoutedUICommand DecreaseIndentation { get; }\n    return:\n      type: System.Windows.Input.RoutedUICommand\n      description: The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"></xref>+<xref uid=\"langword_csharp_T\" name=\"T\" href=\"\"></xref>.\n  overload: System.Windows.Documents.EditingCommands.DecreaseIndentation*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Documents.EditingCommands.Delete\n  id: Delete\n  parent: System.Windows.Documents.EditingCommands\n  langs:\n  - csharp\n  name: Delete\n  nameWithType: EditingCommands.Delete\n  fullName: System.Windows.Documents.EditingCommands.Delete\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Represents the Delete command, which requests that the current selection be deleted.\n  remarks: \"This command discards any formatting from the deleted selection.  Contrast with the <xref:System.Windows.Documents.EditingCommands.Backspace%2A> command, which retains any formatting from the deleted selection for content immediately inserted at the same location after this command is invoked.  \\n  \\n There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  \\n  \\n This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.  \\n  \\n<a name=\\\"xamlAttributeUsage_Delete\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object property=\\\"Delete\\\"/>  \\n```\"\n  example:\n  - \"The following example demonstrates how to invoke an editing command on an object that supports the command.  \\n  \\n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \\n  \\n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \\n  \\n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \\n  \\n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]\"\n  syntax:\n    content: public static System.Windows.Input.RoutedUICommand Delete { get; }\n    return:\n      type: System.Windows.Input.RoutedUICommand\n      description: The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Delete\" name=\"Delete\" href=\"\"></xref>.\n  overload: System.Windows.Documents.EditingCommands.Delete*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Documents.EditingCommands.DeleteNextWord\n  id: DeleteNextWord\n  parent: System.Windows.Documents.EditingCommands\n  langs:\n  - csharp\n  name: DeleteNextWord\n  nameWithType: EditingCommands.DeleteNextWord\n  fullName: System.Windows.Documents.EditingCommands.DeleteNextWord\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Represents the DeleteNextWord command, which requests that the next word (relative to a current position) be deleted.\n  remarks: \"If the caret is within a word, the remainder of the word between the current position and the end of the word is deleted.  \\n  \\n There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  \\n  \\n This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.  \\n  \\n<a name=\\\"xamlAttributeUsage_DeleteNextWord\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object property=\\\"DeleteNextWord\\\"/>  \\n```\"\n  example:\n  - \"The following example demonstrates how to invoke an editing command on an object that supports the command.  \\n  \\n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \\n  \\n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \\n  \\n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \\n  \\n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]\"\n  syntax:\n    content: public static System.Windows.Input.RoutedUICommand DeleteNextWord { get; }\n    return:\n      type: System.Windows.Input.RoutedUICommand\n      description: The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_Delete\" name=\"Delete\" href=\"\"></xref>.\n  overload: System.Windows.Documents.EditingCommands.DeleteNextWord*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Documents.EditingCommands.DeletePreviousWord\n  id: DeletePreviousWord\n  parent: System.Windows.Documents.EditingCommands\n  langs:\n  - csharp\n  name: DeletePreviousWord\n  nameWithType: EditingCommands.DeletePreviousWord\n  fullName: System.Windows.Documents.EditingCommands.DeletePreviousWord\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Represents the DeletePreviousWord command, which requests that the previous word (relative to a current position) be deleted.\n  remarks: \"If the caret is within a word, the remainder of the word between the current position and the beginning of the word is deleted.  \\n  \\n There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  \\n  \\n This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.  \\n  \\n<a name=\\\"xamlAttributeUsage_DeletePreviousWord\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object property=\\\"DeletePreviousWord\\\"/>  \\n```\"\n  example:\n  - \"The following example demonstrates how to invoke an editing command on an object that supports the command.  \\n  \\n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \\n  \\n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \\n  \\n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \\n  \\n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]\"\n  syntax:\n    content: public static System.Windows.Input.RoutedUICommand DeletePreviousWord { get; }\n    return:\n      type: System.Windows.Input.RoutedUICommand\n      description: The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_Backspace\" name=\"Backspace\" href=\"\"></xref>.\n  overload: System.Windows.Documents.EditingCommands.DeletePreviousWord*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Documents.EditingCommands.EnterLineBreak\n  id: EnterLineBreak\n  parent: System.Windows.Documents.EditingCommands\n  langs:\n  - csharp\n  name: EnterLineBreak\n  nameWithType: EditingCommands.EnterLineBreak\n  fullName: System.Windows.Documents.EditingCommands.EnterLineBreak\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Represents the EnterLineBreak command, which requests that a line break be inserted at the current position or over the current selection.\n  remarks: \"For editors that support flow content, such as <xref:System.Windows.Controls.RichTextBox>, this command causes a <xref:System.Windows.Documents.LineBreak> element to be inserted at the current position.  \\n  \\n There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  \\n  \\n This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>.  \\n  \\n<a name=\\\"xamlAttributeUsage_EnterLineBreak\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object property=\\\"EnterLineBreak\\\"/>  \\n```\"\n  example:\n  - \"The following example demonstrates how to invoke an editing command on an object that supports the command.  \\n  \\n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \\n  \\n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \\n  \\n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \\n  \\n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]\"\n  syntax:\n    content: public static System.Windows.Input.RoutedUICommand EnterLineBreak { get; }\n    return:\n      type: System.Windows.Input.RoutedUICommand\n      description: The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"></xref>+<xref uid=\"langword_csharp_Enter\" name=\"Enter\" href=\"\"></xref>.\n  overload: System.Windows.Documents.EditingCommands.EnterLineBreak*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Documents.EditingCommands.EnterParagraphBreak\n  id: EnterParagraphBreak\n  parent: System.Windows.Documents.EditingCommands\n  langs:\n  - csharp\n  name: EnterParagraphBreak\n  nameWithType: EditingCommands.EnterParagraphBreak\n  fullName: System.Windows.Documents.EditingCommands.EnterParagraphBreak\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Represents the EnterParagraphBreak command, which requests that a paragraph break be inserted at the current position or over the current selection.\n  remarks: \"This command is equivalent to the user pressing the ENTER key.  \\n  \\n There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  \\n  \\n This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox> (when the <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsReturn%2A> property is `true`).  \\n  \\n> [!IMPORTANT]\\n>  This command has no effect on a text element unless the <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsReturn%2A> property of the text element is set to `true`.  \\n  \\n<a name=\\\"xamlAttributeUsage_EnterParagraphBreak\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object property=\\\"EnterParagraphBreak\\\"/>  \\n```\"\n  example:\n  - \"The following example demonstrates how to invoke an editing command on an object that supports the command.  \\n  \\n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \\n  \\n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \\n  \\n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \\n  \\n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]\"\n  syntax:\n    content: public static System.Windows.Input.RoutedUICommand EnterParagraphBreak { get; }\n    return:\n      type: System.Windows.Input.RoutedUICommand\n      description: The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Enter\" name=\"Enter\" href=\"\"></xref>.\n  overload: System.Windows.Documents.EditingCommands.EnterParagraphBreak*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Documents.EditingCommands.IgnoreSpellingError\n  id: IgnoreSpellingError\n  parent: System.Windows.Documents.EditingCommands\n  langs:\n  - csharp\n  name: IgnoreSpellingError\n  nameWithType: EditingCommands.IgnoreSpellingError\n  fullName: System.Windows.Documents.EditingCommands.IgnoreSpellingError\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Represents the IgnoreSpellingError command, which requests that any instances of misspelled words at the current position or in the current selection be ignored.\n  remarks: \"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  \\n  \\n<a name=\\\"xamlAttributeUsage_IgnoreSpellingError\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object property=\\\"IgnoreSpellingError\\\"/>  \\n```\"\n  syntax:\n    content: public static System.Windows.Input.RoutedUICommand IgnoreSpellingError { get; }\n    return:\n      type: System.Windows.Input.RoutedUICommand\n      description: The requested command.  This command has no default key gesture.\n  overload: System.Windows.Documents.EditingCommands.IgnoreSpellingError*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Documents.EditingCommands.IncreaseFontSize\n  id: IncreaseFontSize\n  parent: System.Windows.Documents.EditingCommands\n  langs:\n  - csharp\n  name: IncreaseFontSize\n  nameWithType: EditingCommands.IncreaseFontSize\n  fullName: System.Windows.Documents.EditingCommands.IncreaseFontSize\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Represents the IncreaseFontSize command, which requests that the font size for the current selection be increased by 1 point.\n  remarks: \"If this command is invoked on an empty selection where the caret is within a word, the selection is expanded to apply the command to the entire word.  \\n  \\n There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  \\n  \\n This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.  \\n  \\n<a name=\\\"xamlAttributeUsage_IncreaseFontSize\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object property=\\\"IncreaseFontSize\\\"/>  \\n```\"\n  example:\n  - \"The following example demonstrates how to invoke an editing command on an object that supports the command.  \\n  \\n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \\n  \\n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \\n  \\n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \\n  \\n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]\"\n  syntax:\n    content: public static System.Windows.Input.RoutedUICommand IncreaseFontSize { get; }\n    return:\n      type: System.Windows.Input.RoutedUICommand\n      description: The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_OemCloseBrackets\" name=\"OemCloseBrackets\" href=\"\"></xref>.\n  overload: System.Windows.Documents.EditingCommands.IncreaseFontSize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Documents.EditingCommands.IncreaseIndentation\n  id: IncreaseIndentation\n  parent: System.Windows.Documents.EditingCommands\n  langs:\n  - csharp\n  name: IncreaseIndentation\n  nameWithType: EditingCommands.IncreaseIndentation\n  fullName: System.Windows.Documents.EditingCommands.IncreaseIndentation\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Represents the IncreaseIndentation command, which requests that indentation for the current paragraph be increased by one tab stop.\n  remarks: \"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  \\n  \\n This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.  \\n  \\n> [!IMPORTANT]\\n>  This command has no effect on a text element unless the <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A> property of the text element is set to `true`.  \\n  \\n<a name=\\\"xamlAttributeUsage_IncreaseIndentation\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object property=\\\"IncreaseIndentation\\\"/>  \\n```\"\n  example:\n  - \"The following example demonstrates how to invoke an editing command on an object that supports the command.  \\n  \\n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \\n  \\n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \\n  \\n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \\n  \\n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]\"\n  syntax:\n    content: public static System.Windows.Input.RoutedUICommand IncreaseIndentation { get; }\n    return:\n      type: System.Windows.Input.RoutedUICommand\n      description: The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_T\" name=\"T\" href=\"\"></xref>.\n  overload: System.Windows.Documents.EditingCommands.IncreaseIndentation*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Documents.EditingCommands.MoveDownByLine\n  id: MoveDownByLine\n  parent: System.Windows.Documents.EditingCommands\n  langs:\n  - csharp\n  name: MoveDownByLine\n  nameWithType: EditingCommands.MoveDownByLine\n  fullName: System.Windows.Documents.EditingCommands.MoveDownByLine\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Represents the MoveDownByLine command, which requests that the caret move down by one line.\n  remarks: \"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  \\n  \\n This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>.  \\n  \\n<a name=\\\"xamlAttributeUsage_MoveDownByLine\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object property=\\\"MoveDownByLine\\\"/>  \\n```\"\n  example:\n  - \"The following example demonstrates how to invoke an editing command on an object that supports the command.  \\n  \\n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \\n  \\n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \\n  \\n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \\n  \\n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]\"\n  syntax:\n    content: public static System.Windows.Input.RoutedUICommand MoveDownByLine { get; }\n    return:\n      type: System.Windows.Input.RoutedUICommand\n      description: The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Down\" name=\"Down\" href=\"\"></xref>.\n  overload: System.Windows.Documents.EditingCommands.MoveDownByLine*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Documents.EditingCommands.MoveDownByPage\n  id: MoveDownByPage\n  parent: System.Windows.Documents.EditingCommands\n  langs:\n  - csharp\n  name: MoveDownByPage\n  nameWithType: EditingCommands.MoveDownByPage\n  fullName: System.Windows.Documents.EditingCommands.MoveDownByPage\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Represents the MoveDownByPage command, which requests that the caret move down by one page.\n  remarks: \"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  \\n  \\n This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>.  \\n  \\n<a name=\\\"xamlAttributeUsage_MoveDownByPage\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object property=\\\"MoveDownByPage\\\"/>  \\n```\"\n  example:\n  - \"The following example demonstrates how to invoke an editing command on an object that supports the command.  \\n  \\n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \\n  \\n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \\n  \\n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \\n  \\n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]\"\n  syntax:\n    content: public static System.Windows.Input.RoutedUICommand MoveDownByPage { get; }\n    return:\n      type: System.Windows.Input.RoutedUICommand\n      description: The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_PageDown\" name=\"PageDown\" href=\"\"></xref>.\n  overload: System.Windows.Documents.EditingCommands.MoveDownByPage*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Documents.EditingCommands.MoveDownByParagraph\n  id: MoveDownByParagraph\n  parent: System.Windows.Documents.EditingCommands\n  langs:\n  - csharp\n  name: MoveDownByParagraph\n  nameWithType: EditingCommands.MoveDownByParagraph\n  fullName: System.Windows.Documents.EditingCommands.MoveDownByParagraph\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Represents the MoveDownByParagraph command, which requests that the caret move down by one paragraph.\n  remarks: \"This command positions the caret at the beginning of the next paragraph.  \\n  \\n This command behaves like <xref:System.Windows.Documents.EditingCommands.MoveToDocumentEnd%2A> when invoked on a <xref:System.Windows.Controls.TextBox>.  \\n  \\n There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  \\n  \\n This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>.  \\n  \\n<a name=\\\"xamlAttributeUsage_MoveDownByParagraph\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object property=\\\"MoveDownByParagraph\\\"/>  \\n```\"\n  example:\n  - \"The following example demonstrates how to invoke an editing command on an object that supports the command.  \\n  \\n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \\n  \\n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \\n  \\n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \\n  \\n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]\"\n  syntax:\n    content: public static System.Windows.Input.RoutedUICommand MoveDownByParagraph { get; }\n    return:\n      type: System.Windows.Input.RoutedUICommand\n      description: The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_Down\" name=\"Down\" href=\"\"></xref>.\n  overload: System.Windows.Documents.EditingCommands.MoveDownByParagraph*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Documents.EditingCommands.MoveLeftByCharacter\n  id: MoveLeftByCharacter\n  parent: System.Windows.Documents.EditingCommands\n  langs:\n  - csharp\n  name: MoveLeftByCharacter\n  nameWithType: EditingCommands.MoveLeftByCharacter\n  fullName: System.Windows.Documents.EditingCommands.MoveLeftByCharacter\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Represents the MoveLeftByCharacter command, which requests that the caret move one character left.\n  remarks: \"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  \\n  \\n This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.  \\n  \\n<a name=\\\"xamlAttributeUsage_MoveLeftByCharacter\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object property=\\\"MoveLeftByCharacter\\\"/>  \\n```\"\n  example:\n  - \"The following example demonstrates how to invoke an editing command on an object that supports the command.  \\n  \\n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \\n  \\n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \\n  \\n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \\n  \\n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]\"\n  syntax:\n    content: public static System.Windows.Input.RoutedUICommand MoveLeftByCharacter { get; }\n    return:\n      type: System.Windows.Input.RoutedUICommand\n      description: The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Left\" name=\"Left\" href=\"\"></xref>.\n  overload: System.Windows.Documents.EditingCommands.MoveLeftByCharacter*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Documents.EditingCommands.MoveLeftByWord\n  id: MoveLeftByWord\n  parent: System.Windows.Documents.EditingCommands\n  langs:\n  - csharp\n  name: MoveLeftByWord\n  nameWithType: EditingCommands.MoveLeftByWord\n  fullName: System.Windows.Documents.EditingCommands.MoveLeftByWord\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Represents the MoveLeftByWord command, which requests that the caret move one word left.\n  remarks: \"If the caret is within a word, this command moves the caret to the beginning of that word.  Otherwise, this command moves the caret to the beginning of the previous word.  \\n  \\n There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  \\n  \\n This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.  \\n  \\n<a name=\\\"xamlAttributeUsage_MoveLeftByWord\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object property=\\\"MoveLeftByWord\\\"/>  \\n```\"\n  example:\n  - \"The following example demonstrates how to invoke an editing command on an object that supports the command.  \\n  \\n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \\n  \\n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \\n  \\n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \\n  \\n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]\"\n  syntax:\n    content: public static System.Windows.Input.RoutedUICommand MoveLeftByWord { get; }\n    return:\n      type: System.Windows.Input.RoutedUICommand\n      description: The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_Left\" name=\"Left\" href=\"\"></xref>.\n  overload: System.Windows.Documents.EditingCommands.MoveLeftByWord*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Documents.EditingCommands.MoveRightByCharacter\n  id: MoveRightByCharacter\n  parent: System.Windows.Documents.EditingCommands\n  langs:\n  - csharp\n  name: MoveRightByCharacter\n  nameWithType: EditingCommands.MoveRightByCharacter\n  fullName: System.Windows.Documents.EditingCommands.MoveRightByCharacter\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Represents the MoveRightByCharacter command, which requests that the caret move one character right.\n  remarks: \"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  \\n  \\n This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.  \\n  \\n<a name=\\\"xamlAttributeUsage_MoveRightByCharacter\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object property=\\\"MoveRightByCharacter\\\"/>  \\n```\"\n  example:\n  - \"The following example demonstrates how to invoke an editing command on an object that supports the command.  \\n  \\n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \\n  \\n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \\n  \\n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \\n  \\n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]\"\n  syntax:\n    content: public static System.Windows.Input.RoutedUICommand MoveRightByCharacter { get; }\n    return:\n      type: System.Windows.Input.RoutedUICommand\n      description: The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Right\" name=\"Right\" href=\"\"></xref>.\n  overload: System.Windows.Documents.EditingCommands.MoveRightByCharacter*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Documents.EditingCommands.MoveRightByWord\n  id: MoveRightByWord\n  parent: System.Windows.Documents.EditingCommands\n  langs:\n  - csharp\n  name: MoveRightByWord\n  nameWithType: EditingCommands.MoveRightByWord\n  fullName: System.Windows.Documents.EditingCommands.MoveRightByWord\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Represents the MoveRightByWord command, which requests that the caret move right by one word.\n  remarks: \"If the caret is within a word, this command moves the caret to the end of that word.  Otherwise, this command moves the caret to the beginning of the next word.  \\n  \\n There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  \\n  \\n This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.  \\n  \\n<a name=\\\"xamlAttributeUsage_MoveRightByWord\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object property=\\\"MoveRightByWord\\\"/>  \\n```\"\n  example:\n  - \"The following example demonstrates how to invoke an editing command on an object that supports the command.  \\n  \\n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \\n  \\n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \\n  \\n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \\n  \\n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]\"\n  syntax:\n    content: public static System.Windows.Input.RoutedUICommand MoveRightByWord { get; }\n    return:\n      type: System.Windows.Input.RoutedUICommand\n      description: The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_Right\" name=\"Right\" href=\"\"></xref>.\n  overload: System.Windows.Documents.EditingCommands.MoveRightByWord*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Documents.EditingCommands.MoveToDocumentEnd\n  id: MoveToDocumentEnd\n  parent: System.Windows.Documents.EditingCommands\n  langs:\n  - csharp\n  name: MoveToDocumentEnd\n  nameWithType: EditingCommands.MoveToDocumentEnd\n  fullName: System.Windows.Documents.EditingCommands.MoveToDocumentEnd\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Represents the MoveToDocumentEnd command, which requests that the caret move to the very end of content.\n  remarks: \"A *text container* is the element that forms the ultimate border for the content at hand.  <xref:System.Windows.Controls.TextBlock> and <xref:System.Windows.Documents.FlowDocument> are examples of text containers.  The content collectively contained within a text container is referred to as a *document*.  \\n  \\n There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  \\n  \\n This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.  \\n  \\n<a name=\\\"xamlAttributeUsage_MoveToDocumentEnd\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object property=\\\"MoveToDocumentEnd\\\"/>  \\n```\"\n  example:\n  - \"The following example demonstrates how to invoke an editing command on an object that supports the command.  \\n  \\n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \\n  \\n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \\n  \\n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \\n  \\n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]\"\n  syntax:\n    content: public static System.Windows.Input.RoutedUICommand MoveToDocumentEnd { get; }\n    return:\n      type: System.Windows.Input.RoutedUICommand\n      description: The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_End\" name=\"End\" href=\"\"></xref>.\n  overload: System.Windows.Documents.EditingCommands.MoveToDocumentEnd*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Documents.EditingCommands.MoveToDocumentStart\n  id: MoveToDocumentStart\n  parent: System.Windows.Documents.EditingCommands\n  langs:\n  - csharp\n  name: MoveToDocumentStart\n  nameWithType: EditingCommands.MoveToDocumentStart\n  fullName: System.Windows.Documents.EditingCommands.MoveToDocumentStart\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Represents the MoveToDocumentStart command, which requests that the caret move to the very beginning of content.\n  remarks: \"A *text container* is the element that forms the ultimate border for the content at hand.  <xref:System.Windows.Controls.TextBlock> and <xref:System.Windows.Documents.FlowDocument> are examples of text containers.  The content collectively contained within a text container is referred to as a *document*.  \\n  \\n There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  \\n  \\n This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.  \\n  \\n<a name=\\\"xamlAttributeUsage_MoveToDocumentStart\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object property=\\\"MoveToDocumentStart\\\"/>  \\n```\"\n  example:\n  - \"The following example demonstrates how to invoke an editing command on an object that supports the command.  \\n  \\n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \\n  \\n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \\n  \\n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \\n  \\n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]\"\n  syntax:\n    content: public static System.Windows.Input.RoutedUICommand MoveToDocumentStart { get; }\n    return:\n      type: System.Windows.Input.RoutedUICommand\n      description: The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_Home\" name=\"Home\" href=\"\"></xref>.\n  overload: System.Windows.Documents.EditingCommands.MoveToDocumentStart*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Documents.EditingCommands.MoveToLineEnd\n  id: MoveToLineEnd\n  parent: System.Windows.Documents.EditingCommands\n  langs:\n  - csharp\n  name: MoveToLineEnd\n  nameWithType: EditingCommands.MoveToLineEnd\n  fullName: System.Windows.Documents.EditingCommands.MoveToLineEnd\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Represents the MoveToLineEnd command, which requests that the caret move to the end of the current line.\n  remarks: \"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  \\n  \\n This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.  \\n  \\n<a name=\\\"xamlAttributeUsage_MoveToLineEnd\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object property=\\\"MoveToLineEnd\\\"/>  \\n```\"\n  example:\n  - \"The following example demonstrates how to invoke an editing command on an object that supports the command.  \\n  \\n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \\n  \\n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \\n  \\n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \\n  \\n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]\"\n  syntax:\n    content: public static System.Windows.Input.RoutedUICommand MoveToLineEnd { get; }\n    return:\n      type: System.Windows.Input.RoutedUICommand\n      description: The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_End\" name=\"End\" href=\"\"></xref>.\n  overload: System.Windows.Documents.EditingCommands.MoveToLineEnd*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Documents.EditingCommands.MoveToLineStart\n  id: MoveToLineStart\n  parent: System.Windows.Documents.EditingCommands\n  langs:\n  - csharp\n  name: MoveToLineStart\n  nameWithType: EditingCommands.MoveToLineStart\n  fullName: System.Windows.Documents.EditingCommands.MoveToLineStart\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Represents the MoveToLineStart command, which requests that the caret move to the beginning of the current line.\n  remarks: \"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  \\n  \\n This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.  \\n  \\n<a name=\\\"xamlAttributeUsage_MoveToLineStart\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object property=\\\"MoveToLineStart\\\"/>  \\n```\"\n  example:\n  - \"The following example demonstrates how to invoke an editing command on an object that supports the command.  \\n  \\n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \\n  \\n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \\n  \\n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \\n  \\n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]\"\n  syntax:\n    content: public static System.Windows.Input.RoutedUICommand MoveToLineStart { get; }\n    return:\n      type: System.Windows.Input.RoutedUICommand\n      description: The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Home\" name=\"Home\" href=\"\"></xref>.\n  overload: System.Windows.Documents.EditingCommands.MoveToLineStart*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Documents.EditingCommands.MoveUpByLine\n  id: MoveUpByLine\n  parent: System.Windows.Documents.EditingCommands\n  langs:\n  - csharp\n  name: MoveUpByLine\n  nameWithType: EditingCommands.MoveUpByLine\n  fullName: System.Windows.Documents.EditingCommands.MoveUpByLine\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Represents the MoveUpByLine command, which requests that the caret move up by one line.\n  remarks: \"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  \\n  \\n This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>.  \\n  \\n<a name=\\\"xamlAttributeUsage_MoveUpByLine\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object property=\\\"MoveUpByLine\\\"/>  \\n```\"\n  example:\n  - \"The following example demonstrates how to invoke an editing command on an object that supports the command.  \\n  \\n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \\n  \\n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \\n  \\n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \\n  \\n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]\"\n  syntax:\n    content: public static System.Windows.Input.RoutedUICommand MoveUpByLine { get; }\n    return:\n      type: System.Windows.Input.RoutedUICommand\n      description: The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Up\" name=\"Up\" href=\"\"></xref>.\n  overload: System.Windows.Documents.EditingCommands.MoveUpByLine*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Documents.EditingCommands.MoveUpByPage\n  id: MoveUpByPage\n  parent: System.Windows.Documents.EditingCommands\n  langs:\n  - csharp\n  name: MoveUpByPage\n  nameWithType: EditingCommands.MoveUpByPage\n  fullName: System.Windows.Documents.EditingCommands.MoveUpByPage\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Represents the MoveUpByPage command, which requests that the caret move up by one page.\n  remarks: \"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  \\n  \\n This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>.  \\n  \\n<a name=\\\"xamlAttributeUsage_MoveUpByPage\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object property=\\\"MoveUpByPage\\\"/>  \\n```\"\n  example:\n  - \"The following example demonstrates how to invoke an editing command on an object that supports the command.  \\n  \\n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \\n  \\n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \\n  \\n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \\n  \\n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]\"\n  syntax:\n    content: public static System.Windows.Input.RoutedUICommand MoveUpByPage { get; }\n    return:\n      type: System.Windows.Input.RoutedUICommand\n      description: The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_PageUp\" name=\"PageUp\" href=\"\"></xref>.\n  overload: System.Windows.Documents.EditingCommands.MoveUpByPage*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Documents.EditingCommands.MoveUpByParagraph\n  id: MoveUpByParagraph\n  parent: System.Windows.Documents.EditingCommands\n  langs:\n  - csharp\n  name: MoveUpByParagraph\n  nameWithType: EditingCommands.MoveUpByParagraph\n  fullName: System.Windows.Documents.EditingCommands.MoveUpByParagraph\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Represents the MoveUpByParagraph command, which requests that the caret move up by one paragraph.\n  remarks: \"This command positions the caret at the beginning of the next paragraph.  \\n  \\n This command behaves like <xref:System.Windows.Documents.EditingCommands.MoveToDocumentStart%2A> when invoked on a <xref:System.Windows.Controls.TextBox>.  \\n  \\n There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  \\n  \\n This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>.  \\n  \\n<a name=\\\"xamlAttributeUsage_MoveUpByParagraph\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object property=\\\"MoveUpByParagraph\\\"/>  \\n```\"\n  example:\n  - \"The following example demonstrates how to invoke an editing command on an object that supports the command.  \\n  \\n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \\n  \\n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \\n  \\n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \\n  \\n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]\"\n  syntax:\n    content: public static System.Windows.Input.RoutedUICommand MoveUpByParagraph { get; }\n    return:\n      type: System.Windows.Input.RoutedUICommand\n      description: The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_Up\" name=\"Up\" href=\"\"></xref>.\n  overload: System.Windows.Documents.EditingCommands.MoveUpByParagraph*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Documents.EditingCommands.SelectDownByLine\n  id: SelectDownByLine\n  parent: System.Windows.Documents.EditingCommands\n  langs:\n  - csharp\n  name: SelectDownByLine\n  nameWithType: EditingCommands.SelectDownByLine\n  fullName: System.Windows.Documents.EditingCommands.SelectDownByLine\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Represents the SelectDownByLine command, which requests that the current selection be expanded down by one line.\n  remarks: \"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  \\n  \\n This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.  \\n  \\n<a name=\\\"xamlAttributeUsage_SelectDownByLine\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object property=\\\"SelectDownByLine\\\"/>  \\n```\"\n  example:\n  - \"The following example demonstrates how to invoke an editing command on an object that supports the command.  \\n  \\n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \\n  \\n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \\n  \\n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \\n  \\n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]\"\n  syntax:\n    content: public static System.Windows.Input.RoutedUICommand SelectDownByLine { get; }\n    return:\n      type: System.Windows.Input.RoutedUICommand\n      description: The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"></xref>+<xref uid=\"langword_csharp_Down\" name=\"Down\" href=\"\"></xref>.\n  overload: System.Windows.Documents.EditingCommands.SelectDownByLine*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Documents.EditingCommands.SelectDownByPage\n  id: SelectDownByPage\n  parent: System.Windows.Documents.EditingCommands\n  langs:\n  - csharp\n  name: SelectDownByPage\n  nameWithType: EditingCommands.SelectDownByPage\n  fullName: System.Windows.Documents.EditingCommands.SelectDownByPage\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Represents the SelectDownByPage command, which requests that the current selection be expanded down by one page.\n  remarks: \"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  \\n  \\n This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.  \\n  \\n<a name=\\\"xamlAttributeUsage_SelectDownByPage\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object property=\\\"SelectDownByPage\\\"/>  \\n```\"\n  example:\n  - \"The following example demonstrates how to invoke an editing command on an object that supports the command.  \\n  \\n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \\n  \\n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \\n  \\n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \\n  \\n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]\"\n  syntax:\n    content: public static System.Windows.Input.RoutedUICommand SelectDownByPage { get; }\n    return:\n      type: System.Windows.Input.RoutedUICommand\n      description: The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"></xref>+<xref uid=\"langword_csharp_PageDown\" name=\"PageDown\" href=\"\"></xref>.\n  overload: System.Windows.Documents.EditingCommands.SelectDownByPage*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Documents.EditingCommands.SelectDownByParagraph\n  id: SelectDownByParagraph\n  parent: System.Windows.Documents.EditingCommands\n  langs:\n  - csharp\n  name: SelectDownByParagraph\n  nameWithType: EditingCommands.SelectDownByParagraph\n  fullName: System.Windows.Documents.EditingCommands.SelectDownByParagraph\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Represents the SelectDownByParagraph command, which requests that the current selection be expanded down by one paragraph.\n  remarks: \"This command expands the selection to the beginning of the next paragraph.  Otherwise, this command expands the selection to the end of the current paragraph.  The expanded selection includes the paragraph break that marks the end of the paragraph.  \\n  \\n There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  \\n  \\n This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.  \\n  \\n<a name=\\\"xamlAttributeUsage_SelectDownByParagraph\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object property=\\\"SelectDownByParagraph\\\"/>  \\n```\"\n  example:\n  - \"The following example demonstrates how to invoke an editing command on an object that supports the command.  \\n  \\n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \\n  \\n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \\n  \\n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \\n  \\n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]\"\n  syntax:\n    content: public static System.Windows.Input.RoutedUICommand SelectDownByParagraph { get; }\n    return:\n      type: System.Windows.Input.RoutedUICommand\n      description: The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"></xref>+<xref uid=\"langword_csharp_Down\" name=\"Down\" href=\"\"></xref>.\n  overload: System.Windows.Documents.EditingCommands.SelectDownByParagraph*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Documents.EditingCommands.SelectLeftByCharacter\n  id: SelectLeftByCharacter\n  parent: System.Windows.Documents.EditingCommands\n  langs:\n  - csharp\n  name: SelectLeftByCharacter\n  nameWithType: EditingCommands.SelectLeftByCharacter\n  fullName: System.Windows.Documents.EditingCommands.SelectLeftByCharacter\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Represents the SelectLeftByCharacter command, which requests that the current selection be expanded left by one character.\n  remarks: \"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  \\n  \\n This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.  \\n  \\n<a name=\\\"xamlAttributeUsage_SelectLeftByCharacter\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object property=\\\"SelectLeftByCharacter\\\"/>  \\n```\"\n  example:\n  - \"The following example demonstrates how to invoke an editing command on an object that supports the command.  \\n  \\n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \\n  \\n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \\n  \\n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \\n  \\n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]\"\n  syntax:\n    content: public static System.Windows.Input.RoutedUICommand SelectLeftByCharacter { get; }\n    return:\n      type: System.Windows.Input.RoutedUICommand\n      description: The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"></xref>+<xref uid=\"langword_csharp_Left\" name=\"Left\" href=\"\"></xref>.\n  overload: System.Windows.Documents.EditingCommands.SelectLeftByCharacter*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Documents.EditingCommands.SelectLeftByWord\n  id: SelectLeftByWord\n  parent: System.Windows.Documents.EditingCommands\n  langs:\n  - csharp\n  name: SelectLeftByWord\n  nameWithType: EditingCommands.SelectLeftByWord\n  fullName: System.Windows.Documents.EditingCommands.SelectLeftByWord\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Represents the SelectLeftByWord command, which requests that the current selection be expanded left by one word.\n  remarks: \"If the caret is within a word, this command expands the selection to the beginning of that word.  Otherwise, this command expands the selection to the beginning of the previous word.  \\n  \\n The expanded selection does not include the word delimiter.  Contrast with <xref:System.Windows.Documents.EditingCommands.SelectRightByWord%2A>, which does include the word delimiter in the expanded selection.  \\n  \\n There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  \\n  \\n This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.  \\n  \\n<a name=\\\"xamlAttributeUsage_SelectLeftByWord\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object property=\\\"SelectLeftByWord\\\"/>  \\n```\"\n  example:\n  - \"The following example demonstrates how to invoke an editing command on an object that supports the command.  \\n  \\n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \\n  \\n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \\n  \\n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \\n  \\n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]\"\n  syntax:\n    content: public static System.Windows.Input.RoutedUICommand SelectLeftByWord { get; }\n    return:\n      type: System.Windows.Input.RoutedUICommand\n      description: The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"></xref>+<xref uid=\"langword_csharp_Left\" name=\"Left\" href=\"\"></xref>.\n  overload: System.Windows.Documents.EditingCommands.SelectLeftByWord*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Documents.EditingCommands.SelectRightByCharacter\n  id: SelectRightByCharacter\n  parent: System.Windows.Documents.EditingCommands\n  langs:\n  - csharp\n  name: SelectRightByCharacter\n  nameWithType: EditingCommands.SelectRightByCharacter\n  fullName: System.Windows.Documents.EditingCommands.SelectRightByCharacter\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Represents the SelectRightByCharacter command, which requests that the current selection be expanded right by one character.\n  remarks: \"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  \\n  \\n This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.  \\n  \\n<a name=\\\"xamlAttributeUsage_SelectRightByCharacter\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object property=\\\"SelectRightByCharacter\\\"/>  \\n```\"\n  example:\n  - \"The following example demonstrates how to invoke an editing command on an object that supports the command.  \\n  \\n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \\n  \\n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \\n  \\n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \\n  \\n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]\"\n  syntax:\n    content: public static System.Windows.Input.RoutedUICommand SelectRightByCharacter { get; }\n    return:\n      type: System.Windows.Input.RoutedUICommand\n      description: The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"></xref>+<xref uid=\"langword_csharp_Right\" name=\"Right\" href=\"\"></xref>.\n  overload: System.Windows.Documents.EditingCommands.SelectRightByCharacter*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Documents.EditingCommands.SelectRightByWord\n  id: SelectRightByWord\n  parent: System.Windows.Documents.EditingCommands\n  langs:\n  - csharp\n  name: SelectRightByWord\n  nameWithType: EditingCommands.SelectRightByWord\n  fullName: System.Windows.Documents.EditingCommands.SelectRightByWord\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Represents the SelectRightByWord command, which requests that the current selection be expanded right by one word.\n  remarks: \"If the caret is within a word, this command expands the selection to the end of that word.  Otherwise, this command expands the selection to the end of the next word.  \\n  \\n The expanded selection includes the word delimiter.  Contrast with <xref:System.Windows.Documents.EditingCommands.SelectLeftByWord%2A> which does not include the word delimiter in the expanded selection.  \\n  \\n There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  \\n  \\n This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.  \\n  \\n<a name=\\\"xamlAttributeUsage_SelectRightByWord\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object property=\\\"SelectRightByWord\\\"/>  \\n```\"\n  example:\n  - \"The following example demonstrates how to invoke an editing command on an object that supports the command.  \\n  \\n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \\n  \\n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \\n  \\n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \\n  \\n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]\"\n  syntax:\n    content: public static System.Windows.Input.RoutedUICommand SelectRightByWord { get; }\n    return:\n      type: System.Windows.Input.RoutedUICommand\n      description: The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"></xref>+<xref uid=\"langword_csharp_Right\" name=\"Right\" href=\"\"></xref>.\n  overload: System.Windows.Documents.EditingCommands.SelectRightByWord*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Documents.EditingCommands.SelectToDocumentEnd\n  id: SelectToDocumentEnd\n  parent: System.Windows.Documents.EditingCommands\n  langs:\n  - csharp\n  name: SelectToDocumentEnd\n  nameWithType: EditingCommands.SelectToDocumentEnd\n  fullName: System.Windows.Documents.EditingCommands.SelectToDocumentEnd\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Represents the SelectToDocumentEnd command, which requests that the current selection be expanded to the very end of content.\n  remarks: \"A *text container* is the element that forms the ultimate border for the content at hand.  <xref:System.Windows.Controls.TextBlock> and <xref:System.Windows.Documents.FlowDocument> are examples of text containers.  The content collectively contained within a text container is referred to as a *document*.  \\n  \\n There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  \\n  \\n This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.  \\n  \\n<a name=\\\"xamlAttributeUsage_SelectToDocumentEnd\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object property=\\\"SelectToDocumentEnd\\\"/>  \\n```\"\n  example:\n  - \"The following example demonstrates how to invoke an editing command on an object that supports the command.  \\n  \\n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \\n  \\n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \\n  \\n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \\n  \\n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]\"\n  syntax:\n    content: public static System.Windows.Input.RoutedUICommand SelectToDocumentEnd { get; }\n    return:\n      type: System.Windows.Input.RoutedUICommand\n      description: The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"></xref>+<xref uid=\"langword_csharp_End\" name=\"End\" href=\"\"></xref>.\n  overload: System.Windows.Documents.EditingCommands.SelectToDocumentEnd*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Documents.EditingCommands.SelectToDocumentStart\n  id: SelectToDocumentStart\n  parent: System.Windows.Documents.EditingCommands\n  langs:\n  - csharp\n  name: SelectToDocumentStart\n  nameWithType: EditingCommands.SelectToDocumentStart\n  fullName: System.Windows.Documents.EditingCommands.SelectToDocumentStart\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Represents the SelectToDocumentStart command, which requests that the current selection be expanded to the very beginning of content.\n  remarks: \"A *text container* is the element that forms the ultimate border for the content at hand.  <xref:System.Windows.Controls.TextBlock> and <xref:System.Windows.Documents.FlowDocument> are examples of text containers.  The content collectively contained within a text container is referred to as a *document*.  \\n  \\n There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  \\n  \\n This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.  \\n  \\n<a name=\\\"xamlAttributeUsage_SelectToDocumentStart\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object property=\\\"SelectToDocumentStart\\\"/>  \\n```\"\n  example:\n  - \"The following example demonstrates how to invoke an editing command on an object that supports the command.  \\n  \\n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \\n  \\n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \\n  \\n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \\n  \\n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]\"\n  syntax:\n    content: public static System.Windows.Input.RoutedUICommand SelectToDocumentStart { get; }\n    return:\n      type: System.Windows.Input.RoutedUICommand\n      description: The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"></xref>+<xref uid=\"langword_csharp_Home\" name=\"Home\" href=\"\"></xref>.\n  overload: System.Windows.Documents.EditingCommands.SelectToDocumentStart*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Documents.EditingCommands.SelectToLineEnd\n  id: SelectToLineEnd\n  parent: System.Windows.Documents.EditingCommands\n  langs:\n  - csharp\n  name: SelectToLineEnd\n  nameWithType: EditingCommands.SelectToLineEnd\n  fullName: System.Windows.Documents.EditingCommands.SelectToLineEnd\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Represents the SelectToLineEnd command, which requests that the current selection be expanded to the end of the current line.\n  remarks: \"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  \\n  \\n This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.  \\n  \\n<a name=\\\"xamlAttributeUsage_SelectToLineEnd\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object property=\\\"SelectToLineEnd\\\"/>  \\n```\"\n  example:\n  - \"The following example demonstrates how to invoke an editing command on an object that supports the command.  \\n  \\n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \\n  \\n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \\n  \\n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \\n  \\n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]\"\n  syntax:\n    content: public static System.Windows.Input.RoutedUICommand SelectToLineEnd { get; }\n    return:\n      type: System.Windows.Input.RoutedUICommand\n      description: The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"></xref>+<xref uid=\"langword_csharp_End\" name=\"End\" href=\"\"></xref>.\n  overload: System.Windows.Documents.EditingCommands.SelectToLineEnd*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Documents.EditingCommands.SelectToLineStart\n  id: SelectToLineStart\n  parent: System.Windows.Documents.EditingCommands\n  langs:\n  - csharp\n  name: SelectToLineStart\n  nameWithType: EditingCommands.SelectToLineStart\n  fullName: System.Windows.Documents.EditingCommands.SelectToLineStart\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Represents the SelectToLineStart command, which requests that the current selection be expanded to the beginning of the current line.\n  remarks: \"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  \\n  \\n This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.  \\n  \\n<a name=\\\"xamlAttributeUsage_SelectToLineStart\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object property=\\\"SelectToLineStart\\\"/>  \\n```\"\n  example:\n  - \"The following example demonstrates how to invoke an editing command on an object that supports the command.  \\n  \\n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \\n  \\n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \\n  \\n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \\n  \\n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]\"\n  syntax:\n    content: public static System.Windows.Input.RoutedUICommand SelectToLineStart { get; }\n    return:\n      type: System.Windows.Input.RoutedUICommand\n      description: The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"></xref>+<xref uid=\"langword_csharp_Home\" name=\"Home\" href=\"\"></xref>.\n  overload: System.Windows.Documents.EditingCommands.SelectToLineStart*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Documents.EditingCommands.SelectUpByLine\n  id: SelectUpByLine\n  parent: System.Windows.Documents.EditingCommands\n  langs:\n  - csharp\n  name: SelectUpByLine\n  nameWithType: EditingCommands.SelectUpByLine\n  fullName: System.Windows.Documents.EditingCommands.SelectUpByLine\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Represents the SelectUpByLine command, which requests that the current selection be expanded up by one line.\n  remarks: \"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  \\n  \\n This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.  \\n  \\n<a name=\\\"xamlAttributeUsage_SelectUpByLine\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object property=\\\"SelectUpByLine\\\"/>  \\n```\"\n  example:\n  - \"The following example demonstrates how to invoke an editing command on an object that supports the command.  \\n  \\n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \\n  \\n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \\n  \\n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \\n  \\n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]\"\n  syntax:\n    content: public static System.Windows.Input.RoutedUICommand SelectUpByLine { get; }\n    return:\n      type: System.Windows.Input.RoutedUICommand\n      description: The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"></xref>+<xref uid=\"langword_csharp_Up\" name=\"Up\" href=\"\"></xref>.\n  overload: System.Windows.Documents.EditingCommands.SelectUpByLine*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Documents.EditingCommands.SelectUpByPage\n  id: SelectUpByPage\n  parent: System.Windows.Documents.EditingCommands\n  langs:\n  - csharp\n  name: SelectUpByPage\n  nameWithType: EditingCommands.SelectUpByPage\n  fullName: System.Windows.Documents.EditingCommands.SelectUpByPage\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Represents the SelectUpByPage command, which requests that the current selection be expanded  up by one page.\n  remarks: \"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  \\n  \\n This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.  \\n  \\n<a name=\\\"xamlAttributeUsage_SelectUpByPage\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object property=\\\"SelectUpByPage\\\"/>  \\n```\"\n  example:\n  - \"The following example demonstrates how to invoke an editing command on an object that supports the command.  \\n  \\n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \\n  \\n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \\n  \\n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \\n  \\n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]\"\n  syntax:\n    content: public static System.Windows.Input.RoutedUICommand SelectUpByPage { get; }\n    return:\n      type: System.Windows.Input.RoutedUICommand\n      description: The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"></xref>+<xref uid=\"langword_csharp_PageUp\" name=\"PageUp\" href=\"\"></xref>.\n  overload: System.Windows.Documents.EditingCommands.SelectUpByPage*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Documents.EditingCommands.SelectUpByParagraph\n  id: SelectUpByParagraph\n  parent: System.Windows.Documents.EditingCommands\n  langs:\n  - csharp\n  name: SelectUpByParagraph\n  nameWithType: EditingCommands.SelectUpByParagraph\n  fullName: System.Windows.Documents.EditingCommands.SelectUpByParagraph\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Represents the SelectUpByParagraph command, which requests that the current selection be expanded up by one paragraph.\n  remarks: \"If the caret is at the beginning of a paragraph, this command expands the selection to the beginning of the previous paragraph.  Otherwise, this command expands the selection to the beginning of the current paragraph.  \\n  \\n There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  \\n  \\n This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.  \\n  \\n<a name=\\\"xamlAttributeUsage_SelectUpByParagraph\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object property=\\\"SelectUpByParagraph\\\"/>  \\n```\"\n  example:\n  - \"The following example demonstrates how to invoke an editing command on an object that supports the command.  \\n  \\n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \\n  \\n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \\n  \\n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \\n  \\n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]\"\n  syntax:\n    content: public static System.Windows.Input.RoutedUICommand SelectUpByParagraph { get; }\n    return:\n      type: System.Windows.Input.RoutedUICommand\n      description: The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"></xref>+<xref uid=\"langword_csharp_Up\" name=\"Up\" href=\"\"></xref>.\n  overload: System.Windows.Documents.EditingCommands.SelectUpByParagraph*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Documents.EditingCommands.TabBackward\n  id: TabBackward\n  parent: System.Windows.Documents.EditingCommands\n  langs:\n  - csharp\n  name: TabBackward\n  nameWithType: EditingCommands.TabBackward\n  fullName: System.Windows.Documents.EditingCommands.TabBackward\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Represents the TabBackward command.\n  remarks: \"The behavior for this command depends on the current selection. If the selection is non-empty, this command is equivalent to <xref:System.Windows.Documents.EditingCommands.DecreaseIndentation%2A>. If the caret is in a table cell (represented by the <xref:System.Windows.Documents.TableCell> element), this command moves the caret to the previous cell. Otherwise, a tab character is inserted in current position.  \\n  \\n There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  \\n  \\n This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox> (when the <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A> property is `true`).  \\n  \\n<a name=\\\"xamlAttributeUsage_TabBackward\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object property=\\\"TabBackward\\\"/>  \\n```\"\n  example:\n  - \"The following example demonstrates how to invoke an editing command on an object that supports the command.  \\n  \\n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \\n  \\n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \\n  \\n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \\n  \\n```c#  \\nRichTextBox rTB = new RichTextBox();  \\n  \\nEditingCommands.ToggleInsert.Execute(null, rTB);  \\n  \\n```  \\n  \\n```vb  \\n\t\t\tDim rTB As New RichTextBox()  \\n  \\n\t\t\tEditingCommands.ToggleInsert.Execute(Nothing, rTB)  \\n```\"\n  syntax:\n    content: public static System.Windows.Input.RoutedUICommand TabBackward { get; }\n    return:\n      type: System.Windows.Input.RoutedUICommand\n      description: The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"></xref>+<xref uid=\"langword_csharp_Tab\" name=\"Tab\" href=\"\"></xref>.\n  overload: System.Windows.Documents.EditingCommands.TabBackward*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Documents.EditingCommands.TabForward\n  id: TabForward\n  parent: System.Windows.Documents.EditingCommands\n  langs:\n  - csharp\n  name: TabForward\n  nameWithType: EditingCommands.TabForward\n  fullName: System.Windows.Documents.EditingCommands.TabForward\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Represents the TabForward command.\n  remarks: \"The behavior for this command depends on the current selection. If the selection is non-empty, or if the selection is empty and the current caret position is at the beginning of a  paragraph, this command is equivalent to <xref:System.Windows.Documents.EditingCommands.IncreaseIndentation%2A>. If the caret is in a table cell (represented by the <xref:System.Windows.Documents.TableCell> element), this command moves the caret to the next cell. If the caret is in the last cell of a table, this command causes a new row to be appended to the table, with the caret positioned in the first cell of the new row.  Otherwise, a tab character is inserted in current position.  \\n  \\n There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  \\n  \\n This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox> (when the <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A> property is `true`).  \\n  \\n<a name=\\\"xamlAttributeUsage_TabForward\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object property=\\\"TabForward\\\"/>  \\n```\"\n  example:\n  - \"The following example demonstrates how to invoke an editing command on an object that supports the command.  \\n  \\n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \\n  \\n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \\n  \\n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \\n  \\n```c#  \\nRichTextBox rTB = new RichTextBox();  \\n  \\nEditingCommands.ToggleInsert.Execute(null, rTB);  \\n  \\n```  \\n  \\n```vb  \\n\t\t\tDim rTB As New RichTextBox()  \\n  \\n\t\t\tEditingCommands.ToggleInsert.Execute(Nothing, rTB)  \\n```\"\n  syntax:\n    content: public static System.Windows.Input.RoutedUICommand TabForward { get; }\n    return:\n      type: System.Windows.Input.RoutedUICommand\n      description: The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Tab\" name=\"Tab\" href=\"\"></xref>.\n  overload: System.Windows.Documents.EditingCommands.TabForward*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Documents.EditingCommands.ToggleBold\n  id: ToggleBold\n  parent: System.Windows.Documents.EditingCommands\n  langs:\n  - csharp\n  name: ToggleBold\n  nameWithType: EditingCommands.ToggleBold\n  fullName: System.Windows.Documents.EditingCommands.ToggleBold\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Represents the ToggleBold command, which requests that <xref href=\"System.Windows.Documents.Bold\"></xref> formatting be toggled on the current selection.\n  remarks: \"If the <xref:System.Windows.FontWeight> for the current selection is in the range from <xref:System.Windows.FontWeights.Thin%2A> to <xref:System.Windows.FontWeights.SemiBold%2A>, <xref:System.Windows.FontWeights.Bold%2A> is applied to the current selection.  Otherwise, <xref:System.Windows.FontWeights.Normal%2A> is applied.  For a comparative list of <xref:System.Windows.FontWeight> values, see <xref:System.Windows.FontWeights>.  \\n  \\n When the selection is empty and the caret is within a word, the selection is expanded to include the entire word.  \\n  \\n There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  \\n  \\n This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.  \\n  \\n<a name=\\\"xamlAttributeUsage_ToggleBold\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object property=\\\"ToggleBold\\\"/>  \\n```\"\n  example:\n  - \"The following example demonstrates how to invoke an editing command on an object that supports the command.  \\n  \\n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \\n  \\n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \\n  \\n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \\n  \\n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]\"\n  syntax:\n    content: public static System.Windows.Input.RoutedUICommand ToggleBold { get; }\n    return:\n      type: System.Windows.Input.RoutedUICommand\n      description: The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_B\" name=\"B\" href=\"\"></xref>.\n  overload: System.Windows.Documents.EditingCommands.ToggleBold*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Documents.EditingCommands.ToggleBullets\n  id: ToggleBullets\n  parent: System.Windows.Documents.EditingCommands\n  langs:\n  - csharp\n  name: ToggleBullets\n  nameWithType: EditingCommands.ToggleBullets\n  fullName: System.Windows.Documents.EditingCommands.ToggleBullets\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Represents the ToggleBullets command, which requests that unordered list (also referred to as bulleted list) formatting be toggled on the current selection.\n  remarks: \"This command operates at the <xref:System.Windows.Documents.Paragraph> level.  If this command is invoked on a partial selection of content within a paragraph (including an empty selection where the caret is within a paragraph), the requested effect is applied to the entire paragraph.  If this command is invoked on a selection that spans multiple paragraphs, the effect is applied to the entire contents of each paragraph that participates in the selection.  \\n  \\n There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  \\n  \\n This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.  \\n  \\n<a name=\\\"xamlAttributeUsage_ToggleBullets\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object property=\\\"ToggleBullets\\\"/>  \\n```\"\n  example:\n  - \"The following example demonstrates how to invoke an editing command on an object that supports the command.  \\n  \\n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \\n  \\n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \\n  \\n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \\n  \\n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]\"\n  syntax:\n    content: public static System.Windows.Input.RoutedUICommand ToggleBullets { get; }\n    return:\n      type: System.Windows.Input.RoutedUICommand\n      description: The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"></xref>+<xref uid=\"langword_csharp_L\" name=\"L\" href=\"\"></xref>.\n  overload: System.Windows.Documents.EditingCommands.ToggleBullets*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Documents.EditingCommands.ToggleInsert\n  id: ToggleInsert\n  parent: System.Windows.Documents.EditingCommands\n  langs:\n  - csharp\n  name: ToggleInsert\n  nameWithType: EditingCommands.ToggleInsert\n  fullName: System.Windows.Documents.EditingCommands.ToggleInsert\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Represents the ToggleInsert command, which toggles the typing mode between Insert and Overtype.\n  remarks: \"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  \\n  \\n This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.  \\n  \\n<a name=\\\"xamlAttributeUsage_ToggleInsert\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object property=\\\"ToggleInsert\\\"/>  \\n```\"\n  example:\n  - \"The following example demonstrates how to invoke an editing command on an object that supports the command.  \\n  \\n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \\n  \\n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \\n  \\n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \\n  \\n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]\"\n  syntax:\n    content: public static System.Windows.Input.RoutedUICommand ToggleInsert { get; }\n    return:\n      type: System.Windows.Input.RoutedUICommand\n      description: The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Insert\" name=\"Insert\" href=\"\"></xref>.\n  overload: System.Windows.Documents.EditingCommands.ToggleInsert*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Documents.EditingCommands.ToggleItalic\n  id: ToggleItalic\n  parent: System.Windows.Documents.EditingCommands\n  langs:\n  - csharp\n  name: ToggleItalic\n  nameWithType: EditingCommands.ToggleItalic\n  fullName: System.Windows.Documents.EditingCommands.ToggleItalic\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Represents the ToggleItalic command, which requests that <xref href=\"System.Windows.Documents.Italic\"></xref> formatting be toggled on the current selection.\n  remarks: \"If the <xref:System.Windows.FontStyle> for the current selection is <xref:System.Windows.FontStyles.Normal%2A>, <xref:System.Windows.FontStyles.Italic%2A> is applied to the current selection.  Otherwise, <xref:System.Windows.FontStyles.Normal%2A> is applied.  \\n  \\n When the selection is empty and the caret is within a word, the selection is expanded to include the entire word.  \\n  \\n There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  \\n  \\n This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.  \\n  \\n<a name=\\\"xamlAttributeUsage_ToggleItalic\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object property=\\\"ToggleItalic\\\"/>  \\n```\"\n  example:\n  - \"The following example demonstrates how to invoke an editing command on an object that supports the command.  \\n  \\n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \\n  \\n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \\n  \\n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \\n  \\n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]\"\n  syntax:\n    content: public static System.Windows.Input.RoutedUICommand ToggleItalic { get; }\n    return:\n      type: System.Windows.Input.RoutedUICommand\n      description: The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_I\" name=\"I\" href=\"\"></xref>.\n  overload: System.Windows.Documents.EditingCommands.ToggleItalic*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Documents.EditingCommands.ToggleNumbering\n  id: ToggleNumbering\n  parent: System.Windows.Documents.EditingCommands\n  langs:\n  - csharp\n  name: ToggleNumbering\n  nameWithType: EditingCommands.ToggleNumbering\n  fullName: System.Windows.Documents.EditingCommands.ToggleNumbering\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Represents the ToggleNumbering command, which requests that ordered list (also referred to as numbered list) formatting be toggled on the current selection.\n  remarks: \"This command operates at the <xref:System.Windows.Documents.Paragraph> level.  If this command is invoked on a partial selection of content within a paragraph (including an empty selection where the caret is within a paragraph), the requested effect is applied to the entire paragraph.  If this command is invoked on a selection that spans multiple paragraphs, the effect is applied to the entire contents of each paragraph that participates in the selection.  \\n  \\n There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  \\n  \\n This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.  \\n  \\n<a name=\\\"xamlAttributeUsage_ToggleNumbering\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object property=\\\"ToggleNumbering\\\"/>  \\n```\"\n  example:\n  - \"The following example demonstrates how to invoke an editing command on an object that supports the command.  \\n  \\n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \\n  \\n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \\n  \\n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \\n  \\n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]\"\n  syntax:\n    content: public static System.Windows.Input.RoutedUICommand ToggleNumbering { get; }\n    return:\n      type: System.Windows.Input.RoutedUICommand\n      description: The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"></xref>+<xref uid=\"langword_csharp_N\" name=\"N\" href=\"\"></xref>.\n  overload: System.Windows.Documents.EditingCommands.ToggleNumbering*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Documents.EditingCommands.ToggleSubscript\n  id: ToggleSubscript\n  parent: System.Windows.Documents.EditingCommands\n  langs:\n  - csharp\n  name: ToggleSubscript\n  nameWithType: EditingCommands.ToggleSubscript\n  fullName: System.Windows.Documents.EditingCommands.ToggleSubscript\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Represents the ToggleSubscript command, which requests that subscript formatting be toggled on the current selection.\n  remarks: \"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  \\n  \\n<a name=\\\"xamlAttributeUsage_ToggleSubscript\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object property=\\\"ToggleSubscript\\\"/>  \\n```\"\n  example:\n  - \"The following example demonstrates how to invoke an editing command on an object that supports the command.  \\n  \\n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \\n  \\n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \\n  \\n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \\n  \\n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]\"\n  syntax:\n    content: public static System.Windows.Input.RoutedUICommand ToggleSubscript { get; }\n    return:\n      type: System.Windows.Input.RoutedUICommand\n      description: The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_OemPlus\" name=\"OemPlus\" href=\"\"></xref>.\n  overload: System.Windows.Documents.EditingCommands.ToggleSubscript*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Documents.EditingCommands.ToggleSuperscript\n  id: ToggleSuperscript\n  parent: System.Windows.Documents.EditingCommands\n  langs:\n  - csharp\n  name: ToggleSuperscript\n  nameWithType: EditingCommands.ToggleSuperscript\n  fullName: System.Windows.Documents.EditingCommands.ToggleSuperscript\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Represents the ToggleSuperscript command, which requests that superscript formatting be toggled on the current selection.\n  remarks: \"There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  \\n  \\n<a name=\\\"xamlAttributeUsage_ToggleSuperscript\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object property=\\\"ToggleSuperscript\\\"/>  \\n```\"\n  example:\n  - \"The following example demonstrates how to invoke an editing command on an object that supports the command.  \\n  \\n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \\n  \\n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \\n  \\n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \\n  \\n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]\"\n  syntax:\n    content: public static System.Windows.Input.RoutedUICommand ToggleSuperscript { get; }\n    return:\n      type: System.Windows.Input.RoutedUICommand\n      description: The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_Shift\" name=\"Shift\" href=\"\"></xref>+<xref uid=\"langword_csharp_OemPlus\" name=\"OemPlus\" href=\"\"></xref>.\n  overload: System.Windows.Documents.EditingCommands.ToggleSuperscript*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Documents.EditingCommands.ToggleUnderline\n  id: ToggleUnderline\n  parent: System.Windows.Documents.EditingCommands\n  langs:\n  - csharp\n  name: ToggleUnderline\n  nameWithType: EditingCommands.ToggleUnderline\n  fullName: System.Windows.Documents.EditingCommands.ToggleUnderline\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Represents the ToggleUnderline command, which requests that <xref href=\"System.Windows.Documents.Underline\"></xref> formatting be toggled on the current selection.\n  remarks: \"When the selection is empty and the caret is within a word, the selection is expanded to include the entire word.  \\n  \\n There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  \\n  \\n This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.  \\n  \\n<a name=\\\"xamlAttributeUsage_ToggleUnderline\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object property=\\\"ToggleUnderline\\\"/>  \\n```\"\n  example:\n  - \"The following example demonstrates how to invoke an editing command on an object that supports the command.  \\n  \\n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \\n  \\n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \\n  \\n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \\n  \\n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]\"\n  syntax:\n    content: public static System.Windows.Input.RoutedUICommand ToggleUnderline { get; }\n    return:\n      type: System.Windows.Input.RoutedUICommand\n      description: The requested command.  The default key gesture for this command is <xref uid=\"langword_csharp_Ctrl\" name=\"Ctrl\" href=\"\"></xref>+<xref uid=\"langword_csharp_U\" name=\"U\" href=\"\"></xref>.\n  overload: System.Windows.Documents.EditingCommands.ToggleUnderline*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Windows.Documents.EditingCommands.AlignCenter\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: AlignCenter\n  nameWithType: EditingCommands.AlignCenter\n  fullName: System.Windows.Documents.EditingCommands.AlignCenter\n- uid: System.Windows.Input.RoutedUICommand\n  parent: System.Windows.Input\n  isExternal: false\n  name: RoutedUICommand\n  nameWithType: RoutedUICommand\n  fullName: System.Windows.Input.RoutedUICommand\n- uid: System.Windows.Documents.EditingCommands.AlignJustify\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: AlignJustify\n  nameWithType: EditingCommands.AlignJustify\n  fullName: System.Windows.Documents.EditingCommands.AlignJustify\n- uid: System.Windows.Documents.EditingCommands.AlignLeft\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: AlignLeft\n  nameWithType: EditingCommands.AlignLeft\n  fullName: System.Windows.Documents.EditingCommands.AlignLeft\n- uid: System.Windows.Documents.EditingCommands.AlignRight\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: AlignRight\n  nameWithType: EditingCommands.AlignRight\n  fullName: System.Windows.Documents.EditingCommands.AlignRight\n- uid: System.Windows.Documents.EditingCommands.Backspace\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: Backspace\n  nameWithType: EditingCommands.Backspace\n  fullName: System.Windows.Documents.EditingCommands.Backspace\n- uid: System.Windows.Documents.EditingCommands.CorrectSpellingError\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: CorrectSpellingError\n  nameWithType: EditingCommands.CorrectSpellingError\n  fullName: System.Windows.Documents.EditingCommands.CorrectSpellingError\n- uid: System.Windows.Documents.EditingCommands.DecreaseFontSize\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: DecreaseFontSize\n  nameWithType: EditingCommands.DecreaseFontSize\n  fullName: System.Windows.Documents.EditingCommands.DecreaseFontSize\n- uid: System.Windows.Documents.EditingCommands.DecreaseIndentation\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: DecreaseIndentation\n  nameWithType: EditingCommands.DecreaseIndentation\n  fullName: System.Windows.Documents.EditingCommands.DecreaseIndentation\n- uid: System.Windows.Documents.EditingCommands.Delete\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: Delete\n  nameWithType: EditingCommands.Delete\n  fullName: System.Windows.Documents.EditingCommands.Delete\n- uid: System.Windows.Documents.EditingCommands.DeleteNextWord\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: DeleteNextWord\n  nameWithType: EditingCommands.DeleteNextWord\n  fullName: System.Windows.Documents.EditingCommands.DeleteNextWord\n- uid: System.Windows.Documents.EditingCommands.DeletePreviousWord\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: DeletePreviousWord\n  nameWithType: EditingCommands.DeletePreviousWord\n  fullName: System.Windows.Documents.EditingCommands.DeletePreviousWord\n- uid: System.Windows.Documents.EditingCommands.EnterLineBreak\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: EnterLineBreak\n  nameWithType: EditingCommands.EnterLineBreak\n  fullName: System.Windows.Documents.EditingCommands.EnterLineBreak\n- uid: System.Windows.Documents.EditingCommands.EnterParagraphBreak\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: EnterParagraphBreak\n  nameWithType: EditingCommands.EnterParagraphBreak\n  fullName: System.Windows.Documents.EditingCommands.EnterParagraphBreak\n- uid: System.Windows.Documents.EditingCommands.IgnoreSpellingError\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: IgnoreSpellingError\n  nameWithType: EditingCommands.IgnoreSpellingError\n  fullName: System.Windows.Documents.EditingCommands.IgnoreSpellingError\n- uid: System.Windows.Documents.EditingCommands.IncreaseFontSize\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: IncreaseFontSize\n  nameWithType: EditingCommands.IncreaseFontSize\n  fullName: System.Windows.Documents.EditingCommands.IncreaseFontSize\n- uid: System.Windows.Documents.EditingCommands.IncreaseIndentation\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: IncreaseIndentation\n  nameWithType: EditingCommands.IncreaseIndentation\n  fullName: System.Windows.Documents.EditingCommands.IncreaseIndentation\n- uid: System.Windows.Documents.EditingCommands.MoveDownByLine\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: MoveDownByLine\n  nameWithType: EditingCommands.MoveDownByLine\n  fullName: System.Windows.Documents.EditingCommands.MoveDownByLine\n- uid: System.Windows.Documents.EditingCommands.MoveDownByPage\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: MoveDownByPage\n  nameWithType: EditingCommands.MoveDownByPage\n  fullName: System.Windows.Documents.EditingCommands.MoveDownByPage\n- uid: System.Windows.Documents.EditingCommands.MoveDownByParagraph\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: MoveDownByParagraph\n  nameWithType: EditingCommands.MoveDownByParagraph\n  fullName: System.Windows.Documents.EditingCommands.MoveDownByParagraph\n- uid: System.Windows.Documents.EditingCommands.MoveLeftByCharacter\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: MoveLeftByCharacter\n  nameWithType: EditingCommands.MoveLeftByCharacter\n  fullName: System.Windows.Documents.EditingCommands.MoveLeftByCharacter\n- uid: System.Windows.Documents.EditingCommands.MoveLeftByWord\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: MoveLeftByWord\n  nameWithType: EditingCommands.MoveLeftByWord\n  fullName: System.Windows.Documents.EditingCommands.MoveLeftByWord\n- uid: System.Windows.Documents.EditingCommands.MoveRightByCharacter\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: MoveRightByCharacter\n  nameWithType: EditingCommands.MoveRightByCharacter\n  fullName: System.Windows.Documents.EditingCommands.MoveRightByCharacter\n- uid: System.Windows.Documents.EditingCommands.MoveRightByWord\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: MoveRightByWord\n  nameWithType: EditingCommands.MoveRightByWord\n  fullName: System.Windows.Documents.EditingCommands.MoveRightByWord\n- uid: System.Windows.Documents.EditingCommands.MoveToDocumentEnd\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: MoveToDocumentEnd\n  nameWithType: EditingCommands.MoveToDocumentEnd\n  fullName: System.Windows.Documents.EditingCommands.MoveToDocumentEnd\n- uid: System.Windows.Documents.EditingCommands.MoveToDocumentStart\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: MoveToDocumentStart\n  nameWithType: EditingCommands.MoveToDocumentStart\n  fullName: System.Windows.Documents.EditingCommands.MoveToDocumentStart\n- uid: System.Windows.Documents.EditingCommands.MoveToLineEnd\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: MoveToLineEnd\n  nameWithType: EditingCommands.MoveToLineEnd\n  fullName: System.Windows.Documents.EditingCommands.MoveToLineEnd\n- uid: System.Windows.Documents.EditingCommands.MoveToLineStart\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: MoveToLineStart\n  nameWithType: EditingCommands.MoveToLineStart\n  fullName: System.Windows.Documents.EditingCommands.MoveToLineStart\n- uid: System.Windows.Documents.EditingCommands.MoveUpByLine\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: MoveUpByLine\n  nameWithType: EditingCommands.MoveUpByLine\n  fullName: System.Windows.Documents.EditingCommands.MoveUpByLine\n- uid: System.Windows.Documents.EditingCommands.MoveUpByPage\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: MoveUpByPage\n  nameWithType: EditingCommands.MoveUpByPage\n  fullName: System.Windows.Documents.EditingCommands.MoveUpByPage\n- uid: System.Windows.Documents.EditingCommands.MoveUpByParagraph\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: MoveUpByParagraph\n  nameWithType: EditingCommands.MoveUpByParagraph\n  fullName: System.Windows.Documents.EditingCommands.MoveUpByParagraph\n- uid: System.Windows.Documents.EditingCommands.SelectDownByLine\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: SelectDownByLine\n  nameWithType: EditingCommands.SelectDownByLine\n  fullName: System.Windows.Documents.EditingCommands.SelectDownByLine\n- uid: System.Windows.Documents.EditingCommands.SelectDownByPage\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: SelectDownByPage\n  nameWithType: EditingCommands.SelectDownByPage\n  fullName: System.Windows.Documents.EditingCommands.SelectDownByPage\n- uid: System.Windows.Documents.EditingCommands.SelectDownByParagraph\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: SelectDownByParagraph\n  nameWithType: EditingCommands.SelectDownByParagraph\n  fullName: System.Windows.Documents.EditingCommands.SelectDownByParagraph\n- uid: System.Windows.Documents.EditingCommands.SelectLeftByCharacter\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: SelectLeftByCharacter\n  nameWithType: EditingCommands.SelectLeftByCharacter\n  fullName: System.Windows.Documents.EditingCommands.SelectLeftByCharacter\n- uid: System.Windows.Documents.EditingCommands.SelectLeftByWord\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: SelectLeftByWord\n  nameWithType: EditingCommands.SelectLeftByWord\n  fullName: System.Windows.Documents.EditingCommands.SelectLeftByWord\n- uid: System.Windows.Documents.EditingCommands.SelectRightByCharacter\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: SelectRightByCharacter\n  nameWithType: EditingCommands.SelectRightByCharacter\n  fullName: System.Windows.Documents.EditingCommands.SelectRightByCharacter\n- uid: System.Windows.Documents.EditingCommands.SelectRightByWord\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: SelectRightByWord\n  nameWithType: EditingCommands.SelectRightByWord\n  fullName: System.Windows.Documents.EditingCommands.SelectRightByWord\n- uid: System.Windows.Documents.EditingCommands.SelectToDocumentEnd\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: SelectToDocumentEnd\n  nameWithType: EditingCommands.SelectToDocumentEnd\n  fullName: System.Windows.Documents.EditingCommands.SelectToDocumentEnd\n- uid: System.Windows.Documents.EditingCommands.SelectToDocumentStart\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: SelectToDocumentStart\n  nameWithType: EditingCommands.SelectToDocumentStart\n  fullName: System.Windows.Documents.EditingCommands.SelectToDocumentStart\n- uid: System.Windows.Documents.EditingCommands.SelectToLineEnd\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: SelectToLineEnd\n  nameWithType: EditingCommands.SelectToLineEnd\n  fullName: System.Windows.Documents.EditingCommands.SelectToLineEnd\n- uid: System.Windows.Documents.EditingCommands.SelectToLineStart\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: SelectToLineStart\n  nameWithType: EditingCommands.SelectToLineStart\n  fullName: System.Windows.Documents.EditingCommands.SelectToLineStart\n- uid: System.Windows.Documents.EditingCommands.SelectUpByLine\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: SelectUpByLine\n  nameWithType: EditingCommands.SelectUpByLine\n  fullName: System.Windows.Documents.EditingCommands.SelectUpByLine\n- uid: System.Windows.Documents.EditingCommands.SelectUpByPage\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: SelectUpByPage\n  nameWithType: EditingCommands.SelectUpByPage\n  fullName: System.Windows.Documents.EditingCommands.SelectUpByPage\n- uid: System.Windows.Documents.EditingCommands.SelectUpByParagraph\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: SelectUpByParagraph\n  nameWithType: EditingCommands.SelectUpByParagraph\n  fullName: System.Windows.Documents.EditingCommands.SelectUpByParagraph\n- uid: System.Windows.Documents.EditingCommands.TabBackward\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: TabBackward\n  nameWithType: EditingCommands.TabBackward\n  fullName: System.Windows.Documents.EditingCommands.TabBackward\n- uid: System.Windows.Documents.EditingCommands.TabForward\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: TabForward\n  nameWithType: EditingCommands.TabForward\n  fullName: System.Windows.Documents.EditingCommands.TabForward\n- uid: System.Windows.Documents.EditingCommands.ToggleBold\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: ToggleBold\n  nameWithType: EditingCommands.ToggleBold\n  fullName: System.Windows.Documents.EditingCommands.ToggleBold\n- uid: System.Windows.Documents.EditingCommands.ToggleBullets\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: ToggleBullets\n  nameWithType: EditingCommands.ToggleBullets\n  fullName: System.Windows.Documents.EditingCommands.ToggleBullets\n- uid: System.Windows.Documents.EditingCommands.ToggleInsert\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: ToggleInsert\n  nameWithType: EditingCommands.ToggleInsert\n  fullName: System.Windows.Documents.EditingCommands.ToggleInsert\n- uid: System.Windows.Documents.EditingCommands.ToggleItalic\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: ToggleItalic\n  nameWithType: EditingCommands.ToggleItalic\n  fullName: System.Windows.Documents.EditingCommands.ToggleItalic\n- uid: System.Windows.Documents.EditingCommands.ToggleNumbering\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: ToggleNumbering\n  nameWithType: EditingCommands.ToggleNumbering\n  fullName: System.Windows.Documents.EditingCommands.ToggleNumbering\n- uid: System.Windows.Documents.EditingCommands.ToggleSubscript\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: ToggleSubscript\n  nameWithType: EditingCommands.ToggleSubscript\n  fullName: System.Windows.Documents.EditingCommands.ToggleSubscript\n- uid: System.Windows.Documents.EditingCommands.ToggleSuperscript\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: ToggleSuperscript\n  nameWithType: EditingCommands.ToggleSuperscript\n  fullName: System.Windows.Documents.EditingCommands.ToggleSuperscript\n- uid: System.Windows.Documents.EditingCommands.ToggleUnderline\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: ToggleUnderline\n  nameWithType: EditingCommands.ToggleUnderline\n  fullName: System.Windows.Documents.EditingCommands.ToggleUnderline\n- uid: System.Windows.Documents.EditingCommands.AlignCenter*\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: AlignCenter\n  nameWithType: EditingCommands.AlignCenter\n- uid: System.Windows.Documents.EditingCommands.AlignJustify*\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: AlignJustify\n  nameWithType: EditingCommands.AlignJustify\n- uid: System.Windows.Documents.EditingCommands.AlignLeft*\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: AlignLeft\n  nameWithType: EditingCommands.AlignLeft\n- uid: System.Windows.Documents.EditingCommands.AlignRight*\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: AlignRight\n  nameWithType: EditingCommands.AlignRight\n- uid: System.Windows.Documents.EditingCommands.Backspace*\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: Backspace\n  nameWithType: EditingCommands.Backspace\n- uid: System.Windows.Documents.EditingCommands.CorrectSpellingError*\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: CorrectSpellingError\n  nameWithType: EditingCommands.CorrectSpellingError\n- uid: System.Windows.Documents.EditingCommands.DecreaseFontSize*\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: DecreaseFontSize\n  nameWithType: EditingCommands.DecreaseFontSize\n- uid: System.Windows.Documents.EditingCommands.DecreaseIndentation*\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: DecreaseIndentation\n  nameWithType: EditingCommands.DecreaseIndentation\n- uid: System.Windows.Documents.EditingCommands.Delete*\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: Delete\n  nameWithType: EditingCommands.Delete\n- uid: System.Windows.Documents.EditingCommands.DeleteNextWord*\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: DeleteNextWord\n  nameWithType: EditingCommands.DeleteNextWord\n- uid: System.Windows.Documents.EditingCommands.DeletePreviousWord*\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: DeletePreviousWord\n  nameWithType: EditingCommands.DeletePreviousWord\n- uid: System.Windows.Documents.EditingCommands.EnterLineBreak*\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: EnterLineBreak\n  nameWithType: EditingCommands.EnterLineBreak\n- uid: System.Windows.Documents.EditingCommands.EnterParagraphBreak*\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: EnterParagraphBreak\n  nameWithType: EditingCommands.EnterParagraphBreak\n- uid: System.Windows.Documents.EditingCommands.IgnoreSpellingError*\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: IgnoreSpellingError\n  nameWithType: EditingCommands.IgnoreSpellingError\n- uid: System.Windows.Documents.EditingCommands.IncreaseFontSize*\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: IncreaseFontSize\n  nameWithType: EditingCommands.IncreaseFontSize\n- uid: System.Windows.Documents.EditingCommands.IncreaseIndentation*\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: IncreaseIndentation\n  nameWithType: EditingCommands.IncreaseIndentation\n- uid: System.Windows.Documents.EditingCommands.MoveDownByLine*\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: MoveDownByLine\n  nameWithType: EditingCommands.MoveDownByLine\n- uid: System.Windows.Documents.EditingCommands.MoveDownByPage*\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: MoveDownByPage\n  nameWithType: EditingCommands.MoveDownByPage\n- uid: System.Windows.Documents.EditingCommands.MoveDownByParagraph*\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: MoveDownByParagraph\n  nameWithType: EditingCommands.MoveDownByParagraph\n- uid: System.Windows.Documents.EditingCommands.MoveLeftByCharacter*\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: MoveLeftByCharacter\n  nameWithType: EditingCommands.MoveLeftByCharacter\n- uid: System.Windows.Documents.EditingCommands.MoveLeftByWord*\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: MoveLeftByWord\n  nameWithType: EditingCommands.MoveLeftByWord\n- uid: System.Windows.Documents.EditingCommands.MoveRightByCharacter*\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: MoveRightByCharacter\n  nameWithType: EditingCommands.MoveRightByCharacter\n- uid: System.Windows.Documents.EditingCommands.MoveRightByWord*\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: MoveRightByWord\n  nameWithType: EditingCommands.MoveRightByWord\n- uid: System.Windows.Documents.EditingCommands.MoveToDocumentEnd*\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: MoveToDocumentEnd\n  nameWithType: EditingCommands.MoveToDocumentEnd\n- uid: System.Windows.Documents.EditingCommands.MoveToDocumentStart*\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: MoveToDocumentStart\n  nameWithType: EditingCommands.MoveToDocumentStart\n- uid: System.Windows.Documents.EditingCommands.MoveToLineEnd*\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: MoveToLineEnd\n  nameWithType: EditingCommands.MoveToLineEnd\n- uid: System.Windows.Documents.EditingCommands.MoveToLineStart*\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: MoveToLineStart\n  nameWithType: EditingCommands.MoveToLineStart\n- uid: System.Windows.Documents.EditingCommands.MoveUpByLine*\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: MoveUpByLine\n  nameWithType: EditingCommands.MoveUpByLine\n- uid: System.Windows.Documents.EditingCommands.MoveUpByPage*\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: MoveUpByPage\n  nameWithType: EditingCommands.MoveUpByPage\n- uid: System.Windows.Documents.EditingCommands.MoveUpByParagraph*\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: MoveUpByParagraph\n  nameWithType: EditingCommands.MoveUpByParagraph\n- uid: System.Windows.Documents.EditingCommands.SelectDownByLine*\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: SelectDownByLine\n  nameWithType: EditingCommands.SelectDownByLine\n- uid: System.Windows.Documents.EditingCommands.SelectDownByPage*\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: SelectDownByPage\n  nameWithType: EditingCommands.SelectDownByPage\n- uid: System.Windows.Documents.EditingCommands.SelectDownByParagraph*\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: SelectDownByParagraph\n  nameWithType: EditingCommands.SelectDownByParagraph\n- uid: System.Windows.Documents.EditingCommands.SelectLeftByCharacter*\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: SelectLeftByCharacter\n  nameWithType: EditingCommands.SelectLeftByCharacter\n- uid: System.Windows.Documents.EditingCommands.SelectLeftByWord*\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: SelectLeftByWord\n  nameWithType: EditingCommands.SelectLeftByWord\n- uid: System.Windows.Documents.EditingCommands.SelectRightByCharacter*\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: SelectRightByCharacter\n  nameWithType: EditingCommands.SelectRightByCharacter\n- uid: System.Windows.Documents.EditingCommands.SelectRightByWord*\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: SelectRightByWord\n  nameWithType: EditingCommands.SelectRightByWord\n- uid: System.Windows.Documents.EditingCommands.SelectToDocumentEnd*\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: SelectToDocumentEnd\n  nameWithType: EditingCommands.SelectToDocumentEnd\n- uid: System.Windows.Documents.EditingCommands.SelectToDocumentStart*\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: SelectToDocumentStart\n  nameWithType: EditingCommands.SelectToDocumentStart\n- uid: System.Windows.Documents.EditingCommands.SelectToLineEnd*\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: SelectToLineEnd\n  nameWithType: EditingCommands.SelectToLineEnd\n- uid: System.Windows.Documents.EditingCommands.SelectToLineStart*\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: SelectToLineStart\n  nameWithType: EditingCommands.SelectToLineStart\n- uid: System.Windows.Documents.EditingCommands.SelectUpByLine*\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: SelectUpByLine\n  nameWithType: EditingCommands.SelectUpByLine\n- uid: System.Windows.Documents.EditingCommands.SelectUpByPage*\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: SelectUpByPage\n  nameWithType: EditingCommands.SelectUpByPage\n- uid: System.Windows.Documents.EditingCommands.SelectUpByParagraph*\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: SelectUpByParagraph\n  nameWithType: EditingCommands.SelectUpByParagraph\n- uid: System.Windows.Documents.EditingCommands.TabBackward*\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: TabBackward\n  nameWithType: EditingCommands.TabBackward\n- uid: System.Windows.Documents.EditingCommands.TabForward*\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: TabForward\n  nameWithType: EditingCommands.TabForward\n- uid: System.Windows.Documents.EditingCommands.ToggleBold*\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: ToggleBold\n  nameWithType: EditingCommands.ToggleBold\n- uid: System.Windows.Documents.EditingCommands.ToggleBullets*\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: ToggleBullets\n  nameWithType: EditingCommands.ToggleBullets\n- uid: System.Windows.Documents.EditingCommands.ToggleInsert*\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: ToggleInsert\n  nameWithType: EditingCommands.ToggleInsert\n- uid: System.Windows.Documents.EditingCommands.ToggleItalic*\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: ToggleItalic\n  nameWithType: EditingCommands.ToggleItalic\n- uid: System.Windows.Documents.EditingCommands.ToggleNumbering*\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: ToggleNumbering\n  nameWithType: EditingCommands.ToggleNumbering\n- uid: System.Windows.Documents.EditingCommands.ToggleSubscript*\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: ToggleSubscript\n  nameWithType: EditingCommands.ToggleSubscript\n- uid: System.Windows.Documents.EditingCommands.ToggleSuperscript*\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: ToggleSuperscript\n  nameWithType: EditingCommands.ToggleSuperscript\n- uid: System.Windows.Documents.EditingCommands.ToggleUnderline*\n  parent: System.Windows.Documents.EditingCommands\n  isExternal: false\n  name: ToggleUnderline\n  nameWithType: EditingCommands.ToggleUnderline\n"}