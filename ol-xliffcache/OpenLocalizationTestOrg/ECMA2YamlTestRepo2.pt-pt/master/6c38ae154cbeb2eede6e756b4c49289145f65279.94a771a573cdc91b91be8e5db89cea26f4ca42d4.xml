{"nodes":[{"pos":[318,385],"content":"Contains communication data sent between cooperating message sinks.","needQuote":true,"needEscape":true,"nodes":[{"content":"Contains communication data sent between cooperating message sinks.","pos":[0,67]}]},{"pos":[398,1142],"content":"Message sinks that use IMessage can be placed in the client sink chains or in the server sink chains. A message object is passed from message sink to message sink through the chain, and carries a set of named properties such as action identifiers, envoy information, and parameters.       An object that implements the IMessage interface meets the minimum qualifications to be considered a message object. The exact object received by a message sink does not have to be passed on to the next sink, but this is often the case.       Although the objects in the property bag do not have to be serializable, the message sink implementer needs to consider this, since the properties that flow out of the application domain must be serializable.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Message sinks that use IMessage can be placed in the client sink chains or in the server sink chains. A message object is passed from message sink to message sink through the chain, and carries a set of named properties such as action identifiers, envoy information, and parameters.       An object that implements the IMessage interface meets the minimum qualifications to be considered a message object. The exact object received by a message sink does not have to be passed on to the next sink, but this is often the case.       Although the objects in the property bag do not have to be serializable, the message sink implementer needs to consider this, since the properties that flow out of the application domain must be serializable.","pos":[0,740],"nodes":[{"content":"Message sinks that use IMessage can be placed in the client sink chains or in the server sink chains.","pos":[0,101]},{"content":"A message object is passed from message sink to message sink through the chain, and carries a set of named properties such as action identifiers, envoy information, and parameters.","pos":[102,282]},{"content":"An object that implements the IMessage interface meets the minimum qualifications to be considered a message object.","pos":[289,405]},{"content":"The exact object received by a message sink does not have to be passed on to the next sink, but this is often the case.","pos":[406,525]},{"content":"Although the objects in the property bag do not have to be serializable, the message sink implementer needs to consider this, since the properties that flow out of the application domain must be serializable.","pos":[532,740]}]}]},{"pos":[2036,2139],"content":"Gets an <xref:System.Collections.IDictionary> that represents a collection of the message's properties.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets an &lt;xref:System.Collections.IDictionary&gt; that represents a collection of the message's properties.","pos":[0,103],"source":"Gets an <xref:System.Collections.IDictionary> that represents a collection of the message's properties."}]},{"pos":[2624,2694],"content":"A dictionary that represents a collection of the message's properties.","needQuote":true,"needEscape":true,"nodes":[{"content":"A dictionary that represents a collection of the message's properties.","pos":[0,70]}]},{"pos":[2888,3005],"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.","pos":[0,117]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Runtime.Remoting.Messaging.IMessage\n  id: IMessage\n  children:\n  - System.Runtime.Remoting.Messaging.IMessage.Properties\n  langs:\n  - csharp\n  name: IMessage\n  nameWithType: IMessage\n  fullName: System.Runtime.Remoting.Messaging.IMessage\n  type: Interface\n  summary: Contains communication data sent between cooperating message sinks.\n  remarks: \"Message sinks that use IMessage can be placed in the client sink chains or in the server sink chains. A message object is passed from message sink to message sink through the chain, and carries a set of named properties such as action identifiers, envoy information, and parameters.  \\n  \\n An object that implements the IMessage interface meets the minimum qualifications to be considered a message object. The exact object received by a message sink does not have to be passed on to the next sink, but this is often the case.  \\n  \\n Although the objects in the property bag do not have to be serializable, the message sink implementer needs to consider this, since the properties that flow out of the application domain must be serializable.\"\n  example:\n  - >-\n    [!code-vb[ChannelServices_SyncDispatchMessage#1](~/add/codesnippet/visualbasic/t-system.runtime.remotin_60_1.vb)]\n     [!code-cs[ChannelServices_SyncDispatchMessage#1](~/add/codesnippet/csharp/t-system.runtime.remotin_60_1.cs)]\n     [!code-cpp[ChannelServices_SyncDispatchMessage#1](~/add/codesnippet/cpp/t-system.runtime.remotin_60_1.cpp)]\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public interface IMessage\n  implements: []\n  platform:\n  - net462\n- uid: System.Runtime.Remoting.Messaging.IMessage.Properties\n  id: Properties\n  parent: System.Runtime.Remoting.Messaging.IMessage\n  langs:\n  - csharp\n  name: Properties\n  nameWithType: IMessage.Properties\n  fullName: System.Runtime.Remoting.Messaging.IMessage.Properties\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting.Messaging\n  summary: Gets an <xref:System.Collections.IDictionary> that represents a collection of the message's properties.\n  remarks: ''\n  example:\n  - >-\n    [!code-cs[IMessageSink_Client#2](~/add/codesnippet/csharp/p-system.runtime.remotin_99_1.cs)]\n     [!code-vb[IMessageSink_Client#2](~/add/codesnippet/visualbasic/p-system.runtime.remotin_99_1.vb)]\n     [!code-cpp[IMessageSink_Client#2](~/add/codesnippet/cpp/p-system.runtime.remotin_99_1.cpp)]\n  syntax:\n    content: public System.Collections.IDictionary Properties { get; }\n    return:\n      type: System.Collections.IDictionary\n      description: A dictionary that represents a collection of the message's properties.\n  overload: System.Runtime.Remoting.Messaging.IMessage.Properties*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.\n  platform:\n  - net462\nreferences:\n- uid: System.Security.SecurityException\n  isExternal: true\n  name: System.Security.SecurityException\n- uid: System.Runtime.Remoting.Messaging.IMessage.Properties\n  parent: System.Runtime.Remoting.Messaging.IMessage\n  isExternal: false\n  name: Properties\n  nameWithType: IMessage.Properties\n  fullName: System.Runtime.Remoting.Messaging.IMessage.Properties\n- uid: System.Collections.IDictionary\n  parent: System.Collections\n  isExternal: true\n  name: IDictionary\n  nameWithType: IDictionary\n  fullName: System.Collections.IDictionary\n- uid: System.Runtime.Remoting.Messaging.IMessage.Properties*\n  parent: System.Runtime.Remoting.Messaging.IMessage\n  isExternal: false\n  name: Properties\n  nameWithType: IMessage.Properties\n"}