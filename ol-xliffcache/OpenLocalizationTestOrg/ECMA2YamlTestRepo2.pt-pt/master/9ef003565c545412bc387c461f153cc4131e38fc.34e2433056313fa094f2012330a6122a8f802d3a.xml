{"nodes":[{"pos":[540,605],"content":"Provides methods to satisfy imports on an existing part instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides methods to satisfy imports on an existing part instance.","pos":[0,65]}]},{"pos":[1918,2067],"content":"Releases all resources used by the current instance of the <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.Composition.Hosting.CompositionContainer\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Releases all resources used by the current instance of the <xref href=\"System.ComponentModel.Composition.Hosting.CompositionContainer\"></xref> class."},{"pos":[2080,3131],"content":"Call `Dispose` when you are finished using the <xref:System.ComponentModel.Composition.Hosting.CompositionContainer>. The `Dispose` method leaves the <xref:System.ComponentModel.Composition.Hosting.CompositionContainer> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.ComponentModel.Composition.Hosting.CompositionContainer> so the garbage collector can reclaim the memory that the <xref:System.ComponentModel.Composition.Hosting.CompositionContainer> was occupying.       For more information, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md) and [Implementing a Dispose Method](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] >  Always call `Dispose` before you release your last reference to the <xref:System.ComponentModel.Composition.Hosting.CompositionContainer>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.ComponentModel.Composition.Hosting.CompositionContainer> object's `Finalize` method.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Call <ph id=\"ph1\">`Dispose`</ph> when you are finished using the &lt;xref:System.ComponentModel.Composition.Hosting.CompositionContainer&gt;.","pos":[0,117],"source":"Call `Dispose` when you are finished using the <xref:System.ComponentModel.Composition.Hosting.CompositionContainer>."},{"content":"The <ph id=\"ph1\">`Dispose`</ph> method leaves the &lt;xref:System.ComponentModel.Composition.Hosting.CompositionContainer&gt; in an unusable state.","pos":[118,241],"source":" The `Dispose` method leaves the <xref:System.ComponentModel.Composition.Hosting.CompositionContainer> in an unusable state."},{"content":"After calling <ph id=\"ph1\">`Dispose`</ph>, you must release all references to the &lt;xref:System.ComponentModel.Composition.Hosting.CompositionContainer&gt; so the garbage collector can reclaim the memory that the &lt;xref:System.ComponentModel.Composition.Hosting.CompositionContainer&gt; was occupying.","pos":[242,517],"source":" After calling `Dispose`, you must release all references to the <xref:System.ComponentModel.Composition.Hosting.CompositionContainer> so the garbage collector can reclaim the memory that the <xref:System.ComponentModel.Composition.Hosting.CompositionContainer> was occupying."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Cleaning Up Unmanaged Resources<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id=\"p2\">[</bpt>Implementing a Dispose Method<ept id=\"p2\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[524,698],"source":"       For more information, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md) and [Implementing a Dispose Method](~/add/includes/ajax-current-ext-md.md)."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Always call <ph id=\"ph2\">`Dispose`</ph> before you release your last reference to the &lt;xref:System.ComponentModel.Composition.Hosting.CompositionContainer&gt;.","pos":[704,855],"source":"      > [!NOTE] >  Always call `Dispose` before you release your last reference to the <xref:System.ComponentModel.Composition.Hosting.CompositionContainer>."},{"content":"Otherwise, the resources it is using will not be freed until the garbage collector calls the &lt;xref:System.ComponentModel.Composition.Hosting.CompositionContainer&gt; object's <ph id=\"ph1\">`Finalize`</ph> method.","pos":[856,1046],"source":" Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.ComponentModel.Composition.Hosting.CompositionContainer> object's `Finalize` method."}]},{"pos":[4000,4072],"content":"Composes the specified part, with recomposition and validation disabled.","needQuote":true,"needEscape":true,"nodes":[{"content":"Composes the specified part, with recomposition and validation disabled.","pos":[0,72]}]},{"pos":[4317,4337],"content":"The part to compose.","needQuote":true,"needEscape":true,"nodes":[{"content":"The part to compose.","pos":[0,20]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ComponentModel.Composition.Hosting.CompositionService\n  id: CompositionService\n  children:\n  - System.ComponentModel.Composition.Hosting.CompositionService.Dispose\n  - System.ComponentModel.Composition.Hosting.CompositionService.SatisfyImportsOnce(System.ComponentModel.Composition.Primitives.ComposablePart)\n  langs:\n  - csharp\n  name: CompositionService\n  nameWithType: CompositionService\n  fullName: System.ComponentModel.Composition.Hosting.CompositionService\n  type: Class\n  summary: Provides methods to satisfy imports on an existing part instance.\n  remarks: >-\n    > [!IMPORTANT]\n\n    >  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref:System.IDisposable> interface topic.\n  syntax:\n    content: 'public class CompositionService : IDisposable, System.ComponentModel.Composition.ICompositionService'\n  inheritance:\n  - System.Object\n  implements:\n  - System.ComponentModel.Composition.ICompositionService\n  - System.IDisposable\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Composition.Hosting.CompositionService.Dispose\n  id: Dispose\n  parent: System.ComponentModel.Composition.Hosting.CompositionService\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: CompositionService.Dispose()\n  fullName: System.ComponentModel.Composition.Hosting.CompositionService.Dispose()\n  type: Method\n  assemblies:\n  - System.ComponentModel.Composition\n  namespace: System.ComponentModel.Composition.Hosting\n  summary: Releases all resources used by the current instance of the <xref href=\"System.ComponentModel.Composition.Hosting.CompositionContainer\"></xref> class.\n  remarks: \"Call `Dispose` when you are finished using the <xref:System.ComponentModel.Composition.Hosting.CompositionContainer>. The `Dispose` method leaves the <xref:System.ComponentModel.Composition.Hosting.CompositionContainer> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.ComponentModel.Composition.Hosting.CompositionContainer> so the garbage collector can reclaim the memory that the <xref:System.ComponentModel.Composition.Hosting.CompositionContainer> was occupying.  \\n  \\n For more information, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md) and [Implementing a Dispose Method](~/add/includes/ajax-current-ext-md.md).  \\n  \\n> [!NOTE]\\n>  Always call `Dispose` before you release your last reference to the <xref:System.ComponentModel.Composition.Hosting.CompositionContainer>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.ComponentModel.Composition.Hosting.CompositionContainer> object's `Finalize` method.\"\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.ComponentModel.Composition.Hosting.CompositionService.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Composition.Hosting.CompositionService.SatisfyImportsOnce(System.ComponentModel.Composition.Primitives.ComposablePart)\n  id: SatisfyImportsOnce(System.ComponentModel.Composition.Primitives.ComposablePart)\n  parent: System.ComponentModel.Composition.Hosting.CompositionService\n  langs:\n  - csharp\n  name: SatisfyImportsOnce(ComposablePart)\n  nameWithType: CompositionService.SatisfyImportsOnce(ComposablePart)\n  fullName: System.ComponentModel.Composition.Hosting.CompositionService.SatisfyImportsOnce(ComposablePart)\n  type: Method\n  assemblies:\n  - System.ComponentModel.Composition\n  namespace: System.ComponentModel.Composition.Hosting\n  summary: Composes the specified part, with recomposition and validation disabled.\n  syntax:\n    content: public void SatisfyImportsOnce (System.ComponentModel.Composition.Primitives.ComposablePart part);\n    parameters:\n    - id: part\n      type: System.ComponentModel.Composition.Primitives.ComposablePart\n      description: The part to compose.\n  overload: System.ComponentModel.Composition.Hosting.CompositionService.SatisfyImportsOnce*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ComponentModel.Composition.Hosting.CompositionService.Dispose\n  parent: System.ComponentModel.Composition.Hosting.CompositionService\n  isExternal: false\n  name: Dispose()\n  nameWithType: CompositionService.Dispose()\n  fullName: System.ComponentModel.Composition.Hosting.CompositionService.Dispose()\n- uid: System.ComponentModel.Composition.Hosting.CompositionService.SatisfyImportsOnce(System.ComponentModel.Composition.Primitives.ComposablePart)\n  parent: System.ComponentModel.Composition.Hosting.CompositionService\n  isExternal: false\n  name: SatisfyImportsOnce(ComposablePart)\n  nameWithType: CompositionService.SatisfyImportsOnce(ComposablePart)\n  fullName: System.ComponentModel.Composition.Hosting.CompositionService.SatisfyImportsOnce(ComposablePart)\n- uid: System.ComponentModel.Composition.Primitives.ComposablePart\n  parent: System.ComponentModel.Composition.Primitives\n  isExternal: false\n  name: ComposablePart\n  nameWithType: ComposablePart\n  fullName: System.ComponentModel.Composition.Primitives.ComposablePart\n- uid: System.ComponentModel.Composition.Hosting.CompositionService.Dispose*\n  parent: System.ComponentModel.Composition.Hosting.CompositionService\n  isExternal: false\n  name: Dispose\n  nameWithType: CompositionService.Dispose\n- uid: System.ComponentModel.Composition.Hosting.CompositionService.SatisfyImportsOnce*\n  parent: System.ComponentModel.Composition.Hosting.CompositionService\n  isExternal: false\n  name: SatisfyImportsOnce\n  nameWithType: CompositionService.SatisfyImportsOnce\n"}