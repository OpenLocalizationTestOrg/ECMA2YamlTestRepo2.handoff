{"nodes":[{"pos":[715,772],"content":"Specifies a range of character positions within a string.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies a range of character positions within a string.","pos":[0,57]}]},{"pos":[2076,2230],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.CharacterRange\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure, specifying a range of character positions within a string.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Drawing.CharacterRange\"></xref> structure, specifying a range of character positions within a string."},{"pos":[3152,3299],"content":"The position of the first character in the range. For example, if `First` is set to 0, the first position of the range is position 0 in the string.","needQuote":true,"needEscape":true,"nodes":[{"content":"The position of the first character in the range.","pos":[0,49]},{"content":"For example, if <ph id=\"ph1\">`First`</ph> is set to 0, the first position of the range is position 0 in the string.","pos":[50,147],"source":" For example, if `First` is set to 0, the first position of the range is position 0 in the string."}]},{"pos":[3361,3398],"content":"The number of positions in the range.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of positions in the range.","pos":[0,37]}]},{"pos":[3848,3930],"content":"Gets a value indicating whether this object is equivalent to the specified object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value indicating whether this object is equivalent to the specified object.","pos":[0,82]}]},{"pos":[3942,4032],"content":"You can also use <xref:System.Drawing.CharacterRange.op_Equality%2A> to test for equality.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"You can also use &lt;xref:System.Drawing.CharacterRange.op_Equality%2A&gt; to test for equality.","pos":[0,90],"source":"You can also use <xref:System.Drawing.CharacterRange.op_Equality%2A> to test for equality."}]},{"pos":[4780,4818],"content":"The object to compare to for equality.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object to compare to for equality.","pos":[0,38]}]},{"pos":[4877,5191],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to indicate the specified object is an instance with the same &lt;xref:System.Drawing.CharacterRange.First<bpt id=\"p2\">*</bpt>&gt; and &lt;xref:System.Drawing.CharacterRange.Length<ept id=\"p2\">*</ept>&gt; value as this instance; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to indicate the specified object is an instance with the same <xref:System.Drawing.CharacterRange.First*> and <xref:System.Drawing.CharacterRange.Length*> value as this instance; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[5585,5707],"content":"Gets or sets the position in the string of the first character of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.CharacterRange\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets or sets the position in the string of the first character of this <xref href=\"System.Drawing.CharacterRange\"></xref>."},{"pos":[5818,5896],"content":"The first position of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.CharacterRange\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The first position of this <xref href=\"System.Drawing.CharacterRange\"></xref>."},{"pos":[6323,6363],"content":"Returns the hash code for this instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the hash code for this instance.","pos":[0,40]}]},{"pos":[6498,6562],"content":"A 32-bit signed integer that is the hash code for this instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"A 32-bit signed integer that is the hash code for this instance.","pos":[0,64]}]},{"pos":[6966,7062],"content":"Gets or sets the number of positions in this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.CharacterRange\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets or sets the number of positions in this <xref href=\"System.Drawing.CharacterRange\"></xref>."},{"pos":[7174,7257],"content":"The number of positions in this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.CharacterRange\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The number of positions in this <xref href=\"System.Drawing.CharacterRange\"></xref>."},{"pos":[7896,8185],"content":"Compares two <xref href=\"System.Drawing.CharacterRange\"></xref> objects. Gets a value indicating whether the <xref:System.Drawing.CharacterRange.First*> and <xref:System.Drawing.CharacterRange.Length*> values of the two <xref href=\"System.Drawing.CharacterRange\"></xref> objects are equal.","needQuote":true,"needEscape":true,"nodes":[{"content":"Compares two <bpt id=\"p1\">&lt;xref href=\"System.Drawing.CharacterRange\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects.","pos":[0,72],"source":"Compares two <xref href=\"System.Drawing.CharacterRange\"></xref> objects."},{"content":"Gets a value indicating whether the &lt;xref:System.Drawing.CharacterRange.First<bpt id=\"p1\">*</bpt>&gt; and &lt;xref:System.Drawing.CharacterRange.Length<ept id=\"p1\">*</ept>&gt; values of the two <bpt id=\"p2\">&lt;xref href=\"System.Drawing.CharacterRange\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> objects are equal.","pos":[73,289],"source":" Gets a value indicating whether the <xref:System.Drawing.CharacterRange.First*> and <xref:System.Drawing.CharacterRange.Length*> values of the two <xref href=\"System.Drawing.CharacterRange\"></xref> objects are equal."}]},{"pos":[8197,8292],"content":"You can also test for equality using the <xref:System.Drawing.CharacterRange.Equals%2A> method.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"You can also test for equality using the &lt;xref:System.Drawing.CharacterRange.Equals%2A&gt; method.","pos":[0,95],"source":"You can also test for equality using the <xref:System.Drawing.CharacterRange.Equals%2A> method."}]},{"pos":[9117,9194],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.CharacterRange\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to compare for equality.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.CharacterRange\"></xref> to compare for equality."},{"pos":[9270,9347],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.CharacterRange\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to compare for equality.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.CharacterRange\"></xref> to compare for equality."},{"pos":[9406,9735],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to indicate the two <bpt id=\"p2\">&lt;xref href=\"System.Drawing.CharacterRange\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> objects have the same &lt;xref:System.Drawing.CharacterRange.First<bpt id=\"p3\">*</bpt>&gt; and &lt;xref:System.Drawing.CharacterRange.Length<ept id=\"p3\">*</ept>&gt; values; otherwise, <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to indicate the two <xref href=\"System.Drawing.CharacterRange\"></xref> objects have the same <xref:System.Drawing.CharacterRange.First*> and <xref:System.Drawing.CharacterRange.Length*> values; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[10389,10681],"content":"Compares two <xref href=\"System.Drawing.CharacterRange\"></xref> objects. Gets a value indicating whether the <xref:System.Drawing.CharacterRange.First*> or <xref:System.Drawing.CharacterRange.Length*> values of the two <xref href=\"System.Drawing.CharacterRange\"></xref> objects are not equal.","needQuote":true,"needEscape":true,"nodes":[{"content":"Compares two <bpt id=\"p1\">&lt;xref href=\"System.Drawing.CharacterRange\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects.","pos":[0,72],"source":"Compares two <xref href=\"System.Drawing.CharacterRange\"></xref> objects."},{"content":"Gets a value indicating whether the &lt;xref:System.Drawing.CharacterRange.First<bpt id=\"p1\">*</bpt>&gt; or &lt;xref:System.Drawing.CharacterRange.Length<ept id=\"p1\">*</ept>&gt; values of the two <bpt id=\"p2\">&lt;xref href=\"System.Drawing.CharacterRange\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> objects are not equal.","pos":[73,292],"source":" Gets a value indicating whether the <xref:System.Drawing.CharacterRange.First*> or <xref:System.Drawing.CharacterRange.Length*> values of the two <xref href=\"System.Drawing.CharacterRange\"></xref> objects are not equal."}]},{"pos":[10693,10802],"content":"The Inequality method returns the opposite of the <xref:System.Drawing.CharacterRange.op_Equality%2A> method.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Inequality method returns the opposite of the &lt;xref:System.Drawing.CharacterRange.op_Equality%2A&gt; method.","pos":[0,109],"source":"The Inequality method returns the opposite of the <xref:System.Drawing.CharacterRange.op_Equality%2A> method."}]},{"pos":[11630,11709],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.CharacterRange\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to compare for inequality.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.CharacterRange\"></xref> to compare for inequality."},{"pos":[11785,11864],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.CharacterRange\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to compare for inequality.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.CharacterRange\"></xref> to compare for inequality."},{"pos":[11923,12262],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to indicate the either the &lt;xref:System.Drawing.CharacterRange.First<bpt id=\"p2\">*</bpt>&gt; or &lt;xref:System.Drawing.CharacterRange.Length<ept id=\"p2\">*</ept>&gt; values of the two <bpt id=\"p3\">&lt;xref href=\"System.Drawing.CharacterRange\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> objects differ; otherwise, <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to indicate the either the <xref:System.Drawing.CharacterRange.First*> or <xref:System.Drawing.CharacterRange.Length*> values of the two <xref href=\"System.Drawing.CharacterRange\"></xref> objects differ; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Drawing.CharacterRange\n  id: CharacterRange\n  children:\n  - System.Drawing.CharacterRange.#ctor(System.Int32,System.Int32)\n  - System.Drawing.CharacterRange.Equals(System.Object)\n  - System.Drawing.CharacterRange.First\n  - System.Drawing.CharacterRange.GetHashCode\n  - System.Drawing.CharacterRange.Length\n  - System.Drawing.CharacterRange.op_Equality(System.Drawing.CharacterRange,System.Drawing.CharacterRange)\n  - System.Drawing.CharacterRange.op_Inequality(System.Drawing.CharacterRange,System.Drawing.CharacterRange)\n  langs:\n  - csharp\n  name: CharacterRange\n  nameWithType: CharacterRange\n  fullName: System.Drawing.CharacterRange\n  type: Struct\n  summary: Specifies a range of character positions within a string.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates how to create a CharacterRange and use it to highlight part of a string. This example is designed to be used with Windows Forms. Paste the example into a form and call the `HighlightACharacterRange` method when handling the form's <xref:System.Windows.Forms.Control.Paint> event, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  \\n  \\n [!code-cs[System.Drawing.CharacterRangeExample#1](~/add/codesnippet/csharp/t-system.drawing.charact_1.cs)]\\n [!code-cpp[System.Drawing.CharacterRangeExample#1](~/add/codesnippet/cpp/t-system.drawing.charact_1.cpp)]\\n [!code-vb[System.Drawing.CharacterRangeExample#1](~/add/codesnippet/visualbasic/t-system.drawing.charact_1.vb)]\"\n  syntax:\n    content: public struct CharacterRange\n  inheritance:\n  - System.ValueType\n  implements: []\n  platform:\n  - net462\n- uid: System.Drawing.CharacterRange.#ctor(System.Int32,System.Int32)\n  id: '#ctor(System.Int32,System.Int32)'\n  parent: System.Drawing.CharacterRange\n  langs:\n  - csharp\n  name: CharacterRange(Int32,Int32)\n  nameWithType: CharacterRange.CharacterRange(Int32,Int32)\n  fullName: System.Drawing.CharacterRange.CharacterRange(Int32,Int32)\n  type: Constructor\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Initializes a new instance of the <xref href=\"System.Drawing.CharacterRange\"></xref> structure, specifying a range of character positions within a string.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates how to create a <xref:System.Drawing.CharacterRange> and use it to highlight part of a string. This example is designed to be used with Windows Forms. Paste the example into a form and call the `HighlightACharacterRange` method when handling the form's <xref:System.Windows.Forms.Control.Paint> event, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  \\n  \\n [!code-cs[System.Drawing.CharacterRangeExample#1](~/add/codesnippet/csharp/m-system.drawing.charact_0_1.cs)]\\n [!code-cpp[System.Drawing.CharacterRangeExample#1](~/add/codesnippet/cpp/m-system.drawing.charact_0_1.cpp)]\\n [!code-vb[System.Drawing.CharacterRangeExample#1](~/add/codesnippet/visualbasic/m-system.drawing.charact_0_1.vb)]\"\n  syntax:\n    content: public CharacterRange (int First, int Length);\n    parameters:\n    - id: First\n      type: System.Int32\n      description: The position of the first character in the range. For example, if `First` is set to 0, the first position of the range is position 0 in the string.\n    - id: Length\n      type: System.Int32\n      description: The number of positions in the range.\n  overload: System.Drawing.CharacterRange.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.CharacterRange.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Drawing.CharacterRange\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: CharacterRange.Equals(Object)\n  fullName: System.Drawing.CharacterRange.Equals(Object)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Gets a value indicating whether this object is equivalent to the specified object.\n  remarks: You can also use <xref:System.Drawing.CharacterRange.op_Equality%2A> to test for equality.\n  example:\n  - \"The following example demonstrates how to use the Equals method. To run this example, paste it into a Windows Form. Handle the form’s <xref:System.Windows.Forms.Control.Paint> event and call the `CharacterRangeEquality2` method from the <xref:System.Windows.Forms.Control.Paint> event-handling method, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  \\n  \\n [!code-vb[System.Drawing.MiscWhidbeySnippets#2](~/add/codesnippet/visualbasic/m-system.drawing.charact_1_1.vb)]\\n [!code-cs[System.Drawing.MiscWhidbeySnippets#2](~/add/codesnippet/csharp/m-system.drawing.charact_1_1.cs)]\"\n  syntax:\n    content: public override bool Equals (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The object to compare to for equality.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to indicate the specified object is an instance with the same <xref:System.Drawing.CharacterRange.First*> and <xref:System.Drawing.CharacterRange.Length*> value as this instance; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Drawing.CharacterRange.Equals*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.CharacterRange.First\n  id: First\n  parent: System.Drawing.CharacterRange\n  langs:\n  - csharp\n  name: First\n  nameWithType: CharacterRange.First\n  fullName: System.Drawing.CharacterRange.First\n  type: Property\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Gets or sets the position in the string of the first character of this <xref href=\"System.Drawing.CharacterRange\"></xref>.\n  syntax:\n    content: public int First { get; set; }\n    return:\n      type: System.Int32\n      description: The first position of this <xref href=\"System.Drawing.CharacterRange\"></xref>.\n  overload: System.Drawing.CharacterRange.First*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.CharacterRange.GetHashCode\n  id: GetHashCode\n  parent: System.Drawing.CharacterRange\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: CharacterRange.GetHashCode()\n  fullName: System.Drawing.CharacterRange.GetHashCode()\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Returns the hash code for this instance.\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: A 32-bit signed integer that is the hash code for this instance.\n  overload: System.Drawing.CharacterRange.GetHashCode*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.CharacterRange.Length\n  id: Length\n  parent: System.Drawing.CharacterRange\n  langs:\n  - csharp\n  name: Length\n  nameWithType: CharacterRange.Length\n  fullName: System.Drawing.CharacterRange.Length\n  type: Property\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Gets or sets the number of positions in this <xref href=\"System.Drawing.CharacterRange\"></xref>.\n  syntax:\n    content: public int Length { get; set; }\n    return:\n      type: System.Int32\n      description: The number of positions in this <xref href=\"System.Drawing.CharacterRange\"></xref>.\n  overload: System.Drawing.CharacterRange.Length*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.CharacterRange.op_Equality(System.Drawing.CharacterRange,System.Drawing.CharacterRange)\n  id: op_Equality(System.Drawing.CharacterRange,System.Drawing.CharacterRange)\n  parent: System.Drawing.CharacterRange\n  langs:\n  - csharp\n  name: op_Equality(CharacterRange,CharacterRange)\n  nameWithType: CharacterRange.op_Equality(CharacterRange,CharacterRange)\n  fullName: System.Drawing.CharacterRange.op_Equality(CharacterRange,CharacterRange)\n  type: Operator\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Compares two <xref href=\"System.Drawing.CharacterRange\"></xref> objects. Gets a value indicating whether the <xref:System.Drawing.CharacterRange.First*> and <xref:System.Drawing.CharacterRange.Length*> values of the two <xref href=\"System.Drawing.CharacterRange\"></xref> objects are equal.\n  remarks: You can also test for equality using the <xref:System.Drawing.CharacterRange.Equals%2A> method.\n  example:\n  - \"The following example demonstrates how to use the Equality operator. To run this example, paste it into a Windows Form. Handle the form’s <xref:System.Windows.Forms.Control.Paint> event and call the `CharacterRangeEquality1` method from the <xref:System.Windows.Forms.Control.Paint> event-handling method, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  \\n  \\n [!code-vb[System.Drawing.MiscWhidbeySnippets#1](~/add/codesnippet/visualbasic/77d6f8e6-d038-41e3-99f0-_1.vb)]\\n [!code-cs[System.Drawing.MiscWhidbeySnippets#1](~/add/codesnippet/csharp/77d6f8e6-d038-41e3-99f0-_1.cs)]\"\n  syntax:\n    content: public static bool op_Equality (System.Drawing.CharacterRange cr1, System.Drawing.CharacterRange cr2);\n    parameters:\n    - id: cr1\n      type: System.Drawing.CharacterRange\n      description: A <xref href=\"System.Drawing.CharacterRange\"></xref> to compare for equality.\n    - id: cr2\n      type: System.Drawing.CharacterRange\n      description: A <xref href=\"System.Drawing.CharacterRange\"></xref> to compare for equality.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to indicate the two <xref href=\"System.Drawing.CharacterRange\"></xref> objects have the same <xref:System.Drawing.CharacterRange.First*> and <xref:System.Drawing.CharacterRange.Length*> values; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Drawing.CharacterRange.op_Equality*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.CharacterRange.op_Inequality(System.Drawing.CharacterRange,System.Drawing.CharacterRange)\n  id: op_Inequality(System.Drawing.CharacterRange,System.Drawing.CharacterRange)\n  parent: System.Drawing.CharacterRange\n  langs:\n  - csharp\n  name: op_Inequality(CharacterRange,CharacterRange)\n  nameWithType: CharacterRange.op_Inequality(CharacterRange,CharacterRange)\n  fullName: System.Drawing.CharacterRange.op_Inequality(CharacterRange,CharacterRange)\n  type: Operator\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Compares two <xref href=\"System.Drawing.CharacterRange\"></xref> objects. Gets a value indicating whether the <xref:System.Drawing.CharacterRange.First*> or <xref:System.Drawing.CharacterRange.Length*> values of the two <xref href=\"System.Drawing.CharacterRange\"></xref> objects are not equal.\n  remarks: The Inequality method returns the opposite of the <xref:System.Drawing.CharacterRange.op_Equality%2A> method.\n  example:\n  - \"The following example demonstrates how to use the Inequality method. To run this example, paste it into a Windows Form. Handle the form’s <xref:System.Windows.Forms.Control.Paint> event and call the `CharacterRangeInequality` method from the <xref:System.Windows.Forms.Control.Paint> event-handling method, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  \\n  \\n [!code-vb[System.Drawing.MiscWhidbeySnippets#3](~/add/codesnippet/visualbasic/b5fb9968-06fd-40a0-abf3-_1.vb)]\\n [!code-cs[System.Drawing.MiscWhidbeySnippets#3](~/add/codesnippet/csharp/b5fb9968-06fd-40a0-abf3-_1.cs)]\"\n  syntax:\n    content: public static bool op_Inequality (System.Drawing.CharacterRange cr1, System.Drawing.CharacterRange cr2);\n    parameters:\n    - id: cr1\n      type: System.Drawing.CharacterRange\n      description: A <xref href=\"System.Drawing.CharacterRange\"></xref> to compare for inequality.\n    - id: cr2\n      type: System.Drawing.CharacterRange\n      description: A <xref href=\"System.Drawing.CharacterRange\"></xref> to compare for inequality.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to indicate the either the <xref:System.Drawing.CharacterRange.First*> or <xref:System.Drawing.CharacterRange.Length*> values of the two <xref href=\"System.Drawing.CharacterRange\"></xref> objects differ; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Drawing.CharacterRange.op_Inequality*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.ValueType\n  isExternal: false\n  name: System.ValueType\n- uid: System.Drawing.CharacterRange.#ctor(System.Int32,System.Int32)\n  parent: System.Drawing.CharacterRange\n  isExternal: false\n  name: CharacterRange(Int32,Int32)\n  nameWithType: CharacterRange.CharacterRange(Int32,Int32)\n  fullName: System.Drawing.CharacterRange.CharacterRange(Int32,Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Drawing.CharacterRange.Equals(System.Object)\n  parent: System.Drawing.CharacterRange\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: CharacterRange.Equals(Object)\n  fullName: System.Drawing.CharacterRange.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Drawing.CharacterRange.First\n  parent: System.Drawing.CharacterRange\n  isExternal: false\n  name: First\n  nameWithType: CharacterRange.First\n  fullName: System.Drawing.CharacterRange.First\n- uid: System.Drawing.CharacterRange.GetHashCode\n  parent: System.Drawing.CharacterRange\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: CharacterRange.GetHashCode()\n  fullName: System.Drawing.CharacterRange.GetHashCode()\n- uid: System.Drawing.CharacterRange.Length\n  parent: System.Drawing.CharacterRange\n  isExternal: false\n  name: Length\n  nameWithType: CharacterRange.Length\n  fullName: System.Drawing.CharacterRange.Length\n- uid: System.Drawing.CharacterRange.op_Equality(System.Drawing.CharacterRange,System.Drawing.CharacterRange)\n  parent: System.Drawing.CharacterRange\n  isExternal: false\n  name: op_Equality(CharacterRange,CharacterRange)\n  nameWithType: CharacterRange.op_Equality(CharacterRange,CharacterRange)\n  fullName: System.Drawing.CharacterRange.op_Equality(CharacterRange,CharacterRange)\n- uid: System.Drawing.CharacterRange\n  parent: System.Drawing\n  isExternal: false\n  name: CharacterRange\n  nameWithType: CharacterRange\n  fullName: System.Drawing.CharacterRange\n- uid: System.Drawing.CharacterRange.op_Inequality(System.Drawing.CharacterRange,System.Drawing.CharacterRange)\n  parent: System.Drawing.CharacterRange\n  isExternal: false\n  name: op_Inequality(CharacterRange,CharacterRange)\n  nameWithType: CharacterRange.op_Inequality(CharacterRange,CharacterRange)\n  fullName: System.Drawing.CharacterRange.op_Inequality(CharacterRange,CharacterRange)\n- uid: System.Drawing.CharacterRange.#ctor*\n  parent: System.Drawing.CharacterRange\n  isExternal: false\n  name: CharacterRange\n  nameWithType: CharacterRange.CharacterRange\n- uid: System.Drawing.CharacterRange.Equals*\n  parent: System.Drawing.CharacterRange\n  isExternal: false\n  name: Equals\n  nameWithType: CharacterRange.Equals\n- uid: System.Drawing.CharacterRange.First*\n  parent: System.Drawing.CharacterRange\n  isExternal: false\n  name: First\n  nameWithType: CharacterRange.First\n- uid: System.Drawing.CharacterRange.GetHashCode*\n  parent: System.Drawing.CharacterRange\n  isExternal: false\n  name: GetHashCode\n  nameWithType: CharacterRange.GetHashCode\n- uid: System.Drawing.CharacterRange.Length*\n  parent: System.Drawing.CharacterRange\n  isExternal: false\n  name: Length\n  nameWithType: CharacterRange.Length\n- uid: System.Drawing.CharacterRange.op_Equality*\n  parent: System.Drawing.CharacterRange\n  isExternal: false\n  name: op_Equality\n  nameWithType: CharacterRange.op_Equality\n- uid: System.Drawing.CharacterRange.op_Inequality*\n  parent: System.Drawing.CharacterRange\n  isExternal: false\n  name: op_Inequality\n  nameWithType: CharacterRange.op_Inequality\n"}