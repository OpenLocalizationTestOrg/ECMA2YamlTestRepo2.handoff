{"nodes":[{"pos":[1221,1331],"content":"Use &lt;xref:System.Runtime.InteropServices.ComTypes.IRunningObjectTable?displayProperty=fullName&gt; instead.","needQuote":true,"needEscape":true,"nodes":[{"content":"Use <ph id=\"ph1\">&amp;lt;</ph>xref:System.Runtime.InteropServices.ComTypes.IRunningObjectTable?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph> instead.","pos":[0,110],"source":"Use &lt;xref:System.Runtime.InteropServices.ComTypes.IRunningObjectTable?displayProperty=fullName&gt; instead."}]},{"pos":[1343,1470],"content":"For more information, please see the existing documentation for <ph id=\"ph1\">`IRunningObjectTable`</ph> in the com subfolder of the MSDN library.","needQuote":true,"needEscape":true,"extradata":"MT","source":"For more information, please see the existing documentation for `IRunningObjectTable` in the com subfolder of the MSDN library."},{"pos":[2524,2579],"content":"Enumerates the objects currently registered as running.","needQuote":true,"needEscape":true,"nodes":[{"content":"Enumerates the objects currently registered as running.","pos":[0,55]}]},{"pos":[2591,2710],"content":"For more information, please see the existing documentation for <ph id=\"ph1\">`IRunningObjectTable::EnumRunning`</ph> in the MSDN library.","needQuote":true,"needEscape":true,"extradata":"MT","source":"For more information, please see the existing documentation for `IRunningObjectTable::EnumRunning` in the MSDN library."},{"pos":[2946,2999],"content":"On successful return, the new enumerator for the ROT.","needQuote":true,"needEscape":true,"nodes":[{"content":"On successful return, the new enumerator for the ROT.","pos":[0,53]}]},{"pos":[3718,3801],"content":"Returns the registered object if the supplied object name is registered as running.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the registered object if the supplied object name is registered as running.","pos":[0,83]}]},{"pos":[3813,3930],"content":"For more information, please see the existing documentation for <ph id=\"ph1\">`IRunningObjectTable::GetObject`</ph> in the MSDN library.","needQuote":true,"needEscape":true,"extradata":"MT","source":"For more information, please see the existing documentation for `IRunningObjectTable::GetObject` in the MSDN library."},{"pos":[4176,4226],"content":"Reference to the moniker to search for in the ROT.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reference to the moniker to search for in the ROT.","pos":[0,50]}]},{"pos":[4294,4354],"content":"On successful return, contains the requested running object.","needQuote":true,"needEscape":true,"nodes":[{"content":"On successful return, contains the requested running object.","pos":[0,60]}]},{"pos":[5179,5268],"content":"Searches for this moniker in the ROT and reports the recorded time of change, if present.","needQuote":true,"needEscape":true,"nodes":[{"content":"Searches for this moniker in the ROT and reports the recorded time of change, if present.","pos":[0,89]}]},{"pos":[5280,5407],"content":"For more information, please see the existing documentation for <ph id=\"ph1\">`IRunningObjectTable::GetTimeOfLastChange`</ph> in the MSDN library.","needQuote":true,"needEscape":true,"extradata":"MT","source":"For more information, please see the existing documentation for `IRunningObjectTable::GetTimeOfLastChange` in the MSDN library."},{"pos":[5694,5744],"content":"Reference to the moniker to search for in the ROT.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reference to the moniker to search for in the ROT.","pos":[0,50]}]},{"pos":[5836,5896],"content":"On successful return, contains the objects last change time.","needQuote":true,"needEscape":true,"nodes":[{"content":"On successful return, contains the objects last change time.","pos":[0,60]}]},{"pos":[6572,6660],"content":"Determines if the specified moniker is currently registered in the Running Object Table.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines if the specified moniker is currently registered in the Running Object Table.","pos":[0,88]}]},{"pos":[6672,6789],"content":"For more information, please see the existing documentation for <ph id=\"ph1\">`IRunningObjectTable::IsRunning`</ph> in the MSDN library.","needQuote":true,"needEscape":true,"extradata":"MT","source":"For more information, please see the existing documentation for `IRunningObjectTable::IsRunning` in the MSDN library."},{"pos":[7011,7078],"content":"Reference to the moniker to search for in the Running Object Table.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reference to the moniker to search for in the Running Object Table.","pos":[0,67]}]},{"pos":[7795,8009],"content":"Makes a note of the time that a particular object has changed so <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_IMoniker::GetTimeOfLastChange\" name=\"IMoniker::GetTimeOfLastChange\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> can report an appropriate change time.","needQuote":true,"needEscape":true,"source":"Makes a note of the time that a particular object has changed so <xref uid=\"langword_csharp_IMoniker::GetTimeOfLastChange\" name=\"IMoniker::GetTimeOfLastChange\" href=\"\"></xref> can report an appropriate change time."},{"pos":[8021,8143],"content":"For more information, please see the existing documentation for <ph id=\"ph1\">`IRunningObjectTable::NoteChangeTime`</ph> in the MSDN library.","needQuote":true,"needEscape":true,"extradata":"MT","source":"For more information, please see the existing documentation for `IRunningObjectTable::NoteChangeTime` in the MSDN library."},{"pos":[8348,8384],"content":"The ROT entry of the changed object.","needQuote":true,"needEscape":true,"nodes":[{"content":"The ROT entry of the changed object.","pos":[0,36]}]},{"pos":[8476,8519],"content":"Reference to the object's last change time.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reference to the object's last change time.","pos":[0,43]}]},{"pos":[9324,9389],"content":"Registers that the supplied object has entered the running state.","needQuote":true,"needEscape":true,"nodes":[{"content":"Registers that the supplied object has entered the running state.","pos":[0,65]}]},{"pos":[9401,9517],"content":"For more information, please see the existing documentation for <ph id=\"ph1\">`IRunningObjectTable::Register`</ph> in the MSDN library.","needQuote":true,"needEscape":true,"extradata":"MT","source":"For more information, please see the existing documentation for `IRunningObjectTable::Register` in the MSDN library."},{"pos":[9756,9915],"content":"Specifies whether the Running Object Table's (ROT) reference to <ph id=\"ph1\">`punkObject`</ph> is weak or strong, and controls access to the object through its entry in the ROT.","needQuote":true,"needEscape":true,"source":"Specifies whether the Running Object Table's (ROT) reference to `punkObject` is weak or strong, and controls access to the object through its entry in the ROT."},{"pos":[9982,10034],"content":"Reference to the object being registered as running.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reference to the object being registered as running.","pos":[0,52]}]},{"pos":[10134,10188],"content":"Reference to the moniker that identifies <ph id=\"ph1\">`punkObject`</ph>.","needQuote":true,"needEscape":true,"source":"Reference to the moniker that identifies `punkObject`."},{"pos":[10255,10501],"content":"Reference to a 32-bit value that can be used to identify this ROT entry in subsequent calls to &lt;xref:System.Runtime.InteropServices.UCOMIRunningObjectTable.Revoke<bpt id=\"p1\">*</bpt>&gt; or &lt;xref:System.Runtime.InteropServices.UCOMIRunningObjectTable.NoteChangeTime<ept id=\"p1\">*</ept>&gt;.","needQuote":true,"needEscape":true,"source":"Reference to a 32-bit value that can be used to identify this ROT entry in subsequent calls to <xref:System.Runtime.InteropServices.UCOMIRunningObjectTable.Revoke*> or <xref:System.Runtime.InteropServices.UCOMIRunningObjectTable.NoteChangeTime*>."},{"pos":[11068,11114],"content":"Unregisters the specified object from the ROT.","needQuote":true,"needEscape":true,"nodes":[{"content":"Unregisters the specified object from the ROT.","pos":[0,46]}]},{"pos":[11126,11240],"content":"For more information, please see the existing documentation for <ph id=\"ph1\">`IRunningObjectTable::Revoke`</ph> in the MSDN library.","needQuote":true,"needEscape":true,"extradata":"MT","source":"For more information, please see the existing documentation for `IRunningObjectTable::Revoke` in the MSDN library."},{"pos":[11382,11406],"content":"The ROT entry to revoke.","needQuote":true,"needEscape":true,"nodes":[{"content":"The ROT entry to revoke.","pos":[0,24]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Runtime.InteropServices.UCOMIRunningObjectTable\n  id: UCOMIRunningObjectTable\n  children:\n  - System.Runtime.InteropServices.UCOMIRunningObjectTable.EnumRunning(System.Runtime.InteropServices.UCOMIEnumMoniker@)\n  - System.Runtime.InteropServices.UCOMIRunningObjectTable.GetObject(System.Runtime.InteropServices.UCOMIMoniker,System.Object@)\n  - System.Runtime.InteropServices.UCOMIRunningObjectTable.GetTimeOfLastChange(System.Runtime.InteropServices.UCOMIMoniker,System.Runtime.InteropServices.FILETIME@)\n  - System.Runtime.InteropServices.UCOMIRunningObjectTable.IsRunning(System.Runtime.InteropServices.UCOMIMoniker)\n  - System.Runtime.InteropServices.UCOMIRunningObjectTable.NoteChangeTime(System.Int32,System.Runtime.InteropServices.FILETIME@)\n  - System.Runtime.InteropServices.UCOMIRunningObjectTable.Register(System.Int32,System.Object,System.Runtime.InteropServices.UCOMIMoniker,System.Int32@)\n  - System.Runtime.InteropServices.UCOMIRunningObjectTable.Revoke(System.Int32)\n  langs:\n  - csharp\n  name: UCOMIRunningObjectTable\n  nameWithType: UCOMIRunningObjectTable\n  fullName: System.Runtime.InteropServices.UCOMIRunningObjectTable\n  type: Interface\n  summary: Use &lt;xref:System.Runtime.InteropServices.ComTypes.IRunningObjectTable?displayProperty=fullName&gt; instead.\n  remarks: For more information, please see the existing documentation for `IRunningObjectTable` in the com subfolder of the MSDN library.\n  syntax:\n    content: >-\n      [System.Obsolete(\"Use System.Runtime.InteropServices.ComTypes.IRunningObjectTable instead. http://go.microsoft.com/fwlink/?linkid=14202\", false)]\n\n      [System.Runtime.InteropServices.Guid(\"00000010-0000-0000-C000-000000000046\")]\n\n      [System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)]\n\n      public interface UCOMIRunningObjectTable\n  implements: []\n  platform:\n  - net462\n- uid: System.Runtime.InteropServices.UCOMIRunningObjectTable.EnumRunning(System.Runtime.InteropServices.UCOMIEnumMoniker@)\n  id: EnumRunning(System.Runtime.InteropServices.UCOMIEnumMoniker@)\n  parent: System.Runtime.InteropServices.UCOMIRunningObjectTable\n  langs:\n  - csharp\n  name: EnumRunning(UCOMIEnumMoniker)\n  nameWithType: UCOMIRunningObjectTable.EnumRunning(UCOMIEnumMoniker)\n  fullName: System.Runtime.InteropServices.UCOMIRunningObjectTable.EnumRunning(UCOMIEnumMoniker)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.InteropServices\n  summary: Enumerates the objects currently registered as running.\n  remarks: For more information, please see the existing documentation for `IRunningObjectTable::EnumRunning` in the MSDN library.\n  syntax:\n    content: public void EnumRunning (out System.Runtime.InteropServices.UCOMIEnumMoniker ppenumMoniker);\n    parameters:\n    - id: ppenumMoniker\n      type: System.Runtime.InteropServices.UCOMIEnumMoniker\n      description: On successful return, the new enumerator for the ROT.\n  overload: System.Runtime.InteropServices.UCOMIRunningObjectTable.EnumRunning*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.InteropServices.UCOMIRunningObjectTable.GetObject(System.Runtime.InteropServices.UCOMIMoniker,System.Object@)\n  id: GetObject(System.Runtime.InteropServices.UCOMIMoniker,System.Object@)\n  parent: System.Runtime.InteropServices.UCOMIRunningObjectTable\n  langs:\n  - csharp\n  name: GetObject(UCOMIMoniker,Object)\n  nameWithType: UCOMIRunningObjectTable.GetObject(UCOMIMoniker,Object)\n  fullName: System.Runtime.InteropServices.UCOMIRunningObjectTable.GetObject(UCOMIMoniker,Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.InteropServices\n  summary: Returns the registered object if the supplied object name is registered as running.\n  remarks: For more information, please see the existing documentation for `IRunningObjectTable::GetObject` in the MSDN library.\n  syntax:\n    content: public void GetObject (System.Runtime.InteropServices.UCOMIMoniker pmkObjectName, out object ppunkObject);\n    parameters:\n    - id: pmkObjectName\n      type: System.Runtime.InteropServices.UCOMIMoniker\n      description: Reference to the moniker to search for in the ROT.\n    - id: ppunkObject\n      type: System.Object\n      description: On successful return, contains the requested running object.\n  overload: System.Runtime.InteropServices.UCOMIRunningObjectTable.GetObject*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.InteropServices.UCOMIRunningObjectTable.GetTimeOfLastChange(System.Runtime.InteropServices.UCOMIMoniker,System.Runtime.InteropServices.FILETIME@)\n  id: GetTimeOfLastChange(System.Runtime.InteropServices.UCOMIMoniker,System.Runtime.InteropServices.FILETIME@)\n  parent: System.Runtime.InteropServices.UCOMIRunningObjectTable\n  langs:\n  - csharp\n  name: GetTimeOfLastChange(UCOMIMoniker,FILETIME)\n  nameWithType: UCOMIRunningObjectTable.GetTimeOfLastChange(UCOMIMoniker,FILETIME)\n  fullName: System.Runtime.InteropServices.UCOMIRunningObjectTable.GetTimeOfLastChange(UCOMIMoniker,FILETIME)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.InteropServices\n  summary: Searches for this moniker in the ROT and reports the recorded time of change, if present.\n  remarks: For more information, please see the existing documentation for `IRunningObjectTable::GetTimeOfLastChange` in the MSDN library.\n  syntax:\n    content: public void GetTimeOfLastChange (System.Runtime.InteropServices.UCOMIMoniker pmkObjectName, out System.Runtime.InteropServices.FILETIME pfiletime);\n    parameters:\n    - id: pmkObjectName\n      type: System.Runtime.InteropServices.UCOMIMoniker\n      description: Reference to the moniker to search for in the ROT.\n    - id: pfiletime\n      type: System.Runtime.InteropServices.FILETIME\n      description: On successful return, contains the objects last change time.\n  overload: System.Runtime.InteropServices.UCOMIRunningObjectTable.GetTimeOfLastChange*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.InteropServices.UCOMIRunningObjectTable.IsRunning(System.Runtime.InteropServices.UCOMIMoniker)\n  id: IsRunning(System.Runtime.InteropServices.UCOMIMoniker)\n  parent: System.Runtime.InteropServices.UCOMIRunningObjectTable\n  langs:\n  - csharp\n  name: IsRunning(UCOMIMoniker)\n  nameWithType: UCOMIRunningObjectTable.IsRunning(UCOMIMoniker)\n  fullName: System.Runtime.InteropServices.UCOMIRunningObjectTable.IsRunning(UCOMIMoniker)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.InteropServices\n  summary: Determines if the specified moniker is currently registered in the Running Object Table.\n  remarks: For more information, please see the existing documentation for `IRunningObjectTable::IsRunning` in the MSDN library.\n  syntax:\n    content: public void IsRunning (System.Runtime.InteropServices.UCOMIMoniker pmkObjectName);\n    parameters:\n    - id: pmkObjectName\n      type: System.Runtime.InteropServices.UCOMIMoniker\n      description: Reference to the moniker to search for in the Running Object Table.\n  overload: System.Runtime.InteropServices.UCOMIRunningObjectTable.IsRunning*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.InteropServices.UCOMIRunningObjectTable.NoteChangeTime(System.Int32,System.Runtime.InteropServices.FILETIME@)\n  id: NoteChangeTime(System.Int32,System.Runtime.InteropServices.FILETIME@)\n  parent: System.Runtime.InteropServices.UCOMIRunningObjectTable\n  langs:\n  - csharp\n  name: NoteChangeTime(Int32,FILETIME)\n  nameWithType: UCOMIRunningObjectTable.NoteChangeTime(Int32,FILETIME)\n  fullName: System.Runtime.InteropServices.UCOMIRunningObjectTable.NoteChangeTime(Int32,FILETIME)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.InteropServices\n  summary: Makes a note of the time that a particular object has changed so <xref uid=\"langword_csharp_IMoniker::GetTimeOfLastChange\" name=\"IMoniker::GetTimeOfLastChange\" href=\"\"></xref> can report an appropriate change time.\n  remarks: For more information, please see the existing documentation for `IRunningObjectTable::NoteChangeTime` in the MSDN library.\n  syntax:\n    content: public void NoteChangeTime (int dwRegister, ref System.Runtime.InteropServices.FILETIME pfiletime);\n    parameters:\n    - id: dwRegister\n      type: System.Int32\n      description: The ROT entry of the changed object.\n    - id: pfiletime\n      type: System.Runtime.InteropServices.FILETIME\n      description: Reference to the object's last change time.\n  overload: System.Runtime.InteropServices.UCOMIRunningObjectTable.NoteChangeTime*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.InteropServices.UCOMIRunningObjectTable.Register(System.Int32,System.Object,System.Runtime.InteropServices.UCOMIMoniker,System.Int32@)\n  id: Register(System.Int32,System.Object,System.Runtime.InteropServices.UCOMIMoniker,System.Int32@)\n  parent: System.Runtime.InteropServices.UCOMIRunningObjectTable\n  langs:\n  - csharp\n  name: Register(Int32,Object,UCOMIMoniker,Int32)\n  nameWithType: UCOMIRunningObjectTable.Register(Int32,Object,UCOMIMoniker,Int32)\n  fullName: System.Runtime.InteropServices.UCOMIRunningObjectTable.Register(Int32,Object,UCOMIMoniker,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.InteropServices\n  summary: Registers that the supplied object has entered the running state.\n  remarks: For more information, please see the existing documentation for `IRunningObjectTable::Register` in the MSDN library.\n  syntax:\n    content: public void Register (int grfFlags, object punkObject, System.Runtime.InteropServices.UCOMIMoniker pmkObjectName, out int pdwRegister);\n    parameters:\n    - id: grfFlags\n      type: System.Int32\n      description: Specifies whether the Running Object Table's (ROT) reference to `punkObject` is weak or strong, and controls access to the object through its entry in the ROT.\n    - id: punkObject\n      type: System.Object\n      description: Reference to the object being registered as running.\n    - id: pmkObjectName\n      type: System.Runtime.InteropServices.UCOMIMoniker\n      description: Reference to the moniker that identifies `punkObject`.\n    - id: pdwRegister\n      type: System.Int32\n      description: Reference to a 32-bit value that can be used to identify this ROT entry in subsequent calls to <xref:System.Runtime.InteropServices.UCOMIRunningObjectTable.Revoke*> or <xref:System.Runtime.InteropServices.UCOMIRunningObjectTable.NoteChangeTime*>.\n  overload: System.Runtime.InteropServices.UCOMIRunningObjectTable.Register*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.InteropServices.UCOMIRunningObjectTable.Revoke(System.Int32)\n  id: Revoke(System.Int32)\n  parent: System.Runtime.InteropServices.UCOMIRunningObjectTable\n  langs:\n  - csharp\n  name: Revoke(Int32)\n  nameWithType: UCOMIRunningObjectTable.Revoke(Int32)\n  fullName: System.Runtime.InteropServices.UCOMIRunningObjectTable.Revoke(Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.InteropServices\n  summary: Unregisters the specified object from the ROT.\n  remarks: For more information, please see the existing documentation for `IRunningObjectTable::Revoke` in the MSDN library.\n  syntax:\n    content: public void Revoke (int dwRegister);\n    parameters:\n    - id: dwRegister\n      type: System.Int32\n      description: The ROT entry to revoke.\n  overload: System.Runtime.InteropServices.UCOMIRunningObjectTable.Revoke*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Runtime.InteropServices.UCOMIRunningObjectTable.EnumRunning(System.Runtime.InteropServices.UCOMIEnumMoniker@)\n  parent: System.Runtime.InteropServices.UCOMIRunningObjectTable\n  isExternal: false\n  name: EnumRunning(UCOMIEnumMoniker)\n  nameWithType: UCOMIRunningObjectTable.EnumRunning(UCOMIEnumMoniker)\n  fullName: System.Runtime.InteropServices.UCOMIRunningObjectTable.EnumRunning(UCOMIEnumMoniker)\n- uid: System.Runtime.InteropServices.UCOMIEnumMoniker\n  parent: System.Runtime.InteropServices\n  isExternal: false\n  name: UCOMIEnumMoniker\n  nameWithType: UCOMIEnumMoniker\n  fullName: System.Runtime.InteropServices.UCOMIEnumMoniker\n- uid: System.Runtime.InteropServices.UCOMIRunningObjectTable.GetObject(System.Runtime.InteropServices.UCOMIMoniker,System.Object@)\n  parent: System.Runtime.InteropServices.UCOMIRunningObjectTable\n  isExternal: false\n  name: GetObject(UCOMIMoniker,Object)\n  nameWithType: UCOMIRunningObjectTable.GetObject(UCOMIMoniker,Object)\n  fullName: System.Runtime.InteropServices.UCOMIRunningObjectTable.GetObject(UCOMIMoniker,Object)\n- uid: System.Runtime.InteropServices.UCOMIMoniker\n  parent: System.Runtime.InteropServices\n  isExternal: false\n  name: UCOMIMoniker\n  nameWithType: UCOMIMoniker\n  fullName: System.Runtime.InteropServices.UCOMIMoniker\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Runtime.InteropServices.UCOMIRunningObjectTable.GetTimeOfLastChange(System.Runtime.InteropServices.UCOMIMoniker,System.Runtime.InteropServices.FILETIME@)\n  parent: System.Runtime.InteropServices.UCOMIRunningObjectTable\n  isExternal: false\n  name: GetTimeOfLastChange(UCOMIMoniker,FILETIME)\n  nameWithType: UCOMIRunningObjectTable.GetTimeOfLastChange(UCOMIMoniker,FILETIME)\n  fullName: System.Runtime.InteropServices.UCOMIRunningObjectTable.GetTimeOfLastChange(UCOMIMoniker,FILETIME)\n- uid: System.Runtime.InteropServices.FILETIME\n  parent: System.Runtime.InteropServices\n  isExternal: false\n  name: FILETIME\n  nameWithType: FILETIME\n  fullName: System.Runtime.InteropServices.FILETIME\n- uid: System.Runtime.InteropServices.UCOMIRunningObjectTable.IsRunning(System.Runtime.InteropServices.UCOMIMoniker)\n  parent: System.Runtime.InteropServices.UCOMIRunningObjectTable\n  isExternal: false\n  name: IsRunning(UCOMIMoniker)\n  nameWithType: UCOMIRunningObjectTable.IsRunning(UCOMIMoniker)\n  fullName: System.Runtime.InteropServices.UCOMIRunningObjectTable.IsRunning(UCOMIMoniker)\n- uid: System.Runtime.InteropServices.UCOMIRunningObjectTable.NoteChangeTime(System.Int32,System.Runtime.InteropServices.FILETIME@)\n  parent: System.Runtime.InteropServices.UCOMIRunningObjectTable\n  isExternal: false\n  name: NoteChangeTime(Int32,FILETIME)\n  nameWithType: UCOMIRunningObjectTable.NoteChangeTime(Int32,FILETIME)\n  fullName: System.Runtime.InteropServices.UCOMIRunningObjectTable.NoteChangeTime(Int32,FILETIME)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Runtime.InteropServices.UCOMIRunningObjectTable.Register(System.Int32,System.Object,System.Runtime.InteropServices.UCOMIMoniker,System.Int32@)\n  parent: System.Runtime.InteropServices.UCOMIRunningObjectTable\n  isExternal: false\n  name: Register(Int32,Object,UCOMIMoniker,Int32)\n  nameWithType: UCOMIRunningObjectTable.Register(Int32,Object,UCOMIMoniker,Int32)\n  fullName: System.Runtime.InteropServices.UCOMIRunningObjectTable.Register(Int32,Object,UCOMIMoniker,Int32)\n- uid: System.Runtime.InteropServices.UCOMIRunningObjectTable.Revoke(System.Int32)\n  parent: System.Runtime.InteropServices.UCOMIRunningObjectTable\n  isExternal: false\n  name: Revoke(Int32)\n  nameWithType: UCOMIRunningObjectTable.Revoke(Int32)\n  fullName: System.Runtime.InteropServices.UCOMIRunningObjectTable.Revoke(Int32)\n- uid: System.Runtime.InteropServices.UCOMIRunningObjectTable.EnumRunning*\n  parent: System.Runtime.InteropServices.UCOMIRunningObjectTable\n  isExternal: false\n  name: EnumRunning\n  nameWithType: UCOMIRunningObjectTable.EnumRunning\n- uid: System.Runtime.InteropServices.UCOMIRunningObjectTable.GetObject*\n  parent: System.Runtime.InteropServices.UCOMIRunningObjectTable\n  isExternal: false\n  name: GetObject\n  nameWithType: UCOMIRunningObjectTable.GetObject\n- uid: System.Runtime.InteropServices.UCOMIRunningObjectTable.GetTimeOfLastChange*\n  parent: System.Runtime.InteropServices.UCOMIRunningObjectTable\n  isExternal: false\n  name: GetTimeOfLastChange\n  nameWithType: UCOMIRunningObjectTable.GetTimeOfLastChange\n- uid: System.Runtime.InteropServices.UCOMIRunningObjectTable.IsRunning*\n  parent: System.Runtime.InteropServices.UCOMIRunningObjectTable\n  isExternal: false\n  name: IsRunning\n  nameWithType: UCOMIRunningObjectTable.IsRunning\n- uid: System.Runtime.InteropServices.UCOMIRunningObjectTable.NoteChangeTime*\n  parent: System.Runtime.InteropServices.UCOMIRunningObjectTable\n  isExternal: false\n  name: NoteChangeTime\n  nameWithType: UCOMIRunningObjectTable.NoteChangeTime\n- uid: System.Runtime.InteropServices.UCOMIRunningObjectTable.Register*\n  parent: System.Runtime.InteropServices.UCOMIRunningObjectTable\n  isExternal: false\n  name: Register\n  nameWithType: UCOMIRunningObjectTable.Register\n- uid: System.Runtime.InteropServices.UCOMIRunningObjectTable.Revoke*\n  parent: System.Runtime.InteropServices.UCOMIRunningObjectTable\n  isExternal: false\n  name: Revoke\n  nameWithType: UCOMIRunningObjectTable.Revoke\n"}