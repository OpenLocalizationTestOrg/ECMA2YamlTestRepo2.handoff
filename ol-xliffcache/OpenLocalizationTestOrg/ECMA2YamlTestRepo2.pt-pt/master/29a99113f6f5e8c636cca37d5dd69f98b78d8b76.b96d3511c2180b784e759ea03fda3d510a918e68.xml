{"nodes":[{"pos":[3286,3571],"content":"Represents a collection of key/value pairs that are organized based on the hash code of the key.       To browse the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/collections/hashtable.cs#10fefb6e0ae510dd).","needQuote":false,"needEscape":true,"nodes":[{"content":"Represents a collection of key/value pairs that are organized based on the hash code of the key.","pos":[0,96]},{"content":"To browse the .NET Framework source code for this type, see the <bpt id=\"p1\">[</bpt>Reference Source<ept id=\"p1\">](http://referencesource.microsoft.com/#mscorlib/system/collections/hashtable.cs#10fefb6e0ae510dd)</ept>.","pos":[103,283],"source":"       To browse the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/collections/hashtable.cs#10fefb6e0ae510dd)."}]},{"pos":[3585,8561],"content":"> [!NOTE] >  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/collections/hashtable.cs#10fefb6e0ae510dd). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).       Each element is a key/value pair stored in a <xref:System.Collections.DictionaryEntry> object. A key cannot be `null`, but a value can be.       The objects used as keys by a Hashtable are required to override the <xref:System.Object.GetHashCode%2A?displayProperty=fullName> method (or the <xref:System.Collections.IHashCodeProvider> interface) and the <xref:System.Object.Equals%2A?displayProperty=fullName> method (or the <xref:System.Collections.IComparer> interface). The implementation of both methods and interfaces must handle case sensitivity the same way; otherwise, the Hashtable might behave incorrectly. For example, when creating a Hashtable, you must use the <xref:System.Collections.CaseInsensitiveHashCodeProvider> class (or any case-insensitive <xref:System.Collections.IHashCodeProvider> implementation) with the <xref:System.Collections.CaseInsensitiveComparer> class (or any case-insensitive <xref:System.Collections.IComparer> implementation).       Furthermore, these methods must produce the same results when called with the same parameters while the key exists in the Hashtable. An alternative is to use a Hashtable constructor with an <xref:System.Collections.IEqualityComparer> parameter. If key equality were simply reference equality, the inherited implementation of <xref:System.Object.GetHashCode%2A?displayProperty=fullName> and <xref:System.Object.Equals%2A?displayProperty=fullName> would suffice.       Key objects must be immutable as long as they are used as keys in the Hashtable.       When an element is added to the Hashtable, the element is placed into a bucket based on the hash code of the key. Subsequent lookups of the key use the hash code of the key to search in only one particular bucket, thus substantially reducing the number of key comparisons required to find an element.       The load factor of a Hashtable determines the maximum ratio of elements to buckets. Smaller load factors cause faster average lookup times at the cost of increased memory consumption. The default load factor of 1.0 generally provides the best balance between speed and size. A different load factor can also be specified when the Hashtable is created.       As elements are added to a Hashtable, the actual load factor of the Hashtable increases. When the actual load factor reaches the specified load factor, the number of buckets in the Hashtable is automatically increased to the smallest prime number that is larger than twice the current number of Hashtable buckets.       Each key object in the Hashtable must provide its own hash function, which can be accessed by calling <xref:System.Collections.Hashtable.GetHash%2A>. However, any object implementing <xref:System.Collections.IHashCodeProvider> can be passed to a Hashtable constructor, and that hash function is used for all objects in the table.       The capacity of a Hashtable is the number of elements the Hashtable can hold. As elements are added to a Hashtable, the capacity is automatically increased as required through reallocation.       For very large Hashtable objects, you can increase the maximum capacity to 2 billion elements on a 64-bit system by setting the `enabled` attribute of the  configuration element to `true` in the run-time environment.       The `foreach` statement of the C# language (`For Each` in Visual Basic) returns an object of the type of the elements in the collection. Since each element of the Hashtable is a key/value pair, the element type is not the type of the key or the type of the value. Instead, the element type is <xref:System.Collections.DictionaryEntry>. For example:       [!code-cpp[System.Collections.Hashtable_ClassExample#01](~/add/codesnippet/cpp/t-system.collections.has_1.cpp)]  [!code-cs[System.Collections.Hashtable_ClassExample#01](~/add/codesnippet/csharp/t-system.collections.has_1.cs)]  [!code-vb[System.Collections.Hashtable_ClassExample#01](~/add/codesnippet/visualbasic/t-system.collections.has_1.vb)]       The `foreach` statement is a wrapper around the enumerator, which only allows reading from, not writing to, the collection.       Because serializing and deserializing an enumerator for a Hashtable can cause the elements to become reordered, it is not possible to continue enumeration without calling the <xref:System.Collections.IEnumerator.Reset%2A> method.      > [!NOTE] >  Because keys can be inherited and their behavior changed, their absolute uniqueness cannot be guaranteed by comparisons using the <xref:System.Type.Equals%2A> method.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"<ph id=\"ph1\">&gt; [!NOTE]</ph> &gt;  To view the .NET Framework source code for this type, see the <bpt id=\"p1\">[</bpt>Reference Source<ept id=\"p1\">](http://referencesource.microsoft.com/#mscorlib/system/collections/hashtable.cs#10fefb6e0ae510dd)</ept>.","pos":[0,191],"source":"> [!NOTE] >  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/collections/hashtable.cs#10fefb6e0ae510dd)."},{"content":"You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <bpt id=\"p1\">[</bpt>instructions<ept id=\"p1\">](http://referencesource.microsoft.com/)</ept>.","pos":[192,420],"source":" You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/)."},{"content":"Each element is a key/value pair stored in a &lt;xref:System.Collections.DictionaryEntry&gt; object.","pos":[427,521],"source":"       Each element is a key/value pair stored in a <xref:System.Collections.DictionaryEntry> object."},{"content":"A key cannot be <ph id=\"ph1\">`null`</ph>, but a value can be.","pos":[522,565],"source":" A key cannot be `null`, but a value can be."},{"content":"The objects used as keys by a Hashtable are required to override the &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt; method (or the &lt;xref:System.Collections.IHashCodeProvider&gt; interface) and the &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt; method (or the &lt;xref:System.Collections.IComparer&gt; interface).","pos":[572,898],"source":"       The objects used as keys by a Hashtable are required to override the <xref:System.Object.GetHashCode%2A?displayProperty=fullName> method (or the <xref:System.Collections.IHashCodeProvider> interface) and the <xref:System.Object.Equals%2A?displayProperty=fullName> method (or the <xref:System.Collections.IComparer> interface)."},{"content":"The implementation of both methods and interfaces must handle case sensitivity the same way; otherwise, the Hashtable might behave incorrectly.","pos":[899,1042]},{"content":"For example, when creating a Hashtable, you must use the &lt;xref:System.Collections.CaseInsensitiveHashCodeProvider&gt; class (or any case-insensitive &lt;xref:System.Collections.IHashCodeProvider&gt; implementation) with the &lt;xref:System.Collections.CaseInsensitiveComparer&gt; class (or any case-insensitive &lt;xref:System.Collections.IComparer&gt; implementation).","pos":[1043,1391],"source":" For example, when creating a Hashtable, you must use the <xref:System.Collections.CaseInsensitiveHashCodeProvider> class (or any case-insensitive <xref:System.Collections.IHashCodeProvider> implementation) with the <xref:System.Collections.CaseInsensitiveComparer> class (or any case-insensitive <xref:System.Collections.IComparer> implementation)."},{"content":"Furthermore, these methods must produce the same results when called with the same parameters while the key exists in the Hashtable.","pos":[1398,1530]},{"content":"An alternative is to use a Hashtable constructor with an &lt;xref:System.Collections.IEqualityComparer&gt; parameter.","pos":[1531,1642],"source":" An alternative is to use a Hashtable constructor with an <xref:System.Collections.IEqualityComparer> parameter."},{"content":"If key equality were simply reference equality, the inherited implementation of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt; and &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt; would suffice.","pos":[1643,1858],"source":" If key equality were simply reference equality, the inherited implementation of <xref:System.Object.GetHashCode%2A?displayProperty=fullName> and <xref:System.Object.Equals%2A?displayProperty=fullName> would suffice."},{"content":"Key objects must be immutable as long as they are used as keys in the Hashtable.","pos":[1865,1945]},{"content":"When an element is added to the Hashtable, the element is placed into a bucket based on the hash code of the key.","pos":[1952,2065]},{"content":"Subsequent lookups of the key use the hash code of the key to search in only one particular bucket, thus substantially reducing the number of key comparisons required to find an element.","pos":[2066,2252]},{"content":"The load factor of a Hashtable determines the maximum ratio of elements to buckets.","pos":[2259,2342]},{"content":"Smaller load factors cause faster average lookup times at the cost of increased memory consumption.","pos":[2343,2442]},{"content":"The default load factor of 1.0 generally provides the best balance between speed and size.","pos":[2443,2533]},{"content":"A different load factor can also be specified when the Hashtable is created.","pos":[2534,2610]},{"content":"As elements are added to a Hashtable, the actual load factor of the Hashtable increases.","pos":[2617,2705]},{"content":"When the actual load factor reaches the specified load factor, the number of buckets in the Hashtable is automatically increased to the smallest prime number that is larger than twice the current number of Hashtable buckets.","pos":[2706,2930]},{"content":"Each key object in the Hashtable must provide its own hash function, which can be accessed by calling &lt;xref:System.Collections.Hashtable.GetHash%2A&gt;.","pos":[2937,3086],"source":"       Each key object in the Hashtable must provide its own hash function, which can be accessed by calling <xref:System.Collections.Hashtable.GetHash%2A>."},{"content":"However, any object implementing &lt;xref:System.Collections.IHashCodeProvider&gt; can be passed to a Hashtable constructor, and that hash function is used for all objects in the table.","pos":[3087,3266],"source":" However, any object implementing <xref:System.Collections.IHashCodeProvider> can be passed to a Hashtable constructor, and that hash function is used for all objects in the table."},{"content":"The capacity of a Hashtable is the number of elements the Hashtable can hold.","pos":[3273,3350]},{"content":"As elements are added to a Hashtable, the capacity is automatically increased as required through reallocation.","pos":[3351,3462]},{"content":"For very large Hashtable objects, you can increase the maximum capacity to 2 billion elements on a 64-bit system by setting the <ph id=\"ph1\">`enabled`</ph> attribute of the  configuration element to <ph id=\"ph2\">`true`</ph> in the run-time environment.","pos":[3469,3685],"source":"       For very large Hashtable objects, you can increase the maximum capacity to 2 billion elements on a 64-bit system by setting the `enabled` attribute of the  configuration element to `true` in the run-time environment."},{"content":"The <ph id=\"ph1\">`foreach`</ph> statement of the C# language (<ph id=\"ph2\">`For Each`</ph> in Visual Basic) returns an object of the type of the elements in the collection.","pos":[3692,3828],"source":"       The `foreach` statement of the C# language (`For Each` in Visual Basic) returns an object of the type of the elements in the collection."},{"content":"Since each element of the Hashtable is a key/value pair, the element type is not the type of the key or the type of the value.","pos":[3829,3955]},{"content":"Instead, the element type is &lt;xref:System.Collections.DictionaryEntry&gt;.","pos":[3956,4027],"source":" Instead, the element type is <xref:System.Collections.DictionaryEntry>."},{"content":"For example:       <bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>System.Collections.Hashtable_ClassExample#01<ept id=\"p2\">](~/add/codesnippet/cpp/t-system.collections.has_1.cpp)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-cs</bpt><bpt id=\"p4\">[</bpt>System.Collections.Hashtable_ClassExample#01<ept id=\"p4\">](~/add/codesnippet/csharp/t-system.collections.has_1.cs)</ept><ept id=\"p3\">]</ept>  <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.Collections.Hashtable_ClassExample#01<ept id=\"p6\">](~/add/codesnippet/visualbasic/t-system.collections.has_1.vb)</ept><ept id=\"p5\">]</ept>       The <ph id=\"ph1\">`foreach`</ph> statement is a wrapper around the enumerator, which only allows reading from, not writing to, the collection.","pos":[4028,4521],"source":" For example:       [!code-cpp[System.Collections.Hashtable_ClassExample#01](~/add/codesnippet/cpp/t-system.collections.has_1.cpp)]  [!code-cs[System.Collections.Hashtable_ClassExample#01](~/add/codesnippet/csharp/t-system.collections.has_1.cs)]  [!code-vb[System.Collections.Hashtable_ClassExample#01](~/add/codesnippet/visualbasic/t-system.collections.has_1.vb)]       The `foreach` statement is a wrapper around the enumerator, which only allows reading from, not writing to, the collection."},{"content":"Because serializing and deserializing an enumerator for a Hashtable can cause the elements to become reordered, it is not possible to continue enumeration without calling the &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; method.","pos":[4528,4757],"source":"       Because serializing and deserializing an enumerator for a Hashtable can cause the elements to become reordered, it is not possible to continue enumeration without calling the <xref:System.Collections.IEnumerator.Reset%2A> method."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Because keys can be inherited and their behavior changed, their absolute uniqueness cannot be guaranteed by comparisons using the &lt;xref:System.Type.Equals%2A&gt; method.","pos":[4763,4942],"source":"      > [!NOTE] >  Because keys can be inherited and their behavior changed, their absolute uniqueness cannot be guaranteed by comparisons using the <xref:System.Type.Equals%2A> method."}]},{"pos":[10069,10248],"content":"Initializes a new, empty instance of the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class using the default initial capacity, load factor, hash code provider, and comparer.","needQuote":true,"needEscape":true,"source":"Initializes a new, empty instance of the <xref href=\"System.Collections.Hashtable\"></xref> class using the default initial capacity, load factor, hash code provider, and comparer."},{"pos":[10261,11302],"content":"A hash table's capacity is used to calculate the optimal number of hash table buckets based on the load factor. Capacity is automatically increased as required.       The load factor is the maximum ratio of elements to buckets. A smaller load factor means faster lookup at the cost of increased memory consumption.       When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.       The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable> object. The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.       The comparer determines whether two keys are equal. Every key in a <xref:System.Collections.Hashtable> must be unique. The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName>.       This constructor is an O(1) operation.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"A hash table's capacity is used to calculate the optimal number of hash table buckets based on the load factor. Capacity is automatically increased as required.       The load factor is the maximum ratio of elements to buckets. A smaller load factor means faster lookup at the cost of increased memory consumption.       When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.       The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable> object. The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.       The comparer determines whether two keys are equal. Every key in a <xref:System.Collections.Hashtable> must be unique. The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName>.       This constructor is an O(1) operation.","pos":[0,1031],"nodes":[{"content":"A hash table's capacity is used to calculate the optimal number of hash table buckets based on the load factor.","pos":[0,111]},{"content":"Capacity is automatically increased as required.","pos":[112,160]},{"content":"The load factor is the maximum ratio of elements to buckets.","pos":[167,227]},{"content":"A smaller load factor means faster lookup at the cost of increased memory consumption.","pos":[228,314]},{"content":"When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.","pos":[321,518]},{"content":"The hash code provider dispenses hash codes for keys in the &lt;xref:System.Collections.Hashtable&gt; object.","pos":[525,628],"source":"       The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable> object."},{"content":"The default hash code provider is the key's implementation of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;.","pos":[629,752],"source":" The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=fullName>."},{"content":"The comparer determines whether two keys are equal.","pos":[759,810]},{"content":"Every key in a &lt;xref:System.Collections.Hashtable&gt; must be unique.","pos":[811,877],"source":" Every key in a <xref:System.Collections.Hashtable> must be unique."},{"content":"The default comparer is the key's implementation of &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.","pos":[878,986],"source":" The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName>."},{"content":"This constructor is an O(1) operation.","pos":[993,1031]}]}]},{"pos":[12445,12854],"content":"Initializes a new instance of the <xref href=\"System.Collections.Hashtable\"></xref> class by copying the elements from the specified dictionary to the new <xref href=\"System.Collections.Hashtable\"></xref> object. The new <xref href=\"System.Collections.Hashtable\"></xref> object has an initial capacity equal to the number of elements copied, and uses the default load factor, hash code provider, and comparer.","needQuote":true,"needEscape":true,"nodes":[{"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class by copying the elements from the specified dictionary to the new <bpt id=\"p2\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object.","pos":[0,212],"source":"Initializes a new instance of the <xref href=\"System.Collections.Hashtable\"></xref> class by copying the elements from the specified dictionary to the new <xref href=\"System.Collections.Hashtable\"></xref> object."},{"content":"The new <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object has an initial capacity equal to the number of elements copied, and uses the default load factor, hash code provider, and comparer.","pos":[213,409],"source":" The new <xref href=\"System.Collections.Hashtable\"></xref> object has an initial capacity equal to the number of elements copied, and uses the default load factor, hash code provider, and comparer."}]},{"pos":[12867,14149],"content":"The initial capacity is set to the number of elements in the source dictionary. Capacity is automatically increased as required based on the load factor.       The load factor is the maximum ratio of elements to buckets. A smaller load factor means faster lookup at the cost of increased memory consumption.       When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.       The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable> object. The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.       The comparer determines whether two keys are equal. Every key in a <xref:System.Collections.Hashtable> must be unique. The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName>.       The elements of the new <xref:System.Collections.Hashtable> are sorted in the same order in which the enumerator iterates through the <xref:System.Collections.IDictionary> object.       This constructor is an O(`n`) operation, where `n` is the number of elements in the `d` parameter.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The initial capacity is set to the number of elements in the source dictionary.","pos":[0,79]},{"content":"Capacity is automatically increased as required based on the load factor.","pos":[80,153]},{"content":"The load factor is the maximum ratio of elements to buckets.","pos":[160,220]},{"content":"A smaller load factor means faster lookup at the cost of increased memory consumption.","pos":[221,307]},{"content":"When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.","pos":[314,511]},{"content":"The hash code provider dispenses hash codes for keys in the &lt;xref:System.Collections.Hashtable&gt; object.","pos":[518,621],"source":"       The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable> object."},{"content":"The default hash code provider is the key's implementation of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;.","pos":[622,745],"source":" The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=fullName>."},{"content":"The comparer determines whether two keys are equal.","pos":[752,803]},{"content":"Every key in a &lt;xref:System.Collections.Hashtable&gt; must be unique.","pos":[804,870],"source":" Every key in a <xref:System.Collections.Hashtable> must be unique."},{"content":"The default comparer is the key's implementation of &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.","pos":[871,979],"source":" The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName>."},{"content":"The elements of the new &lt;xref:System.Collections.Hashtable&gt; are sorted in the same order in which the enumerator iterates through the &lt;xref:System.Collections.IDictionary&gt; object.","pos":[986,1165],"source":"       The elements of the new <xref:System.Collections.Hashtable> are sorted in the same order in which the enumerator iterates through the <xref:System.Collections.IDictionary> object."},{"content":"This constructor is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is the number of elements in the <ph id=\"ph3\">`d`</ph> parameter.","pos":[1172,1270],"source":"       This constructor is an O(`n`) operation, where `n` is the number of elements in the `d` parameter."}]},{"pos":[14924,15047],"content":"The &lt;xref:System.Collections.IDictionary&gt; object to copy to a new <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"The <xref:System.Collections.IDictionary> object to copy to a new <xref href=\"System.Collections.Hashtable\"></xref> object."},{"pos":[15212,15291],"content":"<ph id=\"ph1\">&lt;code&gt;d&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>d</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[15758,15976],"content":"Initializes a new, empty instance of the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class using the default initial capacity and load factor, and the specified &lt;xref:System.Collections.IEqualityComparer&gt; object.","needQuote":true,"needEscape":true,"source":"Initializes a new, empty instance of the <xref href=\"System.Collections.Hashtable\"></xref> class using the default initial capacity and load factor, and the specified <xref:System.Collections.IEqualityComparer> object."},{"pos":[15989,17620],"content":"A hash table's capacity is used to calculate the optimal number of hash table buckets based on the load factor. Capacity is automatically increased as required.       The load factor is the maximum ratio of elements to buckets. A smaller load factor means faster lookup at the cost of increased memory consumption.       When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.       The <xref:System.Collections.IEqualityComparer> object includes both the hash code provider and the comparer. If an <xref:System.Collections.IEqualityComparer> is used in the <xref:System.Collections.Hashtable> constructor, the objects used as keys in the <xref:System.Collections.Hashtable> object are not required to override the <xref:System.Object.GetHashCode%2A?displayProperty=fullName> and <xref:System.Object.Equals%2A?displayProperty=fullName> methods.       The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable>. The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.       The comparer determines whether two keys are equal. Every key in a <xref:System.Collections.Hashtable> must be unique. The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName>.       The <xref:System.Collections.IEqualityComparer> enables scenarios such as doing lookups with case-insensitive strings.       This constructor is an O(1) operation.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"A hash table's capacity is used to calculate the optimal number of hash table buckets based on the load factor. Capacity is automatically increased as required.       The load factor is the maximum ratio of elements to buckets. A smaller load factor means faster lookup at the cost of increased memory consumption.       When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.       The <xref:System.Collections.IEqualityComparer> object includes both the hash code provider and the comparer. If an <xref:System.Collections.IEqualityComparer> is used in the <xref:System.Collections.Hashtable> constructor, the objects used as keys in the <xref:System.Collections.Hashtable> object are not required to override the <xref:System.Object.GetHashCode%2A?displayProperty=fullName> and <xref:System.Object.Equals%2A?displayProperty=fullName> methods.       The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable>. The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.       The comparer determines whether two keys are equal. Every key in a <xref:System.Collections.Hashtable> must be unique. The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName>.       The <xref:System.Collections.IEqualityComparer> enables scenarios such as doing lookups with case-insensitive strings.       This constructor is an O(1) operation.","pos":[0,1617],"nodes":[{"content":"A hash table's capacity is used to calculate the optimal number of hash table buckets based on the load factor.","pos":[0,111]},{"content":"Capacity is automatically increased as required.","pos":[112,160]},{"content":"The load factor is the maximum ratio of elements to buckets.","pos":[167,227]},{"content":"A smaller load factor means faster lookup at the cost of increased memory consumption.","pos":[228,314]},{"content":"When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.","pos":[321,518]},{"content":"The &lt;xref:System.Collections.IEqualityComparer&gt; object includes both the hash code provider and the comparer.","pos":[525,634],"source":"       The <xref:System.Collections.IEqualityComparer> object includes both the hash code provider and the comparer."},{"content":"If an &lt;xref:System.Collections.IEqualityComparer&gt; is used in the &lt;xref:System.Collections.Hashtable&gt; constructor, the objects used as keys in the &lt;xref:System.Collections.Hashtable&gt; object are not required to override the &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt; and &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt; methods.","pos":[635,986],"source":" If an <xref:System.Collections.IEqualityComparer> is used in the <xref:System.Collections.Hashtable> constructor, the objects used as keys in the <xref:System.Collections.Hashtable> object are not required to override the <xref:System.Object.GetHashCode%2A?displayProperty=fullName> and <xref:System.Object.Equals%2A?displayProperty=fullName> methods."},{"content":"The hash code provider dispenses hash codes for keys in the &lt;xref:System.Collections.Hashtable&gt;.","pos":[993,1089],"source":"       The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable>."},{"content":"The default hash code provider is the key's implementation of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;.","pos":[1090,1213],"source":" The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=fullName>."},{"content":"The comparer determines whether two keys are equal.","pos":[1220,1271]},{"content":"Every key in a &lt;xref:System.Collections.Hashtable&gt; must be unique.","pos":[1272,1338],"source":" Every key in a <xref:System.Collections.Hashtable> must be unique."},{"content":"The default comparer is the key's implementation of &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.","pos":[1339,1447],"source":" The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName>."},{"content":"The &lt;xref:System.Collections.IEqualityComparer&gt; enables scenarios such as doing lookups with case-insensitive strings.","pos":[1454,1572],"source":"       The <xref:System.Collections.IEqualityComparer> enables scenarios such as doing lookups with case-insensitive strings."},{"content":"This constructor is an O(1) operation.","pos":[1579,1617]}]}]},{"pos":[18408,18993],"content":"The <xref:System.Collections.IEqualityComparer> object that defines the hash code provider and the comparer to use with the <xref href=\"System.Collections.Hashtable\"></xref> object.       -or-       <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> to use the default hash code provider and the default comparer. The default hash code provider is each key's implementation of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt; and the default comparer is each key's implementation of &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.","needQuote":false,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Collections.IEqualityComparer&gt; object that defines the hash code provider and the comparer to use with the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","pos":[0,181],"source":"The <xref:System.Collections.IEqualityComparer> object that defines the hash code provider and the comparer to use with the <xref href=\"System.Collections.Hashtable\"></xref> object."},{"content":"-or-       <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to use the default hash code provider and the default comparer.","pos":[188,323],"source":"       -or-       <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> to use the default hash code provider and the default comparer."},{"content":"The default hash code provider is each key's implementation of <ph id=\"ph1\">&amp;lt;</ph>xref:System.Object.GetHashCode%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph> and the default comparer is each key's implementation of <ph id=\"ph3\">&amp;lt;</ph>xref:System.Object.Equals%2A?displayProperty=fullName<ph id=\"ph4\">&amp;gt;</ph>.","pos":[324,573],"source":" The default hash code provider is each key's implementation of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt; and the default comparer is each key's implementation of &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;."}]},{"pos":[19442,19639],"content":"Initializes a new, empty instance of the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class using the specified initial capacity, and the default load factor, hash code provider, and comparer.","needQuote":true,"needEscape":true,"source":"Initializes a new, empty instance of the <xref href=\"System.Collections.Hashtable\"></xref> class using the specified initial capacity, and the default load factor, hash code provider, and comparer."},{"pos":[19652,20794],"content":"Specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Hashtable> object. Capacity is automatically increased as required based on the load factor.       The load factor is the maximum ratio of elements to buckets. A smaller load factor means faster lookup at the cost of increased memory consumption.       When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.       The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable>. The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.       The comparer determines whether two keys are equal. Every key in a <xref:System.Collections.Hashtable> must be unique. The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName>.       This constructor is an O(`n`) operation, where `n` is `capacity`.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the &lt;xref:System.Collections.Hashtable&gt; object.","pos":[0,167],"source":"Specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Hashtable> object."},{"content":"Capacity is automatically increased as required based on the load factor.","pos":[168,241]},{"content":"The load factor is the maximum ratio of elements to buckets.","pos":[248,308]},{"content":"A smaller load factor means faster lookup at the cost of increased memory consumption.","pos":[309,395]},{"content":"When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.","pos":[402,599]},{"content":"The hash code provider dispenses hash codes for keys in the &lt;xref:System.Collections.Hashtable&gt;.","pos":[606,702],"source":"       The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable>."},{"content":"The default hash code provider is the key's implementation of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;.","pos":[703,826],"source":" The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=fullName>."},{"content":"The comparer determines whether two keys are equal.","pos":[833,884]},{"content":"Every key in a &lt;xref:System.Collections.Hashtable&gt; must be unique.","pos":[885,951],"source":" Every key in a <xref:System.Collections.Hashtable> must be unique."},{"content":"The default comparer is the key's implementation of &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.","pos":[952,1060],"source":" The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName>."},{"content":"This constructor is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is <ph id=\"ph3\">`capacity`</ph>.","pos":[1067,1132],"source":"       This constructor is an O(`n`) operation, where `n` is `capacity`."}]},{"pos":[21517,21640],"content":"The approximate number of elements that the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object can initially contain.","needQuote":true,"needEscape":true,"source":"The approximate number of elements that the <xref href=\"System.Collections.Hashtable\"></xref> object can initially contain."},{"pos":[21817,21857],"content":"<ph id=\"ph1\">&lt;code&gt;capacity&lt;/code&gt;</ph> is less than zero.","needQuote":true,"needEscape":true,"source":"<code>capacity</code> is less than zero."},{"pos":[22422,22864],"content":"Initializes a new instance of the <xref href=\"System.Collections.Hashtable\"></xref> class by copying the elements from the specified dictionary to a new <xref href=\"System.Collections.Hashtable\"></xref> object. The new <xref href=\"System.Collections.Hashtable\"></xref> object has an initial capacity equal to the number of elements copied, and uses the default load factor and the specified <xref:System.Collections.IEqualityComparer> object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class by copying the elements from the specified dictionary to a new <bpt id=\"p2\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object.","pos":[0,210],"source":"Initializes a new instance of the <xref href=\"System.Collections.Hashtable\"></xref> class by copying the elements from the specified dictionary to a new <xref href=\"System.Collections.Hashtable\"></xref> object."},{"content":"The new <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object has an initial capacity equal to the number of elements copied, and uses the default load factor and the specified &lt;xref:System.Collections.IEqualityComparer&gt; object.","pos":[211,442],"source":" The new <xref href=\"System.Collections.Hashtable\"></xref> object has an initial capacity equal to the number of elements copied, and uses the default load factor and the specified <xref:System.Collections.IEqualityComparer> object."}]},{"pos":[22877,24749],"content":"The initial capacity is set to the number of elements in the source dictionary. Capacity is automatically increased as required based on the load factor.       The load factor is the maximum ratio of elements to buckets. A smaller load factor means faster lookup at the cost of increased memory consumption.       When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.       The <xref:System.Collections.IEqualityComparer> object includes both the hash code provider and the comparer. If an <xref:System.Collections.IEqualityComparer> is used in the <xref:System.Collections.Hashtable> constructor, the objects used as keys in the <xref:System.Collections.Hashtable> object are not required to override the <xref:System.Object.GetHashCode%2A?displayProperty=fullName> and <xref:System.Object.Equals%2A?displayProperty=fullName> methods.       The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable>. The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.       The comparer determines whether two keys are equal. Every key in a <xref:System.Collections.Hashtable> must be unique. The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName>.       The <xref:System.Collections.IEqualityComparer> enables scenarios such as doing lookups with case-insensitive strings.       The elements of the new <xref:System.Collections.Hashtable> are sorted in the same order in which the enumerator iterates through the <xref:System.Collections.IDictionary> object.       This constructor is an O(`n`) operation, where `n` is the number of elements in the `d` parameter.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The initial capacity is set to the number of elements in the source dictionary.","pos":[0,79]},{"content":"Capacity is automatically increased as required based on the load factor.","pos":[80,153]},{"content":"The load factor is the maximum ratio of elements to buckets.","pos":[160,220]},{"content":"A smaller load factor means faster lookup at the cost of increased memory consumption.","pos":[221,307]},{"content":"When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.","pos":[314,511]},{"content":"The &lt;xref:System.Collections.IEqualityComparer&gt; object includes both the hash code provider and the comparer.","pos":[518,627],"source":"       The <xref:System.Collections.IEqualityComparer> object includes both the hash code provider and the comparer."},{"content":"If an &lt;xref:System.Collections.IEqualityComparer&gt; is used in the &lt;xref:System.Collections.Hashtable&gt; constructor, the objects used as keys in the &lt;xref:System.Collections.Hashtable&gt; object are not required to override the &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt; and &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt; methods.","pos":[628,979],"source":" If an <xref:System.Collections.IEqualityComparer> is used in the <xref:System.Collections.Hashtable> constructor, the objects used as keys in the <xref:System.Collections.Hashtable> object are not required to override the <xref:System.Object.GetHashCode%2A?displayProperty=fullName> and <xref:System.Object.Equals%2A?displayProperty=fullName> methods."},{"content":"The hash code provider dispenses hash codes for keys in the &lt;xref:System.Collections.Hashtable&gt;.","pos":[986,1082],"source":"       The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable>."},{"content":"The default hash code provider is the key's implementation of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;.","pos":[1083,1206],"source":" The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=fullName>."},{"content":"The comparer determines whether two keys are equal.","pos":[1213,1264]},{"content":"Every key in a &lt;xref:System.Collections.Hashtable&gt; must be unique.","pos":[1265,1331],"source":" Every key in a <xref:System.Collections.Hashtable> must be unique."},{"content":"The default comparer is the key's implementation of &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.","pos":[1332,1440],"source":" The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName>."},{"content":"The &lt;xref:System.Collections.IEqualityComparer&gt; enables scenarios such as doing lookups with case-insensitive strings.","pos":[1447,1565],"source":"       The <xref:System.Collections.IEqualityComparer> enables scenarios such as doing lookups with case-insensitive strings."},{"content":"The elements of the new &lt;xref:System.Collections.Hashtable&gt; are sorted in the same order in which the enumerator iterates through the &lt;xref:System.Collections.IDictionary&gt; object.","pos":[1572,1751],"source":"       The elements of the new <xref:System.Collections.Hashtable> are sorted in the same order in which the enumerator iterates through the <xref:System.Collections.IDictionary> object."},{"content":"This constructor is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is the number of elements in the <ph id=\"ph3\">`d`</ph> parameter.","pos":[1758,1856],"source":"       This constructor is an O(`n`) operation, where `n` is the number of elements in the `d` parameter."}]},{"pos":[25573,25696],"content":"The &lt;xref:System.Collections.IDictionary&gt; object to copy to a new <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"The <xref:System.Collections.IDictionary> object to copy to a new <xref href=\"System.Collections.Hashtable\"></xref> object."},{"pos":[25793,26371],"content":"The <xref:System.Collections.IEqualityComparer> object that defines the hash code provider and the comparer to use with the <xref href=\"System.Collections.Hashtable\"></xref>.       -or-       <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> to use the default hash code provider and the default comparer. The default hash code provider is each key's implementation of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt; and the default comparer is each key's implementation of &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.","needQuote":false,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Collections.IEqualityComparer&gt; object that defines the hash code provider and the comparer to use with the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,174],"source":"The <xref:System.Collections.IEqualityComparer> object that defines the hash code provider and the comparer to use with the <xref href=\"System.Collections.Hashtable\"></xref>."},{"content":"-or-       <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to use the default hash code provider and the default comparer.","pos":[181,316],"source":"       -or-       <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> to use the default hash code provider and the default comparer."},{"content":"The default hash code provider is each key's implementation of <ph id=\"ph1\">&amp;lt;</ph>xref:System.Object.GetHashCode%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph> and the default comparer is each key's implementation of <ph id=\"ph3\">&amp;lt;</ph>xref:System.Object.Equals%2A?displayProperty=fullName<ph id=\"ph4\">&amp;gt;</ph>.","pos":[317,566],"source":" The default hash code provider is each key's implementation of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt; and the default comparer is each key's implementation of &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;."}]},{"pos":[26537,26616],"content":"<ph id=\"ph1\">&lt;code&gt;d&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>d</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[27102,27528],"content":"Initializes a new instance of the <xref href=\"System.Collections.Hashtable\"></xref> class by copying the elements from the specified dictionary to the new <xref href=\"System.Collections.Hashtable\"></xref> object. The new <xref href=\"System.Collections.Hashtable\"></xref> object has an initial capacity equal to the number of elements copied, and uses the specified load factor, and the default hash code provider and comparer.","needQuote":true,"needEscape":true,"nodes":[{"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class by copying the elements from the specified dictionary to the new <bpt id=\"p2\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object.","pos":[0,212],"source":"Initializes a new instance of the <xref href=\"System.Collections.Hashtable\"></xref> class by copying the elements from the specified dictionary to the new <xref href=\"System.Collections.Hashtable\"></xref> object."},{"content":"The new <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object has an initial capacity equal to the number of elements copied, and uses the specified load factor, and the default hash code provider and comparer.","pos":[213,426],"source":" The new <xref href=\"System.Collections.Hashtable\"></xref> object has an initial capacity equal to the number of elements copied, and uses the specified load factor, and the default hash code provider and comparer."}]},{"pos":[27541,28888],"content":"The initial capacity is set to the number of elements in the source dictionary. Capacity is automatically increased as required based on the load factor.       The load factor is the maximum ratio of elements to buckets. A smaller load factor means faster lookup at the cost of increased memory consumption. A load factor of 1.0 is the best balance between speed and size.       When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.       The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable> object. The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.       The comparer determines whether two keys are equal. Every key in a <xref:System.Collections.Hashtable> must be unique. The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName>.       The elements of the new <xref:System.Collections.Hashtable> are sorted in the same order in which the enumerator iterates through the <xref:System.Collections.IDictionary> object.       This constructor is an O(`n`) operation, where `n` is the number of elements in the `d` parameter.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The initial capacity is set to the number of elements in the source dictionary.","pos":[0,79]},{"content":"Capacity is automatically increased as required based on the load factor.","pos":[80,153]},{"content":"The load factor is the maximum ratio of elements to buckets.","pos":[160,220]},{"content":"A smaller load factor means faster lookup at the cost of increased memory consumption.","pos":[221,307]},{"content":"A load factor of 1.0 is the best balance between speed and size.","pos":[308,372]},{"content":"When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.","pos":[379,576]},{"content":"The hash code provider dispenses hash codes for keys in the &lt;xref:System.Collections.Hashtable&gt; object.","pos":[583,686],"source":"       The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable> object."},{"content":"The default hash code provider is the key's implementation of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;.","pos":[687,810],"source":" The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=fullName>."},{"content":"The comparer determines whether two keys are equal.","pos":[817,868]},{"content":"Every key in a &lt;xref:System.Collections.Hashtable&gt; must be unique.","pos":[869,935],"source":" Every key in a <xref:System.Collections.Hashtable> must be unique."},{"content":"The default comparer is the key's implementation of &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.","pos":[936,1044],"source":" The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName>."},{"content":"The elements of the new &lt;xref:System.Collections.Hashtable&gt; are sorted in the same order in which the enumerator iterates through the &lt;xref:System.Collections.IDictionary&gt; object.","pos":[1051,1230],"source":"       The elements of the new <xref:System.Collections.Hashtable> are sorted in the same order in which the enumerator iterates through the <xref:System.Collections.IDictionary> object."},{"content":"This constructor is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is the number of elements in the <ph id=\"ph3\">`d`</ph> parameter.","pos":[1237,1335],"source":"       This constructor is an O(`n`) operation, where `n` is the number of elements in the `d` parameter."}]},{"pos":[29690,29813],"content":"The &lt;xref:System.Collections.IDictionary&gt; object to copy to a new <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"The <xref:System.Collections.IDictionary> object to copy to a new <xref href=\"System.Collections.Hashtable\"></xref> object."},{"pos":[29880,30055],"content":"A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance. The result is the maximum ratio of elements to buckets.","needQuote":true,"needEscape":true,"nodes":[{"content":"A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance. The result is the maximum ratio of elements to buckets.","pos":[0,175],"nodes":[{"content":"A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance.","pos":[0,119]},{"content":"The result is the maximum ratio of elements to buckets.","pos":[120,175]}]}]},{"pos":[30220,30299],"content":"<ph id=\"ph1\">&lt;code&gt;d&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>d</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[30415,30522],"content":"<code>loadFactor</code> is less than 0.1.       -or-       <code>loadFactor</code> is greater than 1.0.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;loadFactor&lt;/code&gt;</ph> is less than 0.1.","pos":[0,41],"source":"<code>loadFactor</code> is less than 0.1."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;loadFactor&lt;/code&gt;</ph> is greater than 1.0.","pos":[48,103],"source":"       -or-       <code>loadFactor</code> is greater than 1.0."}]},{"pos":[31078,31277],"content":"Initializes a new, empty instance of the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class using the default initial capacity and load factor, and the specified hash code provider and comparer.","needQuote":true,"needEscape":true,"source":"Initializes a new, empty instance of the <xref href=\"System.Collections.Hashtable\"></xref> class using the default initial capacity and load factor, and the specified hash code provider and comparer."},{"pos":[31290,32463],"content":"A hash table's capacity is used to calculate the optimal number of hash table buckets based on the load factor. Capacity is automatically increased as required.       The load factor is the maximum ratio of elements to buckets. A smaller load factor means faster lookup at the cost of increased memory consumption.       When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.       The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable> object. The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.       The comparer determines whether two keys are equal. Every key in a <xref:System.Collections.Hashtable> must be unique. The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName>.       The custom hash code provider and the custom comparer enable scenarios such as doing lookups with case-insensitive strings.       This constructor is an O(1) operation.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"A hash table's capacity is used to calculate the optimal number of hash table buckets based on the load factor. Capacity is automatically increased as required.       The load factor is the maximum ratio of elements to buckets. A smaller load factor means faster lookup at the cost of increased memory consumption.       When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.       The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable> object. The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.       The comparer determines whether two keys are equal. Every key in a <xref:System.Collections.Hashtable> must be unique. The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName>.       The custom hash code provider and the custom comparer enable scenarios such as doing lookups with case-insensitive strings.       This constructor is an O(1) operation.","pos":[0,1161],"nodes":[{"content":"A hash table's capacity is used to calculate the optimal number of hash table buckets based on the load factor.","pos":[0,111]},{"content":"Capacity is automatically increased as required.","pos":[112,160]},{"content":"The load factor is the maximum ratio of elements to buckets.","pos":[167,227]},{"content":"A smaller load factor means faster lookup at the cost of increased memory consumption.","pos":[228,314]},{"content":"When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.","pos":[321,518]},{"content":"The hash code provider dispenses hash codes for keys in the &lt;xref:System.Collections.Hashtable&gt; object.","pos":[525,628],"source":"       The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable> object."},{"content":"The default hash code provider is the key's implementation of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;.","pos":[629,752],"source":" The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=fullName>."},{"content":"The comparer determines whether two keys are equal.","pos":[759,810]},{"content":"Every key in a &lt;xref:System.Collections.Hashtable&gt; must be unique.","pos":[811,877],"source":" Every key in a <xref:System.Collections.Hashtable> must be unique."},{"content":"The default comparer is the key's implementation of &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.","pos":[878,986],"source":" The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName>."},{"content":"The custom hash code provider and the custom comparer enable scenarios such as doing lookups with case-insensitive strings.","pos":[993,1116]},{"content":"This constructor is an O(1) operation.","pos":[1123,1161]}]}]},{"pos":[33258,33670],"content":"The <xref href=\"System.Collections.IHashCodeProvider\"></xref> object that supplies the hash codes for all keys in the <xref href=\"System.Collections.Hashtable\"></xref> object.       -or-       <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> to use the default hash code provider, which is each key's implementation of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Collections.IHashCodeProvider\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that supplies the hash codes for all keys in the <bpt id=\"p2\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object.","pos":[0,175],"source":"The <xref href=\"System.Collections.IHashCodeProvider\"></xref> object that supplies the hash codes for all keys in the <xref href=\"System.Collections.Hashtable\"></xref> object."},{"content":"-or-       <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to use the default hash code provider, which is each key's implementation of <ph id=\"ph1\">&amp;lt;</ph>xref:System.Object.GetHashCode%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>.","pos":[182,398],"source":"       -or-       <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> to use the default hash code provider, which is each key's implementation of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;."}]},{"pos":[33752,34064],"content":"The <xref:System.Collections.IComparer> object to use to determine whether two keys are equal.       -or-       <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> to use the default comparer, which is each key's implementation of &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.","needQuote":false,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Collections.IComparer&gt; object to use to determine whether two keys are equal.","pos":[0,94],"source":"The <xref:System.Collections.IComparer> object to use to determine whether two keys are equal."},{"content":"-or-       <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to use the default comparer, which is each key's implementation of <ph id=\"ph1\">&amp;lt;</ph>xref:System.Object.Equals%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>.","pos":[101,302],"source":"       -or-       <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> to use the default comparer, which is each key's implementation of &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;."}]},{"pos":[34641,34852],"content":"Initializes a new, empty instance of the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class using the specified initial capacity and &lt;xref:System.Collections.IEqualityComparer&gt;, and the default load factor.","needQuote":true,"needEscape":true,"source":"Initializes a new, empty instance of the <xref href=\"System.Collections.Hashtable\"></xref> class using the specified initial capacity and <xref:System.Collections.IEqualityComparer>, and the default load factor."},{"pos":[34865,36611],"content":"Specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Hashtable> object. Capacity is automatically increased as required based on the load factor.       The load factor is the maximum ratio of elements to buckets. A smaller load factor means faster lookup at the cost of increased memory consumption.       When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.       The <xref:System.Collections.IEqualityComparer> object includes both the hash code provider and the comparer. If an <xref:System.Collections.IEqualityComparer> is used in the <xref:System.Collections.Hashtable> constructor, the objects used as keys in the <xref:System.Collections.Hashtable> are not required to override the <xref:System.Object.GetHashCode%2A?displayProperty=fullName> and <xref:System.Object.Equals%2A?displayProperty=fullName> methods.       The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable>. The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.       The comparer determines whether two keys are equal. Every key in a <xref:System.Collections.Hashtable> must be unique. The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName>.       The <xref:System.Collections.IEqualityComparer> enables scenarios such as doing lookups with case-insensitive strings.       This constructor is an O(`n`) operation, where `n` is the `capacity` parameter.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the &lt;xref:System.Collections.Hashtable&gt; object.","pos":[0,167],"source":"Specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Hashtable> object."},{"content":"Capacity is automatically increased as required based on the load factor.","pos":[168,241]},{"content":"The load factor is the maximum ratio of elements to buckets.","pos":[248,308]},{"content":"A smaller load factor means faster lookup at the cost of increased memory consumption.","pos":[309,395]},{"content":"When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.","pos":[402,599]},{"content":"The &lt;xref:System.Collections.IEqualityComparer&gt; object includes both the hash code provider and the comparer.","pos":[606,715],"source":"       The <xref:System.Collections.IEqualityComparer> object includes both the hash code provider and the comparer."},{"content":"If an &lt;xref:System.Collections.IEqualityComparer&gt; is used in the &lt;xref:System.Collections.Hashtable&gt; constructor, the objects used as keys in the &lt;xref:System.Collections.Hashtable&gt; are not required to override the &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt; and &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt; methods.","pos":[716,1060],"source":" If an <xref:System.Collections.IEqualityComparer> is used in the <xref:System.Collections.Hashtable> constructor, the objects used as keys in the <xref:System.Collections.Hashtable> are not required to override the <xref:System.Object.GetHashCode%2A?displayProperty=fullName> and <xref:System.Object.Equals%2A?displayProperty=fullName> methods."},{"content":"The hash code provider dispenses hash codes for keys in the &lt;xref:System.Collections.Hashtable&gt;.","pos":[1067,1163],"source":"       The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable>."},{"content":"The default hash code provider is the key's implementation of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;.","pos":[1164,1287],"source":" The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=fullName>."},{"content":"The comparer determines whether two keys are equal.","pos":[1294,1345]},{"content":"Every key in a &lt;xref:System.Collections.Hashtable&gt; must be unique.","pos":[1346,1412],"source":" Every key in a <xref:System.Collections.Hashtable> must be unique."},{"content":"The default comparer is the key's implementation of &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.","pos":[1413,1521],"source":" The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName>."},{"content":"The &lt;xref:System.Collections.IEqualityComparer&gt; enables scenarios such as doing lookups with case-insensitive strings.","pos":[1528,1646],"source":"       The <xref:System.Collections.IEqualityComparer> enables scenarios such as doing lookups with case-insensitive strings."},{"content":"This constructor is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is the <ph id=\"ph3\">`capacity`</ph> parameter.","pos":[1653,1732],"source":"       This constructor is an O(`n`) operation, where `n` is the `capacity` parameter."}]},{"pos":[37383,37506],"content":"The approximate number of elements that the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object can initially contain.","needQuote":true,"needEscape":true,"source":"The approximate number of elements that the <xref href=\"System.Collections.Hashtable\"></xref> object can initially contain."},{"pos":[37603,38181],"content":"The <xref:System.Collections.IEqualityComparer> object that defines the hash code provider and the comparer to use with the <xref href=\"System.Collections.Hashtable\"></xref>.       -or-       <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> to use the default hash code provider and the default comparer. The default hash code provider is each key's implementation of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt; and the default comparer is each key's implementation of &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.","needQuote":false,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Collections.IEqualityComparer&gt; object that defines the hash code provider and the comparer to use with the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,174],"source":"The <xref:System.Collections.IEqualityComparer> object that defines the hash code provider and the comparer to use with the <xref href=\"System.Collections.Hashtable\"></xref>."},{"content":"-or-       <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to use the default hash code provider and the default comparer.","pos":[181,316],"source":"       -or-       <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> to use the default hash code provider and the default comparer."},{"content":"The default hash code provider is each key's implementation of <ph id=\"ph1\">&amp;lt;</ph>xref:System.Object.GetHashCode%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph> and the default comparer is each key's implementation of <ph id=\"ph3\">&amp;lt;</ph>xref:System.Object.Equals%2A?displayProperty=fullName<ph id=\"ph4\">&amp;gt;</ph>.","pos":[317,566],"source":" The default hash code provider is each key's implementation of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt; and the default comparer is each key's implementation of &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;."}]},{"pos":[38359,38399],"content":"<ph id=\"ph1\">&lt;code&gt;capacity&lt;/code&gt;</ph> is less than zero.","needQuote":true,"needEscape":true,"source":"<code>capacity</code> is less than zero."},{"pos":[38831,39030],"content":"Initializes a new, empty instance of the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class using the specified initial capacity and load factor, and the default hash code provider and comparer.","needQuote":true,"needEscape":true,"source":"Initializes a new, empty instance of the <xref href=\"System.Collections.Hashtable\"></xref> class using the specified initial capacity and load factor, and the default hash code provider and comparer."},{"pos":[39043,40264],"content":"Specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Hashtable> object. Capacity is automatically increased as required based on the load factor.       The load factor is the maximum ratio of elements to buckets. A smaller load factor means faster lookup at the cost of increased memory consumption. A load factor of 1.0 is the best balance between speed and size.       When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.       The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable>. The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.       The comparer determines whether two keys are equal. Every key in a <xref:System.Collections.Hashtable> must be unique. The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName>.       This constructor is an O(`n`) operation, where `n` is the `capacity` parameter.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the &lt;xref:System.Collections.Hashtable&gt; object.","pos":[0,167],"source":"Specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Hashtable> object."},{"content":"Capacity is automatically increased as required based on the load factor.","pos":[168,241]},{"content":"The load factor is the maximum ratio of elements to buckets.","pos":[248,308]},{"content":"A smaller load factor means faster lookup at the cost of increased memory consumption.","pos":[309,395]},{"content":"A load factor of 1.0 is the best balance between speed and size.","pos":[396,460]},{"content":"When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.","pos":[467,664]},{"content":"The hash code provider dispenses hash codes for keys in the &lt;xref:System.Collections.Hashtable&gt;.","pos":[671,767],"source":"       The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable>."},{"content":"The default hash code provider is the key's implementation of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;.","pos":[768,891],"source":" The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=fullName>."},{"content":"The comparer determines whether two keys are equal.","pos":[898,949]},{"content":"Every key in a &lt;xref:System.Collections.Hashtable&gt; must be unique.","pos":[950,1016],"source":" Every key in a <xref:System.Collections.Hashtable> must be unique."},{"content":"The default comparer is the key's implementation of &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.","pos":[1017,1125],"source":" The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName>."},{"content":"This constructor is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is the <ph id=\"ph3\">`capacity`</ph> parameter.","pos":[1132,1211],"source":"       This constructor is an O(`n`) operation, where `n` is the `capacity` parameter."}]},{"pos":[41020,41143],"content":"The approximate number of elements that the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object can initially contain.","needQuote":true,"needEscape":true,"source":"The approximate number of elements that the <xref href=\"System.Collections.Hashtable\"></xref> object can initially contain."},{"pos":[41210,41385],"content":"A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance. The result is the maximum ratio of elements to buckets.","needQuote":true,"needEscape":true,"nodes":[{"content":"A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance. The result is the maximum ratio of elements to buckets.","pos":[0,175],"nodes":[{"content":"A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance.","pos":[0,119]},{"content":"The result is the maximum ratio of elements to buckets.","pos":[120,175]}]}]},{"pos":[41563,41732],"content":"<code>capacity</code> is less than zero.       -or-       <code>loadFactor</code> is less than 0.1.       -or-       <code>loadFactor</code> is greater than 1.0.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;capacity&lt;/code&gt;</ph> is less than zero.","pos":[0,40],"source":"<code>capacity</code> is less than zero."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;loadFactor&lt;/code&gt;</ph> is less than 0.1.","pos":[47,99],"source":"       -or-       <code>loadFactor</code> is less than 0.1."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;loadFactor&lt;/code&gt;</ph> is greater than 1.0.","pos":[106,161],"source":"       -or-       <code>loadFactor</code> is greater than 1.0."}]},{"pos":[41828,41873],"content":"<ph id=\"ph1\">&lt;code&gt;capacity&lt;/code&gt;</ph> is causing an overflow.","needQuote":true,"needEscape":true,"source":"<code>capacity</code> is causing an overflow."},{"pos":[42503,42774],"content":"Initializes a new, empty instance of the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class that is serializable using the specified <bpt id=\"p2\">&lt;xref href=\"System.Runtime.Serialization.SerializationInfo\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> and &lt;xref:System.Runtime.Serialization.StreamingContext&gt; objects.","needQuote":true,"needEscape":true,"source":"Initializes a new, empty instance of the <xref href=\"System.Collections.Hashtable\"></xref> class that is serializable using the specified <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> and <xref:System.Runtime.Serialization.StreamingContext> objects."},{"pos":[42787,44153],"content":"A hash table's capacity is used to calculate the optimal number of hash table buckets based on the load factor. Capacity is automatically increased as required.       The load factor is the maximum ratio of elements to buckets. A smaller load factor means faster lookup at the cost of increased memory consumption.       When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.       The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable> object. The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.       The comparer determines whether two keys are equal. Every key in a <xref:System.Collections.Hashtable> must be unique. The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName>.       This constructor is an O(`n`) operation, where `n` is <xref:System.Collections.Hashtable.Count%2A>.       Because serializing and deserializing an enumerator for a <xref:System.Collections.Hashtable> can cause the elements to become reordered, it is not possible to continue enumeration without calling the <xref:System.Collections.IEnumerator.Reset%2A> method.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"A hash table's capacity is used to calculate the optimal number of hash table buckets based on the load factor.","pos":[0,111]},{"content":"Capacity is automatically increased as required.","pos":[112,160]},{"content":"The load factor is the maximum ratio of elements to buckets.","pos":[167,227]},{"content":"A smaller load factor means faster lookup at the cost of increased memory consumption.","pos":[228,314]},{"content":"When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.","pos":[321,518]},{"content":"The hash code provider dispenses hash codes for keys in the &lt;xref:System.Collections.Hashtable&gt; object.","pos":[525,628],"source":"       The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable> object."},{"content":"The default hash code provider is the key's implementation of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;.","pos":[629,752],"source":" The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=fullName>."},{"content":"The comparer determines whether two keys are equal.","pos":[759,810]},{"content":"Every key in a &lt;xref:System.Collections.Hashtable&gt; must be unique.","pos":[811,877],"source":" Every key in a <xref:System.Collections.Hashtable> must be unique."},{"content":"The default comparer is the key's implementation of &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.","pos":[878,986],"source":" The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName>."},{"content":"This constructor is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is &lt;xref:System.Collections.Hashtable.Count%2A&gt;.","pos":[993,1092],"source":"       This constructor is an O(`n`) operation, where `n` is <xref:System.Collections.Hashtable.Count%2A>."},{"content":"Because serializing and deserializing an enumerator for a &lt;xref:System.Collections.Hashtable&gt; can cause the elements to become reordered, it is not possible to continue enumeration without calling the &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; method.","pos":[1099,1354],"source":"       Because serializing and deserializing an enumerator for a <xref:System.Collections.Hashtable> can cause the elements to become reordered, it is not possible to continue enumeration without calling the <xref:System.Collections.IEnumerator.Reset%2A> method."}]},{"pos":[44417,44604],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Serialization.SerializationInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object containing the information required to serialize the <bpt id=\"p2\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object containing the information required to serialize the <xref href=\"System.Collections.Hashtable\"></xref> object."},{"pos":[44700,44895],"content":"A &lt;xref:System.Runtime.Serialization.StreamingContext&gt; object containing the source and destination of the serialized stream associated with the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref:System.Runtime.Serialization.StreamingContext> object containing the source and destination of the serialized stream associated with the <xref href=\"System.Collections.Hashtable\"></xref>."},{"pos":[45060,45142],"content":"<ph id=\"ph1\">&lt;code&gt;info&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>info</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[45795,46321],"content":"Initializes a new instance of the <xref href=\"System.Collections.Hashtable\"></xref> class by copying the elements from the specified dictionary to the new <xref href=\"System.Collections.Hashtable\"></xref> object. The new <xref href=\"System.Collections.Hashtable\"></xref> object has an initial capacity equal to the number of elements copied, and uses the default load factor, and the specified hash code provider and comparer. This API is obsolete. For an alternative, see &lt;xref:System.Collections.Hashtable.%23ctor%2A&gt;.","needQuote":true,"needEscape":true,"nodes":[{"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class by copying the elements from the specified dictionary to the new <bpt id=\"p2\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object.","pos":[0,212],"source":"Initializes a new instance of the <xref href=\"System.Collections.Hashtable\"></xref> class by copying the elements from the specified dictionary to the new <xref href=\"System.Collections.Hashtable\"></xref> object."},{"content":"The new <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object has an initial capacity equal to the number of elements copied, and uses the default load factor, and the specified hash code provider and comparer.","pos":[213,426],"source":" The new <xref href=\"System.Collections.Hashtable\"></xref> object has an initial capacity equal to the number of elements copied, and uses the default load factor, and the specified hash code provider and comparer."},{"content":"This API is obsolete.","pos":[427,448]},{"content":"For an alternative, see <ph id=\"ph1\">&amp;lt;</ph>xref:System.Collections.Hashtable.%23ctor%2A<ph id=\"ph2\">&amp;gt;</ph>.","pos":[449,526],"source":" For an alternative, see &lt;xref:System.Collections.Hashtable.%23ctor%2A&gt;."}]},{"pos":[46334,47748],"content":"The initial capacity is set to the number of elements in the source dictionary. Capacity is automatically increased as required based on the load factor.       The load factor is the maximum ratio of elements to buckets. A smaller load factor means faster lookup at the cost of increased memory consumption.       When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.       The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable> object. The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.       The comparer determines whether two keys are equal. Every key in a <xref:System.Collections.Hashtable> must be unique. The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName>.       The custom hash code provider and the custom comparer enable scenarios such as doing lookups with case-insensitive strings.       The elements of the new <xref:System.Collections.Hashtable> are sorted in the same order in which the enumerator iterates through the <xref:System.Collections.IDictionary> object.       This constructor is an O(`n`) operation, where `n` is the number of elements in the `d` parameter.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The initial capacity is set to the number of elements in the source dictionary.","pos":[0,79]},{"content":"Capacity is automatically increased as required based on the load factor.","pos":[80,153]},{"content":"The load factor is the maximum ratio of elements to buckets.","pos":[160,220]},{"content":"A smaller load factor means faster lookup at the cost of increased memory consumption.","pos":[221,307]},{"content":"When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.","pos":[314,511]},{"content":"The hash code provider dispenses hash codes for keys in the &lt;xref:System.Collections.Hashtable&gt; object.","pos":[518,621],"source":"       The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable> object."},{"content":"The default hash code provider is the key's implementation of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;.","pos":[622,745],"source":" The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=fullName>."},{"content":"The comparer determines whether two keys are equal.","pos":[752,803]},{"content":"Every key in a &lt;xref:System.Collections.Hashtable&gt; must be unique.","pos":[804,870],"source":" Every key in a <xref:System.Collections.Hashtable> must be unique."},{"content":"The default comparer is the key's implementation of &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.","pos":[871,979],"source":" The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName>."},{"content":"The custom hash code provider and the custom comparer enable scenarios such as doing lookups with case-insensitive strings.","pos":[986,1109]},{"content":"The elements of the new &lt;xref:System.Collections.Hashtable&gt; are sorted in the same order in which the enumerator iterates through the &lt;xref:System.Collections.IDictionary&gt; object.","pos":[1116,1295],"source":"       The elements of the new <xref:System.Collections.Hashtable> are sorted in the same order in which the enumerator iterates through the <xref:System.Collections.IDictionary> object."},{"content":"This constructor is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is the number of elements in the <ph id=\"ph3\">`d`</ph> parameter.","pos":[1302,1400],"source":"       This constructor is an O(`n`) operation, where `n` is the number of elements in the `d` parameter."}]},{"pos":[48598,48721],"content":"The &lt;xref:System.Collections.IDictionary&gt; object to copy to a new <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"The <xref:System.Collections.IDictionary> object to copy to a new <xref href=\"System.Collections.Hashtable\"></xref> object."},{"pos":[48805,49210],"content":"The <xref href=\"System.Collections.IHashCodeProvider\"></xref> object that supplies the hash codes for all keys in the <xref href=\"System.Collections.Hashtable\"></xref>.       -or-       <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> to use the default hash code provider, which is each key's implementation of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Collections.IHashCodeProvider\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that supplies the hash codes for all keys in the <bpt id=\"p2\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,168],"source":"The <xref href=\"System.Collections.IHashCodeProvider\"></xref> object that supplies the hash codes for all keys in the <xref href=\"System.Collections.Hashtable\"></xref>."},{"content":"-or-       <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to use the default hash code provider, which is each key's implementation of <ph id=\"ph1\">&amp;lt;</ph>xref:System.Object.GetHashCode%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>.","pos":[175,391],"source":"       -or-       <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> to use the default hash code provider, which is each key's implementation of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;."}]},{"pos":[49292,49604],"content":"The <xref:System.Collections.IComparer> object to use to determine whether two keys are equal.       -or-       <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> to use the default comparer, which is each key's implementation of &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.","needQuote":false,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Collections.IComparer&gt; object to use to determine whether two keys are equal.","pos":[0,94],"source":"The <xref:System.Collections.IComparer> object to use to determine whether two keys are equal."},{"content":"-or-       <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to use the default comparer, which is each key's implementation of <ph id=\"ph1\">&amp;lt;</ph>xref:System.Object.Equals%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>.","pos":[101,302],"source":"       -or-       <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> to use the default comparer, which is each key's implementation of &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;."}]},{"pos":[49770,49849],"content":"<ph id=\"ph1\">&lt;code&gt;d&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>d</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[50463,50895],"content":"Initializes a new instance of the <xref href=\"System.Collections.Hashtable\"></xref> class by copying the elements from the specified dictionary to the new <xref href=\"System.Collections.Hashtable\"></xref> object. The new <xref href=\"System.Collections.Hashtable\"></xref> object has an initial capacity equal to the number of elements copied, and uses the specified load factor and <xref:System.Collections.IEqualityComparer> object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class by copying the elements from the specified dictionary to the new <bpt id=\"p2\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object.","pos":[0,212],"source":"Initializes a new instance of the <xref href=\"System.Collections.Hashtable\"></xref> class by copying the elements from the specified dictionary to the new <xref href=\"System.Collections.Hashtable\"></xref> object."},{"content":"The new <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object has an initial capacity equal to the number of elements copied, and uses the specified load factor and &lt;xref:System.Collections.IEqualityComparer&gt; object.","pos":[213,432],"source":" The new <xref href=\"System.Collections.Hashtable\"></xref> object has an initial capacity equal to the number of elements copied, and uses the specified load factor and <xref:System.Collections.IEqualityComparer> object."}]},{"pos":[50908,52845],"content":"The initial capacity is set to the number of elements in the source dictionary. Capacity is automatically increased as required based on the load factor.       The load factor is the maximum ratio of elements to buckets. A smaller load factor means faster lookup at the cost of increased memory consumption. A load factor of 1.0 is the best balance between speed and size.       When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.       The <xref:System.Collections.IEqualityComparer> object includes both the hash code provider and the comparer. If an <xref:System.Collections.IEqualityComparer> is used in the <xref:System.Collections.Hashtable> constructor, the objects used as keys in the <xref:System.Collections.Hashtable> object are not required to override the <xref:System.Object.GetHashCode%2A?displayProperty=fullName> and <xref:System.Object.Equals%2A?displayProperty=fullName> methods.       The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable>. The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.       The comparer determines whether two keys are equal. Every key in a <xref:System.Collections.Hashtable> must be unique. The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName>.       The <xref:System.Collections.IEqualityComparer> enables scenarios such as doing lookups with case-insensitive strings.       The elements of the new <xref:System.Collections.Hashtable> are sorted in the same order in which the enumerator iterates through the <xref:System.Collections.IDictionary> object.       This constructor is an O(`n`) operation, where `n` is the number of elements in the `d` parameter.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The initial capacity is set to the number of elements in the source dictionary.","pos":[0,79]},{"content":"Capacity is automatically increased as required based on the load factor.","pos":[80,153]},{"content":"The load factor is the maximum ratio of elements to buckets.","pos":[160,220]},{"content":"A smaller load factor means faster lookup at the cost of increased memory consumption.","pos":[221,307]},{"content":"A load factor of 1.0 is the best balance between speed and size.","pos":[308,372]},{"content":"When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.","pos":[379,576]},{"content":"The &lt;xref:System.Collections.IEqualityComparer&gt; object includes both the hash code provider and the comparer.","pos":[583,692],"source":"       The <xref:System.Collections.IEqualityComparer> object includes both the hash code provider and the comparer."},{"content":"If an &lt;xref:System.Collections.IEqualityComparer&gt; is used in the &lt;xref:System.Collections.Hashtable&gt; constructor, the objects used as keys in the &lt;xref:System.Collections.Hashtable&gt; object are not required to override the &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt; and &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt; methods.","pos":[693,1044],"source":" If an <xref:System.Collections.IEqualityComparer> is used in the <xref:System.Collections.Hashtable> constructor, the objects used as keys in the <xref:System.Collections.Hashtable> object are not required to override the <xref:System.Object.GetHashCode%2A?displayProperty=fullName> and <xref:System.Object.Equals%2A?displayProperty=fullName> methods."},{"content":"The hash code provider dispenses hash codes for keys in the &lt;xref:System.Collections.Hashtable&gt;.","pos":[1051,1147],"source":"       The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable>."},{"content":"The default hash code provider is the key's implementation of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;.","pos":[1148,1271],"source":" The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=fullName>."},{"content":"The comparer determines whether two keys are equal.","pos":[1278,1329]},{"content":"Every key in a &lt;xref:System.Collections.Hashtable&gt; must be unique.","pos":[1330,1396],"source":" Every key in a <xref:System.Collections.Hashtable> must be unique."},{"content":"The default comparer is the key's implementation of &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.","pos":[1397,1505],"source":" The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName>."},{"content":"The &lt;xref:System.Collections.IEqualityComparer&gt; enables scenarios such as doing lookups with case-insensitive strings.","pos":[1512,1630],"source":"       The <xref:System.Collections.IEqualityComparer> enables scenarios such as doing lookups with case-insensitive strings."},{"content":"The elements of the new &lt;xref:System.Collections.Hashtable&gt; are sorted in the same order in which the enumerator iterates through the &lt;xref:System.Collections.IDictionary&gt; object.","pos":[1637,1816],"source":"       The elements of the new <xref:System.Collections.Hashtable> are sorted in the same order in which the enumerator iterates through the <xref:System.Collections.IDictionary> object."},{"content":"This constructor is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is the number of elements in the <ph id=\"ph3\">`d`</ph> parameter.","pos":[1823,1921],"source":"       This constructor is an O(`n`) operation, where `n` is the number of elements in the `d` parameter."}]},{"pos":[53702,53825],"content":"The &lt;xref:System.Collections.IDictionary&gt; object to copy to a new <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"The <xref:System.Collections.IDictionary> object to copy to a new <xref href=\"System.Collections.Hashtable\"></xref> object."},{"pos":[53892,54067],"content":"A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance. The result is the maximum ratio of elements to buckets.","needQuote":true,"needEscape":true,"nodes":[{"content":"A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance. The result is the maximum ratio of elements to buckets.","pos":[0,175],"nodes":[{"content":"A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance.","pos":[0,119]},{"content":"The result is the maximum ratio of elements to buckets.","pos":[120,175]}]}]},{"pos":[54164,54742],"content":"The <xref:System.Collections.IEqualityComparer> object that defines the hash code provider and the comparer to use with the <xref href=\"System.Collections.Hashtable\"></xref>.       -or-       <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> to use the default hash code provider and the default comparer. The default hash code provider is each key's implementation of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt; and the default comparer is each key's implementation of &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.","needQuote":false,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Collections.IEqualityComparer&gt; object that defines the hash code provider and the comparer to use with the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,174],"source":"The <xref:System.Collections.IEqualityComparer> object that defines the hash code provider and the comparer to use with the <xref href=\"System.Collections.Hashtable\"></xref>."},{"content":"-or-       <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to use the default hash code provider and the default comparer.","pos":[181,316],"source":"       -or-       <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> to use the default hash code provider and the default comparer."},{"content":"The default hash code provider is each key's implementation of <ph id=\"ph1\">&amp;lt;</ph>xref:System.Object.GetHashCode%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph> and the default comparer is each key's implementation of <ph id=\"ph3\">&amp;lt;</ph>xref:System.Object.Equals%2A?displayProperty=fullName<ph id=\"ph4\">&amp;gt;</ph>.","pos":[317,566],"source":" The default hash code provider is each key's implementation of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt; and the default comparer is each key's implementation of &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;."}]},{"pos":[54908,54987],"content":"<ph id=\"ph1\">&lt;code&gt;d&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>d</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[55103,55210],"content":"<code>loadFactor</code> is less than 0.1.       -or-       <code>loadFactor</code> is greater than 1.0.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;loadFactor&lt;/code&gt;</ph> is less than 0.1.","pos":[0,41],"source":"<code>loadFactor</code> is less than 0.1."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;loadFactor&lt;/code&gt;</ph> is greater than 1.0.","pos":[48,103],"source":"       -or-       <code>loadFactor</code> is greater than 1.0."}]},{"pos":[55810,56003],"content":"Initializes a new, empty instance of the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class using the specified initial capacity, hash code provider, comparer, and the default load factor.","needQuote":true,"needEscape":true,"source":"Initializes a new, empty instance of the <xref href=\"System.Collections.Hashtable\"></xref> class using the specified initial capacity, hash code provider, comparer, and the default load factor."},{"pos":[56016,57304],"content":"Specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Hashtable> object. Capacity is automatically increased as required based on the load factor.       The load factor is the maximum ratio of elements to buckets. A smaller load factor means faster lookup at the cost of increased memory consumption.       When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.       The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable>. The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.       The comparer determines whether two keys are equal. Every key in a <xref:System.Collections.Hashtable> must be unique. The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName>.       The custom hash code provider and the custom comparer enable scenarios such as doing lookups with case-insensitive strings.       This constructor is an O(`n`) operation, where `n` is the `capacity` parameter.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the &lt;xref:System.Collections.Hashtable&gt; object.","pos":[0,167],"source":"Specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Hashtable> object."},{"content":"Capacity is automatically increased as required based on the load factor.","pos":[168,241]},{"content":"The load factor is the maximum ratio of elements to buckets.","pos":[248,308]},{"content":"A smaller load factor means faster lookup at the cost of increased memory consumption.","pos":[309,395]},{"content":"When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.","pos":[402,599]},{"content":"The hash code provider dispenses hash codes for keys in the &lt;xref:System.Collections.Hashtable&gt;.","pos":[606,702],"source":"       The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable>."},{"content":"The default hash code provider is the key's implementation of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;.","pos":[703,826],"source":" The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=fullName>."},{"content":"The comparer determines whether two keys are equal.","pos":[833,884]},{"content":"Every key in a &lt;xref:System.Collections.Hashtable&gt; must be unique.","pos":[885,951],"source":" Every key in a <xref:System.Collections.Hashtable> must be unique."},{"content":"The default comparer is the key's implementation of &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.","pos":[952,1060],"source":" The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName>."},{"content":"The custom hash code provider and the custom comparer enable scenarios such as doing lookups with case-insensitive strings.","pos":[1067,1190]},{"content":"This constructor is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is the <ph id=\"ph3\">`capacity`</ph> parameter.","pos":[1197,1276],"source":"       This constructor is an O(`n`) operation, where `n` is the `capacity` parameter."}]},{"pos":[58102,58225],"content":"The approximate number of elements that the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object can initially contain.","needQuote":true,"needEscape":true,"source":"The approximate number of elements that the <xref href=\"System.Collections.Hashtable\"></xref> object can initially contain."},{"pos":[58309,58714],"content":"The <xref href=\"System.Collections.IHashCodeProvider\"></xref> object that supplies the hash codes for all keys in the <xref href=\"System.Collections.Hashtable\"></xref>.       -or-       <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> to use the default hash code provider, which is each key's implementation of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Collections.IHashCodeProvider\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that supplies the hash codes for all keys in the <bpt id=\"p2\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,168],"source":"The <xref href=\"System.Collections.IHashCodeProvider\"></xref> object that supplies the hash codes for all keys in the <xref href=\"System.Collections.Hashtable\"></xref>."},{"content":"-or-       <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to use the default hash code provider, which is each key's implementation of <ph id=\"ph1\">&amp;lt;</ph>xref:System.Object.GetHashCode%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>.","pos":[175,391],"source":"       -or-       <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> to use the default hash code provider, which is each key's implementation of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;."}]},{"pos":[58796,59108],"content":"The <xref:System.Collections.IComparer> object to use to determine whether two keys are equal.       -or-       <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> to use the default comparer, which is each key's implementation of &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.","needQuote":false,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Collections.IComparer&gt; object to use to determine whether two keys are equal.","pos":[0,94],"source":"The <xref:System.Collections.IComparer> object to use to determine whether two keys are equal."},{"content":"-or-       <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to use the default comparer, which is each key's implementation of <ph id=\"ph1\">&amp;lt;</ph>xref:System.Object.Equals%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>.","pos":[101,302],"source":"       -or-       <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> to use the default comparer, which is each key's implementation of &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;."}]},{"pos":[59286,59326],"content":"<ph id=\"ph1\">&lt;code&gt;capacity&lt;/code&gt;</ph> is less than zero.","needQuote":true,"needEscape":true,"source":"<code>capacity</code> is less than zero."},{"pos":[59886,60089],"content":"Initializes a new, empty instance of the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class using the specified initial capacity, load factor, and &lt;xref:System.Collections.IEqualityComparer&gt; object.","needQuote":true,"needEscape":true,"source":"Initializes a new, empty instance of the <xref href=\"System.Collections.Hashtable\"></xref> class using the specified initial capacity, load factor, and <xref:System.Collections.IEqualityComparer> object."},{"pos":[60102,61913],"content":"Specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Hashtable> object. Capacity is automatically increased as required based on the load factor.       The load factor is the maximum ratio of elements to buckets. A smaller load factor means faster lookup at the cost of increased memory consumption. A load factor of 1.0 is the best balance between speed and size.       When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.       The <xref:System.Collections.IEqualityComparer> object includes both the hash code provider and the comparer. If an <xref:System.Collections.IEqualityComparer> is used in the <xref:System.Collections.Hashtable> constructor, the objects used as keys in the <xref:System.Collections.Hashtable> are not required to override the <xref:System.Object.GetHashCode%2A?displayProperty=fullName> and <xref:System.Object.Equals%2A?displayProperty=fullName> methods.       The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable>. The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.       The comparer determines whether two keys are equal. Every key in a <xref:System.Collections.Hashtable> must be unique. The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName>.       The <xref:System.Collections.IEqualityComparer> enables scenarios such as doing lookups with case-insensitive strings.       This constructor is an O(`n`) operation, where `n` is the `capacity` parameter.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the &lt;xref:System.Collections.Hashtable&gt; object.","pos":[0,167],"source":"Specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Hashtable> object."},{"content":"Capacity is automatically increased as required based on the load factor.","pos":[168,241]},{"content":"The load factor is the maximum ratio of elements to buckets.","pos":[248,308]},{"content":"A smaller load factor means faster lookup at the cost of increased memory consumption.","pos":[309,395]},{"content":"A load factor of 1.0 is the best balance between speed and size.","pos":[396,460]},{"content":"When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.","pos":[467,664]},{"content":"The &lt;xref:System.Collections.IEqualityComparer&gt; object includes both the hash code provider and the comparer.","pos":[671,780],"source":"       The <xref:System.Collections.IEqualityComparer> object includes both the hash code provider and the comparer."},{"content":"If an &lt;xref:System.Collections.IEqualityComparer&gt; is used in the &lt;xref:System.Collections.Hashtable&gt; constructor, the objects used as keys in the &lt;xref:System.Collections.Hashtable&gt; are not required to override the &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt; and &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt; methods.","pos":[781,1125],"source":" If an <xref:System.Collections.IEqualityComparer> is used in the <xref:System.Collections.Hashtable> constructor, the objects used as keys in the <xref:System.Collections.Hashtable> are not required to override the <xref:System.Object.GetHashCode%2A?displayProperty=fullName> and <xref:System.Object.Equals%2A?displayProperty=fullName> methods."},{"content":"The hash code provider dispenses hash codes for keys in the &lt;xref:System.Collections.Hashtable&gt;.","pos":[1132,1228],"source":"       The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable>."},{"content":"The default hash code provider is the key's implementation of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;.","pos":[1229,1352],"source":" The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=fullName>."},{"content":"The comparer determines whether two keys are equal.","pos":[1359,1410]},{"content":"Every key in a &lt;xref:System.Collections.Hashtable&gt; must be unique.","pos":[1411,1477],"source":" Every key in a <xref:System.Collections.Hashtable> must be unique."},{"content":"The default comparer is the key's implementation of &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.","pos":[1478,1586],"source":" The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName>."},{"content":"The &lt;xref:System.Collections.IEqualityComparer&gt; enables scenarios such as doing lookups with case-insensitive strings.","pos":[1593,1711],"source":"       The <xref:System.Collections.IEqualityComparer> enables scenarios such as doing lookups with case-insensitive strings."},{"content":"This constructor is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is the <ph id=\"ph3\">`capacity`</ph> parameter.","pos":[1718,1797],"source":"       This constructor is an O(`n`) operation, where `n` is the `capacity` parameter."}]},{"pos":[62718,62841],"content":"The approximate number of elements that the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object can initially contain.","needQuote":true,"needEscape":true,"source":"The approximate number of elements that the <xref href=\"System.Collections.Hashtable\"></xref> object can initially contain."},{"pos":[62908,63083],"content":"A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance. The result is the maximum ratio of elements to buckets.","needQuote":true,"needEscape":true,"nodes":[{"content":"A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance. The result is the maximum ratio of elements to buckets.","pos":[0,175],"nodes":[{"content":"A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance.","pos":[0,119]},{"content":"The result is the maximum ratio of elements to buckets.","pos":[120,175]}]}]},{"pos":[63180,63758],"content":"The <xref:System.Collections.IEqualityComparer> object that defines the hash code provider and the comparer to use with the <xref href=\"System.Collections.Hashtable\"></xref>.       -or-       <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> to use the default hash code provider and the default comparer. The default hash code provider is each key's implementation of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt; and the default comparer is each key's implementation of &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.","needQuote":false,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Collections.IEqualityComparer&gt; object that defines the hash code provider and the comparer to use with the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,174],"source":"The <xref:System.Collections.IEqualityComparer> object that defines the hash code provider and the comparer to use with the <xref href=\"System.Collections.Hashtable\"></xref>."},{"content":"-or-       <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to use the default hash code provider and the default comparer.","pos":[181,316],"source":"       -or-       <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> to use the default hash code provider and the default comparer."},{"content":"The default hash code provider is each key's implementation of <ph id=\"ph1\">&amp;lt;</ph>xref:System.Object.GetHashCode%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph> and the default comparer is each key's implementation of <ph id=\"ph3\">&amp;lt;</ph>xref:System.Object.Equals%2A?displayProperty=fullName<ph id=\"ph4\">&amp;gt;</ph>.","pos":[317,566],"source":" The default hash code provider is each key's implementation of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt; and the default comparer is each key's implementation of &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;."}]},{"pos":[63937,64106],"content":"<code>capacity</code> is less than zero.       -or-       <code>loadFactor</code> is less than 0.1.       -or-       <code>loadFactor</code> is greater than 1.0.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;capacity&lt;/code&gt;</ph> is less than zero.","pos":[0,40],"source":"<code>capacity</code> is less than zero."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;loadFactor&lt;/code&gt;</ph> is less than 0.1.","pos":[47,99],"source":"       -or-       <code>loadFactor</code> is less than 0.1."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;loadFactor&lt;/code&gt;</ph> is greater than 1.0.","pos":[106,161],"source":"       -or-       <code>loadFactor</code> is greater than 1.0."}]},{"pos":[64809,65220],"content":"Initializes a new instance of the <xref href=\"System.Collections.Hashtable\"></xref> class by copying the elements from the specified dictionary to the new <xref href=\"System.Collections.Hashtable\"></xref> object. The new <xref href=\"System.Collections.Hashtable\"></xref> object has an initial capacity equal to the number of elements copied, and uses the specified load factor, hash code provider, and comparer.","needQuote":true,"needEscape":true,"nodes":[{"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class by copying the elements from the specified dictionary to the new <bpt id=\"p2\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object.","pos":[0,212],"source":"Initializes a new instance of the <xref href=\"System.Collections.Hashtable\"></xref> class by copying the elements from the specified dictionary to the new <xref href=\"System.Collections.Hashtable\"></xref> object."},{"content":"The new <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object has an initial capacity equal to the number of elements copied, and uses the specified load factor, hash code provider, and comparer.","pos":[213,411],"source":" The new <xref href=\"System.Collections.Hashtable\"></xref> object has an initial capacity equal to the number of elements copied, and uses the specified load factor, hash code provider, and comparer."}]},{"pos":[65233,66712],"content":"The initial capacity is set to the number of elements in the source dictionary. Capacity is automatically increased as required based on the load factor.       The load factor is the maximum ratio of elements to buckets. A smaller load factor means faster lookup at the cost of increased memory consumption. A load factor of 1.0 is the best balance between speed and size.       When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.       The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable> object. The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.       The comparer determines whether two keys are equal. Every key in a <xref:System.Collections.Hashtable> must be unique. The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName>.       The custom hash code provider and the custom comparer enable scenarios such as doing lookups with case-insensitive strings.       The elements of the new <xref:System.Collections.Hashtable> are sorted in the same order in which the enumerator iterates through the <xref:System.Collections.IDictionary> object.       This constructor is an O(`n`) operation, where `n` is the number of elements in the `d` parameter.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The initial capacity is set to the number of elements in the source dictionary.","pos":[0,79]},{"content":"Capacity is automatically increased as required based on the load factor.","pos":[80,153]},{"content":"The load factor is the maximum ratio of elements to buckets.","pos":[160,220]},{"content":"A smaller load factor means faster lookup at the cost of increased memory consumption.","pos":[221,307]},{"content":"A load factor of 1.0 is the best balance between speed and size.","pos":[308,372]},{"content":"When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.","pos":[379,576]},{"content":"The hash code provider dispenses hash codes for keys in the &lt;xref:System.Collections.Hashtable&gt; object.","pos":[583,686],"source":"       The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable> object."},{"content":"The default hash code provider is the key's implementation of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;.","pos":[687,810],"source":" The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=fullName>."},{"content":"The comparer determines whether two keys are equal.","pos":[817,868]},{"content":"Every key in a &lt;xref:System.Collections.Hashtable&gt; must be unique.","pos":[869,935],"source":" Every key in a <xref:System.Collections.Hashtable> must be unique."},{"content":"The default comparer is the key's implementation of &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.","pos":[936,1044],"source":" The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName>."},{"content":"The custom hash code provider and the custom comparer enable scenarios such as doing lookups with case-insensitive strings.","pos":[1051,1174]},{"content":"The elements of the new &lt;xref:System.Collections.Hashtable&gt; are sorted in the same order in which the enumerator iterates through the &lt;xref:System.Collections.IDictionary&gt; object.","pos":[1181,1360],"source":"       The elements of the new <xref:System.Collections.Hashtable> are sorted in the same order in which the enumerator iterates through the <xref:System.Collections.IDictionary> object."},{"content":"This constructor is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is the number of elements in the <ph id=\"ph3\">`d`</ph> parameter.","pos":[1367,1465],"source":"       This constructor is an O(`n`) operation, where `n` is the number of elements in the `d` parameter."}]},{"pos":[67595,67718],"content":"The &lt;xref:System.Collections.IDictionary&gt; object to copy to a new <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"The <xref:System.Collections.IDictionary> object to copy to a new <xref href=\"System.Collections.Hashtable\"></xref> object."},{"pos":[67785,67960],"content":"A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance. The result is the maximum ratio of elements to buckets.","needQuote":true,"needEscape":true,"nodes":[{"content":"A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance. The result is the maximum ratio of elements to buckets.","pos":[0,175],"nodes":[{"content":"A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance.","pos":[0,119]},{"content":"The result is the maximum ratio of elements to buckets.","pos":[120,175]}]}]},{"pos":[68044,68449],"content":"The <xref href=\"System.Collections.IHashCodeProvider\"></xref> object that supplies the hash codes for all keys in the <xref href=\"System.Collections.Hashtable\"></xref>.       -or-       <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> to use the default hash code provider, which is each key's implementation of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Collections.IHashCodeProvider\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that supplies the hash codes for all keys in the <bpt id=\"p2\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,168],"source":"The <xref href=\"System.Collections.IHashCodeProvider\"></xref> object that supplies the hash codes for all keys in the <xref href=\"System.Collections.Hashtable\"></xref>."},{"content":"-or-       <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to use the default hash code provider, which is each key's implementation of <ph id=\"ph1\">&amp;lt;</ph>xref:System.Object.GetHashCode%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>.","pos":[175,391],"source":"       -or-       <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> to use the default hash code provider, which is each key's implementation of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;."}]},{"pos":[68531,68843],"content":"The <xref:System.Collections.IComparer> object to use to determine whether two keys are equal.       -or-       <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> to use the default comparer, which is each key's implementation of &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.","needQuote":false,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Collections.IComparer&gt; object to use to determine whether two keys are equal.","pos":[0,94],"source":"The <xref:System.Collections.IComparer> object to use to determine whether two keys are equal."},{"content":"-or-       <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to use the default comparer, which is each key's implementation of <ph id=\"ph1\">&amp;lt;</ph>xref:System.Object.Equals%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>.","pos":[101,302],"source":"       -or-       <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> to use the default comparer, which is each key's implementation of &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;."}]},{"pos":[69009,69088],"content":"<ph id=\"ph1\">&lt;code&gt;d&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>d</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[69204,69311],"content":"<code>loadFactor</code> is less than 0.1.       -or-       <code>loadFactor</code> is greater than 1.0.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;loadFactor&lt;/code&gt;</ph> is less than 0.1.","pos":[0,41],"source":"<code>loadFactor</code> is less than 0.1."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;loadFactor&lt;/code&gt;</ph> is greater than 1.0.","pos":[48,103],"source":"       -or-       <code>loadFactor</code> is greater than 1.0."}]},{"pos":[69960,70141],"content":"Initializes a new, empty instance of the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class using the specified initial capacity, load factor, hash code provider, and comparer.","needQuote":true,"needEscape":true,"source":"Initializes a new, empty instance of the <xref href=\"System.Collections.Hashtable\"></xref> class using the specified initial capacity, load factor, hash code provider, and comparer."},{"pos":[70154,71507],"content":"Specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Hashtable> object. Capacity is automatically increased as required based on the load factor.       The load factor is the maximum ratio of elements to buckets. A smaller load factor means faster lookup at the cost of increased memory consumption. A load factor of 1.0 is the best balance between speed and size.       When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.       The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable>. The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.       The comparer determines whether two keys are equal. Every key in a <xref:System.Collections.Hashtable> must be unique. The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName>.       The custom hash code provider and the custom comparer enable scenarios such as doing lookups with case-insensitive strings.       This constructor is an O(`n`) operation, where `n` is the `capacity` parameter.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the &lt;xref:System.Collections.Hashtable&gt; object.","pos":[0,167],"source":"Specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Hashtable> object."},{"content":"Capacity is automatically increased as required based on the load factor.","pos":[168,241]},{"content":"The load factor is the maximum ratio of elements to buckets.","pos":[248,308]},{"content":"A smaller load factor means faster lookup at the cost of increased memory consumption.","pos":[309,395]},{"content":"A load factor of 1.0 is the best balance between speed and size.","pos":[396,460]},{"content":"When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.","pos":[467,664]},{"content":"The hash code provider dispenses hash codes for keys in the &lt;xref:System.Collections.Hashtable&gt;.","pos":[671,767],"source":"       The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable>."},{"content":"The default hash code provider is the key's implementation of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;.","pos":[768,891],"source":" The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=fullName>."},{"content":"The comparer determines whether two keys are equal.","pos":[898,949]},{"content":"Every key in a &lt;xref:System.Collections.Hashtable&gt; must be unique.","pos":[950,1016],"source":" Every key in a <xref:System.Collections.Hashtable> must be unique."},{"content":"The default comparer is the key's implementation of &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.","pos":[1017,1125],"source":" The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName>."},{"content":"The custom hash code provider and the custom comparer enable scenarios such as doing lookups with case-insensitive strings.","pos":[1132,1255]},{"content":"This constructor is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is the <ph id=\"ph3\">`capacity`</ph> parameter.","pos":[1262,1341],"source":"       This constructor is an O(`n`) operation, where `n` is the `capacity` parameter."}]},{"pos":[72338,72461],"content":"The approximate number of elements that the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object can initially contain.","needQuote":true,"needEscape":true,"source":"The approximate number of elements that the <xref href=\"System.Collections.Hashtable\"></xref> object can initially contain."},{"pos":[72528,72703],"content":"A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance. The result is the maximum ratio of elements to buckets.","needQuote":true,"needEscape":true,"nodes":[{"content":"A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance. The result is the maximum ratio of elements to buckets.","pos":[0,175],"nodes":[{"content":"A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance.","pos":[0,119]},{"content":"The result is the maximum ratio of elements to buckets.","pos":[120,175]}]}]},{"pos":[72787,73192],"content":"The <xref href=\"System.Collections.IHashCodeProvider\"></xref> object that supplies the hash codes for all keys in the <xref href=\"System.Collections.Hashtable\"></xref>.       -or-       <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> to use the default hash code provider, which is each key's implementation of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Collections.IHashCodeProvider\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that supplies the hash codes for all keys in the <bpt id=\"p2\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,168],"source":"The <xref href=\"System.Collections.IHashCodeProvider\"></xref> object that supplies the hash codes for all keys in the <xref href=\"System.Collections.Hashtable\"></xref>."},{"content":"-or-       <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to use the default hash code provider, which is each key's implementation of <ph id=\"ph1\">&amp;lt;</ph>xref:System.Object.GetHashCode%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>.","pos":[175,391],"source":"       -or-       <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> to use the default hash code provider, which is each key's implementation of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;."}]},{"pos":[73274,73586],"content":"The <xref:System.Collections.IComparer> object to use to determine whether two keys are equal.       -or-       <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> to use the default comparer, which is each key's implementation of &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.","needQuote":false,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Collections.IComparer&gt; object to use to determine whether two keys are equal.","pos":[0,94],"source":"The <xref:System.Collections.IComparer> object to use to determine whether two keys are equal."},{"content":"-or-       <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to use the default comparer, which is each key's implementation of <ph id=\"ph1\">&amp;lt;</ph>xref:System.Object.Equals%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>.","pos":[101,302],"source":"       -or-       <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> to use the default comparer, which is each key's implementation of &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;."}]},{"pos":[73765,73934],"content":"<code>capacity</code> is less than zero.       -or-       <code>loadFactor</code> is less than 0.1.       -or-       <code>loadFactor</code> is greater than 1.0.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;capacity&lt;/code&gt;</ph> is less than zero.","pos":[0,40],"source":"<code>capacity</code> is less than zero."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;loadFactor&lt;/code&gt;</ph> is less than 0.1.","pos":[47,99],"source":"       -or-       <code>loadFactor</code> is less than 0.1."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;loadFactor&lt;/code&gt;</ph> is greater than 1.0.","pos":[106,161],"source":"       -or-       <code>loadFactor</code> is greater than 1.0."}]},{"pos":[74343,74451],"content":"Adds an element with the specified key and value into the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Adds an element with the specified key and value into the <xref href=\"System.Collections.Hashtable\"></xref>."},{"pos":[74464,75545],"content":"A key cannot be `null`, but a value can be.       An object that has no correlation between its state and its hash code value should typically not be used as the key. For example, String objects are better than StringBuilder objects for use as keys.       You can also use the <xref:System.Collections.Hashtable.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.Hashtable>; for example, `myCollection[\"myNonexistentKey\"] = myValue`. However, if the specified key already exists in the <xref:System.Collections.Hashtable>, setting the <xref:System.Collections.Hashtable.Item%2A> property overwrites the old value. In contrast, the Add method does not modify existing elements.       If <xref:System.Collections.Hashtable.Count%2A> is less than the capacity of the <xref:System.Collections.Hashtable>, this method is an O(1) operation. If the capacity needs to be increased to accommodate the new element, this method becomes an O(`n`) operation, where `n` is <xref:System.Collections.Hashtable.Count%2A>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"A key cannot be <ph id=\"ph1\">`null`</ph>, but a value can be.","pos":[0,43],"source":"A key cannot be `null`, but a value can be."},{"content":"An object that has no correlation between its state and its hash code value should typically not be used as the key.","pos":[50,166]},{"content":"For example, String objects are better than StringBuilder objects for use as keys.","pos":[167,249]},{"content":"You can also use the &lt;xref:System.Collections.Hashtable.Item%2A&gt; property to add new elements by setting the value of a key that does not exist in the &lt;xref:System.Collections.Hashtable&gt;; for example, <ph id=\"ph1\">`myCollection[\"myNonexistentKey\"] = myValue`</ph>.","pos":[256,502],"source":"       You can also use the <xref:System.Collections.Hashtable.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.Hashtable>; for example, `myCollection[\"myNonexistentKey\"] = myValue`."},{"content":"However, if the specified key already exists in the &lt;xref:System.Collections.Hashtable&gt;, setting the &lt;xref:System.Collections.Hashtable.Item%2A&gt; property overwrites the old value.","pos":[503,682],"source":" However, if the specified key already exists in the <xref:System.Collections.Hashtable>, setting the <xref:System.Collections.Hashtable.Item%2A> property overwrites the old value."},{"content":"In contrast, the Add method does not modify existing elements.","pos":[683,745]},{"content":"If &lt;xref:System.Collections.Hashtable.Count%2A&gt; is less than the capacity of the &lt;xref:System.Collections.Hashtable&gt;, this method is an O(1) operation.","pos":[752,903],"source":"       If <xref:System.Collections.Hashtable.Count%2A> is less than the capacity of the <xref:System.Collections.Hashtable>, this method is an O(1) operation."},{"content":"If the capacity needs to be increased to accommodate the new element, this method becomes an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is &lt;xref:System.Collections.Hashtable.Count%2A&gt;.","pos":[904,1073],"source":" If the capacity needs to be increased to accommodate the new element, this method becomes an O(`n`) operation, where `n` is <xref:System.Collections.Hashtable.Count%2A>."}]},{"pos":[76128,76158],"content":"The key of the element to add.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key of the element to add.","pos":[0,30]}]},{"pos":[76220,76331],"content":"The value of the element to add. The value can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value of the element to add.","pos":[0,32]},{"content":"The value can be <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[33,111],"source":" The value can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[76494,76575],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>key</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[76670,76771],"content":"An element with the same key already exists in the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An element with the same key already exists in the <xref href=\"System.Collections.Hashtable\"></xref>."},{"pos":[76875,77039],"content":"The <xref href=\"System.Collections.Hashtable\"></xref> is read-only.       -or-       The <xref href=\"System.Collections.Hashtable\"></xref> has a fixed size.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is read-only.","pos":[0,67],"source":"The <xref href=\"System.Collections.Hashtable\"></xref> is read-only."},{"content":"-or-       The <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> has a fixed size.","pos":[74,156],"source":"       -or-       The <xref href=\"System.Collections.Hashtable\"></xref> has a fixed size."}]},{"pos":[77361,77441],"content":"Removes all elements from the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Removes all elements from the <xref href=\"System.Collections.Hashtable\"></xref>."},{"pos":[77454,77732],"content":"<xref:System.Collections.Hashtable.Count%2A> is set to zero, and references to other objects from elements of the collection are also released. The capacity remains unchanged.       This method is an O(`n`) operation, where `n` is <xref:System.Collections.Hashtable.Count%2A>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"&lt;xref:System.Collections.Hashtable.Count%2A&gt; is set to zero, and references to other objects from elements of the collection are also released.","pos":[0,143],"source":"<xref:System.Collections.Hashtable.Count%2A> is set to zero, and references to other objects from elements of the collection are also released."},{"content":"The capacity remains unchanged.","pos":[144,175]},{"content":"This method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is &lt;xref:System.Collections.Hashtable.Count%2A&gt;.","pos":[182,276],"source":"       This method is an O(`n`) operation, where `n` is <xref:System.Collections.Hashtable.Count%2A>."}]},{"pos":[78414,78481],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is read-only.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Collections.Hashtable\"></xref> is read-only."},{"pos":[78802,78882],"content":"Creates a shallow copy of the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Creates a shallow copy of the <xref href=\"System.Collections.Hashtable\"></xref>."},{"pos":[78895,79718],"content":"A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but it does not copy the objects that the references refer to. The references in the new collection point to the same objects that the references in the original collection point to.       In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.       The <xref:System.Collections.Hashtable> clone has the same count, the same capacity, the same <xref:System.Collections.IHashCodeProvider> implementation, and the same <xref:System.Collections.IComparer> implementation as the original <xref:System.Collections.Hashtable>.       This method is an O(`n`) operation, where `n` is <xref:System.Collections.Hashtable.Count%2A>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but it does not copy the objects that the references refer to.","pos":[0,186]},{"content":"The references in the new collection point to the same objects that the references in the original collection point to.","pos":[187,306]},{"content":"In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.","pos":[313,439]},{"content":"The &lt;xref:System.Collections.Hashtable&gt; clone has the same count, the same capacity, the same &lt;xref:System.Collections.IHashCodeProvider&gt; implementation, and the same &lt;xref:System.Collections.IComparer&gt; implementation as the original &lt;xref:System.Collections.Hashtable&gt;.","pos":[446,716],"source":"       The <xref:System.Collections.Hashtable> clone has the same count, the same capacity, the same <xref:System.Collections.IHashCodeProvider> implementation, and the same <xref:System.Collections.IComparer> implementation as the original <xref:System.Collections.Hashtable>."},{"content":"This method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is &lt;xref:System.Collections.Hashtable.Count%2A&gt;.","pos":[723,817],"source":"       This method is an O(`n`) operation, where `n` is <xref:System.Collections.Hashtable.Count%2A>."}]},{"pos":[79851,79923],"content":"A shallow copy of the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A shallow copy of the <xref href=\"System.Collections.Hashtable\"></xref>."},{"pos":[80320,80438],"content":"Gets or sets the &lt;xref:System.Collections.IComparer&gt; to use for the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets or sets the <xref:System.Collections.IComparer> to use for the <xref href=\"System.Collections.Hashtable\"></xref>."},{"pos":[80450,80509],"content":"Retrieving the value of this property is an O(1) operation.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Retrieving the value of this property is an O(1) operation.","pos":[0,59]}]},{"pos":[80667,80772],"content":"The &lt;xref:System.Collections.IComparer&gt; to use for the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <xref:System.Collections.IComparer> to use for the <xref href=\"System.Collections.Hashtable\"></xref>."},{"pos":[80932,81048],"content":"The property is set to a value, but the hash table was created using an <xref:System.Collections.IEqualityComparer>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The property is set to a value, but the hash table was created using an &lt;xref:System.Collections.IEqualityComparer&gt;.","pos":[0,116],"source":"The property is set to a value, but the hash table was created using an <xref:System.Collections.IEqualityComparer>."}]},{"pos":[81432,81529],"content":"Determines whether the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> contains a specific key.","needQuote":true,"needEscape":true,"source":"Determines whether the <xref href=\"System.Collections.Hashtable\"></xref> contains a specific key."},{"pos":[81542,82196],"content":"Contains implements <xref:System.Collections.IDictionary.Contains%2A?displayProperty=fullName>. It behaves exactly as <xref:System.Collections.Hashtable.ContainsKey%2A>.       This method is an O(1) operation.       Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Contains implements &lt;xref:System.Collections.IDictionary.Contains%2A?displayProperty=fullName&gt;.","pos":[0,95],"source":"Contains implements <xref:System.Collections.IDictionary.Contains%2A?displayProperty=fullName>."},{"content":"It behaves exactly as &lt;xref:System.Collections.Hashtable.ContainsKey%2A&gt;.","pos":[96,169],"source":" It behaves exactly as <xref:System.Collections.Hashtable.ContainsKey%2A>."},{"content":"This method is an O(1) operation.","pos":[176,209]},{"content":"Starting with the .NET Framework 2.0, this method uses the collection’s objects’ &lt;xref:System.Object.Equals%2A&gt; and &lt;xref:System.IComparable.CompareTo%2A&gt; methods on <ph id=\"ph1\">`item`</ph> to determine whether item exists.","pos":[216,422],"source":"       Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists."},{"content":"In the earlier versions of the .NET Framework, this determination was made by using the &lt;xref:System.Object.Equals%2A&gt; and &lt;xref:System.IComparable.CompareTo%2A&gt; methods of the <ph id=\"ph1\">`item`</ph> parameter on the objects in the collection.","pos":[423,650],"source":" In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection."}]},{"pos":[82818,82893],"content":"The key to locate in the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The key to locate in the <xref href=\"System.Collections.Hashtable\"></xref>."},{"pos":[82952,83188],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the <bpt id=\"p2\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> contains an element with the specified key; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Collections.Hashtable\"></xref> contains an element with the specified key; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[83356,83437],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>key</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[83836,83933],"content":"Determines whether the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> contains a specific key.","needQuote":true,"needEscape":true,"source":"Determines whether the <xref href=\"System.Collections.Hashtable\"></xref> contains a specific key."},{"pos":[83946,84510],"content":"This method behaves exactly as <xref:System.Collections.Hashtable.Contains%2A>.       This method is an O(1) operation.       Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method behaves exactly as &lt;xref:System.Collections.Hashtable.Contains%2A&gt;.","pos":[0,79],"source":"This method behaves exactly as <xref:System.Collections.Hashtable.Contains%2A>."},{"content":"This method is an O(1) operation.","pos":[86,119]},{"content":"Starting with the .NET Framework 2.0, this method uses the collection’s objects’ &lt;xref:System.Object.Equals%2A&gt; and &lt;xref:System.IComparable.CompareTo%2A&gt; methods on <ph id=\"ph1\">`item`</ph> to determine whether item exists.","pos":[126,332],"source":"       Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists."},{"content":"In the earlier versions of the .NET Framework, this determination was made by using the &lt;xref:System.Object.Equals%2A&gt; and &lt;xref:System.IComparable.CompareTo%2A&gt; methods of the <ph id=\"ph1\">`item`</ph> parameter on the objects in the collection.","pos":[333,560],"source":" In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection."}]},{"pos":[85132,85207],"content":"The key to locate in the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The key to locate in the <xref href=\"System.Collections.Hashtable\"></xref>."},{"pos":[85266,85502],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the <bpt id=\"p2\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> contains an element with the specified key; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Collections.Hashtable\"></xref> contains an element with the specified key; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[85673,85754],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>key</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[86163,86262],"content":"Determines whether the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> contains a specific value.","needQuote":true,"needEscape":true,"source":"Determines whether the <xref href=\"System.Collections.Hashtable\"></xref> contains a specific value."},{"pos":[86275,87049],"content":"The values of the elements of the <xref:System.Collections.Hashtable> are compared to the specified value using the <xref:System.Object.Equals%2A?displayProperty=fullName> method.       This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Hashtable.Count%2A>.       Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The values of the elements of the &lt;xref:System.Collections.Hashtable&gt; are compared to the specified value using the &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt; method.","pos":[0,179],"source":"The values of the elements of the <xref:System.Collections.Hashtable> are compared to the specified value using the <xref:System.Object.Equals%2A?displayProperty=fullName> method."},{"content":"This method performs a linear search; therefore, this method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is &lt;xref:System.Collections.Hashtable.Count%2A&gt;.","pos":[186,329],"source":"       This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Hashtable.Count%2A>."},{"content":"Starting with the .NET Framework 2.0, this method uses the collection’s objects’ &lt;xref:System.Object.Equals%2A&gt; and &lt;xref:System.IComparable.CompareTo%2A&gt; methods on <ph id=\"ph1\">`item`</ph> to determine whether item exists.","pos":[336,542],"source":"       Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists."},{"content":"In the earlier versions of the .NET Framework, this determination was made by using the &lt;xref:System.Object.Equals%2A&gt; and &lt;xref:System.IComparable.CompareTo%2A&gt; methods of the <ph id=\"ph1\">`item`</ph> parameter on the objects in the collection.","pos":[543,770],"source":" In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection."}]},{"pos":[87677,87833],"content":"The value to locate in the <xref href=\"System.Collections.Hashtable\"></xref>. The value can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value to locate in the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,77],"source":"The value to locate in the <xref href=\"System.Collections.Hashtable\"></xref>."},{"content":"The value can be <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[78,156],"source":" The value can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[87892,88143],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the <bpt id=\"p2\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> contains an element with the specified <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p3\">&lt;/code&gt;</ept>; otherwise, <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Collections.Hashtable\"></xref> contains an element with the specified <code>value</code>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[88629,88772],"content":"Copies the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> elements to a one-dimensional &lt;xref:System.Array&gt; instance at the specified index.","needQuote":true,"needEscape":true,"source":"Copies the <xref href=\"System.Collections.Hashtable\"></xref> elements to a one-dimensional <xref:System.Array> instance at the specified index."},{"pos":[88785,89248],"content":"The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.Hashtable>.       To copy only the keys in the <xref:System.Collections.Hashtable>, use `Hashtable.Keys.CopyTo`.       To copy only the values in the <xref:System.Collections.Hashtable>, use `Hashtable.Values.CopyTo`.       This method is an O(`n`) operation, where `n` is <xref:System.Collections.Hashtable.Count%2A>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The elements are copied to the &lt;xref:System.Array&gt; in the same order in which the enumerator iterates through the &lt;xref:System.Collections.Hashtable&gt;.","pos":[0,150],"source":"The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.Hashtable>."},{"content":"To copy only the keys in the &lt;xref:System.Collections.Hashtable&gt;, use <ph id=\"ph1\">`Hashtable.Keys.CopyTo`</ph>.","pos":[157,251],"source":"       To copy only the keys in the <xref:System.Collections.Hashtable>, use `Hashtable.Keys.CopyTo`."},{"content":"To copy only the values in the &lt;xref:System.Collections.Hashtable&gt;, use <ph id=\"ph1\">`Hashtable.Values.CopyTo`</ph>.","pos":[258,356],"source":"       To copy only the values in the <xref:System.Collections.Hashtable>, use `Hashtable.Values.CopyTo`."},{"content":"This method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is &lt;xref:System.Collections.Hashtable.Count%2A&gt;.","pos":[363,457],"source":"       This method is an O(`n`) operation, where `n` is <xref:System.Collections.Hashtable.Count%2A>."}]},{"pos":[89919,90157],"content":"The one-dimensional <xref:System.Array> that is the destination of the <xref:System.Collections.DictionaryEntry> objects copied from <xref href=\"System.Collections.Hashtable\"></xref>. The <xref:System.Array> must have zero-based indexing.","needQuote":true,"needEscape":true,"nodes":[{"content":"The one-dimensional &lt;xref:System.Array&gt; that is the destination of the &lt;xref:System.Collections.DictionaryEntry&gt; objects copied from <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,183],"source":"The one-dimensional <xref:System.Array> that is the destination of the <xref:System.Collections.DictionaryEntry> objects copied from <xref href=\"System.Collections.Hashtable\"></xref>."},{"content":"The &lt;xref:System.Array&gt; must have zero-based indexing.","pos":[184,238],"source":" The <xref:System.Array> must have zero-based indexing."}]},{"pos":[90223,90279],"content":"The zero-based index in <ph id=\"ph1\">`array`</ph> at which copying begins.","needQuote":true,"needEscape":true,"source":"The zero-based index in `array` at which copying begins."},{"pos":[90445,90528],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>array</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[90643,90685],"content":"<ph id=\"ph1\">&lt;code&gt;arrayIndex&lt;/code&gt;</ph> is less than zero.","needQuote":true,"needEscape":true,"source":"<code>arrayIndex</code> is less than zero."},{"pos":[90781,91045],"content":"<code>array</code> is multidimensional.       -or-       The number of elements in the source <xref href=\"System.Collections.Hashtable\"></xref> is greater than the available space from <code>arrayIndex</code> to the end of the destination <code>array</code>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is multidimensional.","pos":[0,39],"source":"<code>array</code> is multidimensional."},{"content":"-or-       The number of elements in the source <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is greater than the available space from <ph id=\"ph1\">&lt;code&gt;arrayIndex&lt;/code&gt;</ph> to the end of the destination <ph id=\"ph2\">&lt;code&gt;array&lt;/code&gt;</ph>.","pos":[46,258],"source":"       -or-       The number of elements in the source <xref href=\"System.Collections.Hashtable\"></xref> is greater than the available space from <code>arrayIndex</code> to the end of the destination <code>array</code>."}]},{"pos":[91147,91299],"content":"The type of the source <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> cannot be cast automatically to the type of the destination <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">array</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The type of the source <xref href=\"System.Collections.Hashtable\"></xref> cannot be cast automatically to the type of the destination <code>array</code>."},{"pos":[91616,91718],"content":"Gets the number of key/value pairs contained in the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets the number of key/value pairs contained in the <xref href=\"System.Collections.Hashtable\"></xref>."},{"pos":[91730,91789],"content":"Retrieving the value of this property is an O(1) operation.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Retrieving the value of this property is an O(1) operation.","pos":[0,59]}]},{"pos":[91903,92000],"content":"The number of key/value pairs contained in the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The number of key/value pairs contained in the <xref href=\"System.Collections.Hashtable\"></xref>."},{"pos":[92437,92555],"content":"Gets the &lt;xref:System.Collections.IEqualityComparer&gt; to use for the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets the <xref:System.Collections.IEqualityComparer> to use for the <xref href=\"System.Collections.Hashtable\"></xref>."},{"pos":[92568,93083],"content":"The <xref:System.Collections.IEqualityComparer> includes both the comparer and the hash code provider. If an <xref:System.Collections.IEqualityComparer> is used in the <xref:System.Collections.Hashtable> constructor, the objects used as keys in the <xref:System.Collections.Hashtable> are not required to override the <xref:System.Object.GetHashCode%2A?displayProperty=fullName> and <xref:System.Object.Equals%2A?displayProperty=fullName> methods.       Retrieving the value of this property is an O(1) operation.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <xref:System.Collections.IEqualityComparer> includes both the comparer and the hash code provider. If an <xref:System.Collections.IEqualityComparer> is used in the <xref:System.Collections.Hashtable> constructor, the objects used as keys in the <xref:System.Collections.Hashtable> are not required to override the <xref:System.Object.GetHashCode%2A?displayProperty=fullName> and <xref:System.Object.Equals%2A?displayProperty=fullName> methods.       Retrieving the value of this property is an O(1) operation.","pos":[0,513],"nodes":[{"content":"The &lt;xref:System.Collections.IEqualityComparer&gt; includes both the comparer and the hash code provider.","pos":[0,102],"source":"The <xref:System.Collections.IEqualityComparer> includes both the comparer and the hash code provider."},{"content":"If an &lt;xref:System.Collections.IEqualityComparer&gt; is used in the &lt;xref:System.Collections.Hashtable&gt; constructor, the objects used as keys in the &lt;xref:System.Collections.Hashtable&gt; are not required to override the &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt; and &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt; methods.","pos":[103,447],"source":" If an <xref:System.Collections.IEqualityComparer> is used in the <xref:System.Collections.Hashtable> constructor, the objects used as keys in the <xref:System.Collections.Hashtable> are not required to override the <xref:System.Object.GetHashCode%2A?displayProperty=fullName> and <xref:System.Object.Equals%2A?displayProperty=fullName> methods."},{"content":"Retrieving the value of this property is an O(1) operation.","pos":[454,513]}]}]},{"pos":[93261,93374],"content":"The &lt;xref:System.Collections.IEqualityComparer&gt; to use for the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <xref:System.Collections.IEqualityComparer> to use for the <xref href=\"System.Collections.Hashtable\"></xref>."},{"pos":[93542,93715],"content":"The property is set to a value, but the hash table was created using an <bpt id=\"p1\">&lt;xref href=\"System.Collections.IHashCodeProvider\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and an &lt;xref:System.Collections.IComparer&gt;.","needQuote":true,"needEscape":true,"source":"The property is set to a value, but the hash table was created using an <xref href=\"System.Collections.IHashCodeProvider\"></xref> and an <xref:System.Collections.IComparer>."},{"pos":[94076,94211],"content":"Returns an &lt;xref:System.Collections.IDictionaryEnumerator&gt; that iterates through the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns an <xref:System.Collections.IDictionaryEnumerator> that iterates through the <xref href=\"System.Collections.Hashtable\"></xref>."},{"pos":[94224,97098],"content":"[Visual Basic, C#]       The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.       Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.       Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.       <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.       If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.       An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.       The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.       This method is an O(1) operation.       Because serializing and deserializing an enumerator for a <xref:System.Collections.Hashtable> can cause the elements to become reordered, it is not possible to continue enumeration without calling the <xref:System.Collections.IEnumerator.Reset%2A> method.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"[Visual Basic, C#]       The <ph id=\"ph1\">`foreach`</ph> statement of the C# language (<ph id=\"ph2\">`for each`</ph> in Visual Basic) hides the complexity of the enumerators.","pos":[0,137],"source":"[Visual Basic, C#]       The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators."},{"content":"Therefore, using <ph id=\"ph1\">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.","pos":[139,230],"source":"  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator."},{"content":"Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.","pos":[237,357]},{"content":"Initially, the enumerator is positioned before the first element in the collection.","pos":[364,447]},{"content":"&lt;xref:System.Collections.IEnumerator.Reset%2A&gt; also brings the enumerator back to this position.","pos":[448,544],"source":" <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position."},{"content":"At this position, &lt;xref:System.Collections.IEnumerator.Current%2A&gt; is undefined.","pos":[546,626],"source":"  At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined."},{"content":"Therefore, you must call &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; to advance the enumerator to the first element of the collection before reading the value of &lt;xref:System.Collections.IEnumerator.Current%2A&gt;.","pos":[627,844],"source":" Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>."},{"content":"&lt;xref:System.Collections.IEnumerator.Current%2A&gt; returns the same object until either &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; or &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; is called.","pos":[851,1047],"source":"       <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called."},{"content":"&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; sets &lt;xref:System.Collections.IEnumerator.Current%2A&gt; to the next element.","pos":[1048,1172],"source":" <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element."},{"content":"If &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; passes the end of the collection, the enumerator is positioned after the last element in the collection and &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; returns <ph id=\"ph1\">`false`</ph>.","pos":[1179,1406],"source":"       If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`."},{"content":"When the enumerator is at this position, subsequent calls to &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; also return <ph id=\"ph1\">`false`</ph>.","pos":[1407,1538],"source":" When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`."},{"content":"If the last call to &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; returned <ph id=\"ph1\">`false`</ph>, &lt;xref:System.Collections.IEnumerator.Current%2A&gt; is undefined.","pos":[1539,1689],"source":" If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined."},{"content":"To set &lt;xref:System.Collections.IEnumerator.Current%2A&gt; to the first element of the collection again, you can call &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; followed by &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;.","pos":[1690,1914],"source":" To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>."},{"content":"An enumerator remains valid as long as the collection remains unchanged.","pos":[1921,1993]},{"content":"If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.","pos":[1994,2156]},{"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread safe procedure.","pos":[2163,2317]},{"content":"To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.","pos":[2319,2424]},{"content":"To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","pos":[2426,2554]},{"content":"This method is an O(1) operation.","pos":[2561,2594]},{"content":"Because serializing and deserializing an enumerator for a &lt;xref:System.Collections.Hashtable&gt; can cause the elements to become reordered, it is not possible to continue enumeration without calling the &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; method.","pos":[2601,2856],"source":"       Because serializing and deserializing an enumerator for a <xref:System.Collections.Hashtable> can cause the elements to become reordered, it is not possible to continue enumeration without calling the <xref:System.Collections.IEnumerator.Reset%2A> method."}]},{"pos":[97765,97874],"content":"An &lt;xref:System.Collections.IDictionaryEnumerator&gt; for the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An <xref:System.Collections.IDictionaryEnumerator> for the <xref href=\"System.Collections.Hashtable\"></xref>."},{"pos":[98326,98370],"content":"Returns the hash code for the specified key.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the hash code for the specified key.","pos":[0,44]}]},{"pos":[98383,98681],"content":"If the hash table was created with a specific <xref:System.Collections.IHashCodeProvider> implementation, this method uses that hash code provider; otherwise, it uses the <xref:System.Object.GetHashCode%2A?displayProperty=fullName> implementation of `key`.       This method is an O(1) operation.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If the hash table was created with a specific &lt;xref:System.Collections.IHashCodeProvider&gt; implementation, this method uses that hash code provider; otherwise, it uses the &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt; implementation of <ph id=\"ph1\">`key`</ph>.","pos":[0,256],"source":"If the hash table was created with a specific <xref:System.Collections.IHashCodeProvider> implementation, this method uses that hash code provider; otherwise, it uses the <xref:System.Object.GetHashCode%2A?displayProperty=fullName> implementation of `key`."},{"content":"This method is an O(1) operation.","pos":[263,296]}]},{"pos":[98825,98890],"content":"The <xref:System.Object> for which a hash code is to be returned.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Object&gt; for which a hash code is to be returned.","pos":[0,65],"source":"The <xref:System.Object> for which a hash code is to be returned."}]},{"pos":[98947,98982],"content":"The hash code for <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">key</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The hash code for <code>key</code>."},{"pos":[99151,99232],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>key</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[99883,100067],"content":"Implements the <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Serialization.ISerializable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> interface and returns the data needed to serialize the <bpt id=\"p2\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Implements the <xref href=\"System.Runtime.Serialization.ISerializable\"></xref> interface and returns the data needed to serialize the <xref href=\"System.Collections.Hashtable\"></xref>."},{"pos":[100079,100173],"content":"This method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is &lt;xref:System.Collections.Hashtable.Count%2A&gt;.","needQuote":true,"needEscape":true,"extradata":"MT","source":"This method is an O(`n`) operation, where `n` is <xref:System.Collections.Hashtable.Count%2A>."},{"pos":[100450,100630],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Serialization.SerializationInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object containing the information required to serialize the <bpt id=\"p2\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object containing the information required to serialize the <xref href=\"System.Collections.Hashtable\"></xref>."},{"pos":[100726,100921],"content":"A &lt;xref:System.Runtime.Serialization.StreamingContext&gt; object containing the source and destination of the serialized stream associated with the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref:System.Runtime.Serialization.StreamingContext> object containing the source and destination of the serialized stream associated with the <xref href=\"System.Collections.Hashtable\"></xref>."},{"pos":[101094,101176],"content":"<ph id=\"ph1\">&lt;code&gt;info&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>info</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[101287,101315],"content":"The collection was modified.","needQuote":true,"needEscape":true,"nodes":[{"content":"The collection was modified.","pos":[0,28]}]},{"pos":[101622,101675],"content":"Gets or sets the object that can dispense hash codes.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the object that can dispense hash codes.","pos":[0,53]}]},{"pos":[101687,101746],"content":"Retrieving the value of this property is an O(1) operation.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Retrieving the value of this property is an O(1) operation.","pos":[0,59]}]},{"pos":[101915,101955],"content":"The object that can dispense hash codes.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object that can dispense hash codes.","pos":[0,40]}]},{"pos":[102110,102226],"content":"The property is set to a value, but the hash table was created using an <xref:System.Collections.IEqualityComparer>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The property is set to a value, but the hash table was created using an &lt;xref:System.Collections.IEqualityComparer&gt;.","pos":[0,116],"source":"The property is set to a value, but the hash table was created using an <xref:System.Collections.IEqualityComparer>."}]},{"pos":[102573,102676],"content":"Gets a value indicating whether the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> has a fixed size.","needQuote":true,"needEscape":true,"source":"Gets a value indicating whether the <xref href=\"System.Collections.Hashtable\"></xref> has a fixed size."},{"pos":[102689,103203],"content":"A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.       A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.       Retrieving the value of this property is an O(1) operation.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.       A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.       Retrieving the value of this property is an O(1) operation.","pos":[0,510],"nodes":[{"content":"A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.","pos":[0,167]},{"content":"A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.","pos":[174,444]},{"content":"Retrieving the value of this property is an O(1) operation.","pos":[451,510]}]}]},{"pos":[103327,103616],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Collections.Hashtable\"></xref> has a fixed size; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the <bpt id=\"p2\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> has a fixed size; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","pos":[0,210],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Collections.Hashtable\"></xref> has a fixed size; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[211,289],"source":" The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[104029,104128],"content":"Gets a value indicating whether the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is read-only.","needQuote":true,"needEscape":true,"source":"Gets a value indicating whether the <xref href=\"System.Collections.Hashtable\"></xref> is read-only."},{"pos":[104141,104565],"content":"A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.       A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.       Retrieving the value of this property is an O(1) operation.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.       A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.       Retrieving the value of this property is an O(1) operation.","pos":[0,420],"nodes":[{"content":"A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.","pos":[0,129]},{"content":"A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.","pos":[136,354]},{"content":"Retrieving the value of this property is an O(1) operation.","pos":[361,420]}]}]},{"pos":[104688,104973],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Collections.Hashtable\"></xref> is read-only; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the <bpt id=\"p2\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> is read-only; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","pos":[0,206],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Collections.Hashtable\"></xref> is read-only; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[207,285],"source":" The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[105405,105531],"content":"Gets a value indicating whether access to the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is synchronized (thread safe).","needQuote":true,"needEscape":true,"source":"Gets a value indicating whether access to the <xref href=\"System.Collections.Hashtable\"></xref> is synchronized (thread safe)."},{"pos":[105544,106711],"content":"A <xref:System.Collections.Hashtable> can support one writer and multiple readers concurrently. To support multiple writers, all operations must be done through the wrapper returned by the <xref:System.Collections.Hashtable.Synchronized%2A> method.       Enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.       The following code example shows how to lock the collection using the <xref:System.Collections.Hashtable.SyncRoot%2A> during the entire enumeration:       [!code-cpp[Classic Hashtable.IsSynchronized Example#2](~/add/codesnippet/cpp/p-system.collections.has_1_1.cpp)]  [!code-vb[Classic Hashtable.IsSynchronized Example#2](~/add/codesnippet/visualbasic/p-system.collections.has_1_1.vb)]  [!code-cs[Classic Hashtable.IsSynchronized Example#2](~/add/codesnippet/csharp/p-system.collections.has_1_1.cs)]","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"A &lt;xref:System.Collections.Hashtable&gt; can support one writer and multiple readers concurrently.","pos":[0,95],"source":"A <xref:System.Collections.Hashtable> can support one writer and multiple readers concurrently."},{"content":"To support multiple writers, all operations must be done through the wrapper returned by the &lt;xref:System.Collections.Hashtable.Synchronized%2A&gt; method.","pos":[96,248],"source":" To support multiple writers, all operations must be done through the wrapper returned by the <xref:System.Collections.Hashtable.Synchronized%2A> method."},{"content":"Enumerating through a collection is intrinsically not a thread safe procedure.","pos":[255,333]},{"content":"Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.","pos":[334,471]},{"content":"To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[472,653]},{"content":"The following code example shows how to lock the collection using the &lt;xref:System.Collections.Hashtable.SyncRoot%2A&gt; during the entire enumeration:       <bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>Classic Hashtable.IsSynchronized Example#2<ept id=\"p2\">](~/add/codesnippet/cpp/p-system.collections.has_1_1.cpp)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>Classic Hashtable.IsSynchronized Example#2<ept id=\"p4\">](~/add/codesnippet/visualbasic/p-system.collections.has_1_1.vb)</ept><ept id=\"p3\">]</ept>  <bpt id=\"p5\">[!code-cs</bpt><bpt id=\"p6\">[</bpt>Classic Hashtable.IsSynchronized Example#2<ept id=\"p6\">](~/add/codesnippet/csharp/p-system.collections.has_1_1.cs)</ept><ept id=\"p5\">]</ept>","pos":[660,1159],"source":"       The following code example shows how to lock the collection using the <xref:System.Collections.Hashtable.SyncRoot%2A> during the entire enumeration:       [!code-cpp[Classic Hashtable.IsSynchronized Example#2](~/add/codesnippet/cpp/p-system.collections.has_1_1.cpp)]  [!code-vb[Classic Hashtable.IsSynchronized Example#2](~/add/codesnippet/visualbasic/p-system.collections.has_1_1.vb)]  [!code-cs[Classic Hashtable.IsSynchronized Example#2](~/add/codesnippet/csharp/p-system.collections.has_1_1.cs)]"}]},{"pos":[107424,107736],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if access to the <xref href=\"System.Collections.Hashtable\"></xref> is synchronized (thread safe); otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if access to the <bpt id=\"p2\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> is synchronized (thread safe); otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","pos":[0,233],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if access to the <xref href=\"System.Collections.Hashtable\"></xref> is synchronized (thread safe); otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[234,312],"source":" The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[108176,108233],"content":"Gets or sets the value associated with the specified key.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the value associated with the specified key.","pos":[0,57]}]},{"pos":[108246,109587],"content":"This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[key]`.       You can also use the Item property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.Hashtable>; for example, `myCollection[\"myNonexistentKey\"] = myValue`. However, if the specified key already exists in the <xref:System.Collections.Hashtable>, setting the Item property overwrites the old value. In contrast, the <xref:System.Collections.Hashtable.Add%2A> method does not modify existing elements.       A key cannot be `null`, but a value can be. To distinguish between `null` that is returned because the specified key is not found and `null` that is returned because the value of the specified key is `null`, use the <xref:System.Collections.Hashtable.Contains%2A> method or the <xref:System.Collections.Hashtable.ContainsKey%2A> method to determine if the key exists in the list.       Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.       The C# language uses the  keyword to define the indexers instead of implementing the <xref:System.Collections.IList.Item%2A> property. Visual Basic implements Item as a default property, which provides the same indexing functionality.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This property provides the ability to access a specific element in the collection by using the following syntax: <ph id=\"ph1\">`myCollection[key]`</ph>.","pos":[0,133],"source":"This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[key]`."},{"content":"You can also use the Item property to add new elements by setting the value of a key that does not exist in the &lt;xref:System.Collections.Hashtable&gt;; for example, <ph id=\"ph1\">`myCollection[\"myNonexistentKey\"] = myValue`</ph>.","pos":[140,347],"source":"       You can also use the Item property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.Hashtable>; for example, `myCollection[\"myNonexistentKey\"] = myValue`."},{"content":"However, if the specified key already exists in the &lt;xref:System.Collections.Hashtable&gt;, setting the Item property overwrites the old value.","pos":[348,488],"source":" However, if the specified key already exists in the <xref:System.Collections.Hashtable>, setting the Item property overwrites the old value."},{"content":"In contrast, the &lt;xref:System.Collections.Hashtable.Add%2A&gt; method does not modify existing elements.","pos":[489,590],"source":" In contrast, the <xref:System.Collections.Hashtable.Add%2A> method does not modify existing elements."},{"content":"A key cannot be <ph id=\"ph1\">`null`</ph>, but a value can be.","pos":[597,640],"source":"       A key cannot be `null`, but a value can be."},{"content":"To distinguish between <ph id=\"ph1\">`null`</ph> that is returned because the specified key is not found and <ph id=\"ph2\">`null`</ph> that is returned because the value of the specified key is <ph id=\"ph3\">`null`</ph>, use the &lt;xref:System.Collections.Hashtable.Contains%2A&gt; method or the &lt;xref:System.Collections.Hashtable.ContainsKey%2A&gt; method to determine if the key exists in the list.","pos":[641,976],"source":" To distinguish between `null` that is returned because the specified key is not found and `null` that is returned because the value of the specified key is `null`, use the <xref:System.Collections.Hashtable.Contains%2A> method or the <xref:System.Collections.Hashtable.ContainsKey%2A> method to determine if the key exists in the list."},{"content":"Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.","pos":[983,1090]},{"content":"The C# language uses the  keyword to define the indexers instead of implementing the &lt;xref:System.Collections.IList.Item%2A&gt; property.","pos":[1097,1231],"source":"       The C# language uses the  keyword to define the indexers instead of implementing the <xref:System.Collections.IList.Item%2A> property."},{"content":"Visual Basic implements Item as a default property, which provides the same indexing functionality.","pos":[1232,1331]}]},{"pos":[109740,109774],"content":"The key whose value to get or set.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key whose value to get or set.","pos":[0,34]}]},{"pos":[109832,110074],"content":"The value associated with the specified key. If the specified key is not found, attempting to get it returns <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, and attempting to set it creates a new element using the specified key.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value associated with the specified key.","pos":[0,44]},{"content":"If the specified key is not found, attempting to get it returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, and attempting to set it creates a new element using the specified key.","pos":[45,242],"source":" If the specified key is not found, attempting to get it returns <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, and attempting to set it creates a new element using the specified key."}]},{"pos":[110238,110319],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>key</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[110423,110687],"content":"The property is set and the <xref href=\"System.Collections.Hashtable\"></xref> is read-only.       -or-       The property is set, <code>key</code> does not exist in the collection, and the <xref href=\"System.Collections.Hashtable\"></xref> has a fixed size.","needQuote":false,"needEscape":true,"nodes":[{"content":"The property is set and the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is read-only.","pos":[0,91],"source":"The property is set and the <xref href=\"System.Collections.Hashtable\"></xref> is read-only."},{"content":"-or-       The property is set, <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">key</ph><ept id=\"p1\">&lt;/code&gt;</ept> does not exist in the collection, and the <bpt id=\"p2\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> has a fixed size.","pos":[98,256],"source":"       -or-       The property is set, <code>key</code> does not exist in the collection, and the <xref href=\"System.Collections.Hashtable\"></xref> has a fixed size."}]},{"pos":[111126,111244],"content":"Compares a specific &lt;xref:System.Object&gt; with a specific key in the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Compares a specific <xref:System.Object> with a specific key in the <xref href=\"System.Collections.Hashtable\"></xref>."},{"pos":[111257,111540],"content":"If the hash table was created with a specific <xref:System.Collections.IComparer> implementation, this method uses that comparer; that is, <xref:System.Collections.IComparer.Compare%2A> (`item`, `key`). Otherwise, it uses `item.Equals(key)`.       This method is an O(1) operation.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If the hash table was created with a specific &lt;xref:System.Collections.IComparer&gt; implementation, this method uses that comparer; that is, &lt;xref:System.Collections.IComparer.Compare%2A&gt; (<ph id=\"ph1\">`item`</ph>, <ph id=\"ph2\">`key`</ph>).","pos":[0,202],"source":"If the hash table was created with a specific <xref:System.Collections.IComparer> implementation, this method uses that comparer; that is, <xref:System.Collections.IComparer.Compare%2A> (`item`, `key`)."},{"content":"Otherwise, it uses <ph id=\"ph1\">`item.Equals(key)`</ph>.","pos":[203,241],"source":" Otherwise, it uses `item.Equals(key)`."},{"content":"This method is an O(1) operation.","pos":[248,281]}]},{"pos":[111701,111748],"content":"The &lt;xref:System.Object&gt; to compare with <ph id=\"ph1\">`key`</ph>.","needQuote":true,"needEscape":true,"source":"The <xref:System.Object> to compare with `key`."},{"pos":[111808,111896],"content":"The key in the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to compare with <ph id=\"ph1\">`item`</ph>.","needQuote":true,"needEscape":true,"source":"The key in the <xref href=\"System.Collections.Hashtable\"></xref> to compare with `item`."},{"pos":[111955,112143],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">item</ph><ept id=\"p2\">&lt;/code&gt;</ept> and <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph2\">key</ph><ept id=\"p3\">&lt;/code&gt;</ept> are equal; otherwise, <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>item</code> and <code>key</code> are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[112313,112510],"content":"<code>item</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>key</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;item&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,82],"source":"<code>item</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[89,181],"source":"       -or-       <code>key</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[112823,112946],"content":"Gets an &lt;xref:System.Collections.ICollection&gt; containing the keys in the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets an <xref:System.Collections.ICollection> containing the keys in the <xref href=\"System.Collections.Hashtable\"></xref>."},{"pos":[112959,113616],"content":"The order of the keys in the <xref:System.Collections.ICollection> is unspecified, but it is the same order as the associated values in the <xref:System.Collections.ICollection> returned by the <xref:System.Collections.Hashtable.Values%2A> method.       The returned <xref:System.Collections.ICollection> is not a static copy; instead, the <xref:System.Collections.ICollection> refers back to the keys in the original <xref:System.Collections.Hashtable>. Therefore, changes to the <xref:System.Collections.Hashtable> continue to be reflected in the <xref:System.Collections.ICollection>.       Retrieving the value of this property is an O(1) operation.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The order of the keys in the <xref:System.Collections.ICollection> is unspecified, but it is the same order as the associated values in the <xref:System.Collections.ICollection> returned by the <xref:System.Collections.Hashtable.Values%2A> method.       The returned <xref:System.Collections.ICollection> is not a static copy; instead, the <xref:System.Collections.ICollection> refers back to the keys in the original <xref:System.Collections.Hashtable>. Therefore, changes to the <xref:System.Collections.Hashtable> continue to be reflected in the <xref:System.Collections.ICollection>.       Retrieving the value of this property is an O(1) operation.","pos":[0,653],"nodes":[{"content":"The order of the keys in the &lt;xref:System.Collections.ICollection&gt; is unspecified, but it is the same order as the associated values in the &lt;xref:System.Collections.ICollection&gt; returned by the &lt;xref:System.Collections.Hashtable.Values%2A&gt; method.","pos":[0,247],"source":"The order of the keys in the <xref:System.Collections.ICollection> is unspecified, but it is the same order as the associated values in the <xref:System.Collections.ICollection> returned by the <xref:System.Collections.Hashtable.Values%2A> method."},{"content":"The returned &lt;xref:System.Collections.ICollection&gt; is not a static copy; instead, the &lt;xref:System.Collections.ICollection&gt; refers back to the keys in the original &lt;xref:System.Collections.Hashtable&gt;.","pos":[254,454],"source":"       The returned <xref:System.Collections.ICollection> is not a static copy; instead, the <xref:System.Collections.ICollection> refers back to the keys in the original <xref:System.Collections.Hashtable>."},{"content":"Therefore, changes to the &lt;xref:System.Collections.Hashtable&gt; continue to be reflected in the &lt;xref:System.Collections.ICollection&gt;.","pos":[455,587],"source":" Therefore, changes to the <xref:System.Collections.Hashtable> continue to be reflected in the <xref:System.Collections.ICollection>."},{"content":"Retrieving the value of this property is an O(1) operation.","pos":[594,653]}]}]},{"pos":[113775,113893],"content":"An &lt;xref:System.Collections.ICollection&gt; containing the keys in the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An <xref:System.Collections.ICollection> containing the keys in the <xref href=\"System.Collections.Hashtable\"></xref>."},{"pos":[114386,114549],"content":"Implements the <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Serialization.ISerializable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> interface and raises the deserialization event when the deserialization is complete.","needQuote":true,"needEscape":true,"source":"Implements the <xref href=\"System.Runtime.Serialization.ISerializable\"></xref> interface and raises the deserialization event when the deserialization is complete."},{"pos":[114562,114920],"content":"This method is an O(`n`) operation, where `n` is <xref:System.Collections.Hashtable.Count%2A>.       Because serializing and deserializing an enumerator for a <xref:System.Collections.Hashtable> can cause the elements to become reordered, it is not possible to continue enumeration without calling the <xref:System.Collections.IEnumerator.Reset%2A> method.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method is an O(<ph id=\"ph1\">`n`</ph>) operation, where <ph id=\"ph2\">`n`</ph> is &lt;xref:System.Collections.Hashtable.Count%2A&gt;.","pos":[0,94],"source":"This method is an O(`n`) operation, where `n` is <xref:System.Collections.Hashtable.Count%2A>."},{"content":"Because serializing and deserializing an enumerator for a &lt;xref:System.Collections.Hashtable&gt; can cause the elements to become reordered, it is not possible to continue enumeration without calling the &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; method.","pos":[101,356],"source":"       Because serializing and deserializing an enumerator for a <xref:System.Collections.Hashtable> can cause the elements to become reordered, it is not possible to continue enumeration without calling the <xref:System.Collections.IEnumerator.Reset%2A> method."}]},{"pos":[115078,115118],"content":"The source of the deserialization event.","needQuote":true,"needEscape":true,"nodes":[{"content":"The source of the deserialization event.","pos":[0,40]}]},{"pos":[115341,115509],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Serialization.SerializationInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object associated with the current <bpt id=\"p2\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> is invalid.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object associated with the current <xref href=\"System.Collections.Hashtable\"></xref> is invalid."},{"pos":[115883,115985],"content":"Removes the element with the specified key from the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Removes the element with the specified key from the <xref href=\"System.Collections.Hashtable\"></xref>."},{"pos":[115998,116217],"content":"If the <xref:System.Collections.Hashtable> does not contain an element with the specified key, the <xref:System.Collections.Hashtable> remains unchanged. No exception is thrown.       This method is an O(1) operation.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If the <xref:System.Collections.Hashtable> does not contain an element with the specified key, the <xref:System.Collections.Hashtable> remains unchanged. No exception is thrown.       This method is an O(1) operation.","pos":[0,217],"nodes":[{"content":"If the &lt;xref:System.Collections.Hashtable&gt; does not contain an element with the specified key, the &lt;xref:System.Collections.Hashtable&gt; remains unchanged.","pos":[0,153],"source":"If the <xref:System.Collections.Hashtable> does not contain an element with the specified key, the <xref:System.Collections.Hashtable> remains unchanged."},{"content":"No exception is thrown.","pos":[154,177]},{"content":"This method is an O(1) operation.","pos":[184,217]}]}]},{"pos":[116806,116839],"content":"The key of the element to remove.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key of the element to remove.","pos":[0,33]}]},{"pos":[117005,117086],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>key</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[117190,117354],"content":"The <xref href=\"System.Collections.Hashtable\"></xref> is read-only.       -or-       The <xref href=\"System.Collections.Hashtable\"></xref> has a fixed size.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is read-only.","pos":[0,67],"source":"The <xref href=\"System.Collections.Hashtable\"></xref> is read-only."},{"content":"-or-       The <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> has a fixed size.","pos":[74,156],"source":"       -or-       The <xref href=\"System.Collections.Hashtable\"></xref> has a fixed size."}]},{"pos":[117798,117901],"content":"Returns a synchronized (thread-safe) wrapper for the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns a synchronized (thread-safe) wrapper for the <xref href=\"System.Collections.Hashtable\"></xref>."},{"pos":[117914,119045],"content":"The Synchronized method is thread safe for multiple readers and writers. Furthermore, the synchronized wrapper ensures that there is only one writer writing at a time.       Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.       The following code example shows how to lock the collection using the <xref:System.Collections.Hashtable.SyncRoot%2A> during the entire enumeration:       [!code-cpp[Classic Hashtable.IsSynchronized Example#2](~/add/codesnippet/cpp/m-system.collections.has_11_1.cpp)]  [!code-vb[Classic Hashtable.IsSynchronized Example#2](~/add/codesnippet/visualbasic/m-system.collections.has_11_1.vb)]  [!code-cs[Classic Hashtable.IsSynchronized Example#2](~/add/codesnippet/csharp/m-system.collections.has_11_1.cs)]       This method is an O(1) operation.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Synchronized method is thread safe for multiple readers and writers.","pos":[0,72]},{"content":"Furthermore, the synchronized wrapper ensures that there is only one writer writing at a time.","pos":[73,167]},{"content":"Enumerating through a collection is intrinsically not a thread-safe procedure.","pos":[174,252]},{"content":"Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.","pos":[253,390]},{"content":"To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[391,572]},{"content":"The following code example shows how to lock the collection using the &lt;xref:System.Collections.Hashtable.SyncRoot%2A&gt; during the entire enumeration:       <bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>Classic Hashtable.IsSynchronized Example#2<ept id=\"p2\">](~/add/codesnippet/cpp/m-system.collections.has_11_1.cpp)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>Classic Hashtable.IsSynchronized Example#2<ept id=\"p4\">](~/add/codesnippet/visualbasic/m-system.collections.has_11_1.vb)</ept><ept id=\"p3\">]</ept>  <bpt id=\"p5\">[!code-cs</bpt><bpt id=\"p6\">[</bpt>Classic Hashtable.IsSynchronized Example#2<ept id=\"p6\">](~/add/codesnippet/csharp/m-system.collections.has_11_1.cs)</ept><ept id=\"p5\">]</ept>       This method is an O(1) operation.","pos":[579,1121],"source":"       The following code example shows how to lock the collection using the <xref:System.Collections.Hashtable.SyncRoot%2A> during the entire enumeration:       [!code-cpp[Classic Hashtable.IsSynchronized Example#2](~/add/codesnippet/cpp/m-system.collections.has_11_1.cpp)]  [!code-vb[Classic Hashtable.IsSynchronized Example#2](~/add/codesnippet/visualbasic/m-system.collections.has_11_1.vb)]  [!code-cs[Classic Hashtable.IsSynchronized Example#2](~/add/codesnippet/csharp/m-system.collections.has_11_1.cs)]       This method is an O(1) operation."}]},{"pos":[119845,119914],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to synchronize.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Collections.Hashtable\"></xref> to synchronize."},{"pos":[119987,120082],"content":"A synchronized (thread-safe) wrapper for the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A synchronized (thread-safe) wrapper for the <xref href=\"System.Collections.Hashtable\"></xref>."},{"pos":[120254,120337],"content":"<code>table</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[19,83],"source":" is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[120669,120780],"content":"Gets an object that can be used to synchronize access to the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets an object that can be used to synchronize access to the <xref href=\"System.Collections.Hashtable\"></xref>."},{"pos":[120793,122360],"content":"To create a synchronized version of the <xref:System.Collections.Hashtable>, use the <xref:System.Collections.Hashtable.Synchronized%2A> method. However, derived classes can provide their own synchronized version of the <xref:System.Collections.Hashtable> using the SyncRoot property. The synchronizing code must perform operations on the SyncRoot of the <xref:System.Collections.Hashtable>, not directly on the <xref:System.Collections.Hashtable> . This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.Hashtable> object.       Enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.       The following code example shows how to lock the collection using the SyncRoot during the entire enumeration:       [!code-cpp[Classic Hashtable.IsSynchronized Example#2](~/add/codesnippet/cpp/p-system.collections.has_0_1.cpp)]  [!code-vb[Classic Hashtable.IsSynchronized Example#2](~/add/codesnippet/visualbasic/p-system.collections.has_0_1.vb)]  [!code-cs[Classic Hashtable.IsSynchronized Example#2](~/add/codesnippet/csharp/p-system.collections.has_0_1.cs)]","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"To create a synchronized version of the &lt;xref:System.Collections.Hashtable&gt;, use the &lt;xref:System.Collections.Hashtable.Synchronized%2A&gt; method.","pos":[0,144],"source":"To create a synchronized version of the <xref:System.Collections.Hashtable>, use the <xref:System.Collections.Hashtable.Synchronized%2A> method."},{"content":"However, derived classes can provide their own synchronized version of the &lt;xref:System.Collections.Hashtable&gt; using the SyncRoot property.","pos":[145,284],"source":" However, derived classes can provide their own synchronized version of the <xref:System.Collections.Hashtable> using the SyncRoot property."},{"content":"The synchronizing code must perform operations on the SyncRoot of the &lt;xref:System.Collections.Hashtable&gt;, not directly on the &lt;xref:System.Collections.Hashtable&gt; .","pos":[285,449],"source":" The synchronizing code must perform operations on the SyncRoot of the <xref:System.Collections.Hashtable>, not directly on the <xref:System.Collections.Hashtable> ."},{"content":"This ensures proper operation of collections that are derived from other objects.","pos":[450,531]},{"content":"Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the &lt;xref:System.Collections.Hashtable&gt; object.","pos":[532,687],"source":" Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.Hashtable> object."},{"content":"Enumerating through a collection is intrinsically not a thread safe procedure.","pos":[694,772]},{"content":"Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.","pos":[773,910]},{"content":"To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[911,1092]},{"content":"The following code example shows how to lock the collection using the SyncRoot during the entire enumeration:       <bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>Classic Hashtable.IsSynchronized Example#2<ept id=\"p2\">](~/add/codesnippet/cpp/p-system.collections.has_0_1.cpp)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>Classic Hashtable.IsSynchronized Example#2<ept id=\"p4\">](~/add/codesnippet/visualbasic/p-system.collections.has_0_1.vb)</ept><ept id=\"p3\">]</ept>  <bpt id=\"p5\">[!code-cs</bpt><bpt id=\"p6\">[</bpt>Classic Hashtable.IsSynchronized Example#2<ept id=\"p6\">](~/add/codesnippet/csharp/p-system.collections.has_0_1.cs)</ept><ept id=\"p5\">]</ept>","pos":[1099,1559],"source":"       The following code example shows how to lock the collection using the SyncRoot during the entire enumeration:       [!code-cpp[Classic Hashtable.IsSynchronized Example#2](~/add/codesnippet/cpp/p-system.collections.has_0_1.cpp)]  [!code-vb[Classic Hashtable.IsSynchronized Example#2](~/add/codesnippet/visualbasic/p-system.collections.has_0_1.vb)]  [!code-cs[Classic Hashtable.IsSynchronized Example#2](~/add/codesnippet/csharp/p-system.collections.has_0_1.cs)]"}]},{"pos":[122482,122588],"content":"An object that can be used to synchronize access to the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An object that can be used to synchronize access to the <xref href=\"System.Collections.Hashtable\"></xref>."},{"pos":[123186,123243],"content":"Returns an enumerator that iterates through a collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an enumerator that iterates through a collection.","pos":[0,57]}]},{"pos":[123256,126386],"content":"[Visual Basic, C#]       The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.       Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.       Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position. At this position, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.       <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.       If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.       An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator can be invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>. If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.       The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.       This method is an O(1) operation.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"[Visual Basic, C#]       The <ph id=\"ph1\">`foreach`</ph> statement of the C# language (<ph id=\"ph2\">`for each`</ph> in Visual Basic) hides the complexity of the enumerators.","pos":[0,137],"source":"[Visual Basic, C#]       The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators."},{"content":"Therefore, using <ph id=\"ph1\">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.","pos":[139,230],"source":"  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator."},{"content":"Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.","pos":[237,357]},{"content":"Initially, the enumerator is positioned before the first element in the collection.","pos":[364,447]},{"content":"&lt;xref:System.Collections.IEnumerator.Reset%2A&gt; also brings the enumerator back to this position.","pos":[448,544],"source":" <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position."},{"content":"At this position, calling &lt;xref:System.Collections.IEnumerator.Current%2A&gt; throws an exception.","pos":[545,640],"source":" At this position, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception."},{"content":"Therefore, you must call &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; to advance the enumerator to the first element of the collection before reading the value of &lt;xref:System.Collections.IEnumerator.Current%2A&gt;.","pos":[641,858],"source":" Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>."},{"content":"&lt;xref:System.Collections.IEnumerator.Current%2A&gt; returns the same object until either &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; or &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; is called.","pos":[865,1061],"source":"       <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called."},{"content":"&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; sets &lt;xref:System.Collections.IEnumerator.Current%2A&gt; to the next element.","pos":[1062,1186],"source":" <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element."},{"content":"If &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; passes the end of the collection, the enumerator is positioned after the last element in the collection and &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; returns <ph id=\"ph1\">`false`</ph>.","pos":[1193,1420],"source":"       If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`."},{"content":"When the enumerator is at this position, subsequent calls to &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; also return <ph id=\"ph1\">`false`</ph>.","pos":[1421,1552],"source":" When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`."},{"content":"If the last call to &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; returned <ph id=\"ph1\">`false`</ph>, calling &lt;xref:System.Collections.IEnumerator.Current%2A&gt; throws an exception.","pos":[1553,1718],"source":" If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception."},{"content":"To set &lt;xref:System.Collections.IEnumerator.Current%2A&gt; to the first element of the collection again, you can call &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; followed by &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;.","pos":[1719,1943],"source":" To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>."},{"content":"An enumerator remains valid as long as the collection remains unchanged.","pos":[1950,2022]},{"content":"If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator can be invalidated and the next call to &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; or &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; throws an &lt;xref:System.InvalidOperationException&gt;.","pos":[2023,2316],"source":" If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator can be invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>."},{"content":"If the collection is modified between &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; and &lt;xref:System.Collections.IEnumerator.Current%2A&gt;, &lt;xref:System.Collections.IEnumerator.Current%2A&gt; returns the element that it is set to, even if the enumerator is already invalidated.","pos":[2317,2593],"source":" If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated."},{"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread safe procedure.","pos":[2600,2754]},{"content":"Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.","pos":[2755,2892]},{"content":"To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[2893,3074]},{"content":"This method is an O(1) operation.","pos":[3081,3114]}]},{"pos":[126565,126657],"content":"An <xref:System.Collections.IEnumerator> that can be used to iterate through the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Collections.IEnumerator&gt; that can be used to iterate through the collection.","pos":[0,92],"source":"An <xref:System.Collections.IEnumerator> that can be used to iterate through the collection."}]},{"pos":[127083,127208],"content":"Gets an &lt;xref:System.Collections.ICollection&gt; containing the values in the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets an <xref:System.Collections.ICollection> containing the values in the <xref href=\"System.Collections.Hashtable\"></xref>."},{"pos":[127221,127878],"content":"The order of the values in the <xref:System.Collections.ICollection> is unspecified, but it is the same order as the associated keys in the <xref:System.Collections.ICollection> returned by the <xref:System.Collections.Hashtable.Keys%2A> method.       The returned <xref:System.Collections.ICollection> is not a static copy; instead, the <xref:System.Collections.ICollection> refers back to the values in the original <xref:System.Collections.Hashtable>. Therefore, changes to the <xref:System.Collections.Hashtable> continue to be reflected in the <xref:System.Collections.ICollection>.       Retrieving the value of this property is an O(1) operation.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The order of the values in the <xref:System.Collections.ICollection> is unspecified, but it is the same order as the associated keys in the <xref:System.Collections.ICollection> returned by the <xref:System.Collections.Hashtable.Keys%2A> method.       The returned <xref:System.Collections.ICollection> is not a static copy; instead, the <xref:System.Collections.ICollection> refers back to the values in the original <xref:System.Collections.Hashtable>. Therefore, changes to the <xref:System.Collections.Hashtable> continue to be reflected in the <xref:System.Collections.ICollection>.       Retrieving the value of this property is an O(1) operation.","pos":[0,653],"nodes":[{"content":"The order of the values in the &lt;xref:System.Collections.ICollection&gt; is unspecified, but it is the same order as the associated keys in the &lt;xref:System.Collections.ICollection&gt; returned by the &lt;xref:System.Collections.Hashtable.Keys%2A&gt; method.","pos":[0,245],"source":"The order of the values in the <xref:System.Collections.ICollection> is unspecified, but it is the same order as the associated keys in the <xref:System.Collections.ICollection> returned by the <xref:System.Collections.Hashtable.Keys%2A> method."},{"content":"The returned &lt;xref:System.Collections.ICollection&gt; is not a static copy; instead, the &lt;xref:System.Collections.ICollection&gt; refers back to the values in the original &lt;xref:System.Collections.Hashtable&gt;.","pos":[252,454],"source":"       The returned <xref:System.Collections.ICollection> is not a static copy; instead, the <xref:System.Collections.ICollection> refers back to the values in the original <xref:System.Collections.Hashtable>."},{"content":"Therefore, changes to the &lt;xref:System.Collections.Hashtable&gt; continue to be reflected in the &lt;xref:System.Collections.ICollection&gt;.","pos":[455,587],"source":" Therefore, changes to the <xref:System.Collections.Hashtable> continue to be reflected in the <xref:System.Collections.ICollection>."},{"content":"Retrieving the value of this property is an O(1) operation.","pos":[594,653]}]}]},{"pos":[128039,128159],"content":"An &lt;xref:System.Collections.ICollection&gt; containing the values in the <bpt id=\"p1\">&lt;xref href=\"System.Collections.Hashtable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An <xref:System.Collections.ICollection> containing the values in the <xref href=\"System.Collections.Hashtable\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Collections.Hashtable\n  id: Hashtable\n  children:\n  - System.Collections.Hashtable.#ctor\n  - System.Collections.Hashtable.#ctor(System.Collections.IDictionary)\n  - System.Collections.Hashtable.#ctor(System.Collections.IEqualityComparer)\n  - System.Collections.Hashtable.#ctor(System.Int32)\n  - System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IEqualityComparer)\n  - System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single)\n  - System.Collections.Hashtable.#ctor(System.Collections.IHashCodeProvider,System.Collections.IComparer)\n  - System.Collections.Hashtable.#ctor(System.Int32,System.Collections.IEqualityComparer)\n  - System.Collections.Hashtable.#ctor(System.Int32,System.Single)\n  - System.Collections.Hashtable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  - System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IHashCodeProvider,System.Collections.IComparer)\n  - System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IEqualityComparer)\n  - System.Collections.Hashtable.#ctor(System.Int32,System.Collections.IHashCodeProvider,System.Collections.IComparer)\n  - System.Collections.Hashtable.#ctor(System.Int32,System.Single,System.Collections.IEqualityComparer)\n  - System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)\n  - System.Collections.Hashtable.#ctor(System.Int32,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)\n  - System.Collections.Hashtable.Add(System.Object,System.Object)\n  - System.Collections.Hashtable.Clear\n  - System.Collections.Hashtable.Clone\n  - System.Collections.Hashtable.comparer\n  - System.Collections.Hashtable.Contains(System.Object)\n  - System.Collections.Hashtable.ContainsKey(System.Object)\n  - System.Collections.Hashtable.ContainsValue(System.Object)\n  - System.Collections.Hashtable.CopyTo(System.Array,System.Int32)\n  - System.Collections.Hashtable.Count\n  - System.Collections.Hashtable.EqualityComparer\n  - System.Collections.Hashtable.GetEnumerator\n  - System.Collections.Hashtable.GetHash(System.Object)\n  - System.Collections.Hashtable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  - System.Collections.Hashtable.hcp\n  - System.Collections.Hashtable.IsFixedSize\n  - System.Collections.Hashtable.IsReadOnly\n  - System.Collections.Hashtable.IsSynchronized\n  - System.Collections.Hashtable.Item(System.Object)\n  - System.Collections.Hashtable.KeyEquals(System.Object,System.Object)\n  - System.Collections.Hashtable.Keys\n  - System.Collections.Hashtable.OnDeserialization(System.Object)\n  - System.Collections.Hashtable.Remove(System.Object)\n  - System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)\n  - System.Collections.Hashtable.SyncRoot\n  - System.Collections.Hashtable.System#Collections#IEnumerable#GetEnumerator\n  - System.Collections.Hashtable.Values\n  langs:\n  - csharp\n  name: Hashtable\n  nameWithType: Hashtable\n  fullName: System.Collections.Hashtable\n  type: Class\n  summary: \"Represents a collection of key/value pairs that are organized based on the hash code of the key.  \\n  \\n To browse the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/collections/hashtable.cs#10fefb6e0ae510dd).\"\n  remarks: \"> [!NOTE]\\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/collections/hashtable.cs#10fefb6e0ae510dd). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \\n  \\n Each element is a key/value pair stored in a <xref:System.Collections.DictionaryEntry> object. A key cannot be `null`, but a value can be.  \\n  \\n The objects used as keys by a Hashtable are required to override the <xref:System.Object.GetHashCode%2A?displayProperty=fullName> method (or the <xref:System.Collections.IHashCodeProvider> interface) and the <xref:System.Object.Equals%2A?displayProperty=fullName> method (or the <xref:System.Collections.IComparer> interface). The implementation of both methods and interfaces must handle case sensitivity the same way; otherwise, the Hashtable might behave incorrectly. For example, when creating a Hashtable, you must use the <xref:System.Collections.CaseInsensitiveHashCodeProvider> class (or any case-insensitive <xref:System.Collections.IHashCodeProvider> implementation) with the <xref:System.Collections.CaseInsensitiveComparer> class (or any case-insensitive <xref:System.Collections.IComparer> implementation).  \\n  \\n Furthermore, these methods must produce the same results when called with the same parameters while the key exists in the Hashtable. An alternative is to use a Hashtable constructor with an <xref:System.Collections.IEqualityComparer> parameter. If key equality were simply reference equality, the inherited implementation of <xref:System.Object.GetHashCode%2A?displayProperty=fullName> and <xref:System.Object.Equals%2A?displayProperty=fullName> would suffice.  \\n  \\n Key objects must be immutable as long as they are used as keys in the Hashtable.  \\n  \\n When an element is added to the Hashtable, the element is placed into a bucket based on the hash code of the key. Subsequent lookups of the key use the hash code of the key to search in only one particular bucket, thus substantially reducing the number of key comparisons required to find an element.  \\n  \\n The load factor of a Hashtable determines the maximum ratio of elements to buckets. Smaller load factors cause faster average lookup times at the cost of increased memory consumption. The default load factor of 1.0 generally provides the best balance between speed and size. A different load factor can also be specified when the Hashtable is created.  \\n  \\n As elements are added to a Hashtable, the actual load factor of the Hashtable increases. When the actual load factor reaches the specified load factor, the number of buckets in the Hashtable is automatically increased to the smallest prime number that is larger than twice the current number of Hashtable buckets.  \\n  \\n Each key object in the Hashtable must provide its own hash function, which can be accessed by calling <xref:System.Collections.Hashtable.GetHash%2A>. However, any object implementing <xref:System.Collections.IHashCodeProvider> can be passed to a Hashtable constructor, and that hash function is used for all objects in the table.  \\n  \\n The capacity of a Hashtable is the number of elements the Hashtable can hold. As elements are added to a Hashtable, the capacity is automatically increased as required through reallocation.  \\n  \\n For very large Hashtable objects, you can increase the maximum capacity to 2 billion elements on a 64-bit system by setting the `enabled` attribute of the  configuration element to `true` in the run-time environment.  \\n  \\n The `foreach` statement of the C# language (`For Each` in Visual Basic) returns an object of the type of the elements in the collection. Since each element of the Hashtable is a key/value pair, the element type is not the type of the key or the type of the value. Instead, the element type is <xref:System.Collections.DictionaryEntry>. For example:  \\n  \\n [!code-cpp[System.Collections.Hashtable_ClassExample#01](~/add/codesnippet/cpp/t-system.collections.has_1.cpp)]\\n [!code-cs[System.Collections.Hashtable_ClassExample#01](~/add/codesnippet/csharp/t-system.collections.has_1.cs)]\\n [!code-vb[System.Collections.Hashtable_ClassExample#01](~/add/codesnippet/visualbasic/t-system.collections.has_1.vb)]  \\n  \\n The `foreach` statement is a wrapper around the enumerator, which only allows reading from, not writing to, the collection.  \\n  \\n Because serializing and deserializing an enumerator for a Hashtable can cause the elements to become reordered, it is not possible to continue enumeration without calling the <xref:System.Collections.IEnumerator.Reset%2A> method.  \\n  \\n> [!NOTE]\\n>  Because keys can be inherited and their behavior changed, their absolute uniqueness cannot be guaranteed by comparisons using the <xref:System.Type.Equals%2A> method.\"\n  example:\n  - \"The following example shows how to create, initialize and perform various functions to a Hashtable and how to print out its keys and values.  \\n  \\n [!code-cpp[System.Collections.Hashtable_ClassExample#00](~/add/codesnippet/cpp/t-system.collections.has_2.cpp)]\\n [!code-cs[System.Collections.Hashtable_ClassExample#00](~/add/codesnippet/csharp/t-system.collections.has_2.cs)]\\n [!code-vb[System.Collections.Hashtable_ClassExample#00](~/add/codesnippet/visualbasic/t-system.collections.has_2.vb)]\"\n  syntax:\n    content: >-\n      [System.Diagnostics.DebuggerDisplay(\"Count = {Count}\")]\n\n      [System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Hashtable/HashtableDebugView))]\n\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class Hashtable : ICloneable, System.Collections.IDictionary, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.IDictionary\n  - System.ICloneable\n  - System.Runtime.Serialization.IDeserializationCallback\n  - System.Runtime.Serialization.ISerializable\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Collections.Hashtable.#ctor\n  id: '#ctor'\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  name: Hashtable()\n  nameWithType: Hashtable.Hashtable()\n  fullName: System.Collections.Hashtable.Hashtable()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Initializes a new, empty instance of the <xref href=\"System.Collections.Hashtable\"></xref> class using the default initial capacity, load factor, hash code provider, and comparer.\n  remarks: \"A hash table's capacity is used to calculate the optimal number of hash table buckets based on the load factor. Capacity is automatically increased as required.  \\n  \\n The load factor is the maximum ratio of elements to buckets. A smaller load factor means faster lookup at the cost of increased memory consumption.  \\n  \\n When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.  \\n  \\n The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable> object. The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.  \\n  \\n The comparer determines whether two keys are equal. Every key in a <xref:System.Collections.Hashtable> must be unique. The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName>.  \\n  \\n This constructor is an O(1) operation.\"\n  example:\n  - \"The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \\n  \\n [!code-cpp[System.Collections.Hashtable_ctor#1](~/add/codesnippet/cpp/m-system.collections.has_4_1.cpp)]\\n [!code-cs[System.Collections.Hashtable_ctor#1](~/add/codesnippet/csharp/m-system.collections.has_4_1.cs)]\\n [!code-vb[System.Collections.Hashtable_ctor#1](~/add/codesnippet/visualbasic/m-system.collections.has_4_1.vb)]\"\n  syntax:\n    content: public Hashtable ();\n    parameters: []\n  overload: System.Collections.Hashtable.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary)\n  id: '#ctor(System.Collections.IDictionary)'\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  name: Hashtable(IDictionary)\n  nameWithType: Hashtable.Hashtable(IDictionary)\n  fullName: System.Collections.Hashtable.Hashtable(IDictionary)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Initializes a new instance of the <xref href=\"System.Collections.Hashtable\"></xref> class by copying the elements from the specified dictionary to the new <xref href=\"System.Collections.Hashtable\"></xref> object. The new <xref href=\"System.Collections.Hashtable\"></xref> object has an initial capacity equal to the number of elements copied, and uses the default load factor, hash code provider, and comparer.\n  remarks: \"The initial capacity is set to the number of elements in the source dictionary. Capacity is automatically increased as required based on the load factor.  \\n  \\n The load factor is the maximum ratio of elements to buckets. A smaller load factor means faster lookup at the cost of increased memory consumption.  \\n  \\n When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.  \\n  \\n The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable> object. The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.  \\n  \\n The comparer determines whether two keys are equal. Every key in a <xref:System.Collections.Hashtable> must be unique. The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName>.  \\n  \\n The elements of the new <xref:System.Collections.Hashtable> are sorted in the same order in which the enumerator iterates through the <xref:System.Collections.IDictionary> object.  \\n  \\n This constructor is an O(`n`) operation, where `n` is the number of elements in the `d` parameter.\"\n  example:\n  - \"The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \\n  \\n [!code-cpp[System.Collections.Hashtable_ctorDictionary#1](~/add/codesnippet/cpp/m-system.collections.has_1_1.cpp)]\\n [!code-cs[System.Collections.Hashtable_ctorDictionary#1](~/add/codesnippet/csharp/m-system.collections.has_1_1.cs)]\\n [!code-vb[System.Collections.Hashtable_ctorDictionary#1](~/add/codesnippet/visualbasic/m-system.collections.has_1_1.vb)]\"\n  syntax:\n    content: public Hashtable (System.Collections.IDictionary d);\n    parameters:\n    - id: d\n      type: System.Collections.IDictionary\n      description: The <xref:System.Collections.IDictionary> object to copy to a new <xref href=\"System.Collections.Hashtable\"></xref> object.\n  overload: System.Collections.Hashtable.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>d</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Collections.Hashtable.#ctor(System.Collections.IEqualityComparer)\n  id: '#ctor(System.Collections.IEqualityComparer)'\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  name: Hashtable(IEqualityComparer)\n  nameWithType: Hashtable.Hashtable(IEqualityComparer)\n  fullName: System.Collections.Hashtable.Hashtable(IEqualityComparer)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Initializes a new, empty instance of the <xref href=\"System.Collections.Hashtable\"></xref> class using the default initial capacity and load factor, and the specified <xref:System.Collections.IEqualityComparer> object.\n  remarks: \"A hash table's capacity is used to calculate the optimal number of hash table buckets based on the load factor. Capacity is automatically increased as required.  \\n  \\n The load factor is the maximum ratio of elements to buckets. A smaller load factor means faster lookup at the cost of increased memory consumption.  \\n  \\n When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.  \\n  \\n The <xref:System.Collections.IEqualityComparer> object includes both the hash code provider and the comparer. If an <xref:System.Collections.IEqualityComparer> is used in the <xref:System.Collections.Hashtable> constructor, the objects used as keys in the <xref:System.Collections.Hashtable> object are not required to override the <xref:System.Object.GetHashCode%2A?displayProperty=fullName> and <xref:System.Object.Equals%2A?displayProperty=fullName> methods.  \\n  \\n The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable>. The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.  \\n  \\n The comparer determines whether two keys are equal. Every key in a <xref:System.Collections.Hashtable> must be unique. The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName>.  \\n  \\n The <xref:System.Collections.IEqualityComparer> enables scenarios such as doing lookups with case-insensitive strings.  \\n  \\n This constructor is an O(1) operation.\"\n  example:\n  - \"The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \\n  \\n [!code-cpp[System.Collections.Hashtable_ctor#1](~/add/codesnippet/cpp/m-system.collections.has_5_1.cpp)]\\n [!code-cs[System.Collections.Hashtable_ctor#1](~/add/codesnippet/csharp/m-system.collections.has_5_1.cs)]\\n [!code-vb[System.Collections.Hashtable_ctor#1](~/add/codesnippet/visualbasic/m-system.collections.has_5_1.vb)]\"\n  syntax:\n    content: public Hashtable (System.Collections.IEqualityComparer equalityComparer);\n    parameters:\n    - id: equalityComparer\n      type: System.Collections.IEqualityComparer\n      description: \"The <xref:System.Collections.IEqualityComparer> object that defines the hash code provider and the comparer to use with the <xref href=\\\"System.Collections.Hashtable\\\"></xref> object.  \\n  \\n -or-  \\n  \\n <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref> to use the default hash code provider and the default comparer. The default hash code provider is each key's implementation of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt; and the default comparer is each key's implementation of &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.\"\n  overload: System.Collections.Hashtable.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Hashtable.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  name: Hashtable(Int32)\n  nameWithType: Hashtable.Hashtable(Int32)\n  fullName: System.Collections.Hashtable.Hashtable(Int32)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Initializes a new, empty instance of the <xref href=\"System.Collections.Hashtable\"></xref> class using the specified initial capacity, and the default load factor, hash code provider, and comparer.\n  remarks: \"Specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Hashtable> object. Capacity is automatically increased as required based on the load factor.  \\n  \\n The load factor is the maximum ratio of elements to buckets. A smaller load factor means faster lookup at the cost of increased memory consumption.  \\n  \\n When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.  \\n  \\n The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable>. The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.  \\n  \\n The comparer determines whether two keys are equal. Every key in a <xref:System.Collections.Hashtable> must be unique. The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName>.  \\n  \\n This constructor is an O(`n`) operation, where `n` is `capacity`.\"\n  example:\n  - \"The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \\n  \\n [!code-cpp[System.Collections.Hashtable_ctorInt#1](~/add/codesnippet/cpp/m-system.collections.has_2_1.cpp)]\\n [!code-cs[System.Collections.Hashtable_ctorInt#1](~/add/codesnippet/csharp/m-system.collections.has_2_1.cs)]\\n [!code-vb[System.Collections.Hashtable_ctorInt#1](~/add/codesnippet/visualbasic/m-system.collections.has_2_1.vb)]\"\n  syntax:\n    content: public Hashtable (int capacity);\n    parameters:\n    - id: capacity\n      type: System.Int32\n      description: The approximate number of elements that the <xref href=\"System.Collections.Hashtable\"></xref> object can initially contain.\n  overload: System.Collections.Hashtable.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>capacity</code> is less than zero.\n  platform:\n  - net462\n- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IEqualityComparer)\n  id: '#ctor(System.Collections.IDictionary,System.Collections.IEqualityComparer)'\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  name: Hashtable(IDictionary,IEqualityComparer)\n  nameWithType: Hashtable.Hashtable(IDictionary,IEqualityComparer)\n  fullName: System.Collections.Hashtable.Hashtable(IDictionary,IEqualityComparer)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Initializes a new instance of the <xref href=\"System.Collections.Hashtable\"></xref> class by copying the elements from the specified dictionary to a new <xref href=\"System.Collections.Hashtable\"></xref> object. The new <xref href=\"System.Collections.Hashtable\"></xref> object has an initial capacity equal to the number of elements copied, and uses the default load factor and the specified <xref:System.Collections.IEqualityComparer> object.\n  remarks: \"The initial capacity is set to the number of elements in the source dictionary. Capacity is automatically increased as required based on the load factor.  \\n  \\n The load factor is the maximum ratio of elements to buckets. A smaller load factor means faster lookup at the cost of increased memory consumption.  \\n  \\n When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.  \\n  \\n The <xref:System.Collections.IEqualityComparer> object includes both the hash code provider and the comparer. If an <xref:System.Collections.IEqualityComparer> is used in the <xref:System.Collections.Hashtable> constructor, the objects used as keys in the <xref:System.Collections.Hashtable> object are not required to override the <xref:System.Object.GetHashCode%2A?displayProperty=fullName> and <xref:System.Object.Equals%2A?displayProperty=fullName> methods.  \\n  \\n The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable>. The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.  \\n  \\n The comparer determines whether two keys are equal. Every key in a <xref:System.Collections.Hashtable> must be unique. The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName>.  \\n  \\n The <xref:System.Collections.IEqualityComparer> enables scenarios such as doing lookups with case-insensitive strings.  \\n  \\n The elements of the new <xref:System.Collections.Hashtable> are sorted in the same order in which the enumerator iterates through the <xref:System.Collections.IDictionary> object.  \\n  \\n This constructor is an O(`n`) operation, where `n` is the number of elements in the `d` parameter.\"\n  example:\n  - \"The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \\n  \\n [!code-cpp[System.Collections.Hashtable_ctorDictionary#1](~/add/codesnippet/cpp/81cd87de-02b7-42cc-8fdd-_1.cpp)]\\n [!code-cs[System.Collections.Hashtable_ctorDictionary#1](~/add/codesnippet/csharp/81cd87de-02b7-42cc-8fdd-_1.cs)]\\n [!code-vb[System.Collections.Hashtable_ctorDictionary#1](~/add/codesnippet/visualbasic/81cd87de-02b7-42cc-8fdd-_1.vb)]\"\n  syntax:\n    content: public Hashtable (System.Collections.IDictionary d, System.Collections.IEqualityComparer equalityComparer);\n    parameters:\n    - id: d\n      type: System.Collections.IDictionary\n      description: The <xref:System.Collections.IDictionary> object to copy to a new <xref href=\"System.Collections.Hashtable\"></xref> object.\n    - id: equalityComparer\n      type: System.Collections.IEqualityComparer\n      description: \"The <xref:System.Collections.IEqualityComparer> object that defines the hash code provider and the comparer to use with the <xref href=\\\"System.Collections.Hashtable\\\"></xref>.  \\n  \\n -or-  \\n  \\n <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref> to use the default hash code provider and the default comparer. The default hash code provider is each key's implementation of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt; and the default comparer is each key's implementation of &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.\"\n  overload: System.Collections.Hashtable.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>d</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single)\n  id: '#ctor(System.Collections.IDictionary,System.Single)'\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  name: Hashtable(IDictionary,Single)\n  nameWithType: Hashtable.Hashtable(IDictionary,Single)\n  fullName: System.Collections.Hashtable.Hashtable(IDictionary,Single)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Initializes a new instance of the <xref href=\"System.Collections.Hashtable\"></xref> class by copying the elements from the specified dictionary to the new <xref href=\"System.Collections.Hashtable\"></xref> object. The new <xref href=\"System.Collections.Hashtable\"></xref> object has an initial capacity equal to the number of elements copied, and uses the specified load factor, and the default hash code provider and comparer.\n  remarks: \"The initial capacity is set to the number of elements in the source dictionary. Capacity is automatically increased as required based on the load factor.  \\n  \\n The load factor is the maximum ratio of elements to buckets. A smaller load factor means faster lookup at the cost of increased memory consumption. A load factor of 1.0 is the best balance between speed and size.  \\n  \\n When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.  \\n  \\n The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable> object. The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.  \\n  \\n The comparer determines whether two keys are equal. Every key in a <xref:System.Collections.Hashtable> must be unique. The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName>.  \\n  \\n The elements of the new <xref:System.Collections.Hashtable> are sorted in the same order in which the enumerator iterates through the <xref:System.Collections.IDictionary> object.  \\n  \\n This constructor is an O(`n`) operation, where `n` is the number of elements in the `d` parameter.\"\n  example:\n  - \"The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \\n  \\n [!code-cs[System.Collections.Hashtable_ctorDictionaryFloat#1](~/add/codesnippet/csharp/fb1cfbc8-7454-4619-a6e7-_1.cs)]\\n [!code-cpp[System.Collections.Hashtable_ctorDictionaryFloat#1](~/add/codesnippet/cpp/fb1cfbc8-7454-4619-a6e7-_1.cpp)]\\n [!code-vb[System.Collections.Hashtable_ctorDictionaryFloat#1](~/add/codesnippet/visualbasic/fb1cfbc8-7454-4619-a6e7-_1.vb)]\"\n  syntax:\n    content: public Hashtable (System.Collections.IDictionary d, float loadFactor);\n    parameters:\n    - id: d\n      type: System.Collections.IDictionary\n      description: The <xref:System.Collections.IDictionary> object to copy to a new <xref href=\"System.Collections.Hashtable\"></xref> object.\n    - id: loadFactor\n      type: System.Single\n      description: A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance. The result is the maximum ratio of elements to buckets.\n  overload: System.Collections.Hashtable.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>d</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>loadFactor</code> is less than 0.1.  \\n  \\n -or-  \\n  \\n <code>loadFactor</code> is greater than 1.0.\"\n  platform:\n  - net462\n- uid: System.Collections.Hashtable.#ctor(System.Collections.IHashCodeProvider,System.Collections.IComparer)\n  id: '#ctor(System.Collections.IHashCodeProvider,System.Collections.IComparer)'\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  name: Hashtable(IHashCodeProvider,IComparer)\n  nameWithType: Hashtable.Hashtable(IHashCodeProvider,IComparer)\n  fullName: System.Collections.Hashtable.Hashtable(IHashCodeProvider,IComparer)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Initializes a new, empty instance of the <xref href=\"System.Collections.Hashtable\"></xref> class using the default initial capacity and load factor, and the specified hash code provider and comparer.\n  remarks: \"A hash table's capacity is used to calculate the optimal number of hash table buckets based on the load factor. Capacity is automatically increased as required.  \\n  \\n The load factor is the maximum ratio of elements to buckets. A smaller load factor means faster lookup at the cost of increased memory consumption.  \\n  \\n When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.  \\n  \\n The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable> object. The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.  \\n  \\n The comparer determines whether two keys are equal. Every key in a <xref:System.Collections.Hashtable> must be unique. The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName>.  \\n  \\n The custom hash code provider and the custom comparer enable scenarios such as doing lookups with case-insensitive strings.  \\n  \\n This constructor is an O(1) operation.\"\n  example:\n  - \"The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \\n  \\n [!code-cpp[System.Collections.Hashtable_ctor#1](~/add/codesnippet/cpp/1ff65986-0234-4702-94b7-_1.cpp)]\\n [!code-cs[System.Collections.Hashtable_ctor#1](~/add/codesnippet/csharp/1ff65986-0234-4702-94b7-_1.cs)]\\n [!code-vb[System.Collections.Hashtable_ctor#1](~/add/codesnippet/visualbasic/1ff65986-0234-4702-94b7-_1.vb)]\"\n  syntax:\n    content: public Hashtable (System.Collections.IHashCodeProvider hcp, System.Collections.IComparer comparer);\n    parameters:\n    - id: hcp\n      type: System.Collections.IHashCodeProvider\n      description: \"The <xref href=\\\"System.Collections.IHashCodeProvider\\\"></xref> object that supplies the hash codes for all keys in the <xref href=\\\"System.Collections.Hashtable\\\"></xref> object.  \\n  \\n -or-  \\n  \\n <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref> to use the default hash code provider, which is each key's implementation of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;.\"\n    - id: comparer\n      type: System.Collections.IComparer\n      description: \"The <xref:System.Collections.IComparer> object to use to determine whether two keys are equal.  \\n  \\n -or-  \\n  \\n <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref> to use the default comparer, which is each key's implementation of &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.\"\n  overload: System.Collections.Hashtable.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Hashtable.#ctor(System.Int32,System.Collections.IEqualityComparer)\n  id: '#ctor(System.Int32,System.Collections.IEqualityComparer)'\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  name: Hashtable(Int32,IEqualityComparer)\n  nameWithType: Hashtable.Hashtable(Int32,IEqualityComparer)\n  fullName: System.Collections.Hashtable.Hashtable(Int32,IEqualityComparer)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Initializes a new, empty instance of the <xref href=\"System.Collections.Hashtable\"></xref> class using the specified initial capacity and <xref:System.Collections.IEqualityComparer>, and the default load factor.\n  remarks: \"Specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Hashtable> object. Capacity is automatically increased as required based on the load factor.  \\n  \\n The load factor is the maximum ratio of elements to buckets. A smaller load factor means faster lookup at the cost of increased memory consumption.  \\n  \\n When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.  \\n  \\n The <xref:System.Collections.IEqualityComparer> object includes both the hash code provider and the comparer. If an <xref:System.Collections.IEqualityComparer> is used in the <xref:System.Collections.Hashtable> constructor, the objects used as keys in the <xref:System.Collections.Hashtable> are not required to override the <xref:System.Object.GetHashCode%2A?displayProperty=fullName> and <xref:System.Object.Equals%2A?displayProperty=fullName> methods.  \\n  \\n The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable>. The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.  \\n  \\n The comparer determines whether two keys are equal. Every key in a <xref:System.Collections.Hashtable> must be unique. The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName>.  \\n  \\n The <xref:System.Collections.IEqualityComparer> enables scenarios such as doing lookups with case-insensitive strings.  \\n  \\n This constructor is an O(`n`) operation, where `n` is the `capacity` parameter.\"\n  example:\n  - \"The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \\n  \\n [!code-cpp[System.Collections.Hashtable_ctorInt#1](~/add/codesnippet/cpp/5067e9ac-cd98-4da8-9418-_1.cpp)]\\n [!code-cs[System.Collections.Hashtable_ctorInt#1](~/add/codesnippet/csharp/5067e9ac-cd98-4da8-9418-_1.cs)]\\n [!code-vb[System.Collections.Hashtable_ctorInt#1](~/add/codesnippet/visualbasic/5067e9ac-cd98-4da8-9418-_1.vb)]\"\n  syntax:\n    content: public Hashtable (int capacity, System.Collections.IEqualityComparer equalityComparer);\n    parameters:\n    - id: capacity\n      type: System.Int32\n      description: The approximate number of elements that the <xref href=\"System.Collections.Hashtable\"></xref> object can initially contain.\n    - id: equalityComparer\n      type: System.Collections.IEqualityComparer\n      description: \"The <xref:System.Collections.IEqualityComparer> object that defines the hash code provider and the comparer to use with the <xref href=\\\"System.Collections.Hashtable\\\"></xref>.  \\n  \\n -or-  \\n  \\n <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref> to use the default hash code provider and the default comparer. The default hash code provider is each key's implementation of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt; and the default comparer is each key's implementation of &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.\"\n  overload: System.Collections.Hashtable.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>capacity</code> is less than zero.\n  platform:\n  - net462\n- uid: System.Collections.Hashtable.#ctor(System.Int32,System.Single)\n  id: '#ctor(System.Int32,System.Single)'\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  name: Hashtable(Int32,Single)\n  nameWithType: Hashtable.Hashtable(Int32,Single)\n  fullName: System.Collections.Hashtable.Hashtable(Int32,Single)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Initializes a new, empty instance of the <xref href=\"System.Collections.Hashtable\"></xref> class using the specified initial capacity and load factor, and the default hash code provider and comparer.\n  remarks: \"Specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Hashtable> object. Capacity is automatically increased as required based on the load factor.  \\n  \\n The load factor is the maximum ratio of elements to buckets. A smaller load factor means faster lookup at the cost of increased memory consumption. A load factor of 1.0 is the best balance between speed and size.  \\n  \\n When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.  \\n  \\n The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable>. The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.  \\n  \\n The comparer determines whether two keys are equal. Every key in a <xref:System.Collections.Hashtable> must be unique. The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName>.  \\n  \\n This constructor is an O(`n`) operation, where `n` is the `capacity` parameter.\"\n  example:\n  - \"The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \\n  \\n [!code-cpp[System.Collections.Hashtable_ctorIntFloat#1](~/add/codesnippet/cpp/m-system.collections.has_8_1.cpp)]\\n [!code-cs[System.Collections.Hashtable_ctorIntFloat#1](~/add/codesnippet/csharp/m-system.collections.has_8_1.cs)]\\n [!code-vb[System.Collections.Hashtable_ctorIntFloat#1](~/add/codesnippet/visualbasic/m-system.collections.has_8_1.vb)]\"\n  syntax:\n    content: public Hashtable (int capacity, float loadFactor);\n    parameters:\n    - id: capacity\n      type: System.Int32\n      description: The approximate number of elements that the <xref href=\"System.Collections.Hashtable\"></xref> object can initially contain.\n    - id: loadFactor\n      type: System.Single\n      description: A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance. The result is the maximum ratio of elements to buckets.\n  overload: System.Collections.Hashtable.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>capacity</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>loadFactor</code> is less than 0.1.  \\n  \\n -or-  \\n  \\n <code>loadFactor</code> is greater than 1.0.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>capacity</code> is causing an overflow.\n  platform:\n  - net462\n- uid: System.Collections.Hashtable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  name: Hashtable(SerializationInfo,StreamingContext)\n  nameWithType: Hashtable.Hashtable(SerializationInfo,StreamingContext)\n  fullName: System.Collections.Hashtable.Hashtable(SerializationInfo,StreamingContext)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Initializes a new, empty instance of the <xref href=\"System.Collections.Hashtable\"></xref> class that is serializable using the specified <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> and <xref:System.Runtime.Serialization.StreamingContext> objects.\n  remarks: \"A hash table's capacity is used to calculate the optimal number of hash table buckets based on the load factor. Capacity is automatically increased as required.  \\n  \\n The load factor is the maximum ratio of elements to buckets. A smaller load factor means faster lookup at the cost of increased memory consumption.  \\n  \\n When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.  \\n  \\n The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable> object. The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.  \\n  \\n The comparer determines whether two keys are equal. Every key in a <xref:System.Collections.Hashtable> must be unique. The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName>.  \\n  \\n This constructor is an O(`n`) operation, where `n` is <xref:System.Collections.Hashtable.Count%2A>.  \\n  \\n Because serializing and deserializing an enumerator for a <xref:System.Collections.Hashtable> can cause the elements to become reordered, it is not possible to continue enumeration without calling the <xref:System.Collections.IEnumerator.Reset%2A> method.\"\n  syntax:\n    content: protected Hashtable (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);\n    parameters:\n    - id: info\n      type: System.Runtime.Serialization.SerializationInfo\n      description: A <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object containing the information required to serialize the <xref href=\"System.Collections.Hashtable\"></xref> object.\n    - id: context\n      type: System.Runtime.Serialization.StreamingContext\n      description: A <xref:System.Runtime.Serialization.StreamingContext> object containing the source and destination of the serialized stream associated with the <xref href=\"System.Collections.Hashtable\"></xref>.\n  overload: System.Collections.Hashtable.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>info</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IHashCodeProvider,System.Collections.IComparer)\n  id: '#ctor(System.Collections.IDictionary,System.Collections.IHashCodeProvider,System.Collections.IComparer)'\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  name: Hashtable(IDictionary,IHashCodeProvider,IComparer)\n  nameWithType: Hashtable.Hashtable(IDictionary,IHashCodeProvider,IComparer)\n  fullName: System.Collections.Hashtable.Hashtable(IDictionary,IHashCodeProvider,IComparer)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Initializes a new instance of the <xref href=\"System.Collections.Hashtable\"></xref> class by copying the elements from the specified dictionary to the new <xref href=\"System.Collections.Hashtable\"></xref> object. The new <xref href=\"System.Collections.Hashtable\"></xref> object has an initial capacity equal to the number of elements copied, and uses the default load factor, and the specified hash code provider and comparer. This API is obsolete. For an alternative, see &lt;xref:System.Collections.Hashtable.%23ctor%2A&gt;.\n  remarks: \"The initial capacity is set to the number of elements in the source dictionary. Capacity is automatically increased as required based on the load factor.  \\n  \\n The load factor is the maximum ratio of elements to buckets. A smaller load factor means faster lookup at the cost of increased memory consumption.  \\n  \\n When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.  \\n  \\n The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable> object. The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.  \\n  \\n The comparer determines whether two keys are equal. Every key in a <xref:System.Collections.Hashtable> must be unique. The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName>.  \\n  \\n The custom hash code provider and the custom comparer enable scenarios such as doing lookups with case-insensitive strings.  \\n  \\n The elements of the new <xref:System.Collections.Hashtable> are sorted in the same order in which the enumerator iterates through the <xref:System.Collections.IDictionary> object.  \\n  \\n This constructor is an O(`n`) operation, where `n` is the number of elements in the `d` parameter.\"\n  example:\n  - \"The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \\n  \\n [!code-cpp[System.Collections.Hashtable_ctorDictionary#1](~/add/codesnippet/cpp/9a30e378-7c34-4854-b12f-_1.cpp)]\\n [!code-cs[System.Collections.Hashtable_ctorDictionary#1](~/add/codesnippet/csharp/9a30e378-7c34-4854-b12f-_1.cs)]\\n [!code-vb[System.Collections.Hashtable_ctorDictionary#1](~/add/codesnippet/visualbasic/9a30e378-7c34-4854-b12f-_1.vb)]\"\n  syntax:\n    content: public Hashtable (System.Collections.IDictionary d, System.Collections.IHashCodeProvider hcp, System.Collections.IComparer comparer);\n    parameters:\n    - id: d\n      type: System.Collections.IDictionary\n      description: The <xref:System.Collections.IDictionary> object to copy to a new <xref href=\"System.Collections.Hashtable\"></xref> object.\n    - id: hcp\n      type: System.Collections.IHashCodeProvider\n      description: \"The <xref href=\\\"System.Collections.IHashCodeProvider\\\"></xref> object that supplies the hash codes for all keys in the <xref href=\\\"System.Collections.Hashtable\\\"></xref>.  \\n  \\n -or-  \\n  \\n <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref> to use the default hash code provider, which is each key's implementation of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;.\"\n    - id: comparer\n      type: System.Collections.IComparer\n      description: \"The <xref:System.Collections.IComparer> object to use to determine whether two keys are equal.  \\n  \\n -or-  \\n  \\n <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref> to use the default comparer, which is each key's implementation of &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.\"\n  overload: System.Collections.Hashtable.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>d</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IEqualityComparer)\n  id: '#ctor(System.Collections.IDictionary,System.Single,System.Collections.IEqualityComparer)'\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  name: Hashtable(IDictionary,Single,IEqualityComparer)\n  nameWithType: Hashtable.Hashtable(IDictionary,Single,IEqualityComparer)\n  fullName: System.Collections.Hashtable.Hashtable(IDictionary,Single,IEqualityComparer)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Initializes a new instance of the <xref href=\"System.Collections.Hashtable\"></xref> class by copying the elements from the specified dictionary to the new <xref href=\"System.Collections.Hashtable\"></xref> object. The new <xref href=\"System.Collections.Hashtable\"></xref> object has an initial capacity equal to the number of elements copied, and uses the specified load factor and <xref:System.Collections.IEqualityComparer> object.\n  remarks: \"The initial capacity is set to the number of elements in the source dictionary. Capacity is automatically increased as required based on the load factor.  \\n  \\n The load factor is the maximum ratio of elements to buckets. A smaller load factor means faster lookup at the cost of increased memory consumption. A load factor of 1.0 is the best balance between speed and size.  \\n  \\n When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.  \\n  \\n The <xref:System.Collections.IEqualityComparer> object includes both the hash code provider and the comparer. If an <xref:System.Collections.IEqualityComparer> is used in the <xref:System.Collections.Hashtable> constructor, the objects used as keys in the <xref:System.Collections.Hashtable> object are not required to override the <xref:System.Object.GetHashCode%2A?displayProperty=fullName> and <xref:System.Object.Equals%2A?displayProperty=fullName> methods.  \\n  \\n The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable>. The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.  \\n  \\n The comparer determines whether two keys are equal. Every key in a <xref:System.Collections.Hashtable> must be unique. The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName>.  \\n  \\n The <xref:System.Collections.IEqualityComparer> enables scenarios such as doing lookups with case-insensitive strings.  \\n  \\n The elements of the new <xref:System.Collections.Hashtable> are sorted in the same order in which the enumerator iterates through the <xref:System.Collections.IDictionary> object.  \\n  \\n This constructor is an O(`n`) operation, where `n` is the number of elements in the `d` parameter.\"\n  example:\n  - \"The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \\n  \\n [!code-cs[System.Collections.Hashtable_ctorDictionaryFloat#1](~/add/codesnippet/csharp/a92f83be-9de4-470a-8cbb-_1.cs)]\\n [!code-cpp[System.Collections.Hashtable_ctorDictionaryFloat#1](~/add/codesnippet/cpp/a92f83be-9de4-470a-8cbb-_1.cpp)]\\n [!code-vb[System.Collections.Hashtable_ctorDictionaryFloat#1](~/add/codesnippet/visualbasic/a92f83be-9de4-470a-8cbb-_1.vb)]\"\n  syntax:\n    content: public Hashtable (System.Collections.IDictionary d, float loadFactor, System.Collections.IEqualityComparer equalityComparer);\n    parameters:\n    - id: d\n      type: System.Collections.IDictionary\n      description: The <xref:System.Collections.IDictionary> object to copy to a new <xref href=\"System.Collections.Hashtable\"></xref> object.\n    - id: loadFactor\n      type: System.Single\n      description: A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance. The result is the maximum ratio of elements to buckets.\n    - id: equalityComparer\n      type: System.Collections.IEqualityComparer\n      description: \"The <xref:System.Collections.IEqualityComparer> object that defines the hash code provider and the comparer to use with the <xref href=\\\"System.Collections.Hashtable\\\"></xref>.  \\n  \\n -or-  \\n  \\n <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref> to use the default hash code provider and the default comparer. The default hash code provider is each key's implementation of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt; and the default comparer is each key's implementation of &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.\"\n  overload: System.Collections.Hashtable.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>d</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>loadFactor</code> is less than 0.1.  \\n  \\n -or-  \\n  \\n <code>loadFactor</code> is greater than 1.0.\"\n  platform:\n  - net462\n- uid: System.Collections.Hashtable.#ctor(System.Int32,System.Collections.IHashCodeProvider,System.Collections.IComparer)\n  id: '#ctor(System.Int32,System.Collections.IHashCodeProvider,System.Collections.IComparer)'\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  name: Hashtable(Int32,IHashCodeProvider,IComparer)\n  nameWithType: Hashtable.Hashtable(Int32,IHashCodeProvider,IComparer)\n  fullName: System.Collections.Hashtable.Hashtable(Int32,IHashCodeProvider,IComparer)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Initializes a new, empty instance of the <xref href=\"System.Collections.Hashtable\"></xref> class using the specified initial capacity, hash code provider, comparer, and the default load factor.\n  remarks: \"Specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Hashtable> object. Capacity is automatically increased as required based on the load factor.  \\n  \\n The load factor is the maximum ratio of elements to buckets. A smaller load factor means faster lookup at the cost of increased memory consumption.  \\n  \\n When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.  \\n  \\n The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable>. The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.  \\n  \\n The comparer determines whether two keys are equal. Every key in a <xref:System.Collections.Hashtable> must be unique. The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName>.  \\n  \\n The custom hash code provider and the custom comparer enable scenarios such as doing lookups with case-insensitive strings.  \\n  \\n This constructor is an O(`n`) operation, where `n` is the `capacity` parameter.\"\n  example:\n  - \"The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \\n  \\n [!code-cpp[System.Collections.Hashtable_ctorInt#1](~/add/codesnippet/cpp/2154dba0-3cc6-41f7-aa9b-_1.cpp)]\\n [!code-cs[System.Collections.Hashtable_ctorInt#1](~/add/codesnippet/csharp/2154dba0-3cc6-41f7-aa9b-_1.cs)]\\n [!code-vb[System.Collections.Hashtable_ctorInt#1](~/add/codesnippet/visualbasic/2154dba0-3cc6-41f7-aa9b-_1.vb)]\"\n  syntax:\n    content: public Hashtable (int capacity, System.Collections.IHashCodeProvider hcp, System.Collections.IComparer comparer);\n    parameters:\n    - id: capacity\n      type: System.Int32\n      description: The approximate number of elements that the <xref href=\"System.Collections.Hashtable\"></xref> object can initially contain.\n    - id: hcp\n      type: System.Collections.IHashCodeProvider\n      description: \"The <xref href=\\\"System.Collections.IHashCodeProvider\\\"></xref> object that supplies the hash codes for all keys in the <xref href=\\\"System.Collections.Hashtable\\\"></xref>.  \\n  \\n -or-  \\n  \\n <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref> to use the default hash code provider, which is each key's implementation of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;.\"\n    - id: comparer\n      type: System.Collections.IComparer\n      description: \"The <xref:System.Collections.IComparer> object to use to determine whether two keys are equal.  \\n  \\n -or-  \\n  \\n <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref> to use the default comparer, which is each key's implementation of &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.\"\n  overload: System.Collections.Hashtable.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>capacity</code> is less than zero.\n  platform:\n  - net462\n- uid: System.Collections.Hashtable.#ctor(System.Int32,System.Single,System.Collections.IEqualityComparer)\n  id: '#ctor(System.Int32,System.Single,System.Collections.IEqualityComparer)'\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  name: Hashtable(Int32,Single,IEqualityComparer)\n  nameWithType: Hashtable.Hashtable(Int32,Single,IEqualityComparer)\n  fullName: System.Collections.Hashtable.Hashtable(Int32,Single,IEqualityComparer)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Initializes a new, empty instance of the <xref href=\"System.Collections.Hashtable\"></xref> class using the specified initial capacity, load factor, and <xref:System.Collections.IEqualityComparer> object.\n  remarks: \"Specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Hashtable> object. Capacity is automatically increased as required based on the load factor.  \\n  \\n The load factor is the maximum ratio of elements to buckets. A smaller load factor means faster lookup at the cost of increased memory consumption. A load factor of 1.0 is the best balance between speed and size.  \\n  \\n When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.  \\n  \\n The <xref:System.Collections.IEqualityComparer> object includes both the hash code provider and the comparer. If an <xref:System.Collections.IEqualityComparer> is used in the <xref:System.Collections.Hashtable> constructor, the objects used as keys in the <xref:System.Collections.Hashtable> are not required to override the <xref:System.Object.GetHashCode%2A?displayProperty=fullName> and <xref:System.Object.Equals%2A?displayProperty=fullName> methods.  \\n  \\n The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable>. The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.  \\n  \\n The comparer determines whether two keys are equal. Every key in a <xref:System.Collections.Hashtable> must be unique. The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName>.  \\n  \\n The <xref:System.Collections.IEqualityComparer> enables scenarios such as doing lookups with case-insensitive strings.  \\n  \\n This constructor is an O(`n`) operation, where `n` is the `capacity` parameter.\"\n  example:\n  - \"The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \\n  \\n [!code-cpp[System.Collections.Hashtable_ctorIntFloat#1](~/add/codesnippet/cpp/30b60c47-7bce-44a2-8d17-_1.cpp)]\\n [!code-cs[System.Collections.Hashtable_ctorIntFloat#1](~/add/codesnippet/csharp/30b60c47-7bce-44a2-8d17-_1.cs)]\\n [!code-vb[System.Collections.Hashtable_ctorIntFloat#1](~/add/codesnippet/visualbasic/30b60c47-7bce-44a2-8d17-_1.vb)]\"\n  syntax:\n    content: public Hashtable (int capacity, float loadFactor, System.Collections.IEqualityComparer equalityComparer);\n    parameters:\n    - id: capacity\n      type: System.Int32\n      description: The approximate number of elements that the <xref href=\"System.Collections.Hashtable\"></xref> object can initially contain.\n    - id: loadFactor\n      type: System.Single\n      description: A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance. The result is the maximum ratio of elements to buckets.\n    - id: equalityComparer\n      type: System.Collections.IEqualityComparer\n      description: \"The <xref:System.Collections.IEqualityComparer> object that defines the hash code provider and the comparer to use with the <xref href=\\\"System.Collections.Hashtable\\\"></xref>.  \\n  \\n -or-  \\n  \\n <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref> to use the default hash code provider and the default comparer. The default hash code provider is each key's implementation of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt; and the default comparer is each key's implementation of &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.\"\n  overload: System.Collections.Hashtable.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>capacity</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>loadFactor</code> is less than 0.1.  \\n  \\n -or-  \\n  \\n <code>loadFactor</code> is greater than 1.0.\"\n  platform:\n  - net462\n- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)\n  id: '#ctor(System.Collections.IDictionary,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)'\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  name: Hashtable(IDictionary,Single,IHashCodeProvider,IComparer)\n  nameWithType: Hashtable.Hashtable(IDictionary,Single,IHashCodeProvider,IComparer)\n  fullName: System.Collections.Hashtable.Hashtable(IDictionary,Single,IHashCodeProvider,IComparer)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Initializes a new instance of the <xref href=\"System.Collections.Hashtable\"></xref> class by copying the elements from the specified dictionary to the new <xref href=\"System.Collections.Hashtable\"></xref> object. The new <xref href=\"System.Collections.Hashtable\"></xref> object has an initial capacity equal to the number of elements copied, and uses the specified load factor, hash code provider, and comparer.\n  remarks: \"The initial capacity is set to the number of elements in the source dictionary. Capacity is automatically increased as required based on the load factor.  \\n  \\n The load factor is the maximum ratio of elements to buckets. A smaller load factor means faster lookup at the cost of increased memory consumption. A load factor of 1.0 is the best balance between speed and size.  \\n  \\n When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.  \\n  \\n The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable> object. The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.  \\n  \\n The comparer determines whether two keys are equal. Every key in a <xref:System.Collections.Hashtable> must be unique. The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName>.  \\n  \\n The custom hash code provider and the custom comparer enable scenarios such as doing lookups with case-insensitive strings.  \\n  \\n The elements of the new <xref:System.Collections.Hashtable> are sorted in the same order in which the enumerator iterates through the <xref:System.Collections.IDictionary> object.  \\n  \\n This constructor is an O(`n`) operation, where `n` is the number of elements in the `d` parameter.\"\n  example:\n  - \"The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \\n  \\n [!code-cs[System.Collections.Hashtable_ctorDictionaryFloat#1](~/add/codesnippet/csharp/c67b166f-bc6a-49e5-9bd7-_1.cs)]\\n [!code-cpp[System.Collections.Hashtable_ctorDictionaryFloat#1](~/add/codesnippet/cpp/c67b166f-bc6a-49e5-9bd7-_1.cpp)]\\n [!code-vb[System.Collections.Hashtable_ctorDictionaryFloat#1](~/add/codesnippet/visualbasic/c67b166f-bc6a-49e5-9bd7-_1.vb)]\"\n  syntax:\n    content: public Hashtable (System.Collections.IDictionary d, float loadFactor, System.Collections.IHashCodeProvider hcp, System.Collections.IComparer comparer);\n    parameters:\n    - id: d\n      type: System.Collections.IDictionary\n      description: The <xref:System.Collections.IDictionary> object to copy to a new <xref href=\"System.Collections.Hashtable\"></xref> object.\n    - id: loadFactor\n      type: System.Single\n      description: A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance. The result is the maximum ratio of elements to buckets.\n    - id: hcp\n      type: System.Collections.IHashCodeProvider\n      description: \"The <xref href=\\\"System.Collections.IHashCodeProvider\\\"></xref> object that supplies the hash codes for all keys in the <xref href=\\\"System.Collections.Hashtable\\\"></xref>.  \\n  \\n -or-  \\n  \\n <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref> to use the default hash code provider, which is each key's implementation of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;.\"\n    - id: comparer\n      type: System.Collections.IComparer\n      description: \"The <xref:System.Collections.IComparer> object to use to determine whether two keys are equal.  \\n  \\n -or-  \\n  \\n <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref> to use the default comparer, which is each key's implementation of &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.\"\n  overload: System.Collections.Hashtable.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>d</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>loadFactor</code> is less than 0.1.  \\n  \\n -or-  \\n  \\n <code>loadFactor</code> is greater than 1.0.\"\n  platform:\n  - net462\n- uid: System.Collections.Hashtable.#ctor(System.Int32,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)\n  id: '#ctor(System.Int32,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)'\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  name: Hashtable(Int32,Single,IHashCodeProvider,IComparer)\n  nameWithType: Hashtable.Hashtable(Int32,Single,IHashCodeProvider,IComparer)\n  fullName: System.Collections.Hashtable.Hashtable(Int32,Single,IHashCodeProvider,IComparer)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Initializes a new, empty instance of the <xref href=\"System.Collections.Hashtable\"></xref> class using the specified initial capacity, load factor, hash code provider, and comparer.\n  remarks: \"Specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Hashtable> object. Capacity is automatically increased as required based on the load factor.  \\n  \\n The load factor is the maximum ratio of elements to buckets. A smaller load factor means faster lookup at the cost of increased memory consumption. A load factor of 1.0 is the best balance between speed and size.  \\n  \\n When the actual load factor reaches the specified load factor, the number of buckets is automatically increased to the smallest prime number that is larger than twice the current number of buckets.  \\n  \\n The hash code provider dispenses hash codes for keys in the <xref:System.Collections.Hashtable>. The default hash code provider is the key's implementation of <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.  \\n  \\n The comparer determines whether two keys are equal. Every key in a <xref:System.Collections.Hashtable> must be unique. The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=fullName>.  \\n  \\n The custom hash code provider and the custom comparer enable scenarios such as doing lookups with case-insensitive strings.  \\n  \\n This constructor is an O(`n`) operation, where `n` is the `capacity` parameter.\"\n  example:\n  - \"The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \\n  \\n [!code-cpp[System.Collections.Hashtable_ctorIntFloat#1](~/add/codesnippet/cpp/86ed2545-c9ee-4654-a1a4-_1.cpp)]\\n [!code-cs[System.Collections.Hashtable_ctorIntFloat#1](~/add/codesnippet/csharp/86ed2545-c9ee-4654-a1a4-_1.cs)]\\n [!code-vb[System.Collections.Hashtable_ctorIntFloat#1](~/add/codesnippet/visualbasic/86ed2545-c9ee-4654-a1a4-_1.vb)]\"\n  syntax:\n    content: public Hashtable (int capacity, float loadFactor, System.Collections.IHashCodeProvider hcp, System.Collections.IComparer comparer);\n    parameters:\n    - id: capacity\n      type: System.Int32\n      description: The approximate number of elements that the <xref href=\"System.Collections.Hashtable\"></xref> object can initially contain.\n    - id: loadFactor\n      type: System.Single\n      description: A number in the range from 0.1 through 1.0 that is multiplied by the default value which provides the best performance. The result is the maximum ratio of elements to buckets.\n    - id: hcp\n      type: System.Collections.IHashCodeProvider\n      description: \"The <xref href=\\\"System.Collections.IHashCodeProvider\\\"></xref> object that supplies the hash codes for all keys in the <xref href=\\\"System.Collections.Hashtable\\\"></xref>.  \\n  \\n -or-  \\n  \\n <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref> to use the default hash code provider, which is each key's implementation of &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;.\"\n    - id: comparer\n      type: System.Collections.IComparer\n      description: \"The <xref:System.Collections.IComparer> object to use to determine whether two keys are equal.  \\n  \\n -or-  \\n  \\n <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref> to use the default comparer, which is each key's implementation of &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;.\"\n  overload: System.Collections.Hashtable.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>capacity</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>loadFactor</code> is less than 0.1.  \\n  \\n -or-  \\n  \\n <code>loadFactor</code> is greater than 1.0.\"\n  platform:\n  - net462\n- uid: System.Collections.Hashtable.Add(System.Object,System.Object)\n  id: Add(System.Object,System.Object)\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  name: Add(Object,Object)\n  nameWithType: Hashtable.Add(Object,Object)\n  fullName: System.Collections.Hashtable.Add(Object,Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Adds an element with the specified key and value into the <xref href=\"System.Collections.Hashtable\"></xref>.\n  remarks: \"A key cannot be `null`, but a value can be.  \\n  \\n An object that has no correlation between its state and its hash code value should typically not be used as the key. For example, String objects are better than StringBuilder objects for use as keys.  \\n  \\n You can also use the <xref:System.Collections.Hashtable.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.Hashtable>; for example, `myCollection[\\\"myNonexistentKey\\\"] = myValue`. However, if the specified key already exists in the <xref:System.Collections.Hashtable>, setting the <xref:System.Collections.Hashtable.Item%2A> property overwrites the old value. In contrast, the Add method does not modify existing elements.  \\n  \\n If <xref:System.Collections.Hashtable.Count%2A> is less than the capacity of the <xref:System.Collections.Hashtable>, this method is an O(1) operation. If the capacity needs to be increased to accommodate the new element, this method becomes an O(`n`) operation, where `n` is <xref:System.Collections.Hashtable.Count%2A>.\"\n  example:\n  - \"The following example shows how to add elements to the <xref:System.Collections.Hashtable>.  \\n  \\n [!code-cpp[Classic Hashtable.Add Example#1](~/add/codesnippet/cpp/m-system.collections.has_6_1.cpp)]\\n [!code-cs[Classic Hashtable.Add Example#1](~/add/codesnippet/csharp/m-system.collections.has_6_1.cs)]\\n [!code-vb[Classic Hashtable.Add Example#1](~/add/codesnippet/visualbasic/m-system.collections.has_6_1.vb)]\"\n  syntax:\n    content: public virtual void Add (object key, object value);\n    parameters:\n    - id: key\n      type: System.Object\n      description: The key of the element to add.\n    - id: value\n      type: System.Object\n      description: The value of the element to add. The value can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Collections.Hashtable.Add*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: An element with the same key already exists in the <xref href=\"System.Collections.Hashtable\"></xref>.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"The <xref href=\\\"System.Collections.Hashtable\\\"></xref> is read-only.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Collections.Hashtable\\\"></xref> has a fixed size.\"\n  platform:\n  - net462\n- uid: System.Collections.Hashtable.Clear\n  id: Clear\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  name: Clear()\n  nameWithType: Hashtable.Clear()\n  fullName: System.Collections.Hashtable.Clear()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Removes all elements from the <xref href=\"System.Collections.Hashtable\"></xref>.\n  remarks: \"<xref:System.Collections.Hashtable.Count%2A> is set to zero, and references to other objects from elements of the collection are also released. The capacity remains unchanged.  \\n  \\n This method is an O(`n`) operation, where `n` is <xref:System.Collections.Hashtable.Count%2A>.\"\n  example:\n  - \"The following example shows how to clear the values of the <xref:System.Collections.Hashtable>.  \\n  \\n [!code-cpp[Classic Hashtable.Clear Example#1](~/add/codesnippet/cpp/m-system.collections.has_10_1.cpp)]\\n [!code-vb[Classic Hashtable.Clear Example#1](~/add/codesnippet/visualbasic/m-system.collections.has_10_1.vb)]\\n [!code-cs[Classic Hashtable.Clear Example#1](~/add/codesnippet/csharp/m-system.collections.has_10_1.cs)]\"\n  syntax:\n    content: public virtual void Clear ();\n    parameters: []\n  overload: System.Collections.Hashtable.Clear*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The <xref href=\"System.Collections.Hashtable\"></xref> is read-only.\n  platform:\n  - net462\n- uid: System.Collections.Hashtable.Clone\n  id: Clone\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  name: Clone()\n  nameWithType: Hashtable.Clone()\n  fullName: System.Collections.Hashtable.Clone()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Creates a shallow copy of the <xref href=\"System.Collections.Hashtable\"></xref>.\n  remarks: \"A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but it does not copy the objects that the references refer to. The references in the new collection point to the same objects that the references in the original collection point to.  \\n  \\n In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.  \\n  \\n The <xref:System.Collections.Hashtable> clone has the same count, the same capacity, the same <xref:System.Collections.IHashCodeProvider> implementation, and the same <xref:System.Collections.IComparer> implementation as the original <xref:System.Collections.Hashtable>.  \\n  \\n This method is an O(`n`) operation, where `n` is <xref:System.Collections.Hashtable.Count%2A>.\"\n  syntax:\n    content: public virtual object Clone ();\n    parameters: []\n    return:\n      type: System.Object\n      description: A shallow copy of the <xref href=\"System.Collections.Hashtable\"></xref>.\n  overload: System.Collections.Hashtable.Clone*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Hashtable.comparer\n  id: comparer\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  name: comparer\n  nameWithType: Hashtable.comparer\n  fullName: System.Collections.Hashtable.comparer\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Gets or sets the <xref:System.Collections.IComparer> to use for the <xref href=\"System.Collections.Hashtable\"></xref>.\n  remarks: Retrieving the value of this property is an O(1) operation.\n  syntax:\n    content: protected System.Collections.IComparer comparer { get; set; }\n    return:\n      type: System.Collections.IComparer\n      description: The <xref:System.Collections.IComparer> to use for the <xref href=\"System.Collections.Hashtable\"></xref>.\n  overload: System.Collections.Hashtable.comparer*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The property is set to a value, but the hash table was created using an <xref:System.Collections.IEqualityComparer>.\n  platform:\n  - net462\n- uid: System.Collections.Hashtable.Contains(System.Object)\n  id: Contains(System.Object)\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  name: Contains(Object)\n  nameWithType: Hashtable.Contains(Object)\n  fullName: System.Collections.Hashtable.Contains(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Determines whether the <xref href=\"System.Collections.Hashtable\"></xref> contains a specific key.\n  remarks: \"Contains implements <xref:System.Collections.IDictionary.Contains%2A?displayProperty=fullName>. It behaves exactly as <xref:System.Collections.Hashtable.ContainsKey%2A>.  \\n  \\n This method is an O(1) operation.  \\n  \\n Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.\"\n  example:\n  - \"The following example shows how to determine whether the <xref:System.Collections.Hashtable> contains a specific element.  \\n  \\n [!code-cpp[Classic Hashtable.Contains Example#1](~/add/codesnippet/cpp/m-system.collections.has_12_1.cpp)]\\n [!code-cs[Classic Hashtable.Contains Example#1](~/add/codesnippet/csharp/m-system.collections.has_12_1.cs)]\\n [!code-vb[Classic Hashtable.Contains Example#1](~/add/codesnippet/visualbasic/m-system.collections.has_12_1.vb)]\"\n  syntax:\n    content: public virtual bool Contains (object key);\n    parameters:\n    - id: key\n      type: System.Object\n      description: The key to locate in the <xref href=\"System.Collections.Hashtable\"></xref>.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Collections.Hashtable\"></xref> contains an element with the specified key; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Collections.Hashtable.Contains*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Collections.Hashtable.ContainsKey(System.Object)\n  id: ContainsKey(System.Object)\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  name: ContainsKey(Object)\n  nameWithType: Hashtable.ContainsKey(Object)\n  fullName: System.Collections.Hashtable.ContainsKey(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Determines whether the <xref href=\"System.Collections.Hashtable\"></xref> contains a specific key.\n  remarks: \"This method behaves exactly as <xref:System.Collections.Hashtable.Contains%2A>.  \\n  \\n This method is an O(1) operation.  \\n  \\n Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.\"\n  example:\n  - \"The following example shows how to determine whether the <xref:System.Collections.Hashtable> contains a specific element.  \\n  \\n [!code-cpp[Classic Hashtable.Contains Example#1](~/add/codesnippet/cpp/m-system.collections.has_7_1.cpp)]\\n [!code-cs[Classic Hashtable.Contains Example#1](~/add/codesnippet/csharp/m-system.collections.has_7_1.cs)]\\n [!code-vb[Classic Hashtable.Contains Example#1](~/add/codesnippet/visualbasic/m-system.collections.has_7_1.vb)]\"\n  syntax:\n    content: public virtual bool ContainsKey (object key);\n    parameters:\n    - id: key\n      type: System.Object\n      description: The key to locate in the <xref href=\"System.Collections.Hashtable\"></xref>.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Collections.Hashtable\"></xref> contains an element with the specified key; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Collections.Hashtable.ContainsKey*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Collections.Hashtable.ContainsValue(System.Object)\n  id: ContainsValue(System.Object)\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  name: ContainsValue(Object)\n  nameWithType: Hashtable.ContainsValue(Object)\n  fullName: System.Collections.Hashtable.ContainsValue(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Determines whether the <xref href=\"System.Collections.Hashtable\"></xref> contains a specific value.\n  remarks: \"The values of the elements of the <xref:System.Collections.Hashtable> are compared to the specified value using the <xref:System.Object.Equals%2A?displayProperty=fullName> method.  \\n  \\n This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Hashtable.Count%2A>.  \\n  \\n Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.\"\n  example:\n  - \"The following example shows how to determine whether the <xref:System.Collections.Hashtable> contains a specific element.  \\n  \\n [!code-cpp[Classic Hashtable.Contains Example#1](~/add/codesnippet/cpp/m-system.collections.has_9_1.cpp)]\\n [!code-cs[Classic Hashtable.Contains Example#1](~/add/codesnippet/csharp/m-system.collections.has_9_1.cs)]\\n [!code-vb[Classic Hashtable.Contains Example#1](~/add/codesnippet/visualbasic/m-system.collections.has_9_1.vb)]\"\n  syntax:\n    content: public virtual bool ContainsValue (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: The value to locate in the <xref href=\"System.Collections.Hashtable\"></xref>. The value can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Collections.Hashtable\"></xref> contains an element with the specified <code>value</code>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Collections.Hashtable.ContainsValue*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Hashtable.CopyTo(System.Array,System.Int32)\n  id: CopyTo(System.Array,System.Int32)\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  name: CopyTo(Array,Int32)\n  nameWithType: Hashtable.CopyTo(Array,Int32)\n  fullName: System.Collections.Hashtable.CopyTo(Array,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Copies the <xref href=\"System.Collections.Hashtable\"></xref> elements to a one-dimensional <xref:System.Array> instance at the specified index.\n  remarks: \"The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.Hashtable>.  \\n  \\n To copy only the keys in the <xref:System.Collections.Hashtable>, use `Hashtable.Keys.CopyTo`.  \\n  \\n To copy only the values in the <xref:System.Collections.Hashtable>, use `Hashtable.Values.CopyTo`.  \\n  \\n This method is an O(`n`) operation, where `n` is <xref:System.Collections.Hashtable.Count%2A>.\"\n  example:\n  - \"The following example shows how to copy the list of keys or the list of values in a <xref:System.Collections.Hashtable> into a one-dimensional <xref:System.Array>.  \\n  \\n [!code-cs[Classic Hashtable.CopyTo Example#1](~/add/codesnippet/csharp/m-system.collections.has_0_1.cs)]\\n [!code-vb[Classic Hashtable.CopyTo Example#1](~/add/codesnippet/visualbasic/m-system.collections.has_0_1.vb)]\\n [!code-cpp[Classic Hashtable.CopyTo Example#1](~/add/codesnippet/cpp/m-system.collections.has_0_1.cpp)]\"\n  syntax:\n    content: public virtual void CopyTo (Array array, int arrayIndex);\n    parameters:\n    - id: array\n      type: System.Array\n      description: The one-dimensional <xref:System.Array> that is the destination of the <xref:System.Collections.DictionaryEntry> objects copied from <xref href=\"System.Collections.Hashtable\"></xref>. The <xref:System.Array> must have zero-based indexing.\n    - id: arrayIndex\n      type: System.Int32\n      description: The zero-based index in `array` at which copying begins.\n  overload: System.Collections.Hashtable.CopyTo*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>array</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>arrayIndex</code> is less than zero.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>array</code> is multidimensional.  \\n  \\n -or-  \\n  \\n The number of elements in the source <xref href=\\\"System.Collections.Hashtable\\\"></xref> is greater than the available space from <code>arrayIndex</code> to the end of the destination <code>array</code>.\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: The type of the source <xref href=\"System.Collections.Hashtable\"></xref> cannot be cast automatically to the type of the destination <code>array</code>.\n  platform:\n  - net462\n- uid: System.Collections.Hashtable.Count\n  id: Count\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  name: Count\n  nameWithType: Hashtable.Count\n  fullName: System.Collections.Hashtable.Count\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Gets the number of key/value pairs contained in the <xref href=\"System.Collections.Hashtable\"></xref>.\n  remarks: Retrieving the value of this property is an O(1) operation.\n  syntax:\n    content: public virtual int Count { get; }\n    return:\n      type: System.Int32\n      description: The number of key/value pairs contained in the <xref href=\"System.Collections.Hashtable\"></xref>.\n  overload: System.Collections.Hashtable.Count*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Hashtable.EqualityComparer\n  id: EqualityComparer\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  name: EqualityComparer\n  nameWithType: Hashtable.EqualityComparer\n  fullName: System.Collections.Hashtable.EqualityComparer\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Gets the <xref:System.Collections.IEqualityComparer> to use for the <xref href=\"System.Collections.Hashtable\"></xref>.\n  remarks: \"The <xref:System.Collections.IEqualityComparer> includes both the comparer and the hash code provider. If an <xref:System.Collections.IEqualityComparer> is used in the <xref:System.Collections.Hashtable> constructor, the objects used as keys in the <xref:System.Collections.Hashtable> are not required to override the <xref:System.Object.GetHashCode%2A?displayProperty=fullName> and <xref:System.Object.Equals%2A?displayProperty=fullName> methods.  \\n  \\n Retrieving the value of this property is an O(1) operation.\"\n  syntax:\n    content: protected System.Collections.IEqualityComparer EqualityComparer { get; }\n    return:\n      type: System.Collections.IEqualityComparer\n      description: The <xref:System.Collections.IEqualityComparer> to use for the <xref href=\"System.Collections.Hashtable\"></xref>.\n  overload: System.Collections.Hashtable.EqualityComparer*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The property is set to a value, but the hash table was created using an <xref href=\"System.Collections.IHashCodeProvider\"></xref> and an <xref:System.Collections.IComparer>.\n  platform:\n  - net462\n- uid: System.Collections.Hashtable.GetEnumerator\n  id: GetEnumerator\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: Hashtable.GetEnumerator()\n  fullName: System.Collections.Hashtable.GetEnumerator()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Returns an <xref:System.Collections.IDictionaryEnumerator> that iterates through the <xref href=\"System.Collections.Hashtable\"></xref>.\n  remarks: \"[Visual Basic, C#]  \\n  \\n The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \\n  \\n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \\n  \\n Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.  \\n  \\n <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.  \\n  \\n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.  \\n  \\n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  \\n  \\n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \\n  \\n This method is an O(1) operation.  \\n  \\n Because serializing and deserializing an enumerator for a <xref:System.Collections.Hashtable> can cause the elements to become reordered, it is not possible to continue enumeration without calling the <xref:System.Collections.IEnumerator.Reset%2A> method.\"\n  example:\n  - \"The following example compares the use of GetEnumerator and `foreach` to enumerate the contents of a <xref:System.Collections.Hashtable>.  \\n  \\n [!code-cpp[Classic Hashtable Example#2](~/add/codesnippet/cpp/m-system.collections.has_3_1.cpp)]\\n [!code-cs[Classic Hashtable Example#2](~/add/codesnippet/csharp/m-system.collections.has_3_1.cs)]\\n [!code-vb[Classic Hashtable Example#2](~/add/codesnippet/visualbasic/m-system.collections.has_3_1.vb)]\"\n  syntax:\n    content: public virtual System.Collections.IDictionaryEnumerator GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IDictionaryEnumerator\n      description: An <xref:System.Collections.IDictionaryEnumerator> for the <xref href=\"System.Collections.Hashtable\"></xref>.\n  overload: System.Collections.Hashtable.GetEnumerator*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Hashtable.GetHash(System.Object)\n  id: GetHash(System.Object)\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  name: GetHash(Object)\n  nameWithType: Hashtable.GetHash(Object)\n  fullName: System.Collections.Hashtable.GetHash(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Returns the hash code for the specified key.\n  remarks: \"If the hash table was created with a specific <xref:System.Collections.IHashCodeProvider> implementation, this method uses that hash code provider; otherwise, it uses the <xref:System.Object.GetHashCode%2A?displayProperty=fullName> implementation of `key`.  \\n  \\n This method is an O(1) operation.\"\n  syntax:\n    content: protected virtual int GetHash (object key);\n    parameters:\n    - id: key\n      type: System.Object\n      description: The <xref:System.Object> for which a hash code is to be returned.\n    return:\n      type: System.Int32\n      description: The hash code for <code>key</code>.\n  overload: System.Collections.Hashtable.GetHash*\n  exceptions:\n  - type: System.NullReferenceException\n    commentId: T:System.NullReferenceException\n    description: <code>key</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Collections.Hashtable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  name: GetObjectData(SerializationInfo,StreamingContext)\n  nameWithType: Hashtable.GetObjectData(SerializationInfo,StreamingContext)\n  fullName: System.Collections.Hashtable.GetObjectData(SerializationInfo,StreamingContext)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Implements the <xref href=\"System.Runtime.Serialization.ISerializable\"></xref> interface and returns the data needed to serialize the <xref href=\"System.Collections.Hashtable\"></xref>.\n  remarks: This method is an O(`n`) operation, where `n` is <xref:System.Collections.Hashtable.Count%2A>.\n  syntax:\n    content: public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);\n    parameters:\n    - id: info\n      type: System.Runtime.Serialization.SerializationInfo\n      description: A <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object containing the information required to serialize the <xref href=\"System.Collections.Hashtable\"></xref>.\n    - id: context\n      type: System.Runtime.Serialization.StreamingContext\n      description: A <xref:System.Runtime.Serialization.StreamingContext> object containing the source and destination of the serialized stream associated with the <xref href=\"System.Collections.Hashtable\"></xref>.\n  overload: System.Collections.Hashtable.GetObjectData*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>info</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The collection was modified.\n  platform:\n  - net462\n- uid: System.Collections.Hashtable.hcp\n  id: hcp\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  name: hcp\n  nameWithType: Hashtable.hcp\n  fullName: System.Collections.Hashtable.hcp\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Gets or sets the object that can dispense hash codes.\n  remarks: Retrieving the value of this property is an O(1) operation.\n  syntax:\n    content: protected System.Collections.IHashCodeProvider hcp { get; set; }\n    return:\n      type: System.Collections.IHashCodeProvider\n      description: The object that can dispense hash codes.\n  overload: System.Collections.Hashtable.hcp*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The property is set to a value, but the hash table was created using an <xref:System.Collections.IEqualityComparer>.\n  platform:\n  - net462\n- uid: System.Collections.Hashtable.IsFixedSize\n  id: IsFixedSize\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  name: IsFixedSize\n  nameWithType: Hashtable.IsFixedSize\n  fullName: System.Collections.Hashtable.IsFixedSize\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Gets a value indicating whether the <xref href=\"System.Collections.Hashtable\"></xref> has a fixed size.\n  remarks: \"A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.  \\n  \\n A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.  \\n  \\n Retrieving the value of this property is an O(1) operation.\"\n  syntax:\n    content: public virtual bool IsFixedSize { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Collections.Hashtable\"></xref> has a fixed size; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Collections.Hashtable.IsFixedSize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Hashtable.IsReadOnly\n  id: IsReadOnly\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  name: IsReadOnly\n  nameWithType: Hashtable.IsReadOnly\n  fullName: System.Collections.Hashtable.IsReadOnly\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Gets a value indicating whether the <xref href=\"System.Collections.Hashtable\"></xref> is read-only.\n  remarks: \"A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.  \\n  \\n A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.  \\n  \\n Retrieving the value of this property is an O(1) operation.\"\n  syntax:\n    content: public virtual bool IsReadOnly { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Collections.Hashtable\"></xref> is read-only; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Collections.Hashtable.IsReadOnly*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Hashtable.IsSynchronized\n  id: IsSynchronized\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  name: IsSynchronized\n  nameWithType: Hashtable.IsSynchronized\n  fullName: System.Collections.Hashtable.IsSynchronized\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Gets a value indicating whether access to the <xref href=\"System.Collections.Hashtable\"></xref> is synchronized (thread safe).\n  remarks: \"A <xref:System.Collections.Hashtable> can support one writer and multiple readers concurrently. To support multiple writers, all operations must be done through the wrapper returned by the <xref:System.Collections.Hashtable.Synchronized%2A> method.  \\n  \\n Enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  \\n  \\n The following code example shows how to lock the collection using the <xref:System.Collections.Hashtable.SyncRoot%2A> during the entire enumeration:  \\n  \\n [!code-cpp[Classic Hashtable.IsSynchronized Example#2](~/add/codesnippet/cpp/p-system.collections.has_1_1.cpp)]\\n [!code-vb[Classic Hashtable.IsSynchronized Example#2](~/add/codesnippet/visualbasic/p-system.collections.has_1_1.vb)]\\n [!code-cs[Classic Hashtable.IsSynchronized Example#2](~/add/codesnippet/csharp/p-system.collections.has_1_1.cs)]\"\n  example:\n  - \"The following example shows how to synchronize a <xref:System.Collections.Hashtable>, determine if a <xref:System.Collections.Hashtable> is synchronized, and use a synchronized <xref:System.Collections.Hashtable>.  \\n  \\n [!code-cs[Classic Hashtable.IsSynchronized Example#1](~/add/codesnippet/csharp/p-system.collections.has_1_2.cs)]\\n [!code-cpp[Classic Hashtable.IsSynchronized Example#1](~/add/codesnippet/cpp/p-system.collections.has_1_2.cpp)]\\n [!code-vb[Classic Hashtable.IsSynchronized Example#1](~/add/codesnippet/visualbasic/p-system.collections.has_1_2.vb)]\"\n  syntax:\n    content: public virtual bool IsSynchronized { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if access to the <xref href=\"System.Collections.Hashtable\"></xref> is synchronized (thread safe); otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Collections.Hashtable.IsSynchronized*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Hashtable.Item(System.Object)\n  id: Item(System.Object)\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  name: Item(Object)\n  nameWithType: Hashtable.Item(Object)\n  fullName: System.Collections.Hashtable.Item(Object)\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Gets or sets the value associated with the specified key.\n  remarks: \"This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[key]`.  \\n  \\n You can also use the Item property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.Hashtable>; for example, `myCollection[\\\"myNonexistentKey\\\"] = myValue`. However, if the specified key already exists in the <xref:System.Collections.Hashtable>, setting the Item property overwrites the old value. In contrast, the <xref:System.Collections.Hashtable.Add%2A> method does not modify existing elements.  \\n  \\n A key cannot be `null`, but a value can be. To distinguish between `null` that is returned because the specified key is not found and `null` that is returned because the value of the specified key is `null`, use the <xref:System.Collections.Hashtable.Contains%2A> method or the <xref:System.Collections.Hashtable.ContainsKey%2A> method to determine if the key exists in the list.  \\n  \\n Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.  \\n  \\n The C# language uses the  keyword to define the indexers instead of implementing the <xref:System.Collections.IList.Item%2A> property. Visual Basic implements Item as a default property, which provides the same indexing functionality.\"\n  syntax:\n    content: public virtual object this[object key] { get; set; }\n    parameters:\n    - id: key\n      type: System.Object\n      description: The key whose value to get or set.\n    return:\n      type: System.Object\n      description: The value associated with the specified key. If the specified key is not found, attempting to get it returns <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, and attempting to set it creates a new element using the specified key.\n  overload: System.Collections.Hashtable.Item*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"The property is set and the <xref href=\\\"System.Collections.Hashtable\\\"></xref> is read-only.  \\n  \\n -or-  \\n  \\n The property is set, <code>key</code> does not exist in the collection, and the <xref href=\\\"System.Collections.Hashtable\\\"></xref> has a fixed size.\"\n  platform:\n  - net462\n- uid: System.Collections.Hashtable.KeyEquals(System.Object,System.Object)\n  id: KeyEquals(System.Object,System.Object)\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  name: KeyEquals(Object,Object)\n  nameWithType: Hashtable.KeyEquals(Object,Object)\n  fullName: System.Collections.Hashtable.KeyEquals(Object,Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Compares a specific <xref:System.Object> with a specific key in the <xref href=\"System.Collections.Hashtable\"></xref>.\n  remarks: \"If the hash table was created with a specific <xref:System.Collections.IComparer> implementation, this method uses that comparer; that is, <xref:System.Collections.IComparer.Compare%2A> (`item`, `key`). Otherwise, it uses `item.Equals(key)`.  \\n  \\n This method is an O(1) operation.\"\n  syntax:\n    content: protected virtual bool KeyEquals (object item, object key);\n    parameters:\n    - id: item\n      type: System.Object\n      description: The <xref:System.Object> to compare with `key`.\n    - id: key\n      type: System.Object\n      description: The key in the <xref href=\"System.Collections.Hashtable\"></xref> to compare with `item`.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>item</code> and <code>key</code> are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Collections.Hashtable.KeyEquals*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>item</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>key</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  platform:\n  - net462\n- uid: System.Collections.Hashtable.Keys\n  id: Keys\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  name: Keys\n  nameWithType: Hashtable.Keys\n  fullName: System.Collections.Hashtable.Keys\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Gets an <xref:System.Collections.ICollection> containing the keys in the <xref href=\"System.Collections.Hashtable\"></xref>.\n  remarks: \"The order of the keys in the <xref:System.Collections.ICollection> is unspecified, but it is the same order as the associated values in the <xref:System.Collections.ICollection> returned by the <xref:System.Collections.Hashtable.Values%2A> method.  \\n  \\n The returned <xref:System.Collections.ICollection> is not a static copy; instead, the <xref:System.Collections.ICollection> refers back to the keys in the original <xref:System.Collections.Hashtable>. Therefore, changes to the <xref:System.Collections.Hashtable> continue to be reflected in the <xref:System.Collections.ICollection>.  \\n  \\n Retrieving the value of this property is an O(1) operation.\"\n  syntax:\n    content: public virtual System.Collections.ICollection Keys { get; }\n    return:\n      type: System.Collections.ICollection\n      description: An <xref:System.Collections.ICollection> containing the keys in the <xref href=\"System.Collections.Hashtable\"></xref>.\n  overload: System.Collections.Hashtable.Keys*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Hashtable.OnDeserialization(System.Object)\n  id: OnDeserialization(System.Object)\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  name: OnDeserialization(Object)\n  nameWithType: Hashtable.OnDeserialization(Object)\n  fullName: System.Collections.Hashtable.OnDeserialization(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Implements the <xref href=\"System.Runtime.Serialization.ISerializable\"></xref> interface and raises the deserialization event when the deserialization is complete.\n  remarks: \"This method is an O(`n`) operation, where `n` is <xref:System.Collections.Hashtable.Count%2A>.  \\n  \\n Because serializing and deserializing an enumerator for a <xref:System.Collections.Hashtable> can cause the elements to become reordered, it is not possible to continue enumeration without calling the <xref:System.Collections.IEnumerator.Reset%2A> method.\"\n  syntax:\n    content: public virtual void OnDeserialization (object sender);\n    parameters:\n    - id: sender\n      type: System.Object\n      description: The source of the deserialization event.\n  overload: System.Collections.Hashtable.OnDeserialization*\n  exceptions:\n  - type: System.Runtime.Serialization.SerializationException\n    commentId: T:System.Runtime.Serialization.SerializationException\n    description: The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object associated with the current <xref href=\"System.Collections.Hashtable\"></xref> is invalid.\n  platform:\n  - net462\n- uid: System.Collections.Hashtable.Remove(System.Object)\n  id: Remove(System.Object)\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  name: Remove(Object)\n  nameWithType: Hashtable.Remove(Object)\n  fullName: System.Collections.Hashtable.Remove(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Removes the element with the specified key from the <xref href=\"System.Collections.Hashtable\"></xref>.\n  remarks: \"If the <xref:System.Collections.Hashtable> does not contain an element with the specified key, the <xref:System.Collections.Hashtable> remains unchanged. No exception is thrown.  \\n  \\n This method is an O(1) operation.\"\n  example:\n  - \"The following example shows how to remove elements from the <xref:System.Collections.Hashtable>.  \\n  \\n [!code-cpp[Classic Hashtable.Remove Example#1](~/add/codesnippet/cpp/m-system.collections.has_13_1.cpp)]\\n [!code-cs[Classic Hashtable.Remove Example#1](~/add/codesnippet/csharp/m-system.collections.has_13_1.cs)]\\n [!code-vb[Classic Hashtable.Remove Example#1](~/add/codesnippet/visualbasic/m-system.collections.has_13_1.vb)]\"\n  syntax:\n    content: public virtual void Remove (object key);\n    parameters:\n    - id: key\n      type: System.Object\n      description: The key of the element to remove.\n  overload: System.Collections.Hashtable.Remove*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"The <xref href=\\\"System.Collections.Hashtable\\\"></xref> is read-only.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Collections.Hashtable\\\"></xref> has a fixed size.\"\n  platform:\n  - net462\n- uid: System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)\n  id: Synchronized(System.Collections.Hashtable)\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  name: Synchronized(Hashtable)\n  nameWithType: Hashtable.Synchronized(Hashtable)\n  fullName: System.Collections.Hashtable.Synchronized(Hashtable)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Returns a synchronized (thread-safe) wrapper for the <xref href=\"System.Collections.Hashtable\"></xref>.\n  remarks: \"The Synchronized method is thread safe for multiple readers and writers. Furthermore, the synchronized wrapper ensures that there is only one writer writing at a time.  \\n  \\n Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  \\n  \\n The following code example shows how to lock the collection using the <xref:System.Collections.Hashtable.SyncRoot%2A> during the entire enumeration:  \\n  \\n [!code-cpp[Classic Hashtable.IsSynchronized Example#2](~/add/codesnippet/cpp/m-system.collections.has_11_1.cpp)]\\n [!code-vb[Classic Hashtable.IsSynchronized Example#2](~/add/codesnippet/visualbasic/m-system.collections.has_11_1.vb)]\\n [!code-cs[Classic Hashtable.IsSynchronized Example#2](~/add/codesnippet/csharp/m-system.collections.has_11_1.cs)]  \\n  \\n This method is an O(1) operation.\"\n  example:\n  - \"The following example shows how to synchronize a <xref:System.Collections.Hashtable>, determine if a <xref:System.Collections.Hashtable> is synchronized, and use a synchronized <xref:System.Collections.Hashtable>.  \\n  \\n [!code-cs[Classic Hashtable.IsSynchronized Example#1](~/add/codesnippet/csharp/m-system.collections.has_11_2.cs)]\\n [!code-cpp[Classic Hashtable.IsSynchronized Example#1](~/add/codesnippet/cpp/m-system.collections.has_11_2.cpp)]\\n [!code-vb[Classic Hashtable.IsSynchronized Example#1](~/add/codesnippet/visualbasic/m-system.collections.has_11_2.vb)]\"\n  syntax:\n    content: public static System.Collections.Hashtable Synchronized (System.Collections.Hashtable table);\n    parameters:\n    - id: table\n      type: System.Collections.Hashtable\n      description: The <xref href=\"System.Collections.Hashtable\"></xref> to synchronize.\n    return:\n      type: System.Collections.Hashtable\n      description: A synchronized (thread-safe) wrapper for the <xref href=\"System.Collections.Hashtable\"></xref>.\n  overload: System.Collections.Hashtable.Synchronized*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>table</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Collections.Hashtable.SyncRoot\n  id: SyncRoot\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  name: SyncRoot\n  nameWithType: Hashtable.SyncRoot\n  fullName: System.Collections.Hashtable.SyncRoot\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Gets an object that can be used to synchronize access to the <xref href=\"System.Collections.Hashtable\"></xref>.\n  remarks: \"To create a synchronized version of the <xref:System.Collections.Hashtable>, use the <xref:System.Collections.Hashtable.Synchronized%2A> method. However, derived classes can provide their own synchronized version of the <xref:System.Collections.Hashtable> using the SyncRoot property. The synchronizing code must perform operations on the SyncRoot of the <xref:System.Collections.Hashtable>, not directly on the <xref:System.Collections.Hashtable> . This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.Hashtable> object.  \\n  \\n Enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  \\n  \\n The following code example shows how to lock the collection using the SyncRoot during the entire enumeration:  \\n  \\n [!code-cpp[Classic Hashtable.IsSynchronized Example#2](~/add/codesnippet/cpp/p-system.collections.has_0_1.cpp)]\\n [!code-vb[Classic Hashtable.IsSynchronized Example#2](~/add/codesnippet/visualbasic/p-system.collections.has_0_1.vb)]\\n [!code-cs[Classic Hashtable.IsSynchronized Example#2](~/add/codesnippet/csharp/p-system.collections.has_0_1.cs)]\"\n  syntax:\n    content: public virtual object SyncRoot { get; }\n    return:\n      type: System.Object\n      description: An object that can be used to synchronize access to the <xref href=\"System.Collections.Hashtable\"></xref>.\n  overload: System.Collections.Hashtable.SyncRoot*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Hashtable.System#Collections#IEnumerable#GetEnumerator\n  id: System#Collections#IEnumerable#GetEnumerator\n  isEii: true\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: Hashtable.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.Collections.Hashtable.System.Collections.IEnumerable.GetEnumerator()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Returns an enumerator that iterates through a collection.\n  remarks: \"[Visual Basic, C#]  \\n  \\n The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \\n  \\n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \\n  \\n Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position. At this position, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.  \\n  \\n <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.  \\n  \\n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.  \\n  \\n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator can be invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>. If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.  \\n  \\n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  \\n  \\n This method is an O(1) operation.\"\n  syntax:\n    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: An <xref:System.Collections.IEnumerator> that can be used to iterate through the collection.\n  overload: System.Collections.Hashtable.System#Collections#IEnumerable#GetEnumerator*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Hashtable.Values\n  id: Values\n  parent: System.Collections.Hashtable\n  langs:\n  - csharp\n  name: Values\n  nameWithType: Hashtable.Values\n  fullName: System.Collections.Hashtable.Values\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  summary: Gets an <xref:System.Collections.ICollection> containing the values in the <xref href=\"System.Collections.Hashtable\"></xref>.\n  remarks: \"The order of the values in the <xref:System.Collections.ICollection> is unspecified, but it is the same order as the associated keys in the <xref:System.Collections.ICollection> returned by the <xref:System.Collections.Hashtable.Keys%2A> method.  \\n  \\n The returned <xref:System.Collections.ICollection> is not a static copy; instead, the <xref:System.Collections.ICollection> refers back to the values in the original <xref:System.Collections.Hashtable>. Therefore, changes to the <xref:System.Collections.Hashtable> continue to be reflected in the <xref:System.Collections.ICollection>.  \\n  \\n Retrieving the value of this property is an O(1) operation.\"\n  syntax:\n    content: public virtual System.Collections.ICollection Values { get; }\n    return:\n      type: System.Collections.ICollection\n      description: An <xref:System.Collections.ICollection> containing the values in the <xref href=\"System.Collections.Hashtable\"></xref>.\n  overload: System.Collections.Hashtable.Values*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.NotSupportedException\n  isExternal: true\n  name: System.NotSupportedException\n- uid: System.InvalidCastException\n  isExternal: true\n  name: System.InvalidCastException\n- uid: System.NullReferenceException\n  isExternal: true\n  name: System.NullReferenceException\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.Runtime.Serialization.SerializationException\n  isExternal: true\n  name: System.Runtime.Serialization.SerializationException\n- uid: System.Collections.Hashtable.#ctor\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: Hashtable()\n  nameWithType: Hashtable.Hashtable()\n  fullName: System.Collections.Hashtable.Hashtable()\n- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary)\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: Hashtable(IDictionary)\n  nameWithType: Hashtable.Hashtable(IDictionary)\n  fullName: System.Collections.Hashtable.Hashtable(IDictionary)\n- uid: System.Collections.IDictionary\n  parent: System.Collections\n  isExternal: true\n  name: IDictionary\n  nameWithType: IDictionary\n  fullName: System.Collections.IDictionary\n- uid: System.Collections.Hashtable.#ctor(System.Collections.IEqualityComparer)\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: Hashtable(IEqualityComparer)\n  nameWithType: Hashtable.Hashtable(IEqualityComparer)\n  fullName: System.Collections.Hashtable.Hashtable(IEqualityComparer)\n- uid: System.Collections.IEqualityComparer\n  parent: System.Collections\n  isExternal: true\n  name: IEqualityComparer\n  nameWithType: IEqualityComparer\n  fullName: System.Collections.IEqualityComparer\n- uid: System.Collections.Hashtable.#ctor(System.Int32)\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: Hashtable(Int32)\n  nameWithType: Hashtable.Hashtable(Int32)\n  fullName: System.Collections.Hashtable.Hashtable(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IEqualityComparer)\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: Hashtable(IDictionary,IEqualityComparer)\n  nameWithType: Hashtable.Hashtable(IDictionary,IEqualityComparer)\n  fullName: System.Collections.Hashtable.Hashtable(IDictionary,IEqualityComparer)\n- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single)\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: Hashtable(IDictionary,Single)\n  nameWithType: Hashtable.Hashtable(IDictionary,Single)\n  fullName: System.Collections.Hashtable.Hashtable(IDictionary,Single)\n- uid: System.Single\n  parent: System\n  isExternal: true\n  name: Single\n  nameWithType: Single\n  fullName: System.Single\n- uid: System.Collections.Hashtable.#ctor(System.Collections.IHashCodeProvider,System.Collections.IComparer)\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: Hashtable(IHashCodeProvider,IComparer)\n  nameWithType: Hashtable.Hashtable(IHashCodeProvider,IComparer)\n  fullName: System.Collections.Hashtable.Hashtable(IHashCodeProvider,IComparer)\n- uid: System.Collections.IHashCodeProvider\n  parent: System.Collections\n  isExternal: false\n  name: IHashCodeProvider\n  nameWithType: IHashCodeProvider\n  fullName: System.Collections.IHashCodeProvider\n- uid: System.Collections.IComparer\n  parent: System.Collections\n  isExternal: true\n  name: IComparer\n  nameWithType: IComparer\n  fullName: System.Collections.IComparer\n- uid: System.Collections.Hashtable.#ctor(System.Int32,System.Collections.IEqualityComparer)\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: Hashtable(Int32,IEqualityComparer)\n  nameWithType: Hashtable.Hashtable(Int32,IEqualityComparer)\n  fullName: System.Collections.Hashtable.Hashtable(Int32,IEqualityComparer)\n- uid: System.Collections.Hashtable.#ctor(System.Int32,System.Single)\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: Hashtable(Int32,Single)\n  nameWithType: Hashtable.Hashtable(Int32,Single)\n  fullName: System.Collections.Hashtable.Hashtable(Int32,Single)\n- uid: System.Collections.Hashtable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: Hashtable(SerializationInfo,StreamingContext)\n  nameWithType: Hashtable.Hashtable(SerializationInfo,StreamingContext)\n  fullName: System.Collections.Hashtable.Hashtable(SerializationInfo,StreamingContext)\n- uid: System.Runtime.Serialization.SerializationInfo\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: SerializationInfo\n  nameWithType: SerializationInfo\n  fullName: System.Runtime.Serialization.SerializationInfo\n- uid: System.Runtime.Serialization.StreamingContext\n  parent: System.Runtime.Serialization\n  isExternal: true\n  name: StreamingContext\n  nameWithType: StreamingContext\n  fullName: System.Runtime.Serialization.StreamingContext\n- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IHashCodeProvider,System.Collections.IComparer)\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: Hashtable(IDictionary,IHashCodeProvider,IComparer)\n  nameWithType: Hashtable.Hashtable(IDictionary,IHashCodeProvider,IComparer)\n  fullName: System.Collections.Hashtable.Hashtable(IDictionary,IHashCodeProvider,IComparer)\n- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IEqualityComparer)\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: Hashtable(IDictionary,Single,IEqualityComparer)\n  nameWithType: Hashtable.Hashtable(IDictionary,Single,IEqualityComparer)\n  fullName: System.Collections.Hashtable.Hashtable(IDictionary,Single,IEqualityComparer)\n- uid: System.Collections.Hashtable.#ctor(System.Int32,System.Collections.IHashCodeProvider,System.Collections.IComparer)\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: Hashtable(Int32,IHashCodeProvider,IComparer)\n  nameWithType: Hashtable.Hashtable(Int32,IHashCodeProvider,IComparer)\n  fullName: System.Collections.Hashtable.Hashtable(Int32,IHashCodeProvider,IComparer)\n- uid: System.Collections.Hashtable.#ctor(System.Int32,System.Single,System.Collections.IEqualityComparer)\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: Hashtable(Int32,Single,IEqualityComparer)\n  nameWithType: Hashtable.Hashtable(Int32,Single,IEqualityComparer)\n  fullName: System.Collections.Hashtable.Hashtable(Int32,Single,IEqualityComparer)\n- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: Hashtable(IDictionary,Single,IHashCodeProvider,IComparer)\n  nameWithType: Hashtable.Hashtable(IDictionary,Single,IHashCodeProvider,IComparer)\n  fullName: System.Collections.Hashtable.Hashtable(IDictionary,Single,IHashCodeProvider,IComparer)\n- uid: System.Collections.Hashtable.#ctor(System.Int32,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: Hashtable(Int32,Single,IHashCodeProvider,IComparer)\n  nameWithType: Hashtable.Hashtable(Int32,Single,IHashCodeProvider,IComparer)\n  fullName: System.Collections.Hashtable.Hashtable(Int32,Single,IHashCodeProvider,IComparer)\n- uid: System.Collections.Hashtable.Add(System.Object,System.Object)\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: Add(Object,Object)\n  nameWithType: Hashtable.Add(Object,Object)\n  fullName: System.Collections.Hashtable.Add(Object,Object)\n- uid: System.Collections.Hashtable.Clear\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: Clear()\n  nameWithType: Hashtable.Clear()\n  fullName: System.Collections.Hashtable.Clear()\n- uid: System.Collections.Hashtable.Clone\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: Clone()\n  nameWithType: Hashtable.Clone()\n  fullName: System.Collections.Hashtable.Clone()\n- uid: System.Collections.Hashtable.comparer\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: comparer\n  nameWithType: Hashtable.comparer\n  fullName: System.Collections.Hashtable.comparer\n- uid: System.Collections.Hashtable.Contains(System.Object)\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: Contains(Object)\n  nameWithType: Hashtable.Contains(Object)\n  fullName: System.Collections.Hashtable.Contains(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Collections.Hashtable.ContainsKey(System.Object)\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: ContainsKey(Object)\n  nameWithType: Hashtable.ContainsKey(Object)\n  fullName: System.Collections.Hashtable.ContainsKey(Object)\n- uid: System.Collections.Hashtable.ContainsValue(System.Object)\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: ContainsValue(Object)\n  nameWithType: Hashtable.ContainsValue(Object)\n  fullName: System.Collections.Hashtable.ContainsValue(Object)\n- uid: System.Collections.Hashtable.CopyTo(System.Array,System.Int32)\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: CopyTo(Array,Int32)\n  nameWithType: Hashtable.CopyTo(Array,Int32)\n  fullName: System.Collections.Hashtable.CopyTo(Array,Int32)\n- uid: System.Array\n  parent: System\n  isExternal: true\n  name: Array\n  nameWithType: Array\n  fullName: System.Array\n- uid: System.Collections.Hashtable.Count\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: Count\n  nameWithType: Hashtable.Count\n  fullName: System.Collections.Hashtable.Count\n- uid: System.Collections.Hashtable.EqualityComparer\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: EqualityComparer\n  nameWithType: Hashtable.EqualityComparer\n  fullName: System.Collections.Hashtable.EqualityComparer\n- uid: System.Collections.Hashtable.GetEnumerator\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: Hashtable.GetEnumerator()\n  fullName: System.Collections.Hashtable.GetEnumerator()\n- uid: System.Collections.IDictionaryEnumerator\n  parent: System.Collections\n  isExternal: true\n  name: IDictionaryEnumerator\n  nameWithType: IDictionaryEnumerator\n  fullName: System.Collections.IDictionaryEnumerator\n- uid: System.Collections.Hashtable.GetHash(System.Object)\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: GetHash(Object)\n  nameWithType: Hashtable.GetHash(Object)\n  fullName: System.Collections.Hashtable.GetHash(Object)\n- uid: System.Collections.Hashtable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: GetObjectData(SerializationInfo,StreamingContext)\n  nameWithType: Hashtable.GetObjectData(SerializationInfo,StreamingContext)\n  fullName: System.Collections.Hashtable.GetObjectData(SerializationInfo,StreamingContext)\n- uid: System.Collections.Hashtable.hcp\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: hcp\n  nameWithType: Hashtable.hcp\n  fullName: System.Collections.Hashtable.hcp\n- uid: System.Collections.Hashtable.IsFixedSize\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: IsFixedSize\n  nameWithType: Hashtable.IsFixedSize\n  fullName: System.Collections.Hashtable.IsFixedSize\n- uid: System.Collections.Hashtable.IsReadOnly\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: IsReadOnly\n  nameWithType: Hashtable.IsReadOnly\n  fullName: System.Collections.Hashtable.IsReadOnly\n- uid: System.Collections.Hashtable.IsSynchronized\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: IsSynchronized\n  nameWithType: Hashtable.IsSynchronized\n  fullName: System.Collections.Hashtable.IsSynchronized\n- uid: System.Collections.Hashtable.Item(System.Object)\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: Item(Object)\n  nameWithType: Hashtable.Item(Object)\n  fullName: System.Collections.Hashtable.Item(Object)\n- uid: System.Collections.Hashtable.KeyEquals(System.Object,System.Object)\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: KeyEquals(Object,Object)\n  nameWithType: Hashtable.KeyEquals(Object,Object)\n  fullName: System.Collections.Hashtable.KeyEquals(Object,Object)\n- uid: System.Collections.Hashtable.Keys\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: Keys\n  nameWithType: Hashtable.Keys\n  fullName: System.Collections.Hashtable.Keys\n- uid: System.Collections.ICollection\n  parent: System.Collections\n  isExternal: true\n  name: ICollection\n  nameWithType: ICollection\n  fullName: System.Collections.ICollection\n- uid: System.Collections.Hashtable.OnDeserialization(System.Object)\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: OnDeserialization(Object)\n  nameWithType: Hashtable.OnDeserialization(Object)\n  fullName: System.Collections.Hashtable.OnDeserialization(Object)\n- uid: System.Collections.Hashtable.Remove(System.Object)\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: Remove(Object)\n  nameWithType: Hashtable.Remove(Object)\n  fullName: System.Collections.Hashtable.Remove(Object)\n- uid: System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: Synchronized(Hashtable)\n  nameWithType: Hashtable.Synchronized(Hashtable)\n  fullName: System.Collections.Hashtable.Synchronized(Hashtable)\n- uid: System.Collections.Hashtable\n  parent: System.Collections\n  isExternal: false\n  name: Hashtable\n  nameWithType: Hashtable\n  fullName: System.Collections.Hashtable\n- uid: System.Collections.Hashtable.SyncRoot\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: SyncRoot\n  nameWithType: Hashtable.SyncRoot\n  fullName: System.Collections.Hashtable.SyncRoot\n- uid: System.Collections.Hashtable.System#Collections#IEnumerable#GetEnumerator\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: Hashtable.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.Collections.Hashtable.System.Collections.IEnumerable.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: true\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.Collections.Hashtable.Values\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: Values\n  nameWithType: Hashtable.Values\n  fullName: System.Collections.Hashtable.Values\n- uid: System.Collections.Hashtable.#ctor*\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: Hashtable\n  nameWithType: Hashtable.Hashtable\n- uid: System.Collections.Hashtable.Add*\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: Add\n  nameWithType: Hashtable.Add\n- uid: System.Collections.Hashtable.Clear*\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: Clear\n  nameWithType: Hashtable.Clear\n- uid: System.Collections.Hashtable.Clone*\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: Clone\n  nameWithType: Hashtable.Clone\n- uid: System.Collections.Hashtable.comparer*\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: comparer\n  nameWithType: Hashtable.comparer\n- uid: System.Collections.Hashtable.Contains*\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: Contains\n  nameWithType: Hashtable.Contains\n- uid: System.Collections.Hashtable.ContainsKey*\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: ContainsKey\n  nameWithType: Hashtable.ContainsKey\n- uid: System.Collections.Hashtable.ContainsValue*\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: ContainsValue\n  nameWithType: Hashtable.ContainsValue\n- uid: System.Collections.Hashtable.CopyTo*\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: CopyTo\n  nameWithType: Hashtable.CopyTo\n- uid: System.Collections.Hashtable.Count*\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: Count\n  nameWithType: Hashtable.Count\n- uid: System.Collections.Hashtable.EqualityComparer*\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: EqualityComparer\n  nameWithType: Hashtable.EqualityComparer\n- uid: System.Collections.Hashtable.GetEnumerator*\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: GetEnumerator\n  nameWithType: Hashtable.GetEnumerator\n- uid: System.Collections.Hashtable.GetHash*\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: GetHash\n  nameWithType: Hashtable.GetHash\n- uid: System.Collections.Hashtable.GetObjectData*\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: GetObjectData\n  nameWithType: Hashtable.GetObjectData\n- uid: System.Collections.Hashtable.hcp*\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: hcp\n  nameWithType: Hashtable.hcp\n- uid: System.Collections.Hashtable.IsFixedSize*\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: IsFixedSize\n  nameWithType: Hashtable.IsFixedSize\n- uid: System.Collections.Hashtable.IsReadOnly*\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: IsReadOnly\n  nameWithType: Hashtable.IsReadOnly\n- uid: System.Collections.Hashtable.IsSynchronized*\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: IsSynchronized\n  nameWithType: Hashtable.IsSynchronized\n- uid: System.Collections.Hashtable.Item*\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: Item\n  nameWithType: Hashtable.Item\n- uid: System.Collections.Hashtable.KeyEquals*\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: KeyEquals\n  nameWithType: Hashtable.KeyEquals\n- uid: System.Collections.Hashtable.Keys*\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: Keys\n  nameWithType: Hashtable.Keys\n- uid: System.Collections.Hashtable.OnDeserialization*\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: OnDeserialization\n  nameWithType: Hashtable.OnDeserialization\n- uid: System.Collections.Hashtable.Remove*\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: Remove\n  nameWithType: Hashtable.Remove\n- uid: System.Collections.Hashtable.Synchronized*\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: Synchronized\n  nameWithType: Hashtable.Synchronized\n- uid: System.Collections.Hashtable.SyncRoot*\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: SyncRoot\n  nameWithType: Hashtable.SyncRoot\n- uid: System.Collections.Hashtable.System#Collections#IEnumerable#GetEnumerator*\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator\n  nameWithType: Hashtable.System.Collections.IEnumerable.GetEnumerator\n- uid: System.Collections.Hashtable.Values*\n  parent: System.Collections.Hashtable\n  isExternal: false\n  name: Values\n  nameWithType: Hashtable.Values\n"}