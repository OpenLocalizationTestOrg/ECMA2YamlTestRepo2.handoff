{"nodes":[{"pos":[2305,2317],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[2354,2366],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[3469,3481],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[4221,4233],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[4294,4306],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[4930,4942],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[5755,5767],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[6646,6658],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[8431,8443],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[8502,8514],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[9444,9456],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[10386,10398],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[10457,10469],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[11467,11479],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[12464,12476],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[12537,12549],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[13454,13466],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[14344,14356],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[15298,15310],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection\n  id: Dictionary`2.KeyCollection\n  children:\n  - System.Collections.Generic.Dictionary`2.KeyCollection.#ctor(System.Collections.Generic.Dictionary{`0,`1})\n  - System.Collections.Generic.Dictionary`2.KeyCollection.CopyTo(`0[],System.Int32)\n  - System.Collections.Generic.Dictionary`2.KeyCollection.Count\n  - System.Collections.Generic.Dictionary`2.KeyCollection.GetEnumerator\n  - System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Add(`0)\n  - System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Clear\n  - System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Contains(`0)\n  - System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#IsReadOnly\n  - System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Remove(`0)\n  - System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#IEnumerable{TKey}#GetEnumerator\n  - System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  - System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#ICollection#IsSynchronized\n  - System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#ICollection#SyncRoot\n  - System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#IEnumerable#GetEnumerator\n  langs:\n  - csharp\n  name: Dictionary<TKey,TValue>+KeyCollection\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection\n  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+KeyCollection\n  type: Class\n  syntax:\n    content: >-\n      [System.Diagnostics.DebuggerDisplay(\"Count = {Count}\")]\n\n      [System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.Mscorlib_DictionaryKeyCollectionDebugView`2))]\n\n      public sealed class Dictionary<TKey,TValue>.KeyCollection : System.Collections.Generic.ICollection<TKey>, System.Collections.Generic.IEnumerable<TKey>, System.Collections.Generic.IReadOnlyCollection<TKey>, System.Collections.ICollection\n    typeParameters:\n    - id: TKey\n      description: To be added.\n    - id: TValue\n      description: To be added.\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.Generic.ICollection<TKey>\n  - System.Collections.Generic.IEnumerable<TKey>\n  - System.Collections.Generic.IReadOnlyCollection<TKey>\n  - System.Collections.ICollection\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.#ctor(System.Collections.Generic.Dictionary{`0,`1})\n  id: '#ctor(System.Collections.Generic.Dictionary{`0,`1})'\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  langs:\n  - csharp\n  name: Dictionary(Dictionary<TKey,TValue>)\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.Dictionary(Dictionary<TKey,TValue>)\n  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+KeyCollection.Dictionary(Dictionary<TKey,TValue>)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: public KeyCollection (System.Collections.Generic.Dictionary<TKey,TValue> dictionary);\n    parameters:\n    - id: dictionary\n      type: System.Collections.Generic.Dictionary{TKey,TValue}\n      description: To be added.\n  overload: System.Collections.Generic.Dictionary`2.KeyCollection.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.CopyTo(`0[],System.Int32)\n  id: CopyTo(`0[],System.Int32)\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  langs:\n  - csharp\n  name: CopyTo(TKey[],Int32)\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.CopyTo(TKey[],Int32)\n  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+KeyCollection.CopyTo(TKey[],Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: public void CopyTo (TKey[] array, int index);\n    parameters:\n    - id: array\n      type: TKey[]\n      description: To be added.\n    - id: index\n      type: System.Int32\n      description: To be added.\n  overload: System.Collections.Generic.Dictionary`2.KeyCollection.CopyTo*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.Count\n  id: Count\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  langs:\n  - csharp\n  name: Count\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.Count\n  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+KeyCollection.Count\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: public int Count { get; }\n    return:\n      type: System.Int32\n      description: To be added.\n  overload: System.Collections.Generic.Dictionary`2.KeyCollection.Count*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.GetEnumerator\n  id: GetEnumerator\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.GetEnumerator()\n  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+KeyCollection.GetEnumerator()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: public System.Collections.Generic.Dictionary<TKey,TValue>.KeyCollection.Enumerator GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator\n      description: To be added.\n  overload: System.Collections.Generic.Dictionary`2.KeyCollection.GetEnumerator*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Add(`0)\n  id: System#Collections#Generic#ICollection{TKey}#Add(`0)\n  isEii: true\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  langs:\n  - csharp\n  name: System.Collections.Generic.ICollection(TKey)\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection(TKey)\n  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection(TKey)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: void ICollection<TKey>.Add (TKey item);\n    parameters:\n    - id: item\n      type: TKey\n      description: To be added.\n  overload: System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection<TKey>#Add*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Clear\n  id: System#Collections#Generic#ICollection{TKey}#Clear\n  isEii: true\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  langs:\n  - csharp\n  name: System.Collections.Generic.ICollection()\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection()\n  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: void ICollection<TKey>.Clear ();\n    parameters: []\n  overload: System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection<TKey>#Clear*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Contains(`0)\n  id: System#Collections#Generic#ICollection{TKey}#Contains(`0)\n  isEii: true\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  langs:\n  - csharp\n  name: System.Collections.Generic.ICollection(TKey)\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection(TKey)\n  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection(TKey)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: bool ICollection<TKey>.Contains (TKey item);\n    parameters:\n    - id: item\n      type: TKey\n      description: To be added.\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection<TKey>#Contains*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#IsReadOnly\n  id: System#Collections#Generic#ICollection{TKey}#IsReadOnly\n  isEii: true\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  langs:\n  - csharp\n  name: System.Collections.Generic.ICollection\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection\n  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: bool System.Collections.Generic.ICollection<TKey>.IsReadOnly { get; }\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection<TKey>#IsReadOnly*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Remove(`0)\n  id: System#Collections#Generic#ICollection{TKey}#Remove(`0)\n  isEii: true\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  langs:\n  - csharp\n  name: System.Collections.Generic.ICollection(TKey)\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection(TKey)\n  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection(TKey)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: bool ICollection<TKey>.Remove (TKey item);\n    parameters:\n    - id: item\n      type: TKey\n      description: To be added.\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection<TKey>#Remove*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#IEnumerable{TKey}#GetEnumerator\n  id: System#Collections#Generic#IEnumerable{TKey}#GetEnumerator\n  isEii: true\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  langs:\n  - csharp\n  name: System.Collections.Generic.IEnumerable()\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.IEnumerable()\n  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.IEnumerable()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: System.Collections.Generic.IEnumerator<TKey> IEnumerable<TKey>.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerator{TKey}\n      description: To be added.\n  overload: System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#IEnumerable<TKey>#GetEnumerator*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  isEii: true\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  langs:\n  - csharp\n  name: System.Collections.ICollection.CopyTo(Array,Int32)\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.System.Collections.ICollection.CopyTo(Array,Int32)\n  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+KeyCollection.System.Collections.ICollection.CopyTo(Array,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: void ICollection.CopyTo (Array array, int index);\n    parameters:\n    - id: array\n      type: System.Array\n      description: To be added.\n    - id: index\n      type: System.Int32\n      description: To be added.\n  overload: System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#ICollection#CopyTo*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#ICollection#IsSynchronized\n  id: System#Collections#ICollection#IsSynchronized\n  isEii: true\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  langs:\n  - csharp\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.System.Collections.ICollection.IsSynchronized\n  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+KeyCollection.System.Collections.ICollection.IsSynchronized\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: bool System.Collections.ICollection.IsSynchronized { get; }\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#ICollection#IsSynchronized*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#ICollection#SyncRoot\n  id: System#Collections#ICollection#SyncRoot\n  isEii: true\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  langs:\n  - csharp\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.System.Collections.ICollection.SyncRoot\n  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+KeyCollection.System.Collections.ICollection.SyncRoot\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: object System.Collections.ICollection.SyncRoot { get; }\n    return:\n      type: System.Object\n      description: To be added.\n  overload: System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#ICollection#SyncRoot*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#IEnumerable#GetEnumerator\n  id: System#Collections#IEnumerable#GetEnumerator\n  isEii: true\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  langs:\n  - csharp\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+KeyCollection.System.Collections.IEnumerable.GetEnumerator()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: To be added.\n  overload: System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#IEnumerable#GetEnumerator*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.#ctor(System.Collections.Generic.Dictionary{`0,`1})\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  isExternal: false\n  name: Dictionary(Dictionary<TKey,TValue>)\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.Dictionary(Dictionary<TKey,TValue>)\n  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+KeyCollection.Dictionary(Dictionary<TKey,TValue>)\n- uid: System.Collections.Generic.Dictionary{TKey,TValue}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: Dictionary<TKey,TValue>\n  nameWithType: Dictionary<TKey,TValue>\n  fullName: System.Collections.Generic.Dictionary<TKey,TValue>\n  spec.csharp:\n  - uid: System.Collections.Generic.Dictionary`2\n    name: Dictionary\n    nameWithType: Dictionary\n    fullName: Dictionary<TKey,TValue>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TKey\n    name: TKey\n    nameWithType: TKey\n    fullName: TKey\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TValue\n    name: TValue\n    nameWithType: TValue\n    fullName: TValue\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.CopyTo(`0[],System.Int32)\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  isExternal: false\n  name: CopyTo(TKey[],Int32)\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.CopyTo(TKey[],Int32)\n  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+KeyCollection.CopyTo(TKey[],Int32)\n- uid: TKey[]\n  isExternal: true\n  name: TKey\n  nameWithType: TKey\n  fullName: TKey[]\n  spec.csharp:\n  - uid: TKey\n    name: TKey\n    nameWithType: TKey\n    fullName: TKey[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.Count\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  isExternal: false\n  name: Count\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.Count\n  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+KeyCollection.Count\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.GetEnumerator\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.GetEnumerator()\n  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+KeyCollection.GetEnumerator()\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator\n  parent: System.Collections.Generic\n  isExternal: false\n  name: Dictionary<TKey,TValue>+KeyCollection+Enumerator\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection+Enumerator\n  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+KeyCollection+Enumerator\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Add(`0)\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  isExternal: false\n  name: System.Collections.Generic.ICollection(TKey)\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection(TKey)\n  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection(TKey)\n- uid: TKey\n  isExternal: true\n  name: TKey\n  nameWithType: TKey\n  fullName: TKey\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Clear\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  isExternal: false\n  name: System.Collections.Generic.ICollection()\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection()\n  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection()\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Contains(`0)\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  isExternal: false\n  name: System.Collections.Generic.ICollection(TKey)\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection(TKey)\n  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection(TKey)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#IsReadOnly\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  isExternal: false\n  name: System.Collections.Generic.ICollection\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection\n  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Remove(`0)\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  isExternal: false\n  name: System.Collections.Generic.ICollection(TKey)\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection(TKey)\n  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection(TKey)\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#IEnumerable{TKey}#GetEnumerator\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  isExternal: false\n  name: System.Collections.Generic.IEnumerable()\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.IEnumerable()\n  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.IEnumerable()\n- uid: System.Collections.Generic.IEnumerator{TKey}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IEnumerator<TKey>\n  nameWithType: IEnumerator<TKey>\n  fullName: System.Collections.Generic.IEnumerator<TKey>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerator`1\n    name: IEnumerator\n    nameWithType: IEnumerator\n    fullName: IEnumerator<TKey>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TKey\n    name: TKey\n    nameWithType: TKey\n    fullName: TKey\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  isExternal: false\n  name: System.Collections.ICollection.CopyTo(Array,Int32)\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.System.Collections.ICollection.CopyTo(Array,Int32)\n  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+KeyCollection.System.Collections.ICollection.CopyTo(Array,Int32)\n- uid: System.Array\n  parent: System\n  isExternal: true\n  name: Array\n  nameWithType: Array\n  fullName: System.Array\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#ICollection#IsSynchronized\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  isExternal: false\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.System.Collections.ICollection.IsSynchronized\n  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+KeyCollection.System.Collections.ICollection.IsSynchronized\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#ICollection#SyncRoot\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  isExternal: false\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.System.Collections.ICollection.SyncRoot\n  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+KeyCollection.System.Collections.ICollection.SyncRoot\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#IEnumerable#GetEnumerator\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+KeyCollection.System.Collections.IEnumerable.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: true\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.#ctor*\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  isExternal: false\n  name: Dictionary<TKey,TValue>+KeyCollection\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.Dictionary<TKey,TValue>+KeyCollection\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.CopyTo*\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  isExternal: false\n  name: CopyTo\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.CopyTo\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.Count*\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  isExternal: false\n  name: Count\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.Count\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.GetEnumerator*\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  isExternal: false\n  name: GetEnumerator\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.GetEnumerator\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection<TKey>#Add*\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  isExternal: false\n  name: System.Collections.Generic.ICollection<TKey>.Add\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection<TKey>.Add\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection<TKey>#Clear*\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  isExternal: false\n  name: System.Collections.Generic.ICollection<TKey>.Clear\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection<TKey>.Clear\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection<TKey>#Contains*\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  isExternal: false\n  name: System.Collections.Generic.ICollection<TKey>.Contains\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection<TKey>.Contains\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection<TKey>#IsReadOnly*\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  isExternal: false\n  name: System.Collections.Generic.ICollection<TKey>.IsReadOnly\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection<TKey>.IsReadOnly\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection<TKey>#Remove*\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  isExternal: false\n  name: System.Collections.Generic.ICollection<TKey>.Remove\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection<TKey>.Remove\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#IEnumerable<TKey>#GetEnumerator*\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  isExternal: false\n  name: System.Collections.Generic.IEnumerable<TKey>.GetEnumerator\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.IEnumerable<TKey>.GetEnumerator\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#ICollection#CopyTo*\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  isExternal: false\n  name: System.Collections.ICollection.CopyTo\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.System.Collections.ICollection.CopyTo\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#ICollection#IsSynchronized*\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  isExternal: false\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.System.Collections.ICollection.IsSynchronized\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#ICollection#SyncRoot*\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  isExternal: false\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.System.Collections.ICollection.SyncRoot\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#IEnumerable#GetEnumerator*\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.System.Collections.IEnumerable.GetEnumerator\n"}