{"nodes":[{"pos":[1135,1258],"content":"Selects a member from a list of candidates, and performs type conversion from actual argument type to formal argument type.","needQuote":true,"needEscape":true,"nodes":[{"content":"Selects a member from a list of candidates, and performs type conversion from actual argument type to formal argument type.","pos":[0,123]}]},{"pos":[1271,1768],"content":"Implementations of the Binder class are used by methods such as <xref:System.Type.InvokeMember%2A?displayProperty=fullName>, which selects from a set of possible members to execute, based on a set of parameter types and argument values; <xref:System.Type.GetMethod%2A?displayProperty=fullName>, which selects a method based on parameter types; and so on.       A default implementation of the Binder class is provided by the <xref:System.Type.DefaultBinder%2A?displayProperty=fullName> property.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Implementations of the Binder class are used by methods such as <xref:System.Type.InvokeMember%2A?displayProperty=fullName>, which selects from a set of possible members to execute, based on a set of parameter types and argument values; <xref:System.Type.GetMethod%2A?displayProperty=fullName>, which selects a method based on parameter types; and so on.       A default implementation of the Binder class is provided by the <xref:System.Type.DefaultBinder%2A?displayProperty=fullName> property.","pos":[0,495],"nodes":[{"content":"Implementations of the Binder class are used by methods such as &lt;xref:System.Type.InvokeMember%2A?displayProperty=fullName&gt;, which selects from a set of possible members to execute, based on a set of parameter types and argument values; &lt;xref:System.Type.GetMethod%2A?displayProperty=fullName&gt;, which selects a method based on parameter types; and so on.","pos":[0,354],"source":"Implementations of the Binder class are used by methods such as <xref:System.Type.InvokeMember%2A?displayProperty=fullName>, which selects from a set of possible members to execute, based on a set of parameter types and argument values; <xref:System.Type.GetMethod%2A?displayProperty=fullName>, which selects a method based on parameter types; and so on."},{"content":"A default implementation of the Binder class is provided by the &lt;xref:System.Type.DefaultBinder%2A?displayProperty=fullName&gt; property.","pos":[361,495],"source":"       A default implementation of the Binder class is provided by the <xref:System.Type.DefaultBinder%2A?displayProperty=fullName> property."}]}]},{"pos":[2828,2914],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Reflection.Binder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Reflection.Binder\"></xref> class."},{"pos":[2926,3026],"content":"This constructor is called by the constructors of derived classes, to initialize state in this type.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This constructor is called by the constructors of derived classes, to initialize state in this type.","pos":[0,100]}]},{"pos":[3832,3910],"content":"Selects a field from the given set of fields, based on the specified criteria.","needQuote":true,"needEscape":true,"nodes":[{"content":"Selects a field from the given set of fields, based on the specified criteria.","pos":[0,78]}]},{"pos":[3923,4308],"content":"If `bindingAttr` does not include <xref:System.Reflection.BindingFlags?displayProperty=fullName>, the default binder implementation provided by <xref:System.Type.DefaultBinder%2A?displayProperty=fullName> simply returns the first element of `match`. No selection is done.       This method controls the binding provided by <xref:System.Type.InvokeMember%2A?displayProperty=fullName>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If <ph id=\"ph1\">`bindingAttr`</ph> does not include &lt;xref:System.Reflection.BindingFlags?displayProperty=fullName&gt;, the default binder implementation provided by &lt;xref:System.Type.DefaultBinder%2A?displayProperty=fullName&gt; simply returns the first element of <ph id=\"ph2\">`match`</ph>.","pos":[0,249],"source":"If `bindingAttr` does not include <xref:System.Reflection.BindingFlags?displayProperty=fullName>, the default binder implementation provided by <xref:System.Type.DefaultBinder%2A?displayProperty=fullName> simply returns the first element of `match`."},{"content":"No selection is done.","pos":[250,271]},{"content":"This method controls the binding provided by &lt;xref:System.Type.InvokeMember%2A?displayProperty=fullName&gt;.","pos":[278,383],"source":"       This method controls the binding provided by <xref:System.Type.InvokeMember%2A?displayProperty=fullName>."}]},{"pos":[4628,4712],"content":"A bitwise combination of <bpt id=\"p1\">&lt;xref href=\"System.Reflection.BindingFlags\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"A bitwise combination of <xref href=\"System.Reflection.BindingFlags\"></xref> values."},{"pos":[4790,5282],"content":"The set of fields that are candidates for matching. For example, when a <xref href=\"System.Reflection.Binder\"></xref> object is used by &lt;xref:System.Type.InvokeMember%2A?displayProperty=fullName&gt;, this parameter specifies the set of fields that reflection has determined to be possible matches, typically because they have the correct member name. The default implementation provided by &lt;xref:System.Type.DefaultBinder%2A?displayProperty=fullName&gt; changes the order of this array.","needQuote":true,"needEscape":true,"nodes":[{"content":"The set of fields that are candidates for matching.","pos":[0,51]},{"content":"For example, when a <bpt id=\"p1\">&lt;xref href=\"System.Reflection.Binder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object is used by <ph id=\"ph1\">&amp;lt;</ph>xref:System.Type.InvokeMember%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>, this parameter specifies the set of fields that reflection has determined to be possible matches, typically because they have the correct member name.","pos":[52,353],"source":" For example, when a <xref href=\"System.Reflection.Binder\"></xref> object is used by &lt;xref:System.Type.InvokeMember%2A?displayProperty=fullName&gt;, this parameter specifies the set of fields that reflection has determined to be possible matches, typically because they have the correct member name."},{"content":"The default implementation provided by <ph id=\"ph1\">&amp;lt;</ph>xref:System.Type.DefaultBinder%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph> changes the order of this array.","pos":[354,492],"source":" The default implementation provided by &lt;xref:System.Type.DefaultBinder%2A?displayProperty=fullName&gt; changes the order of this array."}]},{"pos":[5344,5392],"content":"The field value used to locate a matching field.","needQuote":true,"needEscape":true,"nodes":[{"content":"The field value used to locate a matching field.","pos":[0,48]}]},{"pos":[5476,6226],"content":"An instance of <xref:System.Globalization.CultureInfo> that is used to control the coercion of data types, in binder implementations that coerce types. If `culture` is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, the <xref:System.Globalization.CultureInfo> for the current thread is used.       Note   For example, if a binder implementation allows coercion of string values to numeric types, this parameter is necessary to convert a <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> that represents 1000 to a <xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"></xref> value, because 1000 is represented differently by different cultures. The default binder does not do such string coercions.","needQuote":false,"needEscape":true,"nodes":[{"content":"An instance of &lt;xref:System.Globalization.CultureInfo&gt; that is used to control the coercion of data types, in binder implementations that coerce types.","pos":[0,151],"source":"An instance of <xref:System.Globalization.CultureInfo> that is used to control the coercion of data types, in binder implementations that coerce types."},{"content":"If <ph id=\"ph1\">`culture`</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, the &lt;xref:System.Globalization.CultureInfo&gt; for the current thread is used.","pos":[152,305],"source":" If `culture` is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, the <xref:System.Globalization.CultureInfo> for the current thread is used."},{"content":"Note   For example, if a binder implementation allows coercion of string values to numeric types, this parameter is necessary to convert a <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents 1000 to a <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> value, because 1000 is represented differently by different cultures.","pos":[312,676],"source":"       Note   For example, if a binder implementation allows coercion of string values to numeric types, this parameter is necessary to convert a <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> that represents 1000 to a <xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"></xref> value, because 1000 is represented differently by different cultures."},{"content":"The default binder does not do such string coercions.","pos":[677,730]}]},{"pos":[6299,6318],"content":"The matching field.","needQuote":true,"needEscape":true,"nodes":[{"content":"The matching field.","pos":[0,19]}]},{"pos":[6511,6915],"content":"For the default binder, <code>bindingAttr</code> includes <xref href=\"System.Reflection.BindingFlags\"></xref>, and <code>match</code> contains multiple fields that are equally good matches for <code>value</code>. For example, <code>value</code> contains a `MyClass` object that implements the `IMyClass` interface, and <code>match</code> contains a field of type `MyClass` and a field of type `IMyClass`.","needQuote":true,"needEscape":true,"nodes":[{"content":"For the default binder, <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">bindingAttr</ph><ept id=\"p1\">&lt;/code&gt;</ept> includes <bpt id=\"p2\">&lt;xref href=\"System.Reflection.BindingFlags\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, and <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph2\">match</ph><ept id=\"p3\">&lt;/code&gt;</ept> contains multiple fields that are equally good matches for <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph3\">value</ph><ept id=\"p4\">&lt;/code&gt;</ept>.","pos":[0,212],"source":"For the default binder, <code>bindingAttr</code> includes <xref href=\"System.Reflection.BindingFlags\"></xref>, and <code>match</code> contains multiple fields that are equally good matches for <code>value</code>."},{"content":"For example, <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> contains a <ph id=\"ph2\">`MyClass`</ph> object that implements the <ph id=\"ph3\">`IMyClass`</ph> interface, and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph4\">match</ph><ept id=\"p2\">&lt;/code&gt;</ept> contains a field of type <ph id=\"ph5\">`MyClass`</ph> and a field of type <ph id=\"ph6\">`IMyClass`</ph>.","pos":[213,404],"source":" For example, <code>value</code> contains a `MyClass` object that implements the `IMyClass` interface, and <code>match</code> contains a field of type `MyClass` and a field of type `IMyClass`."}]},{"pos":[7018,7206],"content":"For the default binder, <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">bindingAttr</ph><ept id=\"p1\">&lt;/code&gt;</ept> includes <bpt id=\"p2\">&lt;xref href=\"System.Reflection.BindingFlags\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, and <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph2\">match</ph><ept id=\"p3\">&lt;/code&gt;</ept> contains no fields that can accept <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph3\">value</ph><ept id=\"p4\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"For the default binder, <code>bindingAttr</code> includes <xref href=\"System.Reflection.BindingFlags\"></xref>, and <code>match</code> contains no fields that can accept <code>value</code>."},{"pos":[7312,7740],"content":"For the default binder, <code>bindingAttr</code> includes <xref href=\"System.Reflection.BindingFlags\"></xref>, and <code>match</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or an empty array.       -or-       <code>bindingAttr</code> includes <xref href=\"System.Reflection.BindingFlags\"></xref>, and <code>value</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"For the default binder, <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">bindingAttr</ph><ept id=\"p1\">&lt;/code&gt;</ept> includes <bpt id=\"p2\">&lt;xref href=\"System.Reflection.BindingFlags\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, and <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph2\">match</ph><ept id=\"p3\">&lt;/code&gt;</ept> is <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept> or an empty array.","pos":[0,216],"source":"For the default binder, <code>bindingAttr</code> includes <xref href=\"System.Reflection.BindingFlags\"></xref>, and <code>match</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or an empty array."},{"content":"-or-       <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">bindingAttr</ph><ept id=\"p1\">&lt;/code&gt;</ept> includes <bpt id=\"p2\">&lt;xref href=\"System.Reflection.BindingFlags\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, and <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p3\">&lt;/code&gt;</ept> is <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","pos":[223,408],"source":"       -or-       <code>bindingAttr</code> includes <xref href=\"System.Reflection.BindingFlags\"></xref>, and <code>value</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[8691,8781],"content":"Selects a method to invoke from the given set of methods, based on the supplied arguments.","needQuote":true,"needEscape":true,"nodes":[{"content":"Selects a method to invoke from the given set of methods, based on the supplied arguments.","pos":[0,90]}]},{"pos":[8794,9672],"content":"The default binder takes into account both parameters that have values and `params` arrays (`ParamArray` arrays in Visual Basic). Thus, it is possible to find a match in cases where `args` and `match` do not contain the same number of elements.       The binder enables a client to map the array of arguments back to its original form if the argument array has been manipulated by BindToMethod. Use this remap capability to get back by-reference arguments when such arguments are present. When you pass arguments by name, the binder reorders the argument array. The `state` parameter keeps track of argument reordering, thus enabling the binder's <xref:System.Reflection.Binder.ReorderArgumentArray%2A> method to reorder the argument array to its original form.       The BindToMethod method is used by the <xref:System.Type.InvokeMember%2A?displayProperty=fullName> method.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The default binder takes into account both parameters that have values and <ph id=\"ph1\">`params`</ph> arrays (<ph id=\"ph2\">`ParamArray`</ph> arrays in Visual Basic).","pos":[0,129],"source":"The default binder takes into account both parameters that have values and `params` arrays (`ParamArray` arrays in Visual Basic)."},{"content":"Thus, it is possible to find a match in cases where <ph id=\"ph1\">`args`</ph> and <ph id=\"ph2\">`match`</ph> do not contain the same number of elements.","pos":[130,244],"source":" Thus, it is possible to find a match in cases where `args` and `match` do not contain the same number of elements."},{"content":"The binder enables a client to map the array of arguments back to its original form if the argument array has been manipulated by BindToMethod.","pos":[251,394]},{"content":"Use this remap capability to get back by-reference arguments when such arguments are present.","pos":[395,488]},{"content":"When you pass arguments by name, the binder reorders the argument array.","pos":[489,561]},{"content":"The <ph id=\"ph1\">`state`</ph> parameter keeps track of argument reordering, thus enabling the binder's &lt;xref:System.Reflection.Binder.ReorderArgumentArray%2A&gt; method to reorder the argument array to its original form.","pos":[562,761],"source":" The `state` parameter keeps track of argument reordering, thus enabling the binder's <xref:System.Reflection.Binder.ReorderArgumentArray%2A> method to reorder the argument array to its original form."},{"content":"The BindToMethod method is used by the &lt;xref:System.Type.InvokeMember%2A?displayProperty=fullName&gt; method.","pos":[768,874],"source":"       The BindToMethod method is used by the <xref:System.Type.InvokeMember%2A?displayProperty=fullName> method."}]},{"pos":[10083,10167],"content":"A bitwise combination of <bpt id=\"p1\">&lt;xref href=\"System.Reflection.BindingFlags\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"A bitwise combination of <xref href=\"System.Reflection.BindingFlags\"></xref> values."},{"pos":[10246,10740],"content":"The set of methods that are candidates for matching. For example, when a <xref href=\"System.Reflection.Binder\"></xref> object is used by &lt;xref:System.Type.InvokeMember%2A?displayProperty=fullName&gt;, this parameter specifies the set of methods that reflection has determined to be possible matches, typically because they have the correct member name. The default implementation provided by &lt;xref:System.Type.DefaultBinder%2A?displayProperty=fullName&gt; changes the order of this array.","needQuote":true,"needEscape":true,"nodes":[{"content":"The set of methods that are candidates for matching.","pos":[0,52]},{"content":"For example, when a <bpt id=\"p1\">&lt;xref href=\"System.Reflection.Binder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object is used by <ph id=\"ph1\">&amp;lt;</ph>xref:System.Type.InvokeMember%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>, this parameter specifies the set of methods that reflection has determined to be possible matches, typically because they have the correct member name.","pos":[53,355],"source":" For example, when a <xref href=\"System.Reflection.Binder\"></xref> object is used by &lt;xref:System.Type.InvokeMember%2A?displayProperty=fullName&gt;, this parameter specifies the set of methods that reflection has determined to be possible matches, typically because they have the correct member name."},{"content":"The default implementation provided by <ph id=\"ph1\">&amp;lt;</ph>xref:System.Type.DefaultBinder%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph> changes the order of this array.","pos":[356,494],"source":" The default implementation provided by &lt;xref:System.Type.DefaultBinder%2A?displayProperty=fullName&gt; changes the order of this array."}]},{"pos":[10803,11158],"content":"The arguments that are passed in. The binder can change the order of the arguments in this array; for example, the default binder changes the order of arguments if the `names` parameter is used to specify an order other than positional order. If a binder implementation coerces argument types, the types and values of the arguments can be changed as well.","needQuote":true,"needEscape":true,"nodes":[{"content":"The arguments that are passed in.","pos":[0,33]},{"content":"The binder can change the order of the arguments in this array; for example, the default binder changes the order of arguments if the <ph id=\"ph1\">`names`</ph> parameter is used to specify an order other than positional order.","pos":[34,242],"source":" The binder can change the order of the arguments in this array; for example, the default binder changes the order of arguments if the `names` parameter is used to specify an order other than positional order."},{"content":"If a binder implementation coerces argument types, the types and values of the arguments can be changed as well.","pos":[243,355]}]},{"pos":[11248,11435],"content":"An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified. The default binder implementation does not use this parameter.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified. The default binder implementation does not use this parameter.","pos":[0,187],"nodes":[{"content":"An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified.","pos":[0,124]},{"content":"The default binder implementation does not use this parameter.","pos":[125,187]}]}]},{"pos":[11519,12269],"content":"An instance of <xref:System.Globalization.CultureInfo> that is used to control the coercion of data types, in binder implementations that coerce types. If `culture` is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, the <xref:System.Globalization.CultureInfo> for the current thread is used.       Note   For example, if a binder implementation allows coercion of string values to numeric types, this parameter is necessary to convert a <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> that represents 1000 to a <xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"></xref> value, because 1000 is represented differently by different cultures. The default binder does not do such string coercions.","needQuote":false,"needEscape":true,"nodes":[{"content":"An instance of &lt;xref:System.Globalization.CultureInfo&gt; that is used to control the coercion of data types, in binder implementations that coerce types.","pos":[0,151],"source":"An instance of <xref:System.Globalization.CultureInfo> that is used to control the coercion of data types, in binder implementations that coerce types."},{"content":"If <ph id=\"ph1\">`culture`</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, the &lt;xref:System.Globalization.CultureInfo&gt; for the current thread is used.","pos":[152,305],"source":" If `culture` is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, the <xref:System.Globalization.CultureInfo> for the current thread is used."},{"content":"Note   For example, if a binder implementation allows coercion of string values to numeric types, this parameter is necessary to convert a <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents 1000 to a <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> value, because 1000 is represented differently by different cultures.","pos":[312,676],"source":"       Note   For example, if a binder implementation allows coercion of string values to numeric types, this parameter is necessary to convert a <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> that represents 1000 to a <xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"></xref> value, because 1000 is represented differently by different cultures."},{"content":"The default binder does not do such string coercions.","pos":[677,730]}]},{"pos":[12334,12619],"content":"The parameter names, if parameter names are to be considered when matching, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if arguments are to be treated as purely positional. For example, parameter names must be used if arguments are not supplied in positional order.","needQuote":true,"needEscape":true,"nodes":[{"content":"The parameter names, if parameter names are to be considered when matching, or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if arguments are to be treated as purely positional.","pos":[0,192],"source":"The parameter names, if parameter names are to be considered when matching, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if arguments are to be treated as purely positional."},{"content":"For example, parameter names must be used if arguments are not supplied in positional order.","pos":[193,285]}]},{"pos":[12681,13401],"content":"After the method returns, `state` contains a binder-provided object that keeps track of argument reordering. The binder creates this object, and the binder is the sole consumer of this object. If `state` is not <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> when <xref uid=\"langword_csharp_BindToMethod\" name=\"BindToMethod\" href=\"\"></xref> returns, you must pass `state` to the <xref:System.Reflection.Binder.ReorderArgumentArray*> method if you want to restore `args` to its original order, for example, so that you can retrieve the values of <xref uid=\"langword_csharp_ref\" name=\"ref\" href=\"\"></xref> parameters (<xref uid=\"langword_csharp_ByRef\" name=\"ByRef\" href=\"\"></xref> parameters in Visual Basic).","needQuote":true,"needEscape":true,"nodes":[{"content":"After the method returns, <ph id=\"ph1\">`state`</ph> contains a binder-provided object that keeps track of argument reordering.","pos":[0,108],"source":"After the method returns, `state` contains a binder-provided object that keeps track of argument reordering."},{"content":"The binder creates this object, and the binder is the sole consumer of this object.","pos":[109,192]},{"content":"If <ph id=\"ph1\">`state`</ph> is not <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> when <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_BindToMethod\" name=\"BindToMethod\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> returns, you must pass <ph id=\"ph2\">`state`</ph> to the &lt;xref:System.Reflection.Binder.ReorderArgumentArray*&gt; method if you want to restore <ph id=\"ph3\">`args`</ph> to its original order, for example, so that you can retrieve the values of <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_ref\" name=\"ref\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> parameters (<bpt id=\"p4\">&lt;xref uid=\"langword_csharp_ByRef\" name=\"ByRef\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept> parameters in Visual Basic).","pos":[193,720],"source":" If `state` is not <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> when <xref uid=\"langword_csharp_BindToMethod\" name=\"BindToMethod\" href=\"\"></xref> returns, you must pass `state` to the <xref:System.Reflection.Binder.ReorderArgumentArray*> method if you want to restore `args` to its original order, for example, so that you can retrieve the values of <xref uid=\"langword_csharp_ref\" name=\"ref\" href=\"\"></xref> parameters (<xref uid=\"langword_csharp_ByRef\" name=\"ByRef\" href=\"\"></xref> parameters in Visual Basic)."}]},{"pos":[13474,13494],"content":"The matching method.","needQuote":true,"needEscape":true,"nodes":[{"content":"The matching method.","pos":[0,20]}]},{"pos":[13688,14008],"content":"For the default binder, <code>match</code> contains multiple methods that are equally good matches for <code>args</code>. For example, <code>args</code> contains a `MyClass` object that implements the `IMyClass` interface, and <code>match</code> contains a method that takes `MyClass` and a method that takes `IMyClass`.","needQuote":true,"needEscape":true,"nodes":[{"content":"For the default binder, <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">match</ph><ept id=\"p1\">&lt;/code&gt;</ept> contains multiple methods that are equally good matches for <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">args</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","pos":[0,121],"source":"For the default binder, <code>match</code> contains multiple methods that are equally good matches for <code>args</code>."},{"content":"For example, <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">args</ph><ept id=\"p1\">&lt;/code&gt;</ept> contains a <ph id=\"ph2\">`MyClass`</ph> object that implements the <ph id=\"ph3\">`IMyClass`</ph> interface, and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph4\">match</ph><ept id=\"p2\">&lt;/code&gt;</ept> contains a method that takes <ph id=\"ph5\">`MyClass`</ph> and a method that takes <ph id=\"ph6\">`IMyClass`</ph>.","pos":[122,320],"source":" For example, <code>args</code> contains a `MyClass` object that implements the `IMyClass` interface, and <code>match</code> contains a method that takes `MyClass` and a method that takes `IMyClass`."}]},{"pos":[14113,14236],"content":"For the default binder, <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">match</ph><ept id=\"p1\">&lt;/code&gt;</ept> contains no methods that can accept the arguments supplied in <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">args</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"For the default binder, <code>match</code> contains no methods that can accept the arguments supplied in <code>args</code>."},{"pos":[14331,14456],"content":"For the default binder, <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">match</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> or an empty array.","needQuote":true,"needEscape":true,"source":"For the default binder, <code>match</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or an empty array."},{"pos":[14975,15144],"content":"Changes the type of the given <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to the given <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Type\" name=\"Type\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Changes the type of the given <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref> to the given <xref uid=\"langword_csharp_Type\" name=\"Type\" href=\"\"></xref>."},{"pos":[15157,16620],"content":"Reflection models the accessibility rules of the common type system. For example, if the caller is in the same assembly, the caller does not need special permissions for internal members. Otherwise, the caller needs <xref:System.Security.Permissions.ReflectionPermission>. This is consistent with lookup of members that are protected, private, and so on.       The general principle is that `ChangeType` should perform only widening coercions, which never lose data. An example of a widening coercion is coercing a value that is a 32-bit signed integer to a value that is a 64-bit signed integer. This is distinguished from a narrowing coercion, which may lose data. An example of a narrowing coercion is coercing a 64-bit signed integer to a 32-bit signed integer.       The following table lists the coercions performed by the default `ChangeType`.      |Source type|Target type|   |-----------------|-----------------|   |Any type|Its base type.|   |Any type|The interface it implements.|   |Char|UInt16, UInt32, Int32, UInt64, Int64, Single, Double|   |Byte|Char, UInt16, Int16, UInt32, Int32, UInt64, Int64, Single, Double|   |SByte|Int16, Int32, Int64, Single, Double|   |UInt16|UInt32, Int32, UInt64, Int64, Single, Double|   |Int16|Int32, Int64, Single, Double|   |UInt32|UInt64, Int64, Single, Double|   |Int32|Int64, Single, Double|   |UInt64|Single, Double|   |Int64|Single, Double|   |Single|Double|   |Non-reference|By-reference.|","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Reflection models the accessibility rules of the common type system.","pos":[0,68]},{"content":"For example, if the caller is in the same assembly, the caller does not need special permissions for internal members.","pos":[69,187]},{"content":"Otherwise, the caller needs &lt;xref:System.Security.Permissions.ReflectionPermission&gt;.","pos":[188,272],"source":" Otherwise, the caller needs <xref:System.Security.Permissions.ReflectionPermission>."},{"content":"This is consistent with lookup of members that are protected, private, and so on.","pos":[273,354]},{"content":"The general principle is that <ph id=\"ph1\">`ChangeType`</ph> should perform only widening coercions, which never lose data.","pos":[361,466],"source":"       The general principle is that `ChangeType` should perform only widening coercions, which never lose data."},{"content":"An example of a widening coercion is coercing a value that is a 32-bit signed integer to a value that is a 64-bit signed integer.","pos":[467,596]},{"content":"This is distinguished from a narrowing coercion, which may lose data.","pos":[597,666]},{"content":"An example of a narrowing coercion is coercing a 64-bit signed integer to a 32-bit signed integer.","pos":[667,765]},{"content":"The following table lists the coercions performed by the default <ph id=\"ph1\">`ChangeType`</ph>.","pos":[772,850],"source":"       The following table lists the coercions performed by the default `ChangeType`."},{"content":"|Source type|Target type|   |-----------------|-----------------|   |Any type|Its base type.|   |Any type|The interface it implements.|   |Char|UInt16, UInt32, Int32, UInt64, Int64, Single, Double|   |Byte|Char, UInt16, Int16, UInt32, Int32, UInt64, Int64, Single, Double|   |SByte|Int16, Int32, Int64, Single, Double|   |UInt16|UInt32, Int32, UInt64, Int64, Single, Double|   |Int16|Int32, Int64, Single, Double|   |UInt32|UInt64, Int64, Single, Double|   |Int32|Int64, Single, Double|   |UInt64|Single, Double|   |Int64|Single, Double|   |Single|Double|   |Non-reference|By-reference.|","pos":[856,1443]}]},{"pos":[16825,16918],"content":"The object to change into a new <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Type\" name=\"Type\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The object to change into a new <xref uid=\"langword_csharp_Type\" name=\"Type\" href=\"\"></xref>."},{"pos":[16977,17071],"content":"The new <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Type\" name=\"Type\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that <ph id=\"ph1\">`value`</ph> will become.","needQuote":true,"needEscape":true,"source":"The new <xref uid=\"langword_csharp_Type\" name=\"Type\" href=\"\"></xref> that `value` will become."},{"pos":[17155,17728],"content":"An instance of <xref:System.Globalization.CultureInfo> that is used to control the coercion of data types. If `culture` is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, the <xref:System.Globalization.CultureInfo> for the current thread is used.       Note   For example, this parameter is necessary to convert a <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> that represents 1000 to a <xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"></xref> value, because 1000 is represented differently by different cultures.","needQuote":false,"needEscape":true,"nodes":[{"content":"An instance of &lt;xref:System.Globalization.CultureInfo&gt; that is used to control the coercion of data types.","pos":[0,106],"source":"An instance of <xref:System.Globalization.CultureInfo> that is used to control the coercion of data types."},{"content":"If <ph id=\"ph1\">`culture`</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, the &lt;xref:System.Globalization.CultureInfo&gt; for the current thread is used.","pos":[107,260],"source":" If `culture` is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, the <xref:System.Globalization.CultureInfo> for the current thread is used."},{"content":"Note   For example, this parameter is necessary to convert a <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents 1000 to a <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> value, because 1000 is represented differently by different cultures.","pos":[267,553],"source":"       Note   For example, this parameter is necessary to convert a <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref> that represents 1000 to a <xref uid=\"langword_csharp_Double\" name=\"Double\" href=\"\"></xref> value, because 1000 is represented differently by different cultures."}]},{"pos":[17787,17843],"content":"An object that contains the given value as the new type.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that contains the given value as the new type.","pos":[0,56]}]},{"pos":[18398,18615],"content":"Upon returning from &lt;xref:System.Reflection.Binder.BindToMethod*&gt;, restores the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">args</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument to what it was when it came from <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_BindToMethod\" name=\"BindToMethod\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Upon returning from <xref:System.Reflection.Binder.BindToMethod*>, restores the <code>args</code> argument to what it was when it came from <xref uid=\"langword_csharp_BindToMethod\" name=\"BindToMethod\" href=\"\"></xref>."},{"pos":[18627,18733],"content":"The common language runtime calls this method if <ph id=\"ph1\">`state`</ph> is not <ph id=\"ph2\">`null`</ph> after a return from <ph id=\"ph3\">`BindToMethod`</ph>.","needQuote":true,"needEscape":true,"extradata":"MT","source":"The common language runtime calls this method if `state` is not `null` after a return from `BindToMethod`."},{"pos":[18912,19011],"content":"The actual arguments that are passed in. Both the types and values of the arguments can be changed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The actual arguments that are passed in. Both the types and values of the arguments can be changed.","pos":[0,99],"nodes":[{"content":"The actual arguments that are passed in.","pos":[0,40]},{"content":"Both the types and values of the arguments can be changed.","pos":[41,99]}]}]},{"pos":[19073,19138],"content":"A binder-provided object that keeps track of argument reordering.","needQuote":true,"needEscape":true,"nodes":[{"content":"A binder-provided object that keeps track of argument reordering.","pos":[0,65]}]},{"pos":[19940,20015],"content":"Selects a method from the given set of methods, based on the argument type.","needQuote":true,"needEscape":true,"nodes":[{"content":"Selects a method from the given set of methods, based on the argument type.","pos":[0,75]}]},{"pos":[20027,20197],"content":"This method should return `null` if no method matches the criteria. This method controls the selection provided by the `GetConstructor` and `GetMethod` methods on `Type`.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method should return <ph id=\"ph1\">`null`</ph> if no method matches the criteria.","pos":[0,67],"source":"This method should return `null` if no method matches the criteria."},{"content":"This method controls the selection provided by the <ph id=\"ph1\">`GetConstructor`</ph> and <ph id=\"ph2\">`GetMethod`</ph> methods on <ph id=\"ph3\">`Type`</ph>.","pos":[68,170],"source":" This method controls the selection provided by the `GetConstructor` and `GetMethod` methods on `Type`."}]},{"pos":[20526,20610],"content":"A bitwise combination of <bpt id=\"p1\">&lt;xref href=\"System.Reflection.BindingFlags\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"A bitwise combination of <xref href=\"System.Reflection.BindingFlags\"></xref> values."},{"pos":[20689,21183],"content":"The set of methods that are candidates for matching. For example, when a <xref href=\"System.Reflection.Binder\"></xref> object is used by &lt;xref:System.Type.InvokeMember%2A?displayProperty=fullName&gt;, this parameter specifies the set of methods that reflection has determined to be possible matches, typically because they have the correct member name. The default implementation provided by &lt;xref:System.Type.DefaultBinder%2A?displayProperty=fullName&gt; changes the order of this array.","needQuote":true,"needEscape":true,"nodes":[{"content":"The set of methods that are candidates for matching.","pos":[0,52]},{"content":"For example, when a <bpt id=\"p1\">&lt;xref href=\"System.Reflection.Binder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object is used by <ph id=\"ph1\">&amp;lt;</ph>xref:System.Type.InvokeMember%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>, this parameter specifies the set of methods that reflection has determined to be possible matches, typically because they have the correct member name.","pos":[53,355],"source":" For example, when a <xref href=\"System.Reflection.Binder\"></xref> object is used by &lt;xref:System.Type.InvokeMember%2A?displayProperty=fullName&gt;, this parameter specifies the set of methods that reflection has determined to be possible matches, typically because they have the correct member name."},{"content":"The default implementation provided by <ph id=\"ph1\">&amp;lt;</ph>xref:System.Type.DefaultBinder%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph> changes the order of this array.","pos":[356,494],"source":" The default implementation provided by &lt;xref:System.Type.DefaultBinder%2A?displayProperty=fullName&gt; changes the order of this array."}]},{"pos":[21245,21298],"content":"The parameter types used to locate a matching method.","needQuote":true,"needEscape":true,"nodes":[{"content":"The parameter types used to locate a matching method.","pos":[0,53]}]},{"pos":[21388,21512],"content":"An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified.","pos":[0,124]}]},{"pos":[21585,21688],"content":"The matching method, if found; otherwise, <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The matching method, if found; otherwise, <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[21882,22288],"content":"For the default binder, <code>match</code> contains multiple methods that are equally good matches for the parameter types described by <code>types</code>. For example, the array in <code>types</code> contains a <xref:System.Type> object for `MyClass` and the array in <code>match</code> contains a method that takes a base class of `MyClass` and a method that takes an interface that `MyClass` implements.","needQuote":true,"needEscape":true,"nodes":[{"content":"For the default binder, <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">match</ph><ept id=\"p1\">&lt;/code&gt;</ept> contains multiple methods that are equally good matches for the parameter types described by <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">types</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","pos":[0,155],"source":"For the default binder, <code>match</code> contains multiple methods that are equally good matches for the parameter types described by <code>types</code>."},{"content":"For example, the array in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">types</ph><ept id=\"p1\">&lt;/code&gt;</ept> contains a &lt;xref:System.Type&gt; object for <ph id=\"ph2\">`MyClass`</ph> and the array in <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">match</ph><ept id=\"p2\">&lt;/code&gt;</ept> contains a method that takes a base class of <ph id=\"ph4\">`MyClass`</ph> and a method that takes an interface that <ph id=\"ph5\">`MyClass`</ph> implements.","pos":[156,406],"source":" For example, the array in <code>types</code> contains a <xref:System.Type> object for `MyClass` and the array in <code>match</code> contains a method that takes a base class of `MyClass` and a method that takes an interface that `MyClass` implements."}]},{"pos":[22384,22703],"content":"For the default binder, <code>match</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or an empty array.       -or-       An element of <code>types</code> derives from <xref:System.Type>, but is not of type <xref uid=\"langword_csharp_RuntimeType\" name=\"RuntimeType\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"For the default binder, <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">match</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> or an empty array.","pos":[0,125],"source":"For the default binder, <code>match</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or an empty array."},{"content":"-or-       An element of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">types</ph><ept id=\"p1\">&lt;/code&gt;</ept> derives from &lt;xref:System.Type&gt;, but is not of type <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_RuntimeType\" name=\"RuntimeType\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[132,303],"source":"       -or-       An element of <code>types</code> derives from <xref:System.Type>, but is not of type <xref uid=\"langword_csharp_RuntimeType\" name=\"RuntimeType\" href=\"\"></xref>."}]},{"pos":[23489,23574],"content":"Selects a property from the given set of properties, based on the specified criteria.","needQuote":true,"needEscape":true,"nodes":[{"content":"Selects a property from the given set of properties, based on the specified criteria.","pos":[0,85]}]},{"pos":[23586,23668],"content":"This method controls the selection provided by the <ph id=\"ph1\">`GetProperty`</ph> method on <ph id=\"ph2\">`Type`</ph>.","needQuote":true,"needEscape":true,"extradata":"MT","source":"This method controls the selection provided by the `GetProperty` method on `Type`."},{"pos":[24022,24106],"content":"A bitwise combination of <bpt id=\"p1\">&lt;xref href=\"System.Reflection.BindingFlags\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"A bitwise combination of <xref href=\"System.Reflection.BindingFlags\"></xref> values."},{"pos":[24187,24687],"content":"The set of properties that are candidates for matching. For example, when a <xref href=\"System.Reflection.Binder\"></xref> object is used by &lt;xref:System.Type.InvokeMember%2A?displayProperty=fullName&gt;, this parameter specifies the set of properties that reflection has determined to be possible matches, typically because they have the correct member name. The default implementation provided by &lt;xref:System.Type.DefaultBinder%2A?displayProperty=fullName&gt; changes the order of this array.","needQuote":true,"needEscape":true,"nodes":[{"content":"The set of properties that are candidates for matching.","pos":[0,55]},{"content":"For example, when a <bpt id=\"p1\">&lt;xref href=\"System.Reflection.Binder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object is used by <ph id=\"ph1\">&amp;lt;</ph>xref:System.Type.InvokeMember%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>, this parameter specifies the set of properties that reflection has determined to be possible matches, typically because they have the correct member name.","pos":[56,361],"source":" For example, when a <xref href=\"System.Reflection.Binder\"></xref> object is used by &lt;xref:System.Type.InvokeMember%2A?displayProperty=fullName&gt;, this parameter specifies the set of properties that reflection has determined to be possible matches, typically because they have the correct member name."},{"content":"The default implementation provided by <ph id=\"ph1\">&amp;lt;</ph>xref:System.Type.DefaultBinder%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph> changes the order of this array.","pos":[362,500],"source":" The default implementation provided by &lt;xref:System.Type.DefaultBinder%2A?displayProperty=fullName&gt; changes the order of this array."}]},{"pos":[24752,24801],"content":"The return value the matching property must have.","needQuote":true,"needEscape":true,"nodes":[{"content":"The return value the matching property must have.","pos":[0,49]}]},{"pos":[24865,24975],"content":"The index types of the property being searched for. Used for index properties such as the indexer for a class.","needQuote":true,"needEscape":true,"nodes":[{"content":"The index types of the property being searched for. Used for index properties such as the indexer for a class.","pos":[0,110],"nodes":[{"content":"The index types of the property being searched for.","pos":[0,51]},{"content":"Used for index properties such as the indexer for a class.","pos":[52,110]}]}]},{"pos":[25065,25189],"content":"An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified.","pos":[0,124]}]},{"pos":[25264,25286],"content":"The matching property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The matching property.","pos":[0,22]}]},{"pos":[25482,25637],"content":"For the default binder, <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">match</ph><ept id=\"p1\">&lt;/code&gt;</ept> contains multiple properties that are equally good matches for <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">returnType</ph><ept id=\"p2\">&lt;/code&gt;</ept> and <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">indexes</ph><ept id=\"p3\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"For the default binder, <code>match</code> contains multiple properties that are equally good matches for <code>returnType</code> and <code>indexes</code>."},{"pos":[25732,25857],"content":"For the default binder, <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">match</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> or an empty array.","needQuote":true,"needEscape":true,"source":"For the default binder, <code>match</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or an empty array."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Reflection.Binder\n  id: Binder\n  children:\n  - System.Reflection.Binder.#ctor\n  - System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)\n  - System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)\n  - System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)\n  - System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)\n  - System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])\n  - System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])\n  langs:\n  - csharp\n  name: Binder\n  nameWithType: Binder\n  fullName: System.Reflection.Binder\n  type: Class\n  summary: Selects a member from a list of candidates, and performs type conversion from actual argument type to formal argument type.\n  remarks: \"Implementations of the Binder class are used by methods such as <xref:System.Type.InvokeMember%2A?displayProperty=fullName>, which selects from a set of possible members to execute, based on a set of parameter types and argument values; <xref:System.Type.GetMethod%2A?displayProperty=fullName>, which selects a method based on parameter types; and so on.  \\n  \\n A default implementation of the Binder class is provided by the <xref:System.Type.DefaultBinder%2A?displayProperty=fullName> property.\"\n  example:\n  - \"The following example implements and demonstrates all members of the `Binder` class. The private method `CanConvertFrom` finds compatible types for a given type.  \\n  \\n [!code-cpp[Binder_1#1](~/add/codesnippet/cpp/t-system.reflection.binder_1.cpp)]\\n [!code-vb[Binder_1#1](~/add/codesnippet/visualbasic/t-system.reflection.binder_1.vb)]\\n [!code-cs[Binder_1#1](~/add/codesnippet/csharp/t-system.reflection.binder_1.cs)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDual)]\n\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public abstract class Binder\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Reflection.Binder.#ctor\n  id: '#ctor'\n  parent: System.Reflection.Binder\n  langs:\n  - csharp\n  name: Binder()\n  nameWithType: Binder.Binder()\n  fullName: System.Reflection.Binder.Binder()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: Initializes a new instance of the <xref href=\"System.Reflection.Binder\"></xref> class.\n  remarks: This constructor is called by the constructors of derived classes, to initialize state in this type.\n  syntax:\n    content: protected Binder ();\n    parameters: []\n  overload: System.Reflection.Binder.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)\n  id: BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)\n  parent: System.Reflection.Binder\n  langs:\n  - csharp\n  name: BindToField(BindingFlags,FieldInfo[],Object,CultureInfo)\n  nameWithType: Binder.BindToField(BindingFlags,FieldInfo[],Object,CultureInfo)\n  fullName: System.Reflection.Binder.BindToField(BindingFlags,FieldInfo[],Object,CultureInfo)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: Selects a field from the given set of fields, based on the specified criteria.\n  remarks: \"If `bindingAttr` does not include <xref:System.Reflection.BindingFlags?displayProperty=fullName>, the default binder implementation provided by <xref:System.Type.DefaultBinder%2A?displayProperty=fullName> simply returns the first element of `match`. No selection is done.  \\n  \\n This method controls the binding provided by <xref:System.Type.InvokeMember%2A?displayProperty=fullName>.\"\n  syntax:\n    content: public abstract System.Reflection.FieldInfo BindToField (System.Reflection.BindingFlags bindingAttr, System.Reflection.FieldInfo[] match, object value, System.Globalization.CultureInfo culture);\n    parameters:\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: A bitwise combination of <xref href=\"System.Reflection.BindingFlags\"></xref> values.\n    - id: match\n      type: System.Reflection.FieldInfo[]\n      description: The set of fields that are candidates for matching. For example, when a <xref href=\"System.Reflection.Binder\"></xref> object is used by &lt;xref:System.Type.InvokeMember%2A?displayProperty=fullName&gt;, this parameter specifies the set of fields that reflection has determined to be possible matches, typically because they have the correct member name. The default implementation provided by &lt;xref:System.Type.DefaultBinder%2A?displayProperty=fullName&gt; changes the order of this array.\n    - id: value\n      type: System.Object\n      description: The field value used to locate a matching field.\n    - id: culture\n      type: System.Globalization.CultureInfo\n      description: \"An instance of <xref:System.Globalization.CultureInfo> that is used to control the coercion of data types, in binder implementations that coerce types. If `culture` is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>, the <xref:System.Globalization.CultureInfo> for the current thread is used.  \\n  \\n Note   For example, if a binder implementation allows coercion of string values to numeric types, this parameter is necessary to convert a <xref uid=\\\"langword_csharp_String\\\" name=\\\"String\\\" href=\\\"\\\"></xref> that represents 1000 to a <xref uid=\\\"langword_csharp_Double\\\" name=\\\"Double\\\" href=\\\"\\\"></xref> value, because 1000 is represented differently by different cultures. The default binder does not do such string coercions.\"\n    return:\n      type: System.Reflection.FieldInfo\n      description: The matching field.\n  overload: System.Reflection.Binder.BindToField*\n  exceptions:\n  - type: System.Reflection.AmbiguousMatchException\n    commentId: T:System.Reflection.AmbiguousMatchException\n    description: For the default binder, <code>bindingAttr</code> includes <xref href=\"System.Reflection.BindingFlags\"></xref>, and <code>match</code> contains multiple fields that are equally good matches for <code>value</code>. For example, <code>value</code> contains a `MyClass` object that implements the `IMyClass` interface, and <code>match</code> contains a field of type `MyClass` and a field of type `IMyClass`.\n  - type: System.MissingFieldException\n    commentId: T:System.MissingFieldException\n    description: For the default binder, <code>bindingAttr</code> includes <xref href=\"System.Reflection.BindingFlags\"></xref>, and <code>match</code> contains no fields that can accept <code>value</code>.\n  - type: System.NullReferenceException\n    commentId: T:System.NullReferenceException\n    description: \"For the default binder, <code>bindingAttr</code> includes <xref href=\\\"System.Reflection.BindingFlags\\\"></xref>, and <code>match</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref> or an empty array.  \\n  \\n -or-  \\n  \\n <code>bindingAttr</code> includes <xref href=\\\"System.Reflection.BindingFlags\\\"></xref>, and <code>value</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  platform:\n  - net462\n- uid: System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)\n  id: BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)\n  parent: System.Reflection.Binder\n  langs:\n  - csharp\n  name: BindToMethod(BindingFlags,MethodBase[],Object[],ParameterModifier[],CultureInfo,String[],Object)\n  nameWithType: Binder.BindToMethod(BindingFlags,MethodBase[],Object[],ParameterModifier[],CultureInfo,String[],Object)\n  fullName: System.Reflection.Binder.BindToMethod(BindingFlags,MethodBase[],Object[],ParameterModifier[],CultureInfo,String[],Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: Selects a method to invoke from the given set of methods, based on the supplied arguments.\n  remarks: \"The default binder takes into account both parameters that have values and `params` arrays (`ParamArray` arrays in Visual Basic). Thus, it is possible to find a match in cases where `args` and `match` do not contain the same number of elements.  \\n  \\n The binder enables a client to map the array of arguments back to its original form if the argument array has been manipulated by BindToMethod. Use this remap capability to get back by-reference arguments when such arguments are present. When you pass arguments by name, the binder reorders the argument array. The `state` parameter keeps track of argument reordering, thus enabling the binder's <xref:System.Reflection.Binder.ReorderArgumentArray%2A> method to reorder the argument array to its original form.  \\n  \\n The BindToMethod method is used by the <xref:System.Type.InvokeMember%2A?displayProperty=fullName> method.\"\n  syntax:\n    content: public abstract System.Reflection.MethodBase BindToMethod (System.Reflection.BindingFlags bindingAttr, System.Reflection.MethodBase[] match, ref object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] names, out object state);\n    parameters:\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: A bitwise combination of <xref href=\"System.Reflection.BindingFlags\"></xref> values.\n    - id: match\n      type: System.Reflection.MethodBase[]\n      description: The set of methods that are candidates for matching. For example, when a <xref href=\"System.Reflection.Binder\"></xref> object is used by &lt;xref:System.Type.InvokeMember%2A?displayProperty=fullName&gt;, this parameter specifies the set of methods that reflection has determined to be possible matches, typically because they have the correct member name. The default implementation provided by &lt;xref:System.Type.DefaultBinder%2A?displayProperty=fullName&gt; changes the order of this array.\n    - id: args\n      type: System.Object[]\n      description: The arguments that are passed in. The binder can change the order of the arguments in this array; for example, the default binder changes the order of arguments if the `names` parameter is used to specify an order other than positional order. If a binder implementation coerces argument types, the types and values of the arguments can be changed as well.\n    - id: modifiers\n      type: System.Reflection.ParameterModifier[]\n      description: An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified. The default binder implementation does not use this parameter.\n    - id: culture\n      type: System.Globalization.CultureInfo\n      description: \"An instance of <xref:System.Globalization.CultureInfo> that is used to control the coercion of data types, in binder implementations that coerce types. If `culture` is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>, the <xref:System.Globalization.CultureInfo> for the current thread is used.  \\n  \\n Note   For example, if a binder implementation allows coercion of string values to numeric types, this parameter is necessary to convert a <xref uid=\\\"langword_csharp_String\\\" name=\\\"String\\\" href=\\\"\\\"></xref> that represents 1000 to a <xref uid=\\\"langword_csharp_Double\\\" name=\\\"Double\\\" href=\\\"\\\"></xref> value, because 1000 is represented differently by different cultures. The default binder does not do such string coercions.\"\n    - id: names\n      type: System.String[]\n      description: The parameter names, if parameter names are to be considered when matching, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if arguments are to be treated as purely positional. For example, parameter names must be used if arguments are not supplied in positional order.\n    - id: state\n      type: System.Object\n      description: After the method returns, `state` contains a binder-provided object that keeps track of argument reordering. The binder creates this object, and the binder is the sole consumer of this object. If `state` is not <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> when <xref uid=\"langword_csharp_BindToMethod\" name=\"BindToMethod\" href=\"\"></xref> returns, you must pass `state` to the <xref:System.Reflection.Binder.ReorderArgumentArray*> method if you want to restore `args` to its original order, for example, so that you can retrieve the values of <xref uid=\"langword_csharp_ref\" name=\"ref\" href=\"\"></xref> parameters (<xref uid=\"langword_csharp_ByRef\" name=\"ByRef\" href=\"\"></xref> parameters in Visual Basic).\n    return:\n      type: System.Reflection.MethodBase\n      description: The matching method.\n  overload: System.Reflection.Binder.BindToMethod*\n  exceptions:\n  - type: System.Reflection.AmbiguousMatchException\n    commentId: T:System.Reflection.AmbiguousMatchException\n    description: For the default binder, <code>match</code> contains multiple methods that are equally good matches for <code>args</code>. For example, <code>args</code> contains a `MyClass` object that implements the `IMyClass` interface, and <code>match</code> contains a method that takes `MyClass` and a method that takes `IMyClass`.\n  - type: System.MissingMethodException\n    commentId: T:System.MissingMethodException\n    description: For the default binder, <code>match</code> contains no methods that can accept the arguments supplied in <code>args</code>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: For the default binder, <code>match</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or an empty array.\n  platform:\n  - net462\n- uid: System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)\n  id: ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)\n  parent: System.Reflection.Binder\n  langs:\n  - csharp\n  name: ChangeType(Object,Type,CultureInfo)\n  nameWithType: Binder.ChangeType(Object,Type,CultureInfo)\n  fullName: System.Reflection.Binder.ChangeType(Object,Type,CultureInfo)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: Changes the type of the given <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref> to the given <xref uid=\"langword_csharp_Type\" name=\"Type\" href=\"\"></xref>.\n  remarks: \"Reflection models the accessibility rules of the common type system. For example, if the caller is in the same assembly, the caller does not need special permissions for internal members. Otherwise, the caller needs <xref:System.Security.Permissions.ReflectionPermission>. This is consistent with lookup of members that are protected, private, and so on.  \\n  \\n The general principle is that `ChangeType` should perform only widening coercions, which never lose data. An example of a widening coercion is coercing a value that is a 32-bit signed integer to a value that is a 64-bit signed integer. This is distinguished from a narrowing coercion, which may lose data. An example of a narrowing coercion is coercing a 64-bit signed integer to a 32-bit signed integer.  \\n  \\n The following table lists the coercions performed by the default `ChangeType`.  \\n  \\n|Source type|Target type|  \\n|-----------------|-----------------|  \\n|Any type|Its base type.|  \\n|Any type|The interface it implements.|  \\n|Char|UInt16, UInt32, Int32, UInt64, Int64, Single, Double|  \\n|Byte|Char, UInt16, Int16, UInt32, Int32, UInt64, Int64, Single, Double|  \\n|SByte|Int16, Int32, Int64, Single, Double|  \\n|UInt16|UInt32, Int32, UInt64, Int64, Single, Double|  \\n|Int16|Int32, Int64, Single, Double|  \\n|UInt32|UInt64, Int64, Single, Double|  \\n|Int32|Int64, Single, Double|  \\n|UInt64|Single, Double|  \\n|Int64|Single, Double|  \\n|Single|Double|  \\n|Non-reference|By-reference.|\"\n  syntax:\n    content: public abstract object ChangeType (object value, Type type, System.Globalization.CultureInfo culture);\n    parameters:\n    - id: value\n      type: System.Object\n      description: The object to change into a new <xref uid=\"langword_csharp_Type\" name=\"Type\" href=\"\"></xref>.\n    - id: type\n      type: System.Type\n      description: The new <xref uid=\"langword_csharp_Type\" name=\"Type\" href=\"\"></xref> that `value` will become.\n    - id: culture\n      type: System.Globalization.CultureInfo\n      description: \"An instance of <xref:System.Globalization.CultureInfo> that is used to control the coercion of data types. If `culture` is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>, the <xref:System.Globalization.CultureInfo> for the current thread is used.  \\n  \\n Note   For example, this parameter is necessary to convert a <xref uid=\\\"langword_csharp_String\\\" name=\\\"String\\\" href=\\\"\\\"></xref> that represents 1000 to a <xref uid=\\\"langword_csharp_Double\\\" name=\\\"Double\\\" href=\\\"\\\"></xref> value, because 1000 is represented differently by different cultures.\"\n    return:\n      type: System.Object\n      description: An object that contains the given value as the new type.\n  overload: System.Reflection.Binder.ChangeType*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)\n  id: ReorderArgumentArray(System.Object[]@,System.Object)\n  parent: System.Reflection.Binder\n  langs:\n  - csharp\n  name: ReorderArgumentArray(Object[],Object)\n  nameWithType: Binder.ReorderArgumentArray(Object[],Object)\n  fullName: System.Reflection.Binder.ReorderArgumentArray(Object[],Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: Upon returning from <xref:System.Reflection.Binder.BindToMethod*>, restores the <code>args</code> argument to what it was when it came from <xref uid=\"langword_csharp_BindToMethod\" name=\"BindToMethod\" href=\"\"></xref>.\n  remarks: The common language runtime calls this method if `state` is not `null` after a return from `BindToMethod`.\n  syntax:\n    content: public abstract void ReorderArgumentArray (ref object[] args, object state);\n    parameters:\n    - id: args\n      type: System.Object[]\n      description: The actual arguments that are passed in. Both the types and values of the arguments can be changed.\n    - id: state\n      type: System.Object\n      description: A binder-provided object that keeps track of argument reordering.\n  overload: System.Reflection.Binder.ReorderArgumentArray*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])\n  id: SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])\n  parent: System.Reflection.Binder\n  langs:\n  - csharp\n  name: SelectMethod(BindingFlags,MethodBase[],Type[],ParameterModifier[])\n  nameWithType: Binder.SelectMethod(BindingFlags,MethodBase[],Type[],ParameterModifier[])\n  fullName: System.Reflection.Binder.SelectMethod(BindingFlags,MethodBase[],Type[],ParameterModifier[])\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: Selects a method from the given set of methods, based on the argument type.\n  remarks: This method should return `null` if no method matches the criteria. This method controls the selection provided by the `GetConstructor` and `GetMethod` methods on `Type`.\n  syntax:\n    content: public abstract System.Reflection.MethodBase SelectMethod (System.Reflection.BindingFlags bindingAttr, System.Reflection.MethodBase[] match, Type[] types, System.Reflection.ParameterModifier[] modifiers);\n    parameters:\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: A bitwise combination of <xref href=\"System.Reflection.BindingFlags\"></xref> values.\n    - id: match\n      type: System.Reflection.MethodBase[]\n      description: The set of methods that are candidates for matching. For example, when a <xref href=\"System.Reflection.Binder\"></xref> object is used by &lt;xref:System.Type.InvokeMember%2A?displayProperty=fullName&gt;, this parameter specifies the set of methods that reflection has determined to be possible matches, typically because they have the correct member name. The default implementation provided by &lt;xref:System.Type.DefaultBinder%2A?displayProperty=fullName&gt; changes the order of this array.\n    - id: types\n      type: System.Type[]\n      description: The parameter types used to locate a matching method.\n    - id: modifiers\n      type: System.Reflection.ParameterModifier[]\n      description: An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified.\n    return:\n      type: System.Reflection.MethodBase\n      description: The matching method, if found; otherwise, <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Reflection.Binder.SelectMethod*\n  exceptions:\n  - type: System.Reflection.AmbiguousMatchException\n    commentId: T:System.Reflection.AmbiguousMatchException\n    description: For the default binder, <code>match</code> contains multiple methods that are equally good matches for the parameter types described by <code>types</code>. For example, the array in <code>types</code> contains a <xref:System.Type> object for `MyClass` and the array in <code>match</code> contains a method that takes a base class of `MyClass` and a method that takes an interface that `MyClass` implements.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"For the default binder, <code>match</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref> or an empty array.  \\n  \\n -or-  \\n  \\n An element of <code>types</code> derives from <xref:System.Type>, but is not of type <xref uid=\\\"langword_csharp_RuntimeType\\\" name=\\\"RuntimeType\\\" href=\\\"\\\"></xref>.\"\n  platform:\n  - net462\n- uid: System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])\n  id: SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])\n  parent: System.Reflection.Binder\n  langs:\n  - csharp\n  name: SelectProperty(BindingFlags,PropertyInfo[],Type,Type[],ParameterModifier[])\n  nameWithType: Binder.SelectProperty(BindingFlags,PropertyInfo[],Type,Type[],ParameterModifier[])\n  fullName: System.Reflection.Binder.SelectProperty(BindingFlags,PropertyInfo[],Type,Type[],ParameterModifier[])\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: Selects a property from the given set of properties, based on the specified criteria.\n  remarks: This method controls the selection provided by the `GetProperty` method on `Type`.\n  syntax:\n    content: public abstract System.Reflection.PropertyInfo SelectProperty (System.Reflection.BindingFlags bindingAttr, System.Reflection.PropertyInfo[] match, Type returnType, Type[] indexes, System.Reflection.ParameterModifier[] modifiers);\n    parameters:\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: A bitwise combination of <xref href=\"System.Reflection.BindingFlags\"></xref> values.\n    - id: match\n      type: System.Reflection.PropertyInfo[]\n      description: The set of properties that are candidates for matching. For example, when a <xref href=\"System.Reflection.Binder\"></xref> object is used by &lt;xref:System.Type.InvokeMember%2A?displayProperty=fullName&gt;, this parameter specifies the set of properties that reflection has determined to be possible matches, typically because they have the correct member name. The default implementation provided by &lt;xref:System.Type.DefaultBinder%2A?displayProperty=fullName&gt; changes the order of this array.\n    - id: returnType\n      type: System.Type\n      description: The return value the matching property must have.\n    - id: indexes\n      type: System.Type[]\n      description: The index types of the property being searched for. Used for index properties such as the indexer for a class.\n    - id: modifiers\n      type: System.Reflection.ParameterModifier[]\n      description: An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified.\n    return:\n      type: System.Reflection.PropertyInfo\n      description: The matching property.\n  overload: System.Reflection.Binder.SelectProperty*\n  exceptions:\n  - type: System.Reflection.AmbiguousMatchException\n    commentId: T:System.Reflection.AmbiguousMatchException\n    description: For the default binder, <code>match</code> contains multiple properties that are equally good matches for <code>returnType</code> and <code>indexes</code>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: For the default binder, <code>match</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or an empty array.\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Reflection.AmbiguousMatchException\n  isExternal: true\n  name: System.Reflection.AmbiguousMatchException\n- uid: System.MissingFieldException\n  isExternal: true\n  name: System.MissingFieldException\n- uid: System.NullReferenceException\n  isExternal: true\n  name: System.NullReferenceException\n- uid: System.MissingMethodException\n  isExternal: true\n  name: System.MissingMethodException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.Reflection.Binder.#ctor\n  parent: System.Reflection.Binder\n  isExternal: false\n  name: Binder()\n  nameWithType: Binder.Binder()\n  fullName: System.Reflection.Binder.Binder()\n- uid: System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)\n  parent: System.Reflection.Binder\n  isExternal: false\n  name: BindToField(BindingFlags,FieldInfo[],Object,CultureInfo)\n  nameWithType: Binder.BindToField(BindingFlags,FieldInfo[],Object,CultureInfo)\n  fullName: System.Reflection.Binder.BindToField(BindingFlags,FieldInfo[],Object,CultureInfo)\n- uid: System.Reflection.FieldInfo\n  parent: System.Reflection\n  isExternal: true\n  name: FieldInfo\n  nameWithType: FieldInfo\n  fullName: System.Reflection.FieldInfo\n- uid: System.Reflection.BindingFlags\n  parent: System.Reflection\n  isExternal: false\n  name: BindingFlags\n  nameWithType: BindingFlags\n  fullName: System.Reflection.BindingFlags\n- uid: System.Reflection.FieldInfo[]\n  parent: System.Reflection\n  isExternal: true\n  name: FieldInfo\n  nameWithType: FieldInfo\n  fullName: System.Reflection.FieldInfo[]\n  spec.csharp:\n  - uid: System.Reflection.FieldInfo\n    name: FieldInfo\n    nameWithType: FieldInfo\n    fullName: FieldInfo[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Globalization.CultureInfo\n  parent: System.Globalization\n  isExternal: true\n  name: CultureInfo\n  nameWithType: CultureInfo\n  fullName: System.Globalization.CultureInfo\n- uid: System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)\n  parent: System.Reflection.Binder\n  isExternal: false\n  name: BindToMethod(BindingFlags,MethodBase[],Object[],ParameterModifier[],CultureInfo,String[],Object)\n  nameWithType: Binder.BindToMethod(BindingFlags,MethodBase[],Object[],ParameterModifier[],CultureInfo,String[],Object)\n  fullName: System.Reflection.Binder.BindToMethod(BindingFlags,MethodBase[],Object[],ParameterModifier[],CultureInfo,String[],Object)\n- uid: System.Reflection.MethodBase\n  parent: System.Reflection\n  isExternal: true\n  name: MethodBase\n  nameWithType: MethodBase\n  fullName: System.Reflection.MethodBase\n- uid: System.Reflection.MethodBase[]\n  parent: System.Reflection\n  isExternal: true\n  name: MethodBase\n  nameWithType: MethodBase\n  fullName: System.Reflection.MethodBase[]\n  spec.csharp:\n  - uid: System.Reflection.MethodBase\n    name: MethodBase\n    nameWithType: MethodBase\n    fullName: MethodBase[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Object[]\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object[]\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: Object[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.ParameterModifier[]\n  parent: System.Reflection\n  isExternal: false\n  name: ParameterModifier\n  nameWithType: ParameterModifier\n  fullName: System.Reflection.ParameterModifier[]\n  spec.csharp:\n  - uid: System.Reflection.ParameterModifier\n    name: ParameterModifier\n    nameWithType: ParameterModifier\n    fullName: ParameterModifier[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.String[]\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String[]\n  spec.csharp:\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: String[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)\n  parent: System.Reflection.Binder\n  isExternal: false\n  name: ChangeType(Object,Type,CultureInfo)\n  nameWithType: Binder.ChangeType(Object,Type,CultureInfo)\n  fullName: System.Reflection.Binder.ChangeType(Object,Type,CultureInfo)\n- uid: System.Type\n  parent: System\n  isExternal: true\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)\n  parent: System.Reflection.Binder\n  isExternal: false\n  name: ReorderArgumentArray(Object[],Object)\n  nameWithType: Binder.ReorderArgumentArray(Object[],Object)\n  fullName: System.Reflection.Binder.ReorderArgumentArray(Object[],Object)\n- uid: System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])\n  parent: System.Reflection.Binder\n  isExternal: false\n  name: SelectMethod(BindingFlags,MethodBase[],Type[],ParameterModifier[])\n  nameWithType: Binder.SelectMethod(BindingFlags,MethodBase[],Type[],ParameterModifier[])\n  fullName: System.Reflection.Binder.SelectMethod(BindingFlags,MethodBase[],Type[],ParameterModifier[])\n- uid: System.Type[]\n  parent: System\n  isExternal: true\n  name: Type\n  nameWithType: Type\n  fullName: System.Type[]\n  spec.csharp:\n  - uid: System.Type\n    name: Type\n    nameWithType: Type\n    fullName: Type[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])\n  parent: System.Reflection.Binder\n  isExternal: false\n  name: SelectProperty(BindingFlags,PropertyInfo[],Type,Type[],ParameterModifier[])\n  nameWithType: Binder.SelectProperty(BindingFlags,PropertyInfo[],Type,Type[],ParameterModifier[])\n  fullName: System.Reflection.Binder.SelectProperty(BindingFlags,PropertyInfo[],Type,Type[],ParameterModifier[])\n- uid: System.Reflection.PropertyInfo\n  parent: System.Reflection\n  isExternal: true\n  name: PropertyInfo\n  nameWithType: PropertyInfo\n  fullName: System.Reflection.PropertyInfo\n- uid: System.Reflection.PropertyInfo[]\n  parent: System.Reflection\n  isExternal: true\n  name: PropertyInfo\n  nameWithType: PropertyInfo\n  fullName: System.Reflection.PropertyInfo[]\n  spec.csharp:\n  - uid: System.Reflection.PropertyInfo\n    name: PropertyInfo\n    nameWithType: PropertyInfo\n    fullName: PropertyInfo[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.Binder.#ctor*\n  parent: System.Reflection.Binder\n  isExternal: false\n  name: Binder\n  nameWithType: Binder.Binder\n- uid: System.Reflection.Binder.BindToField*\n  parent: System.Reflection.Binder\n  isExternal: false\n  name: BindToField\n  nameWithType: Binder.BindToField\n- uid: System.Reflection.Binder.BindToMethod*\n  parent: System.Reflection.Binder\n  isExternal: false\n  name: BindToMethod\n  nameWithType: Binder.BindToMethod\n- uid: System.Reflection.Binder.ChangeType*\n  parent: System.Reflection.Binder\n  isExternal: false\n  name: ChangeType\n  nameWithType: Binder.ChangeType\n- uid: System.Reflection.Binder.ReorderArgumentArray*\n  parent: System.Reflection.Binder\n  isExternal: false\n  name: ReorderArgumentArray\n  nameWithType: Binder.ReorderArgumentArray\n- uid: System.Reflection.Binder.SelectMethod*\n  parent: System.Reflection.Binder\n  isExternal: false\n  name: SelectMethod\n  nameWithType: Binder.SelectMethod\n- uid: System.Reflection.Binder.SelectProperty*\n  parent: System.Reflection.Binder\n  isExternal: false\n  name: SelectProperty\n  nameWithType: Binder.SelectProperty\n"}