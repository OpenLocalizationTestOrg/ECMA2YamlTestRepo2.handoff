{"nodes":[{"pos":[762,868],"content":"Provides methods that a derived task handler class can implement in order to process an asynchronous task.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides methods that a derived task handler class can implement in order to process an asynchronous task.","pos":[0,106]}]},{"pos":[880,1303],"content":"TheHttpTaskAsyncHandler class provides a simplified way to handle asynchronous tasks without having to implement the <xref:System.Web.IHttpAsyncHandler.BeginProcessRequest%2A> and <xref:System.Web.IHttpAsyncHandler.EndProcessRequest%2A> methods.  To create a handler for an asynchronous task, you can override the <xref:System.Web.HttpTaskAsyncHandler.ProcessRequestAsync%2A> method and implement custom task handling code.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"TheHttpTaskAsyncHandler class provides a simplified way to handle asynchronous tasks without having to implement the <xref:System.Web.IHttpAsyncHandler.BeginProcessRequest%2A> and <xref:System.Web.IHttpAsyncHandler.EndProcessRequest%2A> methods.  To create a handler for an asynchronous task, you can override the <xref:System.Web.HttpTaskAsyncHandler.ProcessRequestAsync%2A> method and implement custom task handling code.","pos":[0,423],"nodes":[{"content":"TheHttpTaskAsyncHandler class provides a simplified way to handle asynchronous tasks without having to implement the &lt;xref:System.Web.IHttpAsyncHandler.BeginProcessRequest%2A&gt; and &lt;xref:System.Web.IHttpAsyncHandler.EndProcessRequest%2A&gt; methods.","pos":[0,245],"source":"TheHttpTaskAsyncHandler class provides a simplified way to handle asynchronous tasks without having to implement the <xref:System.Web.IHttpAsyncHandler.BeginProcessRequest%2A> and <xref:System.Web.IHttpAsyncHandler.EndProcessRequest%2A> methods."},{"content":"To create a handler for an asynchronous task, you can override the &lt;xref:System.Web.HttpTaskAsyncHandler.ProcessRequestAsync%2A&gt; method and implement custom task handling code.","pos":[247,423],"source":"  To create a handler for an asynchronous task, you can override the <xref:System.Web.HttpTaskAsyncHandler.ProcessRequestAsync%2A> method and implement custom task handling code."}]}]},{"pos":[1892,2013],"content":"Called from constructors in derived classes to initialize the <bpt id=\"p1\">&lt;xref href=\"System.Web.HttpTaskAsyncHandler\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Called from constructors in derived classes to initialize the <xref href=\"System.Web.HttpTaskAsyncHandler\"></xref> class."},{"pos":[2514,2662],"content":"When overridden in a derived class, gets a value that indicates whether the task handler class instance can be reused for another asynchronous task.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, gets a value that indicates whether the task handler class instance can be reused for another asynchronous task.","pos":[0,148]}]},{"pos":[2784,3029],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the handler can be reused; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.  The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the handler can be reused; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,165],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the handler can be reused; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[167,245],"source":"  The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[3563,3645],"content":"When overridden in a derived class, provides code that handles a synchronous task.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, provides code that handles a synchronous task.","pos":[0,82]}]},{"pos":[3826,3843],"content":"The HTTP context.","needQuote":true,"needEscape":true,"nodes":[{"content":"The HTTP context.","pos":[0,17]}]},{"pos":[4020,4110],"content":"The method is implemented but does not provide any default handling for synchronous tasks.","needQuote":true,"needEscape":true,"nodes":[{"content":"The method is implemented but does not provide any default handling for synchronous tasks.","pos":[0,90]}]},{"pos":[4596,4680],"content":"When overridden in a derived class, provides code that handles an asynchronous task.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, provides code that handles an asynchronous task.","pos":[0,84]}]},{"pos":[4692,4785],"content":"To create a custom handler for an asynchronous task, override the ProcessRequestAsync method.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"To create a custom handler for an asynchronous task, override the ProcessRequestAsync method.","pos":[0,93]}]},{"pos":[4995,5012],"content":"The HTTP context.","needQuote":true,"needEscape":true,"nodes":[{"content":"The HTTP context.","pos":[0,17]}]},{"pos":[5084,5106],"content":"The asynchronous task.","needQuote":true,"needEscape":true,"nodes":[{"content":"The asynchronous task.","pos":[0,22]}]},{"pos":[5966,6034],"content":"Initiates asynchronous processing of a task in an HTTP task handler.","needQuote":true,"needEscape":true,"nodes":[{"content":"Initiates asynchronous processing of a task in an HTTP task handler.","pos":[0,68]}]},{"pos":[6046,6243],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Web.HttpTaskAsyncHandler> instance is cast to an <xref:System.Web.IHttpAsyncHandler> interface.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Web.HttpTaskAsyncHandler> instance is cast to an <xref:System.Web.IHttpAsyncHandler> interface.","pos":[0,197],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the &lt;xref:System.Web.HttpTaskAsyncHandler&gt; instance is cast to an &lt;xref:System.Web.IHttpAsyncHandler&gt; interface.","pos":[60,197],"source":" It can be used only when the <xref:System.Web.HttpTaskAsyncHandler> instance is cast to an <xref:System.Web.IHttpAsyncHandler> interface."}]}]},{"pos":[6476,6493],"content":"The HTTP context.","needQuote":true,"needEscape":true,"nodes":[{"content":"The HTTP context.","pos":[0,17]}]},{"pos":[6559,6613],"content":"The callback method to invoke when the method returns.","needQuote":true,"needEscape":true,"nodes":[{"content":"The callback method to invoke when the method returns.","pos":[0,54]}]},{"pos":[6679,6719],"content":"Additional data for processing the task.","needQuote":true,"needEscape":true,"nodes":[{"content":"Additional data for processing the task.","pos":[0,40]}]},{"pos":[6783,6852],"content":"An object that contains status data about the asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that contains status data about the asynchronous operation.","pos":[0,69]}]},{"pos":[7595,7658],"content":"Ends asynchronous processing of a task in an HTTP task handler.","needQuote":true,"needEscape":true,"nodes":[{"content":"Ends asynchronous processing of a task in an HTTP task handler.","pos":[0,63]}]},{"pos":[7670,7867],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Web.HttpTaskAsyncHandler> instance is cast to an <xref:System.Web.IHttpAsyncHandler> interface.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Web.HttpTaskAsyncHandler> instance is cast to an <xref:System.Web.IHttpAsyncHandler> interface.","pos":[0,197],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the &lt;xref:System.Web.HttpTaskAsyncHandler&gt; instance is cast to an &lt;xref:System.Web.IHttpAsyncHandler&gt; interface.","pos":[60,197],"source":" It can be used only when the <xref:System.Web.HttpTaskAsyncHandler> instance is cast to an <xref:System.Web.IHttpAsyncHandler> interface."}]}]},{"pos":[8039,8080],"content":"The status of the asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The status of the asynchronous operation.","pos":[0,41]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.HttpTaskAsyncHandler\n  id: HttpTaskAsyncHandler\n  children:\n  - System.Web.HttpTaskAsyncHandler.#ctor\n  - System.Web.HttpTaskAsyncHandler.IsReusable\n  - System.Web.HttpTaskAsyncHandler.ProcessRequest(System.Web.HttpContext)\n  - System.Web.HttpTaskAsyncHandler.ProcessRequestAsync(System.Web.HttpContext)\n  - System.Web.HttpTaskAsyncHandler.System#Web#IHttpAsyncHandler#BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)\n  - System.Web.HttpTaskAsyncHandler.System#Web#IHttpAsyncHandler#EndProcessRequest(System.IAsyncResult)\n  langs:\n  - csharp\n  name: HttpTaskAsyncHandler\n  nameWithType: HttpTaskAsyncHandler\n  fullName: System.Web.HttpTaskAsyncHandler\n  type: Class\n  summary: Provides methods that a derived task handler class can implement in order to process an asynchronous task.\n  remarks: TheHttpTaskAsyncHandler class provides a simplified way to handle asynchronous tasks without having to implement the <xref:System.Web.IHttpAsyncHandler.BeginProcessRequest%2A> and <xref:System.Web.IHttpAsyncHandler.EndProcessRequest%2A> methods.  To create a handler for an asynchronous task, you can override the <xref:System.Web.HttpTaskAsyncHandler.ProcessRequestAsync%2A> method and implement custom task handling code.\n  syntax:\n    content: 'public abstract class HttpTaskAsyncHandler : System.Web.IHttpAsyncHandler'\n  inheritance:\n  - System.Object\n  implements:\n  - System.Web.IHttpAsyncHandler\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Web.HttpTaskAsyncHandler.#ctor\n  id: '#ctor'\n  parent: System.Web.HttpTaskAsyncHandler\n  langs:\n  - csharp\n  name: HttpTaskAsyncHandler()\n  nameWithType: HttpTaskAsyncHandler.HttpTaskAsyncHandler()\n  fullName: System.Web.HttpTaskAsyncHandler.HttpTaskAsyncHandler()\n  type: Constructor\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Called from constructors in derived classes to initialize the <xref href=\"System.Web.HttpTaskAsyncHandler\"></xref> class.\n  syntax:\n    content: protected HttpTaskAsyncHandler ();\n    parameters: []\n  overload: System.Web.HttpTaskAsyncHandler.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.HttpTaskAsyncHandler.IsReusable\n  id: IsReusable\n  parent: System.Web.HttpTaskAsyncHandler\n  langs:\n  - csharp\n  name: IsReusable\n  nameWithType: HttpTaskAsyncHandler.IsReusable\n  fullName: System.Web.HttpTaskAsyncHandler.IsReusable\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: When overridden in a derived class, gets a value that indicates whether the task handler class instance can be reused for another asynchronous task.\n  syntax:\n    content: public virtual bool IsReusable { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the handler can be reused; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.  The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Web.HttpTaskAsyncHandler.IsReusable*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.HttpTaskAsyncHandler.ProcessRequest(System.Web.HttpContext)\n  id: ProcessRequest(System.Web.HttpContext)\n  parent: System.Web.HttpTaskAsyncHandler\n  langs:\n  - csharp\n  name: ProcessRequest(HttpContext)\n  nameWithType: HttpTaskAsyncHandler.ProcessRequest(HttpContext)\n  fullName: System.Web.HttpTaskAsyncHandler.ProcessRequest(HttpContext)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: When overridden in a derived class, provides code that handles a synchronous task.\n  syntax:\n    content: public virtual void ProcessRequest (System.Web.HttpContext context);\n    parameters:\n    - id: context\n      type: System.Web.HttpContext\n      description: The HTTP context.\n  overload: System.Web.HttpTaskAsyncHandler.ProcessRequest*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The method is implemented but does not provide any default handling for synchronous tasks.\n  platform:\n  - net462\n- uid: System.Web.HttpTaskAsyncHandler.ProcessRequestAsync(System.Web.HttpContext)\n  id: ProcessRequestAsync(System.Web.HttpContext)\n  parent: System.Web.HttpTaskAsyncHandler\n  langs:\n  - csharp\n  name: ProcessRequestAsync(HttpContext)\n  nameWithType: HttpTaskAsyncHandler.ProcessRequestAsync(HttpContext)\n  fullName: System.Web.HttpTaskAsyncHandler.ProcessRequestAsync(HttpContext)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: When overridden in a derived class, provides code that handles an asynchronous task.\n  remarks: To create a custom handler for an asynchronous task, override the ProcessRequestAsync method.\n  syntax:\n    content: public abstract System.Threading.Tasks.Task ProcessRequestAsync (System.Web.HttpContext context);\n    parameters:\n    - id: context\n      type: System.Web.HttpContext\n      description: The HTTP context.\n    return:\n      type: System.Threading.Tasks.Task\n      description: The asynchronous task.\n  overload: System.Web.HttpTaskAsyncHandler.ProcessRequestAsync*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.HttpTaskAsyncHandler.System#Web#IHttpAsyncHandler#BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)\n  id: System#Web#IHttpAsyncHandler#BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)\n  isEii: true\n  parent: System.Web.HttpTaskAsyncHandler\n  langs:\n  - csharp\n  name: System.Web.IHttpAsyncHandler.BeginProcessRequest(HttpContext,AsyncCallback,Object)\n  nameWithType: HttpTaskAsyncHandler.System.Web.IHttpAsyncHandler.BeginProcessRequest(HttpContext,AsyncCallback,Object)\n  fullName: System.Web.HttpTaskAsyncHandler.System.Web.IHttpAsyncHandler.BeginProcessRequest(HttpContext,AsyncCallback,Object)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Initiates asynchronous processing of a task in an HTTP task handler.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Web.HttpTaskAsyncHandler> instance is cast to an <xref:System.Web.IHttpAsyncHandler> interface.\n  syntax:\n    content: IAsyncResult IHttpAsyncHandler.BeginProcessRequest (System.Web.HttpContext context, AsyncCallback cb, object extraData);\n    parameters:\n    - id: context\n      type: System.Web.HttpContext\n      description: The HTTP context.\n    - id: cb\n      type: System.AsyncCallback\n      description: The callback method to invoke when the method returns.\n    - id: extraData\n      type: System.Object\n      description: Additional data for processing the task.\n    return:\n      type: System.IAsyncResult\n      description: An object that contains status data about the asynchronous operation.\n  overload: System.Web.HttpTaskAsyncHandler.System#Web#IHttpAsyncHandler#BeginProcessRequest*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.HttpTaskAsyncHandler.System#Web#IHttpAsyncHandler#EndProcessRequest(System.IAsyncResult)\n  id: System#Web#IHttpAsyncHandler#EndProcessRequest(System.IAsyncResult)\n  isEii: true\n  parent: System.Web.HttpTaskAsyncHandler\n  langs:\n  - csharp\n  name: System.Web.IHttpAsyncHandler.EndProcessRequest(IAsyncResult)\n  nameWithType: HttpTaskAsyncHandler.System.Web.IHttpAsyncHandler.EndProcessRequest(IAsyncResult)\n  fullName: System.Web.HttpTaskAsyncHandler.System.Web.IHttpAsyncHandler.EndProcessRequest(IAsyncResult)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Ends asynchronous processing of a task in an HTTP task handler.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Web.HttpTaskAsyncHandler> instance is cast to an <xref:System.Web.IHttpAsyncHandler> interface.\n  syntax:\n    content: void IHttpAsyncHandler.EndProcessRequest (IAsyncResult result);\n    parameters:\n    - id: result\n      type: System.IAsyncResult\n      description: The status of the asynchronous operation.\n  overload: System.Web.HttpTaskAsyncHandler.System#Web#IHttpAsyncHandler#EndProcessRequest*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.NotSupportedException\n  isExternal: true\n  name: System.NotSupportedException\n- uid: System.Web.HttpTaskAsyncHandler.#ctor\n  parent: System.Web.HttpTaskAsyncHandler\n  isExternal: false\n  name: HttpTaskAsyncHandler()\n  nameWithType: HttpTaskAsyncHandler.HttpTaskAsyncHandler()\n  fullName: System.Web.HttpTaskAsyncHandler.HttpTaskAsyncHandler()\n- uid: System.Web.HttpTaskAsyncHandler.IsReusable\n  parent: System.Web.HttpTaskAsyncHandler\n  isExternal: false\n  name: IsReusable\n  nameWithType: HttpTaskAsyncHandler.IsReusable\n  fullName: System.Web.HttpTaskAsyncHandler.IsReusable\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Web.HttpTaskAsyncHandler.ProcessRequest(System.Web.HttpContext)\n  parent: System.Web.HttpTaskAsyncHandler\n  isExternal: false\n  name: ProcessRequest(HttpContext)\n  nameWithType: HttpTaskAsyncHandler.ProcessRequest(HttpContext)\n  fullName: System.Web.HttpTaskAsyncHandler.ProcessRequest(HttpContext)\n- uid: System.Web.HttpContext\n  parent: System.Web\n  isExternal: false\n  name: HttpContext\n  nameWithType: HttpContext\n  fullName: System.Web.HttpContext\n- uid: System.Web.HttpTaskAsyncHandler.ProcessRequestAsync(System.Web.HttpContext)\n  parent: System.Web.HttpTaskAsyncHandler\n  isExternal: false\n  name: ProcessRequestAsync(HttpContext)\n  nameWithType: HttpTaskAsyncHandler.ProcessRequestAsync(HttpContext)\n  fullName: System.Web.HttpTaskAsyncHandler.ProcessRequestAsync(HttpContext)\n- uid: System.Threading.Tasks.Task\n  parent: System.Threading.Tasks\n  isExternal: true\n  name: Task\n  nameWithType: Task\n  fullName: System.Threading.Tasks.Task\n- uid: System.Web.HttpTaskAsyncHandler.System#Web#IHttpAsyncHandler#BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)\n  parent: System.Web.HttpTaskAsyncHandler\n  isExternal: false\n  name: System.Web.IHttpAsyncHandler.BeginProcessRequest(HttpContext,AsyncCallback,Object)\n  nameWithType: HttpTaskAsyncHandler.System.Web.IHttpAsyncHandler.BeginProcessRequest(HttpContext,AsyncCallback,Object)\n  fullName: System.Web.HttpTaskAsyncHandler.System.Web.IHttpAsyncHandler.BeginProcessRequest(HttpContext,AsyncCallback,Object)\n- uid: System.IAsyncResult\n  parent: System\n  isExternal: true\n  name: IAsyncResult\n  nameWithType: IAsyncResult\n  fullName: System.IAsyncResult\n- uid: System.AsyncCallback\n  parent: System\n  isExternal: true\n  name: AsyncCallback\n  nameWithType: AsyncCallback\n  fullName: System.AsyncCallback\n- uid: System.Web.HttpTaskAsyncHandler.System#Web#IHttpAsyncHandler#EndProcessRequest(System.IAsyncResult)\n  parent: System.Web.HttpTaskAsyncHandler\n  isExternal: false\n  name: System.Web.IHttpAsyncHandler.EndProcessRequest(IAsyncResult)\n  nameWithType: HttpTaskAsyncHandler.System.Web.IHttpAsyncHandler.EndProcessRequest(IAsyncResult)\n  fullName: System.Web.HttpTaskAsyncHandler.System.Web.IHttpAsyncHandler.EndProcessRequest(IAsyncResult)\n- uid: System.Web.HttpTaskAsyncHandler.#ctor*\n  parent: System.Web.HttpTaskAsyncHandler\n  isExternal: false\n  name: HttpTaskAsyncHandler\n  nameWithType: HttpTaskAsyncHandler.HttpTaskAsyncHandler\n- uid: System.Web.HttpTaskAsyncHandler.IsReusable*\n  parent: System.Web.HttpTaskAsyncHandler\n  isExternal: false\n  name: IsReusable\n  nameWithType: HttpTaskAsyncHandler.IsReusable\n- uid: System.Web.HttpTaskAsyncHandler.ProcessRequest*\n  parent: System.Web.HttpTaskAsyncHandler\n  isExternal: false\n  name: ProcessRequest\n  nameWithType: HttpTaskAsyncHandler.ProcessRequest\n- uid: System.Web.HttpTaskAsyncHandler.ProcessRequestAsync*\n  parent: System.Web.HttpTaskAsyncHandler\n  isExternal: false\n  name: ProcessRequestAsync\n  nameWithType: HttpTaskAsyncHandler.ProcessRequestAsync\n- uid: System.Web.HttpTaskAsyncHandler.System#Web#IHttpAsyncHandler#BeginProcessRequest*\n  parent: System.Web.HttpTaskAsyncHandler\n  isExternal: false\n  name: System.Web.IHttpAsyncHandler.BeginProcessRequest\n  nameWithType: HttpTaskAsyncHandler.System.Web.IHttpAsyncHandler.BeginProcessRequest\n- uid: System.Web.HttpTaskAsyncHandler.System#Web#IHttpAsyncHandler#EndProcessRequest*\n  parent: System.Web.HttpTaskAsyncHandler\n  isExternal: false\n  name: System.Web.IHttpAsyncHandler.EndProcessRequest\n  nameWithType: HttpTaskAsyncHandler.System.Web.IHttpAsyncHandler.EndProcessRequest\n"}