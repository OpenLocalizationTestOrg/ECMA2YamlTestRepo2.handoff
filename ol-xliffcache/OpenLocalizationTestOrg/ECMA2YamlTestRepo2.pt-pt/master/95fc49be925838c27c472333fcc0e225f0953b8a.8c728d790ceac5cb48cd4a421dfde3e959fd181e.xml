{"nodes":[{"pos":[561,619],"content":"An abstract base class that represents a cache for nonces.","needQuote":true,"needEscape":true,"nodes":[{"content":"An abstract base class that represents a cache for nonces.","pos":[0,58]}]},{"pos":[1146,1275],"content":"Called from constructors in derived classes to initialize the <bpt id=\"p1\">&lt;xref href=\"System.ServiceModel.Security.NonceCache\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Called from constructors in derived classes to initialize the <xref href=\"System.ServiceModel.Security.NonceCache\"></xref> class."},{"pos":[1810,1914],"content":"Gets or sets the maximum size of the cache specified as the number of nonces that the cache can contain.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the maximum size of the cache specified as the number of nonces that the cache can contain.","pos":[0,104]}]},{"pos":[2029,2120],"content":"The maximum size of the cache specified as the number of nonces that the cache can contain.","needQuote":true,"needEscape":true,"nodes":[{"content":"The maximum size of the cache specified as the number of nonces that the cache can contain.","pos":[0,91]}]},{"pos":[2312,2368],"content":"An attempt to set a value that is less than zero occurs.","needQuote":true,"needEscape":true,"nodes":[{"content":"An attempt to set a value that is less than zero occurs.","pos":[0,56]}]},{"pos":[2790,2870],"content":"Gets or sets the maximum timespan after which a nonce is deleted from the cache.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the maximum timespan after which a nonce is deleted from the cache.","pos":[0,80]}]},{"pos":[2999,3158],"content":"The maximum timespan after which a nonce is deleted from the cache. This value should be at least twice the maximum clock skew added to the replay window size.","needQuote":true,"needEscape":true,"nodes":[{"content":"The maximum timespan after which a nonce is deleted from the cache. This value should be at least twice the maximum clock skew added to the replay window size.","pos":[0,159],"nodes":[{"content":"The maximum timespan after which a nonce is deleted from the cache.","pos":[0,67]},{"content":"This value should be at least twice the maximum clock skew added to the replay window size.","pos":[68,159]}]}]},{"pos":[3357,3519],"content":"An attempt to set a value that is less than <xref:System.TimeSpan> occurs.       -or-       An attempt to set a value greater than the allowed maximum occurs.","needQuote":false,"needEscape":true,"nodes":[{"content":"An attempt to set a value that is less than <xref:System.TimeSpan> occurs.       -or-       An attempt to set a value greater than the allowed maximum occurs.","pos":[0,158],"nodes":[{"content":"An attempt to set a value that is less than &lt;xref:System.TimeSpan&gt; occurs.","pos":[0,74],"source":"An attempt to set a value that is less than <xref:System.TimeSpan> occurs."},{"content":"-or-       An attempt to set a value greater than the allowed maximum occurs.","pos":[81,158]}]}]},{"pos":[3969,4088],"content":"When overridden in a derived class, returns a value that indicates whether the specified nonce is already in the cache.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, returns a value that indicates whether the specified nonce is already in the cache.","pos":[0,119]}]},{"pos":[4237,4256],"content":"The nonce to check.","needQuote":true,"needEscape":true,"nodes":[{"content":"The nonce to check.","pos":[0,19]}]},{"pos":[4315,4498],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the specified nonce is already in the cache; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified nonce is already in the cache; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[5033,5118],"content":"When overridden in a derived class, attempts to add the specified nonce to the cache.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, attempts to add the specified nonce to the cache.","pos":[0,85]}]},{"pos":[5268,5298],"content":"The nonce to add to the cache.","needQuote":true,"needEscape":true,"nodes":[{"content":"The nonce to add to the cache.","pos":[0,30]}]},{"pos":[5357,5529],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the nonce was added to the cache; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the nonce was added to the cache; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ServiceModel.Security.NonceCache\n  id: NonceCache\n  children:\n  - System.ServiceModel.Security.NonceCache.#ctor\n  - System.ServiceModel.Security.NonceCache.CacheSize\n  - System.ServiceModel.Security.NonceCache.CachingTimeSpan\n  - System.ServiceModel.Security.NonceCache.CheckNonce(System.Byte[])\n  - System.ServiceModel.Security.NonceCache.TryAddNonce(System.Byte[])\n  langs:\n  - csharp\n  name: NonceCache\n  nameWithType: NonceCache\n  fullName: System.ServiceModel.Security.NonceCache\n  type: Class\n  summary: An abstract base class that represents a cache for nonces.\n  syntax:\n    content: public abstract class NonceCache\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Security.NonceCache.#ctor\n  id: '#ctor'\n  parent: System.ServiceModel.Security.NonceCache\n  langs:\n  - csharp\n  name: NonceCache()\n  nameWithType: NonceCache.NonceCache()\n  fullName: System.ServiceModel.Security.NonceCache.NonceCache()\n  type: Constructor\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Security\n  summary: Called from constructors in derived classes to initialize the <xref href=\"System.ServiceModel.Security.NonceCache\"></xref> class.\n  syntax:\n    content: protected NonceCache ();\n    parameters: []\n  overload: System.ServiceModel.Security.NonceCache.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Security.NonceCache.CacheSize\n  id: CacheSize\n  parent: System.ServiceModel.Security.NonceCache\n  langs:\n  - csharp\n  name: CacheSize\n  nameWithType: NonceCache.CacheSize\n  fullName: System.ServiceModel.Security.NonceCache.CacheSize\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Security\n  summary: Gets or sets the maximum size of the cache specified as the number of nonces that the cache can contain.\n  syntax:\n    content: public int CacheSize { get; set; }\n    return:\n      type: System.Int32\n      description: The maximum size of the cache specified as the number of nonces that the cache can contain.\n  overload: System.ServiceModel.Security.NonceCache.CacheSize*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: An attempt to set a value that is less than zero occurs.\n  platform:\n  - net462\n- uid: System.ServiceModel.Security.NonceCache.CachingTimeSpan\n  id: CachingTimeSpan\n  parent: System.ServiceModel.Security.NonceCache\n  langs:\n  - csharp\n  name: CachingTimeSpan\n  nameWithType: NonceCache.CachingTimeSpan\n  fullName: System.ServiceModel.Security.NonceCache.CachingTimeSpan\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Security\n  summary: Gets or sets the maximum timespan after which a nonce is deleted from the cache.\n  syntax:\n    content: public TimeSpan CachingTimeSpan { get; set; }\n    return:\n      type: System.TimeSpan\n      description: The maximum timespan after which a nonce is deleted from the cache. This value should be at least twice the maximum clock skew added to the replay window size.\n  overload: System.ServiceModel.Security.NonceCache.CachingTimeSpan*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"An attempt to set a value that is less than <xref:System.TimeSpan> occurs.  \\n  \\n -or-  \\n  \\n An attempt to set a value greater than the allowed maximum occurs.\"\n  platform:\n  - net462\n- uid: System.ServiceModel.Security.NonceCache.CheckNonce(System.Byte[])\n  id: CheckNonce(System.Byte[])\n  parent: System.ServiceModel.Security.NonceCache\n  langs:\n  - csharp\n  name: CheckNonce(Byte[])\n  nameWithType: NonceCache.CheckNonce(Byte[])\n  fullName: System.ServiceModel.Security.NonceCache.CheckNonce(Byte[])\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Security\n  summary: When overridden in a derived class, returns a value that indicates whether the specified nonce is already in the cache.\n  syntax:\n    content: public abstract bool CheckNonce (byte[] nonce);\n    parameters:\n    - id: nonce\n      type: System.Byte[]\n      description: The nonce to check.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified nonce is already in the cache; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ServiceModel.Security.NonceCache.CheckNonce*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Security.NonceCache.TryAddNonce(System.Byte[])\n  id: TryAddNonce(System.Byte[])\n  parent: System.ServiceModel.Security.NonceCache\n  langs:\n  - csharp\n  name: TryAddNonce(Byte[])\n  nameWithType: NonceCache.TryAddNonce(Byte[])\n  fullName: System.ServiceModel.Security.NonceCache.TryAddNonce(Byte[])\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Security\n  summary: When overridden in a derived class, attempts to add the specified nonce to the cache.\n  syntax:\n    content: public abstract bool TryAddNonce (byte[] nonce);\n    parameters:\n    - id: nonce\n      type: System.Byte[]\n      description: The nonce to add to the cache.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the nonce was added to the cache; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ServiceModel.Security.NonceCache.TryAddNonce*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.ServiceModel.Security.NonceCache.#ctor\n  parent: System.ServiceModel.Security.NonceCache\n  isExternal: false\n  name: NonceCache()\n  nameWithType: NonceCache.NonceCache()\n  fullName: System.ServiceModel.Security.NonceCache.NonceCache()\n- uid: System.ServiceModel.Security.NonceCache.CacheSize\n  parent: System.ServiceModel.Security.NonceCache\n  isExternal: false\n  name: CacheSize\n  nameWithType: NonceCache.CacheSize\n  fullName: System.ServiceModel.Security.NonceCache.CacheSize\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.ServiceModel.Security.NonceCache.CachingTimeSpan\n  parent: System.ServiceModel.Security.NonceCache\n  isExternal: false\n  name: CachingTimeSpan\n  nameWithType: NonceCache.CachingTimeSpan\n  fullName: System.ServiceModel.Security.NonceCache.CachingTimeSpan\n- uid: System.TimeSpan\n  parent: System\n  isExternal: true\n  name: TimeSpan\n  nameWithType: TimeSpan\n  fullName: System.TimeSpan\n- uid: System.ServiceModel.Security.NonceCache.CheckNonce(System.Byte[])\n  parent: System.ServiceModel.Security.NonceCache\n  isExternal: false\n  name: CheckNonce(Byte[])\n  nameWithType: NonceCache.CheckNonce(Byte[])\n  fullName: System.ServiceModel.Security.NonceCache.CheckNonce(Byte[])\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Byte[]\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: Byte[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.ServiceModel.Security.NonceCache.TryAddNonce(System.Byte[])\n  parent: System.ServiceModel.Security.NonceCache\n  isExternal: false\n  name: TryAddNonce(Byte[])\n  nameWithType: NonceCache.TryAddNonce(Byte[])\n  fullName: System.ServiceModel.Security.NonceCache.TryAddNonce(Byte[])\n- uid: System.ServiceModel.Security.NonceCache.#ctor*\n  parent: System.ServiceModel.Security.NonceCache\n  isExternal: false\n  name: NonceCache\n  nameWithType: NonceCache.NonceCache\n- uid: System.ServiceModel.Security.NonceCache.CacheSize*\n  parent: System.ServiceModel.Security.NonceCache\n  isExternal: false\n  name: CacheSize\n  nameWithType: NonceCache.CacheSize\n- uid: System.ServiceModel.Security.NonceCache.CachingTimeSpan*\n  parent: System.ServiceModel.Security.NonceCache\n  isExternal: false\n  name: CachingTimeSpan\n  nameWithType: NonceCache.CachingTimeSpan\n- uid: System.ServiceModel.Security.NonceCache.CheckNonce*\n  parent: System.ServiceModel.Security.NonceCache\n  isExternal: false\n  name: CheckNonce\n  nameWithType: NonceCache.CheckNonce\n- uid: System.ServiceModel.Security.NonceCache.TryAddNonce*\n  parent: System.ServiceModel.Security.NonceCache\n  isExternal: false\n  name: TryAddNonce\n  nameWithType: NonceCache.TryAddNonce\n"}