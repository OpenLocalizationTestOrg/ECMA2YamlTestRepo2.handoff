{"nodes":[{"pos":[2315,2468],"content":"Represents a set of SQL commands and a database connection that are used to fill the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and update the data source.","needQuote":true,"needEscape":true,"source":"Represents a set of SQL commands and a database connection that are used to fill the <xref href=\"System.Data.DataSet\"></xref> and update the data source."},{"pos":[2481,3870],"content":"The DataAdapter serves as a bridge between a <xref:System.Data.DataSet> and a data source for retrieving and saving data. The DataAdapter provides this bridge by mapping <xref:System.Data.Common.DataAdapter.Fill%2A>, which changes the data in the <xref:System.Data.DataSet> to match the data in the data source, and <xref:System.Data.IDataAdapter.Update%2A>, which changes the data in the data source to match the data in the <xref:System.Data.DataSet>.       If you are connecting to a SQL Server database, you can increase overall performance by using the <xref:System.Data.SqlClient.SqlDataAdapter> along with its associated <xref:System.Data.SqlClient.SqlCommand> and <xref:System.Data.SqlClient.SqlConnection> objects. For OLE DB-supported data sources, use the DataAdapter with its associated <xref:System.Data.OleDb.OleDbCommand> and <xref:System.Data.OleDb.OleDbConnection> objects. For ODBC-supported data sources, use the DataAdapter with its associated <xref:System.Data.Odbc.OdbcCommand> and <xref:System.Data.Odbc.OdbcConnection> objects. For Oracle databases, use the DataAdapter with its associated <xref:System.Data.OracleClient.OracleCommand> and <xref:System.Data.OracleClient.OracleConnection> objects.       When an instance of DataAdapter is created, the read/write properties are set to initial values. For a list of these values, see the DataAdapter constructor.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The DataAdapter serves as a bridge between a <xref:System.Data.DataSet> and a data source for retrieving and saving data. The DataAdapter provides this bridge by mapping <xref:System.Data.Common.DataAdapter.Fill%2A>, which changes the data in the <xref:System.Data.DataSet> to match the data in the data source, and <xref:System.Data.IDataAdapter.Update%2A>, which changes the data in the data source to match the data in the <xref:System.Data.DataSet>.       If you are connecting to a SQL Server database, you can increase overall performance by using the <xref:System.Data.SqlClient.SqlDataAdapter> along with its associated <xref:System.Data.SqlClient.SqlCommand> and <xref:System.Data.SqlClient.SqlConnection> objects. For OLE DB-supported data sources, use the DataAdapter with its associated <xref:System.Data.OleDb.OleDbCommand> and <xref:System.Data.OleDb.OleDbConnection> objects. For ODBC-supported data sources, use the DataAdapter with its associated <xref:System.Data.Odbc.OdbcCommand> and <xref:System.Data.Odbc.OdbcConnection> objects. For Oracle databases, use the DataAdapter with its associated <xref:System.Data.OracleClient.OracleCommand> and <xref:System.Data.OracleClient.OracleConnection> objects.       When an instance of DataAdapter is created, the read/write properties are set to initial values. For a list of these values, see the DataAdapter constructor.","pos":[0,1385],"nodes":[{"content":"The DataAdapter serves as a bridge between a &lt;xref:System.Data.DataSet&gt; and a data source for retrieving and saving data.","pos":[0,121],"source":"The DataAdapter serves as a bridge between a <xref:System.Data.DataSet> and a data source for retrieving and saving data."},{"content":"The DataAdapter provides this bridge by mapping &lt;xref:System.Data.Common.DataAdapter.Fill%2A&gt;, which changes the data in the &lt;xref:System.Data.DataSet&gt; to match the data in the data source, and &lt;xref:System.Data.IDataAdapter.Update%2A&gt;, which changes the data in the data source to match the data in the &lt;xref:System.Data.DataSet&gt;.","pos":[122,453],"source":" The DataAdapter provides this bridge by mapping <xref:System.Data.Common.DataAdapter.Fill%2A>, which changes the data in the <xref:System.Data.DataSet> to match the data in the data source, and <xref:System.Data.IDataAdapter.Update%2A>, which changes the data in the data source to match the data in the <xref:System.Data.DataSet>."},{"content":"If you are connecting to a SQL Server database, you can increase overall performance by using the &lt;xref:System.Data.SqlClient.SqlDataAdapter&gt; along with its associated &lt;xref:System.Data.SqlClient.SqlCommand&gt; and &lt;xref:System.Data.SqlClient.SqlConnection&gt; objects.","pos":[460,723],"source":"       If you are connecting to a SQL Server database, you can increase overall performance by using the <xref:System.Data.SqlClient.SqlDataAdapter> along with its associated <xref:System.Data.SqlClient.SqlCommand> and <xref:System.Data.SqlClient.SqlConnection> objects."},{"content":"For OLE DB-supported data sources, use the DataAdapter with its associated &lt;xref:System.Data.OleDb.OleDbCommand&gt; and &lt;xref:System.Data.OleDb.OleDbConnection&gt; objects.","pos":[724,890],"source":" For OLE DB-supported data sources, use the DataAdapter with its associated <xref:System.Data.OleDb.OleDbCommand> and <xref:System.Data.OleDb.OleDbConnection> objects."},{"content":"For ODBC-supported data sources, use the DataAdapter with its associated &lt;xref:System.Data.Odbc.OdbcCommand&gt; and &lt;xref:System.Data.Odbc.OdbcConnection&gt; objects.","pos":[891,1051],"source":" For ODBC-supported data sources, use the DataAdapter with its associated <xref:System.Data.Odbc.OdbcCommand> and <xref:System.Data.Odbc.OdbcConnection> objects."},{"content":"For Oracle databases, use the DataAdapter with its associated &lt;xref:System.Data.OracleClient.OracleCommand&gt; and &lt;xref:System.Data.OracleClient.OracleConnection&gt; objects.","pos":[1052,1221],"source":" For Oracle databases, use the DataAdapter with its associated <xref:System.Data.OracleClient.OracleCommand> and <xref:System.Data.OracleClient.OracleConnection> objects."},{"content":"When an instance of DataAdapter is created, the read/write properties are set to initial values.","pos":[1228,1324]},{"content":"For a list of these values, see the DataAdapter constructor.","pos":[1325,1385]}]}]},{"pos":[5145,5235],"content":"Initializes a new instance of a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.DataAdapter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of a <xref href=\"System.Data.Common.DataAdapter\"></xref> class."},{"pos":[5248,5901],"content":"When an instance of <xref:System.Data.Common.DataAdapter> is created, the following read/write properties are set to the following initial values.      |Properties|Initial value|   |----------------|-------------------|   |<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|   |<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|   |<xref:System.Data.Common.DataAdapter.TableMappings%2A>|An array of <xref:System.Data.Common.DataAdapter.TableMappings%2A> objects.|       You can change the value of any of these properties through a separate call to the property.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"When an instance of &lt;xref:System.Data.Common.DataAdapter&gt; is created, the following read/write properties are set to the following initial values.","pos":[0,146],"source":"When an instance of <xref:System.Data.Common.DataAdapter> is created, the following read/write properties are set to the following initial values."},{"content":"|Properties|Initial value|   |----------------|-------------------|   |&lt;xref:System.Data.Common.DataAdapter.MissingMappingAction%2A&gt;|<ph id=\"ph1\">`MissingMappingAction.Passthrough`</ph>|   |&lt;xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A&gt;|<ph id=\"ph2\">`MissingSchemaAction.Add`</ph>|   |&lt;xref:System.Data.Common.DataAdapter.TableMappings%2A&gt;|An array of &lt;xref:System.Data.Common.DataAdapter.TableMappings%2A&gt; objects.|       You can change the value of any of these properties through a separate call to the property.","pos":[152,645],"source":"      |Properties|Initial value|   |----------------|-------------------|   |<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|   |<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|   |<xref:System.Data.Common.DataAdapter.TableMappings%2A>|An array of <xref:System.Data.Common.DataAdapter.TableMappings%2A> objects.|       You can change the value of any of these properties through a separate call to the property."}]},{"pos":[6491,6622],"content":"Initializes a new instance of a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.DataAdapter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class from an existing object of the same type.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of a <xref href=\"System.Data.Common.DataAdapter\"></xref> class from an existing object of the same type."},{"pos":[6634,6833],"content":"This overload of the <xref:System.Data.Common.DataAdapter> constructor is designed for use by a .NET Framework data provider when implementing a similar constructor for use in a clone implementation.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This overload of the &lt;xref:System.Data.Common.DataAdapter&gt; constructor is designed for use by a .NET Framework data provider when implementing a similar constructor for use in a clone implementation.","pos":[0,199],"source":"This overload of the <xref:System.Data.Common.DataAdapter> constructor is designed for use by a .NET Framework data provider when implementing a similar constructor for use in a clone implementation."}]},{"pos":[7011,7147],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.DataAdapter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object used to create the new <bpt id=\"p2\">&lt;xref href=\"System.Data.Common.DataAdapter\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.Common.DataAdapter\"></xref> object used to create the new <xref href=\"System.Data.Common.DataAdapter\"></xref>."},{"pos":[7632,7876],"content":"Gets or sets a value indicating whether &lt;xref:System.Data.DataRow.AcceptChanges<bpt id=\"p1\">*</bpt>&gt; is called on a <bpt id=\"p2\">&lt;xref href=\"System.Data.DataRow\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> after it is added to the <bpt id=\"p3\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> during any of the <ept id=\"p1\">*</ept><bpt id=\"p4\">*</bpt>Fill<ept id=\"p4\">*</ept>* operations.","needQuote":true,"needEscape":true,"source":"Gets or sets a value indicating whether <xref:System.Data.DataRow.AcceptChanges*> is called on a <xref href=\"System.Data.DataRow\"></xref> after it is added to the <xref href=\"System.Data.DataTable\"></xref> during any of the **Fill** operations."},{"pos":[7888,8013],"content":"If <ph id=\"ph1\">`false`</ph>, &lt;xref:System.Data.DataRow.AcceptChanges%2A&gt; is not called, and the newly added rows are treated as inserted rows.","needQuote":true,"needEscape":true,"extradata":"MT","source":"If `false`, <xref:System.Data.DataRow.AcceptChanges%2A> is not called, and the newly added rows are treated as inserted rows."},{"pos":[8145,8460],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <xref:System.Data.DataRow.AcceptChanges*> is called on the <xref href=\"System.Data.DataRow\"></xref>; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if &lt;xref:System.Data.DataRow.AcceptChanges*&gt; is called on the <bpt id=\"p2\">&lt;xref href=\"System.Data.DataRow\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>; otherwise <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","pos":[0,238],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <xref:System.Data.DataRow.AcceptChanges*> is called on the <xref href=\"System.Data.DataRow\"></xref>; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[239,315],"source":" The default is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>."}]},{"pos":[8973,9101],"content":"Gets or sets whether &lt;xref:System.Data.DataRow.AcceptChanges<bpt id=\"p1\">*</bpt>&gt; is called during a &lt;xref:System.Data.Common.DataAdapter.Update<ept id=\"p1\">*</ept>&gt;.","needQuote":true,"needEscape":true,"source":"Gets or sets whether <xref:System.Data.DataRow.AcceptChanges*> is called during a <xref:System.Data.Common.DataAdapter.Update*>."},{"pos":[9114,11231],"content":"During a call to the `Update` method of a `DataAdapter`, the database can send data back to your ADO.NET application as output parameters or as the first returned record of a result set. ADO.NET can retrieve these values and update the corresponding columns in the <xref:System.Data.DataRow> being updated. By default, ADO.NET calls the `AcceptChanges` method of the `DataRow` after the update. However, if you want to merge the updated row back into another <xref:System.Data.DataTable>, you may want to preserver the original value of a primary key column. For example, a primary key column corresponding to an automatically incrementing column in the database, such as an identity column, can contain new values that are assigned by the database that do not match the original values assigned in the `DataRow`. By default, `AcceptChanges` is called implicitly after an update, and the original values in the row, which may have been <xref:System.Data.DataColumn.AutoIncrement%2A> values assigned by ADO.NET, are lost. You can preserve the original values in the `DataRow` by preventing `ADO.NET` from calling `AcceptChanges` after it performs an update on a row, by setting the AcceptChangesDuringUpdate property to `false`, which preserves the original values.      > [!NOTE] >  Setting the `AcceptChangesDuringUpdate` property to `false` applies to all data modifications, not only inserts. If you want to edit or delete rows in the same update, and if you want to suppress the call to `AcceptChanges` only for inserts, then instead of setting `AccceptChangesDuringUpdate` to `false`, use an event handler for the `RowUpdated` event of the `DataAdapter`. In the event handler you can check the <xref:System.Data.Common.RowUpdatedEventArgs.StatementType%2A> to determine if the data modification is an insert, and if `true`, set the <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> property of the <xref:System.Data.Common.RowUpdatedEventArgs> to <xref:System.Data.UpdateStatus>. For more information and an example, see [Retrieving Identity or Autonumber Values](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"During a call to the <ph id=\"ph1\">`Update`</ph> method of a <ph id=\"ph2\">`DataAdapter`</ph>, the database can send data back to your ADO.NET application as output parameters or as the first returned record of a result set.","pos":[0,186],"source":"During a call to the `Update` method of a `DataAdapter`, the database can send data back to your ADO.NET application as output parameters or as the first returned record of a result set."},{"content":"ADO.NET can retrieve these values and update the corresponding columns in the &lt;xref:System.Data.DataRow&gt; being updated.","pos":[187,306],"source":" ADO.NET can retrieve these values and update the corresponding columns in the <xref:System.Data.DataRow> being updated."},{"content":"By default, ADO.NET calls the <ph id=\"ph1\">`AcceptChanges`</ph> method of the <ph id=\"ph2\">`DataRow`</ph> after the update.","pos":[307,394],"source":" By default, ADO.NET calls the `AcceptChanges` method of the `DataRow` after the update."},{"content":"However, if you want to merge the updated row back into another &lt;xref:System.Data.DataTable&gt;, you may want to preserver the original value of a primary key column.","pos":[395,558],"source":" However, if you want to merge the updated row back into another <xref:System.Data.DataTable>, you may want to preserver the original value of a primary key column."},{"content":"For example, a primary key column corresponding to an automatically incrementing column in the database, such as an identity column, can contain new values that are assigned by the database that do not match the original values assigned in the <ph id=\"ph1\">`DataRow`</ph>.","pos":[559,813],"source":" For example, a primary key column corresponding to an automatically incrementing column in the database, such as an identity column, can contain new values that are assigned by the database that do not match the original values assigned in the `DataRow`."},{"content":"By default, <ph id=\"ph1\">`AcceptChanges`</ph> is called implicitly after an update, and the original values in the row, which may have been &lt;xref:System.Data.DataColumn.AutoIncrement%2A&gt; values assigned by ADO.NET, are lost.","pos":[814,1020],"source":" By default, `AcceptChanges` is called implicitly after an update, and the original values in the row, which may have been <xref:System.Data.DataColumn.AutoIncrement%2A> values assigned by ADO.NET, are lost."},{"content":"You can preserve the original values in the <ph id=\"ph1\">`DataRow`</ph> by preventing <ph id=\"ph2\">`ADO.NET`</ph> from calling <ph id=\"ph3\">`AcceptChanges`</ph> after it performs an update on a row, by setting the AcceptChangesDuringUpdate property to <ph id=\"ph4\">`false`</ph>, which preserves the original values.","pos":[1021,1264],"source":" You can preserve the original values in the `DataRow` by preventing `ADO.NET` from calling `AcceptChanges` after it performs an update on a row, by setting the AcceptChangesDuringUpdate property to `false`, which preserves the original values."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Setting the <ph id=\"ph2\">`AcceptChangesDuringUpdate`</ph> property to <ph id=\"ph3\">`false`</ph> applies to all data modifications, not only inserts.","pos":[1270,1395],"source":"      > [!NOTE] >  Setting the `AcceptChangesDuringUpdate` property to `false` applies to all data modifications, not only inserts."},{"content":"If you want to edit or delete rows in the same update, and if you want to suppress the call to <ph id=\"ph1\">`AcceptChanges`</ph> only for inserts, then instead of setting <ph id=\"ph2\">`AccceptChangesDuringUpdate`</ph> to <ph id=\"ph3\">`false`</ph>, use an event handler for the <ph id=\"ph4\">`RowUpdated`</ph> event of the <ph id=\"ph5\">`DataAdapter`</ph>.","pos":[1396,1659],"source":" If you want to edit or delete rows in the same update, and if you want to suppress the call to `AcceptChanges` only for inserts, then instead of setting `AccceptChangesDuringUpdate` to `false`, use an event handler for the `RowUpdated` event of the `DataAdapter`."},{"content":"In the event handler you can check the &lt;xref:System.Data.Common.RowUpdatedEventArgs.StatementType%2A&gt; to determine if the data modification is an insert, and if <ph id=\"ph1\">`true`</ph>, set the &lt;xref:System.Data.Common.RowUpdatedEventArgs.Status%2A&gt; property of the &lt;xref:System.Data.Common.RowUpdatedEventArgs&gt; to &lt;xref:System.Data.UpdateStatus&gt;.","pos":[1660,1990],"source":" In the event handler you can check the <xref:System.Data.Common.RowUpdatedEventArgs.StatementType%2A> to determine if the data modification is an insert, and if `true`, set the <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> property of the <xref:System.Data.Common.RowUpdatedEventArgs> to <xref:System.Data.UpdateStatus>."},{"content":"For more information and an example, see <bpt id=\"p1\">[</bpt>Retrieving Identity or Autonumber Values<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1991,2114],"source":" For more information and an example, see [Retrieving Identity or Autonumber Values](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[12168,12491],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <xref:System.Data.DataRow.AcceptChanges*> is called during an <xref:System.Data.Common.DataAdapter.Update*>; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if &lt;xref:System.Data.DataRow.AcceptChanges<bpt id=\"p2\">*</bpt>&gt; is called during an &lt;xref:System.Data.Common.DataAdapter.Update<ept id=\"p2\">*</ept>&gt;; otherwise <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","pos":[0,246],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <xref:System.Data.DataRow.AcceptChanges*> is called during an <xref:System.Data.Common.DataAdapter.Update*>; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[247,323],"source":" The default is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>."}]},{"pos":[12955,13042],"content":"Creates a copy of this instance of <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.DataAdapter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Creates a copy of this instance of <xref href=\"System.Data.Common.DataAdapter\"></xref>."},{"pos":[13055,13601],"content":"This method is deprecated. The <xref:System.Data.Common.DataAdapter.%23ctor%2A> constructor should be used instead of this method.       All the commands, the <xref:System.Data.Common.DataAdapter.TableMappings%2A>, the <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>, and the <xref:System.Data.Common.DataAdapter.MissingMappingAction%2A> are cloned. However, the connections for the commands are not copied, but shared. Thus, the cloned <xref:System.Data.Common.DataAdapter> can be used against the same connection as the original.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method is deprecated. The <xref:System.Data.Common.DataAdapter.%23ctor%2A> constructor should be used instead of this method.       All the commands, the <xref:System.Data.Common.DataAdapter.TableMappings%2A>, the <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>, and the <xref:System.Data.Common.DataAdapter.MissingMappingAction%2A> are cloned. However, the connections for the commands are not copied, but shared. Thus, the cloned <xref:System.Data.Common.DataAdapter> can be used against the same connection as the original.","pos":[0,544],"nodes":[{"content":"This method is deprecated.","pos":[0,26]},{"content":"The &lt;xref:System.Data.Common.DataAdapter.%23ctor%2A&gt; constructor should be used instead of this method.","pos":[27,130],"source":" The <xref:System.Data.Common.DataAdapter.%23ctor%2A> constructor should be used instead of this method."},{"content":"All the commands, the &lt;xref:System.Data.Common.DataAdapter.TableMappings%2A&gt;, the &lt;xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A&gt;, and the &lt;xref:System.Data.Common.DataAdapter.MissingMappingAction%2A&gt; are cloned.","pos":[137,362],"source":"       All the commands, the <xref:System.Data.Common.DataAdapter.TableMappings%2A>, the <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>, and the <xref:System.Data.Common.DataAdapter.MissingMappingAction%2A> are cloned."},{"content":"However, the connections for the commands are not copied, but shared.","pos":[363,432]},{"content":"Thus, the cloned &lt;xref:System.Data.Common.DataAdapter&gt; can be used against the same connection as the original.","pos":[433,544],"source":" Thus, the cloned <xref:System.Data.Common.DataAdapter> can be used against the same connection as the original."}]}]},{"pos":[13787,13862],"content":"The cloned instance of <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.DataAdapter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The cloned instance of <xref href=\"System.Data.Common.DataAdapter\"></xref>."},{"pos":[14346,14464],"content":"Gets or sets a value that specifies whether to generate an exception when an error is encountered during a row update.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value that specifies whether to generate an exception when an error is encountered during a row update.","pos":[0,118]}]},{"pos":[14477,14943],"content":"If `ContinueUpdateOnError` is set to `true`, no exception is thrown when an error occurs during the update of a row. The update of the row is skipped and the error information is placed in the <xref:System.Data.DataRow.RowError%2A> property of the row in error. The <xref:System.Data.Common.DataAdapter> continues to update subsequent rows.       If `ContinueUpdateOnError` is set to `false`, an exception is thrown when an error occurs during the update of a row.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If <ph id=\"ph1\">`ContinueUpdateOnError`</ph> is set to <ph id=\"ph2\">`true`</ph>, no exception is thrown when an error occurs during the update of a row.","pos":[0,116],"source":"If `ContinueUpdateOnError` is set to `true`, no exception is thrown when an error occurs during the update of a row."},{"content":"The update of the row is skipped and the error information is placed in the &lt;xref:System.Data.DataRow.RowError%2A&gt; property of the row in error.","pos":[117,261],"source":" The update of the row is skipped and the error information is placed in the <xref:System.Data.DataRow.RowError%2A> property of the row in error."},{"content":"The &lt;xref:System.Data.Common.DataAdapter&gt; continues to update subsequent rows.","pos":[262,340],"source":" The <xref:System.Data.Common.DataAdapter> continues to update subsequent rows."},{"content":"If <ph id=\"ph1\">`ContinueUpdateOnError`</ph> is set to <ph id=\"ph2\">`false`</ph>, an exception is thrown when an error occurs during the update of a row.","pos":[347,464],"source":"       If `ContinueUpdateOnError` is set to `false`, an exception is thrown when an error occurs during the update of a row."}]},{"pos":[15074,15343],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to continue the update without generating an exception; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to continue the update without generating an exception; otherwise <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,190],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to continue the update without generating an exception; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[191,269],"source":" The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[15828,15909],"content":"Creates a new <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.DataTableMappingCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Creates a new <xref href=\"System.Data.Common.DataTableMappingCollection\"></xref>."},{"pos":[16129,16160],"content":"A new table mapping collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"A new table mapping collection.","pos":[0,31]}]},{"pos":[16636,16779],"content":"Releases the unmanaged resources used by the <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.DataAdapter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and optionally releases the managed resources.","needQuote":true,"needEscape":true,"source":"Releases the unmanaged resources used by the <xref href=\"System.Data.Common.DataAdapter\"></xref> and optionally releases the managed resources."},{"pos":[16792,17349],"content":"This method is called by the public <xref:System.IDisposable.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method. `Dispose` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.       When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Data.Common.DataAdapter> references. This method invokes the `Dispose` method of each referenced object.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method is called by the public &lt;xref:System.IDisposable.Dispose%2A&gt; method and the &lt;xref:System.Object.Finalize%2A&gt; method.","pos":[0,128],"source":"This method is called by the public <xref:System.IDisposable.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method."},{"content":"<ph id=\"ph1\">`Dispose`</ph> invokes the protected <ph id=\"ph2\">`Dispose(Boolean)`</ph> method with the <ph id=\"ph3\">`disposing`</ph> parameter set to <ph id=\"ph4\">`true`</ph>.","pos":[129,232],"source":"`Dispose` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`."},{"content":"&lt;xref:System.Object.Finalize%2A&gt; invokes <ph id=\"ph1\">`Dispose`</ph> with <ph id=\"ph2\">`disposing`</ph> set to <ph id=\"ph3\">`false`</ph>.","pos":[233,316],"source":" <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`."},{"content":"When the <ph id=\"ph1\">`disposing`</ph> parameter is <ph id=\"ph2\">`true`</ph>, this method releases all resources held by any managed objects that this &lt;xref:System.Data.Common.DataAdapter&gt; references.","pos":[323,487],"source":"       When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Data.Common.DataAdapter> references."},{"content":"This method invokes the <ph id=\"ph1\">`Dispose`</ph> method of each referenced object.","pos":[488,555],"source":" This method invokes the `Dispose` method of each referenced object."}]},{"pos":[17506,17715],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to release both managed and unmanaged resources; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> to release only unmanaged resources.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only unmanaged resources."},{"pos":[18174,18279],"content":"Adds or refreshes rows in the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to match those in the data source.","needQuote":true,"needEscape":true,"source":"Adds or refreshes rows in the <xref href=\"System.Data.DataSet\"></xref> to match those in the data source."},{"pos":[18292,21354],"content":"The Fill method retrieves rows from the data source using the SELECT statement specified by an associated <xref:System.Data.IDbDataAdapter.SelectCommand%2A> property. The connection object associated with the SELECT statement must be valid, but it does not need to be open. If the connection is closed before Fill is called, it is opened to retrieve data, then closed. If the connection is open before Fill is called, it remains open.       The Fill operation then adds the rows to destination <xref:System.Data.DataTable> objects in the <xref:System.Data.DataSet>, creating the <xref:System.Data.DataTable> objects if they do not already exist. When creating <xref:System.Data.DataTable> objects, the Fill operation normally creates only column name metadata. However, if the <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> property is set to `AddWithKey`, appropriate primary keys and constraints are also created.       If the `SelectCommand` returns the results of an OUTER JOIN, the `DataAdapter` does not set a <xref:System.Data.DataTable.PrimaryKey%2A> value for the resulting <xref:System.Data.DataTable>. You must explicitly define the primary key to ensure that duplicate rows are resolved correctly. For more information, see [Defining Primary Keys](~/add/includes/ajax-current-ext-md.md).       If the data adapter encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the subsequent columns, using the pattern \"columnname1\", \"columnname2\", \"columnname3\", and so on. If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern \"Column1\", \"Column2\", and so on. When multiple result sets are added to the <xref:System.Data.DataSet> each result set is placed in a separate table. Additional result sets are named by appending integral values to the specified table name (for example, \"Table\", \"Table1\", \"Table2\", and so on). Applications using column and table names should ensure that conflicts with these naming patterns does not occur.       When the SELECT statement used to populate the <xref:System.Data.DataSet> returns multiple results, such as a batch SQL statements, if one of the results contains an error, all subsequent results are skipped and not added to the <xref:System.Data.DataSet>.       You can use the Fill method multiple times on the same <xref:System.Data.DataTable>. If a primary key exists, incoming rows are merged with matching rows that already exist. If no primary key exists, incoming rows are appended to the <xref:System.Data.DataTable>.      > [!NOTE] >  When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result. To retrieve schema information for multiple results, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> with the <xref:System.Data.MissingSchemaAction> set to `AddWithKey`.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Fill method retrieves rows from the data source using the SELECT statement specified by an associated &lt;xref:System.Data.IDbDataAdapter.SelectCommand%2A&gt; property.","pos":[0,166],"source":"The Fill method retrieves rows from the data source using the SELECT statement specified by an associated <xref:System.Data.IDbDataAdapter.SelectCommand%2A> property."},{"content":"The connection object associated with the SELECT statement must be valid, but it does not need to be open.","pos":[167,273]},{"content":"If the connection is closed before Fill is called, it is opened to retrieve data, then closed.","pos":[274,368]},{"content":"If the connection is open before Fill is called, it remains open.","pos":[369,434]},{"content":"The Fill operation then adds the rows to destination &lt;xref:System.Data.DataTable&gt; objects in the &lt;xref:System.Data.DataSet&gt;, creating the &lt;xref:System.Data.DataTable&gt; objects if they do not already exist.","pos":[441,645],"source":"       The Fill operation then adds the rows to destination <xref:System.Data.DataTable> objects in the <xref:System.Data.DataSet>, creating the <xref:System.Data.DataTable> objects if they do not already exist."},{"content":"When creating &lt;xref:System.Data.DataTable&gt; objects, the Fill operation normally creates only column name metadata.","pos":[646,760],"source":" When creating <xref:System.Data.DataTable> objects, the Fill operation normally creates only column name metadata."},{"content":"However, if the &lt;xref:System.Data.IDataAdapter.MissingSchemaAction%2A&gt; property is set to <ph id=\"ph1\">`AddWithKey`</ph>, appropriate primary keys and constraints are also created.","pos":[761,923],"source":" However, if the <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> property is set to `AddWithKey`, appropriate primary keys and constraints are also created."},{"content":"If the <ph id=\"ph1\">`SelectCommand`</ph> returns the results of an OUTER JOIN, the <ph id=\"ph2\">`DataAdapter`</ph> does not set a &lt;xref:System.Data.DataTable.PrimaryKey%2A&gt; value for the resulting &lt;xref:System.Data.DataTable&gt;.","pos":[930,1120],"source":"       If the `SelectCommand` returns the results of an OUTER JOIN, the `DataAdapter` does not set a <xref:System.Data.DataTable.PrimaryKey%2A> value for the resulting <xref:System.Data.DataTable>."},{"content":"You must explicitly define the primary key to ensure that duplicate rows are resolved correctly.","pos":[1121,1217]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Defining Primary Keys<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1218,1307],"source":" For more information, see [Defining Primary Keys](~/add/includes/ajax-current-ext-md.md)."},{"content":"If the data adapter encounters duplicate columns while populating a &lt;xref:System.Data.DataTable&gt;, it generates names for the subsequent columns, using the pattern \"columnname1\", \"columnname2\", \"columnname3\", and so on.","pos":[1314,1532],"source":"       If the data adapter encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the subsequent columns, using the pattern \"columnname1\", \"columnname2\", \"columnname3\", and so on."},{"content":"If the incoming data contains unnamed columns, they are placed in the &lt;xref:System.Data.DataSet&gt; according to the pattern \"Column1\", \"Column2\", and so on.","pos":[1533,1687],"source":" If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern \"Column1\", \"Column2\", and so on."},{"content":"When multiple result sets are added to the &lt;xref:System.Data.DataSet&gt; each result set is placed in a separate table.","pos":[1688,1804],"source":" When multiple result sets are added to the <xref:System.Data.DataSet> each result set is placed in a separate table."},{"content":"Additional result sets are named by appending integral values to the specified table name (for example, \"Table\", \"Table1\", \"Table2\", and so on).","pos":[1805,1949]},{"content":"Applications using column and table names should ensure that conflicts with these naming patterns does not occur.","pos":[1950,2063]},{"content":"When the SELECT statement used to populate the &lt;xref:System.Data.DataSet&gt; returns multiple results, such as a batch SQL statements, if one of the results contains an error, all subsequent results are skipped and not added to the &lt;xref:System.Data.DataSet&gt;.","pos":[2070,2326],"source":"       When the SELECT statement used to populate the <xref:System.Data.DataSet> returns multiple results, such as a batch SQL statements, if one of the results contains an error, all subsequent results are skipped and not added to the <xref:System.Data.DataSet>."},{"content":"You can use the Fill method multiple times on the same &lt;xref:System.Data.DataTable&gt;.","pos":[2333,2417],"source":"       You can use the Fill method multiple times on the same <xref:System.Data.DataTable>."},{"content":"If a primary key exists, incoming rows are merged with matching rows that already exist.","pos":[2418,2506]},{"content":"If no primary key exists, incoming rows are appended to the &lt;xref:System.Data.DataTable&gt;.","pos":[2507,2596],"source":" If no primary key exists, incoming rows are appended to the <xref:System.Data.DataTable>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  When handling batch SQL statements that return multiple results, the implementation of &lt;xref:System.Data.Common.DbDataAdapter.FillSchema%2A&gt; for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result.","pos":[2602,2859],"source":"      > [!NOTE] >  When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result."},{"content":"To retrieve schema information for multiple results, use &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; with the &lt;xref:System.Data.MissingSchemaAction&gt; set to <ph id=\"ph1\">`AddWithKey`</ph>.","pos":[2860,3033],"source":" To retrieve schema information for multiple results, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> with the <xref:System.Data.MissingSchemaAction> set to `AddWithKey`."}]},{"pos":[21519,21609],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to fill with records and, if necessary, schema.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.DataSet\"></xref> to fill with records and, if necessary, schema."},{"pos":[21666,21843],"content":"The number of rows successfully added to or refreshed in the <xref href=\"System.Data.DataSet\"></xref>. This does not include rows affected by statements that do not return rows.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of rows successfully added to or refreshed in the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,102],"source":"The number of rows successfully added to or refreshed in the <xref href=\"System.Data.DataSet\"></xref>."},{"content":"This does not include rows affected by statements that do not return rows.","pos":[103,177]}]},{"pos":[22393,22621],"content":"Adds or refreshes rows in the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to match those in the data source using the <bpt id=\"p2\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> name and the specified <bpt id=\"p3\">&lt;xref href=\"System.Data.IDataReader\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Adds or refreshes rows in the <xref href=\"System.Data.DataTable\"></xref> to match those in the data source using the <xref href=\"System.Data.DataTable\"></xref> name and the specified <xref href=\"System.Data.IDataReader\"></xref>."},{"pos":[22633,22739],"content":"See the remarks for <ph id=\"ph1\">`System.Data.Common.DataAdapter.Fill(System.Data.DataSet)`</ph> for additional information.","needQuote":true,"needEscape":true,"extradata":"MT","source":"See the remarks for `System.Data.Common.DataAdapter.Fill(System.Data.DataSet)` for additional information."},{"pos":[22950,23016],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to fill with records.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.DataTable\"></xref> to fill with records."},{"pos":[23093,23153],"content":"An instance of <bpt id=\"p1\">&lt;xref href=\"System.Data.IDataReader\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An instance of <xref href=\"System.Data.IDataReader\"></xref>."},{"pos":[23210,23389],"content":"The number of rows successfully added to or refreshed in the <xref href=\"System.Data.DataTable\"></xref>. This does not include rows affected by statements that do not return rows.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of rows successfully added to or refreshed in the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,104],"source":"The number of rows successfully added to or refreshed in the <xref href=\"System.Data.DataTable\"></xref>."},{"content":"This does not include rows affected by statements that do not return rows.","pos":[105,179]}]},{"pos":[24037,24187],"content":"Adds or refreshes rows in a specified range in the collection of <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects to match those in the data source.","needQuote":true,"needEscape":true,"source":"Adds or refreshes rows in a specified range in the collection of <xref href=\"System.Data.DataTable\"></xref> objects to match those in the data source."},{"pos":[24199,24305],"content":"See the remarks for <ph id=\"ph1\">`System.Data.Common.DataAdapter.Fill(System.Data.DataSet)`</ph> for additional information.","needQuote":true,"needEscape":true,"extradata":"MT","source":"See the remarks for `System.Data.Common.DataAdapter.Fill(System.Data.DataSet)` for additional information."},{"pos":[24555,24643],"content":"A collection of <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects to fill with records.","needQuote":true,"needEscape":true,"source":"A collection of <xref href=\"System.Data.DataTable\"></xref> objects to fill with records."},{"pos":[24720,24780],"content":"An instance of <bpt id=\"p1\">&lt;xref href=\"System.Data.IDataReader\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An instance of <xref href=\"System.Data.IDataReader\"></xref>."},{"pos":[24847,24891],"content":"The zero-based index of the starting record.","needQuote":true,"needEscape":true,"nodes":[{"content":"The zero-based index of the starting record.","pos":[0,44]}]},{"pos":[24957,25009],"content":"An integer indicating the maximum number of records.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer indicating the maximum number of records.","pos":[0,52]}]},{"pos":[25066,25245],"content":"The number of rows successfully added to or refreshed in the <xref href=\"System.Data.DataTable\"></xref>. This does not include rows affected by statements that do not return rows.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of rows successfully added to or refreshed in the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,104],"source":"The number of rows successfully added to or refreshed in the <xref href=\"System.Data.DataTable\"></xref>."},{"content":"This does not include rows affected by statements that do not return rows.","pos":[105,179]}]},{"pos":[25922,26152],"content":"Adds or refreshes rows in a specified range in the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to match those in the data source using the <bpt id=\"p2\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> and <bpt id=\"p3\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> names.","needQuote":true,"needEscape":true,"source":"Adds or refreshes rows in a specified range in the <xref href=\"System.Data.DataSet\"></xref> to match those in the data source using the <xref href=\"System.Data.DataSet\"></xref> and <xref href=\"System.Data.DataTable\"></xref> names."},{"pos":[26164,26270],"content":"See the remarks for <ph id=\"ph1\">`System.Data.Common.DataAdapter.Fill(System.Data.DataSet)`</ph> for additional information.","needQuote":true,"needEscape":true,"extradata":"MT","source":"See the remarks for `System.Data.Common.DataAdapter.Fill(System.Data.DataSet)` for additional information."},{"pos":[26523,26587],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to fill with records.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.DataSet\"></xref> to fill with records."},{"pos":[26652,26701],"content":"A string indicating the name of the source table.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string indicating the name of the source table.","pos":[0,49]}]},{"pos":[26778,26838],"content":"An instance of <bpt id=\"p1\">&lt;xref href=\"System.Data.IDataReader\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An instance of <xref href=\"System.Data.IDataReader\"></xref>."},{"pos":[26905,26949],"content":"The zero-based index of the starting record.","needQuote":true,"needEscape":true,"nodes":[{"content":"The zero-based index of the starting record.","pos":[0,44]}]},{"pos":[27015,27067],"content":"An integer indicating the maximum number of records.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer indicating the maximum number of records.","pos":[0,52]}]},{"pos":[27124,27301],"content":"The number of rows successfully added to or refreshed in the <xref href=\"System.Data.DataSet\"></xref>. This does not include rows affected by statements that do not return rows.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of rows successfully added to or refreshed in the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,102],"source":"The number of rows successfully added to or refreshed in the <xref href=\"System.Data.DataSet\"></xref>."},{"content":"This does not include rows affected by statements that do not return rows.","pos":[103,177]}]},{"pos":[27712,27766],"content":"Returned when an error occurs during a fill operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returned when an error occurs during a fill operation.","pos":[0,54]}]},{"pos":[27779,28218],"content":"The **FillError** event allows a user to determine whether or not the fill operation should continue after the error occurs. Examples of when the **FillError** event might occur are:      -   The data being added to a `DataSet` cannot be converted to a common language runtime type without losing precision.      -   The row being added contains data that violates a Constraint that must be enforced on a `DataColumn` in the `DataSet`.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <bpt id=\"p1\">**</bpt>FillError<ept id=\"p1\">**</ept> event allows a user to determine whether or not the fill operation should continue after the error occurs.","pos":[0,124],"source":"The **FillError** event allows a user to determine whether or not the fill operation should continue after the error occurs."},{"content":"Examples of when the <bpt id=\"p1\">**</bpt>FillError<ept id=\"p1\">**</ept> event might occur are:      -   The data being added to a <ph id=\"ph1\">`DataSet`</ph> cannot be converted to a common language runtime type without losing precision.","pos":[125,307],"source":" Examples of when the **FillError** event might occur are:      -   The data being added to a `DataSet` cannot be converted to a common language runtime type without losing precision."},{"content":"-   The row being added contains data that violates a Constraint that must be enforced on a <ph id=\"ph1\">`DataColumn`</ph> in the <ph id=\"ph2\">`DataSet`</ph>.","pos":[313,435],"source":"      -   The row being added contains data that violates a Constraint that must be enforced on a `DataColumn` in the `DataSet`."}]},{"pos":[28378,28390],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[28780,28988],"content":"Gets or sets the <bpt id=\"p1\">&lt;xref href=\"System.Data.LoadOption\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines how the adapter fills the <bpt id=\"p2\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> from the <bpt id=\"p3\">&lt;xref href=\"System.Data.Common.DbDataReader\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets or sets the <xref href=\"System.Data.LoadOption\"></xref> that determines how the adapter fills the <xref href=\"System.Data.DataTable\"></xref> from the <xref href=\"System.Data.Common.DbDataReader\"></xref>."},{"pos":[29137,29189],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.LoadOption\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.LoadOption\"></xref> value."},{"pos":[29764,29998],"content":"Adds a <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to the specified <bpt id=\"p2\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> and configures the schema to match that in the data source based on the specified <bpt id=\"p3\">&lt;xref href=\"System.Data.SchemaType\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Adds a <xref href=\"System.Data.DataTable\"></xref> to the specified <xref href=\"System.Data.DataSet\"></xref> and configures the schema to match that in the data source based on the specified <xref href=\"System.Data.SchemaType\"></xref>."},{"pos":[30011,34819],"content":"The FillSchema method retrieves the schema from the data source using the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>. The connection object associated with the <xref:System.Data.IDbDataAdapter.SelectCommand%2A> must be valid, but it does not need to be open. If the connection is closed before FillSchema is called, it is opened to retrieve data and then closed. If the connection is open before FillSchema is called, it remains open.       A FillSchema operation adds a <xref:System.Data.DataTable> to the destination <xref:System.Data.DataSet>. It then adds columns to the <xref:System.Data.DataColumnCollection> of the <xref:System.Data.DataTable>, and configures the following <xref:System.Data.DataColumn> properties if they exist at the data source:      -   <xref:System.Data.DataColumn.AllowDBNull%2A>      -   <xref:System.Data.DataColumn.AutoIncrement%2A>. You must set <xref:System.Data.DataColumn.AutoIncrementStep%2A> and <xref:System.Data.DataColumn.AutoIncrementSeed%2A> separately.      -   <xref:System.Data.DataColumn.MaxLength%2A>      -   <xref:System.Data.DataColumn.ReadOnly%2A>      -   <xref:System.Data.DataColumn.Unique%2A>       FillSchema also configures the <xref:System.Data.DataTable.PrimaryKey%2A> and <xref:System.Data.DataTable.Constraints%2A> properties according to the following rules:      -   If one or more primary key columns are returned by the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, they are used as the primary key columns for the <xref:System.Data.DataTable>.      -   If no primary key columns are returned but unique columns are, the unique columns are used as the primary key if, and only if, all the unique columns are nonnullable. If any of the columns are nullable, a <xref:System.Data.UniqueConstraint> is added to the <xref:System.Data.ConstraintCollection>, but the <xref:System.Data.DataTable.PrimaryKey%2A> property is not set.      -   If both primary key columns and unique columns are returned, the primary key columns are used as the primary key columns for the <xref:System.Data.DataTable>.      > [!NOTE] >  The underlying data store may allow column attributes that are not supported in a <xref:System.Data.DataColumn>, which causes some column attributes to not translate correctly. For example, [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] allows an identity column with a data type of tinyint whereas a <xref:System.Data.DataColumn> only allows Int16, Int32, and Int64 to have the <xref:System.Data.DataColumn.AutoIncrement%2A> property set. `FillSchema` silently ignores cases where the <xref:System.Data.DataColumn> cannot accurately mirror the data source and throws no exception.       Note that primary keys and unique constraints are added to the <xref:System.Data.ConstraintCollection> according to the preceding rules, but other constraint types are not added.       If a unique clustered index is defined on a column or columns in a SQL Server table and the primary key constraint is defined on a separate set of columns, then the names of the columns in the clustered index will be returned. To return the name or names of the primary key columns, use a query hint with the SELECT statement that specifies the name of the primary key index. For more information about specifying query hints, see [Query Hint (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).       If the <xref:System.Data.Common.DataAdapter> encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the subsequent columns, using the pattern \"*columnname*1\", \"*columnname*2\", \"*columnname*3\", and so on. If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern \"Column1\", \"Column2\", and so on. When multiple result sets are added to the <xref:System.Data.DataSet> each result set is placed in a separate table. Additional result sets are named by appending integral values to the specified table name (for example, \"Table\", \"Table1\", \"Table2\", and so on). Applications using column and table names should ensure that conflicts with these naming patterns does not occur.       FillSchema does not return any rows. Use the <xref:System.Data.Common.DataAdapter.Fill%2A> method to add rows to a <xref:System.Data.DataTable>.      > [!NOTE] >  When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result. To retrieve schema information for multiple results, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> with the <xref:System.Data.MissingSchemaAction> set to `AddWithKey`.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The FillSchema method retrieves the schema from the data source using the &lt;xref:System.Data.IDbDataAdapter.SelectCommand%2A&gt;.","pos":[0,125],"source":"The FillSchema method retrieves the schema from the data source using the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>."},{"content":"The connection object associated with the &lt;xref:System.Data.IDbDataAdapter.SelectCommand%2A&gt; must be valid, but it does not need to be open.","pos":[126,266],"source":" The connection object associated with the <xref:System.Data.IDbDataAdapter.SelectCommand%2A> must be valid, but it does not need to be open."},{"content":"If the connection is closed before FillSchema is called, it is opened to retrieve data and then closed.","pos":[267,370]},{"content":"If the connection is open before FillSchema is called, it remains open.","pos":[371,442]},{"content":"A FillSchema operation adds a &lt;xref:System.Data.DataTable&gt; to the destination &lt;xref:System.Data.DataSet&gt;.","pos":[449,554],"source":"       A FillSchema operation adds a <xref:System.Data.DataTable> to the destination <xref:System.Data.DataSet>."},{"content":"It then adds columns to the &lt;xref:System.Data.DataColumnCollection&gt; of the &lt;xref:System.Data.DataTable&gt;, and configures the following &lt;xref:System.Data.DataColumn&gt; properties if they exist at the data source:      -   &lt;xref:System.Data.DataColumn.AllowDBNull%2A&gt;      -   &lt;xref:System.Data.DataColumn.AutoIncrement%2A&gt;.","pos":[555,874],"source":" It then adds columns to the <xref:System.Data.DataColumnCollection> of the <xref:System.Data.DataTable>, and configures the following <xref:System.Data.DataColumn> properties if they exist at the data source:      -   <xref:System.Data.DataColumn.AllowDBNull%2A>      -   <xref:System.Data.DataColumn.AutoIncrement%2A>."},{"content":"You must set &lt;xref:System.Data.DataColumn.AutoIncrementStep%2A&gt; and &lt;xref:System.Data.DataColumn.AutoIncrementSeed%2A&gt; separately.","pos":[875,1005],"source":" You must set <xref:System.Data.DataColumn.AutoIncrementStep%2A> and <xref:System.Data.DataColumn.AutoIncrementSeed%2A> separately."},{"content":"-   &lt;xref:System.Data.DataColumn.MaxLength%2A&gt;      -   &lt;xref:System.Data.DataColumn.ReadOnly%2A&gt;      -   &lt;xref:System.Data.DataColumn.Unique%2A&gt;       FillSchema also configures the &lt;xref:System.Data.DataTable.PrimaryKey%2A&gt; and &lt;xref:System.Data.DataTable.Constraints%2A&gt; properties according to the following rules:      -   If one or more primary key columns are returned by the &lt;xref:System.Data.IDbDataAdapter.SelectCommand%2A&gt;, they are used as the primary key columns for the &lt;xref:System.Data.DataTable&gt;.","pos":[1011,1525],"source":"      -   <xref:System.Data.DataColumn.MaxLength%2A>      -   <xref:System.Data.DataColumn.ReadOnly%2A>      -   <xref:System.Data.DataColumn.Unique%2A>       FillSchema also configures the <xref:System.Data.DataTable.PrimaryKey%2A> and <xref:System.Data.DataTable.Constraints%2A> properties according to the following rules:      -   If one or more primary key columns are returned by the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, they are used as the primary key columns for the <xref:System.Data.DataTable>."},{"content":"-   If no primary key columns are returned but unique columns are, the unique columns are used as the primary key if, and only if, all the unique columns are nonnullable.","pos":[1531,1701]},{"content":"If any of the columns are nullable, a &lt;xref:System.Data.UniqueConstraint&gt; is added to the &lt;xref:System.Data.ConstraintCollection&gt;, but the &lt;xref:System.Data.DataTable.PrimaryKey%2A&gt; property is not set.","pos":[1702,1904],"source":" If any of the columns are nullable, a <xref:System.Data.UniqueConstraint> is added to the <xref:System.Data.ConstraintCollection>, but the <xref:System.Data.DataTable.PrimaryKey%2A> property is not set."},{"content":"-   If both primary key columns and unique columns are returned, the primary key columns are used as the primary key columns for the &lt;xref:System.Data.DataTable&gt;.","pos":[1910,2072],"source":"      -   If both primary key columns and unique columns are returned, the primary key columns are used as the primary key columns for the <xref:System.Data.DataTable>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The underlying data store may allow column attributes that are not supported in a &lt;xref:System.Data.DataColumn&gt;, which causes some column attributes to not translate correctly.","pos":[2078,2267],"source":"      > [!NOTE] >  The underlying data store may allow column attributes that are not supported in a <xref:System.Data.DataColumn>, which causes some column attributes to not translate correctly."},{"content":"For example, <ph id=\"ph1\">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph> allows an identity column with a data type of tinyint whereas a &lt;xref:System.Data.DataColumn&gt; only allows Int16, Int32, and Int64 to have the &lt;xref:System.Data.DataColumn.AutoIncrement%2A&gt; property set.","pos":[2268,2541],"source":" For example, [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] allows an identity column with a data type of tinyint whereas a <xref:System.Data.DataColumn> only allows Int16, Int32, and Int64 to have the <xref:System.Data.DataColumn.AutoIncrement%2A> property set."},{"content":"<ph id=\"ph1\">`FillSchema`</ph> silently ignores cases where the &lt;xref:System.Data.DataColumn&gt; cannot accurately mirror the data source and throws no exception.","pos":[2542,2683],"source":"`FillSchema` silently ignores cases where the <xref:System.Data.DataColumn> cannot accurately mirror the data source and throws no exception."},{"content":"Note that primary keys and unique constraints are added to the &lt;xref:System.Data.ConstraintCollection&gt; according to the preceding rules, but other constraint types are not added.","pos":[2690,2868],"source":"       Note that primary keys and unique constraints are added to the <xref:System.Data.ConstraintCollection> according to the preceding rules, but other constraint types are not added."},{"content":"If a unique clustered index is defined on a column or columns in a SQL Server table and the primary key constraint is defined on a separate set of columns, then the names of the columns in the clustered index will be returned.","pos":[2875,3101]},{"content":"To return the name or names of the primary key columns, use a query hint with the SELECT statement that specifies the name of the primary key index.","pos":[3102,3250]},{"content":"For more information about specifying query hints, see <bpt id=\"p1\">[</bpt>Query Hint (Transact-SQL)<ept id=\"p1\">](http://msdn.microsoft.com/library/ms181714.aspx)</ept>.","pos":[3251,3383],"source":" For more information about specifying query hints, see [Query Hint (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx)."},{"content":"If the &lt;xref:System.Data.Common.DataAdapter&gt; encounters duplicate columns while populating a &lt;xref:System.Data.DataTable&gt;, it generates names for the subsequent columns, using the pattern \"<bpt id=\"p1\">*</bpt>columnname<ept id=\"p1\">*</ept>1\", \"<bpt id=\"p2\">*</bpt>columnname<ept id=\"p2\">*</ept>2\", \"<bpt id=\"p3\">*</bpt>columnname<ept id=\"p3\">*</ept>3\", and so on.","pos":[3390,3639],"source":"       If the <xref:System.Data.Common.DataAdapter> encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the subsequent columns, using the pattern \"*columnname*1\", \"*columnname*2\", \"*columnname*3\", and so on."},{"content":"If the incoming data contains unnamed columns, they are placed in the &lt;xref:System.Data.DataSet&gt; according to the pattern \"Column1\", \"Column2\", and so on.","pos":[3640,3794],"source":" If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern \"Column1\", \"Column2\", and so on."},{"content":"When multiple result sets are added to the &lt;xref:System.Data.DataSet&gt; each result set is placed in a separate table.","pos":[3795,3911],"source":" When multiple result sets are added to the <xref:System.Data.DataSet> each result set is placed in a separate table."},{"content":"Additional result sets are named by appending integral values to the specified table name (for example, \"Table\", \"Table1\", \"Table2\", and so on).","pos":[3912,4056]},{"content":"Applications using column and table names should ensure that conflicts with these naming patterns does not occur.","pos":[4057,4170]},{"content":"FillSchema does not return any rows.","pos":[4177,4213]},{"content":"Use the &lt;xref:System.Data.Common.DataAdapter.Fill%2A&gt; method to add rows to a &lt;xref:System.Data.DataTable&gt;.","pos":[4214,4321],"source":" Use the <xref:System.Data.Common.DataAdapter.Fill%2A> method to add rows to a <xref:System.Data.DataTable>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  When handling batch SQL statements that return multiple results, the implementation of &lt;xref:System.Data.Common.DbDataAdapter.FillSchema%2A&gt; for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result.","pos":[4327,4584],"source":"      > [!NOTE] >  When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result."},{"content":"To retrieve schema information for multiple results, use &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; with the &lt;xref:System.Data.MissingSchemaAction&gt; set to <ph id=\"ph1\">`AddWithKey`</ph>.","pos":[4585,4758],"source":" To retrieve schema information for multiple results, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> with the <xref:System.Data.MissingSchemaAction> set to `AddWithKey`."}]},{"pos":[35045,35140],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to be filled with the schema from the data source.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Data.DataSet\"></xref> to be filled with the schema from the data source."},{"pos":[35216,35278],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Data.SchemaType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Data.SchemaType\"></xref> values."},{"pos":[35346,35461],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that contains schema information returned from the data source.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.DataTable\"></xref> object that contains schema information returned from the data source."},{"pos":[36126,36234],"content":"Adds a <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to the specified <bpt id=\"p2\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Adds a <xref href=\"System.Data.DataTable\"></xref> to the specified <xref href=\"System.Data.DataSet\"></xref>."},{"pos":[36504,36618],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to be filled from the <bpt id=\"p2\">&lt;xref href=\"System.Data.IDataReader\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Data.DataTable\"></xref> to be filled from the <xref href=\"System.Data.IDataReader\"></xref>."},{"pos":[36694,36756],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Data.SchemaType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Data.SchemaType\"></xref> values."},{"pos":[36833,36972],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Data.IDataReader\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to be used as the data source when filling the <bpt id=\"p2\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Data.IDataReader\"></xref> to be used as the data source when filling the <xref href=\"System.Data.DataTable\"></xref>."},{"pos":[37038,37153],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that contains schema information returned from the data source.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.DataTable\"></xref> object that contains schema information returned from the data source."},{"pos":[37857,37965],"content":"Adds a <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to the specified <bpt id=\"p2\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Adds a <xref href=\"System.Data.DataTable\"></xref> to the specified <xref href=\"System.Data.DataSet\"></xref>."},{"pos":[38246,38360],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to be filled from the <bpt id=\"p2\">&lt;xref href=\"System.Data.IDataReader\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Data.DataTable\"></xref> to be filled from the <xref href=\"System.Data.IDataReader\"></xref>."},{"pos":[38436,38498],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Data.SchemaType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Data.SchemaType\"></xref> values."},{"pos":[38563,38617],"content":"The name of the source table to use for table mapping.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the source table to use for table mapping.","pos":[0,54]}]},{"pos":[38694,38833],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Data.IDataReader\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to be used as the data source when filling the <bpt id=\"p2\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Data.IDataReader\"></xref> to be used as the data source when filling the <xref href=\"System.Data.DataTable\"></xref>."},{"pos":[38901,39047],"content":"A reference to a collection of <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects that were added to the <bpt id=\"p2\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A reference to a collection of <xref href=\"System.Data.DataTable\"></xref> objects that were added to the <xref href=\"System.Data.DataSet\"></xref>."},{"pos":[39511,39586],"content":"Gets the parameters set by the user when executing an SQL SELECT statement.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the parameters set by the user when executing an SQL SELECT statement.","pos":[0,75]}]},{"pos":[39767,39880],"content":"An array of <bpt id=\"p1\">&lt;xref href=\"System.Data.IDataParameter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects that contains the parameters set by the user.","needQuote":true,"needEscape":true,"source":"An array of <xref href=\"System.Data.IDataParameter\"></xref> objects that contains the parameters set by the user."},{"pos":[40346,40450],"content":"Indicates whether a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.DataTableMappingCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> has been created.","needQuote":true,"needEscape":true,"source":"Indicates whether a <xref href=\"System.Data.Common.DataTableMappingCollection\"></xref> has been created."},{"pos":[40587,40811],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if a <bpt id=\"p2\">&lt;xref href=\"System.Data.Common.DataTableMappingCollection\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> has been created; otherwise <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if a <xref href=\"System.Data.Common.DataTableMappingCollection\"></xref> has been created; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[41292,41382],"content":"Determines the action to take when incoming data does not have a matching table or column.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines the action to take when incoming data does not have a matching table or column.","pos":[0,90]}]},{"pos":[41394,41554],"content":"The <xref:System.Data.Common.DataAdapter.TableMappings%2A> property provides the master mapping between the returned records and the <xref:System.Data.DataSet>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.Data.Common.DataAdapter.TableMappings%2A&gt; property provides the master mapping between the returned records and the &lt;xref:System.Data.DataSet&gt;.","pos":[0,160],"source":"The <xref:System.Data.Common.DataAdapter.TableMappings%2A> property provides the master mapping between the returned records and the <xref:System.Data.DataSet>."}]},{"pos":[42141,42304],"content":"One of the <xref href=\"System.Data.MissingMappingAction\"></xref> values. The default is <xref uid=\"langword_csharp_Passthrough\" name=\"Passthrough\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Data.MissingMappingAction\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","pos":[0,72],"source":"One of the <xref href=\"System.Data.MissingMappingAction\"></xref> values."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Passthrough\" name=\"Passthrough\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[73,163],"source":" The default is <xref uid=\"langword_csharp_Passthrough\" name=\"Passthrough\" href=\"\"></xref>."}]},{"pos":[42478,42571],"content":"The value set is not one of the <bpt id=\"p1\">&lt;xref href=\"System.Data.MissingMappingAction\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"The value set is not one of the <xref href=\"System.Data.MissingMappingAction\"></xref> values."},{"pos":[42969,43090],"content":"Determines the action to take when existing <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> schema does not match incoming data.","needQuote":true,"needEscape":true,"source":"Determines the action to take when existing <xref href=\"System.Data.DataSet\"></xref> schema does not match incoming data."},{"pos":[43688,43834],"content":"One of the <xref href=\"System.Data.MissingSchemaAction\"></xref> values. The default is <xref uid=\"langword_csharp_Add\" name=\"Add\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Data.MissingSchemaAction\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","pos":[0,71],"source":"One of the <xref href=\"System.Data.MissingSchemaAction\"></xref> values."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Add\" name=\"Add\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[72,146],"source":" The default is <xref uid=\"langword_csharp_Add\" name=\"Add\" href=\"\"></xref>."}]},{"pos":[44007,44099],"content":"The value set is not one of the <bpt id=\"p1\">&lt;xref href=\"System.Data.MissingSchemaAction\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"The value set is not one of the <xref href=\"System.Data.MissingSchemaAction\"></xref> values."},{"pos":[44579,44678],"content":"Invoked when an error occurs during a <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Fill\" name=\"Fill\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Invoked when an error occurs during a <xref uid=\"langword_csharp_Fill\" name=\"Fill\" href=\"\"></xref>."},{"pos":[44871,44932],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.FillErrorEventArgs\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.FillErrorEventArgs\"></xref> object."},{"pos":[45407,45649],"content":"Resets &lt;xref:System.Data.Common.DataAdapter.FillLoadOption<bpt id=\"p1\">*</bpt>&gt; to its default state and causes <ph id=\"ph1\">&amp;lt;</ph>xref:System.Data.Common.DataAdapter.Fill%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph> to honor &lt;xref:System.Data.Common.DataAdapter.AcceptChangesDuringFill<ept id=\"p1\">*</ept>&gt;.","needQuote":true,"needEscape":true,"source":"Resets <xref:System.Data.Common.DataAdapter.FillLoadOption*> to its default state and causes &lt;xref:System.Data.Common.DataAdapter.Fill%2A?displayProperty=fullName&gt; to honor <xref:System.Data.Common.DataAdapter.AcceptChangesDuringFill*>."},{"pos":[46246,46409],"content":"Gets or sets whether the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Fill\" name=\"Fill\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> method should return provider-specific values or common CLS-compliant values.","needQuote":true,"needEscape":true,"source":"Gets or sets whether the <xref uid=\"langword_csharp_Fill\" name=\"Fill\" href=\"\"></xref> method should return provider-specific values or common CLS-compliant values."},{"pos":[46421,46450],"content":"The default value is <ph id=\"ph1\">`false`</ph>.","needQuote":true,"needEscape":true,"extradata":"MT","source":"The default value is `false`."},{"pos":[46594,46881],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Fill\" name=\"Fill\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> method should return provider-specific values; otherwise <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> to return common CLS-compliant values.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref uid=\"langword_csharp_Fill\" name=\"Fill\" href=\"\"></xref> method should return provider-specific values; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to return common CLS-compliant values."},{"pos":[47467,47582],"content":"Determines whether the <xref:System.Data.Common.DataAdapter.AcceptChangesDuringFill*> property should be persisted.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether the &lt;xref:System.Data.Common.DataAdapter.AcceptChangesDuringFill*&gt; property should be persisted.","pos":[0,115],"source":"Determines whether the <xref:System.Data.Common.DataAdapter.AcceptChangesDuringFill*> property should be persisted."}]},{"pos":[47746,47973],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the &lt;xref:System.Data.Common.DataAdapter.AcceptChangesDuringFill*&gt; property is persisted; otherwise <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref:System.Data.Common.DataAdapter.AcceptChangesDuringFill*> property is persisted; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[48525,48631],"content":"Determines whether the <xref:System.Data.Common.DataAdapter.FillLoadOption*> property should be persisted.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether the &lt;xref:System.Data.Common.DataAdapter.FillLoadOption*&gt; property should be persisted.","pos":[0,106],"source":"Determines whether the <xref:System.Data.Common.DataAdapter.FillLoadOption*> property should be persisted."}]},{"pos":[48786,49004],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the &lt;xref:System.Data.Common.DataAdapter.FillLoadOption*&gt; property is persisted; otherwise <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref:System.Data.Common.DataAdapter.FillLoadOption*> property is persisted; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[49542,49673],"content":"Determines whether one or more <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.DataTableMapping\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects exist and they should be persisted.","needQuote":true,"needEscape":true,"source":"Determines whether one or more <xref href=\"System.Data.Common.DataTableMapping\"></xref> objects exist and they should be persisted."},{"pos":[49830,50051],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if one or more <bpt id=\"p2\">&lt;xref href=\"System.Data.Common.DataTableMapping\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> objects exist; otherwise <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if one or more <xref href=\"System.Data.Common.DataTableMapping\"></xref> objects exist; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[50648,50706],"content":"Indicates how a source table is mapped to a dataset table.","needQuote":true,"needEscape":true,"nodes":[{"content":"Indicates how a source table is mapped to a dataset table.","pos":[0,58]}]},{"pos":[50719,50996],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Common.DataAdapter> instance is cast to an <xref:System.Data.IDataAdapter> interface.       Fore more information, see <xref:System.Data.IDataAdapter.TableMappings%2A>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Common.DataAdapter> instance is cast to an <xref:System.Data.IDataAdapter> interface.       Fore more information, see <xref:System.Data.IDataAdapter.TableMappings%2A>.","pos":[0,275],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the &lt;xref:System.Data.Common.DataAdapter&gt; instance is cast to an &lt;xref:System.Data.IDataAdapter&gt; interface.","pos":[60,192],"source":" It can be used only when the <xref:System.Data.Common.DataAdapter> instance is cast to an <xref:System.Data.IDataAdapter> interface."},{"content":"Fore more information, see &lt;xref:System.Data.IDataAdapter.TableMappings%2A&gt;.","pos":[199,275],"source":"       Fore more information, see <xref:System.Data.IDataAdapter.TableMappings%2A>."}]}]},{"pos":[51184,51350],"content":"A collection that provides the master mapping between the returned records and the <xref href=\"System.Data.DataSet\"></xref>. The default value is an empty collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"A collection that provides the master mapping between the returned records and the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,124],"source":"A collection that provides the master mapping between the returned records and the <xref href=\"System.Data.DataSet\"></xref>."},{"content":"The default value is an empty collection.","pos":[125,166]}]},{"pos":[51818,51941],"content":"Gets a collection that provides the master mapping between a source table and a <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets a collection that provides the master mapping between a source table and a <xref href=\"System.Data.DataTable\"></xref>."},{"pos":[51953,52209],"content":"When reconciling changes, the <xref:System.Data.Common.DataAdapter> uses the <xref:System.Data.Common.DataTableMappingCollection> collection to associate the column names used by the data source with the column names used by the <xref:System.Data.DataSet>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"When reconciling changes, the &lt;xref:System.Data.Common.DataAdapter&gt; uses the &lt;xref:System.Data.Common.DataTableMappingCollection&gt; collection to associate the column names used by the data source with the column names used by the &lt;xref:System.Data.DataSet&gt;.","pos":[0,256],"source":"When reconciling changes, the <xref:System.Data.Common.DataAdapter> uses the <xref:System.Data.Common.DataTableMappingCollection> collection to associate the column names used by the data source with the column names used by the <xref:System.Data.DataSet>."}]},{"pos":[53000,53166],"content":"A collection that provides the master mapping between the returned records and the <xref href=\"System.Data.DataSet\"></xref>. The default value is an empty collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"A collection that provides the master mapping between the returned records and the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,124],"source":"A collection that provides the master mapping between the returned records and the <xref href=\"System.Data.DataSet\"></xref>."},{"content":"The default value is an empty collection.","pos":[125,166]}]},{"pos":[53641,53864],"content":"Calls the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row in the specified <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> from a <bpt id=\"p2\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> named \"Table.\"","needQuote":true,"needEscape":true,"source":"Calls the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row in the specified <xref href=\"System.Data.DataSet\"></xref> from a <xref href=\"System.Data.DataTable\"></xref> named \"Table.\""},{"pos":[53877,60787],"content":"The update is performed on a by-row basis. For every inserted, modified, and deleted row, the Update method determines the type of change that has been performed on it (Insert, Update or Delete). Depending on the type of change, the `Insert`, `Update,` or `Delete` command template executes to propagate the modified row to the data source. When an application calls the Update method, the <xref:System.Data.Common.DataAdapter> examines the <xref:System.Data.DataRow.RowState%2A> property, and executes the required INSERT, UPDATE, or DELETE statements iteratively for each row, based on the order of the indexes configured in the <xref:System.Data.DataSet>. For example, Update might execute a DELETE statement, followed by an INSERT statement, and then another DELETE statement, due to the ordering of the rows in the <xref:System.Data.DataTable>.       It should be noted that these statements are not performed as a batch process; each row is updated individually. An application can call the <xref:System.Data.DataSet.GetChanges%2A> method in situations where you must control the sequence of statement types (for example, INSERT before UPDATE). For more information, see [Updating Data Sources with DataAdapters](~/add/includes/ajax-current-ext-md.md).       If INSERT, UPDATE, or DELETE statements have not been specified, the Update method generates an exception. However, you can create a <xref:System.Data.SqlClient.SqlCommandBuilder> or <xref:System.Data.OleDb.OleDbCommandBuilder> object to automatically generate SQL statements for single-table updates if you set the `SelectCommand` property of a .NET Framework data provider. Then, any additional SQL statements that you do not set are generated by the **CommandBuilder**. This generation logic requires key column information to be present in the <xref:System.Data.DataSet>. For more information see [Generating Commands with CommandBuilders](~/add/includes/ajax-current-ext-md.md).       The Update method retrieves rows from the table listed in the first mapping before performing an update. The Update then refreshes the row using the value of the <xref:System.Data.IDbCommand.UpdatedRowSource%2A> property. Any additional rows returned are ignored.       After any data is loaded back into the <xref:System.Data.DataSet>, the <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised, allowing the user to inspect the reconciled <xref:System.Data.DataSet> row and any output parameters returned by the command. After a row updates successfully, the changes to that row are accepted.       When using Update, the order of execution is as follows:      1.  The values in the <xref:System.Data.DataRow> are moved to the parameter values.      2.  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> event is raised.      3.  The command executes.      4.  If the command is set to `FirstReturnedRecord`, then the first returned result is placed in the <xref:System.Data.DataRow>.      5.  If there are output parameters, they are placed in the <xref:System.Data.DataRow>.      6.  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised.      7.  <xref:System.Data.DataRow.AcceptChanges%2A?displayProperty=fullName> is called. This will raise both the <xref:System.Data.DataTable.RowChanging?displayProperty=fullName> and <xref:System.Data.DataTable.RowChanged?displayProperty=fullName> events for the updated <xref:System.Data.DataRow>.       Each command associated with the <xref:System.Data.Common.DataAdapter> usually has a parameters collection associated with it. Parameters are mapped to the current row through the `SourceColumn` and `SourceVersion` properties of a.NET data provider's `Parameter` class. `SourceColumn` refers to a <xref:System.Data.DataTable> column that the <xref:System.Data.Common.DataAdapter> references to obtain parameter values for the current row.       `SourceColumn` refers to the unmapped column name before any table mappings have been applied. If `SourceColumn` refers to a nonexistent column, the action taken depends on one of the following <xref:System.Data.MissingMappingAction> values.      |Enumeration value|Action taken|   |-----------------------|------------------|   |`MissingMappingAction.Passthrough`|Use the source column names and table names in the <xref:System.Data.DataSet> if no mapping is present.|   |`MissingMappingAction.Ignore`|A <xref:System.SystemException> is generated. When the mappings are explicitly set, a missing mapping for an input parameter is usually the result of an error.|   |`MissingMappingAction.Error`|A <xref:System.SystemException> is generated.|       The `SourceColumn` property is also used to map the value for output or input/output parameters back to the `DataSet`. An exception is generated if it refers to a nonexistent column.       The `SourceVersion` property of a .NET data provider's `Parameter` class determines whether to use the Original, Current, or Proposed version of the column value. This capability is often used to include original values in the WHERE clause of an UPDATE statement to check for optimistic concurrency violations.       Calling the <xref:System.Data.DataSet.AcceptChanges%2A> method or <xref:System.Data.DataTable.AcceptChanges%2A> method will commit all changes in the <xref:System.Data.DataSet> or <xref:System.Data.DataTable>. If either of these methods are called before the <xref:System.Data.Common.DbDataAdapter.Update%2A> method is called, no changes will be committed when the <xref:System.Data.Common.DbDataAdapter.Update%2A> method is called, unless further changes have been made since <xref:System.Data.DataSet.AcceptChanges%2A> or <xref:System.Data.DataTable.AcceptChanges%2A> was called.      > [!NOTE] >  If an error occurs while updating a row, an exception is thrown and execution of the update is discontinued. To continue the update operation without generating exceptions when an error is encountered, set the <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> property to `true` before calling <xref:System.Data.Common.DbDataAdapter.Update%2A>. You may also respond to errors on a per-row basis within the `RowUpdated` event of a DataAdapter. To continue the update operation without generating an exception within the `RowUpdated` event, set the <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> property of the <xref:System.Data.Common.RowUpdatedEventArgs> to <xref:System.Data.UpdateStatus>.   >    >  For every column that you propagate to the data source onUpdate, a parameter should be added to the `InsertCommand`, `UpdateCommand`, or `DeleteCommand`. The `SourceColumn` property of the parameter should be set to the name of the column. This setting indicates that the value of the parameter is not set manually, but is taken from the particular column in the currently processed row.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The update is performed on a by-row basis.","pos":[0,42]},{"content":"For every inserted, modified, and deleted row, the Update method determines the type of change that has been performed on it (Insert, Update or Delete).","pos":[43,195]},{"content":"Depending on the type of change, the <ph id=\"ph1\">`Insert`</ph>, <ph id=\"ph2\">`Update,`</ph> or <ph id=\"ph3\">`Delete`</ph> command template executes to propagate the modified row to the data source.","pos":[196,340],"source":" Depending on the type of change, the `Insert`, `Update,` or `Delete` command template executes to propagate the modified row to the data source."},{"content":"When an application calls the Update method, the &lt;xref:System.Data.Common.DataAdapter&gt; examines the &lt;xref:System.Data.DataRow.RowState%2A&gt; property, and executes the required INSERT, UPDATE, or DELETE statements iteratively for each row, based on the order of the indexes configured in the &lt;xref:System.Data.DataSet&gt;.","pos":[341,658],"source":" When an application calls the Update method, the <xref:System.Data.Common.DataAdapter> examines the <xref:System.Data.DataRow.RowState%2A> property, and executes the required INSERT, UPDATE, or DELETE statements iteratively for each row, based on the order of the indexes configured in the <xref:System.Data.DataSet>."},{"content":"For example, Update might execute a DELETE statement, followed by an INSERT statement, and then another DELETE statement, due to the ordering of the rows in the &lt;xref:System.Data.DataTable&gt;.","pos":[659,849],"source":" For example, Update might execute a DELETE statement, followed by an INSERT statement, and then another DELETE statement, due to the ordering of the rows in the <xref:System.Data.DataTable>."},{"content":"It should be noted that these statements are not performed as a batch process; each row is updated individually.","pos":[856,968]},{"content":"An application can call the &lt;xref:System.Data.DataSet.GetChanges%2A&gt; method in situations where you must control the sequence of statement types (for example, INSERT before UPDATE).","pos":[969,1150],"source":" An application can call the <xref:System.Data.DataSet.GetChanges%2A> method in situations where you must control the sequence of statement types (for example, INSERT before UPDATE)."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Updating Data Sources with DataAdapters<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1151,1258],"source":" For more information, see [Updating Data Sources with DataAdapters](~/add/includes/ajax-current-ext-md.md)."},{"content":"If INSERT, UPDATE, or DELETE statements have not been specified, the Update method generates an exception.","pos":[1265,1371]},{"content":"However, you can create a &lt;xref:System.Data.SqlClient.SqlCommandBuilder&gt; or &lt;xref:System.Data.OleDb.OleDbCommandBuilder&gt; object to automatically generate SQL statements for single-table updates if you set the <ph id=\"ph1\">`SelectCommand`</ph> property of a .NET Framework data provider.","pos":[1372,1640],"source":" However, you can create a <xref:System.Data.SqlClient.SqlCommandBuilder> or <xref:System.Data.OleDb.OleDbCommandBuilder> object to automatically generate SQL statements for single-table updates if you set the `SelectCommand` property of a .NET Framework data provider."},{"content":"Then, any additional SQL statements that you do not set are generated by the <bpt id=\"p1\">**</bpt>CommandBuilder<ept id=\"p1\">**</ept>.","pos":[1641,1737],"source":" Then, any additional SQL statements that you do not set are generated by the **CommandBuilder**."},{"content":"This generation logic requires key column information to be present in the &lt;xref:System.Data.DataSet&gt;.","pos":[1738,1840],"source":" This generation logic requires key column information to be present in the <xref:System.Data.DataSet>."},{"content":"For more information see <bpt id=\"p1\">[</bpt>Generating Commands with CommandBuilders<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1841,1948],"source":" For more information see [Generating Commands with CommandBuilders](~/add/includes/ajax-current-ext-md.md)."},{"content":"The Update method retrieves rows from the table listed in the first mapping before performing an update.","pos":[1955,2059]},{"content":"The Update then refreshes the row using the value of the &lt;xref:System.Data.IDbCommand.UpdatedRowSource%2A&gt; property.","pos":[2060,2176],"source":" The Update then refreshes the row using the value of the <xref:System.Data.IDbCommand.UpdatedRowSource%2A> property."},{"content":"Any additional rows returned are ignored.","pos":[2177,2218]},{"content":"After any data is loaded back into the &lt;xref:System.Data.DataSet&gt;, the &lt;xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A&gt; event is raised, allowing the user to inspect the reconciled &lt;xref:System.Data.DataSet&gt; row and any output parameters returned by the command.","pos":[2225,2494],"source":"       After any data is loaded back into the <xref:System.Data.DataSet>, the <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised, allowing the user to inspect the reconciled <xref:System.Data.DataSet> row and any output parameters returned by the command."},{"content":"After a row updates successfully, the changes to that row are accepted.","pos":[2495,2566]},{"content":"When using Update, the order of execution is as follows:      1.","pos":[2573,2637]},{"content":"The values in the &lt;xref:System.Data.DataRow&gt; are moved to the parameter values.","pos":[2639,2718],"source":"  The values in the <xref:System.Data.DataRow> are moved to the parameter values."},{"content":"2.","pos":[2724,2726]},{"content":"The &lt;xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A&gt; event is raised.","pos":[2728,2805],"source":"  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> event is raised."},{"content":"3.","pos":[2811,2813]},{"content":"The command executes.","pos":[2815,2836]},{"content":"4.","pos":[2842,2844]},{"content":"If the command is set to <ph id=\"ph1\">`FirstReturnedRecord`</ph>, then the first returned result is placed in the &lt;xref:System.Data.DataRow&gt;.","pos":[2846,2969],"source":"  If the command is set to `FirstReturnedRecord`, then the first returned result is placed in the <xref:System.Data.DataRow>."},{"content":"5.","pos":[2975,2977]},{"content":"If there are output parameters, they are placed in the &lt;xref:System.Data.DataRow&gt;.","pos":[2979,3061],"source":"  If there are output parameters, they are placed in the <xref:System.Data.DataRow>."},{"content":"6.","pos":[3067,3069]},{"content":"The &lt;xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A&gt; event is raised.","pos":[3071,3147],"source":"  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised."},{"content":"7.","pos":[3153,3155]},{"content":"&lt;xref:System.Data.DataRow.AcceptChanges%2A?displayProperty=fullName&gt; is called.","pos":[3157,3236],"source":"  <xref:System.Data.DataRow.AcceptChanges%2A?displayProperty=fullName> is called."},{"content":"This will raise both the &lt;xref:System.Data.DataTable.RowChanging?displayProperty=fullName&gt; and &lt;xref:System.Data.DataTable.RowChanged?displayProperty=fullName&gt; events for the updated &lt;xref:System.Data.DataRow&gt;.","pos":[3237,3447],"source":" This will raise both the <xref:System.Data.DataTable.RowChanging?displayProperty=fullName> and <xref:System.Data.DataTable.RowChanged?displayProperty=fullName> events for the updated <xref:System.Data.DataRow>."},{"content":"Each command associated with the &lt;xref:System.Data.Common.DataAdapter&gt; usually has a parameters collection associated with it.","pos":[3454,3580],"source":"       Each command associated with the <xref:System.Data.Common.DataAdapter> usually has a parameters collection associated with it."},{"content":"Parameters are mapped to the current row through the <ph id=\"ph1\">`SourceColumn`</ph> and <ph id=\"ph2\">`SourceVersion`</ph> properties of a.NET data provider's <ph id=\"ph3\">`Parameter`</ph> class.","pos":[3581,3723],"source":" Parameters are mapped to the current row through the `SourceColumn` and `SourceVersion` properties of a.NET data provider's `Parameter` class."},{"content":"<ph id=\"ph1\">`SourceColumn`</ph> refers to a &lt;xref:System.Data.DataTable&gt; column that the &lt;xref:System.Data.Common.DataAdapter&gt; references to obtain parameter values for the current row.","pos":[3724,3892],"source":"`SourceColumn` refers to a <xref:System.Data.DataTable> column that the <xref:System.Data.Common.DataAdapter> references to obtain parameter values for the current row."},{"content":"<ph id=\"ph1\">`SourceColumn`</ph> refers to the unmapped column name before any table mappings have been applied.","pos":[3899,3993],"source":"`SourceColumn` refers to the unmapped column name before any table mappings have been applied."},{"content":"If <ph id=\"ph1\">`SourceColumn`</ph> refers to a nonexistent column, the action taken depends on one of the following &lt;xref:System.Data.MissingMappingAction&gt; values.","pos":[3994,4140],"source":" If `SourceColumn` refers to a nonexistent column, the action taken depends on one of the following <xref:System.Data.MissingMappingAction> values."},{"content":"|Enumeration value|Action taken|   |-----------------------|------------------|   |<ph id=\"ph1\">`MissingMappingAction.Passthrough`</ph>|Use the source column names and table names in the &lt;xref:System.Data.DataSet&gt; if no mapping is present.|   |<ph id=\"ph2\">`MissingMappingAction.Ignore`</ph>|A &lt;xref:System.SystemException&gt; is generated.","pos":[4146,4447],"source":"      |Enumeration value|Action taken|   |-----------------------|------------------|   |`MissingMappingAction.Passthrough`|Use the source column names and table names in the <xref:System.Data.DataSet> if no mapping is present.|   |`MissingMappingAction.Ignore`|A <xref:System.SystemException> is generated."},{"content":"When the mappings are explicitly set, a missing mapping for an input parameter is usually the result of an error.|   |<ph id=\"ph1\">`MissingMappingAction.Error`</ph>|A &lt;xref:System.SystemException&gt; is generated.|       The <ph id=\"ph2\">`SourceColumn`</ph> property is also used to map the value for output or input/output parameters back to the <ph id=\"ph3\">`DataSet`</ph>.","pos":[4448,4766],"source":" When the mappings are explicitly set, a missing mapping for an input parameter is usually the result of an error.|   |`MissingMappingAction.Error`|A <xref:System.SystemException> is generated.|       The `SourceColumn` property is also used to map the value for output or input/output parameters back to the `DataSet`."},{"content":"An exception is generated if it refers to a nonexistent column.","pos":[4767,4830]},{"content":"The <ph id=\"ph1\">`SourceVersion`</ph> property of a .NET data provider's <ph id=\"ph2\">`Parameter`</ph> class determines whether to use the Original, Current, or Proposed version of the column value.","pos":[4837,4999],"source":"       The `SourceVersion` property of a .NET data provider's `Parameter` class determines whether to use the Original, Current, or Proposed version of the column value."},{"content":"This capability is often used to include original values in the WHERE clause of an UPDATE statement to check for optimistic concurrency violations.","pos":[5000,5147]},{"content":"Calling the &lt;xref:System.Data.DataSet.AcceptChanges%2A&gt; method or &lt;xref:System.Data.DataTable.AcceptChanges%2A&gt; method will commit all changes in the &lt;xref:System.Data.DataSet&gt; or &lt;xref:System.Data.DataTable&gt;.","pos":[5154,5363],"source":"       Calling the <xref:System.Data.DataSet.AcceptChanges%2A> method or <xref:System.Data.DataTable.AcceptChanges%2A> method will commit all changes in the <xref:System.Data.DataSet> or <xref:System.Data.DataTable>."},{"content":"If either of these methods are called before the &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt; method is called, no changes will be committed when the &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt; method is called, unless further changes have been made since &lt;xref:System.Data.DataSet.AcceptChanges%2A&gt; or &lt;xref:System.Data.DataTable.AcceptChanges%2A&gt; was called.","pos":[5364,5735],"source":" If either of these methods are called before the <xref:System.Data.Common.DbDataAdapter.Update%2A> method is called, no changes will be committed when the <xref:System.Data.Common.DbDataAdapter.Update%2A> method is called, unless further changes have been made since <xref:System.Data.DataSet.AcceptChanges%2A> or <xref:System.Data.DataTable.AcceptChanges%2A> was called."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If an error occurs while updating a row, an exception is thrown and execution of the update is discontinued.","pos":[5741,5862],"source":"      > [!NOTE] >  If an error occurs while updating a row, an exception is thrown and execution of the update is discontinued."},{"content":"To continue the update operation without generating exceptions when an error is encountered, set the &lt;xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A&gt; property to <ph id=\"ph1\">`true`</ph> before calling &lt;xref:System.Data.Common.DbDataAdapter.Update%2A&gt;.","pos":[5863,6111],"source":" To continue the update operation without generating exceptions when an error is encountered, set the <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> property to `true` before calling <xref:System.Data.Common.DbDataAdapter.Update%2A>."},{"content":"You may also respond to errors on a per-row basis within the <ph id=\"ph1\">`RowUpdated`</ph> event of a DataAdapter.","pos":[6112,6209],"source":" You may also respond to errors on a per-row basis within the `RowUpdated` event of a DataAdapter."},{"content":"To continue the update operation without generating an exception within the <ph id=\"ph1\">`RowUpdated`</ph> event, set the &lt;xref:System.Data.Common.RowUpdatedEventArgs.Status%2A&gt; property of the &lt;xref:System.Data.Common.RowUpdatedEventArgs&gt; to &lt;xref:System.Data.UpdateStatus&gt;.","pos":[6210,6467],"source":" To continue the update operation without generating an exception within the `RowUpdated` event, set the <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> property of the <xref:System.Data.Common.RowUpdatedEventArgs> to <xref:System.Data.UpdateStatus>."},{"content":"&gt;    &gt;  For every column that you propagate to the data source onUpdate, a parameter should be added to the <ph id=\"ph1\">`InsertCommand`</ph>, <ph id=\"ph2\">`UpdateCommand`</ph>, or <ph id=\"ph3\">`DeleteCommand`</ph>.","pos":[6470,6631],"source":"   >    >  For every column that you propagate to the data source onUpdate, a parameter should be added to the `InsertCommand`, `UpdateCommand`, or `DeleteCommand`."},{"content":"The <ph id=\"ph1\">`SourceColumn`</ph> property of the parameter should be set to the name of the column.","pos":[6632,6717],"source":" The `SourceColumn` property of the parameter should be set to the name of the column."},{"content":"This setting indicates that the value of the parameter is not set manually, but is taken from the particular column in the currently processed row.","pos":[6718,6865]}]},{"pos":[61360,61436],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> used to update the data source.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Data.DataSet\"></xref> used to update the data source."},{"pos":[61493,61583],"content":"The number of rows successfully updated from the <bpt id=\"p1\">&lt;xref href=\"System.Data.DataSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The number of rows successfully updated from the <xref href=\"System.Data.DataSet\"></xref>."},{"pos":[61759,61787],"content":"The source table is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"The source table is invalid.","pos":[0,28]}]},{"pos":[61902,61997],"content":"An attempt to execute an INSERT, UPDATE, or DELETE statement resulted in zero records affected.","needQuote":true,"needEscape":true,"nodes":[{"content":"An attempt to execute an INSERT, UPDATE, or DELETE statement resulted in zero records affected.","pos":[0,95]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Data.Common.DataAdapter\n  id: DataAdapter\n  children:\n  - System.Data.Common.DataAdapter.#ctor\n  - System.Data.Common.DataAdapter.#ctor(System.Data.Common.DataAdapter)\n  - System.Data.Common.DataAdapter.AcceptChangesDuringFill\n  - System.Data.Common.DataAdapter.AcceptChangesDuringUpdate\n  - System.Data.Common.DataAdapter.CloneInternals\n  - System.Data.Common.DataAdapter.ContinueUpdateOnError\n  - System.Data.Common.DataAdapter.CreateTableMappings\n  - System.Data.Common.DataAdapter.Dispose(System.Boolean)\n  - System.Data.Common.DataAdapter.Fill(System.Data.DataSet)\n  - System.Data.Common.DataAdapter.Fill(System.Data.DataTable,System.Data.IDataReader)\n  - System.Data.Common.DataAdapter.Fill(System.Data.DataTable[],System.Data.IDataReader,System.Int32,System.Int32)\n  - System.Data.Common.DataAdapter.Fill(System.Data.DataSet,System.String,System.Data.IDataReader,System.Int32,System.Int32)\n  - System.Data.Common.DataAdapter.FillError\n  - System.Data.Common.DataAdapter.FillLoadOption\n  - System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)\n  - System.Data.Common.DataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDataReader)\n  - System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String,System.Data.IDataReader)\n  - System.Data.Common.DataAdapter.GetFillParameters\n  - System.Data.Common.DataAdapter.HasTableMappings\n  - System.Data.Common.DataAdapter.MissingMappingAction\n  - System.Data.Common.DataAdapter.MissingSchemaAction\n  - System.Data.Common.DataAdapter.OnFillError(System.Data.FillErrorEventArgs)\n  - System.Data.Common.DataAdapter.ResetFillLoadOption\n  - System.Data.Common.DataAdapter.ReturnProviderSpecificTypes\n  - System.Data.Common.DataAdapter.ShouldSerializeAcceptChangesDuringFill\n  - System.Data.Common.DataAdapter.ShouldSerializeFillLoadOption\n  - System.Data.Common.DataAdapter.ShouldSerializeTableMappings\n  - System.Data.Common.DataAdapter.System#Data#IDataAdapter#TableMappings\n  - System.Data.Common.DataAdapter.TableMappings\n  - System.Data.Common.DataAdapter.Update(System.Data.DataSet)\n  langs:\n  - csharp\n  name: DataAdapter\n  nameWithType: DataAdapter\n  fullName: System.Data.Common.DataAdapter\n  type: Class\n  summary: Represents a set of SQL commands and a database connection that are used to fill the <xref href=\"System.Data.DataSet\"></xref> and update the data source.\n  remarks: \"The DataAdapter serves as a bridge between a <xref:System.Data.DataSet> and a data source for retrieving and saving data. The DataAdapter provides this bridge by mapping <xref:System.Data.Common.DataAdapter.Fill%2A>, which changes the data in the <xref:System.Data.DataSet> to match the data in the data source, and <xref:System.Data.IDataAdapter.Update%2A>, which changes the data in the data source to match the data in the <xref:System.Data.DataSet>.  \\n  \\n If you are connecting to a SQL Server database, you can increase overall performance by using the <xref:System.Data.SqlClient.SqlDataAdapter> along with its associated <xref:System.Data.SqlClient.SqlCommand> and <xref:System.Data.SqlClient.SqlConnection> objects. For OLE DB-supported data sources, use the DataAdapter with its associated <xref:System.Data.OleDb.OleDbCommand> and <xref:System.Data.OleDb.OleDbConnection> objects. For ODBC-supported data sources, use the DataAdapter with its associated <xref:System.Data.Odbc.OdbcCommand> and <xref:System.Data.Odbc.OdbcConnection> objects. For Oracle databases, use the DataAdapter with its associated <xref:System.Data.OracleClient.OracleCommand> and <xref:System.Data.OracleClient.OracleConnection> objects.  \\n  \\n When an instance of DataAdapter is created, the read/write properties are set to initial values. For a list of these values, see the DataAdapter constructor.\"\n  syntax:\n    content: 'public class DataAdapter : System.ComponentModel.Component, System.Data.IDataAdapter'\n  inheritance:\n  - System.Object\n  - System.MarshalByRefObject\n  - System.ComponentModel.Component\n  implements:\n  - System.Data.IDataAdapter\n  inheritedMembers:\n  - System.ComponentModel.Component.CanRaiseEvents\n  - System.ComponentModel.Component.Container\n  - System.ComponentModel.Component.DesignMode\n  - System.ComponentModel.Component.Dispose\n  - System.ComponentModel.Component.Disposed\n  - System.ComponentModel.Component.Events\n  - System.ComponentModel.Component.GetService(System.Type)\n  - System.ComponentModel.Component.Site\n  - System.ComponentModel.Component.ToString\n  - System.MarshalByRefObject.CreateObjRef(System.Type)\n  - System.MarshalByRefObject.GetLifetimeService\n  - System.MarshalByRefObject.InitializeLifetimeService\n  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  platform:\n  - net462\n- uid: System.Data.Common.DataAdapter.#ctor\n  id: '#ctor'\n  parent: System.Data.Common.DataAdapter\n  langs:\n  - csharp\n  name: DataAdapter()\n  nameWithType: DataAdapter.DataAdapter()\n  fullName: System.Data.Common.DataAdapter.DataAdapter()\n  type: Constructor\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Initializes a new instance of a <xref href=\"System.Data.Common.DataAdapter\"></xref> class.\n  remarks: \"When an instance of <xref:System.Data.Common.DataAdapter> is created, the following read/write properties are set to the following initial values.  \\n  \\n|Properties|Initial value|  \\n|----------------|-------------------|  \\n|<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|  \\n|<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|  \\n|<xref:System.Data.Common.DataAdapter.TableMappings%2A>|An array of <xref:System.Data.Common.DataAdapter.TableMappings%2A> objects.|  \\n  \\n You can change the value of any of these properties through a separate call to the property.\"\n  syntax:\n    content: protected DataAdapter ();\n    parameters: []\n  overload: System.Data.Common.DataAdapter.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DataAdapter.#ctor(System.Data.Common.DataAdapter)\n  id: '#ctor(System.Data.Common.DataAdapter)'\n  parent: System.Data.Common.DataAdapter\n  langs:\n  - csharp\n  name: DataAdapter(DataAdapter)\n  nameWithType: DataAdapter.DataAdapter(DataAdapter)\n  fullName: System.Data.Common.DataAdapter.DataAdapter(DataAdapter)\n  type: Constructor\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Initializes a new instance of a <xref href=\"System.Data.Common.DataAdapter\"></xref> class from an existing object of the same type.\n  remarks: This overload of the <xref:System.Data.Common.DataAdapter> constructor is designed for use by a .NET Framework data provider when implementing a similar constructor for use in a clone implementation.\n  syntax:\n    content: protected DataAdapter (System.Data.Common.DataAdapter from);\n    parameters:\n    - id: from\n      type: System.Data.Common.DataAdapter\n      description: A <xref href=\"System.Data.Common.DataAdapter\"></xref> object used to create the new <xref href=\"System.Data.Common.DataAdapter\"></xref>.\n  overload: System.Data.Common.DataAdapter.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DataAdapter.AcceptChangesDuringFill\n  id: AcceptChangesDuringFill\n  parent: System.Data.Common.DataAdapter\n  langs:\n  - csharp\n  name: AcceptChangesDuringFill\n  nameWithType: DataAdapter.AcceptChangesDuringFill\n  fullName: System.Data.Common.DataAdapter.AcceptChangesDuringFill\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Gets or sets a value indicating whether <xref:System.Data.DataRow.AcceptChanges*> is called on a <xref href=\"System.Data.DataRow\"></xref> after it is added to the <xref href=\"System.Data.DataTable\"></xref> during any of the **Fill** operations.\n  remarks: If `false`, <xref:System.Data.DataRow.AcceptChanges%2A> is not called, and the newly added rows are treated as inserted rows.\n  syntax:\n    content: public bool AcceptChangesDuringFill { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <xref:System.Data.DataRow.AcceptChanges*> is called on the <xref href=\"System.Data.DataRow\"></xref>; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.\n  overload: System.Data.Common.DataAdapter.AcceptChangesDuringFill*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DataAdapter.AcceptChangesDuringUpdate\n  id: AcceptChangesDuringUpdate\n  parent: System.Data.Common.DataAdapter\n  langs:\n  - csharp\n  name: AcceptChangesDuringUpdate\n  nameWithType: DataAdapter.AcceptChangesDuringUpdate\n  fullName: System.Data.Common.DataAdapter.AcceptChangesDuringUpdate\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Gets or sets whether <xref:System.Data.DataRow.AcceptChanges*> is called during a <xref:System.Data.Common.DataAdapter.Update*>.\n  remarks: \"During a call to the `Update` method of a `DataAdapter`, the database can send data back to your ADO.NET application as output parameters or as the first returned record of a result set. ADO.NET can retrieve these values and update the corresponding columns in the <xref:System.Data.DataRow> being updated. By default, ADO.NET calls the `AcceptChanges` method of the `DataRow` after the update. However, if you want to merge the updated row back into another <xref:System.Data.DataTable>, you may want to preserver the original value of a primary key column. For example, a primary key column corresponding to an automatically incrementing column in the database, such as an identity column, can contain new values that are assigned by the database that do not match the original values assigned in the `DataRow`. By default, `AcceptChanges` is called implicitly after an update, and the original values in the row, which may have been <xref:System.Data.DataColumn.AutoIncrement%2A> values assigned by ADO.NET, are lost. You can preserve the original values in the `DataRow` by preventing `ADO.NET` from calling `AcceptChanges` after it performs an update on a row, by setting the AcceptChangesDuringUpdate property to `false`, which preserves the original values.  \\n  \\n> [!NOTE]\\n>  Setting the `AcceptChangesDuringUpdate` property to `false` applies to all data modifications, not only inserts. If you want to edit or delete rows in the same update, and if you want to suppress the call to `AcceptChanges` only for inserts, then instead of setting `AccceptChangesDuringUpdate` to `false`, use an event handler for the `RowUpdated` event of the `DataAdapter`. In the event handler you can check the <xref:System.Data.Common.RowUpdatedEventArgs.StatementType%2A> to determine if the data modification is an insert, and if `true`, set the <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> property of the <xref:System.Data.Common.RowUpdatedEventArgs> to <xref:System.Data.UpdateStatus>. For more information and an example, see [Retrieving Identity or Autonumber Values](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"This example demonstrates extracting changed rows from a `DataTable` and using a <xref:System.Data.SqlClient.SqlDataAdapter> to update the data source and retrieve a new identity column value. By setting the `AcceptChangesDuringUpdate` property of the <xref:System.Data.SqlClient.SqlDataAdapter> to `false` to preserve the original auto increment value, the new data can then be merged into the original <xref:System.Data.DataTable>, even if the new identity value does not match the original auto increment value in the `DataTable`.  \\n  \\n [!code-vb[DataWorks SqlClient.AcceptChangesDuringUpdate#1](~/add/codesnippet/visualbasic/p-system.data.common.dat_7_1.vb)]\\n [!code-cs[DataWorks SqlClient.AcceptChangesDuringUpdate#1](~/add/codesnippet/csharp/p-system.data.common.dat_7_1.cs)]\"\n  syntax:\n    content: public bool AcceptChangesDuringUpdate { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <xref:System.Data.DataRow.AcceptChanges*> is called during an <xref:System.Data.Common.DataAdapter.Update*>; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.\n  overload: System.Data.Common.DataAdapter.AcceptChangesDuringUpdate*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DataAdapter.CloneInternals\n  id: CloneInternals\n  parent: System.Data.Common.DataAdapter\n  langs:\n  - csharp\n  name: CloneInternals()\n  nameWithType: DataAdapter.CloneInternals()\n  fullName: System.Data.Common.DataAdapter.CloneInternals()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Creates a copy of this instance of <xref href=\"System.Data.Common.DataAdapter\"></xref>.\n  remarks: \"This method is deprecated. The <xref:System.Data.Common.DataAdapter.%23ctor%2A> constructor should be used instead of this method.  \\n  \\n All the commands, the <xref:System.Data.Common.DataAdapter.TableMappings%2A>, the <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>, and the <xref:System.Data.Common.DataAdapter.MissingMappingAction%2A> are cloned. However, the connections for the commands are not copied, but shared. Thus, the cloned <xref:System.Data.Common.DataAdapter> can be used against the same connection as the original.\"\n  syntax:\n    content: protected virtual System.Data.Common.DataAdapter CloneInternals ();\n    parameters: []\n    return:\n      type: System.Data.Common.DataAdapter\n      description: The cloned instance of <xref href=\"System.Data.Common.DataAdapter\"></xref>.\n  overload: System.Data.Common.DataAdapter.CloneInternals*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DataAdapter.ContinueUpdateOnError\n  id: ContinueUpdateOnError\n  parent: System.Data.Common.DataAdapter\n  langs:\n  - csharp\n  name: ContinueUpdateOnError\n  nameWithType: DataAdapter.ContinueUpdateOnError\n  fullName: System.Data.Common.DataAdapter.ContinueUpdateOnError\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Gets or sets a value that specifies whether to generate an exception when an error is encountered during a row update.\n  remarks: \"If `ContinueUpdateOnError` is set to `true`, no exception is thrown when an error occurs during the update of a row. The update of the row is skipped and the error information is placed in the <xref:System.Data.DataRow.RowError%2A> property of the row in error. The <xref:System.Data.Common.DataAdapter> continues to update subsequent rows.  \\n  \\n If `ContinueUpdateOnError` is set to `false`, an exception is thrown when an error occurs during the update of a row.\"\n  syntax:\n    content: public bool ContinueUpdateOnError { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to continue the update without generating an exception; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Data.Common.DataAdapter.ContinueUpdateOnError*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DataAdapter.CreateTableMappings\n  id: CreateTableMappings\n  parent: System.Data.Common.DataAdapter\n  langs:\n  - csharp\n  name: CreateTableMappings()\n  nameWithType: DataAdapter.CreateTableMappings()\n  fullName: System.Data.Common.DataAdapter.CreateTableMappings()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Creates a new <xref href=\"System.Data.Common.DataTableMappingCollection\"></xref>.\n  syntax:\n    content: protected virtual System.Data.Common.DataTableMappingCollection CreateTableMappings ();\n    parameters: []\n    return:\n      type: System.Data.Common.DataTableMappingCollection\n      description: A new table mapping collection.\n  overload: System.Data.Common.DataAdapter.CreateTableMappings*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DataAdapter.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Data.Common.DataAdapter\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: DataAdapter.Dispose(Boolean)\n  fullName: System.Data.Common.DataAdapter.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Releases the unmanaged resources used by the <xref href=\"System.Data.Common.DataAdapter\"></xref> and optionally releases the managed resources.\n  remarks: \"This method is called by the public <xref:System.IDisposable.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method. `Dispose` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.  \\n  \\n When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Data.Common.DataAdapter> references. This method invokes the `Dispose` method of each referenced object.\"\n  syntax:\n    content: protected override void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only unmanaged resources.\n  overload: System.Data.Common.DataAdapter.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DataAdapter.Fill(System.Data.DataSet)\n  id: Fill(System.Data.DataSet)\n  parent: System.Data.Common.DataAdapter\n  langs:\n  - csharp\n  name: Fill(DataSet)\n  nameWithType: DataAdapter.Fill(DataSet)\n  fullName: System.Data.Common.DataAdapter.Fill(DataSet)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Adds or refreshes rows in the <xref href=\"System.Data.DataSet\"></xref> to match those in the data source.\n  remarks: \"The Fill method retrieves rows from the data source using the SELECT statement specified by an associated <xref:System.Data.IDbDataAdapter.SelectCommand%2A> property. The connection object associated with the SELECT statement must be valid, but it does not need to be open. If the connection is closed before Fill is called, it is opened to retrieve data, then closed. If the connection is open before Fill is called, it remains open.  \\n  \\n The Fill operation then adds the rows to destination <xref:System.Data.DataTable> objects in the <xref:System.Data.DataSet>, creating the <xref:System.Data.DataTable> objects if they do not already exist. When creating <xref:System.Data.DataTable> objects, the Fill operation normally creates only column name metadata. However, if the <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> property is set to `AddWithKey`, appropriate primary keys and constraints are also created.  \\n  \\n If the `SelectCommand` returns the results of an OUTER JOIN, the `DataAdapter` does not set a <xref:System.Data.DataTable.PrimaryKey%2A> value for the resulting <xref:System.Data.DataTable>. You must explicitly define the primary key to ensure that duplicate rows are resolved correctly. For more information, see [Defining Primary Keys](~/add/includes/ajax-current-ext-md.md).  \\n  \\n If the data adapter encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the subsequent columns, using the pattern \\\"columnname1\\\", \\\"columnname2\\\", \\\"columnname3\\\", and so on. If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern \\\"Column1\\\", \\\"Column2\\\", and so on. When multiple result sets are added to the <xref:System.Data.DataSet> each result set is placed in a separate table. Additional result sets are named by appending integral values to the specified table name (for example, \\\"Table\\\", \\\"Table1\\\", \\\"Table2\\\", and so on). Applications using column and table names should ensure that conflicts with these naming patterns does not occur.  \\n  \\n When the SELECT statement used to populate the <xref:System.Data.DataSet> returns multiple results, such as a batch SQL statements, if one of the results contains an error, all subsequent results are skipped and not added to the <xref:System.Data.DataSet>.  \\n  \\n You can use the Fill method multiple times on the same <xref:System.Data.DataTable>. If a primary key exists, incoming rows are merged with matching rows that already exist. If no primary key exists, incoming rows are appended to the <xref:System.Data.DataTable>.  \\n  \\n> [!NOTE]\\n>  When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result. To retrieve schema information for multiple results, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> with the <xref:System.Data.MissingSchemaAction> set to `AddWithKey`.\"\n  syntax:\n    content: public virtual int Fill (System.Data.DataSet dataSet);\n    parameters:\n    - id: dataSet\n      type: System.Data.DataSet\n      description: A <xref href=\"System.Data.DataSet\"></xref> to fill with records and, if necessary, schema.\n    return:\n      type: System.Int32\n      description: The number of rows successfully added to or refreshed in the <xref href=\"System.Data.DataSet\"></xref>. This does not include rows affected by statements that do not return rows.\n  overload: System.Data.Common.DataAdapter.Fill*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DataAdapter.Fill(System.Data.DataTable,System.Data.IDataReader)\n  id: Fill(System.Data.DataTable,System.Data.IDataReader)\n  parent: System.Data.Common.DataAdapter\n  langs:\n  - csharp\n  name: Fill(DataTable,IDataReader)\n  nameWithType: DataAdapter.Fill(DataTable,IDataReader)\n  fullName: System.Data.Common.DataAdapter.Fill(DataTable,IDataReader)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Adds or refreshes rows in the <xref href=\"System.Data.DataTable\"></xref> to match those in the data source using the <xref href=\"System.Data.DataTable\"></xref> name and the specified <xref href=\"System.Data.IDataReader\"></xref>.\n  remarks: See the remarks for `System.Data.Common.DataAdapter.Fill(System.Data.DataSet)` for additional information.\n  syntax:\n    content: protected virtual int Fill (System.Data.DataTable dataTable, System.Data.IDataReader dataReader);\n    parameters:\n    - id: dataTable\n      type: System.Data.DataTable\n      description: A <xref href=\"System.Data.DataTable\"></xref> to fill with records.\n    - id: dataReader\n      type: System.Data.IDataReader\n      description: An instance of <xref href=\"System.Data.IDataReader\"></xref>.\n    return:\n      type: System.Int32\n      description: The number of rows successfully added to or refreshed in the <xref href=\"System.Data.DataTable\"></xref>. This does not include rows affected by statements that do not return rows.\n  overload: System.Data.Common.DataAdapter.Fill*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DataAdapter.Fill(System.Data.DataTable[],System.Data.IDataReader,System.Int32,System.Int32)\n  id: Fill(System.Data.DataTable[],System.Data.IDataReader,System.Int32,System.Int32)\n  parent: System.Data.Common.DataAdapter\n  langs:\n  - csharp\n  name: Fill(DataTable[],IDataReader,Int32,Int32)\n  nameWithType: DataAdapter.Fill(DataTable[],IDataReader,Int32,Int32)\n  fullName: System.Data.Common.DataAdapter.Fill(DataTable[],IDataReader,Int32,Int32)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Adds or refreshes rows in a specified range in the collection of <xref href=\"System.Data.DataTable\"></xref> objects to match those in the data source.\n  remarks: See the remarks for `System.Data.Common.DataAdapter.Fill(System.Data.DataSet)` for additional information.\n  syntax:\n    content: protected virtual int Fill (System.Data.DataTable[] dataTables, System.Data.IDataReader dataReader, int startRecord, int maxRecords);\n    parameters:\n    - id: dataTables\n      type: System.Data.DataTable[]\n      description: A collection of <xref href=\"System.Data.DataTable\"></xref> objects to fill with records.\n    - id: dataReader\n      type: System.Data.IDataReader\n      description: An instance of <xref href=\"System.Data.IDataReader\"></xref>.\n    - id: startRecord\n      type: System.Int32\n      description: The zero-based index of the starting record.\n    - id: maxRecords\n      type: System.Int32\n      description: An integer indicating the maximum number of records.\n    return:\n      type: System.Int32\n      description: The number of rows successfully added to or refreshed in the <xref href=\"System.Data.DataTable\"></xref>. This does not include rows affected by statements that do not return rows.\n  overload: System.Data.Common.DataAdapter.Fill*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DataAdapter.Fill(System.Data.DataSet,System.String,System.Data.IDataReader,System.Int32,System.Int32)\n  id: Fill(System.Data.DataSet,System.String,System.Data.IDataReader,System.Int32,System.Int32)\n  parent: System.Data.Common.DataAdapter\n  langs:\n  - csharp\n  name: Fill(DataSet,String,IDataReader,Int32,Int32)\n  nameWithType: DataAdapter.Fill(DataSet,String,IDataReader,Int32,Int32)\n  fullName: System.Data.Common.DataAdapter.Fill(DataSet,String,IDataReader,Int32,Int32)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Adds or refreshes rows in a specified range in the <xref href=\"System.Data.DataSet\"></xref> to match those in the data source using the <xref href=\"System.Data.DataSet\"></xref> and <xref href=\"System.Data.DataTable\"></xref> names.\n  remarks: See the remarks for `System.Data.Common.DataAdapter.Fill(System.Data.DataSet)` for additional information.\n  syntax:\n    content: protected virtual int Fill (System.Data.DataSet dataSet, string srcTable, System.Data.IDataReader dataReader, int startRecord, int maxRecords);\n    parameters:\n    - id: dataSet\n      type: System.Data.DataSet\n      description: A <xref href=\"System.Data.DataSet\"></xref> to fill with records.\n    - id: srcTable\n      type: System.String\n      description: A string indicating the name of the source table.\n    - id: dataReader\n      type: System.Data.IDataReader\n      description: An instance of <xref href=\"System.Data.IDataReader\"></xref>.\n    - id: startRecord\n      type: System.Int32\n      description: The zero-based index of the starting record.\n    - id: maxRecords\n      type: System.Int32\n      description: An integer indicating the maximum number of records.\n    return:\n      type: System.Int32\n      description: The number of rows successfully added to or refreshed in the <xref href=\"System.Data.DataSet\"></xref>. This does not include rows affected by statements that do not return rows.\n  overload: System.Data.Common.DataAdapter.Fill*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DataAdapter.FillError\n  id: FillError\n  parent: System.Data.Common.DataAdapter\n  langs:\n  - csharp\n  name: FillError\n  nameWithType: DataAdapter.FillError\n  fullName: System.Data.Common.DataAdapter.FillError\n  type: Event\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Returned when an error occurs during a fill operation.\n  remarks: \"The **FillError** event allows a user to determine whether or not the fill operation should continue after the error occurs. Examples of when the **FillError** event might occur are:  \\n  \\n-   The data being added to a `DataSet` cannot be converted to a common language runtime type without losing precision.  \\n  \\n-   The row being added contains data that violates a Constraint that must be enforced on a `DataColumn` in the `DataSet`.\"\n  syntax:\n    content: public event System.Data.FillErrorEventHandler FillError;\n    return:\n      type: System.Data.FillErrorEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DataAdapter.FillLoadOption\n  id: FillLoadOption\n  parent: System.Data.Common.DataAdapter\n  langs:\n  - csharp\n  name: FillLoadOption\n  nameWithType: DataAdapter.FillLoadOption\n  fullName: System.Data.Common.DataAdapter.FillLoadOption\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Gets or sets the <xref href=\"System.Data.LoadOption\"></xref> that determines how the adapter fills the <xref href=\"System.Data.DataTable\"></xref> from the <xref href=\"System.Data.Common.DbDataReader\"></xref>.\n  syntax:\n    content: public System.Data.LoadOption FillLoadOption { get; set; }\n    return:\n      type: System.Data.LoadOption\n      description: A <xref href=\"System.Data.LoadOption\"></xref> value.\n  overload: System.Data.Common.DataAdapter.FillLoadOption*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)\n  id: FillSchema(System.Data.DataSet,System.Data.SchemaType)\n  parent: System.Data.Common.DataAdapter\n  langs:\n  - csharp\n  name: FillSchema(DataSet,SchemaType)\n  nameWithType: DataAdapter.FillSchema(DataSet,SchemaType)\n  fullName: System.Data.Common.DataAdapter.FillSchema(DataSet,SchemaType)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Adds a <xref href=\"System.Data.DataTable\"></xref> to the specified <xref href=\"System.Data.DataSet\"></xref> and configures the schema to match that in the data source based on the specified <xref href=\"System.Data.SchemaType\"></xref>.\n  remarks: \"The FillSchema method retrieves the schema from the data source using the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>. The connection object associated with the <xref:System.Data.IDbDataAdapter.SelectCommand%2A> must be valid, but it does not need to be open. If the connection is closed before FillSchema is called, it is opened to retrieve data and then closed. If the connection is open before FillSchema is called, it remains open.  \\n  \\n A FillSchema operation adds a <xref:System.Data.DataTable> to the destination <xref:System.Data.DataSet>. It then adds columns to the <xref:System.Data.DataColumnCollection> of the <xref:System.Data.DataTable>, and configures the following <xref:System.Data.DataColumn> properties if they exist at the data source:  \\n  \\n-   <xref:System.Data.DataColumn.AllowDBNull%2A>  \\n  \\n-   <xref:System.Data.DataColumn.AutoIncrement%2A>. You must set <xref:System.Data.DataColumn.AutoIncrementStep%2A> and <xref:System.Data.DataColumn.AutoIncrementSeed%2A> separately.  \\n  \\n-   <xref:System.Data.DataColumn.MaxLength%2A>  \\n  \\n-   <xref:System.Data.DataColumn.ReadOnly%2A>  \\n  \\n-   <xref:System.Data.DataColumn.Unique%2A>  \\n  \\n FillSchema also configures the <xref:System.Data.DataTable.PrimaryKey%2A> and <xref:System.Data.DataTable.Constraints%2A> properties according to the following rules:  \\n  \\n-   If one or more primary key columns are returned by the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, they are used as the primary key columns for the <xref:System.Data.DataTable>.  \\n  \\n-   If no primary key columns are returned but unique columns are, the unique columns are used as the primary key if, and only if, all the unique columns are nonnullable. If any of the columns are nullable, a <xref:System.Data.UniqueConstraint> is added to the <xref:System.Data.ConstraintCollection>, but the <xref:System.Data.DataTable.PrimaryKey%2A> property is not set.  \\n  \\n-   If both primary key columns and unique columns are returned, the primary key columns are used as the primary key columns for the <xref:System.Data.DataTable>.  \\n  \\n> [!NOTE]\\n>  The underlying data store may allow column attributes that are not supported in a <xref:System.Data.DataColumn>, which causes some column attributes to not translate correctly. For example, [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] allows an identity column with a data type of tinyint whereas a <xref:System.Data.DataColumn> only allows Int16, Int32, and Int64 to have the <xref:System.Data.DataColumn.AutoIncrement%2A> property set. `FillSchema` silently ignores cases where the <xref:System.Data.DataColumn> cannot accurately mirror the data source and throws no exception.  \\n  \\n Note that primary keys and unique constraints are added to the <xref:System.Data.ConstraintCollection> according to the preceding rules, but other constraint types are not added.  \\n  \\n If a unique clustered index is defined on a column or columns in a SQL Server table and the primary key constraint is defined on a separate set of columns, then the names of the columns in the clustered index will be returned. To return the name or names of the primary key columns, use a query hint with the SELECT statement that specifies the name of the primary key index. For more information about specifying query hints, see [Query Hint (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).  \\n  \\n If the <xref:System.Data.Common.DataAdapter> encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the subsequent columns, using the pattern \\\"*columnname*1\\\", \\\"*columnname*2\\\", \\\"*columnname*3\\\", and so on. If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern \\\"Column1\\\", \\\"Column2\\\", and so on. When multiple result sets are added to the <xref:System.Data.DataSet> each result set is placed in a separate table. Additional result sets are named by appending integral values to the specified table name (for example, \\\"Table\\\", \\\"Table1\\\", \\\"Table2\\\", and so on). Applications using column and table names should ensure that conflicts with these naming patterns does not occur.  \\n  \\n FillSchema does not return any rows. Use the <xref:System.Data.Common.DataAdapter.Fill%2A> method to add rows to a <xref:System.Data.DataTable>.  \\n  \\n> [!NOTE]\\n>  When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result. To retrieve schema information for multiple results, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> with the <xref:System.Data.MissingSchemaAction> set to `AddWithKey`.\"\n  syntax:\n    content: public virtual System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType);\n    parameters:\n    - id: dataSet\n      type: System.Data.DataSet\n      description: The <xref href=\"System.Data.DataSet\"></xref> to be filled with the schema from the data source.\n    - id: schemaType\n      type: System.Data.SchemaType\n      description: One of the <xref href=\"System.Data.SchemaType\"></xref> values.\n    return:\n      type: System.Data.DataTable[]\n      description: A <xref href=\"System.Data.DataTable\"></xref> object that contains schema information returned from the data source.\n  overload: System.Data.Common.DataAdapter.FillSchema*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDataReader)\n  id: FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDataReader)\n  parent: System.Data.Common.DataAdapter\n  langs:\n  - csharp\n  name: FillSchema(DataTable,SchemaType,IDataReader)\n  nameWithType: DataAdapter.FillSchema(DataTable,SchemaType,IDataReader)\n  fullName: System.Data.Common.DataAdapter.FillSchema(DataTable,SchemaType,IDataReader)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Adds a <xref href=\"System.Data.DataTable\"></xref> to the specified <xref href=\"System.Data.DataSet\"></xref>.\n  syntax:\n    content: protected virtual System.Data.DataTable FillSchema (System.Data.DataTable dataTable, System.Data.SchemaType schemaType, System.Data.IDataReader dataReader);\n    parameters:\n    - id: dataTable\n      type: System.Data.DataTable\n      description: The <xref href=\"System.Data.DataTable\"></xref> to be filled from the <xref href=\"System.Data.IDataReader\"></xref>.\n    - id: schemaType\n      type: System.Data.SchemaType\n      description: One of the <xref href=\"System.Data.SchemaType\"></xref> values.\n    - id: dataReader\n      type: System.Data.IDataReader\n      description: The <xref href=\"System.Data.IDataReader\"></xref> to be used as the data source when filling the <xref href=\"System.Data.DataTable\"></xref>.\n    return:\n      type: System.Data.DataTable\n      description: A <xref href=\"System.Data.DataTable\"></xref> object that contains schema information returned from the data source.\n  overload: System.Data.Common.DataAdapter.FillSchema*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String,System.Data.IDataReader)\n  id: FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String,System.Data.IDataReader)\n  parent: System.Data.Common.DataAdapter\n  langs:\n  - csharp\n  name: FillSchema(DataSet,SchemaType,String,IDataReader)\n  nameWithType: DataAdapter.FillSchema(DataSet,SchemaType,String,IDataReader)\n  fullName: System.Data.Common.DataAdapter.FillSchema(DataSet,SchemaType,String,IDataReader)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Adds a <xref href=\"System.Data.DataTable\"></xref> to the specified <xref href=\"System.Data.DataSet\"></xref>.\n  syntax:\n    content: protected virtual System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType, string srcTable, System.Data.IDataReader dataReader);\n    parameters:\n    - id: dataSet\n      type: System.Data.DataSet\n      description: The <xref href=\"System.Data.DataTable\"></xref> to be filled from the <xref href=\"System.Data.IDataReader\"></xref>.\n    - id: schemaType\n      type: System.Data.SchemaType\n      description: One of the <xref href=\"System.Data.SchemaType\"></xref> values.\n    - id: srcTable\n      type: System.String\n      description: The name of the source table to use for table mapping.\n    - id: dataReader\n      type: System.Data.IDataReader\n      description: The <xref href=\"System.Data.IDataReader\"></xref> to be used as the data source when filling the <xref href=\"System.Data.DataTable\"></xref>.\n    return:\n      type: System.Data.DataTable[]\n      description: A reference to a collection of <xref href=\"System.Data.DataTable\"></xref> objects that were added to the <xref href=\"System.Data.DataSet\"></xref>.\n  overload: System.Data.Common.DataAdapter.FillSchema*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DataAdapter.GetFillParameters\n  id: GetFillParameters\n  parent: System.Data.Common.DataAdapter\n  langs:\n  - csharp\n  name: GetFillParameters()\n  nameWithType: DataAdapter.GetFillParameters()\n  fullName: System.Data.Common.DataAdapter.GetFillParameters()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Gets the parameters set by the user when executing an SQL SELECT statement.\n  syntax:\n    content: public virtual System.Data.IDataParameter[] GetFillParameters ();\n    parameters: []\n    return:\n      type: System.Data.IDataParameter[]\n      description: An array of <xref href=\"System.Data.IDataParameter\"></xref> objects that contains the parameters set by the user.\n  overload: System.Data.Common.DataAdapter.GetFillParameters*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DataAdapter.HasTableMappings\n  id: HasTableMappings\n  parent: System.Data.Common.DataAdapter\n  langs:\n  - csharp\n  name: HasTableMappings()\n  nameWithType: DataAdapter.HasTableMappings()\n  fullName: System.Data.Common.DataAdapter.HasTableMappings()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Indicates whether a <xref href=\"System.Data.Common.DataTableMappingCollection\"></xref> has been created.\n  syntax:\n    content: protected bool HasTableMappings ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if a <xref href=\"System.Data.Common.DataTableMappingCollection\"></xref> has been created; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Data.Common.DataAdapter.HasTableMappings*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DataAdapter.MissingMappingAction\n  id: MissingMappingAction\n  parent: System.Data.Common.DataAdapter\n  langs:\n  - csharp\n  name: MissingMappingAction\n  nameWithType: DataAdapter.MissingMappingAction\n  fullName: System.Data.Common.DataAdapter.MissingMappingAction\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Determines the action to take when incoming data does not have a matching table or column.\n  remarks: The <xref:System.Data.Common.DataAdapter.TableMappings%2A> property provides the master mapping between the returned records and the <xref:System.Data.DataSet>.\n  example:\n  - \"The following example creates a derived class, <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.  \\n  \\n [!code-vb[Classic WebData DataAdapter.MissingMappingAction Example#1](~/add/codesnippet/visualbasic/p-system.data.common.dat_4_1.vb)]\\n [!code-cs[Classic WebData DataAdapter.MissingMappingAction Example#1](~/add/codesnippet/csharp/p-system.data.common.dat_4_1.cs)]\"\n  syntax:\n    content: public System.Data.MissingMappingAction MissingMappingAction { get; set; }\n    return:\n      type: System.Data.MissingMappingAction\n      description: One of the <xref href=\"System.Data.MissingMappingAction\"></xref> values. The default is <xref uid=\"langword_csharp_Passthrough\" name=\"Passthrough\" href=\"\"></xref>.\n  overload: System.Data.Common.DataAdapter.MissingMappingAction*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The value set is not one of the <xref href=\"System.Data.MissingMappingAction\"></xref> values.\n  platform:\n  - net462\n- uid: System.Data.Common.DataAdapter.MissingSchemaAction\n  id: MissingSchemaAction\n  parent: System.Data.Common.DataAdapter\n  langs:\n  - csharp\n  name: MissingSchemaAction\n  nameWithType: DataAdapter.MissingSchemaAction\n  fullName: System.Data.Common.DataAdapter.MissingSchemaAction\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Determines the action to take when existing <xref href=\"System.Data.DataSet\"></xref> schema does not match incoming data.\n  remarks: ''\n  example:\n  - \"The following example creates a derived class, <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.  \\n  \\n [!code-vb[Classic WebData DataAdapter.MissingMappingAction Example#1](~/add/codesnippet/visualbasic/p-system.data.common.dat_9_1.vb)]\\n [!code-cs[Classic WebData DataAdapter.MissingMappingAction Example#1](~/add/codesnippet/csharp/p-system.data.common.dat_9_1.cs)]\"\n  syntax:\n    content: public System.Data.MissingSchemaAction MissingSchemaAction { get; set; }\n    return:\n      type: System.Data.MissingSchemaAction\n      description: One of the <xref href=\"System.Data.MissingSchemaAction\"></xref> values. The default is <xref uid=\"langword_csharp_Add\" name=\"Add\" href=\"\"></xref>.\n  overload: System.Data.Common.DataAdapter.MissingSchemaAction*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The value set is not one of the <xref href=\"System.Data.MissingSchemaAction\"></xref> values.\n  platform:\n  - net462\n- uid: System.Data.Common.DataAdapter.OnFillError(System.Data.FillErrorEventArgs)\n  id: OnFillError(System.Data.FillErrorEventArgs)\n  parent: System.Data.Common.DataAdapter\n  langs:\n  - csharp\n  name: OnFillError(FillErrorEventArgs)\n  nameWithType: DataAdapter.OnFillError(FillErrorEventArgs)\n  fullName: System.Data.Common.DataAdapter.OnFillError(FillErrorEventArgs)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Invoked when an error occurs during a <xref uid=\"langword_csharp_Fill\" name=\"Fill\" href=\"\"></xref>.\n  syntax:\n    content: protected virtual void OnFillError (System.Data.FillErrorEventArgs value);\n    parameters:\n    - id: value\n      type: System.Data.FillErrorEventArgs\n      description: A <xref href=\"System.Data.FillErrorEventArgs\"></xref> object.\n  overload: System.Data.Common.DataAdapter.OnFillError*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DataAdapter.ResetFillLoadOption\n  id: ResetFillLoadOption\n  parent: System.Data.Common.DataAdapter\n  langs:\n  - csharp\n  name: ResetFillLoadOption()\n  nameWithType: DataAdapter.ResetFillLoadOption()\n  fullName: System.Data.Common.DataAdapter.ResetFillLoadOption()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Resets <xref:System.Data.Common.DataAdapter.FillLoadOption*> to its default state and causes &lt;xref:System.Data.Common.DataAdapter.Fill%2A?displayProperty=fullName&gt; to honor <xref:System.Data.Common.DataAdapter.AcceptChangesDuringFill*>.\n  syntax:\n    content: public void ResetFillLoadOption ();\n    parameters: []\n  overload: System.Data.Common.DataAdapter.ResetFillLoadOption*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DataAdapter.ReturnProviderSpecificTypes\n  id: ReturnProviderSpecificTypes\n  parent: System.Data.Common.DataAdapter\n  langs:\n  - csharp\n  name: ReturnProviderSpecificTypes\n  nameWithType: DataAdapter.ReturnProviderSpecificTypes\n  fullName: System.Data.Common.DataAdapter.ReturnProviderSpecificTypes\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Gets or sets whether the <xref uid=\"langword_csharp_Fill\" name=\"Fill\" href=\"\"></xref> method should return provider-specific values or common CLS-compliant values.\n  remarks: The default value is `false`.\n  syntax:\n    content: public virtual bool ReturnProviderSpecificTypes { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref uid=\"langword_csharp_Fill\" name=\"Fill\" href=\"\"></xref> method should return provider-specific values; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to return common CLS-compliant values.\n  overload: System.Data.Common.DataAdapter.ReturnProviderSpecificTypes*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DataAdapter.ShouldSerializeAcceptChangesDuringFill\n  id: ShouldSerializeAcceptChangesDuringFill\n  parent: System.Data.Common.DataAdapter\n  langs:\n  - csharp\n  name: ShouldSerializeAcceptChangesDuringFill()\n  nameWithType: DataAdapter.ShouldSerializeAcceptChangesDuringFill()\n  fullName: System.Data.Common.DataAdapter.ShouldSerializeAcceptChangesDuringFill()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Determines whether the <xref:System.Data.Common.DataAdapter.AcceptChangesDuringFill*> property should be persisted.\n  syntax:\n    content: public virtual bool ShouldSerializeAcceptChangesDuringFill ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref:System.Data.Common.DataAdapter.AcceptChangesDuringFill*> property is persisted; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Data.Common.DataAdapter.ShouldSerializeAcceptChangesDuringFill*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DataAdapter.ShouldSerializeFillLoadOption\n  id: ShouldSerializeFillLoadOption\n  parent: System.Data.Common.DataAdapter\n  langs:\n  - csharp\n  name: ShouldSerializeFillLoadOption()\n  nameWithType: DataAdapter.ShouldSerializeFillLoadOption()\n  fullName: System.Data.Common.DataAdapter.ShouldSerializeFillLoadOption()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Determines whether the <xref:System.Data.Common.DataAdapter.FillLoadOption*> property should be persisted.\n  syntax:\n    content: public virtual bool ShouldSerializeFillLoadOption ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref:System.Data.Common.DataAdapter.FillLoadOption*> property is persisted; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Data.Common.DataAdapter.ShouldSerializeFillLoadOption*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DataAdapter.ShouldSerializeTableMappings\n  id: ShouldSerializeTableMappings\n  parent: System.Data.Common.DataAdapter\n  langs:\n  - csharp\n  name: ShouldSerializeTableMappings()\n  nameWithType: DataAdapter.ShouldSerializeTableMappings()\n  fullName: System.Data.Common.DataAdapter.ShouldSerializeTableMappings()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Determines whether one or more <xref href=\"System.Data.Common.DataTableMapping\"></xref> objects exist and they should be persisted.\n  syntax:\n    content: protected virtual bool ShouldSerializeTableMappings ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if one or more <xref href=\"System.Data.Common.DataTableMapping\"></xref> objects exist; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Data.Common.DataAdapter.ShouldSerializeTableMappings*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DataAdapter.System#Data#IDataAdapter#TableMappings\n  id: System#Data#IDataAdapter#TableMappings\n  isEii: true\n  parent: System.Data.Common.DataAdapter\n  langs:\n  - csharp\n  name: System.Data.IDataAdapter.TableMappings\n  nameWithType: DataAdapter.System.Data.IDataAdapter.TableMappings\n  fullName: System.Data.Common.DataAdapter.System.Data.IDataAdapter.TableMappings\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Indicates how a source table is mapped to a dataset table.\n  remarks: \"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Common.DataAdapter> instance is cast to an <xref:System.Data.IDataAdapter> interface.  \\n  \\n Fore more information, see <xref:System.Data.IDataAdapter.TableMappings%2A>.\"\n  syntax:\n    content: System.Data.ITableMappingCollection System.Data.IDataAdapter.TableMappings { get; }\n    return:\n      type: System.Data.ITableMappingCollection\n      description: A collection that provides the master mapping between the returned records and the <xref href=\"System.Data.DataSet\"></xref>. The default value is an empty collection.\n  overload: System.Data.Common.DataAdapter.System#Data#IDataAdapter#TableMappings*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DataAdapter.TableMappings\n  id: TableMappings\n  parent: System.Data.Common.DataAdapter\n  langs:\n  - csharp\n  name: TableMappings\n  nameWithType: DataAdapter.TableMappings\n  fullName: System.Data.Common.DataAdapter.TableMappings\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Gets a collection that provides the master mapping between a source table and a <xref href=\"System.Data.DataTable\"></xref>.\n  remarks: When reconciling changes, the <xref:System.Data.Common.DataAdapter> uses the <xref:System.Data.Common.DataTableMappingCollection> collection to associate the column names used by the data source with the column names used by the <xref:System.Data.DataSet>.\n  example:\n  - \"The following example uses a derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to add <xref:System.Data.Common.DataTableMapping> objects to its TableMappings collection and display a list of those mapped source tables. This example assumes that an <xref:System.Data.OleDb.OleDbDataAdapter> has already been created.  \\n  \\n [!code-vb[Classic WebData DataAdapter.TableMappings Example#1](~/add/codesnippet/visualbasic/p-system.data.common.dat_14_1.vb)]\\n [!code-cs[Classic WebData DataAdapter.TableMappings Example#1](~/add/codesnippet/csharp/p-system.data.common.dat_14_1.cs)]\"\n  syntax:\n    content: public System.Data.Common.DataTableMappingCollection TableMappings { get; }\n    return:\n      type: System.Data.Common.DataTableMappingCollection\n      description: A collection that provides the master mapping between the returned records and the <xref href=\"System.Data.DataSet\"></xref>. The default value is an empty collection.\n  overload: System.Data.Common.DataAdapter.TableMappings*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DataAdapter.Update(System.Data.DataSet)\n  id: Update(System.Data.DataSet)\n  parent: System.Data.Common.DataAdapter\n  langs:\n  - csharp\n  name: Update(DataSet)\n  nameWithType: DataAdapter.Update(DataSet)\n  fullName: System.Data.Common.DataAdapter.Update(DataSet)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Calls the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row in the specified <xref href=\"System.Data.DataSet\"></xref> from a <xref href=\"System.Data.DataTable\"></xref> named \"Table.\"\n  remarks: \"The update is performed on a by-row basis. For every inserted, modified, and deleted row, the Update method determines the type of change that has been performed on it (Insert, Update or Delete). Depending on the type of change, the `Insert`, `Update,` or `Delete` command template executes to propagate the modified row to the data source. When an application calls the Update method, the <xref:System.Data.Common.DataAdapter> examines the <xref:System.Data.DataRow.RowState%2A> property, and executes the required INSERT, UPDATE, or DELETE statements iteratively for each row, based on the order of the indexes configured in the <xref:System.Data.DataSet>. For example, Update might execute a DELETE statement, followed by an INSERT statement, and then another DELETE statement, due to the ordering of the rows in the <xref:System.Data.DataTable>.  \\n  \\n It should be noted that these statements are not performed as a batch process; each row is updated individually. An application can call the <xref:System.Data.DataSet.GetChanges%2A> method in situations where you must control the sequence of statement types (for example, INSERT before UPDATE). For more information, see [Updating Data Sources with DataAdapters](~/add/includes/ajax-current-ext-md.md).  \\n  \\n If INSERT, UPDATE, or DELETE statements have not been specified, the Update method generates an exception. However, you can create a <xref:System.Data.SqlClient.SqlCommandBuilder> or <xref:System.Data.OleDb.OleDbCommandBuilder> object to automatically generate SQL statements for single-table updates if you set the `SelectCommand` property of a .NET Framework data provider. Then, any additional SQL statements that you do not set are generated by the **CommandBuilder**. This generation logic requires key column information to be present in the <xref:System.Data.DataSet>. For more information see [Generating Commands with CommandBuilders](~/add/includes/ajax-current-ext-md.md).  \\n  \\n The Update method retrieves rows from the table listed in the first mapping before performing an update. The Update then refreshes the row using the value of the <xref:System.Data.IDbCommand.UpdatedRowSource%2A> property. Any additional rows returned are ignored.  \\n  \\n After any data is loaded back into the <xref:System.Data.DataSet>, the <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised, allowing the user to inspect the reconciled <xref:System.Data.DataSet> row and any output parameters returned by the command. After a row updates successfully, the changes to that row are accepted.  \\n  \\n When using Update, the order of execution is as follows:  \\n  \\n1.  The values in the <xref:System.Data.DataRow> are moved to the parameter values.  \\n  \\n2.  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> event is raised.  \\n  \\n3.  The command executes.  \\n  \\n4.  If the command is set to `FirstReturnedRecord`, then the first returned result is placed in the <xref:System.Data.DataRow>.  \\n  \\n5.  If there are output parameters, they are placed in the <xref:System.Data.DataRow>.  \\n  \\n6.  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised.  \\n  \\n7.  <xref:System.Data.DataRow.AcceptChanges%2A?displayProperty=fullName> is called. This will raise both the <xref:System.Data.DataTable.RowChanging?displayProperty=fullName> and <xref:System.Data.DataTable.RowChanged?displayProperty=fullName> events for the updated <xref:System.Data.DataRow>.  \\n  \\n Each command associated with the <xref:System.Data.Common.DataAdapter> usually has a parameters collection associated with it. Parameters are mapped to the current row through the `SourceColumn` and `SourceVersion` properties of a.NET data provider's `Parameter` class. `SourceColumn` refers to a <xref:System.Data.DataTable> column that the <xref:System.Data.Common.DataAdapter> references to obtain parameter values for the current row.  \\n  \\n `SourceColumn` refers to the unmapped column name before any table mappings have been applied. If `SourceColumn` refers to a nonexistent column, the action taken depends on one of the following <xref:System.Data.MissingMappingAction> values.  \\n  \\n|Enumeration value|Action taken|  \\n|-----------------------|------------------|  \\n|`MissingMappingAction.Passthrough`|Use the source column names and table names in the <xref:System.Data.DataSet> if no mapping is present.|  \\n|`MissingMappingAction.Ignore`|A <xref:System.SystemException> is generated. When the mappings are explicitly set, a missing mapping for an input parameter is usually the result of an error.|  \\n|`MissingMappingAction.Error`|A <xref:System.SystemException> is generated.|  \\n  \\n The `SourceColumn` property is also used to map the value for output or input/output parameters back to the `DataSet`. An exception is generated if it refers to a nonexistent column.  \\n  \\n The `SourceVersion` property of a .NET data provider's `Parameter` class determines whether to use the Original, Current, or Proposed version of the column value. This capability is often used to include original values in the WHERE clause of an UPDATE statement to check for optimistic concurrency violations.  \\n  \\n Calling the <xref:System.Data.DataSet.AcceptChanges%2A> method or <xref:System.Data.DataTable.AcceptChanges%2A> method will commit all changes in the <xref:System.Data.DataSet> or <xref:System.Data.DataTable>. If either of these methods are called before the <xref:System.Data.Common.DbDataAdapter.Update%2A> method is called, no changes will be committed when the <xref:System.Data.Common.DbDataAdapter.Update%2A> method is called, unless further changes have been made since <xref:System.Data.DataSet.AcceptChanges%2A> or <xref:System.Data.DataTable.AcceptChanges%2A> was called.  \\n  \\n> [!NOTE]\\n>  If an error occurs while updating a row, an exception is thrown and execution of the update is discontinued. To continue the update operation without generating exceptions when an error is encountered, set the <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> property to `true` before calling <xref:System.Data.Common.DbDataAdapter.Update%2A>. You may also respond to errors on a per-row basis within the `RowUpdated` event of a DataAdapter. To continue the update operation without generating an exception within the `RowUpdated` event, set the <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> property of the <xref:System.Data.Common.RowUpdatedEventArgs> to <xref:System.Data.UpdateStatus>.  \\n>   \\n>  For every column that you propagate to the data source onUpdate, a parameter should be added to the `InsertCommand`, `UpdateCommand`, or `DeleteCommand`. The `SourceColumn` property of the parameter should be set to the name of the column. This setting indicates that the value of the parameter is not set manually, but is taken from the particular column in the currently processed row.\"\n  example:\n  - \"The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to Update the data source.  \\n  \\n [!code-cs[Classic WebData DataAdapter.IDataAdapter.Update Example#1](~/add/codesnippet/csharp/m-system.data.common.dat_26_1.cs)]\\n [!code-vb[Classic WebData DataAdapter.IDataAdapter.Update Example#1](~/add/codesnippet/visualbasic/m-system.data.common.dat_26_1.vb)]\"\n  syntax:\n    content: public virtual int Update (System.Data.DataSet dataSet);\n    parameters:\n    - id: dataSet\n      type: System.Data.DataSet\n      description: The <xref href=\"System.Data.DataSet\"></xref> used to update the data source.\n    return:\n      type: System.Int32\n      description: The number of rows successfully updated from the <xref href=\"System.Data.DataSet\"></xref>.\n  overload: System.Data.Common.DataAdapter.Update*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The source table is invalid.\n  - type: System.Data.DBConcurrencyException\n    commentId: T:System.Data.DBConcurrencyException\n    description: An attempt to execute an INSERT, UPDATE, or DELETE statement resulted in zero records affected.\n  platform:\n  - net462\nreferences:\n- uid: System.ComponentModel.Component\n  isExternal: false\n  name: System.ComponentModel.Component\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.Data.DBConcurrencyException\n  parent: System.Data\n  isExternal: false\n  name: DBConcurrencyException\n  nameWithType: DBConcurrencyException\n  fullName: System.Data.DBConcurrencyException\n- uid: System.Data.Common.DataAdapter.#ctor\n  parent: System.Data.Common.DataAdapter\n  isExternal: false\n  name: DataAdapter()\n  nameWithType: DataAdapter.DataAdapter()\n  fullName: System.Data.Common.DataAdapter.DataAdapter()\n- uid: System.Data.Common.DataAdapter.#ctor(System.Data.Common.DataAdapter)\n  parent: System.Data.Common.DataAdapter\n  isExternal: false\n  name: DataAdapter(DataAdapter)\n  nameWithType: DataAdapter.DataAdapter(DataAdapter)\n  fullName: System.Data.Common.DataAdapter.DataAdapter(DataAdapter)\n- uid: System.Data.Common.DataAdapter\n  parent: System.Data.Common\n  isExternal: false\n  name: DataAdapter\n  nameWithType: DataAdapter\n  fullName: System.Data.Common.DataAdapter\n- uid: System.Data.Common.DataAdapter.AcceptChangesDuringFill\n  parent: System.Data.Common.DataAdapter\n  isExternal: false\n  name: AcceptChangesDuringFill\n  nameWithType: DataAdapter.AcceptChangesDuringFill\n  fullName: System.Data.Common.DataAdapter.AcceptChangesDuringFill\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Data.Common.DataAdapter.AcceptChangesDuringUpdate\n  parent: System.Data.Common.DataAdapter\n  isExternal: false\n  name: AcceptChangesDuringUpdate\n  nameWithType: DataAdapter.AcceptChangesDuringUpdate\n  fullName: System.Data.Common.DataAdapter.AcceptChangesDuringUpdate\n- uid: System.Data.Common.DataAdapter.CloneInternals\n  parent: System.Data.Common.DataAdapter\n  isExternal: false\n  name: CloneInternals()\n  nameWithType: DataAdapter.CloneInternals()\n  fullName: System.Data.Common.DataAdapter.CloneInternals()\n- uid: System.Data.Common.DataAdapter.ContinueUpdateOnError\n  parent: System.Data.Common.DataAdapter\n  isExternal: false\n  name: ContinueUpdateOnError\n  nameWithType: DataAdapter.ContinueUpdateOnError\n  fullName: System.Data.Common.DataAdapter.ContinueUpdateOnError\n- uid: System.Data.Common.DataAdapter.CreateTableMappings\n  parent: System.Data.Common.DataAdapter\n  isExternal: false\n  name: CreateTableMappings()\n  nameWithType: DataAdapter.CreateTableMappings()\n  fullName: System.Data.Common.DataAdapter.CreateTableMappings()\n- uid: System.Data.Common.DataTableMappingCollection\n  parent: System.Data.Common\n  isExternal: false\n  name: DataTableMappingCollection\n  nameWithType: DataTableMappingCollection\n  fullName: System.Data.Common.DataTableMappingCollection\n- uid: System.Data.Common.DataAdapter.Dispose(System.Boolean)\n  parent: System.Data.Common.DataAdapter\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: DataAdapter.Dispose(Boolean)\n  fullName: System.Data.Common.DataAdapter.Dispose(Boolean)\n- uid: System.Data.Common.DataAdapter.Fill(System.Data.DataSet)\n  parent: System.Data.Common.DataAdapter\n  isExternal: false\n  name: Fill(DataSet)\n  nameWithType: DataAdapter.Fill(DataSet)\n  fullName: System.Data.Common.DataAdapter.Fill(DataSet)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Data.DataSet\n  parent: System.Data\n  isExternal: false\n  name: DataSet\n  nameWithType: DataSet\n  fullName: System.Data.DataSet\n- uid: System.Data.Common.DataAdapter.Fill(System.Data.DataTable,System.Data.IDataReader)\n  parent: System.Data.Common.DataAdapter\n  isExternal: false\n  name: Fill(DataTable,IDataReader)\n  nameWithType: DataAdapter.Fill(DataTable,IDataReader)\n  fullName: System.Data.Common.DataAdapter.Fill(DataTable,IDataReader)\n- uid: System.Data.DataTable\n  parent: System.Data\n  isExternal: false\n  name: DataTable\n  nameWithType: DataTable\n  fullName: System.Data.DataTable\n- uid: System.Data.IDataReader\n  parent: System.Data\n  isExternal: false\n  name: IDataReader\n  nameWithType: IDataReader\n  fullName: System.Data.IDataReader\n- uid: System.Data.Common.DataAdapter.Fill(System.Data.DataTable[],System.Data.IDataReader,System.Int32,System.Int32)\n  parent: System.Data.Common.DataAdapter\n  isExternal: false\n  name: Fill(DataTable[],IDataReader,Int32,Int32)\n  nameWithType: DataAdapter.Fill(DataTable[],IDataReader,Int32,Int32)\n  fullName: System.Data.Common.DataAdapter.Fill(DataTable[],IDataReader,Int32,Int32)\n- uid: System.Data.DataTable[]\n  parent: System.Data\n  isExternal: false\n  name: DataTable\n  nameWithType: DataTable\n  fullName: System.Data.DataTable[]\n  spec.csharp:\n  - uid: System.Data.DataTable\n    name: DataTable\n    nameWithType: DataTable\n    fullName: DataTable[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Data.Common.DataAdapter.Fill(System.Data.DataSet,System.String,System.Data.IDataReader,System.Int32,System.Int32)\n  parent: System.Data.Common.DataAdapter\n  isExternal: false\n  name: Fill(DataSet,String,IDataReader,Int32,Int32)\n  nameWithType: DataAdapter.Fill(DataSet,String,IDataReader,Int32,Int32)\n  fullName: System.Data.Common.DataAdapter.Fill(DataSet,String,IDataReader,Int32,Int32)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Data.Common.DataAdapter.FillError\n  parent: System.Data.Common.DataAdapter\n  isExternal: false\n  name: FillError\n  nameWithType: DataAdapter.FillError\n  fullName: System.Data.Common.DataAdapter.FillError\n- uid: System.Data.FillErrorEventHandler\n  parent: System.Data\n  isExternal: false\n  name: FillErrorEventHandler\n  nameWithType: FillErrorEventHandler\n  fullName: System.Data.FillErrorEventHandler\n- uid: System.Data.Common.DataAdapter.FillLoadOption\n  parent: System.Data.Common.DataAdapter\n  isExternal: false\n  name: FillLoadOption\n  nameWithType: DataAdapter.FillLoadOption\n  fullName: System.Data.Common.DataAdapter.FillLoadOption\n- uid: System.Data.LoadOption\n  parent: System.Data\n  isExternal: false\n  name: LoadOption\n  nameWithType: LoadOption\n  fullName: System.Data.LoadOption\n- uid: System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)\n  parent: System.Data.Common.DataAdapter\n  isExternal: false\n  name: FillSchema(DataSet,SchemaType)\n  nameWithType: DataAdapter.FillSchema(DataSet,SchemaType)\n  fullName: System.Data.Common.DataAdapter.FillSchema(DataSet,SchemaType)\n- uid: System.Data.SchemaType\n  parent: System.Data\n  isExternal: false\n  name: SchemaType\n  nameWithType: SchemaType\n  fullName: System.Data.SchemaType\n- uid: System.Data.Common.DataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDataReader)\n  parent: System.Data.Common.DataAdapter\n  isExternal: false\n  name: FillSchema(DataTable,SchemaType,IDataReader)\n  nameWithType: DataAdapter.FillSchema(DataTable,SchemaType,IDataReader)\n  fullName: System.Data.Common.DataAdapter.FillSchema(DataTable,SchemaType,IDataReader)\n- uid: System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String,System.Data.IDataReader)\n  parent: System.Data.Common.DataAdapter\n  isExternal: false\n  name: FillSchema(DataSet,SchemaType,String,IDataReader)\n  nameWithType: DataAdapter.FillSchema(DataSet,SchemaType,String,IDataReader)\n  fullName: System.Data.Common.DataAdapter.FillSchema(DataSet,SchemaType,String,IDataReader)\n- uid: System.Data.Common.DataAdapter.GetFillParameters\n  parent: System.Data.Common.DataAdapter\n  isExternal: false\n  name: GetFillParameters()\n  nameWithType: DataAdapter.GetFillParameters()\n  fullName: System.Data.Common.DataAdapter.GetFillParameters()\n- uid: System.Data.IDataParameter[]\n  parent: System.Data\n  isExternal: false\n  name: IDataParameter\n  nameWithType: IDataParameter\n  fullName: System.Data.IDataParameter[]\n  spec.csharp:\n  - uid: System.Data.IDataParameter\n    name: IDataParameter\n    nameWithType: IDataParameter\n    fullName: IDataParameter[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Data.Common.DataAdapter.HasTableMappings\n  parent: System.Data.Common.DataAdapter\n  isExternal: false\n  name: HasTableMappings()\n  nameWithType: DataAdapter.HasTableMappings()\n  fullName: System.Data.Common.DataAdapter.HasTableMappings()\n- uid: System.Data.Common.DataAdapter.MissingMappingAction\n  parent: System.Data.Common.DataAdapter\n  isExternal: false\n  name: MissingMappingAction\n  nameWithType: DataAdapter.MissingMappingAction\n  fullName: System.Data.Common.DataAdapter.MissingMappingAction\n- uid: System.Data.MissingMappingAction\n  parent: System.Data\n  isExternal: false\n  name: MissingMappingAction\n  nameWithType: MissingMappingAction\n  fullName: System.Data.MissingMappingAction\n- uid: System.Data.Common.DataAdapter.MissingSchemaAction\n  parent: System.Data.Common.DataAdapter\n  isExternal: false\n  name: MissingSchemaAction\n  nameWithType: DataAdapter.MissingSchemaAction\n  fullName: System.Data.Common.DataAdapter.MissingSchemaAction\n- uid: System.Data.MissingSchemaAction\n  parent: System.Data\n  isExternal: false\n  name: MissingSchemaAction\n  nameWithType: MissingSchemaAction\n  fullName: System.Data.MissingSchemaAction\n- uid: System.Data.Common.DataAdapter.OnFillError(System.Data.FillErrorEventArgs)\n  parent: System.Data.Common.DataAdapter\n  isExternal: false\n  name: OnFillError(FillErrorEventArgs)\n  nameWithType: DataAdapter.OnFillError(FillErrorEventArgs)\n  fullName: System.Data.Common.DataAdapter.OnFillError(FillErrorEventArgs)\n- uid: System.Data.FillErrorEventArgs\n  parent: System.Data\n  isExternal: false\n  name: FillErrorEventArgs\n  nameWithType: FillErrorEventArgs\n  fullName: System.Data.FillErrorEventArgs\n- uid: System.Data.Common.DataAdapter.ResetFillLoadOption\n  parent: System.Data.Common.DataAdapter\n  isExternal: false\n  name: ResetFillLoadOption()\n  nameWithType: DataAdapter.ResetFillLoadOption()\n  fullName: System.Data.Common.DataAdapter.ResetFillLoadOption()\n- uid: System.Data.Common.DataAdapter.ReturnProviderSpecificTypes\n  parent: System.Data.Common.DataAdapter\n  isExternal: false\n  name: ReturnProviderSpecificTypes\n  nameWithType: DataAdapter.ReturnProviderSpecificTypes\n  fullName: System.Data.Common.DataAdapter.ReturnProviderSpecificTypes\n- uid: System.Data.Common.DataAdapter.ShouldSerializeAcceptChangesDuringFill\n  parent: System.Data.Common.DataAdapter\n  isExternal: false\n  name: ShouldSerializeAcceptChangesDuringFill()\n  nameWithType: DataAdapter.ShouldSerializeAcceptChangesDuringFill()\n  fullName: System.Data.Common.DataAdapter.ShouldSerializeAcceptChangesDuringFill()\n- uid: System.Data.Common.DataAdapter.ShouldSerializeFillLoadOption\n  parent: System.Data.Common.DataAdapter\n  isExternal: false\n  name: ShouldSerializeFillLoadOption()\n  nameWithType: DataAdapter.ShouldSerializeFillLoadOption()\n  fullName: System.Data.Common.DataAdapter.ShouldSerializeFillLoadOption()\n- uid: System.Data.Common.DataAdapter.ShouldSerializeTableMappings\n  parent: System.Data.Common.DataAdapter\n  isExternal: false\n  name: ShouldSerializeTableMappings()\n  nameWithType: DataAdapter.ShouldSerializeTableMappings()\n  fullName: System.Data.Common.DataAdapter.ShouldSerializeTableMappings()\n- uid: System.Data.Common.DataAdapter.System#Data#IDataAdapter#TableMappings\n  parent: System.Data.Common.DataAdapter\n  isExternal: false\n  name: System.Data.IDataAdapter.TableMappings\n  nameWithType: DataAdapter.System.Data.IDataAdapter.TableMappings\n  fullName: System.Data.Common.DataAdapter.System.Data.IDataAdapter.TableMappings\n- uid: System.Data.ITableMappingCollection\n  parent: System.Data\n  isExternal: false\n  name: ITableMappingCollection\n  nameWithType: ITableMappingCollection\n  fullName: System.Data.ITableMappingCollection\n- uid: System.Data.Common.DataAdapter.TableMappings\n  parent: System.Data.Common.DataAdapter\n  isExternal: false\n  name: TableMappings\n  nameWithType: DataAdapter.TableMappings\n  fullName: System.Data.Common.DataAdapter.TableMappings\n- uid: System.Data.Common.DataAdapter.Update(System.Data.DataSet)\n  parent: System.Data.Common.DataAdapter\n  isExternal: false\n  name: Update(DataSet)\n  nameWithType: DataAdapter.Update(DataSet)\n  fullName: System.Data.Common.DataAdapter.Update(DataSet)\n- uid: System.Data.Common.DataAdapter.#ctor*\n  parent: System.Data.Common.DataAdapter\n  isExternal: false\n  name: DataAdapter\n  nameWithType: DataAdapter.DataAdapter\n- uid: System.Data.Common.DataAdapter.AcceptChangesDuringFill*\n  parent: System.Data.Common.DataAdapter\n  isExternal: false\n  name: AcceptChangesDuringFill\n  nameWithType: DataAdapter.AcceptChangesDuringFill\n- uid: System.Data.Common.DataAdapter.AcceptChangesDuringUpdate*\n  parent: System.Data.Common.DataAdapter\n  isExternal: false\n  name: AcceptChangesDuringUpdate\n  nameWithType: DataAdapter.AcceptChangesDuringUpdate\n- uid: System.Data.Common.DataAdapter.CloneInternals*\n  parent: System.Data.Common.DataAdapter\n  isExternal: false\n  name: CloneInternals\n  nameWithType: DataAdapter.CloneInternals\n- uid: System.Data.Common.DataAdapter.ContinueUpdateOnError*\n  parent: System.Data.Common.DataAdapter\n  isExternal: false\n  name: ContinueUpdateOnError\n  nameWithType: DataAdapter.ContinueUpdateOnError\n- uid: System.Data.Common.DataAdapter.CreateTableMappings*\n  parent: System.Data.Common.DataAdapter\n  isExternal: false\n  name: CreateTableMappings\n  nameWithType: DataAdapter.CreateTableMappings\n- uid: System.Data.Common.DataAdapter.Dispose*\n  parent: System.Data.Common.DataAdapter\n  isExternal: false\n  name: Dispose\n  nameWithType: DataAdapter.Dispose\n- uid: System.Data.Common.DataAdapter.Fill*\n  parent: System.Data.Common.DataAdapter\n  isExternal: false\n  name: Fill\n  nameWithType: DataAdapter.Fill\n- uid: System.Data.Common.DataAdapter.FillLoadOption*\n  parent: System.Data.Common.DataAdapter\n  isExternal: false\n  name: FillLoadOption\n  nameWithType: DataAdapter.FillLoadOption\n- uid: System.Data.Common.DataAdapter.FillSchema*\n  parent: System.Data.Common.DataAdapter\n  isExternal: false\n  name: FillSchema\n  nameWithType: DataAdapter.FillSchema\n- uid: System.Data.Common.DataAdapter.GetFillParameters*\n  parent: System.Data.Common.DataAdapter\n  isExternal: false\n  name: GetFillParameters\n  nameWithType: DataAdapter.GetFillParameters\n- uid: System.Data.Common.DataAdapter.HasTableMappings*\n  parent: System.Data.Common.DataAdapter\n  isExternal: false\n  name: HasTableMappings\n  nameWithType: DataAdapter.HasTableMappings\n- uid: System.Data.Common.DataAdapter.MissingMappingAction*\n  parent: System.Data.Common.DataAdapter\n  isExternal: false\n  name: MissingMappingAction\n  nameWithType: DataAdapter.MissingMappingAction\n- uid: System.Data.Common.DataAdapter.MissingSchemaAction*\n  parent: System.Data.Common.DataAdapter\n  isExternal: false\n  name: MissingSchemaAction\n  nameWithType: DataAdapter.MissingSchemaAction\n- uid: System.Data.Common.DataAdapter.OnFillError*\n  parent: System.Data.Common.DataAdapter\n  isExternal: false\n  name: OnFillError\n  nameWithType: DataAdapter.OnFillError\n- uid: System.Data.Common.DataAdapter.ResetFillLoadOption*\n  parent: System.Data.Common.DataAdapter\n  isExternal: false\n  name: ResetFillLoadOption\n  nameWithType: DataAdapter.ResetFillLoadOption\n- uid: System.Data.Common.DataAdapter.ReturnProviderSpecificTypes*\n  parent: System.Data.Common.DataAdapter\n  isExternal: false\n  name: ReturnProviderSpecificTypes\n  nameWithType: DataAdapter.ReturnProviderSpecificTypes\n- uid: System.Data.Common.DataAdapter.ShouldSerializeAcceptChangesDuringFill*\n  parent: System.Data.Common.DataAdapter\n  isExternal: false\n  name: ShouldSerializeAcceptChangesDuringFill\n  nameWithType: DataAdapter.ShouldSerializeAcceptChangesDuringFill\n- uid: System.Data.Common.DataAdapter.ShouldSerializeFillLoadOption*\n  parent: System.Data.Common.DataAdapter\n  isExternal: false\n  name: ShouldSerializeFillLoadOption\n  nameWithType: DataAdapter.ShouldSerializeFillLoadOption\n- uid: System.Data.Common.DataAdapter.ShouldSerializeTableMappings*\n  parent: System.Data.Common.DataAdapter\n  isExternal: false\n  name: ShouldSerializeTableMappings\n  nameWithType: DataAdapter.ShouldSerializeTableMappings\n- uid: System.Data.Common.DataAdapter.System#Data#IDataAdapter#TableMappings*\n  parent: System.Data.Common.DataAdapter\n  isExternal: false\n  name: System.Data.IDataAdapter.TableMappings\n  nameWithType: DataAdapter.System.Data.IDataAdapter.TableMappings\n- uid: System.Data.Common.DataAdapter.TableMappings*\n  parent: System.Data.Common.DataAdapter\n  isExternal: false\n  name: TableMappings\n  nameWithType: DataAdapter.TableMappings\n- uid: System.Data.Common.DataAdapter.Update*\n  parent: System.Data.Common.DataAdapter\n  isExternal: false\n  name: Update\n  nameWithType: DataAdapter.Update\n"}