{"nodes":[{"pos":[469,573],"content":"Supports a simple iteration over a <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.StringCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Supports a simple iteration over a <xref href=\"System.Collections.Specialized.StringCollection\"></xref>."},{"pos":[586,4031],"content":"The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.       Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.       Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.Specialized.StringEnumerator.Reset%2A> also brings the enumerator back to this position. At this position, calling <xref:System.Collections.Specialized.StringEnumerator.Current%2A> throws an exception. Therefore, you must call <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Specialized.StringEnumerator.Current%2A>.       <xref:System.Collections.Specialized.StringEnumerator.Current%2A> returns the same object until either <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> or <xref:System.Collections.Specialized.StringEnumerator.Reset%2A> is called. <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> sets <xref:System.Collections.Specialized.StringEnumerator.Current%2A> to the next element.       If <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> returned `false`, calling <xref:System.Collections.Specialized.StringEnumerator.Current%2A> throws an exception. To set <xref:System.Collections.Specialized.StringEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.Specialized.StringEnumerator.Reset%2A> followed by <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A>.       An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> or <xref:System.Collections.Specialized.StringEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>. If the collection is modified between <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> and <xref:System.Collections.Specialized.StringEnumerator.Current%2A>, <xref:System.Collections.Specialized.StringEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.       The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <ph id=\"ph1\">`foreach`</ph> statement of the C# language (<ph id=\"ph2\">`for each`</ph> in Visual Basic) hides the complexity of the enumerators.","pos":[0,112],"source":"The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators."},{"content":"Therefore, using <ph id=\"ph1\">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.","pos":[114,205],"source":"  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator."},{"content":"Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.","pos":[212,332]},{"content":"Initially, the enumerator is positioned before the first element in the collection.","pos":[339,422]},{"content":"&lt;xref:System.Collections.Specialized.StringEnumerator.Reset%2A&gt; also brings the enumerator back to this position.","pos":[423,536],"source":" <xref:System.Collections.Specialized.StringEnumerator.Reset%2A> also brings the enumerator back to this position."},{"content":"At this position, calling &lt;xref:System.Collections.Specialized.StringEnumerator.Current%2A&gt; throws an exception.","pos":[537,649],"source":" At this position, calling <xref:System.Collections.Specialized.StringEnumerator.Current%2A> throws an exception."},{"content":"Therefore, you must call &lt;xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A&gt; to advance the enumerator to the first element of the collection before reading the value of &lt;xref:System.Collections.Specialized.StringEnumerator.Current%2A&gt;.","pos":[650,901],"source":" Therefore, you must call <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Specialized.StringEnumerator.Current%2A>."},{"content":"&lt;xref:System.Collections.Specialized.StringEnumerator.Current%2A&gt; returns the same object until either &lt;xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A&gt; or &lt;xref:System.Collections.Specialized.StringEnumerator.Reset%2A&gt; is called.","pos":[908,1155],"source":"       <xref:System.Collections.Specialized.StringEnumerator.Current%2A> returns the same object until either <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> or <xref:System.Collections.Specialized.StringEnumerator.Reset%2A> is called."},{"content":"&lt;xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A&gt; sets &lt;xref:System.Collections.Specialized.StringEnumerator.Current%2A&gt; to the next element.","pos":[1156,1314],"source":" <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> sets <xref:System.Collections.Specialized.StringEnumerator.Current%2A> to the next element."},{"content":"If &lt;xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A&gt; passes the end of the collection, the enumerator is positioned after the last element in the collection and &lt;xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A&gt; returns <ph id=\"ph1\">`false`</ph>.","pos":[1321,1582],"source":"       If <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> returns `false`."},{"content":"When the enumerator is at this position, subsequent calls to &lt;xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A&gt; also return <ph id=\"ph1\">`false`</ph>.","pos":[1583,1731],"source":" When the enumerator is at this position, subsequent calls to <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> also return `false`."},{"content":"If the last call to &lt;xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A&gt; returned <ph id=\"ph1\">`false`</ph>, calling &lt;xref:System.Collections.Specialized.StringEnumerator.Current%2A&gt; throws an exception.","pos":[1732,1931],"source":" If the last call to <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> returned `false`, calling <xref:System.Collections.Specialized.StringEnumerator.Current%2A> throws an exception."},{"content":"To set &lt;xref:System.Collections.Specialized.StringEnumerator.Current%2A&gt; to the first element of the collection again, you can call &lt;xref:System.Collections.Specialized.StringEnumerator.Reset%2A&gt; followed by &lt;xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A&gt;.","pos":[1932,2207],"source":" To set <xref:System.Collections.Specialized.StringEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.Specialized.StringEnumerator.Reset%2A> followed by <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A>."},{"content":"An enumerator remains valid as long as the collection remains unchanged.","pos":[2214,2286]},{"content":"If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to &lt;xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A&gt; or &lt;xref:System.Collections.Specialized.StringEnumerator.Reset%2A&gt; throws an &lt;xref:System.InvalidOperationException&gt;.","pos":[2287,2624],"source":" If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> or <xref:System.Collections.Specialized.StringEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>."},{"content":"If the collection is modified between &lt;xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A&gt; and &lt;xref:System.Collections.Specialized.StringEnumerator.Current%2A&gt;, &lt;xref:System.Collections.Specialized.StringEnumerator.Current%2A&gt; returns the element that it is set to, even if the enumerator is already invalidated.","pos":[2625,2952],"source":" If the collection is modified between <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> and <xref:System.Collections.Specialized.StringEnumerator.Current%2A>, <xref:System.Collections.Specialized.StringEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated."},{"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.","pos":[2959,3113]},{"content":"Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.","pos":[3114,3251]},{"content":"To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[3252,3433]}]},{"pos":[5054,5097],"content":"Gets the current element in the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the current element in the collection.","pos":[0,43]}]},{"pos":[5110,6570],"content":"After an enumerator is created or after a <xref:System.Collections.Specialized.StringEnumerator.Reset%2A> is called, <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> must be called to advance the enumerator to the first element of the collection before reading the value of Current; otherwise, Current is undefined.       Current also throws an exception if the last call to <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> returned `false`, which indicates the end of the collection.       Current does not move the position of the enumerator, and consecutive calls to Current return the same object until either <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> or <xref:System.Collections.Specialized.StringEnumerator.Reset%2A> is called.       An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>. If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"After an enumerator is created or after a &lt;xref:System.Collections.Specialized.StringEnumerator.Reset%2A&gt; is called, &lt;xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A&gt; must be called to advance the enumerator to the first element of the collection before reading the value of Current; otherwise, Current is undefined.","pos":[0,333],"source":"After an enumerator is created or after a <xref:System.Collections.Specialized.StringEnumerator.Reset%2A> is called, <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> must be called to advance the enumerator to the first element of the collection before reading the value of Current; otherwise, Current is undefined."},{"content":"Current also throws an exception if the last call to &lt;xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A&gt; returned <ph id=\"ph1\">`false`</ph>, which indicates the end of the collection.","pos":[340,520],"source":"       Current also throws an exception if the last call to <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> returned `false`, which indicates the end of the collection."},{"content":"Current does not move the position of the enumerator, and consecutive calls to Current return the same object until either &lt;xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A&gt; or &lt;xref:System.Collections.Specialized.StringEnumerator.Reset%2A&gt; is called.","pos":[527,794],"source":"       Current does not move the position of the enumerator, and consecutive calls to Current return the same object until either <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> or <xref:System.Collections.Specialized.StringEnumerator.Reset%2A> is called."},{"content":"An enumerator remains valid as long as the collection remains unchanged.","pos":[801,873]},{"content":"If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; or &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; throws an &lt;xref:System.InvalidOperationException&gt;.","pos":[874,1177],"source":" If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>."},{"content":"If the collection is modified between &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; and &lt;xref:System.Collections.IEnumerator.Current%2A&gt;, &lt;xref:System.Collections.IEnumerator.Current%2A&gt; returns the element that it is set to, even if the enumerator is already invalidated.","pos":[1178,1454],"source":" If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated."}]},{"pos":[7216,7254],"content":"The current element in the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"The current element in the collection.","pos":[0,38]}]},{"pos":[7448,7546],"content":"The enumerator is positioned before the first element of the collection or after the last element.","needQuote":true,"needEscape":true,"nodes":[{"content":"The enumerator is positioned before the first element of the collection or after the last element.","pos":[0,98]}]},{"pos":[7956,8018],"content":"Advances the enumerator to the next element of the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Advances the enumerator to the next element of the collection.","pos":[0,62]}]},{"pos":[8031,9300],"content":"After an enumerator is created or after a <xref:System.Collections.Specialized.StringEnumerator.Reset%2A> is called, an enumerator is positioned before the first element of the collection, and the first call to MoveNext moves the enumerator over the first element of the collection.       If MoveNext passes the end of the collection, the enumerator is positioned after the last element in the collection and MoveNext returns `false`. When the enumerator is at this position, subsequent calls to MoveNext also return `false` until <xref:System.Collections.Specialized.StringEnumerator.Reset%2A> is called.       An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>. If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"After an enumerator is created or after a &lt;xref:System.Collections.Specialized.StringEnumerator.Reset%2A&gt; is called, an enumerator is positioned before the first element of the collection, and the first call to MoveNext moves the enumerator over the first element of the collection.","pos":[0,282],"source":"After an enumerator is created or after a <xref:System.Collections.Specialized.StringEnumerator.Reset%2A> is called, an enumerator is positioned before the first element of the collection, and the first call to MoveNext moves the enumerator over the first element of the collection."},{"content":"If MoveNext passes the end of the collection, the enumerator is positioned after the last element in the collection and MoveNext returns <ph id=\"ph1\">`false`</ph>.","pos":[289,434],"source":"       If MoveNext passes the end of the collection, the enumerator is positioned after the last element in the collection and MoveNext returns `false`."},{"content":"When the enumerator is at this position, subsequent calls to MoveNext also return <ph id=\"ph1\">`false`</ph> until &lt;xref:System.Collections.Specialized.StringEnumerator.Reset%2A&gt; is called.","pos":[435,605],"source":" When the enumerator is at this position, subsequent calls to MoveNext also return `false` until <xref:System.Collections.Specialized.StringEnumerator.Reset%2A> is called."},{"content":"An enumerator remains valid as long as the collection remains unchanged.","pos":[612,684]},{"content":"If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; or &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; throws an &lt;xref:System.InvalidOperationException&gt;.","pos":[685,988],"source":" If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>."},{"content":"If the collection is modified between &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; and &lt;xref:System.Collections.IEnumerator.Current%2A&gt;, &lt;xref:System.Collections.IEnumerator.Current%2A&gt; returns the element that it is set to, even if the enumerator is already invalidated.","pos":[989,1265],"source":" If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated."}]},{"pos":[9963,10207],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the enumerator was successfully advanced to the next element; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> if the enumerator has passed the end of the collection.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the enumerator was successfully advanced to the next element; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if the enumerator has passed the end of the collection."},{"pos":[10402,10463],"content":"The collection was modified after the enumerator was created.","needQuote":true,"needEscape":true,"nodes":[{"content":"The collection was modified after the enumerator was created.","pos":[0,61]}]},{"pos":[10858,10955],"content":"Sets the enumerator to its initial position, which is before the first element in the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sets the enumerator to its initial position, which is before the first element in the collection.","pos":[0,97]}]},{"pos":[10967,11310],"content":"Reset moves the enumerator to the beginning of the collection, before the first element. After Reset, <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> must be called to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Specialized.StringEnumerator.Current%2A>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Reset moves the enumerator to the beginning of the collection, before the first element. After Reset, <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> must be called to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Specialized.StringEnumerator.Current%2A>.","pos":[0,343],"nodes":[{"content":"Reset moves the enumerator to the beginning of the collection, before the first element.","pos":[0,88]},{"content":"After Reset, &lt;xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A&gt; must be called to advance the enumerator to the first element of the collection before reading the value of &lt;xref:System.Collections.Specialized.StringEnumerator.Current%2A&gt;.","pos":[89,343],"source":" After Reset, <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> must be called to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Specialized.StringEnumerator.Current%2A>."}]}]},{"pos":[12102,12163],"content":"The collection was modified after the enumerator was created.","needQuote":true,"needEscape":true,"nodes":[{"content":"The collection was modified after the enumerator was created.","pos":[0,61]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Collections.Specialized.StringEnumerator\n  id: StringEnumerator\n  children:\n  - System.Collections.Specialized.StringEnumerator.Current\n  - System.Collections.Specialized.StringEnumerator.MoveNext\n  - System.Collections.Specialized.StringEnumerator.Reset\n  langs:\n  - csharp\n  name: StringEnumerator\n  nameWithType: StringEnumerator\n  fullName: System.Collections.Specialized.StringEnumerator\n  type: Class\n  summary: Supports a simple iteration over a <xref href=\"System.Collections.Specialized.StringCollection\"></xref>.\n  remarks: \"The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \\n  \\n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \\n  \\n Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.Specialized.StringEnumerator.Reset%2A> also brings the enumerator back to this position. At this position, calling <xref:System.Collections.Specialized.StringEnumerator.Current%2A> throws an exception. Therefore, you must call <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Specialized.StringEnumerator.Current%2A>.  \\n  \\n <xref:System.Collections.Specialized.StringEnumerator.Current%2A> returns the same object until either <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> or <xref:System.Collections.Specialized.StringEnumerator.Reset%2A> is called. <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> sets <xref:System.Collections.Specialized.StringEnumerator.Current%2A> to the next element.  \\n  \\n If <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> returned `false`, calling <xref:System.Collections.Specialized.StringEnumerator.Current%2A> throws an exception. To set <xref:System.Collections.Specialized.StringEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.Specialized.StringEnumerator.Reset%2A> followed by <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A>.  \\n  \\n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> or <xref:System.Collections.Specialized.StringEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>. If the collection is modified between <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> and <xref:System.Collections.Specialized.StringEnumerator.Current%2A>, <xref:System.Collections.Specialized.StringEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.  \\n  \\n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.\"\n  example:\n  - \"The following code example demonstrates several of the properties and methods of StringEnumerator.  \\n  \\n [!code-cs[System.Collections.Specialized.StringEnumerator2#1](~/add/codesnippet/csharp/t-system.collections.spe_8_1.cs)]\\n [!code-cpp[System.Collections.Specialized.StringEnumerator2#1](~/add/codesnippet/cpp/t-system.collections.spe_8_1.cpp)]\\n [!code-vb[System.Collections.Specialized.StringEnumerator2#1](~/add/codesnippet/visualbasic/t-system.collections.spe_8_1.vb)]\"\n  syntax:\n    content: public class StringEnumerator\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Collections.Specialized.StringEnumerator.Current\n  id: Current\n  parent: System.Collections.Specialized.StringEnumerator\n  langs:\n  - csharp\n  name: Current\n  nameWithType: StringEnumerator.Current\n  fullName: System.Collections.Specialized.StringEnumerator.Current\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  summary: Gets the current element in the collection.\n  remarks: \"After an enumerator is created or after a <xref:System.Collections.Specialized.StringEnumerator.Reset%2A> is called, <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> must be called to advance the enumerator to the first element of the collection before reading the value of Current; otherwise, Current is undefined.  \\n  \\n Current also throws an exception if the last call to <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> returned `false`, which indicates the end of the collection.  \\n  \\n Current does not move the position of the enumerator, and consecutive calls to Current return the same object until either <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> or <xref:System.Collections.Specialized.StringEnumerator.Reset%2A> is called.  \\n  \\n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>. If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.\"\n  example:\n  - \"The following code example demonstrates several of the properties and methods of <xref:System.Collections.Specialized.StringEnumerator>.  \\n  \\n [!code-cs[System.Collections.Specialized.StringEnumerator2#1](~/add/codesnippet/csharp/p-system.collections.spe_8_1.cs)]\\n [!code-cpp[System.Collections.Specialized.StringEnumerator2#1](~/add/codesnippet/cpp/p-system.collections.spe_8_1.cpp)]\\n [!code-vb[System.Collections.Specialized.StringEnumerator2#1](~/add/codesnippet/visualbasic/p-system.collections.spe_8_1.vb)]\"\n  syntax:\n    content: public string Current { get; }\n    return:\n      type: System.String\n      description: The current element in the collection.\n  overload: System.Collections.Specialized.StringEnumerator.Current*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The enumerator is positioned before the first element of the collection or after the last element.\n  platform:\n  - net462\n- uid: System.Collections.Specialized.StringEnumerator.MoveNext\n  id: MoveNext\n  parent: System.Collections.Specialized.StringEnumerator\n  langs:\n  - csharp\n  name: MoveNext()\n  nameWithType: StringEnumerator.MoveNext()\n  fullName: System.Collections.Specialized.StringEnumerator.MoveNext()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  summary: Advances the enumerator to the next element of the collection.\n  remarks: \"After an enumerator is created or after a <xref:System.Collections.Specialized.StringEnumerator.Reset%2A> is called, an enumerator is positioned before the first element of the collection, and the first call to MoveNext moves the enumerator over the first element of the collection.  \\n  \\n If MoveNext passes the end of the collection, the enumerator is positioned after the last element in the collection and MoveNext returns `false`. When the enumerator is at this position, subsequent calls to MoveNext also return `false` until <xref:System.Collections.Specialized.StringEnumerator.Reset%2A> is called.  \\n  \\n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>. If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.\"\n  example:\n  - \"The following code example demonstrates several of the properties and methods of <xref:System.Collections.Specialized.StringEnumerator>.  \\n  \\n [!code-cs[System.Collections.Specialized.StringEnumerator2#1](~/add/codesnippet/csharp/m-system.collections.spe_12_1.cs)]\\n [!code-cpp[System.Collections.Specialized.StringEnumerator2#1](~/add/codesnippet/cpp/m-system.collections.spe_12_1.cpp)]\\n [!code-vb[System.Collections.Specialized.StringEnumerator2#1](~/add/codesnippet/visualbasic/m-system.collections.spe_12_1.vb)]\"\n  syntax:\n    content: public bool MoveNext ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the enumerator was successfully advanced to the next element; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if the enumerator has passed the end of the collection.\n  overload: System.Collections.Specialized.StringEnumerator.MoveNext*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The collection was modified after the enumerator was created.\n  platform:\n  - net462\n- uid: System.Collections.Specialized.StringEnumerator.Reset\n  id: Reset\n  parent: System.Collections.Specialized.StringEnumerator\n  langs:\n  - csharp\n  name: Reset()\n  nameWithType: StringEnumerator.Reset()\n  fullName: System.Collections.Specialized.StringEnumerator.Reset()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Collections.Specialized\n  summary: Sets the enumerator to its initial position, which is before the first element in the collection.\n  remarks: Reset moves the enumerator to the beginning of the collection, before the first element. After Reset, <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> must be called to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Specialized.StringEnumerator.Current%2A>.\n  example:\n  - \"The following code example demonstrates several of the properties and methods of <xref:System.Collections.Specialized.StringEnumerator>.  \\n  \\n [!code-cs[System.Collections.Specialized.StringEnumerator2#1](~/add/codesnippet/csharp/m-system.collections.spe_14_1.cs)]\\n [!code-cpp[System.Collections.Specialized.StringEnumerator2#1](~/add/codesnippet/cpp/m-system.collections.spe_14_1.cpp)]\\n [!code-vb[System.Collections.Specialized.StringEnumerator2#1](~/add/codesnippet/visualbasic/m-system.collections.spe_14_1.vb)]\"\n  syntax:\n    content: public void Reset ();\n    parameters: []\n  overload: System.Collections.Specialized.StringEnumerator.Reset*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The collection was modified after the enumerator was created.\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.Collections.Specialized.StringEnumerator.Current\n  parent: System.Collections.Specialized.StringEnumerator\n  isExternal: false\n  name: Current\n  nameWithType: StringEnumerator.Current\n  fullName: System.Collections.Specialized.StringEnumerator.Current\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Collections.Specialized.StringEnumerator.MoveNext\n  parent: System.Collections.Specialized.StringEnumerator\n  isExternal: false\n  name: MoveNext()\n  nameWithType: StringEnumerator.MoveNext()\n  fullName: System.Collections.Specialized.StringEnumerator.MoveNext()\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Collections.Specialized.StringEnumerator.Reset\n  parent: System.Collections.Specialized.StringEnumerator\n  isExternal: false\n  name: Reset()\n  nameWithType: StringEnumerator.Reset()\n  fullName: System.Collections.Specialized.StringEnumerator.Reset()\n- uid: System.Collections.Specialized.StringEnumerator.Current*\n  parent: System.Collections.Specialized.StringEnumerator\n  isExternal: false\n  name: Current\n  nameWithType: StringEnumerator.Current\n- uid: System.Collections.Specialized.StringEnumerator.MoveNext*\n  parent: System.Collections.Specialized.StringEnumerator\n  isExternal: false\n  name: MoveNext\n  nameWithType: StringEnumerator.MoveNext\n- uid: System.Collections.Specialized.StringEnumerator.Reset*\n  parent: System.Collections.Specialized.StringEnumerator\n  isExternal: false\n  name: Reset\n  nameWithType: StringEnumerator.Reset\n"}