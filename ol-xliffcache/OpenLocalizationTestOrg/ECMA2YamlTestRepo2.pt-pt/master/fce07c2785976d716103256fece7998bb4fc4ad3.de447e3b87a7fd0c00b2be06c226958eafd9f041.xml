{"nodes":[{"pos":[1660,1725],"content":"Specifies a set of values that are used when you start a process.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies a set of values that are used when you start a process.","pos":[0,65]}]},{"pos":[1738,4946],"content":"ProcessStartInfo is used together with the <xref:System.Diagnostics.Process> component. When you start a process using the <xref:System.Diagnostics.Process> class, you have access to process information in addition to that available when attaching to a running process.       You can use the ProcessStartInfo class for better control over the process you start. You must at least set the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property, either manually or using the constructor. The file name is any application or document. Here a document is defined to be any file type that has an open or default action associated with it. You can view registered file types and their associated applications for your computer by using the **Folder Options** dialog box, which is available through the operating system. The **Advanced** button leads to a dialog box that shows whether there is an open action associated with a specific registered file type.       In addition, you can set other properties that define actions to take with that file. You can specify a value specific to the type of the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property for the <xref:System.Diagnostics.ProcessStartInfo.Verb%2A> property. For example, you can specify \"print\" for a document type. Additionally, you can specify <xref:System.Diagnostics.ProcessStartInfo.Arguments%2A> property values to be command-line arguments to pass to the file's open procedure. For example, if you specify a text editor application in the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property, you can use the <xref:System.Diagnostics.ProcessStartInfo.Arguments%2A> property to specify a text file to be opened by the editor.       Standard input is usually the keyboard, and standard output and standard error are usually the monitor screen. However, you can use the <xref:System.Diagnostics.ProcessStartInfo.RedirectStandardInput%2A>, <xref:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput%2A>, and <xref:System.Diagnostics.ProcessStartInfo.RedirectStandardError%2A> properties to cause the process to get input from or return output to a file or other device. If you use the <xref:System.Diagnostics.Process.StandardInput%2A>, <xref:System.Diagnostics.Process.StandardOutput%2A>, or <xref:System.Diagnostics.Process.StandardError%2A> properties on the <xref:System.Diagnostics.Process> component, you must first set the corresponding value on the ProcessStartInfo property. Otherwise, the system throws an exception when you read or write to the stream.       Set <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> to specify whether to start the process by using the operating system shell.       You can change the value of any ProcessStartInfo property up to the time that the process starts. After you start the process, changing these values has no effect.      > [!NOTE] >  This class contains a link demand at the class level that applies to all members. A <xref:System.Security.SecurityException> is thrown when the immediate caller does not have full-trust permission. For details about security demands, see [Link Demands](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"ProcessStartInfo is used together with the &lt;xref:System.Diagnostics.Process&gt; component.","pos":[0,87],"source":"ProcessStartInfo is used together with the <xref:System.Diagnostics.Process> component."},{"content":"When you start a process using the &lt;xref:System.Diagnostics.Process&gt; class, you have access to process information in addition to that available when attaching to a running process.","pos":[88,269],"source":" When you start a process using the <xref:System.Diagnostics.Process> class, you have access to process information in addition to that available when attaching to a running process."},{"content":"You can use the ProcessStartInfo class for better control over the process you start.","pos":[276,361]},{"content":"You must at least set the &lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt; property, either manually or using the constructor.","pos":[362,494],"source":" You must at least set the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property, either manually or using the constructor."},{"content":"The file name is any application or document.","pos":[495,540]},{"content":"Here a document is defined to be any file type that has an open or default action associated with it.","pos":[541,642]},{"content":"You can view registered file types and their associated applications for your computer by using the <bpt id=\"p1\">**</bpt>Folder Options<ept id=\"p1\">**</ept> dialog box, which is available through the operating system.","pos":[643,822],"source":" You can view registered file types and their associated applications for your computer by using the **Folder Options** dialog box, which is available through the operating system."},{"content":"The <bpt id=\"p1\">**</bpt>Advanced<ept id=\"p1\">**</ept> button leads to a dialog box that shows whether there is an open action associated with a specific registered file type.","pos":[823,960],"source":" The **Advanced** button leads to a dialog box that shows whether there is an open action associated with a specific registered file type."},{"content":"In addition, you can set other properties that define actions to take with that file.","pos":[967,1052]},{"content":"You can specify a value specific to the type of the &lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt; property for the &lt;xref:System.Diagnostics.ProcessStartInfo.Verb%2A&gt; property.","pos":[1053,1237],"source":" You can specify a value specific to the type of the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property for the <xref:System.Diagnostics.ProcessStartInfo.Verb%2A> property."},{"content":"For example, you can specify \"print\" for a document type.","pos":[1238,1295]},{"content":"Additionally, you can specify &lt;xref:System.Diagnostics.ProcessStartInfo.Arguments%2A&gt; property values to be command-line arguments to pass to the file's open procedure.","pos":[1296,1464],"source":" Additionally, you can specify <xref:System.Diagnostics.ProcessStartInfo.Arguments%2A> property values to be command-line arguments to pass to the file's open procedure."},{"content":"For example, if you specify a text editor application in the &lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt; property, you can use the &lt;xref:System.Diagnostics.ProcessStartInfo.Arguments%2A&gt; property to specify a text file to be opened by the editor.","pos":[1465,1722],"source":" For example, if you specify a text editor application in the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property, you can use the <xref:System.Diagnostics.ProcessStartInfo.Arguments%2A> property to specify a text file to be opened by the editor."},{"content":"Standard input is usually the keyboard, and standard output and standard error are usually the monitor screen.","pos":[1729,1839]},{"content":"However, you can use the &lt;xref:System.Diagnostics.ProcessStartInfo.RedirectStandardInput%2A&gt;, &lt;xref:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput%2A&gt;, and &lt;xref:System.Diagnostics.ProcessStartInfo.RedirectStandardError%2A&gt; properties to cause the process to get input from or return output to a file or other device.","pos":[1840,2169],"source":" However, you can use the <xref:System.Diagnostics.ProcessStartInfo.RedirectStandardInput%2A>, <xref:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput%2A>, and <xref:System.Diagnostics.ProcessStartInfo.RedirectStandardError%2A> properties to cause the process to get input from or return output to a file or other device."},{"content":"If you use the &lt;xref:System.Diagnostics.Process.StandardInput%2A&gt;, &lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;, or &lt;xref:System.Diagnostics.Process.StandardError%2A&gt; properties on the &lt;xref:System.Diagnostics.Process&gt; component, you must first set the corresponding value on the ProcessStartInfo property.","pos":[2170,2483],"source":" If you use the <xref:System.Diagnostics.Process.StandardInput%2A>, <xref:System.Diagnostics.Process.StandardOutput%2A>, or <xref:System.Diagnostics.Process.StandardError%2A> properties on the <xref:System.Diagnostics.Process> component, you must first set the corresponding value on the ProcessStartInfo property."},{"content":"Otherwise, the system throws an exception when you read or write to the stream.","pos":[2484,2563]},{"content":"Set &lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A&gt; to specify whether to start the process by using the operating system shell.","pos":[2570,2712],"source":"       Set <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> to specify whether to start the process by using the operating system shell."},{"content":"You can change the value of any ProcessStartInfo property up to the time that the process starts.","pos":[2719,2816]},{"content":"After you start the process, changing these values has no effect.","pos":[2817,2882]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  This class contains a link demand at the class level that applies to all members.","pos":[2888,2982],"source":"      > [!NOTE] >  This class contains a link demand at the class level that applies to all members."},{"content":"A &lt;xref:System.Security.SecurityException&gt; is thrown when the immediate caller does not have full-trust permission.","pos":[2983,3098],"source":" A <xref:System.Security.SecurityException> is thrown when the immediate caller does not have full-trust permission."},{"content":"For details about security demands, see <bpt id=\"p1\">[</bpt>Link Demands<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[3099,3193],"source":" For details about security demands, see [Link Demands](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[6058,6218],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.ProcessStartInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class without specifying a file name with which to start the process.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Diagnostics.ProcessStartInfo\"></xref> class without specifying a file name with which to start the process."},{"pos":[6231,7267],"content":"You must set at least the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property before you start the process. The file name is any application or document. In this case, a document is defined to be any file type that has an open or default action associated with it. You can view registered file types and their associated applications for your computer by using the **Folder Options** dialog box, which is available through the operating system. The **Advanced** button leads to a dialog box that shows whether there is an open action associated with a specific registered file type.       Optionally, you can also set other properties before you start the process. The <xref:System.Diagnostics.ProcessStartInfo.Verb%2A> property supplies actions to take, such as \"print\", with the file indicated in the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property. The <xref:System.Diagnostics.ProcessStartInfo.Arguments%2A> property supplies a way to pass command-line arguments to the file when the system opens it.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"You must set at least the &lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt; property before you start the process.","pos":[0,119],"source":"You must set at least the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property before you start the process."},{"content":"The file name is any application or document.","pos":[120,165]},{"content":"In this case, a document is defined to be any file type that has an open or default action associated with it.","pos":[166,276]},{"content":"You can view registered file types and their associated applications for your computer by using the <bpt id=\"p1\">**</bpt>Folder Options<ept id=\"p1\">**</ept> dialog box, which is available through the operating system.","pos":[277,456],"source":" You can view registered file types and their associated applications for your computer by using the **Folder Options** dialog box, which is available through the operating system."},{"content":"The <bpt id=\"p1\">**</bpt>Advanced<ept id=\"p1\">**</ept> button leads to a dialog box that shows whether there is an open action associated with a specific registered file type.","pos":[457,594],"source":" The **Advanced** button leads to a dialog box that shows whether there is an open action associated with a specific registered file type."},{"content":"Optionally, you can also set other properties before you start the process.","pos":[601,676]},{"content":"The &lt;xref:System.Diagnostics.ProcessStartInfo.Verb%2A&gt; property supplies actions to take, such as \"print\", with the file indicated in the &lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt; property.","pos":[677,879],"source":" The <xref:System.Diagnostics.ProcessStartInfo.Verb%2A> property supplies actions to take, such as \"print\", with the file indicated in the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property."},{"content":"The &lt;xref:System.Diagnostics.ProcessStartInfo.Arguments%2A&gt; property supplies a way to pass command-line arguments to the file when the system opens it.","pos":[880,1032],"source":" The <xref:System.Diagnostics.ProcessStartInfo.Arguments%2A> property supplies a way to pass command-line arguments to the file when the system opens it."}]},{"pos":[7845,8035],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.ProcessStartInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class and specifies a file name such as an application or document with which to start the process.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Diagnostics.ProcessStartInfo\"></xref> class and specifies a file name such as an application or document with which to start the process."},{"pos":[8048,8752],"content":"The file name is any application or document. In this case, a document is defined to be any file type that has an open or default action associated with it. You can view registered file types and their associated applications for your computer by using the **Folder Options** dialog box, which is available through the operating system. The **Advanced** button leads to a dialog box that shows whether there is an open action associated with a specific registered file type.       You can change the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property after you call this constructor, up to the time that the process starts. After you start the process, changing these values has no effect.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The file name is any application or document.","pos":[0,45]},{"content":"In this case, a document is defined to be any file type that has an open or default action associated with it.","pos":[46,156]},{"content":"You can view registered file types and their associated applications for your computer by using the <bpt id=\"p1\">**</bpt>Folder Options<ept id=\"p1\">**</ept> dialog box, which is available through the operating system.","pos":[157,336],"source":" You can view registered file types and their associated applications for your computer by using the **Folder Options** dialog box, which is available through the operating system."},{"content":"The <bpt id=\"p1\">**</bpt>Advanced<ept id=\"p1\">**</ept> button leads to a dialog box that shows whether there is an open action associated with a specific registered file type.","pos":[337,474],"source":" The **Advanced** button leads to a dialog box that shows whether there is an open action associated with a specific registered file type."},{"content":"You can change the &lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt; property after you call this constructor, up to the time that the process starts.","pos":[481,636],"source":"       You can change the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property after you call this constructor, up to the time that the process starts."},{"content":"After you start the process, changing these values has no effect.","pos":[637,702]}]},{"pos":[8900,8957],"content":"An application or document with which to start a process.","needQuote":true,"needEscape":true,"nodes":[{"content":"An application or document with which to start a process.","pos":[0,57]}]},{"pos":[9513,9752],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.ProcessStartInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class, specifies an application file name with which to start the process, and specifies a set of command-line arguments to pass to the application.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Diagnostics.ProcessStartInfo\"></xref> class, specifies an application file name with which to start the process, and specifies a set of command-line arguments to pass to the application."},{"pos":[9765,10530],"content":"The file name is any application or document. In this case, a document is defined to be any file type that has an open or default action associated with it. You can view registered file types and their associated applications for your computer by using the **Folder Options** dialog box, which is available through the operating system. The **Advanced** button leads to a dialog box that shows whether there is an open action associated with a specific registered file type.       You can change the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> or <xref:System.Diagnostics.ProcessStartInfo.Arguments%2A> properties after you call this constructor, up to the time that the process starts. After you start the process, changing these values has no effect.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The file name is any application or document.","pos":[0,45]},{"content":"In this case, a document is defined to be any file type that has an open or default action associated with it.","pos":[46,156]},{"content":"You can view registered file types and their associated applications for your computer by using the <bpt id=\"p1\">**</bpt>Folder Options<ept id=\"p1\">**</ept> dialog box, which is available through the operating system.","pos":[157,336],"source":" You can view registered file types and their associated applications for your computer by using the **Folder Options** dialog box, which is available through the operating system."},{"content":"The <bpt id=\"p1\">**</bpt>Advanced<ept id=\"p1\">**</ept> button leads to a dialog box that shows whether there is an open action associated with a specific registered file type.","pos":[337,474],"source":" The **Advanced** button leads to a dialog box that shows whether there is an open action associated with a specific registered file type."},{"content":"You can change the &lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt; or &lt;xref:System.Diagnostics.ProcessStartInfo.Arguments%2A&gt; properties after you call this constructor, up to the time that the process starts.","pos":[481,697],"source":"       You can change the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> or <xref:System.Diagnostics.ProcessStartInfo.Arguments%2A> properties after you call this constructor, up to the time that the process starts."},{"content":"After you start the process, changing these values has no effect.","pos":[698,763]}]},{"pos":[10696,10741],"content":"An application with which to start a process.","needQuote":true,"needEscape":true,"nodes":[{"content":"An application with which to start a process.","pos":[0,45]}]},{"pos":[10807,10881],"content":"Command-line arguments to pass to the application when the process starts.","needQuote":true,"needEscape":true,"nodes":[{"content":"Command-line arguments to pass to the application when the process starts.","pos":[0,74]}]},{"pos":[11316,11400],"content":"Gets or sets the set of command-line arguments to use when starting the application.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the set of command-line arguments to use when starting the application.","pos":[0,84]}]},{"pos":[12381,13310],"content":"A single string containing the arguments to pass to the target application specified in the <xref:System.Diagnostics.ProcessStartInfo.FileName*> property. The default is an empty string (\"\"). On Windows Vista and earlier versions of the Windows operating system, the length of the arguments added to the length of the full path to the process must be less than 2080. On Windows 7 and later versions, the length must be less than 32699.       Arguments are parsed and interpreted by the target application, so must align with the expectations of that application. For.NET applications as demonstrated in the Examples below, spaces are interpreted as a separator between multiple arguments. A single argument that includes spaces must be surrounded by quotation marks, but those quotation marks are not carried through to the target application. In include quotation marks in the final parsed argument, triple-escape each mark.","needQuote":false,"needEscape":true,"nodes":[{"content":"A single string containing the arguments to pass to the target application specified in the <xref:System.Diagnostics.ProcessStartInfo.FileName*> property. The default is an empty string (\"\"). On Windows Vista and earlier versions of the Windows operating system, the length of the arguments added to the length of the full path to the process must be less than 2080. On Windows 7 and later versions, the length must be less than 32699.       Arguments are parsed and interpreted by the target application, so must align with the expectations of that application. For.NET applications as demonstrated in the Examples below, spaces are interpreted as a separator between multiple arguments. A single argument that includes spaces must be surrounded by quotation marks, but those quotation marks are not carried through to the target application. In include quotation marks in the final parsed argument, triple-escape each mark.","pos":[0,925],"nodes":[{"content":"A single string containing the arguments to pass to the target application specified in the &lt;xref:System.Diagnostics.ProcessStartInfo.FileName*&gt; property.","pos":[0,154],"source":"A single string containing the arguments to pass to the target application specified in the <xref:System.Diagnostics.ProcessStartInfo.FileName*> property."},{"content":"The default is an empty string (\"\").","pos":[155,191]},{"content":"On Windows Vista and earlier versions of the Windows operating system, the length of the arguments added to the length of the full path to the process must be less than 2080.","pos":[192,366]},{"content":"On Windows 7 and later versions, the length must be less than 32699.","pos":[367,435]},{"content":"Arguments are parsed and interpreted by the target application, so must align with the expectations of that application.","pos":[442,562]},{"content":"For.NET applications as demonstrated in the Examples below, spaces are interpreted as a separator between multiple arguments.","pos":[563,688]},{"content":"A single argument that includes spaces must be surrounded by quotation marks, but those quotation marks are not carried through to the target application.","pos":[689,843]},{"content":"In include quotation marks in the final parsed argument, triple-escape each mark.","pos":[844,925]}]}]},{"pos":[13775,13852],"content":"Gets or sets a value indicating whether to start the process in a new window.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating whether to start the process in a new window.","pos":[0,77]}]},{"pos":[13864,14173],"content":"If the &lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A&gt; property is <ph id=\"ph1\">`true`</ph> or the &lt;xref:System.Diagnostics.ProcessStartInfo.UserName%2A&gt; and &lt;xref:System.Diagnostics.ProcessStartInfo.Password%2A&gt; properties are not <ph id=\"ph2\">`null`</ph>, the CreateNoWindow property value is ignored and a new window is created.","needQuote":true,"needEscape":true,"extradata":"MT","source":"If the <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> property is `true` or the <xref:System.Diagnostics.ProcessStartInfo.UserName%2A> and <xref:System.Diagnostics.ProcessStartInfo.Password%2A> properties are not `null`, the CreateNoWindow property value is ignored and a new window is created."},{"pos":[14620,14912],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the process should be started without creating a new window to contain it; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the process should be started without creating a new window to contain it; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,213],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the process should be started without creating a new window to contain it; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[214,292],"source":" The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[15341,15422],"content":"Gets or sets a value that identifies the domain to use when starting the process.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value that identifies the domain to use when starting the process.","pos":[0,81]}]},{"pos":[15538,15711],"content":"The Active Directory domain to use when starting the process. The domain property is primarily of interest to users within enterprise environments that use Active Directory.","needQuote":true,"needEscape":true,"nodes":[{"content":"The Active Directory domain to use when starting the process. The domain property is primarily of interest to users within enterprise environments that use Active Directory.","pos":[0,173],"nodes":[{"content":"The Active Directory domain to use when starting the process.","pos":[0,61]},{"content":"The domain property is primarily of interest to users within enterprise environments that use Active Directory.","pos":[62,173]}]}]},{"pos":[16157,16239],"content":"Gets the environment variables that apply to this process and its child processes.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the environment variables that apply to this process and its child processes.","pos":[0,82]}]},{"pos":[17417,17603],"content":"A generic dictionary containing the environment variables that apply to this process and its child processes. The default is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"A generic dictionary containing the environment variables that apply to this process and its child processes.","pos":[0,109]},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[110,186],"source":" The default is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[18099,18221],"content":"Gets search paths for files, directories for temporary files, application-specific options, and other similar information.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets search paths for files, directories for temporary files, application-specific options, and other similar information.","pos":[0,122]}]},{"pos":[18234,18904],"content":"Although you cannot set the EnvironmentVariables property, you can modify the <xref:System.Collections.Specialized.StringDictionary> returned by the property. For example, the following code adds a TempPath environment variable: `myProcess.StartInfo.EnvironmentVariables.Add(\"TempPath\", \"C:\\\\Temp\")`.  You must set the <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> property to `false` to start the process after changing the EnvironmentVariables property. If <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> is `true`, an <xref:System.InvalidOperationException> is thrown when the <xref:System.Diagnostics.Process.Start%2A> method is called.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Although you cannot set the EnvironmentVariables property, you can modify the &lt;xref:System.Collections.Specialized.StringDictionary&gt; returned by the property.","pos":[0,158],"source":"Although you cannot set the EnvironmentVariables property, you can modify the <xref:System.Collections.Specialized.StringDictionary> returned by the property."},{"content":"For example, the following code adds a TempPath environment variable: <ph id=\"ph1\">`myProcess.StartInfo.EnvironmentVariables.Add(\"TempPath\", \"C:\\\\Temp\")`</ph>.","pos":[159,300],"source":" For example, the following code adds a TempPath environment variable: `myProcess.StartInfo.EnvironmentVariables.Add(\"TempPath\", \"C:\\\\Temp\")`."},{"content":"You must set the &lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A&gt; property to <ph id=\"ph1\">`false`</ph> to start the process after changing the EnvironmentVariables property.","pos":[302,471],"source":"  You must set the <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> property to `false` to start the process after changing the EnvironmentVariables property."},{"content":"If &lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A&gt; is <ph id=\"ph1\">`true`</ph>, an &lt;xref:System.InvalidOperationException&gt; is thrown when the &lt;xref:System.Diagnostics.Process.Start%2A&gt; method is called.","pos":[472,670],"source":" If <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> is `true`, an <xref:System.InvalidOperationException> is thrown when the <xref:System.Diagnostics.Process.Start%2A> method is called."}]},{"pos":[19105,19285],"content":"A string dictionary that provides environment variables that apply to this process and child processes. The default is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string dictionary that provides environment variables that apply to this process and child processes.","pos":[0,103]},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[104,180],"source":" The default is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[19745,19863],"content":"Gets or sets a value indicating whether an error dialog box is displayed to the user if the process cannot be started.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating whether an error dialog box is displayed to the user if the process cannot be started.","pos":[0,118]}]},{"pos":[20138,20443],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if an error dialog box should be displayed on the screen if the process cannot be started; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if an error dialog box should be displayed on the screen if the process cannot be started; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,226],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if an error dialog box should be displayed on the screen if the process cannot be started; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[227,305],"source":" The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[20954,21063],"content":"Gets or sets the window handle to use when an error dialog box is shown for a process that cannot be started.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the window handle to use when an error dialog box is shown for a process that cannot be started.","pos":[0,109]}]},{"pos":[21075,21330],"content":"If <xref:System.Diagnostics.ProcessStartInfo.ErrorDialog%2A> is `true`, the ErrorDialogParentHandle property specifies the parent window for the dialog box that is shown. It is useful to specify a parent to keep the dialog box in front of the application.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"If &lt;xref:System.Diagnostics.ProcessStartInfo.ErrorDialog%2A&gt; is <ph id=\"ph1\">`true`</ph>, the ErrorDialogParentHandle property specifies the parent window for the dialog box that is shown.","pos":[0,170],"source":"If <xref:System.Diagnostics.ProcessStartInfo.ErrorDialog%2A> is `true`, the ErrorDialogParentHandle property specifies the parent window for the dialog box that is shown."},{"content":"It is useful to specify a parent to keep the dialog box in front of the application.","pos":[171,255]}]},{"pos":[21463,21553],"content":"A pointer to the handle of the error dialog box that results from a process start failure.","needQuote":true,"needEscape":true,"nodes":[{"content":"A pointer to the handle of the error dialog box that results from a process start failure.","pos":[0,90]}]},{"pos":[22001,22051],"content":"Gets or sets the application or document to start.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the application or document to start.","pos":[0,50]}]},{"pos":[22064,23398],"content":"You must set at least the FileName property before you start the process. The file name is any application or document. A document is defined to be any file type that has an open or default action associated with it. You can view registered file types and their associated applications for your computer by using the **Folder Options** dialog box, which is available through the operating system. The **Advanced** button leads to a dialog box that shows whether there is an open action associated with a specific registered file type.       The set of file types available to you depends in part on the value of the <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> property. If <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> is `true`, you can start any document and perform operations on the file, such as printing, with the <xref:System.Diagnostics.Process> component. When <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> is `false`, you can start only executables with the <xref:System.Diagnostics.Process> component.       You can start a ClickOnce application by setting the FileName property to the location (for example, a Web address) from which you originally installed the application. Do not start a ClickOnce application by specifying its installed location on your hard disk.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"You must set at least the FileName property before you start the process.","pos":[0,73]},{"content":"The file name is any application or document.","pos":[74,119]},{"content":"A document is defined to be any file type that has an open or default action associated with it.","pos":[120,216]},{"content":"You can view registered file types and their associated applications for your computer by using the <bpt id=\"p1\">**</bpt>Folder Options<ept id=\"p1\">**</ept> dialog box, which is available through the operating system.","pos":[217,396],"source":" You can view registered file types and their associated applications for your computer by using the **Folder Options** dialog box, which is available through the operating system."},{"content":"The <bpt id=\"p1\">**</bpt>Advanced<ept id=\"p1\">**</ept> button leads to a dialog box that shows whether there is an open action associated with a specific registered file type.","pos":[397,534],"source":" The **Advanced** button leads to a dialog box that shows whether there is an open action associated with a specific registered file type."},{"content":"The set of file types available to you depends in part on the value of the &lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A&gt; property.","pos":[541,687],"source":"       The set of file types available to you depends in part on the value of the <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> property."},{"content":"If &lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A&gt; is <ph id=\"ph1\">`true`</ph>, you can start any document and perform operations on the file, such as printing, with the &lt;xref:System.Diagnostics.Process&gt; component.","pos":[688,898],"source":" If <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> is `true`, you can start any document and perform operations on the file, such as printing, with the <xref:System.Diagnostics.Process> component."},{"content":"When &lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A&gt; is <ph id=\"ph1\">`false`</ph>, you can start only executables with the &lt;xref:System.Diagnostics.Process&gt; component.","pos":[899,1062],"source":" When <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> is `false`, you can start only executables with the <xref:System.Diagnostics.Process> component."},{"content":"You can start a ClickOnce application by setting the FileName property to the location (for example, a Web address) from which you originally installed the application.","pos":[1069,1237]},{"content":"Do not start a ClickOnce application by specifying its installed location on your hard disk.","pos":[1238,1330]}]},{"pos":[23841,24047],"content":"The name of the application to start, or the name of a document of a file type that is associated with an application and that has a default open action available to it. The default is an empty string (\"\").","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the application to start, or the name of a document of a file type that is associated with an application and that has a default open action available to it. The default is an empty string (\"\").","pos":[0,206],"nodes":[{"content":"The name of the application to start, or the name of a document of a file type that is associated with an application and that has a default open action available to it.","pos":[0,169]},{"content":"The default is an empty string (\"\").","pos":[170,206]}]}]},{"pos":[24515,24618],"content":"Gets or sets a value that indicates whether the Windows user profile is to be loaded from the registry.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value that indicates whether the Windows user profile is to be loaded from the registry.","pos":[0,103]}]},{"pos":[24631,25304],"content":"This property is referenced if the process is being started by using the user name, password, and domain.       If the value is `true`, the user's profile in the `HKEY_USERS` registry key is loaded. Loading the profile can be time-consuming. Therefore, it is best to use this value only if you must access the information in the `HKEY_CURRENT_USER` registry key.       In Windows Server 2003 and Windows 2000, the profile is unloaded after the new process has been terminated, regardless of whether the process has created child processes.       In Windows XP, the profile is unloaded after the new process and all child processes it has created have been terminated.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This property is referenced if the process is being started by using the user name, password, and domain.","pos":[0,105]},{"content":"If the value is <ph id=\"ph1\">`true`</ph>, the user's profile in the <ph id=\"ph2\">`HKEY_USERS`</ph> registry key is loaded.","pos":[112,198],"source":"       If the value is `true`, the user's profile in the `HKEY_USERS` registry key is loaded."},{"content":"Loading the profile can be time-consuming.","pos":[199,241]},{"content":"Therefore, it is best to use this value only if you must access the information in the <ph id=\"ph1\">`HKEY_CURRENT_USER`</ph> registry key.","pos":[242,362],"source":" Therefore, it is best to use this value only if you must access the information in the `HKEY_CURRENT_USER` registry key."},{"content":"In Windows Server 2003 and Windows 2000, the profile is unloaded after the new process has been terminated, regardless of whether the process has created child processes.","pos":[369,539]},{"content":"In Windows XP, the profile is unloaded after the new process and all child processes it has created have been terminated.","pos":[546,667]}]},{"pos":[25429,25689],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the Windows user profile should be loaded; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the Windows user profile should be loaded; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,181],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the Windows user profile should be loaded; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[182,260],"source":" The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[26129,26223],"content":"Gets or sets a secure string that contains the user password to use when starting the process.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a secure string that contains the user password to use when starting the process.","pos":[0,94]}]},{"pos":[27882,27933],"content":"The user password to use when starting the process.","needQuote":true,"needEscape":true,"nodes":[{"content":"The user password to use when starting the process.","pos":[0,51]}]},{"pos":[28421,28499],"content":"Gets or sets the user password in clear text to use when starting the process.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the user password in clear text to use when starting the process.","pos":[0,78]}]},{"pos":[28628,28660],"content":"The user password in clear text.","needQuote":true,"needEscape":true,"nodes":[{"content":"The user password in clear text.","pos":[0,32]}]},{"pos":[29169,29355],"content":"Gets or sets a value that indicates whether the error output of an application is written to the &lt;xref:System.Diagnostics.Process.StandardError%2A?displayProperty=fullName&gt; stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value that indicates whether the error output of an application is written to the <ph id=\"ph1\">&amp;lt;</ph>xref:System.Diagnostics.Process.StandardError%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph> stream.","pos":[0,186],"source":"Gets or sets a value that indicates whether the error output of an application is written to the &lt;xref:System.Diagnostics.Process.StandardError%2A?displayProperty=fullName&gt; stream."}]},{"pos":[29368,34697],"content":"When a <xref:System.Diagnostics.Process> writes text to its standard error stream, that text is typically displayed on the console. By redirecting the <xref:System.Diagnostics.Process.StandardError%2A> stream, you can manipulate or suppress the error output of a process. For example, you can filter the text, format it differently, or write the output to both the console and a designated log file.      > [!NOTE] >  You must set <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> to `false` if you want to set RedirectStandardError to `true`. Otherwise, reading from the <xref:System.Diagnostics.Process.StandardError%2A> stream throws an exception.       The redirected <xref:System.Diagnostics.Process.StandardError%2A> stream can be read synchronously or asynchronously. Methods such as <xref:System.IO.StreamReader.Read%2A>, <xref:System.IO.StreamReader.ReadLine%2A> and <xref:System.IO.StreamReader.ReadToEnd%2A> perform synchronous read operations on the error output stream of the process. These synchronous read operations do not complete until the associated <xref:System.Diagnostics.Process> writes to its <xref:System.Diagnostics.Process.StandardError%2A> stream, or closes the stream.       In contrast, <xref:System.Diagnostics.Process.BeginErrorReadLine%2A> starts asynchronous read operations on the <xref:System.Diagnostics.Process.StandardError%2A> stream. This method enables a designated event handler for the stream output and immediately returns to the caller, which can perform other work while the stream output is directed to the event handler.      > [!NOTE] >  The application that is processing the asynchronous output should call the <xref:System.Diagnostics.Process.WaitForExit%2A> method to ensure that the output buffer has been flushed.       Synchronous read operations introduce a dependency between the caller reading from the <xref:System.Diagnostics.Process.StandardError%2A> stream and the child process writing to that stream. These dependencies can cause deadlock conditions. When the caller reads from the redirected stream of a child process, it is dependent on the child. The caller waits for the read operation until the child writes to the stream or closes the stream. When the child process writes enough data to fill its redirected stream, it is dependent on the parent. The child process waits for the next write operation until the parent reads from the full stream or closes the stream. The deadlock condition results when the caller and child process wait for each other to complete an operation, and neither can continue. You can avoid deadlocks by evaluating dependencies between the caller and child process.       For example, the following C# code shows how to read from a redirected stream and wait for the child process to exit.      ```   // Start the child process.    Process p = new Process();    // Redirect the error stream of the child process.    p.StartInfo.UseShellExecute = false;    p.StartInfo.RedirectStandardError = true;    p.StartInfo.FileName = \"Write500Lines.exe\";    p.Start();    // Do not wait for the child process to exit before    // reading to the end of its redirected error stream.    // p.WaitForExit();    // Read the error stream first and then wait.    string error = p.StandardError.ReadToEnd();    p.WaitForExit();   ```       The code example avoids a deadlock condition by calling `p.StandardError.ReadToEnd` before `p.WaitForExit`. A deadlock condition can result if the parent process calls `p.WaitForExit` before `p.StandardError.ReadToEnd` and the child process writes enough text to fill the redirected stream. The parent process would wait indefinitely for the child process to exit. The child process would wait indefinitely for the parent to read from the full <xref:System.Diagnostics.Process.StandardError%2A> stream.       There is a similar issue when you read all text from both the standard output and standard error streams. For example, the following C# code performs a read operation on both streams.      ```   // Do not perform a synchronous read to the end of both   // redirected streams.   // string output = p.StandardOutput.ReadToEnd();   // string error = p.StandardError.ReadToEnd();   // p.WaitForExit();   // Use asynchronous read operations on at least one of the streams.   p.BeginOutputReadLine();   string error = p.StandardError.ReadToEnd();   p.WaitForExit();   ```       The code example avoids the deadlock condition by performing asynchronous read operations on the <xref:System.Diagnostics.Process.StandardOutput%2A> stream. A deadlock condition results if the parent process calls `p.StandardOutput.ReadToEnd` followed by `p.StandardError.ReadToEnd` and the child process writes enough text to fill its error stream. The parent process would wait indefinitely for the child process to close its <xref:System.Diagnostics.Process.StandardOutput%2A> stream. The child process would wait indefinitely for the parent to read from the full <xref:System.Diagnostics.Process.StandardError%2A> stream.       You can use asynchronous read operations to avoid these dependencies and their deadlock potential. Alternately, you can avoid the deadlock condition by creating two threads and reading the output of each stream on a separate thread.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"When a &lt;xref:System.Diagnostics.Process&gt; writes text to its standard error stream, that text is typically displayed on the console.","pos":[0,131],"source":"When a <xref:System.Diagnostics.Process> writes text to its standard error stream, that text is typically displayed on the console."},{"content":"By redirecting the &lt;xref:System.Diagnostics.Process.StandardError%2A&gt; stream, you can manipulate or suppress the error output of a process.","pos":[132,271],"source":" By redirecting the <xref:System.Diagnostics.Process.StandardError%2A> stream, you can manipulate or suppress the error output of a process."},{"content":"For example, you can filter the text, format it differently, or write the output to both the console and a designated log file.","pos":[272,399]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  You must set &lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A&gt; to <ph id=\"ph2\">`false`</ph> if you want to set RedirectStandardError to <ph id=\"ph3\">`true`</ph>.","pos":[405,555],"source":"      > [!NOTE] >  You must set <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> to `false` if you want to set RedirectStandardError to `true`."},{"content":"Otherwise, reading from the &lt;xref:System.Diagnostics.Process.StandardError%2A&gt; stream throws an exception.","pos":[556,662],"source":" Otherwise, reading from the <xref:System.Diagnostics.Process.StandardError%2A> stream throws an exception."},{"content":"The redirected &lt;xref:System.Diagnostics.Process.StandardError%2A&gt; stream can be read synchronously or asynchronously.","pos":[669,786],"source":"       The redirected <xref:System.Diagnostics.Process.StandardError%2A> stream can be read synchronously or asynchronously."},{"content":"Methods such as &lt;xref:System.IO.StreamReader.Read%2A&gt;, &lt;xref:System.IO.StreamReader.ReadLine%2A&gt; and &lt;xref:System.IO.StreamReader.ReadToEnd%2A&gt; perform synchronous read operations on the error output stream of the process.","pos":[787,1009],"source":" Methods such as <xref:System.IO.StreamReader.Read%2A>, <xref:System.IO.StreamReader.ReadLine%2A> and <xref:System.IO.StreamReader.ReadToEnd%2A> perform synchronous read operations on the error output stream of the process."},{"content":"These synchronous read operations do not complete until the associated &lt;xref:System.Diagnostics.Process&gt; writes to its &lt;xref:System.Diagnostics.Process.StandardError%2A&gt; stream, or closes the stream.","pos":[1010,1209],"source":" These synchronous read operations do not complete until the associated <xref:System.Diagnostics.Process> writes to its <xref:System.Diagnostics.Process.StandardError%2A> stream, or closes the stream."},{"content":"In contrast, &lt;xref:System.Diagnostics.Process.BeginErrorReadLine%2A&gt; starts asynchronous read operations on the &lt;xref:System.Diagnostics.Process.StandardError%2A&gt; stream.","pos":[1216,1386],"source":"       In contrast, <xref:System.Diagnostics.Process.BeginErrorReadLine%2A> starts asynchronous read operations on the <xref:System.Diagnostics.Process.StandardError%2A> stream."},{"content":"This method enables a designated event handler for the stream output and immediately returns to the caller, which can perform other work while the stream output is directed to the event handler.","pos":[1387,1581]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The application that is processing the asynchronous output should call the &lt;xref:System.Diagnostics.Process.WaitForExit%2A&gt; method to ensure that the output buffer has been flushed.","pos":[1587,1781],"source":"      > [!NOTE] >  The application that is processing the asynchronous output should call the <xref:System.Diagnostics.Process.WaitForExit%2A> method to ensure that the output buffer has been flushed."},{"content":"Synchronous read operations introduce a dependency between the caller reading from the &lt;xref:System.Diagnostics.Process.StandardError%2A&gt; stream and the child process writing to that stream.","pos":[1788,1978],"source":"       Synchronous read operations introduce a dependency between the caller reading from the <xref:System.Diagnostics.Process.StandardError%2A> stream and the child process writing to that stream."},{"content":"These dependencies can cause deadlock conditions.","pos":[1979,2028]},{"content":"When the caller reads from the redirected stream of a child process, it is dependent on the child.","pos":[2029,2127]},{"content":"The caller waits for the read operation until the child writes to the stream or closes the stream.","pos":[2128,2226]},{"content":"When the child process writes enough data to fill its redirected stream, it is dependent on the parent.","pos":[2227,2330]},{"content":"The child process waits for the next write operation until the parent reads from the full stream or closes the stream.","pos":[2331,2449]},{"content":"The deadlock condition results when the caller and child process wait for each other to complete an operation, and neither can continue.","pos":[2450,2586]},{"content":"You can avoid deadlocks by evaluating dependencies between the caller and child process.","pos":[2587,2675]},{"content":"For example, the following C# code shows how to read from a redirected stream and wait for the child process to exit.","pos":[2682,2799]},{"content":"<ph id=\"ph1\">```   // Start the child process.    Process p = new Process();    // Redirect the error stream of the child process.    p.StartInfo.UseShellExecute = false;    p.StartInfo.RedirectStandardError = true;    p.StartInfo.FileName = \"Write500Lines.exe\";    p.Start();    // Do not wait for the child process to exit before    // reading to the end of its redirected error stream.    // p.WaitForExit();    // Read the error stream first and then wait.    string error = p.StandardError.ReadToEnd();    p.WaitForExit();   ```</ph>       The code example avoids a deadlock condition by calling <ph id=\"ph2\">`p.StandardError.ReadToEnd`</ph> before <ph id=\"ph3\">`p.WaitForExit`</ph>.","pos":[2805,3439],"source":"```   // Start the child process.    Process p = new Process();    // Redirect the error stream of the child process.    p.StartInfo.UseShellExecute = false;    p.StartInfo.RedirectStandardError = true;    p.StartInfo.FileName = \"Write500Lines.exe\";    p.Start();    // Do not wait for the child process to exit before    // reading to the end of its redirected error stream.    // p.WaitForExit();    // Read the error stream first and then wait.    string error = p.StandardError.ReadToEnd();    p.WaitForExit();   ```       The code example avoids a deadlock condition by calling `p.StandardError.ReadToEnd` before `p.WaitForExit`."},{"content":"A deadlock condition can result if the parent process calls <ph id=\"ph1\">`p.WaitForExit`</ph> before <ph id=\"ph2\">`p.StandardError.ReadToEnd`</ph> and the child process writes enough text to fill the redirected stream.","pos":[3440,3622],"source":" A deadlock condition can result if the parent process calls `p.WaitForExit` before `p.StandardError.ReadToEnd` and the child process writes enough text to fill the redirected stream."},{"content":"The parent process would wait indefinitely for the child process to exit.","pos":[3623,3696]},{"content":"The child process would wait indefinitely for the parent to read from the full &lt;xref:System.Diagnostics.Process.StandardError%2A&gt; stream.","pos":[3697,3834],"source":" The child process would wait indefinitely for the parent to read from the full <xref:System.Diagnostics.Process.StandardError%2A> stream."},{"content":"There is a similar issue when you read all text from both the standard output and standard error streams.","pos":[3841,3946]},{"content":"For example, the following C# code performs a read operation on both streams.","pos":[3947,4024]},{"content":"<ph id=\"ph1\">```   // Do not perform a synchronous read to the end of both   // redirected streams.   // string output = p.StandardOutput.ReadToEnd();   // string error = p.StandardError.ReadToEnd();   // p.WaitForExit();   // Use asynchronous read operations on at least one of the streams.   p.BeginOutputReadLine();   string error = p.StandardError.ReadToEnd();   p.WaitForExit();   ```</ph>       The code example avoids the deadlock condition by performing asynchronous read operations on the &lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt; stream.","pos":[4030,4569],"source":"```   // Do not perform a synchronous read to the end of both   // redirected streams.   // string output = p.StandardOutput.ReadToEnd();   // string error = p.StandardError.ReadToEnd();   // p.WaitForExit();   // Use asynchronous read operations on at least one of the streams.   p.BeginOutputReadLine();   string error = p.StandardError.ReadToEnd();   p.WaitForExit();   ```       The code example avoids the deadlock condition by performing asynchronous read operations on the <xref:System.Diagnostics.Process.StandardOutput%2A> stream."},{"content":"A deadlock condition results if the parent process calls <ph id=\"ph1\">`p.StandardOutput.ReadToEnd`</ph> followed by <ph id=\"ph2\">`p.StandardError.ReadToEnd`</ph> and the child process writes enough text to fill its error stream.","pos":[4570,4762],"source":" A deadlock condition results if the parent process calls `p.StandardOutput.ReadToEnd` followed by `p.StandardError.ReadToEnd` and the child process writes enough text to fill its error stream."},{"content":"The parent process would wait indefinitely for the child process to close its &lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt; stream.","pos":[4763,4900],"source":" The parent process would wait indefinitely for the child process to close its <xref:System.Diagnostics.Process.StandardOutput%2A> stream."},{"content":"The child process would wait indefinitely for the parent to read from the full &lt;xref:System.Diagnostics.Process.StandardError%2A&gt; stream.","pos":[4901,5038],"source":" The child process would wait indefinitely for the parent to read from the full <xref:System.Diagnostics.Process.StandardError%2A> stream."},{"content":"You can use asynchronous read operations to avoid these dependencies and their deadlock potential.","pos":[5045,5143]},{"content":"Alternately, you can avoid the deadlock condition by creating two threads and reading the output of each stream on a separate thread.","pos":[5144,5277]}]},{"pos":[35346,35680],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if error output should be written to &lt;xref:System.Diagnostics.Process.StandardError%2A?displayProperty=fullName&gt;; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if error output should be written to <ph id=\"ph1\">&amp;lt;</ph>xref:System.Diagnostics.Process.StandardError%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,255],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if error output should be written to &lt;xref:System.Diagnostics.Process.StandardError%2A?displayProperty=fullName&gt;; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[256,334],"source":" The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[36191,36366],"content":"Gets or sets a value indicating whether the input for an application is read from the &lt;xref:System.Diagnostics.Process.StandardInput%2A?displayProperty=fullName&gt; stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating whether the input for an application is read from the <ph id=\"ph1\">&amp;lt;</ph>xref:System.Diagnostics.Process.StandardInput%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph> stream.","pos":[0,175],"source":"Gets or sets a value indicating whether the input for an application is read from the &lt;xref:System.Diagnostics.Process.StandardInput%2A?displayProperty=fullName&gt; stream."}]},{"pos":[36379,37031],"content":"A <xref:System.Diagnostics.Process> can read input text from its standard input stream, typically the keyboard. By redirecting the <xref:System.Diagnostics.Process.StandardInput%2A> stream, you can programmatically specify the input of a process. For example, instead of using keyboard input, you can provide text from the contents of a designated file or output from another application.      > [!NOTE] >  You must set <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> to `false` if you want to set RedirectStandardInput to `true`. Otherwise, writing to the <xref:System.Diagnostics.Process.StandardInput%2A> stream throws an exception.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"A &lt;xref:System.Diagnostics.Process&gt; can read input text from its standard input stream, typically the keyboard.","pos":[0,111],"source":"A <xref:System.Diagnostics.Process> can read input text from its standard input stream, typically the keyboard."},{"content":"By redirecting the &lt;xref:System.Diagnostics.Process.StandardInput%2A&gt; stream, you can programmatically specify the input of a process.","pos":[112,246],"source":" By redirecting the <xref:System.Diagnostics.Process.StandardInput%2A> stream, you can programmatically specify the input of a process."},{"content":"For example, instead of using keyboard input, you can provide text from the contents of a designated file or output from another application.","pos":[247,388]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  You must set &lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A&gt; to <ph id=\"ph2\">`false`</ph> if you want to set RedirectStandardInput to <ph id=\"ph3\">`true`</ph>.","pos":[394,544],"source":"      > [!NOTE] >  You must set <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> to `false` if you want to set RedirectStandardInput to `true`."},{"content":"Otherwise, writing to the &lt;xref:System.Diagnostics.Process.StandardInput%2A&gt; stream throws an exception.","pos":[545,649],"source":" Otherwise, writing to the <xref:System.Diagnostics.Process.StandardInput%2A> stream throws an exception."}]},{"pos":[37972,38298],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if input should be read from &lt;xref:System.Diagnostics.Process.StandardInput%2A?displayProperty=fullName&gt;; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if input should be read from <ph id=\"ph1\">&amp;lt;</ph>xref:System.Diagnostics.Process.StandardInput%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,247],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if input should be read from &lt;xref:System.Diagnostics.Process.StandardInput%2A?displayProperty=fullName&gt;; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[248,326],"source":" The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[38814,39003],"content":"Gets or sets a value that indicates whether the textual output of an application is written to the &lt;xref:System.Diagnostics.Process.StandardOutput%2A?displayProperty=fullName&gt; stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value that indicates whether the textual output of an application is written to the <ph id=\"ph1\">&amp;lt;</ph>xref:System.Diagnostics.Process.StandardOutput%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph> stream.","pos":[0,189],"source":"Gets or sets a value that indicates whether the textual output of an application is written to the &lt;xref:System.Diagnostics.Process.StandardOutput%2A?displayProperty=fullName&gt; stream."}]},{"pos":[39016,44131],"content":"When a <xref:System.Diagnostics.Process> writes text to its standard stream, that text is typically displayed on the console. By setting RedirectStandardOutput to `true` to redirect the <xref:System.Diagnostics.Process.StandardOutput%2A> stream, you can manipulate or suppress the output of a process. For example, you can filter the text, format it differently, or write the output to both the console and a designated log file.      > [!NOTE] >  You must set <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> to `false` if you want to set RedirectStandardOutput to `true`. Otherwise, reading from the <xref:System.Diagnostics.Process.StandardOutput%2A> stream throws an exception.       The redirected <xref:System.Diagnostics.Process.StandardOutput%2A> stream can be read synchronously or asynchronously. Methods such as <xref:System.IO.StreamReader.Read%2A>, <xref:System.IO.StreamReader.ReadLine%2A>, and <xref:System.IO.StreamReader.ReadToEnd%2A> perform synchronous read operations on the output stream of the process. These synchronous read operations do not complete until the associated <xref:System.Diagnostics.Process> writes to its <xref:System.Diagnostics.Process.StandardOutput%2A> stream, or closes the stream.       In contrast, <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> starts asynchronous read operations on the <xref:System.Diagnostics.Process.StandardOutput%2A> stream. This method enables a designated event handler (see <xref:System.Diagnostics.Process.OutputDataReceived>) for the stream output and immediately returns to the caller, which can perform other work while the stream output is directed to the event handler.      > [!NOTE] >  The application that is processing the asynchronous output should call the <xref:System.Diagnostics.Process.WaitForExit%2A> method to ensure that the output buffer has been flushed.       Synchronous read operations introduce a dependency between the caller reading from the <xref:System.Diagnostics.Process.StandardOutput%2A> stream and the child process writing to that stream. These dependencies can cause deadlock conditions. When the caller reads from the redirected stream of a child process, it is dependent on the child. The caller waits for the read operation until the child writes to the stream or closes the stream. When the child process writes enough data to fill its redirected stream, it is dependent on the parent. The child process waits for the next write operation until the parent reads from the full stream or closes the stream. The deadlock condition results when the caller and child process wait for each other to complete an operation, and neither can continue. You can avoid deadlocks by evaluating dependencies between the caller and child process.       For example, the following C# code shows how to read from a redirected stream and wait for the child process to exit.      ```   Process p = new Process();   p.StartInfo.UseShellExecute = false;   p.StartInfo.RedirectStandardOutput = true;   p.StartInfo.FileName = \"Write500Lines.exe\";   p.Start();      // To avoid deadlocks, always read the output stream first and then wait.   string output = p.StandardOutput.ReadToEnd();   p.WaitForExit();   ```       The code example avoids a deadlock condition by calling `p.StandardOutput.ReadToEnd` before `p.WaitForExit`. A deadlock condition can result if the parent process calls `p.WaitForExit` before `p.StandardOutput.ReadToEnd` and the child process writes enough text to fill the redirected stream. The parent process would wait indefinitely for the child process to exit. The child process would wait indefinitely for the parent to read from the full <xref:System.Diagnostics.Process.StandardOutput%2A> stream.       There is a similar issue when you read all text from both the standard output and standard error streams. For example, the following C# code performs a read operation on both streams.      ```   // To avoid deadlocks, use asynchronous read operations on at least one of the streams.   // Do not perform a synchronous read to the end of both redirected streams.   p.BeginOutputReadLine();   string error = p.StandardError.ReadToEnd();   p.WaitForExit();   ```       The code example avoids the deadlock condition by performing asynchronous read operations on the <xref:System.Diagnostics.Process.StandardOutput%2A> stream. A deadlock condition results if the parent process calls `p.StandardOutput.ReadToEnd` followed by `p.StandardError.ReadToEnd` and the child process writes enough text to fill its error stream. The parent process would wait indefinitely for the child process to close its <xref:System.Diagnostics.Process.StandardOutput%2A> stream. The child process would wait indefinitely for the parent to read from the full <xref:System.Diagnostics.Process.StandardError%2A> stream.       You can use asynchronous read operations to avoid these dependencies and their deadlock potential. Alternately, you can avoid the deadlock condition by creating two threads and reading the output of each stream on a separate thread.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"When a &lt;xref:System.Diagnostics.Process&gt; writes text to its standard stream, that text is typically displayed on the console.","pos":[0,125],"source":"When a <xref:System.Diagnostics.Process> writes text to its standard stream, that text is typically displayed on the console."},{"content":"By setting RedirectStandardOutput to <ph id=\"ph1\">`true`</ph> to redirect the &lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt; stream, you can manipulate or suppress the output of a process.","pos":[126,301],"source":" By setting RedirectStandardOutput to `true` to redirect the <xref:System.Diagnostics.Process.StandardOutput%2A> stream, you can manipulate or suppress the output of a process."},{"content":"For example, you can filter the text, format it differently, or write the output to both the console and a designated log file.","pos":[302,429]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  You must set &lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A&gt; to <ph id=\"ph2\">`false`</ph> if you want to set RedirectStandardOutput to <ph id=\"ph3\">`true`</ph>.","pos":[435,586],"source":"      > [!NOTE] >  You must set <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> to `false` if you want to set RedirectStandardOutput to `true`."},{"content":"Otherwise, reading from the &lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt; stream throws an exception.","pos":[587,694],"source":" Otherwise, reading from the <xref:System.Diagnostics.Process.StandardOutput%2A> stream throws an exception."},{"content":"The redirected &lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt; stream can be read synchronously or asynchronously.","pos":[701,819],"source":"       The redirected <xref:System.Diagnostics.Process.StandardOutput%2A> stream can be read synchronously or asynchronously."},{"content":"Methods such as &lt;xref:System.IO.StreamReader.Read%2A&gt;, &lt;xref:System.IO.StreamReader.ReadLine%2A&gt;, and &lt;xref:System.IO.StreamReader.ReadToEnd%2A&gt; perform synchronous read operations on the output stream of the process.","pos":[820,1037],"source":" Methods such as <xref:System.IO.StreamReader.Read%2A>, <xref:System.IO.StreamReader.ReadLine%2A>, and <xref:System.IO.StreamReader.ReadToEnd%2A> perform synchronous read operations on the output stream of the process."},{"content":"These synchronous read operations do not complete until the associated &lt;xref:System.Diagnostics.Process&gt; writes to its &lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt; stream, or closes the stream.","pos":[1038,1238],"source":" These synchronous read operations do not complete until the associated <xref:System.Diagnostics.Process> writes to its <xref:System.Diagnostics.Process.StandardOutput%2A> stream, or closes the stream."},{"content":"In contrast, &lt;xref:System.Diagnostics.Process.BeginOutputReadLine%2A&gt; starts asynchronous read operations on the &lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt; stream.","pos":[1245,1417],"source":"       In contrast, <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> starts asynchronous read operations on the <xref:System.Diagnostics.Process.StandardOutput%2A> stream."},{"content":"This method enables a designated event handler (see &lt;xref:System.Diagnostics.Process.OutputDataReceived&gt;) for the stream output and immediately returns to the caller, which can perform other work while the stream output is directed to the event handler.","pos":[1418,1671],"source":" This method enables a designated event handler (see <xref:System.Diagnostics.Process.OutputDataReceived>) for the stream output and immediately returns to the caller, which can perform other work while the stream output is directed to the event handler."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The application that is processing the asynchronous output should call the &lt;xref:System.Diagnostics.Process.WaitForExit%2A&gt; method to ensure that the output buffer has been flushed.","pos":[1677,1871],"source":"      > [!NOTE] >  The application that is processing the asynchronous output should call the <xref:System.Diagnostics.Process.WaitForExit%2A> method to ensure that the output buffer has been flushed."},{"content":"Synchronous read operations introduce a dependency between the caller reading from the &lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt; stream and the child process writing to that stream.","pos":[1878,2069],"source":"       Synchronous read operations introduce a dependency between the caller reading from the <xref:System.Diagnostics.Process.StandardOutput%2A> stream and the child process writing to that stream."},{"content":"These dependencies can cause deadlock conditions.","pos":[2070,2119]},{"content":"When the caller reads from the redirected stream of a child process, it is dependent on the child.","pos":[2120,2218]},{"content":"The caller waits for the read operation until the child writes to the stream or closes the stream.","pos":[2219,2317]},{"content":"When the child process writes enough data to fill its redirected stream, it is dependent on the parent.","pos":[2318,2421]},{"content":"The child process waits for the next write operation until the parent reads from the full stream or closes the stream.","pos":[2422,2540]},{"content":"The deadlock condition results when the caller and child process wait for each other to complete an operation, and neither can continue.","pos":[2541,2677]},{"content":"You can avoid deadlocks by evaluating dependencies between the caller and child process.","pos":[2678,2766]},{"content":"For example, the following C# code shows how to read from a redirected stream and wait for the child process to exit.","pos":[2773,2890]},{"content":"<ph id=\"ph1\">```   Process p = new Process();   p.StartInfo.UseShellExecute = false;   p.StartInfo.RedirectStandardOutput = true;   p.StartInfo.FileName = \"Write500Lines.exe\";   p.Start();      // To avoid deadlocks, always read the output stream first and then wait.   string output = p.StandardOutput.ReadToEnd();   p.WaitForExit();   ```</ph>       The code example avoids a deadlock condition by calling <ph id=\"ph2\">`p.StandardOutput.ReadToEnd`</ph> before <ph id=\"ph3\">`p.WaitForExit`</ph>.","pos":[2896,3338],"source":"```   Process p = new Process();   p.StartInfo.UseShellExecute = false;   p.StartInfo.RedirectStandardOutput = true;   p.StartInfo.FileName = \"Write500Lines.exe\";   p.Start();      // To avoid deadlocks, always read the output stream first and then wait.   string output = p.StandardOutput.ReadToEnd();   p.WaitForExit();   ```       The code example avoids a deadlock condition by calling `p.StandardOutput.ReadToEnd` before `p.WaitForExit`."},{"content":"A deadlock condition can result if the parent process calls <ph id=\"ph1\">`p.WaitForExit`</ph> before <ph id=\"ph2\">`p.StandardOutput.ReadToEnd`</ph> and the child process writes enough text to fill the redirected stream.","pos":[3339,3522],"source":" A deadlock condition can result if the parent process calls `p.WaitForExit` before `p.StandardOutput.ReadToEnd` and the child process writes enough text to fill the redirected stream."},{"content":"The parent process would wait indefinitely for the child process to exit.","pos":[3523,3596]},{"content":"The child process would wait indefinitely for the parent to read from the full &lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt; stream.","pos":[3597,3735],"source":" The child process would wait indefinitely for the parent to read from the full <xref:System.Diagnostics.Process.StandardOutput%2A> stream."},{"content":"There is a similar issue when you read all text from both the standard output and standard error streams.","pos":[3742,3847]},{"content":"For example, the following C# code performs a read operation on both streams.","pos":[3848,3925]},{"content":"<ph id=\"ph1\">```   // To avoid deadlocks, use asynchronous read operations on at least one of the streams.   // Do not perform a synchronous read to the end of both redirected streams.   p.BeginOutputReadLine();   string error = p.StandardError.ReadToEnd();   p.WaitForExit();   ```</ph>       The code example avoids the deadlock condition by performing asynchronous read operations on the &lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt; stream.","pos":[3931,4363],"source":"```   // To avoid deadlocks, use asynchronous read operations on at least one of the streams.   // Do not perform a synchronous read to the end of both redirected streams.   p.BeginOutputReadLine();   string error = p.StandardError.ReadToEnd();   p.WaitForExit();   ```       The code example avoids the deadlock condition by performing asynchronous read operations on the <xref:System.Diagnostics.Process.StandardOutput%2A> stream."},{"content":"A deadlock condition results if the parent process calls <ph id=\"ph1\">`p.StandardOutput.ReadToEnd`</ph> followed by <ph id=\"ph2\">`p.StandardError.ReadToEnd`</ph> and the child process writes enough text to fill its error stream.","pos":[4364,4556],"source":" A deadlock condition results if the parent process calls `p.StandardOutput.ReadToEnd` followed by `p.StandardError.ReadToEnd` and the child process writes enough text to fill its error stream."},{"content":"The parent process would wait indefinitely for the child process to close its &lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt; stream.","pos":[4557,4694],"source":" The parent process would wait indefinitely for the child process to close its <xref:System.Diagnostics.Process.StandardOutput%2A> stream."},{"content":"The child process would wait indefinitely for the parent to read from the full &lt;xref:System.Diagnostics.Process.StandardError%2A&gt; stream.","pos":[4695,4832],"source":" The child process would wait indefinitely for the parent to read from the full <xref:System.Diagnostics.Process.StandardError%2A> stream."},{"content":"You can use asynchronous read operations to avoid these dependencies and their deadlock potential.","pos":[4839,4937]},{"content":"Alternately, you can avoid the deadlock condition by creating two threads and reading the output of each stream on a separate thread.","pos":[4938,5071]}]},{"pos":[44569,44898],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if output should be written to &lt;xref:System.Diagnostics.Process.StandardOutput%2A?displayProperty=fullName&gt;; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if output should be written to <ph id=\"ph1\">&amp;lt;</ph>xref:System.Diagnostics.Process.StandardOutput%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,250],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if output should be written to &lt;xref:System.Diagnostics.Process.StandardOutput%2A?displayProperty=fullName&gt;; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[251,329],"source":" The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[45410,45463],"content":"Gets or sets the preferred encoding for error output.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the preferred encoding for error output.","pos":[0,53]}]},{"pos":[45475,45913],"content":"If the value of the StandardErrorEncoding property is `null`, the process uses the default standard error encoding for error output. The StandardErrorEncoding property must be set before the process is started. Setting this property does not guarantee that the process will use the specified encoding; the process will use only those encodings that it supports. The application should be tested to determine which encodings are supported.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"If the value of the StandardErrorEncoding property is <ph id=\"ph1\">`null`</ph>, the process uses the default standard error encoding for error output.","pos":[0,132],"source":"If the value of the StandardErrorEncoding property is `null`, the process uses the default standard error encoding for error output."},{"content":"The StandardErrorEncoding property must be set before the process is started.","pos":[133,210]},{"content":"Setting this property does not guarantee that the process will use the specified encoding; the process will use only those encodings that it supports.","pos":[211,361]},{"content":"The application should be tested to determine which encodings are supported.","pos":[362,438]}]},{"pos":[46065,46208],"content":"An object that represents the preferred encoding for error output. The default is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that represents the preferred encoding for error output.","pos":[0,66]},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[67,143],"source":" The default is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[46724,46780],"content":"Gets or sets the preferred encoding for standard output.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the preferred encoding for standard output.","pos":[0,56]}]},{"pos":[46792,47187],"content":"If the value of the StandardOutputEncoding property is `null`, the process uses the default standard output encoding for the standard output. The StandardOutputEncoding property must be set before the process is started. Setting this property does not guarantee that the process will use the specified encoding. The application should be tested to determine which encodings the process supports.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"If the value of the StandardOutputEncoding property is <ph id=\"ph1\">`null`</ph>, the process uses the default standard output encoding for the standard output.","pos":[0,141],"source":"If the value of the StandardOutputEncoding property is `null`, the process uses the default standard output encoding for the standard output."},{"content":"The StandardOutputEncoding property must be set before the process is started.","pos":[142,220]},{"content":"Setting this property does not guarantee that the process will use the specified encoding.","pos":[221,311]},{"content":"The application should be tested to determine which encodings the process supports.","pos":[312,395]}]},{"pos":[47340,47486],"content":"An object that represents the preferred encoding for standard output. The default is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that represents the preferred encoding for standard output.","pos":[0,69]},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[70,146],"source":" The default is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[47933,47997],"content":"Gets or sets the user name to be used when starting the process.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the user name to be used when starting the process.","pos":[0,64]}]},{"pos":[48758,48805],"content":"The user name to use when starting the process.","needQuote":true,"needEscape":true,"nodes":[{"content":"The user name to use when starting the process.","pos":[0,47]}]},{"pos":[49273,49368],"content":"Gets or sets a value indicating whether to use the operating system shell to start the process.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating whether to use the operating system shell to start the process.","pos":[0,95]}]},{"pos":[49381,51400],"content":"Setting this property to `false` enables you to redirect input, output, and error streams.      > [!NOTE] >  UseShellExecute must be `false` if the <xref:System.Diagnostics.ProcessStartInfo.UserName%2A> property is not `null` or an empty string, or an <xref:System.InvalidOperationException> will be thrown when the <xref:System.Diagnostics.Process.Start%28System.Diagnostics.ProcessStartInfo%29?displayProperty=fullName> method is called.       When you use the operating system shell to start processes, you can start any document (which is any registered file type associated with an executable that has a default open action) and perform operations on the file, such as printing, by using the <xref:System.Diagnostics.Process> object. When UseShellExecute is `false`, you can start only executables by using the <xref:System.Diagnostics.Process> object.      > [!NOTE] >  UseShellExecute must be `true` if you set the <xref:System.Diagnostics.ProcessStartInfo.ErrorDialog%2A> property to `true`.       The <xref:System.Diagnostics.ProcessStartInfo.WorkingDirectory%2A> property behaves differently depending on the value of the UseShellExecute property. When UseShellExecute is `true`, the <xref:System.Diagnostics.ProcessStartInfo.WorkingDirectory%2A> property specifies the location of the executable. If <xref:System.Diagnostics.ProcessStartInfo.WorkingDirectory%2A> is an empty string, it is assumed that the current directory contains the executable.       When UseShellExecute is `false`, the <xref:System.Diagnostics.ProcessStartInfo.WorkingDirectory%2A> property is not used to find the executable. Instead, it is used only by the process that is started and has meaning only within the context of the new process. When UseShellExecute is `false`, the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property can be either a fully qualified path to the executable, or a simple executable name that the system will attempt to find within folders specified by the PATH environment variable.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Setting this property to <ph id=\"ph1\">`false`</ph> enables you to redirect input, output, and error streams.","pos":[0,90],"source":"Setting this property to `false` enables you to redirect input, output, and error streams."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  UseShellExecute must be <ph id=\"ph2\">`false`</ph> if the &lt;xref:System.Diagnostics.ProcessStartInfo.UserName%2A&gt; property is not <ph id=\"ph3\">`null`</ph> or an empty string, or an &lt;xref:System.InvalidOperationException&gt; will be thrown when the &lt;xref:System.Diagnostics.Process.Start%28System.Diagnostics.ProcessStartInfo%29?displayProperty=fullName&gt; method is called.","pos":[96,439],"source":"      > [!NOTE] >  UseShellExecute must be `false` if the <xref:System.Diagnostics.ProcessStartInfo.UserName%2A> property is not `null` or an empty string, or an <xref:System.InvalidOperationException> will be thrown when the <xref:System.Diagnostics.Process.Start%28System.Diagnostics.ProcessStartInfo%29?displayProperty=fullName> method is called."},{"content":"When you use the operating system shell to start processes, you can start any document (which is any registered file type associated with an executable that has a default open action) and perform operations on the file, such as printing, by using the &lt;xref:System.Diagnostics.Process&gt; object.","pos":[446,738],"source":"       When you use the operating system shell to start processes, you can start any document (which is any registered file type associated with an executable that has a default open action) and perform operations on the file, such as printing, by using the <xref:System.Diagnostics.Process> object."},{"content":"When UseShellExecute is <ph id=\"ph1\">`false`</ph>, you can start only executables by using the &lt;xref:System.Diagnostics.Process&gt; object.","pos":[739,857],"source":" When UseShellExecute is `false`, you can start only executables by using the <xref:System.Diagnostics.Process> object."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  UseShellExecute must be <ph id=\"ph2\">`true`</ph> if you set the &lt;xref:System.Diagnostics.ProcessStartInfo.ErrorDialog%2A&gt; property to <ph id=\"ph3\">`true`</ph>.","pos":[863,999],"source":"      > [!NOTE] >  UseShellExecute must be `true` if you set the <xref:System.Diagnostics.ProcessStartInfo.ErrorDialog%2A> property to `true`."},{"content":"The &lt;xref:System.Diagnostics.ProcessStartInfo.WorkingDirectory%2A&gt; property behaves differently depending on the value of the UseShellExecute property.","pos":[1006,1157],"source":"       The <xref:System.Diagnostics.ProcessStartInfo.WorkingDirectory%2A> property behaves differently depending on the value of the UseShellExecute property."},{"content":"When UseShellExecute is <ph id=\"ph1\">`true`</ph>, the &lt;xref:System.Diagnostics.ProcessStartInfo.WorkingDirectory%2A&gt; property specifies the location of the executable.","pos":[1158,1307],"source":" When UseShellExecute is `true`, the <xref:System.Diagnostics.ProcessStartInfo.WorkingDirectory%2A> property specifies the location of the executable."},{"content":"If &lt;xref:System.Diagnostics.ProcessStartInfo.WorkingDirectory%2A&gt; is an empty string, it is assumed that the current directory contains the executable.","pos":[1308,1459],"source":" If <xref:System.Diagnostics.ProcessStartInfo.WorkingDirectory%2A> is an empty string, it is assumed that the current directory contains the executable."},{"content":"When UseShellExecute is <ph id=\"ph1\">`false`</ph>, the &lt;xref:System.Diagnostics.ProcessStartInfo.WorkingDirectory%2A&gt; property is not used to find the executable.","pos":[1466,1610],"source":"       When UseShellExecute is `false`, the <xref:System.Diagnostics.ProcessStartInfo.WorkingDirectory%2A> property is not used to find the executable."},{"content":"Instead, it is used only by the process that is started and has meaning only within the context of the new process.","pos":[1611,1726]},{"content":"When UseShellExecute is <ph id=\"ph1\">`false`</ph>, the &lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt; property can be either a fully qualified path to the executable, or a simple executable name that the system will attempt to find within folders specified by the PATH environment variable.","pos":[1727,2007],"source":" When UseShellExecute is `false`, the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property can be either a fully qualified path to the executable, or a simple executable name that the system will attempt to find within folders specified by the PATH environment variable."}]},{"pos":[51831,52154],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the shell should be used when starting the process; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if the process should be created directly from the executable file. The default is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the shell should be used when starting the process; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> if the process should be created directly from the executable file.","pos":[0,246],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the shell should be used when starting the process; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if the process should be created directly from the executable file."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[247,323],"source":" The default is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>."}]},{"pos":[52574,52723],"content":"Gets or sets the verb to use when opening the application or document specified by the <xref:System.Diagnostics.ProcessStartInfo.FileName*> property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the verb to use when opening the application or document specified by the &lt;xref:System.Diagnostics.ProcessStartInfo.FileName*&gt; property.","pos":[0,149],"source":"Gets or sets the verb to use when opening the application or document specified by the <xref:System.Diagnostics.ProcessStartInfo.FileName*> property."}]},{"pos":[52736,53585],"content":"Each file name extension has its own set of verbs, which can be obtained by using the <xref:System.Diagnostics.ProcessStartInfo.Verbs%2A> property. For example, the \"`print`\" verb will print a document specified by using <xref:System.Diagnostics.ProcessStartInfo.FileName%2A>. The default verb can be specified by using an empty string (\"\"). Examples of verbs are \"Edit\", \"Open\", \"OpenAsReadOnly\", \"Print\", and \"Printto\". You should use only verbs that appear in the set of verbs returned by the <xref:System.Diagnostics.ProcessStartInfo.Verbs%2A> property.       When you use the Verb property, you must include the file name extension when you set the value of the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property. The file name does not need to have an extension if you manually enter a value for the Verb property.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Each file name extension has its own set of verbs, which can be obtained by using the &lt;xref:System.Diagnostics.ProcessStartInfo.Verbs%2A&gt; property.","pos":[0,147],"source":"Each file name extension has its own set of verbs, which can be obtained by using the <xref:System.Diagnostics.ProcessStartInfo.Verbs%2A> property."},{"content":"For example, the \"<ph id=\"ph1\">`print`</ph>\" verb will print a document specified by using &lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt;.","pos":[148,276],"source":" For example, the \"`print`\" verb will print a document specified by using <xref:System.Diagnostics.ProcessStartInfo.FileName%2A>."},{"content":"The default verb can be specified by using an empty string (\"\").","pos":[277,341]},{"content":"Examples of verbs are \"Edit\", \"Open\", \"OpenAsReadOnly\", \"Print\", and \"Printto\".","pos":[342,421]},{"content":"You should use only verbs that appear in the set of verbs returned by the &lt;xref:System.Diagnostics.ProcessStartInfo.Verbs%2A&gt; property.","pos":[422,557],"source":" You should use only verbs that appear in the set of verbs returned by the <xref:System.Diagnostics.ProcessStartInfo.Verbs%2A> property."},{"content":"When you use the Verb property, you must include the file name extension when you set the value of the &lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt; property.","pos":[564,731],"source":"       When you use the Verb property, you must include the file name extension when you set the value of the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property."},{"content":"The file name does not need to have an extension if you manually enter a value for the Verb property.","pos":[732,833]}]},{"pos":[54142,54262],"content":"The action to take with the file that the process opens. The default is an empty string (\"\"), which signifies no action.","needQuote":true,"needEscape":true,"nodes":[{"content":"The action to take with the file that the process opens. The default is an empty string (\"\"), which signifies no action.","pos":[0,120],"nodes":[{"content":"The action to take with the file that the process opens.","pos":[0,56]},{"content":"The default is an empty string (\"\"), which signifies no action.","pos":[57,120]}]}]},{"pos":[54676,54810],"content":"Gets the set of verbs associated with the type of file specified by the <xref:System.Diagnostics.ProcessStartInfo.FileName*> property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the set of verbs associated with the type of file specified by the &lt;xref:System.Diagnostics.ProcessStartInfo.FileName*&gt; property.","pos":[0,134],"source":"Gets the set of verbs associated with the type of file specified by the <xref:System.Diagnostics.ProcessStartInfo.FileName*> property."}]},{"pos":[54823,55431],"content":"The Verbs property enables you to determine the verbs that can be used with the file specified by the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property. You can set the <xref:System.Diagnostics.ProcessStartInfo.Verb%2A> property to the value of any verb in the set. Examples of verbs are \"Edit\", \"Open\", \"OpenAsReadOnly\", \"Print\", and \"Printto\".       When you use the Verbs property, you must include the file name extension when you set the value of the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property. The file name extension determines the set of possible verbs.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Verbs property enables you to determine the verbs that can be used with the file specified by the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property. You can set the <xref:System.Diagnostics.ProcessStartInfo.Verb%2A> property to the value of any verb in the set. Examples of verbs are \"Edit\", \"Open\", \"OpenAsReadOnly\", \"Print\", and \"Printto\".       When you use the Verbs property, you must include the file name extension when you set the value of the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property. The file name extension determines the set of possible verbs.","pos":[0,596],"nodes":[{"content":"The Verbs property enables you to determine the verbs that can be used with the file specified by the &lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt; property.","pos":[0,166],"source":"The Verbs property enables you to determine the verbs that can be used with the file specified by the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property."},{"content":"You can set the &lt;xref:System.Diagnostics.ProcessStartInfo.Verb%2A&gt; property to the value of any verb in the set.","pos":[167,279],"source":" You can set the <xref:System.Diagnostics.ProcessStartInfo.Verb%2A> property to the value of any verb in the set."},{"content":"Examples of verbs are \"Edit\", \"Open\", \"OpenAsReadOnly\", \"Print\", and \"Printto\".","pos":[280,359]},{"content":"When you use the Verbs property, you must include the file name extension when you set the value of the &lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt; property.","pos":[366,534],"source":"       When you use the Verbs property, you must include the file name extension when you set the value of the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property."},{"content":"The file name extension determines the set of possible verbs.","pos":[535,596]}]}]},{"pos":[55980,56109],"content":"The actions that the system can apply to the file indicated by the <xref:System.Diagnostics.ProcessStartInfo.FileName*> property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The actions that the system can apply to the file indicated by the &lt;xref:System.Diagnostics.ProcessStartInfo.FileName*&gt; property.","pos":[0,129],"source":"The actions that the system can apply to the file indicated by the <xref:System.Diagnostics.ProcessStartInfo.FileName*> property."}]},{"pos":[56554,56619],"content":"Gets or sets the window state to use when the process is started.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the window state to use when the process is started.","pos":[0,65]}]},{"pos":[57127,57383],"content":"One of the enumeration values that indicates whether the process is started in a window that is maximized, minimized, normal (neither maximized nor minimized), or not visible. The default is <xref uid=\"langword_csharp_Normal\" name=\"Normal\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the enumeration values that indicates whether the process is started in a window that is maximized, minimized, normal (neither maximized nor minimized), or not visible.","pos":[0,175]},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Normal\" name=\"Normal\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[176,256],"source":" The default is <xref uid=\"langword_csharp_Normal\" name=\"Normal\" href=\"\"></xref>."}]},{"pos":[57605,57719],"content":"The window style is not one of the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.ProcessWindowStyle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration members.","needQuote":true,"needEscape":true,"source":"The window style is not one of the <xref href=\"System.Diagnostics.ProcessWindowStyle\"></xref> enumeration members."},{"pos":[58117,58525],"content":"When the &lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute<bpt id=\"p1\">*</bpt>&gt; property is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, gets or sets the working directory for the process to be started. When &lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute<ept id=\"p1\">*</ept>&gt; is <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>, gets or sets the directory that contains the process to be started.","needQuote":true,"needEscape":true,"source":"When the <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute*> property is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, gets or sets the working directory for the process to be started. When <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute*> is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, gets or sets the directory that contains the process to be started."},{"pos":[60039,60486],"content":"When <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute*> is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, the fully qualified name of the directory that contains the process to be started. When the <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute*> property is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, the working directory for the process to be started. The default is an empty string (\"\").","needQuote":true,"needEscape":true,"nodes":[{"content":"When &lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute<bpt id=\"p1\">*</bpt>&gt; is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, the fully qualified name of the directory that contains the process to be started. When the &lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute<ept id=\"p1\">*</ept>&gt; property is <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>, the working directory for the process to be started.","pos":[0,410],"source":"When <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute*> is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, the fully qualified name of the directory that contains the process to be started. When the <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute*> property is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, the working directory for the process to be started."},{"content":"The default is an empty string (\"\").","pos":[411,447]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Diagnostics.ProcessStartInfo\n  id: ProcessStartInfo\n  children:\n  - System.Diagnostics.ProcessStartInfo.#ctor\n  - System.Diagnostics.ProcessStartInfo.#ctor(System.String)\n  - System.Diagnostics.ProcessStartInfo.#ctor(System.String,System.String)\n  - System.Diagnostics.ProcessStartInfo.Arguments\n  - System.Diagnostics.ProcessStartInfo.CreateNoWindow\n  - System.Diagnostics.ProcessStartInfo.Domain\n  - System.Diagnostics.ProcessStartInfo.Environment\n  - System.Diagnostics.ProcessStartInfo.EnvironmentVariables\n  - System.Diagnostics.ProcessStartInfo.ErrorDialog\n  - System.Diagnostics.ProcessStartInfo.ErrorDialogParentHandle\n  - System.Diagnostics.ProcessStartInfo.FileName\n  - System.Diagnostics.ProcessStartInfo.LoadUserProfile\n  - System.Diagnostics.ProcessStartInfo.Password\n  - System.Diagnostics.ProcessStartInfo.PasswordInClearText\n  - System.Diagnostics.ProcessStartInfo.RedirectStandardError\n  - System.Diagnostics.ProcessStartInfo.RedirectStandardInput\n  - System.Diagnostics.ProcessStartInfo.RedirectStandardOutput\n  - System.Diagnostics.ProcessStartInfo.StandardErrorEncoding\n  - System.Diagnostics.ProcessStartInfo.StandardOutputEncoding\n  - System.Diagnostics.ProcessStartInfo.UserName\n  - System.Diagnostics.ProcessStartInfo.UseShellExecute\n  - System.Diagnostics.ProcessStartInfo.Verb\n  - System.Diagnostics.ProcessStartInfo.Verbs\n  - System.Diagnostics.ProcessStartInfo.WindowStyle\n  - System.Diagnostics.ProcessStartInfo.WorkingDirectory\n  langs:\n  - csharp\n  name: ProcessStartInfo\n  nameWithType: ProcessStartInfo\n  fullName: System.Diagnostics.ProcessStartInfo\n  type: Class\n  summary: Specifies a set of values that are used when you start a process.\n  remarks: \"ProcessStartInfo is used together with the <xref:System.Diagnostics.Process> component. When you start a process using the <xref:System.Diagnostics.Process> class, you have access to process information in addition to that available when attaching to a running process.  \\n  \\n You can use the ProcessStartInfo class for better control over the process you start. You must at least set the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property, either manually or using the constructor. The file name is any application or document. Here a document is defined to be any file type that has an open or default action associated with it. You can view registered file types and their associated applications for your computer by using the **Folder Options** dialog box, which is available through the operating system. The **Advanced** button leads to a dialog box that shows whether there is an open action associated with a specific registered file type.  \\n  \\n In addition, you can set other properties that define actions to take with that file. You can specify a value specific to the type of the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property for the <xref:System.Diagnostics.ProcessStartInfo.Verb%2A> property. For example, you can specify \\\"print\\\" for a document type. Additionally, you can specify <xref:System.Diagnostics.ProcessStartInfo.Arguments%2A> property values to be command-line arguments to pass to the file's open procedure. For example, if you specify a text editor application in the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property, you can use the <xref:System.Diagnostics.ProcessStartInfo.Arguments%2A> property to specify a text file to be opened by the editor.  \\n  \\n Standard input is usually the keyboard, and standard output and standard error are usually the monitor screen. However, you can use the <xref:System.Diagnostics.ProcessStartInfo.RedirectStandardInput%2A>, <xref:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput%2A>, and <xref:System.Diagnostics.ProcessStartInfo.RedirectStandardError%2A> properties to cause the process to get input from or return output to a file or other device. If you use the <xref:System.Diagnostics.Process.StandardInput%2A>, <xref:System.Diagnostics.Process.StandardOutput%2A>, or <xref:System.Diagnostics.Process.StandardError%2A> properties on the <xref:System.Diagnostics.Process> component, you must first set the corresponding value on the ProcessStartInfo property. Otherwise, the system throws an exception when you read or write to the stream.  \\n  \\n Set <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> to specify whether to start the process by using the operating system shell.  \\n  \\n You can change the value of any ProcessStartInfo property up to the time that the process starts. After you start the process, changing these values has no effect.  \\n  \\n> [!NOTE]\\n>  This class contains a link demand at the class level that applies to all members. A <xref:System.Security.SecurityException> is thrown when the immediate caller does not have full-trust permission. For details about security demands, see [Link Demands](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"The following code example demonstrates how to use the ProcessStartInfo class to start Internet Explorer, providing the destination URLs as ProcessStartInfo arguments.  \\n  \\n [!code-vb[Process.Start_static#1](~/add/codesnippet/visualbasic/t-system.diagnostics.pro_2_1.vb)]\\n [!code-cs[Process.Start_static#1](~/add/codesnippet/csharp/t-system.diagnostics.pro_2_1.cs)]\\n [!code-cpp[Process.Start_static#1](~/add/codesnippet/cpp/t-system.diagnostics.pro_2_1.cpp)]\"\n  syntax:\n    content: >-\n      [System.ComponentModel.TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]\n\n      public sealed class ProcessStartInfo\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Diagnostics.ProcessStartInfo.#ctor\n  id: '#ctor'\n  parent: System.Diagnostics.ProcessStartInfo\n  langs:\n  - csharp\n  name: ProcessStartInfo()\n  nameWithType: ProcessStartInfo.ProcessStartInfo()\n  fullName: System.Diagnostics.ProcessStartInfo.ProcessStartInfo()\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Initializes a new instance of the <xref href=\"System.Diagnostics.ProcessStartInfo\"></xref> class without specifying a file name with which to start the process.\n  remarks: \"You must set at least the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property before you start the process. The file name is any application or document. In this case, a document is defined to be any file type that has an open or default action associated with it. You can view registered file types and their associated applications for your computer by using the **Folder Options** dialog box, which is available through the operating system. The **Advanced** button leads to a dialog box that shows whether there is an open action associated with a specific registered file type.  \\n  \\n Optionally, you can also set other properties before you start the process. The <xref:System.Diagnostics.ProcessStartInfo.Verb%2A> property supplies actions to take, such as \\\"print\\\", with the file indicated in the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property. The <xref:System.Diagnostics.ProcessStartInfo.Arguments%2A> property supplies a way to pass command-line arguments to the file when the system opens it.\"\n  syntax:\n    content: public ProcessStartInfo ();\n    parameters: []\n  overload: System.Diagnostics.ProcessStartInfo.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.ProcessStartInfo.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Diagnostics.ProcessStartInfo\n  langs:\n  - csharp\n  name: ProcessStartInfo(String)\n  nameWithType: ProcessStartInfo.ProcessStartInfo(String)\n  fullName: System.Diagnostics.ProcessStartInfo.ProcessStartInfo(String)\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Initializes a new instance of the <xref href=\"System.Diagnostics.ProcessStartInfo\"></xref> class and specifies a file name such as an application or document with which to start the process.\n  remarks: \"The file name is any application or document. In this case, a document is defined to be any file type that has an open or default action associated with it. You can view registered file types and their associated applications for your computer by using the **Folder Options** dialog box, which is available through the operating system. The **Advanced** button leads to a dialog box that shows whether there is an open action associated with a specific registered file type.  \\n  \\n You can change the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property after you call this constructor, up to the time that the process starts. After you start the process, changing these values has no effect.\"\n  syntax:\n    content: public ProcessStartInfo (string fileName);\n    parameters:\n    - id: fileName\n      type: System.String\n      description: An application or document with which to start a process.\n  overload: System.Diagnostics.ProcessStartInfo.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.ProcessStartInfo.#ctor(System.String,System.String)\n  id: '#ctor(System.String,System.String)'\n  parent: System.Diagnostics.ProcessStartInfo\n  langs:\n  - csharp\n  name: ProcessStartInfo(String,String)\n  nameWithType: ProcessStartInfo.ProcessStartInfo(String,String)\n  fullName: System.Diagnostics.ProcessStartInfo.ProcessStartInfo(String,String)\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Initializes a new instance of the <xref href=\"System.Diagnostics.ProcessStartInfo\"></xref> class, specifies an application file name with which to start the process, and specifies a set of command-line arguments to pass to the application.\n  remarks: \"The file name is any application or document. In this case, a document is defined to be any file type that has an open or default action associated with it. You can view registered file types and their associated applications for your computer by using the **Folder Options** dialog box, which is available through the operating system. The **Advanced** button leads to a dialog box that shows whether there is an open action associated with a specific registered file type.  \\n  \\n You can change the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> or <xref:System.Diagnostics.ProcessStartInfo.Arguments%2A> properties after you call this constructor, up to the time that the process starts. After you start the process, changing these values has no effect.\"\n  syntax:\n    content: public ProcessStartInfo (string fileName, string arguments);\n    parameters:\n    - id: fileName\n      type: System.String\n      description: An application with which to start a process.\n    - id: arguments\n      type: System.String\n      description: Command-line arguments to pass to the application when the process starts.\n  overload: System.Diagnostics.ProcessStartInfo.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.ProcessStartInfo.Arguments\n  id: Arguments\n  parent: System.Diagnostics.ProcessStartInfo\n  langs:\n  - csharp\n  name: Arguments\n  nameWithType: ProcessStartInfo.Arguments\n  fullName: System.Diagnostics.ProcessStartInfo.Arguments\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Gets or sets the set of command-line arguments to use when starting the application.\n  remarks: ''\n  example:\n  - \"The first example below creates a small application (argsecho.exe) that echos its arguments to the console. The second example creates an application that invokes argsecho.exe to demonstrate different variations for the Arguments property.  \\n  \\n [!code-vb[Process.Start_static#3](~/add/codesnippet/visualbasic/p-system.diagnostics.pro_2_1.vb)]\\n [!code-cs[Process.Start_static#3](~/add/codesnippet/csharp/p-system.diagnostics.pro_2_1.cs)]\\n [!code-cpp[Process.Start_static#3](~/add/codesnippet/cpp/p-system.diagnostics.pro_2_1.cpp)]  \\n  \\n [!code-vb[Process.Start_static#2](~/add/codesnippet/visualbasic/p-system.diagnostics.pro_2_2.vb)]\\n [!code-cs[Process.Start_static#2](~/add/codesnippet/csharp/p-system.diagnostics.pro_2_2.cs)]\\n [!code-cpp[Process.Start_static#2](~/add/codesnippet/cpp/p-system.diagnostics.pro_2_2.cpp)]\"\n  syntax:\n    content: public string Arguments { get; set; }\n    return:\n      type: System.String\n      description: \"A single string containing the arguments to pass to the target application specified in the <xref:System.Diagnostics.ProcessStartInfo.FileName*> property. The default is an empty string (\\\"\\\"). On Windows Vista and earlier versions of the Windows operating system, the length of the arguments added to the length of the full path to the process must be less than 2080. On Windows 7 and later versions, the length must be less than 32699.  \\n  \\n Arguments are parsed and interpreted by the target application, so must align with the expectations of that application. For.NET applications as demonstrated in the Examples below, spaces are interpreted as a separator between multiple arguments. A single argument that includes spaces must be surrounded by quotation marks, but those quotation marks are not carried through to the target application. In include quotation marks in the final parsed argument, triple-escape each mark.\"\n  overload: System.Diagnostics.ProcessStartInfo.Arguments*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.ProcessStartInfo.CreateNoWindow\n  id: CreateNoWindow\n  parent: System.Diagnostics.ProcessStartInfo\n  langs:\n  - csharp\n  name: CreateNoWindow\n  nameWithType: ProcessStartInfo.CreateNoWindow\n  fullName: System.Diagnostics.ProcessStartInfo.CreateNoWindow\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Gets or sets a value indicating whether to start the process in a new window.\n  remarks: If the <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> property is `true` or the <xref:System.Diagnostics.ProcessStartInfo.UserName%2A> and <xref:System.Diagnostics.ProcessStartInfo.Password%2A> properties are not `null`, the CreateNoWindow property value is ignored and a new window is created.\n  example:\n  - >-\n    [!code-cpp[Process.Start_instance#1](~/add/codesnippet/cpp/p-system.diagnostics.pro_19_1.cpp)]\n     [!code-vb[Process.Start_instance#1](~/add/codesnippet/visualbasic/p-system.diagnostics.pro_19_1.vb)]\n     [!code-cs[Process.Start_instance#1](~/add/codesnippet/csharp/p-system.diagnostics.pro_19_1.cs)]\n  syntax:\n    content: public bool CreateNoWindow { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the process should be started without creating a new window to contain it; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Diagnostics.ProcessStartInfo.CreateNoWindow*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.ProcessStartInfo.Domain\n  id: Domain\n  parent: System.Diagnostics.ProcessStartInfo\n  langs:\n  - csharp\n  name: Domain\n  nameWithType: ProcessStartInfo.Domain\n  fullName: System.Diagnostics.ProcessStartInfo.Domain\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Gets or sets a value that identifies the domain to use when starting the process.\n  syntax:\n    content: public string Domain { get; set; }\n    return:\n      type: System.String\n      description: The Active Directory domain to use when starting the process. The domain property is primarily of interest to users within enterprise environments that use Active Directory.\n  overload: System.Diagnostics.ProcessStartInfo.Domain*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.ProcessStartInfo.Environment\n  id: Environment\n  parent: System.Diagnostics.ProcessStartInfo\n  langs:\n  - csharp\n  name: Environment\n  nameWithType: ProcessStartInfo.Environment\n  fullName: System.Diagnostics.ProcessStartInfo.Environment\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Gets the environment variables that apply to this process and its child processes.\n  remarks: \"The environment variables contain search paths for files, directories for temporary files, application-specific options, and other similar information. Although you cannot directly set the Environment property, you can modify the generic dictionary returned by the property. For example, the following code adds a TempPath environment variable: `myProcess.StartInfo.Environment.Add(\\\"TempPath\\\", \\\"C:\\\\\\\\Temp\\\")`.  You must set the <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> property to `false` to start the process after changing the Environment property. If <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> is `true`, an <xref:System.InvalidOperationException> is thrown when the <xref:System.Diagnostics.Process.Start%2A> method is called.  \\n  \\n On .NET Framework applications, using the Environment property is the same as using the <xref:System.Diagnostics.ProcessStartInfo.EnvironmentVariables%2A> property.\"\n  syntax:\n    content: public System.Collections.Generic.IDictionary<string,string> Environment { get; }\n    return:\n      type: System.Collections.Generic.IDictionary{System.String,System.String}\n      description: A generic dictionary containing the environment variables that apply to this process and its child processes. The default is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Diagnostics.ProcessStartInfo.Environment*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.ProcessStartInfo.EnvironmentVariables\n  id: EnvironmentVariables\n  parent: System.Diagnostics.ProcessStartInfo\n  langs:\n  - csharp\n  name: EnvironmentVariables\n  nameWithType: ProcessStartInfo.EnvironmentVariables\n  fullName: System.Diagnostics.ProcessStartInfo.EnvironmentVariables\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Gets search paths for files, directories for temporary files, application-specific options, and other similar information.\n  remarks: 'Although you cannot set the EnvironmentVariables property, you can modify the <xref:System.Collections.Specialized.StringDictionary> returned by the property. For example, the following code adds a TempPath environment variable: `myProcess.StartInfo.EnvironmentVariables.Add(\"TempPath\", \"C:\\\\Temp\")`.  You must set the <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> property to `false` to start the process after changing the EnvironmentVariables property. If <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> is `true`, an <xref:System.InvalidOperationException> is thrown when the <xref:System.Diagnostics.Process.Start%2A> method is called.'\n  syntax:\n    content: public System.Collections.Specialized.StringDictionary EnvironmentVariables { get; }\n    return:\n      type: System.Collections.Specialized.StringDictionary\n      description: A string dictionary that provides environment variables that apply to this process and child processes. The default is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Diagnostics.ProcessStartInfo.EnvironmentVariables*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.ProcessStartInfo.ErrorDialog\n  id: ErrorDialog\n  parent: System.Diagnostics.ProcessStartInfo\n  langs:\n  - csharp\n  name: ErrorDialog\n  nameWithType: ProcessStartInfo.ErrorDialog\n  fullName: System.Diagnostics.ProcessStartInfo.ErrorDialog\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Gets or sets a value indicating whether an error dialog box is displayed to the user if the process cannot be started.\n  remarks: >-\n    > [!NOTE]\n\n    >  <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> must be `true` if you want to set ErrorDialog to `true`.\n  syntax:\n    content: public bool ErrorDialog { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if an error dialog box should be displayed on the screen if the process cannot be started; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Diagnostics.ProcessStartInfo.ErrorDialog*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.ProcessStartInfo.ErrorDialogParentHandle\n  id: ErrorDialogParentHandle\n  parent: System.Diagnostics.ProcessStartInfo\n  langs:\n  - csharp\n  name: ErrorDialogParentHandle\n  nameWithType: ProcessStartInfo.ErrorDialogParentHandle\n  fullName: System.Diagnostics.ProcessStartInfo.ErrorDialogParentHandle\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Gets or sets the window handle to use when an error dialog box is shown for a process that cannot be started.\n  remarks: If <xref:System.Diagnostics.ProcessStartInfo.ErrorDialog%2A> is `true`, the ErrorDialogParentHandle property specifies the parent window for the dialog box that is shown. It is useful to specify a parent to keep the dialog box in front of the application.\n  syntax:\n    content: public IntPtr ErrorDialogParentHandle { get; set; }\n    return:\n      type: System.IntPtr\n      description: A pointer to the handle of the error dialog box that results from a process start failure.\n  overload: System.Diagnostics.ProcessStartInfo.ErrorDialogParentHandle*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.ProcessStartInfo.FileName\n  id: FileName\n  parent: System.Diagnostics.ProcessStartInfo\n  langs:\n  - csharp\n  name: FileName\n  nameWithType: ProcessStartInfo.FileName\n  fullName: System.Diagnostics.ProcessStartInfo.FileName\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Gets or sets the application or document to start.\n  remarks: \"You must set at least the FileName property before you start the process. The file name is any application or document. A document is defined to be any file type that has an open or default action associated with it. You can view registered file types and their associated applications for your computer by using the **Folder Options** dialog box, which is available through the operating system. The **Advanced** button leads to a dialog box that shows whether there is an open action associated with a specific registered file type.  \\n  \\n The set of file types available to you depends in part on the value of the <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> property. If <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> is `true`, you can start any document and perform operations on the file, such as printing, with the <xref:System.Diagnostics.Process> component. When <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> is `false`, you can start only executables with the <xref:System.Diagnostics.Process> component.  \\n  \\n You can start a ClickOnce application by setting the FileName property to the location (for example, a Web address) from which you originally installed the application. Do not start a ClickOnce application by specifying its installed location on your hard disk.\"\n  example:\n  - >-\n    [!code-cpp[Process.Start_instance#1](~/add/codesnippet/cpp/p-system.diagnostics.pro_27_1.cpp)]\n     [!code-vb[Process.Start_instance#1](~/add/codesnippet/visualbasic/p-system.diagnostics.pro_27_1.vb)]\n     [!code-cs[Process.Start_instance#1](~/add/codesnippet/csharp/p-system.diagnostics.pro_27_1.cs)]\n  syntax:\n    content: public string FileName { get; set; }\n    return:\n      type: System.String\n      description: The name of the application to start, or the name of a document of a file type that is associated with an application and that has a default open action available to it. The default is an empty string (\"\").\n  overload: System.Diagnostics.ProcessStartInfo.FileName*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.ProcessStartInfo.LoadUserProfile\n  id: LoadUserProfile\n  parent: System.Diagnostics.ProcessStartInfo\n  langs:\n  - csharp\n  name: LoadUserProfile\n  nameWithType: ProcessStartInfo.LoadUserProfile\n  fullName: System.Diagnostics.ProcessStartInfo.LoadUserProfile\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Gets or sets a value that indicates whether the Windows user profile is to be loaded from the registry.\n  remarks: \"This property is referenced if the process is being started by using the user name, password, and domain.  \\n  \\n If the value is `true`, the user's profile in the `HKEY_USERS` registry key is loaded. Loading the profile can be time-consuming. Therefore, it is best to use this value only if you must access the information in the `HKEY_CURRENT_USER` registry key.  \\n  \\n In Windows Server 2003 and Windows 2000, the profile is unloaded after the new process has been terminated, regardless of whether the process has created child processes.  \\n  \\n In Windows XP, the profile is unloaded after the new process and all child processes it has created have been terminated.\"\n  syntax:\n    content: public bool LoadUserProfile { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the Windows user profile should be loaded; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Diagnostics.ProcessStartInfo.LoadUserProfile*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.ProcessStartInfo.Password\n  id: Password\n  parent: System.Diagnostics.ProcessStartInfo\n  langs:\n  - csharp\n  name: Password\n  nameWithType: ProcessStartInfo.Password\n  fullName: System.Diagnostics.ProcessStartInfo.Password\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Gets or sets a secure string that contains the user password to use when starting the process.\n  remarks: \"> [!IMPORTANT]\\n>  The <xref:System.Diagnostics.ProcessStartInfo.WorkingDirectory%2A> property must be set if <xref:System.Diagnostics.ProcessStartInfo.UserName%2A> and Password are provided. If the property is not set, the default working directory is %SYSTEMROOT%\\\\system32.  \\n  \\n> [!NOTE]\\n>  Setting the <xref:System.Diagnostics.ProcessStartInfo.Domain%2A>, <xref:System.Diagnostics.ProcessStartInfo.UserName%2A>, and the Password properties in a <xref:System.Diagnostics.ProcessStartInfo> object is the recommended practice for starting a process with user credentials.  \\n  \\n A <xref:System.Security.SecureString> object is like a <xref:System.String> object in that it has a text value. However, the value of a <xref:System.Security.SecureString> object is automatically encrypted, it can be modified until your application marks it as read-only, and it can be deleted from computer memory by either your application or the .NET Framework garbage collector.  \\n  \\n For more information about secure strings and an example of how to obtain a password to set this property, see the <xref:System.Security.SecureString> class.  \\n  \\n> [!NOTE]\\n>  If you provide a value for the Password property, the <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> property must be `false`, or an <xref:System.InvalidOperationException> will be thrown when the <xref:System.Diagnostics.Process.Start%28System.Diagnostics.ProcessStartInfo%29?displayProperty=fullName> method is called.\"\n  syntax:\n    content: public System.Security.SecureString Password { get; set; }\n    return:\n      type: System.Security.SecureString\n      description: The user password to use when starting the process.\n  overload: System.Diagnostics.ProcessStartInfo.Password*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.ProcessStartInfo.PasswordInClearText\n  id: PasswordInClearText\n  parent: System.Diagnostics.ProcessStartInfo\n  langs:\n  - csharp\n  name: PasswordInClearText\n  nameWithType: ProcessStartInfo.PasswordInClearText\n  fullName: System.Diagnostics.ProcessStartInfo.PasswordInClearText\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Gets or sets the user password in clear text to use when starting the process.\n  syntax:\n    content: public string PasswordInClearText { get; set; }\n    return:\n      type: System.String\n      description: The user password in clear text.\n  overload: System.Diagnostics.ProcessStartInfo.PasswordInClearText*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.ProcessStartInfo.RedirectStandardError\n  id: RedirectStandardError\n  parent: System.Diagnostics.ProcessStartInfo\n  langs:\n  - csharp\n  name: RedirectStandardError\n  nameWithType: ProcessStartInfo.RedirectStandardError\n  fullName: System.Diagnostics.ProcessStartInfo.RedirectStandardError\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Gets or sets a value that indicates whether the error output of an application is written to the &lt;xref:System.Diagnostics.Process.StandardError%2A?displayProperty=fullName&gt; stream.\n  remarks: \"When a <xref:System.Diagnostics.Process> writes text to its standard error stream, that text is typically displayed on the console. By redirecting the <xref:System.Diagnostics.Process.StandardError%2A> stream, you can manipulate or suppress the error output of a process. For example, you can filter the text, format it differently, or write the output to both the console and a designated log file.  \\n  \\n> [!NOTE]\\n>  You must set <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> to `false` if you want to set RedirectStandardError to `true`. Otherwise, reading from the <xref:System.Diagnostics.Process.StandardError%2A> stream throws an exception.  \\n  \\n The redirected <xref:System.Diagnostics.Process.StandardError%2A> stream can be read synchronously or asynchronously. Methods such as <xref:System.IO.StreamReader.Read%2A>, <xref:System.IO.StreamReader.ReadLine%2A> and <xref:System.IO.StreamReader.ReadToEnd%2A> perform synchronous read operations on the error output stream of the process. These synchronous read operations do not complete until the associated <xref:System.Diagnostics.Process> writes to its <xref:System.Diagnostics.Process.StandardError%2A> stream, or closes the stream.  \\n  \\n In contrast, <xref:System.Diagnostics.Process.BeginErrorReadLine%2A> starts asynchronous read operations on the <xref:System.Diagnostics.Process.StandardError%2A> stream. This method enables a designated event handler for the stream output and immediately returns to the caller, which can perform other work while the stream output is directed to the event handler.  \\n  \\n> [!NOTE]\\n>  The application that is processing the asynchronous output should call the <xref:System.Diagnostics.Process.WaitForExit%2A> method to ensure that the output buffer has been flushed.  \\n  \\n Synchronous read operations introduce a dependency between the caller reading from the <xref:System.Diagnostics.Process.StandardError%2A> stream and the child process writing to that stream. These dependencies can cause deadlock conditions. When the caller reads from the redirected stream of a child process, it is dependent on the child. The caller waits for the read operation until the child writes to the stream or closes the stream. When the child process writes enough data to fill its redirected stream, it is dependent on the parent. The child process waits for the next write operation until the parent reads from the full stream or closes the stream. The deadlock condition results when the caller and child process wait for each other to complete an operation, and neither can continue. You can avoid deadlocks by evaluating dependencies between the caller and child process.  \\n  \\n For example, the following C# code shows how to read from a redirected stream and wait for the child process to exit.  \\n  \\n```  \\n// Start the child process.  \\n Process p = new Process();  \\n // Redirect the error stream of the child process.  \\n p.StartInfo.UseShellExecute = false;  \\n p.StartInfo.RedirectStandardError = true;  \\n p.StartInfo.FileName = \\\"Write500Lines.exe\\\";  \\n p.Start();  \\n // Do not wait for the child process to exit before  \\n // reading to the end of its redirected error stream.  \\n // p.WaitForExit();  \\n // Read the error stream first and then wait.  \\n string error = p.StandardError.ReadToEnd();  \\n p.WaitForExit();  \\n```  \\n  \\n The code example avoids a deadlock condition by calling `p.StandardError.ReadToEnd` before `p.WaitForExit`. A deadlock condition can result if the parent process calls `p.WaitForExit` before `p.StandardError.ReadToEnd` and the child process writes enough text to fill the redirected stream. The parent process would wait indefinitely for the child process to exit. The child process would wait indefinitely for the parent to read from the full <xref:System.Diagnostics.Process.StandardError%2A> stream.  \\n  \\n There is a similar issue when you read all text from both the standard output and standard error streams. For example, the following C# code performs a read operation on both streams.  \\n  \\n```  \\n// Do not perform a synchronous read to the end of both  \\n// redirected streams.  \\n// string output = p.StandardOutput.ReadToEnd();  \\n// string error = p.StandardError.ReadToEnd();  \\n// p.WaitForExit();  \\n// Use asynchronous read operations on at least one of the streams.  \\np.BeginOutputReadLine();  \\nstring error = p.StandardError.ReadToEnd();  \\np.WaitForExit();  \\n```  \\n  \\n The code example avoids the deadlock condition by performing asynchronous read operations on the <xref:System.Diagnostics.Process.StandardOutput%2A> stream. A deadlock condition results if the parent process calls `p.StandardOutput.ReadToEnd` followed by `p.StandardError.ReadToEnd` and the child process writes enough text to fill its error stream. The parent process would wait indefinitely for the child process to close its <xref:System.Diagnostics.Process.StandardOutput%2A> stream. The child process would wait indefinitely for the parent to read from the full <xref:System.Diagnostics.Process.StandardError%2A> stream.  \\n  \\n You can use asynchronous read operations to avoid these dependencies and their deadlock potential. Alternately, you can avoid the deadlock condition by creating two threads and reading the output of each stream on a separate thread.\"\n  example:\n  - \"The following example uses the `net use` command together with a user-supplied argument to map a network resource. It then reads the standard error stream of the net command and writes it to console.  \\n  \\n [!code-cs[Process_StandardError#1](~/add/codesnippet/csharp/p-system.diagnostics.pro_31_1.cs)]\\n [!code-cpp[Process_StandardError#1](~/add/codesnippet/cpp/p-system.diagnostics.pro_31_1.cpp)]\\n [!code-vb[Process_StandardError#1](~/add/codesnippet/visualbasic/p-system.diagnostics.pro_31_1.vb)]\"\n  syntax:\n    content: public bool RedirectStandardError { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if error output should be written to &lt;xref:System.Diagnostics.Process.StandardError%2A?displayProperty=fullName&gt;; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Diagnostics.ProcessStartInfo.RedirectStandardError*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.ProcessStartInfo.RedirectStandardInput\n  id: RedirectStandardInput\n  parent: System.Diagnostics.ProcessStartInfo\n  langs:\n  - csharp\n  name: RedirectStandardInput\n  nameWithType: ProcessStartInfo.RedirectStandardInput\n  fullName: System.Diagnostics.ProcessStartInfo.RedirectStandardInput\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Gets or sets a value indicating whether the input for an application is read from the &lt;xref:System.Diagnostics.Process.StandardInput%2A?displayProperty=fullName&gt; stream.\n  remarks: \"A <xref:System.Diagnostics.Process> can read input text from its standard input stream, typically the keyboard. By redirecting the <xref:System.Diagnostics.Process.StandardInput%2A> stream, you can programmatically specify the input of a process. For example, instead of using keyboard input, you can provide text from the contents of a designated file or output from another application.  \\n  \\n> [!NOTE]\\n>  You must set <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> to `false` if you want to set RedirectStandardInput to `true`. Otherwise, writing to the <xref:System.Diagnostics.Process.StandardInput%2A> stream throws an exception.\"\n  example:\n  - \"The following example illustrates how to redirect the <xref:System.Diagnostics.Process.StandardInput%2A> stream of a process. The `sort` command is a console application that reads and sorts text input.  \\n  \\n The example starts the `sort` command with redirected input. It then prompts the user for text, and passes the text to the `sort` process through the redirected <xref:System.Diagnostics.Process.StandardInput%2A> stream. The `sort` results are displayed to the user on the console.  \\n  \\n [!code-cs[Process_StandardInput#1](~/add/codesnippet/csharp/p-system.diagnostics.pro_43_1.cs)]\\n [!code-cpp[Process_StandardInput#1](~/add/codesnippet/cpp/p-system.diagnostics.pro_43_1.cpp)]\\n [!code-vb[Process_StandardInput#1](~/add/codesnippet/visualbasic/p-system.diagnostics.pro_43_1.vb)]\"\n  syntax:\n    content: public bool RedirectStandardInput { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if input should be read from &lt;xref:System.Diagnostics.Process.StandardInput%2A?displayProperty=fullName&gt;; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Diagnostics.ProcessStartInfo.RedirectStandardInput*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.ProcessStartInfo.RedirectStandardOutput\n  id: RedirectStandardOutput\n  parent: System.Diagnostics.ProcessStartInfo\n  langs:\n  - csharp\n  name: RedirectStandardOutput\n  nameWithType: ProcessStartInfo.RedirectStandardOutput\n  fullName: System.Diagnostics.ProcessStartInfo.RedirectStandardOutput\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Gets or sets a value that indicates whether the textual output of an application is written to the &lt;xref:System.Diagnostics.Process.StandardOutput%2A?displayProperty=fullName&gt; stream.\n  remarks: \"When a <xref:System.Diagnostics.Process> writes text to its standard stream, that text is typically displayed on the console. By setting RedirectStandardOutput to `true` to redirect the <xref:System.Diagnostics.Process.StandardOutput%2A> stream, you can manipulate or suppress the output of a process. For example, you can filter the text, format it differently, or write the output to both the console and a designated log file.  \\n  \\n> [!NOTE]\\n>  You must set <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> to `false` if you want to set RedirectStandardOutput to `true`. Otherwise, reading from the <xref:System.Diagnostics.Process.StandardOutput%2A> stream throws an exception.  \\n  \\n The redirected <xref:System.Diagnostics.Process.StandardOutput%2A> stream can be read synchronously or asynchronously. Methods such as <xref:System.IO.StreamReader.Read%2A>, <xref:System.IO.StreamReader.ReadLine%2A>, and <xref:System.IO.StreamReader.ReadToEnd%2A> perform synchronous read operations on the output stream of the process. These synchronous read operations do not complete until the associated <xref:System.Diagnostics.Process> writes to its <xref:System.Diagnostics.Process.StandardOutput%2A> stream, or closes the stream.  \\n  \\n In contrast, <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> starts asynchronous read operations on the <xref:System.Diagnostics.Process.StandardOutput%2A> stream. This method enables a designated event handler (see <xref:System.Diagnostics.Process.OutputDataReceived>) for the stream output and immediately returns to the caller, which can perform other work while the stream output is directed to the event handler.  \\n  \\n> [!NOTE]\\n>  The application that is processing the asynchronous output should call the <xref:System.Diagnostics.Process.WaitForExit%2A> method to ensure that the output buffer has been flushed.  \\n  \\n Synchronous read operations introduce a dependency between the caller reading from the <xref:System.Diagnostics.Process.StandardOutput%2A> stream and the child process writing to that stream. These dependencies can cause deadlock conditions. When the caller reads from the redirected stream of a child process, it is dependent on the child. The caller waits for the read operation until the child writes to the stream or closes the stream. When the child process writes enough data to fill its redirected stream, it is dependent on the parent. The child process waits for the next write operation until the parent reads from the full stream or closes the stream. The deadlock condition results when the caller and child process wait for each other to complete an operation, and neither can continue. You can avoid deadlocks by evaluating dependencies between the caller and child process.  \\n  \\n For example, the following C# code shows how to read from a redirected stream and wait for the child process to exit.  \\n  \\n```  \\nProcess p = new Process();  \\np.StartInfo.UseShellExecute = false;  \\np.StartInfo.RedirectStandardOutput = true;  \\np.StartInfo.FileName = \\\"Write500Lines.exe\\\";  \\np.Start();  \\n  \\n// To avoid deadlocks, always read the output stream first and then wait.  \\nstring output = p.StandardOutput.ReadToEnd();  \\np.WaitForExit();  \\n```  \\n  \\n The code example avoids a deadlock condition by calling `p.StandardOutput.ReadToEnd` before `p.WaitForExit`. A deadlock condition can result if the parent process calls `p.WaitForExit` before `p.StandardOutput.ReadToEnd` and the child process writes enough text to fill the redirected stream. The parent process would wait indefinitely for the child process to exit. The child process would wait indefinitely for the parent to read from the full <xref:System.Diagnostics.Process.StandardOutput%2A> stream.  \\n  \\n There is a similar issue when you read all text from both the standard output and standard error streams. For example, the following C# code performs a read operation on both streams.  \\n  \\n```  \\n// To avoid deadlocks, use asynchronous read operations on at least one of the streams.  \\n// Do not perform a synchronous read to the end of both redirected streams.  \\np.BeginOutputReadLine();  \\nstring error = p.StandardError.ReadToEnd();  \\np.WaitForExit();  \\n```  \\n  \\n The code example avoids the deadlock condition by performing asynchronous read operations on the <xref:System.Diagnostics.Process.StandardOutput%2A> stream. A deadlock condition results if the parent process calls `p.StandardOutput.ReadToEnd` followed by `p.StandardError.ReadToEnd` and the child process writes enough text to fill its error stream. The parent process would wait indefinitely for the child process to close its <xref:System.Diagnostics.Process.StandardOutput%2A> stream. The child process would wait indefinitely for the parent to read from the full <xref:System.Diagnostics.Process.StandardError%2A> stream.  \\n  \\n You can use asynchronous read operations to avoid these dependencies and their deadlock potential. Alternately, you can avoid the deadlock condition by creating two threads and reading the output of each stream on a separate thread.\"\n  example:\n  - >-\n    [!code-cpp[ProcessOneStream#1](~/add/codesnippet/cpp/p-system.diagnostics.pro_20_1.cpp)]\n     [!code-cs[ProcessOneStream#1](~/add/codesnippet/csharp/p-system.diagnostics.pro_20_1.cs)]\n     [!code-vb[ProcessOneStream#1](~/add/codesnippet/visualbasic/p-system.diagnostics.pro_20_1.vb)]\n  syntax:\n    content: public bool RedirectStandardOutput { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if output should be written to &lt;xref:System.Diagnostics.Process.StandardOutput%2A?displayProperty=fullName&gt;; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Diagnostics.ProcessStartInfo.RedirectStandardOutput*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.ProcessStartInfo.StandardErrorEncoding\n  id: StandardErrorEncoding\n  parent: System.Diagnostics.ProcessStartInfo\n  langs:\n  - csharp\n  name: StandardErrorEncoding\n  nameWithType: ProcessStartInfo.StandardErrorEncoding\n  fullName: System.Diagnostics.ProcessStartInfo.StandardErrorEncoding\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Gets or sets the preferred encoding for error output.\n  remarks: If the value of the StandardErrorEncoding property is `null`, the process uses the default standard error encoding for error output. The StandardErrorEncoding property must be set before the process is started. Setting this property does not guarantee that the process will use the specified encoding; the process will use only those encodings that it supports. The application should be tested to determine which encodings are supported.\n  syntax:\n    content: public System.Text.Encoding StandardErrorEncoding { get; set; }\n    return:\n      type: System.Text.Encoding\n      description: An object that represents the preferred encoding for error output. The default is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Diagnostics.ProcessStartInfo.StandardErrorEncoding*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.ProcessStartInfo.StandardOutputEncoding\n  id: StandardOutputEncoding\n  parent: System.Diagnostics.ProcessStartInfo\n  langs:\n  - csharp\n  name: StandardOutputEncoding\n  nameWithType: ProcessStartInfo.StandardOutputEncoding\n  fullName: System.Diagnostics.ProcessStartInfo.StandardOutputEncoding\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Gets or sets the preferred encoding for standard output.\n  remarks: If the value of the StandardOutputEncoding property is `null`, the process uses the default standard output encoding for the standard output. The StandardOutputEncoding property must be set before the process is started. Setting this property does not guarantee that the process will use the specified encoding. The application should be tested to determine which encodings the process supports.\n  syntax:\n    content: public System.Text.Encoding StandardOutputEncoding { get; set; }\n    return:\n      type: System.Text.Encoding\n      description: An object that represents the preferred encoding for standard output. The default is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Diagnostics.ProcessStartInfo.StandardOutputEncoding*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.ProcessStartInfo.UserName\n  id: UserName\n  parent: System.Diagnostics.ProcessStartInfo\n  langs:\n  - csharp\n  name: UserName\n  nameWithType: ProcessStartInfo.UserName\n  fullName: System.Diagnostics.ProcessStartInfo.UserName\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Gets or sets the user name to be used when starting the process.\n  remarks: \"> [!IMPORTANT]\\n>  The <xref:System.Diagnostics.ProcessStartInfo.WorkingDirectory%2A> property must be set if UserName and <xref:System.Diagnostics.ProcessStartInfo.Password%2A> are provided. If the property is not set, the default working directory is %SYSTEMROOT%\\\\system32.  \\n  \\n If the UserName property is not `null` or an empty string, the <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> property must be `false`, or an <xref:System.InvalidOperationException> will be thrown when the <xref:System.Diagnostics.Process.Start%28System.Diagnostics.ProcessStartInfo%29?displayProperty=fullName> method is called.\"\n  syntax:\n    content: public string UserName { get; set; }\n    return:\n      type: System.String\n      description: The user name to use when starting the process.\n  overload: System.Diagnostics.ProcessStartInfo.UserName*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.ProcessStartInfo.UseShellExecute\n  id: UseShellExecute\n  parent: System.Diagnostics.ProcessStartInfo\n  langs:\n  - csharp\n  name: UseShellExecute\n  nameWithType: ProcessStartInfo.UseShellExecute\n  fullName: System.Diagnostics.ProcessStartInfo.UseShellExecute\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Gets or sets a value indicating whether to use the operating system shell to start the process.\n  remarks: \"Setting this property to `false` enables you to redirect input, output, and error streams.  \\n  \\n> [!NOTE]\\n>  UseShellExecute must be `false` if the <xref:System.Diagnostics.ProcessStartInfo.UserName%2A> property is not `null` or an empty string, or an <xref:System.InvalidOperationException> will be thrown when the <xref:System.Diagnostics.Process.Start%28System.Diagnostics.ProcessStartInfo%29?displayProperty=fullName> method is called.  \\n  \\n When you use the operating system shell to start processes, you can start any document (which is any registered file type associated with an executable that has a default open action) and perform operations on the file, such as printing, by using the <xref:System.Diagnostics.Process> object. When UseShellExecute is `false`, you can start only executables by using the <xref:System.Diagnostics.Process> object.  \\n  \\n> [!NOTE]\\n>  UseShellExecute must be `true` if you set the <xref:System.Diagnostics.ProcessStartInfo.ErrorDialog%2A> property to `true`.  \\n  \\n The <xref:System.Diagnostics.ProcessStartInfo.WorkingDirectory%2A> property behaves differently depending on the value of the UseShellExecute property. When UseShellExecute is `true`, the <xref:System.Diagnostics.ProcessStartInfo.WorkingDirectory%2A> property specifies the location of the executable. If <xref:System.Diagnostics.ProcessStartInfo.WorkingDirectory%2A> is an empty string, it is assumed that the current directory contains the executable.  \\n  \\n When UseShellExecute is `false`, the <xref:System.Diagnostics.ProcessStartInfo.WorkingDirectory%2A> property is not used to find the executable. Instead, it is used only by the process that is started and has meaning only within the context of the new process. When UseShellExecute is `false`, the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property can be either a fully qualified path to the executable, or a simple executable name that the system will attempt to find within folders specified by the PATH environment variable.\"\n  example:\n  - >-\n    [!code-cpp[ProcessOneStream#1](~/add/codesnippet/cpp/p-system.diagnostics.pro_44_1.cpp)]\n     [!code-cs[ProcessOneStream#1](~/add/codesnippet/csharp/p-system.diagnostics.pro_44_1.cs)]\n     [!code-vb[ProcessOneStream#1](~/add/codesnippet/visualbasic/p-system.diagnostics.pro_44_1.vb)]\n  syntax:\n    content: public bool UseShellExecute { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the shell should be used when starting the process; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if the process should be created directly from the executable file. The default is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.\n  overload: System.Diagnostics.ProcessStartInfo.UseShellExecute*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.ProcessStartInfo.Verb\n  id: Verb\n  parent: System.Diagnostics.ProcessStartInfo\n  langs:\n  - csharp\n  name: Verb\n  nameWithType: ProcessStartInfo.Verb\n  fullName: System.Diagnostics.ProcessStartInfo.Verb\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Gets or sets the verb to use when opening the application or document specified by the <xref:System.Diagnostics.ProcessStartInfo.FileName*> property.\n  remarks: \"Each file name extension has its own set of verbs, which can be obtained by using the <xref:System.Diagnostics.ProcessStartInfo.Verbs%2A> property. For example, the \\\"`print`\\\" verb will print a document specified by using <xref:System.Diagnostics.ProcessStartInfo.FileName%2A>. The default verb can be specified by using an empty string (\\\"\\\"). Examples of verbs are \\\"Edit\\\", \\\"Open\\\", \\\"OpenAsReadOnly\\\", \\\"Print\\\", and \\\"Printto\\\". You should use only verbs that appear in the set of verbs returned by the <xref:System.Diagnostics.ProcessStartInfo.Verbs%2A> property.  \\n  \\n When you use the Verb property, you must include the file name extension when you set the value of the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property. The file name does not need to have an extension if you manually enter a value for the Verb property.\"\n  example:\n  - \"The following code example starts a new process by using the specified verb and file name. This code example is part of a larger example provided for the <xref:System.Diagnostics.ProcessStartInfo.Verbs%2A> property.  \\n  \\n [!code-vb[ProcessVerbs_Diagnostics#4](~/add/codesnippet/visualbasic/p-system.diagnostics.pro_9_1.vb)]\\n [!code-cs[ProcessVerbs_Diagnostics#4](~/add/codesnippet/csharp/p-system.diagnostics.pro_9_1.cs)]\"\n  syntax:\n    content: public string Verb { get; set; }\n    return:\n      type: System.String\n      description: The action to take with the file that the process opens. The default is an empty string (\"\"), which signifies no action.\n  overload: System.Diagnostics.ProcessStartInfo.Verb*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.ProcessStartInfo.Verbs\n  id: Verbs\n  parent: System.Diagnostics.ProcessStartInfo\n  langs:\n  - csharp\n  name: Verbs\n  nameWithType: ProcessStartInfo.Verbs\n  fullName: System.Diagnostics.ProcessStartInfo.Verbs\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Gets the set of verbs associated with the type of file specified by the <xref:System.Diagnostics.ProcessStartInfo.FileName*> property.\n  remarks: \"The Verbs property enables you to determine the verbs that can be used with the file specified by the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property. You can set the <xref:System.Diagnostics.ProcessStartInfo.Verb%2A> property to the value of any verb in the set. Examples of verbs are \\\"Edit\\\", \\\"Open\\\", \\\"OpenAsReadOnly\\\", \\\"Print\\\", and \\\"Printto\\\".  \\n  \\n When you use the Verbs property, you must include the file name extension when you set the value of the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property. The file name extension determines the set of possible verbs.\"\n  example:\n  - \"The following code example displays the defined verbs for the chosen file name. If the user selects one of the defined verbs, the example starts a new process using the selected verb and the input file name.  \\n  \\n [!code-vb[ProcessVerbs_Diagnostics#3](~/add/codesnippet/visualbasic/p-system.diagnostics.pro_7_1.vb)]\\n [!code-cs[ProcessVerbs_Diagnostics#3](~/add/codesnippet/csharp/p-system.diagnostics.pro_7_1.cs)]\"\n  syntax:\n    content: public string[] Verbs { get; }\n    return:\n      type: System.String[]\n      description: The actions that the system can apply to the file indicated by the <xref:System.Diagnostics.ProcessStartInfo.FileName*> property.\n  overload: System.Diagnostics.ProcessStartInfo.Verbs*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.ProcessStartInfo.WindowStyle\n  id: WindowStyle\n  parent: System.Diagnostics.ProcessStartInfo\n  langs:\n  - csharp\n  name: WindowStyle\n  nameWithType: ProcessStartInfo.WindowStyle\n  fullName: System.Diagnostics.ProcessStartInfo.WindowStyle\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Gets or sets the window state to use when the process is started.\n  remarks: ''\n  example:\n  - >-\n    [!code-vb[Process.Start_static#1](~/add/codesnippet/visualbasic/p-system.diagnostics.pro_42_1.vb)]\n     [!code-cs[Process.Start_static#1](~/add/codesnippet/csharp/p-system.diagnostics.pro_42_1.cs)]\n     [!code-cpp[Process.Start_static#1](~/add/codesnippet/cpp/p-system.diagnostics.pro_42_1.cpp)]\n  syntax:\n    content: public System.Diagnostics.ProcessWindowStyle WindowStyle { get; set; }\n    return:\n      type: System.Diagnostics.ProcessWindowStyle\n      description: One of the enumeration values that indicates whether the process is started in a window that is maximized, minimized, normal (neither maximized nor minimized), or not visible. The default is <xref uid=\"langword_csharp_Normal\" name=\"Normal\" href=\"\"></xref>.\n  overload: System.Diagnostics.ProcessStartInfo.WindowStyle*\n  exceptions:\n  - type: System.ComponentModel.InvalidEnumArgumentException\n    commentId: T:System.ComponentModel.InvalidEnumArgumentException\n    description: The window style is not one of the <xref href=\"System.Diagnostics.ProcessWindowStyle\"></xref> enumeration members.\n  platform:\n  - net462\n- uid: System.Diagnostics.ProcessStartInfo.WorkingDirectory\n  id: WorkingDirectory\n  parent: System.Diagnostics.ProcessStartInfo\n  langs:\n  - csharp\n  name: WorkingDirectory\n  nameWithType: ProcessStartInfo.WorkingDirectory\n  fullName: System.Diagnostics.ProcessStartInfo.WorkingDirectory\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: When the <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute*> property is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, gets or sets the working directory for the process to be started. When <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute*> is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, gets or sets the directory that contains the process to be started.\n  remarks: \"> [!IMPORTANT]\\n>  The WorkingDirectory property must be set if <xref:System.Diagnostics.ProcessStartInfo.UserName%2A> and <xref:System.Diagnostics.ProcessStartInfo.Password%2A> are provided. If the property is not set, the default working directory is %SYSTEMROOT%\\\\system32.  \\n  \\n If the directory is already part of the system path variable, you do not have to repeat the directory's location in this property.  \\n  \\n The WorkingDirectory property behaves differently when <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> is `true` than when <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> is `false`. When <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> is `true`, the WorkingDirectory property specifies the location of the executable. If WorkingDirectory is an empty string, the current directory is understood to contain the executable.  \\n  \\n> [!NOTE]\\n>  When <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> is `true`, the working directory of the application that starts the executable is also the working directory of the executable.  \\n  \\n When <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> is `false`, the WorkingDirectory property is not used to find the executable. Instead, its value applies to the process that is started and only has meaning within the context of the new process.\"\n  syntax:\n    content: public string WorkingDirectory { get; set; }\n    return:\n      type: System.String\n      description: When <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute*> is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, the fully qualified name of the directory that contains the process to be started. When the <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute*> property is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, the working directory for the process to be started. The default is an empty string (\"\").\n  overload: System.Diagnostics.ProcessStartInfo.WorkingDirectory*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ComponentModel.InvalidEnumArgumentException\n  parent: System.ComponentModel\n  isExternal: false\n  name: InvalidEnumArgumentException\n  nameWithType: InvalidEnumArgumentException\n  fullName: System.ComponentModel.InvalidEnumArgumentException\n- uid: System.Diagnostics.ProcessStartInfo.#ctor\n  parent: System.Diagnostics.ProcessStartInfo\n  isExternal: false\n  name: ProcessStartInfo()\n  nameWithType: ProcessStartInfo.ProcessStartInfo()\n  fullName: System.Diagnostics.ProcessStartInfo.ProcessStartInfo()\n- uid: System.Diagnostics.ProcessStartInfo.#ctor(System.String)\n  parent: System.Diagnostics.ProcessStartInfo\n  isExternal: false\n  name: ProcessStartInfo(String)\n  nameWithType: ProcessStartInfo.ProcessStartInfo(String)\n  fullName: System.Diagnostics.ProcessStartInfo.ProcessStartInfo(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Diagnostics.ProcessStartInfo.#ctor(System.String,System.String)\n  parent: System.Diagnostics.ProcessStartInfo\n  isExternal: false\n  name: ProcessStartInfo(String,String)\n  nameWithType: ProcessStartInfo.ProcessStartInfo(String,String)\n  fullName: System.Diagnostics.ProcessStartInfo.ProcessStartInfo(String,String)\n- uid: System.Diagnostics.ProcessStartInfo.Arguments\n  parent: System.Diagnostics.ProcessStartInfo\n  isExternal: false\n  name: Arguments\n  nameWithType: ProcessStartInfo.Arguments\n  fullName: System.Diagnostics.ProcessStartInfo.Arguments\n- uid: System.Diagnostics.ProcessStartInfo.CreateNoWindow\n  parent: System.Diagnostics.ProcessStartInfo\n  isExternal: false\n  name: CreateNoWindow\n  nameWithType: ProcessStartInfo.CreateNoWindow\n  fullName: System.Diagnostics.ProcessStartInfo.CreateNoWindow\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Diagnostics.ProcessStartInfo.Domain\n  parent: System.Diagnostics.ProcessStartInfo\n  isExternal: false\n  name: Domain\n  nameWithType: ProcessStartInfo.Domain\n  fullName: System.Diagnostics.ProcessStartInfo.Domain\n- uid: System.Diagnostics.ProcessStartInfo.Environment\n  parent: System.Diagnostics.ProcessStartInfo\n  isExternal: false\n  name: Environment\n  nameWithType: ProcessStartInfo.Environment\n  fullName: System.Diagnostics.ProcessStartInfo.Environment\n- uid: System.Collections.Generic.IDictionary{System.String,System.String}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IDictionary<String,String>\n  nameWithType: IDictionary<String,String>\n  fullName: System.Collections.Generic.IDictionary<System.String,System.String>\n  spec.csharp:\n  - uid: System.Collections.Generic.IDictionary`2\n    name: IDictionary\n    nameWithType: IDictionary\n    fullName: IDictionary<System.String,System.String>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: String\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: String\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Diagnostics.ProcessStartInfo.EnvironmentVariables\n  parent: System.Diagnostics.ProcessStartInfo\n  isExternal: false\n  name: EnvironmentVariables\n  nameWithType: ProcessStartInfo.EnvironmentVariables\n  fullName: System.Diagnostics.ProcessStartInfo.EnvironmentVariables\n- uid: System.Collections.Specialized.StringDictionary\n  parent: System.Collections.Specialized\n  isExternal: false\n  name: StringDictionary\n  nameWithType: StringDictionary\n  fullName: System.Collections.Specialized.StringDictionary\n- uid: System.Diagnostics.ProcessStartInfo.ErrorDialog\n  parent: System.Diagnostics.ProcessStartInfo\n  isExternal: false\n  name: ErrorDialog\n  nameWithType: ProcessStartInfo.ErrorDialog\n  fullName: System.Diagnostics.ProcessStartInfo.ErrorDialog\n- uid: System.Diagnostics.ProcessStartInfo.ErrorDialogParentHandle\n  parent: System.Diagnostics.ProcessStartInfo\n  isExternal: false\n  name: ErrorDialogParentHandle\n  nameWithType: ProcessStartInfo.ErrorDialogParentHandle\n  fullName: System.Diagnostics.ProcessStartInfo.ErrorDialogParentHandle\n- uid: System.IntPtr\n  parent: System\n  isExternal: true\n  name: IntPtr\n  nameWithType: IntPtr\n  fullName: System.IntPtr\n- uid: System.Diagnostics.ProcessStartInfo.FileName\n  parent: System.Diagnostics.ProcessStartInfo\n  isExternal: false\n  name: FileName\n  nameWithType: ProcessStartInfo.FileName\n  fullName: System.Diagnostics.ProcessStartInfo.FileName\n- uid: System.Diagnostics.ProcessStartInfo.LoadUserProfile\n  parent: System.Diagnostics.ProcessStartInfo\n  isExternal: false\n  name: LoadUserProfile\n  nameWithType: ProcessStartInfo.LoadUserProfile\n  fullName: System.Diagnostics.ProcessStartInfo.LoadUserProfile\n- uid: System.Diagnostics.ProcessStartInfo.Password\n  parent: System.Diagnostics.ProcessStartInfo\n  isExternal: false\n  name: Password\n  nameWithType: ProcessStartInfo.Password\n  fullName: System.Diagnostics.ProcessStartInfo.Password\n- uid: System.Security.SecureString\n  parent: System.Security\n  isExternal: false\n  name: SecureString\n  nameWithType: SecureString\n  fullName: System.Security.SecureString\n- uid: System.Diagnostics.ProcessStartInfo.PasswordInClearText\n  parent: System.Diagnostics.ProcessStartInfo\n  isExternal: false\n  name: PasswordInClearText\n  nameWithType: ProcessStartInfo.PasswordInClearText\n  fullName: System.Diagnostics.ProcessStartInfo.PasswordInClearText\n- uid: System.Diagnostics.ProcessStartInfo.RedirectStandardError\n  parent: System.Diagnostics.ProcessStartInfo\n  isExternal: false\n  name: RedirectStandardError\n  nameWithType: ProcessStartInfo.RedirectStandardError\n  fullName: System.Diagnostics.ProcessStartInfo.RedirectStandardError\n- uid: System.Diagnostics.ProcessStartInfo.RedirectStandardInput\n  parent: System.Diagnostics.ProcessStartInfo\n  isExternal: false\n  name: RedirectStandardInput\n  nameWithType: ProcessStartInfo.RedirectStandardInput\n  fullName: System.Diagnostics.ProcessStartInfo.RedirectStandardInput\n- uid: System.Diagnostics.ProcessStartInfo.RedirectStandardOutput\n  parent: System.Diagnostics.ProcessStartInfo\n  isExternal: false\n  name: RedirectStandardOutput\n  nameWithType: ProcessStartInfo.RedirectStandardOutput\n  fullName: System.Diagnostics.ProcessStartInfo.RedirectStandardOutput\n- uid: System.Diagnostics.ProcessStartInfo.StandardErrorEncoding\n  parent: System.Diagnostics.ProcessStartInfo\n  isExternal: false\n  name: StandardErrorEncoding\n  nameWithType: ProcessStartInfo.StandardErrorEncoding\n  fullName: System.Diagnostics.ProcessStartInfo.StandardErrorEncoding\n- uid: System.Text.Encoding\n  parent: System.Text\n  isExternal: true\n  name: Encoding\n  nameWithType: Encoding\n  fullName: System.Text.Encoding\n- uid: System.Diagnostics.ProcessStartInfo.StandardOutputEncoding\n  parent: System.Diagnostics.ProcessStartInfo\n  isExternal: false\n  name: StandardOutputEncoding\n  nameWithType: ProcessStartInfo.StandardOutputEncoding\n  fullName: System.Diagnostics.ProcessStartInfo.StandardOutputEncoding\n- uid: System.Diagnostics.ProcessStartInfo.UserName\n  parent: System.Diagnostics.ProcessStartInfo\n  isExternal: false\n  name: UserName\n  nameWithType: ProcessStartInfo.UserName\n  fullName: System.Diagnostics.ProcessStartInfo.UserName\n- uid: System.Diagnostics.ProcessStartInfo.UseShellExecute\n  parent: System.Diagnostics.ProcessStartInfo\n  isExternal: false\n  name: UseShellExecute\n  nameWithType: ProcessStartInfo.UseShellExecute\n  fullName: System.Diagnostics.ProcessStartInfo.UseShellExecute\n- uid: System.Diagnostics.ProcessStartInfo.Verb\n  parent: System.Diagnostics.ProcessStartInfo\n  isExternal: false\n  name: Verb\n  nameWithType: ProcessStartInfo.Verb\n  fullName: System.Diagnostics.ProcessStartInfo.Verb\n- uid: System.Diagnostics.ProcessStartInfo.Verbs\n  parent: System.Diagnostics.ProcessStartInfo\n  isExternal: false\n  name: Verbs\n  nameWithType: ProcessStartInfo.Verbs\n  fullName: System.Diagnostics.ProcessStartInfo.Verbs\n- uid: System.String[]\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String[]\n  spec.csharp:\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: String[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Diagnostics.ProcessStartInfo.WindowStyle\n  parent: System.Diagnostics.ProcessStartInfo\n  isExternal: false\n  name: WindowStyle\n  nameWithType: ProcessStartInfo.WindowStyle\n  fullName: System.Diagnostics.ProcessStartInfo.WindowStyle\n- uid: System.Diagnostics.ProcessWindowStyle\n  parent: System.Diagnostics\n  isExternal: false\n  name: ProcessWindowStyle\n  nameWithType: ProcessWindowStyle\n  fullName: System.Diagnostics.ProcessWindowStyle\n- uid: System.Diagnostics.ProcessStartInfo.WorkingDirectory\n  parent: System.Diagnostics.ProcessStartInfo\n  isExternal: false\n  name: WorkingDirectory\n  nameWithType: ProcessStartInfo.WorkingDirectory\n  fullName: System.Diagnostics.ProcessStartInfo.WorkingDirectory\n- uid: System.Diagnostics.ProcessStartInfo.#ctor*\n  parent: System.Diagnostics.ProcessStartInfo\n  isExternal: false\n  name: ProcessStartInfo\n  nameWithType: ProcessStartInfo.ProcessStartInfo\n- uid: System.Diagnostics.ProcessStartInfo.Arguments*\n  parent: System.Diagnostics.ProcessStartInfo\n  isExternal: false\n  name: Arguments\n  nameWithType: ProcessStartInfo.Arguments\n- uid: System.Diagnostics.ProcessStartInfo.CreateNoWindow*\n  parent: System.Diagnostics.ProcessStartInfo\n  isExternal: false\n  name: CreateNoWindow\n  nameWithType: ProcessStartInfo.CreateNoWindow\n- uid: System.Diagnostics.ProcessStartInfo.Domain*\n  parent: System.Diagnostics.ProcessStartInfo\n  isExternal: false\n  name: Domain\n  nameWithType: ProcessStartInfo.Domain\n- uid: System.Diagnostics.ProcessStartInfo.Environment*\n  parent: System.Diagnostics.ProcessStartInfo\n  isExternal: false\n  name: Environment\n  nameWithType: ProcessStartInfo.Environment\n- uid: System.Diagnostics.ProcessStartInfo.EnvironmentVariables*\n  parent: System.Diagnostics.ProcessStartInfo\n  isExternal: false\n  name: EnvironmentVariables\n  nameWithType: ProcessStartInfo.EnvironmentVariables\n- uid: System.Diagnostics.ProcessStartInfo.ErrorDialog*\n  parent: System.Diagnostics.ProcessStartInfo\n  isExternal: false\n  name: ErrorDialog\n  nameWithType: ProcessStartInfo.ErrorDialog\n- uid: System.Diagnostics.ProcessStartInfo.ErrorDialogParentHandle*\n  parent: System.Diagnostics.ProcessStartInfo\n  isExternal: false\n  name: ErrorDialogParentHandle\n  nameWithType: ProcessStartInfo.ErrorDialogParentHandle\n- uid: System.Diagnostics.ProcessStartInfo.FileName*\n  parent: System.Diagnostics.ProcessStartInfo\n  isExternal: false\n  name: FileName\n  nameWithType: ProcessStartInfo.FileName\n- uid: System.Diagnostics.ProcessStartInfo.LoadUserProfile*\n  parent: System.Diagnostics.ProcessStartInfo\n  isExternal: false\n  name: LoadUserProfile\n  nameWithType: ProcessStartInfo.LoadUserProfile\n- uid: System.Diagnostics.ProcessStartInfo.Password*\n  parent: System.Diagnostics.ProcessStartInfo\n  isExternal: false\n  name: Password\n  nameWithType: ProcessStartInfo.Password\n- uid: System.Diagnostics.ProcessStartInfo.PasswordInClearText*\n  parent: System.Diagnostics.ProcessStartInfo\n  isExternal: false\n  name: PasswordInClearText\n  nameWithType: ProcessStartInfo.PasswordInClearText\n- uid: System.Diagnostics.ProcessStartInfo.RedirectStandardError*\n  parent: System.Diagnostics.ProcessStartInfo\n  isExternal: false\n  name: RedirectStandardError\n  nameWithType: ProcessStartInfo.RedirectStandardError\n- uid: System.Diagnostics.ProcessStartInfo.RedirectStandardInput*\n  parent: System.Diagnostics.ProcessStartInfo\n  isExternal: false\n  name: RedirectStandardInput\n  nameWithType: ProcessStartInfo.RedirectStandardInput\n- uid: System.Diagnostics.ProcessStartInfo.RedirectStandardOutput*\n  parent: System.Diagnostics.ProcessStartInfo\n  isExternal: false\n  name: RedirectStandardOutput\n  nameWithType: ProcessStartInfo.RedirectStandardOutput\n- uid: System.Diagnostics.ProcessStartInfo.StandardErrorEncoding*\n  parent: System.Diagnostics.ProcessStartInfo\n  isExternal: false\n  name: StandardErrorEncoding\n  nameWithType: ProcessStartInfo.StandardErrorEncoding\n- uid: System.Diagnostics.ProcessStartInfo.StandardOutputEncoding*\n  parent: System.Diagnostics.ProcessStartInfo\n  isExternal: false\n  name: StandardOutputEncoding\n  nameWithType: ProcessStartInfo.StandardOutputEncoding\n- uid: System.Diagnostics.ProcessStartInfo.UserName*\n  parent: System.Diagnostics.ProcessStartInfo\n  isExternal: false\n  name: UserName\n  nameWithType: ProcessStartInfo.UserName\n- uid: System.Diagnostics.ProcessStartInfo.UseShellExecute*\n  parent: System.Diagnostics.ProcessStartInfo\n  isExternal: false\n  name: UseShellExecute\n  nameWithType: ProcessStartInfo.UseShellExecute\n- uid: System.Diagnostics.ProcessStartInfo.Verb*\n  parent: System.Diagnostics.ProcessStartInfo\n  isExternal: false\n  name: Verb\n  nameWithType: ProcessStartInfo.Verb\n- uid: System.Diagnostics.ProcessStartInfo.Verbs*\n  parent: System.Diagnostics.ProcessStartInfo\n  isExternal: false\n  name: Verbs\n  nameWithType: ProcessStartInfo.Verbs\n- uid: System.Diagnostics.ProcessStartInfo.WindowStyle*\n  parent: System.Diagnostics.ProcessStartInfo\n  isExternal: false\n  name: WindowStyle\n  nameWithType: ProcessStartInfo.WindowStyle\n- uid: System.Diagnostics.ProcessStartInfo.WorkingDirectory*\n  parent: System.Diagnostics.ProcessStartInfo\n  isExternal: false\n  name: WorkingDirectory\n  nameWithType: ProcessStartInfo.WorkingDirectory\n"}