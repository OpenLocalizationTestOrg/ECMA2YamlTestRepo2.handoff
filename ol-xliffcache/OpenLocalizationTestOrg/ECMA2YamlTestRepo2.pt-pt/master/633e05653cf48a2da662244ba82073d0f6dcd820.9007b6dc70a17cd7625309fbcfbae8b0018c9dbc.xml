{"nodes":[{"pos":[1103,1115],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[1153,1165],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[2518,2530],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[3445,3457],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[4112,4124],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[4824,4836],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[4892,4904],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[5582,5594],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[5653,5665],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[6226,6238],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[7007,7019],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[7100,7112],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[7682,7694],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[8399,8411],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: Microsoft.VisualC.StlClr.GenericPair`2\n  id: GenericPair`2\n  children:\n  - Microsoft.VisualC.StlClr.GenericPair`2.#ctor\n  - Microsoft.VisualC.StlClr.GenericPair`2.#ctor(Microsoft.VisualC.StlClr.GenericPair)\n  - Microsoft.VisualC.StlClr.GenericPair`2.#ctor(System.Collections.Generic.KeyValuePair{`0,`1}@)\n  - Microsoft.VisualC.StlClr.GenericPair`2.#ctor(`0)\n  - Microsoft.VisualC.StlClr.GenericPair`2.#ctor(`0,`1)\n  - Microsoft.VisualC.StlClr.GenericPair`2.Equals(System.Object)\n  - Microsoft.VisualC.StlClr.GenericPair`2.first\n  - Microsoft.VisualC.StlClr.GenericPair`2.op_Assign(Microsoft.VisualC.StlClr.GenericPair)\n  - Microsoft.VisualC.StlClr.GenericPair`2.second\n  - Microsoft.VisualC.StlClr.GenericPair`2.swap(Microsoft.VisualC.StlClr.GenericPair)\n  langs:\n  - csharp\n  name: GenericPair<TValue1,TValue2>\n  nameWithType: GenericPair<TValue1,TValue2>\n  fullName: Microsoft.VisualC.StlClr.GenericPair<TValue1,TValue2>\n  type: Class\n  syntax:\n    content: public class GenericPair<TValue1,TValue2>\n    typeParameters:\n    - id: TValue1\n      description: To be added.\n    - id: TValue2\n      description: To be added.\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.GenericPair`2.#ctor\n  id: '#ctor'\n  parent: Microsoft.VisualC.StlClr.GenericPair`2\n  langs:\n  - csharp\n  name: GenericPair()\n  nameWithType: GenericPair<TValue1,TValue2>.GenericPair()\n  fullName: Microsoft.VisualC.StlClr.GenericPair<TValue1,TValue2>.GenericPair()\n  type: Constructor\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public GenericPair ();\n    parameters: []\n  overload: Microsoft.VisualC.StlClr.GenericPair`2.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.GenericPair`2.#ctor(Microsoft.VisualC.StlClr.GenericPair)\n  id: '#ctor(Microsoft.VisualC.StlClr.GenericPair)'\n  parent: Microsoft.VisualC.StlClr.GenericPair`2\n  langs:\n  - csharp\n  name: GenericPair(GenericPair)\n  nameWithType: GenericPair<TValue1,TValue2>.GenericPair(GenericPair)\n  fullName: Microsoft.VisualC.StlClr.GenericPair<TValue1,TValue2>.GenericPair(GenericPair)\n  type: Constructor\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public GenericPair (Microsoft.VisualC.StlClr.GenericPair _Right);\n    parameters:\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.GenericPair\n      description: To be added.\n  overload: Microsoft.VisualC.StlClr.GenericPair`2.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.GenericPair`2.#ctor(System.Collections.Generic.KeyValuePair{`0,`1}@)\n  id: '#ctor(System.Collections.Generic.KeyValuePair{`0,`1}@)'\n  parent: Microsoft.VisualC.StlClr.GenericPair`2\n  langs:\n  - csharp\n  name: GenericPair(KeyValuePair<TValue1,TValue2>)\n  nameWithType: GenericPair<TValue1,TValue2>.GenericPair(KeyValuePair<TValue1,TValue2>)\n  fullName: Microsoft.VisualC.StlClr.GenericPair<TValue1,TValue2>.GenericPair(KeyValuePair<TValue1,TValue2>)\n  type: Constructor\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public GenericPair (ref System.Collections.Generic.KeyValuePair<TValue1,TValue2> _Right);\n    parameters:\n    - id: _Right\n      type: System.Collections.Generic.KeyValuePair{TValue1,TValue2}\n      description: To be added.\n  overload: Microsoft.VisualC.StlClr.GenericPair`2.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.GenericPair`2.#ctor(`0)\n  id: '#ctor(`0)'\n  parent: Microsoft.VisualC.StlClr.GenericPair`2\n  langs:\n  - csharp\n  name: GenericPair(TValue1)\n  nameWithType: GenericPair<TValue1,TValue2>.GenericPair(TValue1)\n  fullName: Microsoft.VisualC.StlClr.GenericPair<TValue1,TValue2>.GenericPair(TValue1)\n  type: Constructor\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public GenericPair (TValue1 _Val1);\n    parameters:\n    - id: _Val1\n      type: TValue1\n      description: To be added.\n  overload: Microsoft.VisualC.StlClr.GenericPair`2.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.GenericPair`2.#ctor(`0,`1)\n  id: '#ctor(`0,`1)'\n  parent: Microsoft.VisualC.StlClr.GenericPair`2\n  langs:\n  - csharp\n  name: GenericPair(TValue1,TValue2)\n  nameWithType: GenericPair<TValue1,TValue2>.GenericPair(TValue1,TValue2)\n  fullName: Microsoft.VisualC.StlClr.GenericPair<TValue1,TValue2>.GenericPair(TValue1,TValue2)\n  type: Constructor\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public GenericPair (TValue1 _Val1, TValue2 _Val2);\n    parameters:\n    - id: _Val1\n      type: TValue1\n      description: To be added.\n    - id: _Val2\n      type: TValue2\n      description: To be added.\n  overload: Microsoft.VisualC.StlClr.GenericPair`2.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.GenericPair`2.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: Microsoft.VisualC.StlClr.GenericPair`2\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: GenericPair<TValue1,TValue2>.Equals(Object)\n  fullName: Microsoft.VisualC.StlClr.GenericPair<TValue1,TValue2>.Equals(Object)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public override bool Equals (object _Right_arg);\n    parameters:\n    - id: _Right_arg\n      type: System.Object\n      description: To be added.\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: Microsoft.VisualC.StlClr.GenericPair`2.Equals*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.GenericPair`2.first\n  id: first\n  parent: Microsoft.VisualC.StlClr.GenericPair`2\n  langs:\n  - csharp\n  name: first\n  nameWithType: GenericPair<TValue1,TValue2>.first\n  fullName: Microsoft.VisualC.StlClr.GenericPair<TValue1,TValue2>.first\n  type: Field\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public TValue1 first;\n    return:\n      type: TValue1\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.GenericPair`2.op_Assign(Microsoft.VisualC.StlClr.GenericPair)\n  id: op_Assign(Microsoft.VisualC.StlClr.GenericPair)\n  parent: Microsoft.VisualC.StlClr.GenericPair`2\n  langs:\n  - csharp\n  name: op_Assign(GenericPair)\n  nameWithType: GenericPair<TValue1,TValue2>.op_Assign(GenericPair)\n  fullName: Microsoft.VisualC.StlClr.GenericPair<TValue1,TValue2>.op_Assign(GenericPair)\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public Microsoft.VisualC.StlClr.GenericPair op_Assign (Microsoft.VisualC.StlClr.GenericPair _Right);\n    parameters:\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.GenericPair\n      description: To be added.\n    return:\n      type: Microsoft.VisualC.StlClr.GenericPair\n      description: To be added.\n  overload: Microsoft.VisualC.StlClr.GenericPair`2.op_Assign*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.GenericPair`2.second\n  id: second\n  parent: Microsoft.VisualC.StlClr.GenericPair`2\n  langs:\n  - csharp\n  name: second\n  nameWithType: GenericPair<TValue1,TValue2>.second\n  fullName: Microsoft.VisualC.StlClr.GenericPair<TValue1,TValue2>.second\n  type: Field\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public TValue2 second;\n    return:\n      type: TValue2\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualC.StlClr.GenericPair`2.swap(Microsoft.VisualC.StlClr.GenericPair)\n  id: swap(Microsoft.VisualC.StlClr.GenericPair)\n  parent: Microsoft.VisualC.StlClr.GenericPair`2\n  langs:\n  - csharp\n  name: swap(GenericPair)\n  nameWithType: GenericPair<TValue1,TValue2>.swap(GenericPair)\n  fullName: Microsoft.VisualC.StlClr.GenericPair<TValue1,TValue2>.swap(GenericPair)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void swap (Microsoft.VisualC.StlClr.GenericPair _Right);\n    parameters:\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.GenericPair\n      description: To be added.\n  overload: Microsoft.VisualC.StlClr.GenericPair`2.swap*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: Microsoft.VisualC.StlClr.GenericPair`2.#ctor\n  parent: Microsoft.VisualC.StlClr.GenericPair`2\n  isExternal: false\n  name: GenericPair()\n  nameWithType: GenericPair<TValue1,TValue2>.GenericPair()\n  fullName: Microsoft.VisualC.StlClr.GenericPair<TValue1,TValue2>.GenericPair()\n- uid: Microsoft.VisualC.StlClr.GenericPair`2.#ctor(Microsoft.VisualC.StlClr.GenericPair)\n  parent: Microsoft.VisualC.StlClr.GenericPair`2\n  isExternal: false\n  name: GenericPair(GenericPair)\n  nameWithType: GenericPair<TValue1,TValue2>.GenericPair(GenericPair)\n  fullName: Microsoft.VisualC.StlClr.GenericPair<TValue1,TValue2>.GenericPair(GenericPair)\n- uid: Microsoft.VisualC.StlClr.GenericPair\n  parent: Microsoft.VisualC.StlClr\n  isExternal: true\n  name: GenericPair\n  nameWithType: GenericPair\n  fullName: Microsoft.VisualC.StlClr.GenericPair\n- uid: Microsoft.VisualC.StlClr.GenericPair`2.#ctor(System.Collections.Generic.KeyValuePair{`0,`1}@)\n  parent: Microsoft.VisualC.StlClr.GenericPair`2\n  isExternal: false\n  name: GenericPair(KeyValuePair<TValue1,TValue2>)\n  nameWithType: GenericPair<TValue1,TValue2>.GenericPair(KeyValuePair<TValue1,TValue2>)\n  fullName: Microsoft.VisualC.StlClr.GenericPair<TValue1,TValue2>.GenericPair(KeyValuePair<TValue1,TValue2>)\n- uid: System.Collections.Generic.KeyValuePair{TValue1,TValue2}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: KeyValuePair<TValue1,TValue2>\n  nameWithType: KeyValuePair<TValue1,TValue2>\n  fullName: System.Collections.Generic.KeyValuePair<TValue1,TValue2>\n  spec.csharp:\n  - uid: System.Collections.Generic.KeyValuePair`2\n    name: KeyValuePair\n    nameWithType: KeyValuePair\n    fullName: KeyValuePair<TValue1,TValue2>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TValue1\n    name: TValue1\n    nameWithType: TValue1\n    fullName: TValue1\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TValue2\n    name: TValue2\n    nameWithType: TValue2\n    fullName: TValue2\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: Microsoft.VisualC.StlClr.GenericPair`2.#ctor(`0)\n  parent: Microsoft.VisualC.StlClr.GenericPair`2\n  isExternal: false\n  name: GenericPair(TValue1)\n  nameWithType: GenericPair<TValue1,TValue2>.GenericPair(TValue1)\n  fullName: Microsoft.VisualC.StlClr.GenericPair<TValue1,TValue2>.GenericPair(TValue1)\n- uid: TValue1\n  isExternal: true\n  name: TValue1\n  nameWithType: TValue1\n  fullName: TValue1\n- uid: Microsoft.VisualC.StlClr.GenericPair`2.#ctor(`0,`1)\n  parent: Microsoft.VisualC.StlClr.GenericPair`2\n  isExternal: false\n  name: GenericPair(TValue1,TValue2)\n  nameWithType: GenericPair<TValue1,TValue2>.GenericPair(TValue1,TValue2)\n  fullName: Microsoft.VisualC.StlClr.GenericPair<TValue1,TValue2>.GenericPair(TValue1,TValue2)\n- uid: TValue2\n  isExternal: true\n  name: TValue2\n  nameWithType: TValue2\n  fullName: TValue2\n- uid: Microsoft.VisualC.StlClr.GenericPair`2.Equals(System.Object)\n  parent: Microsoft.VisualC.StlClr.GenericPair`2\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: GenericPair<TValue1,TValue2>.Equals(Object)\n  fullName: Microsoft.VisualC.StlClr.GenericPair<TValue1,TValue2>.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: Microsoft.VisualC.StlClr.GenericPair`2.first\n  parent: Microsoft.VisualC.StlClr.GenericPair`2\n  isExternal: false\n  name: first\n  nameWithType: GenericPair<TValue1,TValue2>.first\n  fullName: Microsoft.VisualC.StlClr.GenericPair<TValue1,TValue2>.first\n- uid: Microsoft.VisualC.StlClr.GenericPair`2.op_Assign(Microsoft.VisualC.StlClr.GenericPair)\n  parent: Microsoft.VisualC.StlClr.GenericPair`2\n  isExternal: false\n  name: op_Assign(GenericPair)\n  nameWithType: GenericPair<TValue1,TValue2>.op_Assign(GenericPair)\n  fullName: Microsoft.VisualC.StlClr.GenericPair<TValue1,TValue2>.op_Assign(GenericPair)\n- uid: Microsoft.VisualC.StlClr.GenericPair`2.second\n  parent: Microsoft.VisualC.StlClr.GenericPair`2\n  isExternal: false\n  name: second\n  nameWithType: GenericPair<TValue1,TValue2>.second\n  fullName: Microsoft.VisualC.StlClr.GenericPair<TValue1,TValue2>.second\n- uid: Microsoft.VisualC.StlClr.GenericPair`2.swap(Microsoft.VisualC.StlClr.GenericPair)\n  parent: Microsoft.VisualC.StlClr.GenericPair`2\n  isExternal: false\n  name: swap(GenericPair)\n  nameWithType: GenericPair<TValue1,TValue2>.swap(GenericPair)\n  fullName: Microsoft.VisualC.StlClr.GenericPair<TValue1,TValue2>.swap(GenericPair)\n- uid: Microsoft.VisualC.StlClr.GenericPair`2.#ctor*\n  parent: Microsoft.VisualC.StlClr.GenericPair`2\n  isExternal: false\n  name: GenericPair<TValue1,TValue2>\n  nameWithType: GenericPair<TValue1,TValue2>.GenericPair<TValue1,TValue2>\n- uid: Microsoft.VisualC.StlClr.GenericPair`2.Equals*\n  parent: Microsoft.VisualC.StlClr.GenericPair`2\n  isExternal: false\n  name: Equals\n  nameWithType: GenericPair<TValue1,TValue2>.Equals\n- uid: Microsoft.VisualC.StlClr.GenericPair`2.op_Assign*\n  parent: Microsoft.VisualC.StlClr.GenericPair`2\n  isExternal: false\n  name: op_Assign\n  nameWithType: GenericPair<TValue1,TValue2>.op_Assign\n- uid: Microsoft.VisualC.StlClr.GenericPair`2.swap*\n  parent: Microsoft.VisualC.StlClr.GenericPair`2\n  isExternal: false\n  name: swap\n  nameWithType: GenericPair<TValue1,TValue2>.swap\n"}