{"nodes":[{"pos":[681,762],"content":"Specifies the execution states of a <bpt id=\"p1\">&lt;xref href=\"System.Threading.Thread\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Specifies the execution states of a <xref href=\"System.Threading.Thread\"></xref>."},{"pos":[775,4310],"content":"The ThreadState enumeration is of interest only in a few debugging scenarios. Your code should never use the thread state to synchronize the activities of threads.       ThreadState defines a set of all possible execution states for threads. Once a thread is created, it is in at least one of the states until it terminates. Threads created within the common language runtime are initially in the `Unstarted` state, while external threads that come into the runtime are already in the `Running` state. An `Unstarted` thread is transitioned into the `Running` state by calling <xref:System.Threading.Thread.Start%2A>. Not all combinations of `ThreadState` values are valid; for example, a thread cannot be in both the `Aborted` and `Unstarted` states.      > [!IMPORTANT] >  There are two thread state enumerations,ThreadState and <xref:System.Diagnostics.ThreadState?displayProperty=fullName>.       The following table shows the actions that cause a change of state.      |Action|ThreadState|   |------------|-----------------|   |A thread is created within the common language runtime.|Unstarted|   |Another thread calls the <xref:System.Threading.Thread.Start%2A?displayProperty=fullName> method on the new thread, and the call returns.<br /><br /> The <xref:System.Threading.Thread.Start%2A> method does not return until the new thread has started running. There is no way to know at what point the new thread will start running, during the call to <xref:System.Threading.Thread.Start%2A>.|Running|   |The thread calls <xref:System.Threading.Thread.Sleep%2A>|WaitSleepJoin|   |The thread calls <xref:System.Threading.Monitor.Wait%2A> on another object.|WaitSleepJoin|   |The thread calls <xref:System.Threading.Thread.Join%2A> on another thread.|WaitSleepJoin|   |Another thread calls <xref:System.Threading.Thread.Interrupt%2A>|Running|   |Another thread calls <xref:System.Threading.Thread.Suspend%2A>|SuspendRequested|   |The thread responds to a <xref:System.Threading.Thread.Suspend%2A> request.|Suspended|   |Another thread calls <xref:System.Threading.Thread.Resume%2A>|Running|   |Another thread calls <xref:System.Threading.Thread.Abort%2A>|AbortRequested|   |The thread responds to a <xref:System.Threading.Thread.Abort%2A> request.|Stopped|   |A thread is terminated.|Stopped|       In addition to the states noted above, there is also the `Background` state, which indicates whether the thread is running in the background or foreground.       A thread can be in more than one state at a given time. For example, if a thread is blocked on a call to <xref:System.Threading.Monitor.Wait%2A>, and another thread calls <xref:System.Threading.Thread.Abort%2A> on the blocked thread, the blocked thread will be in both the `WaitSleepJoin` and the `AbortRequested` states at the same time. In this case, as soon as the thread returns from the call to <xref:System.Threading.Monitor.Wait%2A> or is interrupted, it will receive the <xref:System.Threading.ThreadAbortException> to begin aborting.       The <xref:System.Threading.Thread.ThreadState%2A?displayProperty=fullName> property of a thread provides the current state of a thread. Applications must use a bitmask to determine whether a thread is running. Since the value for `Running` is zero (0), test whether a thread is running by using C# code such as `(myThread.ThreadState & (ThreadState.Stopped | ThreadState.Unstarted)) == 0` or Visual Basic code such as `(myThread.ThreadState And (ThreadState.Stopped Or ThreadState.Unstarted)) = 0`.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The ThreadState enumeration is of interest only in a few debugging scenarios. Your code should never use the thread state to synchronize the activities of threads.       ThreadState defines a set of all possible execution states for threads. Once a thread is created, it is in at least one of the states until it terminates. Threads created within the common language runtime are initially in the `Unstarted` state, while external threads that come into the runtime are already in the `Running` state. An `Unstarted` thread is transitioned into the `Running` state by calling <xref:System.Threading.Thread.Start%2A>. Not all combinations of `ThreadState` values are valid; for example, a thread cannot be in both the `Aborted` and `Unstarted` states.      > [!IMPORTANT] >  There are two thread state enumerations,ThreadState and <xref:System.Diagnostics.ThreadState?displayProperty=fullName>.       The following table shows the actions that cause a change of state.      |Action|ThreadState|   |------------|-----------------|   |A thread is created within the common language runtime.|Unstarted|   |Another thread calls the <xref:System.Threading.Thread.Start%2A?displayProperty=fullName> method on the new thread, and the call returns.","pos":[0,1239],"nodes":[{"content":"The ThreadState enumeration is of interest only in a few debugging scenarios.","pos":[0,77]},{"content":"Your code should never use the thread state to synchronize the activities of threads.","pos":[78,163]},{"content":"ThreadState defines a set of all possible execution states for threads.","pos":[170,241]},{"content":"Once a thread is created, it is in at least one of the states until it terminates.","pos":[242,324]},{"content":"Threads created within the common language runtime are initially in the <ph id=\"ph1\">`Unstarted`</ph> state, while external threads that come into the runtime are already in the <ph id=\"ph2\">`Running`</ph> state.","pos":[325,501],"source":" Threads created within the common language runtime are initially in the `Unstarted` state, while external threads that come into the runtime are already in the `Running` state."},{"content":"An <ph id=\"ph1\">`Unstarted`</ph> thread is transitioned into the <ph id=\"ph2\">`Running`</ph> state by calling &lt;xref:System.Threading.Thread.Start%2A&gt;.","pos":[502,616],"source":" An `Unstarted` thread is transitioned into the `Running` state by calling <xref:System.Threading.Thread.Start%2A>."},{"content":"Not all combinations of <ph id=\"ph1\">`ThreadState`</ph> values are valid; for example, a thread cannot be in both the <ph id=\"ph2\">`Aborted`</ph> and <ph id=\"ph3\">`Unstarted`</ph> states.","pos":[617,750],"source":" Not all combinations of `ThreadState` values are valid; for example, a thread cannot be in both the `Aborted` and `Unstarted` states."},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  There are two thread state enumerations,ThreadState and &lt;xref:System.Diagnostics.ThreadState?displayProperty=fullName&gt;.","pos":[756,893],"source":"      > [!IMPORTANT] >  There are two thread state enumerations,ThreadState and <xref:System.Diagnostics.ThreadState?displayProperty=fullName>."},{"content":"The following table shows the actions that cause a change of state.","pos":[900,967]},{"content":"|Action|ThreadState|   |------------|-----------------|   |A thread is created within the common language runtime.|Unstarted|   |Another thread calls the &lt;xref:System.Threading.Thread.Start%2A?displayProperty=fullName&gt; method on the new thread, and the call returns.","pos":[973,1239],"source":"      |Action|ThreadState|   |------------|-----------------|   |A thread is created within the common language runtime.|Unstarted|   |Another thread calls the <xref:System.Threading.Thread.Start%2A?displayProperty=fullName> method on the new thread, and the call returns."}]},{"content":" The <xref:System.Threading.Thread.Start%2A> method does not return until the new thread has started running. There is no way to know at what point the new thread will start running, during the call to <xref:System.Threading.Thread.Start%2A>.|Running|   |The thread calls <xref:System.Threading.Thread.Sleep%2A>|WaitSleepJoin|   |The thread calls <xref:System.Threading.Monitor.Wait%2A> on another object.|WaitSleepJoin|   |The thread calls <xref:System.Threading.Thread.Join%2A> on another thread.|WaitSleepJoin|   |Another thread calls <xref:System.Threading.Thread.Interrupt%2A>|Running|   |Another thread calls <xref:System.Threading.Thread.Suspend%2A>|SuspendRequested|   |The thread responds to a <xref:System.Threading.Thread.Suspend%2A> request.|Suspended|   |Another thread calls <xref:System.Threading.Thread.Resume%2A>|Running|   |Another thread calls <xref:System.Threading.Thread.Abort%2A>|AbortRequested|   |The thread responds to a <xref:System.Threading.Thread.Abort%2A> request.|Stopped|   |A thread is terminated.|Stopped|       In addition to the states noted above, there is also the `Background` state, which indicates whether the thread is running in the background or foreground.       A thread can be in more than one state at a given time. For example, if a thread is blocked on a call to <xref:System.Threading.Monitor.Wait%2A>, and another thread calls <xref:System.Threading.Thread.Abort%2A> on the blocked thread, the blocked thread will be in both the `WaitSleepJoin` and the `AbortRequested` states at the same time. In this case, as soon as the thread returns from the call to <xref:System.Threading.Monitor.Wait%2A> or is interrupted, it will receive the <xref:System.Threading.ThreadAbortException> to begin aborting.       The <xref:System.Threading.Thread.ThreadState%2A?displayProperty=fullName> property of a thread provides the current state of a thread. Applications must use a bitmask to determine whether a thread is running. Since the value for `Running` is zero (0), test whether a thread is running by using C# code such as `(myThread.ThreadState & (ThreadState.Stopped | ThreadState.Unstarted)) == 0` or Visual Basic code such as `(myThread.ThreadState And (ThreadState.Stopped Or ThreadState.Unstarted)) = 0`.","pos":[1251,3507],"nodes":[{"content":"The &lt;xref:System.Threading.Thread.Start%2A&gt; method does not return until the new thread has started running.","pos":[1,109],"source":" The <xref:System.Threading.Thread.Start%2A> method does not return until the new thread has started running."},{"content":"There is no way to know at what point the new thread will start running, during the call to &lt;xref:System.Threading.Thread.Start%2A&gt;.|Running|   |The thread calls &lt;xref:System.Threading.Thread.Sleep%2A&gt;|WaitSleepJoin|   |The thread calls &lt;xref:System.Threading.Monitor.Wait%2A&gt; on another object.|WaitSleepJoin|   |The thread calls &lt;xref:System.Threading.Thread.Join%2A&gt; on another thread.|WaitSleepJoin|   |Another thread calls &lt;xref:System.Threading.Thread.Interrupt%2A&gt;|Running|   |Another thread calls &lt;xref:System.Threading.Thread.Suspend%2A&gt;|SuspendRequested|   |The thread responds to a &lt;xref:System.Threading.Thread.Suspend%2A&gt; request.|Suspended|   |Another thread calls &lt;xref:System.Threading.Thread.Resume%2A&gt;|Running|   |Another thread calls &lt;xref:System.Threading.Thread.Abort%2A&gt;|AbortRequested|   |The thread responds to a &lt;xref:System.Threading.Thread.Abort%2A&gt; request.|Stopped|   |A thread is terminated.|Stopped|       In addition to the states noted above, there is also the <ph id=\"ph1\">`Background`</ph> state, which indicates whether the thread is running in the background or foreground.","pos":[110,1202],"source":" There is no way to know at what point the new thread will start running, during the call to <xref:System.Threading.Thread.Start%2A>.|Running|   |The thread calls <xref:System.Threading.Thread.Sleep%2A>|WaitSleepJoin|   |The thread calls <xref:System.Threading.Monitor.Wait%2A> on another object.|WaitSleepJoin|   |The thread calls <xref:System.Threading.Thread.Join%2A> on another thread.|WaitSleepJoin|   |Another thread calls <xref:System.Threading.Thread.Interrupt%2A>|Running|   |Another thread calls <xref:System.Threading.Thread.Suspend%2A>|SuspendRequested|   |The thread responds to a <xref:System.Threading.Thread.Suspend%2A> request.|Suspended|   |Another thread calls <xref:System.Threading.Thread.Resume%2A>|Running|   |Another thread calls <xref:System.Threading.Thread.Abort%2A>|AbortRequested|   |The thread responds to a <xref:System.Threading.Thread.Abort%2A> request.|Stopped|   |A thread is terminated.|Stopped|       In addition to the states noted above, there is also the `Background` state, which indicates whether the thread is running in the background or foreground."},{"content":"A thread can be in more than one state at a given time.","pos":[1209,1264]},{"content":"For example, if a thread is blocked on a call to &lt;xref:System.Threading.Monitor.Wait%2A&gt;, and another thread calls &lt;xref:System.Threading.Thread.Abort%2A&gt; on the blocked thread, the blocked thread will be in both the <ph id=\"ph1\">`WaitSleepJoin`</ph> and the <ph id=\"ph2\">`AbortRequested`</ph> states at the same time.","pos":[1265,1547],"source":" For example, if a thread is blocked on a call to <xref:System.Threading.Monitor.Wait%2A>, and another thread calls <xref:System.Threading.Thread.Abort%2A> on the blocked thread, the blocked thread will be in both the `WaitSleepJoin` and the `AbortRequested` states at the same time."},{"content":"In this case, as soon as the thread returns from the call to &lt;xref:System.Threading.Monitor.Wait%2A&gt; or is interrupted, it will receive the &lt;xref:System.Threading.ThreadAbortException&gt; to begin aborting.","pos":[1548,1751],"source":" In this case, as soon as the thread returns from the call to <xref:System.Threading.Monitor.Wait%2A> or is interrupted, it will receive the <xref:System.Threading.ThreadAbortException> to begin aborting."},{"content":"The &lt;xref:System.Threading.Thread.ThreadState%2A?displayProperty=fullName&gt; property of a thread provides the current state of a thread.","pos":[1758,1893],"source":"       The <xref:System.Threading.Thread.ThreadState%2A?displayProperty=fullName> property of a thread provides the current state of a thread."},{"content":"Applications must use a bitmask to determine whether a thread is running.","pos":[1894,1967]},{"content":"Since the value for <ph id=\"ph1\">`Running`</ph> is zero (0), test whether a thread is running by using C# code such as <ph id=\"ph2\">`(myThread.ThreadState &amp; (ThreadState.Stopped | ThreadState.Unstarted)) == 0`</ph> or Visual Basic code such as <ph id=\"ph3\">`(myThread.ThreadState And (ThreadState.Stopped Or ThreadState.Unstarted)) = 0`</ph>.","pos":[1968,2256],"source":" Since the value for `Running` is zero (0), test whether a thread is running by using C# code such as `(myThread.ThreadState & (ThreadState.Stopped | ThreadState.Unstarted)) == 0` or Visual Basic code such as `(myThread.ThreadState And (ThreadState.Stopped Or ThreadState.Unstarted)) = 0`."}]}]},{"pos":[4801,4915],"content":"The thread state includes AbortRequested and the thread is now dead, but its state has not yet changed to Stopped.","needQuote":true,"needEscape":true,"nodes":[{"content":"The thread state includes AbortRequested and the thread is now dead, but its state has not yet changed to Stopped.","pos":[0,114]}]},{"pos":[5019,5031],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[5407,5662],"content":"The <ph id=\"ph1\">&amp;lt;</ph>xref:System.Threading.Thread.Abort%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph> method has been invoked on the thread, but the thread has not yet received the pending <bpt id=\"p1\">&lt;xref href=\"System.Threading.ThreadAbortException\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that will attempt to terminate it.","needQuote":true,"needEscape":true,"source":"The &lt;xref:System.Threading.Thread.Abort%2A?displayProperty=fullName&gt; method has been invoked on the thread, but the thread has not yet received the pending <xref href=\"System.Threading.ThreadAbortException\"></xref> that will attempt to terminate it."},{"pos":[5773,5785],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[6141,6356],"content":"The thread is being executed as a background thread, as opposed to a foreground thread. This state is controlled by setting the &lt;xref:System.Threading.Thread.IsBackground%2A?displayProperty=fullName&gt; property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The thread is being executed as a background thread, as opposed to a foreground thread. This state is controlled by setting the &lt;xref:System.Threading.Thread.IsBackground%2A?displayProperty=fullName&gt; property.","pos":[0,215],"nodes":[{"content":"The thread is being executed as a background thread, as opposed to a foreground thread.","pos":[0,87]},{"content":"This state is controlled by setting the <ph id=\"ph1\">&amp;lt;</ph>xref:System.Threading.Thread.IsBackground%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph> property.","pos":[88,215],"source":" This state is controlled by setting the &lt;xref:System.Threading.Thread.IsBackground%2A?displayProperty=fullName&gt; property."}]}]},{"pos":[6463,6475],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[6816,6947],"content":"The thread has been started, it is not blocked, and there is no pending <bpt id=\"p1\">&lt;xref href=\"System.Threading.ThreadAbortException\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The thread has been started, it is not blocked, and there is no pending <xref href=\"System.Threading.ThreadAbortException\"></xref>."},{"pos":[7051,7063],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[7404,7427],"content":"The thread has stopped.","needQuote":true,"needEscape":true,"nodes":[{"content":"The thread has stopped.","pos":[0,23]}]},{"pos":[7531,7543],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[7914,7983],"content":"The thread is being requested to stop. This is for internal use only.","needQuote":true,"needEscape":true,"nodes":[{"content":"The thread is being requested to stop. This is for internal use only.","pos":[0,69],"nodes":[{"content":"The thread is being requested to stop.","pos":[0,38]},{"content":"This is for internal use only.","pos":[39,69]}]}]},{"pos":[8093,8105],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[8456,8486],"content":"The thread has been suspended.","needQuote":true,"needEscape":true,"nodes":[{"content":"The thread has been suspended.","pos":[0,30]}]},{"pos":[8592,8604],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[8990,9031],"content":"The thread is being requested to suspend.","needQuote":true,"needEscape":true,"nodes":[{"content":"The thread is being requested to suspend.","pos":[0,41]}]},{"pos":[9144,9156],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[9507,9624],"content":"The &lt;xref:System.Threading.Thread.Start%2A?displayProperty=fullName&gt; method has not been invoked on the thread.","needQuote":true,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">&amp;lt;</ph>xref:System.Threading.Thread.Start%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph> method has not been invoked on the thread.","pos":[0,117],"source":"The &lt;xref:System.Threading.Thread.Start%2A?displayProperty=fullName&gt; method has not been invoked on the thread."}]},{"pos":[9730,9742],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[10113,10610],"content":"The thread is blocked. This could be the result of calling &lt;xref:System.Threading.Thread.Sleep%2A?displayProperty=fullName&gt; or &lt;xref:System.Threading.Thread.Join%2A?displayProperty=fullName&gt;, of requesting a lock — for example, by calling &lt;xref:System.Threading.Monitor.Enter%2A?displayProperty=fullName&gt; or &lt;xref:System.Threading.Monitor.Wait%2A?displayProperty=fullName&gt; — or of waiting on a thread synchronization object such as <xref:System.Threading.ManualResetEvent>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The thread is blocked. This could be the result of calling &lt;xref:System.Threading.Thread.Sleep%2A?displayProperty=fullName&gt; or &lt;xref:System.Threading.Thread.Join%2A?displayProperty=fullName&gt;, of requesting a lock — for example, by calling &lt;xref:System.Threading.Monitor.Enter%2A?displayProperty=fullName&gt; or &lt;xref:System.Threading.Monitor.Wait%2A?displayProperty=fullName&gt; — or of waiting on a thread synchronization object such as <xref:System.Threading.ManualResetEvent>.","pos":[0,497],"nodes":[{"content":"The thread is blocked.","pos":[0,22]},{"content":"This could be the result of calling <ph id=\"ph1\">&amp;lt;</ph>xref:System.Threading.Thread.Sleep%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph> or <ph id=\"ph3\">&amp;lt;</ph>xref:System.Threading.Thread.Join%2A?displayProperty=fullName<ph id=\"ph4\">&amp;gt;</ph>, of requesting a lock — for example, by calling <ph id=\"ph5\">&amp;lt;</ph>xref:System.Threading.Monitor.Enter%2A?displayProperty=fullName<ph id=\"ph6\">&amp;gt;</ph> or <ph id=\"ph7\">&amp;lt;</ph>xref:System.Threading.Monitor.Wait%2A?displayProperty=fullName<ph id=\"ph8\">&amp;gt;</ph> — or of waiting on a thread synchronization object such as &lt;xref:System.Threading.ManualResetEvent&gt;.","pos":[23,497],"source":" This could be the result of calling &lt;xref:System.Threading.Thread.Sleep%2A?displayProperty=fullName&gt; or &lt;xref:System.Threading.Thread.Join%2A?displayProperty=fullName&gt;, of requesting a lock — for example, by calling &lt;xref:System.Threading.Monitor.Enter%2A?displayProperty=fullName&gt; or &lt;xref:System.Threading.Monitor.Wait%2A?displayProperty=fullName&gt; — or of waiting on a thread synchronization object such as <xref:System.Threading.ManualResetEvent>."}]}]},{"pos":[10720,10732],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Threading.ThreadState\n  id: ThreadState\n  children:\n  - System.Threading.ThreadState.Aborted\n  - System.Threading.ThreadState.AbortRequested\n  - System.Threading.ThreadState.Background\n  - System.Threading.ThreadState.Running\n  - System.Threading.ThreadState.Stopped\n  - System.Threading.ThreadState.StopRequested\n  - System.Threading.ThreadState.Suspended\n  - System.Threading.ThreadState.SuspendRequested\n  - System.Threading.ThreadState.Unstarted\n  - System.Threading.ThreadState.WaitSleepJoin\n  langs:\n  - csharp\n  name: ThreadState\n  nameWithType: ThreadState\n  fullName: System.Threading.ThreadState\n  type: Enum\n  summary: Specifies the execution states of a <xref href=\"System.Threading.Thread\"></xref>.\n  remarks: \"The ThreadState enumeration is of interest only in a few debugging scenarios. Your code should never use the thread state to synchronize the activities of threads.  \\n  \\n ThreadState defines a set of all possible execution states for threads. Once a thread is created, it is in at least one of the states until it terminates. Threads created within the common language runtime are initially in the `Unstarted` state, while external threads that come into the runtime are already in the `Running` state. An `Unstarted` thread is transitioned into the `Running` state by calling <xref:System.Threading.Thread.Start%2A>. Not all combinations of `ThreadState` values are valid; for example, a thread cannot be in both the `Aborted` and `Unstarted` states.  \\n  \\n> [!IMPORTANT]\\n>  There are two thread state enumerations,ThreadState and <xref:System.Diagnostics.ThreadState?displayProperty=fullName>.  \\n  \\n The following table shows the actions that cause a change of state.  \\n  \\n|Action|ThreadState|  \\n|------------|-----------------|  \\n|A thread is created within the common language runtime.|Unstarted|  \\n|Another thread calls the <xref:System.Threading.Thread.Start%2A?displayProperty=fullName> method on the new thread, and the call returns.<br /><br /> The <xref:System.Threading.Thread.Start%2A> method does not return until the new thread has started running. There is no way to know at what point the new thread will start running, during the call to <xref:System.Threading.Thread.Start%2A>.|Running|  \\n|The thread calls <xref:System.Threading.Thread.Sleep%2A>|WaitSleepJoin|  \\n|The thread calls <xref:System.Threading.Monitor.Wait%2A> on another object.|WaitSleepJoin|  \\n|The thread calls <xref:System.Threading.Thread.Join%2A> on another thread.|WaitSleepJoin|  \\n|Another thread calls <xref:System.Threading.Thread.Interrupt%2A>|Running|  \\n|Another thread calls <xref:System.Threading.Thread.Suspend%2A>|SuspendRequested|  \\n|The thread responds to a <xref:System.Threading.Thread.Suspend%2A> request.|Suspended|  \\n|Another thread calls <xref:System.Threading.Thread.Resume%2A>|Running|  \\n|Another thread calls <xref:System.Threading.Thread.Abort%2A>|AbortRequested|  \\n|The thread responds to a <xref:System.Threading.Thread.Abort%2A> request.|Stopped|  \\n|A thread is terminated.|Stopped|  \\n  \\n In addition to the states noted above, there is also the `Background` state, which indicates whether the thread is running in the background or foreground.  \\n  \\n A thread can be in more than one state at a given time. For example, if a thread is blocked on a call to <xref:System.Threading.Monitor.Wait%2A>, and another thread calls <xref:System.Threading.Thread.Abort%2A> on the blocked thread, the blocked thread will be in both the `WaitSleepJoin` and the `AbortRequested` states at the same time. In this case, as soon as the thread returns from the call to <xref:System.Threading.Monitor.Wait%2A> or is interrupted, it will receive the <xref:System.Threading.ThreadAbortException> to begin aborting.  \\n  \\n The <xref:System.Threading.Thread.ThreadState%2A?displayProperty=fullName> property of a thread provides the current state of a thread. Applications must use a bitmask to determine whether a thread is running. Since the value for `Running` is zero (0), test whether a thread is running by using C# code such as `(myThread.ThreadState & (ThreadState.Stopped | ThreadState.Unstarted)) == 0` or Visual Basic code such as `(myThread.ThreadState And (ThreadState.Stopped Or ThreadState.Unstarted)) = 0`.\"\n  syntax:\n    content: >-\n      [System.Flags]\n\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public enum ThreadState\n  inheritance:\n  - System.Enum\n  platform:\n  - net462\n- uid: System.Threading.ThreadState.Aborted\n  id: Aborted\n  parent: System.Threading.ThreadState\n  langs:\n  - csharp\n  name: Aborted\n  nameWithType: ThreadState.Aborted\n  fullName: System.Threading.ThreadState.Aborted\n  type: Field\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: The thread state includes AbortRequested and the thread is now dead, but its state has not yet changed to Stopped.\n  syntax:\n    content: Aborted\n    return:\n      type: System.Threading.ThreadState\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Threading.ThreadState.AbortRequested\n  id: AbortRequested\n  parent: System.Threading.ThreadState\n  langs:\n  - csharp\n  name: AbortRequested\n  nameWithType: ThreadState.AbortRequested\n  fullName: System.Threading.ThreadState.AbortRequested\n  type: Field\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: The &lt;xref:System.Threading.Thread.Abort%2A?displayProperty=fullName&gt; method has been invoked on the thread, but the thread has not yet received the pending <xref href=\"System.Threading.ThreadAbortException\"></xref> that will attempt to terminate it.\n  syntax:\n    content: AbortRequested\n    return:\n      type: System.Threading.ThreadState\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Threading.ThreadState.Background\n  id: Background\n  parent: System.Threading.ThreadState\n  langs:\n  - csharp\n  name: Background\n  nameWithType: ThreadState.Background\n  fullName: System.Threading.ThreadState.Background\n  type: Field\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: The thread is being executed as a background thread, as opposed to a foreground thread. This state is controlled by setting the &lt;xref:System.Threading.Thread.IsBackground%2A?displayProperty=fullName&gt; property.\n  syntax:\n    content: Background\n    return:\n      type: System.Threading.ThreadState\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Threading.ThreadState.Running\n  id: Running\n  parent: System.Threading.ThreadState\n  langs:\n  - csharp\n  name: Running\n  nameWithType: ThreadState.Running\n  fullName: System.Threading.ThreadState.Running\n  type: Field\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: The thread has been started, it is not blocked, and there is no pending <xref href=\"System.Threading.ThreadAbortException\"></xref>.\n  syntax:\n    content: Running\n    return:\n      type: System.Threading.ThreadState\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Threading.ThreadState.Stopped\n  id: Stopped\n  parent: System.Threading.ThreadState\n  langs:\n  - csharp\n  name: Stopped\n  nameWithType: ThreadState.Stopped\n  fullName: System.Threading.ThreadState.Stopped\n  type: Field\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: The thread has stopped.\n  syntax:\n    content: Stopped\n    return:\n      type: System.Threading.ThreadState\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Threading.ThreadState.StopRequested\n  id: StopRequested\n  parent: System.Threading.ThreadState\n  langs:\n  - csharp\n  name: StopRequested\n  nameWithType: ThreadState.StopRequested\n  fullName: System.Threading.ThreadState.StopRequested\n  type: Field\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: The thread is being requested to stop. This is for internal use only.\n  syntax:\n    content: StopRequested\n    return:\n      type: System.Threading.ThreadState\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Threading.ThreadState.Suspended\n  id: Suspended\n  parent: System.Threading.ThreadState\n  langs:\n  - csharp\n  name: Suspended\n  nameWithType: ThreadState.Suspended\n  fullName: System.Threading.ThreadState.Suspended\n  type: Field\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: The thread has been suspended.\n  syntax:\n    content: Suspended\n    return:\n      type: System.Threading.ThreadState\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Threading.ThreadState.SuspendRequested\n  id: SuspendRequested\n  parent: System.Threading.ThreadState\n  langs:\n  - csharp\n  name: SuspendRequested\n  nameWithType: ThreadState.SuspendRequested\n  fullName: System.Threading.ThreadState.SuspendRequested\n  type: Field\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: The thread is being requested to suspend.\n  syntax:\n    content: SuspendRequested\n    return:\n      type: System.Threading.ThreadState\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Threading.ThreadState.Unstarted\n  id: Unstarted\n  parent: System.Threading.ThreadState\n  langs:\n  - csharp\n  name: Unstarted\n  nameWithType: ThreadState.Unstarted\n  fullName: System.Threading.ThreadState.Unstarted\n  type: Field\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: The &lt;xref:System.Threading.Thread.Start%2A?displayProperty=fullName&gt; method has not been invoked on the thread.\n  syntax:\n    content: Unstarted\n    return:\n      type: System.Threading.ThreadState\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Threading.ThreadState.WaitSleepJoin\n  id: WaitSleepJoin\n  parent: System.Threading.ThreadState\n  langs:\n  - csharp\n  name: WaitSleepJoin\n  nameWithType: ThreadState.WaitSleepJoin\n  fullName: System.Threading.ThreadState.WaitSleepJoin\n  type: Field\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: The thread is blocked. This could be the result of calling &lt;xref:System.Threading.Thread.Sleep%2A?displayProperty=fullName&gt; or &lt;xref:System.Threading.Thread.Join%2A?displayProperty=fullName&gt;, of requesting a lock — for example, by calling &lt;xref:System.Threading.Monitor.Enter%2A?displayProperty=fullName&gt; or &lt;xref:System.Threading.Monitor.Wait%2A?displayProperty=fullName&gt; — or of waiting on a thread synchronization object such as <xref:System.Threading.ManualResetEvent>.\n  syntax:\n    content: WaitSleepJoin\n    return:\n      type: System.Threading.ThreadState\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Enum\n  isExternal: false\n  name: System.Enum\n- uid: System.Threading.ThreadState.Aborted\n  parent: System.Threading.ThreadState\n  isExternal: false\n  name: Aborted\n  nameWithType: ThreadState.Aborted\n  fullName: System.Threading.ThreadState.Aborted\n- uid: System.Threading.ThreadState\n  parent: System.Threading\n  isExternal: false\n  name: ThreadState\n  nameWithType: ThreadState\n  fullName: System.Threading.ThreadState\n- uid: System.Threading.ThreadState.AbortRequested\n  parent: System.Threading.ThreadState\n  isExternal: false\n  name: AbortRequested\n  nameWithType: ThreadState.AbortRequested\n  fullName: System.Threading.ThreadState.AbortRequested\n- uid: System.Threading.ThreadState.Background\n  parent: System.Threading.ThreadState\n  isExternal: false\n  name: Background\n  nameWithType: ThreadState.Background\n  fullName: System.Threading.ThreadState.Background\n- uid: System.Threading.ThreadState.Running\n  parent: System.Threading.ThreadState\n  isExternal: false\n  name: Running\n  nameWithType: ThreadState.Running\n  fullName: System.Threading.ThreadState.Running\n- uid: System.Threading.ThreadState.Stopped\n  parent: System.Threading.ThreadState\n  isExternal: false\n  name: Stopped\n  nameWithType: ThreadState.Stopped\n  fullName: System.Threading.ThreadState.Stopped\n- uid: System.Threading.ThreadState.StopRequested\n  parent: System.Threading.ThreadState\n  isExternal: false\n  name: StopRequested\n  nameWithType: ThreadState.StopRequested\n  fullName: System.Threading.ThreadState.StopRequested\n- uid: System.Threading.ThreadState.Suspended\n  parent: System.Threading.ThreadState\n  isExternal: false\n  name: Suspended\n  nameWithType: ThreadState.Suspended\n  fullName: System.Threading.ThreadState.Suspended\n- uid: System.Threading.ThreadState.SuspendRequested\n  parent: System.Threading.ThreadState\n  isExternal: false\n  name: SuspendRequested\n  nameWithType: ThreadState.SuspendRequested\n  fullName: System.Threading.ThreadState.SuspendRequested\n- uid: System.Threading.ThreadState.Unstarted\n  parent: System.Threading.ThreadState\n  isExternal: false\n  name: Unstarted\n  nameWithType: ThreadState.Unstarted\n  fullName: System.Threading.ThreadState.Unstarted\n- uid: System.Threading.ThreadState.WaitSleepJoin\n  parent: System.Threading.ThreadState\n  isExternal: false\n  name: WaitSleepJoin\n  nameWithType: ThreadState.WaitSleepJoin\n  fullName: System.Threading.ThreadState.WaitSleepJoin\n"}