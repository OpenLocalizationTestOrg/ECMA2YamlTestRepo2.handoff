{"nodes":[{"pos":[282,421],"content":"A Cursor is used to maintain a specific location in a <bpt id=\"p1\">&lt;xref href=\"System.Messaging.MessageQueue\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> when reading the queue's messages.","needQuote":true,"needEscape":true,"source":"A Cursor is used to maintain a specific location in a <xref href=\"System.Messaging.MessageQueue\"></xref> when reading the queue's messages."},{"pos":[434,1567],"content":"To get a cursor for a <xref:System.Messaging.MessageQueue>, call the <xref:System.Messaging.MessageQueue.CreateCursor%2A> method for that queue.       A Cursor is used with such methods as <xref:System.Messaging.MessageQueue.Peek%28System.TimeSpan%2CSystem.Messaging.Cursor%2CSystem.Messaging.PeekAction%29> and <xref:System.Messaging.MessageQueue.Receive%28System.TimeSpan%2CSystem.Messaging.Cursor%29> when you need to read messages that are not at the front of the queue. This includes reading messages synchronously or asynchronously. Cursors do not need to be used to read only the first message in a queue.       When reading messages within a transaction, Message Queuing does not roll back cursor movement if the transaction is aborted. For example, suppose there is a queue with two messages, A1 and A2. If you remove message A1 while in a transaction, Message Queuing moves the cursor to message A2. However, if the transaction is aborted for any reason, message A1 is inserted back into the queue but the cursor remains pointing at message A2.       To close the cursor, call <xref:System.Messaging.Cursor.Close%2A>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"To get a cursor for a <xref:System.Messaging.MessageQueue>, call the <xref:System.Messaging.MessageQueue.CreateCursor%2A> method for that queue.       A Cursor is used with such methods as <xref:System.Messaging.MessageQueue.Peek%28System.TimeSpan%2CSystem.Messaging.Cursor%2CSystem.Messaging.PeekAction%29> and <xref:System.Messaging.MessageQueue.Receive%28System.TimeSpan%2CSystem.Messaging.Cursor%29> when you need to read messages that are not at the front of the queue. This includes reading messages synchronously or asynchronously. Cursors do not need to be used to read only the first message in a queue.       When reading messages within a transaction, Message Queuing does not roll back cursor movement if the transaction is aborted. For example, suppose there is a queue with two messages, A1 and A2. If you remove message A1 while in a transaction, Message Queuing moves the cursor to message A2. However, if the transaction is aborted for any reason, message A1 is inserted back into the queue but the cursor remains pointing at message A2.       To close the cursor, call <xref:System.Messaging.Cursor.Close%2A>.","pos":[0,1127],"nodes":[{"content":"To get a cursor for a &lt;xref:System.Messaging.MessageQueue&gt;, call the &lt;xref:System.Messaging.MessageQueue.CreateCursor%2A&gt; method for that queue.","pos":[0,144],"source":"To get a cursor for a <xref:System.Messaging.MessageQueue>, call the <xref:System.Messaging.MessageQueue.CreateCursor%2A> method for that queue."},{"content":"A Cursor is used with such methods as &lt;xref:System.Messaging.MessageQueue.Peek%28System.TimeSpan%2CSystem.Messaging.Cursor%2CSystem.Messaging.PeekAction%29&gt; and &lt;xref:System.Messaging.MessageQueue.Receive%28System.TimeSpan%2CSystem.Messaging.Cursor%29&gt; when you need to read messages that are not at the front of the queue.","pos":[151,474],"source":"       A Cursor is used with such methods as <xref:System.Messaging.MessageQueue.Peek%28System.TimeSpan%2CSystem.Messaging.Cursor%2CSystem.Messaging.PeekAction%29> and <xref:System.Messaging.MessageQueue.Receive%28System.TimeSpan%2CSystem.Messaging.Cursor%29> when you need to read messages that are not at the front of the queue."},{"content":"This includes reading messages synchronously or asynchronously.","pos":[475,538]},{"content":"Cursors do not need to be used to read only the first message in a queue.","pos":[539,612]},{"content":"When reading messages within a transaction, Message Queuing does not roll back cursor movement if the transaction is aborted.","pos":[619,744]},{"content":"For example, suppose there is a queue with two messages, A1 and A2.","pos":[745,812]},{"content":"If you remove message A1 while in a transaction, Message Queuing moves the cursor to message A2.","pos":[813,909]},{"content":"However, if the transaction is aborted for any reason, message A1 is inserted back into the queue but the cursor remains pointing at message A2.","pos":[910,1054]},{"content":"To close the cursor, call &lt;xref:System.Messaging.Cursor.Close%2A&gt;.","pos":[1061,1127],"source":"       To close the cursor, call <xref:System.Messaging.Cursor.Close%2A>."}]}]},{"pos":[2036,2116],"content":"Closes the cursor, allowing Message Queuing to release the associated resources.","needQuote":true,"needEscape":true,"nodes":[{"content":"Closes the cursor, allowing Message Queuing to release the associated resources.","pos":[0,80]}]},{"pos":[2559,2639],"content":"Releases all resources used by the <bpt id=\"p1\">&lt;xref href=\"System.Messaging.Cursor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Releases all resources used by the <xref href=\"System.Messaging.Cursor\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Messaging.Cursor\n  id: Cursor\n  children:\n  - System.Messaging.Cursor.Close\n  - System.Messaging.Cursor.Dispose\n  langs:\n  - csharp\n  name: Cursor\n  nameWithType: Cursor\n  fullName: System.Messaging.Cursor\n  type: Class\n  summary: A Cursor is used to maintain a specific location in a <xref href=\"System.Messaging.MessageQueue\"></xref> when reading the queue's messages.\n  remarks: \"To get a cursor for a <xref:System.Messaging.MessageQueue>, call the <xref:System.Messaging.MessageQueue.CreateCursor%2A> method for that queue.  \\n  \\n A Cursor is used with such methods as <xref:System.Messaging.MessageQueue.Peek%28System.TimeSpan%2CSystem.Messaging.Cursor%2CSystem.Messaging.PeekAction%29> and <xref:System.Messaging.MessageQueue.Receive%28System.TimeSpan%2CSystem.Messaging.Cursor%29> when you need to read messages that are not at the front of the queue. This includes reading messages synchronously or asynchronously. Cursors do not need to be used to read only the first message in a queue.  \\n  \\n When reading messages within a transaction, Message Queuing does not roll back cursor movement if the transaction is aborted. For example, suppose there is a queue with two messages, A1 and A2. If you remove message A1 while in a transaction, Message Queuing moves the cursor to message A2. However, if the transaction is aborted for any reason, message A1 is inserted back into the queue but the cursor remains pointing at message A2.  \\n  \\n To close the cursor, call <xref:System.Messaging.Cursor.Close%2A>.\"\n  syntax:\n    content: 'public sealed class Cursor : IDisposable'\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Messaging.Cursor.Close\n  id: Close\n  parent: System.Messaging.Cursor\n  langs:\n  - csharp\n  name: Close()\n  nameWithType: Cursor.Close()\n  fullName: System.Messaging.Cursor.Close()\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Closes the cursor, allowing Message Queuing to release the associated resources.\n  syntax:\n    content: public void Close ();\n    parameters: []\n  overload: System.Messaging.Cursor.Close*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Messaging.Cursor.Dispose\n  id: Dispose\n  parent: System.Messaging.Cursor\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: Cursor.Dispose()\n  fullName: System.Messaging.Cursor.Dispose()\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Releases all resources used by the <xref href=\"System.Messaging.Cursor\"></xref>.\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.Messaging.Cursor.Dispose*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Messaging.Cursor.Close\n  parent: System.Messaging.Cursor\n  isExternal: false\n  name: Close()\n  nameWithType: Cursor.Close()\n  fullName: System.Messaging.Cursor.Close()\n- uid: System.Messaging.Cursor.Dispose\n  parent: System.Messaging.Cursor\n  isExternal: false\n  name: Dispose()\n  nameWithType: Cursor.Dispose()\n  fullName: System.Messaging.Cursor.Dispose()\n- uid: System.Messaging.Cursor.Close*\n  parent: System.Messaging.Cursor\n  isExternal: false\n  name: Close\n  nameWithType: Cursor.Close\n- uid: System.Messaging.Cursor.Dispose*\n  parent: System.Messaging.Cursor\n  isExternal: false\n  name: Dispose\n  nameWithType: Cursor.Dispose\n"}