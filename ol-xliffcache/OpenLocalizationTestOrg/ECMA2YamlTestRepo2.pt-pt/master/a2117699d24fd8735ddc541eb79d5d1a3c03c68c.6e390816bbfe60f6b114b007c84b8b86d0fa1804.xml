{"nodes":[{"pos":[801,878],"content":"Represents a license that enables access to protected rights managed content.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents a license that enables access to protected rights managed content.","pos":[0,77]}]},{"pos":[890,1004],"content":"As with other <xref:System.Security.RightsManagement> types, UseLicense is only usable in full trust applications.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"As with other &lt;xref:System.Security.RightsManagement&gt; types, UseLicense is only usable in full trust applications.","pos":[0,114],"source":"As with other <xref:System.Security.RightsManagement> types, UseLicense is only usable in full trust applications."}]},{"pos":[2095,2200],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.RightsManagement.UseLicense\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.RightsManagement.UseLicense\"></xref> class."},{"pos":[2345,2442],"content":"A use license in serialized <ph id=\"ph1\">[!INCLUDE[TLA#tla_xrml](~/add/includes/ajax-current-ext-md.md)]</ph> form.","needQuote":true,"needEscape":true,"source":"A use license in serialized [!INCLUDE[TLA#tla_xrml](~/add/includes/ajax-current-ext-md.md)] form."},{"pos":[2622,2710],"content":"<ph id=\"ph1\">&lt;code&gt;useLicense&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>useLicense</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[2873,2908],"content":"<ph id=\"ph1\">&lt;code&gt;useLicense&lt;/code&gt;</ph> is invalid.","needQuote":true,"needEscape":true,"source":"<code>useLicense</code> is invalid."},{"pos":[3338,3473],"content":"Gets the application data dictionary that contains key/value pairs passed from the publishing application to the consuming application.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the application data dictionary that contains key/value pairs passed from the publishing application to the consuming application.","pos":[0,135]}]},{"pos":[3486,4006],"content":"One data key/value pair that is processed by a Rights Management Services (RMS) server is the string pair \"Allow_Server_Editing\"/\"True\".  When the issuance license \"Allow_Server_Editing\"/\"True\" is set, the service, or any trusted service, can reuse the content key.       The key/value pair \"NOLICCACHE\" / \"1\" controls the Use License embedding policy of consuming applications.  When \"NOLICCACHE\" / \"1\" is set, applications are expected not to embed the Use License within the rights managed document.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"One data key/value pair that is processed by a Rights Management Services (RMS) server is the string pair \"Allow_Server_Editing\"/\"True\".  When the issuance license \"Allow_Server_Editing\"/\"True\" is set, the service, or any trusted service, can reuse the content key.       The key/value pair \"NOLICCACHE\" / \"1\" controls the Use License embedding policy of consuming applications.  When \"NOLICCACHE\" / \"1\" is set, applications are expected not to embed the Use License within the rights managed document.","pos":[0,502],"nodes":[{"content":"One data key/value pair that is processed by a Rights Management Services (RMS) server is the string pair \"Allow_Server_Editing\"/\"True\".","pos":[0,136]},{"content":"When the issuance license \"Allow_Server_Editing\"/\"True\" is set, the service, or any trusted service, can reuse the content key.","pos":[138,265]},{"content":"The key/value pair \"NOLICCACHE\" / \"1\" controls the Use License embedding policy of consuming applications.","pos":[272,378]},{"content":"When \"NOLICCACHE\" / \"1\" is set, applications are expected not to embed the Use License within the rights managed document.","pos":[380,502]}]}]},{"pos":[4228,4358],"content":"The application data dictionary that contains key/value pairs passed from the publishing application to the consuming application.","needQuote":true,"needEscape":true,"nodes":[{"content":"The application data dictionary that contains key/value pairs passed from the publishing application to the consuming application.","pos":[0,130]}]},{"pos":[4982,5083],"content":"Binds the license to a given <bpt id=\"p1\">&lt;xref href=\"System.Security.RightsManagement.SecureEnvironment\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Binds the license to a given <xref href=\"System.Security.RightsManagement.SecureEnvironment\"></xref>."},{"pos":[5096,5380],"content":"After the license is bound to a secure environment, the application can examine and exercise the rights granted by the license.       The returned <xref:System.Security.RightsManagement.CryptoProvider> instance provides decryption and access to the protected rights managed content.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"After the license is bound to a secure environment, the application can examine and exercise the rights granted by the license.       The returned <xref:System.Security.RightsManagement.CryptoProvider> instance provides decryption and access to the protected rights managed content.","pos":[0,282],"nodes":[{"content":"After the license is bound to a secure environment, the application can examine and exercise the rights granted by the license.","pos":[0,127]},{"content":"The returned &lt;xref:System.Security.RightsManagement.CryptoProvider&gt; instance provides decryption and access to the protected rights managed content.","pos":[134,282],"source":"       The returned <xref:System.Security.RightsManagement.CryptoProvider> instance provides decryption and access to the protected rights managed content."}]}]},{"pos":[6080,6119],"content":"The environment to bind the license to.","needQuote":true,"needEscape":true,"nodes":[{"content":"The environment to bind the license to.","pos":[0,39]}]},{"pos":[6211,6397],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Security.RightsManagement.CryptoProvider\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance if the license binding succeeded; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Security.RightsManagement.CryptoProvider\"></xref> instance if the license binding succeeded; otherwise, <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[6576,6671],"content":"<ph id=\"ph1\">&lt;code&gt;secureEnvironment&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>secureEnvironment</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[7071,7124],"content":"Gets the content identifier created by the publisher.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the content identifier created by the publisher.","pos":[0,53]}]},{"pos":[7136,7322],"content":"ContentId is created by the publisher and can be used to match content to a <xref:System.Security.RightsManagement.UseLicense> and <xref:System.Security.RightsManagement.PublishLicense>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"ContentId is created by the publisher and can be used to match content to a &lt;xref:System.Security.RightsManagement.UseLicense&gt; and &lt;xref:System.Security.RightsManagement.PublishLicense&gt;.","pos":[0,186],"source":"ContentId is created by the publisher and can be used to match content to a <xref:System.Security.RightsManagement.UseLicense> and <xref:System.Security.RightsManagement.PublishLicense>."}]},{"pos":[7432,7480],"content":"The content identifier created by the publisher.","needQuote":true,"needEscape":true,"nodes":[{"content":"The content identifier created by the publisher.","pos":[0,48]}]},{"pos":[8001,8066],"content":"Indicates if this license is equivalent to another given license.","needQuote":true,"needEscape":true,"nodes":[{"content":"Indicates if this license is equivalent to another given license.","pos":[0,65]}]},{"pos":[8078,8296],"content":"Equals tests for equivalence comparing the serialized <ph id=\"ph1\">[!INCLUDE[TLA#tla_xrml](~/add/includes/ajax-current-ext-md.md)]</ph> strings specified to the &lt;xref:System.Security.RightsManagement.UseLicense.%23ctor%2A&gt; constructors.","needQuote":true,"needEscape":true,"extradata":"MT","source":"Equals tests for equivalence comparing the serialized [!INCLUDE[TLA#tla_xrml](~/add/includes/ajax-current-ext-md.md)] strings specified to the <xref:System.Security.RightsManagement.UseLicense.%23ctor%2A> constructors."},{"pos":[8433,8456],"content":"The license to compare.","needQuote":true,"needEscape":true,"nodes":[{"content":"The license to compare.","pos":[0,23]}]},{"pos":[8515,8687],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if both licenses are the equivalent; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if both licenses are the equivalent; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[9182,9233],"content":"Returns the hash code associated with this license.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the hash code associated with this license.","pos":[0,51]}]},{"pos":[9245,9454],"content":"The returned hash code is based on the serialized <ph id=\"ph1\">[!INCLUDE[TLA#tla_xrml](~/add/includes/ajax-current-ext-md.md)]</ph> string passed to the &lt;xref:System.Security.RightsManagement.UseLicense.%23ctor%2A&gt; constructor.","needQuote":true,"needEscape":true,"extradata":"MT","source":"The returned hash code is based on the serialized [!INCLUDE[TLA#tla_xrml](~/add/includes/ajax-current-ext-md.md)] string passed to the <xref:System.Security.RightsManagement.UseLicense.%23ctor%2A> constructor."},{"pos":[9589,9618],"content":"A hash code for this license.","needQuote":true,"needEscape":true,"nodes":[{"content":"A hash code for this license.","pos":[0,29]}]},{"pos":[10084,10114],"content":"Gets the owner of the license.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the owner of the license.","pos":[0,30]}]},{"pos":[10126,10335],"content":"The license owner is obtained from the serialized <ph id=\"ph1\">[!INCLUDE[TLA#tla_xrml](~/add/includes/ajax-current-ext-md.md)]</ph> string passed to the &lt;xref:System.Security.RightsManagement.UseLicense.%23ctor%2A&gt; constructor.","needQuote":true,"needEscape":true,"extradata":"MT","source":"The license owner is obtained from the serialized [!INCLUDE[TLA#tla_xrml](~/add/includes/ajax-current-ext-md.md)] string passed to the <xref:System.Security.RightsManagement.UseLicense.%23ctor%2A> constructor."},{"pos":[10514,10539],"content":"The owner of the license.","needQuote":true,"needEscape":true,"nodes":[{"content":"The owner of the license.","pos":[0,25]}]},{"pos":[11018,11142],"content":"Returns the serialized <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xrml](~/add/includes/tla2sharptla-xrml-md.md)]</ph> string used to create this license.","needQuote":true,"needEscape":true,"source":"Returns the serialized [!INCLUDE[TLA2#tla_xrml](~/add/includes/tla2sharptla-xrml-md.md)] string used to create this license."},{"pos":[11278,11469],"content":"The serialized <ph id=\"ph1\">[!INCLUDE[TLA#tla_xrml](~/add/includes/ajax-current-ext-md.md)]</ph> string originally passed to the <ph id=\"ph2\">&amp;lt;</ph>xref:System.Security.RightsManagement.UseLicense.%23ctor%2A<ph id=\"ph3\">&amp;gt;</ph> constructor.","needQuote":true,"needEscape":true,"source":"The serialized [!INCLUDE[TLA#tla_xrml](~/add/includes/ajax-current-ext-md.md)] string originally passed to the &lt;xref:System.Security.RightsManagement.UseLicense.%23ctor%2A&gt; constructor."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.RightsManagement.UseLicense\n  id: UseLicense\n  children:\n  - System.Security.RightsManagement.UseLicense.#ctor(System.String)\n  - System.Security.RightsManagement.UseLicense.ApplicationData\n  - System.Security.RightsManagement.UseLicense.Bind(System.Security.RightsManagement.SecureEnvironment)\n  - System.Security.RightsManagement.UseLicense.ContentId\n  - System.Security.RightsManagement.UseLicense.Equals(System.Object)\n  - System.Security.RightsManagement.UseLicense.GetHashCode\n  - System.Security.RightsManagement.UseLicense.Owner\n  - System.Security.RightsManagement.UseLicense.ToString\n  langs:\n  - csharp\n  name: UseLicense\n  nameWithType: UseLicense\n  fullName: System.Security.RightsManagement.UseLicense\n  type: Class\n  summary: Represents a license that enables access to protected rights managed content.\n  remarks: As with other <xref:System.Security.RightsManagement> types, UseLicense is only usable in full trust applications.\n  example:\n  - \"The following example shows how to use this class to initialize a <xref:System.Security.RightsManagement.PublishLicense>.  \\n  \\n [!code-vb[RightsManagedPackagePublish#RmPkgPubEncrypt](~/add/codesnippet/visualbasic/rmpackagepublish/window1.xaml.vb#rmpkgpubencrypt)]\\n [!code-cs[RightsManagedPackagePublish#RmPkgPubEncrypt](~/add/codesnippet/csharp/RmPackagePublish/Window1.xaml.cs#rmpkgpubencrypt)]\"\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical(System.Security.SecurityCriticalScope.Everything)]\n\n      public class UseLicense\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Security.RightsManagement.UseLicense.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Security.RightsManagement.UseLicense\n  langs:\n  - csharp\n  name: UseLicense(String)\n  nameWithType: UseLicense.UseLicense(String)\n  fullName: System.Security.RightsManagement.UseLicense.UseLicense(String)\n  type: Constructor\n  assemblies:\n  - WindowsBase\n  namespace: System.Security.RightsManagement\n  summary: Initializes a new instance of the <xref href=\"System.Security.RightsManagement.UseLicense\"></xref> class.\n  syntax:\n    content: public UseLicense (string useLicense);\n    parameters:\n    - id: useLicense\n      type: System.String\n      description: A use license in serialized [!INCLUDE[TLA#tla_xrml](~/add/includes/ajax-current-ext-md.md)] form.\n  overload: System.Security.RightsManagement.UseLicense.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>useLicense</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.Security.RightsManagement.RightsManagementException\n    commentId: T:System.Security.RightsManagement.RightsManagementException\n    description: <code>useLicense</code> is invalid.\n  platform:\n  - net462\n- uid: System.Security.RightsManagement.UseLicense.ApplicationData\n  id: ApplicationData\n  parent: System.Security.RightsManagement.UseLicense\n  langs:\n  - csharp\n  name: ApplicationData\n  nameWithType: UseLicense.ApplicationData\n  fullName: System.Security.RightsManagement.UseLicense.ApplicationData\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Security.RightsManagement\n  summary: Gets the application data dictionary that contains key/value pairs passed from the publishing application to the consuming application.\n  remarks: \"One data key/value pair that is processed by a Rights Management Services (RMS) server is the string pair \\\"Allow_Server_Editing\\\"/\\\"True\\\".  When the issuance license \\\"Allow_Server_Editing\\\"/\\\"True\\\" is set, the service, or any trusted service, can reuse the content key.  \\n  \\n The key/value pair \\\"NOLICCACHE\\\" / \\\"1\\\" controls the Use License embedding policy of consuming applications.  When \\\"NOLICCACHE\\\" / \\\"1\\\" is set, applications are expected not to embed the Use License within the rights managed document.\"\n  syntax:\n    content: public System.Collections.Generic.IDictionary<string,string> ApplicationData { get; }\n    return:\n      type: System.Collections.Generic.IDictionary{System.String,System.String}\n      description: The application data dictionary that contains key/value pairs passed from the publishing application to the consuming application.\n  overload: System.Security.RightsManagement.UseLicense.ApplicationData*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.RightsManagement.UseLicense.Bind(System.Security.RightsManagement.SecureEnvironment)\n  id: Bind(System.Security.RightsManagement.SecureEnvironment)\n  parent: System.Security.RightsManagement.UseLicense\n  langs:\n  - csharp\n  name: Bind(SecureEnvironment)\n  nameWithType: UseLicense.Bind(SecureEnvironment)\n  fullName: System.Security.RightsManagement.UseLicense.Bind(SecureEnvironment)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Security.RightsManagement\n  summary: Binds the license to a given <xref href=\"System.Security.RightsManagement.SecureEnvironment\"></xref>.\n  remarks: \"After the license is bound to a secure environment, the application can examine and exercise the rights granted by the license.  \\n  \\n The returned <xref:System.Security.RightsManagement.CryptoProvider> instance provides decryption and access to the protected rights managed content.\"\n  example:\n  - \"The following example shows how to use this method to initialize a <xref:System.Security.RightsManagement.CryptoProvider>.  \\n  \\n [!code-vb[RightsManagedPackagePublish#RmPkgPubEncrypt](~/add/codesnippet/visualbasic/rmpackagepublish/window1.xaml.vb#rmpkgpubencrypt)]\\n [!code-cs[RightsManagedPackagePublish#RmPkgPubEncrypt](~/add/codesnippet/csharp/RmPackagePublish/Window1.xaml.cs#rmpkgpubencrypt)]\"\n  syntax:\n    content: public System.Security.RightsManagement.CryptoProvider Bind (System.Security.RightsManagement.SecureEnvironment secureEnvironment);\n    parameters:\n    - id: secureEnvironment\n      type: System.Security.RightsManagement.SecureEnvironment\n      description: The environment to bind the license to.\n    return:\n      type: System.Security.RightsManagement.CryptoProvider\n      description: A <xref href=\"System.Security.RightsManagement.CryptoProvider\"></xref> instance if the license binding succeeded; otherwise, <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Security.RightsManagement.UseLicense.Bind*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>secureEnvironment</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Security.RightsManagement.UseLicense.ContentId\n  id: ContentId\n  parent: System.Security.RightsManagement.UseLicense\n  langs:\n  - csharp\n  name: ContentId\n  nameWithType: UseLicense.ContentId\n  fullName: System.Security.RightsManagement.UseLicense.ContentId\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Security.RightsManagement\n  summary: Gets the content identifier created by the publisher.\n  remarks: ContentId is created by the publisher and can be used to match content to a <xref:System.Security.RightsManagement.UseLicense> and <xref:System.Security.RightsManagement.PublishLicense>.\n  syntax:\n    content: public Guid ContentId { get; }\n    return:\n      type: System.Guid\n      description: The content identifier created by the publisher.\n  overload: System.Security.RightsManagement.UseLicense.ContentId*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.RightsManagement.UseLicense.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Security.RightsManagement.UseLicense\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: UseLicense.Equals(Object)\n  fullName: System.Security.RightsManagement.UseLicense.Equals(Object)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Security.RightsManagement\n  summary: Indicates if this license is equivalent to another given license.\n  remarks: Equals tests for equivalence comparing the serialized [!INCLUDE[TLA#tla_xrml](~/add/includes/ajax-current-ext-md.md)] strings specified to the <xref:System.Security.RightsManagement.UseLicense.%23ctor%2A> constructors.\n  syntax:\n    content: public override bool Equals (object x);\n    parameters:\n    - id: x\n      type: System.Object\n      description: The license to compare.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if both licenses are the equivalent; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.RightsManagement.UseLicense.Equals*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.RightsManagement.UseLicense.GetHashCode\n  id: GetHashCode\n  parent: System.Security.RightsManagement.UseLicense\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: UseLicense.GetHashCode()\n  fullName: System.Security.RightsManagement.UseLicense.GetHashCode()\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Security.RightsManagement\n  summary: Returns the hash code associated with this license.\n  remarks: The returned hash code is based on the serialized [!INCLUDE[TLA#tla_xrml](~/add/includes/ajax-current-ext-md.md)] string passed to the <xref:System.Security.RightsManagement.UseLicense.%23ctor%2A> constructor.\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: A hash code for this license.\n  overload: System.Security.RightsManagement.UseLicense.GetHashCode*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.RightsManagement.UseLicense.Owner\n  id: Owner\n  parent: System.Security.RightsManagement.UseLicense\n  langs:\n  - csharp\n  name: Owner\n  nameWithType: UseLicense.Owner\n  fullName: System.Security.RightsManagement.UseLicense.Owner\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Security.RightsManagement\n  summary: Gets the owner of the license.\n  remarks: The license owner is obtained from the serialized [!INCLUDE[TLA#tla_xrml](~/add/includes/ajax-current-ext-md.md)] string passed to the <xref:System.Security.RightsManagement.UseLicense.%23ctor%2A> constructor.\n  syntax:\n    content: public System.Security.RightsManagement.ContentUser Owner { get; }\n    return:\n      type: System.Security.RightsManagement.ContentUser\n      description: The owner of the license.\n  overload: System.Security.RightsManagement.UseLicense.Owner*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.RightsManagement.UseLicense.ToString\n  id: ToString\n  parent: System.Security.RightsManagement.UseLicense\n  langs:\n  - csharp\n  name: ToString()\n  nameWithType: UseLicense.ToString()\n  fullName: System.Security.RightsManagement.UseLicense.ToString()\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Security.RightsManagement\n  summary: Returns the serialized [!INCLUDE[TLA2#tla_xrml](~/add/includes/tla2sharptla-xrml-md.md)] string used to create this license.\n  syntax:\n    content: public override string ToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: The serialized [!INCLUDE[TLA#tla_xrml](~/add/includes/ajax-current-ext-md.md)] string originally passed to the &lt;xref:System.Security.RightsManagement.UseLicense.%23ctor%2A&gt; constructor.\n  overload: System.Security.RightsManagement.UseLicense.ToString*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.Security.RightsManagement.RightsManagementException\n  parent: System.Security.RightsManagement\n  isExternal: false\n  name: RightsManagementException\n  nameWithType: RightsManagementException\n  fullName: System.Security.RightsManagement.RightsManagementException\n- uid: System.Security.RightsManagement.UseLicense.#ctor(System.String)\n  parent: System.Security.RightsManagement.UseLicense\n  isExternal: false\n  name: UseLicense(String)\n  nameWithType: UseLicense.UseLicense(String)\n  fullName: System.Security.RightsManagement.UseLicense.UseLicense(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.RightsManagement.UseLicense.ApplicationData\n  parent: System.Security.RightsManagement.UseLicense\n  isExternal: false\n  name: ApplicationData\n  nameWithType: UseLicense.ApplicationData\n  fullName: System.Security.RightsManagement.UseLicense.ApplicationData\n- uid: System.Collections.Generic.IDictionary{System.String,System.String}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IDictionary<String,String>\n  nameWithType: IDictionary<String,String>\n  fullName: System.Collections.Generic.IDictionary<System.String,System.String>\n  spec.csharp:\n  - uid: System.Collections.Generic.IDictionary`2\n    name: IDictionary\n    nameWithType: IDictionary\n    fullName: IDictionary<System.String,System.String>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: String\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: String\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Security.RightsManagement.UseLicense.Bind(System.Security.RightsManagement.SecureEnvironment)\n  parent: System.Security.RightsManagement.UseLicense\n  isExternal: false\n  name: Bind(SecureEnvironment)\n  nameWithType: UseLicense.Bind(SecureEnvironment)\n  fullName: System.Security.RightsManagement.UseLicense.Bind(SecureEnvironment)\n- uid: System.Security.RightsManagement.CryptoProvider\n  parent: System.Security.RightsManagement\n  isExternal: false\n  name: CryptoProvider\n  nameWithType: CryptoProvider\n  fullName: System.Security.RightsManagement.CryptoProvider\n- uid: System.Security.RightsManagement.SecureEnvironment\n  parent: System.Security.RightsManagement\n  isExternal: false\n  name: SecureEnvironment\n  nameWithType: SecureEnvironment\n  fullName: System.Security.RightsManagement.SecureEnvironment\n- uid: System.Security.RightsManagement.UseLicense.ContentId\n  parent: System.Security.RightsManagement.UseLicense\n  isExternal: false\n  name: ContentId\n  nameWithType: UseLicense.ContentId\n  fullName: System.Security.RightsManagement.UseLicense.ContentId\n- uid: System.Guid\n  parent: System\n  isExternal: true\n  name: Guid\n  nameWithType: Guid\n  fullName: System.Guid\n- uid: System.Security.RightsManagement.UseLicense.Equals(System.Object)\n  parent: System.Security.RightsManagement.UseLicense\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: UseLicense.Equals(Object)\n  fullName: System.Security.RightsManagement.UseLicense.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.RightsManagement.UseLicense.GetHashCode\n  parent: System.Security.RightsManagement.UseLicense\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: UseLicense.GetHashCode()\n  fullName: System.Security.RightsManagement.UseLicense.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.RightsManagement.UseLicense.Owner\n  parent: System.Security.RightsManagement.UseLicense\n  isExternal: false\n  name: Owner\n  nameWithType: UseLicense.Owner\n  fullName: System.Security.RightsManagement.UseLicense.Owner\n- uid: System.Security.RightsManagement.ContentUser\n  parent: System.Security.RightsManagement\n  isExternal: false\n  name: ContentUser\n  nameWithType: ContentUser\n  fullName: System.Security.RightsManagement.ContentUser\n- uid: System.Security.RightsManagement.UseLicense.ToString\n  parent: System.Security.RightsManagement.UseLicense\n  isExternal: false\n  name: ToString()\n  nameWithType: UseLicense.ToString()\n  fullName: System.Security.RightsManagement.UseLicense.ToString()\n- uid: System.Security.RightsManagement.UseLicense.#ctor*\n  parent: System.Security.RightsManagement.UseLicense\n  isExternal: false\n  name: UseLicense\n  nameWithType: UseLicense.UseLicense\n- uid: System.Security.RightsManagement.UseLicense.ApplicationData*\n  parent: System.Security.RightsManagement.UseLicense\n  isExternal: false\n  name: ApplicationData\n  nameWithType: UseLicense.ApplicationData\n- uid: System.Security.RightsManagement.UseLicense.Bind*\n  parent: System.Security.RightsManagement.UseLicense\n  isExternal: false\n  name: Bind\n  nameWithType: UseLicense.Bind\n- uid: System.Security.RightsManagement.UseLicense.ContentId*\n  parent: System.Security.RightsManagement.UseLicense\n  isExternal: false\n  name: ContentId\n  nameWithType: UseLicense.ContentId\n- uid: System.Security.RightsManagement.UseLicense.Equals*\n  parent: System.Security.RightsManagement.UseLicense\n  isExternal: false\n  name: Equals\n  nameWithType: UseLicense.Equals\n- uid: System.Security.RightsManagement.UseLicense.GetHashCode*\n  parent: System.Security.RightsManagement.UseLicense\n  isExternal: false\n  name: GetHashCode\n  nameWithType: UseLicense.GetHashCode\n- uid: System.Security.RightsManagement.UseLicense.Owner*\n  parent: System.Security.RightsManagement.UseLicense\n  isExternal: false\n  name: Owner\n  nameWithType: UseLicense.Owner\n- uid: System.Security.RightsManagement.UseLicense.ToString*\n  parent: System.Security.RightsManagement.UseLicense\n  isExternal: false\n  name: ToString\n  nameWithType: UseLicense.ToString\n"}