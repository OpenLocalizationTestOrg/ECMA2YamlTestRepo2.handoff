{"nodes":[{"pos":[1615,1833],"content":"Provides access to the column values within each row for a <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_DataReader\" name=\"DataReader\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, and is implemented by .NET Framework data providers that access relational databases.","needQuote":true,"needEscape":true,"source":"Provides access to the column values within each row for a <xref uid=\"langword_csharp_DataReader\" name=\"DataReader\" href=\"\"></xref>, and is implemented by .NET Framework data providers that access relational databases."},{"pos":[1846,3985],"content":"The <xref:System.Data.IDataReader> and IDataRecord interfaces enable an inheriting class to implement a `DataReader` class. This provides a way of reading one or more forward-only streams of result sets. For more information about `DataReader` classes, see [Retrieving Data Using a DataReader](~/add/includes/ajax-current-ext-md.md).       An application does not create an instance of the IDataRecord interface directly, but creates an instance of a class that inherits IDataRecord. Typically, you do this by obtaining a `DataReader` through the `ExecuteReader` method of the `Command` object.       Classes that inherit IDataRecord must implement all inherited members, and typically define additional members to add provider-specific functionality.       Providers implementing a `DataReader` are required to expose data in common language runtime (CLR) types. Type coercion is defined for some types not included in the CLR. These values may be accessed as alternative types that comply with CLR types. As an example, the following table lists suggested mappings from OLE DB data types to CLR types, with alternative types in parentheses.      |OLE DB type|CLR type|   |-----------------|--------------|   |DBTYPE_BOOL|Int16|   |DBTYPE_BSTR|string|   |DBTYPE_BYTES|byte[]|   |DBTYPE_CY|Decimal|   |DBTYPE_DATE|DateTime|   |DBTYPE_DBDATE|DateTime|   |DBTYPE_DBTIME|DateTime|   |DBTYPE_DBTIMESTAMP|DateTime|   |DBTYPE_DECIMAL|Decimal|   |DBTYPE_EMPTY|null|   |DBTYPE_ERROR|ExternalException|   |DBTYPE_FILETIME|DateTime|   |DBTYPE_GUID|Guid|   |DBTYPE_HCHAPTER|not supported|   |DBTYPE_I1|SByte|   |DBTYPE_I2|Int16|   |DBTYPE_I4|Int32|   |DBTYPE_I8|Int64|   |DBTYPE_IDISPATCH|object|   |DBTYPE_IUNKNOWN|object|   |DBTYPE_NULL|DBNull.Value|   |DBTYPE_NUMERIC|Decimal|   |DBTYPE_PROPVARIANT|object|   |DBTYPE_R4|Single|   |DBTYPE_R8|Double|   |DBTYPE_STR|string|   |DBTYPE_UDT|not supported|   |DBTYPE_UI1|byte (Int16)|   |DBTYPE_UI2|UInt16 (Int32)|   |DBTYPE_UI4|UInt32 (Int64)|   |DBTYPE_UI8|UInt64 (Decimal)|   |DBTYPE_VARIANT|object|   |DBTYPE_VARNUMERIC|not supported|   |DBTYPE_WSTR|string|","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.Data.IDataReader&gt; and IDataRecord interfaces enable an inheriting class to implement a <ph id=\"ph1\">`DataReader`</ph> class.","pos":[0,123],"source":"The <xref:System.Data.IDataReader> and IDataRecord interfaces enable an inheriting class to implement a `DataReader` class."},{"content":"This provides a way of reading one or more forward-only streams of result sets.","pos":[124,203]},{"content":"For more information about <ph id=\"ph1\">`DataReader`</ph> classes, see <bpt id=\"p1\">[</bpt>Retrieving Data Using a DataReader<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[204,333],"source":" For more information about `DataReader` classes, see [Retrieving Data Using a DataReader](~/add/includes/ajax-current-ext-md.md)."},{"content":"An application does not create an instance of the IDataRecord interface directly, but creates an instance of a class that inherits IDataRecord.","pos":[340,483]},{"content":"Typically, you do this by obtaining a <ph id=\"ph1\">`DataReader`</ph> through the <ph id=\"ph2\">`ExecuteReader`</ph> method of the <ph id=\"ph3\">`Command`</ph> object.","pos":[484,594],"source":" Typically, you do this by obtaining a `DataReader` through the `ExecuteReader` method of the `Command` object."},{"content":"Classes that inherit IDataRecord must implement all inherited members, and typically define additional members to add provider-specific functionality.","pos":[601,751]},{"content":"Providers implementing a <ph id=\"ph1\">`DataReader`</ph> are required to expose data in common language runtime (CLR) types.","pos":[758,863],"source":"       Providers implementing a `DataReader` are required to expose data in common language runtime (CLR) types."},{"content":"Type coercion is defined for some types not included in the CLR.","pos":[864,928]},{"content":"These values may be accessed as alternative types that comply with CLR types.","pos":[929,1006]},{"content":"As an example, the following table lists suggested mappings from OLE DB data types to CLR types, with alternative types in parentheses.","pos":[1007,1142]},{"content":"|OLE DB type|CLR type|   |-----------------|--------------|   |DBTYPE_BOOL|Int16|   |DBTYPE_BSTR|string|   |DBTYPE_BYTES|byte[]|   |DBTYPE_CY|Decimal|   |DBTYPE_DATE|DateTime|   |DBTYPE_DBDATE|DateTime|   |DBTYPE_DBTIME|DateTime|   |DBTYPE_DBTIMESTAMP|DateTime|   |DBTYPE_DECIMAL|Decimal|   |DBTYPE_EMPTY|null|   |DBTYPE_ERROR|ExternalException|   |DBTYPE_FILETIME|DateTime|   |DBTYPE_GUID|Guid|   |DBTYPE_HCHAPTER|not supported|   |DBTYPE_I1|SByte|   |DBTYPE_I2|Int16|   |DBTYPE_I4|Int32|   |DBTYPE_I8|Int64|   |DBTYPE_IDISPATCH|object|   |DBTYPE_IUNKNOWN|object|   |DBTYPE_NULL|DBNull.Value|   |DBTYPE_NUMERIC|Decimal|   |DBTYPE_PROPVARIANT|object|   |DBTYPE_R4|Single|   |DBTYPE_R8|Double|   |DBTYPE_STR|string|   |DBTYPE_UDT|not supported|   |DBTYPE_UI1|byte (Int16)|   |DBTYPE_UI2|UInt16 (Int32)|   |DBTYPE_UI4|UInt32 (Int64)|   |DBTYPE_UI8|UInt64 (Decimal)|   |DBTYPE_VARIANT|object|   |DBTYPE_VARNUMERIC|not supported|   |DBTYPE_WSTR|string|","pos":[1148,2096]}]},{"pos":[5037,5083],"content":"Gets the number of columns in the current row.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the number of columns in the current row.","pos":[0,46]}]},{"pos":[5095,5249],"content":"After executing a query that does not return rows (for example, using the <xref:System.Data.IDbCommand.ExecuteNonQuery%2A> method), FieldCount returns -1.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"After executing a query that does not return rows (for example, using the &lt;xref:System.Data.IDbCommand.ExecuteNonQuery%2A&gt; method), FieldCount returns -1.","pos":[0,154],"source":"After executing a query that does not return rows (for example, using the <xref:System.Data.IDbCommand.ExecuteNonQuery%2A> method), FieldCount returns -1."}]},{"pos":[5360,5479],"content":"When not positioned in a valid recordset, 0; otherwise, the number of columns in the current record. The default is -1.","needQuote":true,"needEscape":true,"nodes":[{"content":"When not positioned in a valid recordset, 0; otherwise, the number of columns in the current record. The default is -1.","pos":[0,119],"nodes":[{"content":"When not positioned in a valid recordset, 0; otherwise, the number of columns in the current record.","pos":[0,100]},{"content":"The default is -1.","pos":[101,119]}]}]},{"pos":[5916,5968],"content":"Gets the value of the specified column as a Boolean.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the value of the specified column as a Boolean.","pos":[0,52]}]},{"pos":[5980,6103],"content":"No conversions are performed. Therefore, the data retrieved must already be a Boolean; otherwise an exception is generated.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"No conversions are performed. Therefore, the data retrieved must already be a Boolean; otherwise an exception is generated.","pos":[0,123],"nodes":[{"content":"No conversions are performed.","pos":[0,29]},{"content":"Therefore, the data retrieved must already be a Boolean; otherwise an exception is generated.","pos":[30,123]}]}]},{"pos":[6231,6261],"content":"The zero-based column ordinal.","needQuote":true,"needEscape":true,"nodes":[{"content":"The zero-based column ordinal.","pos":[0,30]}]},{"pos":[6320,6344],"content":"The value of the column.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value of the column.","pos":[0,24]}]},{"pos":[6515,6610],"content":"The index passed was outside the range of 0 through <xref:System.Data.IDataRecord.FieldCount*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The index passed was outside the range of 0 through &lt;xref:System.Data.IDataRecord.FieldCount*&gt;.","pos":[0,95],"source":"The index passed was outside the range of 0 through <xref:System.Data.IDataRecord.FieldCount*>."}]},{"pos":[6967,7029],"content":"Gets the 8-bit unsigned integer value of the specified column.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the 8-bit unsigned integer value of the specified column.","pos":[0,62]}]},{"pos":[7154,7184],"content":"The zero-based column ordinal.","needQuote":true,"needEscape":true,"nodes":[{"content":"The zero-based column ordinal.","pos":[0,30]}]},{"pos":[7240,7297],"content":"The 8-bit unsigned integer value of the specified column.","needQuote":true,"needEscape":true,"nodes":[{"content":"The 8-bit unsigned integer value of the specified column.","pos":[0,57]}]},{"pos":[7465,7560],"content":"The index passed was outside the range of 0 through <xref:System.Data.IDataRecord.FieldCount*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The index passed was outside the range of 0 through &lt;xref:System.Data.IDataRecord.FieldCount*&gt;.","pos":[0,95],"source":"The index passed was outside the range of 0 through <xref:System.Data.IDataRecord.FieldCount*>."}]},{"pos":[8103,8225],"content":"Reads a stream of bytes from the specified column offset into the buffer as an array, starting at the given buffer offset.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reads a stream of bytes from the specified column offset into the buffer as an array, starting at the given buffer offset.","pos":[0,122]}]},{"pos":[8238,8682],"content":"GetBytes returns the number of available bytes in the field. Frequently this is the exact length of the field. However, the number returned may be less than the true length of the field if `GetBytes` has already been used to obtain bytes from the field.       If you pass a buffer that is `null`, GetBytes returns the length of the row in bytes.       No conversions are performed; therefore the data retrieved must already be a byte array.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"GetBytes returns the number of available bytes in the field.","pos":[0,60]},{"content":"Frequently this is the exact length of the field.","pos":[61,110]},{"content":"However, the number returned may be less than the true length of the field if <ph id=\"ph1\">`GetBytes`</ph> has already been used to obtain bytes from the field.","pos":[111,253],"source":" However, the number returned may be less than the true length of the field if `GetBytes` has already been used to obtain bytes from the field."},{"content":"If you pass a buffer that is <ph id=\"ph1\">`null`</ph>, GetBytes returns the length of the row in bytes.","pos":[260,345],"source":"       If you pass a buffer that is `null`, GetBytes returns the length of the row in bytes."},{"content":"No conversions are performed; therefore the data retrieved must already be a byte array.","pos":[352,440]}]},{"pos":[8872,8902],"content":"The zero-based column ordinal.","needQuote":true,"needEscape":true,"nodes":[{"content":"The zero-based column ordinal.","pos":[0,30]}]},{"pos":[8969,9035],"content":"The index within the field from which to start the read operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The index within the field from which to start the read operation.","pos":[0,66]}]},{"pos":[9098,9148],"content":"The buffer into which to read the stream of bytes.","needQuote":true,"needEscape":true,"nodes":[{"content":"The buffer into which to read the stream of bytes.","pos":[0,50]}]},{"pos":[9216,9267],"content":"The index for <ph id=\"ph1\">`buffer`</ph> to start the read operation.","needQuote":true,"needEscape":true,"source":"The index for `buffer` to start the read operation."},{"pos":[9329,9357],"content":"The number of bytes to read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes to read.","pos":[0,28]}]},{"pos":[9414,9446],"content":"The actual number of bytes read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The actual number of bytes read.","pos":[0,32]}]},{"pos":[9615,9710],"content":"The index passed was outside the range of 0 through <xref:System.Data.IDataRecord.FieldCount*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The index passed was outside the range of 0 through &lt;xref:System.Data.IDataRecord.FieldCount*&gt;.","pos":[0,95],"source":"The index passed was outside the range of 0 through <xref:System.Data.IDataRecord.FieldCount*>."}]},{"pos":[10067,10116],"content":"Gets the character value of the specified column.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the character value of the specified column.","pos":[0,49]}]},{"pos":[10241,10271],"content":"The zero-based column ordinal.","needQuote":true,"needEscape":true,"nodes":[{"content":"The zero-based column ordinal.","pos":[0,30]}]},{"pos":[10327,10371],"content":"The character value of the specified column.","needQuote":true,"needEscape":true,"nodes":[{"content":"The character value of the specified column.","pos":[0,44]}]},{"pos":[10539,10634],"content":"The index passed was outside the range of 0 through <xref:System.Data.IDataRecord.FieldCount*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The index passed was outside the range of 0 through &lt;xref:System.Data.IDataRecord.FieldCount*&gt;.","pos":[0,95],"source":"The index passed was outside the range of 0 through <xref:System.Data.IDataRecord.FieldCount*>."}]},{"pos":[11177,11304],"content":"Reads a stream of characters from the specified column offset into the buffer as an array, starting at the given buffer offset.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reads a stream of characters from the specified column offset into the buffer as an array, starting at the given buffer offset.","pos":[0,127]}]},{"pos":[11317,11786],"content":"GetChars returns the number of available characters in the field. Frequently this is the exact length of the field. However, the number returned may be less than the exact length of the field if `GetChars` has already been used to obtain characters from the field.       If you pass a buffer that is `null`, `GetChars` returns the length of the field in characters.       No conversions are performed; therefore the data retrieved must already be a character array.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"GetChars returns the number of available characters in the field.","pos":[0,65]},{"content":"Frequently this is the exact length of the field.","pos":[66,115]},{"content":"However, the number returned may be less than the exact length of the field if <ph id=\"ph1\">`GetChars`</ph> has already been used to obtain characters from the field.","pos":[116,264],"source":" However, the number returned may be less than the exact length of the field if `GetChars` has already been used to obtain characters from the field."},{"content":"If you pass a buffer that is <ph id=\"ph1\">`null`</ph>, <ph id=\"ph2\">`GetChars`</ph> returns the length of the field in characters.","pos":[271,365],"source":"       If you pass a buffer that is `null`, `GetChars` returns the length of the field in characters."},{"content":"No conversions are performed; therefore the data retrieved must already be a character array.","pos":[372,465]}]},{"pos":[11976,12006],"content":"The zero-based column ordinal.","needQuote":true,"needEscape":true,"nodes":[{"content":"The zero-based column ordinal.","pos":[0,30]}]},{"pos":[12073,12137],"content":"The index within the row from which to start the read operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The index within the row from which to start the read operation.","pos":[0,64]}]},{"pos":[12200,12250],"content":"The buffer into which to read the stream of bytes.","needQuote":true,"needEscape":true,"nodes":[{"content":"The buffer into which to read the stream of bytes.","pos":[0,50]}]},{"pos":[12318,12369],"content":"The index for <ph id=\"ph1\">`buffer`</ph> to start the read operation.","needQuote":true,"needEscape":true,"source":"The index for `buffer` to start the read operation."},{"pos":[12431,12459],"content":"The number of bytes to read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes to read.","pos":[0,28]}]},{"pos":[12516,12553],"content":"The actual number of characters read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The actual number of characters read.","pos":[0,37]}]},{"pos":[12722,12817],"content":"The index passed was outside the range of 0 through <xref:System.Data.IDataRecord.FieldCount*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The index passed was outside the range of 0 through &lt;xref:System.Data.IDataRecord.FieldCount*&gt;.","pos":[0,95],"source":"The index passed was outside the range of 0 through <xref:System.Data.IDataRecord.FieldCount*>."}]},{"pos":[13174,13263],"content":"Returns an <bpt id=\"p1\">&lt;xref href=\"System.Data.IDataReader\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for the specified column ordinal.","needQuote":true,"needEscape":true,"source":"Returns an <xref href=\"System.Data.IDataReader\"></xref> for the specified column ordinal."},{"pos":[13407,13438],"content":"The index of the field to find.","needQuote":true,"needEscape":true,"nodes":[{"content":"The index of the field to find.","pos":[0,31]}]},{"pos":[13506,13588],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Data.IDataReader\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for the specified column ordinal.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Data.IDataReader\"></xref> for the specified column ordinal."},{"pos":[13756,13851],"content":"The index passed was outside the range of 0 through <xref:System.Data.IDataRecord.FieldCount*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The index passed was outside the range of 0 through &lt;xref:System.Data.IDataRecord.FieldCount*&gt;.","pos":[0,95],"source":"The index passed was outside the range of 0 through <xref:System.Data.IDataRecord.FieldCount*>."}]},{"pos":[14248,14303],"content":"Gets the data type information for the specified field.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the data type information for the specified field.","pos":[0,55]}]},{"pos":[14315,14601],"content":"The data type information can differ from the type information returned by `GetFieldType`, especially where the underlying data types do not map one for one to the runtime types supported by the language. (for example, `DataTypeName` may be \"integer\", while `Type.Name` may be \"Int32\".)","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The data type information can differ from the type information returned by <ph id=\"ph1\">`GetFieldType`</ph>, especially where the underlying data types do not map one for one to the runtime types supported by the language.","pos":[0,204],"source":"The data type information can differ from the type information returned by `GetFieldType`, especially where the underlying data types do not map one for one to the runtime types supported by the language."},{"content":"(for example, <ph id=\"ph1\">`DataTypeName`</ph> may be \"integer\", while <ph id=\"ph2\">`Type.Name`</ph> may be \"Int32\".)","pos":[205,286],"source":" (for example, `DataTypeName` may be \"integer\", while `Type.Name` may be \"Int32\".)"}]},{"pos":[14736,14767],"content":"The index of the field to find.","needQuote":true,"needEscape":true,"nodes":[{"content":"The index of the field to find.","pos":[0,31]}]},{"pos":[14825,14875],"content":"The data type information for the specified field.","needQuote":true,"needEscape":true,"nodes":[{"content":"The data type information for the specified field.","pos":[0,50]}]},{"pos":[15051,15146],"content":"The index passed was outside the range of 0 through <xref:System.Data.IDataRecord.FieldCount*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The index passed was outside the range of 0 through &lt;xref:System.Data.IDataRecord.FieldCount*&gt;.","pos":[0,95],"source":"The index passed was outside the range of 0 through <xref:System.Data.IDataRecord.FieldCount*>."}]},{"pos":[15523,15580],"content":"Gets the date and time data value of the specified field.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the date and time data value of the specified field.","pos":[0,57]}]},{"pos":[15713,15744],"content":"The index of the field to find.","needQuote":true,"needEscape":true,"nodes":[{"content":"The index of the field to find.","pos":[0,31]}]},{"pos":[15804,15856],"content":"The date and time data value of the specified field.","needQuote":true,"needEscape":true,"nodes":[{"content":"The date and time data value of the specified field.","pos":[0,52]}]},{"pos":[16028,16123],"content":"The index passed was outside the range of 0 through <xref:System.Data.IDataRecord.FieldCount*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The index passed was outside the range of 0 through &lt;xref:System.Data.IDataRecord.FieldCount*&gt;.","pos":[0,95],"source":"The index passed was outside the range of 0 through <xref:System.Data.IDataRecord.FieldCount*>."}]},{"pos":[16495,16556],"content":"Gets the fixed-position numeric value of the specified field.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the fixed-position numeric value of the specified field.","pos":[0,61]}]},{"pos":[16687,16718],"content":"The index of the field to find.","needQuote":true,"needEscape":true,"nodes":[{"content":"The index of the field to find.","pos":[0,31]}]},{"pos":[16777,16833],"content":"The fixed-position numeric value of the specified field.","needQuote":true,"needEscape":true,"nodes":[{"content":"The fixed-position numeric value of the specified field.","pos":[0,56]}]},{"pos":[17004,17099],"content":"The index passed was outside the range of 0 through <xref:System.Data.IDataRecord.FieldCount*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The index passed was outside the range of 0 through &lt;xref:System.Data.IDataRecord.FieldCount*&gt;.","pos":[0,95],"source":"The index passed was outside the range of 0 through <xref:System.Data.IDataRecord.FieldCount*>."}]},{"pos":[17466,17537],"content":"Gets the double-precision floating point number of the specified field.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the double-precision floating point number of the specified field.","pos":[0,71]}]},{"pos":[17666,17697],"content":"The index of the field to find.","needQuote":true,"needEscape":true,"nodes":[{"content":"The index of the field to find.","pos":[0,31]}]},{"pos":[17755,17821],"content":"The double-precision floating point number of the specified field.","needQuote":true,"needEscape":true,"nodes":[{"content":"The double-precision floating point number of the specified field.","pos":[0,66]}]},{"pos":[17991,18086],"content":"The index passed was outside the range of 0 through <xref:System.Data.IDataRecord.FieldCount*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The index passed was outside the range of 0 through &lt;xref:System.Data.IDataRecord.FieldCount*&gt;.","pos":[0,95],"source":"The index passed was outside the range of 0 through <xref:System.Data.IDataRecord.FieldCount*>."}]},{"pos":[18468,18627],"content":"Gets the <xref:System.Type> information corresponding to the type of <xref:System.Object> that would be returned from <xref:System.Data.IDataRecord.GetValue*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the &lt;xref:System.Type&gt; information corresponding to the type of &lt;xref:System.Object&gt; that would be returned from &lt;xref:System.Data.IDataRecord.GetValue*&gt;.","pos":[0,159],"source":"Gets the <xref:System.Type> information corresponding to the type of <xref:System.Object> that would be returned from <xref:System.Data.IDataRecord.GetValue*>."}]},{"pos":[18639,18825],"content":"This information can be used to increase performance by indicating the strongly-typed accessor to call. (for example, using `GetInt32` is roughly ten times faster than using `GetValue`.)","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This information can be used to increase performance by indicating the strongly-typed accessor to call.","pos":[0,103]},{"content":"(for example, using <ph id=\"ph1\">`GetInt32`</ph> is roughly ten times faster than using <ph id=\"ph2\">`GetValue`</ph>.)","pos":[104,186],"source":" (for example, using `GetInt32` is roughly ten times faster than using `GetValue`.)"}]},{"pos":[18955,18986],"content":"The index of the field to find.","needQuote":true,"needEscape":true,"nodes":[{"content":"The index of the field to find.","pos":[0,31]}]},{"pos":[19042,19196],"content":"The <xref:System.Type> information corresponding to the type of <xref:System.Object> that would be returned from <xref:System.Data.IDataRecord.GetValue*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Type&gt; information corresponding to the type of &lt;xref:System.Object&gt; that would be returned from &lt;xref:System.Data.IDataRecord.GetValue*&gt;.","pos":[0,154],"source":"The <xref:System.Type> information corresponding to the type of <xref:System.Object> that would be returned from <xref:System.Data.IDataRecord.GetValue*>."}]},{"pos":[19369,19464],"content":"The index passed was outside the range of 0 through <xref:System.Data.IDataRecord.FieldCount*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The index passed was outside the range of 0 through &lt;xref:System.Data.IDataRecord.FieldCount*&gt;.","pos":[0,95],"source":"The index passed was outside the range of 0 through <xref:System.Data.IDataRecord.FieldCount*>."}]},{"pos":[19826,19897],"content":"Gets the single-precision floating point number of the specified field.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the single-precision floating point number of the specified field.","pos":[0,71]}]},{"pos":[20024,20055],"content":"The index of the field to find.","needQuote":true,"needEscape":true,"nodes":[{"content":"The index of the field to find.","pos":[0,31]}]},{"pos":[20113,20179],"content":"The single-precision floating point number of the specified field.","needQuote":true,"needEscape":true,"nodes":[{"content":"The single-precision floating point number of the specified field.","pos":[0,66]}]},{"pos":[20348,20443],"content":"The index passed was outside the range of 0 through <xref:System.Data.IDataRecord.FieldCount*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The index passed was outside the range of 0 through &lt;xref:System.Data.IDataRecord.FieldCount*&gt;.","pos":[0,95],"source":"The index passed was outside the range of 0 through <xref:System.Data.IDataRecord.FieldCount*>."}]},{"pos":[20800,20846],"content":"Returns the GUID value of the specified field.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the GUID value of the specified field.","pos":[0,46]}]},{"pos":[20971,21002],"content":"The index of the field to find.","needQuote":true,"needEscape":true,"nodes":[{"content":"The index of the field to find.","pos":[0,31]}]},{"pos":[21058,21096],"content":"The GUID value of the specified field.","needQuote":true,"needEscape":true,"nodes":[{"content":"The GUID value of the specified field.","pos":[0,38]}]},{"pos":[21264,21359],"content":"The index passed was outside the range of 0 through <xref:System.Data.IDataRecord.FieldCount*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The index passed was outside the range of 0 through &lt;xref:System.Data.IDataRecord.FieldCount*&gt;.","pos":[0,95],"source":"The index passed was outside the range of 0 through <xref:System.Data.IDataRecord.FieldCount*>."}]},{"pos":[21721,21781],"content":"Gets the 16-bit signed integer value of the specified field.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the 16-bit signed integer value of the specified field.","pos":[0,60]}]},{"pos":[21908,21939],"content":"The index of the field to find.","needQuote":true,"needEscape":true,"nodes":[{"content":"The index of the field to find.","pos":[0,31]}]},{"pos":[21996,22051],"content":"The 16-bit signed integer value of the specified field.","needQuote":true,"needEscape":true,"nodes":[{"content":"The 16-bit signed integer value of the specified field.","pos":[0,55]}]},{"pos":[22220,22315],"content":"The index passed was outside the range of 0 through <xref:System.Data.IDataRecord.FieldCount*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The index passed was outside the range of 0 through &lt;xref:System.Data.IDataRecord.FieldCount*&gt;.","pos":[0,95],"source":"The index passed was outside the range of 0 through <xref:System.Data.IDataRecord.FieldCount*>."}]},{"pos":[22677,22737],"content":"Gets the 32-bit signed integer value of the specified field.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the 32-bit signed integer value of the specified field.","pos":[0,60]}]},{"pos":[22862,22893],"content":"The index of the field to find.","needQuote":true,"needEscape":true,"nodes":[{"content":"The index of the field to find.","pos":[0,31]}]},{"pos":[22950,23005],"content":"The 32-bit signed integer value of the specified field.","needQuote":true,"needEscape":true,"nodes":[{"content":"The 32-bit signed integer value of the specified field.","pos":[0,55]}]},{"pos":[23174,23269],"content":"The index passed was outside the range of 0 through <xref:System.Data.IDataRecord.FieldCount*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The index passed was outside the range of 0 through &lt;xref:System.Data.IDataRecord.FieldCount*&gt;.","pos":[0,95],"source":"The index passed was outside the range of 0 through <xref:System.Data.IDataRecord.FieldCount*>."}]},{"pos":[23631,23691],"content":"Gets the 64-bit signed integer value of the specified field.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the 64-bit signed integer value of the specified field.","pos":[0,60]}]},{"pos":[23817,23848],"content":"The index of the field to find.","needQuote":true,"needEscape":true,"nodes":[{"content":"The index of the field to find.","pos":[0,31]}]},{"pos":[23905,23960],"content":"The 64-bit signed integer value of the specified field.","needQuote":true,"needEscape":true,"nodes":[{"content":"The 64-bit signed integer value of the specified field.","pos":[0,55]}]},{"pos":[24129,24224],"content":"The index passed was outside the range of 0 through <xref:System.Data.IDataRecord.FieldCount*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The index passed was outside the range of 0 through &lt;xref:System.Data.IDataRecord.FieldCount*&gt;.","pos":[0,95],"source":"The index passed was outside the range of 0 through <xref:System.Data.IDataRecord.FieldCount*>."}]},{"pos":[24581,24617],"content":"Gets the name for the field to find.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the name for the field to find.","pos":[0,36]}]},{"pos":[24744,24775],"content":"The index of the field to find.","needQuote":true,"needEscape":true,"nodes":[{"content":"The index of the field to find.","pos":[0,31]}]},{"pos":[24833,24912],"content":"The name of the field or the empty string (\"\"), if there is no value to return.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the field or the empty string (\"\"), if there is no value to return.","pos":[0,79]}]},{"pos":[25080,25175],"content":"The index passed was outside the range of 0 through <xref:System.Data.IDataRecord.FieldCount*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The index passed was outside the range of 0 through &lt;xref:System.Data.IDataRecord.FieldCount*&gt;.","pos":[0,95],"source":"The index passed was outside the range of 0 through <xref:System.Data.IDataRecord.FieldCount*>."}]},{"pos":[25552,25588],"content":"Return the index of the named field.","needQuote":true,"needEscape":true,"nodes":[{"content":"Return the index of the named field.","pos":[0,36]}]},{"pos":[25601,26083],"content":"`GetOrdinal` performs a case-sensitive lookup first. If it fails, a second case-insensitive search is made. `GetOrdinal` is kana-width insensitive. If the index of the named field is not found, an `IndexOutOfRangeException` is thrown.       Because ordinal-based lookups are more efficient than named lookups, it is inefficient to call `GetOrdinal` within a loop. Save time by calling `GetOrdinal` one time and assigning the results to an integer variable for use within the loop.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"<ph id=\"ph1\">`GetOrdinal`</ph> performs a case-sensitive lookup first.","pos":[0,52],"source":"`GetOrdinal` performs a case-sensitive lookup first."},{"content":"If it fails, a second case-insensitive search is made.","pos":[53,107]},{"content":"<ph id=\"ph1\">`GetOrdinal`</ph> is kana-width insensitive.","pos":[108,147],"source":"`GetOrdinal` is kana-width insensitive."},{"content":"If the index of the named field is not found, an <ph id=\"ph1\">`IndexOutOfRangeException`</ph> is thrown.","pos":[148,234],"source":" If the index of the named field is not found, an `IndexOutOfRangeException` is thrown."},{"content":"Because ordinal-based lookups are more efficient than named lookups, it is inefficient to call <ph id=\"ph1\">`GetOrdinal`</ph> within a loop.","pos":[241,363],"source":"       Because ordinal-based lookups are more efficient than named lookups, it is inefficient to call `GetOrdinal` within a loop."},{"content":"Save time by calling <ph id=\"ph1\">`GetOrdinal`</ph> one time and assigning the results to an integer variable for use within the loop.","pos":[364,480],"source":" Save time by calling `GetOrdinal` one time and assigning the results to an integer variable for use within the loop."}]},{"pos":[26598,26628],"content":"The name of the field to find.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the field to find.","pos":[0,30]}]},{"pos":[26685,26714],"content":"The index of the named field.","needQuote":true,"needEscape":true,"nodes":[{"content":"The index of the named field.","pos":[0,29]}]},{"pos":[27146,27191],"content":"Gets the string value of the specified field.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the string value of the specified field.","pos":[0,45]}]},{"pos":[27320,27351],"content":"The index of the field to find.","needQuote":true,"needEscape":true,"nodes":[{"content":"The index of the field to find.","pos":[0,31]}]},{"pos":[27409,27449],"content":"The string value of the specified field.","needQuote":true,"needEscape":true,"nodes":[{"content":"The string value of the specified field.","pos":[0,40]}]},{"pos":[27619,27714],"content":"The index passed was outside the range of 0 through <xref:System.Data.IDataRecord.FieldCount*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The index passed was outside the range of 0 through &lt;xref:System.Data.IDataRecord.FieldCount*&gt;.","pos":[0,95],"source":"The index passed was outside the range of 0 through <xref:System.Data.IDataRecord.FieldCount*>."}]},{"pos":[28076,28116],"content":"Return the value of the specified field.","needQuote":true,"needEscape":true,"nodes":[{"content":"Return the value of the specified field.","pos":[0,40]}]},{"pos":[28244,28275],"content":"The index of the field to find.","needQuote":true,"needEscape":true,"nodes":[{"content":"The index of the field to find.","pos":[0,31]}]},{"pos":[28333,28405],"content":"The <xref:System.Object> which will contain the field value upon return.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Object&gt; which will contain the field value upon return.","pos":[0,72],"source":"The <xref:System.Object> which will contain the field value upon return."}]},{"pos":[28574,28669],"content":"The index passed was outside the range of 0 through <xref:System.Data.IDataRecord.FieldCount*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The index passed was outside the range of 0 through &lt;xref:System.Data.IDataRecord.FieldCount*&gt;.","pos":[0,95],"source":"The index passed was outside the range of 0 through <xref:System.Data.IDataRecord.FieldCount*>."}]},{"pos":[29051,29126],"content":"Populates an array of objects with the column values of the current record.","needQuote":true,"needEscape":true,"nodes":[{"content":"Populates an array of objects with the column values of the current record.","pos":[0,75]}]},{"pos":[29139,29647],"content":"For most applications, the GetValues method provides an efficient means for retrieving all columns, instead of retrieving each column individually.       You can pass an <xref:System.Object> array that contains fewer than the number of columns that are contained in the resulting row. Only the amount of data the <xref:System.Object> array holds is copied to the array. You can also pass an <xref:System.Object> array whose length is more than the number of columns that are contained in the resulting row.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"For most applications, the GetValues method provides an efficient means for retrieving all columns, instead of retrieving each column individually.       You can pass an <xref:System.Object> array that contains fewer than the number of columns that are contained in the resulting row. Only the amount of data the <xref:System.Object> array holds is copied to the array. You can also pass an <xref:System.Object> array whose length is more than the number of columns that are contained in the resulting row.","pos":[0,506],"nodes":[{"content":"For most applications, the GetValues method provides an efficient means for retrieving all columns, instead of retrieving each column individually.","pos":[0,147]},{"content":"You can pass an &lt;xref:System.Object&gt; array that contains fewer than the number of columns that are contained in the resulting row.","pos":[154,284],"source":"       You can pass an <xref:System.Object> array that contains fewer than the number of columns that are contained in the resulting row."},{"content":"Only the amount of data the &lt;xref:System.Object&gt; array holds is copied to the array.","pos":[285,369],"source":" Only the amount of data the <xref:System.Object> array holds is copied to the array."},{"content":"You can also pass an &lt;xref:System.Object&gt; array whose length is more than the number of columns that are contained in the resulting row.","pos":[370,506],"source":" You can also pass an <xref:System.Object> array whose length is more than the number of columns that are contained in the resulting row."}]}]},{"pos":[29792,29859],"content":"An array of <xref:System.Object> to copy the attribute fields into.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of &lt;xref:System.Object&gt; to copy the attribute fields into.","pos":[0,67],"source":"An array of <xref:System.Object> to copy the attribute fields into."}]},{"pos":[29916,29977],"content":"The number of instances of <xref:System.Object> in the array.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of instances of &lt;xref:System.Object&gt; in the array.","pos":[0,61],"source":"The number of instances of <xref:System.Object> in the array."}]},{"pos":[30403,30453],"content":"Return whether the specified field is set to null.","needQuote":true,"needEscape":true,"nodes":[{"content":"Return whether the specified field is set to null.","pos":[0,50]}]},{"pos":[30465,30719],"content":"Call this method to see if there are null column values before calling the typed get methods (for example, <xref:System.Data.SqlClient.SqlDataReader.GetByte%2A>, <xref:System.Data.SqlClient.SqlDataReader.GetChar%2A>, and so on) to avoid raising an error.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Call this method to see if there are null column values before calling the typed get methods (for example, &lt;xref:System.Data.SqlClient.SqlDataReader.GetByte%2A&gt;, &lt;xref:System.Data.SqlClient.SqlDataReader.GetChar%2A&gt;, and so on) to avoid raising an error.","pos":[0,254],"source":"Call this method to see if there are null column values before calling the typed get methods (for example, <xref:System.Data.SqlClient.SqlDataReader.GetByte%2A>, <xref:System.Data.SqlClient.SqlDataReader.GetChar%2A>, and so on) to avoid raising an error."}]},{"pos":[30845,30876],"content":"The index of the field to find.","needQuote":true,"needEscape":true,"nodes":[{"content":"The index of the field to find.","pos":[0,31]}]},{"pos":[30935,31109],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the specified field is set to null; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified field is set to null; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[31278,31373],"content":"The index passed was outside the range of 0 through <xref:System.Data.IDataRecord.FieldCount*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The index passed was outside the range of 0 through &lt;xref:System.Data.IDataRecord.FieldCount*&gt;.","pos":[0,95],"source":"The index passed was outside the range of 0 through <xref:System.Data.IDataRecord.FieldCount*>."}]},{"pos":[31717,31764],"content":"Gets the column located at the specified index.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the column located at the specified index.","pos":[0,47]}]},{"pos":[31895,31937],"content":"The zero-based index of the column to get.","needQuote":true,"needEscape":true,"nodes":[{"content":"The zero-based index of the column to get.","pos":[0,42]}]},{"pos":[31995,32064],"content":"The column located at the specified index as an <xref:System.Object>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The column located at the specified index as an &lt;xref:System.Object&gt;.","pos":[0,69],"source":"The column located at the specified index as an <xref:System.Object>."}]},{"pos":[32229,32324],"content":"The index passed was outside the range of 0 through <xref:System.Data.IDataRecord.FieldCount*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The index passed was outside the range of 0 through &lt;xref:System.Data.IDataRecord.FieldCount*&gt;.","pos":[0,95],"source":"The index passed was outside the range of 0 through <xref:System.Data.IDataRecord.FieldCount*>."}]},{"pos":[32673,32713],"content":"Gets the column with the specified name.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the column with the specified name.","pos":[0,40]}]},{"pos":[32726,32871],"content":"A case-sensitive lookup is performed first. If it fails, a second case-insensitive search is made.       This method is kana-width insensitive.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"A case-sensitive lookup is performed first. If it fails, a second case-insensitive search is made.       This method is kana-width insensitive.","pos":[0,143],"nodes":[{"content":"A case-sensitive lookup is performed first.","pos":[0,43]},{"content":"If it fails, a second case-insensitive search is made.","pos":[44,98]},{"content":"This method is kana-width insensitive.","pos":[105,143]}]}]},{"pos":[33013,33044],"content":"The name of the column to find.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the column to find.","pos":[0,31]}]},{"pos":[33102,33164],"content":"The column with the specified name as an <xref:System.Object>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The column with the specified name as an &lt;xref:System.Object&gt;.","pos":[0,62],"source":"The column with the specified name as an <xref:System.Object>."}]},{"pos":[33329,33373],"content":"No column with the specified name was found.","needQuote":true,"needEscape":true,"nodes":[{"content":"No column with the specified name was found.","pos":[0,44]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Data.IDataRecord\n  id: IDataRecord\n  children:\n  - System.Data.IDataRecord.FieldCount\n  - System.Data.IDataRecord.GetBoolean(System.Int32)\n  - System.Data.IDataRecord.GetByte(System.Int32)\n  - System.Data.IDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)\n  - System.Data.IDataRecord.GetChar(System.Int32)\n  - System.Data.IDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)\n  - System.Data.IDataRecord.GetData(System.Int32)\n  - System.Data.IDataRecord.GetDataTypeName(System.Int32)\n  - System.Data.IDataRecord.GetDateTime(System.Int32)\n  - System.Data.IDataRecord.GetDecimal(System.Int32)\n  - System.Data.IDataRecord.GetDouble(System.Int32)\n  - System.Data.IDataRecord.GetFieldType(System.Int32)\n  - System.Data.IDataRecord.GetFloat(System.Int32)\n  - System.Data.IDataRecord.GetGuid(System.Int32)\n  - System.Data.IDataRecord.GetInt16(System.Int32)\n  - System.Data.IDataRecord.GetInt32(System.Int32)\n  - System.Data.IDataRecord.GetInt64(System.Int32)\n  - System.Data.IDataRecord.GetName(System.Int32)\n  - System.Data.IDataRecord.GetOrdinal(System.String)\n  - System.Data.IDataRecord.GetString(System.Int32)\n  - System.Data.IDataRecord.GetValue(System.Int32)\n  - System.Data.IDataRecord.GetValues(System.Object[])\n  - System.Data.IDataRecord.IsDBNull(System.Int32)\n  - System.Data.IDataRecord.Item(System.Int32)\n  - System.Data.IDataRecord.Item(System.String)\n  langs:\n  - csharp\n  name: IDataRecord\n  nameWithType: IDataRecord\n  fullName: System.Data.IDataRecord\n  type: Interface\n  summary: Provides access to the column values within each row for a <xref uid=\"langword_csharp_DataReader\" name=\"DataReader\" href=\"\"></xref>, and is implemented by .NET Framework data providers that access relational databases.\n  remarks: \"The <xref:System.Data.IDataReader> and IDataRecord interfaces enable an inheriting class to implement a `DataReader` class. This provides a way of reading one or more forward-only streams of result sets. For more information about `DataReader` classes, see [Retrieving Data Using a DataReader](~/add/includes/ajax-current-ext-md.md).  \\n  \\n An application does not create an instance of the IDataRecord interface directly, but creates an instance of a class that inherits IDataRecord. Typically, you do this by obtaining a `DataReader` through the `ExecuteReader` method of the `Command` object.  \\n  \\n Classes that inherit IDataRecord must implement all inherited members, and typically define additional members to add provider-specific functionality.  \\n  \\n Providers implementing a `DataReader` are required to expose data in common language runtime (CLR) types. Type coercion is defined for some types not included in the CLR. These values may be accessed as alternative types that comply with CLR types. As an example, the following table lists suggested mappings from OLE DB data types to CLR types, with alternative types in parentheses.  \\n  \\n|OLE DB type|CLR type|  \\n|-----------------|--------------|  \\n|DBTYPE_BOOL|Int16|  \\n|DBTYPE_BSTR|string|  \\n|DBTYPE_BYTES|byte[]|  \\n|DBTYPE_CY|Decimal|  \\n|DBTYPE_DATE|DateTime|  \\n|DBTYPE_DBDATE|DateTime|  \\n|DBTYPE_DBTIME|DateTime|  \\n|DBTYPE_DBTIMESTAMP|DateTime|  \\n|DBTYPE_DECIMAL|Decimal|  \\n|DBTYPE_EMPTY|null|  \\n|DBTYPE_ERROR|ExternalException|  \\n|DBTYPE_FILETIME|DateTime|  \\n|DBTYPE_GUID|Guid|  \\n|DBTYPE_HCHAPTER|not supported|  \\n|DBTYPE_I1|SByte|  \\n|DBTYPE_I2|Int16|  \\n|DBTYPE_I4|Int32|  \\n|DBTYPE_I8|Int64|  \\n|DBTYPE_IDISPATCH|object|  \\n|DBTYPE_IUNKNOWN|object|  \\n|DBTYPE_NULL|DBNull.Value|  \\n|DBTYPE_NUMERIC|Decimal|  \\n|DBTYPE_PROPVARIANT|object|  \\n|DBTYPE_R4|Single|  \\n|DBTYPE_R8|Double|  \\n|DBTYPE_STR|string|  \\n|DBTYPE_UDT|not supported|  \\n|DBTYPE_UI1|byte (Int16)|  \\n|DBTYPE_UI2|UInt16 (Int32)|  \\n|DBTYPE_UI4|UInt32 (Int64)|  \\n|DBTYPE_UI8|UInt64 (Decimal)|  \\n|DBTYPE_VARIANT|object|  \\n|DBTYPE_VARNUMERIC|not supported|  \\n|DBTYPE_WSTR|string|\"\n  example:\n  - \"The following example creates instances of the derived classes, <xref:System.Data.SqlClient.SqlConnection>, <xref:System.Data.SqlClient.SqlCommand>, and <xref:System.Data.SqlClient.SqlDataReader>. The example reads through the data, writing it out to the console. Finally, the example closes the <xref:System.Data.SqlClient.SqlDataReader>, and then the <xref:System.Data.SqlClient.SqlConnection>.  \\n  \\n [!code-cs[Classic WebData SqlDataReader.Read Example#1](~/add/codesnippet/csharp/t-system.data.idatarecord_1.cs)]\\n [!code-vb[Classic WebData SqlDataReader.Read Example#1](~/add/codesnippet/visualbasic/t-system.data.idatarecord_1.vb)]\"\n  syntax:\n    content: public interface IDataRecord\n  implements: []\n  platform:\n  - net462\n- uid: System.Data.IDataRecord.FieldCount\n  id: FieldCount\n  parent: System.Data.IDataRecord\n  langs:\n  - csharp\n  name: FieldCount\n  nameWithType: IDataRecord.FieldCount\n  fullName: System.Data.IDataRecord.FieldCount\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets the number of columns in the current row.\n  remarks: After executing a query that does not return rows (for example, using the <xref:System.Data.IDbCommand.ExecuteNonQuery%2A> method), FieldCount returns -1.\n  syntax:\n    content: public int FieldCount { get; }\n    return:\n      type: System.Int32\n      description: When not positioned in a valid recordset, 0; otherwise, the number of columns in the current record. The default is -1.\n  overload: System.Data.IDataRecord.FieldCount*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.IDataRecord.GetBoolean(System.Int32)\n  id: GetBoolean(System.Int32)\n  parent: System.Data.IDataRecord\n  langs:\n  - csharp\n  name: GetBoolean(Int32)\n  nameWithType: IDataRecord.GetBoolean(Int32)\n  fullName: System.Data.IDataRecord.GetBoolean(Int32)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets the value of the specified column as a Boolean.\n  remarks: No conversions are performed. Therefore, the data retrieved must already be a Boolean; otherwise an exception is generated.\n  syntax:\n    content: public bool GetBoolean (int i);\n    parameters:\n    - id: i\n      type: System.Int32\n      description: The zero-based column ordinal.\n    return:\n      type: System.Boolean\n      description: The value of the column.\n  overload: System.Data.IDataRecord.GetBoolean*\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: The index passed was outside the range of 0 through <xref:System.Data.IDataRecord.FieldCount*>.\n  platform:\n  - net462\n- uid: System.Data.IDataRecord.GetByte(System.Int32)\n  id: GetByte(System.Int32)\n  parent: System.Data.IDataRecord\n  langs:\n  - csharp\n  name: GetByte(Int32)\n  nameWithType: IDataRecord.GetByte(Int32)\n  fullName: System.Data.IDataRecord.GetByte(Int32)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets the 8-bit unsigned integer value of the specified column.\n  syntax:\n    content: public byte GetByte (int i);\n    parameters:\n    - id: i\n      type: System.Int32\n      description: The zero-based column ordinal.\n    return:\n      type: System.Byte\n      description: The 8-bit unsigned integer value of the specified column.\n  overload: System.Data.IDataRecord.GetByte*\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: The index passed was outside the range of 0 through <xref:System.Data.IDataRecord.FieldCount*>.\n  platform:\n  - net462\n- uid: System.Data.IDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)\n  id: GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)\n  parent: System.Data.IDataRecord\n  langs:\n  - csharp\n  name: GetBytes(Int32,Int64,Byte[],Int32,Int32)\n  nameWithType: IDataRecord.GetBytes(Int32,Int64,Byte[],Int32,Int32)\n  fullName: System.Data.IDataRecord.GetBytes(Int32,Int64,Byte[],Int32,Int32)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Reads a stream of bytes from the specified column offset into the buffer as an array, starting at the given buffer offset.\n  remarks: \"GetBytes returns the number of available bytes in the field. Frequently this is the exact length of the field. However, the number returned may be less than the true length of the field if `GetBytes` has already been used to obtain bytes from the field.  \\n  \\n If you pass a buffer that is `null`, GetBytes returns the length of the row in bytes.  \\n  \\n No conversions are performed; therefore the data retrieved must already be a byte array.\"\n  syntax:\n    content: public long GetBytes (int i, long fieldOffset, byte[] buffer, int bufferoffset, int length);\n    parameters:\n    - id: i\n      type: System.Int32\n      description: The zero-based column ordinal.\n    - id: fieldOffset\n      type: System.Int64\n      description: The index within the field from which to start the read operation.\n    - id: buffer\n      type: System.Byte[]\n      description: The buffer into which to read the stream of bytes.\n    - id: bufferoffset\n      type: System.Int32\n      description: The index for `buffer` to start the read operation.\n    - id: length\n      type: System.Int32\n      description: The number of bytes to read.\n    return:\n      type: System.Int64\n      description: The actual number of bytes read.\n  overload: System.Data.IDataRecord.GetBytes*\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: The index passed was outside the range of 0 through <xref:System.Data.IDataRecord.FieldCount*>.\n  platform:\n  - net462\n- uid: System.Data.IDataRecord.GetChar(System.Int32)\n  id: GetChar(System.Int32)\n  parent: System.Data.IDataRecord\n  langs:\n  - csharp\n  name: GetChar(Int32)\n  nameWithType: IDataRecord.GetChar(Int32)\n  fullName: System.Data.IDataRecord.GetChar(Int32)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets the character value of the specified column.\n  syntax:\n    content: public char GetChar (int i);\n    parameters:\n    - id: i\n      type: System.Int32\n      description: The zero-based column ordinal.\n    return:\n      type: System.Char\n      description: The character value of the specified column.\n  overload: System.Data.IDataRecord.GetChar*\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: The index passed was outside the range of 0 through <xref:System.Data.IDataRecord.FieldCount*>.\n  platform:\n  - net462\n- uid: System.Data.IDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)\n  id: GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)\n  parent: System.Data.IDataRecord\n  langs:\n  - csharp\n  name: GetChars(Int32,Int64,Char[],Int32,Int32)\n  nameWithType: IDataRecord.GetChars(Int32,Int64,Char[],Int32,Int32)\n  fullName: System.Data.IDataRecord.GetChars(Int32,Int64,Char[],Int32,Int32)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Reads a stream of characters from the specified column offset into the buffer as an array, starting at the given buffer offset.\n  remarks: \"GetChars returns the number of available characters in the field. Frequently this is the exact length of the field. However, the number returned may be less than the exact length of the field if `GetChars` has already been used to obtain characters from the field.  \\n  \\n If you pass a buffer that is `null`, `GetChars` returns the length of the field in characters.  \\n  \\n No conversions are performed; therefore the data retrieved must already be a character array.\"\n  syntax:\n    content: public long GetChars (int i, long fieldoffset, char[] buffer, int bufferoffset, int length);\n    parameters:\n    - id: i\n      type: System.Int32\n      description: The zero-based column ordinal.\n    - id: fieldoffset\n      type: System.Int64\n      description: The index within the row from which to start the read operation.\n    - id: buffer\n      type: System.Char[]\n      description: The buffer into which to read the stream of bytes.\n    - id: bufferoffset\n      type: System.Int32\n      description: The index for `buffer` to start the read operation.\n    - id: length\n      type: System.Int32\n      description: The number of bytes to read.\n    return:\n      type: System.Int64\n      description: The actual number of characters read.\n  overload: System.Data.IDataRecord.GetChars*\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: The index passed was outside the range of 0 through <xref:System.Data.IDataRecord.FieldCount*>.\n  platform:\n  - net462\n- uid: System.Data.IDataRecord.GetData(System.Int32)\n  id: GetData(System.Int32)\n  parent: System.Data.IDataRecord\n  langs:\n  - csharp\n  name: GetData(Int32)\n  nameWithType: IDataRecord.GetData(Int32)\n  fullName: System.Data.IDataRecord.GetData(Int32)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Returns an <xref href=\"System.Data.IDataReader\"></xref> for the specified column ordinal.\n  syntax:\n    content: public System.Data.IDataReader GetData (int i);\n    parameters:\n    - id: i\n      type: System.Int32\n      description: The index of the field to find.\n    return:\n      type: System.Data.IDataReader\n      description: The <xref href=\"System.Data.IDataReader\"></xref> for the specified column ordinal.\n  overload: System.Data.IDataRecord.GetData*\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: The index passed was outside the range of 0 through <xref:System.Data.IDataRecord.FieldCount*>.\n  platform:\n  - net462\n- uid: System.Data.IDataRecord.GetDataTypeName(System.Int32)\n  id: GetDataTypeName(System.Int32)\n  parent: System.Data.IDataRecord\n  langs:\n  - csharp\n  name: GetDataTypeName(Int32)\n  nameWithType: IDataRecord.GetDataTypeName(Int32)\n  fullName: System.Data.IDataRecord.GetDataTypeName(Int32)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets the data type information for the specified field.\n  remarks: The data type information can differ from the type information returned by `GetFieldType`, especially where the underlying data types do not map one for one to the runtime types supported by the language. (for example, `DataTypeName` may be \"integer\", while `Type.Name` may be \"Int32\".)\n  syntax:\n    content: public string GetDataTypeName (int i);\n    parameters:\n    - id: i\n      type: System.Int32\n      description: The index of the field to find.\n    return:\n      type: System.String\n      description: The data type information for the specified field.\n  overload: System.Data.IDataRecord.GetDataTypeName*\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: The index passed was outside the range of 0 through <xref:System.Data.IDataRecord.FieldCount*>.\n  platform:\n  - net462\n- uid: System.Data.IDataRecord.GetDateTime(System.Int32)\n  id: GetDateTime(System.Int32)\n  parent: System.Data.IDataRecord\n  langs:\n  - csharp\n  name: GetDateTime(Int32)\n  nameWithType: IDataRecord.GetDateTime(Int32)\n  fullName: System.Data.IDataRecord.GetDateTime(Int32)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets the date and time data value of the specified field.\n  syntax:\n    content: public DateTime GetDateTime (int i);\n    parameters:\n    - id: i\n      type: System.Int32\n      description: The index of the field to find.\n    return:\n      type: System.DateTime\n      description: The date and time data value of the specified field.\n  overload: System.Data.IDataRecord.GetDateTime*\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: The index passed was outside the range of 0 through <xref:System.Data.IDataRecord.FieldCount*>.\n  platform:\n  - net462\n- uid: System.Data.IDataRecord.GetDecimal(System.Int32)\n  id: GetDecimal(System.Int32)\n  parent: System.Data.IDataRecord\n  langs:\n  - csharp\n  name: GetDecimal(Int32)\n  nameWithType: IDataRecord.GetDecimal(Int32)\n  fullName: System.Data.IDataRecord.GetDecimal(Int32)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets the fixed-position numeric value of the specified field.\n  syntax:\n    content: public decimal GetDecimal (int i);\n    parameters:\n    - id: i\n      type: System.Int32\n      description: The index of the field to find.\n    return:\n      type: System.Decimal\n      description: The fixed-position numeric value of the specified field.\n  overload: System.Data.IDataRecord.GetDecimal*\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: The index passed was outside the range of 0 through <xref:System.Data.IDataRecord.FieldCount*>.\n  platform:\n  - net462\n- uid: System.Data.IDataRecord.GetDouble(System.Int32)\n  id: GetDouble(System.Int32)\n  parent: System.Data.IDataRecord\n  langs:\n  - csharp\n  name: GetDouble(Int32)\n  nameWithType: IDataRecord.GetDouble(Int32)\n  fullName: System.Data.IDataRecord.GetDouble(Int32)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets the double-precision floating point number of the specified field.\n  syntax:\n    content: public double GetDouble (int i);\n    parameters:\n    - id: i\n      type: System.Int32\n      description: The index of the field to find.\n    return:\n      type: System.Double\n      description: The double-precision floating point number of the specified field.\n  overload: System.Data.IDataRecord.GetDouble*\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: The index passed was outside the range of 0 through <xref:System.Data.IDataRecord.FieldCount*>.\n  platform:\n  - net462\n- uid: System.Data.IDataRecord.GetFieldType(System.Int32)\n  id: GetFieldType(System.Int32)\n  parent: System.Data.IDataRecord\n  langs:\n  - csharp\n  name: GetFieldType(Int32)\n  nameWithType: IDataRecord.GetFieldType(Int32)\n  fullName: System.Data.IDataRecord.GetFieldType(Int32)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets the <xref:System.Type> information corresponding to the type of <xref:System.Object> that would be returned from <xref:System.Data.IDataRecord.GetValue*>.\n  remarks: This information can be used to increase performance by indicating the strongly-typed accessor to call. (for example, using `GetInt32` is roughly ten times faster than using `GetValue`.)\n  syntax:\n    content: public Type GetFieldType (int i);\n    parameters:\n    - id: i\n      type: System.Int32\n      description: The index of the field to find.\n    return:\n      type: System.Type\n      description: The <xref:System.Type> information corresponding to the type of <xref:System.Object> that would be returned from <xref:System.Data.IDataRecord.GetValue*>.\n  overload: System.Data.IDataRecord.GetFieldType*\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: The index passed was outside the range of 0 through <xref:System.Data.IDataRecord.FieldCount*>.\n  platform:\n  - net462\n- uid: System.Data.IDataRecord.GetFloat(System.Int32)\n  id: GetFloat(System.Int32)\n  parent: System.Data.IDataRecord\n  langs:\n  - csharp\n  name: GetFloat(Int32)\n  nameWithType: IDataRecord.GetFloat(Int32)\n  fullName: System.Data.IDataRecord.GetFloat(Int32)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets the single-precision floating point number of the specified field.\n  syntax:\n    content: public float GetFloat (int i);\n    parameters:\n    - id: i\n      type: System.Int32\n      description: The index of the field to find.\n    return:\n      type: System.Single\n      description: The single-precision floating point number of the specified field.\n  overload: System.Data.IDataRecord.GetFloat*\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: The index passed was outside the range of 0 through <xref:System.Data.IDataRecord.FieldCount*>.\n  platform:\n  - net462\n- uid: System.Data.IDataRecord.GetGuid(System.Int32)\n  id: GetGuid(System.Int32)\n  parent: System.Data.IDataRecord\n  langs:\n  - csharp\n  name: GetGuid(Int32)\n  nameWithType: IDataRecord.GetGuid(Int32)\n  fullName: System.Data.IDataRecord.GetGuid(Int32)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Returns the GUID value of the specified field.\n  syntax:\n    content: public Guid GetGuid (int i);\n    parameters:\n    - id: i\n      type: System.Int32\n      description: The index of the field to find.\n    return:\n      type: System.Guid\n      description: The GUID value of the specified field.\n  overload: System.Data.IDataRecord.GetGuid*\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: The index passed was outside the range of 0 through <xref:System.Data.IDataRecord.FieldCount*>.\n  platform:\n  - net462\n- uid: System.Data.IDataRecord.GetInt16(System.Int32)\n  id: GetInt16(System.Int32)\n  parent: System.Data.IDataRecord\n  langs:\n  - csharp\n  name: GetInt16(Int32)\n  nameWithType: IDataRecord.GetInt16(Int32)\n  fullName: System.Data.IDataRecord.GetInt16(Int32)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets the 16-bit signed integer value of the specified field.\n  syntax:\n    content: public short GetInt16 (int i);\n    parameters:\n    - id: i\n      type: System.Int32\n      description: The index of the field to find.\n    return:\n      type: System.Int16\n      description: The 16-bit signed integer value of the specified field.\n  overload: System.Data.IDataRecord.GetInt16*\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: The index passed was outside the range of 0 through <xref:System.Data.IDataRecord.FieldCount*>.\n  platform:\n  - net462\n- uid: System.Data.IDataRecord.GetInt32(System.Int32)\n  id: GetInt32(System.Int32)\n  parent: System.Data.IDataRecord\n  langs:\n  - csharp\n  name: GetInt32(Int32)\n  nameWithType: IDataRecord.GetInt32(Int32)\n  fullName: System.Data.IDataRecord.GetInt32(Int32)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets the 32-bit signed integer value of the specified field.\n  syntax:\n    content: public int GetInt32 (int i);\n    parameters:\n    - id: i\n      type: System.Int32\n      description: The index of the field to find.\n    return:\n      type: System.Int32\n      description: The 32-bit signed integer value of the specified field.\n  overload: System.Data.IDataRecord.GetInt32*\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: The index passed was outside the range of 0 through <xref:System.Data.IDataRecord.FieldCount*>.\n  platform:\n  - net462\n- uid: System.Data.IDataRecord.GetInt64(System.Int32)\n  id: GetInt64(System.Int32)\n  parent: System.Data.IDataRecord\n  langs:\n  - csharp\n  name: GetInt64(Int32)\n  nameWithType: IDataRecord.GetInt64(Int32)\n  fullName: System.Data.IDataRecord.GetInt64(Int32)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets the 64-bit signed integer value of the specified field.\n  syntax:\n    content: public long GetInt64 (int i);\n    parameters:\n    - id: i\n      type: System.Int32\n      description: The index of the field to find.\n    return:\n      type: System.Int64\n      description: The 64-bit signed integer value of the specified field.\n  overload: System.Data.IDataRecord.GetInt64*\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: The index passed was outside the range of 0 through <xref:System.Data.IDataRecord.FieldCount*>.\n  platform:\n  - net462\n- uid: System.Data.IDataRecord.GetName(System.Int32)\n  id: GetName(System.Int32)\n  parent: System.Data.IDataRecord\n  langs:\n  - csharp\n  name: GetName(Int32)\n  nameWithType: IDataRecord.GetName(Int32)\n  fullName: System.Data.IDataRecord.GetName(Int32)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets the name for the field to find.\n  syntax:\n    content: public string GetName (int i);\n    parameters:\n    - id: i\n      type: System.Int32\n      description: The index of the field to find.\n    return:\n      type: System.String\n      description: The name of the field or the empty string (\"\"), if there is no value to return.\n  overload: System.Data.IDataRecord.GetName*\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: The index passed was outside the range of 0 through <xref:System.Data.IDataRecord.FieldCount*>.\n  platform:\n  - net462\n- uid: System.Data.IDataRecord.GetOrdinal(System.String)\n  id: GetOrdinal(System.String)\n  parent: System.Data.IDataRecord\n  langs:\n  - csharp\n  name: GetOrdinal(String)\n  nameWithType: IDataRecord.GetOrdinal(String)\n  fullName: System.Data.IDataRecord.GetOrdinal(String)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Return the index of the named field.\n  remarks: \"`GetOrdinal` performs a case-sensitive lookup first. If it fails, a second case-insensitive search is made. `GetOrdinal` is kana-width insensitive. If the index of the named field is not found, an `IndexOutOfRangeException` is thrown.  \\n  \\n Because ordinal-based lookups are more efficient than named lookups, it is inefficient to call `GetOrdinal` within a loop. Save time by calling `GetOrdinal` one time and assigning the results to an integer variable for use within the loop.\"\n  example:\n  - \"The following example demonstrates how to use the inherited <xref:System.Data.Odbc.OdbcDataReader.GetOrdinal%2A> method.  \\n  \\n [!code-vb[Classic WebData OdbcDataReader.GetOrdinal#1](~/add/codesnippet/visualbasic/m-system.data.idatarecor_1.vb)]\\n [!code-cs[Classic WebData OdbcDataReader.GetOrdinal#1](~/add/codesnippet/csharp/m-system.data.idatarecor_1.cs)]\"\n  syntax:\n    content: public int GetOrdinal (string name);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the field to find.\n    return:\n      type: System.Int32\n      description: The index of the named field.\n  overload: System.Data.IDataRecord.GetOrdinal*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.IDataRecord.GetString(System.Int32)\n  id: GetString(System.Int32)\n  parent: System.Data.IDataRecord\n  langs:\n  - csharp\n  name: GetString(Int32)\n  nameWithType: IDataRecord.GetString(Int32)\n  fullName: System.Data.IDataRecord.GetString(Int32)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets the string value of the specified field.\n  syntax:\n    content: public string GetString (int i);\n    parameters:\n    - id: i\n      type: System.Int32\n      description: The index of the field to find.\n    return:\n      type: System.String\n      description: The string value of the specified field.\n  overload: System.Data.IDataRecord.GetString*\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: The index passed was outside the range of 0 through <xref:System.Data.IDataRecord.FieldCount*>.\n  platform:\n  - net462\n- uid: System.Data.IDataRecord.GetValue(System.Int32)\n  id: GetValue(System.Int32)\n  parent: System.Data.IDataRecord\n  langs:\n  - csharp\n  name: GetValue(Int32)\n  nameWithType: IDataRecord.GetValue(Int32)\n  fullName: System.Data.IDataRecord.GetValue(Int32)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Return the value of the specified field.\n  syntax:\n    content: public object GetValue (int i);\n    parameters:\n    - id: i\n      type: System.Int32\n      description: The index of the field to find.\n    return:\n      type: System.Object\n      description: The <xref:System.Object> which will contain the field value upon return.\n  overload: System.Data.IDataRecord.GetValue*\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: The index passed was outside the range of 0 through <xref:System.Data.IDataRecord.FieldCount*>.\n  platform:\n  - net462\n- uid: System.Data.IDataRecord.GetValues(System.Object[])\n  id: GetValues(System.Object[])\n  parent: System.Data.IDataRecord\n  langs:\n  - csharp\n  name: GetValues(Object[])\n  nameWithType: IDataRecord.GetValues(Object[])\n  fullName: System.Data.IDataRecord.GetValues(Object[])\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Populates an array of objects with the column values of the current record.\n  remarks: \"For most applications, the GetValues method provides an efficient means for retrieving all columns, instead of retrieving each column individually.  \\n  \\n You can pass an <xref:System.Object> array that contains fewer than the number of columns that are contained in the resulting row. Only the amount of data the <xref:System.Object> array holds is copied to the array. You can also pass an <xref:System.Object> array whose length is more than the number of columns that are contained in the resulting row.\"\n  syntax:\n    content: public int GetValues (object[] values);\n    parameters:\n    - id: values\n      type: System.Object[]\n      description: An array of <xref:System.Object> to copy the attribute fields into.\n    return:\n      type: System.Int32\n      description: The number of instances of <xref:System.Object> in the array.\n  overload: System.Data.IDataRecord.GetValues*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.IDataRecord.IsDBNull(System.Int32)\n  id: IsDBNull(System.Int32)\n  parent: System.Data.IDataRecord\n  langs:\n  - csharp\n  name: IsDBNull(Int32)\n  nameWithType: IDataRecord.IsDBNull(Int32)\n  fullName: System.Data.IDataRecord.IsDBNull(Int32)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Return whether the specified field is set to null.\n  remarks: Call this method to see if there are null column values before calling the typed get methods (for example, <xref:System.Data.SqlClient.SqlDataReader.GetByte%2A>, <xref:System.Data.SqlClient.SqlDataReader.GetChar%2A>, and so on) to avoid raising an error.\n  syntax:\n    content: public bool IsDBNull (int i);\n    parameters:\n    - id: i\n      type: System.Int32\n      description: The index of the field to find.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified field is set to null; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Data.IDataRecord.IsDBNull*\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: The index passed was outside the range of 0 through <xref:System.Data.IDataRecord.FieldCount*>.\n  platform:\n  - net462\n- uid: System.Data.IDataRecord.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: System.Data.IDataRecord\n  langs:\n  - csharp\n  name: Item(Int32)\n  nameWithType: IDataRecord.Item(Int32)\n  fullName: System.Data.IDataRecord.Item(Int32)\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets the column located at the specified index.\n  syntax:\n    content: public object this[int i] { get; }\n    parameters:\n    - id: i\n      type: System.Int32\n      description: The zero-based index of the column to get.\n    return:\n      type: System.Object\n      description: The column located at the specified index as an <xref:System.Object>.\n  overload: System.Data.IDataRecord.Item*\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: The index passed was outside the range of 0 through <xref:System.Data.IDataRecord.FieldCount*>.\n  platform:\n  - net462\n- uid: System.Data.IDataRecord.Item(System.String)\n  id: Item(System.String)\n  parent: System.Data.IDataRecord\n  langs:\n  - csharp\n  name: Item(String)\n  nameWithType: IDataRecord.Item(String)\n  fullName: System.Data.IDataRecord.Item(String)\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data\n  summary: Gets the column with the specified name.\n  remarks: \"A case-sensitive lookup is performed first. If it fails, a second case-insensitive search is made.  \\n  \\n This method is kana-width insensitive.\"\n  syntax:\n    content: public object this[string name] { get; }\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the column to find.\n    return:\n      type: System.Object\n      description: The column with the specified name as an <xref:System.Object>.\n  overload: System.Data.IDataRecord.Item*\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: No column with the specified name was found.\n  platform:\n  - net462\nreferences:\n- uid: System.IndexOutOfRangeException\n  isExternal: true\n  name: System.IndexOutOfRangeException\n- uid: System.Data.IDataRecord.FieldCount\n  parent: System.Data.IDataRecord\n  isExternal: false\n  name: FieldCount\n  nameWithType: IDataRecord.FieldCount\n  fullName: System.Data.IDataRecord.FieldCount\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Data.IDataRecord.GetBoolean(System.Int32)\n  parent: System.Data.IDataRecord\n  isExternal: false\n  name: GetBoolean(Int32)\n  nameWithType: IDataRecord.GetBoolean(Int32)\n  fullName: System.Data.IDataRecord.GetBoolean(Int32)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Data.IDataRecord.GetByte(System.Int32)\n  parent: System.Data.IDataRecord\n  isExternal: false\n  name: GetByte(Int32)\n  nameWithType: IDataRecord.GetByte(Int32)\n  fullName: System.Data.IDataRecord.GetByte(Int32)\n- uid: System.Byte\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Data.IDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)\n  parent: System.Data.IDataRecord\n  isExternal: false\n  name: GetBytes(Int32,Int64,Byte[],Int32,Int32)\n  nameWithType: IDataRecord.GetBytes(Int32,Int64,Byte[],Int32,Int32)\n  fullName: System.Data.IDataRecord.GetBytes(Int32,Int64,Byte[],Int32,Int32)\n- uid: System.Int64\n  parent: System\n  isExternal: true\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.Byte[]\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: Byte[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Data.IDataRecord.GetChar(System.Int32)\n  parent: System.Data.IDataRecord\n  isExternal: false\n  name: GetChar(Int32)\n  nameWithType: IDataRecord.GetChar(Int32)\n  fullName: System.Data.IDataRecord.GetChar(Int32)\n- uid: System.Char\n  parent: System\n  isExternal: true\n  name: Char\n  nameWithType: Char\n  fullName: System.Char\n- uid: System.Data.IDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)\n  parent: System.Data.IDataRecord\n  isExternal: false\n  name: GetChars(Int32,Int64,Char[],Int32,Int32)\n  nameWithType: IDataRecord.GetChars(Int32,Int64,Char[],Int32,Int32)\n  fullName: System.Data.IDataRecord.GetChars(Int32,Int64,Char[],Int32,Int32)\n- uid: System.Char[]\n  parent: System\n  isExternal: true\n  name: Char\n  nameWithType: Char\n  fullName: System.Char[]\n  spec.csharp:\n  - uid: System.Char\n    name: Char\n    nameWithType: Char\n    fullName: Char[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Data.IDataRecord.GetData(System.Int32)\n  parent: System.Data.IDataRecord\n  isExternal: false\n  name: GetData(Int32)\n  nameWithType: IDataRecord.GetData(Int32)\n  fullName: System.Data.IDataRecord.GetData(Int32)\n- uid: System.Data.IDataReader\n  parent: System.Data\n  isExternal: false\n  name: IDataReader\n  nameWithType: IDataReader\n  fullName: System.Data.IDataReader\n- uid: System.Data.IDataRecord.GetDataTypeName(System.Int32)\n  parent: System.Data.IDataRecord\n  isExternal: false\n  name: GetDataTypeName(Int32)\n  nameWithType: IDataRecord.GetDataTypeName(Int32)\n  fullName: System.Data.IDataRecord.GetDataTypeName(Int32)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Data.IDataRecord.GetDateTime(System.Int32)\n  parent: System.Data.IDataRecord\n  isExternal: false\n  name: GetDateTime(Int32)\n  nameWithType: IDataRecord.GetDateTime(Int32)\n  fullName: System.Data.IDataRecord.GetDateTime(Int32)\n- uid: System.DateTime\n  parent: System\n  isExternal: true\n  name: DateTime\n  nameWithType: DateTime\n  fullName: System.DateTime\n- uid: System.Data.IDataRecord.GetDecimal(System.Int32)\n  parent: System.Data.IDataRecord\n  isExternal: false\n  name: GetDecimal(Int32)\n  nameWithType: IDataRecord.GetDecimal(Int32)\n  fullName: System.Data.IDataRecord.GetDecimal(Int32)\n- uid: System.Decimal\n  parent: System\n  isExternal: true\n  name: Decimal\n  nameWithType: Decimal\n  fullName: System.Decimal\n- uid: System.Data.IDataRecord.GetDouble(System.Int32)\n  parent: System.Data.IDataRecord\n  isExternal: false\n  name: GetDouble(Int32)\n  nameWithType: IDataRecord.GetDouble(Int32)\n  fullName: System.Data.IDataRecord.GetDouble(Int32)\n- uid: System.Double\n  parent: System\n  isExternal: true\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: System.Data.IDataRecord.GetFieldType(System.Int32)\n  parent: System.Data.IDataRecord\n  isExternal: false\n  name: GetFieldType(Int32)\n  nameWithType: IDataRecord.GetFieldType(Int32)\n  fullName: System.Data.IDataRecord.GetFieldType(Int32)\n- uid: System.Type\n  parent: System\n  isExternal: true\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Data.IDataRecord.GetFloat(System.Int32)\n  parent: System.Data.IDataRecord\n  isExternal: false\n  name: GetFloat(Int32)\n  nameWithType: IDataRecord.GetFloat(Int32)\n  fullName: System.Data.IDataRecord.GetFloat(Int32)\n- uid: System.Single\n  parent: System\n  isExternal: true\n  name: Single\n  nameWithType: Single\n  fullName: System.Single\n- uid: System.Data.IDataRecord.GetGuid(System.Int32)\n  parent: System.Data.IDataRecord\n  isExternal: false\n  name: GetGuid(Int32)\n  nameWithType: IDataRecord.GetGuid(Int32)\n  fullName: System.Data.IDataRecord.GetGuid(Int32)\n- uid: System.Guid\n  parent: System\n  isExternal: true\n  name: Guid\n  nameWithType: Guid\n  fullName: System.Guid\n- uid: System.Data.IDataRecord.GetInt16(System.Int32)\n  parent: System.Data.IDataRecord\n  isExternal: false\n  name: GetInt16(Int32)\n  nameWithType: IDataRecord.GetInt16(Int32)\n  fullName: System.Data.IDataRecord.GetInt16(Int32)\n- uid: System.Int16\n  parent: System\n  isExternal: true\n  name: Int16\n  nameWithType: Int16\n  fullName: System.Int16\n- uid: System.Data.IDataRecord.GetInt32(System.Int32)\n  parent: System.Data.IDataRecord\n  isExternal: false\n  name: GetInt32(Int32)\n  nameWithType: IDataRecord.GetInt32(Int32)\n  fullName: System.Data.IDataRecord.GetInt32(Int32)\n- uid: System.Data.IDataRecord.GetInt64(System.Int32)\n  parent: System.Data.IDataRecord\n  isExternal: false\n  name: GetInt64(Int32)\n  nameWithType: IDataRecord.GetInt64(Int32)\n  fullName: System.Data.IDataRecord.GetInt64(Int32)\n- uid: System.Data.IDataRecord.GetName(System.Int32)\n  parent: System.Data.IDataRecord\n  isExternal: false\n  name: GetName(Int32)\n  nameWithType: IDataRecord.GetName(Int32)\n  fullName: System.Data.IDataRecord.GetName(Int32)\n- uid: System.Data.IDataRecord.GetOrdinal(System.String)\n  parent: System.Data.IDataRecord\n  isExternal: false\n  name: GetOrdinal(String)\n  nameWithType: IDataRecord.GetOrdinal(String)\n  fullName: System.Data.IDataRecord.GetOrdinal(String)\n- uid: System.Data.IDataRecord.GetString(System.Int32)\n  parent: System.Data.IDataRecord\n  isExternal: false\n  name: GetString(Int32)\n  nameWithType: IDataRecord.GetString(Int32)\n  fullName: System.Data.IDataRecord.GetString(Int32)\n- uid: System.Data.IDataRecord.GetValue(System.Int32)\n  parent: System.Data.IDataRecord\n  isExternal: false\n  name: GetValue(Int32)\n  nameWithType: IDataRecord.GetValue(Int32)\n  fullName: System.Data.IDataRecord.GetValue(Int32)\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Data.IDataRecord.GetValues(System.Object[])\n  parent: System.Data.IDataRecord\n  isExternal: false\n  name: GetValues(Object[])\n  nameWithType: IDataRecord.GetValues(Object[])\n  fullName: System.Data.IDataRecord.GetValues(Object[])\n- uid: System.Object[]\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object[]\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: Object[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Data.IDataRecord.IsDBNull(System.Int32)\n  parent: System.Data.IDataRecord\n  isExternal: false\n  name: IsDBNull(Int32)\n  nameWithType: IDataRecord.IsDBNull(Int32)\n  fullName: System.Data.IDataRecord.IsDBNull(Int32)\n- uid: System.Data.IDataRecord.Item(System.Int32)\n  parent: System.Data.IDataRecord\n  isExternal: false\n  name: Item(Int32)\n  nameWithType: IDataRecord.Item(Int32)\n  fullName: System.Data.IDataRecord.Item(Int32)\n- uid: System.Data.IDataRecord.Item(System.String)\n  parent: System.Data.IDataRecord\n  isExternal: false\n  name: Item(String)\n  nameWithType: IDataRecord.Item(String)\n  fullName: System.Data.IDataRecord.Item(String)\n- uid: System.Data.IDataRecord.FieldCount*\n  parent: System.Data.IDataRecord\n  isExternal: false\n  name: FieldCount\n  nameWithType: IDataRecord.FieldCount\n- uid: System.Data.IDataRecord.GetBoolean*\n  parent: System.Data.IDataRecord\n  isExternal: false\n  name: GetBoolean\n  nameWithType: IDataRecord.GetBoolean\n- uid: System.Data.IDataRecord.GetByte*\n  parent: System.Data.IDataRecord\n  isExternal: false\n  name: GetByte\n  nameWithType: IDataRecord.GetByte\n- uid: System.Data.IDataRecord.GetBytes*\n  parent: System.Data.IDataRecord\n  isExternal: false\n  name: GetBytes\n  nameWithType: IDataRecord.GetBytes\n- uid: System.Data.IDataRecord.GetChar*\n  parent: System.Data.IDataRecord\n  isExternal: false\n  name: GetChar\n  nameWithType: IDataRecord.GetChar\n- uid: System.Data.IDataRecord.GetChars*\n  parent: System.Data.IDataRecord\n  isExternal: false\n  name: GetChars\n  nameWithType: IDataRecord.GetChars\n- uid: System.Data.IDataRecord.GetData*\n  parent: System.Data.IDataRecord\n  isExternal: false\n  name: GetData\n  nameWithType: IDataRecord.GetData\n- uid: System.Data.IDataRecord.GetDataTypeName*\n  parent: System.Data.IDataRecord\n  isExternal: false\n  name: GetDataTypeName\n  nameWithType: IDataRecord.GetDataTypeName\n- uid: System.Data.IDataRecord.GetDateTime*\n  parent: System.Data.IDataRecord\n  isExternal: false\n  name: GetDateTime\n  nameWithType: IDataRecord.GetDateTime\n- uid: System.Data.IDataRecord.GetDecimal*\n  parent: System.Data.IDataRecord\n  isExternal: false\n  name: GetDecimal\n  nameWithType: IDataRecord.GetDecimal\n- uid: System.Data.IDataRecord.GetDouble*\n  parent: System.Data.IDataRecord\n  isExternal: false\n  name: GetDouble\n  nameWithType: IDataRecord.GetDouble\n- uid: System.Data.IDataRecord.GetFieldType*\n  parent: System.Data.IDataRecord\n  isExternal: false\n  name: GetFieldType\n  nameWithType: IDataRecord.GetFieldType\n- uid: System.Data.IDataRecord.GetFloat*\n  parent: System.Data.IDataRecord\n  isExternal: false\n  name: GetFloat\n  nameWithType: IDataRecord.GetFloat\n- uid: System.Data.IDataRecord.GetGuid*\n  parent: System.Data.IDataRecord\n  isExternal: false\n  name: GetGuid\n  nameWithType: IDataRecord.GetGuid\n- uid: System.Data.IDataRecord.GetInt16*\n  parent: System.Data.IDataRecord\n  isExternal: false\n  name: GetInt16\n  nameWithType: IDataRecord.GetInt16\n- uid: System.Data.IDataRecord.GetInt32*\n  parent: System.Data.IDataRecord\n  isExternal: false\n  name: GetInt32\n  nameWithType: IDataRecord.GetInt32\n- uid: System.Data.IDataRecord.GetInt64*\n  parent: System.Data.IDataRecord\n  isExternal: false\n  name: GetInt64\n  nameWithType: IDataRecord.GetInt64\n- uid: System.Data.IDataRecord.GetName*\n  parent: System.Data.IDataRecord\n  isExternal: false\n  name: GetName\n  nameWithType: IDataRecord.GetName\n- uid: System.Data.IDataRecord.GetOrdinal*\n  parent: System.Data.IDataRecord\n  isExternal: false\n  name: GetOrdinal\n  nameWithType: IDataRecord.GetOrdinal\n- uid: System.Data.IDataRecord.GetString*\n  parent: System.Data.IDataRecord\n  isExternal: false\n  name: GetString\n  nameWithType: IDataRecord.GetString\n- uid: System.Data.IDataRecord.GetValue*\n  parent: System.Data.IDataRecord\n  isExternal: false\n  name: GetValue\n  nameWithType: IDataRecord.GetValue\n- uid: System.Data.IDataRecord.GetValues*\n  parent: System.Data.IDataRecord\n  isExternal: false\n  name: GetValues\n  nameWithType: IDataRecord.GetValues\n- uid: System.Data.IDataRecord.IsDBNull*\n  parent: System.Data.IDataRecord\n  isExternal: false\n  name: IsDBNull\n  nameWithType: IDataRecord.IsDBNull\n- uid: System.Data.IDataRecord.Item*\n  parent: System.Data.IDataRecord\n  isExternal: false\n  name: Item\n  nameWithType: IDataRecord.Item\n"}