{"nodes":[{"pos":[545,583],"content":"A base type for HTTP message handlers.","needQuote":true,"needEscape":true,"nodes":[{"content":"A base type for HTTP message handlers.","pos":[0,38]}]},{"pos":[596,2033],"content":"There are various HTTP message handles that can be used. These include the following.      1.  <xref:System.Net.Http.DelegatingHandler> - A class used to plug a handler into a handler chain.      2.  HttpMessageHandler - A simple to class to derive from that supports the most common requirements for most applications.      3.  <xref:System.Net.Http.HttpClientHandler> - A class that operates at the bottom of the handler chain that actually handles the HTTP transport operations.      4.  <xref:System.Net.Http.WebRequestHandler> - A specialty class that operates at the bottom of the handler chain class that handles HTTP transport operations with options that are specific to the <xref:System.Net.HttpWebRequest?displayProperty=fullName> object.       If developers derive classes from HttpMessageHandler and override the <xref:System.Net.Http.HttpMessageHandler.SendAsync%2A> method, they must make sure that <xref:System.Net.Http.HttpMessageHandler.SendAsync%2A> can get called concurrently by different threads.       This is necessary since methods on <xref:System.Net.Http.HttpClient> can be called concurrently and need a guarantee of thread safety. So if a handler is assigned to an <xref:System.Net.Http.HttpClient> instance, the <xref:System.Net.Http.HttpMessageHandler.SendAsync%2A> method of the handler may get called concurrently by the <xref:System.Net.Http.HttpClient> instance and needs to be thread safe.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"There are various HTTP message handles that can be used. These include the following.      1.  <xref:System.Net.Http.DelegatingHandler> - A class used to plug a handler into a handler chain.      2.  HttpMessageHandler - A simple to class to derive from that supports the most common requirements for most applications.      3.  <xref:System.Net.Http.HttpClientHandler> - A class that operates at the bottom of the handler chain that actually handles the HTTP transport operations.      4.  <xref:System.Net.Http.WebRequestHandler> - A specialty class that operates at the bottom of the handler chain class that handles HTTP transport operations with options that are specific to the <xref:System.Net.HttpWebRequest?displayProperty=fullName> object.       If developers derive classes from HttpMessageHandler and override the <xref:System.Net.Http.HttpMessageHandler.SendAsync%2A> method, they must make sure that <xref:System.Net.Http.HttpMessageHandler.SendAsync%2A> can get called concurrently by different threads.       This is necessary since methods on <xref:System.Net.Http.HttpClient> can be called concurrently and need a guarantee of thread safety. So if a handler is assigned to an <xref:System.Net.Http.HttpClient> instance, the <xref:System.Net.Http.HttpMessageHandler.SendAsync%2A> method of the handler may get called concurrently by the <xref:System.Net.Http.HttpClient> instance and needs to be thread safe.","pos":[0,1425],"nodes":[{"content":"There are various HTTP message handles that can be used.","pos":[0,56]},{"content":"These include the following.","pos":[57,85]},{"content":"1.","pos":[91,93]},{"content":"&lt;xref:System.Net.Http.DelegatingHandler&gt; - A class used to plug a handler into a handler chain.","pos":[95,190],"source":"  <xref:System.Net.Http.DelegatingHandler> - A class used to plug a handler into a handler chain."},{"content":"2.","pos":[196,198]},{"content":"HttpMessageHandler - A simple to class to derive from that supports the most common requirements for most applications.","pos":[200,319]},{"content":"3.","pos":[325,327]},{"content":"&lt;xref:System.Net.Http.HttpClientHandler&gt; - A class that operates at the bottom of the handler chain that actually handles the HTTP transport operations.","pos":[329,481],"source":"  <xref:System.Net.Http.HttpClientHandler> - A class that operates at the bottom of the handler chain that actually handles the HTTP transport operations."},{"content":"4.","pos":[487,489]},{"content":"&lt;xref:System.Net.Http.WebRequestHandler&gt; - A specialty class that operates at the bottom of the handler chain class that handles HTTP transport operations with options that are specific to the &lt;xref:System.Net.HttpWebRequest?displayProperty=fullName&gt; object.","pos":[491,749],"source":"  <xref:System.Net.Http.WebRequestHandler> - A specialty class that operates at the bottom of the handler chain class that handles HTTP transport operations with options that are specific to the <xref:System.Net.HttpWebRequest?displayProperty=fullName> object."},{"content":"If developers derive classes from HttpMessageHandler and override the &lt;xref:System.Net.Http.HttpMessageHandler.SendAsync%2A&gt; method, they must make sure that &lt;xref:System.Net.Http.HttpMessageHandler.SendAsync%2A&gt; can get called concurrently by different threads.","pos":[756,1018],"source":"       If developers derive classes from HttpMessageHandler and override the <xref:System.Net.Http.HttpMessageHandler.SendAsync%2A> method, they must make sure that <xref:System.Net.Http.HttpMessageHandler.SendAsync%2A> can get called concurrently by different threads."},{"content":"This is necessary since methods on &lt;xref:System.Net.Http.HttpClient&gt; can be called concurrently and need a guarantee of thread safety.","pos":[1025,1159],"source":"       This is necessary since methods on <xref:System.Net.Http.HttpClient> can be called concurrently and need a guarantee of thread safety."},{"content":"So if a handler is assigned to an &lt;xref:System.Net.Http.HttpClient&gt; instance, the &lt;xref:System.Net.Http.HttpMessageHandler.SendAsync%2A&gt; method of the handler may get called concurrently by the &lt;xref:System.Net.Http.HttpClient&gt; instance and needs to be thread safe.","pos":[1160,1425],"source":" So if a handler is assigned to an <xref:System.Net.Http.HttpClient> instance, the <xref:System.Net.Http.HttpMessageHandler.SendAsync%2A> method of the handler may get called concurrently by the <xref:System.Net.Http.HttpClient> instance and needs to be thread safe."}]}]},{"pos":[2605,2701],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Net.Http.HttpMessageHandler\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Net.Http.HttpMessageHandler\"></xref> class."},{"pos":[3209,3348],"content":"Releases the unmanaged resources and disposes of the managed resources used by the <bpt id=\"p1\">&lt;xref href=\"System.Net.Http.HttpMessageHandler\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Releases the unmanaged resources and disposes of the managed resources used by the <xref href=\"System.Net.Http.HttpMessageHandler\"></xref>."},{"pos":[3902,4052],"content":"Releases the unmanaged resources used by the <bpt id=\"p1\">&lt;xref href=\"System.Net.Http.HttpMessageHandler\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and optionally disposes of the managed resources.","needQuote":true,"needEscape":true,"source":"Releases the unmanaged resources used by the <xref href=\"System.Net.Http.HttpMessageHandler\"></xref> and optionally disposes of the managed resources."},{"pos":[4064,4595],"content":"This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Net.Http.HttpMessageHandler> references. This method invokes the `Dispose()` method of each referenced object.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method is called by the public <ph id=\"ph1\">`Dispose()`</ph> method and the &lt;xref:System.Object.Finalize%2A&gt; method.","pos":[0,103],"source":"This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method."},{"content":"<ph id=\"ph1\">`Dispose()`</ph> invokes the protected <ph id=\"ph2\">`Dispose(Boolean)`</ph> method with the <ph id=\"ph3\">`disposing`</ph> parameter set to <ph id=\"ph4\">`true`</ph>.","pos":[104,209],"source":"`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`."},{"content":"&lt;xref:System.Object.Finalize%2A&gt; invokes <ph id=\"ph1\">`Dispose`</ph> with <ph id=\"ph2\">`disposing`</ph> set to <ph id=\"ph3\">`false`</ph>.When the <ph id=\"ph4\">`disposing`</ph> parameter is <ph id=\"ph5\">`true`</ph>, this method releases all resources held by any managed objects that this &lt;xref:System.Net.Http.HttpMessageHandler&gt; references.","pos":[210,461],"source":" <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Net.Http.HttpMessageHandler> references."},{"content":"This method invokes the <ph id=\"ph1\">`Dispose()`</ph> method of each referenced object.","pos":[462,531],"source":" This method invokes the `Dispose()` method of each referenced object."}]},{"pos":[4750,4960],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to release both managed and unmanaged resources; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> to releases only unmanaged resources.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to releases only unmanaged resources."},{"pos":[5655,5705],"content":"Send an HTTP request as an asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Send an HTTP request as an asynchronous operation.","pos":[0,50]}]},{"pos":[5718,6113],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete once the entire response including content is read.       The SendAsync method is used primarily by the system. This method is called by the system one of the  <xref:System.Net.Http.HttpClient.SendAsync%2A?displayProperty=fullName> methods is called. Most apps will never call this method.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete once the entire response including content is read.       The SendAsync method is used primarily by the system. This method is called by the system one of the  <xref:System.Net.Http.HttpClient.SendAsync%2A?displayProperty=fullName> methods is called. Most apps will never call this method.","pos":[0,393],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned &lt;xref:System.Threading.Tasks.Task%601&gt; object will complete once the entire response including content is read.","pos":[31,155],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete once the entire response including content is read."},{"content":"The SendAsync method is used primarily by the system.","pos":[162,215]},{"content":"This method is called by the system one of the  &lt;xref:System.Net.Http.HttpClient.SendAsync%2A?displayProperty=fullName&gt; methods is called.","pos":[216,354],"source":" This method is called by the system one of the  <xref:System.Net.Http.HttpClient.SendAsync%2A?displayProperty=fullName> methods is called."},{"content":"Most apps will never call this method.","pos":[355,393]}]}]},{"pos":[6432,6465],"content":"The HTTP request message to send.","needQuote":true,"needEscape":true,"nodes":[{"content":"The HTTP request message to send.","pos":[0,33]}]},{"pos":[6560,6603],"content":"The cancellation token to cancel operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The cancellation token to cancel operation.","pos":[0,43]}]},{"pos":[6712,6768],"content":"The task object representing the asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]}]},{"pos":[6943,7033],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">request</ph><ept id=\"p1\">&lt;/code&gt;</ept> was <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>request</code> was <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Net.Http.HttpMessageHandler\n  id: HttpMessageHandler\n  children:\n  - System.Net.Http.HttpMessageHandler.#ctor\n  - System.Net.Http.HttpMessageHandler.Dispose\n  - System.Net.Http.HttpMessageHandler.Dispose(System.Boolean)\n  - System.Net.Http.HttpMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)\n  langs:\n  - csharp\n  name: HttpMessageHandler\n  nameWithType: HttpMessageHandler\n  fullName: System.Net.Http.HttpMessageHandler\n  type: Class\n  summary: A base type for HTTP message handlers.\n  remarks: \"There are various HTTP message handles that can be used. These include the following.  \\n  \\n1.  <xref:System.Net.Http.DelegatingHandler> - A class used to plug a handler into a handler chain.  \\n  \\n2.  HttpMessageHandler - A simple to class to derive from that supports the most common requirements for most applications.  \\n  \\n3.  <xref:System.Net.Http.HttpClientHandler> - A class that operates at the bottom of the handler chain that actually handles the HTTP transport operations.  \\n  \\n4.  <xref:System.Net.Http.WebRequestHandler> - A specialty class that operates at the bottom of the handler chain class that handles HTTP transport operations with options that are specific to the <xref:System.Net.HttpWebRequest?displayProperty=fullName> object.  \\n  \\n If developers derive classes from HttpMessageHandler and override the <xref:System.Net.Http.HttpMessageHandler.SendAsync%2A> method, they must make sure that <xref:System.Net.Http.HttpMessageHandler.SendAsync%2A> can get called concurrently by different threads.  \\n  \\n This is necessary since methods on <xref:System.Net.Http.HttpClient> can be called concurrently and need a guarantee of thread safety. So if a handler is assigned to an <xref:System.Net.Http.HttpClient> instance, the <xref:System.Net.Http.HttpMessageHandler.SendAsync%2A> method of the handler may get called concurrently by the <xref:System.Net.Http.HttpClient> instance and needs to be thread safe.\"\n  syntax:\n    content: 'public abstract class HttpMessageHandler : IDisposable'\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Net.Http.HttpMessageHandler.#ctor\n  id: '#ctor'\n  parent: System.Net.Http.HttpMessageHandler\n  langs:\n  - csharp\n  name: HttpMessageHandler()\n  nameWithType: HttpMessageHandler.HttpMessageHandler()\n  fullName: System.Net.Http.HttpMessageHandler.HttpMessageHandler()\n  type: Constructor\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: Initializes a new instance of the <xref href=\"System.Net.Http.HttpMessageHandler\"></xref> class.\n  syntax:\n    content: protected HttpMessageHandler ();\n    parameters: []\n  overload: System.Net.Http.HttpMessageHandler.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Http.HttpMessageHandler.Dispose\n  id: Dispose\n  parent: System.Net.Http.HttpMessageHandler\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: HttpMessageHandler.Dispose()\n  fullName: System.Net.Http.HttpMessageHandler.Dispose()\n  type: Method\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: Releases the unmanaged resources and disposes of the managed resources used by the <xref href=\"System.Net.Http.HttpMessageHandler\"></xref>.\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.Net.Http.HttpMessageHandler.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Http.HttpMessageHandler.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Net.Http.HttpMessageHandler\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: HttpMessageHandler.Dispose(Boolean)\n  fullName: System.Net.Http.HttpMessageHandler.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: Releases the unmanaged resources used by the <xref href=\"System.Net.Http.HttpMessageHandler\"></xref> and optionally disposes of the managed resources.\n  remarks: This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Net.Http.HttpMessageHandler> references. This method invokes the `Dispose()` method of each referenced object.\n  syntax:\n    content: protected virtual void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to releases only unmanaged resources.\n  overload: System.Net.Http.HttpMessageHandler.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Http.HttpMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)\n  id: SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)\n  parent: System.Net.Http.HttpMessageHandler\n  langs:\n  - csharp\n  name: SendAsync(HttpRequestMessage,CancellationToken)\n  nameWithType: HttpMessageHandler.SendAsync(HttpRequestMessage,CancellationToken)\n  fullName: System.Net.Http.HttpMessageHandler.SendAsync(HttpRequestMessage,CancellationToken)\n  type: Method\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: Send an HTTP request as an asynchronous operation.\n  remarks: \"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete once the entire response including content is read.  \\n  \\n The SendAsync method is used primarily by the system. This method is called by the system one of the  <xref:System.Net.Http.HttpClient.SendAsync%2A?displayProperty=fullName> methods is called. Most apps will never call this method.\"\n  syntax:\n    content: protected abstract System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> SendAsync (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: request\n      type: System.Net.Http.HttpRequestMessage\n      description: The HTTP request message to send.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The cancellation token to cancel operation.\n    return:\n      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}\n      description: The task object representing the asynchronous operation.\n  overload: System.Net.Http.HttpMessageHandler.SendAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>request</code> was <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.Net.Http.HttpMessageHandler.#ctor\n  parent: System.Net.Http.HttpMessageHandler\n  isExternal: false\n  name: HttpMessageHandler()\n  nameWithType: HttpMessageHandler.HttpMessageHandler()\n  fullName: System.Net.Http.HttpMessageHandler.HttpMessageHandler()\n- uid: System.Net.Http.HttpMessageHandler.Dispose\n  parent: System.Net.Http.HttpMessageHandler\n  isExternal: false\n  name: Dispose()\n  nameWithType: HttpMessageHandler.Dispose()\n  fullName: System.Net.Http.HttpMessageHandler.Dispose()\n- uid: System.Net.Http.HttpMessageHandler.Dispose(System.Boolean)\n  parent: System.Net.Http.HttpMessageHandler\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: HttpMessageHandler.Dispose(Boolean)\n  fullName: System.Net.Http.HttpMessageHandler.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Net.Http.HttpMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)\n  parent: System.Net.Http.HttpMessageHandler\n  isExternal: false\n  name: SendAsync(HttpRequestMessage,CancellationToken)\n  nameWithType: HttpMessageHandler.SendAsync(HttpRequestMessage,CancellationToken)\n  fullName: System.Net.Http.HttpMessageHandler.SendAsync(HttpRequestMessage,CancellationToken)\n- uid: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}\n  parent: System.Threading.Tasks\n  isExternal: true\n  name: Task<HttpResponseMessage>\n  nameWithType: Task<HttpResponseMessage>\n  fullName: System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage>\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: Task<System.Net.Http.HttpResponseMessage>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Net.Http.HttpResponseMessage\n    name: HttpResponseMessage\n    nameWithType: HttpResponseMessage\n    fullName: HttpResponseMessage\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Net.Http.HttpRequestMessage\n  parent: System.Net.Http\n  isExternal: false\n  name: HttpRequestMessage\n  nameWithType: HttpRequestMessage\n  fullName: System.Net.Http.HttpRequestMessage\n- uid: System.Threading.CancellationToken\n  parent: System.Threading\n  isExternal: true\n  name: CancellationToken\n  nameWithType: CancellationToken\n  fullName: System.Threading.CancellationToken\n- uid: System.Net.Http.HttpMessageHandler.#ctor*\n  parent: System.Net.Http.HttpMessageHandler\n  isExternal: false\n  name: HttpMessageHandler\n  nameWithType: HttpMessageHandler.HttpMessageHandler\n- uid: System.Net.Http.HttpMessageHandler.Dispose*\n  parent: System.Net.Http.HttpMessageHandler\n  isExternal: false\n  name: Dispose\n  nameWithType: HttpMessageHandler.Dispose\n- uid: System.Net.Http.HttpMessageHandler.SendAsync*\n  parent: System.Net.Http.HttpMessageHandler\n  isExternal: false\n  name: SendAsync\n  nameWithType: HttpMessageHandler.SendAsync\n"}