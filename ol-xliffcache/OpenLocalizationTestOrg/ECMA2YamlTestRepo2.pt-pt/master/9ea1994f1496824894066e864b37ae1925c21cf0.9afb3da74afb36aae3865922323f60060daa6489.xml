{"nodes":[{"pos":[438,607],"content":"Provides functionality to discover the schema for a bindable list, where the properties available for binding differ from the public properties of the object to bind to.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides functionality to discover the schema for a bindable list, where the properties available for binding differ from the public properties of the object to bind to.","pos":[0,169]}]},{"pos":[620,1998],"content":"Use this interface if, for instance, you are using a <xref:System.Data.DataView> object that represents a `customer` table, you want to bind to the properties on the `customer` object that the <xref:System.Data.DataView> represents, not the properties of the <xref:System.Data.DataView>.       This interface is not required for design-time support of a bindable list.       Binding to data can occur either at run time or in a designer, but there are rules for both. At run time, you can bind to data in any of the following:      -   <xref:System.Array>      -   Implementer of <xref:System.Collections.IList>, provided the implementer has a strongly typed <xref:System.Collections.IList.Item%2A> property (that is, the <xref:System.Type> is anything but <xref:System.Object>). You can accomplish this by making the default implementation of <xref:System.Collections.IList.Item%2A> private. If you want to create an <xref:System.Collections.IList> that follows the rules of a strongly typed collection, you should derive from <xref:System.Collections.CollectionBase>.      -   Implementer of ITypedList.       In a designer, you can initialize binding to <xref:System.ComponentModel.Component> objects by following the same rules.       For more information on binding to a data source, see the <xref:System.Windows.Forms.Binding?displayProperty=fullName> class.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use this interface if, for instance, you are using a &lt;xref:System.Data.DataView&gt; object that represents a <ph id=\"ph1\">`customer`</ph> table, you want to bind to the properties on the <ph id=\"ph2\">`customer`</ph> object that the &lt;xref:System.Data.DataView&gt; represents, not the properties of the &lt;xref:System.Data.DataView&gt;.","pos":[0,287],"source":"Use this interface if, for instance, you are using a <xref:System.Data.DataView> object that represents a `customer` table, you want to bind to the properties on the `customer` object that the <xref:System.Data.DataView> represents, not the properties of the <xref:System.Data.DataView>."},{"content":"This interface is not required for design-time support of a bindable list.","pos":[294,368]},{"content":"Binding to data can occur either at run time or in a designer, but there are rules for both.","pos":[375,467]},{"content":"At run time, you can bind to data in any of the following:      -   &lt;xref:System.Array&gt;      -   Implementer of &lt;xref:System.Collections.IList&gt;, provided the implementer has a strongly typed &lt;xref:System.Collections.IList.Item%2A&gt; property (that is, the &lt;xref:System.Type&gt; is anything but &lt;xref:System.Object&gt;).","pos":[468,779],"source":" At run time, you can bind to data in any of the following:      -   <xref:System.Array>      -   Implementer of <xref:System.Collections.IList>, provided the implementer has a strongly typed <xref:System.Collections.IList.Item%2A> property (that is, the <xref:System.Type> is anything but <xref:System.Object>)."},{"content":"You can accomplish this by making the default implementation of &lt;xref:System.Collections.IList.Item%2A&gt; private.","pos":[780,892],"source":" You can accomplish this by making the default implementation of <xref:System.Collections.IList.Item%2A> private."},{"content":"If you want to create an &lt;xref:System.Collections.IList&gt; that follows the rules of a strongly typed collection, you should derive from &lt;xref:System.Collections.CollectionBase&gt;.","pos":[893,1069],"source":" If you want to create an <xref:System.Collections.IList> that follows the rules of a strongly typed collection, you should derive from <xref:System.Collections.CollectionBase>."},{"content":"-   Implementer of ITypedList.","pos":[1075,1105]},{"content":"In a designer, you can initialize binding to &lt;xref:System.ComponentModel.Component&gt; objects by following the same rules.","pos":[1112,1232],"source":"       In a designer, you can initialize binding to <xref:System.ComponentModel.Component> objects by following the same rules."},{"content":"For more information on binding to a data source, see the &lt;xref:System.Windows.Forms.Binding?displayProperty=fullName&gt; class.","pos":[1239,1364],"source":"       For more information on binding to a data source, see the <xref:System.Windows.Forms.Binding?displayProperty=fullName> class."}]},{"pos":[3205,3351],"content":"Returns the <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.PropertyDescriptorCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the properties on each item used to bind data.","needQuote":true,"needEscape":true,"source":"Returns the <xref href=\"System.ComponentModel.PropertyDescriptorCollection\"></xref> that represents the properties on each item used to bind data."},{"pos":[3363,4200],"content":"If the `listAccessors` parameter is not `null`, it typically contains a property descriptor that identifies a list of containers to retrieve for the object that implements <xref:System.ComponentModel.ITypedList>. For example, a <xref:System.Data.DataSet> containing two tables, `myCustomers` and `myOrders`, with a relationship between them called `myCustOrders`. If you create a <xref:System.Data.DataView> object to view `myCustomers`, then calling the GetItemProperties method with `null` returns the property descriptors for the columns in `myCustomers`. As a result, one of the returned property descriptors is a property descriptor for `myCustOrders`, just as calling the GetItemProperties method with a list accessor array containing the property descriptors for `myCustOrders` will return the property descriptors for `myOrders`.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"If the <ph id=\"ph1\">`listAccessors`</ph> parameter is not <ph id=\"ph2\">`null`</ph>, it typically contains a property descriptor that identifies a list of containers to retrieve for the object that implements &lt;xref:System.ComponentModel.ITypedList&gt;.","pos":[0,212],"source":"If the `listAccessors` parameter is not `null`, it typically contains a property descriptor that identifies a list of containers to retrieve for the object that implements <xref:System.ComponentModel.ITypedList>."},{"content":"For example, a &lt;xref:System.Data.DataSet&gt; containing two tables, <ph id=\"ph1\">`myCustomers`</ph> and <ph id=\"ph2\">`myOrders`</ph>, with a relationship between them called <ph id=\"ph3\">`myCustOrders`</ph>.","pos":[213,363],"source":" For example, a <xref:System.Data.DataSet> containing two tables, `myCustomers` and `myOrders`, with a relationship between them called `myCustOrders`."},{"content":"If you create a &lt;xref:System.Data.DataView&gt; object to view <ph id=\"ph1\">`myCustomers`</ph>, then calling the GetItemProperties method with <ph id=\"ph2\">`null`</ph> returns the property descriptors for the columns in <ph id=\"ph3\">`myCustomers`</ph>.","pos":[364,558],"source":" If you create a <xref:System.Data.DataView> object to view `myCustomers`, then calling the GetItemProperties method with `null` returns the property descriptors for the columns in `myCustomers`."},{"content":"As a result, one of the returned property descriptors is a property descriptor for <ph id=\"ph1\">`myCustOrders`</ph>, just as calling the GetItemProperties method with a list accessor array containing the property descriptors for <ph id=\"ph2\">`myCustOrders`</ph> will return the property descriptors for <ph id=\"ph3\">`myOrders`</ph>.","pos":[559,837],"source":" As a result, one of the returned property descriptors is a property descriptor for `myCustOrders`, just as calling the GetItemProperties method with a list accessor array containing the property descriptors for `myCustOrders` will return the property descriptors for `myOrders`."}]},{"pos":[4913,5107],"content":"An array of <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> objects to find in the collection as bindable. This can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.PropertyDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects to find in the collection as bindable.","pos":[0,120],"source":"An array of <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> objects to find in the collection as bindable."},{"content":"This can be <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[121,194],"source":" This can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[5202,5340],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.PropertyDescriptorCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the properties on each item used to bind data.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.ComponentModel.PropertyDescriptorCollection\"></xref> that represents the properties on each item used to bind data."},{"pos":[5934,5963],"content":"Returns the name of the list.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the name of the list.","pos":[0,29]}]},{"pos":[5975,6094],"content":"This method is used only in the design-time framework and by the obsolete <xref:System.Windows.Forms.DataGrid> control.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method is used only in the design-time framework and by the obsolete &lt;xref:System.Windows.Forms.DataGrid&gt; control.","pos":[0,119],"source":"This method is used only in the design-time framework and by the obsolete <xref:System.Windows.Forms.DataGrid> control."}]},{"pos":[6751,6944],"content":"An array of <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> objects, for which the list name is returned. This can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.PropertyDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects, for which the list name is returned.","pos":[0,119],"source":"An array of <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> objects, for which the list name is returned."},{"content":"This can be <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[120,193],"source":" This can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[7002,7023],"content":"The name of the list.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the list.","pos":[0,21]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ComponentModel.ITypedList\n  id: ITypedList\n  children:\n  - System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])\n  - System.ComponentModel.ITypedList.GetListName(System.ComponentModel.PropertyDescriptor[])\n  langs:\n  - csharp\n  name: ITypedList\n  nameWithType: ITypedList\n  fullName: System.ComponentModel.ITypedList\n  type: Interface\n  summary: Provides functionality to discover the schema for a bindable list, where the properties available for binding differ from the public properties of the object to bind to.\n  remarks: \"Use this interface if, for instance, you are using a <xref:System.Data.DataView> object that represents a `customer` table, you want to bind to the properties on the `customer` object that the <xref:System.Data.DataView> represents, not the properties of the <xref:System.Data.DataView>.  \\n  \\n This interface is not required for design-time support of a bindable list.  \\n  \\n Binding to data can occur either at run time or in a designer, but there are rules for both. At run time, you can bind to data in any of the following:  \\n  \\n-   <xref:System.Array>  \\n  \\n-   Implementer of <xref:System.Collections.IList>, provided the implementer has a strongly typed <xref:System.Collections.IList.Item%2A> property (that is, the <xref:System.Type> is anything but <xref:System.Object>). You can accomplish this by making the default implementation of <xref:System.Collections.IList.Item%2A> private. If you want to create an <xref:System.Collections.IList> that follows the rules of a strongly typed collection, you should derive from <xref:System.Collections.CollectionBase>.  \\n  \\n-   Implementer of ITypedList.  \\n  \\n In a designer, you can initialize binding to <xref:System.ComponentModel.Component> objects by following the same rules.  \\n  \\n For more information on binding to a data source, see the <xref:System.Windows.Forms.Binding?displayProperty=fullName> class.\"\n  example:\n  - \"The following code example demonstrates how to implement the ITypedList interface. A generic type named `SortableBindingList` derives from the <xref:System.ComponentModel.BindingList%601> class and implements the ITypedList interface. For a full code listing, see [How to: Implement the ITypedList Interface](~/add/includes/ajax-current-ext-md.md).  \\n  \\n [!code-cs[System.ComponentModel.ITypedList#1](~/add/codesnippet/csharp/t-system.componentmodel._167_1.cs)]\\n [!code-vb[System.ComponentModel.ITypedList#1](~/add/codesnippet/visualbasic/t-system.componentmodel._167_1.vb)]\"\n  syntax:\n    content: public interface ITypedList\n  implements: []\n  platform:\n  - net462\n- uid: System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])\n  id: GetItemProperties(System.ComponentModel.PropertyDescriptor[])\n  parent: System.ComponentModel.ITypedList\n  langs:\n  - csharp\n  name: GetItemProperties(PropertyDescriptor[])\n  nameWithType: ITypedList.GetItemProperties(PropertyDescriptor[])\n  fullName: System.ComponentModel.ITypedList.GetItemProperties(PropertyDescriptor[])\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Returns the <xref href=\"System.ComponentModel.PropertyDescriptorCollection\"></xref> that represents the properties on each item used to bind data.\n  remarks: If the `listAccessors` parameter is not `null`, it typically contains a property descriptor that identifies a list of containers to retrieve for the object that implements <xref:System.ComponentModel.ITypedList>. For example, a <xref:System.Data.DataSet> containing two tables, `myCustomers` and `myOrders`, with a relationship between them called `myCustOrders`. If you create a <xref:System.Data.DataView> object to view `myCustomers`, then calling the GetItemProperties method with `null` returns the property descriptors for the columns in `myCustomers`. As a result, one of the returned property descriptors is a property descriptor for `myCustOrders`, just as calling the GetItemProperties method with a list accessor array containing the property descriptors for `myCustOrders` will return the property descriptors for `myOrders`.\n  example:\n  - \"The following code example demonstrates how to implement the GetItemProperties method. For a full code listing, see [How to: Implement the ITypedList Interface](~/add/includes/ajax-current-ext-md.md).  \\n  \\n [!code-cs[System.ComponentModel.ITypedList#3](~/add/codesnippet/csharp/3b46cd55-3314-419e-a8e7-_1.cs)]\\n [!code-vb[System.ComponentModel.ITypedList#3](~/add/codesnippet/visualbasic/3b46cd55-3314-419e-a8e7-_1.vb)]\"\n  syntax:\n    content: public System.ComponentModel.PropertyDescriptorCollection GetItemProperties (System.ComponentModel.PropertyDescriptor[] listAccessors);\n    parameters:\n    - id: listAccessors\n      type: System.ComponentModel.PropertyDescriptor[]\n      description: An array of <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> objects to find in the collection as bindable. This can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n    return:\n      type: System.ComponentModel.PropertyDescriptorCollection\n      description: The <xref href=\"System.ComponentModel.PropertyDescriptorCollection\"></xref> that represents the properties on each item used to bind data.\n  overload: System.ComponentModel.ITypedList.GetItemProperties*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.ITypedList.GetListName(System.ComponentModel.PropertyDescriptor[])\n  id: GetListName(System.ComponentModel.PropertyDescriptor[])\n  parent: System.ComponentModel.ITypedList\n  langs:\n  - csharp\n  name: GetListName(PropertyDescriptor[])\n  nameWithType: ITypedList.GetListName(PropertyDescriptor[])\n  fullName: System.ComponentModel.ITypedList.GetListName(PropertyDescriptor[])\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Returns the name of the list.\n  remarks: This method is used only in the design-time framework and by the obsolete <xref:System.Windows.Forms.DataGrid> control.\n  example:\n  - \"The following code example demonstrates how to implement the GetListName method. For a full code listing, see [How to: Implement the ITypedList Interface](~/add/includes/ajax-current-ext-md.md).  \\n  \\n [!code-cs[System.ComponentModel.ITypedList#4](~/add/codesnippet/csharp/a1408425-c386-40d6-a339-_1.cs)]\\n [!code-vb[System.ComponentModel.ITypedList#4](~/add/codesnippet/visualbasic/a1408425-c386-40d6-a339-_1.vb)]\"\n  syntax:\n    content: public string GetListName (System.ComponentModel.PropertyDescriptor[] listAccessors);\n    parameters:\n    - id: listAccessors\n      type: System.ComponentModel.PropertyDescriptor[]\n      description: An array of <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> objects, for which the list name is returned. This can be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n    return:\n      type: System.String\n      description: The name of the list.\n  overload: System.ComponentModel.ITypedList.GetListName*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])\n  parent: System.ComponentModel.ITypedList\n  isExternal: false\n  name: GetItemProperties(PropertyDescriptor[])\n  nameWithType: ITypedList.GetItemProperties(PropertyDescriptor[])\n  fullName: System.ComponentModel.ITypedList.GetItemProperties(PropertyDescriptor[])\n- uid: System.ComponentModel.PropertyDescriptorCollection\n  parent: System.ComponentModel\n  isExternal: false\n  name: PropertyDescriptorCollection\n  nameWithType: PropertyDescriptorCollection\n  fullName: System.ComponentModel.PropertyDescriptorCollection\n- uid: System.ComponentModel.PropertyDescriptor[]\n  parent: System.ComponentModel\n  isExternal: false\n  name: PropertyDescriptor\n  nameWithType: PropertyDescriptor\n  fullName: System.ComponentModel.PropertyDescriptor[]\n  spec.csharp:\n  - uid: System.ComponentModel.PropertyDescriptor\n    name: PropertyDescriptor\n    nameWithType: PropertyDescriptor\n    fullName: PropertyDescriptor[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.ComponentModel.ITypedList.GetListName(System.ComponentModel.PropertyDescriptor[])\n  parent: System.ComponentModel.ITypedList\n  isExternal: false\n  name: GetListName(PropertyDescriptor[])\n  nameWithType: ITypedList.GetListName(PropertyDescriptor[])\n  fullName: System.ComponentModel.ITypedList.GetListName(PropertyDescriptor[])\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.ComponentModel.ITypedList.GetItemProperties*\n  parent: System.ComponentModel.ITypedList\n  isExternal: false\n  name: GetItemProperties\n  nameWithType: ITypedList.GetItemProperties\n- uid: System.ComponentModel.ITypedList.GetListName*\n  parent: System.ComponentModel.ITypedList\n  isExternal: false\n  name: GetListName\n  nameWithType: ITypedList.GetListName\n"}