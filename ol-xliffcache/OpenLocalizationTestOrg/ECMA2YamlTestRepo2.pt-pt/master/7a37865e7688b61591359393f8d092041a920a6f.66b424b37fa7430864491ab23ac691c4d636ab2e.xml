{"nodes":[{"pos":[893,985],"content":"Provides a means of passing context state among serializers. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides a means of passing context state among serializers. This class cannot be inherited.","pos":[0,92],"nodes":[{"content":"Provides a means of passing context state among serializers.","pos":[0,60]},{"content":"This class cannot be inherited.","pos":[61,92]}]}]},{"pos":[998,2220],"content":"An ExpressionContext is placed on the context stack and contains the most relevant expression during serialization. The following C# code demonstrates an assignment.      ```   button1.Text = \"Hello\";   ```       During serialization, several serializers are responsible for creating this single statement. One of those serializers is responsible for creating \"Hello\". There are times when that serializer may need to know the context in which it is creating its expression. In the previous example, this context is not needed. The following C# code shows a situation in which knowledge of the context is necessary.      ```   button1.Text = rm.GetString(\"button1_Text\");   ```       In this case, the serializer responsible for creating the resource expression needs to be informed of the names of the target objects. The ExpressionContext class can be used for this. As each serializer creates an expression and invokes a serializer to handle a smaller part of the statement as a whole, the serializer pushes an expression context on the context stack. Each expression context has a parent property that locates the next expression context on the stack. This provides a convenient traversal capability.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"An ExpressionContext is placed on the context stack and contains the most relevant expression during serialization.","pos":[0,115]},{"content":"The following C# code demonstrates an assignment.","pos":[116,165]},{"content":"<ph id=\"ph1\">```   button1.Text = \"Hello\";   ```</ph>       During serialization, several serializers are responsible for creating this single statement.","pos":[171,306],"source":"```   button1.Text = \"Hello\";   ```       During serialization, several serializers are responsible for creating this single statement."},{"content":"One of those serializers is responsible for creating \"Hello\".","pos":[307,368]},{"content":"There are times when that serializer may need to know the context in which it is creating its expression.","pos":[369,474]},{"content":"In the previous example, this context is not needed.","pos":[475,527]},{"content":"The following C# code shows a situation in which knowledge of the context is necessary.","pos":[528,615]},{"content":"<ph id=\"ph1\">```   button1.Text = rm.GetString(\"button1_Text\");   ```</ph>       In this case, the serializer responsible for creating the resource expression needs to be informed of the names of the target objects.","pos":[621,818],"source":"```   button1.Text = rm.GetString(\"button1_Text\");   ```       In this case, the serializer responsible for creating the resource expression needs to be informed of the names of the target objects."},{"content":"The ExpressionContext class can be used for this.","pos":[819,868]},{"content":"As each serializer creates an expression and invokes a serializer to handle a smaller part of the statement as a whole, the serializer pushes an expression context on the context stack.","pos":[869,1054]},{"content":"Each expression context has a parent property that locates the next expression context on the stack.","pos":[1055,1155]},{"content":"This provides a convenient traversal capability.","pos":[1156,1204]}]},{"pos":[3044,3202],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.Design.Serialization.ExpressionContext\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the given expression and owner.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.ComponentModel.Design.Serialization.ExpressionContext\"></xref> class with the given expression and owner."},{"pos":[3428,3454],"content":"The given code expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"The given code expression.","pos":[0,26]}]},{"pos":[3523,3554],"content":"The given code expression type.","needQuote":true,"needEscape":true,"nodes":[{"content":"The given code expression type.","pos":[0,31]}]},{"pos":[3616,3648],"content":"The given code expression owner.","needQuote":true,"needEscape":true,"nodes":[{"content":"The given code expression owner.","pos":[0,32]}]},{"pos":[3845,3985],"content":"<ph id=\"ph1\">&lt;code&gt;expression&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;expressionType&lt;/code&gt;</ph>, or <ph id=\"ph3\">&lt;code&gt;owner&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>expression</code>, <code>expressionType</code>, or <code>owner</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[4723,4866],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.Design.Serialization.ExpressionContext\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with a current value.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.ComponentModel.Design.Serialization.ExpressionContext\"></xref> class with a current value."},{"pos":[5112,5138],"content":"The given code expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"The given code expression.","pos":[0,26]}]},{"pos":[5207,5238],"content":"The given code expression type.","needQuote":true,"needEscape":true,"nodes":[{"content":"The given code expression type.","pos":[0,31]}]},{"pos":[5300,5332],"content":"The given code expression owner.","needQuote":true,"needEscape":true,"nodes":[{"content":"The given code expression owner.","pos":[0,32]}]},{"pos":[5400,5439],"content":"The given code expression preset value.","needQuote":true,"needEscape":true,"nodes":[{"content":"The given code expression preset value.","pos":[0,39]}]},{"pos":[5636,5776],"content":"<ph id=\"ph1\">&lt;code&gt;expression&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;expressionType&lt;/code&gt;</ph>, or <ph id=\"ph3\">&lt;code&gt;owner&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>expression</code>, <code>expressionType</code>, or <code>owner</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[6251,6295],"content":"Gets the expression this context represents.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the expression this context represents.","pos":[0,44]}]},{"pos":[6449,6488],"content":"The expression this context represents.","needQuote":true,"needEscape":true,"nodes":[{"content":"The expression this context represents.","pos":[0,39]}]},{"pos":[7085,7131],"content":"Gets the <xref:System.Type> of the expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the &lt;xref:System.Type&gt; of the expression.","pos":[0,46],"source":"Gets the <xref:System.Type> of the expression."}]},{"pos":[7143,7289],"content":"You can use <xref:System.ComponentModel.Design.Serialization.ExpressionContext> to determine if a cast is needed when assigning to the expression.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"You can use &lt;xref:System.ComponentModel.Design.Serialization.ExpressionContext&gt; to determine if a cast is needed when assigning to the expression.","pos":[0,146],"source":"You can use <xref:System.ComponentModel.Design.Serialization.ExpressionContext> to determine if a cast is needed when assigning to the expression."}]},{"pos":[7404,7445],"content":"The <xref:System.Type> of the expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Type&gt; of the expression.","pos":[0,41],"source":"The <xref:System.Type> of the expression."}]},{"pos":[8001,8040],"content":"Gets the object owning this expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the object owning this expression.","pos":[0,39]}]},{"pos":[8052,8249],"content":"If the expression is a property reference to the &lt;xref:System.Windows.Forms.Control.Text%2A&gt; property of an instance of &lt;xref:System.Windows.Forms.Button&gt; called <ph id=\"ph1\">`button1`</ph>, Owner returns <ph id=\"ph2\">`button1`</ph>.","needQuote":true,"needEscape":true,"extradata":"MT","source":"If the expression is a property reference to the <xref:System.Windows.Forms.Control.Text%2A> property of an instance of <xref:System.Windows.Forms.Button> called `button1`, Owner returns `button1`."},{"pos":[8359,8393],"content":"The object owning this expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object owning this expression.","pos":[0,34]}]},{"pos":[8970,9009],"content":"Gets the preset value of an expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the preset value of an expression.","pos":[0,39]}]},{"pos":[9022,10354],"content":"Contains the preset value of an expression, should one exist. For example, if the expression is a property reference expression referring to the <xref:System.Windows.Forms.Control.Controls%2A> property of a <xref:System.Windows.Forms.Button>, the PresetValue property contains the instance of the <xref:System.Windows.Forms.Control.Controls%2A> property. This is because the property is read-only and preset by the object to contain a value. On the other hand, a property such as <xref:System.Windows.Forms.Control.Text%2A> or <xref:System.Windows.Forms.Control.Visible%2A> does not have a preset value and therefore the PresetValue property returns `null`.       The following C# code shows how serializers can use this information to guide serialization.       [C#]      ```   Padding p = new Padding();   p.Left = 5;   button1.Padding = p;      button1.Padding.Left = 5;   ```       The serializer of the <xref:System.Windows.Forms.Padding> structure needs to be informed if it should generate the first or second form. The first form is generated by default. The second form is only generated if there is an <xref:System.ComponentModel.Design.Serialization.ExpressionContext> on the context stack that contains a PresetValue equal to the value of the <xref:System.Windows.Forms.Padding> currently being serialized.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Contains the preset value of an expression, should one exist.","pos":[0,61]},{"content":"For example, if the expression is a property reference expression referring to the &lt;xref:System.Windows.Forms.Control.Controls%2A&gt; property of a &lt;xref:System.Windows.Forms.Button&gt;, the PresetValue property contains the instance of the &lt;xref:System.Windows.Forms.Control.Controls%2A&gt; property.","pos":[62,354],"source":" For example, if the expression is a property reference expression referring to the <xref:System.Windows.Forms.Control.Controls%2A> property of a <xref:System.Windows.Forms.Button>, the PresetValue property contains the instance of the <xref:System.Windows.Forms.Control.Controls%2A> property."},{"content":"This is because the property is read-only and preset by the object to contain a value.","pos":[355,441]},{"content":"On the other hand, a property such as &lt;xref:System.Windows.Forms.Control.Text%2A&gt; or &lt;xref:System.Windows.Forms.Control.Visible%2A&gt; does not have a preset value and therefore the PresetValue property returns <ph id=\"ph1\">`null`</ph>.","pos":[442,657],"source":" On the other hand, a property such as <xref:System.Windows.Forms.Control.Text%2A> or <xref:System.Windows.Forms.Control.Visible%2A> does not have a preset value and therefore the PresetValue property returns `null`."},{"content":"The following C# code shows how serializers can use this information to guide serialization.","pos":[664,756]},{"content":"[C#]      <ph id=\"ph1\">```   Padding p = new Padding();   p.Left = 5;   button1.Padding = p;      button1.Padding.Left = 5;   ```</ph>       The serializer of the &lt;xref:System.Windows.Forms.Padding&gt; structure needs to be informed if it should generate the first or second form.","pos":[763,1022],"source":"       [C#]      ```   Padding p = new Padding();   p.Left = 5;   button1.Padding = p;      button1.Padding.Left = 5;   ```       The serializer of the <xref:System.Windows.Forms.Padding> structure needs to be informed if it should generate the first or second form."},{"content":"The first form is generated by default.","pos":[1023,1062]},{"content":"The second form is only generated if there is an &lt;xref:System.ComponentModel.Design.Serialization.ExpressionContext&gt; on the context stack that contains a PresetValue equal to the value of the &lt;xref:System.Windows.Forms.Padding&gt; currently being serialized.","pos":[1063,1318],"source":" The second form is only generated if there is an <xref:System.ComponentModel.Design.Serialization.ExpressionContext> on the context stack that contains a PresetValue equal to the value of the <xref:System.Windows.Forms.Padding> currently being serialized."}]},{"pos":[10471,10588],"content":"The preset value of this expression, or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if not assigned.","needQuote":true,"needEscape":true,"source":"The preset value of this expression, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if not assigned."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ComponentModel.Design.Serialization.ExpressionContext\n  id: ExpressionContext\n  children:\n  - System.ComponentModel.Design.Serialization.ExpressionContext.#ctor(System.CodeDom.CodeExpression,System.Type,System.Object)\n  - System.ComponentModel.Design.Serialization.ExpressionContext.#ctor(System.CodeDom.CodeExpression,System.Type,System.Object,System.Object)\n  - System.ComponentModel.Design.Serialization.ExpressionContext.Expression\n  - System.ComponentModel.Design.Serialization.ExpressionContext.ExpressionType\n  - System.ComponentModel.Design.Serialization.ExpressionContext.Owner\n  - System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue\n  langs:\n  - csharp\n  name: ExpressionContext\n  nameWithType: ExpressionContext\n  fullName: System.ComponentModel.Design.Serialization.ExpressionContext\n  type: Class\n  summary: Provides a means of passing context state among serializers. This class cannot be inherited.\n  remarks: \"An ExpressionContext is placed on the context stack and contains the most relevant expression during serialization. The following C# code demonstrates an assignment.  \\n  \\n```  \\nbutton1.Text = \\\"Hello\\\";  \\n```  \\n  \\n During serialization, several serializers are responsible for creating this single statement. One of those serializers is responsible for creating \\\"Hello\\\". There are times when that serializer may need to know the context in which it is creating its expression. In the previous example, this context is not needed. The following C# code shows a situation in which knowledge of the context is necessary.  \\n  \\n```  \\nbutton1.Text = rm.GetString(\\\"button1_Text\\\");  \\n```  \\n  \\n In this case, the serializer responsible for creating the resource expression needs to be informed of the names of the target objects. The ExpressionContext class can be used for this. As each serializer creates an expression and invokes a serializer to handle a smaller part of the statement as a whole, the serializer pushes an expression context on the context stack. Each expression context has a parent property that locates the next expression context on the stack. This provides a convenient traversal capability.\"\n  syntax:\n    content: public sealed class ExpressionContext\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Design.Serialization.ExpressionContext.#ctor(System.CodeDom.CodeExpression,System.Type,System.Object)\n  id: '#ctor(System.CodeDom.CodeExpression,System.Type,System.Object)'\n  parent: System.ComponentModel.Design.Serialization.ExpressionContext\n  langs:\n  - csharp\n  name: ExpressionContext(CodeExpression,Type,Object)\n  nameWithType: ExpressionContext.ExpressionContext(CodeExpression,Type,Object)\n  fullName: System.ComponentModel.Design.Serialization.ExpressionContext.ExpressionContext(CodeExpression,Type,Object)\n  type: Constructor\n  assemblies:\n  - System.Design\n  namespace: System.ComponentModel.Design.Serialization\n  summary: Initializes a new instance of the <xref href=\"System.ComponentModel.Design.Serialization.ExpressionContext\"></xref> class with the given expression and owner.\n  syntax:\n    content: public ExpressionContext (System.CodeDom.CodeExpression expression, Type expressionType, object owner);\n    parameters:\n    - id: expression\n      type: System.CodeDom.CodeExpression\n      description: The given code expression.\n    - id: expressionType\n      type: System.Type\n      description: The given code expression type.\n    - id: owner\n      type: System.Object\n      description: The given code expression owner.\n  overload: System.ComponentModel.Design.Serialization.ExpressionContext.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>expression</code>, <code>expressionType</code>, or <code>owner</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.ComponentModel.Design.Serialization.ExpressionContext.#ctor(System.CodeDom.CodeExpression,System.Type,System.Object,System.Object)\n  id: '#ctor(System.CodeDom.CodeExpression,System.Type,System.Object,System.Object)'\n  parent: System.ComponentModel.Design.Serialization.ExpressionContext\n  langs:\n  - csharp\n  name: ExpressionContext(CodeExpression,Type,Object,Object)\n  nameWithType: ExpressionContext.ExpressionContext(CodeExpression,Type,Object,Object)\n  fullName: System.ComponentModel.Design.Serialization.ExpressionContext.ExpressionContext(CodeExpression,Type,Object,Object)\n  type: Constructor\n  assemblies:\n  - System.Design\n  namespace: System.ComponentModel.Design.Serialization\n  summary: Initializes a new instance of the <xref href=\"System.ComponentModel.Design.Serialization.ExpressionContext\"></xref> class with a current value.\n  syntax:\n    content: public ExpressionContext (System.CodeDom.CodeExpression expression, Type expressionType, object owner, object presetValue);\n    parameters:\n    - id: expression\n      type: System.CodeDom.CodeExpression\n      description: The given code expression.\n    - id: expressionType\n      type: System.Type\n      description: The given code expression type.\n    - id: owner\n      type: System.Object\n      description: The given code expression owner.\n    - id: presetValue\n      type: System.Object\n      description: The given code expression preset value.\n  overload: System.ComponentModel.Design.Serialization.ExpressionContext.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>expression</code>, <code>expressionType</code>, or <code>owner</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.ComponentModel.Design.Serialization.ExpressionContext.Expression\n  id: Expression\n  parent: System.ComponentModel.Design.Serialization.ExpressionContext\n  langs:\n  - csharp\n  name: Expression\n  nameWithType: ExpressionContext.Expression\n  fullName: System.ComponentModel.Design.Serialization.ExpressionContext.Expression\n  type: Property\n  assemblies:\n  - System.Design\n  namespace: System.ComponentModel.Design.Serialization\n  summary: Gets the expression this context represents.\n  syntax:\n    content: public System.CodeDom.CodeExpression Expression { get; }\n    return:\n      type: System.CodeDom.CodeExpression\n      description: The expression this context represents.\n  overload: System.ComponentModel.Design.Serialization.ExpressionContext.Expression*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Design.Serialization.ExpressionContext.ExpressionType\n  id: ExpressionType\n  parent: System.ComponentModel.Design.Serialization.ExpressionContext\n  langs:\n  - csharp\n  name: ExpressionType\n  nameWithType: ExpressionContext.ExpressionType\n  fullName: System.ComponentModel.Design.Serialization.ExpressionContext.ExpressionType\n  type: Property\n  assemblies:\n  - System.Design\n  namespace: System.ComponentModel.Design.Serialization\n  summary: Gets the <xref:System.Type> of the expression.\n  remarks: You can use <xref:System.ComponentModel.Design.Serialization.ExpressionContext> to determine if a cast is needed when assigning to the expression.\n  syntax:\n    content: public Type ExpressionType { get; }\n    return:\n      type: System.Type\n      description: The <xref:System.Type> of the expression.\n  overload: System.ComponentModel.Design.Serialization.ExpressionContext.ExpressionType*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Design.Serialization.ExpressionContext.Owner\n  id: Owner\n  parent: System.ComponentModel.Design.Serialization.ExpressionContext\n  langs:\n  - csharp\n  name: Owner\n  nameWithType: ExpressionContext.Owner\n  fullName: System.ComponentModel.Design.Serialization.ExpressionContext.Owner\n  type: Property\n  assemblies:\n  - System.Design\n  namespace: System.ComponentModel.Design.Serialization\n  summary: Gets the object owning this expression.\n  remarks: If the expression is a property reference to the <xref:System.Windows.Forms.Control.Text%2A> property of an instance of <xref:System.Windows.Forms.Button> called `button1`, Owner returns `button1`.\n  syntax:\n    content: public object Owner { get; }\n    return:\n      type: System.Object\n      description: The object owning this expression.\n  overload: System.ComponentModel.Design.Serialization.ExpressionContext.Owner*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue\n  id: PresetValue\n  parent: System.ComponentModel.Design.Serialization.ExpressionContext\n  langs:\n  - csharp\n  name: PresetValue\n  nameWithType: ExpressionContext.PresetValue\n  fullName: System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue\n  type: Property\n  assemblies:\n  - System.Design\n  namespace: System.ComponentModel.Design.Serialization\n  summary: Gets the preset value of an expression.\n  remarks: \"Contains the preset value of an expression, should one exist. For example, if the expression is a property reference expression referring to the <xref:System.Windows.Forms.Control.Controls%2A> property of a <xref:System.Windows.Forms.Button>, the PresetValue property contains the instance of the <xref:System.Windows.Forms.Control.Controls%2A> property. This is because the property is read-only and preset by the object to contain a value. On the other hand, a property such as <xref:System.Windows.Forms.Control.Text%2A> or <xref:System.Windows.Forms.Control.Visible%2A> does not have a preset value and therefore the PresetValue property returns `null`.  \\n  \\n The following C# code shows how serializers can use this information to guide serialization.  \\n  \\n [C#]  \\n  \\n```  \\nPadding p = new Padding();  \\np.Left = 5;  \\nbutton1.Padding = p;  \\n  \\nbutton1.Padding.Left = 5;  \\n```  \\n  \\n The serializer of the <xref:System.Windows.Forms.Padding> structure needs to be informed if it should generate the first or second form. The first form is generated by default. The second form is only generated if there is an <xref:System.ComponentModel.Design.Serialization.ExpressionContext> on the context stack that contains a PresetValue equal to the value of the <xref:System.Windows.Forms.Padding> currently being serialized.\"\n  syntax:\n    content: public object PresetValue { get; }\n    return:\n      type: System.Object\n      description: The preset value of this expression, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if not assigned.\n  overload: System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ComponentModel.Design.Serialization.ExpressionContext.#ctor(System.CodeDom.CodeExpression,System.Type,System.Object)\n  parent: System.ComponentModel.Design.Serialization.ExpressionContext\n  isExternal: false\n  name: ExpressionContext(CodeExpression,Type,Object)\n  nameWithType: ExpressionContext.ExpressionContext(CodeExpression,Type,Object)\n  fullName: System.ComponentModel.Design.Serialization.ExpressionContext.ExpressionContext(CodeExpression,Type,Object)\n- uid: System.CodeDom.CodeExpression\n  parent: System.CodeDom\n  isExternal: false\n  name: CodeExpression\n  nameWithType: CodeExpression\n  fullName: System.CodeDom.CodeExpression\n- uid: System.Type\n  parent: System\n  isExternal: true\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.ComponentModel.Design.Serialization.ExpressionContext.#ctor(System.CodeDom.CodeExpression,System.Type,System.Object,System.Object)\n  parent: System.ComponentModel.Design.Serialization.ExpressionContext\n  isExternal: false\n  name: ExpressionContext(CodeExpression,Type,Object,Object)\n  nameWithType: ExpressionContext.ExpressionContext(CodeExpression,Type,Object,Object)\n  fullName: System.ComponentModel.Design.Serialization.ExpressionContext.ExpressionContext(CodeExpression,Type,Object,Object)\n- uid: System.ComponentModel.Design.Serialization.ExpressionContext.Expression\n  parent: System.ComponentModel.Design.Serialization.ExpressionContext\n  isExternal: false\n  name: Expression\n  nameWithType: ExpressionContext.Expression\n  fullName: System.ComponentModel.Design.Serialization.ExpressionContext.Expression\n- uid: System.ComponentModel.Design.Serialization.ExpressionContext.ExpressionType\n  parent: System.ComponentModel.Design.Serialization.ExpressionContext\n  isExternal: false\n  name: ExpressionType\n  nameWithType: ExpressionContext.ExpressionType\n  fullName: System.ComponentModel.Design.Serialization.ExpressionContext.ExpressionType\n- uid: System.ComponentModel.Design.Serialization.ExpressionContext.Owner\n  parent: System.ComponentModel.Design.Serialization.ExpressionContext\n  isExternal: false\n  name: Owner\n  nameWithType: ExpressionContext.Owner\n  fullName: System.ComponentModel.Design.Serialization.ExpressionContext.Owner\n- uid: System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue\n  parent: System.ComponentModel.Design.Serialization.ExpressionContext\n  isExternal: false\n  name: PresetValue\n  nameWithType: ExpressionContext.PresetValue\n  fullName: System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue\n- uid: System.ComponentModel.Design.Serialization.ExpressionContext.#ctor*\n  parent: System.ComponentModel.Design.Serialization.ExpressionContext\n  isExternal: false\n  name: ExpressionContext\n  nameWithType: ExpressionContext.ExpressionContext\n- uid: System.ComponentModel.Design.Serialization.ExpressionContext.Expression*\n  parent: System.ComponentModel.Design.Serialization.ExpressionContext\n  isExternal: false\n  name: Expression\n  nameWithType: ExpressionContext.Expression\n- uid: System.ComponentModel.Design.Serialization.ExpressionContext.ExpressionType*\n  parent: System.ComponentModel.Design.Serialization.ExpressionContext\n  isExternal: false\n  name: ExpressionType\n  nameWithType: ExpressionContext.ExpressionType\n- uid: System.ComponentModel.Design.Serialization.ExpressionContext.Owner*\n  parent: System.ComponentModel.Design.Serialization.ExpressionContext\n  isExternal: false\n  name: Owner\n  nameWithType: ExpressionContext.Owner\n- uid: System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue*\n  parent: System.ComponentModel.Design.Serialization.ExpressionContext\n  isExternal: false\n  name: PresetValue\n  nameWithType: ExpressionContext.PresetValue\n"}