{"nodes":[{"pos":[332,375],"content":"Interface for tasks which can be cancelled.","needQuote":true,"needEscape":true,"nodes":[{"content":"Interface for tasks which can be cancelled.","pos":[0,43]}]},{"pos":[912,1023],"content":"Instructs the task to exit as soon as possible, or to immediately exit if Execute is invoked after this method.","needQuote":true,"needEscape":true,"nodes":[{"content":"Instructs the task to exit as soon as possible, or to immediately exit if Execute is invoked after this method.","pos":[0,111]}]},{"pos":[1036,1379],"content":"Cancel() may be called at any time after the task has been instantiated, even before <xref:Microsoft.Build.Framework.ITask.Execute%2A> is called.       Cancel calls may come in from any thread. The implementation of this method should not block indefinitely.       To cancel the build, both `Cancel` and `Execute` must return in any order.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Cancel() may be called at any time after the task has been instantiated, even before &lt;xref:Microsoft.Build.Framework.ITask.Execute%2A&gt; is called.","pos":[0,145],"source":"Cancel() may be called at any time after the task has been instantiated, even before <xref:Microsoft.Build.Framework.ITask.Execute%2A> is called."},{"content":"Cancel calls may come in from any thread.","pos":[152,193]},{"content":"The implementation of this method should not block indefinitely.","pos":[194,258]},{"content":"To cancel the build, both <ph id=\"ph1\">`Cancel`</ph> and <ph id=\"ph2\">`Execute`</ph> must return in any order.","pos":[265,339],"source":"       To cancel the build, both `Cancel` and `Execute` must return in any order."}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: Microsoft.Build.Framework.ICancelableTask\n  id: ICancelableTask\n  children:\n  - Microsoft.Build.Framework.ICancelableTask.Cancel\n  langs:\n  - csharp\n  name: ICancelableTask\n  nameWithType: ICancelableTask\n  fullName: Microsoft.Build.Framework.ICancelableTask\n  type: Interface\n  summary: Interface for tasks which can be cancelled.\n  syntax:\n    content: 'public interface ICancelableTask : Microsoft.Build.Framework.ITask'\n  implements:\n  - Microsoft.Build.Framework.ITask\n  platform:\n  - net462\n- uid: Microsoft.Build.Framework.ICancelableTask.Cancel\n  id: Cancel\n  parent: Microsoft.Build.Framework.ICancelableTask\n  langs:\n  - csharp\n  name: Cancel()\n  nameWithType: ICancelableTask.Cancel()\n  fullName: Microsoft.Build.Framework.ICancelableTask.Cancel()\n  type: Method\n  assemblies:\n  - Microsoft.Build.Framework\n  namespace: Microsoft.Build.Framework\n  summary: Instructs the task to exit as soon as possible, or to immediately exit if Execute is invoked after this method.\n  remarks: \"Cancel() may be called at any time after the task has been instantiated, even before <xref:Microsoft.Build.Framework.ITask.Execute%2A> is called.  \\n  \\n Cancel calls may come in from any thread. The implementation of this method should not block indefinitely.  \\n  \\n To cancel the build, both `Cancel` and `Execute` must return in any order.\"\n  syntax:\n    content: public void Cancel ();\n    parameters: []\n  overload: Microsoft.Build.Framework.ICancelableTask.Cancel*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: Microsoft.Build.Framework.ICancelableTask.Cancel\n  parent: Microsoft.Build.Framework.ICancelableTask\n  isExternal: false\n  name: Cancel()\n  nameWithType: ICancelableTask.Cancel()\n  fullName: Microsoft.Build.Framework.ICancelableTask.Cancel()\n- uid: Microsoft.Build.Framework.ICancelableTask.Cancel*\n  parent: Microsoft.Build.Framework.ICancelableTask\n  isExternal: false\n  name: Cancel\n  nameWithType: ICancelableTask.Cancel\n"}