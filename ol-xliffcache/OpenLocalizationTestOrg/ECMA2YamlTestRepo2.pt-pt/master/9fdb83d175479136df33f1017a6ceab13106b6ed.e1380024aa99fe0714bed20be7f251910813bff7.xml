{"nodes":[{"pos":[758,838],"content":"Provides a forward-only cursor to enumerate through messages in a message queue.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides a forward-only cursor to enumerate through messages in a message queue.","pos":[0,80]}]},{"pos":[851,2283],"content":"Use MessageQueueEnumerator for dynamic interaction with queues on the network. Methods available through the <xref:System.Messaging.MessageQueue> class can return either a MessageQueueEnumerator containing a dynamic list of queues, or an array that contains a snapshot of the queue collection at the time the specified method was called.       There is no defined ordering of queues in a network. They are not ordered, for example, by computer, label, public or private status, or other user-accessible criteria. A MessageQueueEnumerator is a cursor, initialized to the head of a dynamic list. You can move the cursor to the first queue of the enumeration by calling <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A>. After the enumerator has been initialized, you can use <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> to step forward through the remaining queues.       It is not possible to step backward with a MessageQueueEnumerator. A cursor only allows forward movement through the queue enumeration. However, you can call <xref:System.Messaging.MessageQueueEnumerator.Reset%2A> to reset the enumeration and put the cursor at the beginning of the list again. Because the enumerator is dynamic, a queue that is appended beyond the cursor's current position can be accessed by the enumerator. A queue that is inserted before the cursor's current position cannot be accessed without first calling Reset.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use MessageQueueEnumerator for dynamic interaction with queues on the network. Methods available through the <xref:System.Messaging.MessageQueue> class can return either a MessageQueueEnumerator containing a dynamic list of queues, or an array that contains a snapshot of the queue collection at the time the specified method was called.       There is no defined ordering of queues in a network. They are not ordered, for example, by computer, label, public or private status, or other user-accessible criteria. A MessageQueueEnumerator is a cursor, initialized to the head of a dynamic list. You can move the cursor to the first queue of the enumeration by calling <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A>. After the enumerator has been initialized, you can use <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> to step forward through the remaining queues.       It is not possible to step backward with a MessageQueueEnumerator. A cursor only allows forward movement through the queue enumeration. However, you can call <xref:System.Messaging.MessageQueueEnumerator.Reset%2A> to reset the enumeration and put the cursor at the beginning of the list again. Because the enumerator is dynamic, a queue that is appended beyond the cursor's current position can be accessed by the enumerator. A queue that is inserted before the cursor's current position cannot be accessed without first calling Reset.","pos":[0,1428],"nodes":[{"content":"Use MessageQueueEnumerator for dynamic interaction with queues on the network.","pos":[0,78]},{"content":"Methods available through the &lt;xref:System.Messaging.MessageQueue&gt; class can return either a MessageQueueEnumerator containing a dynamic list of queues, or an array that contains a snapshot of the queue collection at the time the specified method was called.","pos":[79,337],"source":" Methods available through the <xref:System.Messaging.MessageQueue> class can return either a MessageQueueEnumerator containing a dynamic list of queues, or an array that contains a snapshot of the queue collection at the time the specified method was called."},{"content":"There is no defined ordering of queues in a network.","pos":[344,396]},{"content":"They are not ordered, for example, by computer, label, public or private status, or other user-accessible criteria.","pos":[397,512]},{"content":"A MessageQueueEnumerator is a cursor, initialized to the head of a dynamic list.","pos":[513,593]},{"content":"You can move the cursor to the first queue of the enumeration by calling &lt;xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A&gt;.","pos":[594,726],"source":" You can move the cursor to the first queue of the enumeration by calling <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A>."},{"content":"After the enumerator has been initialized, you can use &lt;xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A&gt; to step forward through the remaining queues.","pos":[727,886],"source":" After the enumerator has been initialized, you can use <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> to step forward through the remaining queues."},{"content":"It is not possible to step backward with a MessageQueueEnumerator.","pos":[893,959]},{"content":"A cursor only allows forward movement through the queue enumeration.","pos":[960,1028]},{"content":"However, you can call &lt;xref:System.Messaging.MessageQueueEnumerator.Reset%2A&gt; to reset the enumeration and put the cursor at the beginning of the list again.","pos":[1029,1186],"source":" However, you can call <xref:System.Messaging.MessageQueueEnumerator.Reset%2A> to reset the enumeration and put the cursor at the beginning of the list again."},{"content":"Because the enumerator is dynamic, a queue that is appended beyond the cursor's current position can be accessed by the enumerator.","pos":[1187,1318]},{"content":"A queue that is inserted before the cursor's current position cannot be accessed without first calling Reset.","pos":[1319,1428]}]}]},{"pos":[3738,3789],"content":"Frees the resources associated with the enumerator.","needQuote":true,"needEscape":true,"nodes":[{"content":"Frees the resources associated with the enumerator.","pos":[0,51]}]},{"pos":[3801,4078],"content":"The operating system retains an open handle, <xref:System.Messaging.MessageQueueEnumerator.LocatorHandle%2A>, to the queue enumerator during the lifetime of the cursor. When you finish working with the enumerator, call Close to release the resources associated with the handle.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The operating system retains an open handle, <xref:System.Messaging.MessageQueueEnumerator.LocatorHandle%2A>, to the queue enumerator during the lifetime of the cursor. When you finish working with the enumerator, call Close to release the resources associated with the handle.","pos":[0,277],"nodes":[{"content":"The operating system retains an open handle, &lt;xref:System.Messaging.MessageQueueEnumerator.LocatorHandle%2A&gt;, to the queue enumerator during the lifetime of the cursor.","pos":[0,168],"source":"The operating system retains an open handle, <xref:System.Messaging.MessageQueueEnumerator.LocatorHandle%2A>, to the queue enumerator during the lifetime of the cursor."},{"content":"When you finish working with the enumerator, call Close to release the resources associated with the handle.","pos":[169,277]}]}]},{"pos":[4597,4684],"content":"Gets the current <bpt id=\"p1\">&lt;xref href=\"System.Messaging.MessageQueue\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> of the enumeration.","needQuote":true,"needEscape":true,"source":"Gets the current <xref href=\"System.Messaging.MessageQueue\"></xref> of the enumeration."},{"pos":[4697,5153],"content":"When the enumerator is created, it does not point to anything, so Current is not valid and will throw an exception if it is accessed. You must call <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> to position the cursor at the first queue in the enumeration.       Multiple calls to Current with no intervening calls to <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> will return the same <xref:System.Messaging.MessageQueue> object.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"When the enumerator is created, it does not point to anything, so Current is not valid and will throw an exception if it is accessed. You must call <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> to position the cursor at the first queue in the enumeration.       Multiple calls to Current with no intervening calls to <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> will return the same <xref:System.Messaging.MessageQueue> object.","pos":[0,454],"nodes":[{"content":"When the enumerator is created, it does not point to anything, so Current is not valid and will throw an exception if it is accessed.","pos":[0,133]},{"content":"You must call &lt;xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A&gt; to position the cursor at the first queue in the enumeration.","pos":[134,268],"source":" You must call <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> to position the cursor at the first queue in the enumeration."},{"content":"Multiple calls to Current with no intervening calls to &lt;xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A&gt; will return the same &lt;xref:System.Messaging.MessageQueue&gt; object.","pos":[275,454],"source":"       Multiple calls to Current with no intervening calls to <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> will return the same <xref:System.Messaging.MessageQueue> object."}]}]},{"pos":[5305,5359],"content":"The queue at which the cursor is currently positioned.","needQuote":true,"needEscape":true,"nodes":[{"content":"The queue at which the cursor is currently positioned.","pos":[0,54]}]},{"pos":[5546,5920],"content":"You called Current before the first call to &lt;xref:System.Messaging.MessageQueueEnumerator.MoveNext<bpt id=\"p1\">*</bpt>&gt;. The cursor is located before the first queue in the enumeration.       -or-       You called Current after a call to &lt;xref:System.Messaging.MessageQueueEnumerator.MoveNext<ept id=\"p1\">*</ept>&gt; had returned false (indicating the cursor is located after the last queue in the enumeration).","needQuote":false,"needEscape":true,"source":"You called Current before the first call to <xref:System.Messaging.MessageQueueEnumerator.MoveNext*>. The cursor is located before the first queue in the enumeration.       -or-       You called Current after a call to <xref:System.Messaging.MessageQueueEnumerator.MoveNext*> had returned false (indicating the cursor is located after the last queue in the enumeration)."},{"pos":[6304,6400],"content":"Releases all resources used by the <bpt id=\"p1\">&lt;xref href=\"System.Messaging.MessageQueueEnumerator\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Releases all resources used by the <xref href=\"System.Messaging.MessageQueueEnumerator\"></xref>."},{"pos":[6412,6659],"content":"Calling Dispose allows the resources used by the <xref:System.Messaging.MessageQueueEnumerator> to be reallocated for other purposes. For more information about Dispose, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md).","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Calling Dispose allows the resources used by the &lt;xref:System.Messaging.MessageQueueEnumerator&gt; to be reallocated for other purposes.","pos":[0,133],"source":"Calling Dispose allows the resources used by the <xref:System.Messaging.MessageQueueEnumerator> to be reallocated for other purposes."},{"content":"For more information about Dispose, see <bpt id=\"p1\">[</bpt>Cleaning Up Unmanaged Resources<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[134,247],"source":" For more information about Dispose, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[7239,7391],"content":"Releases the unmanaged resources used by the <bpt id=\"p1\">&lt;xref href=\"System.Messaging.MessageQueueEnumerator\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and optionally releases the managed resources.","needQuote":true,"needEscape":true,"source":"Releases the unmanaged resources used by the <xref href=\"System.Messaging.MessageQueueEnumerator\"></xref> and optionally releases the managed resources."},{"pos":[7404,7991],"content":"This method is called by the public <xref:System.Messaging.MessageQueueEnumerator.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method. `Dispose` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.       When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Messaging.MessageQueueEnumerator> references. This method invokes the `Dispose` method of each referenced object.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method is called by the public &lt;xref:System.Messaging.MessageQueueEnumerator.Dispose%2A&gt; method and the &lt;xref:System.Object.Finalize%2A&gt; method.","pos":[0,149],"source":"This method is called by the public <xref:System.Messaging.MessageQueueEnumerator.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method."},{"content":"<ph id=\"ph1\">`Dispose`</ph> invokes the protected <ph id=\"ph2\">`Dispose(Boolean)`</ph> method with the <ph id=\"ph3\">`disposing`</ph> parameter set to <ph id=\"ph4\">`true`</ph>.","pos":[150,253],"source":"`Dispose` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`."},{"content":"&lt;xref:System.Object.Finalize%2A&gt; invokes <ph id=\"ph1\">`Dispose`</ph> with <ph id=\"ph2\">`disposing`</ph> set to <ph id=\"ph3\">`false`</ph>.","pos":[254,337],"source":" <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`."},{"content":"When the <ph id=\"ph1\">`disposing`</ph> parameter is <ph id=\"ph2\">`true`</ph>, this method releases all resources held by any managed objects that this &lt;xref:System.Messaging.MessageQueueEnumerator&gt; references.","pos":[344,517],"source":"       When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Messaging.MessageQueueEnumerator> references."},{"content":"This method invokes the <ph id=\"ph1\">`Dispose`</ph> method of each referenced object.","pos":[518,585],"source":" This method invokes the `Dispose` method of each referenced object."}]},{"pos":[8147,8356],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to release both managed and unmanaged resources; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> to release only unmanaged resources.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only unmanaged resources."},{"pos":[8843,8917],"content":"Gets the native Message Queuing handle used to locate queues in a network.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the native Message Queuing handle used to locate queues in a network.","pos":[0,74]}]},{"pos":[8929,9112],"content":"When you no longer need this <xref:System.Messaging.MessageQueueEnumerator> instance, call <xref:System.Messaging.MessageQueueEnumerator.Close%2A> to free this handle to the resource.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"When you no longer need this &lt;xref:System.Messaging.MessageQueueEnumerator&gt; instance, call &lt;xref:System.Messaging.MessageQueueEnumerator.Close%2A&gt; to free this handle to the resource.","pos":[0,183],"source":"When you no longer need this <xref:System.Messaging.MessageQueueEnumerator> instance, call <xref:System.Messaging.MessageQueueEnumerator.Close%2A> to free this handle to the resource."}]},{"pos":[9230,9269],"content":"The native handle to the current queue.","needQuote":true,"needEscape":true,"nodes":[{"content":"The native handle to the current queue.","pos":[0,39]}]},{"pos":[9473,9499],"content":"The handle does not exist.","needQuote":true,"needEscape":true,"nodes":[{"content":"The handle does not exist.","pos":[0,26]}]},{"pos":[9612,9662],"content":"The calling code does not have browse permissions.","needQuote":true,"needEscape":true,"nodes":[{"content":"The calling code does not have browse permissions.","pos":[0,50]}]},{"pos":[10050,10142],"content":"Advances the enumerator to the next queue of the enumeration, if one is currently available.","needQuote":true,"needEscape":true,"nodes":[{"content":"Advances the enumerator to the next queue of the enumeration, if one is currently available.","pos":[0,92]}]},{"pos":[10155,10757],"content":"MoveNext returns `false` immediately if there are no queues associated with the enumeration.       MoveNext will return `true` until it has reached the end of the collection. It will then return `false` for each successive call. However once MoveNext has returned `false`, accessing the <xref:System.Messaging.MessageQueueEnumerator.Current%2A> property will throw an exception.       Upon creation, an enumerator is conceptually positioned before the first <xref:System.Messaging.MessageQueue> of the enumeration, and the first call to MoveNext brings the first queue of the enumeration into view.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"MoveNext returns <ph id=\"ph1\">`false`</ph> immediately if there are no queues associated with the enumeration.","pos":[0,92],"source":"MoveNext returns `false` immediately if there are no queues associated with the enumeration."},{"content":"MoveNext will return <ph id=\"ph1\">`true`</ph> until it has reached the end of the collection.","pos":[99,174],"source":"       MoveNext will return `true` until it has reached the end of the collection."},{"content":"It will then return <ph id=\"ph1\">`false`</ph> for each successive call.","pos":[175,228],"source":" It will then return `false` for each successive call."},{"content":"However once MoveNext has returned <ph id=\"ph1\">`false`</ph>, accessing the &lt;xref:System.Messaging.MessageQueueEnumerator.Current%2A&gt; property will throw an exception.","pos":[229,378],"source":" However once MoveNext has returned `false`, accessing the <xref:System.Messaging.MessageQueueEnumerator.Current%2A> property will throw an exception."},{"content":"Upon creation, an enumerator is conceptually positioned before the first &lt;xref:System.Messaging.MessageQueue&gt; of the enumeration, and the first call to MoveNext brings the first queue of the enumeration into view.","pos":[385,598],"source":"       Upon creation, an enumerator is conceptually positioned before the first <xref:System.Messaging.MessageQueue> of the enumeration, and the first call to MoveNext brings the first queue of the enumeration into view."}]},{"pos":[10884,11128],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the enumerator was successfully advanced to the next queue; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> if the enumerator has reached the end of the enumeration.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the enumerator was successfully advanced to the next queue; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if the enumerator has reached the end of the enumeration."},{"pos":[11317,11367],"content":"The calling code does not have browse permissions.","needQuote":true,"needEscape":true,"nodes":[{"content":"The calling code does not have browse permissions.","pos":[0,50]}]},{"pos":[11740,11808],"content":"Resets the cursor, so it points to the beginning of the enumeration.","needQuote":true,"needEscape":true,"nodes":[{"content":"Resets the cursor, so it points to the beginning of the enumeration.","pos":[0,68]}]},{"pos":[11821,12178],"content":"An enumerator moves in a forward-only direction. Use this method to return to the beginning of the enumeration of queues.       Reset positions the cursor at the first queue in the list. You do not need to call <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> after calling Reset to move the cursor forward to the first queue in the enumeration.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"An enumerator moves in a forward-only direction. Use this method to return to the beginning of the enumeration of queues.       Reset positions the cursor at the first queue in the list. You do not need to call <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> after calling Reset to move the cursor forward to the first queue in the enumeration.","pos":[0,355],"nodes":[{"content":"An enumerator moves in a forward-only direction.","pos":[0,48]},{"content":"Use this method to return to the beginning of the enumeration of queues.","pos":[49,121]},{"content":"Reset positions the cursor at the first queue in the list.","pos":[128,186]},{"content":"You do not need to call &lt;xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A&gt; after calling Reset to move the cursor forward to the first queue in the enumeration.","pos":[187,355],"source":" You do not need to call <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> after calling Reset to move the cursor forward to the first queue in the enumeration."}]}]},{"pos":[12867,12954],"content":"Gets the current <bpt id=\"p1\">&lt;xref href=\"System.Messaging.MessageQueue\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> of the enumeration.","needQuote":true,"needEscape":true,"source":"Gets the current <xref href=\"System.Messaging.MessageQueue\"></xref> of the enumeration."},{"pos":[13090,13144],"content":"The queue at which the cursor is currently positioned.","needQuote":true,"needEscape":true,"nodes":[{"content":"The queue at which the cursor is currently positioned.","pos":[0,54]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Messaging.MessageQueueEnumerator\n  id: MessageQueueEnumerator\n  children:\n  - System.Messaging.MessageQueueEnumerator.Close\n  - System.Messaging.MessageQueueEnumerator.Current\n  - System.Messaging.MessageQueueEnumerator.Dispose\n  - System.Messaging.MessageQueueEnumerator.Dispose(System.Boolean)\n  - System.Messaging.MessageQueueEnumerator.LocatorHandle\n  - System.Messaging.MessageQueueEnumerator.MoveNext\n  - System.Messaging.MessageQueueEnumerator.Reset\n  - System.Messaging.MessageQueueEnumerator.System#Collections#IEnumerator#Current\n  langs:\n  - csharp\n  name: MessageQueueEnumerator\n  nameWithType: MessageQueueEnumerator\n  fullName: System.Messaging.MessageQueueEnumerator\n  type: Class\n  summary: Provides a forward-only cursor to enumerate through messages in a message queue.\n  remarks: \"Use MessageQueueEnumerator for dynamic interaction with queues on the network. Methods available through the <xref:System.Messaging.MessageQueue> class can return either a MessageQueueEnumerator containing a dynamic list of queues, or an array that contains a snapshot of the queue collection at the time the specified method was called.  \\n  \\n There is no defined ordering of queues in a network. They are not ordered, for example, by computer, label, public or private status, or other user-accessible criteria. A MessageQueueEnumerator is a cursor, initialized to the head of a dynamic list. You can move the cursor to the first queue of the enumeration by calling <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A>. After the enumerator has been initialized, you can use <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> to step forward through the remaining queues.  \\n  \\n It is not possible to step backward with a MessageQueueEnumerator. A cursor only allows forward movement through the queue enumeration. However, you can call <xref:System.Messaging.MessageQueueEnumerator.Reset%2A> to reset the enumeration and put the cursor at the beginning of the list again. Because the enumerator is dynamic, a queue that is appended beyond the cursor's current position can be accessed by the enumerator. A queue that is inserted before the cursor's current position cannot be accessed without first calling Reset.\"\n  example:\n  - \"The following code example iterates through all the message queues in the network, and examines the path for each queue. Finally, it displays the number of public queues on the network.  \\n  \\n [!code-cs[MessageQueue.GetMessageQueueEnumerator_noparms#1](~/add/codesnippet/csharp/t-system.messaging.messa_7_1.cs)]\\n [!code-cpp[MessageQueue.GetMessageQueueEnumerator_noparms#1](~/add/codesnippet/cpp/t-system.messaging.messa_7_1.cpp)]\\n [!code-vb[MessageQueue.GetMessageQueueEnumerator_noparms#1](~/add/codesnippet/visualbasic/t-system.messaging.messa_7_1.vb)]\"\n  syntax:\n    content: 'public class MessageQueueEnumerator : MarshalByRefObject, IDisposable, System.Collections.IEnumerator'\n  inheritance:\n  - System.Object\n  - System.MarshalByRefObject\n  implements:\n  - System.Collections.IEnumerator\n  - System.IDisposable\n  inheritedMembers:\n  - System.MarshalByRefObject.CreateObjRef(System.Type)\n  - System.MarshalByRefObject.GetLifetimeService\n  - System.MarshalByRefObject.InitializeLifetimeService\n  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  platform:\n  - net462\n- uid: System.Messaging.MessageQueueEnumerator.Close\n  id: Close\n  parent: System.Messaging.MessageQueueEnumerator\n  langs:\n  - csharp\n  name: Close()\n  nameWithType: MessageQueueEnumerator.Close()\n  fullName: System.Messaging.MessageQueueEnumerator.Close()\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Frees the resources associated with the enumerator.\n  remarks: The operating system retains an open handle, <xref:System.Messaging.MessageQueueEnumerator.LocatorHandle%2A>, to the queue enumerator during the lifetime of the cursor. When you finish working with the enumerator, call Close to release the resources associated with the handle.\n  syntax:\n    content: public void Close ();\n    parameters: []\n  overload: System.Messaging.MessageQueueEnumerator.Close*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Messaging.MessageQueueEnumerator.Current\n  id: Current\n  parent: System.Messaging.MessageQueueEnumerator\n  langs:\n  - csharp\n  name: Current\n  nameWithType: MessageQueueEnumerator.Current\n  fullName: System.Messaging.MessageQueueEnumerator.Current\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets the current <xref href=\"System.Messaging.MessageQueue\"></xref> of the enumeration.\n  remarks: \"When the enumerator is created, it does not point to anything, so Current is not valid and will throw an exception if it is accessed. You must call <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> to position the cursor at the first queue in the enumeration.  \\n  \\n Multiple calls to Current with no intervening calls to <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> will return the same <xref:System.Messaging.MessageQueue> object.\"\n  syntax:\n    content: public System.Messaging.MessageQueue Current { get; }\n    return:\n      type: System.Messaging.MessageQueue\n      description: The queue at which the cursor is currently positioned.\n  overload: System.Messaging.MessageQueueEnumerator.Current*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"You called Current before the first call to <xref:System.Messaging.MessageQueueEnumerator.MoveNext*>. The cursor is located before the first queue in the enumeration.  \\n  \\n -or-  \\n  \\n You called Current after a call to <xref:System.Messaging.MessageQueueEnumerator.MoveNext*> had returned false (indicating the cursor is located after the last queue in the enumeration).\"\n  platform:\n  - net462\n- uid: System.Messaging.MessageQueueEnumerator.Dispose\n  id: Dispose\n  parent: System.Messaging.MessageQueueEnumerator\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: MessageQueueEnumerator.Dispose()\n  fullName: System.Messaging.MessageQueueEnumerator.Dispose()\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Releases all resources used by the <xref href=\"System.Messaging.MessageQueueEnumerator\"></xref>.\n  remarks: Calling Dispose allows the resources used by the <xref:System.Messaging.MessageQueueEnumerator> to be reallocated for other purposes. For more information about Dispose, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md).\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.Messaging.MessageQueueEnumerator.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Messaging.MessageQueueEnumerator.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Messaging.MessageQueueEnumerator\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: MessageQueueEnumerator.Dispose(Boolean)\n  fullName: System.Messaging.MessageQueueEnumerator.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Releases the unmanaged resources used by the <xref href=\"System.Messaging.MessageQueueEnumerator\"></xref> and optionally releases the managed resources.\n  remarks: \"This method is called by the public <xref:System.Messaging.MessageQueueEnumerator.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method. `Dispose` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.  \\n  \\n When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Messaging.MessageQueueEnumerator> references. This method invokes the `Dispose` method of each referenced object.\"\n  syntax:\n    content: protected virtual void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only unmanaged resources.\n  overload: System.Messaging.MessageQueueEnumerator.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Messaging.MessageQueueEnumerator.LocatorHandle\n  id: LocatorHandle\n  parent: System.Messaging.MessageQueueEnumerator\n  langs:\n  - csharp\n  name: LocatorHandle\n  nameWithType: MessageQueueEnumerator.LocatorHandle\n  fullName: System.Messaging.MessageQueueEnumerator.LocatorHandle\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets the native Message Queuing handle used to locate queues in a network.\n  remarks: When you no longer need this <xref:System.Messaging.MessageQueueEnumerator> instance, call <xref:System.Messaging.MessageQueueEnumerator.Close%2A> to free this handle to the resource.\n  syntax:\n    content: public IntPtr LocatorHandle { get; }\n    return:\n      type: System.IntPtr\n      description: The native handle to the current queue.\n  overload: System.Messaging.MessageQueueEnumerator.LocatorHandle*\n  exceptions:\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: The handle does not exist.\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The calling code does not have browse permissions.\n  platform:\n  - net462\n- uid: System.Messaging.MessageQueueEnumerator.MoveNext\n  id: MoveNext\n  parent: System.Messaging.MessageQueueEnumerator\n  langs:\n  - csharp\n  name: MoveNext()\n  nameWithType: MessageQueueEnumerator.MoveNext()\n  fullName: System.Messaging.MessageQueueEnumerator.MoveNext()\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Advances the enumerator to the next queue of the enumeration, if one is currently available.\n  remarks: \"MoveNext returns `false` immediately if there are no queues associated with the enumeration.  \\n  \\n MoveNext will return `true` until it has reached the end of the collection. It will then return `false` for each successive call. However once MoveNext has returned `false`, accessing the <xref:System.Messaging.MessageQueueEnumerator.Current%2A> property will throw an exception.  \\n  \\n Upon creation, an enumerator is conceptually positioned before the first <xref:System.Messaging.MessageQueue> of the enumeration, and the first call to MoveNext brings the first queue of the enumeration into view.\"\n  syntax:\n    content: public bool MoveNext ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the enumerator was successfully advanced to the next queue; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if the enumerator has reached the end of the enumeration.\n  overload: System.Messaging.MessageQueueEnumerator.MoveNext*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The calling code does not have browse permissions.\n  platform:\n  - net462\n- uid: System.Messaging.MessageQueueEnumerator.Reset\n  id: Reset\n  parent: System.Messaging.MessageQueueEnumerator\n  langs:\n  - csharp\n  name: Reset()\n  nameWithType: MessageQueueEnumerator.Reset()\n  fullName: System.Messaging.MessageQueueEnumerator.Reset()\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Resets the cursor, so it points to the beginning of the enumeration.\n  remarks: \"An enumerator moves in a forward-only direction. Use this method to return to the beginning of the enumeration of queues.  \\n  \\n Reset positions the cursor at the first queue in the list. You do not need to call <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> after calling Reset to move the cursor forward to the first queue in the enumeration.\"\n  syntax:\n    content: public void Reset ();\n    parameters: []\n  overload: System.Messaging.MessageQueueEnumerator.Reset*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Messaging.MessageQueueEnumerator.System#Collections#IEnumerator#Current\n  id: System#Collections#IEnumerator#Current\n  isEii: true\n  parent: System.Messaging.MessageQueueEnumerator\n  langs:\n  - csharp\n  name: System.Collections.IEnumerator.Current\n  nameWithType: MessageQueueEnumerator.System.Collections.IEnumerator.Current\n  fullName: System.Messaging.MessageQueueEnumerator.System.Collections.IEnumerator.Current\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets the current <xref href=\"System.Messaging.MessageQueue\"></xref> of the enumeration.\n  syntax:\n    content: object System.Collections.IEnumerator.Current { get; }\n    return:\n      type: System.Object\n      description: The queue at which the cursor is currently positioned.\n  overload: System.Messaging.MessageQueueEnumerator.System#Collections#IEnumerator#Current*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.MarshalByRefObject\n  isExternal: false\n  name: System.MarshalByRefObject\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.Messaging.MessageQueueException\n  parent: System.Messaging\n  isExternal: false\n  name: MessageQueueException\n  nameWithType: MessageQueueException\n  fullName: System.Messaging.MessageQueueException\n- uid: System.Security.SecurityException\n  isExternal: true\n  name: System.Security.SecurityException\n- uid: System.Messaging.MessageQueueEnumerator.Close\n  parent: System.Messaging.MessageQueueEnumerator\n  isExternal: false\n  name: Close()\n  nameWithType: MessageQueueEnumerator.Close()\n  fullName: System.Messaging.MessageQueueEnumerator.Close()\n- uid: System.Messaging.MessageQueueEnumerator.Current\n  parent: System.Messaging.MessageQueueEnumerator\n  isExternal: false\n  name: Current\n  nameWithType: MessageQueueEnumerator.Current\n  fullName: System.Messaging.MessageQueueEnumerator.Current\n- uid: System.Messaging.MessageQueue\n  parent: System.Messaging\n  isExternal: false\n  name: MessageQueue\n  nameWithType: MessageQueue\n  fullName: System.Messaging.MessageQueue\n- uid: System.Messaging.MessageQueueEnumerator.Dispose\n  parent: System.Messaging.MessageQueueEnumerator\n  isExternal: false\n  name: Dispose()\n  nameWithType: MessageQueueEnumerator.Dispose()\n  fullName: System.Messaging.MessageQueueEnumerator.Dispose()\n- uid: System.Messaging.MessageQueueEnumerator.Dispose(System.Boolean)\n  parent: System.Messaging.MessageQueueEnumerator\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: MessageQueueEnumerator.Dispose(Boolean)\n  fullName: System.Messaging.MessageQueueEnumerator.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Messaging.MessageQueueEnumerator.LocatorHandle\n  parent: System.Messaging.MessageQueueEnumerator\n  isExternal: false\n  name: LocatorHandle\n  nameWithType: MessageQueueEnumerator.LocatorHandle\n  fullName: System.Messaging.MessageQueueEnumerator.LocatorHandle\n- uid: System.IntPtr\n  parent: System\n  isExternal: true\n  name: IntPtr\n  nameWithType: IntPtr\n  fullName: System.IntPtr\n- uid: System.Messaging.MessageQueueEnumerator.MoveNext\n  parent: System.Messaging.MessageQueueEnumerator\n  isExternal: false\n  name: MoveNext()\n  nameWithType: MessageQueueEnumerator.MoveNext()\n  fullName: System.Messaging.MessageQueueEnumerator.MoveNext()\n- uid: System.Messaging.MessageQueueEnumerator.Reset\n  parent: System.Messaging.MessageQueueEnumerator\n  isExternal: false\n  name: Reset()\n  nameWithType: MessageQueueEnumerator.Reset()\n  fullName: System.Messaging.MessageQueueEnumerator.Reset()\n- uid: System.Messaging.MessageQueueEnumerator.System#Collections#IEnumerator#Current\n  parent: System.Messaging.MessageQueueEnumerator\n  isExternal: false\n  name: System.Collections.IEnumerator.Current\n  nameWithType: MessageQueueEnumerator.System.Collections.IEnumerator.Current\n  fullName: System.Messaging.MessageQueueEnumerator.System.Collections.IEnumerator.Current\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Messaging.MessageQueueEnumerator.Close*\n  parent: System.Messaging.MessageQueueEnumerator\n  isExternal: false\n  name: Close\n  nameWithType: MessageQueueEnumerator.Close\n- uid: System.Messaging.MessageQueueEnumerator.Current*\n  parent: System.Messaging.MessageQueueEnumerator\n  isExternal: false\n  name: Current\n  nameWithType: MessageQueueEnumerator.Current\n- uid: System.Messaging.MessageQueueEnumerator.Dispose*\n  parent: System.Messaging.MessageQueueEnumerator\n  isExternal: false\n  name: Dispose\n  nameWithType: MessageQueueEnumerator.Dispose\n- uid: System.Messaging.MessageQueueEnumerator.LocatorHandle*\n  parent: System.Messaging.MessageQueueEnumerator\n  isExternal: false\n  name: LocatorHandle\n  nameWithType: MessageQueueEnumerator.LocatorHandle\n- uid: System.Messaging.MessageQueueEnumerator.MoveNext*\n  parent: System.Messaging.MessageQueueEnumerator\n  isExternal: false\n  name: MoveNext\n  nameWithType: MessageQueueEnumerator.MoveNext\n- uid: System.Messaging.MessageQueueEnumerator.Reset*\n  parent: System.Messaging.MessageQueueEnumerator\n  isExternal: false\n  name: Reset\n  nameWithType: MessageQueueEnumerator.Reset\n- uid: System.Messaging.MessageQueueEnumerator.System#Collections#IEnumerator#Current*\n  parent: System.Messaging.MessageQueueEnumerator\n  isExternal: false\n  name: System.Collections.IEnumerator.Current\n  nameWithType: MessageQueueEnumerator.System.Collections.IEnumerator.Current\n"}