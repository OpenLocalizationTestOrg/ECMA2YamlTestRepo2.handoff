{"nodes":[{"pos":[1978,2083],"content":"Provides a custom bitmap effect by using a <bpt id=\"p1\">&lt;xref href=\"System.Windows.Media.Effects.PixelShader\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Provides a custom bitmap effect by using a <xref href=\"System.Windows.Media.Effects.PixelShader\"></xref>."},{"pos":[2096,4604],"content":"Derive from the ShaderEffect class to implement a custom effect based on a single pixel shader.       The following steps show how to create a custom effect.      1.  Load a <xref:System.Windows.Media.Effects.PixelShader> from precompiled High Level Shading Language (HLSL) bytecode.      2.  Define dependency properties that represent the parameters of the effect and the <xref:System.Windows.Media.Brush>-based surface inputs. Use one of the <xref:System.Windows.Media.Effects.ShaderEffect.RegisterPixelShaderSamplerProperty%2A> overloads to associate these inputs with register numbers that are referenced in the HLSL bytecode.       The number of samplers is limited to 4.       The following restrictions apply when using a PS 3.0 shader.      -   When a PS 3.0 shader is assigned, the number of samplers increases to 8. Assign the PS 3.0 shader before other shaders to enable registering 8 samplers.      -   The full shader constant register limit of 224 for floats is used. For more information, see [ps_3_0](http://go.microsoft.com/fwlink/?LinkId=166292).      -   The following data types are supported in PS 3.0 shaders only. An exception is thrown if these are used in lower shader versions.          -   `int` and types convertible to `int`: `uint`, `byte`, `sbyte`, `long`, `ulong`, `short`, `ushort`, `char`          -   `bool`      -   If a valid PS 3.0 shader is loaded on a computer that does not have hardware support for PS 3.0, the shader is ignored. If the shader is invalid, no exception is thrown.      -   If a computer has more than one video card, the behavior is defined by the least capable video card. For example, if the computer has two video cards, one of which supports PS 3.0 and one of which does not, the behavior is the same as if the computer does not support PS 3.0.      -   If a computer supports rendering PS 3.0 in hardware, but an invalid PS 3.0 shader is assigned, the <xref:System.Windows.Media.Effects.PixelShader.InvalidPixelShaderEncountered> event is raised. An example of an invalid PS 3.0 shader is one compiled with the `ps_3_sw` flag. The ShaderEffect class accepts only PS 3.0 shaders that are compiled with the `ps_3_0` flag passed to fxc.exe. For more information, see [Effect-Compiler Tool](http://go.microsoft.com/fwlink/?LinkId=166293).      > [!NOTE] >  PS 2.0 shaders run when rendering in software. However, even if PS 3.0 is supported by the system's hardware, PS 3.0 shaders do not run during software rendering.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Derive from the ShaderEffect class to implement a custom effect based on a single pixel shader.","pos":[0,95]},{"content":"The following steps show how to create a custom effect.","pos":[102,157]},{"content":"1.","pos":[163,165]},{"content":"Load a &lt;xref:System.Windows.Media.Effects.PixelShader&gt; from precompiled High Level Shading Language (HLSL) bytecode.","pos":[167,283],"source":"  Load a <xref:System.Windows.Media.Effects.PixelShader> from precompiled High Level Shading Language (HLSL) bytecode."},{"content":"2.","pos":[289,291]},{"content":"Define dependency properties that represent the parameters of the effect and the &lt;xref:System.Windows.Media.Brush&gt;-based surface inputs.","pos":[293,429],"source":"  Define dependency properties that represent the parameters of the effect and the <xref:System.Windows.Media.Brush>-based surface inputs."},{"content":"Use one of the &lt;xref:System.Windows.Media.Effects.ShaderEffect.RegisterPixelShaderSamplerProperty%2A&gt; overloads to associate these inputs with register numbers that are referenced in the HLSL bytecode.","pos":[430,631],"source":" Use one of the <xref:System.Windows.Media.Effects.ShaderEffect.RegisterPixelShaderSamplerProperty%2A> overloads to associate these inputs with register numbers that are referenced in the HLSL bytecode."},{"content":"The number of samplers is limited to 4.","pos":[638,677]},{"content":"The following restrictions apply when using a PS 3.0 shader.","pos":[684,744]},{"content":"-   When a PS 3.0 shader is assigned, the number of samplers increases to 8.","pos":[750,826]},{"content":"Assign the PS 3.0 shader before other shaders to enable registering 8 samplers.","pos":[827,906]},{"content":"-   The full shader constant register limit of 224 for floats is used.","pos":[912,982]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>ps_3_0<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=166292)</ept>.","pos":[983,1065],"source":" For more information, see [ps_3_0](http://go.microsoft.com/fwlink/?LinkId=166292)."},{"content":"-   The following data types are supported in PS 3.0 shaders only.","pos":[1071,1137]},{"content":"An exception is thrown if these are used in lower shader versions.","pos":[1138,1204]},{"content":"-   <ph id=\"ph1\">`int`</ph> and types convertible to <ph id=\"ph2\">`int`</ph>: <ph id=\"ph3\">`uint`</ph>, <ph id=\"ph4\">`byte`</ph>, <ph id=\"ph5\">`sbyte`</ph>, <ph id=\"ph6\">`long`</ph>, <ph id=\"ph7\">`ulong`</ph>, <ph id=\"ph8\">`short`</ph>, <ph id=\"ph9\">`ushort`</ph>, <ph id=\"ph10\">`char`</ph><ph id=\"ph11\">          -   </ph><ph id=\"ph12\">`bool`</ph>      -   If a valid PS 3.0 shader is loaded on a computer that does not have hardware support for PS 3.0, the shader is ignored.","pos":[1214,1472],"source":"          -   `int` and types convertible to `int`: `uint`, `byte`, `sbyte`, `long`, `ulong`, `short`, `ushort`, `char`          -   `bool`      -   If a valid PS 3.0 shader is loaded on a computer that does not have hardware support for PS 3.0, the shader is ignored."},{"content":"If the shader is invalid, no exception is thrown.","pos":[1473,1522]},{"content":"-   If a computer has more than one video card, the behavior is defined by the least capable video card.","pos":[1528,1632]},{"content":"For example, if the computer has two video cards, one of which supports PS 3.0 and one of which does not, the behavior is the same as if the computer does not support PS 3.0.","pos":[1633,1807]},{"content":"-   If a computer supports rendering PS 3.0 in hardware, but an invalid PS 3.0 shader is assigned, the &lt;xref:System.Windows.Media.Effects.PixelShader.InvalidPixelShaderEncountered&gt; event is raised.","pos":[1813,2010],"source":"      -   If a computer supports rendering PS 3.0 in hardware, but an invalid PS 3.0 shader is assigned, the <xref:System.Windows.Media.Effects.PixelShader.InvalidPixelShaderEncountered> event is raised."},{"content":"An example of an invalid PS 3.0 shader is one compiled with the <ph id=\"ph1\">`ps_3_sw`</ph> flag.","pos":[2011,2090],"source":" An example of an invalid PS 3.0 shader is one compiled with the `ps_3_sw` flag."},{"content":"The ShaderEffect class accepts only PS 3.0 shaders that are compiled with the <ph id=\"ph1\">`ps_3_0`</ph> flag passed to fxc.exe.","pos":[2091,2201],"source":" The ShaderEffect class accepts only PS 3.0 shaders that are compiled with the `ps_3_0` flag passed to fxc.exe."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Effect-Compiler Tool<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=166293)</ept>.","pos":[2202,2298],"source":" For more information, see [Effect-Compiler Tool](http://go.microsoft.com/fwlink/?LinkId=166293)."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  PS 2.0 shaders run when rendering in software.","pos":[2304,2363],"source":"      > [!NOTE] >  PS 2.0 shaders run when rendering in software."},{"content":"However, even if PS 3.0 is supported by the system's hardware, PS 3.0 shaders do not run during software rendering.","pos":[2364,2479]}]},{"pos":[9412,9515],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Media.Effects.ShaderEffect\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Windows.Media.Effects.ShaderEffect\"></xref> class."},{"pos":[10043,10374],"content":"Creates a modifiable clone of this <xref href=\"System.Windows.Media.Effects.ShaderEffect\"></xref> object, making deep copies of this object's values. When copying this object's dependency properties, this method copies resource references and data bindings (which may no longer resolve), but not animations or their current values.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a modifiable clone of this <bpt id=\"p1\">&lt;xref href=\"System.Windows.Media.Effects.ShaderEffect\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object, making deep copies of this object's values.","pos":[0,149],"source":"Creates a modifiable clone of this <xref href=\"System.Windows.Media.Effects.ShaderEffect\"></xref> object, making deep copies of this object's values."},{"content":"When copying this object's dependency properties, this method copies resource references and data bindings (which may no longer resolve), but not animations or their current values.","pos":[150,331]}]},{"pos":[10386,10637],"content":"The Clone method can be used to produce modifiable copies of frozen <xref:System.Windows.Freezable> objects. For convenience, this method shadows the inherited <xref:System.Windows.Freezable.Clone%2A> method to provide a strongly typed implementation.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Clone method can be used to produce modifiable copies of frozen <xref:System.Windows.Freezable> objects. For convenience, this method shadows the inherited <xref:System.Windows.Freezable.Clone%2A> method to provide a strongly typed implementation.","pos":[0,251],"nodes":[{"content":"The Clone method can be used to produce modifiable copies of frozen &lt;xref:System.Windows.Freezable&gt; objects.","pos":[0,108],"source":"The Clone method can be used to produce modifiable copies of frozen <xref:System.Windows.Freezable> objects."},{"content":"For convenience, this method shadows the inherited &lt;xref:System.Windows.Freezable.Clone%2A&gt; method to provide a strongly typed implementation.","pos":[109,251],"source":" For convenience, this method shadows the inherited <xref:System.Windows.Freezable.Clone%2A> method to provide a strongly typed implementation."}]}]},{"pos":[10824,11059],"content":"A modifiable clone of this instance. The returned clone is effectively a deep copy of the current object. The clone's <xref:System.Windows.Freezable.IsFrozen*> property is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"A modifiable clone of this instance.","pos":[0,36]},{"content":"The returned clone is effectively a deep copy of the current object.","pos":[37,105]},{"content":"The clone's &lt;xref:System.Windows.Freezable.IsFrozen*&gt; property is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[106,235],"source":" The clone's <xref:System.Windows.Freezable.IsFrozen*> property is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[11617,11761],"content":"Makes the instance a clone (deep copy) of the specified <bpt id=\"p1\">&lt;xref href=\"System.Windows.Freezable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> using base (non-animated) property values.","needQuote":true,"needEscape":true,"source":"Makes the instance a clone (deep copy) of the specified <xref href=\"System.Windows.Freezable\"></xref> using base (non-animated) property values."},{"pos":[11961,11981],"content":"The object to clone.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object to clone.","pos":[0,20]}]},{"pos":[12504,12765],"content":"Creates a modifiable clone of this <xref href=\"System.Windows.Media.Effects.ShaderEffect\"></xref> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are copied.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a modifiable clone of this <bpt id=\"p1\">&lt;xref href=\"System.Windows.Media.Effects.ShaderEffect\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object, making deep copies of this object's current values.","pos":[0,157],"source":"Creates a modifiable clone of this <xref href=\"System.Windows.Media.Effects.ShaderEffect\"></xref> object, making deep copies of this object's current values."},{"content":"Resource references, data bindings, and animations are not copied, but their current values are copied.","pos":[158,261]}]},{"pos":[12778,13135],"content":"This method is used to produce modifiable copies of frozen <xref:System.Windows.Freezable> objects (or any <xref:System.Windows.Freezable> object). For convenience, this method shadows the inherited version with a strongly typed implementation.       For more information, see <xref:System.Windows.Freezable.CloneCurrentValue%2A?displayProperty=fullName>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method is used to produce modifiable copies of frozen <xref:System.Windows.Freezable> objects (or any <xref:System.Windows.Freezable> object). For convenience, this method shadows the inherited version with a strongly typed implementation.       For more information, see <xref:System.Windows.Freezable.CloneCurrentValue%2A?displayProperty=fullName>.","pos":[0,355],"nodes":[{"content":"This method is used to produce modifiable copies of frozen &lt;xref:System.Windows.Freezable&gt; objects (or any &lt;xref:System.Windows.Freezable&gt; object).","pos":[0,147],"source":"This method is used to produce modifiable copies of frozen <xref:System.Windows.Freezable> objects (or any <xref:System.Windows.Freezable> object)."},{"content":"For convenience, this method shadows the inherited version with a strongly typed implementation.","pos":[148,244]},{"content":"For more information, see &lt;xref:System.Windows.Freezable.CloneCurrentValue%2A?displayProperty=fullName&gt;.","pos":[251,355],"source":"       For more information, see <xref:System.Windows.Freezable.CloneCurrentValue%2A?displayProperty=fullName>."}]}]},{"pos":[13335,13656],"content":"A modifiable clone of the current object. The cloned object's <xref:System.Windows.Freezable.IsFrozen*> property will be <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> even if the source's <xref:System.Windows.Freezable.IsFrozen*> property was <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"A modifiable clone of the current object.","pos":[0,41]},{"content":"The cloned object's &lt;xref:System.Windows.Freezable.IsFrozen<bpt id=\"p1\">*</bpt>&gt; property will be <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> even if the source's &lt;xref:System.Windows.Freezable.IsFrozen<ept id=\"p1\">*</ept>&gt; property was <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","pos":[42,321],"source":" The cloned object's <xref:System.Windows.Freezable.IsFrozen*> property will be <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> even if the source's <xref:System.Windows.Freezable.IsFrozen*> property was <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>."}]},{"pos":[14286,14429],"content":"Makes the instance a modifiable clone (deep copy) of the specified <bpt id=\"p1\">&lt;xref href=\"System.Windows.Freezable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> using current property values.","needQuote":true,"needEscape":true,"source":"Makes the instance a modifiable clone (deep copy) of the specified <xref href=\"System.Windows.Freezable\"></xref> using current property values."},{"pos":[14641,14704],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Windows.Freezable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to be cloned.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Windows.Freezable\"></xref> to be cloned."},{"pos":[15244,15334],"content":"Creates a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Freezable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> derived class.","needQuote":true,"needEscape":true,"source":"Creates a new instance of the <xref href=\"System.Windows.Freezable\"></xref> derived class."},{"pos":[15512,15529],"content":"The new instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"The new instance.","pos":[0,17]}]},{"pos":[16087,16234],"content":"Gets or sets a value that indicates the shader register to use for the partial derivatives of the texture coordinates with respect to screen space.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value that indicates the shader register to use for the partial derivatives of the texture coordinates with respect to screen space.","pos":[0,147]}]},{"pos":[16247,18198],"content":"Use the DdxUvDdyUvRegisterIndex property to specify the shader register that contains the partial derivatives of the texture coordinates with respect to screen space. For example, if DdxUvDdyUvRegisterIndex is set to 4, the shader register c4 is used. Register c4 contains four float fields. The following High Level Shading Language (HLSL) code shows how this register is used. The `nextPixelUV` value represents the next pixel to the right.      ```   float4 ddxUvDdyUv : register(c4);   SamplerState  sampler : register(S0);   ...   float2 nextPixelUV;   nextPixelUV.u = ddxUvDdyUv.x + u;   nextPixelUV.v = ddxUvDdyUv.y + v;      tex2D(sampler, nextPixelUV);   ```       The following table shows how the register specified for DdxUvDdyUvRegisterIndex is filled.      |Register Constant|Derivative Value|   |-----------------------|----------------------|   |x component|ddx(u)|   |y component|ddx(v)|   |z component|ddy(u)|   |w component|ddy(v)|       Texture coordinates are denoted as `(u, v)`. `ddx(u)` is the constant partial derivative of the texture coordinate component `u` with respect to the screen-space x-coordinate. `ddy(u)` is the partial derivative of the texture coordinate `u` with respect to the screen-space y-coordinate. Similarly, `ddx(v)` and `ddy(v)` are the corresponding screen-space derivatives for the texture coordinate component `v`.      > [!NOTE] >  HLSL has the ddx and ddy instructions to calculate these values, but these instructions are not available on all PixelShader 2.0 hardware.       You may think of these constants in the following way. If you step 1 pixel to the right in screen space (in the x direction), then `ddx(u)` is the amount that `u` changes in texture space, and `ddx(v)` is the amount that `v` changes in texture space. If the effect is axis-aligned when it is rendered, then `ddx(v)` is 0. If the effect is rotated when it is rendered, then `ddx(v)` is non-zero.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use the DdxUvDdyUvRegisterIndex property to specify the shader register that contains the partial derivatives of the texture coordinates with respect to screen space.","pos":[0,166]},{"content":"For example, if DdxUvDdyUvRegisterIndex is set to 4, the shader register c4 is used.","pos":[167,251]},{"content":"Register c4 contains four float fields.","pos":[252,291]},{"content":"The following High Level Shading Language (HLSL) code shows how this register is used.","pos":[292,378]},{"content":"The <ph id=\"ph1\">`nextPixelUV`</ph> value represents the next pixel to the right.","pos":[379,442],"source":" The `nextPixelUV` value represents the next pixel to the right."},{"content":"<ph id=\"ph1\">```   float4 ddxUvDdyUv : register(c4);   SamplerState  sampler : register(S0);   ...   float2 nextPixelUV;   nextPixelUV.u = ddxUvDdyUv.x + u;   nextPixelUV.v = ddxUvDdyUv.y + v;      tex2D(sampler, nextPixelUV);   ```</ph>       The following table shows how the register specified for DdxUvDdyUvRegisterIndex is filled.","pos":[448,765],"source":"```   float4 ddxUvDdyUv : register(c4);   SamplerState  sampler : register(S0);   ...   float2 nextPixelUV;   nextPixelUV.u = ddxUvDdyUv.x + u;   nextPixelUV.v = ddxUvDdyUv.y + v;      tex2D(sampler, nextPixelUV);   ```       The following table shows how the register specified for DdxUvDdyUvRegisterIndex is filled."},{"content":"|Register Constant|Derivative Value|   |-----------------------|----------------------|   |x component|ddx(u)|   |y component|ddx(v)|   |z component|ddy(u)|   |w component|ddy(v)|       Texture coordinates are denoted as <ph id=\"ph1\">`(u, v)`</ph>.","pos":[771,1001],"source":"      |Register Constant|Derivative Value|   |-----------------------|----------------------|   |x component|ddx(u)|   |y component|ddx(v)|   |z component|ddy(u)|   |w component|ddy(v)|       Texture coordinates are denoted as `(u, v)`."},{"content":"<ph id=\"ph1\">`ddx(u)`</ph> is the constant partial derivative of the texture coordinate component <ph id=\"ph2\">`u`</ph> with respect to the screen-space x-coordinate.","pos":[1002,1132],"source":"`ddx(u)` is the constant partial derivative of the texture coordinate component `u` with respect to the screen-space x-coordinate."},{"content":"<ph id=\"ph1\">`ddy(u)`</ph> is the partial derivative of the texture coordinate <ph id=\"ph2\">`u`</ph> with respect to the screen-space y-coordinate.","pos":[1133,1244],"source":"`ddy(u)` is the partial derivative of the texture coordinate `u` with respect to the screen-space y-coordinate."},{"content":"Similarly, <ph id=\"ph1\">`ddx(v)`</ph> and <ph id=\"ph2\">`ddy(v)`</ph> are the corresponding screen-space derivatives for the texture coordinate component <ph id=\"ph3\">`v`</ph>.","pos":[1245,1366],"source":" Similarly, `ddx(v)` and `ddy(v)` are the corresponding screen-space derivatives for the texture coordinate component `v`."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  HLSL has the ddx and ddy instructions to calculate these values, but these instructions are not available on all PixelShader 2.0 hardware.","pos":[1372,1523],"source":"      > [!NOTE] >  HLSL has the ddx and ddy instructions to calculate these values, but these instructions are not available on all PixelShader 2.0 hardware."},{"content":"You may think of these constants in the following way.","pos":[1530,1584]},{"content":"If you step 1 pixel to the right in screen space (in the x direction), then <ph id=\"ph1\">`ddx(u)`</ph> is the amount that <ph id=\"ph2\">`u`</ph> changes in texture space, and <ph id=\"ph3\">`ddx(v)`</ph> is the amount that <ph id=\"ph4\">`v`</ph> changes in texture space.","pos":[1585,1780],"source":" If you step 1 pixel to the right in screen space (in the x direction), then `ddx(u)` is the amount that `u` changes in texture space, and `ddx(v)` is the amount that `v` changes in texture space."},{"content":"If the effect is axis-aligned when it is rendered, then <ph id=\"ph1\">`ddx(v)`</ph> is 0.","pos":[1781,1851],"source":" If the effect is axis-aligned when it is rendered, then `ddx(v)` is 0."},{"content":"If the effect is rotated when it is rendered, then <ph id=\"ph1\">`ddx(v)`</ph> is non-zero.","pos":[1852,1924],"source":" If the effect is rotated when it is rendered, then `ddx(v)` is non-zero."}]},{"pos":[18331,18395],"content":"The index of the register that contains the partial derivatives.","needQuote":true,"needEscape":true,"nodes":[{"content":"The index of the register that contains the partial derivatives.","pos":[0,64]}]},{"pos":[18599,18724],"content":"An attempt was made to set the DdxUvDdyUvRegisterIndex property more than one time or after initial processing of the effect.","needQuote":true,"needEscape":true,"nodes":[{"content":"An attempt was made to set the DdxUvDdyUvRegisterIndex property more than one time or after initial processing of the effect.","pos":[0,125]}]},{"pos":[19234,19373],"content":"Makes the instance a frozen clone of the specified <bpt id=\"p1\">&lt;xref href=\"System.Windows.Freezable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> using base (non-animated) property values.","needQuote":true,"needEscape":true,"source":"Makes the instance a frozen clone of the specified <xref href=\"System.Windows.Freezable\"></xref> using base (non-animated) property values."},{"pos":[19579,19600],"content":"The instance to copy.","needQuote":true,"needEscape":true,"nodes":[{"content":"The instance to copy.","pos":[0,21]}]},{"pos":[20258,20455],"content":"Makes the current instance a frozen clone of the specified <xref href=\"System.Windows.Freezable\"></xref>. If the object has animated dependency properties, their current animated values are copied.","needQuote":true,"needEscape":true,"nodes":[{"content":"Makes the current instance a frozen clone of the specified <bpt id=\"p1\">&lt;xref href=\"System.Windows.Freezable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,105],"source":"Makes the current instance a frozen clone of the specified <xref href=\"System.Windows.Freezable\"></xref>."},{"content":"If the object has animated dependency properties, their current animated values are copied.","pos":[106,197]}]},{"pos":[20673,20742],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Windows.Freezable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to copy and freeze.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Windows.Freezable\"></xref> to copy and freeze."},{"pos":[21259,21379],"content":"Gets or sets a value indicating that the effect's output texture is larger than its input texture along the bottom edge.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating that the effect's output texture is larger than its input texture along the bottom edge.","pos":[0,120]}]},{"pos":[21505,21553],"content":"The padding along the bottom edge of the effect.","needQuote":true,"needEscape":true,"nodes":[{"content":"The padding along the bottom edge of the effect.","pos":[0,48]}]},{"pos":[21751,21785],"content":"The provided value is less than 0.","needQuote":true,"needEscape":true,"nodes":[{"content":"The provided value is less than 0.","pos":[0,34]}]},{"pos":[22192,22310],"content":"Gets or sets a value indicating that the effect's output texture is larger than its input texture along the left edge.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating that the effect's output texture is larger than its input texture along the left edge.","pos":[0,118]}]},{"pos":[22434,22480],"content":"The padding along the left edge of the effect.","needQuote":true,"needEscape":true,"nodes":[{"content":"The padding along the left edge of the effect.","pos":[0,46]}]},{"pos":[22676,22710],"content":"The provided value is less than 0.","needQuote":true,"needEscape":true,"nodes":[{"content":"The provided value is less than 0.","pos":[0,34]}]},{"pos":[23122,23241],"content":"Gets or sets a value indicating that the effect's output texture is larger than its input texture along the right edge.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating that the effect's output texture is larger than its input texture along the right edge.","pos":[0,119]}]},{"pos":[23366,23413],"content":"The padding along the right edge of the effect.","needQuote":true,"needEscape":true,"nodes":[{"content":"The padding along the right edge of the effect.","pos":[0,47]}]},{"pos":[23610,23644],"content":"The provided value is less than 0.","needQuote":true,"needEscape":true,"nodes":[{"content":"The provided value is less than 0.","pos":[0,34]}]},{"pos":[24046,24163],"content":"Gets or sets a value indicating that the effect's output texture is larger than its input texture along the top edge.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating that the effect's output texture is larger than its input texture along the top edge.","pos":[0,117]}]},{"pos":[24286,24331],"content":"The padding along the top edge of the effect.","needQuote":true,"needEscape":true,"nodes":[{"content":"The padding along the top edge of the effect.","pos":[0,45]}]},{"pos":[24526,24560],"content":"The provided value is less than 0.","needQuote":true,"needEscape":true,"nodes":[{"content":"The provided value is less than 0.","pos":[0,34]}]},{"pos":[24967,25068],"content":"Gets or sets the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Media.Effects.PixelShader\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to use for the effect.","needQuote":true,"needEscape":true,"source":"Gets or sets the <xref href=\"System.Windows.Media.Effects.PixelShader\"></xref> to use for the effect."},{"pos":[25081,25326],"content":"<bpt id=\"p1\">&lt;a name=\"dependencyPropertyInfo_PixelShader\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.Media.Effects.ShaderEffect.PixelShaderProperty&gt;|   |Metadata properties set to <ph id=\"ph1\">`true`</ph>|None|","needQuote":false,"needEscape":true,"extradata":"MT","source":"<a name=\"dependencyPropertyInfo_PixelShader\"></a>    ## Dependency Property Information      |||   |-|-|   |Identifier field|<xref:System.Windows.Media.Effects.ShaderEffect.PixelShaderProperty>|   |Metadata properties set to `true`|None|"},{"pos":[25512,25593],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Windows.Media.Effects.PixelShader\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for the effect.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Windows.Media.Effects.PixelShader\"></xref> for the effect."},{"pos":[26211,26296],"content":"Associates a dependency property value with a pixel shader's float constant register.","needQuote":true,"needEscape":true,"nodes":[{"content":"Associates a dependency property value with a pixel shader's float constant register.","pos":[0,85]}]},{"pos":[26308,26663],"content":"Use the PixelShaderConstantCallback method when you register a dependency property for a shader constant. The PixelShaderConstantCallback method constructs a <xref:System.Windows.PropertyChangedCallback> delegate that, when invoked, creates an association between the dependency property and the shader constant register specified by `floatRegisterIndex`.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use the PixelShaderConstantCallback method when you register a dependency property for a shader constant.","pos":[0,105]},{"content":"The PixelShaderConstantCallback method constructs a &lt;xref:System.Windows.PropertyChangedCallback&gt; delegate that, when invoked, creates an association between the dependency property and the shader constant register specified by <ph id=\"ph1\">`floatRegisterIndex`</ph>.","pos":[106,355],"source":" The PixelShaderConstantCallback method constructs a <xref:System.Windows.PropertyChangedCallback> delegate that, when invoked, creates an association between the dependency property and the shader constant register specified by `floatRegisterIndex`."}]},{"pos":[26886,26959],"content":"The index of the shader register associated with the dependency property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The index of the shader register associated with the dependency property.","pos":[0,73]}]},{"pos":[27042,27229],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Windows.PropertyChangedCallback\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> delegate that associates a dependency property and the shader constant register specified by <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">floatRegisterIndex</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Windows.PropertyChangedCallback\"></xref> delegate that associates a dependency property and the shader constant register specified by <code>floatRegisterIndex</code>."},{"pos":[27437,27480],"content":"The dependency property is an unknown type.","needQuote":true,"needEscape":true,"nodes":[{"content":"The dependency property is an unknown type.","pos":[0,43]}]},{"pos":[27575,27689],"content":"<ph id=\"ph1\">&lt;code&gt;floatRegisterIndex&lt;/code&gt;</ph> is greater than or equal to 32, or <ph id=\"ph2\">&lt;code&gt;floatRegisterIndex&lt;/code&gt;</ph> is less than 0.","needQuote":true,"needEscape":true,"source":"<code>floatRegisterIndex</code> is greater than or equal to 32, or <code>floatRegisterIndex</code> is less than 0."},{"pos":[28133,28230],"content":"Identifies the <xref:System.Windows.Media.Effects.ShaderEffect.PixelShader*> dependency property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Identifies the &lt;xref:System.Windows.Media.Effects.ShaderEffect.PixelShader*&gt; dependency property.","pos":[0,97],"source":"Identifies the <xref:System.Windows.Media.Effects.ShaderEffect.PixelShader*> dependency property."}]},{"pos":[28412,28424],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[28970,29048],"content":"Associates a dependency property value with a pixel shader's sampler register.","needQuote":true,"needEscape":true,"nodes":[{"content":"Associates a dependency property value with a pixel shader's sampler register.","pos":[0,78]}]},{"pos":[29060,29454],"content":"Use the PixelShaderSamplerCallback method when you register a <xref:System.Windows.Media.Brush>-valued dependency property for a shader sampler. The PixelShaderSamplerCallback method constructs a <xref:System.Windows.PropertyChangedCallback> delegate that, when invoked, creates an association between the dependency property and the shader sampler register specified by `samplerRegisterIndex`.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use the PixelShaderSamplerCallback method when you register a &lt;xref:System.Windows.Media.Brush&gt;-valued dependency property for a shader sampler.","pos":[0,144],"source":"Use the PixelShaderSamplerCallback method when you register a <xref:System.Windows.Media.Brush>-valued dependency property for a shader sampler."},{"content":"The PixelShaderSamplerCallback method constructs a &lt;xref:System.Windows.PropertyChangedCallback&gt; delegate that, when invoked, creates an association between the dependency property and the shader sampler register specified by <ph id=\"ph1\">`samplerRegisterIndex`</ph>.","pos":[145,394],"source":" The PixelShaderSamplerCallback method constructs a <xref:System.Windows.PropertyChangedCallback> delegate that, when invoked, creates an association between the dependency property and the shader sampler register specified by `samplerRegisterIndex`."}]},{"pos":[29680,29752],"content":"The index of the shader sampler associated with the dependency property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The index of the shader sampler associated with the dependency property.","pos":[0,72]}]},{"pos":[29835,30023],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Windows.PropertyChangedCallback\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> delegate that associates a dependency property and the shader sampler register specified by <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">samplerRegisterIndex</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Windows.PropertyChangedCallback\"></xref> delegate that associates a dependency property and the shader sampler register specified by <code>samplerRegisterIndex</code>."},{"pos":[30774,30921],"content":"Associates a dependency property value with a pixel shader's sampler register and a <bpt id=\"p1\">&lt;xref href=\"System.Windows.Media.Effects.SamplingMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Associates a dependency property value with a pixel shader's sampler register and a <xref href=\"System.Windows.Media.Effects.SamplingMode\"></xref>."},{"pos":[30933,31447],"content":"Use the <xref:System.Windows.Media.Effects.ShaderEffect.RegisterPixelShaderSamplerProperty%2A> method when you register a <xref:System.Windows.Media.Brush>-valued dependency property for a shader sampler. The <xref:System.Windows.Media.Effects.ShaderEffect.RegisterPixelShaderSamplerProperty%2A> method constructs a <xref:System.Windows.PropertyChangedCallback> delegate that, when invoked, creates an association between the dependency property and the shader sampler register specified by `samplerRegisterIndex`.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use the &lt;xref:System.Windows.Media.Effects.ShaderEffect.RegisterPixelShaderSamplerProperty%2A&gt; method when you register a &lt;xref:System.Windows.Media.Brush&gt;-valued dependency property for a shader sampler.","pos":[0,204],"source":"Use the <xref:System.Windows.Media.Effects.ShaderEffect.RegisterPixelShaderSamplerProperty%2A> method when you register a <xref:System.Windows.Media.Brush>-valued dependency property for a shader sampler."},{"content":"The &lt;xref:System.Windows.Media.Effects.ShaderEffect.RegisterPixelShaderSamplerProperty%2A&gt; method constructs a &lt;xref:System.Windows.PropertyChangedCallback&gt; delegate that, when invoked, creates an association between the dependency property and the shader sampler register specified by <ph id=\"ph1\">`samplerRegisterIndex`</ph>.","pos":[205,514],"source":" The <xref:System.Windows.Media.Effects.ShaderEffect.RegisterPixelShaderSamplerProperty%2A> method constructs a <xref:System.Windows.PropertyChangedCallback> delegate that, when invoked, creates an association between the dependency property and the shader sampler register specified by `samplerRegisterIndex`."}]},{"pos":[31729,31801],"content":"The index of the shader sampler associated with the dependency property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The index of the shader sampler associated with the dependency property.","pos":[0,72]}]},{"pos":[31898,31988],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Windows.Media.Effects.SamplingMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for the shader sampler.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Windows.Media.Effects.SamplingMode\"></xref> for the shader sampler."},{"pos":[32071,32259],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Windows.PropertyChangedCallback\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> delegate that associates a dependency property and the shader sampler register specified by <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">samplerRegisterIndex</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Windows.PropertyChangedCallback\"></xref> delegate that associates a dependency property and the shader sampler register specified by <code>samplerRegisterIndex</code>."},{"pos":[33015,33079],"content":"Associates a dependency property with a shader sampler register.","needQuote":true,"needEscape":true,"nodes":[{"content":"Associates a dependency property with a shader sampler register.","pos":[0,64]}]},{"pos":[33326,33362],"content":"The name of the dependency property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the dependency property.","pos":[0,36]}]},{"pos":[33426,33482],"content":"The type of the effect that has the dependency property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type of the effect that has the dependency property.","pos":[0,56]}]},{"pos":[33558,33630],"content":"The index of the shader sampler associated with the dependency property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The index of the shader sampler associated with the dependency property.","pos":[0,72]}]},{"pos":[33708,33812],"content":"A dependency property associated with the shader sampler specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">samplerRegisterIndex</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A dependency property associated with the shader sampler specified by <code>samplerRegisterIndex</code>."},{"pos":[34699,34832],"content":"Associates a dependency property with a shader sampler register and a <bpt id=\"p1\">&lt;xref href=\"System.Windows.Media.Effects.SamplingMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Associates a dependency property with a shader sampler register and a <xref href=\"System.Windows.Media.Effects.SamplingMode\"></xref>."},{"pos":[35135,35171],"content":"The name of the dependency property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the dependency property.","pos":[0,36]}]},{"pos":[35235,35291],"content":"The type of the effect that has the dependency property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type of the effect that has the dependency property.","pos":[0,56]}]},{"pos":[35367,35439],"content":"The index of the shader sampler associated with the dependency property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The index of the shader sampler associated with the dependency property.","pos":[0,72]}]},{"pos":[35536,35626],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Windows.Media.Effects.SamplingMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for the shader sampler.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Windows.Media.Effects.SamplingMode\"></xref> for the shader sampler."},{"pos":[35704,35808],"content":"A dependency property associated with the shader sampler specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">samplerRegisterIndex</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A dependency property associated with the shader sampler specified by <code>samplerRegisterIndex</code>."},{"pos":[36480,36605],"content":"Notifies the effect that the shader constant or sampler corresponding to the specified dependency property should be updated.","needQuote":true,"needEscape":true,"nodes":[{"content":"Notifies the effect that the shader constant or sampler corresponding to the specified dependency property should be updated.","pos":[0,125]}]},{"pos":[36796,36834],"content":"The dependency property to be updated.","needQuote":true,"needEscape":true,"nodes":[{"content":"The dependency property to be updated.","pos":[0,38]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Media.Effects.ShaderEffect\n  id: ShaderEffect\n  children:\n  - System.Windows.Media.Effects.ShaderEffect.#ctor\n  - System.Windows.Media.Effects.ShaderEffect.Clone\n  - System.Windows.Media.Effects.ShaderEffect.CloneCore(System.Windows.Freezable)\n  - System.Windows.Media.Effects.ShaderEffect.CloneCurrentValue\n  - System.Windows.Media.Effects.ShaderEffect.CloneCurrentValueCore(System.Windows.Freezable)\n  - System.Windows.Media.Effects.ShaderEffect.CreateInstanceCore\n  - System.Windows.Media.Effects.ShaderEffect.DdxUvDdyUvRegisterIndex\n  - System.Windows.Media.Effects.ShaderEffect.GetAsFrozenCore(System.Windows.Freezable)\n  - System.Windows.Media.Effects.ShaderEffect.GetCurrentValueAsFrozenCore(System.Windows.Freezable)\n  - System.Windows.Media.Effects.ShaderEffect.PaddingBottom\n  - System.Windows.Media.Effects.ShaderEffect.PaddingLeft\n  - System.Windows.Media.Effects.ShaderEffect.PaddingRight\n  - System.Windows.Media.Effects.ShaderEffect.PaddingTop\n  - System.Windows.Media.Effects.ShaderEffect.PixelShader\n  - System.Windows.Media.Effects.ShaderEffect.PixelShaderConstantCallback(System.Int32)\n  - System.Windows.Media.Effects.ShaderEffect.PixelShaderProperty\n  - System.Windows.Media.Effects.ShaderEffect.PixelShaderSamplerCallback(System.Int32)\n  - System.Windows.Media.Effects.ShaderEffect.PixelShaderSamplerCallback(System.Int32,System.Windows.Media.Effects.SamplingMode)\n  - System.Windows.Media.Effects.ShaderEffect.RegisterPixelShaderSamplerProperty(System.String,System.Type,System.Int32)\n  - System.Windows.Media.Effects.ShaderEffect.RegisterPixelShaderSamplerProperty(System.String,System.Type,System.Int32,System.Windows.Media.Effects.SamplingMode)\n  - System.Windows.Media.Effects.ShaderEffect.UpdateShaderValue(System.Windows.DependencyProperty)\n  langs:\n  - csharp\n  name: ShaderEffect\n  nameWithType: ShaderEffect\n  fullName: System.Windows.Media.Effects.ShaderEffect\n  type: Class\n  summary: Provides a custom bitmap effect by using a <xref href=\"System.Windows.Media.Effects.PixelShader\"></xref>.\n  remarks: \"Derive from the ShaderEffect class to implement a custom effect based on a single pixel shader.  \\n  \\n The following steps show how to create a custom effect.  \\n  \\n1.  Load a <xref:System.Windows.Media.Effects.PixelShader> from precompiled High Level Shading Language (HLSL) bytecode.  \\n  \\n2.  Define dependency properties that represent the parameters of the effect and the <xref:System.Windows.Media.Brush>-based surface inputs. Use one of the <xref:System.Windows.Media.Effects.ShaderEffect.RegisterPixelShaderSamplerProperty%2A> overloads to associate these inputs with register numbers that are referenced in the HLSL bytecode.  \\n  \\n The number of samplers is limited to 4.  \\n  \\n The following restrictions apply when using a PS 3.0 shader.  \\n  \\n-   When a PS 3.0 shader is assigned, the number of samplers increases to 8. Assign the PS 3.0 shader before other shaders to enable registering 8 samplers.  \\n  \\n-   The full shader constant register limit of 224 for floats is used. For more information, see [ps_3_0](http://go.microsoft.com/fwlink/?LinkId=166292).  \\n  \\n-   The following data types are supported in PS 3.0 shaders only. An exception is thrown if these are used in lower shader versions.  \\n  \\n    -   `int` and types convertible to `int`: `uint`, `byte`, `sbyte`, `long`, `ulong`, `short`, `ushort`, `char`  \\n  \\n    -   `bool`  \\n  \\n-   If a valid PS 3.0 shader is loaded on a computer that does not have hardware support for PS 3.0, the shader is ignored. If the shader is invalid, no exception is thrown.  \\n  \\n-   If a computer has more than one video card, the behavior is defined by the least capable video card. For example, if the computer has two video cards, one of which supports PS 3.0 and one of which does not, the behavior is the same as if the computer does not support PS 3.0.  \\n  \\n-   If a computer supports rendering PS 3.0 in hardware, but an invalid PS 3.0 shader is assigned, the <xref:System.Windows.Media.Effects.PixelShader.InvalidPixelShaderEncountered> event is raised. An example of an invalid PS 3.0 shader is one compiled with the `ps_3_sw` flag. The ShaderEffect class accepts only PS 3.0 shaders that are compiled with the `ps_3_0` flag passed to fxc.exe. For more information, see [Effect-Compiler Tool](http://go.microsoft.com/fwlink/?LinkId=166293).  \\n  \\n> [!NOTE]\\n>  PS 2.0 shaders run when rendering in software. However, even if PS 3.0 is supported by the system's hardware, PS 3.0 shaders do not run during software rendering.\"\n  example:\n  - \"The following code example shows how to derive from the ShaderEffect class.  \\n  \\n [!code-cs[System.Windows.Media.Effects.ShaderEffect#1](~/add/codesnippet/csharp/ShaderEffectDemo/ThresholdEffect.cs#1)]  \\n  \\n The following code example shows a shader that corresponds to the previous ShaderEffect class.  \\n  \\n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]  \\n  \\n The following XAML shows how to use the custom shader effect.  \\n  \\n [!code-xml[System.Windows.Media.Effects.ShaderEffect#1000](~/add/codesnippet/xaml/ShaderEffectDemo/Window1.xaml#1000)]\"\n  syntax:\n    content: 'public abstract class ShaderEffect : System.Windows.Media.Effects.Effect'\n  inheritance:\n  - System.Object\n  - System.Windows.Threading.DispatcherObject\n  - System.Windows.DependencyObject\n  - System.Windows.Freezable\n  - System.Windows.Media.Animation.Animatable\n  - System.Windows.Media.Effects.Effect\n  implements: []\n  inheritedMembers:\n  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)\n  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)\n  - System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)\n  - System.Windows.DependencyObject.DependencyObjectType\n  - System.Windows.DependencyObject.Equals(System.Object)\n  - System.Windows.DependencyObject.GetHashCode\n  - System.Windows.DependencyObject.GetLocalValueEnumerator\n  - System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)\n  - System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)\n  - System.Windows.DependencyObject.IsSealed\n  - System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)\n  - System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)\n  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)\n  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)\n  - System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)\n  - System.Windows.Freezable.CanFreeze\n  - System.Windows.Freezable.Changed\n  - System.Windows.Freezable.CreateInstance\n  - System.Windows.Freezable.Freeze\n  - System.Windows.Freezable.Freeze(System.Windows.Freezable,System.Boolean)\n  - System.Windows.Freezable.GetAsFrozen\n  - System.Windows.Freezable.GetCurrentValueAsFrozen\n  - System.Windows.Freezable.IsFrozen\n  - System.Windows.Freezable.OnChanged\n  - System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)\n  - System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject,System.Windows.DependencyProperty)\n  - System.Windows.Freezable.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  - System.Windows.Freezable.ReadPreamble\n  - System.Windows.Freezable.WritePostscript\n  - System.Windows.Freezable.WritePreamble\n  - System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)\n  - System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)\n  - System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)\n  - System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)\n  - System.Windows.Media.Animation.Animatable.FreezeCore(System.Boolean)\n  - System.Windows.Media.Animation.Animatable.GetAnimationBaseValue(System.Windows.DependencyProperty)\n  - System.Windows.Media.Animation.Animatable.HasAnimatedProperties\n  - System.Windows.Media.Animation.Animatable.ShouldSerializeStoredWeakReference(System.Windows.DependencyObject)\n  - System.Windows.Media.Effects.Effect.EffectMapping\n  - System.Windows.Media.Effects.Effect.ImplicitInput\n  - System.Windows.Threading.DispatcherObject.CheckAccess\n  - System.Windows.Threading.DispatcherObject.Dispatcher\n  - System.Windows.Threading.DispatcherObject.VerifyAccess\n  platform:\n  - net462\n- uid: System.Windows.Media.Effects.ShaderEffect.#ctor\n  id: '#ctor'\n  parent: System.Windows.Media.Effects.ShaderEffect\n  langs:\n  - csharp\n  name: ShaderEffect()\n  nameWithType: ShaderEffect.ShaderEffect()\n  fullName: System.Windows.Media.Effects.ShaderEffect.ShaderEffect()\n  type: Constructor\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media.Effects\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Media.Effects.ShaderEffect\"></xref> class.\n  syntax:\n    content: protected ShaderEffect ();\n    parameters: []\n  overload: System.Windows.Media.Effects.ShaderEffect.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Media.Effects.ShaderEffect.Clone\n  id: Clone\n  parent: System.Windows.Media.Effects.ShaderEffect\n  langs:\n  - csharp\n  name: Clone()\n  nameWithType: ShaderEffect.Clone()\n  fullName: System.Windows.Media.Effects.ShaderEffect.Clone()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media.Effects\n  summary: Creates a modifiable clone of this <xref href=\"System.Windows.Media.Effects.ShaderEffect\"></xref> object, making deep copies of this object's values. When copying this object's dependency properties, this method copies resource references and data bindings (which may no longer resolve), but not animations or their current values.\n  remarks: The Clone method can be used to produce modifiable copies of frozen <xref:System.Windows.Freezable> objects. For convenience, this method shadows the inherited <xref:System.Windows.Freezable.Clone%2A> method to provide a strongly typed implementation.\n  syntax:\n    content: public System.Windows.Media.Effects.ShaderEffect Clone ();\n    parameters: []\n    return:\n      type: System.Windows.Media.Effects.ShaderEffect\n      description: A modifiable clone of this instance. The returned clone is effectively a deep copy of the current object. The clone's <xref:System.Windows.Freezable.IsFrozen*> property is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.Media.Effects.ShaderEffect.Clone*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Media.Effects.ShaderEffect.CloneCore(System.Windows.Freezable)\n  id: CloneCore(System.Windows.Freezable)\n  parent: System.Windows.Media.Effects.ShaderEffect\n  langs:\n  - csharp\n  name: CloneCore(Freezable)\n  nameWithType: ShaderEffect.CloneCore(Freezable)\n  fullName: System.Windows.Media.Effects.ShaderEffect.CloneCore(Freezable)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media.Effects\n  summary: Makes the instance a clone (deep copy) of the specified <xref href=\"System.Windows.Freezable\"></xref> using base (non-animated) property values.\n  syntax:\n    content: protected override void CloneCore (System.Windows.Freezable sourceFreezable);\n    parameters:\n    - id: sourceFreezable\n      type: System.Windows.Freezable\n      description: The object to clone.\n  overload: System.Windows.Media.Effects.ShaderEffect.CloneCore*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Media.Effects.ShaderEffect.CloneCurrentValue\n  id: CloneCurrentValue\n  parent: System.Windows.Media.Effects.ShaderEffect\n  langs:\n  - csharp\n  name: CloneCurrentValue()\n  nameWithType: ShaderEffect.CloneCurrentValue()\n  fullName: System.Windows.Media.Effects.ShaderEffect.CloneCurrentValue()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media.Effects\n  summary: Creates a modifiable clone of this <xref href=\"System.Windows.Media.Effects.ShaderEffect\"></xref> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are copied.\n  remarks: \"This method is used to produce modifiable copies of frozen <xref:System.Windows.Freezable> objects (or any <xref:System.Windows.Freezable> object). For convenience, this method shadows the inherited version with a strongly typed implementation.  \\n  \\n For more information, see <xref:System.Windows.Freezable.CloneCurrentValue%2A?displayProperty=fullName>.\"\n  syntax:\n    content: public System.Windows.Media.Effects.ShaderEffect CloneCurrentValue ();\n    parameters: []\n    return:\n      type: System.Windows.Media.Effects.ShaderEffect\n      description: A modifiable clone of the current object. The cloned object's <xref:System.Windows.Freezable.IsFrozen*> property will be <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> even if the source's <xref:System.Windows.Freezable.IsFrozen*> property was <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.\n  overload: System.Windows.Media.Effects.ShaderEffect.CloneCurrentValue*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Media.Effects.ShaderEffect.CloneCurrentValueCore(System.Windows.Freezable)\n  id: CloneCurrentValueCore(System.Windows.Freezable)\n  parent: System.Windows.Media.Effects.ShaderEffect\n  langs:\n  - csharp\n  name: CloneCurrentValueCore(Freezable)\n  nameWithType: ShaderEffect.CloneCurrentValueCore(Freezable)\n  fullName: System.Windows.Media.Effects.ShaderEffect.CloneCurrentValueCore(Freezable)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media.Effects\n  summary: Makes the instance a modifiable clone (deep copy) of the specified <xref href=\"System.Windows.Freezable\"></xref> using current property values.\n  syntax:\n    content: protected override void CloneCurrentValueCore (System.Windows.Freezable sourceFreezable);\n    parameters:\n    - id: sourceFreezable\n      type: System.Windows.Freezable\n      description: The <xref href=\"System.Windows.Freezable\"></xref> to be cloned.\n  overload: System.Windows.Media.Effects.ShaderEffect.CloneCurrentValueCore*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Media.Effects.ShaderEffect.CreateInstanceCore\n  id: CreateInstanceCore\n  parent: System.Windows.Media.Effects.ShaderEffect\n  langs:\n  - csharp\n  name: CreateInstanceCore()\n  nameWithType: ShaderEffect.CreateInstanceCore()\n  fullName: System.Windows.Media.Effects.ShaderEffect.CreateInstanceCore()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media.Effects\n  summary: Creates a new instance of the <xref href=\"System.Windows.Freezable\"></xref> derived class.\n  syntax:\n    content: protected override System.Windows.Freezable CreateInstanceCore ();\n    parameters: []\n    return:\n      type: System.Windows.Freezable\n      description: The new instance.\n  overload: System.Windows.Media.Effects.ShaderEffect.CreateInstanceCore*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Media.Effects.ShaderEffect.DdxUvDdyUvRegisterIndex\n  id: DdxUvDdyUvRegisterIndex\n  parent: System.Windows.Media.Effects.ShaderEffect\n  langs:\n  - csharp\n  name: DdxUvDdyUvRegisterIndex\n  nameWithType: ShaderEffect.DdxUvDdyUvRegisterIndex\n  fullName: System.Windows.Media.Effects.ShaderEffect.DdxUvDdyUvRegisterIndex\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media.Effects\n  summary: Gets or sets a value that indicates the shader register to use for the partial derivatives of the texture coordinates with respect to screen space.\n  remarks: \"Use the DdxUvDdyUvRegisterIndex property to specify the shader register that contains the partial derivatives of the texture coordinates with respect to screen space. For example, if DdxUvDdyUvRegisterIndex is set to 4, the shader register c4 is used. Register c4 contains four float fields. The following High Level Shading Language (HLSL) code shows how this register is used. The `nextPixelUV` value represents the next pixel to the right.  \\n  \\n```  \\nfloat4 ddxUvDdyUv : register(c4);  \\nSamplerState  sampler : register(S0);  \\n...  \\nfloat2 nextPixelUV;  \\nnextPixelUV.u = ddxUvDdyUv.x + u;  \\nnextPixelUV.v = ddxUvDdyUv.y + v;  \\n  \\ntex2D(sampler, nextPixelUV);  \\n```  \\n  \\n The following table shows how the register specified for DdxUvDdyUvRegisterIndex is filled.  \\n  \\n|Register Constant|Derivative Value|  \\n|-----------------------|----------------------|  \\n|x component|ddx(u)|  \\n|y component|ddx(v)|  \\n|z component|ddy(u)|  \\n|w component|ddy(v)|  \\n  \\n Texture coordinates are denoted as `(u, v)`. `ddx(u)` is the constant partial derivative of the texture coordinate component `u` with respect to the screen-space x-coordinate. `ddy(u)` is the partial derivative of the texture coordinate `u` with respect to the screen-space y-coordinate. Similarly, `ddx(v)` and `ddy(v)` are the corresponding screen-space derivatives for the texture coordinate component `v`.  \\n  \\n> [!NOTE]\\n>  HLSL has the ddx and ddy instructions to calculate these values, but these instructions are not available on all PixelShader 2.0 hardware.  \\n  \\n You may think of these constants in the following way. If you step 1 pixel to the right in screen space (in the x direction), then `ddx(u)` is the amount that `u` changes in texture space, and `ddx(v)` is the amount that `v` changes in texture space. If the effect is axis-aligned when it is rendered, then `ddx(v)` is 0. If the effect is rotated when it is rendered, then `ddx(v)` is non-zero.\"\n  syntax:\n    content: protected int DdxUvDdyUvRegisterIndex { get; set; }\n    return:\n      type: System.Int32\n      description: The index of the register that contains the partial derivatives.\n  overload: System.Windows.Media.Effects.ShaderEffect.DdxUvDdyUvRegisterIndex*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: An attempt was made to set the DdxUvDdyUvRegisterIndex property more than one time or after initial processing of the effect.\n  platform:\n  - net462\n- uid: System.Windows.Media.Effects.ShaderEffect.GetAsFrozenCore(System.Windows.Freezable)\n  id: GetAsFrozenCore(System.Windows.Freezable)\n  parent: System.Windows.Media.Effects.ShaderEffect\n  langs:\n  - csharp\n  name: GetAsFrozenCore(Freezable)\n  nameWithType: ShaderEffect.GetAsFrozenCore(Freezable)\n  fullName: System.Windows.Media.Effects.ShaderEffect.GetAsFrozenCore(Freezable)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media.Effects\n  summary: Makes the instance a frozen clone of the specified <xref href=\"System.Windows.Freezable\"></xref> using base (non-animated) property values.\n  syntax:\n    content: protected override void GetAsFrozenCore (System.Windows.Freezable sourceFreezable);\n    parameters:\n    - id: sourceFreezable\n      type: System.Windows.Freezable\n      description: The instance to copy.\n  overload: System.Windows.Media.Effects.ShaderEffect.GetAsFrozenCore*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Media.Effects.ShaderEffect.GetCurrentValueAsFrozenCore(System.Windows.Freezable)\n  id: GetCurrentValueAsFrozenCore(System.Windows.Freezable)\n  parent: System.Windows.Media.Effects.ShaderEffect\n  langs:\n  - csharp\n  name: GetCurrentValueAsFrozenCore(Freezable)\n  nameWithType: ShaderEffect.GetCurrentValueAsFrozenCore(Freezable)\n  fullName: System.Windows.Media.Effects.ShaderEffect.GetCurrentValueAsFrozenCore(Freezable)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media.Effects\n  summary: Makes the current instance a frozen clone of the specified <xref href=\"System.Windows.Freezable\"></xref>. If the object has animated dependency properties, their current animated values are copied.\n  syntax:\n    content: protected override void GetCurrentValueAsFrozenCore (System.Windows.Freezable sourceFreezable);\n    parameters:\n    - id: sourceFreezable\n      type: System.Windows.Freezable\n      description: The <xref href=\"System.Windows.Freezable\"></xref> to copy and freeze.\n  overload: System.Windows.Media.Effects.ShaderEffect.GetCurrentValueAsFrozenCore*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Media.Effects.ShaderEffect.PaddingBottom\n  id: PaddingBottom\n  parent: System.Windows.Media.Effects.ShaderEffect\n  langs:\n  - csharp\n  name: PaddingBottom\n  nameWithType: ShaderEffect.PaddingBottom\n  fullName: System.Windows.Media.Effects.ShaderEffect.PaddingBottom\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media.Effects\n  summary: Gets or sets a value indicating that the effect's output texture is larger than its input texture along the bottom edge.\n  syntax:\n    content: protected double PaddingBottom { get; set; }\n    return:\n      type: System.Double\n      description: The padding along the bottom edge of the effect.\n  overload: System.Windows.Media.Effects.ShaderEffect.PaddingBottom*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The provided value is less than 0.\n  platform:\n  - net462\n- uid: System.Windows.Media.Effects.ShaderEffect.PaddingLeft\n  id: PaddingLeft\n  parent: System.Windows.Media.Effects.ShaderEffect\n  langs:\n  - csharp\n  name: PaddingLeft\n  nameWithType: ShaderEffect.PaddingLeft\n  fullName: System.Windows.Media.Effects.ShaderEffect.PaddingLeft\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media.Effects\n  summary: Gets or sets a value indicating that the effect's output texture is larger than its input texture along the left edge.\n  syntax:\n    content: protected double PaddingLeft { get; set; }\n    return:\n      type: System.Double\n      description: The padding along the left edge of the effect.\n  overload: System.Windows.Media.Effects.ShaderEffect.PaddingLeft*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The provided value is less than 0.\n  platform:\n  - net462\n- uid: System.Windows.Media.Effects.ShaderEffect.PaddingRight\n  id: PaddingRight\n  parent: System.Windows.Media.Effects.ShaderEffect\n  langs:\n  - csharp\n  name: PaddingRight\n  nameWithType: ShaderEffect.PaddingRight\n  fullName: System.Windows.Media.Effects.ShaderEffect.PaddingRight\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media.Effects\n  summary: Gets or sets a value indicating that the effect's output texture is larger than its input texture along the right edge.\n  syntax:\n    content: protected double PaddingRight { get; set; }\n    return:\n      type: System.Double\n      description: The padding along the right edge of the effect.\n  overload: System.Windows.Media.Effects.ShaderEffect.PaddingRight*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The provided value is less than 0.\n  platform:\n  - net462\n- uid: System.Windows.Media.Effects.ShaderEffect.PaddingTop\n  id: PaddingTop\n  parent: System.Windows.Media.Effects.ShaderEffect\n  langs:\n  - csharp\n  name: PaddingTop\n  nameWithType: ShaderEffect.PaddingTop\n  fullName: System.Windows.Media.Effects.ShaderEffect.PaddingTop\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media.Effects\n  summary: Gets or sets a value indicating that the effect's output texture is larger than its input texture along the top edge.\n  syntax:\n    content: protected double PaddingTop { get; set; }\n    return:\n      type: System.Double\n      description: The padding along the top edge of the effect.\n  overload: System.Windows.Media.Effects.ShaderEffect.PaddingTop*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The provided value is less than 0.\n  platform:\n  - net462\n- uid: System.Windows.Media.Effects.ShaderEffect.PixelShader\n  id: PixelShader\n  parent: System.Windows.Media.Effects.ShaderEffect\n  langs:\n  - csharp\n  name: PixelShader\n  nameWithType: ShaderEffect.PixelShader\n  fullName: System.Windows.Media.Effects.ShaderEffect.PixelShader\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media.Effects\n  summary: Gets or sets the <xref href=\"System.Windows.Media.Effects.PixelShader\"></xref> to use for the effect.\n  remarks: \"<a name=\\\"dependencyPropertyInfo_PixelShader\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.Media.Effects.ShaderEffect.PixelShaderProperty>|  \\n|Metadata properties set to `true`|None|\"\n  syntax:\n    content: protected System.Windows.Media.Effects.PixelShader PixelShader { get; set; }\n    return:\n      type: System.Windows.Media.Effects.PixelShader\n      description: The <xref href=\"System.Windows.Media.Effects.PixelShader\"></xref> for the effect.\n  overload: System.Windows.Media.Effects.ShaderEffect.PixelShader*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Media.Effects.ShaderEffect.PixelShaderConstantCallback(System.Int32)\n  id: PixelShaderConstantCallback(System.Int32)\n  parent: System.Windows.Media.Effects.ShaderEffect\n  langs:\n  - csharp\n  name: PixelShaderConstantCallback(Int32)\n  nameWithType: ShaderEffect.PixelShaderConstantCallback(Int32)\n  fullName: System.Windows.Media.Effects.ShaderEffect.PixelShaderConstantCallback(Int32)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media.Effects\n  summary: Associates a dependency property value with a pixel shader's float constant register.\n  remarks: Use the PixelShaderConstantCallback method when you register a dependency property for a shader constant. The PixelShaderConstantCallback method constructs a <xref:System.Windows.PropertyChangedCallback> delegate that, when invoked, creates an association between the dependency property and the shader constant register specified by `floatRegisterIndex`.\n  syntax:\n    content: protected static System.Windows.PropertyChangedCallback PixelShaderConstantCallback (int floatRegisterIndex);\n    parameters:\n    - id: floatRegisterIndex\n      type: System.Int32\n      description: The index of the shader register associated with the dependency property.\n    return:\n      type: System.Windows.PropertyChangedCallback\n      description: A <xref href=\"System.Windows.PropertyChangedCallback\"></xref> delegate that associates a dependency property and the shader constant register specified by <code>floatRegisterIndex</code>.\n  overload: System.Windows.Media.Effects.ShaderEffect.PixelShaderConstantCallback*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The dependency property is an unknown type.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>floatRegisterIndex</code> is greater than or equal to 32, or <code>floatRegisterIndex</code> is less than 0.\n  platform:\n  - net462\n- uid: System.Windows.Media.Effects.ShaderEffect.PixelShaderProperty\n  id: PixelShaderProperty\n  parent: System.Windows.Media.Effects.ShaderEffect\n  langs:\n  - csharp\n  name: PixelShaderProperty\n  nameWithType: ShaderEffect.PixelShaderProperty\n  fullName: System.Windows.Media.Effects.ShaderEffect.PixelShaderProperty\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media.Effects\n  summary: Identifies the <xref:System.Windows.Media.Effects.ShaderEffect.PixelShader*> dependency property.\n  syntax:\n    content: protected static readonly System.Windows.DependencyProperty PixelShaderProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Media.Effects.ShaderEffect.PixelShaderSamplerCallback(System.Int32)\n  id: PixelShaderSamplerCallback(System.Int32)\n  parent: System.Windows.Media.Effects.ShaderEffect\n  langs:\n  - csharp\n  name: PixelShaderSamplerCallback(Int32)\n  nameWithType: ShaderEffect.PixelShaderSamplerCallback(Int32)\n  fullName: System.Windows.Media.Effects.ShaderEffect.PixelShaderSamplerCallback(Int32)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media.Effects\n  summary: Associates a dependency property value with a pixel shader's sampler register.\n  remarks: Use the PixelShaderSamplerCallback method when you register a <xref:System.Windows.Media.Brush>-valued dependency property for a shader sampler. The PixelShaderSamplerCallback method constructs a <xref:System.Windows.PropertyChangedCallback> delegate that, when invoked, creates an association between the dependency property and the shader sampler register specified by `samplerRegisterIndex`.\n  syntax:\n    content: protected static System.Windows.PropertyChangedCallback PixelShaderSamplerCallback (int samplerRegisterIndex);\n    parameters:\n    - id: samplerRegisterIndex\n      type: System.Int32\n      description: The index of the shader sampler associated with the dependency property.\n    return:\n      type: System.Windows.PropertyChangedCallback\n      description: A <xref href=\"System.Windows.PropertyChangedCallback\"></xref> delegate that associates a dependency property and the shader sampler register specified by <code>samplerRegisterIndex</code>.\n  overload: System.Windows.Media.Effects.ShaderEffect.PixelShaderSamplerCallback*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Media.Effects.ShaderEffect.PixelShaderSamplerCallback(System.Int32,System.Windows.Media.Effects.SamplingMode)\n  id: PixelShaderSamplerCallback(System.Int32,System.Windows.Media.Effects.SamplingMode)\n  parent: System.Windows.Media.Effects.ShaderEffect\n  langs:\n  - csharp\n  name: PixelShaderSamplerCallback(Int32,SamplingMode)\n  nameWithType: ShaderEffect.PixelShaderSamplerCallback(Int32,SamplingMode)\n  fullName: System.Windows.Media.Effects.ShaderEffect.PixelShaderSamplerCallback(Int32,SamplingMode)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media.Effects\n  summary: Associates a dependency property value with a pixel shader's sampler register and a <xref href=\"System.Windows.Media.Effects.SamplingMode\"></xref>.\n  remarks: Use the <xref:System.Windows.Media.Effects.ShaderEffect.RegisterPixelShaderSamplerProperty%2A> method when you register a <xref:System.Windows.Media.Brush>-valued dependency property for a shader sampler. The <xref:System.Windows.Media.Effects.ShaderEffect.RegisterPixelShaderSamplerProperty%2A> method constructs a <xref:System.Windows.PropertyChangedCallback> delegate that, when invoked, creates an association between the dependency property and the shader sampler register specified by `samplerRegisterIndex`.\n  syntax:\n    content: protected static System.Windows.PropertyChangedCallback PixelShaderSamplerCallback (int samplerRegisterIndex, System.Windows.Media.Effects.SamplingMode samplingMode);\n    parameters:\n    - id: samplerRegisterIndex\n      type: System.Int32\n      description: The index of the shader sampler associated with the dependency property.\n    - id: samplingMode\n      type: System.Windows.Media.Effects.SamplingMode\n      description: The <xref href=\"System.Windows.Media.Effects.SamplingMode\"></xref> for the shader sampler.\n    return:\n      type: System.Windows.PropertyChangedCallback\n      description: A <xref href=\"System.Windows.PropertyChangedCallback\"></xref> delegate that associates a dependency property and the shader sampler register specified by <code>samplerRegisterIndex</code>.\n  overload: System.Windows.Media.Effects.ShaderEffect.PixelShaderSamplerCallback*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Media.Effects.ShaderEffect.RegisterPixelShaderSamplerProperty(System.String,System.Type,System.Int32)\n  id: RegisterPixelShaderSamplerProperty(System.String,System.Type,System.Int32)\n  parent: System.Windows.Media.Effects.ShaderEffect\n  langs:\n  - csharp\n  name: RegisterPixelShaderSamplerProperty(String,Type,Int32)\n  nameWithType: ShaderEffect.RegisterPixelShaderSamplerProperty(String,Type,Int32)\n  fullName: System.Windows.Media.Effects.ShaderEffect.RegisterPixelShaderSamplerProperty(String,Type,Int32)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media.Effects\n  summary: Associates a dependency property with a shader sampler register.\n  syntax:\n    content: protected static System.Windows.DependencyProperty RegisterPixelShaderSamplerProperty (string dpName, Type ownerType, int samplerRegisterIndex);\n    parameters:\n    - id: dpName\n      type: System.String\n      description: The name of the dependency property.\n    - id: ownerType\n      type: System.Type\n      description: The type of the effect that has the dependency property.\n    - id: samplerRegisterIndex\n      type: System.Int32\n      description: The index of the shader sampler associated with the dependency property.\n    return:\n      type: System.Windows.DependencyProperty\n      description: A dependency property associated with the shader sampler specified by <code>samplerRegisterIndex</code>.\n  overload: System.Windows.Media.Effects.ShaderEffect.RegisterPixelShaderSamplerProperty*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Media.Effects.ShaderEffect.RegisterPixelShaderSamplerProperty(System.String,System.Type,System.Int32,System.Windows.Media.Effects.SamplingMode)\n  id: RegisterPixelShaderSamplerProperty(System.String,System.Type,System.Int32,System.Windows.Media.Effects.SamplingMode)\n  parent: System.Windows.Media.Effects.ShaderEffect\n  langs:\n  - csharp\n  name: RegisterPixelShaderSamplerProperty(String,Type,Int32,SamplingMode)\n  nameWithType: ShaderEffect.RegisterPixelShaderSamplerProperty(String,Type,Int32,SamplingMode)\n  fullName: System.Windows.Media.Effects.ShaderEffect.RegisterPixelShaderSamplerProperty(String,Type,Int32,SamplingMode)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media.Effects\n  summary: Associates a dependency property with a shader sampler register and a <xref href=\"System.Windows.Media.Effects.SamplingMode\"></xref>.\n  syntax:\n    content: protected static System.Windows.DependencyProperty RegisterPixelShaderSamplerProperty (string dpName, Type ownerType, int samplerRegisterIndex, System.Windows.Media.Effects.SamplingMode samplingMode);\n    parameters:\n    - id: dpName\n      type: System.String\n      description: The name of the dependency property.\n    - id: ownerType\n      type: System.Type\n      description: The type of the effect that has the dependency property.\n    - id: samplerRegisterIndex\n      type: System.Int32\n      description: The index of the shader sampler associated with the dependency property.\n    - id: samplingMode\n      type: System.Windows.Media.Effects.SamplingMode\n      description: The <xref href=\"System.Windows.Media.Effects.SamplingMode\"></xref> for the shader sampler.\n    return:\n      type: System.Windows.DependencyProperty\n      description: A dependency property associated with the shader sampler specified by <code>samplerRegisterIndex</code>.\n  overload: System.Windows.Media.Effects.ShaderEffect.RegisterPixelShaderSamplerProperty*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Media.Effects.ShaderEffect.UpdateShaderValue(System.Windows.DependencyProperty)\n  id: UpdateShaderValue(System.Windows.DependencyProperty)\n  parent: System.Windows.Media.Effects.ShaderEffect\n  langs:\n  - csharp\n  name: UpdateShaderValue(DependencyProperty)\n  nameWithType: ShaderEffect.UpdateShaderValue(DependencyProperty)\n  fullName: System.Windows.Media.Effects.ShaderEffect.UpdateShaderValue(DependencyProperty)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media.Effects\n  summary: Notifies the effect that the shader constant or sampler corresponding to the specified dependency property should be updated.\n  syntax:\n    content: protected void UpdateShaderValue (System.Windows.DependencyProperty dp);\n    parameters:\n    - id: dp\n      type: System.Windows.DependencyProperty\n      description: The dependency property to be updated.\n  overload: System.Windows.Media.Effects.ShaderEffect.UpdateShaderValue*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Windows.Media.Effects.Effect\n  isExternal: false\n  name: System.Windows.Media.Effects.Effect\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.Windows.Media.Effects.ShaderEffect.#ctor\n  parent: System.Windows.Media.Effects.ShaderEffect\n  isExternal: false\n  name: ShaderEffect()\n  nameWithType: ShaderEffect.ShaderEffect()\n  fullName: System.Windows.Media.Effects.ShaderEffect.ShaderEffect()\n- uid: System.Windows.Media.Effects.ShaderEffect.Clone\n  parent: System.Windows.Media.Effects.ShaderEffect\n  isExternal: false\n  name: Clone()\n  nameWithType: ShaderEffect.Clone()\n  fullName: System.Windows.Media.Effects.ShaderEffect.Clone()\n- uid: System.Windows.Media.Effects.ShaderEffect\n  parent: System.Windows.Media.Effects\n  isExternal: false\n  name: ShaderEffect\n  nameWithType: ShaderEffect\n  fullName: System.Windows.Media.Effects.ShaderEffect\n- uid: System.Windows.Media.Effects.ShaderEffect.CloneCore(System.Windows.Freezable)\n  parent: System.Windows.Media.Effects.ShaderEffect\n  isExternal: false\n  name: CloneCore(Freezable)\n  nameWithType: ShaderEffect.CloneCore(Freezable)\n  fullName: System.Windows.Media.Effects.ShaderEffect.CloneCore(Freezable)\n- uid: System.Windows.Freezable\n  parent: System.Windows\n  isExternal: false\n  name: Freezable\n  nameWithType: Freezable\n  fullName: System.Windows.Freezable\n- uid: System.Windows.Media.Effects.ShaderEffect.CloneCurrentValue\n  parent: System.Windows.Media.Effects.ShaderEffect\n  isExternal: false\n  name: CloneCurrentValue()\n  nameWithType: ShaderEffect.CloneCurrentValue()\n  fullName: System.Windows.Media.Effects.ShaderEffect.CloneCurrentValue()\n- uid: System.Windows.Media.Effects.ShaderEffect.CloneCurrentValueCore(System.Windows.Freezable)\n  parent: System.Windows.Media.Effects.ShaderEffect\n  isExternal: false\n  name: CloneCurrentValueCore(Freezable)\n  nameWithType: ShaderEffect.CloneCurrentValueCore(Freezable)\n  fullName: System.Windows.Media.Effects.ShaderEffect.CloneCurrentValueCore(Freezable)\n- uid: System.Windows.Media.Effects.ShaderEffect.CreateInstanceCore\n  parent: System.Windows.Media.Effects.ShaderEffect\n  isExternal: false\n  name: CreateInstanceCore()\n  nameWithType: ShaderEffect.CreateInstanceCore()\n  fullName: System.Windows.Media.Effects.ShaderEffect.CreateInstanceCore()\n- uid: System.Windows.Media.Effects.ShaderEffect.DdxUvDdyUvRegisterIndex\n  parent: System.Windows.Media.Effects.ShaderEffect\n  isExternal: false\n  name: DdxUvDdyUvRegisterIndex\n  nameWithType: ShaderEffect.DdxUvDdyUvRegisterIndex\n  fullName: System.Windows.Media.Effects.ShaderEffect.DdxUvDdyUvRegisterIndex\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Windows.Media.Effects.ShaderEffect.GetAsFrozenCore(System.Windows.Freezable)\n  parent: System.Windows.Media.Effects.ShaderEffect\n  isExternal: false\n  name: GetAsFrozenCore(Freezable)\n  nameWithType: ShaderEffect.GetAsFrozenCore(Freezable)\n  fullName: System.Windows.Media.Effects.ShaderEffect.GetAsFrozenCore(Freezable)\n- uid: System.Windows.Media.Effects.ShaderEffect.GetCurrentValueAsFrozenCore(System.Windows.Freezable)\n  parent: System.Windows.Media.Effects.ShaderEffect\n  isExternal: false\n  name: GetCurrentValueAsFrozenCore(Freezable)\n  nameWithType: ShaderEffect.GetCurrentValueAsFrozenCore(Freezable)\n  fullName: System.Windows.Media.Effects.ShaderEffect.GetCurrentValueAsFrozenCore(Freezable)\n- uid: System.Windows.Media.Effects.ShaderEffect.PaddingBottom\n  parent: System.Windows.Media.Effects.ShaderEffect\n  isExternal: false\n  name: PaddingBottom\n  nameWithType: ShaderEffect.PaddingBottom\n  fullName: System.Windows.Media.Effects.ShaderEffect.PaddingBottom\n- uid: System.Double\n  parent: System\n  isExternal: true\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: System.Windows.Media.Effects.ShaderEffect.PaddingLeft\n  parent: System.Windows.Media.Effects.ShaderEffect\n  isExternal: false\n  name: PaddingLeft\n  nameWithType: ShaderEffect.PaddingLeft\n  fullName: System.Windows.Media.Effects.ShaderEffect.PaddingLeft\n- uid: System.Windows.Media.Effects.ShaderEffect.PaddingRight\n  parent: System.Windows.Media.Effects.ShaderEffect\n  isExternal: false\n  name: PaddingRight\n  nameWithType: ShaderEffect.PaddingRight\n  fullName: System.Windows.Media.Effects.ShaderEffect.PaddingRight\n- uid: System.Windows.Media.Effects.ShaderEffect.PaddingTop\n  parent: System.Windows.Media.Effects.ShaderEffect\n  isExternal: false\n  name: PaddingTop\n  nameWithType: ShaderEffect.PaddingTop\n  fullName: System.Windows.Media.Effects.ShaderEffect.PaddingTop\n- uid: System.Windows.Media.Effects.ShaderEffect.PixelShader\n  parent: System.Windows.Media.Effects.ShaderEffect\n  isExternal: false\n  name: PixelShader\n  nameWithType: ShaderEffect.PixelShader\n  fullName: System.Windows.Media.Effects.ShaderEffect.PixelShader\n- uid: System.Windows.Media.Effects.PixelShader\n  parent: System.Windows.Media.Effects\n  isExternal: false\n  name: PixelShader\n  nameWithType: PixelShader\n  fullName: System.Windows.Media.Effects.PixelShader\n- uid: System.Windows.Media.Effects.ShaderEffect.PixelShaderConstantCallback(System.Int32)\n  parent: System.Windows.Media.Effects.ShaderEffect\n  isExternal: false\n  name: PixelShaderConstantCallback(Int32)\n  nameWithType: ShaderEffect.PixelShaderConstantCallback(Int32)\n  fullName: System.Windows.Media.Effects.ShaderEffect.PixelShaderConstantCallback(Int32)\n- uid: System.Windows.PropertyChangedCallback\n  parent: System.Windows\n  isExternal: false\n  name: PropertyChangedCallback\n  nameWithType: PropertyChangedCallback\n  fullName: System.Windows.PropertyChangedCallback\n- uid: System.Windows.Media.Effects.ShaderEffect.PixelShaderProperty\n  parent: System.Windows.Media.Effects.ShaderEffect\n  isExternal: false\n  name: PixelShaderProperty\n  nameWithType: ShaderEffect.PixelShaderProperty\n  fullName: System.Windows.Media.Effects.ShaderEffect.PixelShaderProperty\n- uid: System.Windows.DependencyProperty\n  parent: System.Windows\n  isExternal: false\n  name: DependencyProperty\n  nameWithType: DependencyProperty\n  fullName: System.Windows.DependencyProperty\n- uid: System.Windows.Media.Effects.ShaderEffect.PixelShaderSamplerCallback(System.Int32)\n  parent: System.Windows.Media.Effects.ShaderEffect\n  isExternal: false\n  name: PixelShaderSamplerCallback(Int32)\n  nameWithType: ShaderEffect.PixelShaderSamplerCallback(Int32)\n  fullName: System.Windows.Media.Effects.ShaderEffect.PixelShaderSamplerCallback(Int32)\n- uid: System.Windows.Media.Effects.ShaderEffect.PixelShaderSamplerCallback(System.Int32,System.Windows.Media.Effects.SamplingMode)\n  parent: System.Windows.Media.Effects.ShaderEffect\n  isExternal: false\n  name: PixelShaderSamplerCallback(Int32,SamplingMode)\n  nameWithType: ShaderEffect.PixelShaderSamplerCallback(Int32,SamplingMode)\n  fullName: System.Windows.Media.Effects.ShaderEffect.PixelShaderSamplerCallback(Int32,SamplingMode)\n- uid: System.Windows.Media.Effects.SamplingMode\n  parent: System.Windows.Media.Effects\n  isExternal: false\n  name: SamplingMode\n  nameWithType: SamplingMode\n  fullName: System.Windows.Media.Effects.SamplingMode\n- uid: System.Windows.Media.Effects.ShaderEffect.RegisterPixelShaderSamplerProperty(System.String,System.Type,System.Int32)\n  parent: System.Windows.Media.Effects.ShaderEffect\n  isExternal: false\n  name: RegisterPixelShaderSamplerProperty(String,Type,Int32)\n  nameWithType: ShaderEffect.RegisterPixelShaderSamplerProperty(String,Type,Int32)\n  fullName: System.Windows.Media.Effects.ShaderEffect.RegisterPixelShaderSamplerProperty(String,Type,Int32)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Type\n  parent: System\n  isExternal: true\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Windows.Media.Effects.ShaderEffect.RegisterPixelShaderSamplerProperty(System.String,System.Type,System.Int32,System.Windows.Media.Effects.SamplingMode)\n  parent: System.Windows.Media.Effects.ShaderEffect\n  isExternal: false\n  name: RegisterPixelShaderSamplerProperty(String,Type,Int32,SamplingMode)\n  nameWithType: ShaderEffect.RegisterPixelShaderSamplerProperty(String,Type,Int32,SamplingMode)\n  fullName: System.Windows.Media.Effects.ShaderEffect.RegisterPixelShaderSamplerProperty(String,Type,Int32,SamplingMode)\n- uid: System.Windows.Media.Effects.ShaderEffect.UpdateShaderValue(System.Windows.DependencyProperty)\n  parent: System.Windows.Media.Effects.ShaderEffect\n  isExternal: false\n  name: UpdateShaderValue(DependencyProperty)\n  nameWithType: ShaderEffect.UpdateShaderValue(DependencyProperty)\n  fullName: System.Windows.Media.Effects.ShaderEffect.UpdateShaderValue(DependencyProperty)\n- uid: System.Windows.Media.Effects.ShaderEffect.#ctor*\n  parent: System.Windows.Media.Effects.ShaderEffect\n  isExternal: false\n  name: ShaderEffect\n  nameWithType: ShaderEffect.ShaderEffect\n- uid: System.Windows.Media.Effects.ShaderEffect.Clone*\n  parent: System.Windows.Media.Effects.ShaderEffect\n  isExternal: false\n  name: Clone\n  nameWithType: ShaderEffect.Clone\n- uid: System.Windows.Media.Effects.ShaderEffect.CloneCore*\n  parent: System.Windows.Media.Effects.ShaderEffect\n  isExternal: false\n  name: CloneCore\n  nameWithType: ShaderEffect.CloneCore\n- uid: System.Windows.Media.Effects.ShaderEffect.CloneCurrentValue*\n  parent: System.Windows.Media.Effects.ShaderEffect\n  isExternal: false\n  name: CloneCurrentValue\n  nameWithType: ShaderEffect.CloneCurrentValue\n- uid: System.Windows.Media.Effects.ShaderEffect.CloneCurrentValueCore*\n  parent: System.Windows.Media.Effects.ShaderEffect\n  isExternal: false\n  name: CloneCurrentValueCore\n  nameWithType: ShaderEffect.CloneCurrentValueCore\n- uid: System.Windows.Media.Effects.ShaderEffect.CreateInstanceCore*\n  parent: System.Windows.Media.Effects.ShaderEffect\n  isExternal: false\n  name: CreateInstanceCore\n  nameWithType: ShaderEffect.CreateInstanceCore\n- uid: System.Windows.Media.Effects.ShaderEffect.DdxUvDdyUvRegisterIndex*\n  parent: System.Windows.Media.Effects.ShaderEffect\n  isExternal: false\n  name: DdxUvDdyUvRegisterIndex\n  nameWithType: ShaderEffect.DdxUvDdyUvRegisterIndex\n- uid: System.Windows.Media.Effects.ShaderEffect.GetAsFrozenCore*\n  parent: System.Windows.Media.Effects.ShaderEffect\n  isExternal: false\n  name: GetAsFrozenCore\n  nameWithType: ShaderEffect.GetAsFrozenCore\n- uid: System.Windows.Media.Effects.ShaderEffect.GetCurrentValueAsFrozenCore*\n  parent: System.Windows.Media.Effects.ShaderEffect\n  isExternal: false\n  name: GetCurrentValueAsFrozenCore\n  nameWithType: ShaderEffect.GetCurrentValueAsFrozenCore\n- uid: System.Windows.Media.Effects.ShaderEffect.PaddingBottom*\n  parent: System.Windows.Media.Effects.ShaderEffect\n  isExternal: false\n  name: PaddingBottom\n  nameWithType: ShaderEffect.PaddingBottom\n- uid: System.Windows.Media.Effects.ShaderEffect.PaddingLeft*\n  parent: System.Windows.Media.Effects.ShaderEffect\n  isExternal: false\n  name: PaddingLeft\n  nameWithType: ShaderEffect.PaddingLeft\n- uid: System.Windows.Media.Effects.ShaderEffect.PaddingRight*\n  parent: System.Windows.Media.Effects.ShaderEffect\n  isExternal: false\n  name: PaddingRight\n  nameWithType: ShaderEffect.PaddingRight\n- uid: System.Windows.Media.Effects.ShaderEffect.PaddingTop*\n  parent: System.Windows.Media.Effects.ShaderEffect\n  isExternal: false\n  name: PaddingTop\n  nameWithType: ShaderEffect.PaddingTop\n- uid: System.Windows.Media.Effects.ShaderEffect.PixelShader*\n  parent: System.Windows.Media.Effects.ShaderEffect\n  isExternal: false\n  name: PixelShader\n  nameWithType: ShaderEffect.PixelShader\n- uid: System.Windows.Media.Effects.ShaderEffect.PixelShaderConstantCallback*\n  parent: System.Windows.Media.Effects.ShaderEffect\n  isExternal: false\n  name: PixelShaderConstantCallback\n  nameWithType: ShaderEffect.PixelShaderConstantCallback\n- uid: System.Windows.Media.Effects.ShaderEffect.PixelShaderSamplerCallback*\n  parent: System.Windows.Media.Effects.ShaderEffect\n  isExternal: false\n  name: PixelShaderSamplerCallback\n  nameWithType: ShaderEffect.PixelShaderSamplerCallback\n- uid: System.Windows.Media.Effects.ShaderEffect.RegisterPixelShaderSamplerProperty*\n  parent: System.Windows.Media.Effects.ShaderEffect\n  isExternal: false\n  name: RegisterPixelShaderSamplerProperty\n  nameWithType: ShaderEffect.RegisterPixelShaderSamplerProperty\n- uid: System.Windows.Media.Effects.ShaderEffect.UpdateShaderValue*\n  parent: System.Windows.Media.Effects.ShaderEffect\n  isExternal: false\n  name: UpdateShaderValue\n  nameWithType: ShaderEffect.UpdateShaderValue\n"}