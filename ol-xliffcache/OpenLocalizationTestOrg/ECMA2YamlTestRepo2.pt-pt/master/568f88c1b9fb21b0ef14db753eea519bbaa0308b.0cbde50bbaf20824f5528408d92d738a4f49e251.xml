{"nodes":[{"pos":[886,1160],"content":"Provides an interface that enables a designer to access and filter the dictionaries of a <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.TypeDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that stores the property, attribute, and event descriptors that a component designer can expose to the design-time environment.","needQuote":true,"needEscape":true,"source":"Provides an interface that enables a designer to access and filter the dictionaries of a <xref href=\"System.ComponentModel.TypeDescriptor\"></xref> that stores the property, attribute, and event descriptors that a component designer can expose to the design-time environment."},{"pos":[1173,2132],"content":"IDesignerFilter enables a designer to filter the set of property, attribute, and event descriptors that its associated component exposes through a <xref:System.ComponentModel.TypeDescriptor>. The methods of this interface whose names begin with `Pre` are called immediately before the methods whose names begin with `Post`.       If you want to add attribute, event, or property descriptors, use a <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes%2A>, <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterEvents%2A>, or <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties%2A> method.       If you want to change or remove attribute, event, or property descriptors, use a <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes%2A>, <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterEvents%2A>, or <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterProperties%2A> method.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"IDesignerFilter enables a designer to filter the set of property, attribute, and event descriptors that its associated component exposes through a &lt;xref:System.ComponentModel.TypeDescriptor&gt;.","pos":[0,191],"source":"IDesignerFilter enables a designer to filter the set of property, attribute, and event descriptors that its associated component exposes through a <xref:System.ComponentModel.TypeDescriptor>."},{"content":"The methods of this interface whose names begin with <ph id=\"ph1\">`Pre`</ph> are called immediately before the methods whose names begin with <ph id=\"ph2\">`Post`</ph>.","pos":[192,323],"source":" The methods of this interface whose names begin with `Pre` are called immediately before the methods whose names begin with `Post`."},{"content":"If you want to add attribute, event, or property descriptors, use a &lt;xref:System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes%2A&gt;, &lt;xref:System.ComponentModel.Design.IDesignerFilter.PreFilterEvents%2A&gt;, or &lt;xref:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties%2A&gt; method.","pos":[330,631],"source":"       If you want to add attribute, event, or property descriptors, use a <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes%2A>, <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterEvents%2A>, or <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties%2A> method."},{"content":"If you want to change or remove attribute, event, or property descriptors, use a &lt;xref:System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes%2A&gt;, &lt;xref:System.ComponentModel.Design.IDesignerFilter.PostFilterEvents%2A&gt;, or &lt;xref:System.ComponentModel.Design.IDesignerFilter.PostFilterProperties%2A&gt; method.","pos":[638,955],"source":"       If you want to change or remove attribute, event, or property descriptors, use a <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes%2A>, <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterEvents%2A>, or <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterProperties%2A> method."}]},{"pos":[3482,3673],"content":"When overridden in a derived class, allows a designer to change or remove items from the set of attributes that it exposes through a <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.TypeDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"When overridden in a derived class, allows a designer to change or remove items from the set of attributes that it exposes through a <xref href=\"System.ComponentModel.TypeDescriptor\"></xref>."},{"pos":[3686,5934],"content":"This method provides a way to change or remove items within the dictionary of attributes that the associated component of the designer implementing this interface exposes through a <xref:System.ComponentModel.TypeDescriptor>.       The keys in the dictionary of attributes are the type IDs of the attributes. The objects are of type <xref:System.Attribute>. This method is called immediately after <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes%2A>.       The type ID of an attribute can be any object. By default, <xref:System.Attribute> returns its <xref:System.Type> as the value of its <xref:System.Attribute.TypeId%2A> property. You can check the <xref:System.Attribute.TypeId%2A> of an attribute in the dictionary for equivalence with a known <xref:System.Attribute.TypeId%2A> for an attribute to identify it, or use <xref:System.Reflection> to identify the attribute object itself.       When an attribute that has the same <xref:System.Attribute.TypeId%2A> as an existing or inherited attribute is added to a component, the new attribute replaces the old attribute. For many attributes, a new attribute of the same type will replace any previous attribute of the type. However, some types of attributes return a <xref:System.Attribute.TypeId%2A> that distinguishes the attribute selectively. For example, in order to provide different types of simultaneously active designers for a type, such as an <xref:System.ComponentModel.Design.IRootDesigner> and an <xref:System.ComponentModel.Design.IDesigner>, the <xref:System.ComponentModel.DesignerAttribute> class returns a <xref:System.Attribute.TypeId%2A> that uniquely identifies both the attribute and the base designer type. The <xref:System.ComponentModel.DesignerAttribute> constructor allows you to specify the base designer type of the designer in addition to its specific type, and <xref:System.ComponentModel.DesignerAttribute> returns a <xref:System.Attribute.TypeId%2A> that reflects this. Therefore when you add a new <xref:System.ComponentModel.DesignerAttribute> with a base designer type of the same type as the base designer type of an existing <xref:System.ComponentModel.DesignerAttribute>, the old attribute is replaced with the new attribute.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method provides a way to change or remove items within the dictionary of attributes that the associated component of the designer implementing this interface exposes through a <xref:System.ComponentModel.TypeDescriptor>.       The keys in the dictionary of attributes are the type IDs of the attributes. The objects are of type <xref:System.Attribute>. This method is called immediately after <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes%2A>.       The type ID of an attribute can be any object. By default, <xref:System.Attribute> returns its <xref:System.Type> as the value of its <xref:System.Attribute.TypeId%2A> property. You can check the <xref:System.Attribute.TypeId%2A> of an attribute in the dictionary for equivalence with a known <xref:System.Attribute.TypeId%2A> for an attribute to identify it, or use <xref:System.Reflection> to identify the attribute object itself.       When an attribute that has the same <xref:System.Attribute.TypeId%2A> as an existing or inherited attribute is added to a component, the new attribute replaces the old attribute. For many attributes, a new attribute of the same type will replace any previous attribute of the type. However, some types of attributes return a <xref:System.Attribute.TypeId%2A> that distinguishes the attribute selectively. For example, in order to provide different types of simultaneously active designers for a type, such as an <xref:System.ComponentModel.Design.IRootDesigner> and an <xref:System.ComponentModel.Design.IDesigner>, the <xref:System.ComponentModel.DesignerAttribute> class returns a <xref:System.Attribute.TypeId%2A> that uniquely identifies both the attribute and the base designer type. The <xref:System.ComponentModel.DesignerAttribute> constructor allows you to specify the base designer type of the designer in addition to its specific type, and <xref:System.ComponentModel.DesignerAttribute> returns a <xref:System.Attribute.TypeId%2A> that reflects this. Therefore when you add a new <xref:System.ComponentModel.DesignerAttribute> with a base designer type of the same type as the base designer type of an existing <xref:System.ComponentModel.DesignerAttribute>, the old attribute is replaced with the new attribute.","pos":[0,2242],"nodes":[{"content":"This method provides a way to change or remove items within the dictionary of attributes that the associated component of the designer implementing this interface exposes through a &lt;xref:System.ComponentModel.TypeDescriptor&gt;.","pos":[0,225],"source":"This method provides a way to change or remove items within the dictionary of attributes that the associated component of the designer implementing this interface exposes through a <xref:System.ComponentModel.TypeDescriptor>."},{"content":"The keys in the dictionary of attributes are the type IDs of the attributes.","pos":[232,308]},{"content":"The objects are of type &lt;xref:System.Attribute&gt;.","pos":[309,357],"source":" The objects are of type <xref:System.Attribute>."},{"content":"This method is called immediately after &lt;xref:System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes%2A&gt;.","pos":[358,473],"source":" This method is called immediately after <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes%2A>."},{"content":"The type ID of an attribute can be any object.","pos":[480,526]},{"content":"By default, &lt;xref:System.Attribute&gt; returns its &lt;xref:System.Type&gt; as the value of its &lt;xref:System.Attribute.TypeId%2A&gt; property.","pos":[527,657],"source":" By default, <xref:System.Attribute> returns its <xref:System.Type> as the value of its <xref:System.Attribute.TypeId%2A> property."},{"content":"You can check the &lt;xref:System.Attribute.TypeId%2A&gt; of an attribute in the dictionary for equivalence with a known &lt;xref:System.Attribute.TypeId%2A&gt; for an attribute to identify it, or use &lt;xref:System.Reflection&gt; to identify the attribute object itself.","pos":[658,912],"source":" You can check the <xref:System.Attribute.TypeId%2A> of an attribute in the dictionary for equivalence with a known <xref:System.Attribute.TypeId%2A> for an attribute to identify it, or use <xref:System.Reflection> to identify the attribute object itself."},{"content":"When an attribute that has the same &lt;xref:System.Attribute.TypeId%2A&gt; as an existing or inherited attribute is added to a component, the new attribute replaces the old attribute.","pos":[919,1097],"source":"       When an attribute that has the same <xref:System.Attribute.TypeId%2A> as an existing or inherited attribute is added to a component, the new attribute replaces the old attribute."},{"content":"For many attributes, a new attribute of the same type will replace any previous attribute of the type.","pos":[1098,1200]},{"content":"However, some types of attributes return a &lt;xref:System.Attribute.TypeId%2A&gt; that distinguishes the attribute selectively.","pos":[1201,1323],"source":" However, some types of attributes return a <xref:System.Attribute.TypeId%2A> that distinguishes the attribute selectively."},{"content":"For example, in order to provide different types of simultaneously active designers for a type, such as an &lt;xref:System.ComponentModel.Design.IRootDesigner&gt; and an &lt;xref:System.ComponentModel.Design.IDesigner&gt;, the &lt;xref:System.ComponentModel.DesignerAttribute&gt; class returns a &lt;xref:System.Attribute.TypeId%2A&gt; that uniquely identifies both the attribute and the base designer type.","pos":[1324,1707],"source":" For example, in order to provide different types of simultaneously active designers for a type, such as an <xref:System.ComponentModel.Design.IRootDesigner> and an <xref:System.ComponentModel.Design.IDesigner>, the <xref:System.ComponentModel.DesignerAttribute> class returns a <xref:System.Attribute.TypeId%2A> that uniquely identifies both the attribute and the base designer type."},{"content":"The &lt;xref:System.ComponentModel.DesignerAttribute&gt; constructor allows you to specify the base designer type of the designer in addition to its specific type, and &lt;xref:System.ComponentModel.DesignerAttribute&gt; returns a &lt;xref:System.Attribute.TypeId%2A&gt; that reflects this.","pos":[1708,1980],"source":" The <xref:System.ComponentModel.DesignerAttribute> constructor allows you to specify the base designer type of the designer in addition to its specific type, and <xref:System.ComponentModel.DesignerAttribute> returns a <xref:System.Attribute.TypeId%2A> that reflects this."},{"content":"Therefore when you add a new &lt;xref:System.ComponentModel.DesignerAttribute&gt; with a base designer type of the same type as the base designer type of an existing &lt;xref:System.ComponentModel.DesignerAttribute&gt;, the old attribute is replaced with the new attribute.","pos":[1981,2242],"source":" Therefore when you add a new <xref:System.ComponentModel.DesignerAttribute> with a base designer type of the same type as the base designer type of an existing <xref:System.ComponentModel.DesignerAttribute>, the old attribute is replaced with the new attribute."}]}]},{"pos":[6136,6310],"content":"The <xref:System.Attribute> objects for the class of the component. The keys in the dictionary of attributes are the <xref:System.Attribute.TypeId*> values of the attributes.","needQuote":true,"needEscape":true,"nodes":[{"content":"The <xref:System.Attribute> objects for the class of the component. The keys in the dictionary of attributes are the <xref:System.Attribute.TypeId*> values of the attributes.","pos":[0,174],"nodes":[{"content":"The &lt;xref:System.Attribute&gt; objects for the class of the component.","pos":[0,67],"source":"The <xref:System.Attribute> objects for the class of the component."},{"content":"The keys in the dictionary of attributes are the &lt;xref:System.Attribute.TypeId*&gt; values of the attributes.","pos":[68,174],"source":" The keys in the dictionary of attributes are the <xref:System.Attribute.TypeId*> values of the attributes."}]}]},{"pos":[6941,7128],"content":"When overridden in a derived class, allows a designer to change or remove items from the set of events that it exposes through a <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.TypeDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"When overridden in a derived class, allows a designer to change or remove items from the set of events that it exposes through a <xref href=\"System.ComponentModel.TypeDescriptor\"></xref>."},{"pos":[7141,7553],"content":"This method provides a way to change or remove items within the dictionary of events that are exposed through a <xref:System.ComponentModel.TypeDescriptor>.       The keys in the dictionary of events are the names of the events. The objects are of type <xref:System.ComponentModel.EventDescriptor>. This method is called immediately after <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterEvents%2A>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method provides a way to change or remove items within the dictionary of events that are exposed through a <xref:System.ComponentModel.TypeDescriptor>.       The keys in the dictionary of events are the names of the events. The objects are of type <xref:System.ComponentModel.EventDescriptor>. This method is called immediately after <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterEvents%2A>.","pos":[0,410],"nodes":[{"content":"This method provides a way to change or remove items within the dictionary of events that are exposed through a &lt;xref:System.ComponentModel.TypeDescriptor&gt;.","pos":[0,156],"source":"This method provides a way to change or remove items within the dictionary of events that are exposed through a <xref:System.ComponentModel.TypeDescriptor>."},{"content":"The keys in the dictionary of events are the names of the events.","pos":[163,228]},{"content":"The objects are of type &lt;xref:System.ComponentModel.EventDescriptor&gt;.","pos":[229,298],"source":" The objects are of type <xref:System.ComponentModel.EventDescriptor>."},{"content":"This method is called immediately after &lt;xref:System.ComponentModel.Design.IDesignerFilter.PreFilterEvents%2A&gt;.","pos":[299,410],"source":" This method is called immediately after <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterEvents%2A>."}]}]},{"pos":[7743,7924],"content":"The <xref href=\"System.ComponentModel.EventDescriptor\"></xref> objects that represent the events of the class of the component. The keys in the dictionary of events are event names.","needQuote":true,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.EventDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects that represent the events of the class of the component.","pos":[0,127],"source":"The <xref href=\"System.ComponentModel.EventDescriptor\"></xref> objects that represent the events of the class of the component."},{"content":"The keys in the dictionary of events are event names.","pos":[128,181]}]},{"pos":[8571,8762],"content":"When overridden in a derived class, allows a designer to change or remove items from the set of properties that it exposes through a <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.TypeDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"When overridden in a derived class, allows a designer to change or remove items from the set of properties that it exposes through a <xref href=\"System.ComponentModel.TypeDescriptor\"></xref>."},{"pos":[8775,9206],"content":"This method provides a way to change or remove items within the dictionary of properties that are exposed through a <xref:System.ComponentModel.TypeDescriptor>.       The keys in the dictionary of properties are the names of the properties. The objects are of type <xref:System.ComponentModel.PropertyDescriptor>. This method is called immediately after <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties%2A>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method provides a way to change or remove items within the dictionary of properties that are exposed through a <xref:System.ComponentModel.TypeDescriptor>.       The keys in the dictionary of properties are the names of the properties. The objects are of type <xref:System.ComponentModel.PropertyDescriptor>. This method is called immediately after <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties%2A>.","pos":[0,429],"nodes":[{"content":"This method provides a way to change or remove items within the dictionary of properties that are exposed through a &lt;xref:System.ComponentModel.TypeDescriptor&gt;.","pos":[0,160],"source":"This method provides a way to change or remove items within the dictionary of properties that are exposed through a <xref:System.ComponentModel.TypeDescriptor>."},{"content":"The keys in the dictionary of properties are the names of the properties.","pos":[167,240]},{"content":"The objects are of type &lt;xref:System.ComponentModel.PropertyDescriptor&gt;.","pos":[241,313],"source":" The objects are of type <xref:System.ComponentModel.PropertyDescriptor>."},{"content":"This method is called immediately after &lt;xref:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties%2A&gt;.","pos":[314,429],"source":" This method is called immediately after <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties%2A>."}]}]},{"pos":[9408,9603],"content":"The <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> objects that represent the properties of the class of the component. The keys in the dictionary of properties are property names.","needQuote":true,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.PropertyDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects that represent the properties of the class of the component.","pos":[0,134],"source":"The <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> objects that represent the properties of the class of the component."},{"content":"The keys in the dictionary of properties are property names.","pos":[135,195]}]},{"pos":[10249,10425],"content":"When overridden in a derived class, allows a designer to add items to the set of attributes that it exposes through a <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.TypeDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"When overridden in a derived class, allows a designer to add items to the set of attributes that it exposes through a <xref href=\"System.ComponentModel.TypeDescriptor\"></xref>."},{"pos":[10438,12671],"content":"This method provides a way to add items to the dictionary of attributes that the associated component of the designer implementing this interface exposes through a <xref:System.ComponentModel.TypeDescriptor>.       The keys in the dictionary of attributes are the type IDs of the attributes. The objects are of type <xref:System.Attribute>. This method is called immediately before <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes%2A>.       The type ID of an attribute can be any object. By default, <xref:System.Attribute> returns its <xref:System.Type> as the value of its <xref:System.Attribute.TypeId%2A> property. You can check the <xref:System.Attribute.TypeId%2A> of an attribute in the dictionary for equivalence with a known <xref:System.Attribute.TypeId%2A> for an attribute to identify it, or use <xref:System.Reflection> to identify the attribute object itself.       When an attribute that has the same <xref:System.Attribute.TypeId%2A> as an existing or inherited attribute is added to a component, the new attribute replaces the old attribute. For many attributes, a new attribute of the same type will replace any previous attribute of the type. However, some types of attributes return a <xref:System.Attribute.TypeId%2A> that distinguishes the attribute selectively. For example, in order to provide different types of simultaneously active designers for a type, such as an <xref:System.ComponentModel.Design.IRootDesigner> and an <xref:System.ComponentModel.Design.IDesigner>, the <xref:System.ComponentModel.DesignerAttribute> class returns a <xref:System.Attribute.TypeId%2A> that uniquely identifies both the attribute and the base designer type. The <xref:System.ComponentModel.DesignerAttribute> constructor allows you to specify the base designer type of the designer in addition to its specific type, and <xref:System.ComponentModel.DesignerAttribute> returns a <xref:System.Attribute.TypeId%2A> that reflects this. Therefore when you add a new <xref:System.ComponentModel.DesignerAttribute> with a base designer type of the same type as the base designer type of an existing <xref:System.ComponentModel.DesignerAttribute>, the old attribute is replaced with the new attribute.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method provides a way to add items to the dictionary of attributes that the associated component of the designer implementing this interface exposes through a <xref:System.ComponentModel.TypeDescriptor>.       The keys in the dictionary of attributes are the type IDs of the attributes. The objects are of type <xref:System.Attribute>. This method is called immediately before <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes%2A>.       The type ID of an attribute can be any object. By default, <xref:System.Attribute> returns its <xref:System.Type> as the value of its <xref:System.Attribute.TypeId%2A> property. You can check the <xref:System.Attribute.TypeId%2A> of an attribute in the dictionary for equivalence with a known <xref:System.Attribute.TypeId%2A> for an attribute to identify it, or use <xref:System.Reflection> to identify the attribute object itself.       When an attribute that has the same <xref:System.Attribute.TypeId%2A> as an existing or inherited attribute is added to a component, the new attribute replaces the old attribute. For many attributes, a new attribute of the same type will replace any previous attribute of the type. However, some types of attributes return a <xref:System.Attribute.TypeId%2A> that distinguishes the attribute selectively. For example, in order to provide different types of simultaneously active designers for a type, such as an <xref:System.ComponentModel.Design.IRootDesigner> and an <xref:System.ComponentModel.Design.IDesigner>, the <xref:System.ComponentModel.DesignerAttribute> class returns a <xref:System.Attribute.TypeId%2A> that uniquely identifies both the attribute and the base designer type. The <xref:System.ComponentModel.DesignerAttribute> constructor allows you to specify the base designer type of the designer in addition to its specific type, and <xref:System.ComponentModel.DesignerAttribute> returns a <xref:System.Attribute.TypeId%2A> that reflects this. Therefore when you add a new <xref:System.ComponentModel.DesignerAttribute> with a base designer type of the same type as the base designer type of an existing <xref:System.ComponentModel.DesignerAttribute>, the old attribute is replaced with the new attribute.","pos":[0,2227],"nodes":[{"content":"This method provides a way to add items to the dictionary of attributes that the associated component of the designer implementing this interface exposes through a &lt;xref:System.ComponentModel.TypeDescriptor&gt;.","pos":[0,208],"source":"This method provides a way to add items to the dictionary of attributes that the associated component of the designer implementing this interface exposes through a <xref:System.ComponentModel.TypeDescriptor>."},{"content":"The keys in the dictionary of attributes are the type IDs of the attributes.","pos":[215,291]},{"content":"The objects are of type &lt;xref:System.Attribute&gt;.","pos":[292,340],"source":" The objects are of type <xref:System.Attribute>."},{"content":"This method is called immediately before &lt;xref:System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes%2A&gt;.","pos":[341,458],"source":" This method is called immediately before <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes%2A>."},{"content":"The type ID of an attribute can be any object.","pos":[465,511]},{"content":"By default, &lt;xref:System.Attribute&gt; returns its &lt;xref:System.Type&gt; as the value of its &lt;xref:System.Attribute.TypeId%2A&gt; property.","pos":[512,642],"source":" By default, <xref:System.Attribute> returns its <xref:System.Type> as the value of its <xref:System.Attribute.TypeId%2A> property."},{"content":"You can check the &lt;xref:System.Attribute.TypeId%2A&gt; of an attribute in the dictionary for equivalence with a known &lt;xref:System.Attribute.TypeId%2A&gt; for an attribute to identify it, or use &lt;xref:System.Reflection&gt; to identify the attribute object itself.","pos":[643,897],"source":" You can check the <xref:System.Attribute.TypeId%2A> of an attribute in the dictionary for equivalence with a known <xref:System.Attribute.TypeId%2A> for an attribute to identify it, or use <xref:System.Reflection> to identify the attribute object itself."},{"content":"When an attribute that has the same &lt;xref:System.Attribute.TypeId%2A&gt; as an existing or inherited attribute is added to a component, the new attribute replaces the old attribute.","pos":[904,1082],"source":"       When an attribute that has the same <xref:System.Attribute.TypeId%2A> as an existing or inherited attribute is added to a component, the new attribute replaces the old attribute."},{"content":"For many attributes, a new attribute of the same type will replace any previous attribute of the type.","pos":[1083,1185]},{"content":"However, some types of attributes return a &lt;xref:System.Attribute.TypeId%2A&gt; that distinguishes the attribute selectively.","pos":[1186,1308],"source":" However, some types of attributes return a <xref:System.Attribute.TypeId%2A> that distinguishes the attribute selectively."},{"content":"For example, in order to provide different types of simultaneously active designers for a type, such as an &lt;xref:System.ComponentModel.Design.IRootDesigner&gt; and an &lt;xref:System.ComponentModel.Design.IDesigner&gt;, the &lt;xref:System.ComponentModel.DesignerAttribute&gt; class returns a &lt;xref:System.Attribute.TypeId%2A&gt; that uniquely identifies both the attribute and the base designer type.","pos":[1309,1692],"source":" For example, in order to provide different types of simultaneously active designers for a type, such as an <xref:System.ComponentModel.Design.IRootDesigner> and an <xref:System.ComponentModel.Design.IDesigner>, the <xref:System.ComponentModel.DesignerAttribute> class returns a <xref:System.Attribute.TypeId%2A> that uniquely identifies both the attribute and the base designer type."},{"content":"The &lt;xref:System.ComponentModel.DesignerAttribute&gt; constructor allows you to specify the base designer type of the designer in addition to its specific type, and &lt;xref:System.ComponentModel.DesignerAttribute&gt; returns a &lt;xref:System.Attribute.TypeId%2A&gt; that reflects this.","pos":[1693,1965],"source":" The <xref:System.ComponentModel.DesignerAttribute> constructor allows you to specify the base designer type of the designer in addition to its specific type, and <xref:System.ComponentModel.DesignerAttribute> returns a <xref:System.Attribute.TypeId%2A> that reflects this."},{"content":"Therefore when you add a new &lt;xref:System.ComponentModel.DesignerAttribute&gt; with a base designer type of the same type as the base designer type of an existing &lt;xref:System.ComponentModel.DesignerAttribute&gt;, the old attribute is replaced with the new attribute.","pos":[1966,2227],"source":" Therefore when you add a new <xref:System.ComponentModel.DesignerAttribute> with a base designer type of the same type as the base designer type of an existing <xref:System.ComponentModel.DesignerAttribute>, the old attribute is replaced with the new attribute."}]}]},{"pos":[12872,13046],"content":"The <xref:System.Attribute> objects for the class of the component. The keys in the dictionary of attributes are the <xref:System.Attribute.TypeId*> values of the attributes.","needQuote":true,"needEscape":true,"nodes":[{"content":"The <xref:System.Attribute> objects for the class of the component. The keys in the dictionary of attributes are the <xref:System.Attribute.TypeId*> values of the attributes.","pos":[0,174],"nodes":[{"content":"The &lt;xref:System.Attribute&gt; objects for the class of the component.","pos":[0,67],"source":"The <xref:System.Attribute> objects for the class of the component."},{"content":"The keys in the dictionary of attributes are the &lt;xref:System.Attribute.TypeId*&gt; values of the attributes.","pos":[68,174],"source":" The keys in the dictionary of attributes are the <xref:System.Attribute.TypeId*> values of the attributes."}]}]},{"pos":[13671,13843],"content":"When overridden in a derived class, allows a designer to add items to the set of events that it exposes through a <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.TypeDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"When overridden in a derived class, allows a designer to add items to the set of events that it exposes through a <xref href=\"System.ComponentModel.TypeDescriptor\"></xref>."},{"pos":[13856,14260],"content":"This method provides a way to add items to the dictionary of events that a designer exposes through a <xref:System.ComponentModel.TypeDescriptor>.       The keys in the dictionary of events are the names of the events. The objects are of type <xref:System.ComponentModel.EventDescriptor>. This method is called immediately before <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterEvents%2A>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method provides a way to add items to the dictionary of events that a designer exposes through a <xref:System.ComponentModel.TypeDescriptor>.       The keys in the dictionary of events are the names of the events. The objects are of type <xref:System.ComponentModel.EventDescriptor>. This method is called immediately before <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterEvents%2A>.","pos":[0,402],"nodes":[{"content":"This method provides a way to add items to the dictionary of events that a designer exposes through a &lt;xref:System.ComponentModel.TypeDescriptor&gt;.","pos":[0,146],"source":"This method provides a way to add items to the dictionary of events that a designer exposes through a <xref:System.ComponentModel.TypeDescriptor>."},{"content":"The keys in the dictionary of events are the names of the events.","pos":[153,218]},{"content":"The objects are of type &lt;xref:System.ComponentModel.EventDescriptor&gt;.","pos":[219,288],"source":" The objects are of type <xref:System.ComponentModel.EventDescriptor>."},{"content":"This method is called immediately before &lt;xref:System.ComponentModel.Design.IDesignerFilter.PostFilterEvents%2A&gt;.","pos":[289,402],"source":" This method is called immediately before <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterEvents%2A>."}]}]},{"pos":[14449,14630],"content":"The <xref href=\"System.ComponentModel.EventDescriptor\"></xref> objects that represent the events of the class of the component. The keys in the dictionary of events are event names.","needQuote":true,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.EventDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects that represent the events of the class of the component.","pos":[0,127],"source":"The <xref href=\"System.ComponentModel.EventDescriptor\"></xref> objects that represent the events of the class of the component."},{"content":"The keys in the dictionary of events are event names.","pos":[128,181]}]},{"pos":[15271,15447],"content":"When overridden in a derived class, allows a designer to add items to the set of properties that it exposes through a <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.TypeDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"When overridden in a derived class, allows a designer to add items to the set of properties that it exposes through a <xref href=\"System.ComponentModel.TypeDescriptor\"></xref>."},{"pos":[15460,15883],"content":"This method provides a way to add items to the dictionary of properties that a designer exposes through a <xref:System.ComponentModel.TypeDescriptor>.       The keys in the dictionary of properties are the names of the properties. The objects are of type <xref:System.ComponentModel.PropertyDescriptor>. This method is called immediately before <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterProperties%2A>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method provides a way to add items to the dictionary of properties that a designer exposes through a <xref:System.ComponentModel.TypeDescriptor>.       The keys in the dictionary of properties are the names of the properties. The objects are of type <xref:System.ComponentModel.PropertyDescriptor>. This method is called immediately before <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterProperties%2A>.","pos":[0,421],"nodes":[{"content":"This method provides a way to add items to the dictionary of properties that a designer exposes through a &lt;xref:System.ComponentModel.TypeDescriptor&gt;.","pos":[0,150],"source":"This method provides a way to add items to the dictionary of properties that a designer exposes through a <xref:System.ComponentModel.TypeDescriptor>."},{"content":"The keys in the dictionary of properties are the names of the properties.","pos":[157,230]},{"content":"The objects are of type &lt;xref:System.ComponentModel.PropertyDescriptor&gt;.","pos":[231,303],"source":" The objects are of type <xref:System.ComponentModel.PropertyDescriptor>."},{"content":"This method is called immediately before &lt;xref:System.ComponentModel.Design.IDesignerFilter.PostFilterProperties%2A&gt;.","pos":[304,421],"source":" This method is called immediately before <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterProperties%2A>."}]}]},{"pos":[16084,16279],"content":"The <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> objects that represent the properties of the class of the component. The keys in the dictionary of properties are property names.","needQuote":true,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.PropertyDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects that represent the properties of the class of the component.","pos":[0,134],"source":"The <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> objects that represent the properties of the class of the component."},{"content":"The keys in the dictionary of properties are property names.","pos":[135,195]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ComponentModel.Design.IDesignerFilter\n  id: IDesignerFilter\n  children:\n  - System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes(System.Collections.IDictionary)\n  - System.ComponentModel.Design.IDesignerFilter.PostFilterEvents(System.Collections.IDictionary)\n  - System.ComponentModel.Design.IDesignerFilter.PostFilterProperties(System.Collections.IDictionary)\n  - System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes(System.Collections.IDictionary)\n  - System.ComponentModel.Design.IDesignerFilter.PreFilterEvents(System.Collections.IDictionary)\n  - System.ComponentModel.Design.IDesignerFilter.PreFilterProperties(System.Collections.IDictionary)\n  langs:\n  - csharp\n  name: IDesignerFilter\n  nameWithType: IDesignerFilter\n  fullName: System.ComponentModel.Design.IDesignerFilter\n  type: Interface\n  summary: Provides an interface that enables a designer to access and filter the dictionaries of a <xref href=\"System.ComponentModel.TypeDescriptor\"></xref> that stores the property, attribute, and event descriptors that a component designer can expose to the design-time environment.\n  remarks: \"IDesignerFilter enables a designer to filter the set of property, attribute, and event descriptors that its associated component exposes through a <xref:System.ComponentModel.TypeDescriptor>. The methods of this interface whose names begin with `Pre` are called immediately before the methods whose names begin with `Post`.  \\n  \\n If you want to add attribute, event, or property descriptors, use a <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes%2A>, <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterEvents%2A>, or <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties%2A> method.  \\n  \\n If you want to change or remove attribute, event, or property descriptors, use a <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes%2A>, <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterEvents%2A>, or <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterProperties%2A> method.\"\n  example:\n  - \"The following example demonstrates an override of <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties%2A> that adds a property of the designer to the Properties window when the designer's control is selected at design time. See the example for the <xref:System.Windows.Forms.Design.ControlDesigner> class for a complete designer example that uses the IDesignerFilter interface.  \\n  \\n [!code-cpp[ControlDesignerExample#2](~/add/codesnippet/cpp/t-system.componentmodel._159_1.cpp)]\\n [!code-vb[ControlDesignerExample#2](~/add/codesnippet/visualbasic/t-system.componentmodel._159_1.vb)]\\n [!code-cs[ControlDesignerExample#2](~/add/codesnippet/csharp/t-system.componentmodel._159_1.cs)]\"\n  syntax:\n    content: public interface IDesignerFilter\n  implements: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes(System.Collections.IDictionary)\n  id: PostFilterAttributes(System.Collections.IDictionary)\n  parent: System.ComponentModel.Design.IDesignerFilter\n  langs:\n  - csharp\n  name: PostFilterAttributes(IDictionary)\n  nameWithType: IDesignerFilter.PostFilterAttributes(IDictionary)\n  fullName: System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes(IDictionary)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel.Design\n  summary: When overridden in a derived class, allows a designer to change or remove items from the set of attributes that it exposes through a <xref href=\"System.ComponentModel.TypeDescriptor\"></xref>.\n  remarks: \"This method provides a way to change or remove items within the dictionary of attributes that the associated component of the designer implementing this interface exposes through a <xref:System.ComponentModel.TypeDescriptor>.  \\n  \\n The keys in the dictionary of attributes are the type IDs of the attributes. The objects are of type <xref:System.Attribute>. This method is called immediately after <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes%2A>.  \\n  \\n The type ID of an attribute can be any object. By default, <xref:System.Attribute> returns its <xref:System.Type> as the value of its <xref:System.Attribute.TypeId%2A> property. You can check the <xref:System.Attribute.TypeId%2A> of an attribute in the dictionary for equivalence with a known <xref:System.Attribute.TypeId%2A> for an attribute to identify it, or use <xref:System.Reflection> to identify the attribute object itself.  \\n  \\n When an attribute that has the same <xref:System.Attribute.TypeId%2A> as an existing or inherited attribute is added to a component, the new attribute replaces the old attribute. For many attributes, a new attribute of the same type will replace any previous attribute of the type. However, some types of attributes return a <xref:System.Attribute.TypeId%2A> that distinguishes the attribute selectively. For example, in order to provide different types of simultaneously active designers for a type, such as an <xref:System.ComponentModel.Design.IRootDesigner> and an <xref:System.ComponentModel.Design.IDesigner>, the <xref:System.ComponentModel.DesignerAttribute> class returns a <xref:System.Attribute.TypeId%2A> that uniquely identifies both the attribute and the base designer type. The <xref:System.ComponentModel.DesignerAttribute> constructor allows you to specify the base designer type of the designer in addition to its specific type, and <xref:System.ComponentModel.DesignerAttribute> returns a <xref:System.Attribute.TypeId%2A> that reflects this. Therefore when you add a new <xref:System.ComponentModel.DesignerAttribute> with a base designer type of the same type as the base designer type of an existing <xref:System.ComponentModel.DesignerAttribute>, the old attribute is replaced with the new attribute.\"\n  syntax:\n    content: public void PostFilterAttributes (System.Collections.IDictionary attributes);\n    parameters:\n    - id: attributes\n      type: System.Collections.IDictionary\n      description: The <xref:System.Attribute> objects for the class of the component. The keys in the dictionary of attributes are the <xref:System.Attribute.TypeId*> values of the attributes.\n  overload: System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Design.IDesignerFilter.PostFilterEvents(System.Collections.IDictionary)\n  id: PostFilterEvents(System.Collections.IDictionary)\n  parent: System.ComponentModel.Design.IDesignerFilter\n  langs:\n  - csharp\n  name: PostFilterEvents(IDictionary)\n  nameWithType: IDesignerFilter.PostFilterEvents(IDictionary)\n  fullName: System.ComponentModel.Design.IDesignerFilter.PostFilterEvents(IDictionary)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel.Design\n  summary: When overridden in a derived class, allows a designer to change or remove items from the set of events that it exposes through a <xref href=\"System.ComponentModel.TypeDescriptor\"></xref>.\n  remarks: \"This method provides a way to change or remove items within the dictionary of events that are exposed through a <xref:System.ComponentModel.TypeDescriptor>.  \\n  \\n The keys in the dictionary of events are the names of the events. The objects are of type <xref:System.ComponentModel.EventDescriptor>. This method is called immediately after <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterEvents%2A>.\"\n  syntax:\n    content: public void PostFilterEvents (System.Collections.IDictionary events);\n    parameters:\n    - id: events\n      type: System.Collections.IDictionary\n      description: The <xref href=\"System.ComponentModel.EventDescriptor\"></xref> objects that represent the events of the class of the component. The keys in the dictionary of events are event names.\n  overload: System.ComponentModel.Design.IDesignerFilter.PostFilterEvents*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Design.IDesignerFilter.PostFilterProperties(System.Collections.IDictionary)\n  id: PostFilterProperties(System.Collections.IDictionary)\n  parent: System.ComponentModel.Design.IDesignerFilter\n  langs:\n  - csharp\n  name: PostFilterProperties(IDictionary)\n  nameWithType: IDesignerFilter.PostFilterProperties(IDictionary)\n  fullName: System.ComponentModel.Design.IDesignerFilter.PostFilterProperties(IDictionary)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel.Design\n  summary: When overridden in a derived class, allows a designer to change or remove items from the set of properties that it exposes through a <xref href=\"System.ComponentModel.TypeDescriptor\"></xref>.\n  remarks: \"This method provides a way to change or remove items within the dictionary of properties that are exposed through a <xref:System.ComponentModel.TypeDescriptor>.  \\n  \\n The keys in the dictionary of properties are the names of the properties. The objects are of type <xref:System.ComponentModel.PropertyDescriptor>. This method is called immediately after <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties%2A>.\"\n  syntax:\n    content: public void PostFilterProperties (System.Collections.IDictionary properties);\n    parameters:\n    - id: properties\n      type: System.Collections.IDictionary\n      description: The <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> objects that represent the properties of the class of the component. The keys in the dictionary of properties are property names.\n  overload: System.ComponentModel.Design.IDesignerFilter.PostFilterProperties*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes(System.Collections.IDictionary)\n  id: PreFilterAttributes(System.Collections.IDictionary)\n  parent: System.ComponentModel.Design.IDesignerFilter\n  langs:\n  - csharp\n  name: PreFilterAttributes(IDictionary)\n  nameWithType: IDesignerFilter.PreFilterAttributes(IDictionary)\n  fullName: System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes(IDictionary)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel.Design\n  summary: When overridden in a derived class, allows a designer to add items to the set of attributes that it exposes through a <xref href=\"System.ComponentModel.TypeDescriptor\"></xref>.\n  remarks: \"This method provides a way to add items to the dictionary of attributes that the associated component of the designer implementing this interface exposes through a <xref:System.ComponentModel.TypeDescriptor>.  \\n  \\n The keys in the dictionary of attributes are the type IDs of the attributes. The objects are of type <xref:System.Attribute>. This method is called immediately before <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes%2A>.  \\n  \\n The type ID of an attribute can be any object. By default, <xref:System.Attribute> returns its <xref:System.Type> as the value of its <xref:System.Attribute.TypeId%2A> property. You can check the <xref:System.Attribute.TypeId%2A> of an attribute in the dictionary for equivalence with a known <xref:System.Attribute.TypeId%2A> for an attribute to identify it, or use <xref:System.Reflection> to identify the attribute object itself.  \\n  \\n When an attribute that has the same <xref:System.Attribute.TypeId%2A> as an existing or inherited attribute is added to a component, the new attribute replaces the old attribute. For many attributes, a new attribute of the same type will replace any previous attribute of the type. However, some types of attributes return a <xref:System.Attribute.TypeId%2A> that distinguishes the attribute selectively. For example, in order to provide different types of simultaneously active designers for a type, such as an <xref:System.ComponentModel.Design.IRootDesigner> and an <xref:System.ComponentModel.Design.IDesigner>, the <xref:System.ComponentModel.DesignerAttribute> class returns a <xref:System.Attribute.TypeId%2A> that uniquely identifies both the attribute and the base designer type. The <xref:System.ComponentModel.DesignerAttribute> constructor allows you to specify the base designer type of the designer in addition to its specific type, and <xref:System.ComponentModel.DesignerAttribute> returns a <xref:System.Attribute.TypeId%2A> that reflects this. Therefore when you add a new <xref:System.ComponentModel.DesignerAttribute> with a base designer type of the same type as the base designer type of an existing <xref:System.ComponentModel.DesignerAttribute>, the old attribute is replaced with the new attribute.\"\n  syntax:\n    content: public void PreFilterAttributes (System.Collections.IDictionary attributes);\n    parameters:\n    - id: attributes\n      type: System.Collections.IDictionary\n      description: The <xref:System.Attribute> objects for the class of the component. The keys in the dictionary of attributes are the <xref:System.Attribute.TypeId*> values of the attributes.\n  overload: System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Design.IDesignerFilter.PreFilterEvents(System.Collections.IDictionary)\n  id: PreFilterEvents(System.Collections.IDictionary)\n  parent: System.ComponentModel.Design.IDesignerFilter\n  langs:\n  - csharp\n  name: PreFilterEvents(IDictionary)\n  nameWithType: IDesignerFilter.PreFilterEvents(IDictionary)\n  fullName: System.ComponentModel.Design.IDesignerFilter.PreFilterEvents(IDictionary)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel.Design\n  summary: When overridden in a derived class, allows a designer to add items to the set of events that it exposes through a <xref href=\"System.ComponentModel.TypeDescriptor\"></xref>.\n  remarks: \"This method provides a way to add items to the dictionary of events that a designer exposes through a <xref:System.ComponentModel.TypeDescriptor>.  \\n  \\n The keys in the dictionary of events are the names of the events. The objects are of type <xref:System.ComponentModel.EventDescriptor>. This method is called immediately before <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterEvents%2A>.\"\n  syntax:\n    content: public void PreFilterEvents (System.Collections.IDictionary events);\n    parameters:\n    - id: events\n      type: System.Collections.IDictionary\n      description: The <xref href=\"System.ComponentModel.EventDescriptor\"></xref> objects that represent the events of the class of the component. The keys in the dictionary of events are event names.\n  overload: System.ComponentModel.Design.IDesignerFilter.PreFilterEvents*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Design.IDesignerFilter.PreFilterProperties(System.Collections.IDictionary)\n  id: PreFilterProperties(System.Collections.IDictionary)\n  parent: System.ComponentModel.Design.IDesignerFilter\n  langs:\n  - csharp\n  name: PreFilterProperties(IDictionary)\n  nameWithType: IDesignerFilter.PreFilterProperties(IDictionary)\n  fullName: System.ComponentModel.Design.IDesignerFilter.PreFilterProperties(IDictionary)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel.Design\n  summary: When overridden in a derived class, allows a designer to add items to the set of properties that it exposes through a <xref href=\"System.ComponentModel.TypeDescriptor\"></xref>.\n  remarks: \"This method provides a way to add items to the dictionary of properties that a designer exposes through a <xref:System.ComponentModel.TypeDescriptor>.  \\n  \\n The keys in the dictionary of properties are the names of the properties. The objects are of type <xref:System.ComponentModel.PropertyDescriptor>. This method is called immediately before <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterProperties%2A>.\"\n  syntax:\n    content: public void PreFilterProperties (System.Collections.IDictionary properties);\n    parameters:\n    - id: properties\n      type: System.Collections.IDictionary\n      description: The <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> objects that represent the properties of the class of the component. The keys in the dictionary of properties are property names.\n  overload: System.ComponentModel.Design.IDesignerFilter.PreFilterProperties*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes(System.Collections.IDictionary)\n  parent: System.ComponentModel.Design.IDesignerFilter\n  isExternal: false\n  name: PostFilterAttributes(IDictionary)\n  nameWithType: IDesignerFilter.PostFilterAttributes(IDictionary)\n  fullName: System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes(IDictionary)\n- uid: System.Collections.IDictionary\n  parent: System.Collections\n  isExternal: true\n  name: IDictionary\n  nameWithType: IDictionary\n  fullName: System.Collections.IDictionary\n- uid: System.ComponentModel.Design.IDesignerFilter.PostFilterEvents(System.Collections.IDictionary)\n  parent: System.ComponentModel.Design.IDesignerFilter\n  isExternal: false\n  name: PostFilterEvents(IDictionary)\n  nameWithType: IDesignerFilter.PostFilterEvents(IDictionary)\n  fullName: System.ComponentModel.Design.IDesignerFilter.PostFilterEvents(IDictionary)\n- uid: System.ComponentModel.Design.IDesignerFilter.PostFilterProperties(System.Collections.IDictionary)\n  parent: System.ComponentModel.Design.IDesignerFilter\n  isExternal: false\n  name: PostFilterProperties(IDictionary)\n  nameWithType: IDesignerFilter.PostFilterProperties(IDictionary)\n  fullName: System.ComponentModel.Design.IDesignerFilter.PostFilterProperties(IDictionary)\n- uid: System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes(System.Collections.IDictionary)\n  parent: System.ComponentModel.Design.IDesignerFilter\n  isExternal: false\n  name: PreFilterAttributes(IDictionary)\n  nameWithType: IDesignerFilter.PreFilterAttributes(IDictionary)\n  fullName: System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes(IDictionary)\n- uid: System.ComponentModel.Design.IDesignerFilter.PreFilterEvents(System.Collections.IDictionary)\n  parent: System.ComponentModel.Design.IDesignerFilter\n  isExternal: false\n  name: PreFilterEvents(IDictionary)\n  nameWithType: IDesignerFilter.PreFilterEvents(IDictionary)\n  fullName: System.ComponentModel.Design.IDesignerFilter.PreFilterEvents(IDictionary)\n- uid: System.ComponentModel.Design.IDesignerFilter.PreFilterProperties(System.Collections.IDictionary)\n  parent: System.ComponentModel.Design.IDesignerFilter\n  isExternal: false\n  name: PreFilterProperties(IDictionary)\n  nameWithType: IDesignerFilter.PreFilterProperties(IDictionary)\n  fullName: System.ComponentModel.Design.IDesignerFilter.PreFilterProperties(IDictionary)\n- uid: System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes*\n  parent: System.ComponentModel.Design.IDesignerFilter\n  isExternal: false\n  name: PostFilterAttributes\n  nameWithType: IDesignerFilter.PostFilterAttributes\n- uid: System.ComponentModel.Design.IDesignerFilter.PostFilterEvents*\n  parent: System.ComponentModel.Design.IDesignerFilter\n  isExternal: false\n  name: PostFilterEvents\n  nameWithType: IDesignerFilter.PostFilterEvents\n- uid: System.ComponentModel.Design.IDesignerFilter.PostFilterProperties*\n  parent: System.ComponentModel.Design.IDesignerFilter\n  isExternal: false\n  name: PostFilterProperties\n  nameWithType: IDesignerFilter.PostFilterProperties\n- uid: System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes*\n  parent: System.ComponentModel.Design.IDesignerFilter\n  isExternal: false\n  name: PreFilterAttributes\n  nameWithType: IDesignerFilter.PreFilterAttributes\n- uid: System.ComponentModel.Design.IDesignerFilter.PreFilterEvents*\n  parent: System.ComponentModel.Design.IDesignerFilter\n  isExternal: false\n  name: PreFilterEvents\n  nameWithType: IDesignerFilter.PreFilterEvents\n- uid: System.ComponentModel.Design.IDesignerFilter.PreFilterProperties*\n  parent: System.ComponentModel.Design.IDesignerFilter\n  isExternal: false\n  name: PreFilterProperties\n  nameWithType: IDesignerFilter.PreFilterProperties\n"}