{"nodes":[{"pos":[655,780],"content":"Monitors directories and file paths and notifies the cache of changes to the monitored items. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Monitors directories and file paths and notifies the cache of changes to the monitored items. This class cannot be inherited.","pos":[0,125],"nodes":[{"content":"Monitors directories and file paths and notifies the cache of changes to the monitored items.","pos":[0,93]},{"content":"This class cannot be inherited.","pos":[94,125]}]}]},{"pos":[793,3869],"content":"The HostFileChangeMonitor class is a concrete implementation of the <xref:System.Runtime.Caching.FileChangeMonitor> type. This class is sealed, therefore it cannot be extended. This class is useful if you want to use an existing cache implementation and to monitor files and directories for changes.       For each specified file or directory path, the HostFileChangeMonitor class triggers a change notification if any of the following changes occur:      -   The name of the monitored file or directory changes.      -   The specified file or directory did not exist at the time the monitor was created, but was created later. In other words, a file or directory was created in the scope of the monitored items.      -   The size of a monitored file changed.      -   The contents of a monitored file changed, or the contents of a monitored directory changed.      -   The access control list (ACL) of the file or directory was changed.      -   The monitored file or directory was deleted.       If too many changes occur for the monitored file or directory at the same time, the HostFileChangeMonitor instance can lose track of specific changes. In this scenario, the HostFileChangeMonitor class triggers a change notification. This scenario is more likely to occur when the HostFileChangeMonitor instance monitors a directory, and many changes occur in the scope of the directory structure in a short period of time.       Because the purpose of the HostFileChangeMonitor class is only to signal that something has changed among the set of monitored files and directories, it is not considered important that details about a specific change are not captured. The purpose of the HostFileChangeMonitor class is to provide notification that state changed so that a cache entry (or entries) can be evicted. Because the HostFileChangeMonitor class does not indicate exactly what changed, internal-change tracking overflow is irrelevant.       When you supply paths to a HostFileChangeMonitor instance, the directory and file paths must be full paths to the directory or file. Relative paths and wildcard characters in paths are not allowed.       When the HostFileChangeMonitor class is used in an ASP.NET application, the Windows identity that is used for access to monitored items is the application identity for the ASP.NET application. In other words, the application identity will be one of the following:      -   The process identity.      -   The configured application identity.      -   The UNC credential if the application is running from a UNC share.       When the HostFileChangeMonitor class is used in a non-ASP.NET application, the <xref:System.IO.FileSystemWatcher> class is used internally to monitor files. As a result, whatever access control list (ACL) applies to a monitored file or directory is applied to the Windows identity of the current thread.      > [!NOTE] >  Callers must have the appropriate level of code access security (CAS) permissions and must have NTFS permissions to all monitored directories and paths.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The HostFileChangeMonitor class is a concrete implementation of the &lt;xref:System.Runtime.Caching.FileChangeMonitor&gt; type.","pos":[0,121],"source":"The HostFileChangeMonitor class is a concrete implementation of the <xref:System.Runtime.Caching.FileChangeMonitor> type."},{"content":"This class is sealed, therefore it cannot be extended.","pos":[122,176]},{"content":"This class is useful if you want to use an existing cache implementation and to monitor files and directories for changes.","pos":[177,299]},{"content":"For each specified file or directory path, the HostFileChangeMonitor class triggers a change notification if any of the following changes occur:      -   The name of the monitored file or directory changes.","pos":[306,512]},{"content":"-   The specified file or directory did not exist at the time the monitor was created, but was created later.","pos":[518,627]},{"content":"In other words, a file or directory was created in the scope of the monitored items.","pos":[628,712]},{"content":"-   The size of a monitored file changed.","pos":[718,759]},{"content":"-   The contents of a monitored file changed, or the contents of a monitored directory changed.","pos":[765,860]},{"content":"-   The access control list (ACL) of the file or directory was changed.","pos":[866,937]},{"content":"-   The monitored file or directory was deleted.","pos":[943,991]},{"content":"If too many changes occur for the monitored file or directory at the same time, the HostFileChangeMonitor instance can lose track of specific changes.","pos":[998,1148]},{"content":"In this scenario, the HostFileChangeMonitor class triggers a change notification.","pos":[1149,1230]},{"content":"This scenario is more likely to occur when the HostFileChangeMonitor instance monitors a directory, and many changes occur in the scope of the directory structure in a short period of time.","pos":[1231,1420]},{"content":"Because the purpose of the HostFileChangeMonitor class is only to signal that something has changed among the set of monitored files and directories, it is not considered important that details about a specific change are not captured.","pos":[1427,1662]},{"content":"The purpose of the HostFileChangeMonitor class is to provide notification that state changed so that a cache entry (or entries) can be evicted.","pos":[1663,1806]},{"content":"Because the HostFileChangeMonitor class does not indicate exactly what changed, internal-change tracking overflow is irrelevant.","pos":[1807,1935]},{"content":"When you supply paths to a HostFileChangeMonitor instance, the directory and file paths must be full paths to the directory or file.","pos":[1942,2074]},{"content":"Relative paths and wildcard characters in paths are not allowed.","pos":[2075,2139]},{"content":"When the HostFileChangeMonitor class is used in an ASP.NET application, the Windows identity that is used for access to monitored items is the application identity for the ASP.NET application.","pos":[2146,2338]},{"content":"In other words, the application identity will be one of the following:      -   The process identity.","pos":[2339,2440]},{"content":"-   The configured application identity.","pos":[2446,2486]},{"content":"-   The UNC credential if the application is running from a UNC share.","pos":[2492,2562]},{"content":"When the HostFileChangeMonitor class is used in a non-ASP.NET application, the &lt;xref:System.IO.FileSystemWatcher&gt; class is used internally to monitor files.","pos":[2569,2725],"source":"       When the HostFileChangeMonitor class is used in a non-ASP.NET application, the <xref:System.IO.FileSystemWatcher> class is used internally to monitor files."},{"content":"As a result, whatever access control list (ACL) applies to a monitored file or directory is applied to the Windows identity of the current thread.","pos":[2726,2872]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Callers must have the appropriate level of code access security (CAS) permissions and must have NTFS permissions to all monitored directories and paths.","pos":[2878,3043],"source":"      > [!NOTE] >  Callers must have the appropriate level of code access security (CAS) permissions and must have NTFS permissions to all monitored directories and paths."}]},{"pos":[5651,5757],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Caching.HostFileChangeMonitor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Runtime.Caching.HostFileChangeMonitor\"></xref> class."},{"pos":[5770,6165],"content":"Calls to the HostFileChangeMonitor constructor must provide a non-null value for the `filePaths` parameter. At a minimum, the constructor validates the collection of paths that is passed into it and then initializes monitoring for those paths.      > [!NOTE] >  The constructor performs only string validation of the path name. It does not canonicalize paths or validate that the paths exist.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Calls to the HostFileChangeMonitor constructor must provide a non-null value for the <ph id=\"ph1\">`filePaths`</ph> parameter.","pos":[0,107],"source":"Calls to the HostFileChangeMonitor constructor must provide a non-null value for the `filePaths` parameter."},{"content":"At a minimum, the constructor validates the collection of paths that is passed into it and then initializes monitoring for those paths.","pos":[108,243]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The constructor performs only string validation of the path name.","pos":[249,327],"source":"      > [!NOTE] >  The constructor performs only string validation of the path name."},{"content":"It does not canonicalize paths or validate that the paths exist.","pos":[328,392]}]},{"pos":[6388,6462],"content":"A list that contains one or more directory paths or file paths to monitor.","needQuote":true,"needEscape":true,"nodes":[{"content":"A list that contains one or more directory paths or file paths to monitor.","pos":[0,74]}]},{"pos":[6643,6730],"content":"<ph id=\"ph1\">&lt;code&gt;filePaths&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>filePaths</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[6826,7022],"content":"<code>filePaths</code> contains zero items.       -or-       A path in the <code>filePaths</code> list is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or an empty string.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;filePaths&lt;/code&gt;</ph> contains zero items.","pos":[0,43],"source":"<code>filePaths</code> contains zero items."},{"content":"-or-       A path in the <ph id=\"ph1\">&lt;code&gt;filePaths&lt;/code&gt;</ph> list is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or an empty string.","pos":[50,186],"source":"       -or-       A path in the <code>filePaths</code> list is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or an empty string."}]},{"pos":[7629,7641],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[8139,8293],"content":"Gets the collection of directories and file paths that was passed to the &lt;xref:System.Runtime.Caching.HostFileChangeMonitor.%23ctor%2A&gt; constructor.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the collection of directories and file paths that was passed to the <ph id=\"ph1\">&amp;lt;</ph>xref:System.Runtime.Caching.HostFileChangeMonitor.%23ctor%2A<ph id=\"ph2\">&amp;gt;</ph> constructor.","pos":[0,154],"source":"Gets the collection of directories and file paths that was passed to the &lt;xref:System.Runtime.Caching.HostFileChangeMonitor.%23ctor%2A&gt; constructor."}]},{"pos":[8518,8561],"content":"A collection of directories and file paths.","needQuote":true,"needEscape":true,"nodes":[{"content":"A collection of directories and file paths.","pos":[0,43]}]},{"pos":[9076,9162],"content":"Gets a read-only value that indicates the last write time of a monitored file or path.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a read-only value that indicates the last write time of a monitored file or path.","pos":[0,86]}]},{"pos":[9174,9321],"content":"If a file-change monitor is monitoring multiple files or paths, this property returns the most recent write time in the set of all files and paths.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"If a file-change monitor is monitoring multiple files or paths, this property returns the most recent write time in the set of all files and paths.","pos":[0,147]}]},{"pos":[9463,9511],"content":"The last write time of a monitored file or path.","needQuote":true,"needEscape":true,"nodes":[{"content":"The last write time of a monitored file or path.","pos":[0,48]}]},{"pos":[10009,10176],"content":"Gets an identifier for the <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Caching.HostFileChangeMonitor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance that is based on the set of monitored directories and file paths.","needQuote":true,"needEscape":true,"source":"Gets an identifier for the <xref href=\"System.Runtime.Caching.HostFileChangeMonitor\"></xref> instance that is based on the set of monitored directories and file paths."},{"pos":[10189,10684],"content":"The string that makes up the UniqueId property value is constructed from the following parts:      -   A file or directory path.      -   The most recent write time in UTC time, measured as ticks but represented as a hexadecimal string.      -   The file size, represented as a hexadecimal string.       If a file change monitor is monitoring multiple paths, the information returned by this property is concatenated into a single string for all the monitored directories and file paths.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The string that makes up the UniqueId property value is constructed from the following parts:      -   A file or directory path.      -   The most recent write time in UTC time, measured as ticks but represented as a hexadecimal string.      -   The file size, represented as a hexadecimal string.       If a file change monitor is monitoring multiple paths, the information returned by this property is concatenated into a single string for all the monitored directories and file paths.","pos":[0,487],"nodes":[{"content":"The string that makes up the UniqueId property value is constructed from the following parts:      -   A file or directory path.","pos":[0,128]},{"content":"-   The most recent write time in UTC time, measured as ticks but represented as a hexadecimal string.","pos":[134,236]},{"content":"-   The file size, represented as a hexadecimal string.","pos":[242,297]},{"content":"If a file change monitor is monitoring multiple paths, the information returned by this property is concatenated into a single string for all the monitored directories and file paths.","pos":[304,487]}]}]},{"pos":[10807,10844],"content":"An identifier for the change monitor.","needQuote":true,"needEscape":true,"nodes":[{"content":"An identifier for the change monitor.","pos":[0,37]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Runtime.Caching.HostFileChangeMonitor\n  id: HostFileChangeMonitor\n  children:\n  - System.Runtime.Caching.HostFileChangeMonitor.#ctor(System.Collections.Generic.IList{System.String})\n  - System.Runtime.Caching.HostFileChangeMonitor.Dispose(System.Boolean)\n  - System.Runtime.Caching.HostFileChangeMonitor.FilePaths\n  - System.Runtime.Caching.HostFileChangeMonitor.LastModified\n  - System.Runtime.Caching.HostFileChangeMonitor.UniqueId\n  langs:\n  - csharp\n  name: HostFileChangeMonitor\n  nameWithType: HostFileChangeMonitor\n  fullName: System.Runtime.Caching.HostFileChangeMonitor\n  type: Class\n  summary: Monitors directories and file paths and notifies the cache of changes to the monitored items. This class cannot be inherited.\n  remarks: \"The HostFileChangeMonitor class is a concrete implementation of the <xref:System.Runtime.Caching.FileChangeMonitor> type. This class is sealed, therefore it cannot be extended. This class is useful if you want to use an existing cache implementation and to monitor files and directories for changes.  \\n  \\n For each specified file or directory path, the HostFileChangeMonitor class triggers a change notification if any of the following changes occur:  \\n  \\n-   The name of the monitored file or directory changes.  \\n  \\n-   The specified file or directory did not exist at the time the monitor was created, but was created later. In other words, a file or directory was created in the scope of the monitored items.  \\n  \\n-   The size of a monitored file changed.  \\n  \\n-   The contents of a monitored file changed, or the contents of a monitored directory changed.  \\n  \\n-   The access control list (ACL) of the file or directory was changed.  \\n  \\n-   The monitored file or directory was deleted.  \\n  \\n If too many changes occur for the monitored file or directory at the same time, the HostFileChangeMonitor instance can lose track of specific changes. In this scenario, the HostFileChangeMonitor class triggers a change notification. This scenario is more likely to occur when the HostFileChangeMonitor instance monitors a directory, and many changes occur in the scope of the directory structure in a short period of time.  \\n  \\n Because the purpose of the HostFileChangeMonitor class is only to signal that something has changed among the set of monitored files and directories, it is not considered important that details about a specific change are not captured. The purpose of the HostFileChangeMonitor class is to provide notification that state changed so that a cache entry (or entries) can be evicted. Because the HostFileChangeMonitor class does not indicate exactly what changed, internal-change tracking overflow is irrelevant.  \\n  \\n When you supply paths to a HostFileChangeMonitor instance, the directory and file paths must be full paths to the directory or file. Relative paths and wildcard characters in paths are not allowed.  \\n  \\n When the HostFileChangeMonitor class is used in an ASP.NET application, the Windows identity that is used for access to monitored items is the application identity for the ASP.NET application. In other words, the application identity will be one of the following:  \\n  \\n-   The process identity.  \\n  \\n-   The configured application identity.  \\n  \\n-   The UNC credential if the application is running from a UNC share.  \\n  \\n When the HostFileChangeMonitor class is used in a non-ASP.NET application, the <xref:System.IO.FileSystemWatcher> class is used internally to monitor files. As a result, whatever access control list (ACL) applies to a monitored file or directory is applied to the Windows identity of the current thread.  \\n  \\n> [!NOTE]\\n>  Callers must have the appropriate level of code access security (CAS) permissions and must have NTFS permissions to all monitored directories and paths.\"\n  example:\n  - \"The following example creates a cache item that uses a HostFileChangeMonitor object to monitor the state of the source data (which is a file) on the file system. The cache entry is defined using a <xref:System.Runtime.Caching.CacheItemPolicy> object to provide eviction and expiration details for the cache entry.  \\n  \\n [!code-cs[CachingASPNetApplications#1](~/add/codesnippet/csharp/t-system.runtime.caching_2_1.cs)]\\n [!code-vb[CachingASPNetApplications#1](~/add/codesnippet/visualbasic/t-system.runtime.caching_2_1.vb)]\"\n  syntax:\n    content: 'public sealed class HostFileChangeMonitor : System.Runtime.Caching.FileChangeMonitor'\n  inheritance:\n  - System.Object\n  - System.Runtime.Caching.ChangeMonitor\n  - System.Runtime.Caching.FileChangeMonitor\n  implements: []\n  inheritedMembers:\n  - System.Runtime.Caching.ChangeMonitor.Dispose\n  - System.Runtime.Caching.ChangeMonitor.HasChanged\n  - System.Runtime.Caching.ChangeMonitor.InitializationComplete\n  - System.Runtime.Caching.ChangeMonitor.IsDisposed\n  - System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)\n  - System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)\n  platform:\n  - net462\n- uid: System.Runtime.Caching.HostFileChangeMonitor.#ctor(System.Collections.Generic.IList{System.String})\n  id: '#ctor(System.Collections.Generic.IList{System.String})'\n  parent: System.Runtime.Caching.HostFileChangeMonitor\n  langs:\n  - csharp\n  name: HostFileChangeMonitor(IList<String>)\n  nameWithType: HostFileChangeMonitor.HostFileChangeMonitor(IList<String>)\n  fullName: System.Runtime.Caching.HostFileChangeMonitor.HostFileChangeMonitor(IList<String>)\n  type: Constructor\n  assemblies:\n  - System.Runtime.Caching\n  namespace: System.Runtime.Caching\n  summary: Initializes a new instance of the <xref href=\"System.Runtime.Caching.HostFileChangeMonitor\"></xref> class.\n  remarks: \"Calls to the HostFileChangeMonitor constructor must provide a non-null value for the `filePaths` parameter. At a minimum, the constructor validates the collection of paths that is passed into it and then initializes monitoring for those paths.  \\n  \\n> [!NOTE]\\n>  The constructor performs only string validation of the path name. It does not canonicalize paths or validate that the paths exist.\"\n  syntax:\n    content: public HostFileChangeMonitor (System.Collections.Generic.IList<string> filePaths);\n    parameters:\n    - id: filePaths\n      type: System.Collections.Generic.IList{System.String}\n      description: A list that contains one or more directory paths or file paths to monitor.\n  overload: System.Runtime.Caching.HostFileChangeMonitor.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>filePaths</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>filePaths</code> contains zero items.  \\n  \\n -or-  \\n  \\n A path in the <code>filePaths</code> list is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref> or an empty string.\"\n  platform:\n  - net462\n- uid: System.Runtime.Caching.HostFileChangeMonitor.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Runtime.Caching.HostFileChangeMonitor\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: HostFileChangeMonitor.Dispose(Boolean)\n  fullName: System.Runtime.Caching.HostFileChangeMonitor.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.Runtime.Caching\n  namespace: System.Runtime.Caching\n  syntax:\n    content: protected override void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: To be added.\n  overload: System.Runtime.Caching.HostFileChangeMonitor.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.Caching.HostFileChangeMonitor.FilePaths\n  id: FilePaths\n  parent: System.Runtime.Caching.HostFileChangeMonitor\n  langs:\n  - csharp\n  name: FilePaths\n  nameWithType: HostFileChangeMonitor.FilePaths\n  fullName: System.Runtime.Caching.HostFileChangeMonitor.FilePaths\n  type: Property\n  assemblies:\n  - System.Runtime.Caching\n  namespace: System.Runtime.Caching\n  summary: Gets the collection of directories and file paths that was passed to the &lt;xref:System.Runtime.Caching.HostFileChangeMonitor.%23ctor%2A&gt; constructor.\n  syntax:\n    content: public override System.Collections.ObjectModel.ReadOnlyCollection<string> FilePaths { get; }\n    return:\n      type: System.Collections.ObjectModel.ReadOnlyCollection{System.String}\n      description: A collection of directories and file paths.\n  overload: System.Runtime.Caching.HostFileChangeMonitor.FilePaths*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.Caching.HostFileChangeMonitor.LastModified\n  id: LastModified\n  parent: System.Runtime.Caching.HostFileChangeMonitor\n  langs:\n  - csharp\n  name: LastModified\n  nameWithType: HostFileChangeMonitor.LastModified\n  fullName: System.Runtime.Caching.HostFileChangeMonitor.LastModified\n  type: Property\n  assemblies:\n  - System.Runtime.Caching\n  namespace: System.Runtime.Caching\n  summary: Gets a read-only value that indicates the last write time of a monitored file or path.\n  remarks: If a file-change monitor is monitoring multiple files or paths, this property returns the most recent write time in the set of all files and paths.\n  syntax:\n    content: public override DateTimeOffset LastModified { get; }\n    return:\n      type: System.DateTimeOffset\n      description: The last write time of a monitored file or path.\n  overload: System.Runtime.Caching.HostFileChangeMonitor.LastModified*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.Caching.HostFileChangeMonitor.UniqueId\n  id: UniqueId\n  parent: System.Runtime.Caching.HostFileChangeMonitor\n  langs:\n  - csharp\n  name: UniqueId\n  nameWithType: HostFileChangeMonitor.UniqueId\n  fullName: System.Runtime.Caching.HostFileChangeMonitor.UniqueId\n  type: Property\n  assemblies:\n  - System.Runtime.Caching\n  namespace: System.Runtime.Caching\n  summary: Gets an identifier for the <xref href=\"System.Runtime.Caching.HostFileChangeMonitor\"></xref> instance that is based on the set of monitored directories and file paths.\n  remarks: \"The string that makes up the UniqueId property value is constructed from the following parts:  \\n  \\n-   A file or directory path.  \\n  \\n-   The most recent write time in UTC time, measured as ticks but represented as a hexadecimal string.  \\n  \\n-   The file size, represented as a hexadecimal string.  \\n  \\n If a file change monitor is monitoring multiple paths, the information returned by this property is concatenated into a single string for all the monitored directories and file paths.\"\n  syntax:\n    content: public override string UniqueId { get; }\n    return:\n      type: System.String\n      description: An identifier for the change monitor.\n  overload: System.Runtime.Caching.HostFileChangeMonitor.UniqueId*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Runtime.Caching.FileChangeMonitor\n  isExternal: false\n  name: System.Runtime.Caching.FileChangeMonitor\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.Runtime.Caching.HostFileChangeMonitor.#ctor(System.Collections.Generic.IList{System.String})\n  parent: System.Runtime.Caching.HostFileChangeMonitor\n  isExternal: false\n  name: HostFileChangeMonitor(IList<String>)\n  nameWithType: HostFileChangeMonitor.HostFileChangeMonitor(IList<String>)\n  fullName: System.Runtime.Caching.HostFileChangeMonitor.HostFileChangeMonitor(IList<String>)\n- uid: System.Collections.Generic.IList{System.String}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IList<String>\n  nameWithType: IList<String>\n  fullName: System.Collections.Generic.IList<System.String>\n  spec.csharp:\n  - uid: System.Collections.Generic.IList`1\n    name: IList\n    nameWithType: IList\n    fullName: IList<System.String>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: String\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Runtime.Caching.HostFileChangeMonitor.Dispose(System.Boolean)\n  parent: System.Runtime.Caching.HostFileChangeMonitor\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: HostFileChangeMonitor.Dispose(Boolean)\n  fullName: System.Runtime.Caching.HostFileChangeMonitor.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Runtime.Caching.HostFileChangeMonitor.FilePaths\n  parent: System.Runtime.Caching.HostFileChangeMonitor\n  isExternal: false\n  name: FilePaths\n  nameWithType: HostFileChangeMonitor.FilePaths\n  fullName: System.Runtime.Caching.HostFileChangeMonitor.FilePaths\n- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.String}\n  parent: System.Collections.ObjectModel\n  isExternal: true\n  name: ReadOnlyCollection<String>\n  nameWithType: ReadOnlyCollection<String>\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.String>\n  spec.csharp:\n  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n    name: ReadOnlyCollection\n    nameWithType: ReadOnlyCollection\n    fullName: ReadOnlyCollection<System.String>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: String\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Runtime.Caching.HostFileChangeMonitor.LastModified\n  parent: System.Runtime.Caching.HostFileChangeMonitor\n  isExternal: false\n  name: LastModified\n  nameWithType: HostFileChangeMonitor.LastModified\n  fullName: System.Runtime.Caching.HostFileChangeMonitor.LastModified\n- uid: System.DateTimeOffset\n  parent: System\n  isExternal: true\n  name: DateTimeOffset\n  nameWithType: DateTimeOffset\n  fullName: System.DateTimeOffset\n- uid: System.Runtime.Caching.HostFileChangeMonitor.UniqueId\n  parent: System.Runtime.Caching.HostFileChangeMonitor\n  isExternal: false\n  name: UniqueId\n  nameWithType: HostFileChangeMonitor.UniqueId\n  fullName: System.Runtime.Caching.HostFileChangeMonitor.UniqueId\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Runtime.Caching.HostFileChangeMonitor.#ctor*\n  parent: System.Runtime.Caching.HostFileChangeMonitor\n  isExternal: false\n  name: HostFileChangeMonitor\n  nameWithType: HostFileChangeMonitor.HostFileChangeMonitor\n- uid: System.Runtime.Caching.HostFileChangeMonitor.Dispose*\n  parent: System.Runtime.Caching.HostFileChangeMonitor\n  isExternal: false\n  name: Dispose\n  nameWithType: HostFileChangeMonitor.Dispose\n- uid: System.Runtime.Caching.HostFileChangeMonitor.FilePaths*\n  parent: System.Runtime.Caching.HostFileChangeMonitor\n  isExternal: false\n  name: FilePaths\n  nameWithType: HostFileChangeMonitor.FilePaths\n- uid: System.Runtime.Caching.HostFileChangeMonitor.LastModified*\n  parent: System.Runtime.Caching.HostFileChangeMonitor\n  isExternal: false\n  name: LastModified\n  nameWithType: HostFileChangeMonitor.LastModified\n- uid: System.Runtime.Caching.HostFileChangeMonitor.UniqueId*\n  parent: System.Runtime.Caching.HostFileChangeMonitor\n  isExternal: false\n  name: UniqueId\n  nameWithType: HostFileChangeMonitor.UniqueId\n"}