{"nodes":[{"pos":[1796,1878],"content":"Controls the ability to access registry variables. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Controls the ability to access registry variables. This class cannot be inherited.","pos":[0,82],"nodes":[{"content":"Controls the ability to access registry variables.","pos":[0,50]},{"content":"This class cannot be inherited.","pos":[51,82]}]}]},{"pos":[1891,3390],"content":"RegistryPermission describes protected operations on registry variables. Registry variables should not be stored in memory locations where code without RegistryPermission can access them. If the registry object is passed to an untrusted caller it can be misused.       The allowed registry access types are defined by <xref:System.Security.Permissions.RegistryPermissionAccess>. If more than one type of access is desired, they can be combined using the bitwise OR operation as shown in the code sample that follows.       Registry permission is defined in terms of canonical absolute paths; checks should always be made with canonical pathnames. Key access implies access to all values it contains and all variables under it.      > [!NOTE] >  In versions of the .NET Framework before the [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)], you could use the <xref:System.Security.CodeAccessPermission.Deny%2A?displayProperty=fullName> method to prevent inadvertent access to system resources by trusted code. <xref:System.Security.CodeAccessPermission.Deny%2A> is now obsolete, and access to resources is now determined solely by the granted permission set for an assembly. To limit access to files, you must run partially trusted code in a sandbox and assign it permissions only to resources that the code is allowed to access. For information about running an application in a sandbox, see [How to: Run Partially Trusted Code in a Sandbox](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"RegistryPermission describes protected operations on registry variables.","pos":[0,72]},{"content":"Registry variables should not be stored in memory locations where code without RegistryPermission can access them.","pos":[73,187]},{"content":"If the registry object is passed to an untrusted caller it can be misused.","pos":[188,262]},{"content":"The allowed registry access types are defined by &lt;xref:System.Security.Permissions.RegistryPermissionAccess&gt;.","pos":[269,378],"source":"       The allowed registry access types are defined by <xref:System.Security.Permissions.RegistryPermissionAccess>."},{"content":"If more than one type of access is desired, they can be combined using the bitwise OR operation as shown in the code sample that follows.","pos":[379,516]},{"content":"Registry permission is defined in terms of canonical absolute paths; checks should always be made with canonical pathnames.","pos":[523,646]},{"content":"Key access implies access to all values it contains and all variables under it.","pos":[647,726]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  In versions of the .NET Framework before the <ph id=\"ph2\">[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]</ph>, you could use the &lt;xref:System.Security.CodeAccessPermission.Deny%2A?displayProperty=fullName&gt; method to prevent inadvertent access to system resources by trusted code.","pos":[732,1019],"source":"      > [!NOTE] >  In versions of the .NET Framework before the [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)], you could use the <xref:System.Security.CodeAccessPermission.Deny%2A?displayProperty=fullName> method to prevent inadvertent access to system resources by trusted code."},{"content":"&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt; is now obsolete, and access to resources is now determined solely by the granted permission set for an assembly.","pos":[1020,1184],"source":" <xref:System.Security.CodeAccessPermission.Deny%2A> is now obsolete, and access to resources is now determined solely by the granted permission set for an assembly."},{"content":"To limit access to files, you must run partially trusted code in a sandbox and assign it permissions only to resources that the code is allowed to access.","pos":[1185,1339]},{"content":"For information about running an application in a sandbox, see <bpt id=\"p1\">[</bpt>How to: Run Partially Trusted Code in a Sandbox<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1340,1492],"source":" For information about running an application in a sandbox, see [How to: Run Partially Trusted Code in a Sandbox](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[4924,5101],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.RegistryPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with either fully restricted or unrestricted permission as specified.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Permissions.RegistryPermission\"></xref> class with either fully restricted or unrestricted permission as specified."},{"pos":[5113,5201],"content":"Creates either fully restricted (<ph id=\"ph1\">`None`</ph>) or <ph id=\"ph2\">`Unrestricted`</ph> access to registry variables.","needQuote":true,"needEscape":true,"extradata":"MT","source":"Creates either fully restricted (`None`) or `Unrestricted` access to registry variables."},{"pos":[5757,5840],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.PermissionState\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Security.Permissions.PermissionState\"></xref> values."},{"pos":[6015,6137],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">state</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not a valid value of <bpt id=\"p2\">&lt;xref href=\"System.Security.Permissions.PermissionState\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>state</code> parameter is not a valid value of <xref href=\"System.Security.Permissions.PermissionState\"></xref>."},{"pos":[6805,6975],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.RegistryPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified access to the specified registry variables.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Permissions.RegistryPermission\"></xref> class with the specified access to the specified registry variables."},{"pos":[6987,7277],"content":"This constructor allows only one of the <xref:System.Security.Permissions.RegistryPermissionAccess> values to be specified. This access applies to all listed registry variables. Use <xref:System.Security.Permissions.RegistryPermission.AddPathList%2A> to define more complicated permissions.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This constructor allows only one of the <xref:System.Security.Permissions.RegistryPermissionAccess> values to be specified. This access applies to all listed registry variables. Use <xref:System.Security.Permissions.RegistryPermission.AddPathList%2A> to define more complicated permissions.","pos":[0,290],"nodes":[{"content":"This constructor allows only one of the &lt;xref:System.Security.Permissions.RegistryPermissionAccess&gt; values to be specified.","pos":[0,123],"source":"This constructor allows only one of the <xref:System.Security.Permissions.RegistryPermissionAccess> values to be specified."},{"content":"This access applies to all listed registry variables.","pos":[124,177]},{"content":"Use &lt;xref:System.Security.Permissions.RegistryPermission.AddPathList%2A&gt; to define more complicated permissions.","pos":[178,290],"source":" Use <xref:System.Security.Permissions.RegistryPermission.AddPathList%2A> to define more complicated permissions."}]}]},{"pos":[7872,7964],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.RegistryPermissionAccess\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Security.Permissions.RegistryPermissionAccess\"></xref> values."},{"pos":[8029,8107],"content":"A list of registry variables (semicolon-separated) to which access is granted.","needQuote":true,"needEscape":true,"nodes":[{"content":"A list of registry variables (semicolon-separated) to which access is granted.","pos":[0,78]}]},{"pos":[8283,8497],"content":"The <code>access</code> parameter is not a valid value of <xref href=\"System.Security.Permissions.RegistryPermissionAccess\"></xref>.       -or-       The <code>pathList</code> parameter is not a valid string.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">access</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not a valid value of <bpt id=\"p2\">&lt;xref href=\"System.Security.Permissions.RegistryPermissionAccess\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,132],"source":"The <code>access</code> parameter is not a valid value of <xref href=\"System.Security.Permissions.RegistryPermissionAccess\"></xref>."},{"content":"-or-       The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">pathList</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not a valid string.","pos":[139,208],"source":"       -or-       The <code>pathList</code> parameter is not a valid string."}]},{"pos":[9331,9565],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.RegistryPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified access to the specified registry variables and the specified access rights to registry control information.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Permissions.RegistryPermission\"></xref> class with the specified access to the specified registry variables and the specified access rights to registry control information."},{"pos":[9578,10314],"content":"This constructor allows only one of the <xref:System.Security.Permissions.RegistryPermissionAccess> values to be specified. This access applies to all listed registry variables. Use <xref:System.Security.Permissions.RegistryPermission.AddPathList%2A> to define more complicated permissions.       The `control` parameter specifies whether the access control list (ACL) for the registry keys specified by `pathList` can be changed, viewed, or cannot be accessed.      > [!IMPORTANT] >  An access control list (ACL) describes individuals or groups who have, or do not have, rights to specific actions on the specified registry keys.  The ability to change or view an ACL is an important permission and should be granted with caution.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This constructor allows only one of the &lt;xref:System.Security.Permissions.RegistryPermissionAccess&gt; values to be specified.","pos":[0,123],"source":"This constructor allows only one of the <xref:System.Security.Permissions.RegistryPermissionAccess> values to be specified."},{"content":"This access applies to all listed registry variables.","pos":[124,177]},{"content":"Use &lt;xref:System.Security.Permissions.RegistryPermission.AddPathList%2A&gt; to define more complicated permissions.","pos":[178,290],"source":" Use <xref:System.Security.Permissions.RegistryPermission.AddPathList%2A> to define more complicated permissions."},{"content":"The <ph id=\"ph1\">`control`</ph> parameter specifies whether the access control list (ACL) for the registry keys specified by <ph id=\"ph2\">`pathList`</ph> can be changed, viewed, or cannot be accessed.","pos":[297,461],"source":"       The `control` parameter specifies whether the access control list (ACL) for the registry keys specified by `pathList` can be changed, viewed, or cannot be accessed."},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  An access control list (ACL) describes individuals or groups who have, or do not have, rights to specific actions on the specified registry keys.","pos":[467,630],"source":"      > [!IMPORTANT] >  An access control list (ACL) describes individuals or groups who have, or do not have, rights to specific actions on the specified registry keys."},{"content":"The ability to change or view an ACL is an important permission and should be granted with caution.","pos":[632,731]}]},{"pos":[10622,10714],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.RegistryPermissionAccess\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Security.Permissions.RegistryPermissionAccess\"></xref> values."},{"pos":[10815,10923],"content":"A bitwise combination of the <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.AccessControlActions\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"A bitwise combination of the <xref href=\"System.Security.AccessControl.AccessControlActions\"></xref> values."},{"pos":[10988,11066],"content":"A list of registry variables (semicolon-separated) to which access is granted.","needQuote":true,"needEscape":true,"nodes":[{"content":"A list of registry variables (semicolon-separated) to which access is granted.","pos":[0,78]}]},{"pos":[11242,11456],"content":"The <code>access</code> parameter is not a valid value of <xref href=\"System.Security.Permissions.RegistryPermissionAccess\"></xref>.       -or-       The <code>pathList</code> parameter is not a valid string.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">access</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not a valid value of <bpt id=\"p2\">&lt;xref href=\"System.Security.Permissions.RegistryPermissionAccess\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,132],"source":"The <code>access</code> parameter is not a valid value of <xref href=\"System.Security.Permissions.RegistryPermissionAccess\"></xref>."},{"content":"-or-       The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">pathList</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not a valid string.","pos":[139,208],"source":"       -or-       The <code>pathList</code> parameter is not a valid string."}]},{"pos":[12109,12198],"content":"Adds access for the specified registry variables to the existing state of the permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds access for the specified registry variables to the existing state of the permission.","pos":[0,89]}]},{"pos":[12210,12321],"content":"Use this method to modify access to registry variables by adding to the state of the current permission object.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use this method to modify access to registry variables by adding to the state of the current permission object.","pos":[0,111]}]},{"pos":[12900,12992],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.RegistryPermissionAccess\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Security.Permissions.RegistryPermissionAccess\"></xref> values."},{"pos":[13057,13108],"content":"A list of registry variables (semicolon-separated).","needQuote":true,"needEscape":true,"nodes":[{"content":"A list of registry variables (semicolon-separated).","pos":[0,51]}]},{"pos":[13290,13504],"content":"The <code>access</code> parameter is not a valid value of <xref href=\"System.Security.Permissions.RegistryPermissionAccess\"></xref>.       -or-       The <code>pathList</code> parameter is not a valid string.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">access</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not a valid value of <bpt id=\"p2\">&lt;xref href=\"System.Security.Permissions.RegistryPermissionAccess\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,132],"source":"The <code>access</code> parameter is not a valid value of <xref href=\"System.Security.Permissions.RegistryPermissionAccess\"></xref>."},{"content":"-or-       The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">pathList</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not a valid string.","pos":[139,208],"source":"       -or-       The <code>pathList</code> parameter is not a valid string."}]},{"pos":[14322,14477],"content":"Adds access for the specified registry variables to the existing state of the permission, specifying registry permission access and access control actions.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds access for the specified registry variables to the existing state of the permission, specifying registry permission access and access control actions.","pos":[0,155]}]},{"pos":[14490,15175],"content":"Use this method to modify access to registry variables by adding the set of their paths to the state of the current permission object. This overload allows you to specify the access control action as will as the registry permission access.       The `control` parameter specifies whether the access control list (ACL) for the registry keys specified by `pathList` can be changed, viewed, or cannot be accessed.      > [!IMPORTANT] >  An access control list (ACL) describes individuals or groups who have, or do not have, rights to specific actions on the specified registry keys.  The ability to change or view an ACL is an important permission and should be granted with caution.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use this method to modify access to registry variables by adding the set of their paths to the state of the current permission object.","pos":[0,134]},{"content":"This overload allows you to specify the access control action as will as the registry permission access.","pos":[135,239]},{"content":"The <ph id=\"ph1\">`control`</ph> parameter specifies whether the access control list (ACL) for the registry keys specified by <ph id=\"ph2\">`pathList`</ph> can be changed, viewed, or cannot be accessed.","pos":[246,410],"source":"       The `control` parameter specifies whether the access control list (ACL) for the registry keys specified by `pathList` can be changed, viewed, or cannot be accessed."},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  An access control list (ACL) describes individuals or groups who have, or do not have, rights to specific actions on the specified registry keys.","pos":[416,579],"source":"      > [!IMPORTANT] >  An access control list (ACL) describes individuals or groups who have, or do not have, rights to specific actions on the specified registry keys."},{"content":"The ability to change or view an ACL is an important permission and should be granted with caution.","pos":[581,680]}]},{"pos":[15481,15573],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.RegistryPermissionAccess\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Security.Permissions.RegistryPermissionAccess\"></xref> values."},{"pos":[15674,15764],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.AccessControlActions\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Security.AccessControl.AccessControlActions\"></xref> values."},{"pos":[15829,15884],"content":"A list of registry variables (separated by semicolons).","needQuote":true,"needEscape":true,"nodes":[{"content":"A list of registry variables (separated by semicolons).","pos":[0,55]}]},{"pos":[16066,16280],"content":"The <code>access</code> parameter is not a valid value of <xref href=\"System.Security.Permissions.RegistryPermissionAccess\"></xref>.       -or-       The <code>pathList</code> parameter is not a valid string.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">access</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not a valid value of <bpt id=\"p2\">&lt;xref href=\"System.Security.Permissions.RegistryPermissionAccess\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,132],"source":"The <code>access</code> parameter is not a valid value of <xref href=\"System.Security.Permissions.RegistryPermissionAccess\"></xref>."},{"content":"-or-       The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">pathList</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not a valid string.","pos":[139,208],"source":"       -or-       The <code>pathList</code> parameter is not a valid string."}]},{"pos":[16669,16733],"content":"Creates and returns an identical copy of the current permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates and returns an identical copy of the current permission.","pos":[0,64]}]},{"pos":[16745,16835],"content":"A copy of a permission represents the same access to resources as the original permission.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"A copy of a permission represents the same access to resources as the original permission.","pos":[0,90]}]},{"pos":[17002,17035],"content":"A copy of the current permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"A copy of the current permission.","pos":[0,33]}]},{"pos":[17631,17701],"content":"Reconstructs a permission with a specified state from an XML encoding.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reconstructs a permission with a specified state from an XML encoding.","pos":[0,70]}]},{"pos":[17886,17940],"content":"The XML encoding to use to reconstruct the permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The XML encoding to use to reconstruct the permission.","pos":[0,54]}]},{"pos":[18125,18220],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">esd</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>esd</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[18316,18464],"content":"The <code>esd</code> parameter is not a valid permission element.       -or-       The <code>esd</code> parameter's version number is not valid.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">esd</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not a valid permission element.","pos":[0,65],"source":"The <code>esd</code> parameter is not a valid permission element."},{"content":"-or-       The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">esd</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter's version number is not valid.","pos":[72,144],"source":"       -or-       The <code>esd</code> parameter's version number is not valid."}]},{"pos":[19068,19199],"content":"Gets paths for all registry variables with the specified <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.RegistryPermissionAccess\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets paths for all registry variables with the specified <xref href=\"System.Security.Permissions.RegistryPermissionAccess\"></xref>."},{"pos":[19212,19967],"content":"Use this method to get the state of the current permission. You must call this method separately for each type of access.      > [!NOTE] >  The `access` parameter is limited to the values of <xref:System.Security.Permissions.RegistryPermissionAccess>, which represent single types of registry variable access. Those values are <xref:System.Security.Permissions.RegistryPermissionAccess>, <xref:System.Security.Permissions.RegistryPermissionAccess>, and <xref:System.Security.Permissions.RegistryPermissionAccess>. The values acceptable to `access` do not include <xref:System.Security.Permissions.RegistryPermissionAccess> and <xref:System.Security.Permissions.RegistryPermissionAccess>, which do not represent single types of registry variable access.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use this method to get the state of the current permission.","pos":[0,59]},{"content":"You must call this method separately for each type of access.","pos":[60,121]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The <ph id=\"ph2\">`access`</ph> parameter is limited to the values of &lt;xref:System.Security.Permissions.RegistryPermissionAccess&gt;, which represent single types of registry variable access.","pos":[127,309],"source":"      > [!NOTE] >  The `access` parameter is limited to the values of <xref:System.Security.Permissions.RegistryPermissionAccess>, which represent single types of registry variable access."},{"content":"Those values are &lt;xref:System.Security.Permissions.RegistryPermissionAccess&gt;, &lt;xref:System.Security.Permissions.RegistryPermissionAccess&gt;, and &lt;xref:System.Security.Permissions.RegistryPermissionAccess&gt;.","pos":[310,513],"source":" Those values are <xref:System.Security.Permissions.RegistryPermissionAccess>, <xref:System.Security.Permissions.RegistryPermissionAccess>, and <xref:System.Security.Permissions.RegistryPermissionAccess>."},{"content":"The values acceptable to <ph id=\"ph1\">`access`</ph> do not include &lt;xref:System.Security.Permissions.RegistryPermissionAccess&gt; and &lt;xref:System.Security.Permissions.RegistryPermissionAccess&gt;, which do not represent single types of registry variable access.","pos":[514,752],"source":" The values acceptable to `access` do not include <xref:System.Security.Permissions.RegistryPermissionAccess> and <xref:System.Security.Permissions.RegistryPermissionAccess>, which do not represent single types of registry variable access."}]},{"pos":[20532,20682],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.RegistryPermissionAccess\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values that represents a single type of registry variable access.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Security.Permissions.RegistryPermissionAccess\"></xref> values that represents a single type of registry variable access."},{"pos":[20740,20888],"content":"A list of the registry variables (semicolon-separated) with the specified <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.RegistryPermissionAccess\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A list of the registry variables (semicolon-separated) with the specified <xref href=\"System.Security.Permissions.RegistryPermissionAccess\"></xref>."},{"pos":[21070,21519],"content":"<code>access</code> is not a valid value of <xref href=\"System.Security.Permissions.RegistryPermissionAccess\"></xref>.       -or-       <code>access</code> is <xref href=\"System.Security.Permissions.RegistryPermissionAccess\"></xref>, which represents more than one type of registry variable access, or <xref href=\"System.Security.Permissions.RegistryPermissionAccess\"></xref>, which does not represent any type of registry variable access.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;access&lt;/code&gt;</ph> is not a valid value of <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.RegistryPermissionAccess\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,118],"source":"<code>access</code> is not a valid value of <xref href=\"System.Security.Permissions.RegistryPermissionAccess\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;access&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.RegistryPermissionAccess\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, which represents more than one type of registry variable access, or <bpt id=\"p2\">&lt;xref href=\"System.Security.Permissions.RegistryPermissionAccess\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, which does not represent any type of registry variable access.","pos":[125,439],"source":"       -or-       <code>access</code> is <xref href=\"System.Security.Permissions.RegistryPermissionAccess\"></xref>, which represents more than one type of registry variable access, or <xref href=\"System.Security.Permissions.RegistryPermissionAccess\"></xref>, which does not represent any type of registry variable access."}]},{"pos":[22024,22137],"content":"Creates and returns a permission that is the intersection of the current permission and the specified permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates and returns a permission that is the intersection of the current permission and the specified permission.","pos":[0,113]}]},{"pos":[22149,22347],"content":"The intersection of two permissions is a permission that describes the set of operations they both describe in common. Only a demand that passes both original permissions will pass the intersection.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The intersection of two permissions is a permission that describes the set of operations they both describe in common. Only a demand that passes both original permissions will pass the intersection.","pos":[0,198],"nodes":[{"content":"The intersection of two permissions is a permission that describes the set of operations they both describe in common.","pos":[0,118]},{"content":"Only a demand that passes both original permissions will pass the intersection.","pos":[119,198]}]}]},{"pos":[22555,22664],"content":"A permission to intersect with the current permission. It must be of the same type as the current permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"A permission to intersect with the current permission. It must be of the same type as the current permission.","pos":[0,109],"nodes":[{"content":"A permission to intersect with the current permission.","pos":[0,54]},{"content":"It must be of the same type as the current permission.","pos":[55,109]}]}]},{"pos":[22736,22955],"content":"A new permission that represents the intersection of the current permission and the specified permission. This new permission is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the intersection is empty.","needQuote":true,"needEscape":true,"nodes":[{"content":"A new permission that represents the intersection of the current permission and the specified permission.","pos":[0,105]},{"content":"This new permission is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the intersection is empty.","pos":[106,219],"source":" This new permission is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the intersection is empty."}]},{"pos":[23134,23290],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">target</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> and is not of the same type as the current permission.","needQuote":true,"needEscape":true,"source":"The <code>target</code> parameter is not <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> and is not of the same type as the current permission."},{"pos":[23799,23881],"content":"Determines whether the current permission is a subset of the specified permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether the current permission is a subset of the specified permission.","pos":[0,82]}]},{"pos":[23893,24334],"content":"The current permission is a subset of the specified permission if the current permission specifies a set of operations that is wholly contained by the specified permission. For example, a permission that represents access to C:\\example.txt is a subset of a permission that represents access to C:\\\\. If this method returns `true`, the current permission represents no more access to the protected resource than does the specified permission.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The current permission is a subset of the specified permission if the current permission specifies a set of operations that is wholly contained by the specified permission.","pos":[0,172]},{"content":"For example, a permission that represents access to C:\\example.txt is a subset of a permission that represents access to C:<ph id=\"ph1\">\\\\</ph>.","pos":[173,299],"source":" For example, a permission that represents access to C:\\example.txt is a subset of a permission that represents access to C:\\\\."},{"content":"If this method returns <ph id=\"ph1\">`true`</ph>, the current permission represents no more access to the protected resource than does the specified permission.","pos":[300,441],"source":" If this method returns `true`, the current permission represents no more access to the protected resource than does the specified permission."}]},{"pos":[24520,24650],"content":"A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.","pos":[0,130],"nodes":[{"content":"A permission that is to be tested for the subset relationship.","pos":[0,62]},{"content":"This permission must be of the same type as the current permission.","pos":[63,130]}]}]},{"pos":[24709,24911],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the current permission is a subset of the specified permission; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current permission is a subset of the specified permission; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[25091,25247],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">target</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> and is not of the same type as the current permission.","needQuote":true,"needEscape":true,"source":"The <code>target</code> parameter is not <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> and is not of the same type as the current permission."},{"pos":[25685,25759],"content":"Returns a value indicating whether the current permission is unrestricted.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a value indicating whether the current permission is unrestricted.","pos":[0,74]}]},{"pos":[25771,25869],"content":"An unrestricted permission represents access to any and all resources protected by the permission.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"An unrestricted permission represents access to any and all resources protected by the permission.","pos":[0,98]}]},{"pos":[26001,26179],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the current permission is unrestricted; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current permission is unrestricted; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[26923,27021],"content":"Sets new access for the specified registry variable names to the existing state of the permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sets new access for the specified registry variable names to the existing state of the permission.","pos":[0,98]}]},{"pos":[27033,27093],"content":"The previous state of the current permission is overwritten.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The previous state of the current permission is overwritten.","pos":[0,60]}]},{"pos":[27672,27764],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.RegistryPermissionAccess\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Security.Permissions.RegistryPermissionAccess\"></xref> values."},{"pos":[27829,27880],"content":"A list of registry variables (semicolon-separated).","needQuote":true,"needEscape":true,"nodes":[{"content":"A list of registry variables (semicolon-separated).","pos":[0,51]}]},{"pos":[28062,28276],"content":"The <code>access</code> parameter is not a valid value of <xref href=\"System.Security.Permissions.RegistryPermissionAccess\"></xref>.       -or-       The <code>pathList</code> parameter is not a valid string.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">access</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not a valid value of <bpt id=\"p2\">&lt;xref href=\"System.Security.Permissions.RegistryPermissionAccess\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,132],"source":"The <code>access</code> parameter is not a valid value of <xref href=\"System.Security.Permissions.RegistryPermissionAccess\"></xref>."},{"content":"-or-       The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">pathList</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not a valid string.","pos":[139,208],"source":"       -or-       The <code>pathList</code> parameter is not a valid string."}]},{"pos":[28670,28734],"content":"Creates an XML encoding of the permission and its current state.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates an XML encoding of the permission and its current state.","pos":[0,64]}]},{"pos":[28910,28977],"content":"An XML encoding of the permission, including any state information.","needQuote":true,"needEscape":true,"nodes":[{"content":"An XML encoding of the permission, including any state information.","pos":[0,67]}]},{"pos":[29544,29638],"content":"Creates a permission that is the union of the current permission and the specified permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a permission that is the union of the current permission and the specified permission.","pos":[0,94]}]},{"pos":[29650,29864],"content":"The result of a call to Union is a permission that represents all the operations represented by both the current permission and the specified permission. Any demand that passes either permission passes their union.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The result of a call to Union is a permission that represents all the operations represented by both the current permission and the specified permission. Any demand that passes either permission passes their union.","pos":[0,214],"nodes":[{"content":"The result of a call to Union is a permission that represents all the operations represented by both the current permission and the specified permission.","pos":[0,153]},{"content":"Any demand that passes either permission passes their union.","pos":[154,214]}]}]},{"pos":[30066,30173],"content":"A permission to combine with the current permission. It must be of the same type as the current permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"A permission to combine with the current permission. It must be of the same type as the current permission.","pos":[0,107],"nodes":[{"content":"A permission to combine with the current permission.","pos":[0,52]},{"content":"It must be of the same type as the current permission.","pos":[53,107]}]}]},{"pos":[30245,30343],"content":"A new permission that represents the union of the current permission and the specified permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"A new permission that represents the union of the current permission and the specified permission.","pos":[0,98]}]},{"pos":[30518,30673],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">other</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> and is not of the same type as the current permission.","needQuote":true,"needEscape":true,"source":"The <code>other</code> parameter is not <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> and is not of the same type as the current permission."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Permissions.RegistryPermission\n  id: RegistryPermission\n  children:\n  - System.Security.Permissions.RegistryPermission.#ctor(System.Security.Permissions.PermissionState)\n  - System.Security.Permissions.RegistryPermission.#ctor(System.Security.Permissions.RegistryPermissionAccess,System.String)\n  - System.Security.Permissions.RegistryPermission.#ctor(System.Security.Permissions.RegistryPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String)\n  - System.Security.Permissions.RegistryPermission.AddPathList(System.Security.Permissions.RegistryPermissionAccess,System.String)\n  - System.Security.Permissions.RegistryPermission.AddPathList(System.Security.Permissions.RegistryPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String)\n  - System.Security.Permissions.RegistryPermission.Copy\n  - System.Security.Permissions.RegistryPermission.FromXml(System.Security.SecurityElement)\n  - System.Security.Permissions.RegistryPermission.GetPathList(System.Security.Permissions.RegistryPermissionAccess)\n  - System.Security.Permissions.RegistryPermission.Intersect(System.Security.IPermission)\n  - System.Security.Permissions.RegistryPermission.IsSubsetOf(System.Security.IPermission)\n  - System.Security.Permissions.RegistryPermission.IsUnrestricted\n  - System.Security.Permissions.RegistryPermission.SetPathList(System.Security.Permissions.RegistryPermissionAccess,System.String)\n  - System.Security.Permissions.RegistryPermission.ToXml\n  - System.Security.Permissions.RegistryPermission.Union(System.Security.IPermission)\n  langs:\n  - csharp\n  name: RegistryPermission\n  nameWithType: RegistryPermission\n  fullName: System.Security.Permissions.RegistryPermission\n  type: Class\n  summary: Controls the ability to access registry variables. This class cannot be inherited.\n  remarks: \"RegistryPermission describes protected operations on registry variables. Registry variables should not be stored in memory locations where code without RegistryPermission can access them. If the registry object is passed to an untrusted caller it can be misused.  \\n  \\n The allowed registry access types are defined by <xref:System.Security.Permissions.RegistryPermissionAccess>. If more than one type of access is desired, they can be combined using the bitwise OR operation as shown in the code sample that follows.  \\n  \\n Registry permission is defined in terms of canonical absolute paths; checks should always be made with canonical pathnames. Key access implies access to all values it contains and all variables under it.  \\n  \\n> [!NOTE]\\n>  In versions of the .NET Framework before the [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)], you could use the <xref:System.Security.CodeAccessPermission.Deny%2A?displayProperty=fullName> method to prevent inadvertent access to system resources by trusted code. <xref:System.Security.CodeAccessPermission.Deny%2A> is now obsolete, and access to resources is now determined solely by the granted permission set for an assembly. To limit access to files, you must run partially trusted code in a sandbox and assign it permissions only to resources that the code is allowed to access. For information about running an application in a sandbox, see [How to: Run Partially Trusted Code in a Sandbox](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class RegistryPermission : System.Security.CodeAccessPermission, System.Security.Permissions.IUnrestrictedPermission\n  inheritance:\n  - System.Object\n  - System.Security.CodeAccessPermission\n  implements:\n  - System.Security.Permissions.IUnrestrictedPermission\n  inheritedMembers:\n  - System.Security.CodeAccessPermission.Assert\n  - System.Security.CodeAccessPermission.Demand\n  - System.Security.CodeAccessPermission.Deny\n  - System.Security.CodeAccessPermission.Equals(System.Object)\n  - System.Security.CodeAccessPermission.GetHashCode\n  - System.Security.CodeAccessPermission.PermitOnly\n  - System.Security.CodeAccessPermission.RevertAll\n  - System.Security.CodeAccessPermission.RevertAssert\n  - System.Security.CodeAccessPermission.RevertDeny\n  - System.Security.CodeAccessPermission.RevertPermitOnly\n  - System.Security.CodeAccessPermission.ToString\n  platform:\n  - net462\n- uid: System.Security.Permissions.RegistryPermission.#ctor(System.Security.Permissions.PermissionState)\n  id: '#ctor(System.Security.Permissions.PermissionState)'\n  parent: System.Security.Permissions.RegistryPermission\n  langs:\n  - csharp\n  name: RegistryPermission(PermissionState)\n  nameWithType: RegistryPermission.RegistryPermission(PermissionState)\n  fullName: System.Security.Permissions.RegistryPermission.RegistryPermission(PermissionState)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Initializes a new instance of the <xref href=\"System.Security.Permissions.RegistryPermission\"></xref> class with either fully restricted or unrestricted permission as specified.\n  remarks: Creates either fully restricted (`None`) or `Unrestricted` access to registry variables.\n  example:\n  - \"The following code example shows the use of the RegistryPermission constructor.  \\n  \\n [!code-vb[System.Security.Permissions.RegistryPermission#7](~/add/codesnippet/visualbasic/85dea953-f2a8-49bc-b863-_1.vb)]\\n [!code-cs[System.Security.Permissions.RegistryPermission#7](~/add/codesnippet/csharp/85dea953-f2a8-49bc-b863-_1.cs)]\"\n  syntax:\n    content: public RegistryPermission (System.Security.Permissions.PermissionState state);\n    parameters:\n    - id: state\n      type: System.Security.Permissions.PermissionState\n      description: One of the <xref href=\"System.Security.Permissions.PermissionState\"></xref> values.\n  overload: System.Security.Permissions.RegistryPermission.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>state</code> parameter is not a valid value of <xref href=\"System.Security.Permissions.PermissionState\"></xref>.\n  platform:\n  - net462\n- uid: System.Security.Permissions.RegistryPermission.#ctor(System.Security.Permissions.RegistryPermissionAccess,System.String)\n  id: '#ctor(System.Security.Permissions.RegistryPermissionAccess,System.String)'\n  parent: System.Security.Permissions.RegistryPermission\n  langs:\n  - csharp\n  name: RegistryPermission(RegistryPermissionAccess,String)\n  nameWithType: RegistryPermission.RegistryPermission(RegistryPermissionAccess,String)\n  fullName: System.Security.Permissions.RegistryPermission.RegistryPermission(RegistryPermissionAccess,String)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Initializes a new instance of the <xref href=\"System.Security.Permissions.RegistryPermission\"></xref> class with the specified access to the specified registry variables.\n  remarks: This constructor allows only one of the <xref:System.Security.Permissions.RegistryPermissionAccess> values to be specified. This access applies to all listed registry variables. Use <xref:System.Security.Permissions.RegistryPermission.AddPathList%2A> to define more complicated permissions.\n  example:\n  - \"The following code example shows the use of the RegistryPermission constructor.  \\n  \\n [!code-vb[System.Security.Permissions.RegistryPermission#10](~/add/codesnippet/visualbasic/a1e0cfb2-93bc-4e55-9235-_1.vb)]\\n [!code-cs[System.Security.Permissions.RegistryPermission#10](~/add/codesnippet/csharp/a1e0cfb2-93bc-4e55-9235-_1.cs)]\"\n  syntax:\n    content: public RegistryPermission (System.Security.Permissions.RegistryPermissionAccess access, string pathList);\n    parameters:\n    - id: access\n      type: System.Security.Permissions.RegistryPermissionAccess\n      description: One of the <xref href=\"System.Security.Permissions.RegistryPermissionAccess\"></xref> values.\n    - id: pathList\n      type: System.String\n      description: A list of registry variables (semicolon-separated) to which access is granted.\n  overload: System.Security.Permissions.RegistryPermission.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>access</code> parameter is not a valid value of <xref href=\\\"System.Security.Permissions.RegistryPermissionAccess\\\"></xref>.  \\n  \\n -or-  \\n  \\n The <code>pathList</code> parameter is not a valid string.\"\n  platform:\n  - net462\n- uid: System.Security.Permissions.RegistryPermission.#ctor(System.Security.Permissions.RegistryPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String)\n  id: '#ctor(System.Security.Permissions.RegistryPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String)'\n  parent: System.Security.Permissions.RegistryPermission\n  langs:\n  - csharp\n  name: RegistryPermission(RegistryPermissionAccess,AccessControlActions,String)\n  nameWithType: RegistryPermission.RegistryPermission(RegistryPermissionAccess,AccessControlActions,String)\n  fullName: System.Security.Permissions.RegistryPermission.RegistryPermission(RegistryPermissionAccess,AccessControlActions,String)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Initializes a new instance of the <xref href=\"System.Security.Permissions.RegistryPermission\"></xref> class with the specified access to the specified registry variables and the specified access rights to registry control information.\n  remarks: \"This constructor allows only one of the <xref:System.Security.Permissions.RegistryPermissionAccess> values to be specified. This access applies to all listed registry variables. Use <xref:System.Security.Permissions.RegistryPermission.AddPathList%2A> to define more complicated permissions.  \\n  \\n The `control` parameter specifies whether the access control list (ACL) for the registry keys specified by `pathList` can be changed, viewed, or cannot be accessed.  \\n  \\n> [!IMPORTANT]\\n>  An access control list (ACL) describes individuals or groups who have, or do not have, rights to specific actions on the specified registry keys.  The ability to change or view an ACL is an important permission and should be granted with caution.\"\n  syntax:\n    content: public RegistryPermission (System.Security.Permissions.RegistryPermissionAccess access, System.Security.AccessControl.AccessControlActions control, string pathList);\n    parameters:\n    - id: access\n      type: System.Security.Permissions.RegistryPermissionAccess\n      description: One of the <xref href=\"System.Security.Permissions.RegistryPermissionAccess\"></xref> values.\n    - id: control\n      type: System.Security.AccessControl.AccessControlActions\n      description: A bitwise combination of the <xref href=\"System.Security.AccessControl.AccessControlActions\"></xref> values.\n    - id: pathList\n      type: System.String\n      description: A list of registry variables (semicolon-separated) to which access is granted.\n  overload: System.Security.Permissions.RegistryPermission.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>access</code> parameter is not a valid value of <xref href=\\\"System.Security.Permissions.RegistryPermissionAccess\\\"></xref>.  \\n  \\n -or-  \\n  \\n The <code>pathList</code> parameter is not a valid string.\"\n  platform:\n  - net462\n- uid: System.Security.Permissions.RegistryPermission.AddPathList(System.Security.Permissions.RegistryPermissionAccess,System.String)\n  id: AddPathList(System.Security.Permissions.RegistryPermissionAccess,System.String)\n  parent: System.Security.Permissions.RegistryPermission\n  langs:\n  - csharp\n  name: AddPathList(RegistryPermissionAccess,String)\n  nameWithType: RegistryPermission.AddPathList(RegistryPermissionAccess,String)\n  fullName: System.Security.Permissions.RegistryPermission.AddPathList(RegistryPermissionAccess,String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Adds access for the specified registry variables to the existing state of the permission.\n  remarks: Use this method to modify access to registry variables by adding to the state of the current permission object.\n  example:\n  - \"The following code example shows the use of the AddPathList method.  \\n  \\n [!code-vb[System.Security.Permissions.RegistryPermission#9](~/add/codesnippet/visualbasic/4576855b-6757-4ec9-971b-_1.vb)]\\n [!code-cs[System.Security.Permissions.RegistryPermission#9](~/add/codesnippet/csharp/4576855b-6757-4ec9-971b-_1.cs)]\"\n  syntax:\n    content: public void AddPathList (System.Security.Permissions.RegistryPermissionAccess access, string pathList);\n    parameters:\n    - id: access\n      type: System.Security.Permissions.RegistryPermissionAccess\n      description: One of the <xref href=\"System.Security.Permissions.RegistryPermissionAccess\"></xref> values.\n    - id: pathList\n      type: System.String\n      description: A list of registry variables (semicolon-separated).\n  overload: System.Security.Permissions.RegistryPermission.AddPathList*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>access</code> parameter is not a valid value of <xref href=\\\"System.Security.Permissions.RegistryPermissionAccess\\\"></xref>.  \\n  \\n -or-  \\n  \\n The <code>pathList</code> parameter is not a valid string.\"\n  platform:\n  - net462\n- uid: System.Security.Permissions.RegistryPermission.AddPathList(System.Security.Permissions.RegistryPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String)\n  id: AddPathList(System.Security.Permissions.RegistryPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String)\n  parent: System.Security.Permissions.RegistryPermission\n  langs:\n  - csharp\n  name: AddPathList(RegistryPermissionAccess,AccessControlActions,String)\n  nameWithType: RegistryPermission.AddPathList(RegistryPermissionAccess,AccessControlActions,String)\n  fullName: System.Security.Permissions.RegistryPermission.AddPathList(RegistryPermissionAccess,AccessControlActions,String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Adds access for the specified registry variables to the existing state of the permission, specifying registry permission access and access control actions.\n  remarks: \"Use this method to modify access to registry variables by adding the set of their paths to the state of the current permission object. This overload allows you to specify the access control action as will as the registry permission access.  \\n  \\n The `control` parameter specifies whether the access control list (ACL) for the registry keys specified by `pathList` can be changed, viewed, or cannot be accessed.  \\n  \\n> [!IMPORTANT]\\n>  An access control list (ACL) describes individuals or groups who have, or do not have, rights to specific actions on the specified registry keys.  The ability to change or view an ACL is an important permission and should be granted with caution.\"\n  syntax:\n    content: public void AddPathList (System.Security.Permissions.RegistryPermissionAccess access, System.Security.AccessControl.AccessControlActions control, string pathList);\n    parameters:\n    - id: access\n      type: System.Security.Permissions.RegistryPermissionAccess\n      description: One of the <xref href=\"System.Security.Permissions.RegistryPermissionAccess\"></xref> values.\n    - id: control\n      type: System.Security.AccessControl.AccessControlActions\n      description: One of the <xref href=\"System.Security.AccessControl.AccessControlActions\"></xref> values.\n    - id: pathList\n      type: System.String\n      description: A list of registry variables (separated by semicolons).\n  overload: System.Security.Permissions.RegistryPermission.AddPathList*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>access</code> parameter is not a valid value of <xref href=\\\"System.Security.Permissions.RegistryPermissionAccess\\\"></xref>.  \\n  \\n -or-  \\n  \\n The <code>pathList</code> parameter is not a valid string.\"\n  platform:\n  - net462\n- uid: System.Security.Permissions.RegistryPermission.Copy\n  id: Copy\n  parent: System.Security.Permissions.RegistryPermission\n  langs:\n  - csharp\n  name: Copy()\n  nameWithType: RegistryPermission.Copy()\n  fullName: System.Security.Permissions.RegistryPermission.Copy()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Creates and returns an identical copy of the current permission.\n  remarks: A copy of a permission represents the same access to resources as the original permission.\n  syntax:\n    content: public override System.Security.IPermission Copy ();\n    parameters: []\n    return:\n      type: System.Security.IPermission\n      description: A copy of the current permission.\n  overload: System.Security.Permissions.RegistryPermission.Copy*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Permissions.RegistryPermission.FromXml(System.Security.SecurityElement)\n  id: FromXml(System.Security.SecurityElement)\n  parent: System.Security.Permissions.RegistryPermission\n  langs:\n  - csharp\n  name: FromXml(SecurityElement)\n  nameWithType: RegistryPermission.FromXml(SecurityElement)\n  fullName: System.Security.Permissions.RegistryPermission.FromXml(SecurityElement)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Reconstructs a permission with a specified state from an XML encoding.\n  syntax:\n    content: public override void FromXml (System.Security.SecurityElement esd);\n    parameters:\n    - id: esd\n      type: System.Security.SecurityElement\n      description: The XML encoding to use to reconstruct the permission.\n  overload: System.Security.Permissions.RegistryPermission.FromXml*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>esd</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>esd</code> parameter is not a valid permission element.  \\n  \\n -or-  \\n  \\n The <code>esd</code> parameter's version number is not valid.\"\n  platform:\n  - net462\n- uid: System.Security.Permissions.RegistryPermission.GetPathList(System.Security.Permissions.RegistryPermissionAccess)\n  id: GetPathList(System.Security.Permissions.RegistryPermissionAccess)\n  parent: System.Security.Permissions.RegistryPermission\n  langs:\n  - csharp\n  name: GetPathList(RegistryPermissionAccess)\n  nameWithType: RegistryPermission.GetPathList(RegistryPermissionAccess)\n  fullName: System.Security.Permissions.RegistryPermission.GetPathList(RegistryPermissionAccess)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Gets paths for all registry variables with the specified <xref href=\"System.Security.Permissions.RegistryPermissionAccess\"></xref>.\n  remarks: \"Use this method to get the state of the current permission. You must call this method separately for each type of access.  \\n  \\n> [!NOTE]\\n>  The `access` parameter is limited to the values of <xref:System.Security.Permissions.RegistryPermissionAccess>, which represent single types of registry variable access. Those values are <xref:System.Security.Permissions.RegistryPermissionAccess>, <xref:System.Security.Permissions.RegistryPermissionAccess>, and <xref:System.Security.Permissions.RegistryPermissionAccess>. The values acceptable to `access` do not include <xref:System.Security.Permissions.RegistryPermissionAccess> and <xref:System.Security.Permissions.RegistryPermissionAccess>, which do not represent single types of registry variable access.\"\n  example:\n  - \"The following code example shows the use of the GetPathList method.  \\n  \\n [!code-vb[System.Security.Permissions.RegistryPermission#9](~/add/codesnippet/visualbasic/2854e98a-b1b4-43c0-ac49-_1.vb)]\\n [!code-cs[System.Security.Permissions.RegistryPermission#9](~/add/codesnippet/csharp/2854e98a-b1b4-43c0-ac49-_1.cs)]\"\n  syntax:\n    content: public string GetPathList (System.Security.Permissions.RegistryPermissionAccess access);\n    parameters:\n    - id: access\n      type: System.Security.Permissions.RegistryPermissionAccess\n      description: One of the <xref href=\"System.Security.Permissions.RegistryPermissionAccess\"></xref> values that represents a single type of registry variable access.\n    return:\n      type: System.String\n      description: A list of the registry variables (semicolon-separated) with the specified <xref href=\"System.Security.Permissions.RegistryPermissionAccess\"></xref>.\n  overload: System.Security.Permissions.RegistryPermission.GetPathList*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>access</code> is not a valid value of <xref href=\\\"System.Security.Permissions.RegistryPermissionAccess\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>access</code> is <xref href=\\\"System.Security.Permissions.RegistryPermissionAccess\\\"></xref>, which represents more than one type of registry variable access, or <xref href=\\\"System.Security.Permissions.RegistryPermissionAccess\\\"></xref>, which does not represent any type of registry variable access.\"\n  platform:\n  - net462\n- uid: System.Security.Permissions.RegistryPermission.Intersect(System.Security.IPermission)\n  id: Intersect(System.Security.IPermission)\n  parent: System.Security.Permissions.RegistryPermission\n  langs:\n  - csharp\n  name: Intersect(IPermission)\n  nameWithType: RegistryPermission.Intersect(IPermission)\n  fullName: System.Security.Permissions.RegistryPermission.Intersect(IPermission)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Creates and returns a permission that is the intersection of the current permission and the specified permission.\n  remarks: The intersection of two permissions is a permission that describes the set of operations they both describe in common. Only a demand that passes both original permissions will pass the intersection.\n  syntax:\n    content: public override System.Security.IPermission Intersect (System.Security.IPermission target);\n    parameters:\n    - id: target\n      type: System.Security.IPermission\n      description: A permission to intersect with the current permission. It must be of the same type as the current permission.\n    return:\n      type: System.Security.IPermission\n      description: A new permission that represents the intersection of the current permission and the specified permission. This new permission is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the intersection is empty.\n  overload: System.Security.Permissions.RegistryPermission.Intersect*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>target</code> parameter is not <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> and is not of the same type as the current permission.\n  platform:\n  - net462\n- uid: System.Security.Permissions.RegistryPermission.IsSubsetOf(System.Security.IPermission)\n  id: IsSubsetOf(System.Security.IPermission)\n  parent: System.Security.Permissions.RegistryPermission\n  langs:\n  - csharp\n  name: IsSubsetOf(IPermission)\n  nameWithType: RegistryPermission.IsSubsetOf(IPermission)\n  fullName: System.Security.Permissions.RegistryPermission.IsSubsetOf(IPermission)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Determines whether the current permission is a subset of the specified permission.\n  remarks: The current permission is a subset of the specified permission if the current permission specifies a set of operations that is wholly contained by the specified permission. For example, a permission that represents access to C:\\example.txt is a subset of a permission that represents access to C:\\\\. If this method returns `true`, the current permission represents no more access to the protected resource than does the specified permission.\n  syntax:\n    content: public override bool IsSubsetOf (System.Security.IPermission target);\n    parameters:\n    - id: target\n      type: System.Security.IPermission\n      description: A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current permission is a subset of the specified permission; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Permissions.RegistryPermission.IsSubsetOf*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>target</code> parameter is not <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> and is not of the same type as the current permission.\n  platform:\n  - net462\n- uid: System.Security.Permissions.RegistryPermission.IsUnrestricted\n  id: IsUnrestricted\n  parent: System.Security.Permissions.RegistryPermission\n  langs:\n  - csharp\n  name: IsUnrestricted()\n  nameWithType: RegistryPermission.IsUnrestricted()\n  fullName: System.Security.Permissions.RegistryPermission.IsUnrestricted()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Returns a value indicating whether the current permission is unrestricted.\n  remarks: An unrestricted permission represents access to any and all resources protected by the permission.\n  syntax:\n    content: public bool IsUnrestricted ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current permission is unrestricted; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Permissions.RegistryPermission.IsUnrestricted*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Permissions.RegistryPermission.SetPathList(System.Security.Permissions.RegistryPermissionAccess,System.String)\n  id: SetPathList(System.Security.Permissions.RegistryPermissionAccess,System.String)\n  parent: System.Security.Permissions.RegistryPermission\n  langs:\n  - csharp\n  name: SetPathList(RegistryPermissionAccess,String)\n  nameWithType: RegistryPermission.SetPathList(RegistryPermissionAccess,String)\n  fullName: System.Security.Permissions.RegistryPermission.SetPathList(RegistryPermissionAccess,String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Sets new access for the specified registry variable names to the existing state of the permission.\n  remarks: The previous state of the current permission is overwritten.\n  example:\n  - \"The following code example shows the use of the SetPathList method.  \\n  \\n [!code-vb[System.Security.Permissions.RegistryPermission#9](~/add/codesnippet/visualbasic/8dc9769e-4e08-4ebe-9109-_1.vb)]\\n [!code-cs[System.Security.Permissions.RegistryPermission#9](~/add/codesnippet/csharp/8dc9769e-4e08-4ebe-9109-_1.cs)]\"\n  syntax:\n    content: public void SetPathList (System.Security.Permissions.RegistryPermissionAccess access, string pathList);\n    parameters:\n    - id: access\n      type: System.Security.Permissions.RegistryPermissionAccess\n      description: One of the <xref href=\"System.Security.Permissions.RegistryPermissionAccess\"></xref> values.\n    - id: pathList\n      type: System.String\n      description: A list of registry variables (semicolon-separated).\n  overload: System.Security.Permissions.RegistryPermission.SetPathList*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>access</code> parameter is not a valid value of <xref href=\\\"System.Security.Permissions.RegistryPermissionAccess\\\"></xref>.  \\n  \\n -or-  \\n  \\n The <code>pathList</code> parameter is not a valid string.\"\n  platform:\n  - net462\n- uid: System.Security.Permissions.RegistryPermission.ToXml\n  id: ToXml\n  parent: System.Security.Permissions.RegistryPermission\n  langs:\n  - csharp\n  name: ToXml()\n  nameWithType: RegistryPermission.ToXml()\n  fullName: System.Security.Permissions.RegistryPermission.ToXml()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Creates an XML encoding of the permission and its current state.\n  syntax:\n    content: public override System.Security.SecurityElement ToXml ();\n    parameters: []\n    return:\n      type: System.Security.SecurityElement\n      description: An XML encoding of the permission, including any state information.\n  overload: System.Security.Permissions.RegistryPermission.ToXml*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Permissions.RegistryPermission.Union(System.Security.IPermission)\n  id: Union(System.Security.IPermission)\n  parent: System.Security.Permissions.RegistryPermission\n  langs:\n  - csharp\n  name: Union(IPermission)\n  nameWithType: RegistryPermission.Union(IPermission)\n  fullName: System.Security.Permissions.RegistryPermission.Union(IPermission)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Creates a permission that is the union of the current permission and the specified permission.\n  remarks: The result of a call to Union is a permission that represents all the operations represented by both the current permission and the specified permission. Any demand that passes either permission passes their union.\n  syntax:\n    content: public override System.Security.IPermission Union (System.Security.IPermission other);\n    parameters:\n    - id: other\n      type: System.Security.IPermission\n      description: A permission to combine with the current permission. It must be of the same type as the current permission.\n    return:\n      type: System.Security.IPermission\n      description: A new permission that represents the union of the current permission and the specified permission.\n  overload: System.Security.Permissions.RegistryPermission.Union*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>other</code> parameter is not <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> and is not of the same type as the current permission.\n  platform:\n  - net462\nreferences:\n- uid: System.Security.CodeAccessPermission\n  isExternal: false\n  name: System.Security.CodeAccessPermission\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.Security.Permissions.RegistryPermission.#ctor(System.Security.Permissions.PermissionState)\n  parent: System.Security.Permissions.RegistryPermission\n  isExternal: false\n  name: RegistryPermission(PermissionState)\n  nameWithType: RegistryPermission.RegistryPermission(PermissionState)\n  fullName: System.Security.Permissions.RegistryPermission.RegistryPermission(PermissionState)\n- uid: System.Security.Permissions.PermissionState\n  parent: System.Security.Permissions\n  isExternal: false\n  name: PermissionState\n  nameWithType: PermissionState\n  fullName: System.Security.Permissions.PermissionState\n- uid: System.Security.Permissions.RegistryPermission.#ctor(System.Security.Permissions.RegistryPermissionAccess,System.String)\n  parent: System.Security.Permissions.RegistryPermission\n  isExternal: false\n  name: RegistryPermission(RegistryPermissionAccess,String)\n  nameWithType: RegistryPermission.RegistryPermission(RegistryPermissionAccess,String)\n  fullName: System.Security.Permissions.RegistryPermission.RegistryPermission(RegistryPermissionAccess,String)\n- uid: System.Security.Permissions.RegistryPermissionAccess\n  parent: System.Security.Permissions\n  isExternal: false\n  name: RegistryPermissionAccess\n  nameWithType: RegistryPermissionAccess\n  fullName: System.Security.Permissions.RegistryPermissionAccess\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Permissions.RegistryPermission.#ctor(System.Security.Permissions.RegistryPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String)\n  parent: System.Security.Permissions.RegistryPermission\n  isExternal: false\n  name: RegistryPermission(RegistryPermissionAccess,AccessControlActions,String)\n  nameWithType: RegistryPermission.RegistryPermission(RegistryPermissionAccess,AccessControlActions,String)\n  fullName: System.Security.Permissions.RegistryPermission.RegistryPermission(RegistryPermissionAccess,AccessControlActions,String)\n- uid: System.Security.AccessControl.AccessControlActions\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AccessControlActions\n  nameWithType: AccessControlActions\n  fullName: System.Security.AccessControl.AccessControlActions\n- uid: System.Security.Permissions.RegistryPermission.AddPathList(System.Security.Permissions.RegistryPermissionAccess,System.String)\n  parent: System.Security.Permissions.RegistryPermission\n  isExternal: false\n  name: AddPathList(RegistryPermissionAccess,String)\n  nameWithType: RegistryPermission.AddPathList(RegistryPermissionAccess,String)\n  fullName: System.Security.Permissions.RegistryPermission.AddPathList(RegistryPermissionAccess,String)\n- uid: System.Security.Permissions.RegistryPermission.AddPathList(System.Security.Permissions.RegistryPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String)\n  parent: System.Security.Permissions.RegistryPermission\n  isExternal: false\n  name: AddPathList(RegistryPermissionAccess,AccessControlActions,String)\n  nameWithType: RegistryPermission.AddPathList(RegistryPermissionAccess,AccessControlActions,String)\n  fullName: System.Security.Permissions.RegistryPermission.AddPathList(RegistryPermissionAccess,AccessControlActions,String)\n- uid: System.Security.Permissions.RegistryPermission.Copy\n  parent: System.Security.Permissions.RegistryPermission\n  isExternal: false\n  name: Copy()\n  nameWithType: RegistryPermission.Copy()\n  fullName: System.Security.Permissions.RegistryPermission.Copy()\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n- uid: System.Security.Permissions.RegistryPermission.FromXml(System.Security.SecurityElement)\n  parent: System.Security.Permissions.RegistryPermission\n  isExternal: false\n  name: FromXml(SecurityElement)\n  nameWithType: RegistryPermission.FromXml(SecurityElement)\n  fullName: System.Security.Permissions.RegistryPermission.FromXml(SecurityElement)\n- uid: System.Security.SecurityElement\n  parent: System.Security\n  isExternal: false\n  name: SecurityElement\n  nameWithType: SecurityElement\n  fullName: System.Security.SecurityElement\n- uid: System.Security.Permissions.RegistryPermission.GetPathList(System.Security.Permissions.RegistryPermissionAccess)\n  parent: System.Security.Permissions.RegistryPermission\n  isExternal: false\n  name: GetPathList(RegistryPermissionAccess)\n  nameWithType: RegistryPermission.GetPathList(RegistryPermissionAccess)\n  fullName: System.Security.Permissions.RegistryPermission.GetPathList(RegistryPermissionAccess)\n- uid: System.Security.Permissions.RegistryPermission.Intersect(System.Security.IPermission)\n  parent: System.Security.Permissions.RegistryPermission\n  isExternal: false\n  name: Intersect(IPermission)\n  nameWithType: RegistryPermission.Intersect(IPermission)\n  fullName: System.Security.Permissions.RegistryPermission.Intersect(IPermission)\n- uid: System.Security.Permissions.RegistryPermission.IsSubsetOf(System.Security.IPermission)\n  parent: System.Security.Permissions.RegistryPermission\n  isExternal: false\n  name: IsSubsetOf(IPermission)\n  nameWithType: RegistryPermission.IsSubsetOf(IPermission)\n  fullName: System.Security.Permissions.RegistryPermission.IsSubsetOf(IPermission)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Permissions.RegistryPermission.IsUnrestricted\n  parent: System.Security.Permissions.RegistryPermission\n  isExternal: false\n  name: IsUnrestricted()\n  nameWithType: RegistryPermission.IsUnrestricted()\n  fullName: System.Security.Permissions.RegistryPermission.IsUnrestricted()\n- uid: System.Security.Permissions.RegistryPermission.SetPathList(System.Security.Permissions.RegistryPermissionAccess,System.String)\n  parent: System.Security.Permissions.RegistryPermission\n  isExternal: false\n  name: SetPathList(RegistryPermissionAccess,String)\n  nameWithType: RegistryPermission.SetPathList(RegistryPermissionAccess,String)\n  fullName: System.Security.Permissions.RegistryPermission.SetPathList(RegistryPermissionAccess,String)\n- uid: System.Security.Permissions.RegistryPermission.ToXml\n  parent: System.Security.Permissions.RegistryPermission\n  isExternal: false\n  name: ToXml()\n  nameWithType: RegistryPermission.ToXml()\n  fullName: System.Security.Permissions.RegistryPermission.ToXml()\n- uid: System.Security.Permissions.RegistryPermission.Union(System.Security.IPermission)\n  parent: System.Security.Permissions.RegistryPermission\n  isExternal: false\n  name: Union(IPermission)\n  nameWithType: RegistryPermission.Union(IPermission)\n  fullName: System.Security.Permissions.RegistryPermission.Union(IPermission)\n- uid: System.Security.Permissions.RegistryPermission.#ctor*\n  parent: System.Security.Permissions.RegistryPermission\n  isExternal: false\n  name: RegistryPermission\n  nameWithType: RegistryPermission.RegistryPermission\n- uid: System.Security.Permissions.RegistryPermission.AddPathList*\n  parent: System.Security.Permissions.RegistryPermission\n  isExternal: false\n  name: AddPathList\n  nameWithType: RegistryPermission.AddPathList\n- uid: System.Security.Permissions.RegistryPermission.Copy*\n  parent: System.Security.Permissions.RegistryPermission\n  isExternal: false\n  name: Copy\n  nameWithType: RegistryPermission.Copy\n- uid: System.Security.Permissions.RegistryPermission.FromXml*\n  parent: System.Security.Permissions.RegistryPermission\n  isExternal: false\n  name: FromXml\n  nameWithType: RegistryPermission.FromXml\n- uid: System.Security.Permissions.RegistryPermission.GetPathList*\n  parent: System.Security.Permissions.RegistryPermission\n  isExternal: false\n  name: GetPathList\n  nameWithType: RegistryPermission.GetPathList\n- uid: System.Security.Permissions.RegistryPermission.Intersect*\n  parent: System.Security.Permissions.RegistryPermission\n  isExternal: false\n  name: Intersect\n  nameWithType: RegistryPermission.Intersect\n- uid: System.Security.Permissions.RegistryPermission.IsSubsetOf*\n  parent: System.Security.Permissions.RegistryPermission\n  isExternal: false\n  name: IsSubsetOf\n  nameWithType: RegistryPermission.IsSubsetOf\n- uid: System.Security.Permissions.RegistryPermission.IsUnrestricted*\n  parent: System.Security.Permissions.RegistryPermission\n  isExternal: false\n  name: IsUnrestricted\n  nameWithType: RegistryPermission.IsUnrestricted\n- uid: System.Security.Permissions.RegistryPermission.SetPathList*\n  parent: System.Security.Permissions.RegistryPermission\n  isExternal: false\n  name: SetPathList\n  nameWithType: RegistryPermission.SetPathList\n- uid: System.Security.Permissions.RegistryPermission.ToXml*\n  parent: System.Security.Permissions.RegistryPermission\n  isExternal: false\n  name: ToXml\n  nameWithType: RegistryPermission.ToXml\n- uid: System.Security.Permissions.RegistryPermission.Union*\n  parent: System.Security.Permissions.RegistryPermission\n  isExternal: false\n  name: Union\n  nameWithType: RegistryPermission.Union\n"}