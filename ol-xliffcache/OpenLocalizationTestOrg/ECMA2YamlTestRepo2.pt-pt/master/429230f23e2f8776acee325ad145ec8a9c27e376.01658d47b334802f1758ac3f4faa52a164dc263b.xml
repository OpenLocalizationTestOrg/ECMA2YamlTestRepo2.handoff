{"nodes":[{"pos":[1317,1714],"content":"Represents the exception class for parser-specific exceptions from a WPF XAML parser. This exception is used in XAML API or WPF XAML parser operations from [!INCLUDE[net_v30_short](~/add/includes/net-v30-short-md.md)] and [!INCLUDE[net_v35_short](~/add/includes/net-v35-short-md.md)], or for specific use of the WPF XAML parser by calling <xref href=\"System.Windows.Markup.XamlReader\"></xref> API.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the exception class for parser-specific exceptions from a WPF XAML parser.","pos":[0,85]},{"content":"This exception is used in XAML API or WPF XAML parser operations from <ph id=\"ph1\">[!INCLUDE[net_v30_short](~/add/includes/net-v30-short-md.md)]</ph> and <ph id=\"ph2\">[!INCLUDE[net_v35_short](~/add/includes/net-v35-short-md.md)]</ph>, or for specific use of the WPF XAML parser by calling <bpt id=\"p1\">&lt;xref href=\"System.Windows.Markup.XamlReader\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> API.","pos":[86,397],"source":" This exception is used in XAML API or WPF XAML parser operations from [!INCLUDE[net_v30_short](~/add/includes/net-v30-short-md.md)] and [!INCLUDE[net_v35_short](~/add/includes/net-v35-short-md.md)], or for specific use of the WPF XAML parser by calling <xref href=\"System.Windows.Markup.XamlReader\"></xref> API."}]},{"pos":[1727,4154],"content":"XamlParseException is used only for the WPF-implemented XAML parser that performs the XAML parsing and loading for WPF applications. Specifically, the exception is only relevant when an application targets [!INCLUDE[net_v30_short](~/add/includes/net-v30-short-md.md)] and [!INCLUDE[net_v35_short](~/add/includes/net-v35-short-md.md)]. The exception can also originate from user code in run-time calls to APIs that hook up the WPF-implemented XAML parser to load XAML from within a running WPF application (for example, calls to <xref:System.Windows.Markup.XamlReader.Load%2A?displayProperty=fullName>).       For [!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)], the <xref:System.Xaml.XamlParseException> exception that typically reports XAML processing exceptions is defined in a different namespace (<xref:System.Xaml>) and a different assembly (System.Xaml).       Unless you are writing an equivalent to the WPF XAML parser or working with [!INCLUDE[net_v30_short](~/add/includes/net-v30-short-md.md)] and [!INCLUDE[net_v35_short](~/add/includes/net-v35-short-md.md)] targeting, you generally will not throw XamlParseException from your own code. However, handling for the exception is sometimes necessary. For application scenarios, where you may want to suppress XAML parse errors, a <xref:System.Windows.Threading.Dispatcher> <xref:System.Windows.Threading.Dispatcher.UnhandledException> event handler at the application level is one way to handle a run-time XamlParseException. Whether to suppress exceptions or let them surface to user code depends on how you design your application for purposes of loading XAML, and the trust level that you assign to the XAML your application loads. For more information, see [XAML Security Considerations](~/add/includes/ajax-current-ext-md.md) or \"XAML Security\" section of [XAML Overview (WPF)](~/add/includes/ajax-current-ext-md.md).       For pages of an application, when the XamlParseException is thrown, it is usually in the context of the `InitializeComponent` call made by your page class, which is the entry point for the WPF application model's usage of the WPF XAML parser at the per-page level. Therefore another possible handling strategy is to place `try/catch` blocks in `InitializeComponent`. However, this technique does not integrate well with templates, visual design surfaces and other generated sources that hook up `InitializeComponent`.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"XamlParseException is used only for the WPF-implemented XAML parser that performs the XAML parsing and loading for WPF applications.","pos":[0,132]},{"content":"Specifically, the exception is only relevant when an application targets <ph id=\"ph1\">[!INCLUDE[net_v30_short](~/add/includes/net-v30-short-md.md)]</ph> and <ph id=\"ph2\">[!INCLUDE[net_v35_short](~/add/includes/net-v35-short-md.md)]</ph>.","pos":[133,334],"source":" Specifically, the exception is only relevant when an application targets [!INCLUDE[net_v30_short](~/add/includes/net-v30-short-md.md)] and [!INCLUDE[net_v35_short](~/add/includes/net-v35-short-md.md)]."},{"content":"The exception can also originate from user code in run-time calls to APIs that hook up the WPF-implemented XAML parser to load XAML from within a running WPF application (for example, calls to &lt;xref:System.Windows.Markup.XamlReader.Load%2A?displayProperty=fullName&gt;).","pos":[335,602],"source":" The exception can also originate from user code in run-time calls to APIs that hook up the WPF-implemented XAML parser to load XAML from within a running WPF application (for example, calls to <xref:System.Windows.Markup.XamlReader.Load%2A?displayProperty=fullName>)."},{"content":"For <ph id=\"ph1\">[!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)]</ph>, the &lt;xref:System.Xaml.XamlParseException&gt; exception that typically reports XAML processing exceptions is defined in a different namespace (&lt;xref:System.Xaml&gt;) and a different assembly (System.Xaml).","pos":[609,874],"source":"       For [!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)], the <xref:System.Xaml.XamlParseException> exception that typically reports XAML processing exceptions is defined in a different namespace (<xref:System.Xaml>) and a different assembly (System.Xaml)."},{"content":"Unless you are writing an equivalent to the WPF XAML parser or working with <ph id=\"ph1\">[!INCLUDE[net_v30_short](~/add/includes/net-v30-short-md.md)]</ph> and <ph id=\"ph2\">[!INCLUDE[net_v35_short](~/add/includes/net-v35-short-md.md)]</ph> targeting, you generally will not throw XamlParseException from your own code.","pos":[881,1163],"source":"       Unless you are writing an equivalent to the WPF XAML parser or working with [!INCLUDE[net_v30_short](~/add/includes/net-v30-short-md.md)] and [!INCLUDE[net_v35_short](~/add/includes/net-v35-short-md.md)] targeting, you generally will not throw XamlParseException from your own code."},{"content":"However, handling for the exception is sometimes necessary.","pos":[1164,1223]},{"content":"For application scenarios, where you may want to suppress XAML parse errors, a &lt;xref:System.Windows.Threading.Dispatcher&gt; &lt;xref:System.Windows.Threading.Dispatcher.UnhandledException&gt; event handler at the application level is one way to handle a run-time XamlParseException.","pos":[1224,1498],"source":" For application scenarios, where you may want to suppress XAML parse errors, a <xref:System.Windows.Threading.Dispatcher> <xref:System.Windows.Threading.Dispatcher.UnhandledException> event handler at the application level is one way to handle a run-time XamlParseException."},{"content":"Whether to suppress exceptions or let them surface to user code depends on how you design your application for purposes of loading XAML, and the trust level that you assign to the XAML your application loads.","pos":[1499,1707]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>XAML Security Considerations<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> or \"XAML Security\" section of <bpt id=\"p2\">[</bpt>XAML Overview (WPF)<ept id=\"p2\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1708,1895],"source":" For more information, see [XAML Security Considerations](~/add/includes/ajax-current-ext-md.md) or \"XAML Security\" section of [XAML Overview (WPF)](~/add/includes/ajax-current-ext-md.md)."},{"content":"For pages of an application, when the XamlParseException is thrown, it is usually in the context of the <ph id=\"ph1\">`InitializeComponent`</ph> call made by your page class, which is the entry point for the WPF application model's usage of the WPF XAML parser at the per-page level.","pos":[1902,2166],"source":"       For pages of an application, when the XamlParseException is thrown, it is usually in the context of the `InitializeComponent` call made by your page class, which is the entry point for the WPF application model's usage of the WPF XAML parser at the per-page level."},{"content":"Therefore another possible handling strategy is to place <ph id=\"ph1\">`try/catch`</ph> blocks in <ph id=\"ph2\">`InitializeComponent`</ph>.","pos":[2167,2268],"source":" Therefore another possible handling strategy is to place `try/catch` blocks in `InitializeComponent`."},{"content":"However, this technique does not integrate well with templates, visual design surfaces and other generated sources that hook up <ph id=\"ph1\">`InitializeComponent`</ph>.","pos":[2269,2419],"source":" However, this technique does not integrate well with templates, visual design surfaces and other generated sources that hook up `InitializeComponent`."}]},{"pos":[4761,4863],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Markup.XamlParseException\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Windows.Markup.XamlParseException\"></xref> class."},{"pos":[5488,5636],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Markup.XamlParseException\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class, using the specified exception message string.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Windows.Markup.XamlParseException\"></xref> class, using the specified exception message string."},{"pos":[5783,5805],"content":"The exception message.","needQuote":true,"needEscape":true,"nodes":[{"content":"The exception message.","pos":[0,22]}]},{"pos":[6600,6702],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Markup.XamlParseException\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Windows.Markup.XamlParseException\"></xref> class."},{"pos":[6714,6848],"content":"This constructor is used for serialization when marshaling an exception of this type across an application domain or machine boundary.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This constructor is used for serialization when marshaling an exception of this type across an application domain or machine boundary.","pos":[0,134]}]},{"pos":[7120,7205],"content":"Contains all the information that is required to serialize or deserialize the object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Contains all the information that is required to serialize or deserialize the object.","pos":[0,85]}]},{"pos":[7301,7351],"content":"The source and destination of a serialized stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"The source and destination of a serialized stream.","pos":[0,50]}]},{"pos":[7968,8136],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Markup.XamlParseException\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class, using the specified exception message string and inner exception.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Windows.Markup.XamlParseException\"></xref> class, using the specified exception message string and inner exception."},{"pos":[8148,8517],"content":"An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception. The <xref:System.Exception.InnerException%2A> property returns the same value that is passed into the constructor, or `null` if the <xref:System.Exception.InnerException%2A> property does not supply the inner exception value to the constructor.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception.","pos":[0,124]},{"content":"The &lt;xref:System.Exception.InnerException%2A&gt; property returns the same value that is passed into the constructor, or <ph id=\"ph1\">`null`</ph> if the &lt;xref:System.Exception.InnerException%2A&gt; property does not supply the inner exception value to the constructor.","pos":[125,369],"source":" The <xref:System.Exception.InnerException%2A> property returns the same value that is passed into the constructor, or `null` if the <xref:System.Exception.InnerException%2A> property does not supply the inner exception value to the constructor."}]},{"pos":[8690,8712],"content":"The exception message.","needQuote":true,"needEscape":true,"nodes":[{"content":"The exception message.","pos":[0,22]}]},{"pos":[8786,8822],"content":"The initial exception that occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"The initial exception that occurred.","pos":[0,36]}]},{"pos":[9463,9667],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Markup.XamlParseException\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class, using the specified exception message string, and the specified line number and position in the line.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Windows.Markup.XamlParseException\"></xref> class, using the specified exception message string, and the specified line number and position in the line."},{"pos":[9848,9870],"content":"The exception message.","needQuote":true,"needEscape":true,"nodes":[{"content":"The exception message.","pos":[0,22]}]},{"pos":[9936,9981],"content":"The line number where the exception occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"The line number where the exception occurred.","pos":[0,45]}]},{"pos":[10049,10106],"content":"The position in the line at which the exception occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"The position in the line at which the exception occurred.","pos":[0,57]}]},{"pos":[10811,11008],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Markup.XamlParseException\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class, using the specified exception message, inner exception, line number, and position in the line.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Windows.Markup.XamlParseException\"></xref> class, using the specified exception message, inner exception, line number, and position in the line."},{"pos":[11020,11389],"content":"An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception. The <xref:System.Exception.InnerException%2A> property returns the same value that is passed into the constructor, or `null` if the <xref:System.Exception.InnerException%2A> property does not supply the inner exception value to the constructor.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception.","pos":[0,124]},{"content":"The &lt;xref:System.Exception.InnerException%2A&gt; property returns the same value that is passed into the constructor, or <ph id=\"ph1\">`null`</ph> if the &lt;xref:System.Exception.InnerException%2A&gt; property does not supply the inner exception value to the constructor.","pos":[125,369],"source":" The <xref:System.Exception.InnerException%2A> property returns the same value that is passed into the constructor, or `null` if the <xref:System.Exception.InnerException%2A> property does not supply the inner exception value to the constructor."}]},{"pos":[11596,11618],"content":"The exception message.","needQuote":true,"needEscape":true,"nodes":[{"content":"The exception message.","pos":[0,22]}]},{"pos":[11684,11729],"content":"The line number where the exception occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"The line number where the exception occurred.","pos":[0,45]}]},{"pos":[11797,11854],"content":"The position in the line at which the exception occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"The position in the line at which the exception occurred.","pos":[0,57]}]},{"pos":[11928,11964],"content":"The initial exception that occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"The initial exception that occurred.","pos":[0,36]}]},{"pos":[12429,12484],"content":"Gets base URI information when the exception is thrown.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets base URI information when the exception is thrown.","pos":[0,55]}]},{"pos":[12496,12698],"content":"Base URI is potentially available because of parser context when the exception occurred. Knowing the base URI can be useful for debugging cases where a resource resolution error is the underlying cause.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Base URI is potentially available because of parser context when the exception occurred. Knowing the base URI can be useful for debugging cases where a resource resolution error is the underlying cause.","pos":[0,202],"nodes":[{"content":"Base URI is potentially available because of parser context when the exception occurred.","pos":[0,88]},{"content":"Knowing the base URI can be useful for debugging cases where a resource resolution error is the underlying cause.","pos":[89,202]}]}]},{"pos":[12804,12832],"content":"The parser context base URI.","needQuote":true,"needEscape":true,"nodes":[{"content":"The parser context base URI.","pos":[0,28]}]},{"pos":[13623,13791],"content":"Gets the data that is required to serialize the specified object by populating the specified <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Serialization.SerializationInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Gets the data that is required to serialize the specified object by populating the specified <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object."},{"pos":[13803,14094],"content":"GetObjectData sets a <xref:System.Runtime.Serialization.SerializationInfo> object with all the exception object data targeted for serialization. During deserialization, the exception is reconstituted from the <xref:System.Runtime.Serialization.SerializationInfo> transmitted over the stream.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"GetObjectData sets a <xref:System.Runtime.Serialization.SerializationInfo> object with all the exception object data targeted for serialization. During deserialization, the exception is reconstituted from the <xref:System.Runtime.Serialization.SerializationInfo> transmitted over the stream.","pos":[0,291],"nodes":[{"content":"GetObjectData sets a &lt;xref:System.Runtime.Serialization.SerializationInfo&gt; object with all the exception object data targeted for serialization.","pos":[0,144],"source":"GetObjectData sets a <xref:System.Runtime.Serialization.SerializationInfo> object with all the exception object data targeted for serialization."},{"content":"During deserialization, the exception is reconstituted from the &lt;xref:System.Runtime.Serialization.SerializationInfo&gt; transmitted over the stream.","pos":[145,291],"source":" During deserialization, the exception is reconstituted from the <xref:System.Runtime.Serialization.SerializationInfo> transmitted over the stream."}]}]},{"pos":[14372,14442],"content":"The serialization information object to add the serialization data to.","needQuote":true,"needEscape":true,"nodes":[{"content":"The serialization information object to add the serialization data to.","pos":[0,70]}]},{"pos":[14538,14577],"content":"The destination for this serialization.","needQuote":true,"needEscape":true,"nodes":[{"content":"The destination for this serialization.","pos":[0,39]}]},{"pos":[15065,15149],"content":"Gets or sets the key value of the item in a dictionary where the exception occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the key value of the item in a dictionary where the exception occurred.","pos":[0,84]}]},{"pos":[15264,15351],"content":"The relevant XAML <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_x:Key\" name=\"x:Key\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value.","needQuote":true,"needEscape":true,"source":"The relevant XAML <xref uid=\"langword_csharp_x:Key\" name=\"x:Key\" href=\"\"></xref> value."},{"pos":[15836,15886],"content":"Gets the line number where the exception occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the line number where the exception occurred.","pos":[0,50]}]},{"pos":[15997,16013],"content":"The line number.","needQuote":true,"needEscape":true,"nodes":[{"content":"The line number.","pos":[0,16]}]},{"pos":[16508,16567],"content":"Gets the position in the line where the exception occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the position in the line where the exception occurred.","pos":[0,59]}]},{"pos":[16680,16698],"content":"The line position.","needQuote":true,"needEscape":true,"nodes":[{"content":"The line position.","pos":[0,18]}]},{"pos":[17190,17260],"content":"Gets or sets the XAML name of the object where the exception occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the XAML name of the object where the exception occurred.","pos":[0,70]}]},{"pos":[17376,17404],"content":"The XAML name of the object.","needQuote":true,"needEscape":true,"nodes":[{"content":"The XAML name of the object.","pos":[0,28]}]},{"pos":[17890,18007],"content":"Gets or sets the <bpt id=\"p1\">[</bpt>x:Uid Directive<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> of the object where the exception occurred.","needQuote":true,"needEscape":true,"source":"Gets or sets the [x:Uid Directive](~/add/includes/ajax-current-ext-md.md) of the object where the exception occurred."},{"pos":[18122,18205],"content":"The value of the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Uid\" name=\"Uid\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> string.","needQuote":true,"needEscape":true,"source":"The value of the <xref uid=\"langword_csharp_Uid\" name=\"Uid\" href=\"\"></xref> string."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Markup.XamlParseException\n  id: XamlParseException\n  children:\n  - System.Windows.Markup.XamlParseException.#ctor\n  - System.Windows.Markup.XamlParseException.#ctor(System.String)\n  - System.Windows.Markup.XamlParseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  - System.Windows.Markup.XamlParseException.#ctor(System.String,System.Exception)\n  - System.Windows.Markup.XamlParseException.#ctor(System.String,System.Int32,System.Int32)\n  - System.Windows.Markup.XamlParseException.#ctor(System.String,System.Int32,System.Int32,System.Exception)\n  - System.Windows.Markup.XamlParseException.BaseUri\n  - System.Windows.Markup.XamlParseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  - System.Windows.Markup.XamlParseException.KeyContext\n  - System.Windows.Markup.XamlParseException.LineNumber\n  - System.Windows.Markup.XamlParseException.LinePosition\n  - System.Windows.Markup.XamlParseException.NameContext\n  - System.Windows.Markup.XamlParseException.UidContext\n  langs:\n  - csharp\n  name: XamlParseException\n  nameWithType: XamlParseException\n  fullName: System.Windows.Markup.XamlParseException\n  type: Class\n  summary: Represents the exception class for parser-specific exceptions from a WPF XAML parser. This exception is used in XAML API or WPF XAML parser operations from [!INCLUDE[net_v30_short](~/add/includes/net-v30-short-md.md)] and [!INCLUDE[net_v35_short](~/add/includes/net-v35-short-md.md)], or for specific use of the WPF XAML parser by calling <xref href=\"System.Windows.Markup.XamlReader\"></xref> API.\n  remarks: \"XamlParseException is used only for the WPF-implemented XAML parser that performs the XAML parsing and loading for WPF applications. Specifically, the exception is only relevant when an application targets [!INCLUDE[net_v30_short](~/add/includes/net-v30-short-md.md)] and [!INCLUDE[net_v35_short](~/add/includes/net-v35-short-md.md)]. The exception can also originate from user code in run-time calls to APIs that hook up the WPF-implemented XAML parser to load XAML from within a running WPF application (for example, calls to <xref:System.Windows.Markup.XamlReader.Load%2A?displayProperty=fullName>).  \\n  \\n For [!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)], the <xref:System.Xaml.XamlParseException> exception that typically reports XAML processing exceptions is defined in a different namespace (<xref:System.Xaml>) and a different assembly (System.Xaml).  \\n  \\n Unless you are writing an equivalent to the WPF XAML parser or working with [!INCLUDE[net_v30_short](~/add/includes/net-v30-short-md.md)] and [!INCLUDE[net_v35_short](~/add/includes/net-v35-short-md.md)] targeting, you generally will not throw XamlParseException from your own code. However, handling for the exception is sometimes necessary. For application scenarios, where you may want to suppress XAML parse errors, a <xref:System.Windows.Threading.Dispatcher> <xref:System.Windows.Threading.Dispatcher.UnhandledException> event handler at the application level is one way to handle a run-time XamlParseException. Whether to suppress exceptions or let them surface to user code depends on how you design your application for purposes of loading XAML, and the trust level that you assign to the XAML your application loads. For more information, see [XAML Security Considerations](~/add/includes/ajax-current-ext-md.md) or \\\"XAML Security\\\" section of [XAML Overview (WPF)](~/add/includes/ajax-current-ext-md.md).  \\n  \\n For pages of an application, when the XamlParseException is thrown, it is usually in the context of the `InitializeComponent` call made by your page class, which is the entry point for the WPF application model's usage of the WPF XAML parser at the per-page level. Therefore another possible handling strategy is to place `try/catch` blocks in `InitializeComponent`. However, this technique does not integrate well with templates, visual design surfaces and other generated sources that hook up `InitializeComponent`.\"\n  syntax:\n    content: 'public class XamlParseException : SystemException'\n  inheritance:\n  - System.Exception\n  - System.SystemException\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Windows.Markup.XamlParseException.#ctor\n  id: '#ctor'\n  parent: System.Windows.Markup.XamlParseException\n  langs:\n  - csharp\n  name: XamlParseException()\n  nameWithType: XamlParseException.XamlParseException()\n  fullName: System.Windows.Markup.XamlParseException.XamlParseException()\n  type: Constructor\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Markup\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Markup.XamlParseException\"></xref> class.\n  syntax:\n    content: public XamlParseException ();\n    parameters: []\n  overload: System.Windows.Markup.XamlParseException.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Markup.XamlParseException.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Windows.Markup.XamlParseException\n  langs:\n  - csharp\n  name: XamlParseException(String)\n  nameWithType: XamlParseException.XamlParseException(String)\n  fullName: System.Windows.Markup.XamlParseException.XamlParseException(String)\n  type: Constructor\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Markup\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Markup.XamlParseException\"></xref> class, using the specified exception message string.\n  syntax:\n    content: public XamlParseException (string message);\n    parameters:\n    - id: message\n      type: System.String\n      description: The exception message.\n  overload: System.Windows.Markup.XamlParseException.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Markup.XamlParseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'\n  parent: System.Windows.Markup.XamlParseException\n  langs:\n  - csharp\n  name: XamlParseException(SerializationInfo,StreamingContext)\n  nameWithType: XamlParseException.XamlParseException(SerializationInfo,StreamingContext)\n  fullName: System.Windows.Markup.XamlParseException.XamlParseException(SerializationInfo,StreamingContext)\n  type: Constructor\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Markup\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Markup.XamlParseException\"></xref> class.\n  remarks: This constructor is used for serialization when marshaling an exception of this type across an application domain or machine boundary.\n  syntax:\n    content: protected XamlParseException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);\n    parameters:\n    - id: info\n      type: System.Runtime.Serialization.SerializationInfo\n      description: Contains all the information that is required to serialize or deserialize the object.\n    - id: context\n      type: System.Runtime.Serialization.StreamingContext\n      description: The source and destination of a serialized stream.\n  overload: System.Windows.Markup.XamlParseException.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Markup.XamlParseException.#ctor(System.String,System.Exception)\n  id: '#ctor(System.String,System.Exception)'\n  parent: System.Windows.Markup.XamlParseException\n  langs:\n  - csharp\n  name: XamlParseException(String,Exception)\n  nameWithType: XamlParseException.XamlParseException(String,Exception)\n  fullName: System.Windows.Markup.XamlParseException.XamlParseException(String,Exception)\n  type: Constructor\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Markup\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Markup.XamlParseException\"></xref> class, using the specified exception message string and inner exception.\n  remarks: An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception. The <xref:System.Exception.InnerException%2A> property returns the same value that is passed into the constructor, or `null` if the <xref:System.Exception.InnerException%2A> property does not supply the inner exception value to the constructor.\n  syntax:\n    content: public XamlParseException (string message, Exception innerException);\n    parameters:\n    - id: message\n      type: System.String\n      description: The exception message.\n    - id: innerException\n      type: System.Exception\n      description: The initial exception that occurred.\n  overload: System.Windows.Markup.XamlParseException.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Markup.XamlParseException.#ctor(System.String,System.Int32,System.Int32)\n  id: '#ctor(System.String,System.Int32,System.Int32)'\n  parent: System.Windows.Markup.XamlParseException\n  langs:\n  - csharp\n  name: XamlParseException(String,Int32,Int32)\n  nameWithType: XamlParseException.XamlParseException(String,Int32,Int32)\n  fullName: System.Windows.Markup.XamlParseException.XamlParseException(String,Int32,Int32)\n  type: Constructor\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Markup\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Markup.XamlParseException\"></xref> class, using the specified exception message string, and the specified line number and position in the line.\n  syntax:\n    content: public XamlParseException (string message, int lineNumber, int linePosition);\n    parameters:\n    - id: message\n      type: System.String\n      description: The exception message.\n    - id: lineNumber\n      type: System.Int32\n      description: The line number where the exception occurred.\n    - id: linePosition\n      type: System.Int32\n      description: The position in the line at which the exception occurred.\n  overload: System.Windows.Markup.XamlParseException.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Markup.XamlParseException.#ctor(System.String,System.Int32,System.Int32,System.Exception)\n  id: '#ctor(System.String,System.Int32,System.Int32,System.Exception)'\n  parent: System.Windows.Markup.XamlParseException\n  langs:\n  - csharp\n  name: XamlParseException(String,Int32,Int32,Exception)\n  nameWithType: XamlParseException.XamlParseException(String,Int32,Int32,Exception)\n  fullName: System.Windows.Markup.XamlParseException.XamlParseException(String,Int32,Int32,Exception)\n  type: Constructor\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Markup\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Markup.XamlParseException\"></xref> class, using the specified exception message, inner exception, line number, and position in the line.\n  remarks: An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception. The <xref:System.Exception.InnerException%2A> property returns the same value that is passed into the constructor, or `null` if the <xref:System.Exception.InnerException%2A> property does not supply the inner exception value to the constructor.\n  syntax:\n    content: public XamlParseException (string message, int lineNumber, int linePosition, Exception innerException);\n    parameters:\n    - id: message\n      type: System.String\n      description: The exception message.\n    - id: lineNumber\n      type: System.Int32\n      description: The line number where the exception occurred.\n    - id: linePosition\n      type: System.Int32\n      description: The position in the line at which the exception occurred.\n    - id: innerException\n      type: System.Exception\n      description: The initial exception that occurred.\n  overload: System.Windows.Markup.XamlParseException.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Markup.XamlParseException.BaseUri\n  id: BaseUri\n  parent: System.Windows.Markup.XamlParseException\n  langs:\n  - csharp\n  name: BaseUri\n  nameWithType: XamlParseException.BaseUri\n  fullName: System.Windows.Markup.XamlParseException.BaseUri\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Markup\n  summary: Gets base URI information when the exception is thrown.\n  remarks: Base URI is potentially available because of parser context when the exception occurred. Knowing the base URI can be useful for debugging cases where a resource resolution error is the underlying cause.\n  syntax:\n    content: public Uri BaseUri { get; }\n    return:\n      type: System.Uri\n      description: The parser context base URI.\n  overload: System.Windows.Markup.XamlParseException.BaseUri*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Markup.XamlParseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Windows.Markup.XamlParseException\n  langs:\n  - csharp\n  name: GetObjectData(SerializationInfo,StreamingContext)\n  nameWithType: XamlParseException.GetObjectData(SerializationInfo,StreamingContext)\n  fullName: System.Windows.Markup.XamlParseException.GetObjectData(SerializationInfo,StreamingContext)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Markup\n  summary: Gets the data that is required to serialize the specified object by populating the specified <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object.\n  remarks: GetObjectData sets a <xref:System.Runtime.Serialization.SerializationInfo> object with all the exception object data targeted for serialization. During deserialization, the exception is reconstituted from the <xref:System.Runtime.Serialization.SerializationInfo> transmitted over the stream.\n  syntax:\n    content: public override void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);\n    parameters:\n    - id: info\n      type: System.Runtime.Serialization.SerializationInfo\n      description: The serialization information object to add the serialization data to.\n    - id: context\n      type: System.Runtime.Serialization.StreamingContext\n      description: The destination for this serialization.\n  overload: System.Windows.Markup.XamlParseException.GetObjectData*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Markup.XamlParseException.KeyContext\n  id: KeyContext\n  parent: System.Windows.Markup.XamlParseException\n  langs:\n  - csharp\n  name: KeyContext\n  nameWithType: XamlParseException.KeyContext\n  fullName: System.Windows.Markup.XamlParseException.KeyContext\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Markup\n  summary: Gets or sets the key value of the item in a dictionary where the exception occurred.\n  syntax:\n    content: public object KeyContext { get; }\n    return:\n      type: System.Object\n      description: The relevant XAML <xref uid=\"langword_csharp_x:Key\" name=\"x:Key\" href=\"\"></xref> value.\n  overload: System.Windows.Markup.XamlParseException.KeyContext*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Markup.XamlParseException.LineNumber\n  id: LineNumber\n  parent: System.Windows.Markup.XamlParseException\n  langs:\n  - csharp\n  name: LineNumber\n  nameWithType: XamlParseException.LineNumber\n  fullName: System.Windows.Markup.XamlParseException.LineNumber\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Markup\n  summary: Gets the line number where the exception occurred.\n  syntax:\n    content: public int LineNumber { get; }\n    return:\n      type: System.Int32\n      description: The line number.\n  overload: System.Windows.Markup.XamlParseException.LineNumber*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Markup.XamlParseException.LinePosition\n  id: LinePosition\n  parent: System.Windows.Markup.XamlParseException\n  langs:\n  - csharp\n  name: LinePosition\n  nameWithType: XamlParseException.LinePosition\n  fullName: System.Windows.Markup.XamlParseException.LinePosition\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Markup\n  summary: Gets the position in the line where the exception occurred.\n  syntax:\n    content: public int LinePosition { get; }\n    return:\n      type: System.Int32\n      description: The line position.\n  overload: System.Windows.Markup.XamlParseException.LinePosition*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Markup.XamlParseException.NameContext\n  id: NameContext\n  parent: System.Windows.Markup.XamlParseException\n  langs:\n  - csharp\n  name: NameContext\n  nameWithType: XamlParseException.NameContext\n  fullName: System.Windows.Markup.XamlParseException.NameContext\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Markup\n  summary: Gets or sets the XAML name of the object where the exception occurred.\n  syntax:\n    content: public string NameContext { get; }\n    return:\n      type: System.String\n      description: The XAML name of the object.\n  overload: System.Windows.Markup.XamlParseException.NameContext*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Markup.XamlParseException.UidContext\n  id: UidContext\n  parent: System.Windows.Markup.XamlParseException\n  langs:\n  - csharp\n  name: UidContext\n  nameWithType: XamlParseException.UidContext\n  fullName: System.Windows.Markup.XamlParseException.UidContext\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Markup\n  summary: Gets or sets the [x:Uid Directive](~/add/includes/ajax-current-ext-md.md) of the object where the exception occurred.\n  syntax:\n    content: public string UidContext { get; }\n    return:\n      type: System.String\n      description: The value of the <xref uid=\"langword_csharp_Uid\" name=\"Uid\" href=\"\"></xref> string.\n  overload: System.Windows.Markup.XamlParseException.UidContext*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.SystemException\n  isExternal: false\n  name: System.SystemException\n- uid: System.Windows.Markup.XamlParseException.#ctor\n  parent: System.Windows.Markup.XamlParseException\n  isExternal: false\n  name: XamlParseException()\n  nameWithType: XamlParseException.XamlParseException()\n  fullName: System.Windows.Markup.XamlParseException.XamlParseException()\n- uid: System.Windows.Markup.XamlParseException.#ctor(System.String)\n  parent: System.Windows.Markup.XamlParseException\n  isExternal: false\n  name: XamlParseException(String)\n  nameWithType: XamlParseException.XamlParseException(String)\n  fullName: System.Windows.Markup.XamlParseException.XamlParseException(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Windows.Markup.XamlParseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Windows.Markup.XamlParseException\n  isExternal: false\n  name: XamlParseException(SerializationInfo,StreamingContext)\n  nameWithType: XamlParseException.XamlParseException(SerializationInfo,StreamingContext)\n  fullName: System.Windows.Markup.XamlParseException.XamlParseException(SerializationInfo,StreamingContext)\n- uid: System.Runtime.Serialization.SerializationInfo\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: SerializationInfo\n  nameWithType: SerializationInfo\n  fullName: System.Runtime.Serialization.SerializationInfo\n- uid: System.Runtime.Serialization.StreamingContext\n  parent: System.Runtime.Serialization\n  isExternal: true\n  name: StreamingContext\n  nameWithType: StreamingContext\n  fullName: System.Runtime.Serialization.StreamingContext\n- uid: System.Windows.Markup.XamlParseException.#ctor(System.String,System.Exception)\n  parent: System.Windows.Markup.XamlParseException\n  isExternal: false\n  name: XamlParseException(String,Exception)\n  nameWithType: XamlParseException.XamlParseException(String,Exception)\n  fullName: System.Windows.Markup.XamlParseException.XamlParseException(String,Exception)\n- uid: System.Exception\n  parent: System\n  isExternal: true\n  name: Exception\n  nameWithType: Exception\n  fullName: System.Exception\n- uid: System.Windows.Markup.XamlParseException.#ctor(System.String,System.Int32,System.Int32)\n  parent: System.Windows.Markup.XamlParseException\n  isExternal: false\n  name: XamlParseException(String,Int32,Int32)\n  nameWithType: XamlParseException.XamlParseException(String,Int32,Int32)\n  fullName: System.Windows.Markup.XamlParseException.XamlParseException(String,Int32,Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Windows.Markup.XamlParseException.#ctor(System.String,System.Int32,System.Int32,System.Exception)\n  parent: System.Windows.Markup.XamlParseException\n  isExternal: false\n  name: XamlParseException(String,Int32,Int32,Exception)\n  nameWithType: XamlParseException.XamlParseException(String,Int32,Int32,Exception)\n  fullName: System.Windows.Markup.XamlParseException.XamlParseException(String,Int32,Int32,Exception)\n- uid: System.Windows.Markup.XamlParseException.BaseUri\n  parent: System.Windows.Markup.XamlParseException\n  isExternal: false\n  name: BaseUri\n  nameWithType: XamlParseException.BaseUri\n  fullName: System.Windows.Markup.XamlParseException.BaseUri\n- uid: System.Uri\n  parent: System\n  isExternal: true\n  name: Uri\n  nameWithType: Uri\n  fullName: System.Uri\n- uid: System.Windows.Markup.XamlParseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Windows.Markup.XamlParseException\n  isExternal: false\n  name: GetObjectData(SerializationInfo,StreamingContext)\n  nameWithType: XamlParseException.GetObjectData(SerializationInfo,StreamingContext)\n  fullName: System.Windows.Markup.XamlParseException.GetObjectData(SerializationInfo,StreamingContext)\n- uid: System.Windows.Markup.XamlParseException.KeyContext\n  parent: System.Windows.Markup.XamlParseException\n  isExternal: false\n  name: KeyContext\n  nameWithType: XamlParseException.KeyContext\n  fullName: System.Windows.Markup.XamlParseException.KeyContext\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Windows.Markup.XamlParseException.LineNumber\n  parent: System.Windows.Markup.XamlParseException\n  isExternal: false\n  name: LineNumber\n  nameWithType: XamlParseException.LineNumber\n  fullName: System.Windows.Markup.XamlParseException.LineNumber\n- uid: System.Windows.Markup.XamlParseException.LinePosition\n  parent: System.Windows.Markup.XamlParseException\n  isExternal: false\n  name: LinePosition\n  nameWithType: XamlParseException.LinePosition\n  fullName: System.Windows.Markup.XamlParseException.LinePosition\n- uid: System.Windows.Markup.XamlParseException.NameContext\n  parent: System.Windows.Markup.XamlParseException\n  isExternal: false\n  name: NameContext\n  nameWithType: XamlParseException.NameContext\n  fullName: System.Windows.Markup.XamlParseException.NameContext\n- uid: System.Windows.Markup.XamlParseException.UidContext\n  parent: System.Windows.Markup.XamlParseException\n  isExternal: false\n  name: UidContext\n  nameWithType: XamlParseException.UidContext\n  fullName: System.Windows.Markup.XamlParseException.UidContext\n- uid: System.Windows.Markup.XamlParseException.#ctor*\n  parent: System.Windows.Markup.XamlParseException\n  isExternal: false\n  name: XamlParseException\n  nameWithType: XamlParseException.XamlParseException\n- uid: System.Windows.Markup.XamlParseException.BaseUri*\n  parent: System.Windows.Markup.XamlParseException\n  isExternal: false\n  name: BaseUri\n  nameWithType: XamlParseException.BaseUri\n- uid: System.Windows.Markup.XamlParseException.GetObjectData*\n  parent: System.Windows.Markup.XamlParseException\n  isExternal: false\n  name: GetObjectData\n  nameWithType: XamlParseException.GetObjectData\n- uid: System.Windows.Markup.XamlParseException.KeyContext*\n  parent: System.Windows.Markup.XamlParseException\n  isExternal: false\n  name: KeyContext\n  nameWithType: XamlParseException.KeyContext\n- uid: System.Windows.Markup.XamlParseException.LineNumber*\n  parent: System.Windows.Markup.XamlParseException\n  isExternal: false\n  name: LineNumber\n  nameWithType: XamlParseException.LineNumber\n- uid: System.Windows.Markup.XamlParseException.LinePosition*\n  parent: System.Windows.Markup.XamlParseException\n  isExternal: false\n  name: LinePosition\n  nameWithType: XamlParseException.LinePosition\n- uid: System.Windows.Markup.XamlParseException.NameContext*\n  parent: System.Windows.Markup.XamlParseException\n  isExternal: false\n  name: NameContext\n  nameWithType: XamlParseException.NameContext\n- uid: System.Windows.Markup.XamlParseException.UidContext*\n  parent: System.Windows.Markup.XamlParseException\n  isExternal: false\n  name: UidContext\n  nameWithType: XamlParseException.UidContext\n"}