{"nodes":[{"pos":[720,781],"content":"Provides for immediate loading and filtering of related data.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides for immediate loading and filtering of related data.","pos":[0,61]}]},{"pos":[794,3619],"content":"## General    When you query for an object, you actually retrieve only the object you requested. The *related* objects are not automatically fetched at the same time. (For more information, see [Querying Across Relationships](~/add/includes/ajax-current-ext-md.md).)       The DataLoadOptions class provides two methods to achieve immediate loading of specified related data. The <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> method allows for immediate loading of data related to the main target. The <xref:System.Data.Linq.DataLoadOptions.AssociateWith%2A> method allows for filtering related objects.      ## Rules    Note the following rules regarding DataLoadOptions usage:      -   Assigning a DataLoadOptions to a <xref:System.Data.Linq.DataContext> after the first query has been executed generates an exception.      -   Modifying a DataLoadOptions after it has been assigned to a <xref:System.Data.Linq.DataContext> generates an exception      ## Cycle Handling    <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> and <xref:System.Data.Linq.DataLoadOptions.AssociateWith%2A> directives must not create cycles. The following represent examples of such graphs:      -   Example 1: Self recursive          -   `dlo.LoadWith<Employee>(e => e.Reports);`      -   Example 2: Back-pointers          -   `dlo.LoadWith <Customer>(c => C.Orders);`          -   `dlo.LoadWith <Order>(o => o.Customer);`      -   Example 3: Longer cycles           Although this should not occur in a well-normalized model, it is possible.          -   `dlo.LoadWith <A>(a => a.Bs);`          -   `dlo.LoadWith <B>(b => b.Cs);`          -   `dlo.LoadWith <C>(c => c.As);`      -   Example 4: Self recursive subQueries          -   `dlo.AssociateWith<A>(a=>a.As.Where(a=>a.Id=33));`      -   Example 5: Longer recursive subqueries          -   `dlo.AssociateWith<A>(a=>a.Bs.Where(b=>b.Id==3));`          -   `dlo.AssociateWith<B>(b=>b.As.Where(a=>a.Id==3));`       The following are some general rules that help you understand what occurs in these scenarios.       **LoadWith** Each call to <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> checks whether cycles have been introduced into the graph. If there are, as in Examples 1, 2, and 3, an exception is thrown.       **AssociateWith** The engine at run time does not apply the existing SubQuery clauses to the relationship inside the expression.      -   In Example 4, the `Where` clause is executed against all `A`, not just the ones sub-filtered by the SubQuery expression itself (because that would be recursive)      -   In Example 5, the first `Where` clause is applied to all the `B`s, even though there are subqueries on `B`. The second `Where` clause is applied to all the `A`s even though there are subqueries on `A`.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"<ph id=\"ph1\">##</ph> General    When you query for an object, you actually retrieve only the object you requested.","pos":[0,96],"source":"## General    When you query for an object, you actually retrieve only the object you requested."},{"content":"The <bpt id=\"p1\">*</bpt>related<ept id=\"p1\">*</ept> objects are not automatically fetched at the same time.","pos":[97,166],"source":" The *related* objects are not automatically fetched at the same time."},{"content":"(For more information, see <bpt id=\"p1\">[</bpt>Querying Across Relationships<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.)       The DataLoadOptions class provides two methods to achieve immediate loading of specified related data.","pos":[167,375],"source":" (For more information, see [Querying Across Relationships](~/add/includes/ajax-current-ext-md.md).)       The DataLoadOptions class provides two methods to achieve immediate loading of specified related data."},{"content":"The &lt;xref:System.Data.Linq.DataLoadOptions.LoadWith%2A&gt; method allows for immediate loading of data related to the main target.","pos":[376,503],"source":" The <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> method allows for immediate loading of data related to the main target."},{"content":"The &lt;xref:System.Data.Linq.DataLoadOptions.AssociateWith%2A&gt; method allows for filtering related objects.","pos":[504,609],"source":" The <xref:System.Data.Linq.DataLoadOptions.AssociateWith%2A> method allows for filtering related objects."},{"content":"Rules    Note the following rules regarding DataLoadOptions usage:      -   Assigning a DataLoadOptions to a &lt;xref:System.Data.Linq.DataContext&gt; after the first query has been executed generates an exception.","pos":[618,826],"source":"      ## Rules    Note the following rules regarding DataLoadOptions usage:      -   Assigning a DataLoadOptions to a <xref:System.Data.Linq.DataContext> after the first query has been executed generates an exception."},{"content":"-   Modifying a DataLoadOptions after it has been assigned to a &lt;xref:System.Data.Linq.DataContext&gt; generates an exception      ## Cycle Handling    &lt;xref:System.Data.Linq.DataLoadOptions.LoadWith%2A&gt; and &lt;xref:System.Data.Linq.DataLoadOptions.AssociateWith%2A&gt; directives must not create cycles.","pos":[832,1128],"source":"      -   Modifying a DataLoadOptions after it has been assigned to a <xref:System.Data.Linq.DataContext> generates an exception      ## Cycle Handling    <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> and <xref:System.Data.Linq.DataLoadOptions.AssociateWith%2A> directives must not create cycles."},{"content":"The following represent examples of such graphs:      -   Example 1: Self recursive          -   <ph id=\"ph1\">`dlo.LoadWith&lt;Employee&gt;(e =&gt; e.Reports);`</ph>      -   Example 2: Back-pointers          -   <ph id=\"ph2\">`dlo.LoadWith &lt;Customer&gt;(c =&gt; C.Orders);`</ph><ph id=\"ph3\">          -   </ph><ph id=\"ph4\">`dlo.LoadWith &lt;Order&gt;(o =&gt; o.Customer);`</ph>      -   Example 3: Longer cycles           Although this should not occur in a well-normalized model, it is possible.","pos":[1129,1529],"source":" The following represent examples of such graphs:      -   Example 1: Self recursive          -   `dlo.LoadWith<Employee>(e => e.Reports);`      -   Example 2: Back-pointers          -   `dlo.LoadWith <Customer>(c => C.Orders);`          -   `dlo.LoadWith <Order>(o => o.Customer);`      -   Example 3: Longer cycles           Although this should not occur in a well-normalized model, it is possible."},{"content":"-   <ph id=\"ph1\">`dlo.LoadWith &lt;A&gt;(a =&gt; a.Bs);`</ph><ph id=\"ph2\">          -   </ph><ph id=\"ph3\">`dlo.LoadWith &lt;B&gt;(b =&gt; b.Cs);`</ph><ph id=\"ph4\">          -   </ph><ph id=\"ph5\">`dlo.LoadWith &lt;C&gt;(c =&gt; c.As);`</ph>      -   Example 4: Self recursive subQueries          -   <ph id=\"ph6\">`dlo.AssociateWith&lt;A&gt;(a=&gt;a.As.Where(a=&gt;a.Id=33));`</ph>      -   Example 5: Longer recursive subqueries          -   <ph id=\"ph7\">`dlo.AssociateWith&lt;A&gt;(a=&gt;a.Bs.Where(b=&gt;b.Id==3));`</ph><ph id=\"ph8\">          -   </ph><ph id=\"ph9\">`dlo.AssociateWith&lt;B&gt;(b=&gt;b.As.Where(a=&gt;a.Id==3));`</ph>       The following are some general rules that help you understand what occurs in these scenarios.","pos":[1539,2047],"source":"          -   `dlo.LoadWith <A>(a => a.Bs);`          -   `dlo.LoadWith <B>(b => b.Cs);`          -   `dlo.LoadWith <C>(c => c.As);`      -   Example 4: Self recursive subQueries          -   `dlo.AssociateWith<A>(a=>a.As.Where(a=>a.Id=33));`      -   Example 5: Longer recursive subqueries          -   `dlo.AssociateWith<A>(a=>a.Bs.Where(b=>b.Id==3));`          -   `dlo.AssociateWith<B>(b=>b.As.Where(a=>a.Id==3));`       The following are some general rules that help you understand what occurs in these scenarios."},{"content":"<bpt id=\"p1\">**</bpt>LoadWith<ept id=\"p1\">**</ept> Each call to &lt;xref:System.Data.Linq.DataLoadOptions.LoadWith%2A&gt; checks whether cycles have been introduced into the graph.","pos":[2054,2190],"source":"**LoadWith** Each call to <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> checks whether cycles have been introduced into the graph."},{"content":"If there are, as in Examples 1, 2, and 3, an exception is thrown.","pos":[2191,2256]},{"content":"<bpt id=\"p1\">**</bpt>AssociateWith<ept id=\"p1\">**</ept> The engine at run time does not apply the existing SubQuery clauses to the relationship inside the expression.","pos":[2263,2391],"source":"**AssociateWith** The engine at run time does not apply the existing SubQuery clauses to the relationship inside the expression."},{"content":"-   In Example 4, the <ph id=\"ph1\">`Where`</ph> clause is executed against all <ph id=\"ph2\">`A`</ph>, not just the ones sub-filtered by the SubQuery expression itself (because that would be recursive)      -   In Example 5, the first <ph id=\"ph3\">`Where`</ph> clause is applied to all the <ph id=\"ph4\">`B`</ph>s, even though there are subqueries on <ph id=\"ph5\">`B`</ph>.","pos":[2397,2678],"source":"      -   In Example 4, the `Where` clause is executed against all `A`, not just the ones sub-filtered by the SubQuery expression itself (because that would be recursive)      -   In Example 5, the first `Where` clause is applied to all the `B`s, even though there are subqueries on `B`."},{"content":"The second <ph id=\"ph1\">`Where`</ph> clause is applied to all the <ph id=\"ph2\">`A`</ph>s even though there are subqueries on <ph id=\"ph3\">`A`</ph>.","pos":[2679,2772],"source":" The second `Where` clause is applied to all the `A`s even though there are subqueries on `A`."}]},{"pos":[4352,4446],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Data.Linq.DataLoadOptions\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Data.Linq.DataLoadOptions\"></xref> class."},{"pos":[5101,5161],"content":"Filters the objects retrieved for a particular relationship.","needQuote":true,"needEscape":true,"nodes":[{"content":"Filters the objects retrieved for a particular relationship.","pos":[0,60]}]},{"pos":[5173,5281],"content":"In the following example, the inner loop iterates only over those <ph id=\"ph1\">`Orders`</ph> that have not been shipped today.","needQuote":true,"needEscape":true,"extradata":"MT","source":"In the following example, the inner loop iterates only over those `Orders` that have not been shipped today."},{"pos":[5717,6192],"content":"Identifies the query to be used on a particular one-to-many field or property. Note the following:       If the expression does not start with a field or property that represents a one-to-many relationship, an exception is thrown.       If an operator other than a valid operator appears in the expression, an exception is thrown. Valid operators are as follows:       Where       OrderBy       ThenBy       OrderByDescending       ThenByDescending       Take","needQuote":false,"needEscape":true,"nodes":[{"content":"Identifies the query to be used on a particular one-to-many field or property. Note the following:       If the expression does not start with a field or property that represents a one-to-many relationship, an exception is thrown.       If an operator other than a valid operator appears in the expression, an exception is thrown. Valid operators are as follows:       Where       OrderBy       ThenBy       OrderByDescending       ThenByDescending       Take","pos":[0,459],"nodes":[{"content":"Identifies the query to be used on a particular one-to-many field or property.","pos":[0,78]},{"content":"Note the following:       If the expression does not start with a field or property that represents a one-to-many relationship, an exception is thrown.","pos":[79,230]},{"content":"If an operator other than a valid operator appears in the expression, an exception is thrown.","pos":[237,330]},{"content":"Valid operators are as follows:       Where       OrderBy       ThenBy       OrderByDescending       ThenByDescending       Take","pos":[331,459]}]}]},{"pos":[7114,7126],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[7698,7779],"content":"Retrieves specified data related to the main target by using a lambda expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Retrieves specified data related to the main target by using a lambda expression.","pos":[0,81]}]},{"pos":[7791,8043],"content":"In the following example, all the `Orders` for all the `Customers` who are located in London are retrieved when the query is executed. As a result, successive access to the `Orders` property on a `Customer` object does not trigger a new database query.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"In the following example, all the <ph id=\"ph1\">`Orders`</ph> for all the <ph id=\"ph2\">`Customers`</ph> who are located in London are retrieved when the query is executed.","pos":[0,134],"source":"In the following example, all the `Orders` for all the `Customers` who are located in London are retrieved when the query is executed."},{"content":"As a result, successive access to the <ph id=\"ph1\">`Orders`</ph> property on a <ph id=\"ph2\">`Customer`</ph> object does not trigger a new database query.","pos":[135,252],"source":" As a result, successive access to the `Orders` property on a `Customer` object does not trigger a new database query."}]},{"pos":[8473,8530],"content":"A lambda expression that identifies the related material.","needQuote":true,"needEscape":true,"nodes":[{"content":"A lambda expression that identifies the related material.","pos":[0,57]}]},{"pos":[9416,9428],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Data.Linq.DataLoadOptions\n  id: DataLoadOptions\n  children:\n  - System.Data.Linq.DataLoadOptions.#ctor\n  - System.Data.Linq.DataLoadOptions.AssociateWith(System.Linq.Expressions.LambdaExpression)\n  - System.Data.Linq.DataLoadOptions.AssociateWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})\n  - System.Data.Linq.DataLoadOptions.LoadWith(System.Linq.Expressions.LambdaExpression)\n  - System.Data.Linq.DataLoadOptions.LoadWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})\n  langs:\n  - csharp\n  name: DataLoadOptions\n  nameWithType: DataLoadOptions\n  fullName: System.Data.Linq.DataLoadOptions\n  type: Class\n  summary: Provides for immediate loading and filtering of related data.\n  remarks: \"## General  \\n When you query for an object, you actually retrieve only the object you requested. The *related* objects are not automatically fetched at the same time. (For more information, see [Querying Across Relationships](~/add/includes/ajax-current-ext-md.md).)  \\n  \\n The DataLoadOptions class provides two methods to achieve immediate loading of specified related data. The <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> method allows for immediate loading of data related to the main target. The <xref:System.Data.Linq.DataLoadOptions.AssociateWith%2A> method allows for filtering related objects.  \\n  \\n## Rules  \\n Note the following rules regarding DataLoadOptions usage:  \\n  \\n-   Assigning a DataLoadOptions to a <xref:System.Data.Linq.DataContext> after the first query has been executed generates an exception.  \\n  \\n-   Modifying a DataLoadOptions after it has been assigned to a <xref:System.Data.Linq.DataContext> generates an exception  \\n  \\n## Cycle Handling  \\n <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> and <xref:System.Data.Linq.DataLoadOptions.AssociateWith%2A> directives must not create cycles. The following represent examples of such graphs:  \\n  \\n-   Example 1: Self recursive  \\n  \\n    -   `dlo.LoadWith<Employee>(e => e.Reports);`  \\n  \\n-   Example 2: Back-pointers  \\n  \\n    -   `dlo.LoadWith <Customer>(c => C.Orders);`  \\n  \\n    -   `dlo.LoadWith <Order>(o => o.Customer);`  \\n  \\n-   Example 3: Longer cycles  \\n  \\n     Although this should not occur in a well-normalized model, it is possible.  \\n  \\n    -   `dlo.LoadWith <A>(a => a.Bs);`  \\n  \\n    -   `dlo.LoadWith <B>(b => b.Cs);`  \\n  \\n    -   `dlo.LoadWith <C>(c => c.As);`  \\n  \\n-   Example 4: Self recursive subQueries  \\n  \\n    -   `dlo.AssociateWith<A>(a=>a.As.Where(a=>a.Id=33));`  \\n  \\n-   Example 5: Longer recursive subqueries  \\n  \\n    -   `dlo.AssociateWith<A>(a=>a.Bs.Where(b=>b.Id==3));`  \\n  \\n    -   `dlo.AssociateWith<B>(b=>b.As.Where(a=>a.Id==3));`  \\n  \\n The following are some general rules that help you understand what occurs in these scenarios.  \\n  \\n **LoadWith** Each call to <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> checks whether cycles have been introduced into the graph. If there are, as in Examples 1, 2, and 3, an exception is thrown.  \\n  \\n **AssociateWith** The engine at run time does not apply the existing SubQuery clauses to the relationship inside the expression.  \\n  \\n-   In Example 4, the `Where` clause is executed against all `A`, not just the ones sub-filtered by the SubQuery expression itself (because that would be recursive)  \\n  \\n-   In Example 5, the first `Where` clause is applied to all the `B`s, even though there are subqueries on `B`. The second `Where` clause is applied to all the `A`s even though there are subqueries on `A`.\"\n  example:\n  - When you retrieve `Customers` from the Northwind sample database, you can use DataLoadOptions to specify that `Orders` is also to be retrieved. You can even specify which subset of `Orders` to retrieve.\n  syntax:\n    content: public sealed class DataLoadOptions\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Data.Linq.DataLoadOptions.#ctor\n  id: '#ctor'\n  parent: System.Data.Linq.DataLoadOptions\n  langs:\n  - csharp\n  name: DataLoadOptions()\n  nameWithType: DataLoadOptions.DataLoadOptions()\n  fullName: System.Data.Linq.DataLoadOptions.DataLoadOptions()\n  type: Constructor\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Initializes a new instance of the <xref href=\"System.Data.Linq.DataLoadOptions\"></xref> class.\n  syntax:\n    content: public DataLoadOptions ();\n    parameters: []\n  overload: System.Data.Linq.DataLoadOptions.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.DataLoadOptions.AssociateWith(System.Linq.Expressions.LambdaExpression)\n  id: AssociateWith(System.Linq.Expressions.LambdaExpression)\n  parent: System.Data.Linq.DataLoadOptions\n  langs:\n  - csharp\n  name: AssociateWith(LambdaExpression)\n  nameWithType: DataLoadOptions.AssociateWith(LambdaExpression)\n  fullName: System.Data.Linq.DataLoadOptions.AssociateWith(LambdaExpression)\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Filters the objects retrieved for a particular relationship.\n  remarks: In the following example, the inner loop iterates only over those `Orders` that have not been shipped today.\n  example:\n  - >-\n    [!code-vb[System.Data.Linq.DataLoadOptions#1](~/add/codesnippet/visualbasic/snip/module1.vb#1)]\n     [!code-cs[System.Data.Linq.DataLoadOptions#1](~/add/codesnippet/csharp/testmakenew/program.cs#1)]\n  syntax:\n    content: public void AssociateWith (System.Linq.Expressions.LambdaExpression expression);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.LambdaExpression\n      description: \"Identifies the query to be used on a particular one-to-many field or property. Note the following:  \\n  \\n If the expression does not start with a field or property that represents a one-to-many relationship, an exception is thrown.  \\n  \\n If an operator other than a valid operator appears in the expression, an exception is thrown. Valid operators are as follows:  \\n  \\n Where  \\n  \\n OrderBy  \\n  \\n ThenBy  \\n  \\n OrderByDescending  \\n  \\n ThenByDescending  \\n  \\n Take\"\n  overload: System.Data.Linq.DataLoadOptions.AssociateWith*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.DataLoadOptions.AssociateWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})\n  id: AssociateWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})\n  parent: System.Data.Linq.DataLoadOptions\n  langs:\n  - csharp\n  name: AssociateWith(Expression<Func<T,Object>>)\n  nameWithType: DataLoadOptions.AssociateWith(Expression<Func<T,Object>>)\n  fullName: System.Data.Linq.DataLoadOptions.AssociateWith(Expression<Func<T,Object>>)\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  syntax:\n    content: public void AssociateWith<T> (System.Linq.Expressions.Expression<Func<T,object>> expression);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression{System.Func{T,System.Object}}\n      description: To be added.\n  overload: System.Data.Linq.DataLoadOptions.AssociateWith<T>*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.DataLoadOptions.LoadWith(System.Linq.Expressions.LambdaExpression)\n  id: LoadWith(System.Linq.Expressions.LambdaExpression)\n  parent: System.Data.Linq.DataLoadOptions\n  langs:\n  - csharp\n  name: LoadWith(LambdaExpression)\n  nameWithType: DataLoadOptions.LoadWith(LambdaExpression)\n  fullName: System.Data.Linq.DataLoadOptions.LoadWith(LambdaExpression)\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  summary: Retrieves specified data related to the main target by using a lambda expression.\n  remarks: In the following example, all the `Orders` for all the `Customers` who are located in London are retrieved when the query is executed. As a result, successive access to the `Orders` property on a `Customer` object does not trigger a new database query.\n  example:\n  - >-\n    [!code-vb[System.Data.Linq.DataLoadOptions#2](~/add/codesnippet/visualbasic/snip/module1.vb#2)]\n     [!code-cs[System.Data.Linq.DataLoadOptions#2](~/add/codesnippet/csharp/testmakenew/program.cs#2)]\n  syntax:\n    content: public void LoadWith (System.Linq.Expressions.LambdaExpression expression);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.LambdaExpression\n      description: A lambda expression that identifies the related material.\n  overload: System.Data.Linq.DataLoadOptions.LoadWith*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.DataLoadOptions.LoadWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})\n  id: LoadWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})\n  parent: System.Data.Linq.DataLoadOptions\n  langs:\n  - csharp\n  name: LoadWith(Expression<Func<T,Object>>)\n  nameWithType: DataLoadOptions.LoadWith(Expression<Func<T,Object>>)\n  fullName: System.Data.Linq.DataLoadOptions.LoadWith(Expression<Func<T,Object>>)\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq\n  syntax:\n    content: public void LoadWith<T> (System.Linq.Expressions.Expression<Func<T,object>> expression);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression{System.Func{T,System.Object}}\n      description: To be added.\n  overload: System.Data.Linq.DataLoadOptions.LoadWith<T>*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Data.Linq.DataLoadOptions.#ctor\n  parent: System.Data.Linq.DataLoadOptions\n  isExternal: false\n  name: DataLoadOptions()\n  nameWithType: DataLoadOptions.DataLoadOptions()\n  fullName: System.Data.Linq.DataLoadOptions.DataLoadOptions()\n- uid: System.Data.Linq.DataLoadOptions.AssociateWith(System.Linq.Expressions.LambdaExpression)\n  parent: System.Data.Linq.DataLoadOptions\n  isExternal: false\n  name: AssociateWith(LambdaExpression)\n  nameWithType: DataLoadOptions.AssociateWith(LambdaExpression)\n  fullName: System.Data.Linq.DataLoadOptions.AssociateWith(LambdaExpression)\n- uid: System.Linq.Expressions.LambdaExpression\n  parent: System.Linq.Expressions\n  isExternal: true\n  name: LambdaExpression\n  nameWithType: LambdaExpression\n  fullName: System.Linq.Expressions.LambdaExpression\n- uid: System.Data.Linq.DataLoadOptions.AssociateWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})\n  parent: System.Data.Linq.DataLoadOptions\n  isExternal: false\n  name: AssociateWith(Expression<Func<T,Object>>)\n  nameWithType: DataLoadOptions.AssociateWith(Expression<Func<T,Object>>)\n  fullName: System.Data.Linq.DataLoadOptions.AssociateWith(Expression<Func<T,Object>>)\n- uid: System.Linq.Expressions.Expression{System.Func{T,System.Object}}\n  parent: System.Linq.Expressions\n  isExternal: true\n  name: Expression<Func<T,Object>>\n  nameWithType: Expression<Func<T,Object>>\n  fullName: System.Linq.Expressions.Expression<System.Func<T,System.Object>>\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expression\n    nameWithType: Expression\n    fullName: Expression<System.Func<T,System.Object>>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: Func<T,System.Object>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: T\n    name: T\n    nameWithType: T\n    fullName: T\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: Object\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Data.Linq.DataLoadOptions.LoadWith(System.Linq.Expressions.LambdaExpression)\n  parent: System.Data.Linq.DataLoadOptions\n  isExternal: false\n  name: LoadWith(LambdaExpression)\n  nameWithType: DataLoadOptions.LoadWith(LambdaExpression)\n  fullName: System.Data.Linq.DataLoadOptions.LoadWith(LambdaExpression)\n- uid: System.Data.Linq.DataLoadOptions.LoadWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})\n  parent: System.Data.Linq.DataLoadOptions\n  isExternal: false\n  name: LoadWith(Expression<Func<T,Object>>)\n  nameWithType: DataLoadOptions.LoadWith(Expression<Func<T,Object>>)\n  fullName: System.Data.Linq.DataLoadOptions.LoadWith(Expression<Func<T,Object>>)\n- uid: System.Data.Linq.DataLoadOptions.#ctor*\n  parent: System.Data.Linq.DataLoadOptions\n  isExternal: false\n  name: DataLoadOptions\n  nameWithType: DataLoadOptions.DataLoadOptions\n- uid: System.Data.Linq.DataLoadOptions.AssociateWith*\n  parent: System.Data.Linq.DataLoadOptions\n  isExternal: false\n  name: AssociateWith\n  nameWithType: DataLoadOptions.AssociateWith\n- uid: System.Data.Linq.DataLoadOptions.AssociateWith<T>*\n  parent: System.Data.Linq.DataLoadOptions\n  isExternal: false\n  name: AssociateWith<T>\n  nameWithType: DataLoadOptions.AssociateWith<T>\n- uid: System.Data.Linq.DataLoadOptions.LoadWith*\n  parent: System.Data.Linq.DataLoadOptions\n  isExternal: false\n  name: LoadWith\n  nameWithType: DataLoadOptions.LoadWith\n- uid: System.Data.Linq.DataLoadOptions.LoadWith<T>*\n  parent: System.Data.Linq.DataLoadOptions\n  isExternal: false\n  name: LoadWith<T>\n  nameWithType: DataLoadOptions.LoadWith<T>\n"}