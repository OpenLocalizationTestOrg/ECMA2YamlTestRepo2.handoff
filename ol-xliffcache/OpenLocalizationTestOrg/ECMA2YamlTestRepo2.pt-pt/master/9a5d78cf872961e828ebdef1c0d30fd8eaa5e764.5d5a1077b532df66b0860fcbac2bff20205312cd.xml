{"nodes":[{"pos":[1033,1089],"content":"Resolves session security tokens from the current cache.","needQuote":true,"needEscape":true,"nodes":[{"content":"Resolves session security tokens from the current cache.","pos":[0,56]}]},{"pos":[3314,3434],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Services.SessionSecurityTokenResolver\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.IdentityModel.Services.SessionSecurityTokenResolver\"></xref> class."},{"pos":[3703,3719],"content":"The token cache.","needQuote":true,"needEscape":true,"nodes":[{"content":"The token cache.","pos":[0,16]}]},{"pos":[3786,3817],"content":"The identifier of the endpoint.","needQuote":true,"needEscape":true,"nodes":[{"content":"The identifier of the endpoint.","pos":[0,31]}]},{"pos":[4787,4870],"content":"Attempts to resolve the security key core, given a specified key identifier clause.","needQuote":true,"needEscape":true,"nodes":[{"content":"Attempts to resolve the security key core, given a specified key identifier clause.","pos":[0,83]}]},{"pos":[5205,5240],"content":"The security key identifier clause.","needQuote":true,"needEscape":true,"nodes":[{"content":"The security key identifier clause.","pos":[0,35]}]},{"pos":[5326,5423],"content":"When this method returns, contains the resolved key core. This parameter is passed uninitialized.","needQuote":true,"needEscape":true,"nodes":[{"content":"When this method returns, contains the resolved key core. This parameter is passed uninitialized.","pos":[0,97],"nodes":[{"content":"When this method returns, contains the resolved key core.","pos":[0,57]},{"content":"This parameter is passed uninitialized.","pos":[58,97]}]}]},{"pos":[5482,5660],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the key core was successfully resolved; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the key core was successfully resolved; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[6600,6664],"content":"Attempts to resolve the token from the specified key identifier.","needQuote":true,"needEscape":true,"nodes":[{"content":"Attempts to resolve the token from the specified key identifier.","pos":[0,64]}]},{"pos":[6973,6992],"content":"The key identifier.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key identifier.","pos":[0,19]}]},{"pos":[7082,7179],"content":"When this method returns, contains the resolved key core. This parameter is passed uninitialized.","needQuote":true,"needEscape":true,"nodes":[{"content":"When this method returns, contains the resolved key core. This parameter is passed uninitialized.","pos":[0,97],"nodes":[{"content":"When this method returns, contains the resolved key core.","pos":[0,57]},{"content":"This parameter is passed uninitialized.","pos":[58,97]}]}]},{"pos":[7238,7417],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the key token was successfully resolved; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the key token was successfully resolved; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[8381,8452],"content":"Attempts to resolve the token from the specified key identifier clause.","needQuote":true,"needEscape":true,"nodes":[{"content":"Attempts to resolve the token from the specified key identifier clause.","pos":[0,71]}]},{"pos":[8785,8811],"content":"The key identifier clause.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key identifier clause.","pos":[0,26]}]},{"pos":[8901,8998],"content":"When this method returns, contains the resolved key core. This parameter is passed uninitialized.","needQuote":true,"needEscape":true,"nodes":[{"content":"When this method returns, contains the resolved key core. This parameter is passed uninitialized.","pos":[0,97],"nodes":[{"content":"When this method returns, contains the resolved key core.","pos":[0,57]},{"content":"This parameter is passed uninitialized.","pos":[58,97]}]}]},{"pos":[9057,9236],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the key token was successfully resolved; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the key token was successfully resolved; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.IdentityModel.Services.SessionSecurityTokenResolver\n  id: SessionSecurityTokenResolver\n  children:\n  - System.IdentityModel.Services.SessionSecurityTokenResolver.#ctor(System.IdentityModel.Tokens.SessionSecurityTokenCache,System.String)\n  - System.IdentityModel.Services.SessionSecurityTokenResolver.TryResolveSecurityKeyCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityKey@)\n  - System.IdentityModel.Services.SessionSecurityTokenResolver.TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifier,System.IdentityModel.Tokens.SecurityToken@)\n  - System.IdentityModel.Services.SessionSecurityTokenResolver.TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityToken@)\n  langs:\n  - csharp\n  name: SessionSecurityTokenResolver\n  nameWithType: SessionSecurityTokenResolver\n  fullName: System.IdentityModel.Services.SessionSecurityTokenResolver\n  type: Class\n  summary: Resolves session security tokens from the current cache.\n  syntax:\n    content: 'public class SessionSecurityTokenResolver : System.IdentityModel.Selectors.SecurityTokenResolver'\n  inheritance:\n  - System.Object\n  - System.IdentityModel.Selectors.SecurityTokenResolver\n  implements: []\n  inheritedMembers:\n  - System.IdentityModel.Selectors.SecurityTokenResolver.CreateDefaultSecurityTokenResolver(System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Tokens.SecurityToken},System.Boolean)\n  - System.IdentityModel.Selectors.SecurityTokenResolver.LoadCustomConfiguration(System.Xml.XmlNodeList)\n  - System.IdentityModel.Selectors.SecurityTokenResolver.ResolveSecurityKey(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)\n  - System.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(System.IdentityModel.Tokens.SecurityKeyIdentifier)\n  - System.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)\n  - System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKey(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityKey@)\n  - System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(System.IdentityModel.Tokens.SecurityKeyIdentifier,System.IdentityModel.Tokens.SecurityToken@)\n  - System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityToken@)\n  platform:\n  - net462\n- uid: System.IdentityModel.Services.SessionSecurityTokenResolver.#ctor(System.IdentityModel.Tokens.SessionSecurityTokenCache,System.String)\n  id: '#ctor(System.IdentityModel.Tokens.SessionSecurityTokenCache,System.String)'\n  parent: System.IdentityModel.Services.SessionSecurityTokenResolver\n  langs:\n  - csharp\n  name: SessionSecurityTokenResolver(SessionSecurityTokenCache,String)\n  nameWithType: SessionSecurityTokenResolver.SessionSecurityTokenResolver(SessionSecurityTokenCache,String)\n  fullName: System.IdentityModel.Services.SessionSecurityTokenResolver.SessionSecurityTokenResolver(SessionSecurityTokenCache,String)\n  type: Constructor\n  assemblies:\n  - System.IdentityModel.Services\n  namespace: System.IdentityModel.Services\n  summary: Initializes a new instance of the <xref href=\"System.IdentityModel.Services.SessionSecurityTokenResolver\"></xref> class.\n  syntax:\n    content: public SessionSecurityTokenResolver (System.IdentityModel.Tokens.SessionSecurityTokenCache tokenCache, string endpointId);\n    parameters:\n    - id: tokenCache\n      type: System.IdentityModel.Tokens.SessionSecurityTokenCache\n      description: The token cache.\n    - id: endpointId\n      type: System.String\n      description: The identifier of the endpoint.\n  overload: System.IdentityModel.Services.SessionSecurityTokenResolver.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Services.SessionSecurityTokenResolver.TryResolveSecurityKeyCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityKey@)\n  id: TryResolveSecurityKeyCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityKey@)\n  parent: System.IdentityModel.Services.SessionSecurityTokenResolver\n  langs:\n  - csharp\n  name: TryResolveSecurityKeyCore(SecurityKeyIdentifierClause,SecurityKey)\n  nameWithType: SessionSecurityTokenResolver.TryResolveSecurityKeyCore(SecurityKeyIdentifierClause,SecurityKey)\n  fullName: System.IdentityModel.Services.SessionSecurityTokenResolver.TryResolveSecurityKeyCore(SecurityKeyIdentifierClause,SecurityKey)\n  type: Method\n  assemblies:\n  - System.IdentityModel.Services\n  namespace: System.IdentityModel.Services\n  summary: Attempts to resolve the security key core, given a specified key identifier clause.\n  syntax:\n    content: protected override bool TryResolveSecurityKeyCore (System.IdentityModel.Tokens.SecurityKeyIdentifierClause keyIdentifierClause, out System.IdentityModel.Tokens.SecurityKey key);\n    parameters:\n    - id: keyIdentifierClause\n      type: System.IdentityModel.Tokens.SecurityKeyIdentifierClause\n      description: The security key identifier clause.\n    - id: key\n      type: System.IdentityModel.Tokens.SecurityKey\n      description: When this method returns, contains the resolved key core. This parameter is passed uninitialized.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the key core was successfully resolved; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.IdentityModel.Services.SessionSecurityTokenResolver.TryResolveSecurityKeyCore*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Services.SessionSecurityTokenResolver.TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifier,System.IdentityModel.Tokens.SecurityToken@)\n  id: TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifier,System.IdentityModel.Tokens.SecurityToken@)\n  parent: System.IdentityModel.Services.SessionSecurityTokenResolver\n  langs:\n  - csharp\n  name: TryResolveTokenCore(SecurityKeyIdentifier,SecurityToken)\n  nameWithType: SessionSecurityTokenResolver.TryResolveTokenCore(SecurityKeyIdentifier,SecurityToken)\n  fullName: System.IdentityModel.Services.SessionSecurityTokenResolver.TryResolveTokenCore(SecurityKeyIdentifier,SecurityToken)\n  type: Method\n  assemblies:\n  - System.IdentityModel.Services\n  namespace: System.IdentityModel.Services\n  summary: Attempts to resolve the token from the specified key identifier.\n  syntax:\n    content: protected override bool TryResolveTokenCore (System.IdentityModel.Tokens.SecurityKeyIdentifier keyIdentifier, out System.IdentityModel.Tokens.SecurityToken token);\n    parameters:\n    - id: keyIdentifier\n      type: System.IdentityModel.Tokens.SecurityKeyIdentifier\n      description: The key identifier.\n    - id: token\n      type: System.IdentityModel.Tokens.SecurityToken\n      description: When this method returns, contains the resolved key core. This parameter is passed uninitialized.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the key token was successfully resolved; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.IdentityModel.Services.SessionSecurityTokenResolver.TryResolveTokenCore*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Services.SessionSecurityTokenResolver.TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityToken@)\n  id: TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityToken@)\n  parent: System.IdentityModel.Services.SessionSecurityTokenResolver\n  langs:\n  - csharp\n  name: TryResolveTokenCore(SecurityKeyIdentifierClause,SecurityToken)\n  nameWithType: SessionSecurityTokenResolver.TryResolveTokenCore(SecurityKeyIdentifierClause,SecurityToken)\n  fullName: System.IdentityModel.Services.SessionSecurityTokenResolver.TryResolveTokenCore(SecurityKeyIdentifierClause,SecurityToken)\n  type: Method\n  assemblies:\n  - System.IdentityModel.Services\n  namespace: System.IdentityModel.Services\n  summary: Attempts to resolve the token from the specified key identifier clause.\n  syntax:\n    content: protected override bool TryResolveTokenCore (System.IdentityModel.Tokens.SecurityKeyIdentifierClause keyIdentifierClause, out System.IdentityModel.Tokens.SecurityToken token);\n    parameters:\n    - id: keyIdentifierClause\n      type: System.IdentityModel.Tokens.SecurityKeyIdentifierClause\n      description: The key identifier clause.\n    - id: token\n      type: System.IdentityModel.Tokens.SecurityToken\n      description: When this method returns, contains the resolved key core. This parameter is passed uninitialized.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the key token was successfully resolved; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.IdentityModel.Services.SessionSecurityTokenResolver.TryResolveTokenCore*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.IdentityModel.Selectors.SecurityTokenResolver\n  isExternal: false\n  name: System.IdentityModel.Selectors.SecurityTokenResolver\n- uid: System.IdentityModel.Services.SessionSecurityTokenResolver.#ctor(System.IdentityModel.Tokens.SessionSecurityTokenCache,System.String)\n  parent: System.IdentityModel.Services.SessionSecurityTokenResolver\n  isExternal: false\n  name: SessionSecurityTokenResolver(SessionSecurityTokenCache,String)\n  nameWithType: SessionSecurityTokenResolver.SessionSecurityTokenResolver(SessionSecurityTokenCache,String)\n  fullName: System.IdentityModel.Services.SessionSecurityTokenResolver.SessionSecurityTokenResolver(SessionSecurityTokenCache,String)\n- uid: System.IdentityModel.Tokens.SessionSecurityTokenCache\n  parent: System.IdentityModel.Tokens\n  isExternal: false\n  name: SessionSecurityTokenCache\n  nameWithType: SessionSecurityTokenCache\n  fullName: System.IdentityModel.Tokens.SessionSecurityTokenCache\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.IdentityModel.Services.SessionSecurityTokenResolver.TryResolveSecurityKeyCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityKey@)\n  parent: System.IdentityModel.Services.SessionSecurityTokenResolver\n  isExternal: false\n  name: TryResolveSecurityKeyCore(SecurityKeyIdentifierClause,SecurityKey)\n  nameWithType: SessionSecurityTokenResolver.TryResolveSecurityKeyCore(SecurityKeyIdentifierClause,SecurityKey)\n  fullName: System.IdentityModel.Services.SessionSecurityTokenResolver.TryResolveSecurityKeyCore(SecurityKeyIdentifierClause,SecurityKey)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.IdentityModel.Tokens.SecurityKeyIdentifierClause\n  parent: System.IdentityModel.Tokens\n  isExternal: false\n  name: SecurityKeyIdentifierClause\n  nameWithType: SecurityKeyIdentifierClause\n  fullName: System.IdentityModel.Tokens.SecurityKeyIdentifierClause\n- uid: System.IdentityModel.Tokens.SecurityKey\n  parent: System.IdentityModel.Tokens\n  isExternal: false\n  name: SecurityKey\n  nameWithType: SecurityKey\n  fullName: System.IdentityModel.Tokens.SecurityKey\n- uid: System.IdentityModel.Services.SessionSecurityTokenResolver.TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifier,System.IdentityModel.Tokens.SecurityToken@)\n  parent: System.IdentityModel.Services.SessionSecurityTokenResolver\n  isExternal: false\n  name: TryResolveTokenCore(SecurityKeyIdentifier,SecurityToken)\n  nameWithType: SessionSecurityTokenResolver.TryResolveTokenCore(SecurityKeyIdentifier,SecurityToken)\n  fullName: System.IdentityModel.Services.SessionSecurityTokenResolver.TryResolveTokenCore(SecurityKeyIdentifier,SecurityToken)\n- uid: System.IdentityModel.Tokens.SecurityKeyIdentifier\n  parent: System.IdentityModel.Tokens\n  isExternal: false\n  name: SecurityKeyIdentifier\n  nameWithType: SecurityKeyIdentifier\n  fullName: System.IdentityModel.Tokens.SecurityKeyIdentifier\n- uid: System.IdentityModel.Tokens.SecurityToken\n  parent: System.IdentityModel.Tokens\n  isExternal: false\n  name: SecurityToken\n  nameWithType: SecurityToken\n  fullName: System.IdentityModel.Tokens.SecurityToken\n- uid: System.IdentityModel.Services.SessionSecurityTokenResolver.TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityToken@)\n  parent: System.IdentityModel.Services.SessionSecurityTokenResolver\n  isExternal: false\n  name: TryResolveTokenCore(SecurityKeyIdentifierClause,SecurityToken)\n  nameWithType: SessionSecurityTokenResolver.TryResolveTokenCore(SecurityKeyIdentifierClause,SecurityToken)\n  fullName: System.IdentityModel.Services.SessionSecurityTokenResolver.TryResolveTokenCore(SecurityKeyIdentifierClause,SecurityToken)\n- uid: System.IdentityModel.Services.SessionSecurityTokenResolver.#ctor*\n  parent: System.IdentityModel.Services.SessionSecurityTokenResolver\n  isExternal: false\n  name: SessionSecurityTokenResolver\n  nameWithType: SessionSecurityTokenResolver.SessionSecurityTokenResolver\n- uid: System.IdentityModel.Services.SessionSecurityTokenResolver.TryResolveSecurityKeyCore*\n  parent: System.IdentityModel.Services.SessionSecurityTokenResolver\n  isExternal: false\n  name: TryResolveSecurityKeyCore\n  nameWithType: SessionSecurityTokenResolver.TryResolveSecurityKeyCore\n- uid: System.IdentityModel.Services.SessionSecurityTokenResolver.TryResolveTokenCore*\n  parent: System.IdentityModel.Services.SessionSecurityTokenResolver\n  isExternal: false\n  name: TryResolveTokenCore\n  nameWithType: SessionSecurityTokenResolver.TryResolveTokenCore\n"}