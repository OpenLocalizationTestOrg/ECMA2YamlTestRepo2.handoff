{"nodes":[{"pos":[1610,1738],"content":"Defines a set of properties and methods for generating source code within the ASP.NET build environment. This class is abstract.","needQuote":true,"needEscape":true,"nodes":[{"content":"Defines a set of properties and methods for generating source code within the ASP.NET build environment. This class is abstract.","pos":[0,128],"nodes":[{"content":"Defines a set of properties and methods for generating source code within the ASP.NET build environment.","pos":[0,104]},{"content":"This class is abstract.","pos":[105,128]}]}]},{"pos":[1751,6677],"content":"The ASP.NET build environment uses BuildProvider objects to generate source code for different file types within an application. Classes derived from BuildProvider predominantly provide source code for files, Web pages, resources, and other custom items.       Typically, you do not create an instance of the BuildProvider class directly. Instead, you implement a class that derives from BuildProvider, and configure the BuildProvider implementation for use within the ASP.NET build environment.       Instances of the BuildProvider class are used with <xref:System.Web.Compilation.AssemblyBuilder> objects to build one or more files into a compiled assembly. A BuildProvider instance generates source code in the appropriate language for individual files, and the <xref:System.Web.Compilation.AssemblyBuilder> object combines the source contributed by each BuildProvider instance into a single assembly.       The ASP.NET build environment uses instances of the BuildProvider class to build files within an application. The <xref:System.Web.Compilation.BuildProvider.VirtualPath%2A> property of the BuildProvider class indicates the path of the file to be built. The file extension of each file within an application is mapped to a corresponding build provider. The ASP.NET build environment initializes a BuildProvider instance for each file based on the file extension, and uses the BuildProvider methods to generate source code for the file. The ASP.NET build environment passes an <xref:System.Web.Compilation.AssemblyBuilder> object based on the preferred compiler language and the context of the file to the BuildProvider methods when building an assembly from one or more files, so that the BuildProvider instance can contribute source code for its file to the overall assembly.       To define custom build actions for a file type within an ASP.NET application, you must derive a class from BuildProvider, implement members within the derived class for building the file type, and configure the build provider for the corresponding file extension within the application configuration file.       The  specifies the file extension for supported files, and whether the build provider supports code files, Web files, resource files or all files. Use the `type` attribute to specify the fully qualified type name of the build provider implementation. Use the <xref:System.Web.Compilation.BuildProviderAppliesToAttribute> class to specify whether the build provider applies to files in the App_Code directory, to files in a Web content directory, to global or local resources, or to all files. Use the `extension` attribute to specify the file extension used to identify files that the BuildProvider class supports. Use the <xref:System.Web.Configuration.BuildProviderCollection> class to examine build providers in a configuration file. For more information about configuring a build provider, see [buildProviders Element for compilation (ASP.NET Settings Schema)](http://msdn.microsoft.com/en-us/40fa889d-5412-487a-b6a9-21eb011c2384).       To implement a build provider that generates source code for a custom file type, derive a class from BuildProvider, and override the <xref:System.Web.Compilation.BuildProvider.GenerateCode%2A> method to generate source code for the supported file type. The generated source is added to the <xref:System.Web.Compilation.AssemblyBuilder> object in the form of a CodeDOM graph, or as content that represents a physical source code file. If the build provider requires a specific programming language, override the <xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A> property to return a <xref:System.Web.Compilation.CompilerType> object for the supported programming language. If the build provider does not require a specific programming language, do not override the <xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A> property; use the base class implementation, which indicates that the build provider can use any .NET Framework language, such as Visual Basic or C#.       To implement a build provider that generates source code for Web content, derive a class from BuildProvider and override the <xref:System.Web.Compilation.BuildProvider.GetGeneratedType%2A> method to return the <xref:System.Type> for the class generated by BuildProvider. Override the <xref:System.Web.Compilation.BuildProvider.GenerateCode%2A> method to generate source code for the type provided by the supported file.      > [!NOTE] >  Adding a customized BuildProvider class to the Web.config file works in an ASP.NET Web site but does not work in an ASP.NET Web application project. In a Web application project, the code that is generated by the BuildProvider class cannot be included in the application. For more information, see [ASP.NET Web Application Project Precompilation Overview](http://msdn.microsoft.com/en-us/b940abbd-178d-4570-b441-52914fa7b887).","needQuote":false,"needEscape":true,"nodes":[{"content":"The ASP.NET build environment uses BuildProvider objects to generate source code for different file types within an application.","pos":[0,128]},{"content":"Classes derived from BuildProvider predominantly provide source code for files, Web pages, resources, and other custom items.","pos":[129,254]},{"content":"Typically, you do not create an instance of the BuildProvider class directly.","pos":[261,338]},{"content":"Instead, you implement a class that derives from BuildProvider, and configure the BuildProvider implementation for use within the ASP.NET build environment.","pos":[339,495]},{"content":"Instances of the BuildProvider class are used with &lt;xref:System.Web.Compilation.AssemblyBuilder&gt; objects to build one or more files into a compiled assembly.","pos":[502,659],"source":"       Instances of the BuildProvider class are used with <xref:System.Web.Compilation.AssemblyBuilder> objects to build one or more files into a compiled assembly."},{"content":"A BuildProvider instance generates source code in the appropriate language for individual files, and the &lt;xref:System.Web.Compilation.AssemblyBuilder&gt; object combines the source contributed by each BuildProvider instance into a single assembly.","pos":[660,904],"source":" A BuildProvider instance generates source code in the appropriate language for individual files, and the <xref:System.Web.Compilation.AssemblyBuilder> object combines the source contributed by each BuildProvider instance into a single assembly."},{"content":"The ASP.NET build environment uses instances of the BuildProvider class to build files within an application.","pos":[911,1020]},{"content":"The &lt;xref:System.Web.Compilation.BuildProvider.VirtualPath%2A&gt; property of the BuildProvider class indicates the path of the file to be built.","pos":[1021,1163],"source":" The <xref:System.Web.Compilation.BuildProvider.VirtualPath%2A> property of the BuildProvider class indicates the path of the file to be built."},{"content":"The file extension of each file within an application is mapped to a corresponding build provider.","pos":[1164,1262]},{"content":"The ASP.NET build environment initializes a BuildProvider instance for each file based on the file extension, and uses the BuildProvider methods to generate source code for the file.","pos":[1263,1445]},{"content":"The ASP.NET build environment passes an &lt;xref:System.Web.Compilation.AssemblyBuilder&gt; object based on the preferred compiler language and the context of the file to the BuildProvider methods when building an assembly from one or more files, so that the BuildProvider instance can contribute source code for its file to the overall assembly.","pos":[1446,1786],"source":" The ASP.NET build environment passes an <xref:System.Web.Compilation.AssemblyBuilder> object based on the preferred compiler language and the context of the file to the BuildProvider methods when building an assembly from one or more files, so that the BuildProvider instance can contribute source code for its file to the overall assembly."},{"content":"To define custom build actions for a file type within an ASP.NET application, you must derive a class from BuildProvider, implement members within the derived class for building the file type, and configure the build provider for the corresponding file extension within the application configuration file.","pos":[1793,2098]},{"content":"The  specifies the file extension for supported files, and whether the build provider supports code files, Web files, resource files or all files.","pos":[2105,2251]},{"content":"Use the <ph id=\"ph1\">`type`</ph> attribute to specify the fully qualified type name of the build provider implementation.","pos":[2252,2355],"source":" Use the `type` attribute to specify the fully qualified type name of the build provider implementation."},{"content":"Use the &lt;xref:System.Web.Compilation.BuildProviderAppliesToAttribute&gt; class to specify whether the build provider applies to files in the App_Code directory, to files in a Web content directory, to global or local resources, or to all files.","pos":[2356,2597],"source":" Use the <xref:System.Web.Compilation.BuildProviderAppliesToAttribute> class to specify whether the build provider applies to files in the App_Code directory, to files in a Web content directory, to global or local resources, or to all files."},{"content":"Use the <ph id=\"ph1\">`extension`</ph> attribute to specify the file extension used to identify files that the BuildProvider class supports.","pos":[2598,2719],"source":" Use the `extension` attribute to specify the file extension used to identify files that the BuildProvider class supports."},{"content":"Use the &lt;xref:System.Web.Configuration.BuildProviderCollection&gt; class to examine build providers in a configuration file.","pos":[2720,2841],"source":" Use the <xref:System.Web.Configuration.BuildProviderCollection> class to examine build providers in a configuration file."},{"content":"For more information about configuring a build provider, see <bpt id=\"p1\">[</bpt>buildProviders Element for compilation (ASP.NET Settings Schema)<ept id=\"p1\">](http://msdn.microsoft.com/en-us/40fa889d-5412-487a-b6a9-21eb011c2384)</ept>.","pos":[2842,3040],"source":" For more information about configuring a build provider, see [buildProviders Element for compilation (ASP.NET Settings Schema)](http://msdn.microsoft.com/en-us/40fa889d-5412-487a-b6a9-21eb011c2384)."},{"content":"To implement a build provider that generates source code for a custom file type, derive a class from BuildProvider, and override the &lt;xref:System.Web.Compilation.BuildProvider.GenerateCode%2A&gt; method to generate source code for the supported file type.","pos":[3047,3299],"source":"       To implement a build provider that generates source code for a custom file type, derive a class from BuildProvider, and override the <xref:System.Web.Compilation.BuildProvider.GenerateCode%2A> method to generate source code for the supported file type."},{"content":"The generated source is added to the &lt;xref:System.Web.Compilation.AssemblyBuilder&gt; object in the form of a CodeDOM graph, or as content that represents a physical source code file.","pos":[3300,3480],"source":" The generated source is added to the <xref:System.Web.Compilation.AssemblyBuilder> object in the form of a CodeDOM graph, or as content that represents a physical source code file."},{"content":"If the build provider requires a specific programming language, override the &lt;xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A&gt; property to return a &lt;xref:System.Web.Compilation.CompilerType&gt; object for the supported programming language.","pos":[3481,3732],"source":" If the build provider requires a specific programming language, override the <xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A> property to return a <xref:System.Web.Compilation.CompilerType> object for the supported programming language."},{"content":"If the build provider does not require a specific programming language, do not override the &lt;xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A&gt; property; use the base class implementation, which indicates that the build provider can use any .NET Framework language, such as Visual Basic or C#.","pos":[3733,4038],"source":" If the build provider does not require a specific programming language, do not override the <xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A> property; use the base class implementation, which indicates that the build provider can use any .NET Framework language, such as Visual Basic or C#."},{"content":"To implement a build provider that generates source code for Web content, derive a class from BuildProvider and override the &lt;xref:System.Web.Compilation.BuildProvider.GetGeneratedType%2A&gt; method to return the &lt;xref:System.Type&gt; for the class generated by BuildProvider.","pos":[4045,4315],"source":"       To implement a build provider that generates source code for Web content, derive a class from BuildProvider and override the <xref:System.Web.Compilation.BuildProvider.GetGeneratedType%2A> method to return the <xref:System.Type> for the class generated by BuildProvider."},{"content":"Override the &lt;xref:System.Web.Compilation.BuildProvider.GenerateCode%2A&gt; method to generate source code for the type provided by the supported file.","pos":[4316,4464],"source":" Override the <xref:System.Web.Compilation.BuildProvider.GenerateCode%2A> method to generate source code for the type provided by the supported file."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Adding a customized BuildProvider class to the Web.config file works in an ASP.NET Web site but does not work in an ASP.NET Web application project.","pos":[4470,4631],"source":"      > [!NOTE] >  Adding a customized BuildProvider class to the Web.config file works in an ASP.NET Web site but does not work in an ASP.NET Web application project."},{"content":"In a Web application project, the code that is generated by the BuildProvider class cannot be included in the application.","pos":[4632,4754]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>ASP.NET Web Application Project Precompilation Overview<ept id=\"p1\">](http://msdn.microsoft.com/en-us/b940abbd-178d-4570-b441-52914fa7b887)</ept>.","pos":[4755,4909],"source":" For more information, see [ASP.NET Web Application Project Precompilation Overview](http://msdn.microsoft.com/en-us/b940abbd-178d-4570-b441-52914fa7b887)."}]},{"pos":[8019,8117],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Web.Compilation.BuildProvider\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Web.Compilation.BuildProvider\"></xref> class."},{"pos":[8130,8503],"content":"Because the <xref:System.Web.Compilation.BuildProvider> class is abstract, you cannot create an instance of <xref:System.Web.Compilation.BuildProvider> directly using the constructor.       When deriving from the <xref:System.Web.Compilation.BuildProvider> class, override the constructor to implement custom initialization actions for your build provider implementation.","needQuote":false,"needEscape":true,"nodes":[{"content":"Because the <xref:System.Web.Compilation.BuildProvider> class is abstract, you cannot create an instance of <xref:System.Web.Compilation.BuildProvider> directly using the constructor.       When deriving from the <xref:System.Web.Compilation.BuildProvider> class, override the constructor to implement custom initialization actions for your build provider implementation.","pos":[0,371],"nodes":[{"content":"Because the &lt;xref:System.Web.Compilation.BuildProvider&gt; class is abstract, you cannot create an instance of &lt;xref:System.Web.Compilation.BuildProvider&gt; directly using the constructor.","pos":[0,183],"source":"Because the <xref:System.Web.Compilation.BuildProvider> class is abstract, you cannot create an instance of <xref:System.Web.Compilation.BuildProvider> directly using the constructor."},{"content":"When deriving from the &lt;xref:System.Web.Compilation.BuildProvider&gt; class, override the constructor to implement custom initialization actions for your build provider implementation.","pos":[190,371],"source":"       When deriving from the <xref:System.Web.Compilation.BuildProvider> class, override the constructor to implement custom initialization actions for your build provider implementation."}]}]},{"pos":[9053,9154],"content":"Represents the compiler type used by a build provider to generate source code for a custom file type.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the compiler type used by a build provider to generate source code for a custom file type.","pos":[0,101]}]},{"pos":[9167,10149],"content":"Use the CodeCompilerType property to provide the settings for compiling source code for an implementation of <xref:System.Web.Compilation.BuildProvider>. The CodeCompilerType property is `null` if the build provider does not require a specific code language for generating and compiling source code.       To set the value for a <xref:System.Web.Compilation.CompilerType> object within a build provider implementation, use the <xref:System.Web.Compilation.BuildProvider.GetDefaultCompilerType%2A> or <xref:System.Web.Compilation.BuildProvider.GetDefaultCompilerTypeForLanguage%2A> method.       The <xref:System.Web.Compilation.CompilerType.CodeDomProviderType%2A> property specifies the <xref:System.CodeDom.Compiler.CodeDomProvider> implementation that is used to generate and compile source code for a build provider. The <xref:System.Web.Compilation.CompilerType.CompilerParameters%2A> property defines the settings that are used to compile the source code into an assembly.","needQuote":false,"needEscape":true,"nodes":[{"content":"Use the CodeCompilerType property to provide the settings for compiling source code for an implementation of &lt;xref:System.Web.Compilation.BuildProvider&gt;.","pos":[0,153],"source":"Use the CodeCompilerType property to provide the settings for compiling source code for an implementation of <xref:System.Web.Compilation.BuildProvider>."},{"content":"The CodeCompilerType property is <ph id=\"ph1\">`null`</ph> if the build provider does not require a specific code language for generating and compiling source code.","pos":[154,299],"source":" The CodeCompilerType property is `null` if the build provider does not require a specific code language for generating and compiling source code."},{"content":"To set the value for a &lt;xref:System.Web.Compilation.CompilerType&gt; object within a build provider implementation, use the &lt;xref:System.Web.Compilation.BuildProvider.GetDefaultCompilerType%2A&gt; or &lt;xref:System.Web.Compilation.BuildProvider.GetDefaultCompilerTypeForLanguage%2A&gt; method.","pos":[306,588],"source":"       To set the value for a <xref:System.Web.Compilation.CompilerType> object within a build provider implementation, use the <xref:System.Web.Compilation.BuildProvider.GetDefaultCompilerType%2A> or <xref:System.Web.Compilation.BuildProvider.GetDefaultCompilerTypeForLanguage%2A> method."},{"content":"The &lt;xref:System.Web.Compilation.CompilerType.CodeDomProviderType%2A&gt; property specifies the &lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt; implementation that is used to generate and compile source code for a build provider.","pos":[595,820],"source":"       The <xref:System.Web.Compilation.CompilerType.CodeDomProviderType%2A> property specifies the <xref:System.CodeDom.Compiler.CodeDomProvider> implementation that is used to generate and compile source code for a build provider."},{"content":"The &lt;xref:System.Web.Compilation.CompilerType.CompilerParameters%2A&gt; property defines the settings that are used to compile the source code into an assembly.","pos":[821,978],"source":" The <xref:System.Web.Compilation.CompilerType.CompilerParameters%2A> property defines the settings that are used to compile the source code into an assembly."}]},{"pos":[10967,11238],"content":"A read-only <xref href=\"System.Web.Compilation.CompilerType\"></xref> representing the code generator, code compiler, and compiler settings used to build source code for the virtual path. The base class returns <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"A read-only <bpt id=\"p1\">&lt;xref href=\"System.Web.Compilation.CompilerType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> representing the code generator, code compiler, and compiler settings used to build source code for the virtual path.","pos":[0,186],"source":"A read-only <xref href=\"System.Web.Compilation.CompilerType\"></xref> representing the code generator, code compiler, and compiler settings used to build source code for the virtual path."},{"content":"The base class returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[187,271],"source":" The base class returns <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[11837,11960],"content":"Generates source code for the virtual path of the build provider, and adds the source code to a specified assembly builder.","needQuote":true,"needEscape":true,"nodes":[{"content":"Generates source code for the virtual path of the build provider, and adds the source code to a specified assembly builder.","pos":[0,123]}]},{"pos":[11973,13194],"content":"To implement a build provider that generates source code for a custom file type, derive a class from the <xref:System.Web.Compilation.BuildProvider> class, and override the GenerateCode method to generate source code for the supported file type.       Typically, a build provider's GenerateCode implementation reads the <xref:System.Web.Compilation.BuildProvider.VirtualPath%2A> property, parses the contents, and adds the generated source code to the specified <xref:System.Web.Compilation.AssemblyBuilder> object. You can contribute source code to the assembly in the form of a <xref:System.IO.TextWriter> object or a CodeDOM graph. To add source code to the assembly through a <xref:System.IO.TextWriter> object, use the <xref:System.Web.Compilation.AssemblyBuilder.CreateCodeFile%2A> method. To add source code in a CodeDOM graph to the assembly, use the <xref:System.Web.Compilation.AssemblyBuilder.AddCodeCompileUnit%2A> method.       If the build provider generates source code in a specific programming language, you must override the <xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A> property to return a <xref:System.Web.Compilation.CompilerType> object for the supported programming language.","needQuote":false,"needEscape":true,"nodes":[{"content":"To implement a build provider that generates source code for a custom file type, derive a class from the <xref:System.Web.Compilation.BuildProvider> class, and override the GenerateCode method to generate source code for the supported file type.       Typically, a build provider's GenerateCode implementation reads the <xref:System.Web.Compilation.BuildProvider.VirtualPath%2A> property, parses the contents, and adds the generated source code to the specified <xref:System.Web.Compilation.AssemblyBuilder> object. You can contribute source code to the assembly in the form of a <xref:System.IO.TextWriter> object or a CodeDOM graph. To add source code to the assembly through a <xref:System.IO.TextWriter> object, use the <xref:System.Web.Compilation.AssemblyBuilder.CreateCodeFile%2A> method. To add source code in a CodeDOM graph to the assembly, use the <xref:System.Web.Compilation.AssemblyBuilder.AddCodeCompileUnit%2A> method.       If the build provider generates source code in a specific programming language, you must override the <xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A> property to return a <xref:System.Web.Compilation.CompilerType> object for the supported programming language.","pos":[0,1217],"nodes":[{"content":"To implement a build provider that generates source code for a custom file type, derive a class from the &lt;xref:System.Web.Compilation.BuildProvider&gt; class, and override the GenerateCode method to generate source code for the supported file type.","pos":[0,245],"source":"To implement a build provider that generates source code for a custom file type, derive a class from the <xref:System.Web.Compilation.BuildProvider> class, and override the GenerateCode method to generate source code for the supported file type."},{"content":"Typically, a build provider's GenerateCode implementation reads the &lt;xref:System.Web.Compilation.BuildProvider.VirtualPath%2A&gt; property, parses the contents, and adds the generated source code to the specified &lt;xref:System.Web.Compilation.AssemblyBuilder&gt; object.","pos":[252,515],"source":"       Typically, a build provider's GenerateCode implementation reads the <xref:System.Web.Compilation.BuildProvider.VirtualPath%2A> property, parses the contents, and adds the generated source code to the specified <xref:System.Web.Compilation.AssemblyBuilder> object."},{"content":"You can contribute source code to the assembly in the form of a &lt;xref:System.IO.TextWriter&gt; object or a CodeDOM graph.","pos":[516,634],"source":" You can contribute source code to the assembly in the form of a <xref:System.IO.TextWriter> object or a CodeDOM graph."},{"content":"To add source code to the assembly through a &lt;xref:System.IO.TextWriter&gt; object, use the &lt;xref:System.Web.Compilation.AssemblyBuilder.CreateCodeFile%2A&gt; method.","pos":[635,795],"source":" To add source code to the assembly through a <xref:System.IO.TextWriter> object, use the <xref:System.Web.Compilation.AssemblyBuilder.CreateCodeFile%2A> method."},{"content":"To add source code in a CodeDOM graph to the assembly, use the &lt;xref:System.Web.Compilation.AssemblyBuilder.AddCodeCompileUnit%2A&gt; method.","pos":[796,934],"source":" To add source code in a CodeDOM graph to the assembly, use the <xref:System.Web.Compilation.AssemblyBuilder.AddCodeCompileUnit%2A> method."},{"content":"If the build provider generates source code in a specific programming language, you must override the &lt;xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A&gt; property to return a &lt;xref:System.Web.Compilation.CompilerType&gt; object for the supported programming language.","pos":[941,1217],"source":"       If the build provider generates source code in a specific programming language, you must override the <xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A> property to return a <xref:System.Web.Compilation.CompilerType> object for the supported programming language."}]}]},{"pos":[14055,14140],"content":"The assembly builder that references the source code generated by the build provider.","needQuote":true,"needEscape":true,"nodes":[{"content":"The assembly builder that references the source code generated by the build provider.","pos":[0,85]}]},{"pos":[14739,14796],"content":"Represents the container for the generated CodeDOM graph.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the container for the generated CodeDOM graph.","pos":[0,57]}]},{"pos":[14808,14961],"content":"This method can be used through the <xref:System.Web.Compilation.ClientBuildManager> class for syntax highlighting and designer support in Visual Studio.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method can be used through the &lt;xref:System.Web.Compilation.ClientBuildManager&gt; class for syntax highlighting and designer support in Visual Studio.","pos":[0,153],"source":"This method can be used through the <xref:System.Web.Compilation.ClientBuildManager> class for syntax highlighting and designer support in Visual Studio."}]},{"pos":[15213,15379],"content":"When this method returns, contains a dictionary that contains all associated line numbers and line pragmas of the source code. This parameter is passed uninitialized.","needQuote":true,"needEscape":true,"nodes":[{"content":"When this method returns, contains a dictionary that contains all associated line numbers and line pragmas of the source code. This parameter is passed uninitialized.","pos":[0,166],"nodes":[{"content":"When this method returns, contains a dictionary that contains all associated line numbers and line pragmas of the source code.","pos":[0,126]},{"content":"This parameter is passed uninitialized.","pos":[127,166]}]}]},{"pos":[15454,15582],"content":"The container for the CodeDOM graph that is generated by the <bpt id=\"p1\">&lt;xref href=\"System.Web.Compilation.BuildProvider\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance.","needQuote":true,"needEscape":true,"source":"The container for the CodeDOM graph that is generated by the <xref href=\"System.Web.Compilation.BuildProvider\"></xref> instance."},{"pos":[16200,16260],"content":"Generates a string to be persisted in the compiled assembly.","needQuote":true,"needEscape":true,"nodes":[{"content":"Generates a string to be persisted in the compiled assembly.","pos":[0,60]}]},{"pos":[16273,17259],"content":"The <xref:System.Web.Compilation.BuildManager.GetCompiledCustomString%2A> method of a <xref:System.Web.Compilation.BuildManager> object creates an instance of a build provider for an input virtual path, and calls the GetCustomString method on the <xref:System.Web.Compilation.BuildProvider> object.       The base <xref:System.Web.Compilation.BuildProvider> class returns `null` for the GetCustomString method, indicating that GetCustomString is not implemented.       Certain build provider implementations can implement GetCustomString in place of the <xref:System.Web.Compilation.BuildProvider.GetGeneratedType%2A> method. A <xref:System.Web.Compilation.BuildProvider> object typically uses <xref:System.Web.Compilation.BuildProvider.GetGeneratedType%2A> to return a <xref:System.Type> object for a virtual path. However, the GetCustomString method can be used to indicate that a <xref:System.Web.Compilation.BuildProvider> object can generate multiple types from a virtual path.","needQuote":false,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Web.Compilation.BuildManager.GetCompiledCustomString%2A&gt; method of a &lt;xref:System.Web.Compilation.BuildManager&gt; object creates an instance of a build provider for an input virtual path, and calls the GetCustomString method on the &lt;xref:System.Web.Compilation.BuildProvider&gt; object.","pos":[0,298],"source":"The <xref:System.Web.Compilation.BuildManager.GetCompiledCustomString%2A> method of a <xref:System.Web.Compilation.BuildManager> object creates an instance of a build provider for an input virtual path, and calls the GetCustomString method on the <xref:System.Web.Compilation.BuildProvider> object."},{"content":"The base &lt;xref:System.Web.Compilation.BuildProvider&gt; class returns <ph id=\"ph1\">`null`</ph> for the GetCustomString method, indicating that GetCustomString is not implemented.","pos":[305,462],"source":"       The base <xref:System.Web.Compilation.BuildProvider> class returns `null` for the GetCustomString method, indicating that GetCustomString is not implemented."},{"content":"Certain build provider implementations can implement GetCustomString in place of the &lt;xref:System.Web.Compilation.BuildProvider.GetGeneratedType%2A&gt; method.","pos":[469,625],"source":"       Certain build provider implementations can implement GetCustomString in place of the <xref:System.Web.Compilation.BuildProvider.GetGeneratedType%2A> method."},{"content":"A &lt;xref:System.Web.Compilation.BuildProvider&gt; object typically uses &lt;xref:System.Web.Compilation.BuildProvider.GetGeneratedType%2A&gt; to return a &lt;xref:System.Type&gt; object for a virtual path.","pos":[626,815],"source":" A <xref:System.Web.Compilation.BuildProvider> object typically uses <xref:System.Web.Compilation.BuildProvider.GetGeneratedType%2A> to return a <xref:System.Type> object for a virtual path."},{"content":"However, the GetCustomString method can be used to indicate that a &lt;xref:System.Web.Compilation.BuildProvider&gt; object can generate multiple types from a virtual path.","pos":[816,982],"source":" However, the GetCustomString method can be used to indicate that a <xref:System.Web.Compilation.BuildProvider> object can generate multiple types from a virtual path."}]},{"pos":[17478,17540],"content":"The compilation results for the build provider's virtual path.","needQuote":true,"needEscape":true,"nodes":[{"content":"The compilation results for the build provider's virtual path.","pos":[0,62]}]},{"pos":[17598,17822],"content":"A string to be persisted in the build environment, or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the <bpt id=\"p2\">&lt;xref href=\"System.Web.Compilation.BuildProvider\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> instance does not implement GetCustomString.","needQuote":true,"needEscape":true,"source":"A string to be persisted in the build environment, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the <xref href=\"System.Web.Compilation.BuildProvider\"></xref> instance does not implement GetCustomString."},{"pos":[18345,18419],"content":"Returns the compiler settings for the default language in the application.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the compiler settings for the default language in the application.","pos":[0,74]}]},{"pos":[18432,19320],"content":"Use the GetDefaultCompilerType method to examine the default compiler type for a build provider. Use the <xref:System.Web.Compilation.BuildProvider.GetDefaultCompilerTypeForLanguage%2A> method to examine the compiler type configured in a build provider for a specific language name.       The base <xref:System.Web.Compilation.BuildProvider> class determines the default compiler type using the `defaultLanguage` attribute value in the  section of the application configuration file. If there is no default language setting in the compilation section, the default compiler type is set using the <xref:Microsoft.VisualBasic.VBCodeProvider> language provider.       When deriving from the <xref:System.Web.Compilation.BuildProvider> class, you can use GetDefaultCompilerType to set the <xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A> property within your implementation.","needQuote":false,"needEscape":true,"nodes":[{"content":"Use the GetDefaultCompilerType method to examine the default compiler type for a build provider.","pos":[0,96]},{"content":"Use the &lt;xref:System.Web.Compilation.BuildProvider.GetDefaultCompilerTypeForLanguage%2A&gt; method to examine the compiler type configured in a build provider for a specific language name.","pos":[97,282],"source":" Use the <xref:System.Web.Compilation.BuildProvider.GetDefaultCompilerTypeForLanguage%2A> method to examine the compiler type configured in a build provider for a specific language name."},{"content":"The base &lt;xref:System.Web.Compilation.BuildProvider&gt; class determines the default compiler type using the <ph id=\"ph1\">`defaultLanguage`</ph> attribute value in the  section of the application configuration file.","pos":[289,483],"source":"       The base <xref:System.Web.Compilation.BuildProvider> class determines the default compiler type using the `defaultLanguage` attribute value in the  section of the application configuration file."},{"content":"If there is no default language setting in the compilation section, the default compiler type is set using the &lt;xref:Microsoft.VisualBasic.VBCodeProvider&gt; language provider.","pos":[484,657],"source":" If there is no default language setting in the compilation section, the default compiler type is set using the <xref:Microsoft.VisualBasic.VBCodeProvider> language provider."},{"content":"When deriving from the &lt;xref:System.Web.Compilation.BuildProvider&gt; class, you can use GetDefaultCompilerType to set the &lt;xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A&gt; property within your implementation.","pos":[664,884],"source":"       When deriving from the <xref:System.Web.Compilation.BuildProvider> class, you can use GetDefaultCompilerType to set the <xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A> property within your implementation."}]},{"pos":[19516,19746],"content":"A <xref href=\"System.Web.Compilation.CompilerType\"></xref> that represents the compiler settings for the default language in the application. The base class returns the default compiler based on the application configuration file.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Web.Compilation.CompilerType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the compiler settings for the default language in the application.","pos":[0,141],"source":"A <xref href=\"System.Web.Compilation.CompilerType\"></xref> that represents the compiler settings for the default language in the application."},{"content":"The base class returns the default compiler based on the application configuration file.","pos":[142,230]}]},{"pos":[20379,20464],"content":"Returns the compiler settings for the build provider based on the specified language.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the compiler settings for the build provider based on the specified language.","pos":[0,85]}]},{"pos":[20477,21742],"content":"Use the GetDefaultCompilerTypeForLanguage method to examine the compiler type configured in the build provider for a specific language name. Use the <xref:System.Web.Compilation.BuildProvider.GetDefaultCompilerType%2A> method to examine the default compiler type for a build provider.       The base <xref:System.Web.Compilation.BuildProvider> class determines the default compiler type using the <xref:System.Web.Configuration.Compiler> elements in the <xref:System.Web.Configuration.CompilationSection.Compilers%2A> property of the <xref:System.Web.Configuration.CompilationSection> object for the configuration file. This is equivalent to examining the  elements in the  and the  elements in the  sections of the configuration file. For example, for the `language` value VB, the base class method returns a <xref:System.Web.Compilation.CompilerType> object that corresponds to the configured settings for an instance of <xref:Microsoft.VisualBasic.VBCodeProvider?displayProperty=fullName>.       When you derive from the <xref:System.Web.Compilation.BuildProvider> class, you can use GetDefaultCompilerTypeForLanguage to set the <xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A> property value for the language supported by your implementation.","needQuote":false,"needEscape":true,"nodes":[{"content":"Use the GetDefaultCompilerTypeForLanguage method to examine the compiler type configured in the build provider for a specific language name.","pos":[0,140]},{"content":"Use the &lt;xref:System.Web.Compilation.BuildProvider.GetDefaultCompilerType%2A&gt; method to examine the default compiler type for a build provider.","pos":[141,284],"source":" Use the <xref:System.Web.Compilation.BuildProvider.GetDefaultCompilerType%2A> method to examine the default compiler type for a build provider."},{"content":"The base &lt;xref:System.Web.Compilation.BuildProvider&gt; class determines the default compiler type using the &lt;xref:System.Web.Configuration.Compiler&gt; elements in the &lt;xref:System.Web.Configuration.CompilationSection.Compilers%2A&gt; property of the &lt;xref:System.Web.Configuration.CompilationSection&gt; object for the configuration file.","pos":[291,619],"source":"       The base <xref:System.Web.Compilation.BuildProvider> class determines the default compiler type using the <xref:System.Web.Configuration.Compiler> elements in the <xref:System.Web.Configuration.CompilationSection.Compilers%2A> property of the <xref:System.Web.Configuration.CompilationSection> object for the configuration file."},{"content":"This is equivalent to examining the  elements in the  and the  elements in the  sections of the configuration file.","pos":[620,735]},{"content":"For example, for the <ph id=\"ph1\">`language`</ph> value VB, the base class method returns a &lt;xref:System.Web.Compilation.CompilerType&gt; object that corresponds to the configured settings for an instance of &lt;xref:Microsoft.VisualBasic.VBCodeProvider?displayProperty=fullName&gt;.","pos":[736,992],"source":" For example, for the `language` value VB, the base class method returns a <xref:System.Web.Compilation.CompilerType> object that corresponds to the configured settings for an instance of <xref:Microsoft.VisualBasic.VBCodeProvider?displayProperty=fullName>."},{"content":"When you derive from the &lt;xref:System.Web.Compilation.BuildProvider&gt; class, you can use GetDefaultCompilerTypeForLanguage to set the &lt;xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A&gt; property value for the language supported by your implementation.","pos":[999,1261],"source":"       When you derive from the <xref:System.Web.Compilation.BuildProvider> class, you can use GetDefaultCompilerTypeForLanguage to set the <xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A> property value for the language supported by your implementation."}]},{"pos":[21946,21967],"content":"A code language name.","needQuote":true,"needEscape":true,"nodes":[{"content":"A code language name.","pos":[0,21]}]},{"pos":[22047,22314],"content":"A <xref href=\"System.Web.Compilation.CompilerType\"></xref> that represents the compiler settings for the build provider based on the specified language. The base class returns the default compiler settings for the language based on the application configuration file.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Web.Compilation.CompilerType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the compiler settings for the build provider based on the specified language.","pos":[0,152],"source":"A <xref href=\"System.Web.Compilation.CompilerType\"></xref> that represents the compiler settings for the build provider based on the specified language."},{"content":"The base class returns the default compiler settings for the language based on the application configuration file.","pos":[153,267]}]},{"pos":[22515,22601],"content":"<ph id=\"ph1\">&lt;code&gt;language&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>language</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[22696,22778],"content":"<ph id=\"ph1\">&lt;code&gt;language&lt;/code&gt;</ph> does not match a configured compiler for the build provider.","needQuote":true,"needEscape":true,"source":"<code>language</code> does not match a configured compiler for the build provider."},{"pos":[23315,23384],"content":"Returns a type generated by the build provider from the virtual path.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a type generated by the build provider from the virtual path.","pos":[0,69]}]},{"pos":[23397,24114],"content":"To implement a build provider that generates source code for Web content such as .aspx files, derive a class from the <xref:System.Web.Compilation.BuildProvider> class and override the GetGeneratedType method to return the type generated by the build provider.       The ASP.NET build system compiles files for each build provider, and generates a <xref:System.CodeDom.Compiler.CompilerResults> object, which is passed to the GetGeneratedType method. Typically, a build provider's GetGeneratedType implementation uses the <xref:System.Reflection.Assembly.GetType%2A> method on the <xref:System.CodeDom.Compiler.CompilerResults.CompiledAssembly%2A> property of the input `results` object to return the provided type.","needQuote":false,"needEscape":true,"nodes":[{"content":"To implement a build provider that generates source code for Web content such as .aspx files, derive a class from the &lt;xref:System.Web.Compilation.BuildProvider&gt; class and override the GetGeneratedType method to return the type generated by the build provider.","pos":[0,260],"source":"To implement a build provider that generates source code for Web content such as .aspx files, derive a class from the <xref:System.Web.Compilation.BuildProvider> class and override the GetGeneratedType method to return the type generated by the build provider."},{"content":"The ASP.NET build system compiles files for each build provider, and generates a &lt;xref:System.CodeDom.Compiler.CompilerResults&gt; object, which is passed to the GetGeneratedType method.","pos":[267,450],"source":"       The ASP.NET build system compiles files for each build provider, and generates a <xref:System.CodeDom.Compiler.CompilerResults> object, which is passed to the GetGeneratedType method."},{"content":"Typically, a build provider's GetGeneratedType implementation uses the &lt;xref:System.Reflection.Assembly.GetType%2A&gt; method on the &lt;xref:System.CodeDom.Compiler.CompilerResults.CompiledAssembly%2A&gt; property of the input <ph id=\"ph1\">`results`</ph> object to return the provided type.","pos":[451,715],"source":" Typically, a build provider's GetGeneratedType implementation uses the <xref:System.Reflection.Assembly.GetType%2A> method on the <xref:System.CodeDom.Compiler.CompilerResults.CompiledAssembly%2A> property of the input `results` object to return the provided type."}]},{"pos":[24332,24394],"content":"The compilation results for the build provider's virtual path.","needQuote":true,"needEscape":true,"nodes":[{"content":"The compilation results for the build provider's virtual path.","pos":[0,62]}]},{"pos":[24450,24605],"content":"The type that is generated by the build provider for the virtual path. The base class returns <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type that is generated by the build provider for the virtual path.","pos":[0,70]},{"content":"The base class returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[71,155],"source":" The base class returns <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[25216,25289],"content":"Returns a value indicating actions required when a virtual path is built.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a value indicating actions required when a virtual path is built.","pos":[0,73]}]},{"pos":[25302,26222],"content":"The GetResultFlags method is used by the ASP.NET build environment when using instances of the <xref:System.Web.Compilation.BuildProvider> class to build files and load the compiled assemblies.       The base <xref:System.Web.Compilation.BuildProvider> class method returns the <xref:System.Web.Compilation.BuildProviderResultFlags> field value, indicating that no special action is required when the virtual path is built.       When deriving from the <xref:System.Web.Compilation.BuildProvider> class, you can implement the GetResultFlags method to return a different <xref:System.Web.Compilation.BuildProviderResultFlags> value for your custom file type or virtual path. For example, if a rebuild of your virtual path requires the containing <xref:System.AppDomain> object to be reloaded, you can return the <xref:System.Web.Compilation.BuildProviderResultFlags> enumeration value from your GetResultFlags method.","needQuote":false,"needEscape":true,"nodes":[{"content":"The GetResultFlags method is used by the ASP.NET build environment when using instances of the <xref:System.Web.Compilation.BuildProvider> class to build files and load the compiled assemblies.       The base <xref:System.Web.Compilation.BuildProvider> class method returns the <xref:System.Web.Compilation.BuildProviderResultFlags> field value, indicating that no special action is required when the virtual path is built.       When deriving from the <xref:System.Web.Compilation.BuildProvider> class, you can implement the GetResultFlags method to return a different <xref:System.Web.Compilation.BuildProviderResultFlags> value for your custom file type or virtual path. For example, if a rebuild of your virtual path requires the containing <xref:System.AppDomain> object to be reloaded, you can return the <xref:System.Web.Compilation.BuildProviderResultFlags> enumeration value from your GetResultFlags method.","pos":[0,916],"nodes":[{"content":"The GetResultFlags method is used by the ASP.NET build environment when using instances of the &lt;xref:System.Web.Compilation.BuildProvider&gt; class to build files and load the compiled assemblies.","pos":[0,193],"source":"The GetResultFlags method is used by the ASP.NET build environment when using instances of the <xref:System.Web.Compilation.BuildProvider> class to build files and load the compiled assemblies."},{"content":"The base &lt;xref:System.Web.Compilation.BuildProvider&gt; class method returns the &lt;xref:System.Web.Compilation.BuildProviderResultFlags&gt; field value, indicating that no special action is required when the virtual path is built.","pos":[200,423],"source":"       The base <xref:System.Web.Compilation.BuildProvider> class method returns the <xref:System.Web.Compilation.BuildProviderResultFlags> field value, indicating that no special action is required when the virtual path is built."},{"content":"When deriving from the &lt;xref:System.Web.Compilation.BuildProvider&gt; class, you can implement the GetResultFlags method to return a different &lt;xref:System.Web.Compilation.BuildProviderResultFlags&gt; value for your custom file type or virtual path.","pos":[430,673],"source":"       When deriving from the <xref:System.Web.Compilation.BuildProvider> class, you can implement the GetResultFlags method to return a different <xref:System.Web.Compilation.BuildProviderResultFlags> value for your custom file type or virtual path."},{"content":"For example, if a rebuild of your virtual path requires the containing &lt;xref:System.AppDomain&gt; object to be reloaded, you can return the &lt;xref:System.Web.Compilation.BuildProviderResultFlags&gt; enumeration value from your GetResultFlags method.","pos":[674,916],"source":" For example, if a rebuild of your virtual path requires the containing <xref:System.AppDomain> object to be reloaded, you can return the <xref:System.Web.Compilation.BuildProviderResultFlags> enumeration value from your GetResultFlags method."}]}]},{"pos":[26481,26543],"content":"The compilation results for the build provider's virtual path.","needQuote":true,"needEscape":true,"nodes":[{"content":"The compilation results for the build provider's virtual path.","pos":[0,62]}]},{"pos":[26635,26809],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Web.Compilation.BuildProviderResultFlags\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value indicating actions required after the virtual path is built within the ASP.NET build environment.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Web.Compilation.BuildProviderResultFlags\"></xref> value indicating actions required after the virtual path is built within the ASP.NET build environment."},{"pos":[27271,27362],"content":"Opens a text reader for reading from the virtual path of the current build provider object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Opens a text reader for reading from the virtual path of the current build provider object.","pos":[0,91]}]},{"pos":[27375,27822],"content":"Use the <xref:System.IO.TextReader.Read%2A> method on the returned <xref:System.IO.TextReader> object to read the contents of the <xref:System.Web.Compilation.BuildProvider.VirtualPath%2A> property for a <xref:System.Web.Compilation.BuildProvider> object.       After calling the OpenReader method, you must use the <xref:System.IO.TextReader.Close%2A> method to close the <xref:System.IO.TextReader> object and free associated system resources.","needQuote":false,"needEscape":true,"nodes":[{"content":"Use the <xref:System.IO.TextReader.Read%2A> method on the returned <xref:System.IO.TextReader> object to read the contents of the <xref:System.Web.Compilation.BuildProvider.VirtualPath%2A> property for a <xref:System.Web.Compilation.BuildProvider> object.       After calling the OpenReader method, you must use the <xref:System.IO.TextReader.Close%2A> method to close the <xref:System.IO.TextReader> object and free associated system resources.","pos":[0,445],"nodes":[{"content":"Use the &lt;xref:System.IO.TextReader.Read%2A&gt; method on the returned &lt;xref:System.IO.TextReader&gt; object to read the contents of the &lt;xref:System.Web.Compilation.BuildProvider.VirtualPath%2A&gt; property for a &lt;xref:System.Web.Compilation.BuildProvider&gt; object.","pos":[0,255],"source":"Use the <xref:System.IO.TextReader.Read%2A> method on the returned <xref:System.IO.TextReader> object to read the contents of the <xref:System.Web.Compilation.BuildProvider.VirtualPath%2A> property for a <xref:System.Web.Compilation.BuildProvider> object."},{"content":"After calling the OpenReader method, you must use the &lt;xref:System.IO.TextReader.Close%2A&gt; method to close the &lt;xref:System.IO.TextReader&gt; object and free associated system resources.","pos":[262,445],"source":"       After calling the OpenReader method, you must use the <xref:System.IO.TextReader.Close%2A> method to close the <xref:System.IO.TextReader> object and free associated system resources."}]}]},{"pos":[27976,28114],"content":"An open <xref:System.IO.TextReader> that can be used to read the contents of the <xref:System.Web.Compilation.BuildProvider.VirtualPath*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"An open &lt;xref:System.IO.TextReader&gt; that can be used to read the contents of the &lt;xref:System.Web.Compilation.BuildProvider.VirtualPath*&gt;.","pos":[0,138],"source":"An open <xref:System.IO.TextReader> that can be used to read the contents of the <xref:System.Web.Compilation.BuildProvider.VirtualPath*>."}]},{"pos":[28620,28682],"content":"Opens a text reader for reading from a specified virtual path.","needQuote":true,"needEscape":true,"nodes":[{"content":"Opens a text reader for reading from a specified virtual path.","pos":[0,62]}]},{"pos":[28695,29077],"content":"Use the <xref:System.IO.TextReader.Read%2A> method on the returned <xref:System.IO.TextReader> object to read the contents of the virtual path.       After calling the <xref:System.Web.Compilation.BuildProvider.OpenReader%2A> method, you must use the <xref:System.IO.TextReader.Close%2A> method to close the <xref:System.IO.TextReader> object and free associated system resources.","needQuote":false,"needEscape":true,"nodes":[{"content":"Use the <xref:System.IO.TextReader.Read%2A> method on the returned <xref:System.IO.TextReader> object to read the contents of the virtual path.       After calling the <xref:System.Web.Compilation.BuildProvider.OpenReader%2A> method, you must use the <xref:System.IO.TextReader.Close%2A> method to close the <xref:System.IO.TextReader> object and free associated system resources.","pos":[0,380],"nodes":[{"content":"Use the &lt;xref:System.IO.TextReader.Read%2A&gt; method on the returned &lt;xref:System.IO.TextReader&gt; object to read the contents of the virtual path.","pos":[0,143],"source":"Use the <xref:System.IO.TextReader.Read%2A> method on the returned <xref:System.IO.TextReader> object to read the contents of the virtual path."},{"content":"After calling the &lt;xref:System.Web.Compilation.BuildProvider.OpenReader%2A&gt; method, you must use the &lt;xref:System.IO.TextReader.Close%2A&gt; method to close the &lt;xref:System.IO.TextReader&gt; object and free associated system resources.","pos":[150,380],"source":"       After calling the <xref:System.Web.Compilation.BuildProvider.OpenReader%2A> method, you must use the <xref:System.IO.TextReader.Close%2A> method to close the <xref:System.IO.TextReader> object and free associated system resources."}]}]},{"pos":[29249,29274],"content":"The virtual path to read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The virtual path to read.","pos":[0,25]}]},{"pos":[29339,29443],"content":"An open <xref:System.IO.TextReader> that can be used to read the contents of the specified virtual path.","needQuote":true,"needEscape":true,"nodes":[{"content":"An open &lt;xref:System.IO.TextReader&gt; that can be used to read the contents of the specified virtual path.","pos":[0,104],"source":"An open <xref:System.IO.TextReader> that can be used to read the contents of the specified virtual path."}]},{"pos":[29901,29982],"content":"Opens a stream for reading the virtual path of the current build provider object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Opens a stream for reading the virtual path of the current build provider object.","pos":[0,81]}]},{"pos":[29995,30373],"content":"Use the <xref:System.IO.Stream.Read%2A> method on the returned <xref:System.IO.Stream> object to read the contents of the virtual path for the <xref:System.Web.Compilation.BuildProvider> object.       After calling the OpenStream method, you must use the <xref:System.IO.Stream.Close%2A> method to close the <xref:System.IO.Stream> object and free associated system resources.","needQuote":false,"needEscape":true,"nodes":[{"content":"Use the <xref:System.IO.Stream.Read%2A> method on the returned <xref:System.IO.Stream> object to read the contents of the virtual path for the <xref:System.Web.Compilation.BuildProvider> object.       After calling the OpenStream method, you must use the <xref:System.IO.Stream.Close%2A> method to close the <xref:System.IO.Stream> object and free associated system resources.","pos":[0,376],"nodes":[{"content":"Use the &lt;xref:System.IO.Stream.Read%2A&gt; method on the returned &lt;xref:System.IO.Stream&gt; object to read the contents of the virtual path for the &lt;xref:System.Web.Compilation.BuildProvider&gt; object.","pos":[0,194],"source":"Use the <xref:System.IO.Stream.Read%2A> method on the returned <xref:System.IO.Stream> object to read the contents of the virtual path for the <xref:System.Web.Compilation.BuildProvider> object."},{"content":"After calling the OpenStream method, you must use the &lt;xref:System.IO.Stream.Close%2A&gt; method to close the &lt;xref:System.IO.Stream&gt; object and free associated system resources.","pos":[201,376],"source":"       After calling the OpenStream method, you must use the <xref:System.IO.Stream.Close%2A> method to close the <xref:System.IO.Stream> object and free associated system resources."}]}]},{"pos":[30519,30653],"content":"An open <xref:System.IO.Stream> that can be used to read the contents of the <xref:System.Web.Compilation.BuildProvider.VirtualPath*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"An open &lt;xref:System.IO.Stream&gt; that can be used to read the contents of the &lt;xref:System.Web.Compilation.BuildProvider.VirtualPath*&gt;.","pos":[0,134],"source":"An open <xref:System.IO.Stream> that can be used to read the contents of the <xref:System.Web.Compilation.BuildProvider.VirtualPath*>."}]},{"pos":[31159,31216],"content":"Opens a stream for reading from a specified virtual path.","needQuote":true,"needEscape":true,"nodes":[{"content":"Opens a stream for reading from a specified virtual path.","pos":[0,57]}]},{"pos":[31229,31595],"content":"Use the <xref:System.IO.Stream.Read%2A> method on the returned <xref:System.IO.Stream> object to read the contents of the virtual path.       After calling the <xref:System.Web.Compilation.BuildProvider.OpenStream%2A> method, you must use the <xref:System.IO.Stream.Close%2A> method to close the <xref:System.IO.Stream> object and free associated system resources.","needQuote":false,"needEscape":true,"nodes":[{"content":"Use the <xref:System.IO.Stream.Read%2A> method on the returned <xref:System.IO.Stream> object to read the contents of the virtual path.       After calling the <xref:System.Web.Compilation.BuildProvider.OpenStream%2A> method, you must use the <xref:System.IO.Stream.Close%2A> method to close the <xref:System.IO.Stream> object and free associated system resources.","pos":[0,364],"nodes":[{"content":"Use the &lt;xref:System.IO.Stream.Read%2A&gt; method on the returned &lt;xref:System.IO.Stream&gt; object to read the contents of the virtual path.","pos":[0,135],"source":"Use the <xref:System.IO.Stream.Read%2A> method on the returned <xref:System.IO.Stream> object to read the contents of the virtual path."},{"content":"After calling the &lt;xref:System.Web.Compilation.BuildProvider.OpenStream%2A&gt; method, you must use the &lt;xref:System.IO.Stream.Close%2A&gt; method to close the &lt;xref:System.IO.Stream&gt; object and free associated system resources.","pos":[142,364],"source":"       After calling the <xref:System.Web.Compilation.BuildProvider.OpenStream%2A> method, you must use the <xref:System.IO.Stream.Close%2A> method to close the <xref:System.IO.Stream> object and free associated system resources."}]}]},{"pos":[31763,31788],"content":"The virtual path to read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The virtual path to read.","pos":[0,25]}]},{"pos":[31849,31949],"content":"An open <xref:System.IO.Stream> that can be used to read the contents of the specified virtual path.","needQuote":true,"needEscape":true,"nodes":[{"content":"An open &lt;xref:System.IO.Stream&gt; that can be used to read the contents of the specified virtual path.","pos":[0,100],"source":"An open <xref:System.IO.Stream> that can be used to read the contents of the specified virtual path."}]},{"pos":[32584,32722],"content":"When overridden in a derived class, enables you to review compiler error messages so that you can modify them to provide more information.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, enables you to review compiler error messages so that you can modify them to provide more information.","pos":[0,138]}]},{"pos":[32735,33317],"content":"You typically override this method so that you can modify compiler errors before they are displayed in order to make the error text more helpful to the user. This is useful in scenarios where you know the context of certain errors and can provide information to the user about how to fix them. The original compiler error message is usually specific to a particular language construct and might not make the real cause or solution obvious to the user.       You can access the errors by using the <xref:System.CodeDom.Compiler.CompilerResults> object that is passed to the method.","needQuote":false,"needEscape":true,"nodes":[{"content":"You typically override this method so that you can modify compiler errors before they are displayed in order to make the error text more helpful to the user. This is useful in scenarios where you know the context of certain errors and can provide information to the user about how to fix them. The original compiler error message is usually specific to a particular language construct and might not make the real cause or solution obvious to the user.       You can access the errors by using the <xref:System.CodeDom.Compiler.CompilerResults> object that is passed to the method.","pos":[0,580],"nodes":[{"content":"You typically override this method so that you can modify compiler errors before they are displayed in order to make the error text more helpful to the user.","pos":[0,157]},{"content":"This is useful in scenarios where you know the context of certain errors and can provide information to the user about how to fix them.","pos":[158,293]},{"content":"The original compiler error message is usually specific to a particular language construct and might not make the real cause or solution obvious to the user.","pos":[294,451]},{"content":"You can access the errors by using the &lt;xref:System.CodeDom.Compiler.CompilerResults&gt; object that is passed to the method.","pos":[458,580],"source":"       You can access the errors by using the <xref:System.CodeDom.Compiler.CompilerResults> object that is passed to the method."}]}]},{"pos":[33539,33556],"content":"Compiler results.","needQuote":true,"needEscape":true,"nodes":[{"content":"Compiler results.","pos":[0,17]}]},{"pos":[34070,34155],"content":"Represents the assemblies to compile with the source generated by the build provider.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the assemblies to compile with the source generated by the build provider.","pos":[0,85]}]},{"pos":[34168,35209],"content":"The ASP.NET build environment initializes the collection of assemblies that are available for reference by the build provider. The source code generated by a build provider can use public types in the referenced assemblies. The referenced assembly collection consists of other assemblies built in the ASP.NET application, and assemblies listed in the  element in the configuration file.       If the build provider generates source code that references additional assemblies, the build provider adds the additional assemblies using the <xref:System.Web.Compilation.AssemblyBuilder.AddAssemblyReference%2A> method. The ASP.NET build environment resolves external types during assembly compilation using both the referenced assemblies added by build providers and the default collection of assemblies available for reference.       The ReferencedAssemblies collection does not include assemblies that are added for reference by other build providers through the <xref:System.Web.Compilation.AssemblyBuilder.AddAssemblyReference%2A> method.","needQuote":false,"needEscape":true,"nodes":[{"content":"The ASP.NET build environment initializes the collection of assemblies that are available for reference by the build provider. The source code generated by a build provider can use public types in the referenced assemblies. The referenced assembly collection consists of other assemblies built in the ASP.NET application, and assemblies listed in the  element in the configuration file.       If the build provider generates source code that references additional assemblies, the build provider adds the additional assemblies using the <xref:System.Web.Compilation.AssemblyBuilder.AddAssemblyReference%2A> method. The ASP.NET build environment resolves external types during assembly compilation using both the referenced assemblies added by build providers and the default collection of assemblies available for reference.       The ReferencedAssemblies collection does not include assemblies that are added for reference by other build providers through the <xref:System.Web.Compilation.AssemblyBuilder.AddAssemblyReference%2A> method.","pos":[0,1037],"nodes":[{"content":"The ASP.NET build environment initializes the collection of assemblies that are available for reference by the build provider.","pos":[0,126]},{"content":"The source code generated by a build provider can use public types in the referenced assemblies.","pos":[127,223]},{"content":"The referenced assembly collection consists of other assemblies built in the ASP.NET application, and assemblies listed in the  element in the configuration file.","pos":[224,386]},{"content":"If the build provider generates source code that references additional assemblies, the build provider adds the additional assemblies using the &lt;xref:System.Web.Compilation.AssemblyBuilder.AddAssemblyReference%2A&gt; method.","pos":[393,613],"source":"       If the build provider generates source code that references additional assemblies, the build provider adds the additional assemblies using the <xref:System.Web.Compilation.AssemblyBuilder.AddAssemblyReference%2A> method."},{"content":"The ASP.NET build environment resolves external types during assembly compilation using both the referenced assemblies added by build providers and the default collection of assemblies available for reference.","pos":[614,823]},{"content":"The ReferencedAssemblies collection does not include assemblies that are added for reference by other build providers through the &lt;xref:System.Web.Compilation.AssemblyBuilder.AddAssemblyReference%2A&gt; method.","pos":[830,1037],"source":"       The ReferencedAssemblies collection does not include assemblies that are added for reference by other build providers through the <xref:System.Web.Compilation.AssemblyBuilder.AddAssemblyReference%2A> method."}]}]},{"pos":[35379,35490],"content":"A read-only collection of assemblies that can be referenced by the source code generated by the build provider.","needQuote":true,"needEscape":true,"nodes":[{"content":"A read-only collection of assemblies that can be referenced by the source code generated by the build provider.","pos":[0,111]}]},{"pos":[36100,36127],"content":"Registers a build provider.","needQuote":true,"needEscape":true,"nodes":[{"content":"Registers a build provider.","pos":[0,27]}]},{"pos":[36139,36483],"content":"You can use this method to register build providers instead of defining them in the Web.config file. For more information about build providers, see the <xref:System.Web.Compilation.BuildProvider> class and [buildProviders Element for compilation (ASP.NET Settings Schema)](http://msdn.microsoft.com/en-us/40fa889d-5412-487a-b6a9-21eb011c2384).","needQuote":true,"needEscape":true,"nodes":[{"content":"You can use this method to register build providers instead of defining them in the Web.config file.","pos":[0,100]},{"content":"For more information about build providers, see the &lt;xref:System.Web.Compilation.BuildProvider&gt; class and <bpt id=\"p1\">[</bpt>buildProviders Element for compilation (ASP.NET Settings Schema)<ept id=\"p1\">](http://msdn.microsoft.com/en-us/40fa889d-5412-487a-b6a9-21eb011c2384)</ept>.","pos":[101,344],"source":" For more information about build providers, see the <xref:System.Web.Compilation.BuildProvider> class and [buildProviders Element for compilation (ASP.NET Settings Schema)](http://msdn.microsoft.com/en-us/40fa889d-5412-487a-b6a9-21eb011c2384)."}]},{"pos":[36668,36723],"content":"The file-name extension that the build provider is for.","needQuote":true,"needEscape":true,"nodes":[{"content":"The file-name extension that the build provider is for.","pos":[0,55]}]},{"pos":[36790,36815],"content":"The build provider class.","needQuote":true,"needEscape":true,"nodes":[{"content":"The build provider class.","pos":[0,25]}]},{"pos":[37285,37355],"content":"Represents the file to be built by this build provider implementation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the file to be built by this build provider implementation.","pos":[0,70]}]},{"pos":[37368,38416],"content":"The virtual path of a <xref:System.Web.Compilation.BuildProvider> object is the path to the file that is being compiled by the build provider. For example, if you have configured a custom <xref:System.Web.Compilation.BuildProvider> class to build all files in the Web site with the custom extension of .abc, if your Web site is named WebSite1, and the Web site contains a file named Example.abc, the VirtualPath property contains the value `/WebSite1/Example.abc`.       The file extension of each file within the application determines the file type, and the corresponding build provider for the file type. The ASP.NET build environment initializes a <xref:System.Web.Compilation.BuildProvider> object for each file based on the file type, and uses the <xref:System.Web.Compilation.BuildProvider> methods to generate source for each file.       For more information about configuring a build provider, see [buildProviders Element for compilation (ASP.NET Settings Schema)](http://msdn.microsoft.com/en-us/40fa889d-5412-487a-b6a9-21eb011c2384).","needQuote":false,"needEscape":true,"nodes":[{"content":"The virtual path of a &lt;xref:System.Web.Compilation.BuildProvider&gt; object is the path to the file that is being compiled by the build provider.","pos":[0,142],"source":"The virtual path of a <xref:System.Web.Compilation.BuildProvider> object is the path to the file that is being compiled by the build provider."},{"content":"For example, if you have configured a custom &lt;xref:System.Web.Compilation.BuildProvider&gt; class to build all files in the Web site with the custom extension of .abc, if your Web site is named WebSite1, and the Web site contains a file named Example.abc, the VirtualPath property contains the value <ph id=\"ph1\">`/WebSite1/Example.abc`</ph>.","pos":[143,464],"source":" For example, if you have configured a custom <xref:System.Web.Compilation.BuildProvider> class to build all files in the Web site with the custom extension of .abc, if your Web site is named WebSite1, and the Web site contains a file named Example.abc, the VirtualPath property contains the value `/WebSite1/Example.abc`."},{"content":"The file extension of each file within the application determines the file type, and the corresponding build provider for the file type.","pos":[471,607]},{"content":"The ASP.NET build environment initializes a &lt;xref:System.Web.Compilation.BuildProvider&gt; object for each file based on the file type, and uses the &lt;xref:System.Web.Compilation.BuildProvider&gt; methods to generate source for each file.","pos":[608,839],"source":" The ASP.NET build environment initializes a <xref:System.Web.Compilation.BuildProvider> object for each file based on the file type, and uses the <xref:System.Web.Compilation.BuildProvider> methods to generate source for each file."},{"content":"For more information about configuring a build provider, see <bpt id=\"p1\">[</bpt>buildProviders Element for compilation (ASP.NET Settings Schema)<ept id=\"p1\">](http://msdn.microsoft.com/en-us/40fa889d-5412-487a-b6a9-21eb011c2384)</ept>.","pos":[846,1044],"source":"       For more information about configuring a build provider, see [buildProviders Element for compilation (ASP.NET Settings Schema)](http://msdn.microsoft.com/en-us/40fa889d-5412-487a-b6a9-21eb011c2384)."}]},{"pos":[38536,38635],"content":"A read-only string that specifies the virtual path of a file to be compiled by this build provider.","needQuote":true,"needEscape":true,"nodes":[{"content":"A read-only string that specifies the virtual path of a file to be compiled by this build provider.","pos":[0,99]}]},{"pos":[39155,39256],"content":"Represents a collection of virtual paths that must be built before the build provider generates code.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents a collection of virtual paths that must be built before the build provider generates code.","pos":[0,101]}]},{"pos":[39268,39616],"content":"The VirtualPathDependencies property is a collection of virtual paths that must be compiled before the <xref:System.Web.Compilation.BuildProvider> instance generates source code. The assemblies from the virtual paths in VirtualPathDependencies are added as references to the compilation for the <xref:System.Web.Compilation.BuildProvider> instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"The VirtualPathDependencies property is a collection of virtual paths that must be compiled before the <xref:System.Web.Compilation.BuildProvider> instance generates source code. The assemblies from the virtual paths in VirtualPathDependencies are added as references to the compilation for the <xref:System.Web.Compilation.BuildProvider> instance.","pos":[0,348],"nodes":[{"content":"The VirtualPathDependencies property is a collection of virtual paths that must be compiled before the &lt;xref:System.Web.Compilation.BuildProvider&gt; instance generates source code.","pos":[0,178],"source":"The VirtualPathDependencies property is a collection of virtual paths that must be compiled before the <xref:System.Web.Compilation.BuildProvider> instance generates source code."},{"content":"The assemblies from the virtual paths in VirtualPathDependencies are added as references to the compilation for the &lt;xref:System.Web.Compilation.BuildProvider&gt; instance.","pos":[179,348],"source":" The assemblies from the virtual paths in VirtualPathDependencies are added as references to the compilation for the <xref:System.Web.Compilation.BuildProvider> instance."}]}]},{"pos":[39793,39916],"content":"A read-only collection of strings, representing the virtual paths that this instance of the build provider is dependent on.","needQuote":true,"needEscape":true,"nodes":[{"content":"A read-only collection of strings, representing the virtual paths that this instance of the build provider is dependent on.","pos":[0,123]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.Compilation.BuildProvider\n  id: BuildProvider\n  children:\n  - System.Web.Compilation.BuildProvider.#ctor\n  - System.Web.Compilation.BuildProvider.CodeCompilerType\n  - System.Web.Compilation.BuildProvider.GenerateCode(System.Web.Compilation.AssemblyBuilder)\n  - System.Web.Compilation.BuildProvider.GetCodeCompileUnit(System.Collections.IDictionary@)\n  - System.Web.Compilation.BuildProvider.GetCustomString(System.CodeDom.Compiler.CompilerResults)\n  - System.Web.Compilation.BuildProvider.GetDefaultCompilerType\n  - System.Web.Compilation.BuildProvider.GetDefaultCompilerTypeForLanguage(System.String)\n  - System.Web.Compilation.BuildProvider.GetGeneratedType(System.CodeDom.Compiler.CompilerResults)\n  - System.Web.Compilation.BuildProvider.GetResultFlags(System.CodeDom.Compiler.CompilerResults)\n  - System.Web.Compilation.BuildProvider.OpenReader\n  - System.Web.Compilation.BuildProvider.OpenReader(System.String)\n  - System.Web.Compilation.BuildProvider.OpenStream\n  - System.Web.Compilation.BuildProvider.OpenStream(System.String)\n  - System.Web.Compilation.BuildProvider.ProcessCompileErrors(System.CodeDom.Compiler.CompilerResults)\n  - System.Web.Compilation.BuildProvider.ReferencedAssemblies\n  - System.Web.Compilation.BuildProvider.RegisterBuildProvider(System.String,System.Type)\n  - System.Web.Compilation.BuildProvider.VirtualPath\n  - System.Web.Compilation.BuildProvider.VirtualPathDependencies\n  langs:\n  - csharp\n  name: BuildProvider\n  nameWithType: BuildProvider\n  fullName: System.Web.Compilation.BuildProvider\n  type: Class\n  summary: Defines a set of properties and methods for generating source code within the ASP.NET build environment. This class is abstract.\n  remarks: \"The ASP.NET build environment uses BuildProvider objects to generate source code for different file types within an application. Classes derived from BuildProvider predominantly provide source code for files, Web pages, resources, and other custom items.  \\n  \\n Typically, you do not create an instance of the BuildProvider class directly. Instead, you implement a class that derives from BuildProvider, and configure the BuildProvider implementation for use within the ASP.NET build environment.  \\n  \\n Instances of the BuildProvider class are used with <xref:System.Web.Compilation.AssemblyBuilder> objects to build one or more files into a compiled assembly. A BuildProvider instance generates source code in the appropriate language for individual files, and the <xref:System.Web.Compilation.AssemblyBuilder> object combines the source contributed by each BuildProvider instance into a single assembly.  \\n  \\n The ASP.NET build environment uses instances of the BuildProvider class to build files within an application. The <xref:System.Web.Compilation.BuildProvider.VirtualPath%2A> property of the BuildProvider class indicates the path of the file to be built. The file extension of each file within an application is mapped to a corresponding build provider. The ASP.NET build environment initializes a BuildProvider instance for each file based on the file extension, and uses the BuildProvider methods to generate source code for the file. The ASP.NET build environment passes an <xref:System.Web.Compilation.AssemblyBuilder> object based on the preferred compiler language and the context of the file to the BuildProvider methods when building an assembly from one or more files, so that the BuildProvider instance can contribute source code for its file to the overall assembly.  \\n  \\n To define custom build actions for a file type within an ASP.NET application, you must derive a class from BuildProvider, implement members within the derived class for building the file type, and configure the build provider for the corresponding file extension within the application configuration file.  \\n  \\n The  specifies the file extension for supported files, and whether the build provider supports code files, Web files, resource files or all files. Use the `type` attribute to specify the fully qualified type name of the build provider implementation. Use the <xref:System.Web.Compilation.BuildProviderAppliesToAttribute> class to specify whether the build provider applies to files in the App_Code directory, to files in a Web content directory, to global or local resources, or to all files. Use the `extension` attribute to specify the file extension used to identify files that the BuildProvider class supports. Use the <xref:System.Web.Configuration.BuildProviderCollection> class to examine build providers in a configuration file. For more information about configuring a build provider, see [buildProviders Element for compilation (ASP.NET Settings Schema)](http://msdn.microsoft.com/en-us/40fa889d-5412-487a-b6a9-21eb011c2384).  \\n  \\n To implement a build provider that generates source code for a custom file type, derive a class from BuildProvider, and override the <xref:System.Web.Compilation.BuildProvider.GenerateCode%2A> method to generate source code for the supported file type. The generated source is added to the <xref:System.Web.Compilation.AssemblyBuilder> object in the form of a CodeDOM graph, or as content that represents a physical source code file. If the build provider requires a specific programming language, override the <xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A> property to return a <xref:System.Web.Compilation.CompilerType> object for the supported programming language. If the build provider does not require a specific programming language, do not override the <xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A> property; use the base class implementation, which indicates that the build provider can use any .NET Framework language, such as Visual Basic or C#.  \\n  \\n To implement a build provider that generates source code for Web content, derive a class from BuildProvider and override the <xref:System.Web.Compilation.BuildProvider.GetGeneratedType%2A> method to return the <xref:System.Type> for the class generated by BuildProvider. Override the <xref:System.Web.Compilation.BuildProvider.GenerateCode%2A> method to generate source code for the type provided by the supported file.  \\n  \\n> [!NOTE]\\n>  Adding a customized BuildProvider class to the Web.config file works in an ASP.NET Web site but does not work in an ASP.NET Web application project. In a Web application project, the code that is generated by the BuildProvider class cannot be included in the application. For more information, see [ASP.NET Web Application Project Precompilation Overview](http://msdn.microsoft.com/en-us/b940abbd-178d-4570-b441-52914fa7b887).\"\n  example:\n  - \"The following code example illustrates a simple build provider implementation, inheriting from the abstract BuildProvider base class. The build provider overrides the <xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A>, <xref:System.Web.Compilation.BuildProvider.GetGeneratedType%2A>, and <xref:System.Web.Compilation.BuildProvider.GenerateCode%2A> members of the base class. The example does not include the implementation of the `SampleClassGenerator` class. For more information, see the <xref:System.CodeDom.CodeCompileUnit> class overview.  \\n  \\n [!code-cs[System.Web.Compilation.SampleBuildProvider_2#2](~/add/codesnippet/csharp/t-system.web.compilation_0_1.cs)]\\n [!code-vb[System.Web.Compilation.SampleBuildProvider_2#2](~/add/codesnippet/visualbasic/t-system.web.compilation_0_1.vb)]\"\n  syntax:\n    content: public abstract class BuildProvider\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Web.Compilation.BuildProvider.#ctor\n  id: '#ctor'\n  parent: System.Web.Compilation.BuildProvider\n  langs:\n  - csharp\n  name: BuildProvider()\n  nameWithType: BuildProvider.BuildProvider()\n  fullName: System.Web.Compilation.BuildProvider.BuildProvider()\n  type: Constructor\n  assemblies:\n  - System.Web\n  namespace: System.Web.Compilation\n  summary: Initializes a new instance of the <xref href=\"System.Web.Compilation.BuildProvider\"></xref> class.\n  remarks: \"Because the <xref:System.Web.Compilation.BuildProvider> class is abstract, you cannot create an instance of <xref:System.Web.Compilation.BuildProvider> directly using the constructor.  \\n  \\n When deriving from the <xref:System.Web.Compilation.BuildProvider> class, override the constructor to implement custom initialization actions for your build provider implementation.\"\n  syntax:\n    content: protected BuildProvider ();\n    parameters: []\n  overload: System.Web.Compilation.BuildProvider.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Compilation.BuildProvider.CodeCompilerType\n  id: CodeCompilerType\n  parent: System.Web.Compilation.BuildProvider\n  langs:\n  - csharp\n  name: CodeCompilerType\n  nameWithType: BuildProvider.CodeCompilerType\n  fullName: System.Web.Compilation.BuildProvider.CodeCompilerType\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Compilation\n  summary: Represents the compiler type used by a build provider to generate source code for a custom file type.\n  remarks: \"Use the CodeCompilerType property to provide the settings for compiling source code for an implementation of <xref:System.Web.Compilation.BuildProvider>. The CodeCompilerType property is `null` if the build provider does not require a specific code language for generating and compiling source code.  \\n  \\n To set the value for a <xref:System.Web.Compilation.CompilerType> object within a build provider implementation, use the <xref:System.Web.Compilation.BuildProvider.GetDefaultCompilerType%2A> or <xref:System.Web.Compilation.BuildProvider.GetDefaultCompilerTypeForLanguage%2A> method.  \\n  \\n The <xref:System.Web.Compilation.CompilerType.CodeDomProviderType%2A> property specifies the <xref:System.CodeDom.Compiler.CodeDomProvider> implementation that is used to generate and compile source code for a build provider. The <xref:System.Web.Compilation.CompilerType.CompilerParameters%2A> property defines the settings that are used to compile the source code into an assembly.\"\n  example:\n  - \"The following code example illustrates a simple build provider implementation, inheriting from the abstract <xref:System.Web.Compilation.BuildProvider> base class. The build provider overrides the CodeCompilerType, <xref:System.Web.Compilation.BuildProvider.GetGeneratedType%2A>, and <xref:System.Web.Compilation.BuildProvider.GenerateCode%2A> members of the base class.  \\n  \\n [!code-cs[System.Web.Compilation.SampleBuildProvider_2#2](~/add/codesnippet/csharp/p-system.web.compilation_4_1.cs)]\\n [!code-vb[System.Web.Compilation.SampleBuildProvider_2#2](~/add/codesnippet/visualbasic/p-system.web.compilation_4_1.vb)]\"\n  syntax:\n    content: public virtual System.Web.Compilation.CompilerType CodeCompilerType { get; }\n    return:\n      type: System.Web.Compilation.CompilerType\n      description: A read-only <xref href=\"System.Web.Compilation.CompilerType\"></xref> representing the code generator, code compiler, and compiler settings used to build source code for the virtual path. The base class returns <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Web.Compilation.BuildProvider.CodeCompilerType*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Compilation.BuildProvider.GenerateCode(System.Web.Compilation.AssemblyBuilder)\n  id: GenerateCode(System.Web.Compilation.AssemblyBuilder)\n  parent: System.Web.Compilation.BuildProvider\n  langs:\n  - csharp\n  name: GenerateCode(AssemblyBuilder)\n  nameWithType: BuildProvider.GenerateCode(AssemblyBuilder)\n  fullName: System.Web.Compilation.BuildProvider.GenerateCode(AssemblyBuilder)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Compilation\n  summary: Generates source code for the virtual path of the build provider, and adds the source code to a specified assembly builder.\n  remarks: \"To implement a build provider that generates source code for a custom file type, derive a class from the <xref:System.Web.Compilation.BuildProvider> class, and override the GenerateCode method to generate source code for the supported file type.  \\n  \\n Typically, a build provider's GenerateCode implementation reads the <xref:System.Web.Compilation.BuildProvider.VirtualPath%2A> property, parses the contents, and adds the generated source code to the specified <xref:System.Web.Compilation.AssemblyBuilder> object. You can contribute source code to the assembly in the form of a <xref:System.IO.TextWriter> object or a CodeDOM graph. To add source code to the assembly through a <xref:System.IO.TextWriter> object, use the <xref:System.Web.Compilation.AssemblyBuilder.CreateCodeFile%2A> method. To add source code in a CodeDOM graph to the assembly, use the <xref:System.Web.Compilation.AssemblyBuilder.AddCodeCompileUnit%2A> method.  \\n  \\n If the build provider generates source code in a specific programming language, you must override the <xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A> property to return a <xref:System.Web.Compilation.CompilerType> object for the supported programming language.\"\n  example:\n  - \"The following code example illustrates a simple build provider implementation, inheriting from the abstract <xref:System.Web.Compilation.BuildProvider> base class. The build provider overrides the <xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A>, <xref:System.Web.Compilation.BuildProvider.GetGeneratedType%2A>, and GenerateCode members of the base class.  \\n  \\n [!code-cs[System.Web.Compilation.SampleBuildProvider_2#2](~/add/codesnippet/csharp/fc642c18-5414-4093-bd92-_1.cs)]\\n [!code-vb[System.Web.Compilation.SampleBuildProvider_2#2](~/add/codesnippet/visualbasic/fc642c18-5414-4093-bd92-_1.vb)]\"\n  syntax:\n    content: public virtual void GenerateCode (System.Web.Compilation.AssemblyBuilder assemblyBuilder);\n    parameters:\n    - id: assemblyBuilder\n      type: System.Web.Compilation.AssemblyBuilder\n      description: The assembly builder that references the source code generated by the build provider.\n  overload: System.Web.Compilation.BuildProvider.GenerateCode*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Compilation.BuildProvider.GetCodeCompileUnit(System.Collections.IDictionary@)\n  id: GetCodeCompileUnit(System.Collections.IDictionary@)\n  parent: System.Web.Compilation.BuildProvider\n  langs:\n  - csharp\n  name: GetCodeCompileUnit(IDictionary)\n  nameWithType: BuildProvider.GetCodeCompileUnit(IDictionary)\n  fullName: System.Web.Compilation.BuildProvider.GetCodeCompileUnit(IDictionary)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Compilation\n  summary: Represents the container for the generated CodeDOM graph.\n  remarks: This method can be used through the <xref:System.Web.Compilation.ClientBuildManager> class for syntax highlighting and designer support in Visual Studio.\n  syntax:\n    content: protected virtual System.CodeDom.CodeCompileUnit GetCodeCompileUnit (out System.Collections.IDictionary linePragmasTable);\n    parameters:\n    - id: linePragmasTable\n      type: System.Collections.IDictionary\n      description: When this method returns, contains a dictionary that contains all associated line numbers and line pragmas of the source code. This parameter is passed uninitialized.\n    return:\n      type: System.CodeDom.CodeCompileUnit\n      description: The container for the CodeDOM graph that is generated by the <xref href=\"System.Web.Compilation.BuildProvider\"></xref> instance.\n  overload: System.Web.Compilation.BuildProvider.GetCodeCompileUnit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Compilation.BuildProvider.GetCustomString(System.CodeDom.Compiler.CompilerResults)\n  id: GetCustomString(System.CodeDom.Compiler.CompilerResults)\n  parent: System.Web.Compilation.BuildProvider\n  langs:\n  - csharp\n  name: GetCustomString(CompilerResults)\n  nameWithType: BuildProvider.GetCustomString(CompilerResults)\n  fullName: System.Web.Compilation.BuildProvider.GetCustomString(CompilerResults)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Compilation\n  summary: Generates a string to be persisted in the compiled assembly.\n  remarks: \"The <xref:System.Web.Compilation.BuildManager.GetCompiledCustomString%2A> method of a <xref:System.Web.Compilation.BuildManager> object creates an instance of a build provider for an input virtual path, and calls the GetCustomString method on the <xref:System.Web.Compilation.BuildProvider> object.  \\n  \\n The base <xref:System.Web.Compilation.BuildProvider> class returns `null` for the GetCustomString method, indicating that GetCustomString is not implemented.  \\n  \\n Certain build provider implementations can implement GetCustomString in place of the <xref:System.Web.Compilation.BuildProvider.GetGeneratedType%2A> method. A <xref:System.Web.Compilation.BuildProvider> object typically uses <xref:System.Web.Compilation.BuildProvider.GetGeneratedType%2A> to return a <xref:System.Type> object for a virtual path. However, the GetCustomString method can be used to indicate that a <xref:System.Web.Compilation.BuildProvider> object can generate multiple types from a virtual path.\"\n  syntax:\n    content: public virtual string GetCustomString (System.CodeDom.Compiler.CompilerResults results);\n    parameters:\n    - id: results\n      type: System.CodeDom.Compiler.CompilerResults\n      description: The compilation results for the build provider's virtual path.\n    return:\n      type: System.String\n      description: A string to be persisted in the build environment, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the <xref href=\"System.Web.Compilation.BuildProvider\"></xref> instance does not implement GetCustomString.\n  overload: System.Web.Compilation.BuildProvider.GetCustomString*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Compilation.BuildProvider.GetDefaultCompilerType\n  id: GetDefaultCompilerType\n  parent: System.Web.Compilation.BuildProvider\n  langs:\n  - csharp\n  name: GetDefaultCompilerType()\n  nameWithType: BuildProvider.GetDefaultCompilerType()\n  fullName: System.Web.Compilation.BuildProvider.GetDefaultCompilerType()\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Compilation\n  summary: Returns the compiler settings for the default language in the application.\n  remarks: \"Use the GetDefaultCompilerType method to examine the default compiler type for a build provider. Use the <xref:System.Web.Compilation.BuildProvider.GetDefaultCompilerTypeForLanguage%2A> method to examine the compiler type configured in a build provider for a specific language name.  \\n  \\n The base <xref:System.Web.Compilation.BuildProvider> class determines the default compiler type using the `defaultLanguage` attribute value in the  section of the application configuration file. If there is no default language setting in the compilation section, the default compiler type is set using the <xref:Microsoft.VisualBasic.VBCodeProvider> language provider.  \\n  \\n When deriving from the <xref:System.Web.Compilation.BuildProvider> class, you can use GetDefaultCompilerType to set the <xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A> property within your implementation.\"\n  syntax:\n    content: protected System.Web.Compilation.CompilerType GetDefaultCompilerType ();\n    parameters: []\n    return:\n      type: System.Web.Compilation.CompilerType\n      description: A <xref href=\"System.Web.Compilation.CompilerType\"></xref> that represents the compiler settings for the default language in the application. The base class returns the default compiler based on the application configuration file.\n  overload: System.Web.Compilation.BuildProvider.GetDefaultCompilerType*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Compilation.BuildProvider.GetDefaultCompilerTypeForLanguage(System.String)\n  id: GetDefaultCompilerTypeForLanguage(System.String)\n  parent: System.Web.Compilation.BuildProvider\n  langs:\n  - csharp\n  name: GetDefaultCompilerTypeForLanguage(String)\n  nameWithType: BuildProvider.GetDefaultCompilerTypeForLanguage(String)\n  fullName: System.Web.Compilation.BuildProvider.GetDefaultCompilerTypeForLanguage(String)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Compilation\n  summary: Returns the compiler settings for the build provider based on the specified language.\n  remarks: \"Use the GetDefaultCompilerTypeForLanguage method to examine the compiler type configured in the build provider for a specific language name. Use the <xref:System.Web.Compilation.BuildProvider.GetDefaultCompilerType%2A> method to examine the default compiler type for a build provider.  \\n  \\n The base <xref:System.Web.Compilation.BuildProvider> class determines the default compiler type using the <xref:System.Web.Configuration.Compiler> elements in the <xref:System.Web.Configuration.CompilationSection.Compilers%2A> property of the <xref:System.Web.Configuration.CompilationSection> object for the configuration file. This is equivalent to examining the  elements in the  and the  elements in the  sections of the configuration file. For example, for the `language` value VB, the base class method returns a <xref:System.Web.Compilation.CompilerType> object that corresponds to the configured settings for an instance of <xref:Microsoft.VisualBasic.VBCodeProvider?displayProperty=fullName>.  \\n  \\n When you derive from the <xref:System.Web.Compilation.BuildProvider> class, you can use GetDefaultCompilerTypeForLanguage to set the <xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A> property value for the language supported by your implementation.\"\n  syntax:\n    content: protected System.Web.Compilation.CompilerType GetDefaultCompilerTypeForLanguage (string language);\n    parameters:\n    - id: language\n      type: System.String\n      description: A code language name.\n    return:\n      type: System.Web.Compilation.CompilerType\n      description: A <xref href=\"System.Web.Compilation.CompilerType\"></xref> that represents the compiler settings for the build provider based on the specified language. The base class returns the default compiler settings for the language based on the application configuration file.\n  overload: System.Web.Compilation.BuildProvider.GetDefaultCompilerTypeForLanguage*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>language</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.Web.HttpException\n    commentId: T:System.Web.HttpException\n    description: <code>language</code> does not match a configured compiler for the build provider.\n  platform:\n  - net462\n- uid: System.Web.Compilation.BuildProvider.GetGeneratedType(System.CodeDom.Compiler.CompilerResults)\n  id: GetGeneratedType(System.CodeDom.Compiler.CompilerResults)\n  parent: System.Web.Compilation.BuildProvider\n  langs:\n  - csharp\n  name: GetGeneratedType(CompilerResults)\n  nameWithType: BuildProvider.GetGeneratedType(CompilerResults)\n  fullName: System.Web.Compilation.BuildProvider.GetGeneratedType(CompilerResults)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Compilation\n  summary: Returns a type generated by the build provider from the virtual path.\n  remarks: \"To implement a build provider that generates source code for Web content such as .aspx files, derive a class from the <xref:System.Web.Compilation.BuildProvider> class and override the GetGeneratedType method to return the type generated by the build provider.  \\n  \\n The ASP.NET build system compiles files for each build provider, and generates a <xref:System.CodeDom.Compiler.CompilerResults> object, which is passed to the GetGeneratedType method. Typically, a build provider's GetGeneratedType implementation uses the <xref:System.Reflection.Assembly.GetType%2A> method on the <xref:System.CodeDom.Compiler.CompilerResults.CompiledAssembly%2A> property of the input `results` object to return the provided type.\"\n  syntax:\n    content: public virtual Type GetGeneratedType (System.CodeDom.Compiler.CompilerResults results);\n    parameters:\n    - id: results\n      type: System.CodeDom.Compiler.CompilerResults\n      description: The compilation results for the build provider's virtual path.\n    return:\n      type: System.Type\n      description: The type that is generated by the build provider for the virtual path. The base class returns <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Web.Compilation.BuildProvider.GetGeneratedType*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Compilation.BuildProvider.GetResultFlags(System.CodeDom.Compiler.CompilerResults)\n  id: GetResultFlags(System.CodeDom.Compiler.CompilerResults)\n  parent: System.Web.Compilation.BuildProvider\n  langs:\n  - csharp\n  name: GetResultFlags(CompilerResults)\n  nameWithType: BuildProvider.GetResultFlags(CompilerResults)\n  fullName: System.Web.Compilation.BuildProvider.GetResultFlags(CompilerResults)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Compilation\n  summary: Returns a value indicating actions required when a virtual path is built.\n  remarks: \"The GetResultFlags method is used by the ASP.NET build environment when using instances of the <xref:System.Web.Compilation.BuildProvider> class to build files and load the compiled assemblies.  \\n  \\n The base <xref:System.Web.Compilation.BuildProvider> class method returns the <xref:System.Web.Compilation.BuildProviderResultFlags> field value, indicating that no special action is required when the virtual path is built.  \\n  \\n When deriving from the <xref:System.Web.Compilation.BuildProvider> class, you can implement the GetResultFlags method to return a different <xref:System.Web.Compilation.BuildProviderResultFlags> value for your custom file type or virtual path. For example, if a rebuild of your virtual path requires the containing <xref:System.AppDomain> object to be reloaded, you can return the <xref:System.Web.Compilation.BuildProviderResultFlags> enumeration value from your GetResultFlags method.\"\n  syntax:\n    content: public virtual System.Web.Compilation.BuildProviderResultFlags GetResultFlags (System.CodeDom.Compiler.CompilerResults results);\n    parameters:\n    - id: results\n      type: System.CodeDom.Compiler.CompilerResults\n      description: The compilation results for the build provider's virtual path.\n    return:\n      type: System.Web.Compilation.BuildProviderResultFlags\n      description: A <xref href=\"System.Web.Compilation.BuildProviderResultFlags\"></xref> value indicating actions required after the virtual path is built within the ASP.NET build environment.\n  overload: System.Web.Compilation.BuildProvider.GetResultFlags*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Compilation.BuildProvider.OpenReader\n  id: OpenReader\n  parent: System.Web.Compilation.BuildProvider\n  langs:\n  - csharp\n  name: OpenReader()\n  nameWithType: BuildProvider.OpenReader()\n  fullName: System.Web.Compilation.BuildProvider.OpenReader()\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Compilation\n  summary: Opens a text reader for reading from the virtual path of the current build provider object.\n  remarks: \"Use the <xref:System.IO.TextReader.Read%2A> method on the returned <xref:System.IO.TextReader> object to read the contents of the <xref:System.Web.Compilation.BuildProvider.VirtualPath%2A> property for a <xref:System.Web.Compilation.BuildProvider> object.  \\n  \\n After calling the OpenReader method, you must use the <xref:System.IO.TextReader.Close%2A> method to close the <xref:System.IO.TextReader> object and free associated system resources.\"\n  syntax:\n    content: protected System.IO.TextReader OpenReader ();\n    parameters: []\n    return:\n      type: System.IO.TextReader\n      description: An open <xref:System.IO.TextReader> that can be used to read the contents of the <xref:System.Web.Compilation.BuildProvider.VirtualPath*>.\n  overload: System.Web.Compilation.BuildProvider.OpenReader*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Compilation.BuildProvider.OpenReader(System.String)\n  id: OpenReader(System.String)\n  parent: System.Web.Compilation.BuildProvider\n  langs:\n  - csharp\n  name: OpenReader(String)\n  nameWithType: BuildProvider.OpenReader(String)\n  fullName: System.Web.Compilation.BuildProvider.OpenReader(String)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Compilation\n  summary: Opens a text reader for reading from a specified virtual path.\n  remarks: \"Use the <xref:System.IO.TextReader.Read%2A> method on the returned <xref:System.IO.TextReader> object to read the contents of the virtual path.  \\n  \\n After calling the <xref:System.Web.Compilation.BuildProvider.OpenReader%2A> method, you must use the <xref:System.IO.TextReader.Close%2A> method to close the <xref:System.IO.TextReader> object and free associated system resources.\"\n  syntax:\n    content: protected System.IO.TextReader OpenReader (string virtualPath);\n    parameters:\n    - id: virtualPath\n      type: System.String\n      description: The virtual path to read.\n    return:\n      type: System.IO.TextReader\n      description: An open <xref:System.IO.TextReader> that can be used to read the contents of the specified virtual path.\n  overload: System.Web.Compilation.BuildProvider.OpenReader*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Compilation.BuildProvider.OpenStream\n  id: OpenStream\n  parent: System.Web.Compilation.BuildProvider\n  langs:\n  - csharp\n  name: OpenStream()\n  nameWithType: BuildProvider.OpenStream()\n  fullName: System.Web.Compilation.BuildProvider.OpenStream()\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Compilation\n  summary: Opens a stream for reading the virtual path of the current build provider object.\n  remarks: \"Use the <xref:System.IO.Stream.Read%2A> method on the returned <xref:System.IO.Stream> object to read the contents of the virtual path for the <xref:System.Web.Compilation.BuildProvider> object.  \\n  \\n After calling the OpenStream method, you must use the <xref:System.IO.Stream.Close%2A> method to close the <xref:System.IO.Stream> object and free associated system resources.\"\n  syntax:\n    content: protected System.IO.Stream OpenStream ();\n    parameters: []\n    return:\n      type: System.IO.Stream\n      description: An open <xref:System.IO.Stream> that can be used to read the contents of the <xref:System.Web.Compilation.BuildProvider.VirtualPath*>.\n  overload: System.Web.Compilation.BuildProvider.OpenStream*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Compilation.BuildProvider.OpenStream(System.String)\n  id: OpenStream(System.String)\n  parent: System.Web.Compilation.BuildProvider\n  langs:\n  - csharp\n  name: OpenStream(String)\n  nameWithType: BuildProvider.OpenStream(String)\n  fullName: System.Web.Compilation.BuildProvider.OpenStream(String)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Compilation\n  summary: Opens a stream for reading from a specified virtual path.\n  remarks: \"Use the <xref:System.IO.Stream.Read%2A> method on the returned <xref:System.IO.Stream> object to read the contents of the virtual path.  \\n  \\n After calling the <xref:System.Web.Compilation.BuildProvider.OpenStream%2A> method, you must use the <xref:System.IO.Stream.Close%2A> method to close the <xref:System.IO.Stream> object and free associated system resources.\"\n  syntax:\n    content: protected System.IO.Stream OpenStream (string virtualPath);\n    parameters:\n    - id: virtualPath\n      type: System.String\n      description: The virtual path to read.\n    return:\n      type: System.IO.Stream\n      description: An open <xref:System.IO.Stream> that can be used to read the contents of the specified virtual path.\n  overload: System.Web.Compilation.BuildProvider.OpenStream*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Compilation.BuildProvider.ProcessCompileErrors(System.CodeDom.Compiler.CompilerResults)\n  id: ProcessCompileErrors(System.CodeDom.Compiler.CompilerResults)\n  parent: System.Web.Compilation.BuildProvider\n  langs:\n  - csharp\n  name: ProcessCompileErrors(CompilerResults)\n  nameWithType: BuildProvider.ProcessCompileErrors(CompilerResults)\n  fullName: System.Web.Compilation.BuildProvider.ProcessCompileErrors(CompilerResults)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Compilation\n  summary: When overridden in a derived class, enables you to review compiler error messages so that you can modify them to provide more information.\n  remarks: \"You typically override this method so that you can modify compiler errors before they are displayed in order to make the error text more helpful to the user. This is useful in scenarios where you know the context of certain errors and can provide information to the user about how to fix them. The original compiler error message is usually specific to a particular language construct and might not make the real cause or solution obvious to the user.  \\n  \\n You can access the errors by using the <xref:System.CodeDom.Compiler.CompilerResults> object that is passed to the method.\"\n  syntax:\n    content: public virtual void ProcessCompileErrors (System.CodeDom.Compiler.CompilerResults results);\n    parameters:\n    - id: results\n      type: System.CodeDom.Compiler.CompilerResults\n      description: Compiler results.\n  overload: System.Web.Compilation.BuildProvider.ProcessCompileErrors*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Compilation.BuildProvider.ReferencedAssemblies\n  id: ReferencedAssemblies\n  parent: System.Web.Compilation.BuildProvider\n  langs:\n  - csharp\n  name: ReferencedAssemblies\n  nameWithType: BuildProvider.ReferencedAssemblies\n  fullName: System.Web.Compilation.BuildProvider.ReferencedAssemblies\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Compilation\n  summary: Represents the assemblies to compile with the source generated by the build provider.\n  remarks: \"The ASP.NET build environment initializes the collection of assemblies that are available for reference by the build provider. The source code generated by a build provider can use public types in the referenced assemblies. The referenced assembly collection consists of other assemblies built in the ASP.NET application, and assemblies listed in the  element in the configuration file.  \\n  \\n If the build provider generates source code that references additional assemblies, the build provider adds the additional assemblies using the <xref:System.Web.Compilation.AssemblyBuilder.AddAssemblyReference%2A> method. The ASP.NET build environment resolves external types during assembly compilation using both the referenced assemblies added by build providers and the default collection of assemblies available for reference.  \\n  \\n The ReferencedAssemblies collection does not include assemblies that are added for reference by other build providers through the <xref:System.Web.Compilation.AssemblyBuilder.AddAssemblyReference%2A> method.\"\n  syntax:\n    content: protected System.Collections.ICollection ReferencedAssemblies { get; }\n    return:\n      type: System.Collections.ICollection\n      description: A read-only collection of assemblies that can be referenced by the source code generated by the build provider.\n  overload: System.Web.Compilation.BuildProvider.ReferencedAssemblies*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Compilation.BuildProvider.RegisterBuildProvider(System.String,System.Type)\n  id: RegisterBuildProvider(System.String,System.Type)\n  parent: System.Web.Compilation.BuildProvider\n  langs:\n  - csharp\n  name: RegisterBuildProvider(String,Type)\n  nameWithType: BuildProvider.RegisterBuildProvider(String,Type)\n  fullName: System.Web.Compilation.BuildProvider.RegisterBuildProvider(String,Type)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Compilation\n  summary: Registers a build provider.\n  remarks: You can use this method to register build providers instead of defining them in the Web.config file. For more information about build providers, see the <xref:System.Web.Compilation.BuildProvider> class and [buildProviders Element for compilation (ASP.NET Settings Schema)](http://msdn.microsoft.com/en-us/40fa889d-5412-487a-b6a9-21eb011c2384).\n  syntax:\n    content: public static void RegisterBuildProvider (string extension, Type providerType);\n    parameters:\n    - id: extension\n      type: System.String\n      description: The file-name extension that the build provider is for.\n    - id: providerType\n      type: System.Type\n      description: The build provider class.\n  overload: System.Web.Compilation.BuildProvider.RegisterBuildProvider*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Compilation.BuildProvider.VirtualPath\n  id: VirtualPath\n  parent: System.Web.Compilation.BuildProvider\n  langs:\n  - csharp\n  name: VirtualPath\n  nameWithType: BuildProvider.VirtualPath\n  fullName: System.Web.Compilation.BuildProvider.VirtualPath\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Compilation\n  summary: Represents the file to be built by this build provider implementation.\n  remarks: \"The virtual path of a <xref:System.Web.Compilation.BuildProvider> object is the path to the file that is being compiled by the build provider. For example, if you have configured a custom <xref:System.Web.Compilation.BuildProvider> class to build all files in the Web site with the custom extension of .abc, if your Web site is named WebSite1, and the Web site contains a file named Example.abc, the VirtualPath property contains the value `/WebSite1/Example.abc`.  \\n  \\n The file extension of each file within the application determines the file type, and the corresponding build provider for the file type. The ASP.NET build environment initializes a <xref:System.Web.Compilation.BuildProvider> object for each file based on the file type, and uses the <xref:System.Web.Compilation.BuildProvider> methods to generate source for each file.  \\n  \\n For more information about configuring a build provider, see [buildProviders Element for compilation (ASP.NET Settings Schema)](http://msdn.microsoft.com/en-us/40fa889d-5412-487a-b6a9-21eb011c2384).\"\n  syntax:\n    content: protected string VirtualPath { get; }\n    return:\n      type: System.String\n      description: A read-only string that specifies the virtual path of a file to be compiled by this build provider.\n  overload: System.Web.Compilation.BuildProvider.VirtualPath*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Compilation.BuildProvider.VirtualPathDependencies\n  id: VirtualPathDependencies\n  parent: System.Web.Compilation.BuildProvider\n  langs:\n  - csharp\n  name: VirtualPathDependencies\n  nameWithType: BuildProvider.VirtualPathDependencies\n  fullName: System.Web.Compilation.BuildProvider.VirtualPathDependencies\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Compilation\n  summary: Represents a collection of virtual paths that must be built before the build provider generates code.\n  remarks: The VirtualPathDependencies property is a collection of virtual paths that must be compiled before the <xref:System.Web.Compilation.BuildProvider> instance generates source code. The assemblies from the virtual paths in VirtualPathDependencies are added as references to the compilation for the <xref:System.Web.Compilation.BuildProvider> instance.\n  syntax:\n    content: public virtual System.Collections.ICollection VirtualPathDependencies { get; }\n    return:\n      type: System.Collections.ICollection\n      description: A read-only collection of strings, representing the virtual paths that this instance of the build provider is dependent on.\n  overload: System.Web.Compilation.BuildProvider.VirtualPathDependencies*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.Web.HttpException\n  parent: System.Web\n  isExternal: false\n  name: HttpException\n  nameWithType: HttpException\n  fullName: System.Web.HttpException\n- uid: System.Web.Compilation.BuildProvider.#ctor\n  parent: System.Web.Compilation.BuildProvider\n  isExternal: false\n  name: BuildProvider()\n  nameWithType: BuildProvider.BuildProvider()\n  fullName: System.Web.Compilation.BuildProvider.BuildProvider()\n- uid: System.Web.Compilation.BuildProvider.CodeCompilerType\n  parent: System.Web.Compilation.BuildProvider\n  isExternal: false\n  name: CodeCompilerType\n  nameWithType: BuildProvider.CodeCompilerType\n  fullName: System.Web.Compilation.BuildProvider.CodeCompilerType\n- uid: System.Web.Compilation.CompilerType\n  parent: System.Web.Compilation\n  isExternal: false\n  name: CompilerType\n  nameWithType: CompilerType\n  fullName: System.Web.Compilation.CompilerType\n- uid: System.Web.Compilation.BuildProvider.GenerateCode(System.Web.Compilation.AssemblyBuilder)\n  parent: System.Web.Compilation.BuildProvider\n  isExternal: false\n  name: GenerateCode(AssemblyBuilder)\n  nameWithType: BuildProvider.GenerateCode(AssemblyBuilder)\n  fullName: System.Web.Compilation.BuildProvider.GenerateCode(AssemblyBuilder)\n- uid: System.Web.Compilation.AssemblyBuilder\n  parent: System.Web.Compilation\n  isExternal: false\n  name: AssemblyBuilder\n  nameWithType: AssemblyBuilder\n  fullName: System.Web.Compilation.AssemblyBuilder\n- uid: System.Web.Compilation.BuildProvider.GetCodeCompileUnit(System.Collections.IDictionary@)\n  parent: System.Web.Compilation.BuildProvider\n  isExternal: false\n  name: GetCodeCompileUnit(IDictionary)\n  nameWithType: BuildProvider.GetCodeCompileUnit(IDictionary)\n  fullName: System.Web.Compilation.BuildProvider.GetCodeCompileUnit(IDictionary)\n- uid: System.CodeDom.CodeCompileUnit\n  parent: System.CodeDom\n  isExternal: false\n  name: CodeCompileUnit\n  nameWithType: CodeCompileUnit\n  fullName: System.CodeDom.CodeCompileUnit\n- uid: System.Collections.IDictionary\n  parent: System.Collections\n  isExternal: true\n  name: IDictionary\n  nameWithType: IDictionary\n  fullName: System.Collections.IDictionary\n- uid: System.Web.Compilation.BuildProvider.GetCustomString(System.CodeDom.Compiler.CompilerResults)\n  parent: System.Web.Compilation.BuildProvider\n  isExternal: false\n  name: GetCustomString(CompilerResults)\n  nameWithType: BuildProvider.GetCustomString(CompilerResults)\n  fullName: System.Web.Compilation.BuildProvider.GetCustomString(CompilerResults)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.CodeDom.Compiler.CompilerResults\n  parent: System.CodeDom.Compiler\n  isExternal: false\n  name: CompilerResults\n  nameWithType: CompilerResults\n  fullName: System.CodeDom.Compiler.CompilerResults\n- uid: System.Web.Compilation.BuildProvider.GetDefaultCompilerType\n  parent: System.Web.Compilation.BuildProvider\n  isExternal: false\n  name: GetDefaultCompilerType()\n  nameWithType: BuildProvider.GetDefaultCompilerType()\n  fullName: System.Web.Compilation.BuildProvider.GetDefaultCompilerType()\n- uid: System.Web.Compilation.BuildProvider.GetDefaultCompilerTypeForLanguage(System.String)\n  parent: System.Web.Compilation.BuildProvider\n  isExternal: false\n  name: GetDefaultCompilerTypeForLanguage(String)\n  nameWithType: BuildProvider.GetDefaultCompilerTypeForLanguage(String)\n  fullName: System.Web.Compilation.BuildProvider.GetDefaultCompilerTypeForLanguage(String)\n- uid: System.Web.Compilation.BuildProvider.GetGeneratedType(System.CodeDom.Compiler.CompilerResults)\n  parent: System.Web.Compilation.BuildProvider\n  isExternal: false\n  name: GetGeneratedType(CompilerResults)\n  nameWithType: BuildProvider.GetGeneratedType(CompilerResults)\n  fullName: System.Web.Compilation.BuildProvider.GetGeneratedType(CompilerResults)\n- uid: System.Type\n  parent: System\n  isExternal: true\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Web.Compilation.BuildProvider.GetResultFlags(System.CodeDom.Compiler.CompilerResults)\n  parent: System.Web.Compilation.BuildProvider\n  isExternal: false\n  name: GetResultFlags(CompilerResults)\n  nameWithType: BuildProvider.GetResultFlags(CompilerResults)\n  fullName: System.Web.Compilation.BuildProvider.GetResultFlags(CompilerResults)\n- uid: System.Web.Compilation.BuildProviderResultFlags\n  parent: System.Web.Compilation\n  isExternal: false\n  name: BuildProviderResultFlags\n  nameWithType: BuildProviderResultFlags\n  fullName: System.Web.Compilation.BuildProviderResultFlags\n- uid: System.Web.Compilation.BuildProvider.OpenReader\n  parent: System.Web.Compilation.BuildProvider\n  isExternal: false\n  name: OpenReader()\n  nameWithType: BuildProvider.OpenReader()\n  fullName: System.Web.Compilation.BuildProvider.OpenReader()\n- uid: System.IO.TextReader\n  parent: System.IO\n  isExternal: true\n  name: TextReader\n  nameWithType: TextReader\n  fullName: System.IO.TextReader\n- uid: System.Web.Compilation.BuildProvider.OpenReader(System.String)\n  parent: System.Web.Compilation.BuildProvider\n  isExternal: false\n  name: OpenReader(String)\n  nameWithType: BuildProvider.OpenReader(String)\n  fullName: System.Web.Compilation.BuildProvider.OpenReader(String)\n- uid: System.Web.Compilation.BuildProvider.OpenStream\n  parent: System.Web.Compilation.BuildProvider\n  isExternal: false\n  name: OpenStream()\n  nameWithType: BuildProvider.OpenStream()\n  fullName: System.Web.Compilation.BuildProvider.OpenStream()\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: true\n  name: Stream\n  nameWithType: Stream\n  fullName: System.IO.Stream\n- uid: System.Web.Compilation.BuildProvider.OpenStream(System.String)\n  parent: System.Web.Compilation.BuildProvider\n  isExternal: false\n  name: OpenStream(String)\n  nameWithType: BuildProvider.OpenStream(String)\n  fullName: System.Web.Compilation.BuildProvider.OpenStream(String)\n- uid: System.Web.Compilation.BuildProvider.ProcessCompileErrors(System.CodeDom.Compiler.CompilerResults)\n  parent: System.Web.Compilation.BuildProvider\n  isExternal: false\n  name: ProcessCompileErrors(CompilerResults)\n  nameWithType: BuildProvider.ProcessCompileErrors(CompilerResults)\n  fullName: System.Web.Compilation.BuildProvider.ProcessCompileErrors(CompilerResults)\n- uid: System.Web.Compilation.BuildProvider.ReferencedAssemblies\n  parent: System.Web.Compilation.BuildProvider\n  isExternal: false\n  name: ReferencedAssemblies\n  nameWithType: BuildProvider.ReferencedAssemblies\n  fullName: System.Web.Compilation.BuildProvider.ReferencedAssemblies\n- uid: System.Collections.ICollection\n  parent: System.Collections\n  isExternal: true\n  name: ICollection\n  nameWithType: ICollection\n  fullName: System.Collections.ICollection\n- uid: System.Web.Compilation.BuildProvider.RegisterBuildProvider(System.String,System.Type)\n  parent: System.Web.Compilation.BuildProvider\n  isExternal: false\n  name: RegisterBuildProvider(String,Type)\n  nameWithType: BuildProvider.RegisterBuildProvider(String,Type)\n  fullName: System.Web.Compilation.BuildProvider.RegisterBuildProvider(String,Type)\n- uid: System.Web.Compilation.BuildProvider.VirtualPath\n  parent: System.Web.Compilation.BuildProvider\n  isExternal: false\n  name: VirtualPath\n  nameWithType: BuildProvider.VirtualPath\n  fullName: System.Web.Compilation.BuildProvider.VirtualPath\n- uid: System.Web.Compilation.BuildProvider.VirtualPathDependencies\n  parent: System.Web.Compilation.BuildProvider\n  isExternal: false\n  name: VirtualPathDependencies\n  nameWithType: BuildProvider.VirtualPathDependencies\n  fullName: System.Web.Compilation.BuildProvider.VirtualPathDependencies\n- uid: System.Web.Compilation.BuildProvider.#ctor*\n  parent: System.Web.Compilation.BuildProvider\n  isExternal: false\n  name: BuildProvider\n  nameWithType: BuildProvider.BuildProvider\n- uid: System.Web.Compilation.BuildProvider.CodeCompilerType*\n  parent: System.Web.Compilation.BuildProvider\n  isExternal: false\n  name: CodeCompilerType\n  nameWithType: BuildProvider.CodeCompilerType\n- uid: System.Web.Compilation.BuildProvider.GenerateCode*\n  parent: System.Web.Compilation.BuildProvider\n  isExternal: false\n  name: GenerateCode\n  nameWithType: BuildProvider.GenerateCode\n- uid: System.Web.Compilation.BuildProvider.GetCodeCompileUnit*\n  parent: System.Web.Compilation.BuildProvider\n  isExternal: false\n  name: GetCodeCompileUnit\n  nameWithType: BuildProvider.GetCodeCompileUnit\n- uid: System.Web.Compilation.BuildProvider.GetCustomString*\n  parent: System.Web.Compilation.BuildProvider\n  isExternal: false\n  name: GetCustomString\n  nameWithType: BuildProvider.GetCustomString\n- uid: System.Web.Compilation.BuildProvider.GetDefaultCompilerType*\n  parent: System.Web.Compilation.BuildProvider\n  isExternal: false\n  name: GetDefaultCompilerType\n  nameWithType: BuildProvider.GetDefaultCompilerType\n- uid: System.Web.Compilation.BuildProvider.GetDefaultCompilerTypeForLanguage*\n  parent: System.Web.Compilation.BuildProvider\n  isExternal: false\n  name: GetDefaultCompilerTypeForLanguage\n  nameWithType: BuildProvider.GetDefaultCompilerTypeForLanguage\n- uid: System.Web.Compilation.BuildProvider.GetGeneratedType*\n  parent: System.Web.Compilation.BuildProvider\n  isExternal: false\n  name: GetGeneratedType\n  nameWithType: BuildProvider.GetGeneratedType\n- uid: System.Web.Compilation.BuildProvider.GetResultFlags*\n  parent: System.Web.Compilation.BuildProvider\n  isExternal: false\n  name: GetResultFlags\n  nameWithType: BuildProvider.GetResultFlags\n- uid: System.Web.Compilation.BuildProvider.OpenReader*\n  parent: System.Web.Compilation.BuildProvider\n  isExternal: false\n  name: OpenReader\n  nameWithType: BuildProvider.OpenReader\n- uid: System.Web.Compilation.BuildProvider.OpenStream*\n  parent: System.Web.Compilation.BuildProvider\n  isExternal: false\n  name: OpenStream\n  nameWithType: BuildProvider.OpenStream\n- uid: System.Web.Compilation.BuildProvider.ProcessCompileErrors*\n  parent: System.Web.Compilation.BuildProvider\n  isExternal: false\n  name: ProcessCompileErrors\n  nameWithType: BuildProvider.ProcessCompileErrors\n- uid: System.Web.Compilation.BuildProvider.ReferencedAssemblies*\n  parent: System.Web.Compilation.BuildProvider\n  isExternal: false\n  name: ReferencedAssemblies\n  nameWithType: BuildProvider.ReferencedAssemblies\n- uid: System.Web.Compilation.BuildProvider.RegisterBuildProvider*\n  parent: System.Web.Compilation.BuildProvider\n  isExternal: false\n  name: RegisterBuildProvider\n  nameWithType: BuildProvider.RegisterBuildProvider\n- uid: System.Web.Compilation.BuildProvider.VirtualPath*\n  parent: System.Web.Compilation.BuildProvider\n  isExternal: false\n  name: VirtualPath\n  nameWithType: BuildProvider.VirtualPath\n- uid: System.Web.Compilation.BuildProvider.VirtualPathDependencies*\n  parent: System.Web.Compilation.BuildProvider\n  isExternal: false\n  name: VirtualPathDependencies\n  nameWithType: BuildProvider.VirtualPathDependencies\n"}