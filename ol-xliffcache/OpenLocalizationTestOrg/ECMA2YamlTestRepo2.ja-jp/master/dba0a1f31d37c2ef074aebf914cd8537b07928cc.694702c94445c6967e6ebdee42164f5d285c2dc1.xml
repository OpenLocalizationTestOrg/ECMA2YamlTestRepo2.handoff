{"nodes":[{"pos":[233,301],"content":"Represents a callback method to be executed by a thread pool thread.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents a callback method to be executed by a thread pool thread.","pos":[0,68]}]},{"pos":[314,1550],"content":"WaitCallback represents a callback method that you want to execute on a <xref:System.Threading.ThreadPool> thread. Create the delegate by passing your callback method to the WaitCallback constructor. Your method must have the signature shown here.       Queue your task for execution by passing the WaitCallback delegate to <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A?displayProperty=fullName>. Your callback method executes when a thread pool thread becomes available.      > [!NOTE] >  Visual Basic users can omit the WaitCallback constructor, and simply use the `AddressOf` operator when passing the callback method to <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>. Visual Basic automatically calls the correct delegate constructor.       If you want to pass information to your callback method, create an object that contains the necessary information and pass it to <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> when you queue your task for execution. Each time your callback method executes, the `state` parameter contains this object.       For more information about using callbacks to synchronize thread pool threads, see [The Managed Thread Pool](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"WaitCallback represents a callback method that you want to execute on a &lt;xref:System.Threading.ThreadPool&gt; thread.","pos":[0,114],"source":"WaitCallback represents a callback method that you want to execute on a <xref:System.Threading.ThreadPool> thread."},{"content":"Create the delegate by passing your callback method to the WaitCallback constructor.","pos":[115,199]},{"content":"Your method must have the signature shown here.","pos":[200,247]},{"content":"Queue your task for execution by passing the WaitCallback delegate to &lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A?displayProperty=fullName&gt;.","pos":[254,405],"source":"       Queue your task for execution by passing the WaitCallback delegate to <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A?displayProperty=fullName>."},{"content":"Your callback method executes when a thread pool thread becomes available.","pos":[406,480]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Visual Basic users can omit the WaitCallback constructor, and simply use the <ph id=\"ph2\">`AddressOf`</ph> operator when passing the callback method to &lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;.","pos":[486,689],"source":"      > [!NOTE] >  Visual Basic users can omit the WaitCallback constructor, and simply use the `AddressOf` operator when passing the callback method to <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>."},{"content":"Visual Basic automatically calls the correct delegate constructor.","pos":[690,756]},{"content":"If you want to pass information to your callback method, create an object that contains the necessary information and pass it to &lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt; when you queue your task for execution.","pos":[763,987],"source":"       If you want to pass information to your callback method, create an object that contains the necessary information and pass it to <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> when you queue your task for execution."},{"content":"Each time your callback method executes, the <ph id=\"ph1\">`state`</ph> parameter contains this object.","pos":[988,1072],"source":" Each time your callback method executes, the `state` parameter contains this object."},{"content":"For more information about using callbacks to synchronize thread pool threads, see <bpt id=\"p1\">[</bpt>The Managed Thread Pool<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1079,1227],"source":"       For more information about using callbacks to synchronize thread pool threads, see [The Managed Thread Pool](~/add/includes/ajax-current-ext-md.md)."}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Threading.WaitCallback\n  id: WaitCallback\n  langs:\n  - csharp\n  name: WaitCallback\n  nameWithType: WaitCallback\n  fullName: System.Threading.WaitCallback\n  type: Delegate\n  summary: Represents a callback method to be executed by a thread pool thread.\n  remarks: \"WaitCallback represents a callback method that you want to execute on a <xref:System.Threading.ThreadPool> thread. Create the delegate by passing your callback method to the WaitCallback constructor. Your method must have the signature shown here.  \\n  \\n Queue your task for execution by passing the WaitCallback delegate to <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A?displayProperty=fullName>. Your callback method executes when a thread pool thread becomes available.  \\n  \\n> [!NOTE]\\n>  Visual Basic users can omit the WaitCallback constructor, and simply use the `AddressOf` operator when passing the callback method to <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>. Visual Basic automatically calls the correct delegate constructor.  \\n  \\n If you want to pass information to your callback method, create an object that contains the necessary information and pass it to <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> when you queue your task for execution. Each time your callback method executes, the `state` parameter contains this object.  \\n  \\n For more information about using callbacks to synchronize thread pool threads, see [The Managed Thread Pool](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"This section contains two examples. The first example demonstrates how you can queue a simple task for execution by the thread pool.  \\n  \\n The second example demonstrates how you can queue a task and pass information to it.  \\n  \\n **Example 1**  \\n  \\n This example shows how to use the WaitCallback delegate to queue a task for execution by the thread pool. The code example uses the <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=fullName> method overload to queue a task, which is represented by a WaitCallback that wraps the `ThreadProc` method, to execute when a thread becomes available. No task information is supplied with this overload. Therefore, the information that is available to the `ThreadProc` method is limited to the object the method belongs to.  \\n  \\n [!code-cpp[System.Threading.ThreadPool QueueUserWorkItem0#1](~/add/codesnippet/cpp/t-system.threading.waitc_1.cpp)]\\n [!code-vb[System.Threading.ThreadPool QueueUserWorkItem0#1](~/add/codesnippet/visualbasic/t-system.threading.waitc_1.vb)]\\n [!code-cs[System.Threading.ThreadPool QueueUserWorkItem0#1](~/add/codesnippet/csharp/t-system.threading.waitc_1.cs)]  \\n  \\n **Example 2**  \\n  \\n This example shows how to create an object that contains task information. It also demonstrates how to pass that object to a task that is queued for execution by the thread pool.  \\n  \\n [!code-cpp[System.Threading.ThreadPool QueueUserWorkItem1#1](~/add/codesnippet/cpp/t-system.threading.waitc_2.cpp)]\\n [!code-cs[System.Threading.ThreadPool QueueUserWorkItem1#1](~/add/codesnippet/csharp/t-system.threading.waitc_2.cs)]\\n [!code-vb[System.Threading.ThreadPool QueueUserWorkItem1#1](~/add/codesnippet/visualbasic/t-system.threading.waitc_2.vb)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public delegate void WaitCallback(object state);\n  inheritance:\n  - System.Delegate\n  platform:\n  - net462\nreferences:\n- uid: System.Delegate\n  isExternal: false\n  name: System.Delegate\n"}