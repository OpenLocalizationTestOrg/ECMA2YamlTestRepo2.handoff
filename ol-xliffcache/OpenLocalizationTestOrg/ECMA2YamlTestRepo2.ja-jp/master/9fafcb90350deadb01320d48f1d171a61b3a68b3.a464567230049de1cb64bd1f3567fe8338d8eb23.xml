{"nodes":[{"pos":[479,673],"content":"Provides a way to create a <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Where\" name=\"Where\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> clause from parameters in a &lt;xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters*&gt; collection.","needQuote":true,"needEscape":true,"source":"Provides a way to create a <xref uid=\"langword_csharp_Where\" name=\"Where\" href=\"\"></xref> clause from parameters in a <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters*> collection."},{"pos":[686,1388],"content":"The PropertyExpression class is used with the <xref:System.Web.UI.WebControls.QueryExtender> control to filter data in data fields. The PropertyExpression class compares a property value of a column to a specified value. For example, you can compare a Boolean value to the value in the discontinued column of a Products table in a database.       The PropertyExpression class creates an equals (==) comparison for the value of each parameter and the corresponding property of the <xref:System.Linq.IQueryable> data object. If you provide more than one parameter, the parameters are combined using the logical `AND` operator. Parameters that contain an empty value are not added to the `Where` clause.","needQuote":false,"needEscape":true,"nodes":[{"content":"The PropertyExpression class is used with the &lt;xref:System.Web.UI.WebControls.QueryExtender&gt; control to filter data in data fields.","pos":[0,131],"source":"The PropertyExpression class is used with the <xref:System.Web.UI.WebControls.QueryExtender> control to filter data in data fields."},{"content":"The PropertyExpression class compares a property value of a column to a specified value.","pos":[132,220]},{"content":"For example, you can compare a Boolean value to the value in the discontinued column of a Products table in a database.","pos":[221,340]},{"content":"The PropertyExpression class creates an equals (==) comparison for the value of each parameter and the corresponding property of the &lt;xref:System.Linq.IQueryable&gt; data object.","pos":[347,522],"source":"       The PropertyExpression class creates an equals (==) comparison for the value of each parameter and the corresponding property of the <xref:System.Linq.IQueryable> data object."},{"content":"If you provide more than one parameter, the parameters are combined using the logical <ph id=\"ph1\">`AND`</ph> operator.","pos":[523,624],"source":" If you provide more than one parameter, the parameters are combined using the logical `AND` operator."},{"content":"Parameters that contain an empty value are not added to the <ph id=\"ph1\">`Where`</ph> clause.","pos":[625,700],"source":" Parameters that contain an empty value are not added to the `Where` clause."}]},{"pos":[4380,4498],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.Expressions.PropertyExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Web.UI.WebControls.Expressions.PropertyExpression\"></xref> class."},{"pos":[5222,5389],"content":"Applies a <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.Expressions.PropertyExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object by using the specified &lt;xref:System.Linq.IQueryable&gt; data source object.","needQuote":true,"needEscape":true,"source":"Applies a <xref href=\"System.Web.UI.WebControls.Expressions.PropertyExpression\"></xref> object by using the specified <xref:System.Linq.IQueryable> data source object."},{"pos":[5401,5615],"content":"This method combines the specified &lt;xref:System.Linq.IQueryable&gt; object with the expressions in the &lt;xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A&gt; collection by using the logical <ph id=\"ph1\">`AND`</ph> operator.","needQuote":true,"needEscape":true,"source":"This method combines the specified <xref:System.Linq.IQueryable> object with the expressions in the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection by using the logical `AND` operator."},{"pos":[5811,5843],"content":"The object to use for the query.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object to use for the query.","pos":[0,32]}]},{"pos":[5910,5973],"content":"An instance of the object that the expressions were applied to.","needQuote":true,"needEscape":true,"nodes":[{"content":"An instance of the object that the expressions were applied to.","pos":[0,63]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.UI.WebControls.Expressions.PropertyExpression\n  id: PropertyExpression\n  children:\n  - System.Web.UI.WebControls.Expressions.PropertyExpression.#ctor\n  - System.Web.UI.WebControls.Expressions.PropertyExpression.GetQueryable(System.Linq.IQueryable)\n  langs:\n  - csharp\n  name: PropertyExpression\n  nameWithType: PropertyExpression\n  fullName: System.Web.UI.WebControls.Expressions.PropertyExpression\n  type: Class\n  summary: Provides a way to create a <xref uid=\"langword_csharp_Where\" name=\"Where\" href=\"\"></xref> clause from parameters in a <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters*> collection.\n  remarks: \"The PropertyExpression class is used with the <xref:System.Web.UI.WebControls.QueryExtender> control to filter data in data fields. The PropertyExpression class compares a property value of a column to a specified value. For example, you can compare a Boolean value to the value in the discontinued column of a Products table in a database.  \\n  \\n The PropertyExpression class creates an equals (==) comparison for the value of each parameter and the corresponding property of the <xref:System.Linq.IQueryable> data object. If you provide more than one parameter, the parameters are combined using the logical `AND` operator. Parameters that contain an empty value are not added to the `Where` clause.\"\n  example:\n  - \"The following example shows how to search the Products table of the AdventureWorks database for products whose `MakeFlag` property (a Boolean column) is set to `true`. The Boolean value parameter is set in a check box. The result of the query that is returned from the <xref:System.Web.UI.WebControls.LinqDataSource> control is displayed in a <xref:System.Web.UI.WebControls.GridView> control.  \\n  \\n This code example is part of a larger example that is provided in [Walkthrough: Filtering Data in a Web Page Using Declarative Syntax](http://msdn.microsoft.com/en-us/b305ae31-1a1b-4d07-a678-51457c17614f).  \\n  \\n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]\"\n  syntax:\n    content: 'public class PropertyExpression : System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression'\n  inheritance:\n  - System.Object\n  - System.Web.UI.WebControls.Expressions.DataSourceExpression\n  - System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression\n  implements: []\n  inheritedMembers:\n  - System.Web.UI.WebControls.Expressions.DataSourceExpression.Context\n  - System.Web.UI.WebControls.Expressions.DataSourceExpression.DataSource\n  - System.Web.UI.WebControls.Expressions.DataSourceExpression.IsTrackingViewState\n  - System.Web.UI.WebControls.Expressions.DataSourceExpression.Owner\n  - System.Web.UI.WebControls.Expressions.DataSourceExpression.SetDirty\n  - System.Web.UI.WebControls.Expressions.DataSourceExpression.System#Web#UI#IStateManager#IsTrackingViewState\n  - System.Web.UI.WebControls.Expressions.DataSourceExpression.System#Web#UI#IStateManager#LoadViewState(System.Object)\n  - System.Web.UI.WebControls.Expressions.DataSourceExpression.System#Web#UI#IStateManager#SaveViewState\n  - System.Web.UI.WebControls.Expressions.DataSourceExpression.System#Web#UI#IStateManager#TrackViewState\n  - System.Web.UI.WebControls.Expressions.DataSourceExpression.ViewState\n  - System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression.LoadViewState(System.Object)\n  - System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression.Parameters\n  - System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression.SaveViewState\n  - System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression.SetContext(System.Web.UI.Control,System.Web.HttpContext,System.Web.UI.WebControls.IQueryableDataSource)\n  - System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression.TrackViewState\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.Expressions.PropertyExpression.#ctor\n  id: '#ctor'\n  parent: System.Web.UI.WebControls.Expressions.PropertyExpression\n  langs:\n  - csharp\n  name: PropertyExpression()\n  nameWithType: PropertyExpression.PropertyExpression()\n  fullName: System.Web.UI.WebControls.Expressions.PropertyExpression.PropertyExpression()\n  type: Constructor\n  assemblies:\n  - System.Web.Extensions\n  namespace: System.Web.UI.WebControls.Expressions\n  summary: Initializes a new instance of the <xref href=\"System.Web.UI.WebControls.Expressions.PropertyExpression\"></xref> class.\n  syntax:\n    content: public PropertyExpression ();\n    parameters: []\n  overload: System.Web.UI.WebControls.Expressions.PropertyExpression.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.Expressions.PropertyExpression.GetQueryable(System.Linq.IQueryable)\n  id: GetQueryable(System.Linq.IQueryable)\n  parent: System.Web.UI.WebControls.Expressions.PropertyExpression\n  langs:\n  - csharp\n  name: GetQueryable(IQueryable)\n  nameWithType: PropertyExpression.GetQueryable(IQueryable)\n  fullName: System.Web.UI.WebControls.Expressions.PropertyExpression.GetQueryable(IQueryable)\n  type: Method\n  assemblies:\n  - System.Web.Extensions\n  namespace: System.Web.UI.WebControls.Expressions\n  summary: Applies a <xref href=\"System.Web.UI.WebControls.Expressions.PropertyExpression\"></xref> object by using the specified <xref:System.Linq.IQueryable> data source object.\n  remarks: This method combines the specified <xref:System.Linq.IQueryable> object with the expressions in the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection by using the logical `AND` operator.\n  syntax:\n    content: public override System.Linq.IQueryable GetQueryable (System.Linq.IQueryable source);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable\n      description: The object to use for the query.\n    return:\n      type: System.Linq.IQueryable\n      description: An instance of the object that the expressions were applied to.\n  overload: System.Web.UI.WebControls.Expressions.PropertyExpression.GetQueryable*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression\n  isExternal: false\n  name: System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression\n- uid: System.Web.UI.WebControls.Expressions.PropertyExpression.#ctor\n  parent: System.Web.UI.WebControls.Expressions.PropertyExpression\n  isExternal: false\n  name: PropertyExpression()\n  nameWithType: PropertyExpression.PropertyExpression()\n  fullName: System.Web.UI.WebControls.Expressions.PropertyExpression.PropertyExpression()\n- uid: System.Web.UI.WebControls.Expressions.PropertyExpression.GetQueryable(System.Linq.IQueryable)\n  parent: System.Web.UI.WebControls.Expressions.PropertyExpression\n  isExternal: false\n  name: GetQueryable(IQueryable)\n  nameWithType: PropertyExpression.GetQueryable(IQueryable)\n  fullName: System.Web.UI.WebControls.Expressions.PropertyExpression.GetQueryable(IQueryable)\n- uid: System.Linq.IQueryable\n  parent: System.Linq\n  isExternal: true\n  name: IQueryable\n  nameWithType: IQueryable\n  fullName: System.Linq.IQueryable\n- uid: System.Web.UI.WebControls.Expressions.PropertyExpression.#ctor*\n  parent: System.Web.UI.WebControls.Expressions.PropertyExpression\n  isExternal: false\n  name: PropertyExpression\n  nameWithType: PropertyExpression.PropertyExpression\n- uid: System.Web.UI.WebControls.Expressions.PropertyExpression.GetQueryable*\n  parent: System.Web.UI.WebControls.Expressions.PropertyExpression\n  isExternal: false\n  name: GetQueryable\n  nameWithType: PropertyExpression.GetQueryable\n"}