{"nodes":[{"pos":[511,549],"content":"Provides a wrapper class for pointers.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides a wrapper class for pointers.","pos":[0,38]}]},{"pos":[1245,1508],"content":"Boxes the supplied unmanaged memory pointer and the type associated with that pointer into a managed <xref href=\"System.Reflection.Pointer\"></xref> wrapper object. The value and the type are saved so they can be accessed from the native code during an invocation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Boxes the supplied unmanaged memory pointer and the type associated with that pointer into a managed <bpt id=\"p1\">&lt;xref href=\"System.Reflection.Pointer\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> wrapper object.","pos":[0,163],"source":"Boxes the supplied unmanaged memory pointer and the type associated with that pointer into a managed <xref href=\"System.Reflection.Pointer\"></xref> wrapper object."},{"content":"The value and the type are saved so they can be accessed from the native code during an invocation.","pos":[164,263]}]},{"pos":[1655,1693],"content":"The supplied unmanaged memory pointer.","needQuote":true,"needEscape":true,"nodes":[{"content":"The supplied unmanaged memory pointer.","pos":[0,38]}]},{"pos":[1752,1797],"content":"The type associated with the <ph id=\"ph1\">`ptr`</ph> parameter.","needQuote":true,"needEscape":true,"source":"The type associated with the `ptr` parameter."},{"pos":[1855,1872],"content":"A pointer object.","needQuote":true,"needEscape":true,"nodes":[{"content":"A pointer object.","pos":[0,17]}]},{"pos":[2024,2059],"content":"<ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> is not a pointer.","needQuote":true,"needEscape":true,"source":"<code>type</code> is not a pointer."},{"pos":[2162,2244],"content":"<ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>type</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[3112,3265],"content":"Sets the <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Serialization.SerializationInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object with the file name, fusion log, and additional exception information.","needQuote":true,"needEscape":true,"source":"Sets the <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object with the file name, fusion log, and additional exception information."},{"pos":[3541,3684],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Serialization.SerializationInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that holds the serialized object data about the exception being thrown.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> that holds the serialized object data about the exception being thrown."},{"pos":[3780,3906],"content":"The <xref:System.Runtime.Serialization.StreamingContext> that contains contextual information about the source or destination.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Runtime.Serialization.StreamingContext&gt; that contains contextual information about the source or destination.","pos":[0,126],"source":"The <xref:System.Runtime.Serialization.StreamingContext> that contains contextual information about the source or destination."}]},{"pos":[4376,4403],"content":"Returns the stored pointer.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the stored pointer.","pos":[0,27]}]},{"pos":[4542,4561],"content":"The stored pointer.","needQuote":true,"needEscape":true,"nodes":[{"content":"The stored pointer.","pos":[0,19]}]},{"pos":[4618,4643],"content":"This method returns void.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method returns void.","pos":[0,25]}]},{"pos":[4797,4831],"content":"<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> is not a pointer.","needQuote":true,"needEscape":true,"source":"<code>ptr</code> is not a pointer."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Reflection.Pointer\n  id: Pointer\n  children:\n  - System.Reflection.Pointer.Box(System.Void*,System.Type)\n  - System.Reflection.Pointer.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  - System.Reflection.Pointer.Unbox(System.Object)\n  langs:\n  - csharp\n  name: Pointer\n  nameWithType: Pointer\n  fullName: System.Reflection.Pointer\n  type: Class\n  summary: Provides a wrapper class for pointers.\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class Pointer : System.Runtime.Serialization.ISerializable\n  inheritance:\n  - System.Object\n  implements:\n  - System.Runtime.Serialization.ISerializable\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Reflection.Pointer.Box(System.Void*,System.Type)\n  id: Box(System.Void*,System.Type)\n  parent: System.Reflection.Pointer\n  langs:\n  - csharp\n  name: Box(Void*,Type)\n  nameWithType: Pointer.Box(Void*,Type)\n  fullName: System.Reflection.Pointer.Box(Void*,Type)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: Boxes the supplied unmanaged memory pointer and the type associated with that pointer into a managed <xref href=\"System.Reflection.Pointer\"></xref> wrapper object. The value and the type are saved so they can be accessed from the native code during an invocation.\n  syntax:\n    content: public static object Box (void* ptr, Type type);\n    parameters:\n    - id: ptr\n      type: System.Void*\n      description: The supplied unmanaged memory pointer.\n    - id: type\n      type: System.Type\n      description: The type associated with the `ptr` parameter.\n    return:\n      type: System.Object\n      description: A pointer object.\n  overload: System.Reflection.Pointer.Box*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>type</code> is not a pointer.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>type</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Reflection.Pointer.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  id: System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  isEii: true\n  parent: System.Reflection.Pointer\n  langs:\n  - csharp\n  name: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)\n  nameWithType: Pointer.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)\n  fullName: System.Reflection.Pointer.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: Sets the <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object with the file name, fusion log, and additional exception information.\n  syntax:\n    content: void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);\n    parameters:\n    - id: info\n      type: System.Runtime.Serialization.SerializationInfo\n      description: The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> that holds the serialized object data about the exception being thrown.\n    - id: context\n      type: System.Runtime.Serialization.StreamingContext\n      description: The <xref:System.Runtime.Serialization.StreamingContext> that contains contextual information about the source or destination.\n  overload: System.Reflection.Pointer.System#Runtime#Serialization#ISerializable#GetObjectData*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Reflection.Pointer.Unbox(System.Object)\n  id: Unbox(System.Object)\n  parent: System.Reflection.Pointer\n  langs:\n  - csharp\n  name: Unbox(Object)\n  nameWithType: Pointer.Unbox(Object)\n  fullName: System.Reflection.Pointer.Unbox(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: Returns the stored pointer.\n  syntax:\n    content: public static void* Unbox (object ptr);\n    parameters:\n    - id: ptr\n      type: System.Object\n      description: The stored pointer.\n    return:\n      type: System.Void*\n      description: This method returns void.\n  overload: System.Reflection.Pointer.Unbox*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>ptr</code> is not a pointer.\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.Reflection.Pointer.Box(System.Void*,System.Type)\n  parent: System.Reflection.Pointer\n  isExternal: false\n  name: Box(Void*,Type)\n  nameWithType: Pointer.Box(Void*,Type)\n  fullName: System.Reflection.Pointer.Box(Void*,Type)\n- uid: System.Type\n  parent: System\n  isExternal: true\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Reflection.Pointer.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Reflection.Pointer\n  isExternal: false\n  name: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)\n  nameWithType: Pointer.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)\n  fullName: System.Reflection.Pointer.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)\n- uid: System.Runtime.Serialization.SerializationInfo\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: SerializationInfo\n  nameWithType: SerializationInfo\n  fullName: System.Runtime.Serialization.SerializationInfo\n- uid: System.Runtime.Serialization.StreamingContext\n  parent: System.Runtime.Serialization\n  isExternal: true\n  name: StreamingContext\n  nameWithType: StreamingContext\n  fullName: System.Runtime.Serialization.StreamingContext\n- uid: System.Reflection.Pointer.Unbox(System.Object)\n  parent: System.Reflection.Pointer\n  isExternal: false\n  name: Unbox(Object)\n  nameWithType: Pointer.Unbox(Object)\n  fullName: System.Reflection.Pointer.Unbox(Object)\n- uid: System.Reflection.Pointer.Box*\n  parent: System.Reflection.Pointer\n  isExternal: false\n  name: Box\n  nameWithType: Pointer.Box\n- uid: System.Reflection.Pointer.System#Runtime#Serialization#ISerializable#GetObjectData*\n  parent: System.Reflection.Pointer\n  isExternal: false\n  name: System.Runtime.Serialization.ISerializable.GetObjectData\n  nameWithType: Pointer.System.Runtime.Serialization.ISerializable.GetObjectData\n- uid: System.Reflection.Pointer.Unbox*\n  parent: System.Reflection.Pointer\n  isExternal: false\n  name: Unbox\n  nameWithType: Pointer.Unbox\n"}