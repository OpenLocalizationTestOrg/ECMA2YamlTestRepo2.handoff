{"nodes":[{"pos":[375,452],"content":"Represents a region of a file to be archived. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents a region of a file to be archived. This class cannot be inherited.","pos":[0,77],"nodes":[{"content":"Represents a region of a file to be archived.","pos":[0,45]},{"content":"This class cannot be inherited.","pos":[46,77]}]}]},{"pos":[464,880],"content":"A <xref:System.IO.Log.LogArchiveSnapshot> object contains the information necessary to generate a consistent backup of the data in a <xref:System.IO.Log.LogStore>. The actual data is contained in the enumerable collection of FileRegion objects returned by the <xref:System.IO.Log.LogArchiveSnapshot.ArchiveRegions%2A> property. Each FileRegion instance represents a sequence of bytes in a file that must be archived.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <xref:System.IO.Log.LogArchiveSnapshot> object contains the information necessary to generate a consistent backup of the data in a <xref:System.IO.Log.LogStore>. The actual data is contained in the enumerable collection of FileRegion objects returned by the <xref:System.IO.Log.LogArchiveSnapshot.ArchiveRegions%2A> property. Each FileRegion instance represents a sequence of bytes in a file that must be archived.","pos":[0,416],"nodes":[{"content":"A &lt;xref:System.IO.Log.LogArchiveSnapshot&gt; object contains the information necessary to generate a consistent backup of the data in a &lt;xref:System.IO.Log.LogStore&gt;.","pos":[0,163],"source":"A <xref:System.IO.Log.LogArchiveSnapshot> object contains the information necessary to generate a consistent backup of the data in a <xref:System.IO.Log.LogStore>."},{"content":"The actual data is contained in the enumerable collection of FileRegion objects returned by the &lt;xref:System.IO.Log.LogArchiveSnapshot.ArchiveRegions%2A&gt; property.","pos":[164,327],"source":" The actual data is contained in the enumerable collection of FileRegion objects returned by the <xref:System.IO.Log.LogArchiveSnapshot.ArchiveRegions%2A> property."},{"content":"Each FileRegion instance represents a sequence of bytes in a file that must be archived.","pos":[328,416]}]}]},{"pos":[1669,1706],"content":"Gets the length of the file in bytes.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the length of the file in bytes.","pos":[0,37]}]},{"pos":[1718,2016],"content":"This property returns the length of the entire file instead of that of a single region in the file. The length of the region in the file can be found by examining the <xref:System.IO.Log.LogStore.Length%2A> property of the stream returned by the <xref:System.IO.Log.FileRegion.GetStream%2A> method.","needQuote":true,"needEscape":true,"nodes":[{"content":"This property returns the length of the entire file instead of that of a single region in the file. The length of the region in the file can be found by examining the <xref:System.IO.Log.LogStore.Length%2A> property of the stream returned by the <xref:System.IO.Log.FileRegion.GetStream%2A> method.","pos":[0,298],"nodes":[{"content":"This property returns the length of the entire file instead of that of a single region in the file.","pos":[0,99]},{"content":"The length of the region in the file can be found by examining the &lt;xref:System.IO.Log.LogStore.Length%2A&gt; property of the stream returned by the &lt;xref:System.IO.Log.FileRegion.GetStream%2A&gt; method.","pos":[100,298],"source":" The length of the region in the file can be found by examining the <xref:System.IO.Log.LogStore.Length%2A> property of the stream returned by the <xref:System.IO.Log.FileRegion.GetStream%2A> method."}]}]},{"pos":[2480,2512],"content":"The length of the file in bytes.","needQuote":true,"needEscape":true,"nodes":[{"content":"The length of the file in bytes.","pos":[0,32]}]},{"pos":[2908,2974],"content":"Returns a stream that can be used to read the data to be archived.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a stream that can be used to read the data to be archived.","pos":[0,66]}]},{"pos":[3477,3524],"content":"A stream that contains the data to be archived.","needQuote":true,"needEscape":true,"nodes":[{"content":"A stream that contains the data to be archived.","pos":[0,47]}]},{"pos":[3675,3749],"content":"The request could not be performed because of an unexpected I/O exception.","needQuote":true,"needEscape":true,"nodes":[{"content":"The request could not be performed because of an unexpected I/O exception.","pos":[0,74]}]},{"pos":[3852,3883],"content":"The operation is not supported.","needQuote":true,"needEscape":true,"nodes":[{"content":"The operation is not supported.","pos":[0,31]}]},{"pos":[3990,4052],"content":"The method was called after the sequence has been disposed of.","needQuote":true,"needEscape":true,"nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]},{"pos":[4153,4221],"content":"There is not enough memory to continue the execution of the program.","needQuote":true,"needEscape":true,"nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]},{"pos":[4336,4405],"content":"Access for the specified log store is denied by the operating system.","needQuote":true,"needEscape":true,"nodes":[{"content":"Access for the specified log store is denied by the operating system.","pos":[0,69]}]},{"pos":[4716,4768],"content":"Gets the offset into the file where the data begins.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the offset into the file where the data begins.","pos":[0,52]}]},{"pos":[5242,5289],"content":"The offset into the file where the data begins.","needQuote":true,"needEscape":true,"nodes":[{"content":"The offset into the file where the data begins.","pos":[0,47]}]},{"pos":[5652,5721],"content":"Gets the fully qualified location of the file containing this region.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the fully qualified location of the file containing this region.","pos":[0,69]}]},{"pos":[6196,6260],"content":"The fully qualified location of the file containing this region.","needQuote":true,"needEscape":true,"nodes":[{"content":"The fully qualified location of the file containing this region.","pos":[0,64]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.IO.Log.FileRegion\n  id: FileRegion\n  children:\n  - System.IO.Log.FileRegion.FileLength\n  - System.IO.Log.FileRegion.GetStream\n  - System.IO.Log.FileRegion.Offset\n  - System.IO.Log.FileRegion.Path\n  langs:\n  - csharp\n  name: FileRegion\n  nameWithType: FileRegion\n  fullName: System.IO.Log.FileRegion\n  type: Class\n  summary: Represents a region of a file to be archived. This class cannot be inherited.\n  remarks: A <xref:System.IO.Log.LogArchiveSnapshot> object contains the information necessary to generate a consistent backup of the data in a <xref:System.IO.Log.LogStore>. The actual data is contained in the enumerable collection of FileRegion objects returned by the <xref:System.IO.Log.LogArchiveSnapshot.ArchiveRegions%2A> property. Each FileRegion instance represents a sequence of bytes in a file that must be archived.\n  example:\n  - \"The following example demonstrates how to archive a log store to XML using the <xref:System.IO.Log.LogStore> and FileRegion classes.  \\n  \\n [!code-vb[FileRegion#0](~/add/codesnippet/visualbasic/t-system.io.log.fileregion_1.vb)]\\n [!code-cs[FileRegion#0](~/add/codesnippet/csharp/t-system.io.log.fileregion_1.cs)]\"\n  syntax:\n    content: public sealed class FileRegion\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.IO.Log.FileRegion.FileLength\n  id: FileLength\n  parent: System.IO.Log.FileRegion\n  langs:\n  - csharp\n  name: FileLength\n  nameWithType: FileRegion.FileLength\n  fullName: System.IO.Log.FileRegion.FileLength\n  type: Property\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Gets the length of the file in bytes.\n  remarks: This property returns the length of the entire file instead of that of a single region in the file. The length of the region in the file can be found by examining the <xref:System.IO.Log.LogStore.Length%2A> property of the stream returned by the <xref:System.IO.Log.FileRegion.GetStream%2A> method.\n  example:\n  - \"The following example demonstrates how to archive a log store to XML using the <xref:System.IO.Log.LogStore> and <xref:System.IO.Log.FileRegion> classes.  \\n  \\n [!code-vb[FileRegion#0](~/add/codesnippet/visualbasic/p-system.io.log.fileregi_0_1.vb)]\\n [!code-cs[FileRegion#0](~/add/codesnippet/csharp/p-system.io.log.fileregi_0_1.cs)]\"\n  syntax:\n    content: public long FileLength { get; }\n    return:\n      type: System.Int64\n      description: The length of the file in bytes.\n  overload: System.IO.Log.FileRegion.FileLength*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IO.Log.FileRegion.GetStream\n  id: GetStream\n  parent: System.IO.Log.FileRegion\n  langs:\n  - csharp\n  name: GetStream()\n  nameWithType: FileRegion.GetStream()\n  fullName: System.IO.Log.FileRegion.GetStream()\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Returns a stream that can be used to read the data to be archived.\n  remarks: ''\n  example:\n  - \"The following example demonstrates how to archive a log store to XML using the <xref:System.IO.Log.LogStore> and <xref:System.IO.Log.FileRegion> classes.  \\n  \\n [!code-vb[FileRegion#0](~/add/codesnippet/visualbasic/m-system.io.log.fileregi_1.vb)]\\n [!code-cs[FileRegion#0](~/add/codesnippet/csharp/m-system.io.log.fileregi_1.cs)]\"\n  syntax:\n    content: public System.IO.Stream GetStream ();\n    parameters: []\n    return:\n      type: System.IO.Stream\n      description: A stream that contains the data to be archived.\n  overload: System.IO.Log.FileRegion.GetStream*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: The request could not be performed because of an unexpected I/O exception.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The operation is not supported.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: Access for the specified log store is denied by the operating system.\n  platform:\n  - net462\n- uid: System.IO.Log.FileRegion.Offset\n  id: Offset\n  parent: System.IO.Log.FileRegion\n  langs:\n  - csharp\n  name: Offset\n  nameWithType: FileRegion.Offset\n  fullName: System.IO.Log.FileRegion.Offset\n  type: Property\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Gets the offset into the file where the data begins.\n  remarks: ''\n  example:\n  - \"The following example demonstrates how to archive a log store to XML using the <xref:System.IO.Log.LogStore> and <xref:System.IO.Log.FileRegion> classes.  \\n  \\n [!code-vb[FileRegion#0](~/add/codesnippet/visualbasic/p-system.io.log.fileregi_1_1.vb)]\\n [!code-cs[FileRegion#0](~/add/codesnippet/csharp/p-system.io.log.fileregi_1_1.cs)]\"\n  syntax:\n    content: public long Offset { get; }\n    return:\n      type: System.Int64\n      description: The offset into the file where the data begins.\n  overload: System.IO.Log.FileRegion.Offset*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IO.Log.FileRegion.Path\n  id: Path\n  parent: System.IO.Log.FileRegion\n  langs:\n  - csharp\n  name: Path\n  nameWithType: FileRegion.Path\n  fullName: System.IO.Log.FileRegion.Path\n  type: Property\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Gets the fully qualified location of the file containing this region.\n  remarks: ''\n  example:\n  - \"The following example demonstrates how to archive a log store to XML using the <xref:System.IO.Log.LogStore> and <xref:System.IO.Log.FileRegion> classes.  \\n  \\n [!code-vb[FileRegion#0](~/add/codesnippet/visualbasic/p-system.io.log.fileregi_2_1.vb)]\\n [!code-cs[FileRegion#0](~/add/codesnippet/csharp/p-system.io.log.fileregi_2_1.cs)]\"\n  syntax:\n    content: public string Path { get; }\n    return:\n      type: System.String\n      description: The fully qualified location of the file containing this region.\n  overload: System.IO.Log.FileRegion.Path*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.IO.IOException\n  isExternal: true\n  name: System.IO.IOException\n- uid: System.NotSupportedException\n  isExternal: true\n  name: System.NotSupportedException\n- uid: System.ObjectDisposedException\n  isExternal: true\n  name: System.ObjectDisposedException\n- uid: System.OutOfMemoryException\n  isExternal: true\n  name: System.OutOfMemoryException\n- uid: System.UnauthorizedAccessException\n  isExternal: true\n  name: System.UnauthorizedAccessException\n- uid: System.IO.Log.FileRegion.FileLength\n  parent: System.IO.Log.FileRegion\n  isExternal: false\n  name: FileLength\n  nameWithType: FileRegion.FileLength\n  fullName: System.IO.Log.FileRegion.FileLength\n- uid: System.Int64\n  parent: System\n  isExternal: true\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.IO.Log.FileRegion.GetStream\n  parent: System.IO.Log.FileRegion\n  isExternal: false\n  name: GetStream()\n  nameWithType: FileRegion.GetStream()\n  fullName: System.IO.Log.FileRegion.GetStream()\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: true\n  name: Stream\n  nameWithType: Stream\n  fullName: System.IO.Stream\n- uid: System.IO.Log.FileRegion.Offset\n  parent: System.IO.Log.FileRegion\n  isExternal: false\n  name: Offset\n  nameWithType: FileRegion.Offset\n  fullName: System.IO.Log.FileRegion.Offset\n- uid: System.IO.Log.FileRegion.Path\n  parent: System.IO.Log.FileRegion\n  isExternal: false\n  name: Path\n  nameWithType: FileRegion.Path\n  fullName: System.IO.Log.FileRegion.Path\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.IO.Log.FileRegion.FileLength*\n  parent: System.IO.Log.FileRegion\n  isExternal: false\n  name: FileLength\n  nameWithType: FileRegion.FileLength\n- uid: System.IO.Log.FileRegion.GetStream*\n  parent: System.IO.Log.FileRegion\n  isExternal: false\n  name: GetStream\n  nameWithType: FileRegion.GetStream\n- uid: System.IO.Log.FileRegion.Offset*\n  parent: System.IO.Log.FileRegion\n  isExternal: false\n  name: Offset\n  nameWithType: FileRegion.Offset\n- uid: System.IO.Log.FileRegion.Path*\n  parent: System.IO.Log.FileRegion\n  isExternal: false\n  name: Path\n  nameWithType: FileRegion.Path\n"}