{"nodes":[{"pos":[1019,1031],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[1653,1665],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[2920,2932],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[2991,3003],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[3739,3751],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[3817,3829],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[4492,4504],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[5202,5214],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[5879,5891],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[5950,5962],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.AddIn.Contract.Collections.ICollectionContract`1\n  id: ICollectionContract`1\n  children:\n  - System.AddIn.Contract.Collections.ICollectionContract`1.Add(`0)\n  - System.AddIn.Contract.Collections.ICollectionContract`1.Clear\n  - System.AddIn.Contract.Collections.ICollectionContract`1.Contains(`0)\n  - System.AddIn.Contract.Collections.ICollectionContract`1.CopyTo(`0[],System.Int32)\n  - System.AddIn.Contract.Collections.ICollectionContract`1.GetCount\n  - System.AddIn.Contract.Collections.ICollectionContract`1.GetIsReadOnly\n  - System.AddIn.Contract.Collections.ICollectionContract`1.Remove(`0)\n  langs:\n  - csharp\n  name: ICollectionContract<C>\n  nameWithType: ICollectionContract<C>\n  fullName: System.AddIn.Contract.Collections.ICollectionContract<C>\n  type: Interface\n  syntax:\n    content: 'public interface ICollectionContract<C> : System.AddIn.Contract.Collections.IEnumerableContract<C> where C : IContract'\n    typeParameters:\n    - id: C\n      description: To be added.\n  implements:\n  - System.AddIn.Contract.Collections.IEnumerableContract<C>\n  platform:\n  - net462\n- uid: System.AddIn.Contract.Collections.ICollectionContract`1.Add(`0)\n  id: Add(`0)\n  parent: System.AddIn.Contract.Collections.ICollectionContract`1\n  langs:\n  - csharp\n  name: Add(C)\n  nameWithType: ICollectionContract<C>.Add(C)\n  fullName: System.AddIn.Contract.Collections.ICollectionContract<C>.Add(C)\n  type: Method\n  assemblies:\n  - System.AddIn.Contract\n  namespace: System.AddIn.Contract.Collections\n  syntax:\n    content: public void Add (C item);\n    parameters:\n    - id: item\n      type: C\n      description: To be added.\n  overload: System.AddIn.Contract.Collections.ICollectionContract`1.Add*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.AddIn.Contract.Collections.ICollectionContract`1.Clear\n  id: Clear\n  parent: System.AddIn.Contract.Collections.ICollectionContract`1\n  langs:\n  - csharp\n  name: Clear()\n  nameWithType: ICollectionContract<C>.Clear()\n  fullName: System.AddIn.Contract.Collections.ICollectionContract<C>.Clear()\n  type: Method\n  assemblies:\n  - System.AddIn.Contract\n  namespace: System.AddIn.Contract.Collections\n  syntax:\n    content: public void Clear ();\n    parameters: []\n  overload: System.AddIn.Contract.Collections.ICollectionContract`1.Clear*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.AddIn.Contract.Collections.ICollectionContract`1.Contains(`0)\n  id: Contains(`0)\n  parent: System.AddIn.Contract.Collections.ICollectionContract`1\n  langs:\n  - csharp\n  name: Contains(C)\n  nameWithType: ICollectionContract<C>.Contains(C)\n  fullName: System.AddIn.Contract.Collections.ICollectionContract<C>.Contains(C)\n  type: Method\n  assemblies:\n  - System.AddIn.Contract\n  namespace: System.AddIn.Contract.Collections\n  syntax:\n    content: public bool Contains (C item);\n    parameters:\n    - id: item\n      type: C\n      description: To be added.\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.AddIn.Contract.Collections.ICollectionContract`1.Contains*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.AddIn.Contract.Collections.ICollectionContract`1.CopyTo(`0[],System.Int32)\n  id: CopyTo(`0[],System.Int32)\n  parent: System.AddIn.Contract.Collections.ICollectionContract`1\n  langs:\n  - csharp\n  name: CopyTo(C[],Int32)\n  nameWithType: ICollectionContract<C>.CopyTo(C[],Int32)\n  fullName: System.AddIn.Contract.Collections.ICollectionContract<C>.CopyTo(C[],Int32)\n  type: Method\n  assemblies:\n  - System.AddIn.Contract\n  namespace: System.AddIn.Contract.Collections\n  syntax:\n    content: public void CopyTo (C[] array, int arrayIndex);\n    parameters:\n    - id: array\n      type: C[]\n      description: To be added.\n    - id: arrayIndex\n      type: System.Int32\n      description: To be added.\n  overload: System.AddIn.Contract.Collections.ICollectionContract`1.CopyTo*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.AddIn.Contract.Collections.ICollectionContract`1.GetCount\n  id: GetCount\n  parent: System.AddIn.Contract.Collections.ICollectionContract`1\n  langs:\n  - csharp\n  name: GetCount()\n  nameWithType: ICollectionContract<C>.GetCount()\n  fullName: System.AddIn.Contract.Collections.ICollectionContract<C>.GetCount()\n  type: Method\n  assemblies:\n  - System.AddIn.Contract\n  namespace: System.AddIn.Contract.Collections\n  syntax:\n    content: public int GetCount ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: To be added.\n  overload: System.AddIn.Contract.Collections.ICollectionContract`1.GetCount*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.AddIn.Contract.Collections.ICollectionContract`1.GetIsReadOnly\n  id: GetIsReadOnly\n  parent: System.AddIn.Contract.Collections.ICollectionContract`1\n  langs:\n  - csharp\n  name: GetIsReadOnly()\n  nameWithType: ICollectionContract<C>.GetIsReadOnly()\n  fullName: System.AddIn.Contract.Collections.ICollectionContract<C>.GetIsReadOnly()\n  type: Method\n  assemblies:\n  - System.AddIn.Contract\n  namespace: System.AddIn.Contract.Collections\n  syntax:\n    content: public bool GetIsReadOnly ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.AddIn.Contract.Collections.ICollectionContract`1.GetIsReadOnly*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.AddIn.Contract.Collections.ICollectionContract`1.Remove(`0)\n  id: Remove(`0)\n  parent: System.AddIn.Contract.Collections.ICollectionContract`1\n  langs:\n  - csharp\n  name: Remove(C)\n  nameWithType: ICollectionContract<C>.Remove(C)\n  fullName: System.AddIn.Contract.Collections.ICollectionContract<C>.Remove(C)\n  type: Method\n  assemblies:\n  - System.AddIn.Contract\n  namespace: System.AddIn.Contract.Collections\n  syntax:\n    content: public bool Remove (C item);\n    parameters:\n    - id: item\n      type: C\n      description: To be added.\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.AddIn.Contract.Collections.ICollectionContract`1.Remove*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.AddIn.Contract.Collections.ICollectionContract`1.Add(`0)\n  parent: System.AddIn.Contract.Collections.ICollectionContract`1\n  isExternal: false\n  name: Add(C)\n  nameWithType: ICollectionContract<C>.Add(C)\n  fullName: System.AddIn.Contract.Collections.ICollectionContract<C>.Add(C)\n- uid: C\n  isExternal: true\n  name: C\n  nameWithType: C\n  fullName: C\n- uid: System.AddIn.Contract.Collections.ICollectionContract`1.Clear\n  parent: System.AddIn.Contract.Collections.ICollectionContract`1\n  isExternal: false\n  name: Clear()\n  nameWithType: ICollectionContract<C>.Clear()\n  fullName: System.AddIn.Contract.Collections.ICollectionContract<C>.Clear()\n- uid: System.AddIn.Contract.Collections.ICollectionContract`1.Contains(`0)\n  parent: System.AddIn.Contract.Collections.ICollectionContract`1\n  isExternal: false\n  name: Contains(C)\n  nameWithType: ICollectionContract<C>.Contains(C)\n  fullName: System.AddIn.Contract.Collections.ICollectionContract<C>.Contains(C)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.AddIn.Contract.Collections.ICollectionContract`1.CopyTo(`0[],System.Int32)\n  parent: System.AddIn.Contract.Collections.ICollectionContract`1\n  isExternal: false\n  name: CopyTo(C[],Int32)\n  nameWithType: ICollectionContract<C>.CopyTo(C[],Int32)\n  fullName: System.AddIn.Contract.Collections.ICollectionContract<C>.CopyTo(C[],Int32)\n- uid: C[]\n  isExternal: true\n  name: C\n  nameWithType: C\n  fullName: C[]\n  spec.csharp:\n  - uid: C\n    name: C\n    nameWithType: C\n    fullName: C[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.AddIn.Contract.Collections.ICollectionContract`1.GetCount\n  parent: System.AddIn.Contract.Collections.ICollectionContract`1\n  isExternal: false\n  name: GetCount()\n  nameWithType: ICollectionContract<C>.GetCount()\n  fullName: System.AddIn.Contract.Collections.ICollectionContract<C>.GetCount()\n- uid: System.AddIn.Contract.Collections.ICollectionContract`1.GetIsReadOnly\n  parent: System.AddIn.Contract.Collections.ICollectionContract`1\n  isExternal: false\n  name: GetIsReadOnly()\n  nameWithType: ICollectionContract<C>.GetIsReadOnly()\n  fullName: System.AddIn.Contract.Collections.ICollectionContract<C>.GetIsReadOnly()\n- uid: System.AddIn.Contract.Collections.ICollectionContract`1.Remove(`0)\n  parent: System.AddIn.Contract.Collections.ICollectionContract`1\n  isExternal: false\n  name: Remove(C)\n  nameWithType: ICollectionContract<C>.Remove(C)\n  fullName: System.AddIn.Contract.Collections.ICollectionContract<C>.Remove(C)\n- uid: System.AddIn.Contract.Collections.ICollectionContract`1.Add*\n  parent: System.AddIn.Contract.Collections.ICollectionContract`1\n  isExternal: false\n  name: Add\n  nameWithType: ICollectionContract<C>.Add\n- uid: System.AddIn.Contract.Collections.ICollectionContract`1.Clear*\n  parent: System.AddIn.Contract.Collections.ICollectionContract`1\n  isExternal: false\n  name: Clear\n  nameWithType: ICollectionContract<C>.Clear\n- uid: System.AddIn.Contract.Collections.ICollectionContract`1.Contains*\n  parent: System.AddIn.Contract.Collections.ICollectionContract`1\n  isExternal: false\n  name: Contains\n  nameWithType: ICollectionContract<C>.Contains\n- uid: System.AddIn.Contract.Collections.ICollectionContract`1.CopyTo*\n  parent: System.AddIn.Contract.Collections.ICollectionContract`1\n  isExternal: false\n  name: CopyTo\n  nameWithType: ICollectionContract<C>.CopyTo\n- uid: System.AddIn.Contract.Collections.ICollectionContract`1.GetCount*\n  parent: System.AddIn.Contract.Collections.ICollectionContract`1\n  isExternal: false\n  name: GetCount\n  nameWithType: ICollectionContract<C>.GetCount\n- uid: System.AddIn.Contract.Collections.ICollectionContract`1.GetIsReadOnly*\n  parent: System.AddIn.Contract.Collections.ICollectionContract`1\n  isExternal: false\n  name: GetIsReadOnly\n  nameWithType: ICollectionContract<C>.GetIsReadOnly\n- uid: System.AddIn.Contract.Collections.ICollectionContract`1.Remove*\n  parent: System.AddIn.Contract.Collections.ICollectionContract`1\n  isExternal: false\n  name: Remove\n  nameWithType: ICollectionContract<C>.Remove\n"}