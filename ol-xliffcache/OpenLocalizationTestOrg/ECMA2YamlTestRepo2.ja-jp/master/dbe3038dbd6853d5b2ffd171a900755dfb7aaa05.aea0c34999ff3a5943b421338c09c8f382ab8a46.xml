{"nodes":[{"pos":[1462,1558],"content":"Manages a collection of <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.Design.DesignSurface\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects.","needQuote":true,"needEscape":true,"source":"Manages a collection of <xref href=\"System.ComponentModel.Design.DesignSurface\"></xref> objects."},{"pos":[1571,3008],"content":"The DesignSurfaceManager class is designed to be a container of <xref:System.ComponentModel.Design.DesignSurface> objects. It provides common services that handle event routing between designers, property windows, and other global objects. Using DesignSurfaceManager is optional, but it is recommended if you intend to have several designer windows.       The DesignSurfaceManager class provides several design-time services automatically. You can override each of these services by replacing them in the protected <xref:System.ComponentModel.Design.DesignSurfaceManager.ServiceContainer%2A> property. To replace a service, override the constructor, call base, and make any changes through the protected <xref:System.ComponentModel.Design.DesignSurfaceManager.ServiceContainer%2A> property. All services added to the service container that implement the <xref:System.IDisposable> interface are disposed when the design surface manager is disposed. The DesignSurfaceManager class provides the <xref:System.ComponentModel.Design.IDesignerEventService> interface as the default service. <xref:System.ComponentModel.Design.IDesignerEventService> provides a global eventing mechanism for designer events. With this mechanism, an application is informed when a designer becomes active. The service provides a collection of designers and a single place where global objects, such as the Properties window, can monitor selection change events.","needQuote":false,"needEscape":true,"nodes":[{"content":"The DesignSurfaceManager class is designed to be a container of <xref:System.ComponentModel.Design.DesignSurface> objects. It provides common services that handle event routing between designers, property windows, and other global objects. Using DesignSurfaceManager is optional, but it is recommended if you intend to have several designer windows.       The DesignSurfaceManager class provides several design-time services automatically. You can override each of these services by replacing them in the protected <xref:System.ComponentModel.Design.DesignSurfaceManager.ServiceContainer%2A> property. To replace a service, override the constructor, call base, and make any changes through the protected <xref:System.ComponentModel.Design.DesignSurfaceManager.ServiceContainer%2A> property. All services added to the service container that implement the <xref:System.IDisposable> interface are disposed when the design surface manager is disposed. The DesignSurfaceManager class provides the <xref:System.ComponentModel.Design.IDesignerEventService> interface as the default service. <xref:System.ComponentModel.Design.IDesignerEventService> provides a global eventing mechanism for designer events. With this mechanism, an application is informed when a designer becomes active. The service provides a collection of designers and a single place where global objects, such as the Properties window, can monitor selection change events.","pos":[0,1435],"nodes":[{"content":"The DesignSurfaceManager class is designed to be a container of &lt;xref:System.ComponentModel.Design.DesignSurface&gt; objects.","pos":[0,122],"source":"The DesignSurfaceManager class is designed to be a container of <xref:System.ComponentModel.Design.DesignSurface> objects."},{"content":"It provides common services that handle event routing between designers, property windows, and other global objects.","pos":[123,239]},{"content":"Using DesignSurfaceManager is optional, but it is recommended if you intend to have several designer windows.","pos":[240,349]},{"content":"The DesignSurfaceManager class provides several design-time services automatically.","pos":[356,439]},{"content":"You can override each of these services by replacing them in the protected &lt;xref:System.ComponentModel.Design.DesignSurfaceManager.ServiceContainer%2A&gt; property.","pos":[440,601],"source":" You can override each of these services by replacing them in the protected <xref:System.ComponentModel.Design.DesignSurfaceManager.ServiceContainer%2A> property."},{"content":"To replace a service, override the constructor, call base, and make any changes through the protected &lt;xref:System.ComponentModel.Design.DesignSurfaceManager.ServiceContainer%2A&gt; property.","pos":[602,790],"source":" To replace a service, override the constructor, call base, and make any changes through the protected <xref:System.ComponentModel.Design.DesignSurfaceManager.ServiceContainer%2A> property."},{"content":"All services added to the service container that implement the &lt;xref:System.IDisposable&gt; interface are disposed when the design surface manager is disposed.","pos":[791,947],"source":" All services added to the service container that implement the <xref:System.IDisposable> interface are disposed when the design surface manager is disposed."},{"content":"The DesignSurfaceManager class provides the &lt;xref:System.ComponentModel.Design.IDesignerEventService&gt; interface as the default service.","pos":[948,1083],"source":" The DesignSurfaceManager class provides the <xref:System.ComponentModel.Design.IDesignerEventService> interface as the default service."},{"content":"&lt;xref:System.ComponentModel.Design.IDesignerEventService&gt; provides a global eventing mechanism for designer events.","pos":[1084,1199],"source":" <xref:System.ComponentModel.Design.IDesignerEventService> provides a global eventing mechanism for designer events."},{"content":"With this mechanism, an application is informed when a designer becomes active.","pos":[1200,1279]},{"content":"The service provides a collection of designers and a single place where global objects, such as the Properties window, can monitor selection change events.","pos":[1280,1435]}]}]},{"pos":[3732,3843],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.Design.DesignSurfaceManager\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.ComponentModel.Design.DesignSurfaceManager\"></xref> class."},{"pos":[4563,4674],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.Design.DesignSurfaceManager\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.ComponentModel.Design.DesignSurfaceManager\"></xref> class."},{"pos":[4857,4989],"content":"A parent service provider. Service requests are forwarded to this provider if they cannot be resolved by the design surface manager.","needQuote":true,"needEscape":true,"nodes":[{"content":"A parent service provider. Service requests are forwarded to this provider if they cannot be resolved by the design surface manager.","pos":[0,132],"nodes":[{"content":"A parent service provider.","pos":[0,26]},{"content":"Service requests are forwarded to this provider if they cannot be resolved by the design surface manager.","pos":[27,132]}]}]},{"pos":[5551,5584],"content":"Gets or sets the active designer.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the active designer.","pos":[0,33]}]},{"pos":[5596,6191],"content":"The ActiveDesignSurface property should be set by the designer's user interface whenever a designer becomes the active window. The default implementation of this property works with the default implementation of the <xref:System.ComponentModel.Design.IDesignerEventService> interface to notify interested parties that a new designer is now active. If you provide your own implementation of <xref:System.ComponentModel.Design.IDesignerEventService>, you should override this property to notify your service appropriately. This property can be set to `null`, indicating that no designer is active.","needQuote":true,"needEscape":true,"nodes":[{"content":"The ActiveDesignSurface property should be set by the designer's user interface whenever a designer becomes the active window.","pos":[0,126]},{"content":"The default implementation of this property works with the default implementation of the &lt;xref:System.ComponentModel.Design.IDesignerEventService&gt; interface to notify interested parties that a new designer is now active.","pos":[127,347],"source":" The default implementation of this property works with the default implementation of the <xref:System.ComponentModel.Design.IDesignerEventService> interface to notify interested parties that a new designer is now active."},{"content":"If you provide your own implementation of &lt;xref:System.ComponentModel.Design.IDesignerEventService&gt;, you should override this property to notify your service appropriately.","pos":[348,520],"source":" If you provide your own implementation of <xref:System.ComponentModel.Design.IDesignerEventService>, you should override this property to notify your service appropriately."},{"content":"This property can be set to <ph id=\"ph1\">`null`</ph>, indicating that no designer is active.","pos":[521,595],"source":" This property can be set to `null`, indicating that no designer is active."}]},{"pos":[6393,6413],"content":"The active designer.","needQuote":true,"needEscape":true,"nodes":[{"content":"The active designer.","pos":[0,20]}]},{"pos":[7021,7071],"content":"Occurs when the currently active designer changes.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs when the currently active designer changes.","pos":[0,50]}]},{"pos":[7315,7327],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[7824,7864],"content":"Creates an instance of a design surface.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates an instance of a design surface.","pos":[0,40]}]},{"pos":[8067,8097],"content":"A new design surface instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"A new design surface instance.","pos":[0,30]}]},{"pos":[8775,8815],"content":"Creates an instance of a design surface.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates an instance of a design surface.","pos":[0,40]}]},{"pos":[8828,9866],"content":"If you want to conveniently add additional per-designer services, use the `parentProvider` parameter to provide a service provider for this design surface. The CreateDesignSurface method creates a merged service provider that can satisfy service requests from both the given service provider as well as the <xref:System.ComponentModel.Design.DesignSurfaceManager> itself. The CreateDesignSurface method then passes this service provider into the <xref:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurfaceCore%2A> method.       After <xref:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurfaceCore%2A> returns the design surface, the CreateDesignSurface method tries to obtain the <xref:System.ComponentModel.Design.IDesignerEventService>. If it is present, and if it is the instance of the service that <xref:System.ComponentModel.Design.DesignSurfaceManager> provided by default, the CreateDesignSurface method raises the <xref:System.ComponentModel.Design.IDesignerEventService.DesignerCreated> event.","needQuote":false,"needEscape":true,"nodes":[{"content":"If you want to conveniently add additional per-designer services, use the <ph id=\"ph1\">`parentProvider`</ph> parameter to provide a service provider for this design surface.","pos":[0,155],"source":"If you want to conveniently add additional per-designer services, use the `parentProvider` parameter to provide a service provider for this design surface."},{"content":"The CreateDesignSurface method creates a merged service provider that can satisfy service requests from both the given service provider as well as the &lt;xref:System.ComponentModel.Design.DesignSurfaceManager&gt; itself.","pos":[156,371],"source":" The CreateDesignSurface method creates a merged service provider that can satisfy service requests from both the given service provider as well as the <xref:System.ComponentModel.Design.DesignSurfaceManager> itself."},{"content":"The CreateDesignSurface method then passes this service provider into the &lt;xref:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurfaceCore%2A&gt; method.","pos":[372,537],"source":" The CreateDesignSurface method then passes this service provider into the <xref:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurfaceCore%2A> method."},{"content":"After &lt;xref:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurfaceCore%2A&gt; returns the design surface, the CreateDesignSurface method tries to obtain the &lt;xref:System.ComponentModel.Design.IDesignerEventService&gt;.","pos":[544,771],"source":"       After <xref:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurfaceCore%2A> returns the design surface, the CreateDesignSurface method tries to obtain the <xref:System.ComponentModel.Design.IDesignerEventService>."},{"content":"If it is present, and if it is the instance of the service that &lt;xref:System.ComponentModel.Design.DesignSurfaceManager&gt; provided by default, the CreateDesignSurface method raises the &lt;xref:System.ComponentModel.Design.IDesignerEventService.DesignerCreated&gt; event.","pos":[772,1036],"source":" If it is present, and if it is the instance of the service that <xref:System.ComponentModel.Design.DesignSurfaceManager> provided by default, the CreateDesignSurface method raises the <xref:System.ComponentModel.Design.IDesignerEventService.DesignerCreated> event."}]},{"pos":[10092,10417],"content":"A parent service provider. A new merged service provider will be created that will first ask this provider for a service, and then delegate any failures to the design surface manager object. This merged provider will be passed into the <xref:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurfaceCore*> method.","needQuote":true,"needEscape":true,"nodes":[{"content":"A parent service provider. A new merged service provider will be created that will first ask this provider for a service, and then delegate any failures to the design surface manager object. This merged provider will be passed into the <xref:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurfaceCore*> method.","pos":[0,325],"nodes":[{"content":"A parent service provider.","pos":[0,26]},{"content":"A new merged service provider will be created that will first ask this provider for a service, and then delegate any failures to the design surface manager object.","pos":[27,190]},{"content":"This merged provider will be passed into the &lt;xref:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurfaceCore*&gt; method.","pos":[191,325],"source":" This merged provider will be passed into the <xref:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurfaceCore*> method."}]}]},{"pos":[10504,10534],"content":"A new design surface instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"A new design surface instance.","pos":[0,30]}]},{"pos":[10734,10826],"content":"<ph id=\"ph1\">&lt;code&gt;parentProvider&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>parentProvider</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[11424,11471],"content":"Implementation that creates the design surface.","needQuote":true,"needEscape":true,"nodes":[{"content":"Implementation that creates the design surface.","pos":[0,47]}]},{"pos":[11483,11923],"content":"The CreateDesignSurfaceCore method is called by both <xref:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurface%2A> methods. It is the implementation that actually creates the design surface. The default implementation just returns a new <xref:System.ComponentModel.Design.DesignSurface>. You may override this method to provide a custom object that derives from the <xref:System.ComponentModel.Design.DesignSurface> class.","needQuote":true,"needEscape":true,"nodes":[{"content":"The CreateDesignSurfaceCore method is called by both <xref:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurface%2A> methods. It is the implementation that actually creates the design surface. The default implementation just returns a new <xref:System.ComponentModel.Design.DesignSurface>. You may override this method to provide a custom object that derives from the <xref:System.ComponentModel.Design.DesignSurface> class.","pos":[0,440],"nodes":[{"content":"The CreateDesignSurfaceCore method is called by both &lt;xref:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurface%2A&gt; methods.","pos":[0,141],"source":"The CreateDesignSurfaceCore method is called by both <xref:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurface%2A> methods."},{"content":"It is the implementation that actually creates the design surface.","pos":[142,208]},{"content":"The default implementation just returns a new &lt;xref:System.ComponentModel.Design.DesignSurface&gt;.","pos":[209,305],"source":" The default implementation just returns a new <xref:System.ComponentModel.Design.DesignSurface>."},{"content":"You may override this method to provide a custom object that derives from the &lt;xref:System.ComponentModel.Design.DesignSurface&gt; class.","pos":[306,440],"source":" You may override this method to provide a custom object that derives from the <xref:System.ComponentModel.Design.DesignSurface> class."}]}]},{"pos":[12163,12545],"content":"A service provider to pass to the design surface. This is either an instance of <xref href=\"System.ComponentModel.Design.DesignSurfaceManager\"></xref> or an object that implements <xref:System.IServiceProvider>, and represents a merge between the service provider of the <xref href=\"System.ComponentModel.Design.DesignSurfaceManager\"></xref> class and an externally passed provider.","needQuote":true,"needEscape":true,"nodes":[{"content":"A service provider to pass to the design surface.","pos":[0,49]},{"content":"This is either an instance of <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.Design.DesignSurfaceManager\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or an object that implements &lt;xref:System.IServiceProvider&gt;, and represents a merge between the service provider of the <bpt id=\"p2\">&lt;xref href=\"System.ComponentModel.Design.DesignSurfaceManager\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> class and an externally passed provider.","pos":[50,382],"source":" This is either an instance of <xref href=\"System.ComponentModel.Design.DesignSurfaceManager\"></xref> or an object that implements <xref:System.IServiceProvider>, and represents a merge between the service provider of the <xref href=\"System.ComponentModel.Design.DesignSurfaceManager\"></xref> class and an externally passed provider."}]},{"pos":[12632,12662],"content":"A new design surface instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"A new design surface instance.","pos":[0,30]}]},{"pos":[13244,13278],"content":"Occurs when a designer is created.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs when a designer is created.","pos":[0,34]}]},{"pos":[13490,13502],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[14002,14037],"content":"Occurs when a designer is disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs when a designer is disposed.","pos":[0,35]}]},{"pos":[14250,14262],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[14730,14767],"content":"Gets a collection of design surfaces.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a collection of design surfaces.","pos":[0,37]}]},{"pos":[14779,14998],"content":"The DesignSurfaces property is implemented directly on top of <xref:System.ComponentModel.Design.IDesignerEventService>, so if you provide your own implementation of that service, this property uses your implementation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The DesignSurfaces property is implemented directly on top of &lt;xref:System.ComponentModel.Design.IDesignerEventService&gt;, so if you provide your own implementation of that service, this property uses your implementation.","pos":[0,219],"source":"The DesignSurfaces property is implemented directly on top of <xref:System.ComponentModel.Design.IDesignerEventService>, so if you provide your own implementation of that service, this property uses your implementation."}]},{"pos":[15202,15290],"content":"A collection of design surfaces that are currently hosted by the design surface manager.","needQuote":true,"needEscape":true,"nodes":[{"content":"A collection of design surfaces that are currently hosted by the design surface manager.","pos":[0,88]}]},{"pos":[15805,15911],"content":"Releases the resources used by the <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.Design.DesignSurfaceManager\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Releases the resources used by the <xref href=\"System.ComponentModel.Design.DesignSurfaceManager\"></xref>."},{"pos":[15924,16660],"content":"The public Dispose method follows the standard <xref:System.IDisposable> pattern. Calling this method destroys the design surface manager. It also disposes the service container, which causes all services that implement <xref:System.IDisposable> to also be disposed. The protected version of this method is `virtual` and follows the normal <xref:System.IDisposable> pattern.      > [!NOTE] >  Because <xref:System.ComponentModel.Design.DesignSurfaceManager> does not have any native code to clean up, it does not have a finalizer that calls <xref:System.ComponentModel.Design.DesignSurfaceManager.Dispose%2A>. If you need to call <xref:System.ComponentModel.Design.DesignSurfaceManager.Dispose%2A>, you must add a finalizer yourself.","needQuote":false,"needEscape":true,"nodes":[{"content":"The public Dispose method follows the standard &lt;xref:System.IDisposable&gt; pattern.","pos":[0,81],"source":"The public Dispose method follows the standard <xref:System.IDisposable> pattern."},{"content":"Calling this method destroys the design surface manager.","pos":[82,138]},{"content":"It also disposes the service container, which causes all services that implement &lt;xref:System.IDisposable&gt; to also be disposed.","pos":[139,266],"source":" It also disposes the service container, which causes all services that implement <xref:System.IDisposable> to also be disposed."},{"content":"The protected version of this method is <ph id=\"ph1\">`virtual`</ph> and follows the normal &lt;xref:System.IDisposable&gt; pattern.","pos":[267,374],"source":" The protected version of this method is `virtual` and follows the normal <xref:System.IDisposable> pattern."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Because &lt;xref:System.ComponentModel.Design.DesignSurfaceManager&gt; does not have any native code to clean up, it does not have a finalizer that calls &lt;xref:System.ComponentModel.Design.DesignSurfaceManager.Dispose%2A&gt;.","pos":[380,609],"source":"      > [!NOTE] >  Because <xref:System.ComponentModel.Design.DesignSurfaceManager> does not have any native code to clean up, it does not have a finalizer that calls <xref:System.ComponentModel.Design.DesignSurfaceManager.Dispose%2A>."},{"content":"If you need to call &lt;xref:System.ComponentModel.Design.DesignSurfaceManager.Dispose%2A&gt;, you must add a finalizer yourself.","pos":[610,733],"source":" If you need to call <xref:System.ComponentModel.Design.DesignSurfaceManager.Dispose%2A>, you must add a finalizer yourself."}]},{"pos":[17288,17450],"content":"Releases the unmanaged resources used by the <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.Design.DesignSurfaceManager\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and optionally releases the managed resources.","needQuote":true,"needEscape":true,"source":"Releases the unmanaged resources used by the <xref href=\"System.ComponentModel.Design.DesignSurfaceManager\"></xref> and optionally releases the managed resources."},{"pos":[17463,18700],"content":"The public <xref:System.ComponentModel.Design.DesignSurfaceManager.Dispose%2A> method follows the standard <xref:System.IDisposable> pattern. Calling this method destroys the design surface manager. It also disposes the service container, which causes all services that implement <xref:System.IDisposable> to also be disposed. The protected version of this method is `virtual` and follows the normal <xref:System.IDisposable> pattern.      > [!NOTE] >  Because <xref:System.ComponentModel.Design.DesignSurfaceManager> does not have any native code to clean up, it does not have a finalizer that calls Dispose. If you need to call Dispose, you must add a finalizer yourself.       This method is called by the public `Dispose()`method and the <xref:System.Object.Finalize%2A> method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.       When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.ComponentModel.Design.DesignSurfaceManager> references. This method invokes the `Dispose()` method of each referenced object.","needQuote":false,"needEscape":true,"nodes":[{"content":"The public &lt;xref:System.ComponentModel.Design.DesignSurfaceManager.Dispose%2A&gt; method follows the standard &lt;xref:System.IDisposable&gt; pattern.","pos":[0,141],"source":"The public <xref:System.ComponentModel.Design.DesignSurfaceManager.Dispose%2A> method follows the standard <xref:System.IDisposable> pattern."},{"content":"Calling this method destroys the design surface manager.","pos":[142,198]},{"content":"It also disposes the service container, which causes all services that implement &lt;xref:System.IDisposable&gt; to also be disposed.","pos":[199,326],"source":" It also disposes the service container, which causes all services that implement <xref:System.IDisposable> to also be disposed."},{"content":"The protected version of this method is <ph id=\"ph1\">`virtual`</ph> and follows the normal &lt;xref:System.IDisposable&gt; pattern.","pos":[327,434],"source":" The protected version of this method is `virtual` and follows the normal <xref:System.IDisposable> pattern."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Because &lt;xref:System.ComponentModel.Design.DesignSurfaceManager&gt; does not have any native code to clean up, it does not have a finalizer that calls Dispose.","pos":[440,609],"source":"      > [!NOTE] >  Because <xref:System.ComponentModel.Design.DesignSurfaceManager> does not have any native code to clean up, it does not have a finalizer that calls Dispose."},{"content":"If you need to call Dispose, you must add a finalizer yourself.","pos":[610,673]},{"content":"This method is called by the public <ph id=\"ph1\">`Dispose()`</ph>method and the &lt;xref:System.Object.Finalize%2A&gt; method.","pos":[680,782],"source":"       This method is called by the public `Dispose()`method and the <xref:System.Object.Finalize%2A> method."},{"content":"<ph id=\"ph1\">`Dispose()`</ph> invokes the protected <ph id=\"ph2\">`Dispose(Boolean)`</ph> method with the <ph id=\"ph3\">`disposing`</ph> parameter set to <ph id=\"ph4\">`true`</ph>.","pos":[783,888],"source":"`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`."},{"content":"&lt;xref:System.Object.Finalize%2A&gt; invokes <ph id=\"ph1\">`Dispose`</ph> with <ph id=\"ph2\">`disposing`</ph> set to <ph id=\"ph3\">`false`</ph>.","pos":[889,972],"source":" <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`."},{"content":"When the <ph id=\"ph1\">`disposing`</ph> parameter is true, this method releases all resources held by any managed objects that this &lt;xref:System.ComponentModel.Design.DesignSurfaceManager&gt; references.","pos":[979,1160],"source":"       When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.ComponentModel.Design.DesignSurfaceManager> references."},{"content":"This method invokes the <ph id=\"ph1\">`Dispose()`</ph> method of each referenced object.","pos":[1161,1230],"source":" This method invokes the `Dispose()` method of each referenced object."}]},{"pos":[18856,19065],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to release both managed and unmanaged resources; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> to release only unmanaged resources.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only unmanaged resources."},{"pos":[19626,19691],"content":"Gets a service in the design surface manager’s service container.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a service in the design surface manager’s service container.","pos":[0,65]}]},{"pos":[19703,19824],"content":"The GetService method forwards to any service provider that was given to the design surface manager at construction time.","needQuote":true,"needEscape":true,"nodes":[{"content":"The GetService method forwards to any service provider that was given to the design surface manager at construction time.","pos":[0,121]}]},{"pos":[19974,20003],"content":"The service type to retrieve.","needQuote":true,"needEscape":true,"nodes":[{"content":"The service type to retrieve.","pos":[0,29]}]},{"pos":[20061,20265],"content":"An object that implements, or is a derived class of, the given service type; otherwise, <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the service does not exist in the service container.","needQuote":true,"needEscape":true,"source":"An object that implements, or is a derived class of, the given service type; otherwise, <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the service does not exist in the service container."},{"pos":[20814,20855],"content":"Occurs when the global selection changes.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs when the global selection changes.","pos":[0,41]}]},{"pos":[20867,21046],"content":"This event is raised when the active designer's selection of component set changes. This is mapped through the <xref:System.ComponentModel.Design.IDesignerEventService> interface.","needQuote":true,"needEscape":true,"nodes":[{"content":"This event is raised when the active designer's selection of component set changes. This is mapped through the <xref:System.ComponentModel.Design.IDesignerEventService> interface.","pos":[0,179],"nodes":[{"content":"This event is raised when the active designer's selection of component set changes.","pos":[0,83]},{"content":"This is mapped through the &lt;xref:System.ComponentModel.Design.IDesignerEventService&gt; interface.","pos":[84,179],"source":" This is mapped through the <xref:System.ComponentModel.Design.IDesignerEventService> interface."}]}]},{"pos":[21177,21189],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[21667,21718],"content":"Gets the design surface manager's ServiceContainer.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the design surface manager's ServiceContainer.","pos":[0,51]}]},{"pos":[21913,21959],"content":"The design surface manager's ServiceContainer.","needQuote":true,"needEscape":true,"nodes":[{"content":"The design surface manager's ServiceContainer.","pos":[0,46]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ComponentModel.Design.DesignSurfaceManager\n  id: DesignSurfaceManager\n  children:\n  - System.ComponentModel.Design.DesignSurfaceManager.#ctor\n  - System.ComponentModel.Design.DesignSurfaceManager.#ctor(System.IServiceProvider)\n  - System.ComponentModel.Design.DesignSurfaceManager.ActiveDesignSurface\n  - System.ComponentModel.Design.DesignSurfaceManager.ActiveDesignSurfaceChanged\n  - System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurface\n  - System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurface(System.IServiceProvider)\n  - System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurfaceCore(System.IServiceProvider)\n  - System.ComponentModel.Design.DesignSurfaceManager.DesignSurfaceCreated\n  - System.ComponentModel.Design.DesignSurfaceManager.DesignSurfaceDisposed\n  - System.ComponentModel.Design.DesignSurfaceManager.DesignSurfaces\n  - System.ComponentModel.Design.DesignSurfaceManager.Dispose\n  - System.ComponentModel.Design.DesignSurfaceManager.Dispose(System.Boolean)\n  - System.ComponentModel.Design.DesignSurfaceManager.GetService(System.Type)\n  - System.ComponentModel.Design.DesignSurfaceManager.SelectionChanged\n  - System.ComponentModel.Design.DesignSurfaceManager.ServiceContainer\n  langs:\n  - csharp\n  name: DesignSurfaceManager\n  nameWithType: DesignSurfaceManager\n  fullName: System.ComponentModel.Design.DesignSurfaceManager\n  type: Class\n  summary: Manages a collection of <xref href=\"System.ComponentModel.Design.DesignSurface\"></xref> objects.\n  remarks: \"The DesignSurfaceManager class is designed to be a container of <xref:System.ComponentModel.Design.DesignSurface> objects. It provides common services that handle event routing between designers, property windows, and other global objects. Using DesignSurfaceManager is optional, but it is recommended if you intend to have several designer windows.  \\n  \\n The DesignSurfaceManager class provides several design-time services automatically. You can override each of these services by replacing them in the protected <xref:System.ComponentModel.Design.DesignSurfaceManager.ServiceContainer%2A> property. To replace a service, override the constructor, call base, and make any changes through the protected <xref:System.ComponentModel.Design.DesignSurfaceManager.ServiceContainer%2A> property. All services added to the service container that implement the <xref:System.IDisposable> interface are disposed when the design surface manager is disposed. The DesignSurfaceManager class provides the <xref:System.ComponentModel.Design.IDesignerEventService> interface as the default service. <xref:System.ComponentModel.Design.IDesignerEventService> provides a global eventing mechanism for designer events. With this mechanism, an application is informed when a designer becomes active. The service provides a collection of designers and a single place where global objects, such as the Properties window, can monitor selection change events.\"\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      public class DesignSurfaceManager : IDisposable, IServiceProvider\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  - System.IServiceProvider\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Design.DesignSurfaceManager.#ctor\n  id: '#ctor'\n  parent: System.ComponentModel.Design.DesignSurfaceManager\n  langs:\n  - csharp\n  name: DesignSurfaceManager()\n  nameWithType: DesignSurfaceManager.DesignSurfaceManager()\n  fullName: System.ComponentModel.Design.DesignSurfaceManager.DesignSurfaceManager()\n  type: Constructor\n  assemblies:\n  - System.Design\n  namespace: System.ComponentModel.Design\n  summary: Initializes a new instance of the <xref href=\"System.ComponentModel.Design.DesignSurfaceManager\"></xref> class.\n  syntax:\n    content: public DesignSurfaceManager ();\n    parameters: []\n  overload: System.ComponentModel.Design.DesignSurfaceManager.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Design.DesignSurfaceManager.#ctor(System.IServiceProvider)\n  id: '#ctor(System.IServiceProvider)'\n  parent: System.ComponentModel.Design.DesignSurfaceManager\n  langs:\n  - csharp\n  name: DesignSurfaceManager(IServiceProvider)\n  nameWithType: DesignSurfaceManager.DesignSurfaceManager(IServiceProvider)\n  fullName: System.ComponentModel.Design.DesignSurfaceManager.DesignSurfaceManager(IServiceProvider)\n  type: Constructor\n  assemblies:\n  - System.Design\n  namespace: System.ComponentModel.Design\n  summary: Initializes a new instance of the <xref href=\"System.ComponentModel.Design.DesignSurfaceManager\"></xref> class.\n  syntax:\n    content: public DesignSurfaceManager (IServiceProvider parentProvider);\n    parameters:\n    - id: parentProvider\n      type: System.IServiceProvider\n      description: A parent service provider. Service requests are forwarded to this provider if they cannot be resolved by the design surface manager.\n  overload: System.ComponentModel.Design.DesignSurfaceManager.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Design.DesignSurfaceManager.ActiveDesignSurface\n  id: ActiveDesignSurface\n  parent: System.ComponentModel.Design.DesignSurfaceManager\n  langs:\n  - csharp\n  name: ActiveDesignSurface\n  nameWithType: DesignSurfaceManager.ActiveDesignSurface\n  fullName: System.ComponentModel.Design.DesignSurfaceManager.ActiveDesignSurface\n  type: Property\n  assemblies:\n  - System.Design\n  namespace: System.ComponentModel.Design\n  summary: Gets or sets the active designer.\n  remarks: The ActiveDesignSurface property should be set by the designer's user interface whenever a designer becomes the active window. The default implementation of this property works with the default implementation of the <xref:System.ComponentModel.Design.IDesignerEventService> interface to notify interested parties that a new designer is now active. If you provide your own implementation of <xref:System.ComponentModel.Design.IDesignerEventService>, you should override this property to notify your service appropriately. This property can be set to `null`, indicating that no designer is active.\n  syntax:\n    content: public virtual System.ComponentModel.Design.DesignSurface ActiveDesignSurface { get; set; }\n    return:\n      type: System.ComponentModel.Design.DesignSurface\n      description: The active designer.\n  overload: System.ComponentModel.Design.DesignSurfaceManager.ActiveDesignSurface*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Design.DesignSurfaceManager.ActiveDesignSurfaceChanged\n  id: ActiveDesignSurfaceChanged\n  parent: System.ComponentModel.Design.DesignSurfaceManager\n  langs:\n  - csharp\n  name: ActiveDesignSurfaceChanged\n  nameWithType: DesignSurfaceManager.ActiveDesignSurfaceChanged\n  fullName: System.ComponentModel.Design.DesignSurfaceManager.ActiveDesignSurfaceChanged\n  type: Event\n  assemblies:\n  - System.Design\n  namespace: System.ComponentModel.Design\n  summary: Occurs when the currently active designer changes.\n  syntax:\n    content: public event System.ComponentModel.Design.ActiveDesignSurfaceChangedEventHandler ActiveDesignSurfaceChanged;\n    return:\n      type: System.ComponentModel.Design.ActiveDesignSurfaceChangedEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurface\n  id: CreateDesignSurface\n  parent: System.ComponentModel.Design.DesignSurfaceManager\n  langs:\n  - csharp\n  name: CreateDesignSurface()\n  nameWithType: DesignSurfaceManager.CreateDesignSurface()\n  fullName: System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurface()\n  type: Method\n  assemblies:\n  - System.Design\n  namespace: System.ComponentModel.Design\n  summary: Creates an instance of a design surface.\n  syntax:\n    content: public System.ComponentModel.Design.DesignSurface CreateDesignSurface ();\n    parameters: []\n    return:\n      type: System.ComponentModel.Design.DesignSurface\n      description: A new design surface instance.\n  overload: System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurface*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurface(System.IServiceProvider)\n  id: CreateDesignSurface(System.IServiceProvider)\n  parent: System.ComponentModel.Design.DesignSurfaceManager\n  langs:\n  - csharp\n  name: CreateDesignSurface(IServiceProvider)\n  nameWithType: DesignSurfaceManager.CreateDesignSurface(IServiceProvider)\n  fullName: System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurface(IServiceProvider)\n  type: Method\n  assemblies:\n  - System.Design\n  namespace: System.ComponentModel.Design\n  summary: Creates an instance of a design surface.\n  remarks: \"If you want to conveniently add additional per-designer services, use the `parentProvider` parameter to provide a service provider for this design surface. The CreateDesignSurface method creates a merged service provider that can satisfy service requests from both the given service provider as well as the <xref:System.ComponentModel.Design.DesignSurfaceManager> itself. The CreateDesignSurface method then passes this service provider into the <xref:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurfaceCore%2A> method.  \\n  \\n After <xref:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurfaceCore%2A> returns the design surface, the CreateDesignSurface method tries to obtain the <xref:System.ComponentModel.Design.IDesignerEventService>. If it is present, and if it is the instance of the service that <xref:System.ComponentModel.Design.DesignSurfaceManager> provided by default, the CreateDesignSurface method raises the <xref:System.ComponentModel.Design.IDesignerEventService.DesignerCreated> event.\"\n  syntax:\n    content: public System.ComponentModel.Design.DesignSurface CreateDesignSurface (IServiceProvider parentProvider);\n    parameters:\n    - id: parentProvider\n      type: System.IServiceProvider\n      description: A parent service provider. A new merged service provider will be created that will first ask this provider for a service, and then delegate any failures to the design surface manager object. This merged provider will be passed into the <xref:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurfaceCore*> method.\n    return:\n      type: System.ComponentModel.Design.DesignSurface\n      description: A new design surface instance.\n  overload: System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurface*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>parentProvider</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurfaceCore(System.IServiceProvider)\n  id: CreateDesignSurfaceCore(System.IServiceProvider)\n  parent: System.ComponentModel.Design.DesignSurfaceManager\n  langs:\n  - csharp\n  name: CreateDesignSurfaceCore(IServiceProvider)\n  nameWithType: DesignSurfaceManager.CreateDesignSurfaceCore(IServiceProvider)\n  fullName: System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurfaceCore(IServiceProvider)\n  type: Method\n  assemblies:\n  - System.Design\n  namespace: System.ComponentModel.Design\n  summary: Implementation that creates the design surface.\n  remarks: The CreateDesignSurfaceCore method is called by both <xref:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurface%2A> methods. It is the implementation that actually creates the design surface. The default implementation just returns a new <xref:System.ComponentModel.Design.DesignSurface>. You may override this method to provide a custom object that derives from the <xref:System.ComponentModel.Design.DesignSurface> class.\n  syntax:\n    content: protected virtual System.ComponentModel.Design.DesignSurface CreateDesignSurfaceCore (IServiceProvider parentProvider);\n    parameters:\n    - id: parentProvider\n      type: System.IServiceProvider\n      description: A service provider to pass to the design surface. This is either an instance of <xref href=\"System.ComponentModel.Design.DesignSurfaceManager\"></xref> or an object that implements <xref:System.IServiceProvider>, and represents a merge between the service provider of the <xref href=\"System.ComponentModel.Design.DesignSurfaceManager\"></xref> class and an externally passed provider.\n    return:\n      type: System.ComponentModel.Design.DesignSurface\n      description: A new design surface instance.\n  overload: System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurfaceCore*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Design.DesignSurfaceManager.DesignSurfaceCreated\n  id: DesignSurfaceCreated\n  parent: System.ComponentModel.Design.DesignSurfaceManager\n  langs:\n  - csharp\n  name: DesignSurfaceCreated\n  nameWithType: DesignSurfaceManager.DesignSurfaceCreated\n  fullName: System.ComponentModel.Design.DesignSurfaceManager.DesignSurfaceCreated\n  type: Event\n  assemblies:\n  - System.Design\n  namespace: System.ComponentModel.Design\n  summary: Occurs when a designer is created.\n  syntax:\n    content: public event System.ComponentModel.Design.DesignSurfaceEventHandler DesignSurfaceCreated;\n    return:\n      type: System.ComponentModel.Design.DesignSurfaceEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Design.DesignSurfaceManager.DesignSurfaceDisposed\n  id: DesignSurfaceDisposed\n  parent: System.ComponentModel.Design.DesignSurfaceManager\n  langs:\n  - csharp\n  name: DesignSurfaceDisposed\n  nameWithType: DesignSurfaceManager.DesignSurfaceDisposed\n  fullName: System.ComponentModel.Design.DesignSurfaceManager.DesignSurfaceDisposed\n  type: Event\n  assemblies:\n  - System.Design\n  namespace: System.ComponentModel.Design\n  summary: Occurs when a designer is disposed.\n  syntax:\n    content: public event System.ComponentModel.Design.DesignSurfaceEventHandler DesignSurfaceDisposed;\n    return:\n      type: System.ComponentModel.Design.DesignSurfaceEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Design.DesignSurfaceManager.DesignSurfaces\n  id: DesignSurfaces\n  parent: System.ComponentModel.Design.DesignSurfaceManager\n  langs:\n  - csharp\n  name: DesignSurfaces\n  nameWithType: DesignSurfaceManager.DesignSurfaces\n  fullName: System.ComponentModel.Design.DesignSurfaceManager.DesignSurfaces\n  type: Property\n  assemblies:\n  - System.Design\n  namespace: System.ComponentModel.Design\n  summary: Gets a collection of design surfaces.\n  remarks: The DesignSurfaces property is implemented directly on top of <xref:System.ComponentModel.Design.IDesignerEventService>, so if you provide your own implementation of that service, this property uses your implementation.\n  syntax:\n    content: public System.ComponentModel.Design.DesignSurfaceCollection DesignSurfaces { get; }\n    return:\n      type: System.ComponentModel.Design.DesignSurfaceCollection\n      description: A collection of design surfaces that are currently hosted by the design surface manager.\n  overload: System.ComponentModel.Design.DesignSurfaceManager.DesignSurfaces*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Design.DesignSurfaceManager.Dispose\n  id: Dispose\n  parent: System.ComponentModel.Design.DesignSurfaceManager\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: DesignSurfaceManager.Dispose()\n  fullName: System.ComponentModel.Design.DesignSurfaceManager.Dispose()\n  type: Method\n  assemblies:\n  - System.Design\n  namespace: System.ComponentModel.Design\n  summary: Releases the resources used by the <xref href=\"System.ComponentModel.Design.DesignSurfaceManager\"></xref>.\n  remarks: \"The public Dispose method follows the standard <xref:System.IDisposable> pattern. Calling this method destroys the design surface manager. It also disposes the service container, which causes all services that implement <xref:System.IDisposable> to also be disposed. The protected version of this method is `virtual` and follows the normal <xref:System.IDisposable> pattern.  \\n  \\n> [!NOTE]\\n>  Because <xref:System.ComponentModel.Design.DesignSurfaceManager> does not have any native code to clean up, it does not have a finalizer that calls <xref:System.ComponentModel.Design.DesignSurfaceManager.Dispose%2A>. If you need to call <xref:System.ComponentModel.Design.DesignSurfaceManager.Dispose%2A>, you must add a finalizer yourself.\"\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.ComponentModel.Design.DesignSurfaceManager.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Design.DesignSurfaceManager.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.ComponentModel.Design.DesignSurfaceManager\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: DesignSurfaceManager.Dispose(Boolean)\n  fullName: System.ComponentModel.Design.DesignSurfaceManager.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.Design\n  namespace: System.ComponentModel.Design\n  summary: Releases the unmanaged resources used by the <xref href=\"System.ComponentModel.Design.DesignSurfaceManager\"></xref> and optionally releases the managed resources.\n  remarks: \"The public <xref:System.ComponentModel.Design.DesignSurfaceManager.Dispose%2A> method follows the standard <xref:System.IDisposable> pattern. Calling this method destroys the design surface manager. It also disposes the service container, which causes all services that implement <xref:System.IDisposable> to also be disposed. The protected version of this method is `virtual` and follows the normal <xref:System.IDisposable> pattern.  \\n  \\n> [!NOTE]\\n>  Because <xref:System.ComponentModel.Design.DesignSurfaceManager> does not have any native code to clean up, it does not have a finalizer that calls Dispose. If you need to call Dispose, you must add a finalizer yourself.  \\n  \\n This method is called by the public `Dispose()`method and the <xref:System.Object.Finalize%2A> method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.  \\n  \\n When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.ComponentModel.Design.DesignSurfaceManager> references. This method invokes the `Dispose()` method of each referenced object.\"\n  syntax:\n    content: protected virtual void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only unmanaged resources.\n  overload: System.ComponentModel.Design.DesignSurfaceManager.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Design.DesignSurfaceManager.GetService(System.Type)\n  id: GetService(System.Type)\n  parent: System.ComponentModel.Design.DesignSurfaceManager\n  langs:\n  - csharp\n  name: GetService(Type)\n  nameWithType: DesignSurfaceManager.GetService(Type)\n  fullName: System.ComponentModel.Design.DesignSurfaceManager.GetService(Type)\n  type: Method\n  assemblies:\n  - System.Design\n  namespace: System.ComponentModel.Design\n  summary: Gets a service in the design surface manager’s service container.\n  remarks: The GetService method forwards to any service provider that was given to the design surface manager at construction time.\n  syntax:\n    content: public object GetService (Type serviceType);\n    parameters:\n    - id: serviceType\n      type: System.Type\n      description: The service type to retrieve.\n    return:\n      type: System.Object\n      description: An object that implements, or is a derived class of, the given service type; otherwise, <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the service does not exist in the service container.\n  overload: System.ComponentModel.Design.DesignSurfaceManager.GetService*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Design.DesignSurfaceManager.SelectionChanged\n  id: SelectionChanged\n  parent: System.ComponentModel.Design.DesignSurfaceManager\n  langs:\n  - csharp\n  name: SelectionChanged\n  nameWithType: DesignSurfaceManager.SelectionChanged\n  fullName: System.ComponentModel.Design.DesignSurfaceManager.SelectionChanged\n  type: Event\n  assemblies:\n  - System.Design\n  namespace: System.ComponentModel.Design\n  summary: Occurs when the global selection changes.\n  remarks: This event is raised when the active designer's selection of component set changes. This is mapped through the <xref:System.ComponentModel.Design.IDesignerEventService> interface.\n  syntax:\n    content: public event EventHandler SelectionChanged;\n    return:\n      type: System.EventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Design.DesignSurfaceManager.ServiceContainer\n  id: ServiceContainer\n  parent: System.ComponentModel.Design.DesignSurfaceManager\n  langs:\n  - csharp\n  name: ServiceContainer\n  nameWithType: DesignSurfaceManager.ServiceContainer\n  fullName: System.ComponentModel.Design.DesignSurfaceManager.ServiceContainer\n  type: Property\n  assemblies:\n  - System.Design\n  namespace: System.ComponentModel.Design\n  summary: Gets the design surface manager's ServiceContainer.\n  syntax:\n    content: protected System.ComponentModel.Design.ServiceContainer ServiceContainer { get; }\n    return:\n      type: System.ComponentModel.Design.ServiceContainer\n      description: The design surface manager's ServiceContainer.\n  overload: System.ComponentModel.Design.DesignSurfaceManager.ServiceContainer*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ComponentModel.Design.DesignSurfaceManager.#ctor\n  parent: System.ComponentModel.Design.DesignSurfaceManager\n  isExternal: false\n  name: DesignSurfaceManager()\n  nameWithType: DesignSurfaceManager.DesignSurfaceManager()\n  fullName: System.ComponentModel.Design.DesignSurfaceManager.DesignSurfaceManager()\n- uid: System.ComponentModel.Design.DesignSurfaceManager.#ctor(System.IServiceProvider)\n  parent: System.ComponentModel.Design.DesignSurfaceManager\n  isExternal: false\n  name: DesignSurfaceManager(IServiceProvider)\n  nameWithType: DesignSurfaceManager.DesignSurfaceManager(IServiceProvider)\n  fullName: System.ComponentModel.Design.DesignSurfaceManager.DesignSurfaceManager(IServiceProvider)\n- uid: System.IServiceProvider\n  parent: System\n  isExternal: true\n  name: IServiceProvider\n  nameWithType: IServiceProvider\n  fullName: System.IServiceProvider\n- uid: System.ComponentModel.Design.DesignSurfaceManager.ActiveDesignSurface\n  parent: System.ComponentModel.Design.DesignSurfaceManager\n  isExternal: false\n  name: ActiveDesignSurface\n  nameWithType: DesignSurfaceManager.ActiveDesignSurface\n  fullName: System.ComponentModel.Design.DesignSurfaceManager.ActiveDesignSurface\n- uid: System.ComponentModel.Design.DesignSurface\n  parent: System.ComponentModel.Design\n  isExternal: false\n  name: DesignSurface\n  nameWithType: DesignSurface\n  fullName: System.ComponentModel.Design.DesignSurface\n- uid: System.ComponentModel.Design.DesignSurfaceManager.ActiveDesignSurfaceChanged\n  parent: System.ComponentModel.Design.DesignSurfaceManager\n  isExternal: false\n  name: ActiveDesignSurfaceChanged\n  nameWithType: DesignSurfaceManager.ActiveDesignSurfaceChanged\n  fullName: System.ComponentModel.Design.DesignSurfaceManager.ActiveDesignSurfaceChanged\n- uid: System.ComponentModel.Design.ActiveDesignSurfaceChangedEventHandler\n  parent: System.ComponentModel.Design\n  isExternal: false\n  name: ActiveDesignSurfaceChangedEventHandler\n  nameWithType: ActiveDesignSurfaceChangedEventHandler\n  fullName: System.ComponentModel.Design.ActiveDesignSurfaceChangedEventHandler\n- uid: System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurface\n  parent: System.ComponentModel.Design.DesignSurfaceManager\n  isExternal: false\n  name: CreateDesignSurface()\n  nameWithType: DesignSurfaceManager.CreateDesignSurface()\n  fullName: System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurface()\n- uid: System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurface(System.IServiceProvider)\n  parent: System.ComponentModel.Design.DesignSurfaceManager\n  isExternal: false\n  name: CreateDesignSurface(IServiceProvider)\n  nameWithType: DesignSurfaceManager.CreateDesignSurface(IServiceProvider)\n  fullName: System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurface(IServiceProvider)\n- uid: System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurfaceCore(System.IServiceProvider)\n  parent: System.ComponentModel.Design.DesignSurfaceManager\n  isExternal: false\n  name: CreateDesignSurfaceCore(IServiceProvider)\n  nameWithType: DesignSurfaceManager.CreateDesignSurfaceCore(IServiceProvider)\n  fullName: System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurfaceCore(IServiceProvider)\n- uid: System.ComponentModel.Design.DesignSurfaceManager.DesignSurfaceCreated\n  parent: System.ComponentModel.Design.DesignSurfaceManager\n  isExternal: false\n  name: DesignSurfaceCreated\n  nameWithType: DesignSurfaceManager.DesignSurfaceCreated\n  fullName: System.ComponentModel.Design.DesignSurfaceManager.DesignSurfaceCreated\n- uid: System.ComponentModel.Design.DesignSurfaceEventHandler\n  parent: System.ComponentModel.Design\n  isExternal: false\n  name: DesignSurfaceEventHandler\n  nameWithType: DesignSurfaceEventHandler\n  fullName: System.ComponentModel.Design.DesignSurfaceEventHandler\n- uid: System.ComponentModel.Design.DesignSurfaceManager.DesignSurfaceDisposed\n  parent: System.ComponentModel.Design.DesignSurfaceManager\n  isExternal: false\n  name: DesignSurfaceDisposed\n  nameWithType: DesignSurfaceManager.DesignSurfaceDisposed\n  fullName: System.ComponentModel.Design.DesignSurfaceManager.DesignSurfaceDisposed\n- uid: System.ComponentModel.Design.DesignSurfaceManager.DesignSurfaces\n  parent: System.ComponentModel.Design.DesignSurfaceManager\n  isExternal: false\n  name: DesignSurfaces\n  nameWithType: DesignSurfaceManager.DesignSurfaces\n  fullName: System.ComponentModel.Design.DesignSurfaceManager.DesignSurfaces\n- uid: System.ComponentModel.Design.DesignSurfaceCollection\n  parent: System.ComponentModel.Design\n  isExternal: false\n  name: DesignSurfaceCollection\n  nameWithType: DesignSurfaceCollection\n  fullName: System.ComponentModel.Design.DesignSurfaceCollection\n- uid: System.ComponentModel.Design.DesignSurfaceManager.Dispose\n  parent: System.ComponentModel.Design.DesignSurfaceManager\n  isExternal: false\n  name: Dispose()\n  nameWithType: DesignSurfaceManager.Dispose()\n  fullName: System.ComponentModel.Design.DesignSurfaceManager.Dispose()\n- uid: System.ComponentModel.Design.DesignSurfaceManager.Dispose(System.Boolean)\n  parent: System.ComponentModel.Design.DesignSurfaceManager\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: DesignSurfaceManager.Dispose(Boolean)\n  fullName: System.ComponentModel.Design.DesignSurfaceManager.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.ComponentModel.Design.DesignSurfaceManager.GetService(System.Type)\n  parent: System.ComponentModel.Design.DesignSurfaceManager\n  isExternal: false\n  name: GetService(Type)\n  nameWithType: DesignSurfaceManager.GetService(Type)\n  fullName: System.ComponentModel.Design.DesignSurfaceManager.GetService(Type)\n- uid: System.Type\n  parent: System\n  isExternal: true\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.ComponentModel.Design.DesignSurfaceManager.SelectionChanged\n  parent: System.ComponentModel.Design.DesignSurfaceManager\n  isExternal: false\n  name: SelectionChanged\n  nameWithType: DesignSurfaceManager.SelectionChanged\n  fullName: System.ComponentModel.Design.DesignSurfaceManager.SelectionChanged\n- uid: System.EventHandler\n  parent: System\n  isExternal: true\n  name: EventHandler\n  nameWithType: EventHandler\n  fullName: System.EventHandler\n- uid: System.ComponentModel.Design.DesignSurfaceManager.ServiceContainer\n  parent: System.ComponentModel.Design.DesignSurfaceManager\n  isExternal: false\n  name: ServiceContainer\n  nameWithType: DesignSurfaceManager.ServiceContainer\n  fullName: System.ComponentModel.Design.DesignSurfaceManager.ServiceContainer\n- uid: System.ComponentModel.Design.ServiceContainer\n  parent: System.ComponentModel.Design\n  isExternal: false\n  name: ServiceContainer\n  nameWithType: ServiceContainer\n  fullName: System.ComponentModel.Design.ServiceContainer\n- uid: System.ComponentModel.Design.DesignSurfaceManager.#ctor*\n  parent: System.ComponentModel.Design.DesignSurfaceManager\n  isExternal: false\n  name: DesignSurfaceManager\n  nameWithType: DesignSurfaceManager.DesignSurfaceManager\n- uid: System.ComponentModel.Design.DesignSurfaceManager.ActiveDesignSurface*\n  parent: System.ComponentModel.Design.DesignSurfaceManager\n  isExternal: false\n  name: ActiveDesignSurface\n  nameWithType: DesignSurfaceManager.ActiveDesignSurface\n- uid: System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurface*\n  parent: System.ComponentModel.Design.DesignSurfaceManager\n  isExternal: false\n  name: CreateDesignSurface\n  nameWithType: DesignSurfaceManager.CreateDesignSurface\n- uid: System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurfaceCore*\n  parent: System.ComponentModel.Design.DesignSurfaceManager\n  isExternal: false\n  name: CreateDesignSurfaceCore\n  nameWithType: DesignSurfaceManager.CreateDesignSurfaceCore\n- uid: System.ComponentModel.Design.DesignSurfaceManager.DesignSurfaces*\n  parent: System.ComponentModel.Design.DesignSurfaceManager\n  isExternal: false\n  name: DesignSurfaces\n  nameWithType: DesignSurfaceManager.DesignSurfaces\n- uid: System.ComponentModel.Design.DesignSurfaceManager.Dispose*\n  parent: System.ComponentModel.Design.DesignSurfaceManager\n  isExternal: false\n  name: Dispose\n  nameWithType: DesignSurfaceManager.Dispose\n- uid: System.ComponentModel.Design.DesignSurfaceManager.GetService*\n  parent: System.ComponentModel.Design.DesignSurfaceManager\n  isExternal: false\n  name: GetService\n  nameWithType: DesignSurfaceManager.GetService\n- uid: System.ComponentModel.Design.DesignSurfaceManager.ServiceContainer*\n  parent: System.ComponentModel.Design.DesignSurfaceManager\n  isExternal: false\n  name: ServiceContainer\n  nameWithType: DesignSurfaceManager.ServiceContainer\n"}