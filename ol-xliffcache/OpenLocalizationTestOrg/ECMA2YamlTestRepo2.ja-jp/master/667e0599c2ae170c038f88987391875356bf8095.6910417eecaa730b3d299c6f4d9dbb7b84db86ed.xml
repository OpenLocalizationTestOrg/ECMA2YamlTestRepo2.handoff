{"nodes":[{"pos":[1720,1929],"content":"Provides a collection of <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.WebParts.SharedPersonalizationStateInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and <bpt id=\"p2\">&lt;xref href=\"System.Web.UI.WebControls.WebParts.UserPersonalizationStateInfo\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> objects.","needQuote":true,"needEscape":true,"source":"Provides a collection of <xref href=\"System.Web.UI.WebControls.WebParts.SharedPersonalizationStateInfo\"></xref> and <xref href=\"System.Web.UI.WebControls.WebParts.UserPersonalizationStateInfo\"></xref> objects."},{"pos":[1942,3169],"content":"The PersonalizationStateInfoCollection class provides a collection-based wrapper over a set of <xref:System.Web.UI.WebControls.WebParts.SharedPersonalizationStateInfo> and <xref:System.Web.UI.WebControls.WebParts.UserPersonalizationStateInfo> instances. These instances are retrieved by iterating sequentially over the collection, by ordinal index or by key value.       Instances are indexed on a combination of path and user name. This is necessary because <xref:System.Web.UI.WebControls.WebParts.SharedPersonalizationStateInfo> instances representing shared data are indexed according to <xref:System.Web.UI.WebControls.WebParts.PersonalizationStateInfo.Path%2A> object, whereas <xref:System.Web.UI.WebControls.WebParts.UserPersonalizationStateInfo> instances are indexed according to both a <xref:System.Web.UI.WebControls.WebParts.PersonalizationStateInfo.Path%2A> object and a <xref:System.Web.UI.WebControls.WebParts.UserPersonalizationStateInfo.Username%2A> object.       The information objects are maintained in the collection in the order in which they were received from the provider. The collection does not attempt to change the order of the instances or maintain a specific sort order within the collection.","needQuote":false,"needEscape":true,"nodes":[{"content":"The PersonalizationStateInfoCollection class provides a collection-based wrapper over a set of <xref:System.Web.UI.WebControls.WebParts.SharedPersonalizationStateInfo> and <xref:System.Web.UI.WebControls.WebParts.UserPersonalizationStateInfo> instances. These instances are retrieved by iterating sequentially over the collection, by ordinal index or by key value.       Instances are indexed on a combination of path and user name. This is necessary because <xref:System.Web.UI.WebControls.WebParts.SharedPersonalizationStateInfo> instances representing shared data are indexed according to <xref:System.Web.UI.WebControls.WebParts.PersonalizationStateInfo.Path%2A> object, whereas <xref:System.Web.UI.WebControls.WebParts.UserPersonalizationStateInfo> instances are indexed according to both a <xref:System.Web.UI.WebControls.WebParts.PersonalizationStateInfo.Path%2A> object and a <xref:System.Web.UI.WebControls.WebParts.UserPersonalizationStateInfo.Username%2A> object.       The information objects are maintained in the collection in the order in which they were received from the provider. The collection does not attempt to change the order of the instances or maintain a specific sort order within the collection.","pos":[0,1223],"nodes":[{"content":"The PersonalizationStateInfoCollection class provides a collection-based wrapper over a set of &lt;xref:System.Web.UI.WebControls.WebParts.SharedPersonalizationStateInfo&gt; and &lt;xref:System.Web.UI.WebControls.WebParts.UserPersonalizationStateInfo&gt; instances.","pos":[0,253],"source":"The PersonalizationStateInfoCollection class provides a collection-based wrapper over a set of <xref:System.Web.UI.WebControls.WebParts.SharedPersonalizationStateInfo> and <xref:System.Web.UI.WebControls.WebParts.UserPersonalizationStateInfo> instances."},{"content":"These instances are retrieved by iterating sequentially over the collection, by ordinal index or by key value.","pos":[254,364]},{"content":"Instances are indexed on a combination of path and user name.","pos":[371,432]},{"content":"This is necessary because &lt;xref:System.Web.UI.WebControls.WebParts.SharedPersonalizationStateInfo&gt; instances representing shared data are indexed according to &lt;xref:System.Web.UI.WebControls.WebParts.PersonalizationStateInfo.Path%2A&gt; object, whereas &lt;xref:System.Web.UI.WebControls.WebParts.UserPersonalizationStateInfo&gt; instances are indexed according to both a &lt;xref:System.Web.UI.WebControls.WebParts.PersonalizationStateInfo.Path%2A&gt; object and a &lt;xref:System.Web.UI.WebControls.WebParts.UserPersonalizationStateInfo.Username%2A&gt; object.","pos":[433,974],"source":" This is necessary because <xref:System.Web.UI.WebControls.WebParts.SharedPersonalizationStateInfo> instances representing shared data are indexed according to <xref:System.Web.UI.WebControls.WebParts.PersonalizationStateInfo.Path%2A> object, whereas <xref:System.Web.UI.WebControls.WebParts.UserPersonalizationStateInfo> instances are indexed according to both a <xref:System.Web.UI.WebControls.WebParts.PersonalizationStateInfo.Path%2A> object and a <xref:System.Web.UI.WebControls.WebParts.UserPersonalizationStateInfo.Username%2A> object."},{"content":"The information objects are maintained in the collection in the order in which they were received from the provider.","pos":[981,1097]},{"content":"The collection does not attempt to change the order of the instances or maintain a specific sort order within the collection.","pos":[1098,1223]}]}]},{"pos":[3969,4100],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection\"></xref> class."},{"pos":[4112,4161],"content":"This constructor initializes an empty collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"This constructor initializes an empty collection.","pos":[0,49]}]},{"pos":[5026,5160],"content":"Adds a <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.WebParts.PersonalizationStateInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>-derived instance to the end of the collection.","needQuote":true,"needEscape":true,"source":"Adds a <xref href=\"System.Web.UI.WebControls.WebParts.PersonalizationStateInfo\"></xref>-derived instance to the end of the collection."},{"pos":[5172,5440],"content":"This method adds a <xref:System.Web.UI.WebControls.WebParts.PersonalizationStateInfo>-derived instance to the end of the collection. Internally, the count of the collection is incremented by one. Any enumerators currently active against the collection are invalidated.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method adds a <xref:System.Web.UI.WebControls.WebParts.PersonalizationStateInfo>-derived instance to the end of the collection. Internally, the count of the collection is incremented by one. Any enumerators currently active against the collection are invalidated.","pos":[0,268],"nodes":[{"content":"This method adds a &lt;xref:System.Web.UI.WebControls.WebParts.PersonalizationStateInfo&gt;-derived instance to the end of the collection.","pos":[0,132],"source":"This method adds a <xref:System.Web.UI.WebControls.WebParts.PersonalizationStateInfo>-derived instance to the end of the collection."},{"content":"Internally, the count of the collection is incremented by one.","pos":[133,195]},{"content":"Any enumerators currently active against the collection are invalidated.","pos":[196,268]}]}]},{"pos":[5670,5784],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.WebParts.PersonalizationStateInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>-derived instance to be added.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Web.UI.WebControls.WebParts.PersonalizationStateInfo\"></xref>-derived instance to be added."},{"pos":[5988,6027],"content":"The collection was marked as read-only.","needQuote":true,"needEscape":true,"nodes":[{"content":"The collection was marked as read-only.","pos":[0,39]}]},{"pos":[6122,6264],"content":"An attempt was made to add an object to the collection when an instance of the same shared or per-user state already exists in the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"An attempt was made to add an object to the collection when an instance of the same shared or per-user state already exists in the collection.","pos":[0,142]}]},{"pos":[6367,6394],"content":"The data parameter is null.","needQuote":true,"needEscape":true,"nodes":[{"content":"The data parameter is null.","pos":[0,27]}]},{"pos":[6881,6916],"content":"Clears the collection of all items.","needQuote":true,"needEscape":true,"nodes":[{"content":"Clears the collection of all items.","pos":[0,35]}]},{"pos":[6928,7000],"content":"Any enumerators currently active against the collection are invalidated.","needQuote":true,"needEscape":true,"nodes":[{"content":"Any enumerators currently active against the collection are invalidated.","pos":[0,72]}]},{"pos":[7270,7309],"content":"The collection was marked as read-only.","needQuote":true,"needEscape":true,"nodes":[{"content":"The collection was marked as read-only.","pos":[0,39]}]},{"pos":[8049,8308],"content":"Copies the elements of the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> collection into a <bpt id=\"p2\">&lt;xref href=\"System.Web.UI.WebControls.WebParts.PersonalizationStateInfo\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> array, starting at the specified position.","needQuote":true,"needEscape":true,"source":"Copies the elements of the <xref href=\"System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection\"></xref> collection into a <xref href=\"System.Web.UI.WebControls.WebParts.PersonalizationStateInfo\"></xref> array, starting at the specified position."},{"pos":[8320,8587],"content":"Use this method if you want to create a <xref:System.Web.UI.WebControls.WebParts.PersonalizationStateInfo> array. This method simply calls the <xref:System.Collections.ArrayList.CopyTo%2A?displayProperty=fullName> method and passes the `array` and `index` parameters.","needQuote":true,"needEscape":true,"nodes":[{"content":"Use this method if you want to create a &lt;xref:System.Web.UI.WebControls.WebParts.PersonalizationStateInfo&gt; array.","pos":[0,113],"source":"Use this method if you want to create a <xref:System.Web.UI.WebControls.WebParts.PersonalizationStateInfo> array."},{"content":"This method simply calls the &lt;xref:System.Collections.ArrayList.CopyTo%2A?displayProperty=fullName&gt; method and passes the <ph id=\"ph1\">`array`</ph> and <ph id=\"ph2\">`index`</ph> parameters.","pos":[114,267],"source":" This method simply calls the <xref:System.Collections.ArrayList.CopyTo%2A?displayProperty=fullName> method and passes the `array` and `index` parameters."}]},{"pos":[8837,8894],"content":"The array the elements in the collection are copied into.","needQuote":true,"needEscape":true,"nodes":[{"content":"The array the elements in the collection are copied into.","pos":[0,57]}]},{"pos":[8955,9005],"content":"The location at which to start the copy operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The location at which to start the copy operation.","pos":[0,50]}]},{"pos":[9595,9636],"content":"Gets the number of items in a collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the number of items in a collection.","pos":[0,41]}]},{"pos":[9648,9760],"content":"The count of the items in the collection can be used to iterate through the collection, as shown in the example.","needQuote":true,"needEscape":true,"nodes":[{"content":"The count of the items in the collection can be used to iterate through the collection, as shown in the example.","pos":[0,112]}]},{"pos":[10056,10092],"content":"The number of items in a collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of items in a collection.","pos":[0,36]}]},{"pos":[10725,10829],"content":"Returns a standard enumerator capable of iterating over the collection. This method cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a standard enumerator capable of iterating over the collection. This method cannot be inherited.","pos":[0,104],"nodes":[{"content":"Returns a standard enumerator capable of iterating over the collection.","pos":[0,71]},{"content":"This method cannot be inherited.","pos":[72,104]}]}]},{"pos":[10842,12420],"content":"Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.       Initially, the enumerator is positioned before the first element in the collection. The <xref:System.Collections.IEnumerator.Reset%2A> method also brings the enumerator back to this position. At this position, the <xref:System.Collections.IEnumerator.Current%2A> property is undefined. Therefore, you must call the <xref:System.Collections.IEnumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>. For more information on enumerators, see <xref:System.Collections.IEnumerator>.       An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.       The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators. Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.       The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration. To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","needQuote":false,"needEscape":true,"nodes":[{"content":"Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.","pos":[0,120]},{"content":"Initially, the enumerator is positioned before the first element in the collection.","pos":[127,210]},{"content":"The &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; method also brings the enumerator back to this position.","pos":[211,318],"source":" The <xref:System.Collections.IEnumerator.Reset%2A> method also brings the enumerator back to this position."},{"content":"At this position, the &lt;xref:System.Collections.IEnumerator.Current%2A&gt; property is undefined.","pos":[319,412],"source":" At this position, the <xref:System.Collections.IEnumerator.Current%2A> property is undefined."},{"content":"Therefore, you must call the &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; method to advance the enumerator to the first element of the collection before reading the value of &lt;xref:System.Collections.IEnumerator.Current%2A&gt;.","pos":[413,641],"source":" Therefore, you must call the <xref:System.Collections.IEnumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>."},{"content":"For more information on enumerators, see &lt;xref:System.Collections.IEnumerator&gt;.","pos":[642,721],"source":" For more information on enumerators, see <xref:System.Collections.IEnumerator>."},{"content":"An enumerator remains valid as long as the collection remains unchanged.","pos":[728,800]},{"content":"If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.","pos":[801,963]},{"content":"The <ph id=\"ph1\">`foreach`</ph> statement of the C# language (<ph id=\"ph2\">`for each`</ph> in Visual Basic) hides the complexity of the enumerators.","pos":[970,1082],"source":"       The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators."},{"content":"Therefore, using <ph id=\"ph1\">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.","pos":[1083,1174],"source":" Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator."},{"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.","pos":[1181,1335]},{"content":"To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.","pos":[1336,1441]},{"content":"To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","pos":[1442,1570]}]},{"pos":[12594,12686],"content":"An <xref:System.Collections.IEnumerator> that can be used to iterate through the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Collections.IEnumerator&gt; that can be used to iterate through the collection.","pos":[0,92],"source":"An <xref:System.Collections.IEnumerator> that can be used to iterate through the collection."}]},{"pos":[13328,13506],"content":"Gets a value indicating whether access to the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> collection is synchronized (thread safe).","needQuote":true,"needEscape":true,"source":"Gets a value indicating whether access to the <xref href=\"System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection\"></xref> collection is synchronized (thread safe)."},{"pos":[13519,14171],"content":"Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.       The <xref:System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.SyncRoot%2A> property returns an object, which can be used to synchronize access to the <xref:System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection>.","needQuote":false,"needEscape":true,"nodes":[{"content":"Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.       The <xref:System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.SyncRoot%2A> property returns an object, which can be used to synchronize access to the <xref:System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection>.","pos":[0,650],"nodes":[{"content":"Enumerating through a collection is intrinsically not a thread-safe procedure.","pos":[0,78]},{"content":"Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.","pos":[79,216]},{"content":"To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[217,398]},{"content":"The &lt;xref:System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.SyncRoot%2A&gt; property returns an object, which can be used to synchronize access to the &lt;xref:System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection&gt;.","pos":[405,650],"source":"       The <xref:System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.SyncRoot%2A> property returns an object, which can be used to synchronize access to the <xref:System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection>."}]}]},{"pos":[14290,14694],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if access to the collection is synchronized; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The value is always <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> for <xref href=\"System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection\"></xref> objects created by the Web Parts control set.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if access to the collection is synchronized; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,180],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if access to the collection is synchronized; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The value is always <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for <bpt id=\"p2\">&lt;xref href=\"System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> objects created by the Web Parts control set.","pos":[181,404],"source":" The value is always <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> for <xref href=\"System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection\"></xref> objects created by the Web Parts control set."}]},{"pos":[15336,15490],"content":"Gets a <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.WebParts.PersonalizationStateInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance located at the specified ordinal index in the collection.","needQuote":true,"needEscape":true,"source":"Gets a <xref href=\"System.Web.UI.WebControls.WebParts.PersonalizationStateInfo\"></xref> instance located at the specified ordinal index in the collection."},{"pos":[15502,15663],"content":"This property retrieves the <xref:System.Web.UI.WebControls.WebParts.PersonalizationStateInfo> instance located at the specified ordinal index in the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"This property retrieves the &lt;xref:System.Web.UI.WebControls.WebParts.PersonalizationStateInfo&gt; instance located at the specified ordinal index in the collection.","pos":[0,161],"source":"This property retrieves the <xref:System.Web.UI.WebControls.WebParts.PersonalizationStateInfo> instance located at the specified ordinal index in the collection."}]},{"pos":[15855,15903],"content":"The ordinal index of the object to be retrieved.","needQuote":true,"needEscape":true,"nodes":[{"content":"The ordinal index of the object to be retrieved.","pos":[0,48]}]},{"pos":[16007,16156],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.WebParts.PersonalizationStateInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance located at the specified ordinal index in the collection.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Web.UI.WebControls.WebParts.PersonalizationStateInfo\"></xref> instance located at the specified ordinal index in the collection."},{"pos":[17138,17208],"content":"Gets an element from the collection based on the specified parameters.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets an element from the collection based on the specified parameters.","pos":[0,70]}]},{"pos":[17221,17747],"content":"This property is the default indexer for the collection. If only `path` is provided, the property returns a <xref:System.Web.UI.WebControls.WebParts.SharedPersonalizationStateInfo> instance. If both `path` and `username` are provided, the property returns a <xref:System.Web.UI.WebControls.WebParts.UserPersonalizationStateInfo> instance for the combination of `path` and `username`.       If `path` (in the case that `username` is set to `null`) does not exist, or if `username` and `path` do not exist, `null` is returned.","needQuote":false,"needEscape":true,"nodes":[{"content":"This property is the default indexer for the collection.","pos":[0,56]},{"content":"If only <ph id=\"ph1\">`path`</ph> is provided, the property returns a &lt;xref:System.Web.UI.WebControls.WebParts.SharedPersonalizationStateInfo&gt; instance.","pos":[57,190],"source":" If only `path` is provided, the property returns a <xref:System.Web.UI.WebControls.WebParts.SharedPersonalizationStateInfo> instance."},{"content":"If both <ph id=\"ph1\">`path`</ph> and <ph id=\"ph2\">`username`</ph> are provided, the property returns a &lt;xref:System.Web.UI.WebControls.WebParts.UserPersonalizationStateInfo&gt; instance for the combination of <ph id=\"ph3\">`path`</ph> and <ph id=\"ph4\">`username`</ph>.","pos":[191,383],"source":" If both `path` and `username` are provided, the property returns a <xref:System.Web.UI.WebControls.WebParts.UserPersonalizationStateInfo> instance for the combination of `path` and `username`."},{"content":"If <ph id=\"ph1\">`path`</ph> (in the case that <ph id=\"ph2\">`username`</ph> is set to <ph id=\"ph3\">`null`</ph>) does not exist, or if <ph id=\"ph4\">`username`</ph> and <ph id=\"ph5\">`path`</ph> do not exist, <ph id=\"ph6\">`null`</ph> is returned.","pos":[390,524],"source":"       If `path` (in the case that `username` is set to `null`) does not exist, or if `username` and `path` do not exist, `null` is returned."}]},{"pos":[17959,18041],"content":"The relative application path of the personalization state object to be retrieved.","needQuote":true,"needEscape":true,"nodes":[{"content":"The relative application path of the personalization state object to be retrieved.","pos":[0,82]}]},{"pos":[18106,18235],"content":"The user name of the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.WebParts.UserPersonalizationStateInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object to be retrieved.","needQuote":true,"needEscape":true,"source":"The user name of the <xref href=\"System.Web.UI.WebControls.WebParts.UserPersonalizationStateInfo\"></xref> object to be retrieved."},{"pos":[18339,18404],"content":"An element from the collection based on the specified parameters.","needQuote":true,"needEscape":true,"nodes":[{"content":"An element from the collection based on the specified parameters.","pos":[0,65]}]},{"pos":[18609,18691],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>path</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[19280,19406],"content":"Removes a <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.WebParts.PersonalizationStateInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>-derived object from the collection.","needQuote":true,"needEscape":true,"source":"Removes a <xref href=\"System.Web.UI.WebControls.WebParts.PersonalizationStateInfo\"></xref>-derived object from the collection."},{"pos":[19419,20233],"content":"This method removes a <xref:System.Web.UI.WebControls.WebParts.PersonalizationStateInfo>-derived instance from the collection. Any elements after the removed instance are moved up to occupy the vacant position. Internally, the count of the collection is decremented by one. Any enumerators currently active against the collection are invalidated.       If only `path` is provided, then the <xref:System.Web.UI.WebControls.WebParts.SharedPersonalizationStateInfo> instance for that path is removed. If both `path` and `username` are provided, then the <xref:System.Web.UI.WebControls.WebParts.UserPersonalizationStateInfo> instance for the combination of `path` and `username` is removed.      > [!NOTE] >  You can try to remove a non-existing item from the collection; this action will not raise an exception.","needQuote":false,"needEscape":true,"nodes":[{"content":"This method removes a &lt;xref:System.Web.UI.WebControls.WebParts.PersonalizationStateInfo&gt;-derived instance from the collection.","pos":[0,126],"source":"This method removes a <xref:System.Web.UI.WebControls.WebParts.PersonalizationStateInfo>-derived instance from the collection."},{"content":"Any elements after the removed instance are moved up to occupy the vacant position.","pos":[127,210]},{"content":"Internally, the count of the collection is decremented by one.","pos":[211,273]},{"content":"Any enumerators currently active against the collection are invalidated.","pos":[274,346]},{"content":"If only <ph id=\"ph1\">`path`</ph> is provided, then the &lt;xref:System.Web.UI.WebControls.WebParts.SharedPersonalizationStateInfo&gt; instance for that path is removed.","pos":[353,497],"source":"       If only `path` is provided, then the <xref:System.Web.UI.WebControls.WebParts.SharedPersonalizationStateInfo> instance for that path is removed."},{"content":"If both <ph id=\"ph1\">`path`</ph> and <ph id=\"ph2\">`username`</ph> are provided, then the &lt;xref:System.Web.UI.WebControls.WebParts.UserPersonalizationStateInfo&gt; instance for the combination of <ph id=\"ph3\">`path`</ph> and <ph id=\"ph4\">`username`</ph> is removed.","pos":[498,687],"source":" If both `path` and `username` are provided, then the <xref:System.Web.UI.WebControls.WebParts.UserPersonalizationStateInfo> instance for the combination of `path` and `username` is removed."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  You can try to remove a non-existing item from the collection; this action will not raise an exception.","pos":[693,809],"source":"      > [!NOTE] >  You can try to remove a non-existing item from the collection; this action will not raise an exception."}]},{"pos":[20385,20465],"content":"The relative application path of the personalization state object to be removed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The relative application path of the personalization state object to be removed.","pos":[0,80]}]},{"pos":[20530,20665],"content":"The user name of the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.WebParts.UserPersonalizationStateInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>-derived object to be removed.","needQuote":true,"needEscape":true,"source":"The user name of the <xref href=\"System.Web.UI.WebControls.WebParts.UserPersonalizationStateInfo\"></xref>-derived object to be removed."},{"pos":[20872,20911],"content":"The collection was marked as read-only.","needQuote":true,"needEscape":true,"nodes":[{"content":"The collection was marked as read-only.","pos":[0,39]}]},{"pos":[21610,21644],"content":"Marks the collection as read-only.","needQuote":true,"needEscape":true,"nodes":[{"content":"Marks the collection as read-only.","pos":[0,34]}]},{"pos":[21657,22075],"content":"Methods that attempt to modify a read-only collection, such as <xref:System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.Add%2A> and <xref:System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.Remove%2A>, throw a <xref:System.NotSupportedException> exception.      > [!NOTE] >  You can call the SetReadOnly method multiple times on the collection; this will not raise an exception.","needQuote":false,"needEscape":true,"nodes":[{"content":"Methods that attempt to modify a read-only collection, such as &lt;xref:System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.Add%2A&gt; and &lt;xref:System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.Remove%2A&gt;, throw a &lt;xref:System.NotSupportedException&gt; exception.","pos":[0,293],"source":"Methods that attempt to modify a read-only collection, such as <xref:System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.Add%2A> and <xref:System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.Remove%2A>, throw a <xref:System.NotSupportedException> exception."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  You can call the SetReadOnly method multiple times on the collection; this will not raise an exception.","pos":[299,415],"source":"      > [!NOTE] >  You can call the SetReadOnly method multiple times on the collection; this will not raise an exception."}]},{"pos":[22756,22917],"content":"Gets an object that can be used to synchronize access to the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance.","needQuote":true,"needEscape":true,"source":"Gets an object that can be used to synchronize access to the <xref href=\"System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection\"></xref> instance."},{"pos":[22930,23779],"content":"Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.       Derived classes can provide their own synchronized versions of the collection using the SyncRoot property. The synchronizing code must perform operations on the SyncRoot of the collection, not directly on the collection itself. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the collection instance.","needQuote":false,"needEscape":true,"nodes":[{"content":"Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.       Derived classes can provide their own synchronized versions of the collection using the SyncRoot property. The synchronizing code must perform operations on the SyncRoot of the collection, not directly on the collection itself. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the collection instance.","pos":[0,847],"nodes":[{"content":"Enumerating through a collection is intrinsically not a thread-safe procedure.","pos":[0,78]},{"content":"Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.","pos":[79,216]},{"content":"To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[217,398]},{"content":"Derived classes can provide their own synchronized versions of the collection using the SyncRoot property.","pos":[405,511]},{"content":"The synchronizing code must perform operations on the SyncRoot of the collection, not directly on the collection itself.","pos":[512,632]},{"content":"This ensures proper operation of collections that are derived from other objects.","pos":[633,714]},{"content":"Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the collection instance.","pos":[715,847]}]}]},{"pos":[23893,24120],"content":"An object that can be used to synchronize access to the <xref href=\"System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection\"></xref>. The Web Parts control set returns a reference to the current collection object.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that can be used to synchronize access to the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,147],"source":"An object that can be used to synchronize access to the <xref href=\"System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection\"></xref>."},{"content":"The Web Parts control set returns a reference to the current collection object.","pos":[148,227]}]},{"pos":[24977,25050],"content":"Implements the base <xref:System.Collections.ICollection.CopyTo*> method.","needQuote":true,"needEscape":true,"nodes":[{"content":"Implements the base &lt;xref:System.Collections.ICollection.CopyTo*&gt; method.","pos":[0,73],"source":"Implements the base <xref:System.Collections.ICollection.CopyTo*> method."}]},{"pos":[25062,25409],"content":"This method, like the &lt;xref:System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection&gt; class's own &lt;xref:System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.CopyTo%2A&gt; method, simply calls the &lt;xref:System.Collections.ArrayList.CopyTo%2A?displayProperty=fullName&gt; method and passes the <ph id=\"ph1\">`array`</ph> and <ph id=\"ph2\">`index`</ph> parameters.","needQuote":true,"needEscape":true,"source":"This method, like the <xref:System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection> class's own <xref:System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.CopyTo%2A> method, simply calls the <xref:System.Collections.ArrayList.CopyTo%2A?displayProperty=fullName> method and passes the `array` and `index` parameters."},{"pos":[25559,25700],"content":"The array into which a collection of <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.WebParts.PersonalizationStateInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects will be copied.","needQuote":true,"needEscape":true,"source":"The array into which a collection of <xref href=\"System.Web.UI.WebControls.WebParts.PersonalizationStateInfo\"></xref> objects will be copied."},{"pos":[25761,25901],"content":"The point in <ph id=\"ph1\">`array`</ph> at which to start copying the <bpt id=\"p1\">&lt;xref href=\"System.Web.UI.WebControls.WebParts.PersonalizationStateInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects.","needQuote":true,"needEscape":true,"source":"The point in `array` at which to start copying the <xref href=\"System.Web.UI.WebControls.WebParts.PersonalizationStateInfo\"></xref> objects."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection\n  id: PersonalizationStateInfoCollection\n  children:\n  - System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.#ctor\n  - System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.Add(System.Web.UI.WebControls.WebParts.PersonalizationStateInfo)\n  - System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.Clear\n  - System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.CopyTo(System.Web.UI.WebControls.WebParts.PersonalizationStateInfo[],System.Int32)\n  - System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.Count\n  - System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.GetEnumerator\n  - System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.IsSynchronized\n  - System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.Item(System.Int32)\n  - System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.Item(System.String,System.String)\n  - System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.Remove(System.String,System.String)\n  - System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.SetReadOnly\n  - System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.SyncRoot\n  - System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  langs:\n  - csharp\n  name: PersonalizationStateInfoCollection\n  nameWithType: PersonalizationStateInfoCollection\n  fullName: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection\n  type: Class\n  summary: Provides a collection of <xref href=\"System.Web.UI.WebControls.WebParts.SharedPersonalizationStateInfo\"></xref> and <xref href=\"System.Web.UI.WebControls.WebParts.UserPersonalizationStateInfo\"></xref> objects.\n  remarks: \"The PersonalizationStateInfoCollection class provides a collection-based wrapper over a set of <xref:System.Web.UI.WebControls.WebParts.SharedPersonalizationStateInfo> and <xref:System.Web.UI.WebControls.WebParts.UserPersonalizationStateInfo> instances. These instances are retrieved by iterating sequentially over the collection, by ordinal index or by key value.  \\n  \\n Instances are indexed on a combination of path and user name. This is necessary because <xref:System.Web.UI.WebControls.WebParts.SharedPersonalizationStateInfo> instances representing shared data are indexed according to <xref:System.Web.UI.WebControls.WebParts.PersonalizationStateInfo.Path%2A> object, whereas <xref:System.Web.UI.WebControls.WebParts.UserPersonalizationStateInfo> instances are indexed according to both a <xref:System.Web.UI.WebControls.WebParts.PersonalizationStateInfo.Path%2A> object and a <xref:System.Web.UI.WebControls.WebParts.UserPersonalizationStateInfo.Username%2A> object.  \\n  \\n The information objects are maintained in the collection in the order in which they were received from the provider. The collection does not attempt to change the order of the instances or maintain a specific sort order within the collection.\"\n  syntax:\n    content: 'public sealed class PersonalizationStateInfoCollection : System.Collections.ICollection'\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.ICollection\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.#ctor\n  id: '#ctor'\n  parent: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection\n  langs:\n  - csharp\n  name: PersonalizationStateInfoCollection()\n  nameWithType: PersonalizationStateInfoCollection.PersonalizationStateInfoCollection()\n  fullName: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.PersonalizationStateInfoCollection()\n  type: Constructor\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls.WebParts\n  summary: Initializes a new instance of the <xref href=\"System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection\"></xref> class.\n  remarks: This constructor initializes an empty collection.\n  syntax:\n    content: public PersonalizationStateInfoCollection ();\n    parameters: []\n  overload: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.Add(System.Web.UI.WebControls.WebParts.PersonalizationStateInfo)\n  id: Add(System.Web.UI.WebControls.WebParts.PersonalizationStateInfo)\n  parent: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection\n  langs:\n  - csharp\n  name: Add(PersonalizationStateInfo)\n  nameWithType: PersonalizationStateInfoCollection.Add(PersonalizationStateInfo)\n  fullName: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.Add(PersonalizationStateInfo)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls.WebParts\n  summary: Adds a <xref href=\"System.Web.UI.WebControls.WebParts.PersonalizationStateInfo\"></xref>-derived instance to the end of the collection.\n  remarks: This method adds a <xref:System.Web.UI.WebControls.WebParts.PersonalizationStateInfo>-derived instance to the end of the collection. Internally, the count of the collection is incremented by one. Any enumerators currently active against the collection are invalidated.\n  syntax:\n    content: public void Add (System.Web.UI.WebControls.WebParts.PersonalizationStateInfo data);\n    parameters:\n    - id: data\n      type: System.Web.UI.WebControls.WebParts.PersonalizationStateInfo\n      description: The <xref href=\"System.Web.UI.WebControls.WebParts.PersonalizationStateInfo\"></xref>-derived instance to be added.\n  overload: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.Add*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The collection was marked as read-only.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: An attempt was made to add an object to the collection when an instance of the same shared or per-user state already exists in the collection.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The data parameter is null.\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.Clear\n  id: Clear\n  parent: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection\n  langs:\n  - csharp\n  name: Clear()\n  nameWithType: PersonalizationStateInfoCollection.Clear()\n  fullName: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.Clear()\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls.WebParts\n  summary: Clears the collection of all items.\n  remarks: Any enumerators currently active against the collection are invalidated.\n  syntax:\n    content: public void Clear ();\n    parameters: []\n  overload: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.Clear*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The collection was marked as read-only.\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.CopyTo(System.Web.UI.WebControls.WebParts.PersonalizationStateInfo[],System.Int32)\n  id: CopyTo(System.Web.UI.WebControls.WebParts.PersonalizationStateInfo[],System.Int32)\n  parent: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection\n  langs:\n  - csharp\n  name: CopyTo(PersonalizationStateInfo[],Int32)\n  nameWithType: PersonalizationStateInfoCollection.CopyTo(PersonalizationStateInfo[],Int32)\n  fullName: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.CopyTo(PersonalizationStateInfo[],Int32)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls.WebParts\n  summary: Copies the elements of the <xref href=\"System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection\"></xref> collection into a <xref href=\"System.Web.UI.WebControls.WebParts.PersonalizationStateInfo\"></xref> array, starting at the specified position.\n  remarks: Use this method if you want to create a <xref:System.Web.UI.WebControls.WebParts.PersonalizationStateInfo> array. This method simply calls the <xref:System.Collections.ArrayList.CopyTo%2A?displayProperty=fullName> method and passes the `array` and `index` parameters.\n  syntax:\n    content: public void CopyTo (System.Web.UI.WebControls.WebParts.PersonalizationStateInfo[] array, int index);\n    parameters:\n    - id: array\n      type: System.Web.UI.WebControls.WebParts.PersonalizationStateInfo[]\n      description: The array the elements in the collection are copied into.\n    - id: index\n      type: System.Int32\n      description: The location at which to start the copy operation.\n  overload: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.CopyTo*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.Count\n  id: Count\n  parent: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection\n  langs:\n  - csharp\n  name: Count\n  nameWithType: PersonalizationStateInfoCollection.Count\n  fullName: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.Count\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls.WebParts\n  summary: Gets the number of items in a collection.\n  remarks: The count of the items in the collection can be used to iterate through the collection, as shown in the example.\n  example:\n  - \"The following code example demonstrates how to use the Count property.  \\n  \\n [!code-cs[WebParts_PersAdmin#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_61_1.ascx)]\"\n  syntax:\n    content: public int Count { get; }\n    return:\n      type: System.Int32\n      description: The number of items in a collection.\n  overload: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.Count*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.GetEnumerator\n  id: GetEnumerator\n  parent: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: PersonalizationStateInfoCollection.GetEnumerator()\n  fullName: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls.WebParts\n  summary: Returns a standard enumerator capable of iterating over the collection. This method cannot be inherited.\n  remarks: \"Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \\n  \\n Initially, the enumerator is positioned before the first element in the collection. The <xref:System.Collections.IEnumerator.Reset%2A> method also brings the enumerator back to this position. At this position, the <xref:System.Collections.IEnumerator.Current%2A> property is undefined. Therefore, you must call the <xref:System.Collections.IEnumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>. For more information on enumerators, see <xref:System.Collections.IEnumerator>.  \\n  \\n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  \\n  \\n The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators. Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \\n  \\n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration. To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.\"\n  syntax:\n    content: public System.Collections.IEnumerator GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: An <xref:System.Collections.IEnumerator> that can be used to iterate through the collection.\n  overload: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.GetEnumerator*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.IsSynchronized\n  id: IsSynchronized\n  parent: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection\n  langs:\n  - csharp\n  name: IsSynchronized\n  nameWithType: PersonalizationStateInfoCollection.IsSynchronized\n  fullName: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.IsSynchronized\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls.WebParts\n  summary: Gets a value indicating whether access to the <xref href=\"System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection\"></xref> collection is synchronized (thread safe).\n  remarks: \"Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  \\n  \\n The <xref:System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.SyncRoot%2A> property returns an object, which can be used to synchronize access to the <xref:System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection>.\"\n  syntax:\n    content: public bool IsSynchronized { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if access to the collection is synchronized; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The value is always <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> for <xref href=\"System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection\"></xref> objects created by the Web Parts control set.\n  overload: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.IsSynchronized*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection\n  langs:\n  - csharp\n  name: Item(Int32)\n  nameWithType: PersonalizationStateInfoCollection.Item(Int32)\n  fullName: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.Item(Int32)\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls.WebParts\n  summary: Gets a <xref href=\"System.Web.UI.WebControls.WebParts.PersonalizationStateInfo\"></xref> instance located at the specified ordinal index in the collection.\n  remarks: This property retrieves the <xref:System.Web.UI.WebControls.WebParts.PersonalizationStateInfo> instance located at the specified ordinal index in the collection.\n  syntax:\n    content: public System.Web.UI.WebControls.WebParts.PersonalizationStateInfo this[int index] { get; }\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The ordinal index of the object to be retrieved.\n    return:\n      type: System.Web.UI.WebControls.WebParts.PersonalizationStateInfo\n      description: A <xref href=\"System.Web.UI.WebControls.WebParts.PersonalizationStateInfo\"></xref> instance located at the specified ordinal index in the collection.\n  overload: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.Item*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>index</code> is less than zero.  \\n  \\n \\\\- or -  \\n  \\n <code>index</code> is greater than <xref:System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.Count*>.\"\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.Item(System.String,System.String)\n  id: Item(System.String,System.String)\n  parent: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection\n  langs:\n  - csharp\n  name: Item(String,String)\n  nameWithType: PersonalizationStateInfoCollection.Item(String,String)\n  fullName: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.Item(String,String)\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls.WebParts\n  summary: Gets an element from the collection based on the specified parameters.\n  remarks: \"This property is the default indexer for the collection. If only `path` is provided, the property returns a <xref:System.Web.UI.WebControls.WebParts.SharedPersonalizationStateInfo> instance. If both `path` and `username` are provided, the property returns a <xref:System.Web.UI.WebControls.WebParts.UserPersonalizationStateInfo> instance for the combination of `path` and `username`.  \\n  \\n If `path` (in the case that `username` is set to `null`) does not exist, or if `username` and `path` do not exist, `null` is returned.\"\n  syntax:\n    content: public System.Web.UI.WebControls.WebParts.PersonalizationStateInfo this[string path, string username] { get; }\n    parameters:\n    - id: path\n      type: System.String\n      description: The relative application path of the personalization state object to be retrieved.\n    - id: username\n      type: System.String\n      description: The user name of the <xref href=\"System.Web.UI.WebControls.WebParts.UserPersonalizationStateInfo\"></xref> object to be retrieved.\n    return:\n      type: System.Web.UI.WebControls.WebParts.PersonalizationStateInfo\n      description: An element from the collection based on the specified parameters.\n  overload: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.Item*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>path</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.Remove(System.String,System.String)\n  id: Remove(System.String,System.String)\n  parent: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection\n  langs:\n  - csharp\n  name: Remove(String,String)\n  nameWithType: PersonalizationStateInfoCollection.Remove(String,String)\n  fullName: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.Remove(String,String)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls.WebParts\n  summary: Removes a <xref href=\"System.Web.UI.WebControls.WebParts.PersonalizationStateInfo\"></xref>-derived object from the collection.\n  remarks: \"This method removes a <xref:System.Web.UI.WebControls.WebParts.PersonalizationStateInfo>-derived instance from the collection. Any elements after the removed instance are moved up to occupy the vacant position. Internally, the count of the collection is decremented by one. Any enumerators currently active against the collection are invalidated.  \\n  \\n If only `path` is provided, then the <xref:System.Web.UI.WebControls.WebParts.SharedPersonalizationStateInfo> instance for that path is removed. If both `path` and `username` are provided, then the <xref:System.Web.UI.WebControls.WebParts.UserPersonalizationStateInfo> instance for the combination of `path` and `username` is removed.  \\n  \\n> [!NOTE]\\n>  You can try to remove a non-existing item from the collection; this action will not raise an exception.\"\n  syntax:\n    content: public void Remove (string path, string username);\n    parameters:\n    - id: path\n      type: System.String\n      description: The relative application path of the personalization state object to be removed.\n    - id: username\n      type: System.String\n      description: The user name of the <xref href=\"System.Web.UI.WebControls.WebParts.UserPersonalizationStateInfo\"></xref>-derived object to be removed.\n  overload: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.Remove*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The collection was marked as read-only.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>path</code> is null.  \\n  \\n \\\\- or -  \\n  \\n both parameters are null.\"\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.SetReadOnly\n  id: SetReadOnly\n  parent: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection\n  langs:\n  - csharp\n  name: SetReadOnly()\n  nameWithType: PersonalizationStateInfoCollection.SetReadOnly()\n  fullName: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.SetReadOnly()\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls.WebParts\n  summary: Marks the collection as read-only.\n  remarks: \"Methods that attempt to modify a read-only collection, such as <xref:System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.Add%2A> and <xref:System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.Remove%2A>, throw a <xref:System.NotSupportedException> exception.  \\n  \\n> [!NOTE]\\n>  You can call the SetReadOnly method multiple times on the collection; this will not raise an exception.\"\n  syntax:\n    content: public void SetReadOnly ();\n    parameters: []\n  overload: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.SetReadOnly*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.SyncRoot\n  id: SyncRoot\n  parent: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection\n  langs:\n  - csharp\n  name: SyncRoot\n  nameWithType: PersonalizationStateInfoCollection.SyncRoot\n  fullName: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.SyncRoot\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls.WebParts\n  summary: Gets an object that can be used to synchronize access to the <xref href=\"System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection\"></xref> instance.\n  remarks: \"Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  \\n  \\n Derived classes can provide their own synchronized versions of the collection using the SyncRoot property. The synchronizing code must perform operations on the SyncRoot of the collection, not directly on the collection itself. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the collection instance.\"\n  syntax:\n    content: public object SyncRoot { get; }\n    return:\n      type: System.Object\n      description: An object that can be used to synchronize access to the <xref href=\"System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection\"></xref>. The Web Parts control set returns a reference to the current collection object.\n  overload: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.SyncRoot*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  isEii: true\n  parent: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection\n  langs:\n  - csharp\n  name: System.Collections.ICollection.CopyTo(Array,Int32)\n  nameWithType: PersonalizationStateInfoCollection.System.Collections.ICollection.CopyTo(Array,Int32)\n  fullName: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.System.Collections.ICollection.CopyTo(Array,Int32)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls.WebParts\n  summary: Implements the base <xref:System.Collections.ICollection.CopyTo*> method.\n  remarks: This method, like the <xref:System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection> class's own <xref:System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.CopyTo%2A> method, simply calls the <xref:System.Collections.ArrayList.CopyTo%2A?displayProperty=fullName> method and passes the `array` and `index` parameters.\n  syntax:\n    content: void ICollection.CopyTo (Array array, int index);\n    parameters:\n    - id: array\n      type: System.Array\n      description: The array into which a collection of <xref href=\"System.Web.UI.WebControls.WebParts.PersonalizationStateInfo\"></xref> objects will be copied.\n    - id: index\n      type: System.Int32\n      description: The point in `array` at which to start copying the <xref href=\"System.Web.UI.WebControls.WebParts.PersonalizationStateInfo\"></xref> objects.\n  overload: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.System#Collections#ICollection#CopyTo*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.NotSupportedException\n  isExternal: true\n  name: System.NotSupportedException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.#ctor\n  parent: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection\n  isExternal: false\n  name: PersonalizationStateInfoCollection()\n  nameWithType: PersonalizationStateInfoCollection.PersonalizationStateInfoCollection()\n  fullName: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.PersonalizationStateInfoCollection()\n- uid: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.Add(System.Web.UI.WebControls.WebParts.PersonalizationStateInfo)\n  parent: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection\n  isExternal: false\n  name: Add(PersonalizationStateInfo)\n  nameWithType: PersonalizationStateInfoCollection.Add(PersonalizationStateInfo)\n  fullName: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.Add(PersonalizationStateInfo)\n- uid: System.Web.UI.WebControls.WebParts.PersonalizationStateInfo\n  parent: System.Web.UI.WebControls.WebParts\n  isExternal: false\n  name: PersonalizationStateInfo\n  nameWithType: PersonalizationStateInfo\n  fullName: System.Web.UI.WebControls.WebParts.PersonalizationStateInfo\n- uid: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.Clear\n  parent: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection\n  isExternal: false\n  name: Clear()\n  nameWithType: PersonalizationStateInfoCollection.Clear()\n  fullName: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.Clear()\n- uid: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.CopyTo(System.Web.UI.WebControls.WebParts.PersonalizationStateInfo[],System.Int32)\n  parent: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection\n  isExternal: false\n  name: CopyTo(PersonalizationStateInfo[],Int32)\n  nameWithType: PersonalizationStateInfoCollection.CopyTo(PersonalizationStateInfo[],Int32)\n  fullName: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.CopyTo(PersonalizationStateInfo[],Int32)\n- uid: System.Web.UI.WebControls.WebParts.PersonalizationStateInfo[]\n  parent: System.Web.UI.WebControls.WebParts\n  isExternal: false\n  name: PersonalizationStateInfo\n  nameWithType: PersonalizationStateInfo\n  fullName: System.Web.UI.WebControls.WebParts.PersonalizationStateInfo[]\n  spec.csharp:\n  - uid: System.Web.UI.WebControls.WebParts.PersonalizationStateInfo\n    name: PersonalizationStateInfo\n    nameWithType: PersonalizationStateInfo\n    fullName: PersonalizationStateInfo[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.Count\n  parent: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection\n  isExternal: false\n  name: Count\n  nameWithType: PersonalizationStateInfoCollection.Count\n  fullName: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.Count\n- uid: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.GetEnumerator\n  parent: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: PersonalizationStateInfoCollection.GetEnumerator()\n  fullName: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: true\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.IsSynchronized\n  parent: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection\n  isExternal: false\n  name: IsSynchronized\n  nameWithType: PersonalizationStateInfoCollection.IsSynchronized\n  fullName: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.IsSynchronized\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.Item(System.Int32)\n  parent: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection\n  isExternal: false\n  name: Item(Int32)\n  nameWithType: PersonalizationStateInfoCollection.Item(Int32)\n  fullName: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.Item(Int32)\n- uid: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.Item(System.String,System.String)\n  parent: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection\n  isExternal: false\n  name: Item(String,String)\n  nameWithType: PersonalizationStateInfoCollection.Item(String,String)\n  fullName: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.Item(String,String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.Remove(System.String,System.String)\n  parent: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection\n  isExternal: false\n  name: Remove(String,String)\n  nameWithType: PersonalizationStateInfoCollection.Remove(String,String)\n  fullName: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.Remove(String,String)\n- uid: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.SetReadOnly\n  parent: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection\n  isExternal: false\n  name: SetReadOnly()\n  nameWithType: PersonalizationStateInfoCollection.SetReadOnly()\n  fullName: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.SetReadOnly()\n- uid: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.SyncRoot\n  parent: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection\n  isExternal: false\n  name: SyncRoot\n  nameWithType: PersonalizationStateInfoCollection.SyncRoot\n  fullName: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.SyncRoot\n- uid: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  parent: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection\n  isExternal: false\n  name: System.Collections.ICollection.CopyTo(Array,Int32)\n  nameWithType: PersonalizationStateInfoCollection.System.Collections.ICollection.CopyTo(Array,Int32)\n  fullName: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.System.Collections.ICollection.CopyTo(Array,Int32)\n- uid: System.Array\n  parent: System\n  isExternal: true\n  name: Array\n  nameWithType: Array\n  fullName: System.Array\n- uid: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.#ctor*\n  parent: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection\n  isExternal: false\n  name: PersonalizationStateInfoCollection\n  nameWithType: PersonalizationStateInfoCollection.PersonalizationStateInfoCollection\n- uid: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.Add*\n  parent: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection\n  isExternal: false\n  name: Add\n  nameWithType: PersonalizationStateInfoCollection.Add\n- uid: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.Clear*\n  parent: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection\n  isExternal: false\n  name: Clear\n  nameWithType: PersonalizationStateInfoCollection.Clear\n- uid: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.CopyTo*\n  parent: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection\n  isExternal: false\n  name: CopyTo\n  nameWithType: PersonalizationStateInfoCollection.CopyTo\n- uid: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.Count*\n  parent: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection\n  isExternal: false\n  name: Count\n  nameWithType: PersonalizationStateInfoCollection.Count\n- uid: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.GetEnumerator*\n  parent: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection\n  isExternal: false\n  name: GetEnumerator\n  nameWithType: PersonalizationStateInfoCollection.GetEnumerator\n- uid: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.IsSynchronized*\n  parent: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection\n  isExternal: false\n  name: IsSynchronized\n  nameWithType: PersonalizationStateInfoCollection.IsSynchronized\n- uid: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.Item*\n  parent: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection\n  isExternal: false\n  name: Item\n  nameWithType: PersonalizationStateInfoCollection.Item\n- uid: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.Remove*\n  parent: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection\n  isExternal: false\n  name: Remove\n  nameWithType: PersonalizationStateInfoCollection.Remove\n- uid: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.SetReadOnly*\n  parent: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection\n  isExternal: false\n  name: SetReadOnly\n  nameWithType: PersonalizationStateInfoCollection.SetReadOnly\n- uid: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.SyncRoot*\n  parent: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection\n  isExternal: false\n  name: SyncRoot\n  nameWithType: PersonalizationStateInfoCollection.SyncRoot\n- uid: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection.System#Collections#ICollection#CopyTo*\n  parent: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection\n  isExternal: false\n  name: System.Collections.ICollection.CopyTo\n  nameWithType: PersonalizationStateInfoCollection.System.Collections.ICollection.CopyTo\n"}