{"nodes":[{"pos":[1267,1371],"content":"Represents the abstract base class from which all implementations of asymmetric algorithms must inherit.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the abstract base class from which all implementations of asymmetric algorithms must inherit.","pos":[0,104]}]},{"pos":[1384,4386],"content":"Asymmetric cryptographic algorithms, also known as public-key algorithms, require that both sender and receiver maintain a pair of related keys: a private key and a public key. Both keys are unique to the entity. The public key can be made available to anyone; this key is used for encoding data that is sent to a receiver. The private key must be kept private by the receiver; this key is used for decoding messages encoded using the receiver's public key. The <xref:System.Security.Cryptography.RSACryptoServiceProvider> class is an implementation of a public-key algorithm. For an in-depth discussion of public-key encryption and algorithms, see the \"Public-Key Encryption\" section in [Cryptographic Services](~/add/includes/ajax-current-ext-md.md). For information about how to use the Strong Name tool (Sn.exe) to create key pairs, see [How to: Create a Public-Private Key Pair](~/add/includes/ajax-current-ext-md.md).       You can use public-key systems to form digital signatures. Digital signatures are used to help to protect the integrity of data. For example, to use a public-key system to digitally sign a message, the sender first applies a hash function to the message to create a message digest. The sender then encrypts the message digest with the sender's private key to create the sender's personal signature. Upon receiving the message and signature, the receiver decrypts the signature using the sender's public key to recover the message digest and hashes the message using the same hash algorithm that the sender used. If the message digest that the receiver computes matches the message digest received from the sender, the receiver can assume that the message was not altered while in transit. Note that anyone can verify a signature, because the sender's public key is common knowledge. This technique does not retain the secrecy of the message; for the message to be secret, it must also be encrypted.       The .NET Framework provides the following classes that implement digital signature algorithms: <xref:System.Security.Cryptography.DSACryptoServiceProvider>, <xref:System.Security.Cryptography.RSACryptoServiceProvider>, <xref:System.Security.Cryptography.ECDsa> (base class), and <xref:System.Security.Cryptography.ECDsaCng>.       The <xref:System.Security.Cryptography> namespace provides concrete classes for <xref:System.Security.Cryptography.RSA> and <xref:System.Security.Cryptography.DSA> only.       To learn how to use the RSA algorithm to encrypt and decrypt XML data, and create and verify XML digital signatures, see these articles:      -   [How to: Encrypt XML Elements with Asymmetric Keys](~/add/includes/ajax-current-ext-md.md)      -   [How to: Decrypt XML Elements with Asymmetric Keys](~/add/includes/ajax-current-ext-md.md)      -   [How to: Sign XML Documents with Digital Signatures](~/add/includes/ajax-current-ext-md.md)      -   [How to: Verify the Digital Signatures of XML Documents](~/add/includes/ajax-current-ext-md.md)","needQuote":false,"needEscape":true,"nodes":[{"content":"Asymmetric cryptographic algorithms, also known as public-key algorithms, require that both sender and receiver maintain a pair of related keys: a private key and a public key.","pos":[0,176]},{"content":"Both keys are unique to the entity.","pos":[177,212]},{"content":"The public key can be made available to anyone; this key is used for encoding data that is sent to a receiver.","pos":[213,323]},{"content":"The private key must be kept private by the receiver; this key is used for decoding messages encoded using the receiver's public key.","pos":[324,457]},{"content":"The &lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt; class is an implementation of a public-key algorithm.","pos":[458,576],"source":" The <xref:System.Security.Cryptography.RSACryptoServiceProvider> class is an implementation of a public-key algorithm."},{"content":"For an in-depth discussion of public-key encryption and algorithms, see the \"Public-Key Encryption\" section in <bpt id=\"p1\">[</bpt>Cryptographic Services<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[577,752],"source":" For an in-depth discussion of public-key encryption and algorithms, see the \"Public-Key Encryption\" section in [Cryptographic Services](~/add/includes/ajax-current-ext-md.md)."},{"content":"For information about how to use the Strong Name tool (Sn.exe) to create key pairs, see <bpt id=\"p1\">[</bpt>How to: Create a Public-Private Key Pair<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[753,923],"source":" For information about how to use the Strong Name tool (Sn.exe) to create key pairs, see [How to: Create a Public-Private Key Pair](~/add/includes/ajax-current-ext-md.md)."},{"content":"You can use public-key systems to form digital signatures.","pos":[930,988]},{"content":"Digital signatures are used to help to protect the integrity of data.","pos":[989,1058]},{"content":"For example, to use a public-key system to digitally sign a message, the sender first applies a hash function to the message to create a message digest.","pos":[1059,1211]},{"content":"The sender then encrypts the message digest with the sender's private key to create the sender's personal signature.","pos":[1212,1328]},{"content":"Upon receiving the message and signature, the receiver decrypts the signature using the sender's public key to recover the message digest and hashes the message using the same hash algorithm that the sender used.","pos":[1329,1541]},{"content":"If the message digest that the receiver computes matches the message digest received from the sender, the receiver can assume that the message was not altered while in transit.","pos":[1542,1718]},{"content":"Note that anyone can verify a signature, because the sender's public key is common knowledge.","pos":[1719,1812]},{"content":"This technique does not retain the secrecy of the message; for the message to be secret, it must also be encrypted.","pos":[1813,1928]},{"content":"The .NET Framework provides the following classes that implement digital signature algorithms: &lt;xref:System.Security.Cryptography.DSACryptoServiceProvider&gt;, &lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;, &lt;xref:System.Security.Cryptography.ECDsa&gt; (base class), and &lt;xref:System.Security.Cryptography.ECDsaCng&gt;.","pos":[1935,2259],"source":"       The .NET Framework provides the following classes that implement digital signature algorithms: <xref:System.Security.Cryptography.DSACryptoServiceProvider>, <xref:System.Security.Cryptography.RSACryptoServiceProvider>, <xref:System.Security.Cryptography.ECDsa> (base class), and <xref:System.Security.Cryptography.ECDsaCng>."},{"content":"The &lt;xref:System.Security.Cryptography&gt; namespace provides concrete classes for &lt;xref:System.Security.Cryptography.RSA&gt; and &lt;xref:System.Security.Cryptography.DSA&gt; only.","pos":[2266,2435],"source":"       The <xref:System.Security.Cryptography> namespace provides concrete classes for <xref:System.Security.Cryptography.RSA> and <xref:System.Security.Cryptography.DSA> only."},{"content":"To learn how to use the RSA algorithm to encrypt and decrypt XML data, and create and verify XML digital signatures, see these articles:      -   <bpt id=\"p1\">[</bpt>How to: Encrypt XML Elements with Asymmetric Keys<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept><ph id=\"ph1\">      -   </ph><bpt id=\"p2\">[</bpt>How to: Decrypt XML Elements with Asymmetric Keys<ept id=\"p2\">](~/add/includes/ajax-current-ext-md.md)</ept><ph id=\"ph2\">      -   </ph><bpt id=\"p3\">[</bpt>How to: Sign XML Documents with Digital Signatures<ept id=\"p3\">](~/add/includes/ajax-current-ext-md.md)</ept><ph id=\"ph3\">      -   </ph><bpt id=\"p4\">[</bpt>How to: Verify the Digital Signatures of XML Documents<ept id=\"p4\">](~/add/includes/ajax-current-ext-md.md)</ept>","pos":[2442,2984],"source":"       To learn how to use the RSA algorithm to encrypt and decrypt XML data, and create and verify XML digital signatures, see these articles:      -   [How to: Encrypt XML Elements with Asymmetric Keys](~/add/includes/ajax-current-ext-md.md)      -   [How to: Decrypt XML Elements with Asymmetric Keys](~/add/includes/ajax-current-ext-md.md)      -   [How to: Sign XML Documents with Digital Signatures](~/add/includes/ajax-current-ext-md.md)      -   [How to: Verify the Digital Signatures of XML Documents](~/add/includes/ajax-current-ext-md.md)"}]},{"pos":[6142,6252],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\"></xref> class."},{"pos":[6264,6563],"content":"You cannot create an instance of an abstract class. Application code creates a new instance of a derived class. The <xref:System.Security.Cryptography.RSACryptoServiceProvider> and <xref:System.Security.Cryptography.DSACryptoServiceProvider> classes are the only currently supported implementations.","needQuote":true,"needEscape":true,"nodes":[{"content":"You cannot create an instance of an abstract class. Application code creates a new instance of a derived class. The <xref:System.Security.Cryptography.RSACryptoServiceProvider> and <xref:System.Security.Cryptography.DSACryptoServiceProvider> classes are the only currently supported implementations.","pos":[0,299],"nodes":[{"content":"You cannot create an instance of an abstract class.","pos":[0,51]},{"content":"Application code creates a new instance of a derived class.","pos":[52,111]},{"content":"The &lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt; and &lt;xref:System.Security.Cryptography.DSACryptoServiceProvider&gt; classes are the only currently supported implementations.","pos":[112,299],"source":" The <xref:System.Security.Cryptography.RSACryptoServiceProvider> and <xref:System.Security.Cryptography.DSACryptoServiceProvider> classes are the only currently supported implementations."}]}]},{"pos":[6870,6923],"content":"The implementation of the derived class is not valid.","needQuote":true,"needEscape":true,"nodes":[{"content":"The implementation of the derived class is not valid.","pos":[0,53]}]},{"pos":[7324,7435],"content":"Releases all resources used by the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Releases all resources used by the <xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\"></xref> class."},{"pos":[7448,7828],"content":"This method is a simple call to the <xref:System.IDisposable.Dispose%2A?displayProperty=fullName> method.       Calling `Dispose` allows the resources used by the <xref:System.Security.Cryptography.AsymmetricAlgorithm> class to be reallocated for other purposes. For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"This method is a simple call to the &lt;xref:System.IDisposable.Dispose%2A?displayProperty=fullName&gt; method.","pos":[0,105],"source":"This method is a simple call to the <xref:System.IDisposable.Dispose%2A?displayProperty=fullName> method."},{"content":"Calling <ph id=\"ph1\">`Dispose`</ph> allows the resources used by the &lt;xref:System.Security.Cryptography.AsymmetricAlgorithm&gt; class to be reallocated for other purposes.","pos":[112,262],"source":"       Calling `Dispose` allows the resources used by the <xref:System.Security.Cryptography.AsymmetricAlgorithm> class to be reallocated for other purposes."},{"content":"For more information about <ph id=\"ph1\">`Dispose`</ph>, see <bpt id=\"p1\">[</bpt>Cleaning Up Unmanaged Resources<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[263,378],"source":" For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[9044,9124],"content":"Creates a default cryptographic object used to perform the asymmetric algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a default cryptographic object used to perform the asymmetric algorithm.","pos":[0,80]}]},{"pos":[9972,10189],"content":"A new <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance, unless the default settings have been changed with the <bpt id=\"p2\">[</bpt><ph id=\"ph1\">&amp;lt;</ph>cryptoClass<ph id=\"ph2\">&amp;gt;</ph> element<ept id=\"p2\">](../Topic/%3CcryptoClass%3E%20Element.md)</ept>.","needQuote":true,"needEscape":true,"source":"A new <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\"></xref> instance, unless the default settings have been changed with the [&lt;cryptoClass&gt; element](../Topic/%3CcryptoClass%3E%20Element.md)."},{"pos":[10729,10808],"content":"Creates an instance of the specified implementation of an asymmetric algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates an instance of the specified implementation of an asymmetric algorithm.","pos":[0,79]}]},{"pos":[11642,13356],"content":"The asymmetric algorithm implementation to use. The following table shows the valid values for the `algName` parameter and the algorithms they map to.       <table><thead><tr><th> Parameter value       </th><th> Implements       </th></tr></thead><tbody><tr><td> System.Security.Cryptography.AsymmetricAlgorithm       </td><td><xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\"></xref></td></tr><tr><td> RSA       </td><td><xref href=\"System.Security.Cryptography.RSA\"></xref></td></tr><tr><td> System.Security.Cryptography.RSA       </td><td><xref href=\"System.Security.Cryptography.RSA\"></xref></td></tr><tr><td> DSA       </td><td><xref href=\"System.Security.Cryptography.DSA\"></xref></td></tr><tr><td> System.Security.Cryptography.DSA       </td><td><xref href=\"System.Security.Cryptography.DSA\"></xref></td></tr><tr><td> ECDsa       </td><td><xref href=\"System.Security.Cryptography.ECDsa\"></xref></td></tr><tr><td> ECDsaCng       </td><td><xref href=\"System.Security.Cryptography.ECDsaCng\"></xref></td></tr><tr><td> System.Security.Cryptography.ECDsaCng       </td><td><xref href=\"System.Security.Cryptography.ECDsaCng\"></xref></td></tr><tr><td> ECDH       </td><td><xref href=\"System.Security.Cryptography.ECDiffieHellman\"></xref></td></tr><tr><td> ECDiffieHellman       </td><td><xref href=\"System.Security.Cryptography.ECDiffieHellman\"></xref></td></tr><tr><td> ECDiffieHellmanCng       </td><td><xref href=\"System.Security.Cryptography.ECDiffieHellmanCng\"></xref></td></tr><tr><td> System.Security.Cryptography.ECDiffieHellmanCng       </td><td><xref href=\"System.Security.Cryptography.ECDiffieHellmanCng\"></xref></td></tr></tbody></table>","needQuote":false,"needEscape":true,"nodes":[{"content":"The asymmetric algorithm implementation to use. The following table shows the valid values for the `algName` parameter and the algorithms they map to.       ","pos":[0,157],"nodes":[{"content":"The asymmetric algorithm implementation to use.","pos":[0,47]},{"content":"The following table shows the valid values for the <ph id=\"ph1\">`algName`</ph> parameter and the algorithms they map to.","pos":[48,150],"source":" The following table shows the valid values for the `algName` parameter and the algorithms they map to."}]},{"content":"Parameter value","pos":[180,195]},{"content":"Implements","pos":[212,222]},{"content":"System.Security.Cryptography.AsymmetricAlgorithm","pos":[263,311]},{"content":"RSA","pos":[415,418]},{"content":"System.Security.Cryptography.RSA","pos":[506,538]},{"content":"DSA","pos":[626,629]},{"content":"System.Security.Cryptography.DSA","pos":[717,749]},{"content":"ECDsa","pos":[837,842]},{"content":"ECDsaCng","pos":[932,940]},{"content":"System.Security.Cryptography.ECDsaCng","pos":[1033,1070]},{"content":"ECDH","pos":[1163,1167]},{"content":"ECDiffieHellman","pos":[1267,1282]},{"content":"ECDiffieHellmanCng","pos":[1382,1400]},{"content":"System.Security.Cryptography.ECDiffieHellmanCng","pos":[1503,1550]}]},{"pos":[13450,13518],"content":"A new instance of the specified asymmetric algorithm implementation.","needQuote":true,"needEscape":true,"nodes":[{"content":"A new instance of the specified asymmetric algorithm implementation.","pos":[0,68]}]},{"pos":[14015,14150],"content":"Releases all resources used by the current instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Releases all resources used by the current instance of the <xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\"></xref> class."},{"pos":[14163,15130],"content":"Call `Dispose` when you are finished using the <xref:System.Security.Cryptography.AsymmetricAlgorithm>. The `Dispose` method leaves the <xref:System.Security.Cryptography.AsymmetricAlgorithm> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.Security.Cryptography.AsymmetricAlgorithm> so the garbage collector can reclaim the memory that the <xref:System.Security.Cryptography.AsymmetricAlgorithm> was occupying.       For more information, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md) and [Implementing a Dispose Method](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] >  Always call `Dispose` before you release your last reference to the <xref:System.Security.Cryptography.AsymmetricAlgorithm>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Security.Cryptography.AsymmetricAlgorithm> object's `Finalize` method.","needQuote":false,"needEscape":true,"nodes":[{"content":"Call <ph id=\"ph1\">`Dispose`</ph> when you are finished using the &lt;xref:System.Security.Cryptography.AsymmetricAlgorithm&gt;.","pos":[0,103],"source":"Call `Dispose` when you are finished using the <xref:System.Security.Cryptography.AsymmetricAlgorithm>."},{"content":"The <ph id=\"ph1\">`Dispose`</ph> method leaves the &lt;xref:System.Security.Cryptography.AsymmetricAlgorithm&gt; in an unusable state.","pos":[104,213],"source":" The `Dispose` method leaves the <xref:System.Security.Cryptography.AsymmetricAlgorithm> in an unusable state."},{"content":"After calling <ph id=\"ph1\">`Dispose`</ph>, you must release all references to the &lt;xref:System.Security.Cryptography.AsymmetricAlgorithm&gt; so the garbage collector can reclaim the memory that the &lt;xref:System.Security.Cryptography.AsymmetricAlgorithm&gt; was occupying.","pos":[214,461],"source":" After calling `Dispose`, you must release all references to the <xref:System.Security.Cryptography.AsymmetricAlgorithm> so the garbage collector can reclaim the memory that the <xref:System.Security.Cryptography.AsymmetricAlgorithm> was occupying."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Cleaning Up Unmanaged Resources<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id=\"p2\">[</bpt>Implementing a Dispose Method<ept id=\"p2\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[468,642],"source":"       For more information, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md) and [Implementing a Dispose Method](~/add/includes/ajax-current-ext-md.md)."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Always call <ph id=\"ph2\">`Dispose`</ph> before you release your last reference to the &lt;xref:System.Security.Cryptography.AsymmetricAlgorithm&gt;.","pos":[648,785],"source":"      > [!NOTE] >  Always call `Dispose` before you release your last reference to the <xref:System.Security.Cryptography.AsymmetricAlgorithm>."},{"content":"Otherwise, the resources it is using will not be freed until the garbage collector calls the &lt;xref:System.Security.Cryptography.AsymmetricAlgorithm&gt; object's <ph id=\"ph1\">`Finalize`</ph> method.","pos":[786,962],"source":" Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Security.Cryptography.AsymmetricAlgorithm> object's `Finalize` method."}]},{"pos":[15748,15915],"content":"Releases the unmanaged resources used by the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class and optionally releases the managed resources.","needQuote":true,"needEscape":true,"source":"Releases the unmanaged resources used by the <xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\"></xref> class and optionally releases the managed resources."},{"pos":[15928,16438],"content":"This method is called by the public `Dispose()` method and the `Finalize` method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. `Finalize` invokes `Dispose` with `disposing` set to `false`.       When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.Cryptography.AsymmetricAlgorithm> references. This method invokes the `Dispose()` method of each referenced object.","needQuote":false,"needEscape":true,"nodes":[{"content":"This method is called by the public <ph id=\"ph1\">`Dispose()`</ph> method and the <ph id=\"ph2\">`Finalize`</ph> method.","pos":[0,81],"source":"This method is called by the public `Dispose()` method and the `Finalize` method."},{"content":"<ph id=\"ph1\">`Dispose()`</ph> invokes the protected <ph id=\"ph2\">`Dispose(Boolean)`</ph> method with the <ph id=\"ph3\">`disposing`</ph> parameter set to <ph id=\"ph4\">`true`</ph>.","pos":[82,187],"source":"`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`."},{"content":"<ph id=\"ph1\">`Finalize`</ph> invokes <ph id=\"ph2\">`Dispose`</ph> with <ph id=\"ph3\">`disposing`</ph> set to <ph id=\"ph4\">`false`</ph>.","pos":[188,249],"source":"`Finalize` invokes `Dispose` with `disposing` set to `false`."},{"content":"When the <ph id=\"ph1\">`disposing`</ph> parameter is <ph id=\"ph2\">`true`</ph>, this method releases all resources held by any managed objects that this &lt;xref:System.Security.Cryptography.AsymmetricAlgorithm&gt; references.","pos":[256,438],"source":"       When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.Cryptography.AsymmetricAlgorithm> references."},{"content":"This method invokes the <ph id=\"ph1\">`Dispose()`</ph> method of each referenced object.","pos":[439,508],"source":" This method invokes the `Dispose()` method of each referenced object."}]},{"pos":[16594,16803],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to release both managed and unmanaged resources; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> to release only unmanaged resources.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only unmanaged resources."},{"pos":[17379,17586],"content":"When overridden in a derived class, reconstructs an <xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\"></xref> object from an XML string. Otherwise, throws a <xref:System.NotImplementedException>.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, reconstructs an <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object from an XML string.","pos":[0,148],"source":"When overridden in a derived class, reconstructs an <xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\"></xref> object from an XML string."},{"content":"Otherwise, throws a &lt;xref:System.NotImplementedException&gt;.","pos":[149,207],"source":" Otherwise, throws a <xref:System.NotImplementedException>."}]},{"pos":[18482,18600],"content":"The XML string to use to reconstruct the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"The XML string to use to reconstruct the <xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\"></xref> object."},{"pos":[19165,19305],"content":"When overridden in a derived class, gets the name of the key exchange algorithm. Otherwise, throws an <xref:System.NotImplementedException>.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, gets the name of the key exchange algorithm. Otherwise, throws an <xref:System.NotImplementedException>.","pos":[0,140],"nodes":[{"content":"When overridden in a derived class, gets the name of the key exchange algorithm.","pos":[0,80]},{"content":"Otherwise, throws an &lt;xref:System.NotImplementedException&gt;.","pos":[81,140],"source":" Otherwise, throws an <xref:System.NotImplementedException>."}]}]},{"pos":[20118,20157],"content":"The name of the key exchange algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the key exchange algorithm.","pos":[0,39]}]},{"pos":[20664,20748],"content":"Gets or sets the size, in bits, of the key modulus used by the asymmetric algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the size, in bits, of the key modulus used by the asymmetric algorithm.","pos":[0,84]}]},{"pos":[20760,20959],"content":"The valid key sizes are specified by the particular implementation of the asymmetric algorithm and are listed in the <xref:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes%2A> property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The valid key sizes are specified by the particular implementation of the asymmetric algorithm and are listed in the &lt;xref:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes%2A&gt; property.","pos":[0,199],"source":"The valid key sizes are specified by the particular implementation of the asymmetric algorithm and are listed in the <xref:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes%2A> property."}]},{"pos":[21778,21849],"content":"The size, in bits, of the key modulus used by the asymmetric algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"The size, in bits, of the key modulus used by the asymmetric algorithm.","pos":[0,71]}]},{"pos":[22082,22114],"content":"The key modulus size is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key modulus size is invalid.","pos":[0,32]}]},{"pos":[22543,22625],"content":"Represents the size, in bits, of the key modulus used by the asymmetric algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the size, in bits, of the key modulus used by the asymmetric algorithm.","pos":[0,82]}]},{"pos":[22638,22957],"content":"The valid key sizes are specified by the particular implementation of the asymmetric algorithm and are listed in the <xref:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes%2A> property.       This field is accessed through the <xref:System.Security.Cryptography.AsymmetricAlgorithm.KeySize%2A> property.","needQuote":false,"needEscape":true,"nodes":[{"content":"The valid key sizes are specified by the particular implementation of the asymmetric algorithm and are listed in the <xref:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes%2A> property.       This field is accessed through the <xref:System.Security.Cryptography.AsymmetricAlgorithm.KeySize%2A> property.","pos":[0,317],"nodes":[{"content":"The valid key sizes are specified by the particular implementation of the asymmetric algorithm and are listed in the &lt;xref:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes%2A&gt; property.","pos":[0,199],"source":"The valid key sizes are specified by the particular implementation of the asymmetric algorithm and are listed in the <xref:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes%2A> property."},{"content":"This field is accessed through the &lt;xref:System.Security.Cryptography.AsymmetricAlgorithm.KeySize%2A&gt; property.","pos":[206,317],"source":"       This field is accessed through the <xref:System.Security.Cryptography.AsymmetricAlgorithm.KeySize%2A> property."}]}]},{"pos":[23066,23078],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[23532,23598],"content":"Gets the key sizes that are supported by the asymmetric algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the key sizes that are supported by the asymmetric algorithm.","pos":[0,66]}]},{"pos":[23610,23693],"content":"The asymmetric algorithm supports only key sizes that match an entry in this array.","needQuote":true,"needEscape":true,"nodes":[{"content":"The asymmetric algorithm supports only key sizes that match an entry in this array.","pos":[0,83]}]},{"pos":[24688,24763],"content":"An array that contains the key sizes supported by the asymmetric algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array that contains the key sizes supported by the asymmetric algorithm.","pos":[0,75]}]},{"pos":[25315,25386],"content":"Specifies the key sizes that are supported by the asymmetric algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies the key sizes that are supported by the asymmetric algorithm.","pos":[0,71]}]},{"pos":[25399,25608],"content":"The asymmetric algorithm supports only key sizes that match an entry in this array.       This field is accessed through the <xref:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes%2A> property.","needQuote":false,"needEscape":true,"nodes":[{"content":"The asymmetric algorithm supports only key sizes that match an entry in this array.       This field is accessed through the <xref:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes%2A> property.","pos":[0,207],"nodes":[{"content":"The asymmetric algorithm supports only key sizes that match an entry in this array.","pos":[0,83]},{"content":"This field is accessed through the &lt;xref:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes%2A&gt; property.","pos":[90,207],"source":"       This field is accessed through the <xref:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes%2A> property."}]}]},{"pos":[25786,25798],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[26277,26421],"content":"When implemented in a derived class, gets the name of the signature algorithm. Otherwise, always throws a <xref:System.NotImplementedException>.","needQuote":true,"needEscape":true,"nodes":[{"content":"When implemented in a derived class, gets the name of the signature algorithm. Otherwise, always throws a <xref:System.NotImplementedException>.","pos":[0,144],"nodes":[{"content":"When implemented in a derived class, gets the name of the signature algorithm.","pos":[0,78]},{"content":"Otherwise, always throws a &lt;xref:System.NotImplementedException&gt;.","pos":[79,144],"source":" Otherwise, always throws a <xref:System.NotImplementedException>."}]}]},{"pos":[27226,27262],"content":"The name of the signature algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the signature algorithm.","pos":[0,36]}]},{"pos":[27844,28080],"content":"When overridden in a derived class, creates and returns an XML string representation of the current <xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\"></xref> object. Otherwise, throws a <xref:System.NotImplementedException>.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, creates and returns an XML string representation of the current <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","pos":[0,177],"source":"When overridden in a derived class, creates and returns an XML string representation of the current <xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\"></xref> object."},{"content":"Otherwise, throws a &lt;xref:System.NotImplementedException&gt;.","pos":[178,236],"source":" Otherwise, throws a <xref:System.NotImplementedException>."}]},{"pos":[29014,29180],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to include private parameters; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to include private parameters; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[29238,29353],"content":"An XML string encoding of the current <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"An XML string encoding of the current <xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\"></xref> object."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.AsymmetricAlgorithm\n  id: AsymmetricAlgorithm\n  children:\n  - System.Security.Cryptography.AsymmetricAlgorithm.#ctor\n  - System.Security.Cryptography.AsymmetricAlgorithm.Clear\n  - System.Security.Cryptography.AsymmetricAlgorithm.Create\n  - System.Security.Cryptography.AsymmetricAlgorithm.Create(System.String)\n  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)\n  - System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString(System.String)\n  - System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm\n  - System.Security.Cryptography.AsymmetricAlgorithm.KeySize\n  - System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue\n  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes\n  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue\n  - System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm\n  - System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString(System.Boolean)\n  langs:\n  - csharp\n  name: AsymmetricAlgorithm\n  nameWithType: AsymmetricAlgorithm\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm\n  type: Class\n  summary: Represents the abstract base class from which all implementations of asymmetric algorithms must inherit.\n  remarks: \"Asymmetric cryptographic algorithms, also known as public-key algorithms, require that both sender and receiver maintain a pair of related keys: a private key and a public key. Both keys are unique to the entity. The public key can be made available to anyone; this key is used for encoding data that is sent to a receiver. The private key must be kept private by the receiver; this key is used for decoding messages encoded using the receiver's public key. The <xref:System.Security.Cryptography.RSACryptoServiceProvider> class is an implementation of a public-key algorithm. For an in-depth discussion of public-key encryption and algorithms, see the \\\"Public-Key Encryption\\\" section in [Cryptographic Services](~/add/includes/ajax-current-ext-md.md). For information about how to use the Strong Name tool (Sn.exe) to create key pairs, see [How to: Create a Public-Private Key Pair](~/add/includes/ajax-current-ext-md.md).  \\n  \\n You can use public-key systems to form digital signatures. Digital signatures are used to help to protect the integrity of data. For example, to use a public-key system to digitally sign a message, the sender first applies a hash function to the message to create a message digest. The sender then encrypts the message digest with the sender's private key to create the sender's personal signature. Upon receiving the message and signature, the receiver decrypts the signature using the sender's public key to recover the message digest and hashes the message using the same hash algorithm that the sender used. If the message digest that the receiver computes matches the message digest received from the sender, the receiver can assume that the message was not altered while in transit. Note that anyone can verify a signature, because the sender's public key is common knowledge. This technique does not retain the secrecy of the message; for the message to be secret, it must also be encrypted.  \\n  \\n The .NET Framework provides the following classes that implement digital signature algorithms: <xref:System.Security.Cryptography.DSACryptoServiceProvider>, <xref:System.Security.Cryptography.RSACryptoServiceProvider>, <xref:System.Security.Cryptography.ECDsa> (base class), and <xref:System.Security.Cryptography.ECDsaCng>.  \\n  \\n The <xref:System.Security.Cryptography> namespace provides concrete classes for <xref:System.Security.Cryptography.RSA> and <xref:System.Security.Cryptography.DSA> only.  \\n  \\n To learn how to use the RSA algorithm to encrypt and decrypt XML data, and create and verify XML digital signatures, see these articles:  \\n  \\n-   [How to: Encrypt XML Elements with Asymmetric Keys](~/add/includes/ajax-current-ext-md.md)  \\n  \\n-   [How to: Decrypt XML Elements with Asymmetric Keys](~/add/includes/ajax-current-ext-md.md)  \\n  \\n-   [How to: Sign XML Documents with Digital Signatures](~/add/includes/ajax-current-ext-md.md)  \\n  \\n-   [How to: Verify the Digital Signatures of XML Documents](~/add/includes/ajax-current-ext-md.md)\"\n  example:\n  - \"The following code example demonstrates how to implement a custom asymmetric algorithm inherited from the AsymmetricAlgorithm class.  An additional class is provided to demonstrate how to use the custom class.  \\n  \\n [!code-cs[System.Security.Cryptography.AsymmetricAlgorithm#2](~/add/codesnippet/csharp/t-system.security.crypto_0_1.cs)]\\n [!code-cpp[System.Security.Cryptography.AsymmetricAlgorithm#2](~/add/codesnippet/cpp/t-system.security.crypto_0_1.cpp)]\\n [!code-vb[System.Security.Cryptography.AsymmetricAlgorithm#2](~/add/codesnippet/visualbasic/t-system.security.crypto_0_1.vb)]  \\n  \\n Here's an additional class that demonstrates how to use the custom class.  \\n  \\n [!code-cs[System.Security.Cryptography.AsymmetricAlgorithm#3](~/add/codesnippet/csharp/t-system.security.crypto_0_2.cs)]\\n [!code-vb[System.Security.Cryptography.AsymmetricAlgorithm#3](~/add/codesnippet/visualbasic/t-system.security.crypto_0_2.vb)]\\n [!code-cpp[System.Security.Cryptography.AsymmetricAlgorithm#3](~/add/codesnippet/cpp/t-system.security.crypto_0_2.cpp)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public abstract class AsymmetricAlgorithm : IDisposable\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  langs:\n  - csharp\n  name: AsymmetricAlgorithm()\n  nameWithType: AsymmetricAlgorithm.AsymmetricAlgorithm()\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.AsymmetricAlgorithm()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\"></xref> class.\n  remarks: You cannot create an instance of an abstract class. Application code creates a new instance of a derived class. The <xref:System.Security.Cryptography.RSACryptoServiceProvider> and <xref:System.Security.Cryptography.DSACryptoServiceProvider> classes are the only currently supported implementations.\n  syntax:\n    content: protected AsymmetricAlgorithm ();\n    parameters: []\n  overload: System.Security.Cryptography.AsymmetricAlgorithm.#ctor*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: The implementation of the derived class is not valid.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.Clear\n  id: Clear\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  langs:\n  - csharp\n  name: Clear()\n  nameWithType: AsymmetricAlgorithm.Clear()\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Clear()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Releases all resources used by the <xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\"></xref> class.\n  remarks: \"This method is a simple call to the <xref:System.IDisposable.Dispose%2A?displayProperty=fullName> method.  \\n  \\n Calling `Dispose` allows the resources used by the <xref:System.Security.Cryptography.AsymmetricAlgorithm> class to be reallocated for other purposes. For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"The following code example demonstrates how to call the Clear method to release the resources of the current `customCrypto` object. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.AsymmetricAlgorithm> class.  \\n  \\n [!code-cs[System.Security.Cryptography.AsymmetricAlgorithm#1](~/add/codesnippet/csharp/m-system.security.crypto_101_1.cs)]\\n [!code-vb[System.Security.Cryptography.AsymmetricAlgorithm#1](~/add/codesnippet/visualbasic/m-system.security.crypto_101_1.vb)]\\n [!code-cpp[System.Security.Cryptography.AsymmetricAlgorithm#1](~/add/codesnippet/cpp/m-system.security.crypto_101_1.cpp)]\"\n  syntax:\n    content: public void Clear ();\n    parameters: []\n  overload: System.Security.Cryptography.AsymmetricAlgorithm.Clear*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.Create\n  id: Create\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  langs:\n  - csharp\n  name: Create()\n  nameWithType: AsymmetricAlgorithm.Create()\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Create()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Creates a default cryptographic object used to perform the asymmetric algorithm.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates how to implement the Create method in an extended class. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.AsymmetricAlgorithm> class.  \\n  \\n [!code-cs[System.Security.Cryptography.AsymmetricAlgorithm#11](~/add/codesnippet/csharp/m-system.security.crypto_87_1.cs)]\\n [!code-cpp[System.Security.Cryptography.AsymmetricAlgorithm#11](~/add/codesnippet/cpp/m-system.security.crypto_87_1.cpp)]\\n [!code-vb[System.Security.Cryptography.AsymmetricAlgorithm#11](~/add/codesnippet/visualbasic/m-system.security.crypto_87_1.vb)]\"\n  syntax:\n    content: public static System.Security.Cryptography.AsymmetricAlgorithm Create ();\n    parameters: []\n    return:\n      type: System.Security.Cryptography.AsymmetricAlgorithm\n      description: A new <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\"></xref> instance, unless the default settings have been changed with the [&lt;cryptoClass&gt; element](../Topic/%3CcryptoClass%3E%20Element.md).\n  overload: System.Security.Cryptography.AsymmetricAlgorithm.Create*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.Create(System.String)\n  id: Create(System.String)\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  langs:\n  - csharp\n  name: Create(String)\n  nameWithType: AsymmetricAlgorithm.Create(String)\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Create(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Creates an instance of the specified implementation of an asymmetric algorithm.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates how to implement the Create method in an extended class. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.AsymmetricAlgorithm> class.  \\n  \\n [!code-cs[System.Security.Cryptography.AsymmetricAlgorithm#12](~/add/codesnippet/csharp/m-system.security.crypto_118_1.cs)]\\n [!code-cpp[System.Security.Cryptography.AsymmetricAlgorithm#12](~/add/codesnippet/cpp/m-system.security.crypto_118_1.cpp)]\\n [!code-vb[System.Security.Cryptography.AsymmetricAlgorithm#12](~/add/codesnippet/visualbasic/m-system.security.crypto_118_1.vb)]\"\n  syntax:\n    content: public static System.Security.Cryptography.AsymmetricAlgorithm Create (string algName);\n    parameters:\n    - id: algName\n      type: System.String\n      description: \"The asymmetric algorithm implementation to use. The following table shows the valid values for the `algName` parameter and the algorithms they map to.  \\n  \\n <table><thead><tr><th> Parameter value  \\n  \\n </th><th> Implements  \\n  \\n </th></tr></thead><tbody><tr><td> System.Security.Cryptography.AsymmetricAlgorithm  \\n  \\n </td><td><xref href=\\\"System.Security.Cryptography.AsymmetricAlgorithm\\\"></xref></td></tr><tr><td> RSA  \\n  \\n </td><td><xref href=\\\"System.Security.Cryptography.RSA\\\"></xref></td></tr><tr><td> System.Security.Cryptography.RSA  \\n  \\n </td><td><xref href=\\\"System.Security.Cryptography.RSA\\\"></xref></td></tr><tr><td> DSA  \\n  \\n </td><td><xref href=\\\"System.Security.Cryptography.DSA\\\"></xref></td></tr><tr><td> System.Security.Cryptography.DSA  \\n  \\n </td><td><xref href=\\\"System.Security.Cryptography.DSA\\\"></xref></td></tr><tr><td> ECDsa  \\n  \\n </td><td><xref href=\\\"System.Security.Cryptography.ECDsa\\\"></xref></td></tr><tr><td> ECDsaCng  \\n  \\n </td><td><xref href=\\\"System.Security.Cryptography.ECDsaCng\\\"></xref></td></tr><tr><td> System.Security.Cryptography.ECDsaCng  \\n  \\n </td><td><xref href=\\\"System.Security.Cryptography.ECDsaCng\\\"></xref></td></tr><tr><td> ECDH  \\n  \\n </td><td><xref href=\\\"System.Security.Cryptography.ECDiffieHellman\\\"></xref></td></tr><tr><td> ECDiffieHellman  \\n  \\n </td><td><xref href=\\\"System.Security.Cryptography.ECDiffieHellman\\\"></xref></td></tr><tr><td> ECDiffieHellmanCng  \\n  \\n </td><td><xref href=\\\"System.Security.Cryptography.ECDiffieHellmanCng\\\"></xref></td></tr><tr><td> System.Security.Cryptography.ECDiffieHellmanCng  \\n  \\n </td><td><xref href=\\\"System.Security.Cryptography.ECDiffieHellmanCng\\\"></xref></td></tr></tbody></table>\"\n    return:\n      type: System.Security.Cryptography.AsymmetricAlgorithm\n      description: A new instance of the specified asymmetric algorithm implementation.\n  overload: System.Security.Cryptography.AsymmetricAlgorithm.Create*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n  id: Dispose\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: AsymmetricAlgorithm.Dispose()\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Dispose()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Releases all resources used by the current instance of the <xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\"></xref> class.\n  remarks: \"Call `Dispose` when you are finished using the <xref:System.Security.Cryptography.AsymmetricAlgorithm>. The `Dispose` method leaves the <xref:System.Security.Cryptography.AsymmetricAlgorithm> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.Security.Cryptography.AsymmetricAlgorithm> so the garbage collector can reclaim the memory that the <xref:System.Security.Cryptography.AsymmetricAlgorithm> was occupying.  \\n  \\n For more information, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md) and [Implementing a Dispose Method](~/add/includes/ajax-current-ext-md.md).  \\n  \\n> [!NOTE]\\n>  Always call `Dispose` before you release your last reference to the <xref:System.Security.Cryptography.AsymmetricAlgorithm>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Security.Cryptography.AsymmetricAlgorithm> object's `Finalize` method.\"\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.Security.Cryptography.AsymmetricAlgorithm.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: AsymmetricAlgorithm.Dispose(Boolean)\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Releases the unmanaged resources used by the <xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\"></xref> class and optionally releases the managed resources.\n  remarks: \"This method is called by the public `Dispose()` method and the `Finalize` method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. `Finalize` invokes `Dispose` with `disposing` set to `false`.  \\n  \\n When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.Cryptography.AsymmetricAlgorithm> references. This method invokes the `Dispose()` method of each referenced object.\"\n  syntax:\n    content: protected virtual void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only unmanaged resources.\n  overload: System.Security.Cryptography.AsymmetricAlgorithm.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString(System.String)\n  id: FromXmlString(System.String)\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  langs:\n  - csharp\n  name: FromXmlString(String)\n  nameWithType: AsymmetricAlgorithm.FromXmlString(String)\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: When overridden in a derived class, reconstructs an <xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\"></xref> object from an XML string. Otherwise, throws a <xref:System.NotImplementedException>.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates how to implement the FromXmlString method to parse the specified XML string to populate the current <xref:System.Security.Cryptography.CspParameters> object. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.AsymmetricAlgorithm> class.  \\n  \\n [!code-cs[System.Security.Cryptography.AsymmetricAlgorithm#4](~/add/codesnippet/csharp/m-system.security.crypto_86_1.cs)]\\n [!code-cpp[System.Security.Cryptography.AsymmetricAlgorithm#4](~/add/codesnippet/cpp/m-system.security.crypto_86_1.cpp)]\\n [!code-vb[System.Security.Cryptography.AsymmetricAlgorithm#4](~/add/codesnippet/visualbasic/m-system.security.crypto_86_1.vb)]\"\n  syntax:\n    content: public virtual void FromXmlString (string xmlString);\n    parameters:\n    - id: xmlString\n      type: System.String\n      description: The XML string to use to reconstruct the <xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\"></xref> object.\n  overload: System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm\n  id: KeyExchangeAlgorithm\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  langs:\n  - csharp\n  name: KeyExchangeAlgorithm\n  nameWithType: AsymmetricAlgorithm.KeyExchangeAlgorithm\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: When overridden in a derived class, gets the name of the key exchange algorithm. Otherwise, throws an <xref:System.NotImplementedException>.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates how to override the KeyExchangeAlgorithm property to return the name for the key exchange algorithm. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.AsymmetricAlgorithm> class.  \\n  \\n [!code-cs[System.Security.Cryptography.AsymmetricAlgorithm#6](~/add/codesnippet/csharp/p-system.security.crypto_83_1.cs)]\\n [!code-cpp[System.Security.Cryptography.AsymmetricAlgorithm#6](~/add/codesnippet/cpp/p-system.security.crypto_83_1.cpp)]\\n [!code-vb[System.Security.Cryptography.AsymmetricAlgorithm#6](~/add/codesnippet/visualbasic/p-system.security.crypto_83_1.vb)]\"\n  syntax:\n    content: public virtual string KeyExchangeAlgorithm { get; }\n    return:\n      type: System.String\n      description: The name of the key exchange algorithm.\n  overload: System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeySize\n  id: KeySize\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  langs:\n  - csharp\n  name: KeySize\n  nameWithType: AsymmetricAlgorithm.KeySize\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.KeySize\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Gets or sets the size, in bits, of the key modulus used by the asymmetric algorithm.\n  remarks: The valid key sizes are specified by the particular implementation of the asymmetric algorithm and are listed in the <xref:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes%2A> property.\n  example:\n  - \"The following code example demonstrates how to override the KeySize property to verify that it falls within the range identified in the local `keySizes` member variable. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.AsymmetricAlgorithm> class.  \\n  \\n [!code-cs[System.Security.Cryptography.AsymmetricAlgorithm#9](~/add/codesnippet/csharp/p-system.security.crypto_112_1.cs)]\\n [!code-cpp[System.Security.Cryptography.AsymmetricAlgorithm#9](~/add/codesnippet/cpp/p-system.security.crypto_112_1.cpp)]\\n [!code-vb[System.Security.Cryptography.AsymmetricAlgorithm#9](~/add/codesnippet/visualbasic/p-system.security.crypto_112_1.vb)]\"\n  syntax:\n    content: public virtual int KeySize { get; set; }\n    return:\n      type: System.Int32\n      description: The size, in bits, of the key modulus used by the asymmetric algorithm.\n  overload: System.Security.Cryptography.AsymmetricAlgorithm.KeySize*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: The key modulus size is invalid.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue\n  id: KeySizeValue\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  langs:\n  - csharp\n  name: KeySizeValue\n  nameWithType: AsymmetricAlgorithm.KeySizeValue\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue\n  type: Field\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Represents the size, in bits, of the key modulus used by the asymmetric algorithm.\n  remarks: \"The valid key sizes are specified by the particular implementation of the asymmetric algorithm and are listed in the <xref:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes%2A> property.  \\n  \\n This field is accessed through the <xref:System.Security.Cryptography.AsymmetricAlgorithm.KeySize%2A> property.\"\n  syntax:\n    content: protected int KeySizeValue;\n    return:\n      type: System.Int32\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes\n  id: LegalKeySizes\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  langs:\n  - csharp\n  name: LegalKeySizes\n  nameWithType: AsymmetricAlgorithm.LegalKeySizes\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Gets the key sizes that are supported by the asymmetric algorithm.\n  remarks: The asymmetric algorithm supports only key sizes that match an entry in this array.\n  example:\n  - \"The following code example demonstrates how to call the LegalKeySizes property to retrieve the <xref:System.Security.Cryptography.KeySizes.MinSize%2A>, <xref:System.Security.Cryptography.KeySizes.MaxSize%2A>, and <xref:System.Security.Cryptography.KeySizes.SkipSize%2A> properties. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.AsymmetricAlgorithm> class.  \\n  \\n [!code-cs[System.Security.Cryptography.AsymmetricAlgorithm#10](~/add/codesnippet/csharp/p-system.security.crypto_30_1.cs)]\\n [!code-vb[System.Security.Cryptography.AsymmetricAlgorithm#10](~/add/codesnippet/visualbasic/p-system.security.crypto_30_1.vb)]\\n [!code-cpp[System.Security.Cryptography.AsymmetricAlgorithm#10](~/add/codesnippet/cpp/p-system.security.crypto_30_1.cpp)]\"\n  syntax:\n    content: public virtual System.Security.Cryptography.KeySizes[] LegalKeySizes { get; }\n    return:\n      type: System.Security.Cryptography.KeySizes[]\n      description: An array that contains the key sizes supported by the asymmetric algorithm.\n  overload: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue\n  id: LegalKeySizesValue\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  langs:\n  - csharp\n  name: LegalKeySizesValue\n  nameWithType: AsymmetricAlgorithm.LegalKeySizesValue\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue\n  type: Field\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Specifies the key sizes that are supported by the asymmetric algorithm.\n  remarks: \"The asymmetric algorithm supports only key sizes that match an entry in this array.  \\n  \\n This field is accessed through the <xref:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes%2A> property.\"\n  syntax:\n    content: protected System.Security.Cryptography.KeySizes[] LegalKeySizesValue;\n    return:\n      type: System.Security.Cryptography.KeySizes[]\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm\n  id: SignatureAlgorithm\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  langs:\n  - csharp\n  name: SignatureAlgorithm\n  nameWithType: AsymmetricAlgorithm.SignatureAlgorithm\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: When implemented in a derived class, gets the name of the signature algorithm. Otherwise, always throws a <xref:System.NotImplementedException>.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates how to override the SignatureAlgorithm property to return the name of the signature algorithm. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.AsymmetricAlgorithm> class.  \\n  \\n [!code-cs[System.Security.Cryptography.AsymmetricAlgorithm#7](~/add/codesnippet/csharp/p-system.security.crypto_43_1.cs)]\\n [!code-cpp[System.Security.Cryptography.AsymmetricAlgorithm#7](~/add/codesnippet/cpp/p-system.security.crypto_43_1.cpp)]\\n [!code-vb[System.Security.Cryptography.AsymmetricAlgorithm#7](~/add/codesnippet/visualbasic/p-system.security.crypto_43_1.vb)]\"\n  syntax:\n    content: public virtual string SignatureAlgorithm { get; }\n    return:\n      type: System.String\n      description: The name of the signature algorithm.\n  overload: System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString(System.Boolean)\n  id: ToXmlString(System.Boolean)\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  langs:\n  - csharp\n  name: ToXmlString(Boolean)\n  nameWithType: AsymmetricAlgorithm.ToXmlString(Boolean)\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: When overridden in a derived class, creates and returns an XML string representation of the current <xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\"></xref> object. Otherwise, throws a <xref:System.NotImplementedException>.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates how to call the ToXmlString method to create an XML representation of the parameters in the current <xref:System.Security.Cryptography.AsymmetricAlgorithm> object. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.AsymmetricAlgorithm> class.  \\n  \\n [!code-cs[System.Security.Cryptography.AsymmetricAlgorithm#5](~/add/codesnippet/csharp/m-system.security.crypto_109_1.cs)]\\n [!code-cpp[System.Security.Cryptography.AsymmetricAlgorithm#5](~/add/codesnippet/cpp/m-system.security.crypto_109_1.cpp)]\\n [!code-vb[System.Security.Cryptography.AsymmetricAlgorithm#5](~/add/codesnippet/visualbasic/m-system.security.crypto_109_1.vb)]\"\n  syntax:\n    content: public virtual string ToXmlString (bool includePrivateParameters);\n    parameters:\n    - id: includePrivateParameters\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to include private parameters; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n    return:\n      type: System.String\n      description: An XML string encoding of the current <xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\"></xref> object.\n  overload: System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Security.Cryptography.CryptographicException\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CryptographicException\n  nameWithType: CryptographicException\n  fullName: System.Security.Cryptography.CryptographicException\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.#ctor\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: AsymmetricAlgorithm()\n  nameWithType: AsymmetricAlgorithm.AsymmetricAlgorithm()\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.AsymmetricAlgorithm()\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.Clear\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: Clear()\n  nameWithType: AsymmetricAlgorithm.Clear()\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Clear()\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.Create\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: Create()\n  nameWithType: AsymmetricAlgorithm.Create()\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Create()\n- uid: System.Security.Cryptography.AsymmetricAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: AsymmetricAlgorithm\n  nameWithType: AsymmetricAlgorithm\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.Create(System.String)\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: Create(String)\n  nameWithType: AsymmetricAlgorithm.Create(String)\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Create(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: Dispose()\n  nameWithType: AsymmetricAlgorithm.Dispose()\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Dispose()\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: AsymmetricAlgorithm.Dispose(Boolean)\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString(System.String)\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: FromXmlString(String)\n  nameWithType: AsymmetricAlgorithm.FromXmlString(String)\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString(String)\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: KeyExchangeAlgorithm\n  nameWithType: AsymmetricAlgorithm.KeyExchangeAlgorithm\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeySize\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: KeySize\n  nameWithType: AsymmetricAlgorithm.KeySize\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.KeySize\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: KeySizeValue\n  nameWithType: AsymmetricAlgorithm.KeySizeValue\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: LegalKeySizes\n  nameWithType: AsymmetricAlgorithm.LegalKeySizes\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes\n- uid: System.Security.Cryptography.KeySizes[]\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: KeySizes\n  nameWithType: KeySizes\n  fullName: System.Security.Cryptography.KeySizes[]\n  spec.csharp:\n  - uid: System.Security.Cryptography.KeySizes\n    name: KeySizes\n    nameWithType: KeySizes\n    fullName: KeySizes[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: LegalKeySizesValue\n  nameWithType: AsymmetricAlgorithm.LegalKeySizesValue\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: SignatureAlgorithm\n  nameWithType: AsymmetricAlgorithm.SignatureAlgorithm\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString(System.Boolean)\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: ToXmlString(Boolean)\n  nameWithType: AsymmetricAlgorithm.ToXmlString(Boolean)\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString(Boolean)\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.#ctor*\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: AsymmetricAlgorithm\n  nameWithType: AsymmetricAlgorithm.AsymmetricAlgorithm\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.Clear*\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: Clear\n  nameWithType: AsymmetricAlgorithm.Clear\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.Create*\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: Create\n  nameWithType: AsymmetricAlgorithm.Create\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose*\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: Dispose\n  nameWithType: AsymmetricAlgorithm.Dispose\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString*\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: FromXmlString\n  nameWithType: AsymmetricAlgorithm.FromXmlString\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm*\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: KeyExchangeAlgorithm\n  nameWithType: AsymmetricAlgorithm.KeyExchangeAlgorithm\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeySize*\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: KeySize\n  nameWithType: AsymmetricAlgorithm.KeySize\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes*\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: LegalKeySizes\n  nameWithType: AsymmetricAlgorithm.LegalKeySizes\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm*\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: SignatureAlgorithm\n  nameWithType: AsymmetricAlgorithm.SignatureAlgorithm\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString*\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: ToXmlString\n  nameWithType: AsymmetricAlgorithm.ToXmlString\n"}