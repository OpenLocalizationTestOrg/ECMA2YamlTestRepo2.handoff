{"nodes":[{"pos":[945,1058],"content":"Binds a <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.RoutedCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to the event handlers that implement the command.","needQuote":true,"needEscape":true,"source":"Binds a <xref href=\"System.Windows.Input.RoutedCommand\"></xref> to the event handlers that implement the command."},{"pos":[1071,2824],"content":"A CommandBinding associates a command with the <xref:System.Windows.Input.CommandBinding.PreviewExecuted>/<xref:System.Windows.Input.CommandBinding.Executed> and <xref:System.Windows.Input.CommandBinding.PreviewCanExecute>/<xref:System.Windows.Input.CommandBinding.CanExecute> events which implement and determine the status of the command.       When the <xref:System.Windows.Input.RoutedCommand.Execute%2A> or <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method of a <xref:System.Windows.Input.RoutedCommand> is called, the <xref:System.Windows.Input.CommandBinding.PreviewExecuted>/<xref:System.Windows.Input.CommandBinding.Executed> or the <xref:System.Windows.Input.CommandBinding.PreviewCanExecute>/<xref:System.Windows.Input.CommandBinding.CanExecute> events are raised on the command target.  If the command target has a CommandBinding for the command, the appropriate handlers are called.  If the command target does not have a CommandBinding for the command, the events are routed through the element tree until an element that has a CommandBinding is found.       A CommandBinding has limited use with an <xref:System.Windows.Input.ICommand> that is not a<xref:System.Windows.Input.RoutedCommand>.  This is because a CommandBinding binds the command to the <xref:System.Windows.Input.ExecutedRoutedEventHandler> and the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> which listen to the <xref:System.Windows.Input.CommandManager.Executed> and <xref:System.Windows.Input.CommandManager.CanExecute> routed events which are raised when the <xref:System.Windows.Input.RoutedCommand.Execute%2A> and <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method of the <xref:System.Windows.Input.RoutedCommand> are called.","needQuote":false,"needEscape":true,"nodes":[{"content":"A CommandBinding associates a command with the <xref:System.Windows.Input.CommandBinding.PreviewExecuted>/<xref:System.Windows.Input.CommandBinding.Executed> and <xref:System.Windows.Input.CommandBinding.PreviewCanExecute>/<xref:System.Windows.Input.CommandBinding.CanExecute> events which implement and determine the status of the command.       When the <xref:System.Windows.Input.RoutedCommand.Execute%2A> or <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method of a <xref:System.Windows.Input.RoutedCommand> is called, the <xref:System.Windows.Input.CommandBinding.PreviewExecuted>/<xref:System.Windows.Input.CommandBinding.Executed> or the <xref:System.Windows.Input.CommandBinding.PreviewCanExecute>/<xref:System.Windows.Input.CommandBinding.CanExecute> events are raised on the command target.  If the command target has a CommandBinding for the command, the appropriate handlers are called.  If the command target does not have a CommandBinding for the command, the events are routed through the element tree until an element that has a CommandBinding is found.       A CommandBinding has limited use with an <xref:System.Windows.Input.ICommand> that is not a<xref:System.Windows.Input.RoutedCommand>.  This is because a CommandBinding binds the command to the <xref:System.Windows.Input.ExecutedRoutedEventHandler> and the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> which listen to the <xref:System.Windows.Input.CommandManager.Executed> and <xref:System.Windows.Input.CommandManager.CanExecute> routed events which are raised when the <xref:System.Windows.Input.RoutedCommand.Execute%2A> and <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method of the <xref:System.Windows.Input.RoutedCommand> are called.","pos":[0,1749],"nodes":[{"content":"A CommandBinding associates a command with the &lt;xref:System.Windows.Input.CommandBinding.PreviewExecuted&gt;/&lt;xref:System.Windows.Input.CommandBinding.Executed&gt; and &lt;xref:System.Windows.Input.CommandBinding.PreviewCanExecute&gt;/&lt;xref:System.Windows.Input.CommandBinding.CanExecute&gt; events which implement and determine the status of the command.","pos":[0,340],"source":"A CommandBinding associates a command with the <xref:System.Windows.Input.CommandBinding.PreviewExecuted>/<xref:System.Windows.Input.CommandBinding.Executed> and <xref:System.Windows.Input.CommandBinding.PreviewCanExecute>/<xref:System.Windows.Input.CommandBinding.CanExecute> events which implement and determine the status of the command."},{"content":"When the &lt;xref:System.Windows.Input.RoutedCommand.Execute%2A&gt; or &lt;xref:System.Windows.Input.RoutedCommand.CanExecute%2A&gt; method of a &lt;xref:System.Windows.Input.RoutedCommand&gt; is called, the &lt;xref:System.Windows.Input.CommandBinding.PreviewExecuted&gt;/&lt;xref:System.Windows.Input.CommandBinding.Executed&gt; or the &lt;xref:System.Windows.Input.CommandBinding.PreviewCanExecute&gt;/&lt;xref:System.Windows.Input.CommandBinding.CanExecute&gt; events are raised on the command target.","pos":[347,810],"source":"       When the <xref:System.Windows.Input.RoutedCommand.Execute%2A> or <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method of a <xref:System.Windows.Input.RoutedCommand> is called, the <xref:System.Windows.Input.CommandBinding.PreviewExecuted>/<xref:System.Windows.Input.CommandBinding.Executed> or the <xref:System.Windows.Input.CommandBinding.PreviewCanExecute>/<xref:System.Windows.Input.CommandBinding.CanExecute> events are raised on the command target."},{"content":"If the command target has a CommandBinding for the command, the appropriate handlers are called.","pos":[812,908]},{"content":"If the command target does not have a CommandBinding for the command, the events are routed through the element tree until an element that has a CommandBinding is found.","pos":[910,1079]},{"content":"A CommandBinding has limited use with an &lt;xref:System.Windows.Input.ICommand&gt; that is not a&lt;xref:System.Windows.Input.RoutedCommand&gt;.","pos":[1086,1219],"source":"       A CommandBinding has limited use with an <xref:System.Windows.Input.ICommand> that is not a<xref:System.Windows.Input.RoutedCommand>."},{"content":"This is because a CommandBinding binds the command to the &lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt; and the &lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt; which listen to the &lt;xref:System.Windows.Input.CommandManager.Executed&gt; and &lt;xref:System.Windows.Input.CommandManager.CanExecute&gt; routed events which are raised when the &lt;xref:System.Windows.Input.RoutedCommand.Execute%2A&gt; and &lt;xref:System.Windows.Input.RoutedCommand.CanExecute%2A&gt; method of the &lt;xref:System.Windows.Input.RoutedCommand&gt; are called.","pos":[1221,1749],"source":"  This is because a CommandBinding binds the command to the <xref:System.Windows.Input.ExecutedRoutedEventHandler> and the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> which listen to the <xref:System.Windows.Input.CommandManager.Executed> and <xref:System.Windows.Input.CommandManager.CanExecute> routed events which are raised when the <xref:System.Windows.Input.RoutedCommand.Execute%2A> and <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method of the <xref:System.Windows.Input.RoutedCommand> are called."}]}]},{"pos":[3340,3437],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.CommandBinding\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Windows.Input.CommandBinding\"></xref> class."},{"pos":[4054,4211],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.CommandBinding\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class by using the specified &lt;xref:System.Windows.Input.ICommand&gt;.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Windows.Input.CommandBinding\"></xref> class by using the specified <xref:System.Windows.Input.ICommand>."},{"pos":[4393,4480],"content":"The command to base the new <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.RoutedCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> on.","needQuote":true,"needEscape":true,"source":"The command to base the new <xref href=\"System.Windows.Input.RoutedCommand\"></xref> on."},{"pos":[5206,5461],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.CommandBinding\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class by using the specified &lt;xref:System.Windows.Input.ICommand&gt; and the specified <bpt id=\"p2\">&lt;xref href=\"System.Windows.Input.CommandBinding.Executed\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> event handler.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Windows.Input.CommandBinding\"></xref> class by using the specified <xref:System.Windows.Input.ICommand> and the specified <xref href=\"System.Windows.Input.CommandBinding.Executed\"></xref> event handler."},{"pos":[5701,5788],"content":"The command to base the new <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.RoutedCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> on.","needQuote":true,"needEscape":true,"source":"The command to base the new <xref href=\"System.Windows.Input.RoutedCommand\"></xref> on."},{"pos":[5887,6046],"content":"The handler for the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.CommandBinding.Executed\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event on the new <bpt id=\"p2\">&lt;xref href=\"System.Windows.Input.RoutedCommand\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The handler for the <xref href=\"System.Windows.Input.CommandBinding.Executed\"></xref> event on the new <xref href=\"System.Windows.Input.RoutedCommand\"></xref>."},{"pos":[6959,7287],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.CommandBinding\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class by using the specified &lt;xref:System.Windows.Input.ICommand&gt; and the specified <bpt id=\"p2\">&lt;xref href=\"System.Windows.Input.CommandBinding.Executed\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> and <bpt id=\"p3\">&lt;xref href=\"System.Windows.Input.CommandBinding.CanExecute\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> event handlers.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Windows.Input.CommandBinding\"></xref> class by using the specified <xref:System.Windows.Input.ICommand> and the specified <xref href=\"System.Windows.Input.CommandBinding.Executed\"></xref> and <xref href=\"System.Windows.Input.CommandBinding.CanExecute\"></xref> event handlers."},{"pos":[7589,7676],"content":"The command to base the new <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.RoutedCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> on.","needQuote":true,"needEscape":true,"source":"The command to base the new <xref href=\"System.Windows.Input.RoutedCommand\"></xref> on."},{"pos":[7775,7934],"content":"The handler for the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.CommandBinding.Executed\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event on the new <bpt id=\"p2\">&lt;xref href=\"System.Windows.Input.RoutedCommand\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The handler for the <xref href=\"System.Windows.Input.CommandBinding.Executed\"></xref> event on the new <xref href=\"System.Windows.Input.RoutedCommand\"></xref>."},{"pos":[8037,8198],"content":"The handler for the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.CommandBinding.CanExecute\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event on the new <bpt id=\"p2\">&lt;xref href=\"System.Windows.Input.RoutedCommand\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The handler for the <xref href=\"System.Windows.Input.CommandBinding.CanExecute\"></xref> event on the new <xref href=\"System.Windows.Input.RoutedCommand\"></xref>."},{"pos":[8645,8836],"content":"Occurs when the command associated with this <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.CommandBinding\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> initiates a check to determine whether the command can be executed on the command target.","needQuote":true,"needEscape":true,"source":"Occurs when the command associated with this <xref href=\"System.Windows.Input.CommandBinding\"></xref> initiates a check to determine whether the command can be executed on the command target."},{"pos":[8849,9971],"content":"When the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method on a <xref:System.Windows.Input.RoutedCommand> is called, the <xref:System.Windows.Input.CommandBinding.PreviewCanExecute> event is raised on the command target.  If the event is not handled, the CanExecute event is raised.  If the command target has a <xref:System.Windows.Input.CommandBinding> for the command, the CanExecute handler for that <xref:System.Windows.Input.CommandBinding> is called.  If the command target does not have a <xref:System.Windows.Input.CommandBinding> for the command, the CanExecute event bubbles up the element tree searching for an element that has a <xref:System.Windows.Input.CommandBinding> associated with the command.      <a name=\"routedEventInfo_CanExecute\"></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.Input.CommandManager.CanExecuteEvent>|   |Routing strategy|Bubbling|   |Delegate|<xref:System.Windows.Input.CanExecuteRoutedEventHandler>|      -   The corresponding tunneling event is <xref:System.Windows.Input.CommandBinding.PreviewCanExecute>.","needQuote":false,"needEscape":true,"nodes":[{"content":"When the &lt;xref:System.Windows.Input.RoutedCommand.CanExecute%2A&gt; method on a &lt;xref:System.Windows.Input.RoutedCommand&gt; is called, the &lt;xref:System.Windows.Input.CommandBinding.PreviewCanExecute&gt; event is raised on the command target.","pos":[0,233],"source":"When the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method on a <xref:System.Windows.Input.RoutedCommand> is called, the <xref:System.Windows.Input.CommandBinding.PreviewCanExecute> event is raised on the command target."},{"content":"If the event is not handled, the CanExecute event is raised.","pos":[235,295]},{"content":"If the command target has a &lt;xref:System.Windows.Input.CommandBinding&gt; for the command, the CanExecute handler for that &lt;xref:System.Windows.Input.CommandBinding&gt; is called.","pos":[297,470],"source":"  If the command target has a <xref:System.Windows.Input.CommandBinding> for the command, the CanExecute handler for that <xref:System.Windows.Input.CommandBinding> is called."},{"content":"If the command target does not have a &lt;xref:System.Windows.Input.CommandBinding&gt; for the command, the CanExecute event bubbles up the element tree searching for an element that has a &lt;xref:System.Windows.Input.CommandBinding&gt; associated with the command.","pos":[472,726],"source":"  If the command target does not have a <xref:System.Windows.Input.CommandBinding> for the command, the CanExecute event bubbles up the element tree searching for an element that has a <xref:System.Windows.Input.CommandBinding> associated with the command."},{"content":"<bpt id=\"p1\">&lt;a name=\"routedEventInfo_CanExecute\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.Input.CommandManager.CanExecuteEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;|      -   The corresponding tunneling event is &lt;xref:System.Windows.Input.CommandBinding.PreviewCanExecute&gt;.","pos":[732,1109],"source":"<a name=\"routedEventInfo_CanExecute\"></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.Input.CommandManager.CanExecuteEvent>|   |Routing strategy|Bubbling|   |Delegate|<xref:System.Windows.Input.CanExecuteRoutedEventHandler>|      -   The corresponding tunneling event is <xref:System.Windows.Input.CommandBinding.PreviewCanExecute>."}]},{"pos":[11451,11463],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[11843,11975],"content":"Gets or sets the &lt;xref:System.Windows.Input.ICommand&gt; associated with this <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.CommandBinding\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets or sets the <xref:System.Windows.Input.ICommand> associated with this <xref href=\"System.Windows.Input.CommandBinding\"></xref>."},{"pos":[13917,13958],"content":"The command associated with this binding.","needQuote":true,"needEscape":true,"nodes":[{"content":"The command associated with this binding.","pos":[0,41]}]},{"pos":[14397,14508],"content":"Occurs when the command associated with this <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.CommandBinding\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> executes.","needQuote":true,"needEscape":true,"source":"Occurs when the command associated with this <xref href=\"System.Windows.Input.CommandBinding\"></xref> executes."},{"pos":[14521,15746],"content":"When a <xref:System.Windows.Input.RoutedCommand> executes, it raises the <xref:System.Windows.Input.CommandBinding.PreviewExecuted> event on the command target.  If the <xref:System.Windows.Input.CommandBinding.PreviewExecuted> event is not handled, the Executed event is raised on the command target.  If the command target has a <xref:System.Windows.Input.CommandBinding> for the specific command, the Executed handler for that <xref:System.Windows.Input.CommandBinding> is called.  If the command target does not have a <xref:System.Windows.Input.CommandBinding> for that specific command the Executed event bubbles up the element tree searching for an element that has a <xref:System.Windows.Input.CommandBinding> associated with the command.  If a <xref:System.Windows.Input.CommandBinding> is not found, the command is not handled.      <a name=\"routedEventInfo_Executed\"></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.Input.CommandManager.ExecutedEvent>|   |Routing strategy|Bubbling|   |Delegate|<xref:System.Windows.Input.ExecutedRoutedEventHandler>|      -   The corresponding tunneling event is <xref:System.Windows.Input.CommandBinding.PreviewExecuted>.","needQuote":false,"needEscape":true,"nodes":[{"content":"When a &lt;xref:System.Windows.Input.RoutedCommand&gt; executes, it raises the &lt;xref:System.Windows.Input.CommandBinding.PreviewExecuted&gt; event on the command target.","pos":[0,160],"source":"When a <xref:System.Windows.Input.RoutedCommand> executes, it raises the <xref:System.Windows.Input.CommandBinding.PreviewExecuted> event on the command target."},{"content":"If the &lt;xref:System.Windows.Input.CommandBinding.PreviewExecuted&gt; event is not handled, the Executed event is raised on the command target.","pos":[162,301],"source":"  If the <xref:System.Windows.Input.CommandBinding.PreviewExecuted> event is not handled, the Executed event is raised on the command target."},{"content":"If the command target has a &lt;xref:System.Windows.Input.CommandBinding&gt; for the specific command, the Executed handler for that &lt;xref:System.Windows.Input.CommandBinding&gt; is called.","pos":[303,483],"source":"  If the command target has a <xref:System.Windows.Input.CommandBinding> for the specific command, the Executed handler for that <xref:System.Windows.Input.CommandBinding> is called."},{"content":"If the command target does not have a &lt;xref:System.Windows.Input.CommandBinding&gt; for that specific command the Executed event bubbles up the element tree searching for an element that has a &lt;xref:System.Windows.Input.CommandBinding&gt; associated with the command.","pos":[485,746],"source":"  If the command target does not have a <xref:System.Windows.Input.CommandBinding> for that specific command the Executed event bubbles up the element tree searching for an element that has a <xref:System.Windows.Input.CommandBinding> associated with the command."},{"content":"If a &lt;xref:System.Windows.Input.CommandBinding&gt; is not found, the command is not handled.","pos":[748,837],"source":"  If a <xref:System.Windows.Input.CommandBinding> is not found, the command is not handled."},{"content":"<bpt id=\"p1\">&lt;a name=\"routedEventInfo_Executed\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.Input.CommandManager.ExecutedEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;|      -   The corresponding tunneling event is &lt;xref:System.Windows.Input.CommandBinding.PreviewExecuted&gt;.","pos":[843,1212],"source":"<a name=\"routedEventInfo_Executed\"></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.Input.CommandManager.ExecutedEvent>|   |Routing strategy|Bubbling|   |Delegate|<xref:System.Windows.Input.ExecutedRoutedEventHandler>|      -   The corresponding tunneling event is <xref:System.Windows.Input.CommandBinding.PreviewExecuted>."}]},{"pos":[17199,17211],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[17638,17837],"content":"Occurs when the command associated with this <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.CommandBinding\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> initiates a check to determine whether the command can be executed on the current command target.","needQuote":true,"needEscape":true,"source":"Occurs when the command associated with this <xref href=\"System.Windows.Input.CommandBinding\"></xref> initiates a check to determine whether the command can be executed on the current command target."},{"pos":[17850,19068],"content":"When the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method on a <xref:System.Windows.Input.RoutedCommand> is called, the PreviewCanExecute event is raised on the command target if the command target has a <xref:System.Windows.Input.CommandBinding> for the command. Then the <xref:System.Windows.Input.CommandBinding.CanExecute> handler for that <xref:System.Windows.Input.CommandBinding> is called.  If the command target does not have a <xref:System.Windows.Input.CommandBinding> for the command, the <xref:System.Windows.Input.CommandBinding.CanExecute> event bubbles up the element tree searching for an element that has a <xref:System.Windows.Input.CommandBinding> associated with the command.  If the event is not handled, the <xref:System.Windows.Input.CommandBinding.CanExecute> event is raised.      <a name=\"routedEventInfo_PreviewCanExecute\"></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.Input.CommandManager.PreviewCanExecuteEvent>|   |Routing strategy|Tunneling|   |Delegate|<xref:System.Windows.Input.CanExecuteRoutedEventHandler>|      -   The corresponding bubbling event is <xref:System.Windows.Input.CommandBinding.CanExecute>.","needQuote":false,"needEscape":true,"nodes":[{"content":"When the &lt;xref:System.Windows.Input.RoutedCommand.CanExecute%2A&gt; method on a &lt;xref:System.Windows.Input.RoutedCommand&gt; is called, the PreviewCanExecute event is raised on the command target if the command target has a &lt;xref:System.Windows.Input.CommandBinding&gt; for the command.","pos":[0,277],"source":"When the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method on a <xref:System.Windows.Input.RoutedCommand> is called, the PreviewCanExecute event is raised on the command target if the command target has a <xref:System.Windows.Input.CommandBinding> for the command."},{"content":"Then the &lt;xref:System.Windows.Input.CommandBinding.CanExecute&gt; handler for that &lt;xref:System.Windows.Input.CommandBinding&gt; is called.","pos":[278,411],"source":" Then the <xref:System.Windows.Input.CommandBinding.CanExecute> handler for that <xref:System.Windows.Input.CommandBinding> is called."},{"content":"If the command target does not have a &lt;xref:System.Windows.Input.CommandBinding&gt; for the command, the &lt;xref:System.Windows.Input.CommandBinding.CanExecute&gt; event bubbles up the element tree searching for an element that has a &lt;xref:System.Windows.Input.CommandBinding&gt; associated with the command.","pos":[413,710],"source":"  If the command target does not have a <xref:System.Windows.Input.CommandBinding> for the command, the <xref:System.Windows.Input.CommandBinding.CanExecute> event bubbles up the element tree searching for an element that has a <xref:System.Windows.Input.CommandBinding> associated with the command."},{"content":"If the event is not handled, the &lt;xref:System.Windows.Input.CommandBinding.CanExecute&gt; event is raised.","pos":[712,815],"source":"  If the event is not handled, the <xref:System.Windows.Input.CommandBinding.CanExecute> event is raised."},{"content":"<bpt id=\"p1\">&lt;a name=\"routedEventInfo_PreviewCanExecute\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.Input.CommandManager.PreviewCanExecuteEvent&gt;|   |Routing strategy|Tunneling|   |Delegate|&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;|      -   The corresponding bubbling event is &lt;xref:System.Windows.Input.CommandBinding.CanExecute&gt;.","pos":[821,1205],"source":"<a name=\"routedEventInfo_PreviewCanExecute\"></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.Input.CommandManager.PreviewCanExecuteEvent>|   |Routing strategy|Tunneling|   |Delegate|<xref:System.Windows.Input.CanExecuteRoutedEventHandler>|      -   The corresponding bubbling event is <xref:System.Windows.Input.CommandBinding.CanExecute>."}]},{"pos":[19268,19280],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[19697,19808],"content":"Occurs when the command associated with this <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.CommandBinding\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> executes.","needQuote":true,"needEscape":true,"source":"Occurs when the command associated with this <xref href=\"System.Windows.Input.CommandBinding\"></xref> executes."},{"pos":[19821,20903],"content":"When a <xref:System.Windows.Input.RoutedCommand> executes, it raises the PreviewExecuted event on the command target.  If the command target has a <xref:System.Windows.Input.CommandBinding> for the command the PreviewExecuted handler for that <xref:System.Windows.Input.CommandBinding> is called.  If the command target does not have a <xref:System.Windows.Input.CommandBinding> for the command the PreviewExecuted event tunnels down the element tree searching for an element that has a <xref:System.Windows.Input.CommandBinding> associated with the command.  If the preview event is not handled, the <xref:System.Windows.Input.CommandBinding.Executed> event is raised on command target.      <a name=\"routedEventInfo_PreviewExecuted\"></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.Input.CommandManager.PreviewExecutedEvent>|   |Routing strategy|Tunneling|   |Delegate|<xref:System.Windows.Input.ExecutedRoutedEventHandler>|      -   The corresponding bubbling event is <xref:System.Windows.Input.CommandBinding.Executed>.","needQuote":false,"needEscape":true,"nodes":[{"content":"When a &lt;xref:System.Windows.Input.RoutedCommand&gt; executes, it raises the PreviewExecuted event on the command target.","pos":[0,117],"source":"When a <xref:System.Windows.Input.RoutedCommand> executes, it raises the PreviewExecuted event on the command target."},{"content":"If the command target has a &lt;xref:System.Windows.Input.CommandBinding&gt; for the command the PreviewExecuted handler for that &lt;xref:System.Windows.Input.CommandBinding&gt; is called.","pos":[119,296],"source":"  If the command target has a <xref:System.Windows.Input.CommandBinding> for the command the PreviewExecuted handler for that <xref:System.Windows.Input.CommandBinding> is called."},{"content":"If the command target does not have a &lt;xref:System.Windows.Input.CommandBinding&gt; for the command the PreviewExecuted event tunnels down the element tree searching for an element that has a &lt;xref:System.Windows.Input.CommandBinding&gt; associated with the command.","pos":[298,558],"source":"  If the command target does not have a <xref:System.Windows.Input.CommandBinding> for the command the PreviewExecuted event tunnels down the element tree searching for an element that has a <xref:System.Windows.Input.CommandBinding> associated with the command."},{"content":"If the preview event is not handled, the &lt;xref:System.Windows.Input.CommandBinding.Executed&gt; event is raised on command target.","pos":[560,687],"source":"  If the preview event is not handled, the <xref:System.Windows.Input.CommandBinding.Executed> event is raised on command target."},{"content":"<bpt id=\"p1\">&lt;a name=\"routedEventInfo_PreviewExecuted\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.Input.CommandManager.PreviewExecutedEvent&gt;|   |Routing strategy|Tunneling|   |Delegate|&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;|      -   The corresponding bubbling event is &lt;xref:System.Windows.Input.CommandBinding.Executed&gt;.","pos":[693,1069],"source":"<a name=\"routedEventInfo_PreviewExecuted\"></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.Input.CommandManager.PreviewExecutedEvent>|   |Routing strategy|Tunneling|   |Delegate|<xref:System.Windows.Input.ExecutedRoutedEventHandler>|      -   The corresponding bubbling event is <xref:System.Windows.Input.CommandBinding.Executed>."}]},{"pos":[21097,21109],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Input.CommandBinding\n  id: CommandBinding\n  children:\n  - System.Windows.Input.CommandBinding.#ctor\n  - System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand)\n  - System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler)\n  - System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler,System.Windows.Input.CanExecuteRoutedEventHandler)\n  - System.Windows.Input.CommandBinding.CanExecute\n  - System.Windows.Input.CommandBinding.Command\n  - System.Windows.Input.CommandBinding.Executed\n  - System.Windows.Input.CommandBinding.PreviewCanExecute\n  - System.Windows.Input.CommandBinding.PreviewExecuted\n  langs:\n  - csharp\n  name: CommandBinding\n  nameWithType: CommandBinding\n  fullName: System.Windows.Input.CommandBinding\n  type: Class\n  summary: Binds a <xref href=\"System.Windows.Input.RoutedCommand\"></xref> to the event handlers that implement the command.\n  remarks: \"A CommandBinding associates a command with the <xref:System.Windows.Input.CommandBinding.PreviewExecuted>/<xref:System.Windows.Input.CommandBinding.Executed> and <xref:System.Windows.Input.CommandBinding.PreviewCanExecute>/<xref:System.Windows.Input.CommandBinding.CanExecute> events which implement and determine the status of the command.  \\n  \\n When the <xref:System.Windows.Input.RoutedCommand.Execute%2A> or <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method of a <xref:System.Windows.Input.RoutedCommand> is called, the <xref:System.Windows.Input.CommandBinding.PreviewExecuted>/<xref:System.Windows.Input.CommandBinding.Executed> or the <xref:System.Windows.Input.CommandBinding.PreviewCanExecute>/<xref:System.Windows.Input.CommandBinding.CanExecute> events are raised on the command target.  If the command target has a CommandBinding for the command, the appropriate handlers are called.  If the command target does not have a CommandBinding for the command, the events are routed through the element tree until an element that has a CommandBinding is found.  \\n  \\n A CommandBinding has limited use with an <xref:System.Windows.Input.ICommand> that is not a<xref:System.Windows.Input.RoutedCommand>.  This is because a CommandBinding binds the command to the <xref:System.Windows.Input.ExecutedRoutedEventHandler> and the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> which listen to the <xref:System.Windows.Input.CommandManager.Executed> and <xref:System.Windows.Input.CommandManager.CanExecute> routed events which are raised when the <xref:System.Windows.Input.RoutedCommand.Execute%2A> and <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method of the <xref:System.Windows.Input.RoutedCommand> are called.\"\n  syntax:\n    content: public class CommandBinding\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Windows.Input.CommandBinding.#ctor\n  id: '#ctor'\n  parent: System.Windows.Input.CommandBinding\n  langs:\n  - csharp\n  name: CommandBinding()\n  nameWithType: CommandBinding.CommandBinding()\n  fullName: System.Windows.Input.CommandBinding.CommandBinding()\n  type: Constructor\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Input.CommandBinding\"></xref> class.\n  syntax:\n    content: public CommandBinding ();\n    parameters: []\n  overload: System.Windows.Input.CommandBinding.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand)\n  id: '#ctor(System.Windows.Input.ICommand)'\n  parent: System.Windows.Input.CommandBinding\n  langs:\n  - csharp\n  name: CommandBinding(ICommand)\n  nameWithType: CommandBinding.CommandBinding(ICommand)\n  fullName: System.Windows.Input.CommandBinding.CommandBinding(ICommand)\n  type: Constructor\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Input.CommandBinding\"></xref> class by using the specified <xref:System.Windows.Input.ICommand>.\n  syntax:\n    content: public CommandBinding (System.Windows.Input.ICommand command);\n    parameters:\n    - id: command\n      type: System.Windows.Input.ICommand\n      description: The command to base the new <xref href=\"System.Windows.Input.RoutedCommand\"></xref> on.\n  overload: System.Windows.Input.CommandBinding.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler)\n  id: '#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler)'\n  parent: System.Windows.Input.CommandBinding\n  langs:\n  - csharp\n  name: CommandBinding(ICommand,ExecutedRoutedEventHandler)\n  nameWithType: CommandBinding.CommandBinding(ICommand,ExecutedRoutedEventHandler)\n  fullName: System.Windows.Input.CommandBinding.CommandBinding(ICommand,ExecutedRoutedEventHandler)\n  type: Constructor\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Input.CommandBinding\"></xref> class by using the specified <xref:System.Windows.Input.ICommand> and the specified <xref href=\"System.Windows.Input.CommandBinding.Executed\"></xref> event handler.\n  syntax:\n    content: public CommandBinding (System.Windows.Input.ICommand command, System.Windows.Input.ExecutedRoutedEventHandler executed);\n    parameters:\n    - id: command\n      type: System.Windows.Input.ICommand\n      description: The command to base the new <xref href=\"System.Windows.Input.RoutedCommand\"></xref> on.\n    - id: executed\n      type: System.Windows.Input.ExecutedRoutedEventHandler\n      description: The handler for the <xref href=\"System.Windows.Input.CommandBinding.Executed\"></xref> event on the new <xref href=\"System.Windows.Input.RoutedCommand\"></xref>.\n  overload: System.Windows.Input.CommandBinding.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler,System.Windows.Input.CanExecuteRoutedEventHandler)\n  id: '#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler,System.Windows.Input.CanExecuteRoutedEventHandler)'\n  parent: System.Windows.Input.CommandBinding\n  langs:\n  - csharp\n  name: CommandBinding(ICommand,ExecutedRoutedEventHandler,CanExecuteRoutedEventHandler)\n  nameWithType: CommandBinding.CommandBinding(ICommand,ExecutedRoutedEventHandler,CanExecuteRoutedEventHandler)\n  fullName: System.Windows.Input.CommandBinding.CommandBinding(ICommand,ExecutedRoutedEventHandler,CanExecuteRoutedEventHandler)\n  type: Constructor\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Input.CommandBinding\"></xref> class by using the specified <xref:System.Windows.Input.ICommand> and the specified <xref href=\"System.Windows.Input.CommandBinding.Executed\"></xref> and <xref href=\"System.Windows.Input.CommandBinding.CanExecute\"></xref> event handlers.\n  syntax:\n    content: public CommandBinding (System.Windows.Input.ICommand command, System.Windows.Input.ExecutedRoutedEventHandler executed, System.Windows.Input.CanExecuteRoutedEventHandler canExecute);\n    parameters:\n    - id: command\n      type: System.Windows.Input.ICommand\n      description: The command to base the new <xref href=\"System.Windows.Input.RoutedCommand\"></xref> on.\n    - id: executed\n      type: System.Windows.Input.ExecutedRoutedEventHandler\n      description: The handler for the <xref href=\"System.Windows.Input.CommandBinding.Executed\"></xref> event on the new <xref href=\"System.Windows.Input.RoutedCommand\"></xref>.\n    - id: canExecute\n      type: System.Windows.Input.CanExecuteRoutedEventHandler\n      description: The handler for the <xref href=\"System.Windows.Input.CommandBinding.CanExecute\"></xref> event on the new <xref href=\"System.Windows.Input.RoutedCommand\"></xref>.\n  overload: System.Windows.Input.CommandBinding.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.CommandBinding.CanExecute\n  id: CanExecute\n  parent: System.Windows.Input.CommandBinding\n  langs:\n  - csharp\n  name: CanExecute\n  nameWithType: CommandBinding.CanExecute\n  fullName: System.Windows.Input.CommandBinding.CanExecute\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Occurs when the command associated with this <xref href=\"System.Windows.Input.CommandBinding\"></xref> initiates a check to determine whether the command can be executed on the command target.\n  remarks: \"When the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method on a <xref:System.Windows.Input.RoutedCommand> is called, the <xref:System.Windows.Input.CommandBinding.PreviewCanExecute> event is raised on the command target.  If the event is not handled, the CanExecute event is raised.  If the command target has a <xref:System.Windows.Input.CommandBinding> for the command, the CanExecute handler for that <xref:System.Windows.Input.CommandBinding> is called.  If the command target does not have a <xref:System.Windows.Input.CommandBinding> for the command, the CanExecute event bubbles up the element tree searching for an element that has a <xref:System.Windows.Input.CommandBinding> associated with the command.  \\n  \\n<a name=\\\"routedEventInfo_CanExecute\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.Input.CommandManager.CanExecuteEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.Input.CanExecuteRoutedEventHandler>|  \\n  \\n-   The corresponding tunneling event is <xref:System.Windows.Input.CommandBinding.PreviewCanExecute>.\"\n  example:\n  - \"The following example creates a <xref:System.Windows.Input.CommandBinding> that maps an <xref:System.Windows.Input.ExecutedRoutedEventHandler> and a <xref:System.Windows.Input.CanExecuteRoutedEventArgs> handler to the <xref:System.Windows.Input.ApplicationCommands.Open%2A> command.  \\n  \\n [!code-xml[commandwithhandler#CommandHandlerCommandBinding](~/add/codesnippet/xaml/commandWithHandler/Window1.xaml#commandhandlercommandbinding)]  \\n  \\n [!code-cs[CommandHandlerProcedural#CommandHandlerBindingInit](~/add/codesnippet/csharp/CommandHandlerProcedural/Window1.xaml.cs#commandhandlerbindinginit)]\\n [!code-vb[CommandHandlerProcedural#CommandHandlerBindingInit](~/add/codesnippet/visualbasic/commandhandlerprocedural/window1.xaml.vb#commandhandlerbindinginit)]  \\n  \\n The following shows the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> which sets <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> to `true`.  \\n  \\n [!code-cs[commandwithhandler#CommandHandlerCanExecuteHandler](~/add/codesnippet/csharp/commandWithHandler/Window1.xaml.cs#commandhandlercanexecutehandler)]\\n [!code-vb[commandwithhandler#CommandHandlerCanExecuteHandler](~/add/codesnippet/visualbasic/commandWithHandler/Window1.xaml.vb#commandhandlercanexecutehandler)]\"\n  syntax:\n    content: public event System.Windows.Input.CanExecuteRoutedEventHandler CanExecute;\n    return:\n      type: System.Windows.Input.CanExecuteRoutedEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.CommandBinding.Command\n  id: Command\n  parent: System.Windows.Input.CommandBinding\n  langs:\n  - csharp\n  name: Command\n  nameWithType: CommandBinding.Command\n  fullName: System.Windows.Input.CommandBinding.Command\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets or sets the <xref:System.Windows.Input.ICommand> associated with this <xref href=\"System.Windows.Input.CommandBinding\"></xref>.\n  remarks: ''\n  example:\n  - \"The following example creates a <xref:System.Windows.Input.CommandBinding> that maps an <xref:System.Windows.Input.ExecutedRoutedEventHandler> and a <xref:System.Windows.Input.CanExecuteRoutedEventArgs> handler to the <xref:System.Windows.Input.ApplicationCommands.Open%2A> command.  \\n  \\n [!code-xml[commandWithHandler#CommandHandlerCommandBinding](~/add/codesnippet/xaml/commandWithHandler/Window1.xaml#commandhandlercommandbinding)]  \\n  \\n [!code-cs[commandhandlerprocedural#CommandHandlerBindingInit](~/add/codesnippet/csharp/CommandHandlerProcedural/Window1.xaml.cs#commandhandlerbindinginit)]\\n [!code-vb[commandhandlerprocedural#CommandHandlerBindingInit](~/add/codesnippet/visualbasic/commandhandlerprocedural/window1.xaml.vb#commandhandlerbindinginit)]  \\n  \\n The following shows the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> which sets <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> to `true`.  \\n  \\n [!code-cs[commandWithHandler#CommandHandlerCanExecuteHandler](~/add/codesnippet/csharp/commandWithHandler/Window1.xaml.cs#commandhandlercanexecutehandler)]\\n [!code-vb[commandWithHandler#CommandHandlerCanExecuteHandler](~/add/codesnippet/visualbasic/commandWithHandler/Window1.xaml.vb#commandhandlercanexecutehandler)]  \\n  \\n The following shows the <xref:System.Windows.Input.ExecutedRoutedEventHandler> which creates a <xref:System.Windows.MessageBox> when the command is executed.  \\n  \\n [!code-cs[commandWithHandler#CommandHandlerExecutedHandler](~/add/codesnippet/csharp/commandWithHandler/Window1.xaml.cs#commandhandlerexecutedhandler)]\\n [!code-vb[commandWithHandler#CommandHandlerExecutedHandler](~/add/codesnippet/visualbasic/commandWithHandler/Window1.xaml.vb#commandhandlerexecutedhandler)]\"\n  syntax:\n    content: public System.Windows.Input.ICommand Command { get; set; }\n    return:\n      type: System.Windows.Input.ICommand\n      description: The command associated with this binding.\n  overload: System.Windows.Input.CommandBinding.Command*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.CommandBinding.Executed\n  id: Executed\n  parent: System.Windows.Input.CommandBinding\n  langs:\n  - csharp\n  name: Executed\n  nameWithType: CommandBinding.Executed\n  fullName: System.Windows.Input.CommandBinding.Executed\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Occurs when the command associated with this <xref href=\"System.Windows.Input.CommandBinding\"></xref> executes.\n  remarks: \"When a <xref:System.Windows.Input.RoutedCommand> executes, it raises the <xref:System.Windows.Input.CommandBinding.PreviewExecuted> event on the command target.  If the <xref:System.Windows.Input.CommandBinding.PreviewExecuted> event is not handled, the Executed event is raised on the command target.  If the command target has a <xref:System.Windows.Input.CommandBinding> for the specific command, the Executed handler for that <xref:System.Windows.Input.CommandBinding> is called.  If the command target does not have a <xref:System.Windows.Input.CommandBinding> for that specific command the Executed event bubbles up the element tree searching for an element that has a <xref:System.Windows.Input.CommandBinding> associated with the command.  If a <xref:System.Windows.Input.CommandBinding> is not found, the command is not handled.  \\n  \\n<a name=\\\"routedEventInfo_Executed\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.Input.CommandManager.ExecutedEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.Input.ExecutedRoutedEventHandler>|  \\n  \\n-   The corresponding tunneling event is <xref:System.Windows.Input.CommandBinding.PreviewExecuted>.\"\n  example:\n  - \"The following example creates a <xref:System.Windows.Input.CommandBinding> that maps an <xref:System.Windows.Input.ExecutedRoutedEventHandler> and a <xref:System.Windows.Input.CanExecuteRoutedEventArgs> handler to the <xref:System.Windows.Input.ApplicationCommands.Open%2A> command.  \\n  \\n [!code-xml[commandwithhandler#CommandHandlerCommandBinding](~/add/codesnippet/xaml/commandWithHandler/Window1.xaml#commandhandlercommandbinding)]  \\n  \\n [!code-cs[CommandHandlerProcedural#CommandHandlerBindingInit](~/add/codesnippet/csharp/CommandHandlerProcedural/Window1.xaml.cs#commandhandlerbindinginit)]\\n [!code-vb[CommandHandlerProcedural#CommandHandlerBindingInit](~/add/codesnippet/visualbasic/commandhandlerprocedural/window1.xaml.vb#commandhandlerbindinginit)]  \\n  \\n The following shows the <xref:System.Windows.Input.ExecutedRoutedEventHandler> which creates a <xref:System.Windows.MessageBox> when the command is executed.  \\n  \\n [!code-cs[commandWithHandler#CommandHandlerExecutedHandler](~/add/codesnippet/csharp/commandWithHandler/Window1.xaml.cs#commandhandlerexecutedhandler)]\\n [!code-vb[commandWithHandler#CommandHandlerExecutedHandler](~/add/codesnippet/visualbasic/commandWithHandler/Window1.xaml.vb#commandhandlerexecutedhandler)]\"\n  syntax:\n    content: public event System.Windows.Input.ExecutedRoutedEventHandler Executed;\n    return:\n      type: System.Windows.Input.ExecutedRoutedEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.CommandBinding.PreviewCanExecute\n  id: PreviewCanExecute\n  parent: System.Windows.Input.CommandBinding\n  langs:\n  - csharp\n  name: PreviewCanExecute\n  nameWithType: CommandBinding.PreviewCanExecute\n  fullName: System.Windows.Input.CommandBinding.PreviewCanExecute\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Occurs when the command associated with this <xref href=\"System.Windows.Input.CommandBinding\"></xref> initiates a check to determine whether the command can be executed on the current command target.\n  remarks: \"When the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method on a <xref:System.Windows.Input.RoutedCommand> is called, the PreviewCanExecute event is raised on the command target if the command target has a <xref:System.Windows.Input.CommandBinding> for the command. Then the <xref:System.Windows.Input.CommandBinding.CanExecute> handler for that <xref:System.Windows.Input.CommandBinding> is called.  If the command target does not have a <xref:System.Windows.Input.CommandBinding> for the command, the <xref:System.Windows.Input.CommandBinding.CanExecute> event bubbles up the element tree searching for an element that has a <xref:System.Windows.Input.CommandBinding> associated with the command.  If the event is not handled, the <xref:System.Windows.Input.CommandBinding.CanExecute> event is raised.  \\n  \\n<a name=\\\"routedEventInfo_PreviewCanExecute\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.Input.CommandManager.PreviewCanExecuteEvent>|  \\n|Routing strategy|Tunneling|  \\n|Delegate|<xref:System.Windows.Input.CanExecuteRoutedEventHandler>|  \\n  \\n-   The corresponding bubbling event is <xref:System.Windows.Input.CommandBinding.CanExecute>.\"\n  syntax:\n    content: public event System.Windows.Input.CanExecuteRoutedEventHandler PreviewCanExecute;\n    return:\n      type: System.Windows.Input.CanExecuteRoutedEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.CommandBinding.PreviewExecuted\n  id: PreviewExecuted\n  parent: System.Windows.Input.CommandBinding\n  langs:\n  - csharp\n  name: PreviewExecuted\n  nameWithType: CommandBinding.PreviewExecuted\n  fullName: System.Windows.Input.CommandBinding.PreviewExecuted\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Occurs when the command associated with this <xref href=\"System.Windows.Input.CommandBinding\"></xref> executes.\n  remarks: \"When a <xref:System.Windows.Input.RoutedCommand> executes, it raises the PreviewExecuted event on the command target.  If the command target has a <xref:System.Windows.Input.CommandBinding> for the command the PreviewExecuted handler for that <xref:System.Windows.Input.CommandBinding> is called.  If the command target does not have a <xref:System.Windows.Input.CommandBinding> for the command the PreviewExecuted event tunnels down the element tree searching for an element that has a <xref:System.Windows.Input.CommandBinding> associated with the command.  If the preview event is not handled, the <xref:System.Windows.Input.CommandBinding.Executed> event is raised on command target.  \\n  \\n<a name=\\\"routedEventInfo_PreviewExecuted\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.Input.CommandManager.PreviewExecutedEvent>|  \\n|Routing strategy|Tunneling|  \\n|Delegate|<xref:System.Windows.Input.ExecutedRoutedEventHandler>|  \\n  \\n-   The corresponding bubbling event is <xref:System.Windows.Input.CommandBinding.Executed>.\"\n  syntax:\n    content: public event System.Windows.Input.ExecutedRoutedEventHandler PreviewExecuted;\n    return:\n      type: System.Windows.Input.ExecutedRoutedEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Windows.Input.CommandBinding.#ctor\n  parent: System.Windows.Input.CommandBinding\n  isExternal: false\n  name: CommandBinding()\n  nameWithType: CommandBinding.CommandBinding()\n  fullName: System.Windows.Input.CommandBinding.CommandBinding()\n- uid: System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand)\n  parent: System.Windows.Input.CommandBinding\n  isExternal: false\n  name: CommandBinding(ICommand)\n  nameWithType: CommandBinding.CommandBinding(ICommand)\n  fullName: System.Windows.Input.CommandBinding.CommandBinding(ICommand)\n- uid: System.Windows.Input.ICommand\n  parent: System.Windows.Input\n  isExternal: true\n  name: ICommand\n  nameWithType: ICommand\n  fullName: System.Windows.Input.ICommand\n- uid: System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler)\n  parent: System.Windows.Input.CommandBinding\n  isExternal: false\n  name: CommandBinding(ICommand,ExecutedRoutedEventHandler)\n  nameWithType: CommandBinding.CommandBinding(ICommand,ExecutedRoutedEventHandler)\n  fullName: System.Windows.Input.CommandBinding.CommandBinding(ICommand,ExecutedRoutedEventHandler)\n- uid: System.Windows.Input.ExecutedRoutedEventHandler\n  parent: System.Windows.Input\n  isExternal: false\n  name: ExecutedRoutedEventHandler\n  nameWithType: ExecutedRoutedEventHandler\n  fullName: System.Windows.Input.ExecutedRoutedEventHandler\n- uid: System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler,System.Windows.Input.CanExecuteRoutedEventHandler)\n  parent: System.Windows.Input.CommandBinding\n  isExternal: false\n  name: CommandBinding(ICommand,ExecutedRoutedEventHandler,CanExecuteRoutedEventHandler)\n  nameWithType: CommandBinding.CommandBinding(ICommand,ExecutedRoutedEventHandler,CanExecuteRoutedEventHandler)\n  fullName: System.Windows.Input.CommandBinding.CommandBinding(ICommand,ExecutedRoutedEventHandler,CanExecuteRoutedEventHandler)\n- uid: System.Windows.Input.CanExecuteRoutedEventHandler\n  parent: System.Windows.Input\n  isExternal: false\n  name: CanExecuteRoutedEventHandler\n  nameWithType: CanExecuteRoutedEventHandler\n  fullName: System.Windows.Input.CanExecuteRoutedEventHandler\n- uid: System.Windows.Input.CommandBinding.CanExecute\n  parent: System.Windows.Input.CommandBinding\n  isExternal: false\n  name: CanExecute\n  nameWithType: CommandBinding.CanExecute\n  fullName: System.Windows.Input.CommandBinding.CanExecute\n- uid: System.Windows.Input.CommandBinding.Command\n  parent: System.Windows.Input.CommandBinding\n  isExternal: false\n  name: Command\n  nameWithType: CommandBinding.Command\n  fullName: System.Windows.Input.CommandBinding.Command\n- uid: System.Windows.Input.CommandBinding.Executed\n  parent: System.Windows.Input.CommandBinding\n  isExternal: false\n  name: Executed\n  nameWithType: CommandBinding.Executed\n  fullName: System.Windows.Input.CommandBinding.Executed\n- uid: System.Windows.Input.CommandBinding.PreviewCanExecute\n  parent: System.Windows.Input.CommandBinding\n  isExternal: false\n  name: PreviewCanExecute\n  nameWithType: CommandBinding.PreviewCanExecute\n  fullName: System.Windows.Input.CommandBinding.PreviewCanExecute\n- uid: System.Windows.Input.CommandBinding.PreviewExecuted\n  parent: System.Windows.Input.CommandBinding\n  isExternal: false\n  name: PreviewExecuted\n  nameWithType: CommandBinding.PreviewExecuted\n  fullName: System.Windows.Input.CommandBinding.PreviewExecuted\n- uid: System.Windows.Input.CommandBinding.#ctor*\n  parent: System.Windows.Input.CommandBinding\n  isExternal: false\n  name: CommandBinding\n  nameWithType: CommandBinding.CommandBinding\n- uid: System.Windows.Input.CommandBinding.Command*\n  parent: System.Windows.Input.CommandBinding\n  isExternal: false\n  name: Command\n  nameWithType: CommandBinding.Command\n"}