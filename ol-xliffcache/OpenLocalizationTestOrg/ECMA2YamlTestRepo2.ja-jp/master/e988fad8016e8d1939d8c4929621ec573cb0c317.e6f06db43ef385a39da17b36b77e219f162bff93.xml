{"nodes":[{"pos":[1400,1453],"content":"Provides simple domain name resolution functionality.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides simple domain name resolution functionality.","pos":[0,53]}]},{"pos":[1466,1850],"content":"The Dns class is a static class that retrieves information about a specific host from the Internet Domain Name System (DNS).       The host information from the DNS query is returned in an instance of the <xref:System.Net.IPHostEntry> class. If the specified host has more than one entry in the DNS database, <xref:System.Net.IPHostEntry> contains multiple IP addresses and aliases.","needQuote":false,"needEscape":true,"nodes":[{"content":"The Dns class is a static class that retrieves information about a specific host from the Internet Domain Name System (DNS).       The host information from the DNS query is returned in an instance of the <xref:System.Net.IPHostEntry> class. If the specified host has more than one entry in the DNS database, <xref:System.Net.IPHostEntry> contains multiple IP addresses and aliases.","pos":[0,382],"nodes":[{"content":"The Dns class is a static class that retrieves information about a specific host from the Internet Domain Name System (DNS).","pos":[0,124]},{"content":"The host information from the DNS query is returned in an instance of the &lt;xref:System.Net.IPHostEntry&gt; class.","pos":[131,241],"source":"       The host information from the DNS query is returned in an instance of the <xref:System.Net.IPHostEntry> class."},{"content":"If the specified host has more than one entry in the DNS database, &lt;xref:System.Net.IPHostEntry&gt; contains multiple IP addresses and aliases.","pos":[242,382],"source":" If the specified host has more than one entry in the DNS database, <xref:System.Net.IPHostEntry> contains multiple IP addresses and aliases."}]}]},{"pos":[2866,2949],"content":"Asynchronously returns the Internet Protocol (IP) addresses for the specified host.","needQuote":true,"needEscape":true,"nodes":[{"content":"Asynchronously returns the Internet Protocol (IP) addresses for the specified host.","pos":[0,83]}]},{"pos":[2962,4203],"content":"The BeginGetHostAddresses method asynchronously queries a DNS server for the IP addresses that are associated with a host name. If `hostNameOrAddress` is an IP address, this address is returned without querying the DNS server.      > [!NOTE] >  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).       When an empty string is passed as the host name, this method returns the IPv4 addresses of the local host for all operating systems except Windows Server 2003; for Windows Server 2003, both IPv4 and IPv6 addresses for the local host are returned.       The asynchronous BeginGetHostAddresses operation must be completed by calling the <xref:System.Net.Dns.EndGetHostAddresses%2A> method. Typically, the method is invoked by the `requestCallback` delegate.       This method does not block until the operation is complete. To block until the operation is complete, use the <xref:System.Net.Dns.GetHostAddresses%2A> method.       For more information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)","needQuote":false,"needEscape":true,"nodes":[{"content":"The BeginGetHostAddresses method asynchronously queries a DNS server for the IP addresses that are associated with a host name.","pos":[0,127]},{"content":"If <ph id=\"ph1\">`hostNameOrAddress`</ph> is an IP address, this address is returned without querying the DNS server.","pos":[128,226],"source":" If `hostNameOrAddress` is an IP address, this address is returned without querying the DNS server."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  This member emits trace information when you enable network tracing in your application.","pos":[232,333],"source":"      > [!NOTE] >  This member emits trace information when you enable network tracing in your application."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[334,439],"source":" For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md)."},{"content":"When an empty string is passed as the host name, this method returns the IPv4 addresses of the local host for all operating systems except Windows Server 2003; for Windows Server 2003, both IPv4 and IPv6 addresses for the local host are returned.","pos":[446,692]},{"content":"The asynchronous BeginGetHostAddresses operation must be completed by calling the &lt;xref:System.Net.Dns.EndGetHostAddresses%2A&gt; method.","pos":[699,833],"source":"       The asynchronous BeginGetHostAddresses operation must be completed by calling the <xref:System.Net.Dns.EndGetHostAddresses%2A> method."},{"content":"Typically, the method is invoked by the <ph id=\"ph1\">`requestCallback`</ph> delegate.","pos":[834,901],"source":" Typically, the method is invoked by the `requestCallback` delegate."},{"content":"This method does not block until the operation is complete.","pos":[908,967]},{"content":"To block until the operation is complete, use the &lt;xref:System.Net.Dns.GetHostAddresses%2A&gt; method.","pos":[968,1067],"source":" To block until the operation is complete, use the <xref:System.Net.Dns.GetHostAddresses%2A> method."},{"content":"For more information about using the asynchronous programming model, see <bpt id=\"p1\">[</bpt>Calling Synchronous Methods Asynchronously<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>","pos":[1074,1230],"source":"       For more information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)"}]},{"pos":[4439,4478],"content":"The host name or IP address to resolve.","needQuote":true,"needEscape":true,"nodes":[{"content":"The host name or IP address to resolve.","pos":[0,39]}]},{"pos":[4557,4665],"content":"An <xref:System.AsyncCallback> delegate that references the method to invoke when the operation is complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.AsyncCallback&gt; delegate that references the method to invoke when the operation is complete.","pos":[0,108],"source":"An <xref:System.AsyncCallback> delegate that references the method to invoke when the operation is complete."}]},{"pos":[4727,4883],"content":"A user-defined object that contains information about the operation. This object is passed to the `requestCallback` delegate when the operation is complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"A user-defined object that contains information about the operation.","pos":[0,68]},{"content":"This object is passed to the <ph id=\"ph1\">`requestCallback`</ph> delegate when the operation is complete.","pos":[69,156],"source":" This object is passed to the `requestCallback` delegate when the operation is complete."}]},{"pos":[4947,5027],"content":"An <xref:System.IAsyncResult> instance that references the asynchronous request.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.IAsyncResult&gt; instance that references the asynchronous request.","pos":[0,80],"source":"An <xref:System.IAsyncResult> instance that references the asynchronous request."}]},{"pos":[5194,5289],"content":"<ph id=\"ph1\">&lt;code&gt;hostNameOrAddress&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>hostNameOrAddress</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[5404,5480],"content":"The length of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">hostNameOrAddress</ph><ept id=\"p1\">&lt;/code&gt;</ept> is greater than 255 characters.","needQuote":true,"needEscape":true,"source":"The length of <code>hostNameOrAddress</code> is greater than 255 characters."},{"pos":[5595,5665],"content":"An error is encountered when resolving <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">hostNameOrAddress</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An error is encountered when resolving <code>hostNameOrAddress</code>."},{"pos":[5760,5816],"content":"<ph id=\"ph1\">&lt;code&gt;hostNameOrAddress&lt;/code&gt;</ph> is an invalid IP address.","needQuote":true,"needEscape":true,"source":"<code>hostNameOrAddress</code> is an invalid IP address."},{"pos":[6325,6450],"content":"Begins an asynchronous request for <bpt id=\"p1\">&lt;xref href=\"System.Net.IPHostEntry\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> information about the specified DNS host name.","needQuote":true,"needEscape":true,"source":"Begins an asynchronous request for <xref href=\"System.Net.IPHostEntry\"></xref> information about the specified DNS host name."},{"pos":[6463,7210],"content":"The asynchronous BeginGetHostByName operation must be completed by calling the <xref:System.Net.Dns.EndGetHostByName%2A> method. Typically, the method is invoked by the `requestCallback` delegate.       This method does not block until the operation is complete. To block until the operation is complete, use the <xref:System.Net.Dns.GetHostByName%2A> method.       For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] >  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"The asynchronous BeginGetHostByName operation must be completed by calling the &lt;xref:System.Net.Dns.EndGetHostByName%2A&gt; method.","pos":[0,128],"source":"The asynchronous BeginGetHostByName operation must be completed by calling the <xref:System.Net.Dns.EndGetHostByName%2A> method."},{"content":"Typically, the method is invoked by the <ph id=\"ph1\">`requestCallback`</ph> delegate.","pos":[129,196],"source":" Typically, the method is invoked by the `requestCallback` delegate."},{"content":"This method does not block until the operation is complete.","pos":[203,262]},{"content":"To block until the operation is complete, use the &lt;xref:System.Net.Dns.GetHostByName%2A&gt; method.","pos":[263,359],"source":" To block until the operation is complete, use the <xref:System.Net.Dns.GetHostByName%2A> method."},{"content":"For detailed information about using the asynchronous programming model, see <bpt id=\"p1\">[</bpt>Calling Synchronous Methods Asynchronously<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[366,527],"source":"       For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  This member emits trace information when you enable network tracing in your application.","pos":[533,634],"source":"      > [!NOTE] >  This member emits trace information when you enable network tracing in your application."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[635,740],"source":" For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[7431,7456],"content":"The DNS name of the host.","needQuote":true,"needEscape":true,"nodes":[{"content":"The DNS name of the host.","pos":[0,25]}]},{"pos":[7535,7643],"content":"An <xref:System.AsyncCallback> delegate that references the method to invoke when the operation is complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.AsyncCallback&gt; delegate that references the method to invoke when the operation is complete.","pos":[0,108],"source":"An <xref:System.AsyncCallback> delegate that references the method to invoke when the operation is complete."}]},{"pos":[7711,7867],"content":"A user-defined object that contains information about the operation. This object is passed to the `requestCallback` delegate when the operation is complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"A user-defined object that contains information about the operation.","pos":[0,68]},{"content":"This object is passed to the <ph id=\"ph1\">`requestCallback`</ph> delegate when the operation is complete.","pos":[69,156],"source":" This object is passed to the `requestCallback` delegate when the operation is complete."}]},{"pos":[7931,8011],"content":"An <xref:System.IAsyncResult> instance that references the asynchronous request.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.IAsyncResult&gt; instance that references the asynchronous request.","pos":[0,80],"source":"An <xref:System.IAsyncResult> instance that references the asynchronous request."}]},{"pos":[8175,8261],"content":"<ph id=\"ph1\">&lt;code&gt;hostName&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>hostName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[8376,8425],"content":"An error was encountered executing the DNS query.","needQuote":true,"needEscape":true,"nodes":[{"content":"An error was encountered executing the DNS query.","pos":[0,49]}]},{"pos":[8952,9049],"content":"Asynchronously resolves an IP address to an <bpt id=\"p1\">&lt;xref href=\"System.Net.IPHostEntry\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance.","needQuote":true,"needEscape":true,"source":"Asynchronously resolves an IP address to an <xref href=\"System.Net.IPHostEntry\"></xref> instance."},{"pos":[9062,9938],"content":"The BeginGetHostEntry method asynchronously queries a DNS server for the IP addresses and aliases associated with an IP address.       **Note** This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).       The asynchronous BeginGetHostEntry operation must be completed by calling the <xref:System.Net.Dns.EndGetHostEntry%2A> method. Typically, the method is invoked by the `requestCallback` delegate.       This method does not block until the operation is complete. To block until the operation is complete, use the <xref:System.Net.Dns.GetHostEntry%2A> method.       For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)","needQuote":false,"needEscape":true,"nodes":[{"content":"The BeginGetHostEntry method asynchronously queries a DNS server for the IP addresses and aliases associated with an IP address.","pos":[0,128]},{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept> This member emits trace information when you enable network tracing in your application.","pos":[135,232],"source":"**Note** This member emits trace information when you enable network tracing in your application."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[233,338],"source":" For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md)."},{"content":"The asynchronous BeginGetHostEntry operation must be completed by calling the &lt;xref:System.Net.Dns.EndGetHostEntry%2A&gt; method.","pos":[345,471],"source":"       The asynchronous BeginGetHostEntry operation must be completed by calling the <xref:System.Net.Dns.EndGetHostEntry%2A> method."},{"content":"Typically, the method is invoked by the <ph id=\"ph1\">`requestCallback`</ph> delegate.","pos":[472,539],"source":" Typically, the method is invoked by the `requestCallback` delegate."},{"content":"This method does not block until the operation is complete.","pos":[546,605]},{"content":"To block until the operation is complete, use the &lt;xref:System.Net.Dns.GetHostEntry%2A&gt; method.","pos":[606,701],"source":" To block until the operation is complete, use the <xref:System.Net.Dns.GetHostEntry%2A> method."},{"content":"For detailed information about using the asynchronous programming model, see <bpt id=\"p1\">[</bpt>Calling Synchronous Methods Asynchronously<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>","pos":[708,868],"source":"       For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)"}]},{"pos":[10622,10648],"content":"The IP address to resolve.","needQuote":true,"needEscape":true,"nodes":[{"content":"The IP address to resolve.","pos":[0,26]}]},{"pos":[10727,10835],"content":"An <xref:System.AsyncCallback> delegate that references the method to invoke when the operation is complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.AsyncCallback&gt; delegate that references the method to invoke when the operation is complete.","pos":[0,108],"source":"An <xref:System.AsyncCallback> delegate that references the method to invoke when the operation is complete."}]},{"pos":[10903,11059],"content":"A user-defined object that contains information about the operation. This object is passed to the `requestCallback` delegate when the operation is complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"A user-defined object that contains information about the operation.","pos":[0,68]},{"content":"This object is passed to the <ph id=\"ph1\">`requestCallback`</ph> delegate when the operation is complete.","pos":[69,156],"source":" This object is passed to the `requestCallback` delegate when the operation is complete."}]},{"pos":[11123,11203],"content":"An <xref:System.IAsyncResult> instance that references the asynchronous request.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.IAsyncResult&gt; instance that references the asynchronous request.","pos":[0,80],"source":"An <xref:System.IAsyncResult> instance that references the asynchronous request."}]},{"pos":[11366,11451],"content":"<code>address</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[21,85],"source":" is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[11566,11626],"content":"An error is encountered when resolving <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An error is encountered when resolving <code>address</code>."},{"pos":[11721,11767],"content":"<code>address</code> is an invalid IP address.","needQuote":true,"needEscape":true,"nodes":[{"content":"is an invalid IP address.","pos":[21,46]}]},{"pos":[12271,12380],"content":"Asynchronously resolves a host name or IP address to an <bpt id=\"p1\">&lt;xref href=\"System.Net.IPHostEntry\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance.","needQuote":true,"needEscape":true,"source":"Asynchronously resolves a host name or IP address to an <xref href=\"System.Net.IPHostEntry\"></xref> instance."},{"pos":[12393,13261],"content":"The BeginGetHostEntry method queries a DNS server for the IP address that is associated with a host name or IP address.       **Note** This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).       The asynchronous BeginGetHostEntry operation must be completed by calling the <xref:System.Net.Dns.EndGetHostEntry%2A> method. Typically, the method is invoked by the `requestCallback` delegate.       This method does not block until the operation is complete. To block until the operation is complete, use the <xref:System.Net.Dns.GetHostEntry%2A> method.       For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"The BeginGetHostEntry method queries a DNS server for the IP address that is associated with a host name or IP address.","pos":[0,119]},{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept> This member emits trace information when you enable network tracing in your application.","pos":[126,223],"source":"**Note** This member emits trace information when you enable network tracing in your application."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[224,329],"source":" For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md)."},{"content":"The asynchronous BeginGetHostEntry operation must be completed by calling the &lt;xref:System.Net.Dns.EndGetHostEntry%2A&gt; method.","pos":[336,462],"source":"       The asynchronous BeginGetHostEntry operation must be completed by calling the <xref:System.Net.Dns.EndGetHostEntry%2A> method."},{"content":"Typically, the method is invoked by the <ph id=\"ph1\">`requestCallback`</ph> delegate.","pos":[463,530],"source":" Typically, the method is invoked by the `requestCallback` delegate."},{"content":"This method does not block until the operation is complete.","pos":[537,596]},{"content":"To block until the operation is complete, use the &lt;xref:System.Net.Dns.GetHostEntry%2A&gt; method.","pos":[597,692],"source":" To block until the operation is complete, use the <xref:System.Net.Dns.GetHostEntry%2A> method."},{"content":"For detailed information about using the asynchronous programming model, see <bpt id=\"p1\">[</bpt>Calling Synchronous Methods Asynchronously<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[699,860],"source":"       For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[13919,13958],"content":"The host name or IP address to resolve.","needQuote":true,"needEscape":true,"nodes":[{"content":"The host name or IP address to resolve.","pos":[0,39]}]},{"pos":[14037,14145],"content":"An <xref:System.AsyncCallback> delegate that references the method to invoke when the operation is complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.AsyncCallback&gt; delegate that references the method to invoke when the operation is complete.","pos":[0,108],"source":"An <xref:System.AsyncCallback> delegate that references the method to invoke when the operation is complete."}]},{"pos":[14213,14369],"content":"A user-defined object that contains information about the operation. This object is passed to the `requestCallback` delegate when the operation is complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"A user-defined object that contains information about the operation.","pos":[0,68]},{"content":"This object is passed to the <ph id=\"ph1\">`requestCallback`</ph> delegate when the operation is complete.","pos":[69,156],"source":" This object is passed to the `requestCallback` delegate when the operation is complete."}]},{"pos":[14433,14513],"content":"An <xref:System.IAsyncResult> instance that references the asynchronous request.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.IAsyncResult&gt; instance that references the asynchronous request.","pos":[0,80],"source":"An <xref:System.IAsyncResult> instance that references the asynchronous request."}]},{"pos":[14676,14771],"content":"<ph id=\"ph1\">&lt;code&gt;hostNameOrAddress&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>hostNameOrAddress</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[14886,14962],"content":"The length of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">hostNameOrAddress</ph><ept id=\"p1\">&lt;/code&gt;</ept> is greater than 255 characters.","needQuote":true,"needEscape":true,"source":"The length of <code>hostNameOrAddress</code> is greater than 255 characters."},{"pos":[15077,15147],"content":"An error is encountered when resolving <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">hostNameOrAddress</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An error is encountered when resolving <code>hostNameOrAddress</code>."},{"pos":[15242,15298],"content":"<ph id=\"ph1\">&lt;code&gt;hostNameOrAddress&lt;/code&gt;</ph> is an invalid IP address.","needQuote":true,"needEscape":true,"source":"<code>hostNameOrAddress</code> is an invalid IP address."},{"pos":[15777,15892],"content":"Begins an asynchronous request to resolve a DNS host name or IP address to an <xref:System.Net.IPAddress> instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"Begins an asynchronous request to resolve a DNS host name or IP address to an &lt;xref:System.Net.IPAddress&gt; instance.","pos":[0,115],"source":"Begins an asynchronous request to resolve a DNS host name or IP address to an <xref:System.Net.IPAddress> instance."}]},{"pos":[15905,16630],"content":"The asynchronous BeginResolve operation must be completed by calling the <xref:System.Net.Dns.EndResolve%2A> method. Typically, the method is invoked by the `requestCallback` delegate.       This method does not block until the operation is complete. To block until the operation is complete, use the <xref:System.Net.Dns.Resolve%2A> method.       For more information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] >  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"The asynchronous BeginResolve operation must be completed by calling the &lt;xref:System.Net.Dns.EndResolve%2A&gt; method.","pos":[0,116],"source":"The asynchronous BeginResolve operation must be completed by calling the <xref:System.Net.Dns.EndResolve%2A> method."},{"content":"Typically, the method is invoked by the <ph id=\"ph1\">`requestCallback`</ph> delegate.","pos":[117,184],"source":" Typically, the method is invoked by the `requestCallback` delegate."},{"content":"This method does not block until the operation is complete.","pos":[191,250]},{"content":"To block until the operation is complete, use the &lt;xref:System.Net.Dns.Resolve%2A&gt; method.","pos":[251,341],"source":" To block until the operation is complete, use the <xref:System.Net.Dns.Resolve%2A> method."},{"content":"For more information about using the asynchronous programming model, see <bpt id=\"p1\">[</bpt>Calling Synchronous Methods Asynchronously<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[348,505],"source":"       For more information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  This member emits trace information when you enable network tracing in your application.","pos":[511,612],"source":"      > [!NOTE] >  This member emits trace information when you enable network tracing in your application."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[613,718],"source":" For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[17253,17278],"content":"The DNS name of the host.","needQuote":true,"needEscape":true,"nodes":[{"content":"The DNS name of the host.","pos":[0,25]}]},{"pos":[17357,17465],"content":"An <xref:System.AsyncCallback> delegate that references the method to invoke when the operation is complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.AsyncCallback&gt; delegate that references the method to invoke when the operation is complete.","pos":[0,108],"source":"An <xref:System.AsyncCallback> delegate that references the method to invoke when the operation is complete."}]},{"pos":[17533,17689],"content":"A user-defined object that contains information about the operation. This object is passed to the `requestCallback` delegate when the operation is complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"A user-defined object that contains information about the operation.","pos":[0,68]},{"content":"This object is passed to the <ph id=\"ph1\">`requestCallback`</ph> delegate when the operation is complete.","pos":[69,156],"source":" This object is passed to the `requestCallback` delegate when the operation is complete."}]},{"pos":[17753,17833],"content":"An <xref:System.IAsyncResult> instance that references the asynchronous request.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.IAsyncResult&gt; instance that references the asynchronous request.","pos":[0,80],"source":"An <xref:System.IAsyncResult> instance that references the asynchronous request."}]},{"pos":[17991,18077],"content":"<ph id=\"ph1\">&lt;code&gt;hostName&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>hostName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[18192,18254],"content":"The caller does not have permission to access DNS information.","needQuote":true,"needEscape":true,"nodes":[{"content":"The caller does not have permission to access DNS information.","pos":[0,62]}]},{"pos":[18665,18714],"content":"Ends an asynchronous request for DNS information.","needQuote":true,"needEscape":true,"nodes":[{"content":"Ends an asynchronous request for DNS information.","pos":[0,49]}]},{"pos":[18727,19425],"content":"The <xref:System.Net.Dns.BeginGetHostAddresses%2A> method queries a DNS server for the IP addresses associated with a host name. If `hostNameOrAddress` is an IP address, this address is returned without querying the DNS server.       When an empty string is passed as the host name, this method returns the IPv4 addresses of the local host for all operating systems except Windows Server 2003; for Windows Server 2003, both IPv4 and IPv6 addresses for the local host are returned.      > [!NOTE] >  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Net.Dns.BeginGetHostAddresses%2A&gt; method queries a DNS server for the IP addresses associated with a host name.","pos":[0,128],"source":"The <xref:System.Net.Dns.BeginGetHostAddresses%2A> method queries a DNS server for the IP addresses associated with a host name."},{"content":"If <ph id=\"ph1\">`hostNameOrAddress`</ph> is an IP address, this address is returned without querying the DNS server.","pos":[129,227],"source":" If `hostNameOrAddress` is an IP address, this address is returned without querying the DNS server."},{"content":"When an empty string is passed as the host name, this method returns the IPv4 addresses of the local host for all operating systems except Windows Server 2003; for Windows Server 2003, both IPv4 and IPv6 addresses for the local host are returned.","pos":[234,480]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  This member emits trace information when you enable network tracing in your application.","pos":[486,587],"source":"      > [!NOTE] >  This member emits trace information when you enable network tracing in your application."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[588,693],"source":" For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[19624,19741],"content":"An <xref:System.IAsyncResult> instance returned by a call to the <xref:System.Net.Dns.BeginGetHostAddresses*> method.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.IAsyncResult&gt; instance returned by a call to the &lt;xref:System.Net.Dns.BeginGetHostAddresses*&gt; method.","pos":[0,117],"source":"An <xref:System.IAsyncResult> instance returned by a call to the <xref:System.Net.Dns.BeginGetHostAddresses*> method."}]},{"pos":[19808,20000],"content":"An array of type &lt;xref:System.Net.IPAddress&gt; that holds the IP addresses for the host specified by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">hostNameOrAddress</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter of &lt;xref:System.Net.Dns.BeginGetHostAddresses*&gt;.","needQuote":true,"needEscape":true,"source":"An array of type <xref:System.Net.IPAddress> that holds the IP addresses for the host specified by the <code>hostNameOrAddress</code> parameter of <xref:System.Net.Dns.BeginGetHostAddresses*>."},{"pos":[20461,20510],"content":"Ends an asynchronous request for DNS information.","needQuote":true,"needEscape":true,"nodes":[{"content":"Ends an asynchronous request for DNS information.","pos":[0,49]}]},{"pos":[20523,21183],"content":"This method blocks until the operation is complete.       To perform this operation synchronously, use the <xref:System.Net.Dns.GetHostByName%2A> method.       If the <xref:System.Net.Configuration.Ipv6Element.Enabled%2A?displayProperty=fullName> property is set to `true`, the <xref:System.Net.IPHostEntry.Aliases%2A> property of the <xref:System.Net.IPHostEntry> instance returned is not populated by this method and will always be empty.      > [!NOTE] >  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"This method blocks until the operation is complete.","pos":[0,51]},{"content":"To perform this operation synchronously, use the &lt;xref:System.Net.Dns.GetHostByName%2A&gt; method.","pos":[58,153],"source":"       To perform this operation synchronously, use the <xref:System.Net.Dns.GetHostByName%2A> method."},{"content":"If the &lt;xref:System.Net.Configuration.Ipv6Element.Enabled%2A?displayProperty=fullName&gt; property is set to <ph id=\"ph1\">`true`</ph>, the &lt;xref:System.Net.IPHostEntry.Aliases%2A&gt; property of the &lt;xref:System.Net.IPHostEntry&gt; instance returned is not populated by this method and will always be empty.","pos":[160,440],"source":"       If the <xref:System.Net.Configuration.Ipv6Element.Enabled%2A?displayProperty=fullName> property is set to `true`, the <xref:System.Net.IPHostEntry.Aliases%2A> property of the <xref:System.Net.IPHostEntry> instance returned is not populated by this method and will always be empty."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  This member emits trace information when you enable network tracing in your application.","pos":[446,547],"source":"      > [!NOTE] >  This member emits trace information when you enable network tracing in your application."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[548,653],"source":" For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[21379,21501],"content":"An <xref:System.IAsyncResult> instance that is returned by a call to the <xref:System.Net.Dns.BeginGetHostByName*> method.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.IAsyncResult&gt; instance that is returned by a call to the &lt;xref:System.Net.Dns.BeginGetHostByName*&gt; method.","pos":[0,122],"source":"An <xref:System.IAsyncResult> instance that is returned by a call to the <xref:System.Net.Dns.BeginGetHostByName*> method."}]},{"pos":[21568,21665],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Net.IPHostEntry\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that contains DNS information about a host.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Net.IPHostEntry\"></xref> object that contains DNS information about a host."},{"pos":[21827,21916],"content":"<ph id=\"ph1\">&lt;code&gt;asyncResult&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>asyncResult</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[22307,22356],"content":"Ends an asynchronous request for DNS information.","needQuote":true,"needEscape":true,"nodes":[{"content":"Ends an asynchronous request for DNS information.","pos":[0,49]}]},{"pos":[22369,22912],"content":"This method blocks until the operation is complete.       The <xref:System.Net.IPHostEntry.Aliases%2A> property of the <xref:System.Net.IPHostEntry> instance returned is not populated by this method and will always be empty.       To perform this operation synchronously, use a <xref:System.Net.Dns.GetHostEntry%2A> method.      > [!NOTE] >  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"This method blocks until the operation is complete.","pos":[0,51]},{"content":"The &lt;xref:System.Net.IPHostEntry.Aliases%2A&gt; property of the &lt;xref:System.Net.IPHostEntry&gt; instance returned is not populated by this method and will always be empty.","pos":[58,224],"source":"       The <xref:System.Net.IPHostEntry.Aliases%2A> property of the <xref:System.Net.IPHostEntry> instance returned is not populated by this method and will always be empty."},{"content":"To perform this operation synchronously, use a &lt;xref:System.Net.Dns.GetHostEntry%2A&gt; method.","pos":[231,323],"source":"       To perform this operation synchronously, use a <xref:System.Net.Dns.GetHostEntry%2A> method."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  This member emits trace information when you enable network tracing in your application.","pos":[329,430],"source":"      > [!NOTE] >  This member emits trace information when you enable network tracing in your application."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[431,536],"source":" For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[23107,23219],"content":"An <xref:System.IAsyncResult> instance returned by a call to an <xref:System.Net.Dns.BeginGetHostEntry*> method.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.IAsyncResult&gt; instance returned by a call to an &lt;xref:System.Net.Dns.BeginGetHostEntry*&gt; method.","pos":[0,112],"source":"An <xref:System.IAsyncResult> instance returned by a call to an <xref:System.Net.Dns.BeginGetHostEntry*> method."}]},{"pos":[23286,23391],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Net.IPHostEntry\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance that contains address information about the host.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Net.IPHostEntry\"></xref> instance that contains address information about the host."},{"pos":[23552,23641],"content":"<ph id=\"ph1\">&lt;code&gt;asyncResult&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>asyncResult</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[24007,24056],"content":"Ends an asynchronous request for DNS information.","needQuote":true,"needEscape":true,"nodes":[{"content":"Ends an asynchronous request for DNS information.","pos":[0,49]}]},{"pos":[24069,24714],"content":"This method blocks until the operation is complete.       If the <xref:System.Net.Configuration.Ipv6Element.Enabled%2A?displayProperty=fullName> is set to `true`, the <xref:System.Net.IPHostEntry.Aliases%2A> property of the <xref:System.Net.IPHostEntry> instance returned is not populated by this method and will always be empty.       To perform this operation synchronously, use the <xref:System.Net.Dns.Resolve%2A> method.      > [!NOTE] >  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"This method blocks until the operation is complete.","pos":[0,51]},{"content":"If the &lt;xref:System.Net.Configuration.Ipv6Element.Enabled%2A?displayProperty=fullName&gt; is set to <ph id=\"ph1\">`true`</ph>, the &lt;xref:System.Net.IPHostEntry.Aliases%2A&gt; property of the &lt;xref:System.Net.IPHostEntry&gt; instance returned is not populated by this method and will always be empty.","pos":[58,329],"source":"       If the <xref:System.Net.Configuration.Ipv6Element.Enabled%2A?displayProperty=fullName> is set to `true`, the <xref:System.Net.IPHostEntry.Aliases%2A> property of the <xref:System.Net.IPHostEntry> instance returned is not populated by this method and will always be empty."},{"content":"To perform this operation synchronously, use the &lt;xref:System.Net.Dns.Resolve%2A&gt; method.","pos":[336,425],"source":"       To perform this operation synchronously, use the <xref:System.Net.Dns.Resolve%2A> method."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  This member emits trace information when you enable network tracing in your application.","pos":[431,532],"source":"      > [!NOTE] >  This member emits trace information when you enable network tracing in your application."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[533,638],"source":" For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[25287,25403],"content":"An <xref:System.IAsyncResult> instance that is returned by a call to the <xref:System.Net.Dns.BeginResolve*> method.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.IAsyncResult&gt; instance that is returned by a call to the &lt;xref:System.Net.Dns.BeginResolve*&gt; method.","pos":[0,116],"source":"An <xref:System.IAsyncResult> instance that is returned by a call to the <xref:System.Net.Dns.BeginResolve*> method."}]},{"pos":[25470,25567],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Net.IPHostEntry\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that contains DNS information about a host.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Net.IPHostEntry\"></xref> object that contains DNS information about a host."},{"pos":[25723,25812],"content":"<ph id=\"ph1\">&lt;code&gt;asyncResult&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>asyncResult</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[26178,26246],"content":"Returns the Internet Protocol (IP) addresses for the specified host.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the Internet Protocol (IP) addresses for the specified host.","pos":[0,68]}]},{"pos":[26259,27225],"content":"The GetHostAddresses method queries a DNS server for the IP addresses associated with a host name. If `hostNameOrAddress` is an IP address, this address is returned without querying the DNS server.       When an empty string is passed as the host name, this method returns the IPv4 addresses of the local host for all operating systems except Windows Server 2003; for Windows Server 2003, both IPv4 and IPv6 addresses for the local host are returned.       IPv6 addresses are filtered from the results of the GetHostAddresses method if the local computer does not have IPv6 installed. As a result, it is possible to get back an empty <xref:System.Net.IPAddress> instance if only IPv6 results where available for the `hostNameOrAddress`.parameter.      > [!NOTE] >  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"The GetHostAddresses method queries a DNS server for the IP addresses associated with a host name.","pos":[0,98]},{"content":"If <ph id=\"ph1\">`hostNameOrAddress`</ph> is an IP address, this address is returned without querying the DNS server.","pos":[99,197],"source":" If `hostNameOrAddress` is an IP address, this address is returned without querying the DNS server."},{"content":"When an empty string is passed as the host name, this method returns the IPv4 addresses of the local host for all operating systems except Windows Server 2003; for Windows Server 2003, both IPv4 and IPv6 addresses for the local host are returned.","pos":[204,450]},{"content":"IPv6 addresses are filtered from the results of the GetHostAddresses method if the local computer does not have IPv6 installed.","pos":[457,584]},{"content":"As a result, it is possible to get back an empty &lt;xref:System.Net.IPAddress&gt; instance if only IPv6 results where available for the <ph id=\"ph1\">`hostNameOrAddress`</ph>.parameter.","pos":[585,746],"source":" As a result, it is possible to get back an empty <xref:System.Net.IPAddress> instance if only IPv6 results where available for the `hostNameOrAddress`.parameter."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  This member emits trace information when you enable network tracing in your application.","pos":[752,853],"source":"      > [!NOTE] >  This member emits trace information when you enable network tracing in your application."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[854,959],"source":" For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[27849,27888],"content":"The host name or IP address to resolve.","needQuote":true,"needEscape":true,"nodes":[{"content":"The host name or IP address to resolve.","pos":[0,39]}]},{"pos":[27955,28107],"content":"An array of type &lt;xref:System.Net.IPAddress&gt; that holds the IP addresses for the host that is specified by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">hostNameOrAddress</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","needQuote":true,"needEscape":true,"source":"An array of type <xref:System.Net.IPAddress> that holds the IP addresses for the host that is specified by the <code>hostNameOrAddress</code> parameter."},{"pos":[28269,28364],"content":"<ph id=\"ph1\">&lt;code&gt;hostNameOrAddress&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>hostNameOrAddress</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[28479,28555],"content":"The length of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">hostNameOrAddress</ph><ept id=\"p1\">&lt;/code&gt;</ept> is greater than 255 characters.","needQuote":true,"needEscape":true,"source":"The length of <code>hostNameOrAddress</code> is greater than 255 characters."},{"pos":[28670,28740],"content":"An error is encountered when resolving <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">hostNameOrAddress</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An error is encountered when resolving <code>hostNameOrAddress</code>."},{"pos":[28835,28891],"content":"<ph id=\"ph1\">&lt;code&gt;hostNameOrAddress&lt;/code&gt;</ph> is an invalid IP address.","needQuote":true,"needEscape":true,"source":"<code>hostNameOrAddress</code> is an invalid IP address."},{"pos":[29282,29379],"content":"Returns the Internet Protocol (IP) addresses for the specified host as an asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the Internet Protocol (IP) addresses for the specified host as an asynchronous operation.","pos":[0,97]}]},{"pos":[29392,29734],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the `hostNameOrAddress` has been resolved.       This method queries a DNS server for the IP addresses associated with a host name. If `hostNameOrAddress` is an IP address, this address is returned without querying the DNS server.","needQuote":false,"needEscape":true,"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned &lt;xref:System.Threading.Tasks.Task%601&gt; object will complete after the <ph id=\"ph1\">`hostNameOrAddress`</ph> has been resolved.","pos":[31,152],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete after the `hostNameOrAddress` has been resolved."},{"content":"This method queries a DNS server for the IP addresses associated with a host name.","pos":[159,241]},{"content":"If <ph id=\"ph1\">`hostNameOrAddress`</ph> is an IP address, this address is returned without querying the DNS server.","pos":[242,340],"source":" If `hostNameOrAddress` is an IP address, this address is returned without querying the DNS server."}]},{"pos":[29964,30003],"content":"The host name or IP address to resolve.","needQuote":true,"needEscape":true,"nodes":[{"content":"The host name or IP address to resolve.","pos":[0,39]}]},{"pos":[30100,30466],"content":"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;.       The task object representing the asynchronous operation. The &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; property on the task object returns an array of type <xref:System.Net.IPAddress> that holds the IP addresses for the host that is specified by the <code>hostNameOrAddress</code> parameter.","needQuote":false,"needEscape":true,"nodes":[{"content":"Returns <ph id=\"ph1\">&amp;lt;</ph>xref:System.Threading.Tasks.Task%601<ph id=\"ph2\">&amp;gt;</ph>.","pos":[0,53],"source":"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;."},{"content":"The task object representing the asynchronous operation.","pos":[60,116]},{"content":"The <ph id=\"ph1\">&amp;lt;</ph>xref:System.Threading.Tasks.Task%601.Result%2A<ph id=\"ph2\">&amp;gt;</ph> property on the task object returns an array of type &lt;xref:System.Net.IPAddress&gt; that holds the IP addresses for the host that is specified by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">hostNameOrAddress</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","pos":[117,364],"source":" The &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; property on the task object returns an array of type <xref:System.Net.IPAddress> that holds the IP addresses for the host that is specified by the <code>hostNameOrAddress</code> parameter."}]},{"pos":[30634,30729],"content":"<ph id=\"ph1\">&lt;code&gt;hostNameOrAddress&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>hostNameOrAddress</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[30844,30920],"content":"The length of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">hostNameOrAddress</ph><ept id=\"p1\">&lt;/code&gt;</ept> is greater than 255 characters.","needQuote":true,"needEscape":true,"source":"The length of <code>hostNameOrAddress</code> is greater than 255 characters."},{"pos":[31035,31105],"content":"An error is encountered when resolving <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">hostNameOrAddress</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An error is encountered when resolving <code>hostNameOrAddress</code>."},{"pos":[31200,31256],"content":"<ph id=\"ph1\">&lt;code&gt;hostNameOrAddress&lt;/code&gt;</ph> is an invalid IP address.","needQuote":true,"needEscape":true,"source":"<code>hostNameOrAddress</code> is an invalid IP address."},{"pos":[31645,31756],"content":"Creates an <bpt id=\"p1\">&lt;xref href=\"System.Net.IPHostEntry\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance from the specified &lt;xref:System.Net.IPAddress&gt;.","needQuote":true,"needEscape":true,"source":"Creates an <xref href=\"System.Net.IPHostEntry\"></xref> instance from the specified <xref:System.Net.IPAddress>."},{"pos":[35884,36092],"content":"> [!NOTE] >  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).","needQuote":true,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&gt; [!NOTE]</ph> &gt;  This member emits trace information when you enable network tracing in your application.","pos":[0,101],"source":"> [!NOTE] >  This member emits trace information when you enable network tracing in your application."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[102,207],"source":" For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md)."}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Net.Dns\n  id: Dns\n  children:\n  - System.Net.Dns.BeginGetHostAddresses(System.String,System.AsyncCallback,System.Object)\n  - System.Net.Dns.BeginGetHostByName(System.String,System.AsyncCallback,System.Object)\n  - System.Net.Dns.BeginGetHostEntry(System.Net.IPAddress,System.AsyncCallback,System.Object)\n  - System.Net.Dns.BeginGetHostEntry(System.String,System.AsyncCallback,System.Object)\n  - System.Net.Dns.BeginResolve(System.String,System.AsyncCallback,System.Object)\n  - System.Net.Dns.EndGetHostAddresses(System.IAsyncResult)\n  - System.Net.Dns.EndGetHostByName(System.IAsyncResult)\n  - System.Net.Dns.EndGetHostEntry(System.IAsyncResult)\n  - System.Net.Dns.EndResolve(System.IAsyncResult)\n  - System.Net.Dns.GetHostAddresses(System.String)\n  - System.Net.Dns.GetHostAddressesAsync(System.String)\n  - System.Net.Dns.GetHostByAddress(System.Net.IPAddress)\n  - System.Net.Dns.GetHostByAddress(System.String)\n  - System.Net.Dns.GetHostByName(System.String)\n  - System.Net.Dns.GetHostEntry(System.Net.IPAddress)\n  - System.Net.Dns.GetHostEntry(System.String)\n  - System.Net.Dns.GetHostEntryAsync(System.Net.IPAddress)\n  - System.Net.Dns.GetHostEntryAsync(System.String)\n  - System.Net.Dns.GetHostName\n  - System.Net.Dns.Resolve(System.String)\n  langs:\n  - csharp\n  name: Dns\n  nameWithType: Dns\n  fullName: System.Net.Dns\n  type: Class\n  summary: Provides simple domain name resolution functionality.\n  remarks: \"The Dns class is a static class that retrieves information about a specific host from the Internet Domain Name System (DNS).  \\n  \\n The host information from the DNS query is returned in an instance of the <xref:System.Net.IPHostEntry> class. If the specified host has more than one entry in the DNS database, <xref:System.Net.IPHostEntry> contains multiple IP addresses and aliases.\"\n  example:\n  - \"The following example queries the DNS database for information on the host www.contoso.com.  \\n  \\n [!code-cpp[Classic Dns Example#1](~/add/codesnippet/cpp/t-system.net.dns_1.cpp)]\\n [!code-vb[Classic Dns Example#1](~/add/codesnippet/visualbasic/t-system.net.dns_1.vb)]\\n [!code-cs[Classic Dns Example#1](~/add/codesnippet/csharp/t-system.net.dns_1.cs)]\"\n  syntax:\n    content: public static class Dns\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Net.Dns.BeginGetHostAddresses(System.String,System.AsyncCallback,System.Object)\n  id: BeginGetHostAddresses(System.String,System.AsyncCallback,System.Object)\n  parent: System.Net.Dns\n  langs:\n  - csharp\n  name: BeginGetHostAddresses(String,AsyncCallback,Object)\n  nameWithType: Dns.BeginGetHostAddresses(String,AsyncCallback,Object)\n  fullName: System.Net.Dns.BeginGetHostAddresses(String,AsyncCallback,Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Asynchronously returns the Internet Protocol (IP) addresses for the specified host.\n  remarks: \"The BeginGetHostAddresses method asynchronously queries a DNS server for the IP addresses that are associated with a host name. If `hostNameOrAddress` is an IP address, this address is returned without querying the DNS server.  \\n  \\n> [!NOTE]\\n>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).  \\n  \\n When an empty string is passed as the host name, this method returns the IPv4 addresses of the local host for all operating systems except Windows Server 2003; for Windows Server 2003, both IPv4 and IPv6 addresses for the local host are returned.  \\n  \\n The asynchronous BeginGetHostAddresses operation must be completed by calling the <xref:System.Net.Dns.EndGetHostAddresses%2A> method. Typically, the method is invoked by the `requestCallback` delegate.  \\n  \\n This method does not block until the operation is complete. To block until the operation is complete, use the <xref:System.Net.Dns.GetHostAddresses%2A> method.  \\n  \\n For more information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)\"\n  syntax:\n    content: public static IAsyncResult BeginGetHostAddresses (string hostNameOrAddress, AsyncCallback requestCallback, object state);\n    parameters:\n    - id: hostNameOrAddress\n      type: System.String\n      description: The host name or IP address to resolve.\n    - id: requestCallback\n      type: System.AsyncCallback\n      description: An <xref:System.AsyncCallback> delegate that references the method to invoke when the operation is complete.\n    - id: state\n      type: System.Object\n      description: A user-defined object that contains information about the operation. This object is passed to the `requestCallback` delegate when the operation is complete.\n    return:\n      type: System.IAsyncResult\n      description: An <xref:System.IAsyncResult> instance that references the asynchronous request.\n  overload: System.Net.Dns.BeginGetHostAddresses*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>hostNameOrAddress</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The length of <code>hostNameOrAddress</code> is greater than 255 characters.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error is encountered when resolving <code>hostNameOrAddress</code>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>hostNameOrAddress</code> is an invalid IP address.\n  platform:\n  - net462\n- uid: System.Net.Dns.BeginGetHostByName(System.String,System.AsyncCallback,System.Object)\n  id: BeginGetHostByName(System.String,System.AsyncCallback,System.Object)\n  parent: System.Net.Dns\n  langs:\n  - csharp\n  name: BeginGetHostByName(String,AsyncCallback,Object)\n  nameWithType: Dns.BeginGetHostByName(String,AsyncCallback,Object)\n  fullName: System.Net.Dns.BeginGetHostByName(String,AsyncCallback,Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Begins an asynchronous request for <xref href=\"System.Net.IPHostEntry\"></xref> information about the specified DNS host name.\n  remarks: \"The asynchronous BeginGetHostByName operation must be completed by calling the <xref:System.Net.Dns.EndGetHostByName%2A> method. Typically, the method is invoked by the `requestCallback` delegate.  \\n  \\n This method does not block until the operation is complete. To block until the operation is complete, use the <xref:System.Net.Dns.GetHostByName%2A> method.  \\n  \\n For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md).  \\n  \\n> [!NOTE]\\n>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public static IAsyncResult BeginGetHostByName (string hostName, AsyncCallback requestCallback, object stateObject);\n    parameters:\n    - id: hostName\n      type: System.String\n      description: The DNS name of the host.\n    - id: requestCallback\n      type: System.AsyncCallback\n      description: An <xref:System.AsyncCallback> delegate that references the method to invoke when the operation is complete.\n    - id: stateObject\n      type: System.Object\n      description: A user-defined object that contains information about the operation. This object is passed to the `requestCallback` delegate when the operation is complete.\n    return:\n      type: System.IAsyncResult\n      description: An <xref:System.IAsyncResult> instance that references the asynchronous request.\n  overload: System.Net.Dns.BeginGetHostByName*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>hostName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error was encountered executing the DNS query.\n  platform:\n  - net462\n- uid: System.Net.Dns.BeginGetHostEntry(System.Net.IPAddress,System.AsyncCallback,System.Object)\n  id: BeginGetHostEntry(System.Net.IPAddress,System.AsyncCallback,System.Object)\n  parent: System.Net.Dns\n  langs:\n  - csharp\n  name: BeginGetHostEntry(IPAddress,AsyncCallback,Object)\n  nameWithType: Dns.BeginGetHostEntry(IPAddress,AsyncCallback,Object)\n  fullName: System.Net.Dns.BeginGetHostEntry(IPAddress,AsyncCallback,Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Asynchronously resolves an IP address to an <xref href=\"System.Net.IPHostEntry\"></xref> instance.\n  remarks: \"The BeginGetHostEntry method asynchronously queries a DNS server for the IP addresses and aliases associated with an IP address.  \\n  \\n **Note** This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).  \\n  \\n The asynchronous BeginGetHostEntry operation must be completed by calling the <xref:System.Net.Dns.EndGetHostEntry%2A> method. Typically, the method is invoked by the `requestCallback` delegate.  \\n  \\n This method does not block until the operation is complete. To block until the operation is complete, use the <xref:System.Net.Dns.GetHostEntry%2A> method.  \\n  \\n For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)\"\n  example:\n  - \"The following code example uses the <xref:System.Net.Dns.BeginGetHostEntry%2A> method to resolve an IP address to an <xref:System.Net.IPHostEntry> instance.  \\n  \\n [!code-cpp[System.Net.Dns#2](~/add/codesnippet/cpp/99071e7b-2f93-4096-bd4a-_1.cpp)]\\n [!code-cs[System.Net.Dns#2](~/add/codesnippet/csharp/99071e7b-2f93-4096-bd4a-_1.cs)]\\n [!code-vb[System.Net.Dns#2](~/add/codesnippet/visualbasic/99071e7b-2f93-4096-bd4a-_1.vb)]\"\n  syntax:\n    content: public static IAsyncResult BeginGetHostEntry (System.Net.IPAddress address, AsyncCallback requestCallback, object stateObject);\n    parameters:\n    - id: address\n      type: System.Net.IPAddress\n      description: The IP address to resolve.\n    - id: requestCallback\n      type: System.AsyncCallback\n      description: An <xref:System.AsyncCallback> delegate that references the method to invoke when the operation is complete.\n    - id: stateObject\n      type: System.Object\n      description: A user-defined object that contains information about the operation. This object is passed to the `requestCallback` delegate when the operation is complete.\n    return:\n      type: System.IAsyncResult\n      description: An <xref:System.IAsyncResult> instance that references the asynchronous request.\n  overload: System.Net.Dns.BeginGetHostEntry*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>address</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error is encountered when resolving <code>address</code>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>address</code> is an invalid IP address.\n  platform:\n  - net462\n- uid: System.Net.Dns.BeginGetHostEntry(System.String,System.AsyncCallback,System.Object)\n  id: BeginGetHostEntry(System.String,System.AsyncCallback,System.Object)\n  parent: System.Net.Dns\n  langs:\n  - csharp\n  name: BeginGetHostEntry(String,AsyncCallback,Object)\n  nameWithType: Dns.BeginGetHostEntry(String,AsyncCallback,Object)\n  fullName: System.Net.Dns.BeginGetHostEntry(String,AsyncCallback,Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Asynchronously resolves a host name or IP address to an <xref href=\"System.Net.IPHostEntry\"></xref> instance.\n  remarks: \"The BeginGetHostEntry method queries a DNS server for the IP address that is associated with a host name or IP address.  \\n  \\n **Note** This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).  \\n  \\n The asynchronous BeginGetHostEntry operation must be completed by calling the <xref:System.Net.Dns.EndGetHostEntry%2A> method. Typically, the method is invoked by the `requestCallback` delegate.  \\n  \\n This method does not block until the operation is complete. To block until the operation is complete, use the <xref:System.Net.Dns.GetHostEntry%2A> method.  \\n  \\n For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"The following code example uses the BeginGetHostEntry method to resolve an IP address to an <xref:System.Net.IPHostEntry> instance.  \\n  \\n [!code-cpp[System.Net.Dns#2](~/add/codesnippet/cpp/f5923916-9329-4c02-b636-_1.cpp)]\\n [!code-cs[System.Net.Dns#2](~/add/codesnippet/csharp/f5923916-9329-4c02-b636-_1.cs)]\\n [!code-vb[System.Net.Dns#2](~/add/codesnippet/visualbasic/f5923916-9329-4c02-b636-_1.vb)]\"\n  syntax:\n    content: public static IAsyncResult BeginGetHostEntry (string hostNameOrAddress, AsyncCallback requestCallback, object stateObject);\n    parameters:\n    - id: hostNameOrAddress\n      type: System.String\n      description: The host name or IP address to resolve.\n    - id: requestCallback\n      type: System.AsyncCallback\n      description: An <xref:System.AsyncCallback> delegate that references the method to invoke when the operation is complete.\n    - id: stateObject\n      type: System.Object\n      description: A user-defined object that contains information about the operation. This object is passed to the `requestCallback` delegate when the operation is complete.\n    return:\n      type: System.IAsyncResult\n      description: An <xref:System.IAsyncResult> instance that references the asynchronous request.\n  overload: System.Net.Dns.BeginGetHostEntry*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>hostNameOrAddress</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The length of <code>hostNameOrAddress</code> is greater than 255 characters.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error is encountered when resolving <code>hostNameOrAddress</code>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>hostNameOrAddress</code> is an invalid IP address.\n  platform:\n  - net462\n- uid: System.Net.Dns.BeginResolve(System.String,System.AsyncCallback,System.Object)\n  id: BeginResolve(System.String,System.AsyncCallback,System.Object)\n  parent: System.Net.Dns\n  langs:\n  - csharp\n  name: BeginResolve(String,AsyncCallback,Object)\n  nameWithType: Dns.BeginResolve(String,AsyncCallback,Object)\n  fullName: System.Net.Dns.BeginResolve(String,AsyncCallback,Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Begins an asynchronous request to resolve a DNS host name or IP address to an <xref:System.Net.IPAddress> instance.\n  remarks: \"The asynchronous BeginResolve operation must be completed by calling the <xref:System.Net.Dns.EndResolve%2A> method. Typically, the method is invoked by the `requestCallback` delegate.  \\n  \\n This method does not block until the operation is complete. To block until the operation is complete, use the <xref:System.Net.Dns.Resolve%2A> method.  \\n  \\n For more information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md).  \\n  \\n> [!NOTE]\\n>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"The following example uses BeginResolve to resolve a DNS host name to an <xref:System.Net.IPAddress>.  \\n  \\n [!code-vb[Dns_Begin_EndResolve#1](~/add/codesnippet/visualbasic/m-system.net.dns.beginre_1.vb)]\\n [!code-cs[Dns_Begin_EndResolve#1](~/add/codesnippet/csharp/m-system.net.dns.beginre_1.cs)]\\n [!code-cpp[Dns_Begin_EndResolve#1](~/add/codesnippet/cpp/m-system.net.dns.beginre_1.cpp)]\"\n  syntax:\n    content: public static IAsyncResult BeginResolve (string hostName, AsyncCallback requestCallback, object stateObject);\n    parameters:\n    - id: hostName\n      type: System.String\n      description: The DNS name of the host.\n    - id: requestCallback\n      type: System.AsyncCallback\n      description: An <xref:System.AsyncCallback> delegate that references the method to invoke when the operation is complete.\n    - id: stateObject\n      type: System.Object\n      description: A user-defined object that contains information about the operation. This object is passed to the `requestCallback` delegate when the operation is complete.\n    return:\n      type: System.IAsyncResult\n      description: An <xref:System.IAsyncResult> instance that references the asynchronous request.\n  overload: System.Net.Dns.BeginResolve*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>hostName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: The caller does not have permission to access DNS information.\n  platform:\n  - net462\n- uid: System.Net.Dns.EndGetHostAddresses(System.IAsyncResult)\n  id: EndGetHostAddresses(System.IAsyncResult)\n  parent: System.Net.Dns\n  langs:\n  - csharp\n  name: EndGetHostAddresses(IAsyncResult)\n  nameWithType: Dns.EndGetHostAddresses(IAsyncResult)\n  fullName: System.Net.Dns.EndGetHostAddresses(IAsyncResult)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Ends an asynchronous request for DNS information.\n  remarks: \"The <xref:System.Net.Dns.BeginGetHostAddresses%2A> method queries a DNS server for the IP addresses associated with a host name. If `hostNameOrAddress` is an IP address, this address is returned without querying the DNS server.  \\n  \\n When an empty string is passed as the host name, this method returns the IPv4 addresses of the local host for all operating systems except Windows Server 2003; for Windows Server 2003, both IPv4 and IPv6 addresses for the local host are returned.  \\n  \\n> [!NOTE]\\n>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public static System.Net.IPAddress[] EndGetHostAddresses (IAsyncResult asyncResult);\n    parameters:\n    - id: asyncResult\n      type: System.IAsyncResult\n      description: An <xref:System.IAsyncResult> instance returned by a call to the <xref:System.Net.Dns.BeginGetHostAddresses*> method.\n    return:\n      type: System.Net.IPAddress[]\n      description: An array of type <xref:System.Net.IPAddress> that holds the IP addresses for the host specified by the <code>hostNameOrAddress</code> parameter of <xref:System.Net.Dns.BeginGetHostAddresses*>.\n  overload: System.Net.Dns.EndGetHostAddresses*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Dns.EndGetHostByName(System.IAsyncResult)\n  id: EndGetHostByName(System.IAsyncResult)\n  parent: System.Net.Dns\n  langs:\n  - csharp\n  name: EndGetHostByName(IAsyncResult)\n  nameWithType: Dns.EndGetHostByName(IAsyncResult)\n  fullName: System.Net.Dns.EndGetHostByName(IAsyncResult)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Ends an asynchronous request for DNS information.\n  remarks: \"This method blocks until the operation is complete.  \\n  \\n To perform this operation synchronously, use the <xref:System.Net.Dns.GetHostByName%2A> method.  \\n  \\n If the <xref:System.Net.Configuration.Ipv6Element.Enabled%2A?displayProperty=fullName> property is set to `true`, the <xref:System.Net.IPHostEntry.Aliases%2A> property of the <xref:System.Net.IPHostEntry> instance returned is not populated by this method and will always be empty.  \\n  \\n> [!NOTE]\\n>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public static System.Net.IPHostEntry EndGetHostByName (IAsyncResult asyncResult);\n    parameters:\n    - id: asyncResult\n      type: System.IAsyncResult\n      description: An <xref:System.IAsyncResult> instance that is returned by a call to the <xref:System.Net.Dns.BeginGetHostByName*> method.\n    return:\n      type: System.Net.IPHostEntry\n      description: An <xref href=\"System.Net.IPHostEntry\"></xref> object that contains DNS information about a host.\n  overload: System.Net.Dns.EndGetHostByName*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>asyncResult</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Net.Dns.EndGetHostEntry(System.IAsyncResult)\n  id: EndGetHostEntry(System.IAsyncResult)\n  parent: System.Net.Dns\n  langs:\n  - csharp\n  name: EndGetHostEntry(IAsyncResult)\n  nameWithType: Dns.EndGetHostEntry(IAsyncResult)\n  fullName: System.Net.Dns.EndGetHostEntry(IAsyncResult)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Ends an asynchronous request for DNS information.\n  remarks: \"This method blocks until the operation is complete.  \\n  \\n The <xref:System.Net.IPHostEntry.Aliases%2A> property of the <xref:System.Net.IPHostEntry> instance returned is not populated by this method and will always be empty.  \\n  \\n To perform this operation synchronously, use a <xref:System.Net.Dns.GetHostEntry%2A> method.  \\n  \\n> [!NOTE]\\n>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public static System.Net.IPHostEntry EndGetHostEntry (IAsyncResult asyncResult);\n    parameters:\n    - id: asyncResult\n      type: System.IAsyncResult\n      description: An <xref:System.IAsyncResult> instance returned by a call to an <xref:System.Net.Dns.BeginGetHostEntry*> method.\n    return:\n      type: System.Net.IPHostEntry\n      description: An <xref href=\"System.Net.IPHostEntry\"></xref> instance that contains address information about the host.\n  overload: System.Net.Dns.EndGetHostEntry*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>asyncResult</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Net.Dns.EndResolve(System.IAsyncResult)\n  id: EndResolve(System.IAsyncResult)\n  parent: System.Net.Dns\n  langs:\n  - csharp\n  name: EndResolve(IAsyncResult)\n  nameWithType: Dns.EndResolve(IAsyncResult)\n  fullName: System.Net.Dns.EndResolve(IAsyncResult)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Ends an asynchronous request for DNS information.\n  remarks: \"This method blocks until the operation is complete.  \\n  \\n If the <xref:System.Net.Configuration.Ipv6Element.Enabled%2A?displayProperty=fullName> is set to `true`, the <xref:System.Net.IPHostEntry.Aliases%2A> property of the <xref:System.Net.IPHostEntry> instance returned is not populated by this method and will always be empty.  \\n  \\n To perform this operation synchronously, use the <xref:System.Net.Dns.Resolve%2A> method.  \\n  \\n> [!NOTE]\\n>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"The following example ends an asynchronous request for DNS host information.  \\n  \\n [!code-vb[Dns_Begin_EndResolve#1](~/add/codesnippet/visualbasic/m-system.net.dns.endreso_1.vb)]\\n [!code-cs[Dns_Begin_EndResolve#1](~/add/codesnippet/csharp/m-system.net.dns.endreso_1.cs)]\\n [!code-cpp[Dns_Begin_EndResolve#1](~/add/codesnippet/cpp/m-system.net.dns.endreso_1.cpp)]\"\n  syntax:\n    content: public static System.Net.IPHostEntry EndResolve (IAsyncResult asyncResult);\n    parameters:\n    - id: asyncResult\n      type: System.IAsyncResult\n      description: An <xref:System.IAsyncResult> instance that is returned by a call to the <xref:System.Net.Dns.BeginResolve*> method.\n    return:\n      type: System.Net.IPHostEntry\n      description: An <xref href=\"System.Net.IPHostEntry\"></xref> object that contains DNS information about a host.\n  overload: System.Net.Dns.EndResolve*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>asyncResult</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Net.Dns.GetHostAddresses(System.String)\n  id: GetHostAddresses(System.String)\n  parent: System.Net.Dns\n  langs:\n  - csharp\n  name: GetHostAddresses(String)\n  nameWithType: Dns.GetHostAddresses(String)\n  fullName: System.Net.Dns.GetHostAddresses(String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Returns the Internet Protocol (IP) addresses for the specified host.\n  remarks: \"The GetHostAddresses method queries a DNS server for the IP addresses associated with a host name. If `hostNameOrAddress` is an IP address, this address is returned without querying the DNS server.  \\n  \\n When an empty string is passed as the host name, this method returns the IPv4 addresses of the local host for all operating systems except Windows Server 2003; for Windows Server 2003, both IPv4 and IPv6 addresses for the local host are returned.  \\n  \\n IPv6 addresses are filtered from the results of the GetHostAddresses method if the local computer does not have IPv6 installed. As a result, it is possible to get back an empty <xref:System.Net.IPAddress> instance if only IPv6 results where available for the `hostNameOrAddress`.parameter.  \\n  \\n> [!NOTE]\\n>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"The following code example uses the GetHostAddresses method to resolve an IP address to an array of type <xref:System.Net.IPAddress>.  \\n  \\n [!code-cpp[System.Net.Dns#3](~/add/codesnippet/cpp/m-system.net.dns.gethost_5_1.cpp)]\\n [!code-cs[System.Net.Dns#3](~/add/codesnippet/csharp/m-system.net.dns.gethost_5_1.cs)]\\n [!code-vb[System.Net.Dns#3](~/add/codesnippet/visualbasic/m-system.net.dns.gethost_5_1.vb)]\"\n  syntax:\n    content: public static System.Net.IPAddress[] GetHostAddresses (string hostNameOrAddress);\n    parameters:\n    - id: hostNameOrAddress\n      type: System.String\n      description: The host name or IP address to resolve.\n    return:\n      type: System.Net.IPAddress[]\n      description: An array of type <xref:System.Net.IPAddress> that holds the IP addresses for the host that is specified by the <code>hostNameOrAddress</code> parameter.\n  overload: System.Net.Dns.GetHostAddresses*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>hostNameOrAddress</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The length of <code>hostNameOrAddress</code> is greater than 255 characters.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error is encountered when resolving <code>hostNameOrAddress</code>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>hostNameOrAddress</code> is an invalid IP address.\n  platform:\n  - net462\n- uid: System.Net.Dns.GetHostAddressesAsync(System.String)\n  id: GetHostAddressesAsync(System.String)\n  parent: System.Net.Dns\n  langs:\n  - csharp\n  name: GetHostAddressesAsync(String)\n  nameWithType: Dns.GetHostAddressesAsync(String)\n  fullName: System.Net.Dns.GetHostAddressesAsync(String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Returns the Internet Protocol (IP) addresses for the specified host as an asynchronous operation.\n  remarks: \"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the `hostNameOrAddress` has been resolved.  \\n  \\n This method queries a DNS server for the IP addresses associated with a host name. If `hostNameOrAddress` is an IP address, this address is returned without querying the DNS server.\"\n  syntax:\n    content: public static System.Threading.Tasks.Task<System.Net.IPAddress[]> GetHostAddressesAsync (string hostNameOrAddress);\n    parameters:\n    - id: hostNameOrAddress\n      type: System.String\n      description: The host name or IP address to resolve.\n    return:\n      type: System.Threading.Tasks.Task{System.Net.IPAddress[]}\n      description: \"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;.  \\n  \\n The task object representing the asynchronous operation. The &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; property on the task object returns an array of type <xref:System.Net.IPAddress> that holds the IP addresses for the host that is specified by the <code>hostNameOrAddress</code> parameter.\"\n  overload: System.Net.Dns.GetHostAddressesAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>hostNameOrAddress</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The length of <code>hostNameOrAddress</code> is greater than 255 characters.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error is encountered when resolving <code>hostNameOrAddress</code>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>hostNameOrAddress</code> is an invalid IP address.\n  platform:\n  - net462\n- uid: System.Net.Dns.GetHostByAddress(System.Net.IPAddress)\n  id: GetHostByAddress(System.Net.IPAddress)\n  parent: System.Net.Dns\n  langs:\n  - csharp\n  name: GetHostByAddress(IPAddress)\n  nameWithType: Dns.GetHostByAddress(IPAddress)\n  fullName: System.Net.Dns.GetHostByAddress(IPAddress)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Creates an <xref href=\"System.Net.IPHostEntry\"></xref> instance from the specified <xref:System.Net.IPAddress>.\n  remarks: >-\n    > [!NOTE]\n\n    >  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).\n  example:\n  - \"The following example creates a <xref:System.Net.IPHostEntry> from an <xref:System.Net.IPAddress>.  \\n  \\n [!code-cpp[Dns_GetHostByAddress_IPAddress#1](~/add/codesnippet/cpp/m-system.net.dns.gethost_4_1.cpp)]\\n [!code-cs[Dns_GetHostByAddress_IPAddress#1](~/add/codesnippet/csharp/m-system.net.dns.gethost_4_1.cs)]\\n [!code-vb[Dns_GetHostByAddress_IPAddress#1](~/add/codesnippet/visualbasic/m-system.net.dns.gethost_4_1.vb)]\"\n  syntax:\n    content: public static System.Net.IPHostEntry GetHostByAddress (System.Net.IPAddress address);\n    parameters:\n    - id: address\n      type: System.Net.IPAddress\n      description: An <xref:System.Net.IPAddress>.\n    return:\n      type: System.Net.IPHostEntry\n      description: \"An <xref href=\\\"System.Net.IPHostEntry\\\"></xref>.  \\n  \\n An <xref href=\\\"System.Net.IPHostEntry\\\"></xref> instance.\"\n  overload: System.Net.Dns.GetHostByAddress*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>address</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error is encountered when resolving <code>address</code>.\n  platform:\n  - net462\n- uid: System.Net.Dns.GetHostByAddress(System.String)\n  id: GetHostByAddress(System.String)\n  parent: System.Net.Dns\n  langs:\n  - csharp\n  name: GetHostByAddress(String)\n  nameWithType: Dns.GetHostByAddress(String)\n  fullName: System.Net.Dns.GetHostByAddress(String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Creates an <xref href=\"System.Net.IPHostEntry\"></xref> instance from an IP address.\n  remarks: >-\n    > [!NOTE]\n\n    >  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).\n  syntax:\n    content: public static System.Net.IPHostEntry GetHostByAddress (string address);\n    parameters:\n    - id: address\n      type: System.String\n      description: An IP address.\n    return:\n      type: System.Net.IPHostEntry\n      description: An <xref href=\"System.Net.IPHostEntry\"></xref> instance.\n  overload: System.Net.Dns.GetHostByAddress*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>address</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error is encountered when resolving <code>address</code>.\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>address</code> is not a valid IP address.\n  platform:\n  - net462\n- uid: System.Net.Dns.GetHostByName(System.String)\n  id: GetHostByName(System.String)\n  parent: System.Net.Dns\n  langs:\n  - csharp\n  name: GetHostByName(String)\n  nameWithType: Dns.GetHostByName(String)\n  fullName: System.Net.Dns.GetHostByName(String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Gets the DNS information for the specified DNS host name.\n  remarks: \"The GetHostByName method queries the Internet DNS server for host information. If you pass an empty string as the host name, this method retrieves the standard host name for the local computer.  \\n  \\n For asynchronous access to DNS information, use the <xref:System.Net.Dns.BeginGetHostByName%2A> and <xref:System.Net.Dns.EndGetHostByName%2A> methods.  \\n  \\n If the <xref:System.Net.Configuration.Ipv6Element.Enabled%2A?displayProperty=fullName> property is set to `true`, the <xref:System.Net.IPHostEntry.Aliases%2A> property of the <xref:System.Net.IPHostEntry> instance returned is not populated by this method and will always be empty.  \\n  \\n> [!NOTE]\\n>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"The following example uses the GetHostByName method to get the DNS information for the specified DNS host name.  \\n  \\n [!code-vb[Dns_GetHostByName#1](~/add/codesnippet/visualbasic/m-system.net.dns.gethost_2_1.vb)]\\n [!code-cs[Dns_GetHostByName#1](~/add/codesnippet/csharp/m-system.net.dns.gethost_2_1.cs)]\\n [!code-cpp[Dns_GetHostByName#1](~/add/codesnippet/cpp/m-system.net.dns.gethost_2_1.cpp)]\"\n  syntax:\n    content: public static System.Net.IPHostEntry GetHostByName (string hostName);\n    parameters:\n    - id: hostName\n      type: System.String\n      description: The DNS name of the host.\n    return:\n      type: System.Net.IPHostEntry\n      description: An <xref href=\"System.Net.IPHostEntry\"></xref> object that contains host information for the address specified in <code>hostName</code>.\n  overload: System.Net.Dns.GetHostByName*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>hostName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The length of <code>hostName</code> is greater than 255 characters.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error is encountered when resolving <code>hostName</code>.\n  platform:\n  - net462\n- uid: System.Net.Dns.GetHostEntry(System.Net.IPAddress)\n  id: GetHostEntry(System.Net.IPAddress)\n  parent: System.Net.Dns\n  langs:\n  - csharp\n  name: GetHostEntry(IPAddress)\n  nameWithType: Dns.GetHostEntry(IPAddress)\n  fullName: System.Net.Dns.GetHostEntry(IPAddress)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Resolves an IP address to an <xref href=\"System.Net.IPHostEntry\"></xref> instance.\n  remarks: \"The GetHostEntry method queries a DNS server for the IP addresses and aliases associated with an IP address.  \\n  \\n IPv6 addresses are filtered from the results of the GetHostEntry method if the local computer does not have IPv6 installed. As a result, it is possible to get back an empty <xref:System.Net.IPHostEntry> instance if only IPv6 results where available for the `address` parameter.  \\n  \\n The <xref:System.Net.IPHostEntry.Aliases%2A> property of the <xref:System.Net.IPHostEntry> instance returned is not populated by this method and will always be empty.  \\n  \\n> [!NOTE]\\n>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"The following code example uses the <xref:System.Net.Dns.GetHostEntry%2A> method to resolve an IP address to an <xref:System.Net.IPHostEntry> instance.  \\n  \\n [!code-cpp[System.Net.Dns#1](~/add/codesnippet/cpp/m-system.net.dns.gethost_1_1.cpp)]\\n [!code-cs[System.Net.Dns#1](~/add/codesnippet/csharp/m-system.net.dns.gethost_1_1.cs)]\\n [!code-vb[System.Net.Dns#1](~/add/codesnippet/visualbasic/m-system.net.dns.gethost_1_1.vb)]\"\n  syntax:\n    content: public static System.Net.IPHostEntry GetHostEntry (System.Net.IPAddress address);\n    parameters:\n    - id: address\n      type: System.Net.IPAddress\n      description: An IP address.\n    return:\n      type: System.Net.IPHostEntry\n      description: An <xref href=\"System.Net.IPHostEntry\"></xref> instance that contains address information about the host specified in <code>address</code>.\n  overload: System.Net.Dns.GetHostEntry*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>address</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error is encountered when resolving <code>address</code>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>address</code> is an invalid IP address.\n  platform:\n  - net462\n- uid: System.Net.Dns.GetHostEntry(System.String)\n  id: GetHostEntry(System.String)\n  parent: System.Net.Dns\n  langs:\n  - csharp\n  name: GetHostEntry(String)\n  nameWithType: Dns.GetHostEntry(String)\n  fullName: System.Net.Dns.GetHostEntry(String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Resolves a host name or IP address to an <xref href=\"System.Net.IPHostEntry\"></xref> instance.\n  remarks: \"The GetHostEntry method queries a DNS server for the IP address that is associated with a host name or IP address.  \\n  \\n When an empty string is passed as the host name, this method returns the IPv4 addresses of the local host.  \\n  \\n If the host name could not be found, the <xref:System.Net.Sockets.SocketException> exception is returned with a value of 11001 (Windows Sockets error WSAHOST_NOT_FOUND). This exception can be returned if the DNS server does not respond. This exception can also be returned if the name is not an official host name or alias, or it cannot be found in the database(s) being queried.  \\n  \\n The <xref:System.ArgumentException> exception is also returned if the `hostNameOrAddress` parameter contains <xref:System.Net.IPAddress.Any> or <xref:System.Net.IPAddress.IPv6Any>.  \\n  \\n The GetHostEntry method assumes that if an IP literal string is passed in the `hostNameOrAddress` parameter that the application wants an <xref:System.Net.IPHostEntry> instance returned with all of the properties set. These properties include the <xref:System.Net.IPHostEntry.AddressList%2A>, <xref:System.Net.IPHostEntry.Aliases%2A>, and <xref:System.Net.IPHostEntry.HostName%2A>. As a result, the implementation of the GetHostEntry method exhibits the following behavior when an IP string literal is passed:  \\n  \\n1.  The method tries to parse the address. If the `hostNameOrAddress` parameter contains a legal IP string literal, then the first phase succeeds.  \\n  \\n2.  A reverse lookup using the IP address of the IP string literal is attempted to obtain the host name. This result is set as the <xref:System.Net.IPHostEntry.HostName%2A> property.  \\n  \\n3.  The host name from this reverse lookup is used again to obtain all the possible IP addresses associated with the name and set as the <xref:System.Net.IPHostEntry.AddressList%2A> property.  \\n  \\n For an IPv4 string literal, all three steps above may succeed. But it is possible for a stale DNS record for an IPv4 address that actually belongs to a different host to be returned. This may cause step #3 to fail and throw an exception (there is a DNS PTR record for the IPv4 address, but no DNS A record for the IPv4 address).  \\n  \\n For IPv6, step #2 above may fail, since most IPv6 deployments do not register the reverse (PTR) record for an IPv6 address. So this method may return the string IPv6 literal as the fully-qualified domain (FQDN) host name in the <xref:System.Net.IPHostEntry.HostName%2A> property.  \\n  \\n The <xref:System.Net.Dns.GetHostAddresses%2A> method has different behavior with respect to IP literals. If step #1 above succeeds (it successfully parses as an IP address), that address is immediately returned as the result. There is no attempt at a reverse lookup.  \\n  \\n IPv6 addresses are filtered from the results of the GetHostEntry method if the local computer does not have IPv6 installed. As a result, it is possible to get back an empty <xref:System.Net.IPHostEntry> instance if only IPv6 results where available for the `hostNameOrAddress`.parameter.  \\n  \\n The <xref:System.Net.IPHostEntry.Aliases%2A> property of the <xref:System.Net.IPHostEntry> instance returned is not populated by this method and will always be empty.  \\n  \\n> [!NOTE]\\n>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"The following example uses the GetHostEntry method to resolve an IP address to an <xref:System.Net.IPHostEntry> instance.  \\n  \\n [!code-cpp[System.Net.Dns#1](~/add/codesnippet/cpp/m-system.net.dns.gethost_0_1.cpp)]\\n [!code-cs[System.Net.Dns#1](~/add/codesnippet/csharp/m-system.net.dns.gethost_0_1.cs)]\\n [!code-vb[System.Net.Dns#1](~/add/codesnippet/visualbasic/m-system.net.dns.gethost_0_1.vb)]\"\n  syntax:\n    content: public static System.Net.IPHostEntry GetHostEntry (string hostNameOrAddress);\n    parameters:\n    - id: hostNameOrAddress\n      type: System.String\n      description: The host name or IP address to resolve.\n    return:\n      type: System.Net.IPHostEntry\n      description: An <xref href=\"System.Net.IPHostEntry\"></xref> instance that contains address information about the host specified in <code>hostNameOrAddress</code>.\n  overload: System.Net.Dns.GetHostEntry*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>hostNameOrAddress</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The length of <code>hostNameOrAddress</code> parameter is greater than 255 characters.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error was encountered when resolving the <code>hostNameOrAddress</code> parameter.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>hostNameOrAddress</code> parameter is an invalid IP address.\n  platform:\n  - net462\n- uid: System.Net.Dns.GetHostEntryAsync(System.Net.IPAddress)\n  id: GetHostEntryAsync(System.Net.IPAddress)\n  parent: System.Net.Dns\n  langs:\n  - csharp\n  name: GetHostEntryAsync(IPAddress)\n  nameWithType: Dns.GetHostEntryAsync(IPAddress)\n  fullName: System.Net.Dns.GetHostEntryAsync(IPAddress)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Resolves an IP address to an <xref href=\"System.Net.IPHostEntry\"></xref> instance as an asynchronous operation.\n  remarks: \"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the `address` has been resolved.  \\n  \\n This method queries a DNS server for the IP addresses and aliases associated with an IP address.  \\n  \\n IPv6 addresses are filtered from the results of this method if the local computer does not have IPv6 installed. As a result, it is possible to get back an empty <xref:System.Net.IPHostEntry> instance if only IPv6 results where available for the `address` parameter.  \\n  \\n The <xref:System.Net.IPHostEntry.Aliases%2A> property of the <xref:System.Net.IPHostEntry> instance returned is not populated by this method and will always be empty.  \\n  \\n> [!NOTE]\\n>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public static System.Threading.Tasks.Task<System.Net.IPHostEntry> GetHostEntryAsync (System.Net.IPAddress address);\n    parameters:\n    - id: address\n      type: System.Net.IPAddress\n      description: An IP address.\n    return:\n      type: System.Threading.Tasks.Task{System.Net.IPHostEntry}\n      description: \"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;.  \\n  \\n The task object representing the asynchronous operation. The &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; property on the task object returns an <xref href=\\\"System.Net.IPHostEntry\\\"></xref> instance that contains address information about the host specified in <code>address</code>.\"\n  overload: System.Net.Dns.GetHostEntryAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>address</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error is encountered when resolving <code>address</code>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>address</code> is an invalid IP address.\n  platform:\n  - net462\n- uid: System.Net.Dns.GetHostEntryAsync(System.String)\n  id: GetHostEntryAsync(System.String)\n  parent: System.Net.Dns\n  langs:\n  - csharp\n  name: GetHostEntryAsync(String)\n  nameWithType: Dns.GetHostEntryAsync(String)\n  fullName: System.Net.Dns.GetHostEntryAsync(String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Resolves a host name or IP address to an <xref href=\"System.Net.IPHostEntry\"></xref> instance as an asynchronous operation.\n  remarks: \"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the `hostNameOrAddress` has been resolved.  \\n  \\n This method queries a DNS server for the IP address that is associated with a host name or IP address.  \\n  \\n When an empty string is passed as the host name, this method returns the IPv4 addresses of the local host.  \\n  \\n If the host name could not be found, the <xref:System.Net.Sockets.SocketException> exception is returned with a value of 11001 (Windows Sockets error WSAHOST_NOT_FOUND). This exception can be returned if the DNS server does not respond. This exception can also be returned if the name is not an official host name or alias, or it cannot be found in the database(s) being queried.  \\n  \\n The <xref:System.ArgumentException> exception is also returned if the `hostNameOrAddress` parameter contains <xref:System.Net.IPAddress.Any> or <xref:System.Net.IPAddress.IPv6Any>.  \\n  \\n This method assumes that if an IP literal string is passed in the `hostNameOrAddress` parameter that the application wants an <xref:System.Net.IPHostEntry> instance returned with all of the properties set. These properties include the <xref:System.Net.IPHostEntry.AddressList%2A>, <xref:System.Net.IPHostEntry.Aliases%2A>, and <xref:System.Net.IPHostEntry.HostName%2A>. As a result, the implementation of this method exhibits the following behavior when an IP string literal is passed:  \\n  \\n1.  The method tries to parse the address. If the `hostNameOrAddress` parameter contains a legal IP string literal, then the first phase succeeds.  \\n  \\n2.  A reverse lookup using the IP address of the IP string literal is attempted to obtain the host name. This result is set as the <xref:System.Net.IPHostEntry.HostName%2A> property.  \\n  \\n3.  The host name from this reverse lookup is used again to obtain all the possible IP addresses associated with the name and set as the <xref:System.Net.IPHostEntry.AddressList%2A> property.  \\n  \\n For an IPv4 string literal, all three steps above may succeed. But it is possible for a stale DNS record for an IPv4 address that actually belongs to a different host to be returned. This may cause step #3 to fail and throw an exception (there is a DNS PTR record for the IPv4 address, but no DNS A record for the IPv4 address).  \\n  \\n For IPv6, step #2 above may fail, since most IPv6 deployments do not register the reverse (PTR) record for an IPv6 address. So this method may return the string IPv6 literal as the fully-qualified domain (FQDN) host name in the <xref:System.Net.IPHostEntry.HostName%2A> property.  \\n  \\n The <xref:System.Net.Dns.GetHostAddresses%2A> method has different behavior with respect to IP literals. If step #1 above succeeds (it successfully parses as an IP address), that address is immediately returned as the result. There is no attempt at a reverse lookup.  \\n  \\n IPv6 addresses are filtered from the results of this method if the local computer does not have IPv6 installed. As a result, it is possible to get back an empty <xref:System.Net.IPHostEntry> instance if only IPv6 results where available for the `hostNameOrAddress`.parameter.  \\n  \\n The <xref:System.Net.IPHostEntry.Aliases%2A> property of the <xref:System.Net.IPHostEntry> instance returned is not populated by this method and will always be empty.  \\n  \\n> [!NOTE]\\n>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public static System.Threading.Tasks.Task<System.Net.IPHostEntry> GetHostEntryAsync (string hostNameOrAddress);\n    parameters:\n    - id: hostNameOrAddress\n      type: System.String\n      description: The host name or IP address to resolve.\n    return:\n      type: System.Threading.Tasks.Task{System.Net.IPHostEntry}\n      description: \"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;.  \\n  \\n The task object representing the asynchronous operation. The &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; property on the task object returns an <xref href=\\\"System.Net.IPHostEntry\\\"></xref> instance that contains address information about the host specified in <code>hostNameOrAddress</code>.\"\n  overload: System.Net.Dns.GetHostEntryAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>hostNameOrAddress</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The length of <code>hostNameOrAddress</code> parameter is greater than 255 characters.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error was encountered when resolving the <code>hostNameOrAddress</code> parameter.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>hostNameOrAddress</code> parameter is an invalid IP address.\n  platform:\n  - net462\n- uid: System.Net.Dns.GetHostName\n  id: GetHostName\n  parent: System.Net.Dns\n  langs:\n  - csharp\n  name: GetHostName()\n  nameWithType: Dns.GetHostName()\n  fullName: System.Net.Dns.GetHostName()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Gets the host name of the local computer.\n  remarks: ''\n  example:\n  - \"The following example uses the GetHostName method to obtain the host name of the local computer.  \\n  \\n [!code-cs[Dns_GetHostName#1](~/add/codesnippet/csharp/m-system.net.dns.gethost_3_1.cs)]\\n [!code-vb[Dns_GetHostName#1](~/add/codesnippet/visualbasic/m-system.net.dns.gethost_3_1.vb)]\\n [!code-cpp[Dns_GetHostName#1](~/add/codesnippet/cpp/m-system.net.dns.gethost_3_1.cpp)]\"\n  syntax:\n    content: public static string GetHostName ();\n    parameters: []\n    return:\n      type: System.String\n      description: A string that contains the DNS host name of the local computer.\n  overload: System.Net.Dns.GetHostName*\n  exceptions:\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error is encountered when resolving the local host name.\n  platform:\n  - net462\n- uid: System.Net.Dns.Resolve(System.String)\n  id: Resolve(System.String)\n  parent: System.Net.Dns\n  langs:\n  - csharp\n  name: Resolve(String)\n  nameWithType: Dns.Resolve(String)\n  fullName: System.Net.Dns.Resolve(String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Resolves a DNS host name or IP address to an <xref href=\"System.Net.IPHostEntry\"></xref> instance.\n  remarks: \"The Resolve method queries a DNS server for the IP address associated with a host name or IP address.  \\n  \\n When `hostName` is a DNS-style host name associated with multiple IP addresses, only the first IP address that resolves to that host name is returned.  \\n  \\n If the <xref:System.Net.Configuration.Ipv6Element.Enabled%2A?displayProperty=fullName> property is set to `true`, the <xref:System.Net.IPHostEntry.Aliases%2A> property of the <xref:System.Net.IPHostEntry> instance returned is not populated by this method and will always be empty.  \\n  \\n> [!NOTE]\\n>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"The following example uses the Resolve method to resolve an IP address to an <xref:System.Net.IPHostEntry> instance.  \\n  \\n [!code-cs[Dns_Resolve#1](~/add/codesnippet/csharp/m-system.net.dns.resolve_1.cs)]\\n [!code-cpp[Dns_Resolve#1](~/add/codesnippet/cpp/m-system.net.dns.resolve_1.cpp)]\\n [!code-vb[Dns_Resolve#1](~/add/codesnippet/visualbasic/m-system.net.dns.resolve_1.vb)]\"\n  syntax:\n    content: public static System.Net.IPHostEntry Resolve (string hostName);\n    parameters:\n    - id: hostName\n      type: System.String\n      description: A DNS-style host name or IP address.\n    return:\n      type: System.Net.IPHostEntry\n      description: An <xref href=\"System.Net.IPHostEntry\"></xref> instance that contains address information about the host specified in <code>hostName</code>.\n  overload: System.Net.Dns.Resolve*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>hostName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The length of <code>hostName</code> is greater than 255 characters.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error is encountered when resolving <code>hostName</code>.\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.Net.Sockets.SocketException\n  isExternal: true\n  name: System.Net.Sockets.SocketException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.FormatException\n  isExternal: true\n  name: System.FormatException\n- uid: System.Net.Dns.BeginGetHostAddresses(System.String,System.AsyncCallback,System.Object)\n  parent: System.Net.Dns\n  isExternal: false\n  name: BeginGetHostAddresses(String,AsyncCallback,Object)\n  nameWithType: Dns.BeginGetHostAddresses(String,AsyncCallback,Object)\n  fullName: System.Net.Dns.BeginGetHostAddresses(String,AsyncCallback,Object)\n- uid: System.IAsyncResult\n  parent: System\n  isExternal: true\n  name: IAsyncResult\n  nameWithType: IAsyncResult\n  fullName: System.IAsyncResult\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.AsyncCallback\n  parent: System\n  isExternal: true\n  name: AsyncCallback\n  nameWithType: AsyncCallback\n  fullName: System.AsyncCallback\n- uid: System.Net.Dns.BeginGetHostByName(System.String,System.AsyncCallback,System.Object)\n  parent: System.Net.Dns\n  isExternal: false\n  name: BeginGetHostByName(String,AsyncCallback,Object)\n  nameWithType: Dns.BeginGetHostByName(String,AsyncCallback,Object)\n  fullName: System.Net.Dns.BeginGetHostByName(String,AsyncCallback,Object)\n- uid: System.Net.Dns.BeginGetHostEntry(System.Net.IPAddress,System.AsyncCallback,System.Object)\n  parent: System.Net.Dns\n  isExternal: false\n  name: BeginGetHostEntry(IPAddress,AsyncCallback,Object)\n  nameWithType: Dns.BeginGetHostEntry(IPAddress,AsyncCallback,Object)\n  fullName: System.Net.Dns.BeginGetHostEntry(IPAddress,AsyncCallback,Object)\n- uid: System.Net.IPAddress\n  parent: System.Net\n  isExternal: true\n  name: IPAddress\n  nameWithType: IPAddress\n  fullName: System.Net.IPAddress\n- uid: System.Net.Dns.BeginGetHostEntry(System.String,System.AsyncCallback,System.Object)\n  parent: System.Net.Dns\n  isExternal: false\n  name: BeginGetHostEntry(String,AsyncCallback,Object)\n  nameWithType: Dns.BeginGetHostEntry(String,AsyncCallback,Object)\n  fullName: System.Net.Dns.BeginGetHostEntry(String,AsyncCallback,Object)\n- uid: System.Net.Dns.BeginResolve(System.String,System.AsyncCallback,System.Object)\n  parent: System.Net.Dns\n  isExternal: false\n  name: BeginResolve(String,AsyncCallback,Object)\n  nameWithType: Dns.BeginResolve(String,AsyncCallback,Object)\n  fullName: System.Net.Dns.BeginResolve(String,AsyncCallback,Object)\n- uid: System.Net.Dns.EndGetHostAddresses(System.IAsyncResult)\n  parent: System.Net.Dns\n  isExternal: false\n  name: EndGetHostAddresses(IAsyncResult)\n  nameWithType: Dns.EndGetHostAddresses(IAsyncResult)\n  fullName: System.Net.Dns.EndGetHostAddresses(IAsyncResult)\n- uid: System.Net.IPAddress[]\n  parent: System.Net\n  isExternal: true\n  name: IPAddress\n  nameWithType: IPAddress\n  fullName: System.Net.IPAddress[]\n  spec.csharp:\n  - uid: System.Net.IPAddress\n    name: IPAddress\n    nameWithType: IPAddress\n    fullName: IPAddress[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Net.Dns.EndGetHostByName(System.IAsyncResult)\n  parent: System.Net.Dns\n  isExternal: false\n  name: EndGetHostByName(IAsyncResult)\n  nameWithType: Dns.EndGetHostByName(IAsyncResult)\n  fullName: System.Net.Dns.EndGetHostByName(IAsyncResult)\n- uid: System.Net.IPHostEntry\n  parent: System.Net\n  isExternal: false\n  name: IPHostEntry\n  nameWithType: IPHostEntry\n  fullName: System.Net.IPHostEntry\n- uid: System.Net.Dns.EndGetHostEntry(System.IAsyncResult)\n  parent: System.Net.Dns\n  isExternal: false\n  name: EndGetHostEntry(IAsyncResult)\n  nameWithType: Dns.EndGetHostEntry(IAsyncResult)\n  fullName: System.Net.Dns.EndGetHostEntry(IAsyncResult)\n- uid: System.Net.Dns.EndResolve(System.IAsyncResult)\n  parent: System.Net.Dns\n  isExternal: false\n  name: EndResolve(IAsyncResult)\n  nameWithType: Dns.EndResolve(IAsyncResult)\n  fullName: System.Net.Dns.EndResolve(IAsyncResult)\n- uid: System.Net.Dns.GetHostAddresses(System.String)\n  parent: System.Net.Dns\n  isExternal: false\n  name: GetHostAddresses(String)\n  nameWithType: Dns.GetHostAddresses(String)\n  fullName: System.Net.Dns.GetHostAddresses(String)\n- uid: System.Net.Dns.GetHostAddressesAsync(System.String)\n  parent: System.Net.Dns\n  isExternal: false\n  name: GetHostAddressesAsync(String)\n  nameWithType: Dns.GetHostAddressesAsync(String)\n  fullName: System.Net.Dns.GetHostAddressesAsync(String)\n- uid: System.Threading.Tasks.Task{System.Net.IPAddress[]}\n  parent: System.Threading.Tasks\n  isExternal: true\n  name: Task<IPAddress>\n  nameWithType: Task<IPAddress>\n  fullName: System.Threading.Tasks.Task<System.Net.IPAddress[]>\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: Task<System.Net.IPAddress[]>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Net.IPAddress\n    name: IPAddress\n    nameWithType: IPAddress\n    fullName: IPAddress[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Net.Dns.GetHostByAddress(System.Net.IPAddress)\n  parent: System.Net.Dns\n  isExternal: false\n  name: GetHostByAddress(IPAddress)\n  nameWithType: Dns.GetHostByAddress(IPAddress)\n  fullName: System.Net.Dns.GetHostByAddress(IPAddress)\n- uid: System.Net.Dns.GetHostByAddress(System.String)\n  parent: System.Net.Dns\n  isExternal: false\n  name: GetHostByAddress(String)\n  nameWithType: Dns.GetHostByAddress(String)\n  fullName: System.Net.Dns.GetHostByAddress(String)\n- uid: System.Net.Dns.GetHostByName(System.String)\n  parent: System.Net.Dns\n  isExternal: false\n  name: GetHostByName(String)\n  nameWithType: Dns.GetHostByName(String)\n  fullName: System.Net.Dns.GetHostByName(String)\n- uid: System.Net.Dns.GetHostEntry(System.Net.IPAddress)\n  parent: System.Net.Dns\n  isExternal: false\n  name: GetHostEntry(IPAddress)\n  nameWithType: Dns.GetHostEntry(IPAddress)\n  fullName: System.Net.Dns.GetHostEntry(IPAddress)\n- uid: System.Net.Dns.GetHostEntry(System.String)\n  parent: System.Net.Dns\n  isExternal: false\n  name: GetHostEntry(String)\n  nameWithType: Dns.GetHostEntry(String)\n  fullName: System.Net.Dns.GetHostEntry(String)\n- uid: System.Net.Dns.GetHostEntryAsync(System.Net.IPAddress)\n  parent: System.Net.Dns\n  isExternal: false\n  name: GetHostEntryAsync(IPAddress)\n  nameWithType: Dns.GetHostEntryAsync(IPAddress)\n  fullName: System.Net.Dns.GetHostEntryAsync(IPAddress)\n- uid: System.Threading.Tasks.Task{System.Net.IPHostEntry}\n  parent: System.Threading.Tasks\n  isExternal: true\n  name: Task<IPHostEntry>\n  nameWithType: Task<IPHostEntry>\n  fullName: System.Threading.Tasks.Task<System.Net.IPHostEntry>\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: Task<System.Net.IPHostEntry>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Net.IPHostEntry\n    name: IPHostEntry\n    nameWithType: IPHostEntry\n    fullName: IPHostEntry\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Net.Dns.GetHostEntryAsync(System.String)\n  parent: System.Net.Dns\n  isExternal: false\n  name: GetHostEntryAsync(String)\n  nameWithType: Dns.GetHostEntryAsync(String)\n  fullName: System.Net.Dns.GetHostEntryAsync(String)\n- uid: System.Net.Dns.GetHostName\n  parent: System.Net.Dns\n  isExternal: false\n  name: GetHostName()\n  nameWithType: Dns.GetHostName()\n  fullName: System.Net.Dns.GetHostName()\n- uid: System.Net.Dns.Resolve(System.String)\n  parent: System.Net.Dns\n  isExternal: false\n  name: Resolve(String)\n  nameWithType: Dns.Resolve(String)\n  fullName: System.Net.Dns.Resolve(String)\n- uid: System.Net.Dns.BeginGetHostAddresses*\n  parent: System.Net.Dns\n  isExternal: false\n  name: BeginGetHostAddresses\n  nameWithType: Dns.BeginGetHostAddresses\n- uid: System.Net.Dns.BeginGetHostByName*\n  parent: System.Net.Dns\n  isExternal: false\n  name: BeginGetHostByName\n  nameWithType: Dns.BeginGetHostByName\n- uid: System.Net.Dns.BeginGetHostEntry*\n  parent: System.Net.Dns\n  isExternal: false\n  name: BeginGetHostEntry\n  nameWithType: Dns.BeginGetHostEntry\n- uid: System.Net.Dns.BeginResolve*\n  parent: System.Net.Dns\n  isExternal: false\n  name: BeginResolve\n  nameWithType: Dns.BeginResolve\n- uid: System.Net.Dns.EndGetHostAddresses*\n  parent: System.Net.Dns\n  isExternal: false\n  name: EndGetHostAddresses\n  nameWithType: Dns.EndGetHostAddresses\n- uid: System.Net.Dns.EndGetHostByName*\n  parent: System.Net.Dns\n  isExternal: false\n  name: EndGetHostByName\n  nameWithType: Dns.EndGetHostByName\n- uid: System.Net.Dns.EndGetHostEntry*\n  parent: System.Net.Dns\n  isExternal: false\n  name: EndGetHostEntry\n  nameWithType: Dns.EndGetHostEntry\n- uid: System.Net.Dns.EndResolve*\n  parent: System.Net.Dns\n  isExternal: false\n  name: EndResolve\n  nameWithType: Dns.EndResolve\n- uid: System.Net.Dns.GetHostAddresses*\n  parent: System.Net.Dns\n  isExternal: false\n  name: GetHostAddresses\n  nameWithType: Dns.GetHostAddresses\n- uid: System.Net.Dns.GetHostAddressesAsync*\n  parent: System.Net.Dns\n  isExternal: false\n  name: GetHostAddressesAsync\n  nameWithType: Dns.GetHostAddressesAsync\n- uid: System.Net.Dns.GetHostByAddress*\n  parent: System.Net.Dns\n  isExternal: false\n  name: GetHostByAddress\n  nameWithType: Dns.GetHostByAddress\n- uid: System.Net.Dns.GetHostByName*\n  parent: System.Net.Dns\n  isExternal: false\n  name: GetHostByName\n  nameWithType: Dns.GetHostByName\n- uid: System.Net.Dns.GetHostEntry*\n  parent: System.Net.Dns\n  isExternal: false\n  name: GetHostEntry\n  nameWithType: Dns.GetHostEntry\n- uid: System.Net.Dns.GetHostEntryAsync*\n  parent: System.Net.Dns\n  isExternal: false\n  name: GetHostEntryAsync\n  nameWithType: Dns.GetHostEntryAsync\n- uid: System.Net.Dns.GetHostName*\n  parent: System.Net.Dns\n  isExternal: false\n  name: GetHostName\n  nameWithType: Dns.GetHostName\n- uid: System.Net.Dns.Resolve*\n  parent: System.Net.Dns\n  isExternal: false\n  name: Resolve\n  nameWithType: Dns.Resolve\n"}