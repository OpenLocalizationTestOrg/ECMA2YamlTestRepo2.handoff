{"nodes":[{"pos":[362,410],"content":"Represents a complex type in a conceptual model.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents a complex type in a conceptual model.","pos":[0,48]}]},{"pos":[423,864],"content":"The ComplexType in a conceptual model represents a type that includes a set of properties like an entity type but does not include a key property. For more information about the complex types in a conceptual model, see [Complex Type](http://msdn.microsoft.com/en-us/271d59a2-990e-4d24-b427-27a1c3e99b42) and [How to: Define a Model with Complex Types (Entity Framework)](http://msdn.microsoft.com/en-us/b13b24d5-05d1-4746-b0d2-5472796240c6).","needQuote":false,"needEscape":true,"nodes":[{"content":"The ComplexType in a conceptual model represents a type that includes a set of properties like an entity type but does not include a key property.","pos":[0,146]},{"content":"For more information about the complex types in a conceptual model, see <bpt id=\"p1\">[</bpt>Complex Type<ept id=\"p1\">](http://msdn.microsoft.com/en-us/271d59a2-990e-4d24-b427-27a1c3e99b42)</ept> and <bpt id=\"p2\">[</bpt>How to: Define a Model with Complex Types (Entity Framework)<ept id=\"p2\">](http://msdn.microsoft.com/en-us/b13b24d5-05d1-4746-b0d2-5472796240c6)</ept>.","pos":[147,441],"source":" For more information about the complex types in a conceptual model, see [Complex Type](http://msdn.microsoft.com/en-us/271d59a2-990e-4d24-b427-27a1c3e99b42) and [How to: Define a Model with Complex Types (Entity Framework)](http://msdn.microsoft.com/en-us/b13b24d5-05d1-4746-b0d2-5472796240c6)."}]},{"pos":[8297,8392],"content":"Gets the built-in type kind for this <bpt id=\"p1\">&lt;xref href=\"System.Data.Metadata.Edm.ComplexType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets the built-in type kind for this <xref href=\"System.Data.Metadata.Edm.ComplexType\"></xref>."},{"pos":[8582,8759],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.Metadata.Edm.BuiltInTypeKind\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that represents the built-in type kind for this <bpt id=\"p2\">&lt;xref href=\"System.Data.Metadata.Edm.ComplexType\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.Metadata.Edm.BuiltInTypeKind\"></xref> object that represents the built-in type kind for this <xref href=\"System.Data.Metadata.Edm.ComplexType\"></xref>."},{"pos":[9226,9321],"content":"Gets the list of properties for this <bpt id=\"p1\">&lt;xref href=\"System.Data.Metadata.Edm.ComplexType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets the list of properties for this <xref href=\"System.Data.Metadata.Edm.ComplexType\"></xref>."},{"pos":[9595,9789],"content":"A collection of type <ph id=\"ph1\">&amp;lt;</ph>xref:System.Data.Metadata.Edm.ReadOnlyMetadataCollection%601<ph id=\"ph2\">&amp;gt;</ph> that contains the list of properties for this <bpt id=\"p1\">&lt;xref href=\"System.Data.Metadata.Edm.ComplexType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A collection of type &lt;xref:System.Data.Metadata.Edm.ReadOnlyMetadataCollection%601&gt; that contains the list of properties for this <xref href=\"System.Data.Metadata.Edm.ComplexType\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Data.Metadata.Edm.ComplexType\n  id: ComplexType\n  children:\n  - System.Data.Metadata.Edm.ComplexType.BuiltInTypeKind\n  - System.Data.Metadata.Edm.ComplexType.Properties\n  langs:\n  - csharp\n  name: ComplexType\n  nameWithType: ComplexType\n  fullName: System.Data.Metadata.Edm.ComplexType\n  type: Class\n  summary: Represents a complex type in a conceptual model.\n  remarks: 'The ComplexType in a conceptual model represents a type that includes a set of properties like an entity type but does not include a key property. For more information about the complex types in a conceptual model, see [Complex Type](http://msdn.microsoft.com/en-us/271d59a2-990e-4d24-b427-27a1c3e99b42) and [How to: Define a Model with Complex Types (Entity Framework)](http://msdn.microsoft.com/en-us/b13b24d5-05d1-4746-b0d2-5472796240c6).'\n  example:\n  - \"The following code sample gets a metadata workspace from the connection and uses that metadata workspace to retrieve information about the properties of the complex types in the specified model. Note that the metadata workspace is a runtime service component that provides support for retrieving metadata.  \\n  \\n The code sample uses a <xref:System.Data.Metadata.Edm.DataSpace> to specify the model. The <xref:System.Data.Metadata.Edm.DataSpace> represents the default name for the conceptual model. The code sample uses the CustomerComplexAddr model that is provided in [How to: Define a Model with Complex Types (Entity Framework)](http://msdn.microsoft.com/en-us/b13b24d5-05d1-4746-b0d2-5472796240c6) topic. For an example of the application config file, see [Implementing Complex Type (EDM)](http://msdn.microsoft.com/en-us/82f7fc69-808c-40ff-a23f-ee3fb8dbd9e2) topic.  \\n  \\n```c#  \\nusing System;  \\nusing System.Data;  \\nusing System.Collections.ObjectModel;  \\nusing System.Data.EntityClient;  \\nusing System.Data.Metadata.Edm;  \\n  \\nclass GetComplexTypeMembersExample  \\n{  \\n  static void Main()  \\n  {  \\n    try  \\n    {  \\n      // Establish a connection to the underlying data provider by   \\n      // using the connection string specified in the config file.  \\n      using (EntityConnection connection =  \\n        new EntityConnection(\\\"Name=CustomerWComplexAddrEntities\\\"))  \\n      {  \\n         // Open the connection.  \\n         connection.Open();  \\n  \\n         // Access the metadata workspace.  \\n         MetadataWorkspace workspace =   \\n            connection.GetMetadataWorkspace();  \\n  \\n         // Get properties of complex types.  \\n         GetProperties(workspace, DataSpace.CSpace);  \\n      }  \\n    }  \\n    catch (MetadataException exceptionMetadata)  \\n    {  \\n       Console.WriteLine(\\\"MetadataException: {0}\\\",  \\n              exceptionMetadata.Message);  \\n    }  \\n    catch (System.Data.MappingException exceptionMapping)  \\n    {  \\n       Console.WriteLine(\\\"MappingException: {0}\\\",  \\n               exceptionMapping.Message);  \\n    }  \\n  }  \\n  \\n  public static void GetProperties(MetadataWorkspace workspace,   \\n      DataSpace model)  \\n  {  \\n    // Get a collection of complex types.  \\n    ReadOnlyCollection<ComplexType> complexTypes =  \\n       workspace.GetItems<ComplexType>(model);  \\n  \\n    // Iterate through the collection to get each complex type.  \\n    foreach (ComplexType complexType in complexTypes)  \\n    {  \\n       Console.WriteLine(  \\n         \\\"\\\\n\\\\n***ComplexType Name: {0}, Namespace: {1}\\\",  \\n         complexType.Name,  \\n         complexType.NamespaceName);  \\n  \\n       Console.WriteLine(  \\n          \\\"\\\\nGet the properties of this \\\" +  \\n          \\\"ComplexType object ==>\\\");  \\n          // Iterate through the collection to get each property of the   \\n          // current ComplexType object.  \\n          foreach (EdmProperty property in complexType.Properties)  \\n          {  \\n            Console.Write(\\\"   Property Name: {0} \\\", property.Name);  \\n  \\n            Console.WriteLine(  \\n               \\\"   Property declaring Type: {0}, edmtype: {1},\\\" +  \\n               \\\" default: {2}, nullable: {3} \\\",  \\n               property.DeclaringType, property.TypeUsage.EdmType,  \\n               property.Default, property.Nullable);  \\n          }  \\n      }  \\n  }  \\n}  \\n```  \\n  \\n```vb  \\nImports System  \\nImports System.Collections.ObjectModel  \\nImports System.Data  \\nImports System.Data.EntityClient  \\nImports System.Data.Metadata.Edm  \\n  \\nClass GetComplexTypeMembersExample  \\n  Public Shared Sub Main()  \\n    Try  \\n      ' Establish a connection to the underlying data provider by   \\n      ' using the connection string specified in the config file.  \\n      Using connection As EntityConnection = _  \\n         New EntityConnection(\\\"Name=CustomerWComplexAddrEntities\\\")  \\n  \\n         ' Open the conection.  \\n         connection.Open()  \\n  \\n         ' Access the metadata workspace.  \\n         Dim workspace As MetadataWorkspace = _  \\n            connection.GetMetadataWorkspace  \\n  \\n         ' Get properties of complex types.  \\n         GetProperties(workspace, DataSpace.CSpace)  \\n      End Using  \\n    Catch exceptionMetadata As MetadataException  \\n       Console.WriteLine(\\\"MetadataException: {0}\\\", _  \\n           exceptionMetadata.Message)  \\n    Catch exceptionMapping As MappingException  \\n       Console.WriteLine(\\\"MappingException: {0}\\\", _  \\n           exceptionMapping.Message)  \\n     End Try  \\n  End Sub  \\n  \\n  Public Shared Sub GetProperties( _  \\n    ByVal workspace As MetadataWorkspace, ByVal model As DataSpace)  \\n  \\n    ' Get a collection of complex types.  \\n    Dim complexTypes As ReadOnlyCollection(Of ComplexType) = _  \\n       workspace.GetItems(Of ComplexType)(model)  \\n  \\n    ' Iterate through the collection to get each complex type.  \\n    Dim complexType As ComplexType  \\n    For Each complexType In complexTypes  \\n       Console.WriteLine( _  \\n          ControlChars.Lf & ControlChars.Lf & _  \\n          \\\"***ComplexType Name: {0}, Namespace: {1}\\\", _  \\n          complexType.Name, complexType.NamespaceName)  \\n  \\n       Console.WriteLine(ControlChars.Lf & _  \\n          \\\"Get the properties of this ComplexType object ==>\\\")  \\n  \\n          ' Iterate through the collection to get each property of the   \\n          ' current ComplexType object.  \\n          Dim property1 As EdmProperty  \\n          For Each property1 In complexType.Properties  \\n            Console.Write(\\\"   Property Name: {0} \\\", property1.Name)  \\n            Console.WriteLine( _  \\n              \\\"   Property declaring Type: {0}, edmtype: {1}, \\\" + _  \\n              \\\"default: {2}, nullable: {3} \\\", _  \\n              New Object() {property1.DeclaringType, _  \\n              property1.TypeUsage.EdmType, _  \\n              property1.Default, property1.Nullable})  \\n          Next  \\n        Next  \\n    End Sub  \\nEnd Class  \\n```\"\n  syntax:\n    content: 'public class ComplexType : System.Data.Metadata.Edm.StructuralType'\n  inheritance:\n  - System.Object\n  - System.Data.Metadata.Edm.MetadataItem\n  - System.Data.Metadata.Edm.GlobalItem\n  - System.Data.Metadata.Edm.EdmType\n  - System.Data.Metadata.Edm.StructuralType\n  implements: []\n  inheritedMembers:\n  - System.Data.Metadata.Edm.EdmType.Abstract\n  - System.Data.Metadata.Edm.EdmType.BaseType\n  - System.Data.Metadata.Edm.EdmType.FullName\n  - System.Data.Metadata.Edm.EdmType.GetCollectionType\n  - System.Data.Metadata.Edm.EdmType.Name\n  - System.Data.Metadata.Edm.EdmType.NamespaceName\n  - System.Data.Metadata.Edm.EdmType.ToString\n  - System.Data.Metadata.Edm.MetadataItem.Documentation\n  - System.Data.Metadata.Edm.MetadataItem.GetBuiltInType(System.Data.Metadata.Edm.BuiltInTypeKind)\n  - System.Data.Metadata.Edm.MetadataItem.GetGeneralFacetDescriptions\n  - System.Data.Metadata.Edm.MetadataItem.MetadataProperties\n  - System.Data.Metadata.Edm.StructuralType.Members\n  platform:\n  - net462\n- uid: System.Data.Metadata.Edm.ComplexType.BuiltInTypeKind\n  id: BuiltInTypeKind\n  parent: System.Data.Metadata.Edm.ComplexType\n  langs:\n  - csharp\n  name: BuiltInTypeKind\n  nameWithType: ComplexType.BuiltInTypeKind\n  fullName: System.Data.Metadata.Edm.ComplexType.BuiltInTypeKind\n  type: Property\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Metadata.Edm\n  summary: Gets the built-in type kind for this <xref href=\"System.Data.Metadata.Edm.ComplexType\"></xref>.\n  syntax:\n    content: public override System.Data.Metadata.Edm.BuiltInTypeKind BuiltInTypeKind { get; }\n    return:\n      type: System.Data.Metadata.Edm.BuiltInTypeKind\n      description: A <xref href=\"System.Data.Metadata.Edm.BuiltInTypeKind\"></xref> object that represents the built-in type kind for this <xref href=\"System.Data.Metadata.Edm.ComplexType\"></xref>.\n  overload: System.Data.Metadata.Edm.ComplexType.BuiltInTypeKind*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Metadata.Edm.ComplexType.Properties\n  id: Properties\n  parent: System.Data.Metadata.Edm.ComplexType\n  langs:\n  - csharp\n  name: Properties\n  nameWithType: ComplexType.Properties\n  fullName: System.Data.Metadata.Edm.ComplexType.Properties\n  type: Property\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Metadata.Edm\n  summary: Gets the list of properties for this <xref href=\"System.Data.Metadata.Edm.ComplexType\"></xref>.\n  syntax:\n    content: public System.Data.Metadata.Edm.ReadOnlyMetadataCollection<System.Data.Metadata.Edm.EdmProperty> Properties { get; }\n    return:\n      type: System.Data.Metadata.Edm.ReadOnlyMetadataCollection{System.Data.Metadata.Edm.EdmProperty}\n      description: A collection of type &lt;xref:System.Data.Metadata.Edm.ReadOnlyMetadataCollection%601&gt; that contains the list of properties for this <xref href=\"System.Data.Metadata.Edm.ComplexType\"></xref>.\n  overload: System.Data.Metadata.Edm.ComplexType.Properties*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Data.Metadata.Edm.StructuralType\n  isExternal: false\n  name: System.Data.Metadata.Edm.StructuralType\n- uid: System.Data.Metadata.Edm.ComplexType.BuiltInTypeKind\n  parent: System.Data.Metadata.Edm.ComplexType\n  isExternal: false\n  name: BuiltInTypeKind\n  nameWithType: ComplexType.BuiltInTypeKind\n  fullName: System.Data.Metadata.Edm.ComplexType.BuiltInTypeKind\n- uid: System.Data.Metadata.Edm.BuiltInTypeKind\n  parent: System.Data.Metadata.Edm\n  isExternal: false\n  name: BuiltInTypeKind\n  nameWithType: BuiltInTypeKind\n  fullName: System.Data.Metadata.Edm.BuiltInTypeKind\n- uid: System.Data.Metadata.Edm.ComplexType.Properties\n  parent: System.Data.Metadata.Edm.ComplexType\n  isExternal: false\n  name: Properties\n  nameWithType: ComplexType.Properties\n  fullName: System.Data.Metadata.Edm.ComplexType.Properties\n- uid: System.Data.Metadata.Edm.ReadOnlyMetadataCollection{System.Data.Metadata.Edm.EdmProperty}\n  parent: System.Data.Metadata.Edm\n  isExternal: false\n  name: ReadOnlyMetadataCollection<EdmProperty>\n  nameWithType: ReadOnlyMetadataCollection<EdmProperty>\n  fullName: System.Data.Metadata.Edm.ReadOnlyMetadataCollection<System.Data.Metadata.Edm.EdmProperty>\n  spec.csharp:\n  - uid: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1\n    name: ReadOnlyMetadataCollection\n    nameWithType: ReadOnlyMetadataCollection\n    fullName: ReadOnlyMetadataCollection<System.Data.Metadata.Edm.EdmProperty>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Data.Metadata.Edm.EdmProperty\n    name: EdmProperty\n    nameWithType: EdmProperty\n    fullName: EdmProperty\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Data.Metadata.Edm.ComplexType.BuiltInTypeKind*\n  parent: System.Data.Metadata.Edm.ComplexType\n  isExternal: false\n  name: BuiltInTypeKind\n  nameWithType: ComplexType.BuiltInTypeKind\n- uid: System.Data.Metadata.Edm.ComplexType.Properties*\n  parent: System.Data.Metadata.Edm.ComplexType\n  isExternal: false\n  name: Properties\n  nameWithType: ComplexType.Properties\n"}