{"nodes":[{"pos":[653,762],"content":"Wraps a managed object holding a handle to a resource that is passed to unmanaged code using platform invoke.","needQuote":true,"needEscape":true,"nodes":[{"content":"Wraps a managed object holding a handle to a resource that is passed to unmanaged code using platform invoke.","pos":[0,109]}]},{"pos":[775,2515],"content":"> [!IMPORTANT] >  Starting with the .NET Framework 2.0, the functionality of the HandleRef class has been replaced by the <xref:System.Runtime.InteropServices.SafeHandle> class and its derived classes, as well as by the <xref:System.Runtime.InteropServices.CriticalHandle> class.       If you use platform invoke to call a managed object, and the object is not referenced elsewhere after the platform invoke call, it is possible for the garbage collector to finalize the managed object. This action releases the resource and invalidates the handle, causing the platform invoke call to fail. Wrapping a handle with HandleRef guarantees that the managed object is not garbage collected until the platform invoke call completes. For a description of platform invoke services, see [Consuming Unmanaged DLL Functions](~/add/includes/ajax-current-ext-md.md).       The HandleRef value type, like <xref:System.Runtime.InteropServices.GCHandle>, is a special type recognized by the interop marshaler. A normal, nonpinned <xref:System.Runtime.InteropServices.GCHandle> also prevents untimely garbage collection, yet HandleRef provides better performance. Although using HandleRef to keep an object alive for the duration of a platform invoke call is preferred, you can also use the <xref:System.GC.KeepAlive%2A?displayProperty=fullName> method for the same purpose.       The HandleRef constructor takes two parameters: an <xref:System.Object> representing the wrapper, and an <xref:System.IntPtr> representing the unmanaged handle. The interop marshaler passes only the handle to unmanaged code, and guarantees that the wrapper (passed as the first parameter to the constructor of the `HandleRef`) remains alive for the duration of the call.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&gt; [!IMPORTANT]</ph> &gt;  Starting with the .NET Framework 2.0, the functionality of the HandleRef class has been replaced by the &lt;xref:System.Runtime.InteropServices.SafeHandle&gt; class and its derived classes, as well as by the &lt;xref:System.Runtime.InteropServices.CriticalHandle&gt; class.","pos":[0,279],"source":"> [!IMPORTANT] >  Starting with the .NET Framework 2.0, the functionality of the HandleRef class has been replaced by the <xref:System.Runtime.InteropServices.SafeHandle> class and its derived classes, as well as by the <xref:System.Runtime.InteropServices.CriticalHandle> class."},{"content":"If you use platform invoke to call a managed object, and the object is not referenced elsewhere after the platform invoke call, it is possible for the garbage collector to finalize the managed object.","pos":[286,486]},{"content":"This action releases the resource and invalidates the handle, causing the platform invoke call to fail.","pos":[487,590]},{"content":"Wrapping a handle with HandleRef guarantees that the managed object is not garbage collected until the platform invoke call completes.","pos":[591,725]},{"content":"For a description of platform invoke services, see <bpt id=\"p1\">[</bpt>Consuming Unmanaged DLL Functions<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[726,852],"source":" For a description of platform invoke services, see [Consuming Unmanaged DLL Functions](~/add/includes/ajax-current-ext-md.md)."},{"content":"The HandleRef value type, like &lt;xref:System.Runtime.InteropServices.GCHandle&gt;, is a special type recognized by the interop marshaler.","pos":[859,992],"source":"       The HandleRef value type, like <xref:System.Runtime.InteropServices.GCHandle>, is a special type recognized by the interop marshaler."},{"content":"A normal, nonpinned &lt;xref:System.Runtime.InteropServices.GCHandle&gt; also prevents untimely garbage collection, yet HandleRef provides better performance.","pos":[993,1145],"source":" A normal, nonpinned <xref:System.Runtime.InteropServices.GCHandle> also prevents untimely garbage collection, yet HandleRef provides better performance."},{"content":"Although using HandleRef to keep an object alive for the duration of a platform invoke call is preferred, you can also use the &lt;xref:System.GC.KeepAlive%2A?displayProperty=fullName&gt; method for the same purpose.","pos":[1146,1356],"source":" Although using HandleRef to keep an object alive for the duration of a platform invoke call is preferred, you can also use the <xref:System.GC.KeepAlive%2A?displayProperty=fullName> method for the same purpose."},{"content":"The HandleRef constructor takes two parameters: an &lt;xref:System.Object&gt; representing the wrapper, and an &lt;xref:System.IntPtr&gt; representing the unmanaged handle.","pos":[1363,1523],"source":"       The HandleRef constructor takes two parameters: an <xref:System.Object> representing the wrapper, and an <xref:System.IntPtr> representing the unmanaged handle."},{"content":"The interop marshaler passes only the handle to unmanaged code, and guarantees that the wrapper (passed as the first parameter to the constructor of the <ph id=\"ph1\">`HandleRef`</ph>) remains alive for the duration of the call.","pos":[1524,1733],"source":" The interop marshaler passes only the handle to unmanaged code, and guarantees that the wrapper (passed as the first parameter to the constructor of the `HandleRef`) remains alive for the duration of the call."}]},{"pos":[3167,3345],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Runtime.InteropServices.HandleRef\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the object to wrap and a handle to the resource used by unmanaged code.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Runtime.InteropServices.HandleRef\"></xref> class with the object to wrap and a handle to the resource used by unmanaged code."},{"pos":[3498,3583],"content":"A managed object that should not be finalized until the platform invoke call returns.","needQuote":true,"needEscape":true,"nodes":[{"content":"A managed object that should not be finalized until the platform invoke call returns.","pos":[0,85]}]},{"pos":[3646,3708],"content":"An <xref:System.IntPtr> that indicates a handle to a resource.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.IntPtr&gt; that indicates a handle to a resource.","pos":[0,62],"source":"An <xref:System.IntPtr> that indicates a handle to a resource."}]},{"pos":[4155,4185],"content":"Gets the handle to a resource.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the handle to a resource.","pos":[0,30]}]},{"pos":[4296,4321],"content":"The handle to a resource.","needQuote":true,"needEscape":true,"nodes":[{"content":"The handle to a resource.","pos":[0,25]}]},{"pos":[5144,5156],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[5214,5226],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[5804,5922],"content":"Returns the internal integer representation of a <bpt id=\"p1\">&lt;xref href=\"System.Runtime.InteropServices.HandleRef\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Returns the internal integer representation of a <xref href=\"System.Runtime.InteropServices.HandleRef\"></xref> object."},{"pos":[6130,6253],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Runtime.InteropServices.HandleRef\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object to retrieve an internal integer representation from.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Runtime.InteropServices.HandleRef\"></xref> object to retrieve an internal integer representation from."},{"pos":[6311,6429],"content":"An &lt;xref:System.IntPtr&gt; object that represents a <bpt id=\"p1\">&lt;xref href=\"System.Runtime.InteropServices.HandleRef\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"An <xref:System.IntPtr> object that represents a <xref href=\"System.Runtime.InteropServices.HandleRef\"></xref> object."},{"pos":[6884,6933],"content":"Gets the object holding the handle to a resource.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the object holding the handle to a resource.","pos":[0,49]}]},{"pos":[7045,7089],"content":"The object holding the handle to a resource.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object holding the handle to a resource.","pos":[0,44]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Runtime.InteropServices.HandleRef\n  id: HandleRef\n  children:\n  - System.Runtime.InteropServices.HandleRef.#ctor(System.Object,System.IntPtr)\n  - System.Runtime.InteropServices.HandleRef.Handle\n  - System.Runtime.InteropServices.HandleRef.op_Explicit(System.Runtime.InteropServices.HandleRef to System.IntPtr)\n  - System.Runtime.InteropServices.HandleRef.ToIntPtr(System.Runtime.InteropServices.HandleRef)\n  - System.Runtime.InteropServices.HandleRef.Wrapper\n  langs:\n  - csharp\n  name: HandleRef\n  nameWithType: HandleRef\n  fullName: System.Runtime.InteropServices.HandleRef\n  type: Struct\n  summary: Wraps a managed object holding a handle to a resource that is passed to unmanaged code using platform invoke.\n  remarks: \"> [!IMPORTANT]\\n>  Starting with the .NET Framework 2.0, the functionality of the HandleRef class has been replaced by the <xref:System.Runtime.InteropServices.SafeHandle> class and its derived classes, as well as by the <xref:System.Runtime.InteropServices.CriticalHandle> class.  \\n  \\n If you use platform invoke to call a managed object, and the object is not referenced elsewhere after the platform invoke call, it is possible for the garbage collector to finalize the managed object. This action releases the resource and invalidates the handle, causing the platform invoke call to fail. Wrapping a handle with HandleRef guarantees that the managed object is not garbage collected until the platform invoke call completes. For a description of platform invoke services, see [Consuming Unmanaged DLL Functions](~/add/includes/ajax-current-ext-md.md).  \\n  \\n The HandleRef value type, like <xref:System.Runtime.InteropServices.GCHandle>, is a special type recognized by the interop marshaler. A normal, nonpinned <xref:System.Runtime.InteropServices.GCHandle> also prevents untimely garbage collection, yet HandleRef provides better performance. Although using HandleRef to keep an object alive for the duration of a platform invoke call is preferred, you can also use the <xref:System.GC.KeepAlive%2A?displayProperty=fullName> method for the same purpose.  \\n  \\n The HandleRef constructor takes two parameters: an <xref:System.Object> representing the wrapper, and an <xref:System.IntPtr> representing the unmanaged handle. The interop marshaler passes only the handle to unmanaged code, and guarantees that the wrapper (passed as the first parameter to the constructor of the `HandleRef`) remains alive for the duration of the call.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public struct HandleRef\n  inheritance:\n  - System.ValueType\n  implements: []\n  platform:\n  - net462\n- uid: System.Runtime.InteropServices.HandleRef.#ctor(System.Object,System.IntPtr)\n  id: '#ctor(System.Object,System.IntPtr)'\n  parent: System.Runtime.InteropServices.HandleRef\n  langs:\n  - csharp\n  name: HandleRef(Object,IntPtr)\n  nameWithType: HandleRef.HandleRef(Object,IntPtr)\n  fullName: System.Runtime.InteropServices.HandleRef.HandleRef(Object,IntPtr)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.InteropServices\n  summary: Initializes a new instance of the <xref href=\"System.Runtime.InteropServices.HandleRef\"></xref> class with the object to wrap and a handle to the resource used by unmanaged code.\n  syntax:\n    content: public HandleRef (object wrapper, IntPtr handle);\n    parameters:\n    - id: wrapper\n      type: System.Object\n      description: A managed object that should not be finalized until the platform invoke call returns.\n    - id: handle\n      type: System.IntPtr\n      description: An <xref:System.IntPtr> that indicates a handle to a resource.\n  overload: System.Runtime.InteropServices.HandleRef.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.InteropServices.HandleRef.Handle\n  id: Handle\n  parent: System.Runtime.InteropServices.HandleRef\n  langs:\n  - csharp\n  name: Handle\n  nameWithType: HandleRef.Handle\n  fullName: System.Runtime.InteropServices.HandleRef.Handle\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.InteropServices\n  summary: Gets the handle to a resource.\n  syntax:\n    content: public IntPtr Handle { get; }\n    return:\n      type: System.IntPtr\n      description: The handle to a resource.\n  overload: System.Runtime.InteropServices.HandleRef.Handle*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.InteropServices.HandleRef.op_Explicit(System.Runtime.InteropServices.HandleRef to System.IntPtr)\n  id: op_Explicit(System.Runtime.InteropServices.HandleRef to System.IntPtr)\n  parent: System.Runtime.InteropServices.HandleRef\n  langs:\n  - csharp\n  name: op_Explicit(HandleRef)\n  nameWithType: HandleRef.op_Explicit(HandleRef)\n  fullName: System.Runtime.InteropServices.HandleRef.op_Explicit(HandleRef)\n  type: Operator\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.InteropServices\n  syntax:\n    content: public static IntPtr op_Explicit (System.Runtime.InteropServices.HandleRef value);\n    parameters:\n    - id: value\n      type: System.Runtime.InteropServices.HandleRef\n      description: To be added.\n    return:\n      type: System.IntPtr\n      description: To be added.\n  overload: System.Runtime.InteropServices.HandleRef.op_Explicit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.InteropServices.HandleRef.ToIntPtr(System.Runtime.InteropServices.HandleRef)\n  id: ToIntPtr(System.Runtime.InteropServices.HandleRef)\n  parent: System.Runtime.InteropServices.HandleRef\n  langs:\n  - csharp\n  name: ToIntPtr(HandleRef)\n  nameWithType: HandleRef.ToIntPtr(HandleRef)\n  fullName: System.Runtime.InteropServices.HandleRef.ToIntPtr(HandleRef)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.InteropServices\n  summary: Returns the internal integer representation of a <xref href=\"System.Runtime.InteropServices.HandleRef\"></xref> object.\n  syntax:\n    content: public static IntPtr ToIntPtr (System.Runtime.InteropServices.HandleRef value);\n    parameters:\n    - id: value\n      type: System.Runtime.InteropServices.HandleRef\n      description: A <xref href=\"System.Runtime.InteropServices.HandleRef\"></xref> object to retrieve an internal integer representation from.\n    return:\n      type: System.IntPtr\n      description: An <xref:System.IntPtr> object that represents a <xref href=\"System.Runtime.InteropServices.HandleRef\"></xref> object.\n  overload: System.Runtime.InteropServices.HandleRef.ToIntPtr*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.InteropServices.HandleRef.Wrapper\n  id: Wrapper\n  parent: System.Runtime.InteropServices.HandleRef\n  langs:\n  - csharp\n  name: Wrapper\n  nameWithType: HandleRef.Wrapper\n  fullName: System.Runtime.InteropServices.HandleRef.Wrapper\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.InteropServices\n  summary: Gets the object holding the handle to a resource.\n  syntax:\n    content: public object Wrapper { get; }\n    return:\n      type: System.Object\n      description: The object holding the handle to a resource.\n  overload: System.Runtime.InteropServices.HandleRef.Wrapper*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.ValueType\n  isExternal: false\n  name: System.ValueType\n- uid: System.Runtime.InteropServices.HandleRef.#ctor(System.Object,System.IntPtr)\n  parent: System.Runtime.InteropServices.HandleRef\n  isExternal: false\n  name: HandleRef(Object,IntPtr)\n  nameWithType: HandleRef.HandleRef(Object,IntPtr)\n  fullName: System.Runtime.InteropServices.HandleRef.HandleRef(Object,IntPtr)\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.IntPtr\n  parent: System\n  isExternal: true\n  name: IntPtr\n  nameWithType: IntPtr\n  fullName: System.IntPtr\n- uid: System.Runtime.InteropServices.HandleRef.Handle\n  parent: System.Runtime.InteropServices.HandleRef\n  isExternal: false\n  name: Handle\n  nameWithType: HandleRef.Handle\n  fullName: System.Runtime.InteropServices.HandleRef.Handle\n- uid: System.Runtime.InteropServices.HandleRef.op_Explicit(System.Runtime.InteropServices.HandleRef to System.IntPtr)\n  parent: System.Runtime.InteropServices.HandleRef\n  isExternal: false\n  name: op_Explicit(HandleRef)\n  nameWithType: HandleRef.op_Explicit(HandleRef)\n  fullName: System.Runtime.InteropServices.HandleRef.op_Explicit(HandleRef)\n- uid: System.Runtime.InteropServices.HandleRef\n  parent: System.Runtime.InteropServices\n  isExternal: false\n  name: HandleRef\n  nameWithType: HandleRef\n  fullName: System.Runtime.InteropServices.HandleRef\n- uid: System.Runtime.InteropServices.HandleRef.ToIntPtr(System.Runtime.InteropServices.HandleRef)\n  parent: System.Runtime.InteropServices.HandleRef\n  isExternal: false\n  name: ToIntPtr(HandleRef)\n  nameWithType: HandleRef.ToIntPtr(HandleRef)\n  fullName: System.Runtime.InteropServices.HandleRef.ToIntPtr(HandleRef)\n- uid: System.Runtime.InteropServices.HandleRef.Wrapper\n  parent: System.Runtime.InteropServices.HandleRef\n  isExternal: false\n  name: Wrapper\n  nameWithType: HandleRef.Wrapper\n  fullName: System.Runtime.InteropServices.HandleRef.Wrapper\n- uid: System.Runtime.InteropServices.HandleRef.#ctor*\n  parent: System.Runtime.InteropServices.HandleRef\n  isExternal: false\n  name: HandleRef\n  nameWithType: HandleRef.HandleRef\n- uid: System.Runtime.InteropServices.HandleRef.Handle*\n  parent: System.Runtime.InteropServices.HandleRef\n  isExternal: false\n  name: Handle\n  nameWithType: HandleRef.Handle\n- uid: System.Runtime.InteropServices.HandleRef.op_Explicit*\n  parent: System.Runtime.InteropServices.HandleRef\n  isExternal: false\n  name: op_Explicit\n  nameWithType: HandleRef.op_Explicit\n- uid: System.Runtime.InteropServices.HandleRef.ToIntPtr*\n  parent: System.Runtime.InteropServices.HandleRef\n  isExternal: false\n  name: ToIntPtr\n  nameWithType: HandleRef.ToIntPtr\n- uid: System.Runtime.InteropServices.HandleRef.Wrapper*\n  parent: System.Runtime.InteropServices.HandleRef\n  isExternal: false\n  name: Wrapper\n  nameWithType: HandleRef.Wrapper\n"}