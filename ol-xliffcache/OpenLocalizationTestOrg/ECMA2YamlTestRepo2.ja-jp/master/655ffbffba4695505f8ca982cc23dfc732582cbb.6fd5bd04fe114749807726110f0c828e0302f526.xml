{"nodes":[{"pos":[666,768],"content":"Defines standard functionality for controls or libraries that store and retrieve application settings.","needQuote":true,"needEscape":true,"nodes":[{"content":"Defines standard functionality for controls or libraries that store and retrieve application settings.","pos":[0,102]}]},{"pos":[780,1440],"content":"Typically, you can add application settings support to an application by creating a settings wrapper class, which is derived from <xref:System.Configuration.ApplicationSettingsBase>, and then add special properties to this class. However, this approach does not sufficiently encapsulate application settings for a control so that its container is shielded from the details. The IPersistComponentSettings interface provides an application with a standard interface for communicating application settings state change requests to a control, component, or library module. Design-time tools also depend on this interface to properly manage controls and components.","needQuote":true,"needEscape":true,"nodes":[{"content":"Typically, you can add application settings support to an application by creating a settings wrapper class, which is derived from <xref:System.Configuration.ApplicationSettingsBase>, and then add special properties to this class. However, this approach does not sufficiently encapsulate application settings for a control so that its container is shielded from the details. The IPersistComponentSettings interface provides an application with a standard interface for communicating application settings state change requests to a control, component, or library module. Design-time tools also depend on this interface to properly manage controls and components.","pos":[0,660],"nodes":[{"content":"Typically, you can add application settings support to an application by creating a settings wrapper class, which is derived from &lt;xref:System.Configuration.ApplicationSettingsBase&gt;, and then add special properties to this class.","pos":[0,229],"source":"Typically, you can add application settings support to an application by creating a settings wrapper class, which is derived from <xref:System.Configuration.ApplicationSettingsBase>, and then add special properties to this class."},{"content":"However, this approach does not sufficiently encapsulate application settings for a control so that its container is shielded from the details.","pos":[230,373]},{"content":"The IPersistComponentSettings interface provides an application with a standard interface for communicating application settings state change requests to a control, component, or library module.","pos":[374,568]},{"content":"Design-time tools also depend on this interface to properly manage controls and components.","pos":[569,660]}]}]},{"pos":[1994,2103],"content":"Reads the control's application settings into their corresponding properties and updates the control's state.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reads the control's application settings into their corresponding properties and updates the control's state.","pos":[0,109]}]},{"pos":[2116,2781],"content":"In general, the LoadComponentSettings method performs two essential operations:      -   It causes each application settings instance contained by the control to refresh the values of its application settings properties, typically by calling their <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> methods.      -   As required, it updates those general properties that depend on these reloaded settings properties. For example, if the settings class contained a `location` settings property, LoadComponentSettings should ensure that the control's <xref:System.Windows.Forms.Control.Location%2A> property is updated to reflect this reloaded setting.","needQuote":false,"needEscape":true,"nodes":[{"content":"In general, the LoadComponentSettings method performs two essential operations:      -   It causes each application settings instance contained by the control to refresh the values of its application settings properties, typically by calling their &lt;xref:System.Configuration.ApplicationSettingsBase.Reload%2A&gt; methods.","pos":[0,318],"source":"In general, the LoadComponentSettings method performs two essential operations:      -   It causes each application settings instance contained by the control to refresh the values of its application settings properties, typically by calling their <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> methods."},{"content":"-   As required, it updates those general properties that depend on these reloaded settings properties.","pos":[324,427]},{"content":"For example, if the settings class contained a <ph id=\"ph1\">`location`</ph> settings property, LoadComponentSettings should ensure that the control's &lt;xref:System.Windows.Forms.Control.Location%2A&gt; property is updated to reflect this reloaded setting.","pos":[428,661],"source":" For example, if the settings class contained a `location` settings property, LoadComponentSettings should ensure that the control's <xref:System.Windows.Forms.Control.Location%2A> property is updated to reflect this reloaded setting."}]},{"pos":[3437,3514],"content":"Resets the control's application settings properties to their default values.","needQuote":true,"needEscape":true,"nodes":[{"content":"Resets the control's application settings properties to their default values.","pos":[0,77]}]},{"pos":[3526,3732],"content":"The implementation of the ResetComponentSettings method typically calls the <xref:System.Configuration.ApplicationSettingsBase.Reset%2A> method on each instance of an application settings class it contains.","needQuote":true,"needEscape":true,"nodes":[{"content":"The implementation of the ResetComponentSettings method typically calls the &lt;xref:System.Configuration.ApplicationSettingsBase.Reset%2A&gt; method on each instance of an application settings class it contains.","pos":[0,206],"source":"The implementation of the ResetComponentSettings method typically calls the <xref:System.Configuration.ApplicationSettingsBase.Reset%2A> method on each instance of an application settings class it contains."}]},{"pos":[4384,4439],"content":"Persists the control's application settings properties.","needQuote":true,"needEscape":true,"nodes":[{"content":"Persists the control's application settings properties.","pos":[0,55]}]},{"pos":[4452,5235],"content":"The SaveComponentSettings method writes the values of the control's application settings properties to the associated data store. The data store and serialization technique the method uses is determined by the settings provider associated with each settings class through the <xref:System.Configuration.SettingsProviderAttribute>. You can override the choice of the settings provider by using the <xref:System.Configuration.ISettingsProviderService> interface.      > [!NOTE] >  If the <xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A> property is `true`, the control should call SaveComponentSettings in its own <xref:System.Windows.Forms.Control.Dispose%2A> method so that the control's configuration data is stored automatically before the application ends.","needQuote":false,"needEscape":true,"nodes":[{"content":"The SaveComponentSettings method writes the values of the control's application settings properties to the associated data store.","pos":[0,129]},{"content":"The data store and serialization technique the method uses is determined by the settings provider associated with each settings class through the &lt;xref:System.Configuration.SettingsProviderAttribute&gt;.","pos":[130,330],"source":" The data store and serialization technique the method uses is determined by the settings provider associated with each settings class through the <xref:System.Configuration.SettingsProviderAttribute>."},{"content":"You can override the choice of the settings provider by using the &lt;xref:System.Configuration.ISettingsProviderService&gt; interface.","pos":[331,460],"source":" You can override the choice of the settings provider by using the <xref:System.Configuration.ISettingsProviderService> interface."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If the &lt;xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A&gt; property is <ph id=\"ph2\">`true`</ph>, the control should call SaveComponentSettings in its own &lt;xref:System.Windows.Forms.Control.Dispose%2A&gt; method so that the control's configuration data is stored automatically before the application ends.","pos":[466,780],"source":"      > [!NOTE] >  If the <xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A> property is `true`, the control should call SaveComponentSettings in its own <xref:System.Windows.Forms.Control.Dispose%2A> method so that the control's configuration data is stored automatically before the application ends."}]},{"pos":[5837,5954],"content":"Gets or sets a value indicating whether the control should automatically persist its application settings properties.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating whether the control should automatically persist its application settings properties.","pos":[0,117]}]},{"pos":[5967,6660],"content":"If a control contains configuration data, it will typically persist this data in response to an explicit call to the <xref:System.Configuration.IPersistComponentSettings.SaveComponentSettings%2A> method or sometimes implicitly when the control's <xref:System.Windows.Forms.Control.Dispose%2A> method is invoked. The SaveSettings property determines whether a control automatically persists its configuration data when it is disposed.       The default value of SaveSettings depends on the implementation of the control. The documentation for the control should indicate whether it uses application settings, what data is persisted, and what the default value of the SaveSettings property is.","needQuote":false,"needEscape":true,"nodes":[{"content":"If a control contains configuration data, it will typically persist this data in response to an explicit call to the <xref:System.Configuration.IPersistComponentSettings.SaveComponentSettings%2A> method or sometimes implicitly when the control's <xref:System.Windows.Forms.Control.Dispose%2A> method is invoked. The SaveSettings property determines whether a control automatically persists its configuration data when it is disposed.       The default value of SaveSettings depends on the implementation of the control. The documentation for the control should indicate whether it uses application settings, what data is persisted, and what the default value of the SaveSettings property is.","pos":[0,691],"nodes":[{"content":"If a control contains configuration data, it will typically persist this data in response to an explicit call to the &lt;xref:System.Configuration.IPersistComponentSettings.SaveComponentSettings%2A&gt; method or sometimes implicitly when the control's &lt;xref:System.Windows.Forms.Control.Dispose%2A&gt; method is invoked.","pos":[0,311],"source":"If a control contains configuration data, it will typically persist this data in response to an explicit call to the <xref:System.Configuration.IPersistComponentSettings.SaveComponentSettings%2A> method or sometimes implicitly when the control's <xref:System.Windows.Forms.Control.Dispose%2A> method is invoked."},{"content":"The SaveSettings property determines whether a control automatically persists its configuration data when it is disposed.","pos":[312,433]},{"content":"The default value of SaveSettings depends on the implementation of the control.","pos":[440,519]},{"content":"The documentation for the control should indicate whether it uses application settings, what data is persisted, and what the default value of the SaveSettings property is.","pos":[520,691]}]}]},{"pos":[7230,7420],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the control should automatically persist its state; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the control should automatically persist its state; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[7927,8022],"content":"Gets or sets the value of the application settings key for the current instance of the control.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the value of the application settings key for the current instance of the control.","pos":[0,95]}]},{"pos":[8035,9923],"content":"Use the SettingsKey property to disambiguate groups of application settings properties when there are multiple instances of the same wrapper class. For example, if a control contains an associated wrapper class, then placing multiple instances of the same control in the same application will typically result in multiple instances of the wrapper class. A settings key is required only when the configuration data differs on a per-instance basis; for example, the location of dynamically positioned controls.       The following general rules apply to the use of SettingsKey:      -   A control, like any class, may contain zero or more application settings classes, derived from <xref:System.Configuration.ApplicationSettingsBase>. Each settings class contains its own <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A?displayProperty=fullName> property, which helps disambiguate multiple instances of that class.      -   A control should separate its per-instance data and its shared data into different settings classes.      -   For a control with any per-instance configuration data, the `get` accessor of the SettingsKey property should default to the <xref:System.Windows.Forms.Control.Name%2A> of the control. In most cases the name of the control will be unique within an application. If the control contains only shared configuration data, `get` should default to `null`.      -   The `set` accessor for this property should be implemented to distinguish between settings classes containing per-instance and shared configuration data. For each settings class containing per-instance data, `set` should just pass-through to the <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A?displayProperty=fullName> property of the settings class. For settings classes containing shared data, `set` should perform no action for that settings class.","needQuote":false,"needEscape":true,"nodes":[{"content":"Use the SettingsKey property to disambiguate groups of application settings properties when there are multiple instances of the same wrapper class.","pos":[0,147]},{"content":"For example, if a control contains an associated wrapper class, then placing multiple instances of the same control in the same application will typically result in multiple instances of the wrapper class.","pos":[148,353]},{"content":"A settings key is required only when the configuration data differs on a per-instance basis; for example, the location of dynamically positioned controls.","pos":[354,508]},{"content":"The following general rules apply to the use of SettingsKey:      -   A control, like any class, may contain zero or more application settings classes, derived from &lt;xref:System.Configuration.ApplicationSettingsBase&gt;.","pos":[515,732],"source":"       The following general rules apply to the use of SettingsKey:      -   A control, like any class, may contain zero or more application settings classes, derived from <xref:System.Configuration.ApplicationSettingsBase>."},{"content":"Each settings class contains its own &lt;xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A?displayProperty=fullName&gt; property, which helps disambiguate multiple instances of that class.","pos":[733,930],"source":" Each settings class contains its own <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A?displayProperty=fullName> property, which helps disambiguate multiple instances of that class."},{"content":"-   A control should separate its per-instance data and its shared data into different settings classes.","pos":[936,1040]},{"content":"-   For a control with any per-instance configuration data, the <ph id=\"ph1\">`get`</ph> accessor of the SettingsKey property should default to the &lt;xref:System.Windows.Forms.Control.Name%2A&gt; of the control.","pos":[1046,1234],"source":"      -   For a control with any per-instance configuration data, the `get` accessor of the SettingsKey property should default to the <xref:System.Windows.Forms.Control.Name%2A> of the control."},{"content":"In most cases the name of the control will be unique within an application.","pos":[1235,1310]},{"content":"If the control contains only shared configuration data, <ph id=\"ph1\">`get`</ph> should default to <ph id=\"ph2\">`null`</ph>.","pos":[1311,1398],"source":" If the control contains only shared configuration data, `get` should default to `null`."},{"content":"-   The <ph id=\"ph1\">`set`</ph> accessor for this property should be implemented to distinguish between settings classes containing per-instance and shared configuration data.","pos":[1404,1561],"source":"      -   The `set` accessor for this property should be implemented to distinguish between settings classes containing per-instance and shared configuration data."},{"content":"For each settings class containing per-instance data, <ph id=\"ph1\">`set`</ph> should just pass-through to the &lt;xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A?displayProperty=fullName&gt; property of the settings class.","pos":[1562,1777],"source":" For each settings class containing per-instance data, `set` should just pass-through to the <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A?displayProperty=fullName> property of the settings class."},{"content":"For settings classes containing shared data, <ph id=\"ph1\">`set`</ph> should perform no action for that settings class.","pos":[1778,1878],"source":" For settings classes containing shared data, `set` should perform no action for that settings class."}]},{"pos":[10045,10136],"content":"A <xref:System.String> containing the settings key for the current instance of the control.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.String&gt; containing the settings key for the current instance of the control.","pos":[0,91],"source":"A <xref:System.String> containing the settings key for the current instance of the control."}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Configuration.IPersistComponentSettings\n  id: IPersistComponentSettings\n  children:\n  - System.Configuration.IPersistComponentSettings.LoadComponentSettings\n  - System.Configuration.IPersistComponentSettings.ResetComponentSettings\n  - System.Configuration.IPersistComponentSettings.SaveComponentSettings\n  - System.Configuration.IPersistComponentSettings.SaveSettings\n  - System.Configuration.IPersistComponentSettings.SettingsKey\n  langs:\n  - csharp\n  name: IPersistComponentSettings\n  nameWithType: IPersistComponentSettings\n  fullName: System.Configuration.IPersistComponentSettings\n  type: Interface\n  summary: Defines standard functionality for controls or libraries that store and retrieve application settings.\n  remarks: Typically, you can add application settings support to an application by creating a settings wrapper class, which is derived from <xref:System.Configuration.ApplicationSettingsBase>, and then add special properties to this class. However, this approach does not sufficiently encapsulate application settings for a control so that its container is shielded from the details. The IPersistComponentSettings interface provides an application with a standard interface for communicating application settings state change requests to a control, component, or library module. Design-time tools also depend on this interface to properly manage controls and components.\n  syntax:\n    content: public interface IPersistComponentSettings\n  implements: []\n  platform:\n  - net462\n- uid: System.Configuration.IPersistComponentSettings.LoadComponentSettings\n  id: LoadComponentSettings\n  parent: System.Configuration.IPersistComponentSettings\n  langs:\n  - csharp\n  name: LoadComponentSettings()\n  nameWithType: IPersistComponentSettings.LoadComponentSettings()\n  fullName: System.Configuration.IPersistComponentSettings.LoadComponentSettings()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Configuration\n  summary: Reads the control's application settings into their corresponding properties and updates the control's state.\n  remarks: \"In general, the LoadComponentSettings method performs two essential operations:  \\n  \\n-   It causes each application settings instance contained by the control to refresh the values of its application settings properties, typically by calling their <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> methods.  \\n  \\n-   As required, it updates those general properties that depend on these reloaded settings properties. For example, if the settings class contained a `location` settings property, LoadComponentSettings should ensure that the control's <xref:System.Windows.Forms.Control.Location%2A> property is updated to reflect this reloaded setting.\"\n  syntax:\n    content: public void LoadComponentSettings ();\n    parameters: []\n  overload: System.Configuration.IPersistComponentSettings.LoadComponentSettings*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Configuration.IPersistComponentSettings.ResetComponentSettings\n  id: ResetComponentSettings\n  parent: System.Configuration.IPersistComponentSettings\n  langs:\n  - csharp\n  name: ResetComponentSettings()\n  nameWithType: IPersistComponentSettings.ResetComponentSettings()\n  fullName: System.Configuration.IPersistComponentSettings.ResetComponentSettings()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Configuration\n  summary: Resets the control's application settings properties to their default values.\n  remarks: The implementation of the ResetComponentSettings method typically calls the <xref:System.Configuration.ApplicationSettingsBase.Reset%2A> method on each instance of an application settings class it contains.\n  syntax:\n    content: public void ResetComponentSettings ();\n    parameters: []\n  overload: System.Configuration.IPersistComponentSettings.ResetComponentSettings*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Configuration.IPersistComponentSettings.SaveComponentSettings\n  id: SaveComponentSettings\n  parent: System.Configuration.IPersistComponentSettings\n  langs:\n  - csharp\n  name: SaveComponentSettings()\n  nameWithType: IPersistComponentSettings.SaveComponentSettings()\n  fullName: System.Configuration.IPersistComponentSettings.SaveComponentSettings()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Configuration\n  summary: Persists the control's application settings properties.\n  remarks: \"The SaveComponentSettings method writes the values of the control's application settings properties to the associated data store. The data store and serialization technique the method uses is determined by the settings provider associated with each settings class through the <xref:System.Configuration.SettingsProviderAttribute>. You can override the choice of the settings provider by using the <xref:System.Configuration.ISettingsProviderService> interface.  \\n  \\n> [!NOTE]\\n>  If the <xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A> property is `true`, the control should call SaveComponentSettings in its own <xref:System.Windows.Forms.Control.Dispose%2A> method so that the control's configuration data is stored automatically before the application ends.\"\n  syntax:\n    content: public void SaveComponentSettings ();\n    parameters: []\n  overload: System.Configuration.IPersistComponentSettings.SaveComponentSettings*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Configuration.IPersistComponentSettings.SaveSettings\n  id: SaveSettings\n  parent: System.Configuration.IPersistComponentSettings\n  langs:\n  - csharp\n  name: SaveSettings\n  nameWithType: IPersistComponentSettings.SaveSettings\n  fullName: System.Configuration.IPersistComponentSettings.SaveSettings\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Configuration\n  summary: Gets or sets a value indicating whether the control should automatically persist its application settings properties.\n  remarks: \"If a control contains configuration data, it will typically persist this data in response to an explicit call to the <xref:System.Configuration.IPersistComponentSettings.SaveComponentSettings%2A> method or sometimes implicitly when the control's <xref:System.Windows.Forms.Control.Dispose%2A> method is invoked. The SaveSettings property determines whether a control automatically persists its configuration data when it is disposed.  \\n  \\n The default value of SaveSettings depends on the implementation of the control. The documentation for the control should indicate whether it uses application settings, what data is persisted, and what the default value of the SaveSettings property is.\"\n  example:\n  - \"The following code example shows the proper way for a control to check the value of the SaveSettings property before it attempts to automatically persist its configuration data.  \\n  \\n `protected override void Dispose( bool disposing ) {`  \\n  \\n `if(disposing) {`  \\n  \\n `try {`  \\n  \\n `if (SaveSettings) {`  \\n  \\n `SaveComponentSettings();`  \\n  \\n `}`  \\n  \\n `}`  \\n  \\n `finally {`  \\n  \\n `//...`  \\n  \\n `}`  \\n  \\n `}`\"\n  syntax:\n    content: public bool SaveSettings { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the control should automatically persist its state; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Configuration.IPersistComponentSettings.SaveSettings*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Configuration.IPersistComponentSettings.SettingsKey\n  id: SettingsKey\n  parent: System.Configuration.IPersistComponentSettings\n  langs:\n  - csharp\n  name: SettingsKey\n  nameWithType: IPersistComponentSettings.SettingsKey\n  fullName: System.Configuration.IPersistComponentSettings.SettingsKey\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Configuration\n  summary: Gets or sets the value of the application settings key for the current instance of the control.\n  remarks: \"Use the SettingsKey property to disambiguate groups of application settings properties when there are multiple instances of the same wrapper class. For example, if a control contains an associated wrapper class, then placing multiple instances of the same control in the same application will typically result in multiple instances of the wrapper class. A settings key is required only when the configuration data differs on a per-instance basis; for example, the location of dynamically positioned controls.  \\n  \\n The following general rules apply to the use of SettingsKey:  \\n  \\n-   A control, like any class, may contain zero or more application settings classes, derived from <xref:System.Configuration.ApplicationSettingsBase>. Each settings class contains its own <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A?displayProperty=fullName> property, which helps disambiguate multiple instances of that class.  \\n  \\n-   A control should separate its per-instance data and its shared data into different settings classes.  \\n  \\n-   For a control with any per-instance configuration data, the `get` accessor of the SettingsKey property should default to the <xref:System.Windows.Forms.Control.Name%2A> of the control. In most cases the name of the control will be unique within an application. If the control contains only shared configuration data, `get` should default to `null`.  \\n  \\n-   The `set` accessor for this property should be implemented to distinguish between settings classes containing per-instance and shared configuration data. For each settings class containing per-instance data, `set` should just pass-through to the <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A?displayProperty=fullName> property of the settings class. For settings classes containing shared data, `set` should perform no action for that settings class.\"\n  syntax:\n    content: public string SettingsKey { get; set; }\n    return:\n      type: System.String\n      description: A <xref:System.String> containing the settings key for the current instance of the control.\n  overload: System.Configuration.IPersistComponentSettings.SettingsKey*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Configuration.IPersistComponentSettings.LoadComponentSettings\n  parent: System.Configuration.IPersistComponentSettings\n  isExternal: false\n  name: LoadComponentSettings()\n  nameWithType: IPersistComponentSettings.LoadComponentSettings()\n  fullName: System.Configuration.IPersistComponentSettings.LoadComponentSettings()\n- uid: System.Configuration.IPersistComponentSettings.ResetComponentSettings\n  parent: System.Configuration.IPersistComponentSettings\n  isExternal: false\n  name: ResetComponentSettings()\n  nameWithType: IPersistComponentSettings.ResetComponentSettings()\n  fullName: System.Configuration.IPersistComponentSettings.ResetComponentSettings()\n- uid: System.Configuration.IPersistComponentSettings.SaveComponentSettings\n  parent: System.Configuration.IPersistComponentSettings\n  isExternal: false\n  name: SaveComponentSettings()\n  nameWithType: IPersistComponentSettings.SaveComponentSettings()\n  fullName: System.Configuration.IPersistComponentSettings.SaveComponentSettings()\n- uid: System.Configuration.IPersistComponentSettings.SaveSettings\n  parent: System.Configuration.IPersistComponentSettings\n  isExternal: false\n  name: SaveSettings\n  nameWithType: IPersistComponentSettings.SaveSettings\n  fullName: System.Configuration.IPersistComponentSettings.SaveSettings\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Configuration.IPersistComponentSettings.SettingsKey\n  parent: System.Configuration.IPersistComponentSettings\n  isExternal: false\n  name: SettingsKey\n  nameWithType: IPersistComponentSettings.SettingsKey\n  fullName: System.Configuration.IPersistComponentSettings.SettingsKey\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Configuration.IPersistComponentSettings.LoadComponentSettings*\n  parent: System.Configuration.IPersistComponentSettings\n  isExternal: false\n  name: LoadComponentSettings\n  nameWithType: IPersistComponentSettings.LoadComponentSettings\n- uid: System.Configuration.IPersistComponentSettings.ResetComponentSettings*\n  parent: System.Configuration.IPersistComponentSettings\n  isExternal: false\n  name: ResetComponentSettings\n  nameWithType: IPersistComponentSettings.ResetComponentSettings\n- uid: System.Configuration.IPersistComponentSettings.SaveComponentSettings*\n  parent: System.Configuration.IPersistComponentSettings\n  isExternal: false\n  name: SaveComponentSettings\n  nameWithType: IPersistComponentSettings.SaveComponentSettings\n- uid: System.Configuration.IPersistComponentSettings.SaveSettings*\n  parent: System.Configuration.IPersistComponentSettings\n  isExternal: false\n  name: SaveSettings\n  nameWithType: IPersistComponentSettings.SaveSettings\n- uid: System.Configuration.IPersistComponentSettings.SettingsKey*\n  parent: System.Configuration.IPersistComponentSettings\n  isExternal: false\n  name: SettingsKey\n  nameWithType: IPersistComponentSettings.SettingsKey\n"}