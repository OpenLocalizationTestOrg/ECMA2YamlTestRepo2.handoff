{"nodes":[{"pos":[969,1091],"content":"Represents the class that describes how to marshal a field from managed to unmanaged code. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the class that describes how to marshal a field from managed to unmanaged code. This class cannot be inherited.","pos":[0,122],"nodes":[{"content":"Represents the class that describes how to marshal a field from managed to unmanaged code.","pos":[0,90]},{"content":"This class cannot be inherited.","pos":[91,122]}]}]},{"pos":[1104,1691],"content":"The code example shows the workaround for this obsolete type.       Marshaling is the process of packaging and unpackaging parameters so remote procedure calls can occur. During marshaling, a field might undergo a format conversion when the format of the managed type is different from the format of the corresponding unmanaged type. For example, you might want to marshal a `String` type as an unmanaged BSTR. Some format conversions are handled automatically by the runtime. To override the default behavior, you must use the `UnmanagedMarshal` class to define the format conversion.","needQuote":false,"needEscape":true,"nodes":[{"content":"The code example shows the workaround for this obsolete type.","pos":[0,61]},{"content":"Marshaling is the process of packaging and unpackaging parameters so remote procedure calls can occur.","pos":[68,170]},{"content":"During marshaling, a field might undergo a format conversion when the format of the managed type is different from the format of the corresponding unmanaged type.","pos":[171,333]},{"content":"For example, you might want to marshal a <ph id=\"ph1\">`String`</ph> type as an unmanaged BSTR.","pos":[334,410],"source":" For example, you might want to marshal a `String` type as an unmanaged BSTR."},{"content":"Some format conversions are handled automatically by the runtime.","pos":[411,476]},{"content":"To override the default behavior, you must use the <ph id=\"ph1\">`UnmanagedMarshal`</ph> class to define the format conversion.","pos":[477,585],"source":" To override the default behavior, you must use the `UnmanagedMarshal` class to define the format conversion."}]},{"pos":[3383,3439],"content":"Gets an unmanaged base type. This property is read-only.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets an unmanaged base type. This property is read-only.","pos":[0,56],"nodes":[{"content":"Gets an unmanaged base type.","pos":[0,28]},{"content":"This property is read-only.","pos":[29,56]}]}]},{"pos":[3621,3710],"content":"An <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_UnmanagedType\" name=\"UnmanagedType\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"An <xref uid=\"langword_csharp_UnmanagedType\" name=\"UnmanagedType\" href=\"\"></xref> object."},{"pos":[3881,4053],"content":"The unmanaged type is not an <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_LPArray\" name=\"LPArray\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or a <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_SafeArray\" name=\"SafeArray\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The unmanaged type is not an <xref uid=\"langword_csharp_LPArray\" name=\"LPArray\" href=\"\"></xref> or a <xref uid=\"langword_csharp_SafeArray\" name=\"SafeArray\" href=\"\"></xref>."},{"pos":[4516,4589],"content":"Specifies a fixed-length array (ByValArray) to marshal to unmanaged code.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies a fixed-length array (ByValArray) to marshal to unmanaged code.","pos":[0,73]}]},{"pos":[4602,4945],"content":"The `DefineByValArray` method is not a simple native marshal.       Only unmanaged marshal constructs can be made using these static constructors.       Marshaling an array is a more complex process than marshaling an integer parameter. Array members are copied in a specific order so that the other side can reconstruct the array exactly.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`DefineByValArray`</ph> method is not a simple native marshal.","pos":[0,61],"source":"The `DefineByValArray` method is not a simple native marshal."},{"content":"Only unmanaged marshal constructs can be made using these static constructors.","pos":[68,146]},{"content":"Marshaling an array is a more complex process than marshaling an integer parameter.","pos":[153,236]},{"content":"Array members are copied in a specific order so that the other side can reconstruct the array exactly.","pos":[237,339]}]},{"pos":[5138,5187],"content":"The number of elements in the fixed-length array.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of elements in the fixed-length array.","pos":[0,49]}]},{"pos":[5271,5342],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Reflection.Emit.UnmanagedMarshal\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Reflection.Emit.UnmanagedMarshal\"></xref> object."},{"pos":[5521,5562],"content":"The argument is not a simple native type.","needQuote":true,"needEscape":true,"nodes":[{"content":"The argument is not a simple native type.","pos":[0,41]}]},{"pos":[6020,6104],"content":"Specifies a string in a fixed array buffer (ByValTStr) to marshal to unmanaged code.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies a string in a fixed array buffer (ByValTStr) to marshal to unmanaged code.","pos":[0,84]}]},{"pos":[6117,6458],"content":"The `DefineByValStr` method is not a simple native marshal.       Only unmanaged marshal constructs can be made using these static constructors.       Marshaling an array is a more complex process than marshaling an integer parameter. Array members are copied in a specific order so that the other side can reconstruct the array exactly.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`DefineByValStr`</ph> method is not a simple native marshal.","pos":[0,59],"source":"The `DefineByValStr` method is not a simple native marshal."},{"content":"Only unmanaged marshal constructs can be made using these static constructors.","pos":[66,144]},{"content":"Marshaling an array is a more complex process than marshaling an integer parameter.","pos":[151,234]},{"content":"Array members are copied in a specific order so that the other side can reconstruct the array exactly.","pos":[235,337]}]},{"pos":[6650,6699],"content":"The number of elements in the fixed array buffer.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of elements in the fixed array buffer.","pos":[0,49]}]},{"pos":[6783,6854],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Reflection.Emit.UnmanagedMarshal\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Reflection.Emit.UnmanagedMarshal\"></xref> object."},{"pos":[7032,7073],"content":"The argument is not a simple native type.","needQuote":true,"needEscape":true,"nodes":[{"content":"The argument is not a simple native type.","pos":[0,41]}]},{"pos":[7609,7870],"content":"Specifies an <xref uid=\"langword_csharp_LPArray\" name=\"LPArray\" href=\"\"></xref> to marshal to unmanaged code. The length of an <xref uid=\"langword_csharp_LPArray\" name=\"LPArray\" href=\"\"></xref> is determined at runtime by the size of the actual marshaled array.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies an <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_LPArray\" name=\"LPArray\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to marshal to unmanaged code.","pos":[0,109],"source":"Specifies an <xref uid=\"langword_csharp_LPArray\" name=\"LPArray\" href=\"\"></xref> to marshal to unmanaged code."},{"content":"The length of an <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_LPArray\" name=\"LPArray\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is determined at runtime by the size of the actual marshaled array.","pos":[110,261],"source":" The length of an <xref uid=\"langword_csharp_LPArray\" name=\"LPArray\" href=\"\"></xref> is determined at runtime by the size of the actual marshaled array."}]},{"pos":[7883,8223],"content":"The `DefineLPArray` method is not a simple native marshal.       Only unmanaged marshal constructs can be made using these static constructors.       Marshaling an array is a more complex process than marshaling an integer parameter. Array members are copied in a specific order so that the other side can reconstruct the array exactly.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`DefineLPArray`</ph> method is not a simple native marshal.","pos":[0,58],"source":"The `DefineLPArray` method is not a simple native marshal."},{"content":"Only unmanaged marshal constructs can be made using these static constructors.","pos":[65,143]},{"content":"Marshaling an array is a more complex process than marshaling an integer parameter.","pos":[150,233]},{"content":"Array members are copied in a specific order so that the other side can reconstruct the array exactly.","pos":[234,336]}]},{"pos":[8484,8533],"content":"The unmanaged type to which to marshal the array.","needQuote":true,"needEscape":true,"nodes":[{"content":"The unmanaged type to which to marshal the array.","pos":[0,49]}]},{"pos":[8617,8688],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Reflection.Emit.UnmanagedMarshal\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Reflection.Emit.UnmanagedMarshal\"></xref> object."},{"pos":[8864,8905],"content":"The argument is not a simple native type.","needQuote":true,"needEscape":true,"nodes":[{"content":"The argument is not a simple native type.","pos":[0,41]}]},{"pos":[9451,9563],"content":"Specifies a <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_SafeArray\" name=\"SafeArray\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to marshal to unmanaged code.","needQuote":true,"needEscape":true,"source":"Specifies a <xref uid=\"langword_csharp_SafeArray\" name=\"SafeArray\" href=\"\"></xref> to marshal to unmanaged code."},{"pos":[9576,9918],"content":"The `DefineSafeArray` method is not a simple native marshal.       Only unmanaged marshal constructs can be made using these static constructors.       Marshaling an array is a more complex process than marshaling an integer parameter. Array members are copied in a specific order so that the other side can reconstruct the array exactly.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`DefineSafeArray`</ph> method is not a simple native marshal.","pos":[0,60],"source":"The `DefineSafeArray` method is not a simple native marshal."},{"content":"Only unmanaged marshal constructs can be made using these static constructors.","pos":[67,145]},{"content":"Marshaling an array is a more complex process than marshaling an integer parameter.","pos":[152,235]},{"content":"Array members are copied in a specific order so that the other side can reconstruct the array exactly.","pos":[236,338]}]},{"pos":[10181,10310],"content":"The base type or the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_UnmanagedType\" name=\"UnmanagedType\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> of each element of the array.","needQuote":true,"needEscape":true,"source":"The base type or the <xref uid=\"langword_csharp_UnmanagedType\" name=\"UnmanagedType\" href=\"\"></xref> of each element of the array."},{"pos":[10394,10465],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Reflection.Emit.UnmanagedMarshal\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Reflection.Emit.UnmanagedMarshal\"></xref> object."},{"pos":[10643,10684],"content":"The argument is not a simple native type.","needQuote":true,"needEscape":true,"nodes":[{"content":"The argument is not a simple native type.","pos":[0,41]}]},{"pos":[11265,11330],"content":"Specifies a given type that is to be marshaled to unmanaged code.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies a given type that is to be marshaled to unmanaged code.","pos":[0,65]}]},{"pos":[11343,11958],"content":"The <xref:System.Runtime.InteropServices.UnmanagedType> passed to this method must be a simple native type. None of the following values may be used: <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>, <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>, <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>, <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>, or <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>.       Only unmanaged marshal constructs can be made using this method.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <xref:System.Runtime.InteropServices.UnmanagedType> passed to this method must be a simple native type. None of the following values may be used: <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>, <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>, <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>, <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>, or <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>.       Only unmanaged marshal constructs can be made using this method.","pos":[0,613],"nodes":[{"content":"The &lt;xref:System.Runtime.InteropServices.UnmanagedType&gt; passed to this method must be a simple native type.","pos":[0,107],"source":"The <xref:System.Runtime.InteropServices.UnmanagedType> passed to this method must be a simple native type."},{"content":"None of the following values may be used: &lt;xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName&gt;, &lt;xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName&gt;, &lt;xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName&gt;, &lt;xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName&gt;, or &lt;xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName&gt;.","pos":[108,542],"source":" None of the following values may be used: <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>, <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>, <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>, <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>, or <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>."},{"content":"Only unmanaged marshal constructs can be made using this method.","pos":[549,613]}]}]},{"pos":[12238,12294],"content":"The unmanaged type to which the type is to be marshaled.","needQuote":true,"needEscape":true,"nodes":[{"content":"The unmanaged type to which the type is to be marshaled.","pos":[0,56]}]},{"pos":[12378,12449],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Reflection.Emit.UnmanagedMarshal\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Reflection.Emit.UnmanagedMarshal\"></xref> object."},{"pos":[12634,12675],"content":"The argument is not a simple native type.","needQuote":true,"needEscape":true,"nodes":[{"content":"The argument is not a simple native type.","pos":[0,41]}]},{"pos":[13071,13121],"content":"Gets a number element. This property is read-only.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a number element. This property is read-only.","pos":[0,50],"nodes":[{"content":"Gets a number element.","pos":[0,22]},{"content":"This property is read-only.","pos":[23,50]}]}]},{"pos":[13133,13202],"content":"There is an <ph id=\"ph1\">`ElementCount`</ph> only if there is a <ph id=\"ph2\">`NativeTypeFixedArray`</ph>.","needQuote":true,"needEscape":true,"source":"There is an `ElementCount` only if there is a `NativeTypeFixedArray`."},{"pos":[13315,13355],"content":"An integer indicating the element count.","needQuote":true,"needEscape":true,"nodes":[{"content":"An integer indicating the element count.","pos":[0,40]}]},{"pos":[13530,13577],"content":"The argument is not an unmanaged element count.","needQuote":true,"needEscape":true,"nodes":[{"content":"The argument is not an unmanaged element count.","pos":[0,47]}]},{"pos":[13993,14049],"content":"Indicates an unmanaged type. This property is read-only.","needQuote":true,"needEscape":true,"nodes":[{"content":"Indicates an unmanaged type. This property is read-only.","pos":[0,56],"nodes":[{"content":"Indicates an unmanaged type.","pos":[0,28]},{"content":"This property is read-only.","pos":[29,56]}]}]},{"pos":[14061,14137],"content":"The <ph id=\"ph1\">`GetUnmanagedType`</ph> property is an accessor function for the native type.","needQuote":true,"needEscape":true,"source":"The `GetUnmanagedType` property is an accessor function for the native type."},{"pos":[14327,14389],"content":"An <xref:System.Runtime.InteropServices.UnmanagedType> object.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Runtime.InteropServices.UnmanagedType&gt; object.","pos":[0,62],"source":"An <xref:System.Runtime.InteropServices.UnmanagedType> object."}]},{"pos":[14847,14887],"content":"Gets a GUID. This property is read-only.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a GUID. This property is read-only.","pos":[0,40],"nodes":[{"content":"Gets a GUID.","pos":[0,12]},{"content":"This property is read-only.","pos":[13,40]}]}]},{"pos":[14899,14991],"content":"This property always returns Guid.Empty. This property might be removed in a future release.","needQuote":true,"needEscape":true,"nodes":[{"content":"This property always returns Guid.Empty. This property might be removed in a future release.","pos":[0,92],"nodes":[{"content":"This property always returns Guid.Empty.","pos":[0,40]},{"content":"This property might be removed in a future release.","pos":[41,92]}]}]},{"pos":[15099,15127],"content":"A <xref:System.Guid> object.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Guid&gt; object.","pos":[0,28],"source":"A <xref:System.Guid> object."}]},{"pos":[15297,15336],"content":"The argument is not a custom marshaler.","needQuote":true,"needEscape":true,"nodes":[{"content":"The argument is not a custom marshaler.","pos":[0,39]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Reflection.Emit.UnmanagedMarshal\n  id: UnmanagedMarshal\n  children:\n  - System.Reflection.Emit.UnmanagedMarshal.BaseType\n  - System.Reflection.Emit.UnmanagedMarshal.DefineByValArray(System.Int32)\n  - System.Reflection.Emit.UnmanagedMarshal.DefineByValTStr(System.Int32)\n  - System.Reflection.Emit.UnmanagedMarshal.DefineLPArray(System.Runtime.InteropServices.UnmanagedType)\n  - System.Reflection.Emit.UnmanagedMarshal.DefineSafeArray(System.Runtime.InteropServices.UnmanagedType)\n  - System.Reflection.Emit.UnmanagedMarshal.DefineUnmanagedMarshal(System.Runtime.InteropServices.UnmanagedType)\n  - System.Reflection.Emit.UnmanagedMarshal.ElementCount\n  - System.Reflection.Emit.UnmanagedMarshal.GetUnmanagedType\n  - System.Reflection.Emit.UnmanagedMarshal.IIDGuid\n  langs:\n  - csharp\n  name: UnmanagedMarshal\n  nameWithType: UnmanagedMarshal\n  fullName: System.Reflection.Emit.UnmanagedMarshal\n  type: Class\n  summary: Represents the class that describes how to marshal a field from managed to unmanaged code. This class cannot be inherited.\n  remarks: \"The code example shows the workaround for this obsolete type.  \\n  \\n Marshaling is the process of packaging and unpackaging parameters so remote procedure calls can occur. During marshaling, a field might undergo a format conversion when the format of the managed type is different from the format of the corresponding unmanaged type. For example, you might want to marshal a `String` type as an unmanaged BSTR. Some format conversions are handled automatically by the runtime. To override the default behavior, you must use the `UnmanagedMarshal` class to define the format conversion.\"\n  example:\n  - \"The following code example shows replacement code for the obsolete UnmanagedMarshal type. The example emits a single-module assembly named `EmitMarshalAs.dll`, containing a type named `Sample`. The type has a method named `Test`, with one parameter of type <xref:System.String>. The code example applies the <xref:System.Runtime.InteropServices.MarshalAsAttribute> with <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName> to the parameter.  \\n  \\n You can use the [Ildasm.exe (IL Disassembler)](~/add/includes/ajax-current-ext-md.md) to examine the emitted assembly and observe that the parameter is marked `marshal(bstr)`.  \\n  \\n [!code-cs[UnmanagedMarshalObsolete#1](~/add/codesnippet/csharp/t-system.reflection.emit_1.cs)]\\n [!code-cpp[UnmanagedMarshalObsolete#1](~/add/codesnippet/cpp/t-system.reflection.emit_1.cpp)]\\n [!code-vb[UnmanagedMarshalObsolete#1](~/add/codesnippet/visualbasic/t-system.reflection.emit_1.vb)]\"\n  syntax:\n    content: >-\n      [System.Obsolete(\"An alternate API is available: Emit the MarshalAs custom attribute instead. http://go.microsoft.com/fwlink/?linkid=14202\")]\n\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class UnmanagedMarshal\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Reflection.Emit.UnmanagedMarshal.BaseType\n  id: BaseType\n  parent: System.Reflection.Emit.UnmanagedMarshal\n  langs:\n  - csharp\n  name: BaseType\n  nameWithType: UnmanagedMarshal.BaseType\n  fullName: System.Reflection.Emit.UnmanagedMarshal.BaseType\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets an unmanaged base type. This property is read-only.\n  syntax:\n    content: public System.Runtime.InteropServices.UnmanagedType BaseType { get; }\n    return:\n      type: System.Runtime.InteropServices.UnmanagedType\n      description: An <xref uid=\"langword_csharp_UnmanagedType\" name=\"UnmanagedType\" href=\"\"></xref> object.\n  overload: System.Reflection.Emit.UnmanagedMarshal.BaseType*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The unmanaged type is not an <xref uid=\"langword_csharp_LPArray\" name=\"LPArray\" href=\"\"></xref> or a <xref uid=\"langword_csharp_SafeArray\" name=\"SafeArray\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Reflection.Emit.UnmanagedMarshal.DefineByValArray(System.Int32)\n  id: DefineByValArray(System.Int32)\n  parent: System.Reflection.Emit.UnmanagedMarshal\n  langs:\n  - csharp\n  name: DefineByValArray(Int32)\n  nameWithType: UnmanagedMarshal.DefineByValArray(Int32)\n  fullName: System.Reflection.Emit.UnmanagedMarshal.DefineByValArray(Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Specifies a fixed-length array (ByValArray) to marshal to unmanaged code.\n  remarks: \"The `DefineByValArray` method is not a simple native marshal.  \\n  \\n Only unmanaged marshal constructs can be made using these static constructors.  \\n  \\n Marshaling an array is a more complex process than marshaling an integer parameter. Array members are copied in a specific order so that the other side can reconstruct the array exactly.\"\n  syntax:\n    content: public static System.Reflection.Emit.UnmanagedMarshal DefineByValArray (int elemCount);\n    parameters:\n    - id: elemCount\n      type: System.Int32\n      description: The number of elements in the fixed-length array.\n    return:\n      type: System.Reflection.Emit.UnmanagedMarshal\n      description: An <xref href=\"System.Reflection.Emit.UnmanagedMarshal\"></xref> object.\n  overload: System.Reflection.Emit.UnmanagedMarshal.DefineByValArray*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The argument is not a simple native type.\n  platform:\n  - net462\n- uid: System.Reflection.Emit.UnmanagedMarshal.DefineByValTStr(System.Int32)\n  id: DefineByValTStr(System.Int32)\n  parent: System.Reflection.Emit.UnmanagedMarshal\n  langs:\n  - csharp\n  name: DefineByValTStr(Int32)\n  nameWithType: UnmanagedMarshal.DefineByValTStr(Int32)\n  fullName: System.Reflection.Emit.UnmanagedMarshal.DefineByValTStr(Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Specifies a string in a fixed array buffer (ByValTStr) to marshal to unmanaged code.\n  remarks: \"The `DefineByValStr` method is not a simple native marshal.  \\n  \\n Only unmanaged marshal constructs can be made using these static constructors.  \\n  \\n Marshaling an array is a more complex process than marshaling an integer parameter. Array members are copied in a specific order so that the other side can reconstruct the array exactly.\"\n  syntax:\n    content: public static System.Reflection.Emit.UnmanagedMarshal DefineByValTStr (int elemCount);\n    parameters:\n    - id: elemCount\n      type: System.Int32\n      description: The number of elements in the fixed array buffer.\n    return:\n      type: System.Reflection.Emit.UnmanagedMarshal\n      description: An <xref href=\"System.Reflection.Emit.UnmanagedMarshal\"></xref> object.\n  overload: System.Reflection.Emit.UnmanagedMarshal.DefineByValTStr*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The argument is not a simple native type.\n  platform:\n  - net462\n- uid: System.Reflection.Emit.UnmanagedMarshal.DefineLPArray(System.Runtime.InteropServices.UnmanagedType)\n  id: DefineLPArray(System.Runtime.InteropServices.UnmanagedType)\n  parent: System.Reflection.Emit.UnmanagedMarshal\n  langs:\n  - csharp\n  name: DefineLPArray(UnmanagedType)\n  nameWithType: UnmanagedMarshal.DefineLPArray(UnmanagedType)\n  fullName: System.Reflection.Emit.UnmanagedMarshal.DefineLPArray(UnmanagedType)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Specifies an <xref uid=\"langword_csharp_LPArray\" name=\"LPArray\" href=\"\"></xref> to marshal to unmanaged code. The length of an <xref uid=\"langword_csharp_LPArray\" name=\"LPArray\" href=\"\"></xref> is determined at runtime by the size of the actual marshaled array.\n  remarks: \"The `DefineLPArray` method is not a simple native marshal.  \\n  \\n Only unmanaged marshal constructs can be made using these static constructors.  \\n  \\n Marshaling an array is a more complex process than marshaling an integer parameter. Array members are copied in a specific order so that the other side can reconstruct the array exactly.\"\n  syntax:\n    content: public static System.Reflection.Emit.UnmanagedMarshal DefineLPArray (System.Runtime.InteropServices.UnmanagedType elemType);\n    parameters:\n    - id: elemType\n      type: System.Runtime.InteropServices.UnmanagedType\n      description: The unmanaged type to which to marshal the array.\n    return:\n      type: System.Reflection.Emit.UnmanagedMarshal\n      description: An <xref href=\"System.Reflection.Emit.UnmanagedMarshal\"></xref> object.\n  overload: System.Reflection.Emit.UnmanagedMarshal.DefineLPArray*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The argument is not a simple native type.\n  platform:\n  - net462\n- uid: System.Reflection.Emit.UnmanagedMarshal.DefineSafeArray(System.Runtime.InteropServices.UnmanagedType)\n  id: DefineSafeArray(System.Runtime.InteropServices.UnmanagedType)\n  parent: System.Reflection.Emit.UnmanagedMarshal\n  langs:\n  - csharp\n  name: DefineSafeArray(UnmanagedType)\n  nameWithType: UnmanagedMarshal.DefineSafeArray(UnmanagedType)\n  fullName: System.Reflection.Emit.UnmanagedMarshal.DefineSafeArray(UnmanagedType)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Specifies a <xref uid=\"langword_csharp_SafeArray\" name=\"SafeArray\" href=\"\"></xref> to marshal to unmanaged code.\n  remarks: \"The `DefineSafeArray` method is not a simple native marshal.  \\n  \\n Only unmanaged marshal constructs can be made using these static constructors.  \\n  \\n Marshaling an array is a more complex process than marshaling an integer parameter. Array members are copied in a specific order so that the other side can reconstruct the array exactly.\"\n  syntax:\n    content: public static System.Reflection.Emit.UnmanagedMarshal DefineSafeArray (System.Runtime.InteropServices.UnmanagedType elemType);\n    parameters:\n    - id: elemType\n      type: System.Runtime.InteropServices.UnmanagedType\n      description: The base type or the <xref uid=\"langword_csharp_UnmanagedType\" name=\"UnmanagedType\" href=\"\"></xref> of each element of the array.\n    return:\n      type: System.Reflection.Emit.UnmanagedMarshal\n      description: An <xref href=\"System.Reflection.Emit.UnmanagedMarshal\"></xref> object.\n  overload: System.Reflection.Emit.UnmanagedMarshal.DefineSafeArray*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The argument is not a simple native type.\n  platform:\n  - net462\n- uid: System.Reflection.Emit.UnmanagedMarshal.DefineUnmanagedMarshal(System.Runtime.InteropServices.UnmanagedType)\n  id: DefineUnmanagedMarshal(System.Runtime.InteropServices.UnmanagedType)\n  parent: System.Reflection.Emit.UnmanagedMarshal\n  langs:\n  - csharp\n  name: DefineUnmanagedMarshal(UnmanagedType)\n  nameWithType: UnmanagedMarshal.DefineUnmanagedMarshal(UnmanagedType)\n  fullName: System.Reflection.Emit.UnmanagedMarshal.DefineUnmanagedMarshal(UnmanagedType)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Specifies a given type that is to be marshaled to unmanaged code.\n  remarks: \"The <xref:System.Runtime.InteropServices.UnmanagedType> passed to this method must be a simple native type. None of the following values may be used: <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>, <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>, <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>, <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>, or <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>.  \\n  \\n Only unmanaged marshal constructs can be made using this method.\"\n  syntax:\n    content: public static System.Reflection.Emit.UnmanagedMarshal DefineUnmanagedMarshal (System.Runtime.InteropServices.UnmanagedType unmanagedType);\n    parameters:\n    - id: unmanagedType\n      type: System.Runtime.InteropServices.UnmanagedType\n      description: The unmanaged type to which the type is to be marshaled.\n    return:\n      type: System.Reflection.Emit.UnmanagedMarshal\n      description: An <xref href=\"System.Reflection.Emit.UnmanagedMarshal\"></xref> object.\n  overload: System.Reflection.Emit.UnmanagedMarshal.DefineUnmanagedMarshal*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The argument is not a simple native type.\n  platform:\n  - net462\n- uid: System.Reflection.Emit.UnmanagedMarshal.ElementCount\n  id: ElementCount\n  parent: System.Reflection.Emit.UnmanagedMarshal\n  langs:\n  - csharp\n  name: ElementCount\n  nameWithType: UnmanagedMarshal.ElementCount\n  fullName: System.Reflection.Emit.UnmanagedMarshal.ElementCount\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets a number element. This property is read-only.\n  remarks: There is an `ElementCount` only if there is a `NativeTypeFixedArray`.\n  syntax:\n    content: public int ElementCount { get; }\n    return:\n      type: System.Int32\n      description: An integer indicating the element count.\n  overload: System.Reflection.Emit.UnmanagedMarshal.ElementCount*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The argument is not an unmanaged element count.\n  platform:\n  - net462\n- uid: System.Reflection.Emit.UnmanagedMarshal.GetUnmanagedType\n  id: GetUnmanagedType\n  parent: System.Reflection.Emit.UnmanagedMarshal\n  langs:\n  - csharp\n  name: GetUnmanagedType\n  nameWithType: UnmanagedMarshal.GetUnmanagedType\n  fullName: System.Reflection.Emit.UnmanagedMarshal.GetUnmanagedType\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Indicates an unmanaged type. This property is read-only.\n  remarks: The `GetUnmanagedType` property is an accessor function for the native type.\n  syntax:\n    content: public System.Runtime.InteropServices.UnmanagedType GetUnmanagedType { get; }\n    return:\n      type: System.Runtime.InteropServices.UnmanagedType\n      description: An <xref:System.Runtime.InteropServices.UnmanagedType> object.\n  overload: System.Reflection.Emit.UnmanagedMarshal.GetUnmanagedType*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Reflection.Emit.UnmanagedMarshal.IIDGuid\n  id: IIDGuid\n  parent: System.Reflection.Emit.UnmanagedMarshal\n  langs:\n  - csharp\n  name: IIDGuid\n  nameWithType: UnmanagedMarshal.IIDGuid\n  fullName: System.Reflection.Emit.UnmanagedMarshal.IIDGuid\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets a GUID. This property is read-only.\n  remarks: This property always returns Guid.Empty. This property might be removed in a future release.\n  syntax:\n    content: public Guid IIDGuid { get; }\n    return:\n      type: System.Guid\n      description: A <xref:System.Guid> object.\n  overload: System.Reflection.Emit.UnmanagedMarshal.IIDGuid*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The argument is not a custom marshaler.\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.Reflection.Emit.UnmanagedMarshal.BaseType\n  parent: System.Reflection.Emit.UnmanagedMarshal\n  isExternal: false\n  name: BaseType\n  nameWithType: UnmanagedMarshal.BaseType\n  fullName: System.Reflection.Emit.UnmanagedMarshal.BaseType\n- uid: System.Runtime.InteropServices.UnmanagedType\n  parent: System.Runtime.InteropServices\n  isExternal: true\n  name: UnmanagedType\n  nameWithType: UnmanagedType\n  fullName: System.Runtime.InteropServices.UnmanagedType\n- uid: System.Reflection.Emit.UnmanagedMarshal.DefineByValArray(System.Int32)\n  parent: System.Reflection.Emit.UnmanagedMarshal\n  isExternal: false\n  name: DefineByValArray(Int32)\n  nameWithType: UnmanagedMarshal.DefineByValArray(Int32)\n  fullName: System.Reflection.Emit.UnmanagedMarshal.DefineByValArray(Int32)\n- uid: System.Reflection.Emit.UnmanagedMarshal\n  parent: System.Reflection.Emit\n  isExternal: false\n  name: UnmanagedMarshal\n  nameWithType: UnmanagedMarshal\n  fullName: System.Reflection.Emit.UnmanagedMarshal\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Reflection.Emit.UnmanagedMarshal.DefineByValTStr(System.Int32)\n  parent: System.Reflection.Emit.UnmanagedMarshal\n  isExternal: false\n  name: DefineByValTStr(Int32)\n  nameWithType: UnmanagedMarshal.DefineByValTStr(Int32)\n  fullName: System.Reflection.Emit.UnmanagedMarshal.DefineByValTStr(Int32)\n- uid: System.Reflection.Emit.UnmanagedMarshal.DefineLPArray(System.Runtime.InteropServices.UnmanagedType)\n  parent: System.Reflection.Emit.UnmanagedMarshal\n  isExternal: false\n  name: DefineLPArray(UnmanagedType)\n  nameWithType: UnmanagedMarshal.DefineLPArray(UnmanagedType)\n  fullName: System.Reflection.Emit.UnmanagedMarshal.DefineLPArray(UnmanagedType)\n- uid: System.Reflection.Emit.UnmanagedMarshal.DefineSafeArray(System.Runtime.InteropServices.UnmanagedType)\n  parent: System.Reflection.Emit.UnmanagedMarshal\n  isExternal: false\n  name: DefineSafeArray(UnmanagedType)\n  nameWithType: UnmanagedMarshal.DefineSafeArray(UnmanagedType)\n  fullName: System.Reflection.Emit.UnmanagedMarshal.DefineSafeArray(UnmanagedType)\n- uid: System.Reflection.Emit.UnmanagedMarshal.DefineUnmanagedMarshal(System.Runtime.InteropServices.UnmanagedType)\n  parent: System.Reflection.Emit.UnmanagedMarshal\n  isExternal: false\n  name: DefineUnmanagedMarshal(UnmanagedType)\n  nameWithType: UnmanagedMarshal.DefineUnmanagedMarshal(UnmanagedType)\n  fullName: System.Reflection.Emit.UnmanagedMarshal.DefineUnmanagedMarshal(UnmanagedType)\n- uid: System.Reflection.Emit.UnmanagedMarshal.ElementCount\n  parent: System.Reflection.Emit.UnmanagedMarshal\n  isExternal: false\n  name: ElementCount\n  nameWithType: UnmanagedMarshal.ElementCount\n  fullName: System.Reflection.Emit.UnmanagedMarshal.ElementCount\n- uid: System.Reflection.Emit.UnmanagedMarshal.GetUnmanagedType\n  parent: System.Reflection.Emit.UnmanagedMarshal\n  isExternal: false\n  name: GetUnmanagedType\n  nameWithType: UnmanagedMarshal.GetUnmanagedType\n  fullName: System.Reflection.Emit.UnmanagedMarshal.GetUnmanagedType\n- uid: System.Reflection.Emit.UnmanagedMarshal.IIDGuid\n  parent: System.Reflection.Emit.UnmanagedMarshal\n  isExternal: false\n  name: IIDGuid\n  nameWithType: UnmanagedMarshal.IIDGuid\n  fullName: System.Reflection.Emit.UnmanagedMarshal.IIDGuid\n- uid: System.Guid\n  parent: System\n  isExternal: true\n  name: Guid\n  nameWithType: Guid\n  fullName: System.Guid\n- uid: System.Reflection.Emit.UnmanagedMarshal.BaseType*\n  parent: System.Reflection.Emit.UnmanagedMarshal\n  isExternal: false\n  name: BaseType\n  nameWithType: UnmanagedMarshal.BaseType\n- uid: System.Reflection.Emit.UnmanagedMarshal.DefineByValArray*\n  parent: System.Reflection.Emit.UnmanagedMarshal\n  isExternal: false\n  name: DefineByValArray\n  nameWithType: UnmanagedMarshal.DefineByValArray\n- uid: System.Reflection.Emit.UnmanagedMarshal.DefineByValTStr*\n  parent: System.Reflection.Emit.UnmanagedMarshal\n  isExternal: false\n  name: DefineByValTStr\n  nameWithType: UnmanagedMarshal.DefineByValTStr\n- uid: System.Reflection.Emit.UnmanagedMarshal.DefineLPArray*\n  parent: System.Reflection.Emit.UnmanagedMarshal\n  isExternal: false\n  name: DefineLPArray\n  nameWithType: UnmanagedMarshal.DefineLPArray\n- uid: System.Reflection.Emit.UnmanagedMarshal.DefineSafeArray*\n  parent: System.Reflection.Emit.UnmanagedMarshal\n  isExternal: false\n  name: DefineSafeArray\n  nameWithType: UnmanagedMarshal.DefineSafeArray\n- uid: System.Reflection.Emit.UnmanagedMarshal.DefineUnmanagedMarshal*\n  parent: System.Reflection.Emit.UnmanagedMarshal\n  isExternal: false\n  name: DefineUnmanagedMarshal\n  nameWithType: UnmanagedMarshal.DefineUnmanagedMarshal\n- uid: System.Reflection.Emit.UnmanagedMarshal.ElementCount*\n  parent: System.Reflection.Emit.UnmanagedMarshal\n  isExternal: false\n  name: ElementCount\n  nameWithType: UnmanagedMarshal.ElementCount\n- uid: System.Reflection.Emit.UnmanagedMarshal.GetUnmanagedType*\n  parent: System.Reflection.Emit.UnmanagedMarshal\n  isExternal: false\n  name: GetUnmanagedType\n  nameWithType: UnmanagedMarshal.GetUnmanagedType\n- uid: System.Reflection.Emit.UnmanagedMarshal.IIDGuid*\n  parent: System.Reflection.Emit.UnmanagedMarshal\n  isExternal: false\n  name: IIDGuid\n  nameWithType: UnmanagedMarshal.IIDGuid\n"}