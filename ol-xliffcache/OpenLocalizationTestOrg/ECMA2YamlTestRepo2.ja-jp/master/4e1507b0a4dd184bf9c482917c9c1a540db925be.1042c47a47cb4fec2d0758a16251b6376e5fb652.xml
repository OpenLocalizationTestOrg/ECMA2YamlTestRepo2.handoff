{"nodes":[{"pos":[5179,5259],"content":"Provides the means to access and manage an in-process speech recognition engine.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides the means to access and manage an in-process speech recognition engine.","pos":[0,80]}]},{"pos":[5272,8643],"content":"You can create an instance of this class for any of the installed speech recognizers. To get information about which recognizers are installed, use the static <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> method.       This class is for running speech recognition engines in-process, and provides control over various aspects of speech recognition, as follows:      -   To create an in-process speech recognizer, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.%23ctor%2A> constructors.      -   To manage speech recognition grammars, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars%2A> methods, and the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Grammars%2A> property.      -   To configure the input to the recognizer, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>, or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A> method.      -   To perform speech recognition, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> method.      -   To modify how recognition handles silence or unexpected input, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> properties.      -   To change the number of alternates the recognizer returns, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates%2A> property. The recognizer returns recognition results in a <xref:System.Speech.Recognition.RecognitionResult> object.      -   To synchronize changes to the recognizer, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method. The recognizer uses more than one thread to perform tasks.      -   To emulate input to the recognizer, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods.       The SpeechRecognitionEngine object is for the sole use of the process that instantiated the object. By contrast, the <xref:System.Speech.Recognition.SpeechRecognizer> shares a single recognizer with any application that wants to use it.      > [!NOTE] >  Always call <xref:System.Speech.Recognition.SpeechRecognitionEngine.Dispose%2A> before you release your last reference to the speech recognizer. Otherwise, the resources it is using will not be freed until the garbage collector calls the recognizer object's `Finalize` method.","needQuote":false,"needEscape":true,"nodes":[{"content":"You can create an instance of this class for any of the installed speech recognizers.","pos":[0,85]},{"content":"To get information about which recognizers are installed, use the static &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A&gt; method.","pos":[86,247],"source":" To get information about which recognizers are installed, use the static <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> method."},{"content":"This class is for running speech recognition engines in-process, and provides control over various aspects of speech recognition, as follows:      -   To create an in-process speech recognizer, use one of the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.%23ctor%2A&gt; constructors.","pos":[254,544],"source":"       This class is for running speech recognition engines in-process, and provides control over various aspects of speech recognition, as follows:      -   To create an in-process speech recognizer, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.%23ctor%2A> constructors."},{"content":"-   To manage speech recognition grammars, use the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A&gt;, &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A&gt;, &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar%2A&gt;, and &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars%2A&gt; methods, and the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.Grammars%2A&gt; property.","pos":[550,1004],"source":"      -   To manage speech recognition grammars, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars%2A> methods, and the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Grammars%2A> property."},{"content":"-   To configure the input to the recognizer, use the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A&gt;, &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A&gt;, &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A&gt;, &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A&gt;, or &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A&gt; method.","pos":[1010,1484],"source":"      -   To configure the input to the recognizer, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>, or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A> method."},{"content":"-   To perform speech recognition, use the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A&gt; or &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A&gt; method.","pos":[1490,1688],"source":"      -   To perform speech recognition, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> method."},{"content":"-   To modify how recognition handles silence or unexpected input, use the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A&gt;, &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A&gt;, &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A&gt;, and &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A&gt; properties.","pos":[1694,2108],"source":"      -   To modify how recognition handles silence or unexpected input, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> properties."},{"content":"-   To change the number of alternates the recognizer returns, use the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates%2A&gt; property.","pos":[2114,2268],"source":"      -   To change the number of alternates the recognizer returns, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates%2A> property."},{"content":"The recognizer returns recognition results in a &lt;xref:System.Speech.Recognition.RecognitionResult&gt; object.","pos":[2269,2375],"source":" The recognizer returns recognition results in a <xref:System.Speech.Recognition.RecognitionResult> object."},{"content":"-   To synchronize changes to the recognizer, use the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A&gt; method.","pos":[2381,2526],"source":"      -   To synchronize changes to the recognizer, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method."},{"content":"The recognizer uses more than one thread to perform tasks.","pos":[2527,2585]},{"content":"-   To emulate input to the recognizer, use the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A&gt; and &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A&gt; methods.","pos":[2591,2810],"source":"      -   To emulate input to the recognizer, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods."},{"content":"The SpeechRecognitionEngine object is for the sole use of the process that instantiated the object.","pos":[2817,2916]},{"content":"By contrast, the &lt;xref:System.Speech.Recognition.SpeechRecognizer&gt; shares a single recognizer with any application that wants to use it.","pos":[2917,3053],"source":" By contrast, the <xref:System.Speech.Recognition.SpeechRecognizer> shares a single recognizer with any application that wants to use it."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Always call &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.Dispose%2A&gt; before you release your last reference to the speech recognizer.","pos":[3059,3216],"source":"      > [!NOTE] >  Always call <xref:System.Speech.Recognition.SpeechRecognitionEngine.Dispose%2A> before you release your last reference to the speech recognizer."},{"content":"Otherwise, the resources it is using will not be freed until the garbage collector calls the recognizer object's <ph id=\"ph1\">`Finalize`</ph> method.","pos":[3217,3348],"source":" Otherwise, the resources it is using will not be freed until the garbage collector calls the recognizer object's `Finalize` method."}]},{"pos":[11003,11165],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class using the default speech recognizer for the system.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref> class using the default speech recognizer for the system."},{"pos":[11178,12056],"content":"Before the speech recognizer can begin speech recognition, you must load at least one recognition grammar and configure the input for the recognizer.       To load a grammar, call the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.       To configure the audio input, use one of the following methods:      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>","needQuote":false,"needEscape":true,"nodes":[{"content":"Before the speech recognizer can begin speech recognition, you must load at least one recognition grammar and configure the input for the recognizer.       To load a grammar, call the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.       To configure the audio input, use one of the following methods:      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>","pos":[0,864],"nodes":[{"content":"Before the speech recognizer can begin speech recognition, you must load at least one recognition grammar and configure the input for the recognizer.","pos":[0,149]},{"content":"To load a grammar, call the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A&gt; or &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A&gt; method.","pos":[156,343],"source":"       To load a grammar, call the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method."},{"content":"To configure the audio input, use one of the following methods:      -   &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A&gt;      -   &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A&gt;      -   &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A&gt;      -   &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A&gt;      -   &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A&gt;","pos":[350,864],"source":"       To configure the audio input, use one of the following methods:      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>"}]}]},{"pos":[12792,12962],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class using the default speech recognizer for a specified locale.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref> class using the default speech recognizer for a specified locale."},{"pos":[12975,14621],"content":"Microsoft Windows and the System.Speech API accept all valid language-country codes. To perform speech recognition using the language specified in the `CultureInfo` argument, a speech recognition engine that supports that language-country code must be installed. The speech recognition engines that shipped with Microsoft Windows 7 work with the following language-country codes.      -   en-GB. English (United Kingdom)      -   en-US. English (United States)      -   de-DE. German (Germany)      -   es-ES. Spanish (Spain)      -   fr-FR. French (France)      -   ja-JP. Japanese (Japan)      -   zh-CN. Chinese (China)      -   zh-TW. Chinese (Taiwan)       Two-letter language codes such as \"en\", \"fr\", or \"es\" are also permitted.       Before the speech recognizer can begin recognition, you must load at least one speech recognition grammar and configure the input for the recognizer.       To load a grammar, call the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.       To configure the audio input, use one of the following methods:      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>","needQuote":false,"needEscape":true,"nodes":[{"content":"Microsoft Windows and the System.Speech API accept all valid language-country codes.","pos":[0,84]},{"content":"To perform speech recognition using the language specified in the <ph id=\"ph1\">`CultureInfo`</ph> argument, a speech recognition engine that supports that language-country code must be installed.","pos":[85,262],"source":" To perform speech recognition using the language specified in the `CultureInfo` argument, a speech recognition engine that supports that language-country code must be installed."},{"content":"The speech recognition engines that shipped with Microsoft Windows 7 work with the following language-country codes.","pos":[263,379]},{"content":"-   en-GB.","pos":[385,395]},{"content":"English (United Kingdom)      -   en-US.","pos":[396,436]},{"content":"English (United States)      -   de-DE.","pos":[437,476]},{"content":"German (Germany)      -   es-ES.","pos":[477,509]},{"content":"Spanish (Spain)      -   fr-FR.","pos":[510,541]},{"content":"French (France)      -   ja-JP.","pos":[542,573]},{"content":"Japanese (Japan)      -   zh-CN.","pos":[574,606]},{"content":"Chinese (China)      -   zh-TW.","pos":[607,638]},{"content":"Chinese (Taiwan)       Two-letter language codes such as \"en\", \"fr\", or \"es\" are also permitted.","pos":[639,735]},{"content":"Before the speech recognizer can begin recognition, you must load at least one speech recognition grammar and configure the input for the recognizer.","pos":[742,891]},{"content":"To load a grammar, call the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A&gt; or &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A&gt; method.","pos":[898,1085],"source":"       To load a grammar, call the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method."},{"content":"To configure the audio input, use one of the following methods:      -   &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A&gt;      -   &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A&gt;      -   &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A&gt;      -   &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A&gt;      -   &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A&gt;","pos":[1092,1606],"source":"       To configure the audio input, use one of the following methods:      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>"}]},{"pos":[16382,16433],"content":"The locale that the speech recognizer must support.","needQuote":true,"needEscape":true,"nodes":[{"content":"The locale that the speech recognizer must support.","pos":[0,51]}]},{"pos":[16611,16731],"content":"None of the installed speech recognizers support the specified locale, or <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">culture</ph><ept id=\"p1\">&lt;/code&gt;</ept> is the invariant culture.","needQuote":true,"needEscape":true,"source":"None of the installed speech recognizers support the specified locale, or <code>culture</code> is the invariant culture."},{"pos":[16834,16919],"content":"<ph id=\"ph1\">&lt;code&gt;Culture&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>Culture</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[17516,17750],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> using the information in a <bpt id=\"p2\">&lt;xref href=\"System.Speech.Recognition.RecognizerInfo\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object to specify the recognizer to use.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref> using the information in a <xref href=\"System.Speech.Recognition.RecognizerInfo\"></xref> object to specify the recognizer to use."},{"pos":[17763,18890],"content":"You can create an instance of this class for any of the installed speech recognizers. To get information about which recognizers are installed, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> method.       Before the speech recognizer can begin recognition, you must load at least one speech recognition grammar and configure the input for the recognizer.       To load a grammar, call the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.       To configure the audio input, use one of the following methods:      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>","needQuote":false,"needEscape":true,"nodes":[{"content":"You can create an instance of this class for any of the installed speech recognizers. To get information about which recognizers are installed, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> method.       Before the speech recognizer can begin recognition, you must load at least one speech recognition grammar and configure the input for the recognizer.       To load a grammar, call the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.       To configure the audio input, use one of the following methods:      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>","pos":[0,1111],"nodes":[{"content":"You can create an instance of this class for any of the installed speech recognizers.","pos":[0,85]},{"content":"To get information about which recognizers are installed, use the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A&gt; method.","pos":[86,240],"source":" To get information about which recognizers are installed, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> method."},{"content":"Before the speech recognizer can begin recognition, you must load at least one speech recognition grammar and configure the input for the recognizer.","pos":[247,396]},{"content":"To load a grammar, call the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A&gt; or &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A&gt; method.","pos":[403,590],"source":"       To load a grammar, call the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method."},{"content":"To configure the audio input, use one of the following methods:      -   &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A&gt;      -   &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A&gt;      -   &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A&gt;      -   &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A&gt;      -   &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A&gt;","pos":[597,1111],"source":"       To configure the audio input, use one of the following methods:      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>"}]}]},{"pos":[20984,21035],"content":"The information for the specific speech recognizer.","needQuote":true,"needEscape":true,"nodes":[{"content":"The information for the specific speech recognizer.","pos":[0,51]}]},{"pos":[21640,21824],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with a string parameter that specifies the name of the recognizer to use.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref> class with a string parameter that specifies the name of the recognizer to use."},{"pos":[21837,23178],"content":"The token name of the recognizer is the value of the <xref:System.Speech.Recognition.RecognizerInfo.Id%2A> property of the <xref:System.Speech.Recognition.RecognizerInfo> object returned by the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo%2A> property of the recognizer. To get a collection of all the installed recognizers, use the static <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> method.       Before the speech recognizer can begin recognition, you must load at least one speech recognition grammar and configure the input for the recognizer.       To load a grammar, call the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.       To configure the audio input, use one of the following methods:      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>","needQuote":false,"needEscape":true,"nodes":[{"content":"The token name of the recognizer is the value of the <xref:System.Speech.Recognition.RecognizerInfo.Id%2A> property of the <xref:System.Speech.Recognition.RecognizerInfo> object returned by the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo%2A> property of the recognizer. To get a collection of all the installed recognizers, use the static <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> method.       Before the speech recognizer can begin recognition, you must load at least one speech recognition grammar and configure the input for the recognizer.       To load a grammar, call the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.       To configure the audio input, use one of the following methods:      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>","pos":[0,1325],"nodes":[{"content":"The token name of the recognizer is the value of the &lt;xref:System.Speech.Recognition.RecognizerInfo.Id%2A&gt; property of the &lt;xref:System.Speech.Recognition.RecognizerInfo&gt; object returned by the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo%2A&gt; property of the recognizer.","pos":[0,296],"source":"The token name of the recognizer is the value of the <xref:System.Speech.Recognition.RecognizerInfo.Id%2A> property of the <xref:System.Speech.Recognition.RecognizerInfo> object returned by the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo%2A> property of the recognizer."},{"content":"To get a collection of all the installed recognizers, use the static &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A&gt; method.","pos":[297,454],"source":" To get a collection of all the installed recognizers, use the static <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> method."},{"content":"Before the speech recognizer can begin recognition, you must load at least one speech recognition grammar and configure the input for the recognizer.","pos":[461,610]},{"content":"To load a grammar, call the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A&gt; or &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A&gt; method.","pos":[617,804],"source":"       To load a grammar, call the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method."},{"content":"To configure the audio input, use one of the following methods:      -   &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A&gt;      -   &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A&gt;      -   &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A&gt;      -   &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A&gt;      -   &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A&gt;","pos":[811,1325],"source":"       To configure the audio input, use one of the following methods:      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>"}]}]},{"pos":[24875,24922],"content":"The token name of the speech recognizer to use.","needQuote":true,"needEscape":true,"nodes":[{"content":"The token name of the speech recognizer to use.","pos":[0,47]}]},{"pos":[25100,25210],"content":"No speech recognizer with that token name is installed, or <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">recognizerId</ph><ept id=\"p1\">&lt;/code&gt;</ept> is the empty string (\"\").","needQuote":true,"needEscape":true,"source":"No speech recognizer with that token name is installed, or <code>recognizerId</code> is the empty string (\"\")."},{"pos":[25313,25403],"content":"<ph id=\"ph1\">&lt;code&gt;recognizerId&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>recognizerId</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[25839,25961],"content":"Gets the format of the audio being received by the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets the format of the audio being received by the <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref>."},{"pos":[25974,26498],"content":"To configure the audio input, use one of the following methods:      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>","needQuote":false,"needEscape":true,"nodes":[{"content":"To configure the audio input, use one of the following methods:      -   &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A&gt;      -   &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A&gt;      -   &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A&gt;      -   &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A&gt;      -   &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A&gt;","pos":[0,514],"source":"To configure the audio input, use one of the following methods:      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>"}]},{"pos":[27680,27921],"content":"The format of audio at the input to the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance, or <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> if the input is not configured or set to the null input.","needQuote":true,"needEscape":true,"source":"The format of audio at the input to the <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref> instance, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the input is not configured or set to the null input."},{"pos":[28444,28565],"content":"Gets the level of the audio being received by the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets the level of the audio being received by the <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref>."},{"pos":[28577,28653],"content":"The value 0 represents silence, and 100 represents the maximum input volume.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value 0 represents silence, and 100 represents the maximum input volume.","pos":[0,76]}]},{"pos":[28764,28838],"content":"The audio level of the input to the speech recognizer, from 0 through 100.","needQuote":true,"needEscape":true,"nodes":[{"content":"The audio level of the input to the speech recognizer, from 0 through 100.","pos":[0,74]}]},{"pos":[29392,29516],"content":"Raised when the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> reports the level of its audio input.","needQuote":true,"needEscape":true,"source":"Raised when the <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref> reports the level of its audio input."},{"pos":[29529,30547],"content":"The <xref:System.Speech.Recognition.SpeechRecognitionEngine> raises this event multiple times per second. The frequency with which the event is raised depends on the computer on which the application is running.       To get the audio level at the time of the event, use the <xref:System.Speech.Recognition.AudioLevelUpdatedEventArgs.AudioLevel%2A> property of the associated <xref:System.Speech.Recognition.AudioLevelUpdatedEventArgs>. To get the current audio level of the input to the recognizer, use the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel%2A> property.       When you create an AudioLevelUpdated delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).","needQuote":false,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine&gt; raises this event multiple times per second.","pos":[0,105],"source":"The <xref:System.Speech.Recognition.SpeechRecognitionEngine> raises this event multiple times per second."},{"content":"The frequency with which the event is raised depends on the computer on which the application is running.","pos":[106,211]},{"content":"To get the audio level at the time of the event, use the &lt;xref:System.Speech.Recognition.AudioLevelUpdatedEventArgs.AudioLevel%2A&gt; property of the associated &lt;xref:System.Speech.Recognition.AudioLevelUpdatedEventArgs&gt;.","pos":[218,436],"source":"       To get the audio level at the time of the event, use the <xref:System.Speech.Recognition.AudioLevelUpdatedEventArgs.AudioLevel%2A> property of the associated <xref:System.Speech.Recognition.AudioLevelUpdatedEventArgs>."},{"content":"To get the current audio level of the input to the recognizer, use the recognizer's &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel%2A&gt; property.","pos":[437,601],"source":" To get the current audio level of the input to the recognizer, use the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel%2A> property."},{"content":"When you create an AudioLevelUpdated delegate, you identify the method that will handle the event.","pos":[608,706]},{"content":"To associate the event with your event handler, add an instance of the delegate to the event.","pos":[707,800]},{"content":"The event handler is called whenever the event occurs, unless you remove the delegate.","pos":[801,887]},{"content":"For more information about event-handler delegates, see <bpt id=\"p1\">[</bpt>Events and Delegates<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=162418)</ept>.","pos":[888,1014],"source":" For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418)."}]},{"pos":[31704,31716],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[32179,32357],"content":"Gets the current location in the audio stream being generated by the device that is providing input to the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets the current location in the audio stream being generated by the device that is providing input to the <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref>."},{"pos":[32369,32945],"content":"The AudioPosition property references the input device's position in its generated audio stream. By contrast, the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> property references the recognizer's position within its audio input. These positions can be different. For example, if the recognizer has received input for which it has not yet generated a recognition result then the value of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> property is less than the value of the AudioPosition property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The AudioPosition property references the input device's position in its generated audio stream. By contrast, the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> property references the recognizer's position within its audio input. These positions can be different. For example, if the recognizer has received input for which it has not yet generated a recognition result then the value of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> property is less than the value of the AudioPosition property.","pos":[0,576],"nodes":[{"content":"The AudioPosition property references the input device's position in its generated audio stream.","pos":[0,96]},{"content":"By contrast, the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A&gt; property references the recognizer's position within its audio input.","pos":[97,267],"source":" By contrast, the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> property references the recognizer's position within its audio input."},{"content":"These positions can be different.","pos":[268,301]},{"content":"For example, if the recognizer has received input for which it has not yet generated a recognition result then the value of the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A&gt; property is less than the value of the AudioPosition property.","pos":[302,576],"source":" For example, if the recognizer has received input for which it has not yet generated a recognition result then the value of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> property is less than the value of the AudioPosition property."}]}]},{"pos":[36259,36336],"content":"The current location in the audio stream being generated by the input device.","needQuote":true,"needEscape":true,"nodes":[{"content":"The current location in the audio stream being generated by the input device.","pos":[0,77]}]},{"pos":[36938,37063],"content":"Raised when the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> detects a problem in the audio signal.","needQuote":true,"needEscape":true,"source":"Raised when the <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref> detects a problem in the audio signal."},{"pos":[37076,37726],"content":"To get which problem occurred, use the <xref:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs.AudioSignalProblem%2A> property of the associated <xref:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs>.       When you create an AudioSignalProblemOccurred delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).","needQuote":false,"needEscape":true,"nodes":[{"content":"To get which problem occurred, use the &lt;xref:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs.AudioSignalProblem%2A&gt; property of the associated &lt;xref:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs&gt;.","pos":[0,226],"source":"To get which problem occurred, use the <xref:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs.AudioSignalProblem%2A> property of the associated <xref:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs>."},{"content":"When you create an AudioSignalProblemOccurred delegate, you identify the method that will handle the event.","pos":[233,340]},{"content":"To associate the event with your event handler, add an instance of the delegate to the event.","pos":[341,434]},{"content":"The event handler is called whenever the event occurs, unless you remove the delegate.","pos":[435,521]},{"content":"For more information about event-handler delegates, see <bpt id=\"p1\">[</bpt>Events and Delegates<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=162418)</ept>.","pos":[522,648],"source":" For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418)."}]},{"pos":[39320,39332],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[39780,39901],"content":"Gets the state of the audio being received by the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets the state of the audio being received by the <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref>."},{"pos":[39913,40041],"content":"The AudioState property represents the audio state with a member of the <xref:System.Speech.Recognition.AudioState> enumeration.","needQuote":true,"needEscape":true,"nodes":[{"content":"The AudioState property represents the audio state with a member of the &lt;xref:System.Speech.Recognition.AudioState&gt; enumeration.","pos":[0,128],"source":"The AudioState property represents the audio state with a member of the <xref:System.Speech.Recognition.AudioState> enumeration."}]},{"pos":[40209,40263],"content":"The state of the audio input to the speech recognizer.","needQuote":true,"needEscape":true,"nodes":[{"content":"The state of the audio input to the speech recognizer.","pos":[0,54]}]},{"pos":[40817,40953],"content":"Raised when the state changes in the audio being received by the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Raised when the state changes in the audio being received by the <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref>."},{"pos":[40966,41869],"content":"To get the audio state at the time of the event, use the <xref:System.Speech.Recognition.AudioStateChangedEventArgs.AudioState%2A> property of the associated <xref:System.Speech.Recognition.AudioStateChangedEventArgs>. To get the current audio state of the input to the recognizer, use the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioState%2A> property. For more information about audio state, see the <xref:System.Speech.Recognition.AudioState> enumeration.       When you create an AudioStateChanged delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).","needQuote":false,"needEscape":true,"nodes":[{"content":"To get the audio state at the time of the event, use the &lt;xref:System.Speech.Recognition.AudioStateChangedEventArgs.AudioState%2A&gt; property of the associated &lt;xref:System.Speech.Recognition.AudioStateChangedEventArgs&gt;.","pos":[0,218],"source":"To get the audio state at the time of the event, use the <xref:System.Speech.Recognition.AudioStateChangedEventArgs.AudioState%2A> property of the associated <xref:System.Speech.Recognition.AudioStateChangedEventArgs>."},{"content":"To get the current audio state of the input to the recognizer, use the recognizer's &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioState%2A&gt; property.","pos":[219,383],"source":" To get the current audio state of the input to the recognizer, use the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioState%2A> property."},{"content":"For more information about audio state, see the &lt;xref:System.Speech.Recognition.AudioState&gt; enumeration.","pos":[384,488],"source":" For more information about audio state, see the <xref:System.Speech.Recognition.AudioState> enumeration."},{"content":"When you create an AudioStateChanged delegate, you identify the method that will handle the event.","pos":[495,593]},{"content":"To associate the event with your event handler, add an instance of the delegate to the event.","pos":[594,687]},{"content":"The event handler is called whenever the event occurs, unless you remove the delegate.","pos":[688,774]},{"content":"For more information about event-handler delegates, see <bpt id=\"p1\">[</bpt>Events and Delegates<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=162418)</ept>.","pos":[775,901],"source":" For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418)."}]},{"pos":[45078,45090],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[45553,45748],"content":"Gets or sets the time interval during which a <bpt id=\"p1\">&lt;xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> accepts input containing only background noise, before finalizing recognition.","needQuote":true,"needEscape":true,"source":"Gets or sets the time interval during which a <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref> accepts input containing only background noise, before finalizing recognition."},{"pos":[45761,46947],"content":"Each speech recognizer has an algorithm to distinguish between silence and speech. The recognizer classifies as background noise any non-silence input that does not match the initial rule of any of the recognizer's loaded and enabled speech recognition grammars. If the recognizer receives only background noise and silence within the babble timeout interval, then the recognizer finalizes that recognition operation.      -   For asynchronous recognition operations, the recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event, where the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.BabbleTimeout%2A?displayProperty=fullName> property is `true`, and the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A?displayProperty=fullName> property is `null`.      -   For synchronous recognition operations and emulation, the recognizer returns `null`, instead of a valid <xref:System.Speech.Recognition.RecognitionResult>.       If the babble timeout period is set to 0, the recognizer does not perform a babble timeout check. The timeout interval can be any non-negative value. The default is 0 seconds.","needQuote":false,"needEscape":true,"nodes":[{"content":"Each speech recognizer has an algorithm to distinguish between silence and speech.","pos":[0,82]},{"content":"The recognizer classifies as background noise any non-silence input that does not match the initial rule of any of the recognizer's loaded and enabled speech recognition grammars.","pos":[83,262]},{"content":"If the recognizer receives only background noise and silence within the babble timeout interval, then the recognizer finalizes that recognition operation.","pos":[263,417]},{"content":"-   For asynchronous recognition operations, the recognizer raises the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted&gt; event, where the &lt;xref:System.Speech.Recognition.RecognizeCompletedEventArgs.BabbleTimeout%2A?displayProperty=fullName&gt; property is <ph id=\"ph1\">`true`</ph>, and the &lt;xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A?displayProperty=fullName&gt; property is <ph id=\"ph2\">`null`</ph>.","pos":[423,833],"source":"      -   For asynchronous recognition operations, the recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event, where the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.BabbleTimeout%2A?displayProperty=fullName> property is `true`, and the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A?displayProperty=fullName> property is `null`."},{"content":"-   For synchronous recognition operations and emulation, the recognizer returns <ph id=\"ph1\">`null`</ph>, instead of a valid &lt;xref:System.Speech.Recognition.RecognitionResult&gt;.","pos":[839,998],"source":"      -   For synchronous recognition operations and emulation, the recognizer returns `null`, instead of a valid <xref:System.Speech.Recognition.RecognitionResult>."},{"content":"If the babble timeout period is set to 0, the recognizer does not perform a babble timeout check.","pos":[1005,1102]},{"content":"The timeout interval can be any non-negative value.","pos":[1103,1154]},{"content":"The default is 0 seconds.","pos":[1155,1180]}]},{"pos":[51800,51834],"content":"The duration of the time interval.","needQuote":true,"needEscape":true,"nodes":[{"content":"The duration of the time interval.","pos":[0,34]}]},{"pos":[52040,52084],"content":"This property is set to less than 0 seconds.","needQuote":true,"needEscape":true,"nodes":[{"content":"This property is set to less than 0 seconds.","pos":[0,44]}]},{"pos":[52504,52595],"content":"Disposes the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Disposes the <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref> object."},{"pos":[53222,53360],"content":"Disposes the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object and releases resources used during the session.","needQuote":true,"needEscape":true,"source":"Disposes the <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref> object and releases resources used during the session."},{"pos":[53515,53724],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to release both managed and unmanaged resources; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> to release only unmanaged resources.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only unmanaged resources."},{"pos":[54325,54442],"content":"Emulates input of a phrase to the speech recognizer, using text in place of audio for synchronous speech recognition.","needQuote":true,"needEscape":true,"nodes":[{"content":"Emulates input of a phrase to the speech recognizer, using text in place of audio for synchronous speech recognition.","pos":[0,117]}]},{"pos":[54455,55308],"content":"The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.       The recognizers that ship with Vista and Windows 7 ignore case and character width when applying grammar rules to the input phrase. For more information about this type of comparison, see the <xref:System.Globalization.CompareOptions> enumeration values <xref:System.Globalization.CompareOptions> and <xref:System.Globalization.CompareOptions>. The recognizers also ignore new lines and extra white space and treat punctuation as literal input.","needQuote":false,"needEscape":true,"nodes":[{"content":"The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.       The recognizers that ship with Vista and Windows 7 ignore case and character width when applying grammar rules to the input phrase. For more information about this type of comparison, see the <xref:System.Globalization.CompareOptions> enumeration values <xref:System.Globalization.CompareOptions> and <xref:System.Globalization.CompareOptions>. The recognizers also ignore new lines and extra white space and treat punctuation as literal input.","pos":[0,851],"nodes":[{"content":"The speech recognizer raises the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected&gt;, &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized&gt;, &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected&gt;, and &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized&gt; events as if the recognition operation is not emulated.","pos":[0,400],"source":"The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated."},{"content":"The recognizers that ship with Vista and Windows 7 ignore case and character width when applying grammar rules to the input phrase.","pos":[407,538]},{"content":"For more information about this type of comparison, see the &lt;xref:System.Globalization.CompareOptions&gt; enumeration values &lt;xref:System.Globalization.CompareOptions&gt; and &lt;xref:System.Globalization.CompareOptions&gt;.","pos":[539,751],"source":" For more information about this type of comparison, see the <xref:System.Globalization.CompareOptions> enumeration values <xref:System.Globalization.CompareOptions> and <xref:System.Globalization.CompareOptions>."},{"content":"The recognizers also ignore new lines and extra white space and treat punctuation as literal input.","pos":[752,851]}]}]},{"pos":[61319,61359],"content":"The input for the recognition operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The input for the recognition operation.","pos":[0,40]}]},{"pos":[61447,61621],"content":"The result for the recognition operation, or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the operation is not successful or the recognizer is not enabled.","needQuote":true,"needEscape":true,"source":"The result for the recognition operation, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the operation is not successful or the recognizer is not enabled."},{"pos":[61826,61883],"content":"The recognizer has no speech recognition grammars loaded.","needQuote":true,"needEscape":true,"nodes":[{"content":"The recognizer has no speech recognition grammars loaded.","pos":[0,57]}]},{"pos":[61986,62073],"content":"<ph id=\"ph1\">&lt;code&gt;inputText&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>inputText</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[62168,62216],"content":"<ph id=\"ph1\">&lt;code&gt;inputText&lt;/code&gt;</ph> is the empty string (\"\").","needQuote":true,"needEscape":true,"source":"<code>inputText</code> is the empty string (\"\")."},{"pos":[62954,63199],"content":"Emulates input of specific words to the speech recognizer, using text in place of audio for synchronous speech recognition, and specifies how the recognizer handles Unicode comparison between the words and the loaded speech recognition grammars.","needQuote":true,"needEscape":true,"nodes":[{"content":"Emulates input of specific words to the speech recognizer, using text in place of audio for synchronous speech recognition, and specifies how the recognizer handles Unicode comparison between the words and the loaded speech recognition grammars.","pos":[0,245]}]},{"pos":[63212,64191],"content":"The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.       The recognizer uses `compareOptions` when it applies grammar rules to the input phrase. The recognizers that ship with Vista and Windows 7 ignore case if the <xref:System.Globalization.CompareOptions> or <xref:System.Globalization.CompareOptions> value is present. The recognizer always ignores the character width and never ignores the Kana type. The recognizer also ignores new lines and extra white space and treats punctuation as literal input. For more information about character width and Kana type, see the <xref:System.Globalization.CompareOptions> enumeration.","needQuote":false,"needEscape":true,"nodes":[{"content":"The speech recognizer raises the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected&gt;, &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized&gt;, &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected&gt;, and &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized&gt; events as if the recognition operation is not emulated.","pos":[0,400],"source":"The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated."},{"content":"The recognizer uses <ph id=\"ph1\">`compareOptions`</ph> when it applies grammar rules to the input phrase.","pos":[407,494],"source":"       The recognizer uses `compareOptions` when it applies grammar rules to the input phrase."},{"content":"The recognizers that ship with Vista and Windows 7 ignore case if the &lt;xref:System.Globalization.CompareOptions&gt; or &lt;xref:System.Globalization.CompareOptions&gt; value is present.","pos":[495,671],"source":" The recognizers that ship with Vista and Windows 7 ignore case if the <xref:System.Globalization.CompareOptions> or <xref:System.Globalization.CompareOptions> value is present."},{"content":"The recognizer always ignores the character width and never ignores the Kana type.","pos":[672,754]},{"content":"The recognizer also ignores new lines and extra white space and treats punctuation as literal input.","pos":[755,855]},{"content":"For more information about character width and Kana type, see the &lt;xref:System.Globalization.CompareOptions&gt; enumeration.","pos":[856,977],"source":" For more information about character width and Kana type, see the <xref:System.Globalization.CompareOptions> enumeration."}]},{"pos":[64510,64587],"content":"An array of word units that contains the input for the recognition operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of word units that contains the input for the recognition operation.","pos":[0,77]}]},{"pos":[64680,64811],"content":"A bitwise combination of the enumeration values that describe the type of comparison to use for the emulated recognition operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"A bitwise combination of the enumeration values that describe the type of comparison to use for the emulated recognition operation.","pos":[0,131]}]},{"pos":[64899,65073],"content":"The result for the recognition operation, or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the operation is not successful or the recognizer is not enabled.","needQuote":true,"needEscape":true,"source":"The result for the recognition operation, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the operation is not successful or the recognizer is not enabled."},{"pos":[65278,65335],"content":"The recognizer has no speech recognition grammars loaded.","needQuote":true,"needEscape":true,"nodes":[{"content":"The recognizer has no speech recognition grammars loaded.","pos":[0,57]}]},{"pos":[65438,65525],"content":"<ph id=\"ph1\">&lt;code&gt;wordUnits&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>wordUnits</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[65620,65734],"content":"<ph id=\"ph1\">&lt;code&gt;wordUnits&lt;/code&gt;</ph> contains one or more <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> elements.","needQuote":true,"needEscape":true,"source":"<code>wordUnits</code> contains one or more <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> elements."},{"pos":[65837,66017],"content":"<ph id=\"ph1\">&lt;code&gt;compareOptions&lt;/code&gt;</ph> contains the <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Globalization.CompareOptions&gt;</ph>, or <ph id=\"ph4\">&lt;xref:System.Globalization.CompareOptions&gt;</ph> flag.","needQuote":true,"needEscape":true,"source":"<code>compareOptions</code> contains the <xref:System.Globalization.CompareOptions>, <xref:System.Globalization.CompareOptions>, or <xref:System.Globalization.CompareOptions> flag."},{"pos":[66647,66887],"content":"Emulates input of a phrase to the speech recognizer, using text in place of audio for synchronous speech recognition, and specifies how the recognizer handles Unicode comparison between the phrase and the loaded speech recognition grammars.","needQuote":true,"needEscape":true,"nodes":[{"content":"Emulates input of a phrase to the speech recognizer, using text in place of audio for synchronous speech recognition, and specifies how the recognizer handles Unicode comparison between the phrase and the loaded speech recognition grammars.","pos":[0,240]}]},{"pos":[66900,67879],"content":"The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.       The recognizer uses `compareOptions` when it applies grammar rules to the input phrase. The recognizers that ship with Vista and Windows 7 ignore case if the <xref:System.Globalization.CompareOptions> or <xref:System.Globalization.CompareOptions> value is present. The recognizer always ignores the character width and never ignores the Kana type. The recognizer also ignores new lines and extra white space and treats punctuation as literal input. For more information about character width and Kana type, see the <xref:System.Globalization.CompareOptions> enumeration.","needQuote":false,"needEscape":true,"nodes":[{"content":"The speech recognizer raises the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected&gt;, &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized&gt;, &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected&gt;, and &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized&gt; events as if the recognition operation is not emulated.","pos":[0,400],"source":"The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated."},{"content":"The recognizer uses <ph id=\"ph1\">`compareOptions`</ph> when it applies grammar rules to the input phrase.","pos":[407,494],"source":"       The recognizer uses `compareOptions` when it applies grammar rules to the input phrase."},{"content":"The recognizers that ship with Vista and Windows 7 ignore case if the &lt;xref:System.Globalization.CompareOptions&gt; or &lt;xref:System.Globalization.CompareOptions&gt; value is present.","pos":[495,671],"source":" The recognizers that ship with Vista and Windows 7 ignore case if the <xref:System.Globalization.CompareOptions> or <xref:System.Globalization.CompareOptions> value is present."},{"content":"The recognizer always ignores the character width and never ignores the Kana type.","pos":[672,754]},{"content":"The recognizer also ignores new lines and extra white space and treats punctuation as literal input.","pos":[755,855]},{"content":"For more information about character width and Kana type, see the &lt;xref:System.Globalization.CompareOptions&gt; enumeration.","pos":[856,977],"source":" For more information about character width and Kana type, see the <xref:System.Globalization.CompareOptions> enumeration."}]},{"pos":[68125,68172],"content":"The input phrase for the recognition operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The input phrase for the recognition operation.","pos":[0,47]}]},{"pos":[68265,68396],"content":"A bitwise combination of the enumeration values that describe the type of comparison to use for the emulated recognition operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"A bitwise combination of the enumeration values that describe the type of comparison to use for the emulated recognition operation.","pos":[0,131]}]},{"pos":[68484,68658],"content":"The result for the recognition operation, or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the operation is not successful or the recognizer is not enabled.","needQuote":true,"needEscape":true,"source":"The result for the recognition operation, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the operation is not successful or the recognizer is not enabled."},{"pos":[68863,68920],"content":"The recognizer has no speech recognition grammars loaded.","needQuote":true,"needEscape":true,"nodes":[{"content":"The recognizer has no speech recognition grammars loaded.","pos":[0,57]}]},{"pos":[69023,69110],"content":"<ph id=\"ph1\">&lt;code&gt;inputText&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>inputText</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[69205,69253],"content":"<ph id=\"ph1\">&lt;code&gt;inputText&lt;/code&gt;</ph> is the empty string (\"\").","needQuote":true,"needEscape":true,"source":"<code>inputText</code> is the empty string (\"\")."},{"pos":[69356,69536],"content":"<ph id=\"ph1\">&lt;code&gt;compareOptions&lt;/code&gt;</ph> contains the <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Globalization.CompareOptions&gt;</ph>, or <ph id=\"ph4\">&lt;xref:System.Globalization.CompareOptions&gt;</ph> flag.","needQuote":true,"needEscape":true,"source":"<code>compareOptions</code> contains the <xref:System.Globalization.CompareOptions>, <xref:System.Globalization.CompareOptions>, or <xref:System.Globalization.CompareOptions> flag."},{"pos":[70074,70192],"content":"Emulates input of a phrase to the speech recognizer, using text in place of audio for asynchronous speech recognition.","needQuote":true,"needEscape":true,"nodes":[{"content":"Emulates input of a phrase to the speech recognizer, using text in place of audio for asynchronous speech recognition.","pos":[0,118]}]},{"pos":[70205,71232],"content":"The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated. When the recognizer completes the asynchronous recognition operation, it raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event.       The recognizers that ship with Vista and Windows 7 ignore case and character width when applying grammar rules to the input phrase. For more information about this type of comparison, see the <xref:System.Globalization.CompareOptions> enumeration values <xref:System.Globalization.CompareOptions> and <xref:System.Globalization.CompareOptions>. The recognizers also ignore new lines and extra white space and treat punctuation as literal input.","needQuote":false,"needEscape":true,"nodes":[{"content":"The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated. When the recognizer completes the asynchronous recognition operation, it raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event.       The recognizers that ship with Vista and Windows 7 ignore case and character width when applying grammar rules to the input phrase. For more information about this type of comparison, see the <xref:System.Globalization.CompareOptions> enumeration values <xref:System.Globalization.CompareOptions> and <xref:System.Globalization.CompareOptions>. The recognizers also ignore new lines and extra white space and treat punctuation as literal input.","pos":[0,1025],"nodes":[{"content":"The speech recognizer raises the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected&gt;, &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized&gt;, &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected&gt;, and &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized&gt; events as if the recognition operation is not emulated.","pos":[0,400],"source":"The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated."},{"content":"When the recognizer completes the asynchronous recognition operation, it raises the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted&gt; event.","pos":[401,574],"source":" When the recognizer completes the asynchronous recognition operation, it raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event."},{"content":"The recognizers that ship with Vista and Windows 7 ignore case and character width when applying grammar rules to the input phrase.","pos":[581,712]},{"content":"For more information about this type of comparison, see the &lt;xref:System.Globalization.CompareOptions&gt; enumeration values &lt;xref:System.Globalization.CompareOptions&gt; and &lt;xref:System.Globalization.CompareOptions&gt;.","pos":[713,925],"source":" For more information about this type of comparison, see the <xref:System.Globalization.CompareOptions> enumeration values <xref:System.Globalization.CompareOptions> and <xref:System.Globalization.CompareOptions>."},{"content":"The recognizers also ignore new lines and extra white space and treat punctuation as literal input.","pos":[926,1025]}]}]},{"pos":[78448,78488],"content":"The input for the recognition operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The input for the recognition operation.","pos":[0,40]}]},{"pos":[78698,78841],"content":"The recognizer has no speech recognition grammars loaded, or the recognizer has an asynchronous recognition operation that is not yet complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"The recognizer has no speech recognition grammars loaded, or the recognizer has an asynchronous recognition operation that is not yet complete.","pos":[0,143]}]},{"pos":[78944,79031],"content":"<ph id=\"ph1\">&lt;code&gt;inputText&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>inputText</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[79126,79174],"content":"<ph id=\"ph1\">&lt;code&gt;inputText&lt;/code&gt;</ph> is the empty string (\"\").","needQuote":true,"needEscape":true,"source":"<code>inputText</code> is the empty string (\"\")."},{"pos":[79937,80264],"content":"Emulates input of specific words to the speech recognizer, using an array of <bpt id=\"p1\">&lt;xref href=\"System.Speech.Recognition.RecognizedWordUnit\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects in place of audio for asynchronous speech recognition, and specifies how the recognizer handles Unicode comparison between the words and the loaded speech recognition grammars.","needQuote":true,"needEscape":true,"source":"Emulates input of specific words to the speech recognizer, using an array of <xref href=\"System.Speech.Recognition.RecognizedWordUnit\"></xref> objects in place of audio for asynchronous speech recognition, and specifies how the recognizer handles Unicode comparison between the words and the loaded speech recognition grammars."},{"pos":[80277,81428],"content":"The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated. When the recognizer completes the asynchronous recognition operation, it raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event.       The recognizer uses `compareOptions` when it applies grammar rules to the input phrase. The recognizers that ship with Vista and Windows 7 ignore case if the <xref:System.Globalization.CompareOptions> or <xref:System.Globalization.CompareOptions> value is present. The recognizers always ignore the character width and never ignore the Kana type. The recognizers also ignore new lines and extra white space and treat punctuation as literal input. For more information about character width and Kana type, see the <xref:System.Globalization.CompareOptions> enumeration.","needQuote":false,"needEscape":true,"nodes":[{"content":"The speech recognizer raises the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected&gt;, &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized&gt;, &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected&gt;, and &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized&gt; events as if the recognition operation is not emulated.","pos":[0,400],"source":"The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated."},{"content":"When the recognizer completes the asynchronous recognition operation, it raises the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted&gt; event.","pos":[401,574],"source":" When the recognizer completes the asynchronous recognition operation, it raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event."},{"content":"The recognizer uses <ph id=\"ph1\">`compareOptions`</ph> when it applies grammar rules to the input phrase.","pos":[581,668],"source":"       The recognizer uses `compareOptions` when it applies grammar rules to the input phrase."},{"content":"The recognizers that ship with Vista and Windows 7 ignore case if the &lt;xref:System.Globalization.CompareOptions&gt; or &lt;xref:System.Globalization.CompareOptions&gt; value is present.","pos":[669,845],"source":" The recognizers that ship with Vista and Windows 7 ignore case if the <xref:System.Globalization.CompareOptions> or <xref:System.Globalization.CompareOptions> value is present."},{"content":"The recognizers always ignore the character width and never ignore the Kana type.","pos":[846,927]},{"content":"The recognizers also ignore new lines and extra white space and treat punctuation as literal input.","pos":[928,1027]},{"content":"For more information about character width and Kana type, see the &lt;xref:System.Globalization.CompareOptions&gt; enumeration.","pos":[1028,1149],"source":" For more information about character width and Kana type, see the <xref:System.Globalization.CompareOptions> enumeration."}]},{"pos":[81713,81790],"content":"An array of word units that contains the input for the recognition operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of word units that contains the input for the recognition operation.","pos":[0,77]}]},{"pos":[81883,82014],"content":"A bitwise combination of the enumeration values that describe the type of comparison to use for the emulated recognition operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"A bitwise combination of the enumeration values that describe the type of comparison to use for the emulated recognition operation.","pos":[0,131]}]},{"pos":[82224,82367],"content":"The recognizer has no speech recognition grammars loaded, or the recognizer has an asynchronous recognition operation that is not yet complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"The recognizer has no speech recognition grammars loaded, or the recognizer has an asynchronous recognition operation that is not yet complete.","pos":[0,143]}]},{"pos":[82470,82557],"content":"<ph id=\"ph1\">&lt;code&gt;wordUnits&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>wordUnits</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[82652,82766],"content":"<ph id=\"ph1\">&lt;code&gt;wordUnits&lt;/code&gt;</ph> contains one or more <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> elements.","needQuote":true,"needEscape":true,"source":"<code>wordUnits</code> contains one or more <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> elements."},{"pos":[82869,83049],"content":"<ph id=\"ph1\">&lt;code&gt;compareOptions&lt;/code&gt;</ph> contains the <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Globalization.CompareOptions&gt;</ph>, or <ph id=\"ph4\">&lt;xref:System.Globalization.CompareOptions&gt;</ph> flag.","needQuote":true,"needEscape":true,"source":"<code>compareOptions</code> contains the <xref:System.Globalization.CompareOptions>, <xref:System.Globalization.CompareOptions>, or <xref:System.Globalization.CompareOptions> flag."},{"pos":[83704,83945],"content":"Emulates input of a phrase to the speech recognizer, using text in place of audio for asynchronous speech recognition, and specifies how the recognizer handles Unicode comparison between the phrase and the loaded speech recognition grammars.","needQuote":true,"needEscape":true,"nodes":[{"content":"Emulates input of a phrase to the speech recognizer, using text in place of audio for asynchronous speech recognition, and specifies how the recognizer handles Unicode comparison between the phrase and the loaded speech recognition grammars.","pos":[0,241]}]},{"pos":[83958,85109],"content":"The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated. When the recognizer completes the asynchronous recognition operation, it raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event.       The recognizer uses `compareOptions` when it applies grammar rules to the input phrase. The recognizers that ship with Vista and Windows 7 ignore case if the <xref:System.Globalization.CompareOptions> or <xref:System.Globalization.CompareOptions> value is present. The recognizers always ignore the character width and never ignore the Kana type. The recognizers also ignore new lines and extra white space and treat punctuation as literal input. For more information about character width and Kana type, see the <xref:System.Globalization.CompareOptions> enumeration.","needQuote":false,"needEscape":true,"nodes":[{"content":"The speech recognizer raises the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected&gt;, &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized&gt;, &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected&gt;, and &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized&gt; events as if the recognition operation is not emulated.","pos":[0,400],"source":"The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated."},{"content":"When the recognizer completes the asynchronous recognition operation, it raises the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted&gt; event.","pos":[401,574],"source":" When the recognizer completes the asynchronous recognition operation, it raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event."},{"content":"The recognizer uses <ph id=\"ph1\">`compareOptions`</ph> when it applies grammar rules to the input phrase.","pos":[581,668],"source":"       The recognizer uses `compareOptions` when it applies grammar rules to the input phrase."},{"content":"The recognizers that ship with Vista and Windows 7 ignore case if the &lt;xref:System.Globalization.CompareOptions&gt; or &lt;xref:System.Globalization.CompareOptions&gt; value is present.","pos":[669,845],"source":" The recognizers that ship with Vista and Windows 7 ignore case if the <xref:System.Globalization.CompareOptions> or <xref:System.Globalization.CompareOptions> value is present."},{"content":"The recognizers always ignore the character width and never ignore the Kana type.","pos":[846,927]},{"content":"The recognizers also ignore new lines and extra white space and treat punctuation as literal input.","pos":[928,1027]},{"content":"For more information about character width and Kana type, see the &lt;xref:System.Globalization.CompareOptions&gt; enumeration.","pos":[1028,1149],"source":" For more information about character width and Kana type, see the <xref:System.Globalization.CompareOptions> enumeration."}]},{"pos":[85321,85368],"content":"The input phrase for the recognition operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The input phrase for the recognition operation.","pos":[0,47]}]},{"pos":[85461,85592],"content":"A bitwise combination of the enumeration values that describe the type of comparison to use for the emulated recognition operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"A bitwise combination of the enumeration values that describe the type of comparison to use for the emulated recognition operation.","pos":[0,131]}]},{"pos":[85802,85945],"content":"The recognizer has no speech recognition grammars loaded, or the recognizer has an asynchronous recognition operation that is not yet complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"The recognizer has no speech recognition grammars loaded, or the recognizer has an asynchronous recognition operation that is not yet complete.","pos":[0,143]}]},{"pos":[86048,86135],"content":"<ph id=\"ph1\">&lt;code&gt;inputText&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>inputText</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[86230,86278],"content":"<ph id=\"ph1\">&lt;code&gt;inputText&lt;/code&gt;</ph> is the empty string (\"\").","needQuote":true,"needEscape":true,"source":"<code>inputText</code> is the empty string (\"\")."},{"pos":[86381,86561],"content":"<ph id=\"ph1\">&lt;code&gt;compareOptions&lt;/code&gt;</ph> contains the <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Globalization.CompareOptions&gt;</ph>, or <ph id=\"ph4\">&lt;xref:System.Globalization.CompareOptions&gt;</ph> flag.","needQuote":true,"needEscape":true,"source":"<code>compareOptions</code> contains the <xref:System.Globalization.CompareOptions>, <xref:System.Globalization.CompareOptions>, or <xref:System.Globalization.CompareOptions> flag."},{"pos":[87064,87217],"content":"Raised when the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> finalizes an asynchronous recognition operation of emulated input.","needQuote":true,"needEscape":true,"source":"Raised when the <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref> finalizes an asynchronous recognition operation of emulated input."},{"pos":[87230,89639],"content":"Each <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> method begins an asynchronous recognition operation. The <xref:System.Speech.Recognition.SpeechRecognitionEngine> raises the EmulateRecognizeCompleted event when it finalizes the asynchronous operation.       The <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> operation can raise the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events. The EmulateRecognizeCompleted event is the last such event that the recognizer raises for a given operation.       If emulated recognition was successful, you can access the recognition result using the either of the following:      -   The <xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs.Result%2A> property in the <xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs> object in the handler for the EmulateRecognizeCompleted event.      -   <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> property in the <xref:System.Speech.Recognition.SpeechRecognizedEventArgs> object in the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event.       If emulated recognition was not successful, the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event is not raised and the <xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs.Result%2A> will be null.       <xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs> derives from <xref:System.ComponentModel.AsyncCompletedEventArgs>.       <xref:System.Speech.Recognition.SpeechRecognizedEventArgs> derives from <xref:System.Speech.Recognition.RecognitionEventArgs>.       When you create an EmulateRecognizeCompleted delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).","needQuote":false,"needEscape":true,"nodes":[{"content":"Each &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A&gt; method begins an asynchronous recognition operation.","pos":[0,139],"source":"Each <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> method begins an asynchronous recognition operation."},{"content":"The &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine&gt; raises the EmulateRecognizeCompleted event when it finalizes the asynchronous operation.","pos":[140,289],"source":" The <xref:System.Speech.Recognition.SpeechRecognitionEngine> raises the EmulateRecognizeCompleted event when it finalizes the asynchronous operation."},{"content":"The &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A&gt; operation can raise the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected&gt;, &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized&gt;, &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected&gt;, and &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized&gt; events.","pos":[296,725],"source":"       The <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> operation can raise the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events."},{"content":"The EmulateRecognizeCompleted event is the last such event that the recognizer raises for a given operation.","pos":[726,834]},{"content":"If emulated recognition was successful, you can access the recognition result using the either of the following:      -   The &lt;xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs.Result%2A&gt; property in the &lt;xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs&gt; object in the handler for the EmulateRecognizeCompleted event.","pos":[841,1191],"source":"       If emulated recognition was successful, you can access the recognition result using the either of the following:      -   The <xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs.Result%2A> property in the <xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs> object in the handler for the EmulateRecognizeCompleted event."},{"content":"-   &lt;xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A&gt; property in the &lt;xref:System.Speech.Recognition.SpeechRecognizedEventArgs&gt; object in the handler for the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized&gt; event.","pos":[1197,1450],"source":"      -   <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> property in the <xref:System.Speech.Recognition.SpeechRecognizedEventArgs> object in the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event."},{"content":"If emulated recognition was not successful, the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized&gt; event is not raised and the &lt;xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs.Result%2A&gt; will be null.","pos":[1457,1698],"source":"       If emulated recognition was not successful, the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event is not raised and the <xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs.Result%2A> will be null."},{"content":"&lt;xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs&gt; derives from &lt;xref:System.ComponentModel.AsyncCompletedEventArgs&gt;.","pos":[1705,1839],"source":"       <xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs> derives from <xref:System.ComponentModel.AsyncCompletedEventArgs>."},{"content":"&lt;xref:System.Speech.Recognition.SpeechRecognizedEventArgs&gt; derives from &lt;xref:System.Speech.Recognition.RecognitionEventArgs&gt;.","pos":[1846,1972],"source":"       <xref:System.Speech.Recognition.SpeechRecognizedEventArgs> derives from <xref:System.Speech.Recognition.RecognitionEventArgs>."},{"content":"When you create an EmulateRecognizeCompleted delegate, you identify the method that will handle the event.","pos":[1979,2085]},{"content":"To associate the event with your event handler, add an instance of the delegate to the event.","pos":[2086,2179]},{"content":"The event handler is called whenever the event occurs, unless you remove the delegate.","pos":[2180,2266]},{"content":"For more information about event-handler delegates, see <bpt id=\"p1\">[</bpt>Events and Delegates<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=162418)</ept>.","pos":[2267,2393],"source":" For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418)."}]},{"pos":[93163,93175],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[93658,93861],"content":"Gets or sets the interval of silence that the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> will accept at the end of unambiguous input before finalizing a recognition operation.","needQuote":true,"needEscape":true,"source":"Gets or sets the interval of silence that the <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref> will accept at the end of unambiguous input before finalizing a recognition operation."},{"pos":[93874,94579],"content":"The speech recognizer uses this timeout interval when the recognition input is unambiguous. For example, for a speech recognition grammar that supports recognition of either \"new game please\" or \"new game\", \"new game please\" is an unambiguous input, and \"new game\" is an ambiguous input.       This property determines how long the speech recognition engine will wait for additional input before finalizing a recognition operation. The timeout interval can be from 0 seconds to 10 seconds, inclusive. The default is 150 milliseconds.       To set the timeout interval for ambiguous input, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> property.","needQuote":false,"needEscape":true,"nodes":[{"content":"The speech recognizer uses this timeout interval when the recognition input is unambiguous. For example, for a speech recognition grammar that supports recognition of either \"new game please\" or \"new game\", \"new game please\" is an unambiguous input, and \"new game\" is an ambiguous input.       This property determines how long the speech recognition engine will wait for additional input before finalizing a recognition operation. The timeout interval can be from 0 seconds to 10 seconds, inclusive. The default is 150 milliseconds.       To set the timeout interval for ambiguous input, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> property.","pos":[0,693],"nodes":[{"content":"The speech recognizer uses this timeout interval when the recognition input is unambiguous.","pos":[0,91]},{"content":"For example, for a speech recognition grammar that supports recognition of either \"new game please\" or \"new game\", \"new game please\" is an unambiguous input, and \"new game\" is an ambiguous input.","pos":[92,287]},{"content":"This property determines how long the speech recognition engine will wait for additional input before finalizing a recognition operation.","pos":[294,431]},{"content":"The timeout interval can be from 0 seconds to 10 seconds, inclusive.","pos":[432,500]},{"content":"The default is 150 milliseconds.","pos":[501,533]},{"content":"To set the timeout interval for ambiguous input, use the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A&gt; property.","pos":[540,693],"source":"       To set the timeout interval for ambiguous input, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> property."}]}]},{"pos":[94711,94751],"content":"The duration of the interval of silence.","needQuote":true,"needEscape":true,"nodes":[{"content":"The duration of the interval of silence.","pos":[0,40]}]},{"pos":[94961,95032],"content":"This property is set to less than 0 seconds or greater than 10 seconds.","needQuote":true,"needEscape":true,"nodes":[{"content":"This property is set to less than 0 seconds or greater than 10 seconds.","pos":[0,71]}]},{"pos":[95543,95744],"content":"Gets or sets the interval of silence that the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> will accept at the end of ambiguous input before finalizing a recognition operation.","needQuote":true,"needEscape":true,"source":"Gets or sets the interval of silence that the <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref> will accept at the end of ambiguous input before finalizing a recognition operation."},{"pos":[95757,96453],"content":"The speech recognizer uses this timeout interval when the recognition input is ambiguous. For example, for a speech recognition grammar that supports recognition of either \"new game please\" or \"new game\", \"new game please\" is an unambiguous input, and \"new game\" is an ambiguous input.       This property determines how long the speech recognition engine will wait for additional input before finalizing a recognition operation. The timeout interval can be from 0 seconds to 10 seconds, inclusive. The default is 500 milliseconds.       To set the timeout interval for unambiguous input, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> property.","needQuote":false,"needEscape":true,"nodes":[{"content":"The speech recognizer uses this timeout interval when the recognition input is ambiguous. For example, for a speech recognition grammar that supports recognition of either \"new game please\" or \"new game\", \"new game please\" is an unambiguous input, and \"new game\" is an ambiguous input.       This property determines how long the speech recognition engine will wait for additional input before finalizing a recognition operation. The timeout interval can be from 0 seconds to 10 seconds, inclusive. The default is 500 milliseconds.       To set the timeout interval for unambiguous input, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> property.","pos":[0,684],"nodes":[{"content":"The speech recognizer uses this timeout interval when the recognition input is ambiguous.","pos":[0,89]},{"content":"For example, for a speech recognition grammar that supports recognition of either \"new game please\" or \"new game\", \"new game please\" is an unambiguous input, and \"new game\" is an ambiguous input.","pos":[90,285]},{"content":"This property determines how long the speech recognition engine will wait for additional input before finalizing a recognition operation.","pos":[292,429]},{"content":"The timeout interval can be from 0 seconds to 10 seconds, inclusive.","pos":[430,498]},{"content":"The default is 500 milliseconds.","pos":[499,531]},{"content":"To set the timeout interval for unambiguous input, use the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A&gt; property.","pos":[538,684],"source":"       To set the timeout interval for unambiguous input, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> property."}]}]},{"pos":[96594,96634],"content":"The duration of the interval of silence.","needQuote":true,"needEscape":true,"nodes":[{"content":"The duration of the interval of silence.","pos":[0,40]}]},{"pos":[96853,96924],"content":"This property is set to less than 0 seconds or greater than 10 seconds.","needQuote":true,"needEscape":true,"nodes":[{"content":"This property is set to less than 0 seconds or greater than 10 seconds.","pos":[0,71]}]},{"pos":[97345,97537],"content":"Gets a collection of the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Recognition.Grammar\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects that are loaded in this <bpt id=\"p2\">&lt;xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> instance.","needQuote":true,"needEscape":true,"source":"Gets a collection of the <xref href=\"System.Speech.Recognition.Grammar\"></xref> objects that are loaded in this <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref> instance."},{"pos":[98541,98622],"content":"The collection of <bpt id=\"p1\">&lt;xref href=\"System.Speech.Recognition.Grammar\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects.","needQuote":true,"needEscape":true,"source":"The collection of <xref href=\"System.Speech.Recognition.Grammar\"></xref> objects."},{"pos":[99197,99382],"content":"Gets or sets the time interval during which a <bpt id=\"p1\">&lt;xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> accepts input containing only silence before finalizing recognition.","needQuote":true,"needEscape":true,"source":"Gets or sets the time interval during which a <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref> accepts input containing only silence before finalizing recognition."},{"pos":[99395,100425],"content":"Each speech recognizer has an algorithm to distinguish between silence and speech. If the recognizer input is silence during the initial silence timeout period, then the recognizer finalizes that recognition operation.      -   For asynchronous recognition operations and emulation, the recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event, where the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InitialSilenceTimeout%2A?displayProperty=fullName> property is `true`, and the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A?displayProperty=fullName> property is `null`.      -   For synchronous recognition operations and emulation, the recognizer returns `null`, instead of a valid <xref:System.Speech.Recognition.RecognitionResult>.       If the initial silence timeout interval is set to 0, the recognizer does not perform an initial silence timeout check. The timeout interval can be any non-negative value. The default is 0 seconds.","needQuote":false,"needEscape":true,"nodes":[{"content":"Each speech recognizer has an algorithm to distinguish between silence and speech.","pos":[0,82]},{"content":"If the recognizer input is silence during the initial silence timeout period, then the recognizer finalizes that recognition operation.","pos":[83,218]},{"content":"-   For asynchronous recognition operations and emulation, the recognizer raises the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted&gt; event, where the &lt;xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InitialSilenceTimeout%2A?displayProperty=fullName&gt; property is <ph id=\"ph1\">`true`</ph>, and the &lt;xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A?displayProperty=fullName&gt; property is <ph id=\"ph2\">`null`</ph>.","pos":[224,656],"source":"      -   For asynchronous recognition operations and emulation, the recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event, where the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InitialSilenceTimeout%2A?displayProperty=fullName> property is `true`, and the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A?displayProperty=fullName> property is `null`."},{"content":"-   For synchronous recognition operations and emulation, the recognizer returns <ph id=\"ph1\">`null`</ph>, instead of a valid &lt;xref:System.Speech.Recognition.RecognitionResult&gt;.","pos":[662,821],"source":"      -   For synchronous recognition operations and emulation, the recognizer returns `null`, instead of a valid <xref:System.Speech.Recognition.RecognitionResult>."},{"content":"If the initial silence timeout interval is set to 0, the recognizer does not perform an initial silence timeout check.","pos":[828,946]},{"content":"The timeout interval can be any non-negative value.","pos":[947,998]},{"content":"The default is 0 seconds.","pos":[999,1024]}]},{"pos":[105245,105285],"content":"The duration of the interval of silence.","needQuote":true,"needEscape":true,"nodes":[{"content":"The duration of the interval of silence.","pos":[0,40]}]},{"pos":[105499,105543],"content":"This property is set to less than 0 seconds.","needQuote":true,"needEscape":true,"nodes":[{"content":"This property is set to less than 0 seconds.","pos":[0,44]}]},{"pos":[106028,106114],"content":"Returns information for all of the installed speech recognizers on the current system.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns information for all of the installed speech recognizers on the current system.","pos":[0,86]}]},{"pos":[106126,106267],"content":"To get information about the current recognizer, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo%2A> property.","needQuote":true,"needEscape":true,"nodes":[{"content":"To get information about the current recognizer, use the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo%2A&gt; property.","pos":[0,141],"source":"To get information about the current recognizer, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo%2A> property."}]},{"pos":[108509,108649],"content":"A read-only collection of the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Recognition.RecognizerInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects that describe the installed recognizers.","needQuote":true,"needEscape":true,"source":"A read-only collection of the <xref href=\"System.Speech.Recognition.RecognizerInfo\"></xref> objects that describe the installed recognizers."},{"pos":[109281,109365],"content":"Synchronously loads a <bpt id=\"p1\">&lt;xref href=\"System.Speech.Recognition.Grammar\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Synchronously loads a <xref href=\"System.Speech.Recognition.Grammar\"></xref> object."},{"pos":[109378,110443],"content":"The recognizer throws an exception if the <xref:System.Speech.Recognition.Grammar> object is already loaded, is being asynchronously loaded, or has failed to load into any recognizer. You cannot load the same <xref:System.Speech.Recognition.Grammar> object into multiple instances of <xref:System.Speech.Recognition.SpeechRecognitionEngine>. Instead, create a new <xref:System.Speech.Recognition.Grammar> object for each <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance.       If the recognizer is running, applications must use <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> to pause the speech recognition engine before loading, unloading,  enabling, or disabling a grammar.       When you load a grammar, it is enabled by default. To disable a loaded grammar, use the <xref:System.Speech.Recognition.Grammar.Enabled%2A> property.       To load a <xref:System.Speech.Recognition.Grammar> object asynchronously, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.","needQuote":false,"needEscape":true,"nodes":[{"content":"The recognizer throws an exception if the <xref:System.Speech.Recognition.Grammar> object is already loaded, is being asynchronously loaded, or has failed to load into any recognizer. You cannot load the same <xref:System.Speech.Recognition.Grammar> object into multiple instances of <xref:System.Speech.Recognition.SpeechRecognitionEngine>. Instead, create a new <xref:System.Speech.Recognition.Grammar> object for each <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance.       If the recognizer is running, applications must use <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> to pause the speech recognition engine before loading, unloading,  enabling, or disabling a grammar.       When you load a grammar, it is enabled by default. To disable a loaded grammar, use the <xref:System.Speech.Recognition.Grammar.Enabled%2A> property.       To load a <xref:System.Speech.Recognition.Grammar> object asynchronously, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.","pos":[0,1059],"nodes":[{"content":"The recognizer throws an exception if the &lt;xref:System.Speech.Recognition.Grammar&gt; object is already loaded, is being asynchronously loaded, or has failed to load into any recognizer.","pos":[0,183],"source":"The recognizer throws an exception if the <xref:System.Speech.Recognition.Grammar> object is already loaded, is being asynchronously loaded, or has failed to load into any recognizer."},{"content":"You cannot load the same &lt;xref:System.Speech.Recognition.Grammar&gt; object into multiple instances of &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine&gt;.","pos":[184,341],"source":" You cannot load the same <xref:System.Speech.Recognition.Grammar> object into multiple instances of <xref:System.Speech.Recognition.SpeechRecognitionEngine>."},{"content":"Instead, create a new &lt;xref:System.Speech.Recognition.Grammar&gt; object for each &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine&gt; instance.","pos":[342,487],"source":" Instead, create a new <xref:System.Speech.Recognition.Grammar> object for each <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance."},{"content":"If the recognizer is running, applications must use &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A&gt; to pause the speech recognition engine before loading, unloading,  enabling, or disabling a grammar.","pos":[494,730],"source":"       If the recognizer is running, applications must use <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> to pause the speech recognition engine before loading, unloading,  enabling, or disabling a grammar."},{"content":"When you load a grammar, it is enabled by default.","pos":[737,787]},{"content":"To disable a loaded grammar, use the &lt;xref:System.Speech.Recognition.Grammar.Enabled%2A&gt; property.","pos":[788,886],"source":" To disable a loaded grammar, use the <xref:System.Speech.Recognition.Grammar.Enabled%2A> property."},{"content":"To load a &lt;xref:System.Speech.Recognition.Grammar&gt; object asynchronously, use the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A&gt; method.","pos":[893,1059],"source":"       To load a <xref:System.Speech.Recognition.Grammar> object asynchronously, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method."}]}]},{"pos":[112256,112283],"content":"The grammar object to load.","needQuote":true,"needEscape":true,"nodes":[{"content":"The grammar object to load.","pos":[0,27]}]},{"pos":[112475,112560],"content":"<ph id=\"ph1\">&lt;code&gt;Grammar&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>Grammar</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[112671,112716],"content":"<ph id=\"ph1\">&lt;code&gt;Grammar&lt;/code&gt;</ph> is not in a valid state.","needQuote":true,"needEscape":true,"source":"<code>Grammar</code> is not in a valid state."},{"pos":[113272,113322],"content":"Asynchronously loads a speech recognition grammar.","needQuote":true,"needEscape":true,"nodes":[{"content":"Asynchronously loads a speech recognition grammar.","pos":[0,50]}]},{"pos":[113335,114559],"content":"When the recognizer completes loading a <xref:System.Speech.Recognition.Grammar> object, it raises a <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted> event. The recognizer throws an exception if the <xref:System.Speech.Recognition.Grammar> object is already loaded, is being asynchronously loaded, or has failed to load into any recognizer. You cannot load the same <xref:System.Speech.Recognition.Grammar> object into multiple instances of <xref:System.Speech.Recognition.SpeechRecognitionEngine>. Instead, create a new <xref:System.Speech.Recognition.Grammar> object for each <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance.       If the recognizer is running, applications must use <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> to pause the speech recognition engine before loading, unloading,  enabling, or disabling a grammar.       When you load a grammar, it is enabled by default. To disable a loaded grammar, use the <xref:System.Speech.Recognition.Grammar.Enabled%2A> property.       To load a speech recognition grammar synchronously, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> method.","needQuote":false,"needEscape":true,"nodes":[{"content":"When the recognizer completes loading a <xref:System.Speech.Recognition.Grammar> object, it raises a <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted> event. The recognizer throws an exception if the <xref:System.Speech.Recognition.Grammar> object is already loaded, is being asynchronously loaded, or has failed to load into any recognizer. You cannot load the same <xref:System.Speech.Recognition.Grammar> object into multiple instances of <xref:System.Speech.Recognition.SpeechRecognitionEngine>. Instead, create a new <xref:System.Speech.Recognition.Grammar> object for each <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance.       If the recognizer is running, applications must use <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> to pause the speech recognition engine before loading, unloading,  enabling, or disabling a grammar.       When you load a grammar, it is enabled by default. To disable a loaded grammar, use the <xref:System.Speech.Recognition.Grammar.Enabled%2A> property.       To load a speech recognition grammar synchronously, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> method.","pos":[0,1218],"nodes":[{"content":"When the recognizer completes loading a &lt;xref:System.Speech.Recognition.Grammar&gt; object, it raises a &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted&gt; event.","pos":[0,185],"source":"When the recognizer completes loading a <xref:System.Speech.Recognition.Grammar> object, it raises a <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted> event."},{"content":"The recognizer throws an exception if the &lt;xref:System.Speech.Recognition.Grammar&gt; object is already loaded, is being asynchronously loaded, or has failed to load into any recognizer.","pos":[186,369],"source":" The recognizer throws an exception if the <xref:System.Speech.Recognition.Grammar> object is already loaded, is being asynchronously loaded, or has failed to load into any recognizer."},{"content":"You cannot load the same &lt;xref:System.Speech.Recognition.Grammar&gt; object into multiple instances of &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine&gt;.","pos":[370,527],"source":" You cannot load the same <xref:System.Speech.Recognition.Grammar> object into multiple instances of <xref:System.Speech.Recognition.SpeechRecognitionEngine>."},{"content":"Instead, create a new &lt;xref:System.Speech.Recognition.Grammar&gt; object for each &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine&gt; instance.","pos":[528,673],"source":" Instead, create a new <xref:System.Speech.Recognition.Grammar> object for each <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance."},{"content":"If the recognizer is running, applications must use &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A&gt; to pause the speech recognition engine before loading, unloading,  enabling, or disabling a grammar.","pos":[680,916],"source":"       If the recognizer is running, applications must use <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> to pause the speech recognition engine before loading, unloading,  enabling, or disabling a grammar."},{"content":"When you load a grammar, it is enabled by default.","pos":[923,973]},{"content":"To disable a loaded grammar, use the &lt;xref:System.Speech.Recognition.Grammar.Enabled%2A&gt; property.","pos":[974,1072],"source":" To disable a loaded grammar, use the <xref:System.Speech.Recognition.Grammar.Enabled%2A> property."},{"content":"To load a speech recognition grammar synchronously, use the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A&gt; method.","pos":[1079,1218],"source":"       To load a speech recognition grammar synchronously, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> method."}]}]},{"pos":[114757,114796],"content":"The speech recognition grammar to load.","needQuote":true,"needEscape":true,"nodes":[{"content":"The speech recognition grammar to load.","pos":[0,39]}]},{"pos":[114993,115078],"content":"<ph id=\"ph1\">&lt;code&gt;Grammar&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>Grammar</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[115189,115234],"content":"<ph id=\"ph1\">&lt;code&gt;Grammar&lt;/code&gt;</ph> is not in a valid state.","needQuote":true,"needEscape":true,"source":"<code>Grammar</code> is not in a valid state."},{"pos":[115347,115387],"content":"The asynchronous operation was canceled.","needQuote":true,"needEscape":true,"nodes":[{"content":"The asynchronous operation was canceled.","pos":[0,40]}]},{"pos":[115865,116053],"content":"Raised when the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> finishes the asynchronous loading of a <bpt id=\"p2\">&lt;xref href=\"System.Speech.Recognition.Grammar\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Raised when the <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref> finishes the asynchronous loading of a <xref href=\"System.Speech.Recognition.Grammar\"></xref> object."},{"pos":[116066,117432],"content":"The recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method initiates an asynchronous operation. The <xref:System.Speech.Recognition.SpeechRecognitionEngine> raises this event when it completes the operation. To get the <xref:System.Speech.Recognition.Grammar> object that the recognizer loaded, use the <xref:System.Speech.Recognition.LoadGrammarCompletedEventArgs.Grammar%2A> property of the associated <xref:System.Speech.Recognition.LoadGrammarCompletedEventArgs>. To get the current <xref:System.Speech.Recognition.Grammar> objects the recognizer has loaded, use the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.Grammars%2A> property.       If the recognizer is running, applications must use <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> to pause the speech recognition engine before loading, unloading,  enabling, or disabling a grammar.       When you create a LoadGrammarCompleted delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).","needQuote":false,"needEscape":true,"nodes":[{"content":"The recognizer's &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A&gt; method initiates an asynchronous operation.","pos":[0,137],"source":"The recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method initiates an asynchronous operation."},{"content":"The &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine&gt; raises this event when it completes the operation.","pos":[138,249],"source":" The <xref:System.Speech.Recognition.SpeechRecognitionEngine> raises this event when it completes the operation."},{"content":"To get the &lt;xref:System.Speech.Recognition.Grammar&gt; object that the recognizer loaded, use the &lt;xref:System.Speech.Recognition.LoadGrammarCompletedEventArgs.Grammar%2A&gt; property of the associated &lt;xref:System.Speech.Recognition.LoadGrammarCompletedEventArgs&gt;.","pos":[250,509],"source":" To get the <xref:System.Speech.Recognition.Grammar> object that the recognizer loaded, use the <xref:System.Speech.Recognition.LoadGrammarCompletedEventArgs.Grammar%2A> property of the associated <xref:System.Speech.Recognition.LoadGrammarCompletedEventArgs>."},{"content":"To get the current &lt;xref:System.Speech.Recognition.Grammar&gt; objects the recognizer has loaded, use the recognizer's &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.Grammars%2A&gt; property.","pos":[510,704],"source":" To get the current <xref:System.Speech.Recognition.Grammar> objects the recognizer has loaded, use the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.Grammars%2A> property."},{"content":"If the recognizer is running, applications must use &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A&gt; to pause the speech recognition engine before loading, unloading,  enabling, or disabling a grammar.","pos":[711,947],"source":"       If the recognizer is running, applications must use <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> to pause the speech recognition engine before loading, unloading,  enabling, or disabling a grammar."},{"content":"When you create a LoadGrammarCompleted delegate, you identify the method that will handle the event.","pos":[954,1054]},{"content":"To associate the event with your event handler, add an instance of the delegate to the event.","pos":[1055,1148]},{"content":"The event handler is called whenever the event occurs, unless you remove the delegate.","pos":[1149,1235]},{"content":"For more information about event-handler delegates, see <bpt id=\"p1\">[</bpt>Events and Delegates<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=162418)</ept>.","pos":[1236,1362],"source":" For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418)."}]},{"pos":[121632,121644],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[122107,122291],"content":"Gets or sets the maximum number of alternate recognition results that the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> returns for each recognition operation.","needQuote":true,"needEscape":true,"source":"Gets or sets the maximum number of alternate recognition results that the <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref> returns for each recognition operation."},{"pos":[122304,122635],"content":"The <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> property of the <xref:System.Speech.Recognition.RecognitionResult> class contains the collection of <xref:System.Speech.Recognition.RecognizedPhrase> objects that represent possible interpretations of the input.       The default value for MaxAlternates is 10.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> property of the <xref:System.Speech.Recognition.RecognitionResult> class contains the collection of <xref:System.Speech.Recognition.RecognizedPhrase> objects that represent possible interpretations of the input.       The default value for MaxAlternates is 10.","pos":[0,329],"nodes":[{"content":"The &lt;xref:System.Speech.Recognition.RecognitionResult.Alternates%2A&gt; property of the &lt;xref:System.Speech.Recognition.RecognitionResult&gt; class contains the collection of &lt;xref:System.Speech.Recognition.RecognizedPhrase&gt; objects that represent possible interpretations of the input.","pos":[0,280],"source":"The <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> property of the <xref:System.Speech.Recognition.RecognitionResult> class contains the collection of <xref:System.Speech.Recognition.RecognizedPhrase> objects that represent possible interpretations of the input."},{"content":"The default value for MaxAlternates is 10.","pos":[287,329]}]}]},{"pos":[122755,122797],"content":"The number of alternate results to return.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of alternate results to return.","pos":[0,42]}]},{"pos":[123003,123047],"content":"MaxAlternates is set to a value less than 0.","needQuote":true,"needEscape":true,"nodes":[{"content":"MaxAlternates is set to a value less than 0.","pos":[0,44]}]},{"pos":[123590,123640],"content":"Returns the values of settings for the recognizer.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the values of settings for the recognizer.","pos":[0,50]}]},{"pos":[123653,125410],"content":"Recognizer settings can contain string, 64-bit integer, or memory address data. The following table describes the settings that are defined for a Microsoft Speech API (SAPI)-compliant recognizer. The following settings must have the same range for each recognizer that supports the setting. A SAPI-compliant recognizer is not required to support these settings and can support other settings.      |Name|Description|   |----------|-----------------|   |`ResourceUsage`|Specifies the recognizer's CPU consumption. The range is from 0 to 100. The default value is 50.|   |`ResponseSpeed`|Indicates the length of silence at the end of unambiguous input before the speech recognizer completes a recognition operation. The range is from 0 to 10,000 milliseconds (ms). This setting corresponds to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> property.  Default = 150ms.|   |`ComplexResponseSpeed`|Indicates the length of silence at the end of ambiguous input before the speech recognizer completes a recognition operation. The range is from 0 to 10,000ms. This setting corresponds to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> property. Default = 500ms.|   |`AdaptationOn`|Indicates whether adaptation of the acoustic model is ON (value = `1`) or OFF (value = `0`). The default value is `1` (ON).|   |`PersistedBackgroundAdaptation`|Indicates whether background adaptation is ON (value = `1`) or OFF (value = `0`), and persists the setting in the registry. The default value is `1` (ON).|       To update a setting for the recognizer, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> methods.","needQuote":false,"needEscape":true,"nodes":[{"content":"Recognizer settings can contain string, 64-bit integer, or memory address data.","pos":[0,79]},{"content":"The following table describes the settings that are defined for a Microsoft Speech API (SAPI)-compliant recognizer.","pos":[80,195]},{"content":"The following settings must have the same range for each recognizer that supports the setting.","pos":[196,290]},{"content":"A SAPI-compliant recognizer is not required to support these settings and can support other settings.","pos":[291,392]},{"content":"|Name|Description|   |----------|-----------------|   |<ph id=\"ph1\">`ResourceUsage`</ph>|Specifies the recognizer's CPU consumption.","pos":[398,512],"source":"      |Name|Description|   |----------|-----------------|   |`ResourceUsage`|Specifies the recognizer's CPU consumption."},{"content":"The range is from 0 to 100.","pos":[513,540]},{"content":"The default value is 50.|   |<ph id=\"ph1\">`ResponseSpeed`</ph>|Indicates the length of silence at the end of unambiguous input before the speech recognizer completes a recognition operation.","pos":[541,713],"source":" The default value is 50.|   |`ResponseSpeed`|Indicates the length of silence at the end of unambiguous input before the speech recognizer completes a recognition operation."},{"content":"The range is from 0 to 10,000 milliseconds (ms).","pos":[714,762]},{"content":"This setting corresponds to the recognizer's &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A&gt; property.","pos":[763,895],"source":" This setting corresponds to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> property."},{"content":"Default = 150ms.|   |<ph id=\"ph1\">`ComplexResponseSpeed`</ph>|Indicates the length of silence at the end of ambiguous input before the speech recognizer completes a recognition operation.","pos":[897,1066],"source":"  Default = 150ms.|   |`ComplexResponseSpeed`|Indicates the length of silence at the end of ambiguous input before the speech recognizer completes a recognition operation."},{"content":"The range is from 0 to 10,000ms.","pos":[1067,1099]},{"content":"This setting corresponds to the recognizer's &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A&gt; property.","pos":[1100,1241],"source":" This setting corresponds to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> property."},{"content":"Default = 500ms.|   |<ph id=\"ph1\">`AdaptationOn`</ph>|Indicates whether adaptation of the acoustic model is ON (value = <ph id=\"ph2\">`1`</ph>) or OFF (value = <ph id=\"ph3\">`0`</ph>).","pos":[1242,1370],"source":" Default = 500ms.|   |`AdaptationOn`|Indicates whether adaptation of the acoustic model is ON (value = `1`) or OFF (value = `0`)."},{"content":"The default value is <ph id=\"ph1\">`1`</ph> (ON).|   |<ph id=\"ph2\">`PersistedBackgroundAdaptation`</ph>|Indicates whether background adaptation is ON (value = <ph id=\"ph3\">`1`</ph>) or OFF (value = <ph id=\"ph4\">`0`</ph>), and persists the setting in the registry.","pos":[1371,1561],"source":" The default value is `1` (ON).|   |`PersistedBackgroundAdaptation`|Indicates whether background adaptation is ON (value = `1`) or OFF (value = `0`), and persists the setting in the registry."},{"content":"The default value is <ph id=\"ph1\">`1`</ph> (ON).|       To update a setting for the recognizer, use one of the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A&gt; methods.","pos":[1562,1747],"source":" The default value is `1` (ON).|       To update a setting for the recognizer, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> methods."}]},{"pos":[127477,127511],"content":"The name of the setting to return.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the setting to return.","pos":[0,34]}]},{"pos":[127569,127594],"content":"The value of the setting.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value of the setting.","pos":[0,25]}]},{"pos":[127797,127886],"content":"<ph id=\"ph1\">&lt;code&gt;settingName&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>settingName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[127981,128031],"content":"<ph id=\"ph1\">&lt;code&gt;settingName&lt;/code&gt;</ph> is the empty string (\"\").","needQuote":true,"needEscape":true,"source":"<code>settingName</code> is the empty string (\"\")."},{"pos":[128172,128224],"content":"The recognizer does not have a setting by that name.","needQuote":true,"needEscape":true,"nodes":[{"content":"The recognizer does not have a setting by that name.","pos":[0,52]}]},{"pos":[128654,128706],"content":"Performs a synchronous speech recognition operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Performs a synchronous speech recognition operation.","pos":[0,52]}]},{"pos":[128719,130432],"content":"This method performs a single recognition operation. The recognizer performs this operation against its loaded and enabled speech recognition grammars.       During a call to this method, the recognizer can raise the following events:      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.  Raised when the recognizer detects input that it can identify as speech.      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.  Raised when input creates an ambiguous match with one of the active grammars.      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>. Raised when the recognizer finalizes a recognition operation.       The recognizer does not raise the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event when using this method.       The Recognize method returns a <xref:System.Speech.Recognition.RecognitionResult> object, or `null` if the operation is not successful.       A synchronous recognition operation can fail for the following reasons:      -   Speech is not detected before the timeout intervals expire for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties.      -   The recognition engine detects speech but finds no matches in any of its loaded and enabled <xref:System.Speech.Recognition.Grammar> objects.       To perform asynchronous recognition, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> methods.","needQuote":false,"needEscape":true,"nodes":[{"content":"This method performs a single recognition operation.","pos":[0,52]},{"content":"The recognizer performs this operation against its loaded and enabled speech recognition grammars.","pos":[53,151]},{"content":"During a call to this method, the recognizer can raise the following events:      -   &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected&gt;.","pos":[158,316],"source":"       During a call to this method, the recognizer can raise the following events:      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>."},{"content":"Raised when the recognizer detects input that it can identify as speech.","pos":[318,390]},{"content":"-   &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized&gt;.","pos":[396,476],"source":"      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>."},{"content":"Raised when input creates an ambiguous match with one of the active grammars.","pos":[478,555]},{"content":"-   &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected&gt; or &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized&gt;.","pos":[561,725],"source":"      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>."},{"content":"Raised when the recognizer finalizes a recognition operation.","pos":[726,787]},{"content":"The recognizer does not raise the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted&gt; event when using this method.","pos":[794,933],"source":"       The recognizer does not raise the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event when using this method."},{"content":"The Recognize method returns a &lt;xref:System.Speech.Recognition.RecognitionResult&gt; object, or <ph id=\"ph1\">`null`</ph> if the operation is not successful.","pos":[940,1075],"source":"       The Recognize method returns a <xref:System.Speech.Recognition.RecognitionResult> object, or `null` if the operation is not successful."},{"content":"A synchronous recognition operation can fail for the following reasons:      -   Speech is not detected before the timeout intervals expire for the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A&gt; or &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A&gt; properties.","pos":[1082,1400],"source":"       A synchronous recognition operation can fail for the following reasons:      -   Speech is not detected before the timeout intervals expire for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties."},{"content":"-   The recognition engine detects speech but finds no matches in any of its loaded and enabled &lt;xref:System.Speech.Recognition.Grammar&gt; objects.","pos":[1406,1551],"source":"      -   The recognition engine detects speech but finds no matches in any of its loaded and enabled <xref:System.Speech.Recognition.Grammar> objects."},{"content":"To perform asynchronous recognition, use one of the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A&gt; methods.","pos":[1558,1693],"source":"       To perform asynchronous recognition, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> methods."}]},{"pos":[132220,132390],"content":"The recognition result for the input, or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the operation is not successful or the recognizer is not enabled.","needQuote":true,"needEscape":true,"source":"The recognition result for the input, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the operation is not successful or the recognizer is not enabled."},{"pos":[132968,133068],"content":"Performs a synchronous speech recognition operation with a specified initial silence timeout period.","needQuote":true,"needEscape":true,"nodes":[{"content":"Performs a synchronous speech recognition operation with a specified initial silence timeout period.","pos":[0,100]}]},{"pos":[133081,134998],"content":"If the speech recognition engine detects speech within the time interval specified by `initialSilenceTimeout` argument, Recognize performs a single recognition operation and then terminates.  The `initialSilenceTimeout` parameter supersedes the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> property.       During a call to this method, the recognizer can raise the following events:      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.  Raised when the recognizer detects input that it can identify as speech.      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.  Raised when input creates an ambiguous match with one of the active grammars.      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>. Raised when the recognizer finalizes a recognition operation.       The recognizer does not raise the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event when using this method.       The <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize> method returns a <xref:System.Speech.Recognition.RecognitionResult> object, or `null` if the operation is not successful.       A synchronous recognition operation can fail for the following reasons:      -   Speech is not detected before the timeout intervals expire for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> or for the `initialSilenceTimeout` parameter.      -   The recognition engine detects speech but finds no matches in any of its loaded and enabled <xref:System.Speech.Recognition.Grammar> objects.       To perform asynchronous recognition, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> methods.","needQuote":false,"needEscape":true,"nodes":[{"content":"If the speech recognition engine detects speech within the time interval specified by <ph id=\"ph1\">`initialSilenceTimeout`</ph> argument, Recognize performs a single recognition operation and then terminates.","pos":[0,190],"source":"If the speech recognition engine detects speech within the time interval specified by `initialSilenceTimeout` argument, Recognize performs a single recognition operation and then terminates."},{"content":"The <ph id=\"ph1\">`initialSilenceTimeout`</ph> parameter supersedes the recognizer's &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A&gt; property.","pos":[192,349],"source":"  The `initialSilenceTimeout` parameter supersedes the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> property."},{"content":"During a call to this method, the recognizer can raise the following events:      -   &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected&gt;.","pos":[356,514],"source":"       During a call to this method, the recognizer can raise the following events:      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>."},{"content":"Raised when the recognizer detects input that it can identify as speech.","pos":[516,588]},{"content":"-   &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized&gt;.","pos":[594,674],"source":"      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>."},{"content":"Raised when input creates an ambiguous match with one of the active grammars.","pos":[676,753]},{"content":"-   &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected&gt; or &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized&gt;.","pos":[759,923],"source":"      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>."},{"content":"Raised when the recognizer finalizes a recognition operation.","pos":[924,985]},{"content":"The recognizer does not raise the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted&gt; event when using this method.","pos":[992,1131],"source":"       The recognizer does not raise the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event when using this method."},{"content":"The &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize&gt; method returns a &lt;xref:System.Speech.Recognition.RecognitionResult&gt; object, or <ph id=\"ph1\">`null`</ph> if the operation is not successful.","pos":[1138,1330],"source":"       The <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize> method returns a <xref:System.Speech.Recognition.RecognitionResult> object, or `null` if the operation is not successful."},{"content":"A synchronous recognition operation can fail for the following reasons:      -   Speech is not detected before the timeout intervals expire for the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A&gt; or for the <ph id=\"ph1\">`initialSilenceTimeout`</ph> parameter.","pos":[1337,1604],"source":"       A synchronous recognition operation can fail for the following reasons:      -   Speech is not detected before the timeout intervals expire for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> or for the `initialSilenceTimeout` parameter."},{"content":"-   The recognition engine detects speech but finds no matches in any of its loaded and enabled &lt;xref:System.Speech.Recognition.Grammar&gt; objects.","pos":[1610,1755],"source":"      -   The recognition engine detects speech but finds no matches in any of its loaded and enabled <xref:System.Speech.Recognition.Grammar> objects."},{"content":"To perform asynchronous recognition, use one of the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A&gt; methods.","pos":[1762,1897],"source":"       To perform asynchronous recognition, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> methods."}]},{"pos":[136694,136803],"content":"The interval of time a speech recognizer accepts input containing only silence before finalizing recognition.","needQuote":true,"needEscape":true,"nodes":[{"content":"The interval of time a speech recognizer accepts input containing only silence before finalizing recognition.","pos":[0,109]}]},{"pos":[136891,137061],"content":"The recognition result for the input, or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the operation is not successful or the recognizer is not enabled.","needQuote":true,"needEscape":true,"source":"The recognition result for the input, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the operation is not successful or the recognizer is not enabled."},{"pos":[137606,137667],"content":"Performs a single, asynchronous speech recognition operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Performs a single, asynchronous speech recognition operation.","pos":[0,61]}]},{"pos":[137680,139476],"content":"This method performs a single, asynchronous recognition operation. The recognizer performs the operation against its loaded and enabled speech recognition grammars.       During a call to this method, the recognizer can raise the following events:      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.  Raised when the recognizer detects input that it can identify as speech.      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.  Raised when input creates an ambiguous match with one of the active grammars.      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>. Raised when the recognizer finalizes a recognition operation.      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>. Raised when a <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> operation finishes.       To retrieve the result of an asynchronous recognition operation, attach an event handler to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event. The recognizer raises this event whenever it successfully completes a synchronous or asynchronous recognition operation. If recognition was not successful, the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A> property on <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> object, which you can access in the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event, will be `null`.       To perform synchronous recognition, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> methods.","needQuote":false,"needEscape":true,"nodes":[{"content":"This method performs a single, asynchronous recognition operation.","pos":[0,66]},{"content":"The recognizer performs the operation against its loaded and enabled speech recognition grammars.","pos":[67,164]},{"content":"During a call to this method, the recognizer can raise the following events:      -   &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected&gt;.","pos":[171,329],"source":"       During a call to this method, the recognizer can raise the following events:      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>."},{"content":"Raised when the recognizer detects input that it can identify as speech.","pos":[331,403]},{"content":"-   &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized&gt;.","pos":[409,489],"source":"      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>."},{"content":"Raised when input creates an ambiguous match with one of the active grammars.","pos":[491,568]},{"content":"-   &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected&gt; or &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized&gt;.","pos":[574,738],"source":"      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>."},{"content":"Raised when the recognizer finalizes a recognition operation.","pos":[739,800]},{"content":"-   &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted&gt;.","pos":[806,886],"source":"      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>."},{"content":"Raised when a &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A&gt; operation finishes.","pos":[887,995],"source":" Raised when a <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> operation finishes."},{"content":"To retrieve the result of an asynchronous recognition operation, attach an event handler to the recognizer's &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized&gt; event.","pos":[1002,1191],"source":"       To retrieve the result of an asynchronous recognition operation, attach an event handler to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event."},{"content":"The recognizer raises this event whenever it successfully completes a synchronous or asynchronous recognition operation.","pos":[1192,1312]},{"content":"If recognition was not successful, the &lt;xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A&gt; property on &lt;xref:System.Speech.Recognition.RecognizeCompletedEventArgs&gt; object, which you can access in the handler for the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted&gt; event, will be <ph id=\"ph1\">`null`</ph>.","pos":[1313,1646],"source":" If recognition was not successful, the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A> property on <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> object, which you can access in the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event, will be `null`."},{"content":"To perform synchronous recognition, use one of the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A&gt; methods.","pos":[1653,1782],"source":"       To perform synchronous recognition, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> methods."}]},{"pos":[146799,146863],"content":"Performs one or more asynchronous speech recognition operations.","needQuote":true,"needEscape":true,"nodes":[{"content":"Performs one or more asynchronous speech recognition operations.","pos":[0,64]}]},{"pos":[146876,149315],"content":"If `mode` is <xref:System.Speech.Recognition.RecognizeMode>, the recognizer continues performing asynchronous recognition operations until the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop%2A> method is called.       During a call to this method, the recognizer can raise the following events:      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.  Raised when the recognizer detects input that it can identify as speech.      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.  Raised when input creates an ambiguous match with one of the active grammars.      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>. Raised when the recognizer finalizes a recognition operation.      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>. Raised when a <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> operation finishes.       To retrieve the result of an asynchronous recognition operation, attach an event handler to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event. The recognizer raises this event whenever it successfully completes a synchronous or asynchronous recognition operation. If recognition was not successful, the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A> property on <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> object, which you can access in the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event, will be `null`.       An asynchronous recognition operation can fail for the following reasons:      -   Speech is not detected before the timeout intervals expire for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties.      -   The recognition engine detects speech but finds no matches in any of its loaded and enabled <xref:System.Speech.Recognition.Grammar> objects.       To perform synchronous recognition, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> methods.","needQuote":false,"needEscape":true,"nodes":[{"content":"If <ph id=\"ph1\">`mode`</ph> is &lt;xref:System.Speech.Recognition.RecognizeMode&gt;, the recognizer continues performing asynchronous recognition operations until the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel%2A&gt; or &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop%2A&gt; method is called.","pos":[0,323],"source":"If `mode` is <xref:System.Speech.Recognition.RecognizeMode>, the recognizer continues performing asynchronous recognition operations until the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop%2A> method is called."},{"content":"During a call to this method, the recognizer can raise the following events:      -   &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected&gt;.","pos":[330,488],"source":"       During a call to this method, the recognizer can raise the following events:      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>."},{"content":"Raised when the recognizer detects input that it can identify as speech.","pos":[490,562]},{"content":"-   &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized&gt;.","pos":[568,648],"source":"      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>."},{"content":"Raised when input creates an ambiguous match with one of the active grammars.","pos":[650,727]},{"content":"-   &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected&gt; or &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized&gt;.","pos":[733,897],"source":"      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>."},{"content":"Raised when the recognizer finalizes a recognition operation.","pos":[898,959]},{"content":"-   &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted&gt;.","pos":[965,1045],"source":"      -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>."},{"content":"Raised when a &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A&gt; operation finishes.","pos":[1046,1154],"source":" Raised when a <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> operation finishes."},{"content":"To retrieve the result of an asynchronous recognition operation, attach an event handler to the recognizer's &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized&gt; event.","pos":[1161,1350],"source":"       To retrieve the result of an asynchronous recognition operation, attach an event handler to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event."},{"content":"The recognizer raises this event whenever it successfully completes a synchronous or asynchronous recognition operation.","pos":[1351,1471]},{"content":"If recognition was not successful, the &lt;xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A&gt; property on &lt;xref:System.Speech.Recognition.RecognizeCompletedEventArgs&gt; object, which you can access in the handler for the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted&gt; event, will be <ph id=\"ph1\">`null`</ph>.","pos":[1472,1805],"source":" If recognition was not successful, the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A> property on <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> object, which you can access in the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event, will be `null`."},{"content":"An asynchronous recognition operation can fail for the following reasons:      -   Speech is not detected before the timeout intervals expire for the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A&gt; or &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A&gt; properties.","pos":[1812,2132],"source":"       An asynchronous recognition operation can fail for the following reasons:      -   Speech is not detected before the timeout intervals expire for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties."},{"content":"-   The recognition engine detects speech but finds no matches in any of its loaded and enabled &lt;xref:System.Speech.Recognition.Grammar&gt; objects.","pos":[2138,2283],"source":"      -   The recognition engine detects speech but finds no matches in any of its loaded and enabled <xref:System.Speech.Recognition.Grammar> objects."},{"content":"To perform synchronous recognition, use one of the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A&gt; methods.","pos":[2290,2419],"source":"       To perform synchronous recognition, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> methods."}]},{"pos":[156332,156400],"content":"Indicates whether to perform one or multiple recognition operations.","needQuote":true,"needEscape":true,"nodes":[{"content":"Indicates whether to perform one or multiple recognition operations.","pos":[0,68]}]},{"pos":[156980,157082],"content":"Terminates asynchronous recognition without waiting for the current recognition operation to complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"Terminates asynchronous recognition without waiting for the current recognition operation to complete.","pos":[0,102]}]},{"pos":[157095,158102],"content":"This method immediately finalizes asynchronous recognition. If the current asynchronous recognition operation is receiving input, the input is truncated and the operation completes with the existing input. The recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event when an asynchronous operation is canceled, and sets the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property of the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> to `true`. This method cancels asynchronous operations initiated by the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods.       To stop asynchronous recognition without truncating the input, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop%2A> method.","needQuote":false,"needEscape":true,"nodes":[{"content":"This method immediately finalizes asynchronous recognition.","pos":[0,59]},{"content":"If the current asynchronous recognition operation is receiving input, the input is truncated and the operation completes with the existing input.","pos":[60,205]},{"content":"The recognizer raises the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted&gt; or &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted&gt; event when an asynchronous operation is canceled, and sets the &lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt; property of the &lt;xref:System.Speech.Recognition.RecognizeCompletedEventArgs&gt; to <ph id=\"ph1\">`true`</ph>.","pos":[206,610],"source":" The recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event when an asynchronous operation is canceled, and sets the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property of the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> to `true`."},{"content":"This method cancels asynchronous operations initiated by the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A&gt; and &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A&gt; methods.","pos":[611,841],"source":" This method cancels asynchronous operations initiated by the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods."},{"content":"To stop asynchronous recognition without truncating the input, use the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop%2A&gt; method.","pos":[848,1005],"source":"       To stop asynchronous recognition without truncating the input, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop%2A> method."}]},{"pos":[165228,165309],"content":"Stops asynchronous recognition after the current recognition operation completes.","needQuote":true,"needEscape":true,"nodes":[{"content":"Stops asynchronous recognition after the current recognition operation completes.","pos":[0,81]}]},{"pos":[165322,166374],"content":"This method finalizes asynchronous recognition without truncating input. If the current asynchronous recognition operation is receiving input, the recognizer continues accepting input until the current recognition operation is completed. The recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event when an asynchronous operation is stopped, and sets the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property of the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> to `true`. This method stops asynchronous operations initiated by the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods.       To immediately cancel asynchronous recognition with only the existing input, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel%2A> method.","needQuote":false,"needEscape":true,"nodes":[{"content":"This method finalizes asynchronous recognition without truncating input.","pos":[0,72]},{"content":"If the current asynchronous recognition operation is receiving input, the recognizer continues accepting input until the current recognition operation is completed.","pos":[73,237]},{"content":"The recognizer raises the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted&gt; or &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted&gt; event when an asynchronous operation is stopped, and sets the &lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt; property of the &lt;xref:System.Speech.Recognition.RecognizeCompletedEventArgs&gt; to <ph id=\"ph1\">`true`</ph>.","pos":[238,641],"source":" The recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event when an asynchronous operation is stopped, and sets the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property of the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> to `true`."},{"content":"This method stops asynchronous operations initiated by the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A&gt; and &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A&gt; methods.","pos":[642,870],"source":" This method stops asynchronous operations initiated by the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods."},{"content":"To immediately cancel asynchronous recognition with only the existing input, use the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel%2A&gt; method.","pos":[877,1050],"source":"       To immediately cancel asynchronous recognition with only the existing input, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel%2A> method."}]},{"pos":[173485,173620],"content":"Raised when the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> finalizes an asynchronous recognition operation.","needQuote":true,"needEscape":true,"source":"Raised when the <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref> finalizes an asynchronous recognition operation."},{"pos":[173633,175305],"content":"The <xref:System.Speech.Recognition.SpeechRecognitionEngine> object's <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> method initiates an asynchronous recognition operation. When the recognizer finalizes the asynchronous operation, it raises this event.       Using the handler for the RecognizeCompleted event, you can access the <xref:System.Speech.Recognition.RecognitionResult> in the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> object. If recognition was not successful, <xref:System.Speech.Recognition.RecognitionResult> will be `null`. To determine whether a timeout or an interruption in audio input caused recognition to fail, you can access the properties for <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.BabbleTimeout%2A>, or <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InputStreamEnded%2A>.       See the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> class for more information.       To obtain details on the best rejected recognition candidates, attach a handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> event.       When you create a RecognizeCompleted delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).","needQuote":false,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine&gt; object's &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A&gt; method initiates an asynchronous recognition operation.","pos":[0,200],"source":"The <xref:System.Speech.Recognition.SpeechRecognitionEngine> object's <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> method initiates an asynchronous recognition operation."},{"content":"When the recognizer finalizes the asynchronous operation, it raises this event.","pos":[201,280]},{"content":"Using the handler for the RecognizeCompleted event, you can access the &lt;xref:System.Speech.Recognition.RecognitionResult&gt; in the &lt;xref:System.Speech.Recognition.RecognizeCompletedEventArgs&gt; object.","pos":[287,484],"source":"       Using the handler for the RecognizeCompleted event, you can access the <xref:System.Speech.Recognition.RecognitionResult> in the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> object."},{"content":"If recognition was not successful, &lt;xref:System.Speech.Recognition.RecognitionResult&gt; will be <ph id=\"ph1\">`null`</ph>.","pos":[485,586],"source":" If recognition was not successful, <xref:System.Speech.Recognition.RecognitionResult> will be `null`."},{"content":"To determine whether a timeout or an interruption in audio input caused recognition to fail, you can access the properties for &lt;xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InitialSilenceTimeout%2A&gt;, &lt;xref:System.Speech.Recognition.RecognizeCompletedEventArgs.BabbleTimeout%2A&gt;, or &lt;xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InputStreamEnded%2A&gt;.","pos":[587,964],"source":" To determine whether a timeout or an interruption in audio input caused recognition to fail, you can access the properties for <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.BabbleTimeout%2A>, or <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InputStreamEnded%2A>."},{"content":"See the &lt;xref:System.Speech.Recognition.RecognizeCompletedEventArgs&gt; class for more information.","pos":[971,1067],"source":"       See the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> class for more information."},{"content":"To obtain details on the best rejected recognition candidates, attach a handler for the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected&gt; event.","pos":[1074,1251],"source":"       To obtain details on the best rejected recognition candidates, attach a handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> event."},{"content":"When you create a RecognizeCompleted delegate, you identify the method that will handle the event.","pos":[1258,1356]},{"content":"To associate the event with your event handler, add an instance of the delegate to the event.","pos":[1357,1450]},{"content":"The event handler is called whenever the event occurs, unless you remove the delegate.","pos":[1451,1537]},{"content":"For more information about event-handler delegates, see <bpt id=\"p1\">[</bpt>Events and Delegates<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=162418)</ept>.","pos":[1538,1664],"source":" For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418)."}]},{"pos":[179501,179513],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[180026,180171],"content":"Gets the current location of the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> in the audio input that it is processing.","needQuote":true,"needEscape":true,"source":"Gets the current location of the <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref> in the audio input that it is processing."},{"pos":[180184,180948],"content":"The audio position is specific to each speech recognizer. The zero value of an input stream is established when it is enabled.       The RecognizerAudioPosition property references the <xref:System.Speech.Recognition.SpeechRecognitionEngine> object's position within its audio input. By contrast, the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> property references the input device's position in its generated audio stream. These positions can be different. For example, if the recognizer has received input for which it has not yet generated a recognition result then the value of the RecognizerAudioPosition property is less than the value of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> property.","needQuote":false,"needEscape":true,"nodes":[{"content":"The audio position is specific to each speech recognizer. The zero value of an input stream is established when it is enabled.       The RecognizerAudioPosition property references the <xref:System.Speech.Recognition.SpeechRecognitionEngine> object's position within its audio input. By contrast, the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> property references the input device's position in its generated audio stream. These positions can be different. For example, if the recognizer has received input for which it has not yet generated a recognition result then the value of the RecognizerAudioPosition property is less than the value of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> property.","pos":[0,762],"nodes":[{"content":"The audio position is specific to each speech recognizer.","pos":[0,57]},{"content":"The zero value of an input stream is established when it is enabled.","pos":[58,126]},{"content":"The RecognizerAudioPosition property references the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine&gt; object's position within its audio input.","pos":[133,283],"source":"       The RecognizerAudioPosition property references the <xref:System.Speech.Recognition.SpeechRecognitionEngine> object's position within its audio input."},{"content":"By contrast, the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A&gt; property references the input device's position in its generated audio stream.","pos":[284,453],"source":" By contrast, the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> property references the input device's position in its generated audio stream."},{"content":"These positions can be different.","pos":[454,487]},{"content":"For example, if the recognizer has received input for which it has not yet generated a recognition result then the value of the RecognizerAudioPosition property is less than the value of the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A&gt; property.","pos":[488,762],"source":" For example, if the recognizer has received input for which it has not yet generated a recognition result then the value of the RecognizerAudioPosition property is less than the value of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> property."}]}]},{"pos":[181081,181153],"content":"The position of the recognizer in the audio input that it is processing.","needQuote":true,"needEscape":true,"nodes":[{"content":"The position of the recognizer in the audio input that it is processing.","pos":[0,72]}]},{"pos":[181708,181826],"content":"Gets information about the current instance of <bpt id=\"p1\">&lt;xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets information about the current instance of <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref>."},{"pos":[181838,182023],"content":"To get information about all of the installed speech recognizers for the current system, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> method.","needQuote":true,"needEscape":true,"nodes":[{"content":"To get information about all of the installed speech recognizers for the current system, use the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A&gt; method.","pos":[0,185],"source":"To get information about all of the installed speech recognizers for the current system, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> method."}]},{"pos":[183193,183241],"content":"Information about the current speech recognizer.","needQuote":true,"needEscape":true,"nodes":[{"content":"Information about the current speech recognizer.","pos":[0,48]}]},{"pos":[183829,183953],"content":"Raised when a running <bpt id=\"p1\">&lt;xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> pauses to accept modifications.","needQuote":true,"needEscape":true,"source":"Raised when a running <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref> pauses to accept modifications."},{"pos":[183966,185378],"content":"Applications must use <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> to pause a running instance of <xref:System.Speech.Recognition.SpeechRecognitionEngine> before modifying its settings or its <xref:System.Speech.Recognition.Grammar> objects. The <xref:System.Speech.Recognition.SpeechRecognitionEngine> raises this event when it is ready to accept modifications.       For example, while the <xref:System.Speech.Recognition.SpeechRecognitionEngine> is paused, you can load, unload, enable, and disable <xref:System.Speech.Recognition.Grammar> objects, and modify values for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> properties. For more information, see the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method.       When you create a RecognizerUpdateReached delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).","needQuote":false,"needEscape":true,"nodes":[{"content":"Applications must use &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A&gt; to pause a running instance of &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine&gt; before modifying its settings or its &lt;xref:System.Speech.Recognition.Grammar&gt; objects.","pos":[0,280],"source":"Applications must use <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> to pause a running instance of <xref:System.Speech.Recognition.SpeechRecognitionEngine> before modifying its settings or its <xref:System.Speech.Recognition.Grammar> objects."},{"content":"The &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine&gt; raises this event when it is ready to accept modifications.","pos":[281,401],"source":" The <xref:System.Speech.Recognition.SpeechRecognitionEngine> raises this event when it is ready to accept modifications."},{"content":"For example, while the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine&gt; is paused, you can load, unload, enable, and disable &lt;xref:System.Speech.Recognition.Grammar&gt; objects, and modify values for the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A&gt;, &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A&gt;, and &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A&gt; properties.","pos":[408,868],"source":"       For example, while the <xref:System.Speech.Recognition.SpeechRecognitionEngine> is paused, you can load, unload, enable, and disable <xref:System.Speech.Recognition.Grammar> objects, and modify values for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> properties."},{"content":"For more information, see the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A&gt; method.","pos":[869,990],"source":" For more information, see the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method."},{"content":"When you create a RecognizerUpdateReached delegate, you identify the method that will handle the event.","pos":[997,1100]},{"content":"To associate the event with your event handler, add an instance of the delegate to the event.","pos":[1101,1194]},{"content":"The event handler is called whenever the event occurs, unless you remove the delegate.","pos":[1195,1281]},{"content":"For more information about event-handler delegates, see <bpt id=\"p1\">[</bpt>Events and Delegates<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=162418)</ept>.","pos":[1282,1408],"source":" For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418)."}]},{"pos":[190348,190360],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[190877,190933],"content":"Requests that the recognizer pauses to update its state.","needQuote":true,"needEscape":true,"nodes":[{"content":"Requests that the recognizer pauses to update its state.","pos":[0,56]}]},{"pos":[190946,191600],"content":"When the recognizer generates the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event, the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> property of the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> is `null`.       To provide a user token, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method. To specify an audio position offset, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method.","needQuote":false,"needEscape":true,"nodes":[{"content":"When the recognizer generates the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached&gt; event, the &lt;xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A&gt; property of the &lt;xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs&gt; is <ph id=\"ph1\">`null`</ph>.","pos":[0,297],"source":"When the recognizer generates the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event, the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> property of the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> is `null`."},{"content":"To provide a user token, use the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A&gt; or &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A&gt; method.","pos":[304,515],"source":"       To provide a user token, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method."},{"content":"To specify an audio position offset, use the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A&gt; method.","pos":[516,652],"source":" To specify an audio position offset, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method."}]},{"pos":[197043,197150],"content":"Requests that the recognizer pauses to update its state and provides a user token for the associated event.","needQuote":true,"needEscape":true,"nodes":[{"content":"Requests that the recognizer pauses to update its state and provides a user token for the associated event.","pos":[0,107]}]},{"pos":[197163,197643],"content":"When the recognizer generates the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event, the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> property of the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> contains the value of the `userToken` parameter.       To specify an audio position offset, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method.","needQuote":false,"needEscape":true,"nodes":[{"content":"When the recognizer generates the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached&gt; event, the &lt;xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A&gt; property of the &lt;xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs&gt; contains the value of the <ph id=\"ph1\">`userToken`</ph> parameter.","pos":[0,335],"source":"When the recognizer generates the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event, the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> property of the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> contains the value of the `userToken` parameter."},{"content":"To specify an audio position offset, use the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A&gt; method.","pos":[342,478],"source":"       To specify an audio position offset, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method."}]},{"pos":[197805,197874],"content":"User-defined information that contains information for the operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"User-defined information that contains information for the operation.","pos":[0,69]}]},{"pos":[198585,198706],"content":"Requests that the recognizer pauses to update its state and provides an offset and a user token for the associated event.","needQuote":true,"needEscape":true,"nodes":[{"content":"Requests that the recognizer pauses to update its state and provides an offset and a user token for the associated event.","pos":[0,121]}]},{"pos":[198719,199365],"content":"The recognizer does not initiate the recognizer update request until the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> equals the current <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> plus `audioPositionAheadToRaiseUpdate`.       When the recognizer generates the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event, the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> property of the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> contains the value of the `userToken` parameter.","needQuote":false,"needEscape":true,"nodes":[{"content":"The recognizer does not initiate the recognizer update request until the recognizer's &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A&gt; equals the current &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A&gt; plus <ph id=\"ph1\">`audioPositionAheadToRaiseUpdate`</ph>.","pos":[0,302],"source":"The recognizer does not initiate the recognizer update request until the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> equals the current <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> plus `audioPositionAheadToRaiseUpdate`."},{"content":"When the recognizer generates the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached&gt; event, the &lt;xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A&gt; property of the &lt;xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs&gt; contains the value of the <ph id=\"ph1\">`userToken`</ph> parameter.","pos":[309,644],"source":"       When the recognizer generates the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event, the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> property of the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> contains the value of the `userToken` parameter."}]},{"pos":[199569,199638],"content":"User-defined information that contains information for the operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"User-defined information that contains information for the operation.","pos":[0,69]}]},{"pos":[199728,199849],"content":"The offset from the current <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition*> to delay the request.","needQuote":true,"needEscape":true,"nodes":[{"content":"The offset from the current &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition*&gt; to delay the request.","pos":[0,121],"source":"The offset from the current <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition*> to delay the request."}]},{"pos":[200659,200790],"content":"Configures the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object to receive input from an audio stream.","needQuote":true,"needEscape":true,"source":"Configures the <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref> object to receive input from an audio stream."},{"pos":[200802,201061],"content":"If the recognizer reaches the end of the input stream during a recognition operation, the recognition operation finalizes with the available input. Any subsequent recognition operations can generate an exception, unless you update the input to the recognizer.","needQuote":true,"needEscape":true,"nodes":[{"content":"If the recognizer reaches the end of the input stream during a recognition operation, the recognition operation finalizes with the available input. Any subsequent recognition operations can generate an exception, unless you update the input to the recognizer.","pos":[0,259],"nodes":[{"content":"If the recognizer reaches the end of the input stream during a recognition operation, the recognition operation finalizes with the available input.","pos":[0,147]},{"content":"Any subsequent recognition operations can generate an exception, unless you update the input to the recognizer.","pos":[148,259]}]}]},{"pos":[204708,204731],"content":"The audio input stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"The audio input stream.","pos":[0,23]}]},{"pos":[204833,204863],"content":"The format of the audio input.","needQuote":true,"needEscape":true,"nodes":[{"content":"The format of the audio input.","pos":[0,30]}]},{"pos":[205490,205630],"content":"Configures the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object to receive input from the default audio device.","needQuote":true,"needEscape":true,"source":"Configures the <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref> object to receive input from the default audio device."},{"pos":[209308,209352],"content":"Disables the input to the speech recognizer.","needQuote":true,"needEscape":true,"nodes":[{"content":"Disables the input to the speech recognizer.","pos":[0,44]}]},{"pos":[209364,209699],"content":"Configure the <xref:System.Speech.Recognition.SpeechRecognitionEngine> object for no input when using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods, or when taking a recognition engine temporarily off line.","needQuote":true,"needEscape":true,"nodes":[{"content":"Configure the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine&gt; object for no input when using the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A&gt; and &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A&gt; methods, or when taking a recognition engine temporarily off line.","pos":[0,335],"source":"Configure the <xref:System.Speech.Recognition.SpeechRecognitionEngine> object for no input when using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods, or when taking a recognition engine temporarily off line."}]},{"pos":[210390,210541],"content":"Configures the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object to receive input from a Waveform audio format (.wav) file.","needQuote":true,"needEscape":true,"source":"Configures the <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref> object to receive input from a Waveform audio format (.wav) file."},{"pos":[210553,210810],"content":"If the recognizer reaches the end of the input file during a recognition operation, the recognition operation finalizes with the available input. Any subsequent recognition operations can generate an exception, unless you update the input to the recognizer.","needQuote":true,"needEscape":true,"nodes":[{"content":"If the recognizer reaches the end of the input file during a recognition operation, the recognition operation finalizes with the available input. Any subsequent recognition operations can generate an exception, unless you update the input to the recognizer.","pos":[0,257],"nodes":[{"content":"If the recognizer reaches the end of the input file during a recognition operation, the recognition operation finalizes with the available input.","pos":[0,145]},{"content":"Any subsequent recognition operations can generate an exception, unless you update the input to the recognizer.","pos":[146,257]}]}]},{"pos":[213738,213775],"content":"The path of the file to use as input.","needQuote":true,"needEscape":true,"nodes":[{"content":"The path of the file to use as input.","pos":[0,37]}]},{"pos":[214413,214585],"content":"Configures the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object to receive input from a stream that contains Waveform audio format (.wav) data.","needQuote":true,"needEscape":true,"source":"Configures the <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref> object to receive input from a stream that contains Waveform audio format (.wav) data."},{"pos":[214597,214856],"content":"If the recognizer reaches the end of the input stream during a recognition operation, the recognition operation finalizes with the available input. Any subsequent recognition operations can generate an exception, unless you update the input to the recognizer.","needQuote":true,"needEscape":true,"nodes":[{"content":"If the recognizer reaches the end of the input stream during a recognition operation, the recognition operation finalizes with the available input. Any subsequent recognition operations can generate an exception, unless you update the input to the recognizer.","pos":[0,259],"nodes":[{"content":"If the recognizer reaches the end of the input stream during a recognition operation, the recognition operation finalizes with the available input.","pos":[0,147]},{"content":"Any subsequent recognition operations can generate an exception, unless you update the input to the recognizer.","pos":[148,259]}]}]},{"pos":[215031,215068],"content":"The stream containing the audio data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The stream containing the audio data.","pos":[0,37]}]},{"pos":[215617,215749],"content":"Raised when the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> detects input that it can identify as speech.","needQuote":true,"needEscape":true,"source":"Raised when the <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref> detects input that it can identify as speech."},{"pos":[215762,217418],"content":"Each speech recognizer has an algorithm to distinguish between silence and speech. When the <xref:System.Speech.Recognition.SpeechRecognitionEngine> performs a speech recognition operation, it raises the SpeechDetected event when its algorithm identifies the input as speech. The <xref:System.Speech.Recognition.SpeechDetectedEventArgs.AudioPosition%2A> property of the associated <xref:System.Speech.Recognition.SpeechDetectedEventArgs> object indicates location in the input stream where the recognizer detected speech. The <xref:System.Speech.Recognition.SpeechRecognitionEngine> raises the SpeechDetected event before it raises any of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>, or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> events.       For more information see the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods.       When you create a SpeechDetected delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).","needQuote":false,"needEscape":true,"nodes":[{"content":"Each speech recognizer has an algorithm to distinguish between silence and speech.","pos":[0,82]},{"content":"When the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine&gt; performs a speech recognition operation, it raises the SpeechDetected event when its algorithm identifies the input as speech.","pos":[83,275],"source":" When the <xref:System.Speech.Recognition.SpeechRecognitionEngine> performs a speech recognition operation, it raises the SpeechDetected event when its algorithm identifies the input as speech."},{"content":"The &lt;xref:System.Speech.Recognition.SpeechDetectedEventArgs.AudioPosition%2A&gt; property of the associated &lt;xref:System.Speech.Recognition.SpeechDetectedEventArgs&gt; object indicates location in the input stream where the recognizer detected speech.","pos":[276,521],"source":" The <xref:System.Speech.Recognition.SpeechDetectedEventArgs.AudioPosition%2A> property of the associated <xref:System.Speech.Recognition.SpeechDetectedEventArgs> object indicates location in the input stream where the recognizer detected speech."},{"content":"The &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine&gt; raises the SpeechDetected event before it raises any of the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized&gt;, &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized&gt;, or &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected&gt; events.","pos":[522,888],"source":" The <xref:System.Speech.Recognition.SpeechRecognitionEngine> raises the SpeechDetected event before it raises any of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>, or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> events."},{"content":"For more information see the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A&gt;, &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A&gt;, &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A&gt;, and &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A&gt; methods.","pos":[895,1243],"source":"       For more information see the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods."},{"content":"When you create a SpeechDetected delegate, you identify the method that will handle the event.","pos":[1250,1344]},{"content":"To associate the event with your event handler, add an instance of the delegate to the event.","pos":[1345,1438]},{"content":"The event handler is called whenever the event occurs, unless you remove the delegate.","pos":[1439,1525]},{"content":"For more information about event-handler delegates, see <bpt id=\"p1\">[</bpt>Events and Delegates<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=162418)</ept>.","pos":[1526,1652],"source":" For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418)."}]},{"pos":[220411,220423],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[220908,221092],"content":"Raised when the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> has recognized a word or words that may be a component of multiple complete phrases in a grammar.","needQuote":true,"needEscape":true,"source":"Raised when the <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref> has recognized a word or words that may be a component of multiple complete phrases in a grammar."},{"pos":[221105,222590],"content":"The <xref:System.Speech.Recognition.SpeechRecognitionEngine> generates numerous SpeechHypothesized events as it attempts to identify an input phrase. You can access the text of partially recognized phrases in the <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> property of the <xref:System.Speech.Recognition.SpeechHypothesizedEventArgs> object in the handler for the SpeechHypothesized event. Typically, handling these events is useful only for debugging.       <xref:System.Speech.Recognition.SpeechHypothesizedEventArgs> derives from <xref:System.Speech.Recognition.RecognitionEventArgs>.       For more information see the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> property and the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods.       When you create a SpeechHypothesized delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).","needQuote":false,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine&gt; generates numerous SpeechHypothesized events as it attempts to identify an input phrase.","pos":[0,149],"source":"The <xref:System.Speech.Recognition.SpeechRecognitionEngine> generates numerous SpeechHypothesized events as it attempts to identify an input phrase."},{"content":"You can access the text of partially recognized phrases in the &lt;xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A&gt; property of the &lt;xref:System.Speech.Recognition.SpeechHypothesizedEventArgs&gt; object in the handler for the SpeechHypothesized event.","pos":[150,409],"source":" You can access the text of partially recognized phrases in the <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> property of the <xref:System.Speech.Recognition.SpeechHypothesizedEventArgs> object in the handler for the SpeechHypothesized event."},{"content":"Typically, handling these events is useful only for debugging.","pos":[410,472]},{"content":"&lt;xref:System.Speech.Recognition.SpeechHypothesizedEventArgs&gt; derives from &lt;xref:System.Speech.Recognition.RecognitionEventArgs&gt;.","pos":[479,607],"source":"       <xref:System.Speech.Recognition.SpeechHypothesizedEventArgs> derives from <xref:System.Speech.Recognition.RecognitionEventArgs>."},{"content":"For more information see the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A&gt; property and the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A&gt;, &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A&gt;, &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A&gt;, and &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A&gt; methods.","pos":[614,1066],"source":"       For more information see the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> property and the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods."},{"content":"When you create a SpeechHypothesized delegate, you identify the method that will handle the event.","pos":[1073,1171]},{"content":"To associate the event with your event handler, add an instance of the delegate to the event.","pos":[1172,1265]},{"content":"The event handler is called whenever the event occurs, unless you remove the delegate.","pos":[1266,1352]},{"content":"For more information about event-handler delegates, see <bpt id=\"p1\">[</bpt>Events and Delegates<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=162418)</ept>.","pos":[1353,1479],"source":" For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418)."}]},{"pos":[225890,225902],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[226422,226637],"content":"Raised when the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> receives input that does not match any of its loaded and enabled <bpt id=\"p2\">&lt;xref href=\"System.Speech.Recognition.Grammar\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> objects.","needQuote":true,"needEscape":true,"source":"Raised when the <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref> receives input that does not match any of its loaded and enabled <xref href=\"System.Speech.Recognition.Grammar\"></xref> objects."},{"pos":[226650,228459],"content":"The recognizer raises this event if it determines that input does not match with sufficient confidence any of its loaded and enabled <xref:System.Speech.Recognition.Grammar> objects. The <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> property of the <xref:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs> contains the rejected <xref:System.Speech.Recognition.RecognitionResult> object. You can use the handler for the SpeechRecognitionRejected event to retrieve recognition <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> that were rejected and their <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> scores.       If your application is using a <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance, you can modify the confidence level at which speech input is accepted or rejected with one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> methods. You can modify how the speech recognition responds to non-speech input using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> properties.       When you create a SpeechRecognitionRejected delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).","needQuote":false,"needEscape":true,"nodes":[{"content":"The recognizer raises this event if it determines that input does not match with sufficient confidence any of its loaded and enabled &lt;xref:System.Speech.Recognition.Grammar&gt; objects.","pos":[0,182],"source":"The recognizer raises this event if it determines that input does not match with sufficient confidence any of its loaded and enabled <xref:System.Speech.Recognition.Grammar> objects."},{"content":"The &lt;xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A&gt; property of the &lt;xref:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs&gt; contains the rejected &lt;xref:System.Speech.Recognition.RecognitionResult&gt; object.","pos":[183,415],"source":" The <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> property of the <xref:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs> contains the rejected <xref:System.Speech.Recognition.RecognitionResult> object."},{"content":"You can use the handler for the SpeechRecognitionRejected event to retrieve recognition &lt;xref:System.Speech.Recognition.RecognitionResult.Alternates%2A&gt; that were rejected and their &lt;xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A&gt; scores.","pos":[416,669],"source":" You can use the handler for the SpeechRecognitionRejected event to retrieve recognition <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> that were rejected and their <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> scores."},{"content":"If your application is using a &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine&gt; instance, you can modify the confidence level at which speech input is accepted or rejected with one of the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A&gt; methods.","pos":[676,964],"source":"       If your application is using a <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance, you can modify the confidence level at which speech input is accepted or rejected with one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> methods."},{"content":"You can modify how the speech recognition responds to non-speech input using the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A&gt;, &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A&gt;, &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A&gt;, and &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A&gt; properties.","pos":[965,1385],"source":" You can modify how the speech recognition responds to non-speech input using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> properties."},{"content":"When you create a SpeechRecognitionRejected delegate, you identify the method that will handle the event.","pos":[1392,1497]},{"content":"To associate the event with your event handler, add an instance of the delegate to the event.","pos":[1498,1591]},{"content":"The event handler is called whenever the event occurs, unless you remove the delegate.","pos":[1592,1678]},{"content":"For more information about event-handler delegates, see <bpt id=\"p1\">[</bpt>Events and Delegates<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=162418)</ept>.","pos":[1679,1805],"source":" For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418)."}]},{"pos":[232526,232538],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[233013,233221],"content":"Raised when the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> receives input that matches any of its loaded and enabled <bpt id=\"p2\">&lt;xref href=\"System.Speech.Recognition.Grammar\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> objects.","needQuote":true,"needEscape":true,"source":"Raised when the <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref> receives input that matches any of its loaded and enabled <xref href=\"System.Speech.Recognition.Grammar\"></xref> objects."},{"pos":[233234,235770],"content":"You can initiate a recognition operation using the one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> methods. The recognizer raises the SpeechRecognized event if it determines that input matches one of its loaded <xref:System.Speech.Recognition.Grammar> objects with a sufficient level of confidence to constitute recognition. The <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> property of the <xref:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs> contains the accepted <xref:System.Speech.Recognition.RecognitionResult> object. Handlers of SpeechRecognized events can obtain the recognized phrase as well as a list of recognition <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> with lower confidence scores.       If your application is using a <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance, you can modify the confidence level at which speech input is accepted or rejected with one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> methods.  You can modify how the speech recognition responds to non-speech input using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> properties.       When the recognizer receives input that matches a grammar, the <xref:System.Speech.Recognition.Grammar> object can raise its <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event. The <xref:System.Speech.Recognition.Grammar> object's <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event is raised prior to the speech recognizer's SpeechRecognized event. Any tasks specific to a particular grammar should always be performed by a handler for the <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event.       When you create a SpeechRecognized delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).","needQuote":false,"needEscape":true,"nodes":[{"content":"You can initiate a recognition operation using the one of the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A&gt; or &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A&gt; methods.","pos":[0,218],"source":"You can initiate a recognition operation using the one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> methods."},{"content":"The recognizer raises the SpeechRecognized event if it determines that input matches one of its loaded &lt;xref:System.Speech.Recognition.Grammar&gt; objects with a sufficient level of confidence to constitute recognition.","pos":[219,435],"source":" The recognizer raises the SpeechRecognized event if it determines that input matches one of its loaded <xref:System.Speech.Recognition.Grammar> objects with a sufficient level of confidence to constitute recognition."},{"content":"The &lt;xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A&gt; property of the &lt;xref:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs&gt; contains the accepted &lt;xref:System.Speech.Recognition.RecognitionResult&gt; object.","pos":[436,668],"source":" The <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> property of the <xref:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs> contains the accepted <xref:System.Speech.Recognition.RecognitionResult> object."},{"content":"Handlers of SpeechRecognized events can obtain the recognized phrase as well as a list of recognition &lt;xref:System.Speech.Recognition.RecognitionResult.Alternates%2A&gt; with lower confidence scores.","pos":[669,865],"source":" Handlers of SpeechRecognized events can obtain the recognized phrase as well as a list of recognition <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> with lower confidence scores."},{"content":"If your application is using a &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine&gt; instance, you can modify the confidence level at which speech input is accepted or rejected with one of the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A&gt; methods.","pos":[872,1160],"source":"       If your application is using a <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance, you can modify the confidence level at which speech input is accepted or rejected with one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> methods."},{"content":"You can modify how the speech recognition responds to non-speech input using the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A&gt;, &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A&gt;, &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A&gt;, and &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A&gt; properties.","pos":[1162,1582],"source":"  You can modify how the speech recognition responds to non-speech input using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> properties."},{"content":"When the recognizer receives input that matches a grammar, the &lt;xref:System.Speech.Recognition.Grammar&gt; object can raise its &lt;xref:System.Speech.Recognition.Grammar.SpeechRecognized&gt; event.","pos":[1589,1778],"source":"       When the recognizer receives input that matches a grammar, the <xref:System.Speech.Recognition.Grammar> object can raise its <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event."},{"content":"The &lt;xref:System.Speech.Recognition.Grammar&gt; object's &lt;xref:System.Speech.Recognition.Grammar.SpeechRecognized&gt; event is raised prior to the speech recognizer's SpeechRecognized event.","pos":[1779,1963],"source":" The <xref:System.Speech.Recognition.Grammar> object's <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event is raised prior to the speech recognizer's SpeechRecognized event."},{"content":"Any tasks specific to a particular grammar should always be performed by a handler for the &lt;xref:System.Speech.Recognition.Grammar.SpeechRecognized&gt; event.","pos":[1964,2119],"source":" Any tasks specific to a particular grammar should always be performed by a handler for the <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event."},{"content":"When you create a SpeechRecognized delegate, you identify the method that will handle the event.","pos":[2126,2222]},{"content":"To associate the event with your event handler, add an instance of the delegate to the event.","pos":[2223,2316]},{"content":"The event handler is called whenever the event occurs, unless you remove the delegate.","pos":[2317,2403]},{"content":"For more information about event-handler delegates, see <bpt id=\"p1\">[</bpt>Events and Delegates<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=162418)</ept>.","pos":[2404,2530],"source":" For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418)."}]},{"pos":[240067,240079],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[240566,240661],"content":"Unloads all <bpt id=\"p1\">&lt;xref href=\"System.Speech.Recognition.Grammar\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects from the recognizer.","needQuote":true,"needEscape":true,"source":"Unloads all <xref href=\"System.Speech.Recognition.Grammar\"></xref> objects from the recognizer."},{"pos":[240674,241133],"content":"If the recognizer is currently loading a <xref:System.Speech.Recognition.Grammar> asynchronously, this method waits until the <xref:System.Speech.Recognition.Grammar> is loaded, before it unloads all of the <xref:System.Speech.Recognition.Grammar> objects from the <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance.       To unload a specific grammar, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar%2A> method.","needQuote":false,"needEscape":true,"nodes":[{"content":"If the recognizer is currently loading a <xref:System.Speech.Recognition.Grammar> asynchronously, this method waits until the <xref:System.Speech.Recognition.Grammar> is loaded, before it unloads all of the <xref:System.Speech.Recognition.Grammar> objects from the <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance.       To unload a specific grammar, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar%2A> method.","pos":[0,457],"nodes":[{"content":"If the recognizer is currently loading a &lt;xref:System.Speech.Recognition.Grammar&gt; asynchronously, this method waits until the &lt;xref:System.Speech.Recognition.Grammar&gt; is loaded, before it unloads all of the &lt;xref:System.Speech.Recognition.Grammar&gt; objects from the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine&gt; instance.","pos":[0,331],"source":"If the recognizer is currently loading a <xref:System.Speech.Recognition.Grammar> asynchronously, this method waits until the <xref:System.Speech.Recognition.Grammar> is loaded, before it unloads all of the <xref:System.Speech.Recognition.Grammar> objects from the <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance."},{"content":"To unload a specific grammar, use the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar%2A&gt; method.","pos":[338,457],"source":"       To unload a specific grammar, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar%2A> method."}]}]},{"pos":[244542,244713],"content":"Unloads a specified <bpt id=\"p1\">&lt;xref href=\"System.Speech.Recognition.Grammar\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object from the <bpt id=\"p2\">&lt;xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> instance.","needQuote":true,"needEscape":true,"source":"Unloads a specified <xref href=\"System.Speech.Recognition.Grammar\"></xref> object from the <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref> instance."},{"pos":[244725,245199],"content":"If the recognizer is running, applications must use <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> to pause the <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance before loading, unloading,  enabling, or disabling a <xref:System.Speech.Recognition.Grammar> object. To unload all <xref:System.Speech.Recognition.Grammar> objects, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars%2A> method.","needQuote":true,"needEscape":true,"nodes":[{"content":"If the recognizer is running, applications must use <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> to pause the <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance before loading, unloading,  enabling, or disabling a <xref:System.Speech.Recognition.Grammar> object. To unload all <xref:System.Speech.Recognition.Grammar> objects, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars%2A> method.","pos":[0,474],"nodes":[{"content":"If the recognizer is running, applications must use &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A&gt; to pause the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine&gt; instance before loading, unloading,  enabling, or disabling a &lt;xref:System.Speech.Recognition.Grammar&gt; object.","pos":[0,316],"source":"If the recognizer is running, applications must use <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> to pause the <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance before loading, unloading,  enabling, or disabling a <xref:System.Speech.Recognition.Grammar> object."},{"content":"To unload all &lt;xref:System.Speech.Recognition.Grammar&gt; objects, use the &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars%2A&gt; method.","pos":[317,474],"source":" To unload all <xref:System.Speech.Recognition.Grammar> objects, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars%2A> method."}]}]},{"pos":[248086,248115],"content":"The grammar object to unload.","needQuote":true,"needEscape":true,"nodes":[{"content":"The grammar object to unload.","pos":[0,29]}]},{"pos":[248309,248394],"content":"<ph id=\"ph1\">&lt;code&gt;Grammar&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>Grammar</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[248505,248618],"content":"The grammar is not loaded in this recognizer, or this recognizer is currently loading the grammar asynchronously.","needQuote":true,"needEscape":true,"nodes":[{"content":"The grammar is not loaded in this recognizer, or this recognizer is currently loading the grammar asynchronously.","pos":[0,113]}]},{"pos":[249210,249352],"content":"Updates the specified setting for the <bpt id=\"p1\">&lt;xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> with the specified integer value.","needQuote":true,"needEscape":true,"source":"Updates the specified setting for the <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref> with the specified integer value."},{"pos":[249364,249766],"content":"With the exception of `PersistedBackgroundAdaptation`, property values set using the UpdateRecognizerSetting method remain in effect only for the current instance of <xref:System.Speech.Recognition.SpeechRecognitionEngine>, after which they revert to their default settings. See <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> for descriptions of supported settings.","needQuote":true,"needEscape":true,"nodes":[{"content":"With the exception of <ph id=\"ph1\">`PersistedBackgroundAdaptation`</ph>, property values set using the UpdateRecognizerSetting method remain in effect only for the current instance of &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine&gt;, after which they revert to their default settings.","pos":[0,274],"source":"With the exception of `PersistedBackgroundAdaptation`, property values set using the UpdateRecognizerSetting method remain in effect only for the current instance of <xref:System.Speech.Recognition.SpeechRecognitionEngine>, after which they revert to their default settings."},{"content":"See &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A&gt; for descriptions of supported settings.","pos":[275,402],"source":" See <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> for descriptions of supported settings."}]},{"pos":[252894,252928],"content":"The name of the setting to update.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the setting to update.","pos":[0,34]}]},{"pos":[252996,253026],"content":"The new value for the setting.","needQuote":true,"needEscape":true,"nodes":[{"content":"The new value for the setting.","pos":[0,30]}]},{"pos":[253230,253319],"content":"<ph id=\"ph1\">&lt;code&gt;settingName&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>settingName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[253414,253464],"content":"<ph id=\"ph1\">&lt;code&gt;settingName&lt;/code&gt;</ph> is the empty string (\"\").","needQuote":true,"needEscape":true,"source":"<code>settingName</code> is the empty string (\"\")."},{"pos":[253605,253657],"content":"The recognizer does not have a setting by that name.","needQuote":true,"needEscape":true,"nodes":[{"content":"The recognizer does not have a setting by that name.","pos":[0,52]}]},{"pos":[254254,254342],"content":"Updates the specified speech recognition engine setting with the specified string value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Updates the specified speech recognition engine setting with the specified string value.","pos":[0,88]}]},{"pos":[254354,254756],"content":"With the exception of `PersistedBackgroundAdaptation`, property values set using the UpdateRecognizerSetting method remain in effect only for the current instance of <xref:System.Speech.Recognition.SpeechRecognitionEngine>, after which they revert to their default settings. See <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> for descriptions of supported settings.","needQuote":true,"needEscape":true,"nodes":[{"content":"With the exception of <ph id=\"ph1\">`PersistedBackgroundAdaptation`</ph>, property values set using the UpdateRecognizerSetting method remain in effect only for the current instance of &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine&gt;, after which they revert to their default settings.","pos":[0,274],"source":"With the exception of `PersistedBackgroundAdaptation`, property values set using the UpdateRecognizerSetting method remain in effect only for the current instance of <xref:System.Speech.Recognition.SpeechRecognitionEngine>, after which they revert to their default settings."},{"content":"See &lt;xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A&gt; for descriptions of supported settings.","pos":[275,402],"source":" See <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> for descriptions of supported settings."}]},{"pos":[254942,254976],"content":"The name of the setting to update.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the setting to update.","pos":[0,34]}]},{"pos":[255045,255075],"content":"The new value for the setting.","needQuote":true,"needEscape":true,"nodes":[{"content":"The new value for the setting.","pos":[0,30]}]},{"pos":[255279,255368],"content":"<ph id=\"ph1\">&lt;code&gt;settingName&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>settingName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[255463,255513],"content":"<ph id=\"ph1\">&lt;code&gt;settingName&lt;/code&gt;</ph> is the empty string (\"\").","needQuote":true,"needEscape":true,"source":"<code>settingName</code> is the empty string (\"\")."},{"pos":[255654,255706],"content":"The recognizer does not have a setting by that name.","needQuote":true,"needEscape":true,"nodes":[{"content":"The recognizer does not have a setting by that name.","pos":[0,52]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Speech.Recognition.SpeechRecognitionEngine\n  id: SpeechRecognitionEngine\n  children:\n  - System.Speech.Recognition.SpeechRecognitionEngine.#ctor\n  - System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.Globalization.CultureInfo)\n  - System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.Speech.Recognition.RecognizerInfo)\n  - System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.String)\n  - System.Speech.Recognition.SpeechRecognitionEngine.AudioFormat\n  - System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel\n  - System.Speech.Recognition.SpeechRecognitionEngine.AudioLevelUpdated\n  - System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition\n  - System.Speech.Recognition.SpeechRecognitionEngine.AudioSignalProblemOccurred\n  - System.Speech.Recognition.SpeechRecognitionEngine.AudioState\n  - System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged\n  - System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout\n  - System.Speech.Recognition.SpeechRecognitionEngine.Dispose\n  - System.Speech.Recognition.SpeechRecognitionEngine.Dispose(System.Boolean)\n  - System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)\n  - System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)\n  - System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String,System.Globalization.CompareOptions)\n  - System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)\n  - System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)\n  - System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String,System.Globalization.CompareOptions)\n  - System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted\n  - System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout\n  - System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous\n  - System.Speech.Recognition.SpeechRecognitionEngine.Grammars\n  - System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout\n  - System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers\n  - System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar(System.Speech.Recognition.Grammar)\n  - System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync(System.Speech.Recognition.Grammar)\n  - System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted\n  - System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates\n  - System.Speech.Recognition.SpeechRecognitionEngine.QueryRecognizerSetting(System.String)\n  - System.Speech.Recognition.SpeechRecognitionEngine.Recognize\n  - System.Speech.Recognition.SpeechRecognitionEngine.Recognize(System.TimeSpan)\n  - System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync\n  - System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync(System.Speech.Recognition.RecognizeMode)\n  - System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel\n  - System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop\n  - System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted\n  - System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition\n  - System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo\n  - System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached\n  - System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate\n  - System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate(System.Object)\n  - System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate(System.Object,System.TimeSpan)\n  - System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)\n  - System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice\n  - System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull\n  - System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile(System.String)\n  - System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream(System.IO.Stream)\n  - System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected\n  - System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized\n  - System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected\n  - System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized\n  - System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars\n  - System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar(System.Speech.Recognition.Grammar)\n  - System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting(System.String,System.Int32)\n  - System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting(System.String,System.String)\n  langs:\n  - csharp\n  name: SpeechRecognitionEngine\n  nameWithType: SpeechRecognitionEngine\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine\n  type: Class\n  summary: Provides the means to access and manage an in-process speech recognition engine.\n  remarks: \"You can create an instance of this class for any of the installed speech recognizers. To get information about which recognizers are installed, use the static <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> method.  \\n  \\n This class is for running speech recognition engines in-process, and provides control over various aspects of speech recognition, as follows:  \\n  \\n-   To create an in-process speech recognizer, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.%23ctor%2A> constructors.  \\n  \\n-   To manage speech recognition grammars, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars%2A> methods, and the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Grammars%2A> property.  \\n  \\n-   To configure the input to the recognizer, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>, or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A> method.  \\n  \\n-   To perform speech recognition, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> method.  \\n  \\n-   To modify how recognition handles silence or unexpected input, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> properties.  \\n  \\n-   To change the number of alternates the recognizer returns, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates%2A> property. The recognizer returns recognition results in a <xref:System.Speech.Recognition.RecognitionResult> object.  \\n  \\n-   To synchronize changes to the recognizer, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method. The recognizer uses more than one thread to perform tasks.  \\n  \\n-   To emulate input to the recognizer, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods.  \\n  \\n The SpeechRecognitionEngine object is for the sole use of the process that instantiated the object. By contrast, the <xref:System.Speech.Recognition.SpeechRecognizer> shares a single recognizer with any application that wants to use it.  \\n  \\n> [!NOTE]\\n>  Always call <xref:System.Speech.Recognition.SpeechRecognitionEngine.Dispose%2A> before you release your last reference to the speech recognizer. Otherwise, the resources it is using will not be freed until the garbage collector calls the recognizer object's `Finalize` method.\"\n  example:\n  - \"The following example shows part of a console application that demonstrates basic speech recognition. Because this example uses the `Multiple` mode of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> method, it performs recognition until you close the console window or stop debugging.  \\n  \\n```c#  \\nusing System;  \\nusing System.Speech.Recognition;  \\n  \\nnamespace SpeechRecognitionApp  \\n{  \\n  class Program  \\n  {  \\n    static void Main(string[] args)  \\n    {  \\n  \\n      // Create an in-process speech recognizer for the en-US locale.  \\n      using (  \\n      SpeechRecognitionEngine recognizer =  \\n        new SpeechRecognitionEngine(  \\n          new System.Globalization.CultureInfo(\\\"en-US\\\")))  \\n      {  \\n  \\n        // Create and load a dictation grammar.  \\n        recognizer.LoadGrammar(new DictationGrammar());  \\n  \\n        // Add a handler for the speech recognized event.  \\n        recognizer.SpeechRecognized +=   \\n          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  \\n  \\n        // Configure input to the speech recognizer.  \\n        recognizer.SetInputToDefaultAudioDevice();  \\n  \\n        // Start asynchronous, continuous speech recognition.  \\n        recognizer.RecognizeAsync(RecognizeMode.Multiple);  \\n  \\n        // Keep the console window open.  \\n        while (true)  \\n        {  \\n          Console.ReadLine();  \\n        }  \\n      }  \\n    }  \\n  \\n    // Handle the SpeechRecognized event.  \\n    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\"Recognized text: \\\" + e.Result.Text);  \\n    }  \\n  }  \\n}  \\n```\"\n  syntax:\n    content: 'public class SpeechRecognitionEngine : IDisposable'\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.#ctor\n  id: '#ctor'\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  langs:\n  - csharp\n  name: SpeechRecognitionEngine()\n  nameWithType: SpeechRecognitionEngine.SpeechRecognitionEngine()\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionEngine()\n  type: Constructor\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Initializes a new instance of the <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref> class using the default speech recognizer for the system.\n  remarks: \"Before the speech recognizer can begin speech recognition, you must load at least one recognition grammar and configure the input for the recognizer.  \\n  \\n To load a grammar, call the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.  \\n  \\n To configure the audio input, use one of the following methods:  \\n  \\n-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>  \\n  \\n-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>  \\n  \\n-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>  \\n  \\n-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>  \\n  \\n-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>\"\n  syntax:\n    content: public SpeechRecognitionEngine ();\n    parameters: []\n  overload: System.Speech.Recognition.SpeechRecognitionEngine.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.Globalization.CultureInfo)\n  id: '#ctor(System.Globalization.CultureInfo)'\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  langs:\n  - csharp\n  name: SpeechRecognitionEngine(CultureInfo)\n  nameWithType: SpeechRecognitionEngine.SpeechRecognitionEngine(CultureInfo)\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionEngine(CultureInfo)\n  type: Constructor\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Initializes a new instance of the <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref> class using the default speech recognizer for a specified locale.\n  remarks: \"Microsoft Windows and the System.Speech API accept all valid language-country codes. To perform speech recognition using the language specified in the `CultureInfo` argument, a speech recognition engine that supports that language-country code must be installed. The speech recognition engines that shipped with Microsoft Windows 7 work with the following language-country codes.  \\n  \\n-   en-GB. English (United Kingdom)  \\n  \\n-   en-US. English (United States)  \\n  \\n-   de-DE. German (Germany)  \\n  \\n-   es-ES. Spanish (Spain)  \\n  \\n-   fr-FR. French (France)  \\n  \\n-   ja-JP. Japanese (Japan)  \\n  \\n-   zh-CN. Chinese (China)  \\n  \\n-   zh-TW. Chinese (Taiwan)  \\n  \\n Two-letter language codes such as \\\"en\\\", \\\"fr\\\", or \\\"es\\\" are also permitted.  \\n  \\n Before the speech recognizer can begin recognition, you must load at least one speech recognition grammar and configure the input for the recognizer.  \\n  \\n To load a grammar, call the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.  \\n  \\n To configure the audio input, use one of the following methods:  \\n  \\n-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>  \\n  \\n-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>  \\n  \\n-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>  \\n  \\n-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>  \\n  \\n-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>\"\n  example:\n  - \"The following example shows part of a console application that demonstrates basic speech recognition, and initializes a speech recognizer for the en-US locale.  \\n  \\n```c#  \\nusing System;  \\nusing System.Speech.Recognition;  \\n  \\nnamespace SpeechRecognitionApp  \\n{  \\n  class Program  \\n  {  \\n    static void Main(string[] args)  \\n    {  \\n  \\n      // Create an in-process speech recognizer for the en-US locale.  \\n      using (  \\n      SpeechRecognitionEngine recognizer =  \\n        new SpeechRecognitionEngine(  \\n          new System.Globalization.CultureInfo(\\\"en-US\\\")))  \\n      {  \\n  \\n        // Create and load a dictation grammar.  \\n        recognizer.LoadGrammar(new DictationGrammar());  \\n  \\n        // Add a handler for the speech recognized event.  \\n        recognizer.SpeechRecognized +=   \\n          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  \\n  \\n        // Configure input to the speech recognizer.  \\n        recognizer.SetInputToDefaultAudioDevice();  \\n  \\n        // Start asynchronous, continuous speech recognition.  \\n        recognizer.RecognizeAsync(RecognizeMode.Multiple);  \\n  \\n        // Keep the console window open.  \\n        while (true)  \\n        {  \\n          Console.ReadLine();  \\n        }  \\n      }  \\n    }  \\n  \\n    // Handle the SpeechRecognized event.  \\n    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\"Recognized text: \\\" + e.Result.Text);  \\n    }  \\n  }  \\n}  \\n```\"\n  syntax:\n    content: public SpeechRecognitionEngine (System.Globalization.CultureInfo culture);\n    parameters:\n    - id: culture\n      type: System.Globalization.CultureInfo\n      description: The locale that the speech recognizer must support.\n  overload: System.Speech.Recognition.SpeechRecognitionEngine.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: None of the installed speech recognizers support the specified locale, or <code>culture</code> is the invariant culture.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>Culture</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.Speech.Recognition.RecognizerInfo)\n  id: '#ctor(System.Speech.Recognition.RecognizerInfo)'\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  langs:\n  - csharp\n  name: SpeechRecognitionEngine(RecognizerInfo)\n  nameWithType: SpeechRecognitionEngine.SpeechRecognitionEngine(RecognizerInfo)\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionEngine(RecognizerInfo)\n  type: Constructor\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Initializes a new instance of the <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref> using the information in a <xref href=\"System.Speech.Recognition.RecognizerInfo\"></xref> object to specify the recognizer to use.\n  remarks: \"You can create an instance of this class for any of the installed speech recognizers. To get information about which recognizers are installed, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> method.  \\n  \\n Before the speech recognizer can begin recognition, you must load at least one speech recognition grammar and configure the input for the recognizer.  \\n  \\n To load a grammar, call the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.  \\n  \\n To configure the audio input, use one of the following methods:  \\n  \\n-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>  \\n  \\n-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>  \\n  \\n-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>  \\n  \\n-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>  \\n  \\n-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>\"\n  example:\n  - \"The following example shows part of a console application that demonstrates basic speech recognition, and initializes a speech recognizer that supports the English language.  \\n  \\n```c#  \\n using System;  \\nusing System.Speech.Recognition;  \\n  \\nnamespace SpeechRecognitionApp  \\n{  \\n  class Program  \\n  {  \\n    static void Main(string[] args)  \\n    {  \\n  \\n      // Select a speech recognizer that supports English.  \\n      RecognizerInfo info = null;  \\n      foreach (RecognizerInfo ri in SpeechRecognitionEngine.InstalledRecognizers())  \\n      {  \\n        if (ri.Culture.TwoLetterISOLanguageName.Equals(\\\"en\\\"))  \\n        {  \\n          info = ri;  \\n          break;  \\n        }  \\n      }  \\n      if (info == null) return;  \\n  \\n      // Create the selected recognizer.  \\n      using (SpeechRecognitionEngine recognizer =  \\n        new SpeechRecognitionEngine(info))  \\n      {  \\n  \\n        // Create and load a dictation grammar.  \\n        recognizer.LoadGrammar(new DictationGrammar());  \\n  \\n        // Add a handler for the speech recognized event.  \\n        recognizer.SpeechRecognized +=   \\n          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  \\n  \\n        // Configure input to the speech recognizer.  \\n        recognizer.SetInputToDefaultAudioDevice();  \\n  \\n        // Start asynchronous, continuous speech recognition.  \\n        recognizer.RecognizeAsync(RecognizeMode.Multiple);  \\n  \\n        // Keep the console window open.  \\n        while (true)  \\n        {  \\n          Console.ReadLine();  \\n        }  \\n      }  \\n    }  \\n  \\n    // Handle the SpeechRecognized event.  \\n    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\"Recognized text: \\\" + e.Result.Text);  \\n    }  \\n  }  \\n}  \\n```\"\n  syntax:\n    content: public SpeechRecognitionEngine (System.Speech.Recognition.RecognizerInfo recognizerInfo);\n    parameters:\n    - id: recognizerInfo\n      type: System.Speech.Recognition.RecognizerInfo\n      description: The information for the specific speech recognizer.\n  overload: System.Speech.Recognition.SpeechRecognitionEngine.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  langs:\n  - csharp\n  name: SpeechRecognitionEngine(String)\n  nameWithType: SpeechRecognitionEngine.SpeechRecognitionEngine(String)\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionEngine(String)\n  type: Constructor\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Initializes a new instance of the <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref> class with a string parameter that specifies the name of the recognizer to use.\n  remarks: \"The token name of the recognizer is the value of the <xref:System.Speech.Recognition.RecognizerInfo.Id%2A> property of the <xref:System.Speech.Recognition.RecognizerInfo> object returned by the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo%2A> property of the recognizer. To get a collection of all the installed recognizers, use the static <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> method.  \\n  \\n Before the speech recognizer can begin recognition, you must load at least one speech recognition grammar and configure the input for the recognizer.  \\n  \\n To load a grammar, call the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.  \\n  \\n To configure the audio input, use one of the following methods:  \\n  \\n-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>  \\n  \\n-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>  \\n  \\n-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>  \\n  \\n-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>  \\n  \\n-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>\"\n  example:\n  - \"The following example shows part of a console application that demonstrates basic speech recognition, and creates an instance of the Speech Recognizer 8.0 for Windows (English - US).  \\n  \\n```c#  \\nusing System;  \\nusing System.Speech.Recognition;  \\n  \\nnamespace SpeechRecognitionApp  \\n{  \\n  class Program  \\n  {  \\n    static void Main(string[] args)  \\n    {  \\n  \\n      // Create an instance of the Microsoft Speech Recognizer 8.0 for  \\n      // Windows (English - US).  \\n      using (SpeechRecognitionEngine recognizer =  \\n        new SpeechRecognitionEngine(\\\"MS-1033-80-DESK\\\"))  \\n      {  \\n  \\n        // Create and load a dictation grammar.  \\n        recognizer.LoadGrammar(new DictationGrammar());  \\n  \\n        // Add a handler for the speech recognized event.  \\n        recognizer.SpeechRecognized += new EventHandler(recognizer_SpeechRecognized);  \\n  \\n        // Configure input to the speech recognizer.  \\n        recognizer.SetInputToDefaultAudioDevice();  \\n  \\n        // Start asynchronous, continuous speech recognition.  \\n        recognizer.RecognizeAsync(RecognizeMode.Multiple);  \\n  \\n        // Keep the console window open.  \\n        while (true)  \\n        {  \\n          Console.ReadLine();  \\n        }  \\n      }  \\n    }  \\n  \\n    // Handle the SpeechRecognized event.  \\n    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\"Recognized text: \\\" + e.Result.Text);  \\n    }  \\n  }  \\n}  \\n  \\n```\"\n  syntax:\n    content: public SpeechRecognitionEngine (string recognizerId);\n    parameters:\n    - id: recognizerId\n      type: System.String\n      description: The token name of the speech recognizer to use.\n  overload: System.Speech.Recognition.SpeechRecognitionEngine.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: No speech recognizer with that token name is installed, or <code>recognizerId</code> is the empty string (\"\").\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>recognizerId</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.AudioFormat\n  id: AudioFormat\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  langs:\n  - csharp\n  name: AudioFormat\n  nameWithType: SpeechRecognitionEngine.AudioFormat\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.AudioFormat\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Gets the format of the audio being received by the <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref>.\n  remarks: \"To configure the audio input, use one of the following methods:  \\n  \\n-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>  \\n  \\n-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>  \\n  \\n-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>  \\n  \\n-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>  \\n  \\n-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>\"\n  example:\n  - \"The example below uses AudioFormat to obtain and display audio format data.  \\n  \\n```  \\nstatic void DisplayAudioDeviceFormat(Label label, SpeechRecognitionEngine recognitionEngine)   \\n{  \\n  \\n  if (recognitionEngine != null && label != null)   \\n  {  \\n    label.Text = String.Format(\\\"Encoding Format:         {0}\\\\n\\\" +  \\n          \\\"AverageBytesPerSecond    {1}\\\\n\\\" +  \\n          \\\"BitsPerSample            {2}\\\\n\\\" +  \\n          \\\"BlockAlign               {3}\\\\n\\\" +  \\n          \\\"ChannelCount             {4}\\\\n\\\" +  \\n          \\\"SamplesPerSecond         {5}\\\",  \\n          recognitionEngine.AudioFormat.EncodingFormat.ToString(),  \\n          recognitionEngine.AudioFormat.AverageBytesPerSecond,  \\n          recognitionEngine.AudioFormat.BitsPerSample,  \\n          recognitionEngine.AudioFormat.BlockAlign,  \\n          recognitionEngine.AudioFormat.ChannelCount,  \\n          recognitionEngine.AudioFormat.SamplesPerSecond);  \\n    }  \\n  }  \\n}  \\n```\"\n  syntax:\n    content: public System.Speech.AudioFormat.SpeechAudioFormatInfo AudioFormat { get; }\n    return:\n      type: System.Speech.AudioFormat.SpeechAudioFormatInfo\n      description: The format of audio at the input to the <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref> instance, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the input is not configured or set to the null input.\n  overload: System.Speech.Recognition.SpeechRecognitionEngine.AudioFormat*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel\n  id: AudioLevel\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  langs:\n  - csharp\n  name: AudioLevel\n  nameWithType: SpeechRecognitionEngine.AudioLevel\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Gets the level of the audio being received by the <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref>.\n  remarks: The value 0 represents silence, and 100 represents the maximum input volume.\n  syntax:\n    content: public int AudioLevel { get; }\n    return:\n      type: System.Int32\n      description: The audio level of the input to the speech recognizer, from 0 through 100.\n  overload: System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.AudioLevelUpdated\n  id: AudioLevelUpdated\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  langs:\n  - csharp\n  name: AudioLevelUpdated\n  nameWithType: SpeechRecognitionEngine.AudioLevelUpdated\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.AudioLevelUpdated\n  type: Event\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Raised when the <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref> reports the level of its audio input.\n  remarks: \"The <xref:System.Speech.Recognition.SpeechRecognitionEngine> raises this event multiple times per second. The frequency with which the event is raised depends on the computer on which the application is running.  \\n  \\n To get the audio level at the time of the event, use the <xref:System.Speech.Recognition.AudioLevelUpdatedEventArgs.AudioLevel%2A> property of the associated <xref:System.Speech.Recognition.AudioLevelUpdatedEventArgs>. To get the current audio level of the input to the recognizer, use the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel%2A> property.  \\n  \\n When you create an AudioLevelUpdated delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).\"\n  example:\n  - \"The following example adds a handler for the AudioLevelUpdated event to a <xref:System.Speech.Recognition.SpeechRecognitionEngine> object. The handler outputs the new audio level to the console.  \\n  \\n```  \\nprivate SpeechRecognitionEngine recognizer;  \\n  \\n// Initialize the SpeechRecognitionEngine object.   \\nprivate void Initialize()  \\n{  \\n  recognizer = new SpeechRecognitionEngine();  \\n  \\n  // Add an event handler for the AudioLevelUpdated event.  \\n  recognizer.AudioLevelUpdated +=   \\n   new EventHandler<AudioLevelUpdatedEventArgs>(recognizer_AudioLevelUpdated);  \\n  \\n  // Add other initialization code here.  \\n  \\n}  \\n  \\n// Write the audio level to the console when the AudioLevelUpdated event is raised.  \\nvoid recognizer_AudioLevelUpdated(object sender, AudioLevelUpdatedEventArgs e)  \\n{  \\n  Console.WriteLine(\\\"The audio level is now: {0}.\\\", e.AudioLevel);  \\n}  \\n```\"\n  syntax:\n    content: public event EventHandler<System.Speech.Recognition.AudioLevelUpdatedEventArgs> AudioLevelUpdated;\n    return:\n      type: System.EventHandler{System.Speech.Recognition.AudioLevelUpdatedEventArgs}\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition\n  id: AudioPosition\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  langs:\n  - csharp\n  name: AudioPosition\n  nameWithType: SpeechRecognitionEngine.AudioPosition\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Gets the current location in the audio stream being generated by the device that is providing input to the <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref>.\n  remarks: The AudioPosition property references the input device's position in its generated audio stream. By contrast, the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> property references the recognizer's position within its audio input. These positions can be different. For example, if the recognizer has received input for which it has not yet generated a recognition result then the value of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> property is less than the value of the AudioPosition property.\n  example:\n  - \"In the following example, the in-process speech recognizer uses a dictation grammar to match speech input. A handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> event writes to the console the AudioPosition, <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A>, and  <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel%2A> when the speech recognizer detects speech at its input.  \\n  \\n```  \\nusing System;  \\nusing System.Speech.Recognition;  \\n  \\nnamespace SampleRecognition  \\n{  \\n  class Program  \\n  {  \\n    private static SpeechRecognitionEngine recognizer;  \\n    public static void Main(string[] args)  \\n    {  \\n  \\n      // Initialize an in-process speech recognition engine for US English.  \\n      using (recognizer = new SpeechRecognitionEngine(  \\n        new System.Globalization.CultureInfo(\\\"en-US\\\")))  \\n      {  \\n        recognizer.SetInputToDefaultAudioDevice();  \\n  \\n        // Create a grammar for finding services in different cities.  \\n        Choices services = new Choices(new string[] { \\\"restaurants\\\", \\\"hotels\\\", \\\"gas stations\\\" });  \\n        Choices cities = new Choices(new string[] { \\\"Seattle\\\", \\\"Boston\\\", \\\"Dallas\\\" });  \\n  \\n        GrammarBuilder findServices = new GrammarBuilder(\\\"Find\\\");  \\n        findServices.Append(services);  \\n        findServices.Append(\\\"near\\\");  \\n        findServices.Append(cities);  \\n  \\n        // Create a Grammar object from the GrammarBuilder and load it to the recognizer.  \\n        Grammar servicesGrammar = new Grammar(findServices);  \\n        recognizer.LoadGrammarAsync(servicesGrammar);  \\n  \\n        // Add handlers for events.  \\n        recognizer.SpeechRecognized +=  \\n          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  \\n        recognizer.SpeechDetected +=  \\n          new EventHandler<SpeechDetectedEventArgs>(recognizer_SpeechDetected);  \\n  \\n        // Start asynchronous recognition.  \\n        recognizer.RecognizeAsync();  \\n        Console.WriteLine(\\\"Starting asynchronous recognition...\\\");  \\n  \\n        // Keep the console window open.  \\n        Console.ReadLine();  \\n      }  \\n    }  \\n  \\n    // Gather information about detected speech and write it to the console.  \\n    static void recognizer_SpeechDetected(object sender, SpeechDetectedEventArgs e)  \\n    {  \\n      Console.WriteLine();  \\n      Console.WriteLine(\\\"Speech detected:\\\");  \\n      Console.WriteLine(\\\"  Audio level: \\\" + recognizer.AudioLevel);  \\n      Console.WriteLine(\\\"  Audio position at the event: \\\" + e.AudioPosition);  \\n      Console.WriteLine(\\\"  Current audio position: \\\" + recognizer.AudioPosition);  \\n      Console.WriteLine(\\\"  Current recognizer audio position: \\\" +   \\n        recognizer.RecognizerAudioPosition);  \\n    }  \\n  \\n    // Write the text of the recognition result to the console.  \\n    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\"\\\\nSpeech recognized: \\\" + e.Result.Text);  \\n  \\n      // Add event handler code here.  \\n    }  \\n  }  \\n}  \\n  \\n```\"\n  syntax:\n    content: public TimeSpan AudioPosition { get; }\n    return:\n      type: System.TimeSpan\n      description: The current location in the audio stream being generated by the input device.\n  overload: System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.AudioSignalProblemOccurred\n  id: AudioSignalProblemOccurred\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  langs:\n  - csharp\n  name: AudioSignalProblemOccurred\n  nameWithType: SpeechRecognitionEngine.AudioSignalProblemOccurred\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.AudioSignalProblemOccurred\n  type: Event\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Raised when the <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref> detects a problem in the audio signal.\n  remarks: \"To get which problem occurred, use the <xref:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs.AudioSignalProblem%2A> property of the associated <xref:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs>.  \\n  \\n When you create an AudioSignalProblemOccurred delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).\"\n  example:\n  - \"The following example defines an event handler that gathers information about an AudioSignalProblemOccurred event.  \\n  \\n```  \\nprivate SpeechRecognitionEngine recognizer;  \\n  \\n// Initialize the speech recognition engine.  \\nprivate void Initialize()  \\n{  \\n  recognizer = new SpeechRecognitionEngine();  \\n  \\n  // Add a handler for the AudioSignalProblemOccurred event.  \\n  recognizer.AudioSignalProblemOccurred +=   \\n    new EventHandler<AudioSignalProblemOccurredEventArgs>(  \\n      recognizer_AudioSignalProblemOccurred);  \\n}  \\n  \\n// Gather information when the AudioSignalProblemOccurred event is raised.  \\nvoid recognizer_AudioSignalProblemOccurred(object sender, AudioSignalProblemOccurredEventArgs e)  \\n{  \\n  StringBuilder details = new StringBuilder();  \\n  \\n  details.AppendLine(\\\"Audio signal problem information:\\\");  \\n  details.AppendFormat(  \\n    \\\" Audio level:               {0}\\\" + Environment.NewLine +  \\n    \\\" Audio position:            {1}\\\" + Environment.NewLine +  \\n    \\\" Audio signal problem:      {2}\\\" + Environment.NewLine +  \\n    \\\" Recognition engine audio position: {3}\\\" + Environment.NewLine,  \\n    e.AudioLevel, e.AudioPosition,  e.AudioSignalProblem,  \\n    e.recoEngineAudioPosition);  \\n  \\n  // Insert additional event handler code here.  \\n}  \\n```\"\n  syntax:\n    content: public event EventHandler<System.Speech.Recognition.AudioSignalProblemOccurredEventArgs> AudioSignalProblemOccurred;\n    return:\n      type: System.EventHandler{System.Speech.Recognition.AudioSignalProblemOccurredEventArgs}\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.AudioState\n  id: AudioState\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  langs:\n  - csharp\n  name: AudioState\n  nameWithType: SpeechRecognitionEngine.AudioState\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.AudioState\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Gets the state of the audio being received by the <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref>.\n  remarks: The AudioState property represents the audio state with a member of the <xref:System.Speech.Recognition.AudioState> enumeration.\n  syntax:\n    content: public System.Speech.Recognition.AudioState AudioState { get; }\n    return:\n      type: System.Speech.Recognition.AudioState\n      description: The state of the audio input to the speech recognizer.\n  overload: System.Speech.Recognition.SpeechRecognitionEngine.AudioState*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged\n  id: AudioStateChanged\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  langs:\n  - csharp\n  name: AudioStateChanged\n  nameWithType: SpeechRecognitionEngine.AudioStateChanged\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged\n  type: Event\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Raised when the state changes in the audio being received by the <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref>.\n  remarks: \"To get the audio state at the time of the event, use the <xref:System.Speech.Recognition.AudioStateChangedEventArgs.AudioState%2A> property of the associated <xref:System.Speech.Recognition.AudioStateChangedEventArgs>. To get the current audio state of the input to the recognizer, use the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioState%2A> property. For more information about audio state, see the <xref:System.Speech.Recognition.AudioState> enumeration.  \\n  \\n When you create an AudioStateChanged delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).\"\n  example:\n  - \"The following example uses a handler for the AudioStateChanged event to write the recognizer's new <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioState%2A> to the console each time it changes, using a member of the <xref:System.Speech.Recognition.AudioState> enumeration.  \\n  \\n```  \\nusing System;  \\nusing System.Speech.Recognition;  \\n  \\nnamespace SampleRecognition  \\n{  \\n  class Program  \\n  {  \\n    static void Main(string[] args)  \\n  \\n    // Initialize an in-process speech recognition engine.  \\n    {  \\n      using (SpeechRecognitionEngine recognizer =  \\n         new SpeechRecognitionEngine(new System.Globalization.CultureInfo(\\\"en-US\\\")))  \\n      {  \\n  \\n        // Create and load a grammar.  \\n        Choices animals = new Choices(new string[] { \\\"cow\\\", \\\"pig\\\", \\\"goat\\\" });  \\n        GrammarBuilder farm = new GrammarBuilder(\\\"On this farm he had a\\\");  \\n        farm.Append(animals);  \\n        Grammar farmAnimals = new Grammar(farm);  \\n        farmAnimals.Name = \\\"Farm\\\";  \\n        recognizer.LoadGrammar(farmAnimals);  \\n  \\n        // Attach event handlers.  \\n        recognizer.AudioStateChanged +=  \\n          new EventHandler<AudioStateChangedEventArgs>(recognizer_AudioStateChanged);  \\n        recognizer.SpeechRecognized +=  \\n          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  \\n        recognizer.LoadGrammarCompleted +=  \\n          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  \\n  \\n        // Set the input to the recognizer.  \\n        recognizer.SetInputToDefaultAudioDevice();  \\n  \\n        // Start recognition.  \\n        recognizer.RecognizeAsync();  \\n  \\n        // Keep the console window open.  \\n        Console.ReadLine();  \\n      }  \\n    }  \\n  \\n    // Handle the LoadGrammarCompleted event.  \\n    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\"Grammar loaded: \\\" + e.Grammar.Name);  \\n    }  \\n  \\n    // Handle the SpeechRecognized event.  \\n    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  \\n    {  \\n      if (e.Result != null && e.Result.Text != null)  \\n      {  \\n        Console.WriteLine();  \\n        Console.WriteLine(\\\"  Recognized text =  {0}\\\", e.Result.Text);  \\n        Console.WriteLine();  \\n      }  \\n      else  \\n      {  \\n        Console.WriteLine(\\\"  Recognized text not available.\\\");  \\n      }  \\n  \\n      Console.WriteLine();  \\n      Console.WriteLine(\\\"Done.\\\");  \\n      Console.WriteLine();  \\n      Console.WriteLine(\\\"Press any key to exit...\\\");  \\n      Console.ReadKey();  \\n    }  \\n  \\n    // Handle the AudioStateChanged event.  \\n    static void recognizer_AudioStateChanged(object sender, AudioStateChangedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\"The new audio state is: \\\" + e.AudioState);  \\n    }  \\n  }  \\n}  \\n```\"\n  syntax:\n    content: public event EventHandler<System.Speech.Recognition.AudioStateChangedEventArgs> AudioStateChanged;\n    return:\n      type: System.EventHandler{System.Speech.Recognition.AudioStateChangedEventArgs}\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout\n  id: BabbleTimeout\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  langs:\n  - csharp\n  name: BabbleTimeout\n  nameWithType: SpeechRecognitionEngine.BabbleTimeout\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Gets or sets the time interval during which a <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref> accepts input containing only background noise, before finalizing recognition.\n  remarks: \"Each speech recognizer has an algorithm to distinguish between silence and speech. The recognizer classifies as background noise any non-silence input that does not match the initial rule of any of the recognizer's loaded and enabled speech recognition grammars. If the recognizer receives only background noise and silence within the babble timeout interval, then the recognizer finalizes that recognition operation.  \\n  \\n-   For asynchronous recognition operations, the recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event, where the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.BabbleTimeout%2A?displayProperty=fullName> property is `true`, and the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A?displayProperty=fullName> property is `null`.  \\n  \\n-   For synchronous recognition operations and emulation, the recognizer returns `null`, instead of a valid <xref:System.Speech.Recognition.RecognitionResult>.  \\n  \\n If the babble timeout period is set to 0, the recognizer does not perform a babble timeout check. The timeout interval can be any non-negative value. The default is 0 seconds.\"\n  example:\n  - \"The following example shows part of a console application that demonstrates basic speech recognition that sets the BabbleTimeout and <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties of a <xref:System.Speech.Recognition.SpeechRecognitionEngine> before initiating speech recognition. Handlers for the speech recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> events output event information to the console to demonstrate how the <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties of a <xref:System.Speech.Recognition.SpeechRecognitionEngine> affect recognition operations.  \\n  \\n```c#  \\n  \\nusing System;  \\nusing System.Speech.Recognition;  \\n  \\nnamespace SpeechRecognitionApp  \\n{  \\n  class Program  \\n  {  \\n    static void Main(string[] args)  \\n    {  \\n  \\n      // Initialize an in-process speech recognizer.  \\n      using (SpeechRecognitionEngine recognizer =  \\n        new SpeechRecognitionEngine(  \\n          new System.Globalization.CultureInfo(\\\"en-US\\\")))  \\n      {  \\n        // Load a Grammar object.  \\n        recognizer.LoadGrammar(CreateServicesGrammar(\\\"FindServices\\\"));  \\n  \\n        // Add event handlers.  \\n        recognizer.AudioStateChanged +=  \\n          new EventHandler<AudioStateChangedEventArgs>(  \\n            AudioStateChangedHandler);  \\n        recognizer.RecognizeCompleted +=  \\n          new EventHandler<RecognizeCompletedEventArgs>(  \\n            RecognizeCompletedHandler);  \\n  \\n        // Configure input to the speech recognizer.  \\n        recognizer.SetInputToDefaultAudioDevice();  \\n  \\n        recognizer.InitialSilenceTimeout = TimeSpan.FromSeconds(3);  \\n        recognizer.BabbleTimeout = TimeSpan.FromSeconds(2);  \\n        recognizer.EndSilenceTimeout = TimeSpan.FromSeconds(1);  \\n        recognizer.EndSilenceTimeoutAmbiguous = TimeSpan.FromSeconds(1.5);  \\n  \\n        Console.WriteLine(\\\"BabbleTimeout: {0}\\\", recognizer.BabbleTimeout);  \\n        Console.WriteLine(\\\"InitialSilenceTimeout: {0}\\\", recognizer.InitialSilenceTimeout);  \\n        Console.WriteLine(\\\"EndSilenceTimeout: {0}\\\", recognizer.EndSilenceTimeout);  \\n        Console.WriteLine(\\\"EndSilenceTimeoutAmbiguous: {0}\\\", recognizer.EndSilenceTimeoutAmbiguous);  \\n        Console.WriteLine();  \\n  \\n        // Start asynchronous speech recognition.  \\n        recognizer.RecognizeAsync(RecognizeMode.Single);  \\n  \\n        // Keep the console window open.  \\n        while (true)  \\n        {  \\n          Console.ReadLine();  \\n        }  \\n      }  \\n    }  \\n  \\n    // Create a grammar and build it into a Grammar object.   \\n    static Grammar CreateServicesGrammar(string grammarName)  \\n    {  \\n  \\n      // Create a grammar for finding services in different cities.  \\n      Choices services = new Choices(new string[] { \\\"restaurants\\\", \\\"hotels\\\", \\\"gas stations\\\" });  \\n      Choices cities = new Choices(new string[] { \\\"Seattle\\\", \\\"Boston\\\", \\\"Dallas\\\" });  \\n  \\n      GrammarBuilder findServices = new GrammarBuilder(\\\"Find\\\");  \\n      findServices.Append(services);  \\n      findServices.Append(\\\"near\\\");  \\n      findServices.Append(cities);  \\n  \\n      // Create a Grammar object from the GrammarBuilder..  \\n      Grammar servicesGrammar = new Grammar(findServices);  \\n      servicesGrammar.Name = (\\\"FindServices\\\");  \\n      return servicesGrammar;  \\n    }  \\n  \\n    // Handle the AudioStateChanged event.  \\n    static void AudioStateChangedHandler(  \\n      object sender, AudioStateChangedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\"AudioStateChanged ({0}): {1}\\\",  \\n        DateTime.Now.ToString(\\\"mm:ss.f\\\"), e.AudioState);  \\n    }  \\n  \\n    // Handle the RecognizeCompleted event.  \\n    static void RecognizeCompletedHandler(  \\n      object sender, RecognizeCompletedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\"RecognizeCompleted ({0}):\\\",  \\n        DateTime.Now.ToString(\\\"mm:ss.f\\\"));  \\n  \\n      string resultText;  \\n      if (e.Result != null) { resultText = e.Result.Text; }  \\n      else { resultText = \\\"<null>\\\"; }  \\n  \\n      Console.WriteLine(  \\n        \\\" BabbleTimeout: {0}; InitialSilenceTimeout: {1}; Result text: {2}\\\",  \\n        e.BabbleTimeout, e.InitialSilenceTimeout, resultText);  \\n      if (e.Error != null)  \\n      {  \\n        Console.WriteLine(\\\" Exception message: \\\", e.Error.Message);  \\n      }  \\n  \\n      // Start the next asynchronous recognition operation.  \\n      ((SpeechRecognitionEngine)sender).RecognizeAsync(RecognizeMode.Single);  \\n    }  \\n  }  \\n}  \\n  \\n```\"\n  syntax:\n    content: public TimeSpan BabbleTimeout { get; set; }\n    return:\n      type: System.TimeSpan\n      description: The duration of the time interval.\n  overload: System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: This property is set to less than 0 seconds.\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.Dispose\n  id: Dispose\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: SpeechRecognitionEngine.Dispose()\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.Dispose()\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Disposes the <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref> object.\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.Speech.Recognition.SpeechRecognitionEngine.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: SpeechRecognitionEngine.Dispose(Boolean)\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Disposes the <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref> object and releases resources used during the session.\n  syntax:\n    content: protected virtual void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only unmanaged resources.\n  overload: System.Speech.Recognition.SpeechRecognitionEngine.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)\n  id: EmulateRecognize(System.String)\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  langs:\n  - csharp\n  name: EmulateRecognize(String)\n  nameWithType: SpeechRecognitionEngine.EmulateRecognize(String)\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(String)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Emulates input of a phrase to the speech recognizer, using text in place of audio for synchronous speech recognition.\n  remarks: \"The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.  \\n  \\n The recognizers that ship with Vista and Windows 7 ignore case and character width when applying grammar rules to the input phrase. For more information about this type of comparison, see the <xref:System.Globalization.CompareOptions> enumeration values <xref:System.Globalization.CompareOptions> and <xref:System.Globalization.CompareOptions>. The recognizers also ignore new lines and extra white space and treat punctuation as literal input.\"\n  example:\n  - \"The code example below is part of a console application that demonstrates emulated input, the associated recognition results, and the associated events raised by the speech recognizer. The example generates the following output.  \\n  \\n```  \\nTestRecognize(\\\"Smith\\\")...  \\n SpeechDetected event raised.  \\n SpeechRecognized event raised.  \\n  Grammar = Smith; Text = Smith  \\n...Recognition result text = Smith  \\n  \\nTestRecognize(\\\"Jones\\\")...  \\n SpeechDetected event raised.  \\n SpeechRecognized event raised.  \\n  Grammar = Jones; Text = Jones  \\n...Recognition result text = Jones  \\n  \\nTestRecognize(\\\"Mister\\\")...  \\n SpeechDetected event raised.  \\n SpeechHypothesized event raised.  \\n  Grammar = Smith; Text = mister  \\n SpeechRecognitionRejected event raised.  \\n  Grammar = <not available>; Text =  \\n...No recognition result.  \\n  \\nTestRecognize(\\\"Mister Smith\\\")...  \\n SpeechDetected event raised.  \\n SpeechRecognized event raised.  \\n  Grammar = Smith; Text = mister Smith  \\n...Recognition result text = mister Smith  \\n  \\npress any key to exit...  \\n```  \\n  \\n```c#  \\n  \\nusing System;  \\nusing System.Globalization;  \\nusing System.Speech.Recognition;  \\n  \\nnamespace Sre_EmulateRecognize  \\n{  \\n  class Program  \\n  {  \\n    static void Main(string[] args)  \\n    {  \\n  \\n      // Create an in-process speech recognizer for the en-US locale.  \\n      using (SpeechRecognitionEngine recognizer =  \\n        new SpeechRecognitionEngine(new CultureInfo(\\\"en-US\\\")))  \\n      {  \\n  \\n        // Load grammars.  \\n        recognizer.LoadGrammar(CreateNameGrammar(\\\"Smith\\\"));  \\n        recognizer.LoadGrammar(CreateNameGrammar(\\\"Jones\\\"));  \\n  \\n        // Disable audio input to the recognizer.  \\n        recognizer.SetInputToNull();  \\n  \\n        // Add handlers for events raised by the EmulateRecognize method.  \\n        recognizer.SpeechDetected +=  \\n          new EventHandler<SpeechDetectedEventArgs>(  \\n            SpeechDetectedHandler);  \\n        recognizer.SpeechHypothesized +=  \\n          new EventHandler<SpeechHypothesizedEventArgs>(  \\n            SpeechHypothesizedHandler);  \\n        recognizer.SpeechRecognitionRejected +=  \\n          new EventHandler<SpeechRecognitionRejectedEventArgs>(  \\n            SpeechRecognitionRejectedHandler);  \\n        recognizer.SpeechRecognized +=  \\n          new EventHandler<SpeechRecognizedEventArgs>(  \\n            SpeechRecognizedHandler);  \\n  \\n        // Start four synchronous emulated recognition operations.  \\n        TestRecognize(recognizer, \\\"Smith\\\");  \\n        TestRecognize(recognizer, \\\"Jones\\\");  \\n        TestRecognize(recognizer, \\\"Mister\\\");  \\n        TestRecognize(recognizer, \\\"Mister Smith\\\");  \\n      }  \\n  \\n      Console.WriteLine(\\\"press any key to exit...\\\");  \\n      Console.ReadKey(true);  \\n    }  \\n  \\n    // Create a simple name grammar.  \\n    // Set the grammar name to the surname.  \\n    private static Grammar CreateNameGrammar(string surname)  \\n    {  \\n      GrammarBuilder builder = new GrammarBuilder(\\\"mister\\\", 0, 1);  \\n      builder.Append(surname);  \\n  \\n      Grammar nameGrammar = new Grammar(builder);  \\n      nameGrammar.Name = surname;  \\n  \\n      return nameGrammar;  \\n    }  \\n  \\n    // Send emulated input to the recognizer for synchronous recognition.  \\n    private static void TestRecognize(  \\n      SpeechRecognitionEngine recognizer, string input)  \\n    {  \\n      Console.WriteLine(\\\"TestRecognize(\\\\\\\"{0}\\\\\\\")...\\\", input);  \\n      RecognitionResult result =  \\n        recognizer.EmulateRecognize(input,CompareOptions.IgnoreCase);  \\n      if (result != null)  \\n      {  \\n        Console.WriteLine(\\\"...Recognition result text = {0}\\\",  \\n          result.Text ?? \\\"<null>\\\");  \\n      }  \\n      else  \\n      {  \\n        Console.WriteLine(\\\"...No recognition result.\\\");  \\n      }  \\n      Console.WriteLine();  \\n    }  \\n  \\n    static void SpeechDetectedHandler(  \\n      object sender, SpeechDetectedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\" SpeechDetected event raised.\\\");  \\n    }  \\n  \\n    // Handle events.  \\n    static void SpeechHypothesizedHandler(  \\n      object sender, SpeechHypothesizedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\" SpeechHypothesized event raised.\\\");  \\n      if (e.Result != null)  \\n      {  \\n        Console.WriteLine(\\\"  Grammar = {0}; Text = {1}\\\",  \\n          e.Result.Grammar.Name ?? \\\"<none>\\\", e.Result.Text);  \\n      }  \\n      else  \\n      {  \\n        Console.WriteLine(\\\"  No recognition result available.\\\");  \\n      }  \\n    }  \\n  \\n    static void SpeechRecognitionRejectedHandler(  \\n      object sender, SpeechRecognitionRejectedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\" SpeechRecognitionRejected event raised.\\\");  \\n      if (e.Result != null)  \\n      {  \\n        string grammarName;  \\n        if (e.Result.Grammar != null)  \\n        {  \\n          grammarName = e.Result.Grammar.Name ?? \\\"<none>\\\";  \\n        }  \\n        else  \\n        {  \\n          grammarName = \\\"<not available>\\\";  \\n        }  \\n        Console.WriteLine(\\\"  Grammar = {0}; Text = {1}\\\",  \\n          grammarName, e.Result.Text);  \\n      }  \\n      else  \\n      {  \\n        Console.WriteLine(\\\"  No recognition result available.\\\");  \\n      }  \\n    }  \\n  \\n    static void SpeechRecognizedHandler(  \\n      object sender, SpeechRecognizedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\" SpeechRecognized event raised.\\\");  \\n      if (e.Result != null)  \\n      {  \\n        Console.WriteLine(\\\"  Grammar = {0}; Text = {1}\\\",  \\n          e.Result.Grammar.Name ?? \\\"<none>\\\", e.Result.Text);  \\n      }  \\n      else  \\n      {  \\n        Console.WriteLine(\\\"  No recognition result available.\\\");  \\n      }  \\n    }  \\n  }  \\n}  \\n  \\n```\"\n  syntax:\n    content: public System.Speech.Recognition.RecognitionResult EmulateRecognize (string inputText);\n    parameters:\n    - id: inputText\n      type: System.String\n      description: The input for the recognition operation.\n    return:\n      type: System.Speech.Recognition.RecognitionResult\n      description: The result for the recognition operation, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the operation is not successful or the recognizer is not enabled.\n  overload: System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The recognizer has no speech recognition grammars loaded.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>inputText</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>inputText</code> is the empty string (\"\").\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)\n  id: EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  langs:\n  - csharp\n  name: EmulateRecognize(RecognizedWordUnit[],CompareOptions)\n  nameWithType: SpeechRecognitionEngine.EmulateRecognize(RecognizedWordUnit[],CompareOptions)\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(RecognizedWordUnit[],CompareOptions)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Emulates input of specific words to the speech recognizer, using text in place of audio for synchronous speech recognition, and specifies how the recognizer handles Unicode comparison between the words and the loaded speech recognition grammars.\n  remarks: \"The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.  \\n  \\n The recognizer uses `compareOptions` when it applies grammar rules to the input phrase. The recognizers that ship with Vista and Windows 7 ignore case if the <xref:System.Globalization.CompareOptions> or <xref:System.Globalization.CompareOptions> value is present. The recognizer always ignores the character width and never ignores the Kana type. The recognizer also ignores new lines and extra white space and treats punctuation as literal input. For more information about character width and Kana type, see the <xref:System.Globalization.CompareOptions> enumeration.\"\n  syntax:\n    content: public System.Speech.Recognition.RecognitionResult EmulateRecognize (System.Speech.Recognition.RecognizedWordUnit[] wordUnits, System.Globalization.CompareOptions compareOptions);\n    parameters:\n    - id: wordUnits\n      type: System.Speech.Recognition.RecognizedWordUnit[]\n      description: An array of word units that contains the input for the recognition operation.\n    - id: compareOptions\n      type: System.Globalization.CompareOptions\n      description: A bitwise combination of the enumeration values that describe the type of comparison to use for the emulated recognition operation.\n    return:\n      type: System.Speech.Recognition.RecognitionResult\n      description: The result for the recognition operation, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the operation is not successful or the recognizer is not enabled.\n  overload: System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The recognizer has no speech recognition grammars loaded.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>wordUnits</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>wordUnits</code> contains one or more <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> elements.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>compareOptions</code> contains the <xref:System.Globalization.CompareOptions>, <xref:System.Globalization.CompareOptions>, or <xref:System.Globalization.CompareOptions> flag.\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String,System.Globalization.CompareOptions)\n  id: EmulateRecognize(System.String,System.Globalization.CompareOptions)\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  langs:\n  - csharp\n  name: EmulateRecognize(String,CompareOptions)\n  nameWithType: SpeechRecognitionEngine.EmulateRecognize(String,CompareOptions)\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(String,CompareOptions)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Emulates input of a phrase to the speech recognizer, using text in place of audio for synchronous speech recognition, and specifies how the recognizer handles Unicode comparison between the phrase and the loaded speech recognition grammars.\n  remarks: \"The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.  \\n  \\n The recognizer uses `compareOptions` when it applies grammar rules to the input phrase. The recognizers that ship with Vista and Windows 7 ignore case if the <xref:System.Globalization.CompareOptions> or <xref:System.Globalization.CompareOptions> value is present. The recognizer always ignores the character width and never ignores the Kana type. The recognizer also ignores new lines and extra white space and treats punctuation as literal input. For more information about character width and Kana type, see the <xref:System.Globalization.CompareOptions> enumeration.\"\n  syntax:\n    content: public System.Speech.Recognition.RecognitionResult EmulateRecognize (string inputText, System.Globalization.CompareOptions compareOptions);\n    parameters:\n    - id: inputText\n      type: System.String\n      description: The input phrase for the recognition operation.\n    - id: compareOptions\n      type: System.Globalization.CompareOptions\n      description: A bitwise combination of the enumeration values that describe the type of comparison to use for the emulated recognition operation.\n    return:\n      type: System.Speech.Recognition.RecognitionResult\n      description: The result for the recognition operation, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the operation is not successful or the recognizer is not enabled.\n  overload: System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The recognizer has no speech recognition grammars loaded.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>inputText</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>inputText</code> is the empty string (\"\").\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>compareOptions</code> contains the <xref:System.Globalization.CompareOptions>, <xref:System.Globalization.CompareOptions>, or <xref:System.Globalization.CompareOptions> flag.\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)\n  id: EmulateRecognizeAsync(System.String)\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  langs:\n  - csharp\n  name: EmulateRecognizeAsync(String)\n  nameWithType: SpeechRecognitionEngine.EmulateRecognizeAsync(String)\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(String)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Emulates input of a phrase to the speech recognizer, using text in place of audio for asynchronous speech recognition.\n  remarks: \"The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated. When the recognizer completes the asynchronous recognition operation, it raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event.  \\n  \\n The recognizers that ship with Vista and Windows 7 ignore case and character width when applying grammar rules to the input phrase. For more information about this type of comparison, see the <xref:System.Globalization.CompareOptions> enumeration values <xref:System.Globalization.CompareOptions> and <xref:System.Globalization.CompareOptions>. The recognizers also ignore new lines and extra white space and treat punctuation as literal input.\"\n  example:\n  - \"The code example below is part of a console application that demonstrates asynchronous emulated input, the associated recognition results, and the associated events raised by the speech recognizer. The example generates the following output.  \\n  \\n```  \\n  \\nTestRecognizeAsync(\\\"Smith\\\")...  \\n SpeechDetected event raised.  \\n SpeechRecognized event raised.  \\n  Grammar = Smith; Text = Smith  \\n EmulateRecognizeCompleted event raised.  \\n  Grammar = Smith; Text = Smith  \\n Done.  \\n  \\nTestRecognizeAsync(\\\"Jones\\\")...  \\n SpeechDetected event raised.  \\n SpeechRecognized event raised.  \\n  Grammar = Jones; Text = Jones  \\n EmulateRecognizeCompleted event raised.  \\n  Grammar = Jones; Text = Jones  \\n Done.  \\n  \\nTestRecognizeAsync(\\\"Mister\\\")...  \\n SpeechDetected event raised.  \\n SpeechHypothesized event raised.  \\n  Grammar = Smith; Text = mister  \\n SpeechRecognitionRejected event raised.  \\n  Grammar = <not available>; Text =  \\n EmulateRecognizeCompleted event raised.  \\n  No recognition result available.  \\n Done.  \\n  \\nTestRecognizeAsync(\\\"Mister Smith\\\")...  \\n SpeechDetected event raised.  \\n SpeechRecognized event raised.  \\n  Grammar = Smith; Text = mister Smith  \\n EmulateRecognizeCompleted event raised.  \\n  Grammar = Smith; Text = mister Smith  \\n Done.  \\n  \\npress any key to exit...  \\n```  \\n  \\n```c#  \\nusing System;  \\nusing System.Globalization;  \\nusing System.Speech.Recognition;  \\nusing System.Threading;  \\n  \\nnamespace SreEmulateRecognizeAsync  \\n{  \\n  class Program  \\n  {  \\n    // Indicate when an asynchronous operation is finished.  \\n    static bool completed;  \\n  \\n    static void Main(string[] args)  \\n    {  \\n      using (SpeechRecognitionEngine recognizer =  \\n        new SpeechRecognitionEngine(new CultureInfo(\\\"en-US\\\")))  \\n      {  \\n        // Load grammars.  \\n        recognizer.LoadGrammar(CreateNameGrammar(\\\"Smith\\\"));  \\n        recognizer.LoadGrammar(CreateNameGrammar(\\\"Jones\\\"));  \\n  \\n        // Configure the audio input.  \\n        recognizer.SetInputToNull();  \\n  \\n        // Add event handlers for the events raised by the  \\n        // EmulateRecognizeAsync method.  \\n        recognizer.SpeechDetected +=  \\n          new EventHandler<SpeechDetectedEventArgs>(  \\n            SpeechDetectedHandler);  \\n        recognizer.SpeechHypothesized +=  \\n          new EventHandler<SpeechHypothesizedEventArgs>(  \\n            SpeechHypothesizedHandler);  \\n        recognizer.SpeechRecognitionRejected +=  \\n          new EventHandler<SpeechRecognitionRejectedEventArgs>(  \\n            SpeechRecognitionRejectedHandler);  \\n        recognizer.SpeechRecognized +=  \\n          new EventHandler<SpeechRecognizedEventArgs>(  \\n            SpeechRecognizedHandler);  \\n        recognizer.EmulateRecognizeCompleted +=  \\n          new EventHandler<EmulateRecognizeCompletedEventArgs>(  \\n            EmulateRecognizeCompletedHander);  \\n  \\n        // Start four asynchronous emulated recognition operations.  \\n        TestRecognizeAsync(recognizer, \\\"Smith\\\");  \\n        TestRecognizeAsync(recognizer, \\\"Jones\\\");  \\n        TestRecognizeAsync(recognizer, \\\"Mister\\\");  \\n        TestRecognizeAsync(recognizer, \\\"Mister Smith\\\");  \\n      }  \\n  \\n      Console.WriteLine(\\\"press any key to exit...\\\");  \\n      Console.ReadKey(true);  \\n    }  \\n  \\n    // Create a simple name grammar.  \\n    // Set the grammar name to the surname.  \\n    private static Grammar CreateNameGrammar(string surname)  \\n    {  \\n      GrammarBuilder builder = new GrammarBuilder(\\\"mister\\\", 0, 1);  \\n      builder.Append(surname);  \\n  \\n      Grammar nameGrammar = new Grammar(builder);  \\n      nameGrammar.Name = surname;  \\n  \\n      return nameGrammar;  \\n    }  \\n  \\n    // Send emulated input to the recognizer for asynchronous  \\n    // recognition.  \\n    private static void TestRecognizeAsync(  \\n      SpeechRecognitionEngine recognizer, string input)  \\n    {  \\n      completed = false;  \\n  \\n      Console.WriteLine(\\\"TestRecognizeAsync(\\\\\\\"{0}\\\\\\\")...\\\", input);  \\n      recognizer.EmulateRecognizeAsync(input);  \\n  \\n      // Wait for the operation to complete.  \\n      while (!completed)  \\n      {  \\n        Thread.Sleep(333);  \\n      }  \\n  \\n      Console.WriteLine(\\\" Done.\\\");  \\n      Console.WriteLine();  \\n    }  \\n  \\n    static void SpeechDetectedHandler(  \\n      object sender, SpeechDetectedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\" SpeechDetected event raised.\\\");  \\n    }  \\n  \\n    static void SpeechHypothesizedHandler(  \\n      object sender, SpeechHypothesizedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\" SpeechHypothesized event raised.\\\");  \\n      if (e.Result != null)  \\n      {  \\n        Console.WriteLine(\\\"  Grammar = {0}; Text = {1}\\\",  \\n          e.Result.Grammar.Name ?? \\\"<none>\\\", e.Result.Text);  \\n      }  \\n      else  \\n      {  \\n        Console.WriteLine(\\\"  No recognition result available.\\\");  \\n      }  \\n    }  \\n  \\n    // Handle events.  \\n    static void SpeechRecognitionRejectedHandler(  \\n      object sender, SpeechRecognitionRejectedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\" SpeechRecognitionRejected event raised.\\\");  \\n      if (e.Result != null)  \\n      {  \\n        string grammarName;  \\n        if (e.Result.Grammar != null)  \\n        {  \\n          grammarName = e.Result.Grammar.Name ?? \\\"<none>\\\";  \\n        }  \\n        else  \\n        {  \\n          grammarName = \\\"<not available>\\\";  \\n        }  \\n        Console.WriteLine(\\\"  Grammar = {0}; Text = {1}\\\",  \\n          grammarName, e.Result.Text);  \\n      }  \\n      else  \\n      {  \\n        Console.WriteLine(\\\"  No recognition result available.\\\");  \\n      }  \\n    }  \\n  \\n    static void SpeechRecognizedHandler(  \\n      object sender, SpeechRecognizedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\" SpeechRecognized event raised.\\\");  \\n      if (e.Result != null)  \\n      {  \\n        Console.WriteLine(\\\"  Grammar = {0}; Text = {1}\\\",  \\n          e.Result.Grammar.Name ?? \\\"<none>\\\", e.Result.Text );  \\n      }  \\n      else  \\n      {  \\n        Console.WriteLine(\\\"  No recognition result available.\\\");  \\n      }  \\n    }  \\n  \\n    static void EmulateRecognizeCompletedHander(  \\n      object sender, EmulateRecognizeCompletedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\" EmulateRecognizeCompleted event raised.\\\");  \\n  \\n      if (e.Error != null)  \\n      {  \\n        Console.WriteLine(\\\"  {0} exception encountered: {1}:\\\",  \\n          e.Error.GetType().Name, e.Error.Message);  \\n      }  \\n      else if (e.Cancelled)  \\n      {  \\n        Console.WriteLine(\\\"  Operation cancelled.\\\");  \\n      }  \\n      else if (e.Result != null)  \\n      {  \\n        Console.WriteLine(\\\"  Grammar = {0}; Text = {1}\\\",  \\n          e.Result.Grammar.Name ?? \\\"<none>\\\", e.Result.Text);  \\n      }  \\n      else  \\n      {  \\n        Console.WriteLine(\\\"  No recognition result available.\\\");  \\n      }  \\n  \\n      completed = true;  \\n    }  \\n  }  \\n}  \\n  \\n```\"\n  syntax:\n    content: public void EmulateRecognizeAsync (string inputText);\n    parameters:\n    - id: inputText\n      type: System.String\n      description: The input for the recognition operation.\n  overload: System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The recognizer has no speech recognition grammars loaded, or the recognizer has an asynchronous recognition operation that is not yet complete.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>inputText</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>inputText</code> is the empty string (\"\").\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)\n  id: EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  langs:\n  - csharp\n  name: EmulateRecognizeAsync(RecognizedWordUnit[],CompareOptions)\n  nameWithType: SpeechRecognitionEngine.EmulateRecognizeAsync(RecognizedWordUnit[],CompareOptions)\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(RecognizedWordUnit[],CompareOptions)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Emulates input of specific words to the speech recognizer, using an array of <xref href=\"System.Speech.Recognition.RecognizedWordUnit\"></xref> objects in place of audio for asynchronous speech recognition, and specifies how the recognizer handles Unicode comparison between the words and the loaded speech recognition grammars.\n  remarks: \"The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated. When the recognizer completes the asynchronous recognition operation, it raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event.  \\n  \\n The recognizer uses `compareOptions` when it applies grammar rules to the input phrase. The recognizers that ship with Vista and Windows 7 ignore case if the <xref:System.Globalization.CompareOptions> or <xref:System.Globalization.CompareOptions> value is present. The recognizers always ignore the character width and never ignore the Kana type. The recognizers also ignore new lines and extra white space and treat punctuation as literal input. For more information about character width and Kana type, see the <xref:System.Globalization.CompareOptions> enumeration.\"\n  syntax:\n    content: public void EmulateRecognizeAsync (System.Speech.Recognition.RecognizedWordUnit[] wordUnits, System.Globalization.CompareOptions compareOptions);\n    parameters:\n    - id: wordUnits\n      type: System.Speech.Recognition.RecognizedWordUnit[]\n      description: An array of word units that contains the input for the recognition operation.\n    - id: compareOptions\n      type: System.Globalization.CompareOptions\n      description: A bitwise combination of the enumeration values that describe the type of comparison to use for the emulated recognition operation.\n  overload: System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The recognizer has no speech recognition grammars loaded, or the recognizer has an asynchronous recognition operation that is not yet complete.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>wordUnits</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>wordUnits</code> contains one or more <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> elements.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>compareOptions</code> contains the <xref:System.Globalization.CompareOptions>, <xref:System.Globalization.CompareOptions>, or <xref:System.Globalization.CompareOptions> flag.\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String,System.Globalization.CompareOptions)\n  id: EmulateRecognizeAsync(System.String,System.Globalization.CompareOptions)\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  langs:\n  - csharp\n  name: EmulateRecognizeAsync(String,CompareOptions)\n  nameWithType: SpeechRecognitionEngine.EmulateRecognizeAsync(String,CompareOptions)\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(String,CompareOptions)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Emulates input of a phrase to the speech recognizer, using text in place of audio for asynchronous speech recognition, and specifies how the recognizer handles Unicode comparison between the phrase and the loaded speech recognition grammars.\n  remarks: \"The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated. When the recognizer completes the asynchronous recognition operation, it raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event.  \\n  \\n The recognizer uses `compareOptions` when it applies grammar rules to the input phrase. The recognizers that ship with Vista and Windows 7 ignore case if the <xref:System.Globalization.CompareOptions> or <xref:System.Globalization.CompareOptions> value is present. The recognizers always ignore the character width and never ignore the Kana type. The recognizers also ignore new lines and extra white space and treat punctuation as literal input. For more information about character width and Kana type, see the <xref:System.Globalization.CompareOptions> enumeration.\"\n  syntax:\n    content: public void EmulateRecognizeAsync (string inputText, System.Globalization.CompareOptions compareOptions);\n    parameters:\n    - id: inputText\n      type: System.String\n      description: The input phrase for the recognition operation.\n    - id: compareOptions\n      type: System.Globalization.CompareOptions\n      description: A bitwise combination of the enumeration values that describe the type of comparison to use for the emulated recognition operation.\n  overload: System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The recognizer has no speech recognition grammars loaded, or the recognizer has an asynchronous recognition operation that is not yet complete.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>inputText</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>inputText</code> is the empty string (\"\").\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>compareOptions</code> contains the <xref:System.Globalization.CompareOptions>, <xref:System.Globalization.CompareOptions>, or <xref:System.Globalization.CompareOptions> flag.\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted\n  id: EmulateRecognizeCompleted\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  langs:\n  - csharp\n  name: EmulateRecognizeCompleted\n  nameWithType: SpeechRecognitionEngine.EmulateRecognizeCompleted\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted\n  type: Event\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Raised when the <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref> finalizes an asynchronous recognition operation of emulated input.\n  remarks: \"Each <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> method begins an asynchronous recognition operation. The <xref:System.Speech.Recognition.SpeechRecognitionEngine> raises the EmulateRecognizeCompleted event when it finalizes the asynchronous operation.  \\n  \\n The <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> operation can raise the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events. The EmulateRecognizeCompleted event is the last such event that the recognizer raises for a given operation.  \\n  \\n If emulated recognition was successful, you can access the recognition result using the either of the following:  \\n  \\n-   The <xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs.Result%2A> property in the <xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs> object in the handler for the EmulateRecognizeCompleted event.  \\n  \\n-   <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> property in the <xref:System.Speech.Recognition.SpeechRecognizedEventArgs> object in the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event.  \\n  \\n If emulated recognition was not successful, the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event is not raised and the <xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs.Result%2A> will be null.  \\n  \\n <xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs> derives from <xref:System.ComponentModel.AsyncCompletedEventArgs>.  \\n  \\n <xref:System.Speech.Recognition.SpeechRecognizedEventArgs> derives from <xref:System.Speech.Recognition.RecognitionEventArgs>.  \\n  \\n When you create an EmulateRecognizeCompleted delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).\"\n  example:\n  - \"The following example is part of a console application that loads a speech recognition grammar and demonstrates asynchronous emulated input, the associated recognition results, and the associated events raised by the speech recognizer.  \\n  \\n```  \\nusing System;  \\nusing System.Speech.Recognition;  \\nusing System.Threading;  \\n  \\nnamespace InProcessRecognizer  \\n{  \\n  class Program  \\n  {  \\n    // Indicate whether the asynchronous emulate recognition  \\n    // operation has completed.  \\n    static bool completed;  \\n  \\n    static void Main(string[] args)  \\n    {  \\n  \\n      // Initialize an instance of an in-process recognizer.  \\n      using (SpeechRecognitionEngine recognizer =   \\n        new SpeechRecognitionEngine(new System.Globalization.CultureInfo(\\\"en-US\\\")))  \\n      {  \\n        // Create and load a sample grammar.  \\n        Grammar testGrammar =  \\n          new Grammar(new GrammarBuilder(\\\"testing testing\\\"));  \\n        testGrammar.Name = \\\"Test Grammar\\\";  \\n        recognizer.LoadGrammar(testGrammar);  \\n  \\n        // Attach event handlers for recognition events.  \\n        recognizer.SpeechRecognized +=  \\n          new EventHandler<SpeechRecognizedEventArgs>(SpeechRecognizedHandler);  \\n        recognizer.EmulateRecognizeCompleted +=  \\n          new EventHandler<EmulateRecognizeCompletedEventArgs>(  \\n            EmulateRecognizeCompletedHandler);  \\n  \\n        completed = false;  \\n  \\n        // This EmulateRecognizeAsync call mathches the grammar  \\n        // and generates a SpeechRecognized event.  \\n        recognizer.EmulateRecognizeAsync(\\\"testing testing\\\");  \\n  \\n        // Wait for the asynchronous operation to complete.  \\n        while (!completed)  \\n        {  \\n          Thread.Sleep(333);  \\n        }  \\n  \\n        completed = false;  \\n  \\n        // This EmulateRecognizeAsync call does not match the grammar  \\n        // or generate a SpeechRecognized event.  \\n        recognizer.EmulateRecognizeAsync(\\\"testing one two three\\\");  \\n  \\n        // Wait for the asynchronous operation to complete.  \\n        while (!completed)  \\n        {  \\n          Thread.Sleep(333);  \\n        }  \\n      }  \\n  \\n      Console.WriteLine();  \\n      Console.WriteLine(\\\"Press any key to exit...\\\");  \\n      Console.ReadKey();  \\n    }  \\n  \\n    // Handle the SpeechRecognized event.  \\n    static void SpeechRecognizedHandler(  \\n      object sender, SpeechRecognizedEventArgs e)  \\n    {  \\n      if (e.Result != null)  \\n      {  \\n        Console.WriteLine(\\\"Result of 1st call to EmulateRecognizeAsync = {0}\\\",  \\n          e.Result.Text ?? \\\"<no text>\\\");  \\n        Console.WriteLine();  \\n      }  \\n      else  \\n      {  \\n        Console.WriteLine(\\\"No recognition result\\\");  \\n      }  \\n    }  \\n  \\n    // Handle the EmulateRecognizeCompleted event.  \\n    static void EmulateRecognizeCompletedHandler(  \\n      object sender, EmulateRecognizeCompletedEventArgs e)  \\n    {  \\n      if (e.Result == null)  \\n      {  \\n        Console.WriteLine(\\\"Result of 2nd call to EmulateRecognizeAsync = No result generated.\\\");  \\n      }  \\n  \\n      // Indicate the asynchronous operation is complete.  \\n      completed = true;  \\n    }  \\n  }  \\n}  \\n  \\n```\"\n  syntax:\n    content: public event EventHandler<System.Speech.Recognition.EmulateRecognizeCompletedEventArgs> EmulateRecognizeCompleted;\n    return:\n      type: System.EventHandler{System.Speech.Recognition.EmulateRecognizeCompletedEventArgs}\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout\n  id: EndSilenceTimeout\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  langs:\n  - csharp\n  name: EndSilenceTimeout\n  nameWithType: SpeechRecognitionEngine.EndSilenceTimeout\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Gets or sets the interval of silence that the <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref> will accept at the end of unambiguous input before finalizing a recognition operation.\n  remarks: \"The speech recognizer uses this timeout interval when the recognition input is unambiguous. For example, for a speech recognition grammar that supports recognition of either \\\"new game please\\\" or \\\"new game\\\", \\\"new game please\\\" is an unambiguous input, and \\\"new game\\\" is an ambiguous input.  \\n  \\n This property determines how long the speech recognition engine will wait for additional input before finalizing a recognition operation. The timeout interval can be from 0 seconds to 10 seconds, inclusive. The default is 150 milliseconds.  \\n  \\n To set the timeout interval for ambiguous input, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> property.\"\n  syntax:\n    content: public TimeSpan EndSilenceTimeout { get; set; }\n    return:\n      type: System.TimeSpan\n      description: The duration of the interval of silence.\n  overload: System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: This property is set to less than 0 seconds or greater than 10 seconds.\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous\n  id: EndSilenceTimeoutAmbiguous\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  langs:\n  - csharp\n  name: EndSilenceTimeoutAmbiguous\n  nameWithType: SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Gets or sets the interval of silence that the <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref> will accept at the end of ambiguous input before finalizing a recognition operation.\n  remarks: \"The speech recognizer uses this timeout interval when the recognition input is ambiguous. For example, for a speech recognition grammar that supports recognition of either \\\"new game please\\\" or \\\"new game\\\", \\\"new game please\\\" is an unambiguous input, and \\\"new game\\\" is an ambiguous input.  \\n  \\n This property determines how long the speech recognition engine will wait for additional input before finalizing a recognition operation. The timeout interval can be from 0 seconds to 10 seconds, inclusive. The default is 500 milliseconds.  \\n  \\n To set the timeout interval for unambiguous input, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> property.\"\n  syntax:\n    content: public TimeSpan EndSilenceTimeoutAmbiguous { get; set; }\n    return:\n      type: System.TimeSpan\n      description: The duration of the interval of silence.\n  overload: System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: This property is set to less than 0 seconds or greater than 10 seconds.\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.Grammars\n  id: Grammars\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  langs:\n  - csharp\n  name: Grammars\n  nameWithType: SpeechRecognitionEngine.Grammars\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.Grammars\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Gets a collection of the <xref href=\"System.Speech.Recognition.Grammar\"></xref> objects that are loaded in this <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref> instance.\n  remarks: ''\n  example:\n  - \"The following example outputs information to the console for each speech recognition grammar that is currently loaded by a speech recognizer.  \\n  \\n> [!IMPORTANT]\\n>  Copy the grammar collection to avoid errors if the collection is modified while this method enumerates the elements of the collection.  \\n  \\n```c#  \\n  \\nprivate static void ListGrammars(SpeechRecognitionEngine recognizer)  \\n{  \\n  string qualifier;  \\n  List<Grammar> grammars = new List<Grammar>(recognizer.Grammars);  \\n  foreach (Grammar g in grammars)  \\n  {  \\n    qualifier = (g.Enabled) ? \\\"enabled\\\" : \\\"disabled\\\";  \\n  \\n    Console.WriteLine(\\\"Grammar {0} is loaded and is {1}.\\\",  \\n      g.Name, qualifier);  \\n  }  \\n}  \\n```\"\n  syntax:\n    content: public System.Collections.ObjectModel.ReadOnlyCollection<System.Speech.Recognition.Grammar> Grammars { get; }\n    return:\n      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Speech.Recognition.Grammar}\n      description: The collection of <xref href=\"System.Speech.Recognition.Grammar\"></xref> objects.\n  overload: System.Speech.Recognition.SpeechRecognitionEngine.Grammars*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout\n  id: InitialSilenceTimeout\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  langs:\n  - csharp\n  name: InitialSilenceTimeout\n  nameWithType: SpeechRecognitionEngine.InitialSilenceTimeout\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Gets or sets the time interval during which a <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref> accepts input containing only silence before finalizing recognition.\n  remarks: \"Each speech recognizer has an algorithm to distinguish between silence and speech. If the recognizer input is silence during the initial silence timeout period, then the recognizer finalizes that recognition operation.  \\n  \\n-   For asynchronous recognition operations and emulation, the recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event, where the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InitialSilenceTimeout%2A?displayProperty=fullName> property is `true`, and the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A?displayProperty=fullName> property is `null`.  \\n  \\n-   For synchronous recognition operations and emulation, the recognizer returns `null`, instead of a valid <xref:System.Speech.Recognition.RecognitionResult>.  \\n  \\n If the initial silence timeout interval is set to 0, the recognizer does not perform an initial silence timeout check. The timeout interval can be any non-negative value. The default is 0 seconds.\"\n  example:\n  - \"The following example shows part of a console application that demonstrates basic speech recognition. The example sets the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> and InitialSilenceTimeout properties of a <xref:System.Speech.Recognition.SpeechRecognitionEngine> before initiating speech recognition. Handlers for the speech recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> events output event information to the console to demonstrate how the InitialSilenceTimeout properties of a <xref:System.Speech.Recognition.SpeechRecognitionEngine> properties affect recognition operations.  \\n  \\n```c#  \\n  \\nusing System;  \\nusing System.Speech.Recognition;  \\n  \\nnamespace SpeechRecognitionApp  \\n{  \\n  class Program  \\n  {  \\n    static void Main(string[] args)  \\n    {  \\n  \\n      // Initialize an in-process speech recognizer.  \\n      using (SpeechRecognitionEngine recognizer =  \\n        new SpeechRecognitionEngine(  \\n          new System.Globalization.CultureInfo(\\\"en-US\\\")))  \\n      {  \\n        // Load a Grammar object.  \\n        recognizer.LoadGrammar(CreateServicesGrammar(\\\"FindServices\\\"));  \\n  \\n        // Add event handlers.  \\n        recognizer.AudioStateChanged +=  \\n          new EventHandler<AudioStateChangedEventArgs>(  \\n            AudioStateChangedHandler);  \\n        recognizer.RecognizeCompleted +=  \\n          new EventHandler<RecognizeCompletedEventArgs>(  \\n            RecognizeCompletedHandler);  \\n  \\n        // Configure input to the speech recognizer.  \\n        recognizer.SetInputToDefaultAudioDevice();  \\n  \\n        recognizer.InitialSilenceTimeout = TimeSpan.FromSeconds(3);  \\n        recognizer.BabbleTimeout = TimeSpan.FromSeconds(2);  \\n        recognizer.EndSilenceTimeout = TimeSpan.FromSeconds(1);  \\n        recognizer.EndSilenceTimeoutAmbiguous = TimeSpan.FromSeconds(1.5);  \\n  \\n        Console.WriteLine(\\\"BabbleTimeout: {0}\\\", recognizer.BabbleTimeout);  \\n        Console.WriteLine(\\\"InitialSilenceTimeout: {0}\\\", recognizer.InitialSilenceTimeout);  \\n        Console.WriteLine(\\\"EndSilenceTimeout: {0}\\\", recognizer.EndSilenceTimeout);  \\n        Console.WriteLine(\\\"EndSilenceTimeoutAmbiguous: {0}\\\", recognizer.EndSilenceTimeoutAmbiguous);  \\n        Console.WriteLine();  \\n  \\n        // Start asynchronous speech recognition.  \\n        recognizer.RecognizeAsync(RecognizeMode.Single);  \\n  \\n        // Keep the console window open.  \\n        while (true)  \\n        {  \\n          Console.ReadLine();  \\n        }  \\n      }  \\n    }  \\n  \\n    // Create a grammar and build it into a Grammar object.   \\n    static Grammar CreateServicesGrammar(string grammarName)  \\n    {  \\n  \\n      // Create a grammar for finding services in different cities.  \\n      Choices services = new Choices(new string[] { \\\"restaurants\\\", \\\"hotels\\\", \\\"gas stations\\\" });  \\n      Choices cities = new Choices(new string[] { \\\"Seattle\\\", \\\"Boston\\\", \\\"Dallas\\\" });  \\n  \\n      GrammarBuilder findServices = new GrammarBuilder(\\\"Find\\\");  \\n      findServices.Append(services);  \\n      findServices.Append(\\\"near\\\");  \\n      findServices.Append(cities);  \\n  \\n      // Create a Grammar object from the GrammarBuilder..  \\n      Grammar servicesGrammar = new Grammar(findServices);  \\n      servicesGrammar.Name = (\\\"FindServices\\\");  \\n      return servicesGrammar;  \\n    }  \\n  \\n    // Handle the AudioStateChanged event.  \\n    static void AudioStateChangedHandler(  \\n      object sender, AudioStateChangedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\"AudioStateChanged ({0}): {1}\\\",  \\n        DateTime.Now.ToString(\\\"mm:ss.f\\\"), e.AudioState);  \\n    }  \\n  \\n    // Handle the RecognizeCompleted event.  \\n    static void RecognizeCompletedHandler(  \\n      object sender, RecognizeCompletedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\"RecognizeCompleted ({0}):\\\",  \\n        DateTime.Now.ToString(\\\"mm:ss.f\\\"));  \\n  \\n      string resultText;  \\n      if (e.Result != null) { resultText = e.Result.Text; }  \\n      else { resultText = \\\"<null>\\\"; }  \\n  \\n      Console.WriteLine(  \\n        \\\" BabbleTimeout: {0}; InitialSilenceTimeout: {1}; Result text: {2}\\\",  \\n        e.BabbleTimeout, e.InitialSilenceTimeout, resultText);  \\n      if (e.Error != null)  \\n      {  \\n        Console.WriteLine(\\\" Exception message: \\\", e.Error.Message);  \\n      }  \\n  \\n      // Start the next asynchronous recognition operation.  \\n      ((SpeechRecognitionEngine)sender).RecognizeAsync(RecognizeMode.Single);  \\n    }  \\n  }  \\n}  \\n  \\n```\"\n  syntax:\n    content: public TimeSpan InitialSilenceTimeout { get; set; }\n    return:\n      type: System.TimeSpan\n      description: The duration of the interval of silence.\n  overload: System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: This property is set to less than 0 seconds.\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers\n  id: InstalledRecognizers\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  langs:\n  - csharp\n  name: InstalledRecognizers()\n  nameWithType: SpeechRecognitionEngine.InstalledRecognizers()\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers()\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Returns information for all of the installed speech recognizers on the current system.\n  remarks: To get information about the current recognizer, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo%2A> property.\n  example:\n  - \"The following example shows part of a console application that demonstrates basic speech recognition. The example uses the collection returned by the InstalledRecognizers method to find a speech recognizer that supports the English language.  \\n  \\n```c#  \\nusing System;  \\nusing System.Speech.Recognition;  \\n  \\nnamespace SpeechRecognitionApp  \\n{  \\n  class Program  \\n  {  \\n    static void Main(string[] args)  \\n    {  \\n  \\n      // Select a speech recognizer that supports English.  \\n      RecognizerInfo info = null;  \\n      foreach (RecognizerInfo ri in SpeechRecognitionEngine.InstalledRecognizers())  \\n      {  \\n        if (ri.Culture.TwoLetterISOLanguageName.Equals(\\\"en\\\"))  \\n        {  \\n          info = ri;  \\n          break;  \\n        }  \\n      }  \\n      if (info == null) return;  \\n  \\n      // Create the selected recognizer.  \\n      using (SpeechRecognitionEngine recognizer =  \\n        new SpeechRecognitionEngine(info))  \\n      {  \\n  \\n        // Create and load a dictation grammar.  \\n        recognizer.LoadGrammar(new DictationGrammar());  \\n  \\n        // Add a handler for the speech recognized event.  \\n        recognizer.SpeechRecognized +=   \\n          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  \\n  \\n        // Configure input to the speech recognizer.  \\n        recognizer.SetInputToDefaultAudioDevice();  \\n  \\n        // Start asynchronous, continuous speech recognition.  \\n        recognizer.RecognizeAsync(RecognizeMode.Multiple);  \\n  \\n        // Keep the console window open.  \\n        while (true)  \\n        {  \\n          Console.ReadLine();  \\n        }  \\n      }  \\n    }  \\n  \\n    // Handle the SpeechRecognized event.  \\n    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\"Recognized text: \\\" + e.Result.Text);  \\n    }  \\n  }  \\n}  \\n```\"\n  syntax:\n    content: public static System.Collections.ObjectModel.ReadOnlyCollection<System.Speech.Recognition.RecognizerInfo> InstalledRecognizers ();\n    parameters: []\n    return:\n      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Speech.Recognition.RecognizerInfo}\n      description: A read-only collection of the <xref href=\"System.Speech.Recognition.RecognizerInfo\"></xref> objects that describe the installed recognizers.\n  overload: System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar(System.Speech.Recognition.Grammar)\n  id: LoadGrammar(System.Speech.Recognition.Grammar)\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  langs:\n  - csharp\n  name: LoadGrammar(Grammar)\n  nameWithType: SpeechRecognitionEngine.LoadGrammar(Grammar)\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar(Grammar)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Synchronously loads a <xref href=\"System.Speech.Recognition.Grammar\"></xref> object.\n  remarks: \"The recognizer throws an exception if the <xref:System.Speech.Recognition.Grammar> object is already loaded, is being asynchronously loaded, or has failed to load into any recognizer. You cannot load the same <xref:System.Speech.Recognition.Grammar> object into multiple instances of <xref:System.Speech.Recognition.SpeechRecognitionEngine>. Instead, create a new <xref:System.Speech.Recognition.Grammar> object for each <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance.  \\n  \\n If the recognizer is running, applications must use <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> to pause the speech recognition engine before loading, unloading,  enabling, or disabling a grammar.  \\n  \\n When you load a grammar, it is enabled by default. To disable a loaded grammar, use the <xref:System.Speech.Recognition.Grammar.Enabled%2A> property.  \\n  \\n To load a <xref:System.Speech.Recognition.Grammar> object asynchronously, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.\"\n  example:\n  - \"The following example shows part of a console application that demonstrates basic speech recognition. The example creates a <xref:System.Speech.Recognition.DictationGrammar> and loads it into a speech recognizer.  \\n  \\n```c#  \\nusing System;  \\nusing System.Speech.Recognition;  \\n  \\nnamespace SpeechRecognitionApp  \\n{  \\n  class Program  \\n  {  \\n    static void Main(string[] args)  \\n    {  \\n  \\n      // Create an in-process speech recognizer for the en-US locale.  \\n      using (  \\n      SpeechRecognitionEngine recognizer =  \\n        new SpeechRecognitionEngine(  \\n          new System.Globalization.CultureInfo(\\\"en-US\\\")))  \\n      {  \\n  \\n        // Create and load a dictation grammar.  \\n        recognizer.LoadGrammar(new DictationGrammar());  \\n  \\n        // Add a handler for the speech recognized event.  \\n        recognizer.SpeechRecognized +=   \\n          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  \\n  \\n        // Configure input to the speech recognizer.  \\n        recognizer.SetInputToDefaultAudioDevice();  \\n  \\n        // Start asynchronous, continuous speech recognition.  \\n        recognizer.RecognizeAsync(RecognizeMode.Multiple);  \\n  \\n        // Keep the console window open.  \\n        while (true)  \\n        {  \\n          Console.ReadLine();  \\n        }  \\n      }  \\n    }  \\n  \\n    // Handle the SpeechRecognized event.  \\n    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\"Recognized text: \\\" + e.Result.Text);  \\n    }  \\n  }  \\n}  \\n  \\n```\"\n  syntax:\n    content: public void LoadGrammar (System.Speech.Recognition.Grammar grammar);\n    parameters:\n    - id: grammar\n      type: System.Speech.Recognition.Grammar\n      description: The grammar object to load.\n  overload: System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>Grammar</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>Grammar</code> is not in a valid state.\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync(System.Speech.Recognition.Grammar)\n  id: LoadGrammarAsync(System.Speech.Recognition.Grammar)\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  langs:\n  - csharp\n  name: LoadGrammarAsync(Grammar)\n  nameWithType: SpeechRecognitionEngine.LoadGrammarAsync(Grammar)\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync(Grammar)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Asynchronously loads a speech recognition grammar.\n  remarks: \"When the recognizer completes loading a <xref:System.Speech.Recognition.Grammar> object, it raises a <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted> event. The recognizer throws an exception if the <xref:System.Speech.Recognition.Grammar> object is already loaded, is being asynchronously loaded, or has failed to load into any recognizer. You cannot load the same <xref:System.Speech.Recognition.Grammar> object into multiple instances of <xref:System.Speech.Recognition.SpeechRecognitionEngine>. Instead, create a new <xref:System.Speech.Recognition.Grammar> object for each <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance.  \\n  \\n If the recognizer is running, applications must use <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> to pause the speech recognition engine before loading, unloading,  enabling, or disabling a grammar.  \\n  \\n When you load a grammar, it is enabled by default. To disable a loaded grammar, use the <xref:System.Speech.Recognition.Grammar.Enabled%2A> property.  \\n  \\n To load a speech recognition grammar synchronously, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> method.\"\n  syntax:\n    content: public void LoadGrammarAsync (System.Speech.Recognition.Grammar grammar);\n    parameters:\n    - id: grammar\n      type: System.Speech.Recognition.Grammar\n      description: The speech recognition grammar to load.\n  overload: System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>Grammar</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>Grammar</code> is not in a valid state.\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: The asynchronous operation was canceled.\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted\n  id: LoadGrammarCompleted\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  langs:\n  - csharp\n  name: LoadGrammarCompleted\n  nameWithType: SpeechRecognitionEngine.LoadGrammarCompleted\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted\n  type: Event\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Raised when the <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref> finishes the asynchronous loading of a <xref href=\"System.Speech.Recognition.Grammar\"></xref> object.\n  remarks: \"The recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method initiates an asynchronous operation. The <xref:System.Speech.Recognition.SpeechRecognitionEngine> raises this event when it completes the operation. To get the <xref:System.Speech.Recognition.Grammar> object that the recognizer loaded, use the <xref:System.Speech.Recognition.LoadGrammarCompletedEventArgs.Grammar%2A> property of the associated <xref:System.Speech.Recognition.LoadGrammarCompletedEventArgs>. To get the current <xref:System.Speech.Recognition.Grammar> objects the recognizer has loaded, use the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.Grammars%2A> property.  \\n  \\n If the recognizer is running, applications must use <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> to pause the speech recognition engine before loading, unloading,  enabling, or disabling a grammar.  \\n  \\n When you create a LoadGrammarCompleted delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).\"\n  example:\n  - \"The following example creates an in-process speech recognizer, and then creates two types of grammars for recognizing specific words and for accepting free dictation. The example constructs a <xref:System.Speech.Recognition.Grammar> object from each of the completed speech recognition grammars, then asynchronously loads the <xref:System.Speech.Recognition.Grammar> objects to the <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance. Handlers for the recognizer's LoadGrammarCompleted and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events write to the console the name of the <xref:System.Speech.Recognition.Grammar> object that was used to perform the recognition and the text of the recognition result, respectively.  \\n  \\n```  \\nusing System;  \\nusing System.Speech.Recognition;  \\n  \\nnamespace SampleRecognition  \\n{  \\n  class Program  \\n  {  \\n    private static SpeechRecognitionEngine recognizer;  \\n    public static void Main(string[] args)  \\n    {  \\n  \\n      // Initialize an in-process speech recognition engine and set its input.  \\n      recognizer = new SpeechRecognitionEngine();  \\n      recognizer.SetInputToDefaultAudioDevice();  \\n  \\n      // Add a handler for the LoadGrammarCompleted event.  \\n      recognizer.LoadGrammarCompleted +=  \\n        new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  \\n  \\n      // Add a handler for the SpeechRecognized event.  \\n      recognizer.SpeechRecognized +=  \\n        new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  \\n  \\n      // Create the \\\"yesno\\\" grammar.  \\n      Choices yesChoices = new Choices(new string[] { \\\"yes\\\", \\\"yup\\\", \\\"yeah\\\" });  \\n      SemanticResultValue yesValue =  \\n          new SemanticResultValue(yesChoices, (bool)true);  \\n      Choices noChoices = new Choices(new string[] { \\\"no\\\", \\\"nope\\\", \\\"neah\\\" });  \\n      SemanticResultValue noValue =  \\n          new SemanticResultValue(noChoices, (bool)false);  \\n      SemanticResultKey yesNoKey =  \\n          new SemanticResultKey(\\\"yesno\\\", new Choices(new GrammarBuilder[] { yesValue, noValue }));  \\n      Grammar yesnoGrammar = new Grammar(yesNoKey);  \\n      yesnoGrammar.Name = \\\"yesNo\\\";  \\n  \\n      // Create the \\\"done\\\" grammar.  \\n      Grammar doneGrammar =  \\n        new Grammar(new Choices(new string[] { \\\"done\\\", \\\"exit\\\", \\\"quit\\\", \\\"stop\\\" }));  \\n      doneGrammar.Name = \\\"Done\\\";  \\n  \\n      // Create a dictation grammar.  \\n      Grammar dictation = new DictationGrammar();  \\n      dictation.Name = \\\"Dictation\\\";  \\n  \\n      // Load grammars to the recognizer.  \\n      recognizer.LoadGrammarAsync(yesnoGrammar);  \\n      recognizer.LoadGrammarAsync(doneGrammar);  \\n      recognizer.LoadGrammarAsync(dictation);  \\n  \\n      // Start asynchronous, continuous recognition.  \\n      recognizer.RecognizeAsync(RecognizeMode.Multiple);  \\n  \\n      // Keep the console window open.  \\n      Console.ReadLine();  \\n    }  \\n  \\n    // Handle the LoadGrammarCompleted event.   \\n    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  \\n    {  \\n      string grammarName = e.Grammar.Name;  \\n      bool grammarLoaded = e.Grammar.Loaded;  \\n  \\n      if (e.Error != null)  \\n      {  \\n        Console.WriteLine(\\\"LoadGrammar for {0} failed with a {1}.\\\",  \\n        grammarName, e.Error.GetType().Name);  \\n  \\n        // Add exception handling code here.  \\n      }  \\n  \\n      Console.WriteLine(\\\"Grammar {0} {1} loaded.\\\",  \\n      grammarName, (grammarLoaded) ? \\\"is\\\" : \\\"is not\\\");  \\n    }  \\n  \\n    // Handle the SpeechRecognized event.  \\n    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\"Grammar({0}): {1}\\\", e.Result.Grammar.Name, e.Result.Text);  \\n  \\n      // Add event handler code here.  \\n    }  \\n  }  \\n}  \\n  \\n```\"\n  syntax:\n    content: public event EventHandler<System.Speech.Recognition.LoadGrammarCompletedEventArgs> LoadGrammarCompleted;\n    return:\n      type: System.EventHandler{System.Speech.Recognition.LoadGrammarCompletedEventArgs}\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates\n  id: MaxAlternates\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  langs:\n  - csharp\n  name: MaxAlternates\n  nameWithType: SpeechRecognitionEngine.MaxAlternates\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Gets or sets the maximum number of alternate recognition results that the <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref> returns for each recognition operation.\n  remarks: \"The <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> property of the <xref:System.Speech.Recognition.RecognitionResult> class contains the collection of <xref:System.Speech.Recognition.RecognizedPhrase> objects that represent possible interpretations of the input.  \\n  \\n The default value for MaxAlternates is 10.\"\n  syntax:\n    content: public int MaxAlternates { get; set; }\n    return:\n      type: System.Int32\n      description: The number of alternate results to return.\n  overload: System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: MaxAlternates is set to a value less than 0.\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.QueryRecognizerSetting(System.String)\n  id: QueryRecognizerSetting(System.String)\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  langs:\n  - csharp\n  name: QueryRecognizerSetting(String)\n  nameWithType: SpeechRecognitionEngine.QueryRecognizerSetting(String)\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.QueryRecognizerSetting(String)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Returns the values of settings for the recognizer.\n  remarks: \"Recognizer settings can contain string, 64-bit integer, or memory address data. The following table describes the settings that are defined for a Microsoft Speech API (SAPI)-compliant recognizer. The following settings must have the same range for each recognizer that supports the setting. A SAPI-compliant recognizer is not required to support these settings and can support other settings.  \\n  \\n|Name|Description|  \\n|----------|-----------------|  \\n|`ResourceUsage`|Specifies the recognizer's CPU consumption. The range is from 0 to 100. The default value is 50.|  \\n|`ResponseSpeed`|Indicates the length of silence at the end of unambiguous input before the speech recognizer completes a recognition operation. The range is from 0 to 10,000 milliseconds (ms). This setting corresponds to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> property.  Default = 150ms.|  \\n|`ComplexResponseSpeed`|Indicates the length of silence at the end of ambiguous input before the speech recognizer completes a recognition operation. The range is from 0 to 10,000ms. This setting corresponds to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> property. Default = 500ms.|  \\n|`AdaptationOn`|Indicates whether adaptation of the acoustic model is ON (value = `1`) or OFF (value = `0`). The default value is `1` (ON).|  \\n|`PersistedBackgroundAdaptation`|Indicates whether background adaptation is ON (value = `1`) or OFF (value = `0`), and persists the setting in the registry. The default value is `1` (ON).|  \\n  \\n To update a setting for the recognizer, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> methods.\"\n  example:\n  - \"The following example is part of a console application that outputs the values for a number of the settings defined for the recognizer that supports the en-US locale. The example generates the following output.  \\n  \\n```  \\nSettings for recognizer MS-1033-80-DESK:  \\n  \\n  ResourceUsage                  is not supported by this recognizer.  \\n  ResponseSpeed                  = 150  \\n  ComplexResponseSpeed           = 500  \\n  AdaptationOn                   = 1  \\n  PersistedBackgroundAdaptation  = 1  \\n  \\nPress any key to exit...  \\n```  \\n  \\n```c#  \\n  \\nusing System;  \\nusing System.Globalization;  \\nusing System.Speech.Recognition;  \\n  \\nnamespace RecognizerSettings  \\n{  \\n  class Program  \\n  {  \\n    static readonly string[] settings = new string[] {  \\n      \\\"ResourceUsage\\\",  \\n      \\\"ResponseSpeed\\\",  \\n      \\\"ComplexResponseSpeed\\\",  \\n      \\\"AdaptationOn\\\",  \\n      \\\"PersistedBackgroundAdaptation\\\"  \\n    };  \\n  \\n    static void Main(string[] args)  \\n    {  \\n      using (SpeechRecognitionEngine recognizer =  \\n        new SpeechRecognitionEngine(new System.Globalization.CultureInfo(\\\"en-US\\\")))  \\n      {  \\n        Console.WriteLine(\\\"Settings for recognizer {0}:\\\",  \\n          recognizer.RecognizerInfo.Name);  \\n        Console.WriteLine();  \\n  \\n        foreach (string setting in settings)  \\n        {  \\n          try  \\n          {  \\n            object value = recognizer.QueryRecognizerSetting(setting);  \\n            Console.WriteLine(\\\"  {0,-30} = {1}\\\", setting, value);  \\n          }  \\n          catch  \\n          {  \\n            Console.WriteLine(\\\"  {0,-30} is not supported by this recognizer.\\\",  \\n              setting);  \\n          }  \\n        }  \\n      }  \\n      Console.WriteLine();  \\n  \\n      Console.WriteLine(\\\"Press any key to exit...\\\");  \\n      Console.ReadKey();  \\n    }  \\n  }  \\n}  \\n  \\n```\"\n  syntax:\n    content: public object QueryRecognizerSetting (string settingName);\n    parameters:\n    - id: settingName\n      type: System.String\n      description: The name of the setting to return.\n    return:\n      type: System.Object\n      description: The value of the setting.\n  overload: System.Speech.Recognition.SpeechRecognitionEngine.QueryRecognizerSetting*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>settingName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>settingName</code> is the empty string (\"\").\n  - type: System.Collections.Generic.KeyNotFoundException\n    commentId: T:System.Collections.Generic.KeyNotFoundException\n    description: The recognizer does not have a setting by that name.\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.Recognize\n  id: Recognize\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  langs:\n  - csharp\n  name: Recognize()\n  nameWithType: SpeechRecognitionEngine.Recognize()\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.Recognize()\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Performs a synchronous speech recognition operation.\n  remarks: \"This method performs a single recognition operation. The recognizer performs this operation against its loaded and enabled speech recognition grammars.  \\n  \\n During a call to this method, the recognizer can raise the following events:  \\n  \\n-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.  Raised when the recognizer detects input that it can identify as speech.  \\n  \\n-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.  Raised when input creates an ambiguous match with one of the active grammars.  \\n  \\n-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>. Raised when the recognizer finalizes a recognition operation.  \\n  \\n The recognizer does not raise the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event when using this method.  \\n  \\n The Recognize method returns a <xref:System.Speech.Recognition.RecognitionResult> object, or `null` if the operation is not successful.  \\n  \\n A synchronous recognition operation can fail for the following reasons:  \\n  \\n-   Speech is not detected before the timeout intervals expire for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties.  \\n  \\n-   The recognition engine detects speech but finds no matches in any of its loaded and enabled <xref:System.Speech.Recognition.Grammar> objects.  \\n  \\n To perform asynchronous recognition, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> methods.\"\n  example:\n  - \"The following example shows part of a console application that demonstrates basic speech recognition. The example creates a <xref:System.Speech.Recognition.DictationGrammar>, loads it into an in-process speech recognizer, and performs one recognition operation.  \\n  \\n```  \\n  \\nusing System;  \\nusing System.Speech.Recognition;  \\n  \\nnamespace SynchronousRecognition  \\n{  \\n  class Program  \\n  {  \\n    static void Main(string[] args)  \\n    {  \\n      // Create an in-process speech recognizer for the en-US locale.  \\n      using (SpeechRecognitionEngine recognizer =  \\n        new SpeechRecognitionEngine(  \\n          new System.Globalization.CultureInfo(\\\"en-US\\\")))  \\n      {  \\n  \\n        // Create and load a dictation grammar.  \\n        recognizer.LoadGrammar(new DictationGrammar());  \\n  \\n        // Configure input to the speech recognizer.  \\n        recognizer.SetInputToDefaultAudioDevice();  \\n  \\n        // Modify the initial silence time-out value.  \\n        recognizer.InitialSilenceTimeout = TimeSpan.FromSeconds(5);  \\n  \\n        // Start synchronous speech recognition.  \\n        RecognitionResult result = recognizer.Recognize();  \\n  \\n        if (result != null)  \\n        {  \\n          Console.WriteLine(\\\"Recognized text = {0}\\\", result.Text);  \\n        }  \\n        else  \\n        {  \\n          Console.WriteLine(\\\"No recognition result available.\\\");  \\n        }  \\n      }  \\n  \\n      Console.WriteLine();  \\n      Console.WriteLine(\\\"Press any key to continue...\\\");  \\n      Console.ReadKey();  \\n    }  \\n  }  \\n}  \\n```\"\n  syntax:\n    content: public System.Speech.Recognition.RecognitionResult Recognize ();\n    parameters: []\n    return:\n      type: System.Speech.Recognition.RecognitionResult\n      description: The recognition result for the input, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the operation is not successful or the recognizer is not enabled.\n  overload: System.Speech.Recognition.SpeechRecognitionEngine.Recognize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.Recognize(System.TimeSpan)\n  id: Recognize(System.TimeSpan)\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  langs:\n  - csharp\n  name: Recognize(TimeSpan)\n  nameWithType: SpeechRecognitionEngine.Recognize(TimeSpan)\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.Recognize(TimeSpan)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Performs a synchronous speech recognition operation with a specified initial silence timeout period.\n  remarks: \"If the speech recognition engine detects speech within the time interval specified by `initialSilenceTimeout` argument, Recognize performs a single recognition operation and then terminates.  The `initialSilenceTimeout` parameter supersedes the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> property.  \\n  \\n During a call to this method, the recognizer can raise the following events:  \\n  \\n-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.  Raised when the recognizer detects input that it can identify as speech.  \\n  \\n-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.  Raised when input creates an ambiguous match with one of the active grammars.  \\n  \\n-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>. Raised when the recognizer finalizes a recognition operation.  \\n  \\n The recognizer does not raise the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event when using this method.  \\n  \\n The <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize> method returns a <xref:System.Speech.Recognition.RecognitionResult> object, or `null` if the operation is not successful.  \\n  \\n A synchronous recognition operation can fail for the following reasons:  \\n  \\n-   Speech is not detected before the timeout intervals expire for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> or for the `initialSilenceTimeout` parameter.  \\n  \\n-   The recognition engine detects speech but finds no matches in any of its loaded and enabled <xref:System.Speech.Recognition.Grammar> objects.  \\n  \\n To perform asynchronous recognition, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> methods.\"\n  example:\n  - \"The following example shows part of a console application that demonstrates basic speech recognition. The example creates a <xref:System.Speech.Recognition.DictationGrammar>, loads it into an in-process speech recognizer, and performs one recognition operation.  \\n  \\n```c#  \\n  \\nusing System;  \\nusing System.Speech.Recognition;  \\n  \\nnamespace SynchronousRecognition  \\n{  \\n  class Program  \\n  {  \\n    static void Main(string[] args)  \\n    {  \\n      // Create an in-process speech recognizer for the en-US locale.  \\n      using (SpeechRecognitionEngine recognizer =  \\n        new SpeechRecognitionEngine(  \\n          new System.Globalization.CultureInfo(\\\"en-US\\\")))  \\n      {  \\n        // Create and load a dictation grammar.  \\n        recognizer.LoadGrammar(new DictationGrammar());  \\n  \\n        // Configure input to the speech recognizer.  \\n        recognizer.SetInputToDefaultAudioDevice();  \\n  \\n        // Start synchronous speech recognition.  \\n        RecognitionResult result = recognizer.Recognize(TimeSpan.FromSeconds(5));  \\n  \\n        if (result != null)  \\n        {  \\n          Console.WriteLine(\\\"Recognized text = {0}\\\", result.Text);  \\n        }  \\n        else  \\n        {  \\n          Console.WriteLine(\\\"No recognition result available.\\\");  \\n        }  \\n      }  \\n  \\n      Console.WriteLine();  \\n      Console.WriteLine(\\\"Press any key to continue...\\\");  \\n      Console.ReadKey();  \\n    }  \\n  }  \\n}  \\n```\"\n  syntax:\n    content: public System.Speech.Recognition.RecognitionResult Recognize (TimeSpan initialSilenceTimeout);\n    parameters:\n    - id: initialSilenceTimeout\n      type: System.TimeSpan\n      description: The interval of time a speech recognizer accepts input containing only silence before finalizing recognition.\n    return:\n      type: System.Speech.Recognition.RecognitionResult\n      description: The recognition result for the input, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the operation is not successful or the recognizer is not enabled.\n  overload: System.Speech.Recognition.SpeechRecognitionEngine.Recognize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync\n  id: RecognizeAsync\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  langs:\n  - csharp\n  name: RecognizeAsync()\n  nameWithType: SpeechRecognitionEngine.RecognizeAsync()\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync()\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Performs a single, asynchronous speech recognition operation.\n  remarks: \"This method performs a single, asynchronous recognition operation. The recognizer performs the operation against its loaded and enabled speech recognition grammars.  \\n  \\n During a call to this method, the recognizer can raise the following events:  \\n  \\n-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.  Raised when the recognizer detects input that it can identify as speech.  \\n  \\n-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.  Raised when input creates an ambiguous match with one of the active grammars.  \\n  \\n-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>. Raised when the recognizer finalizes a recognition operation.  \\n  \\n-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>. Raised when a <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> operation finishes.  \\n  \\n To retrieve the result of an asynchronous recognition operation, attach an event handler to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event. The recognizer raises this event whenever it successfully completes a synchronous or asynchronous recognition operation. If recognition was not successful, the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A> property on <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> object, which you can access in the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event, will be `null`.  \\n  \\n To perform synchronous recognition, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> methods.\"\n  example:\n  - \"The following example shows part of a console application that demonstrates basic asynchronous speech recognition. The example creates a <xref:System.Speech.Recognition.DictationGrammar>, loads it into an in-process speech recognizer, and performs one asynchronous recognition operation. Event handlers are included to demonstrate the events that the recognizer raises during the operation.  \\n  \\n```c#  \\nusing System;  \\nusing System.Globalization;  \\nusing System.Speech.Recognition;  \\nusing System.Threading;  \\n  \\nnamespace AsynchronousRecognition  \\n{  \\n  class Program  \\n  {  \\n    // Indicate whether asynchronous recognition is complete.  \\n    static bool completed;  \\n  \\n    static void Main(string[] args)  \\n    {  \\n      // Create an in-process speech recognizer.  \\n      using (SpeechRecognitionEngine recognizer =  \\n        new SpeechRecognitionEngine(new CultureInfo(\\\"en-US\\\")))  \\n      {  \\n        // Create a grammar for choosing cities for a flight.  \\n        Choices cities = new Choices(new string[]   \\n        { \\\"Los Angeles\\\", \\\"New York\\\", \\\"Chicago\\\", \\\"San Francisco\\\", \\\"Miami\\\", \\\"Dallas\\\" });  \\n  \\n        GrammarBuilder gb = new GrammarBuilder();  \\n        gb.Append(\\\"I want to fly from\\\");  \\n        gb.Append(cities);  \\n        gb.Append(\\\"to\\\");  \\n        gb.Append(cities);  \\n  \\n        // Construct a Grammar object and load it to the recognizer.  \\n        Grammar cityChooser = new Grammar(gb);  \\n        cityChooser.Name = (\\\"City Chooser\\\");  \\n        recognizer.LoadGrammarAsync(cityChooser);  \\n  \\n        // Attach event handlers.  \\n        recognizer.SpeechDetected +=  \\n          new EventHandler<SpeechDetectedEventArgs>(  \\n            SpeechDetectedHandler);  \\n        recognizer.SpeechHypothesized +=  \\n          new EventHandler<SpeechHypothesizedEventArgs>(  \\n            SpeechHypothesizedHandler);  \\n        recognizer.SpeechRecognitionRejected +=  \\n          new EventHandler<SpeechRecognitionRejectedEventArgs>(  \\n            SpeechRecognitionRejectedHandler);  \\n        recognizer.SpeechRecognized +=  \\n          new EventHandler<SpeechRecognizedEventArgs>(  \\n            SpeechRecognizedHandler);  \\n        recognizer.RecognizeCompleted +=  \\n          new EventHandler<RecognizeCompletedEventArgs>(  \\n            RecognizeCompletedHandler);  \\n  \\n        // Assign input to the recognizer and start an asynchronous  \\n        // recognition operation.  \\n        recognizer.SetInputToDefaultAudioDevice();  \\n  \\n        completed = false;  \\n        Console.WriteLine(\\\"Starting asynchronous recognition...\\\");  \\n        recognizer.RecognizeAsync();  \\n  \\n        // Wait for the operation to complete.  \\n        while (!completed)  \\n        {  \\n          Thread.Sleep(333);  \\n        }  \\n        Console.WriteLine(\\\"Done.\\\");  \\n      }  \\n  \\n      Console.WriteLine();  \\n      Console.WriteLine(\\\"Press any key to exit...\\\");  \\n      Console.ReadKey();  \\n    }  \\n  \\n    // Handle the SpeechDetected event.  \\n    static void SpeechDetectedHandler(object sender, SpeechDetectedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\" In SpeechDetectedHandler:\\\");  \\n      Console.WriteLine(\\\" - AudioPosition = {0}\\\", e.AudioPosition);  \\n    }  \\n  \\n    // Handle the SpeechHypothesized event.  \\n    static void SpeechHypothesizedHandler(  \\n      object sender, SpeechHypothesizedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\" In SpeechHypothesizedHandler:\\\");  \\n  \\n      string grammarName = \\\"<not available>\\\";  \\n      string resultText = \\\"<not available>\\\";  \\n      if (e.Result != null)  \\n      {  \\n        if (e.Result.Grammar != null)  \\n        {  \\n          grammarName = e.Result.Grammar.Name;  \\n        }  \\n        resultText = e.Result.Text;  \\n      }  \\n  \\n      Console.WriteLine(\\\" - Grammar Name = {0}; Result Text = {1}\\\",  \\n        grammarName, resultText);  \\n    }  \\n  \\n    // Handle the SpeechRecognitionRejected event.  \\n    static void SpeechRecognitionRejectedHandler(  \\n      object sender, SpeechRecognitionRejectedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\" In SpeechRecognitionRejectedHandler:\\\");  \\n  \\n      string grammarName = \\\"<not available>\\\";  \\n      string resultText = \\\"<not available>\\\";  \\n      if (e.Result != null)  \\n      {  \\n        if (e.Result.Grammar != null)  \\n        {  \\n          grammarName = e.Result.Grammar.Name;  \\n        }  \\n        resultText = e.Result.Text;  \\n      }  \\n  \\n      Console.WriteLine(\\\" - Grammar Name = {0}; Result Text = {1}\\\",  \\n        grammarName, resultText);  \\n    }  \\n  \\n    // Handle the SpeechRecognized event.  \\n    static void SpeechRecognizedHandler(  \\n      object sender, SpeechRecognizedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\" In SpeechRecognizedHandler.\\\");  \\n  \\n      string grammarName = \\\"<not available>\\\";  \\n      string resultText = \\\"<not available>\\\";  \\n      if (e.Result != null)  \\n      {  \\n        if (e.Result.Grammar != null)  \\n        {  \\n          grammarName = e.Result.Grammar.Name;  \\n        }  \\n        resultText = e.Result.Text;  \\n      }  \\n  \\n      Console.WriteLine(\\\" - Grammar Name = {0}; Result Text = {1}\\\",  \\n        grammarName, resultText);  \\n    }  \\n  \\n    // Handle the RecognizeCompleted event.  \\n    static void RecognizeCompletedHandler(  \\n      object sender, RecognizeCompletedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\" In RecognizeCompletedHandler.\\\");  \\n  \\n      if (e.Error != null)  \\n      {  \\n        Console.WriteLine(  \\n          \\\" - Error occurred during recognition: {0}\\\", e.Error);  \\n        return;  \\n      }  \\n      if (e.InitialSilenceTimeout || e.BabbleTimeout)  \\n      {  \\n        Console.WriteLine(  \\n          \\\" - BabbleTimeout = {0}; InitialSilenceTimeout = {1}\\\",  \\n          e.BabbleTimeout, e.InitialSilenceTimeout);  \\n        return;  \\n      }  \\n      if (e.InputStreamEnded)  \\n      {  \\n        Console.WriteLine(  \\n          \\\" - AudioPosition = {0}; InputStreamEnded = {1}\\\",  \\n          e.AudioPosition, e.InputStreamEnded);  \\n      }  \\n      if (e.Result != null)  \\n      {  \\n        Console.WriteLine(  \\n          \\\" - Grammar = {0}; Text = {1}; Confidence = {2}\\\",  \\n          e.Result.Grammar.Name, e.Result.Text, e.Result.Confidence);  \\n        Console.WriteLine(\\\" - AudioPosition = {0}\\\", e.AudioPosition);  \\n      }  \\n      else  \\n      {  \\n        Console.WriteLine(\\\" - No result.\\\");  \\n      }  \\n  \\n      completed = true;  \\n    }  \\n  }  \\n}  \\n  \\n```\"\n  syntax:\n    content: public void RecognizeAsync ();\n    parameters: []\n  overload: System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync(System.Speech.Recognition.RecognizeMode)\n  id: RecognizeAsync(System.Speech.Recognition.RecognizeMode)\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  langs:\n  - csharp\n  name: RecognizeAsync(RecognizeMode)\n  nameWithType: SpeechRecognitionEngine.RecognizeAsync(RecognizeMode)\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync(RecognizeMode)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Performs one or more asynchronous speech recognition operations.\n  remarks: \"If `mode` is <xref:System.Speech.Recognition.RecognizeMode>, the recognizer continues performing asynchronous recognition operations until the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop%2A> method is called.  \\n  \\n During a call to this method, the recognizer can raise the following events:  \\n  \\n-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.  Raised when the recognizer detects input that it can identify as speech.  \\n  \\n-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.  Raised when input creates an ambiguous match with one of the active grammars.  \\n  \\n-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>. Raised when the recognizer finalizes a recognition operation.  \\n  \\n-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>. Raised when a <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> operation finishes.  \\n  \\n To retrieve the result of an asynchronous recognition operation, attach an event handler to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event. The recognizer raises this event whenever it successfully completes a synchronous or asynchronous recognition operation. If recognition was not successful, the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A> property on <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> object, which you can access in the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event, will be `null`.  \\n  \\n An asynchronous recognition operation can fail for the following reasons:  \\n  \\n-   Speech is not detected before the timeout intervals expire for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties.  \\n  \\n-   The recognition engine detects speech but finds no matches in any of its loaded and enabled <xref:System.Speech.Recognition.Grammar> objects.  \\n  \\n To perform synchronous recognition, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> methods.\"\n  example:\n  - \"The following example shows part of a console application that demonstrates basic asynchronous speech recognition. The example creates a <xref:System.Speech.Recognition.DictationGrammar>, loads it into an in-process speech recognizer, and performs multiple asynchronous recognition operations. The asynchronous operations are cancelled after 30 seconds. Event handlers are included to demonstrate the events that the recognizer raises during the operation.  \\n  \\n```c#  \\nusing System;  \\nusing System.Globalization;  \\nusing System.Speech.Recognition;  \\nusing System.Threading;  \\n  \\nnamespace AsynchronousRecognition  \\n{  \\n  class Program  \\n  {  \\n    // Indicate whether asynchronous recognition is complete.  \\n    static bool completed;  \\n  \\n    static void Main(string[] args)  \\n    {  \\n      // Create an in-process speech recognizer.  \\n      using (SpeechRecognitionEngine recognizer =  \\n        new SpeechRecognitionEngine(new CultureInfo(\\\"en-US\\\")))  \\n      {  \\n        // Create a grammar for choosing cities for a flight.  \\n        Choices cities = new Choices(new string[] { \\\"Los Angeles\\\", \\\"New York\\\", \\\"Chicago\\\", \\\"San Francisco\\\", \\\"Miami\\\", \\\"Dallas\\\" });  \\n  \\n        GrammarBuilder gb = new GrammarBuilder();  \\n        gb.Append(\\\"I want to fly from\\\");  \\n        gb.Append(cities);  \\n        gb.Append(\\\"to\\\");  \\n        gb.Append(cities);  \\n  \\n        // Construct a Grammar object and load it to the recognizer.  \\n        Grammar cityChooser = new Grammar(gb);  \\n        cityChooser.Name = (\\\"City Chooser\\\");  \\n        recognizer.LoadGrammarAsync(cityChooser);  \\n  \\n        // Attach event handlers.  \\n        recognizer.SpeechDetected +=  \\n          new EventHandler<SpeechDetectedEventArgs>(  \\n            SpeechDetectedHandler);  \\n        recognizer.SpeechHypothesized +=  \\n          new EventHandler<SpeechHypothesizedEventArgs>(  \\n            SpeechHypothesizedHandler);  \\n        recognizer.SpeechRecognitionRejected +=  \\n          new EventHandler<SpeechRecognitionRejectedEventArgs>(  \\n            SpeechRecognitionRejectedHandler);  \\n        recognizer.SpeechRecognized +=  \\n          new EventHandler<SpeechRecognizedEventArgs>(  \\n            SpeechRecognizedHandler);  \\n        recognizer.RecognizeCompleted +=  \\n          new EventHandler<RecognizeCompletedEventArgs>(  \\n            RecognizeCompletedHandler);  \\n  \\n        // Assign input to the recognizer and start asynchronous  \\n        // recognition.  \\n        recognizer.SetInputToDefaultAudioDevice();  \\n  \\n        completed = false;  \\n        Console.WriteLine(\\\"Starting asynchronous recognition...\\\");  \\n        recognizer.RecognizeAsync(RecognizeMode.Multiple);  \\n  \\n        // Wait 30 seconds, and then cancel asynchronous recognition.  \\n        Thread.Sleep(TimeSpan.FromSeconds(30));  \\n        recognizer.RecognizeAsyncCancel();  \\n  \\n        // Wait for the operation to complete.  \\n        while (!completed)  \\n        {  \\n          Thread.Sleep(333);  \\n        }  \\n        Console.WriteLine(\\\"Done.\\\");  \\n      }  \\n  \\n      Console.WriteLine();  \\n      Console.WriteLine(\\\"Press any key to exit...\\\");  \\n      Console.ReadKey();  \\n    }  \\n  \\n    // Handle the SpeechDetected event.  \\n    static void SpeechDetectedHandler(object sender, SpeechDetectedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\" In SpeechDetectedHandler:\\\");  \\n      Console.WriteLine(\\\" - AudioPosition = {0}\\\", e.AudioPosition);  \\n    }  \\n  \\n    // Handle the SpeechHypothesized event.  \\n    static void SpeechHypothesizedHandler(  \\n      object sender, SpeechHypothesizedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\" In SpeechHypothesizedHandler:\\\");  \\n  \\n      string grammarName = \\\"<not available>\\\";  \\n      string resultText = \\\"<not available>\\\";  \\n      if (e.Result != null)  \\n      {  \\n        if (e.Result.Grammar != null)  \\n        {  \\n          grammarName = e.Result.Grammar.Name;  \\n        }  \\n        resultText = e.Result.Text;  \\n      }  \\n  \\n      Console.WriteLine(\\\" - Grammar Name = {0}; Result Text = {1}\\\",  \\n        grammarName, resultText);  \\n    }  \\n  \\n    // Handle the SpeechRecognitionRejected event.  \\n    static void SpeechRecognitionRejectedHandler(  \\n      object sender, SpeechRecognitionRejectedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\" In SpeechRecognitionRejectedHandler:\\\");  \\n  \\n      string grammarName = \\\"<not available>\\\";  \\n      string resultText = \\\"<not available>\\\";  \\n      if (e.Result != null)  \\n      {  \\n        if (e.Result.Grammar != null)  \\n        {  \\n          grammarName = e.Result.Grammar.Name;  \\n        }  \\n        resultText = e.Result.Text;  \\n      }  \\n  \\n      Console.WriteLine(\\\" - Grammar Name = {0}; Result Text = {1}\\\",  \\n        grammarName, resultText);  \\n    }  \\n  \\n    // Handle the SpeechRecognized event.  \\n    static void SpeechRecognizedHandler(  \\n      object sender, SpeechRecognizedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\" In SpeechRecognizedHandler.\\\");  \\n  \\n      string grammarName = \\\"<not available>\\\";  \\n      string resultText = \\\"<not available>\\\";  \\n      if (e.Result != null)  \\n      {  \\n        if (e.Result.Grammar != null)  \\n        {  \\n          grammarName = e.Result.Grammar.Name;  \\n        }  \\n        resultText = e.Result.Text;  \\n      }  \\n  \\n      Console.WriteLine(\\\" - Grammar Name = {0}; Result Text = {1}\\\",  \\n        grammarName, resultText);  \\n    }  \\n  \\n    // Handle the RecognizeCompleted event.  \\n    static void RecognizeCompletedHandler(  \\n      object sender, RecognizeCompletedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\" In RecognizeCompletedHandler.\\\");  \\n  \\n      if (e.Error != null)  \\n      {  \\n        Console.WriteLine(  \\n          \\\" - Error occurred during recognition: {0}\\\", e.Error);  \\n        return;  \\n      }  \\n      if (e.InitialSilenceTimeout || e.BabbleTimeout)  \\n      {  \\n        Console.WriteLine(  \\n          \\\" - BabbleTimeout = {0}; InitialSilenceTimeout = {1}\\\",  \\n          e.BabbleTimeout, e.InitialSilenceTimeout);  \\n        return;  \\n      }  \\n      if (e.InputStreamEnded)  \\n      {  \\n        Console.WriteLine(  \\n          \\\" - AudioPosition = {0}; InputStreamEnded = {1}\\\",  \\n          e.AudioPosition, e.InputStreamEnded);  \\n      }  \\n      if (e.Result != null)  \\n      {  \\n        Console.WriteLine(  \\n          \\\" - Grammar = {0}; Text = {1}; Confidence = {2}\\\",  \\n          e.Result.Grammar.Name, e.Result.Text, e.Result.Confidence);  \\n        Console.WriteLine(\\\" - AudioPosition = {0}\\\", e.AudioPosition);  \\n      }  \\n      else  \\n      {  \\n        Console.WriteLine(\\\" - No result.\\\");  \\n      }  \\n  \\n      completed = true;  \\n    }  \\n  }  \\n}  \\n  \\n```\"\n  syntax:\n    content: public void RecognizeAsync (System.Speech.Recognition.RecognizeMode mode);\n    parameters:\n    - id: mode\n      type: System.Speech.Recognition.RecognizeMode\n      description: Indicates whether to perform one or multiple recognition operations.\n  overload: System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel\n  id: RecognizeAsyncCancel\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  langs:\n  - csharp\n  name: RecognizeAsyncCancel()\n  nameWithType: SpeechRecognitionEngine.RecognizeAsyncCancel()\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel()\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Terminates asynchronous recognition without waiting for the current recognition operation to complete.\n  remarks: \"This method immediately finalizes asynchronous recognition. If the current asynchronous recognition operation is receiving input, the input is truncated and the operation completes with the existing input. The recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event when an asynchronous operation is canceled, and sets the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property of the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> to `true`. This method cancels asynchronous operations initiated by the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods.  \\n  \\n To stop asynchronous recognition without truncating the input, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop%2A> method.\"\n  example:\n  - \"The following example shows part of a console application that demonstrates the use of the RecognizeAsyncCancel method. The example creates and loads a speech recognition grammar, initiates a continuing asynchronous recognition operation, and then pauses 2 seconds before it cancels the operation. The recognizer receives input from the file, c:\\\\temp\\\\audioinput\\\\sample.wav. Event handlers are included to demonstrate the events that the recognizer raises during the operation.  \\n  \\n```c#  \\n  \\nusing System;  \\nusing System.Globalization;  \\nusing System.Speech.Recognition;  \\nusing System.Threading;  \\n  \\nnamespace AsynchronousRecognition  \\n{  \\n  class Program  \\n  {  \\n    // Indicate whether asynchronous recognition is complete.  \\n    static bool completed;  \\n  \\n    static void Main(string[] args)  \\n    {  \\n      // Create an in-process speech recognizer.  \\n      using (SpeechRecognitionEngine recognizer =  \\n        new SpeechRecognitionEngine(new CultureInfo(\\\"en-US\\\")))  \\n      {  \\n        // Create and load a dictation grammar.  \\n        Grammar dictation = new DictationGrammar();  \\n        dictation.Name = \\\"Dictation Grammar\\\";  \\n  \\n        recognizer.LoadGrammar(dictation);  \\n  \\n        // Attach event handlers.  \\n        recognizer.SpeechDetected +=  \\n          new EventHandler<SpeechDetectedEventArgs>(  \\n            SpeechDetectedHandler);  \\n        recognizer.SpeechHypothesized +=  \\n          new EventHandler<SpeechHypothesizedEventArgs>(  \\n            SpeechHypothesizedHandler);  \\n        recognizer.SpeechRecognitionRejected +=  \\n          new EventHandler<SpeechRecognitionRejectedEventArgs>(  \\n            SpeechRecognitionRejectedHandler);  \\n        recognizer.SpeechRecognized +=  \\n          new EventHandler<SpeechRecognizedEventArgs>(  \\n            SpeechRecognizedHandler);  \\n        recognizer.RecognizeCompleted +=  \\n          new EventHandler<RecognizeCompletedEventArgs>(  \\n            RecognizeCompletedHandler);  \\n  \\n        // Begin asynchronous recognition from pre-recorded input.  \\n        recognizer.SetInputToWaveFile(@\\\"c:\\\\temp\\\\audioinput\\\\sample.wav\\\");  \\n  \\n        completed = false;  \\n        Console.WriteLine(\\\"Begin continuing asynchronous recognition...\\\");  \\n        recognizer.RecognizeAsync(RecognizeMode.Multiple);  \\n  \\n        // Wait 2 seconds and then cancel the recognition operation.  \\n        Thread.Sleep(TimeSpan.FromSeconds(2));  \\n        recognizer.RecognizeAsyncCancel();  \\n  \\n        // Wait for the operation to complete.  \\n        while (!completed)  \\n        {  \\n          Thread.Sleep(333);  \\n        }  \\n  \\n        Console.WriteLine(\\\"Done.\\\");  \\n      }  \\n  \\n      Console.WriteLine();  \\n      Console.WriteLine(\\\"Press any key to exit...\\\");  \\n      Console.ReadKey();  \\n    }  \\n  \\n    // Handle the SpeechDetected event.  \\n    static void SpeechDetectedHandler(object sender, SpeechDetectedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\" In SpeechDetectedHandler:\\\");  \\n      Console.WriteLine(\\\" - AudioPosition = {0}\\\", e.AudioPosition);  \\n    }  \\n  \\n    // Handle the SpeechHypothesized event.  \\n    static void SpeechHypothesizedHandler(  \\n      object sender, SpeechHypothesizedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\" In SpeechHypothesizedHandler:\\\");  \\n  \\n      string grammarName = \\\"<not available>\\\";  \\n      string resultText = \\\"<not available>\\\";  \\n      if (e.Result != null)  \\n      {  \\n        if (e.Result.Grammar != null)  \\n        {  \\n          grammarName = e.Result.Grammar.Name;  \\n        }  \\n        resultText = e.Result.Text;  \\n      }  \\n  \\n      Console.WriteLine(\\\" - Grammar Name = {0}; Result Text = {1}\\\",  \\n        grammarName, resultText);  \\n    }  \\n  \\n    // Handle the SpeechRecognitionRejected event.  \\n    static void SpeechRecognitionRejectedHandler(  \\n      object sender, SpeechRecognitionRejectedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\" In SpeechRecognitionRejectedHandler:\\\");  \\n  \\n      string grammarName = \\\"<not available>\\\";  \\n      string resultText = \\\"<not available>\\\";  \\n      if (e.Result != null)  \\n      {  \\n        if (e.Result.Grammar != null)  \\n        {  \\n          grammarName = e.Result.Grammar.Name;  \\n        }  \\n        resultText = e.Result.Text;  \\n      }  \\n  \\n      Console.WriteLine(\\\" - Grammar Name = {0}; Result Text = {1}\\\",  \\n        grammarName, resultText);  \\n    }  \\n  \\n    // Handle the SpeechRecognized event.  \\n    static void SpeechRecognizedHandler(  \\n      object sender, SpeechRecognizedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\" In SpeechRecognizedHandler.\\\");  \\n  \\n      string grammarName = \\\"<not available>\\\";  \\n      string resultText = \\\"<not available>\\\";  \\n      if (e.Result != null)  \\n      {  \\n        if (e.Result.Grammar != null)  \\n        {  \\n          grammarName = e.Result.Grammar.Name;  \\n        }  \\n        resultText = e.Result.Text;  \\n      }  \\n  \\n      Console.WriteLine(\\\" - Grammar Name = {0}; Result Text = {1}\\\",  \\n        grammarName, resultText);  \\n    }  \\n  \\n    // Handle the RecognizeCompleted event.  \\n    static void RecognizeCompletedHandler(  \\n      object sender, RecognizeCompletedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\" In RecognizeCompletedHandler.\\\");  \\n  \\n      if (e.Error != null)  \\n      {  \\n        Console.WriteLine(  \\n          \\\" - Error occurred during recognition: {0}\\\", e.Error);  \\n        return;  \\n      }  \\n      if (e.Cancelled)  \\n      {  \\n        Console.WriteLine(\\\" - asynchronous operation canceled.\\\");  \\n      }  \\n      if (e.InitialSilenceTimeout || e.BabbleTimeout)  \\n      {  \\n        Console.WriteLine(  \\n          \\\" - BabbleTimeout = {0}; InitialSilenceTimeout = {1}\\\",  \\n          e.BabbleTimeout, e.InitialSilenceTimeout);  \\n        return;  \\n      }  \\n      if (e.InputStreamEnded)  \\n      {  \\n        Console.WriteLine(  \\n          \\\" - AudioPosition = {0}; InputStreamEnded = {1}\\\",  \\n          e.AudioPosition, e.InputStreamEnded);  \\n      }  \\n      if (e.Result != null)  \\n      {  \\n        Console.WriteLine(  \\n          \\\" - Grammar = {0}; Text = {1}; Confidence = {2}\\\",  \\n          e.Result.Grammar.Name, e.Result.Text, e.Result.Confidence);  \\n      }  \\n      else  \\n      {  \\n        Console.WriteLine(\\\" - No result.\\\");  \\n      }  \\n  \\n      completed = true;  \\n    }  \\n  }  \\n}  \\n```\"\n  syntax:\n    content: public void RecognizeAsyncCancel ();\n    parameters: []\n  overload: System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop\n  id: RecognizeAsyncStop\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  langs:\n  - csharp\n  name: RecognizeAsyncStop()\n  nameWithType: SpeechRecognitionEngine.RecognizeAsyncStop()\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop()\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Stops asynchronous recognition after the current recognition operation completes.\n  remarks: \"This method finalizes asynchronous recognition without truncating input. If the current asynchronous recognition operation is receiving input, the recognizer continues accepting input until the current recognition operation is completed. The recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event when an asynchronous operation is stopped, and sets the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property of the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> to `true`. This method stops asynchronous operations initiated by the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods.  \\n  \\n To immediately cancel asynchronous recognition with only the existing input, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel%2A> method.\"\n  example:\n  - \"The following example shows part of a console application that demonstrates the use of the RecognizeAsyncStop method. The example creates and loads a speech recognition grammar, initiates a continuing asynchronous recognition operation, and then pauses 2 seconds before it stops the operation. The recognizer receives input from the file, c:\\\\temp\\\\audioinput\\\\sample.wav. Event handlers are included to demonstrate the events that the recognizer raises during the operation.  \\n  \\n```c#  \\n  \\nusing System;  \\nusing System.Globalization;  \\nusing System.Speech.Recognition;  \\nusing System.Threading;  \\n  \\nnamespace AsynchronousRecognition  \\n{  \\n  class Program  \\n  {  \\n    // Indicate whether asynchronous recognition is complete.  \\n    static bool completed;  \\n  \\n    static void Main(string[] args)  \\n    {  \\n      // Create an in-process speech recognizer.  \\n      using (SpeechRecognitionEngine recognizer =  \\n        new SpeechRecognitionEngine(new CultureInfo(\\\"en-US\\\")))  \\n      {  \\n        // Create and load a dictation grammar.  \\n        Grammar dictation = new DictationGrammar();  \\n        dictation.Name = \\\"Dictation Grammar\\\";  \\n  \\n        recognizer.LoadGrammar(dictation);  \\n  \\n        // Attach event handlers.  \\n        recognizer.SpeechDetected +=  \\n          new EventHandler<SpeechDetectedEventArgs>(  \\n            SpeechDetectedHandler);  \\n        recognizer.SpeechHypothesized +=  \\n          new EventHandler<SpeechHypothesizedEventArgs>(  \\n            SpeechHypothesizedHandler);  \\n        recognizer.SpeechRecognitionRejected +=  \\n          new EventHandler<SpeechRecognitionRejectedEventArgs>(  \\n            SpeechRecognitionRejectedHandler);  \\n        recognizer.SpeechRecognized +=  \\n          new EventHandler<SpeechRecognizedEventArgs>(  \\n            SpeechRecognizedHandler);  \\n        recognizer.RecognizeCompleted +=  \\n          new EventHandler<RecognizeCompletedEventArgs>(  \\n            RecognizeCompletedHandler);  \\n  \\n        // Begin asynchronous recognition from pre-recorded input.  \\n        recognizer.SetInputToWaveFile(@\\\"c:\\\\temp\\\\audioinput\\\\sample.wav\\\");  \\n  \\n        completed = false;  \\n        Console.WriteLine(\\\"Begin continuing asynchronous recognition...\\\");  \\n        recognizer.RecognizeAsync(RecognizeMode.Multiple);  \\n  \\n        // Wait 2 seconds and then stop the recognition operation.  \\n        Thread.Sleep(TimeSpan.FromSeconds(2));  \\n        recognizer.RecognizeAsyncStop();  \\n  \\n        // Wait for the operation to complete.  \\n        while (!completed)  \\n        {  \\n          Thread.Sleep(333);  \\n        }  \\n  \\n        Console.WriteLine(\\\"Done.\\\");  \\n      }  \\n  \\n      Console.WriteLine();  \\n      Console.WriteLine(\\\"Press any key to exit...\\\");  \\n      Console.ReadKey();  \\n    }  \\n  \\n    // Handle the SpeechDetected event.  \\n    static void SpeechDetectedHandler(object sender, SpeechDetectedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\" In SpeechDetectedHandler:\\\");  \\n      Console.WriteLine(\\\" - AudioPosition = {0}\\\", e.AudioPosition);  \\n    }  \\n  \\n    // Handle the SpeechHypothesized event.  \\n    static void SpeechHypothesizedHandler(  \\n      object sender, SpeechHypothesizedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\" In SpeechHypothesizedHandler:\\\");  \\n  \\n      string grammarName = \\\"<not available>\\\";  \\n      string resultText = \\\"<not available>\\\";  \\n      if (e.Result != null)  \\n      {  \\n        if (e.Result.Grammar != null)  \\n        {  \\n          grammarName = e.Result.Grammar.Name;  \\n        }  \\n        resultText = e.Result.Text;  \\n      }  \\n  \\n      Console.WriteLine(\\\" - Grammar Name = {0}; Result Text = {1}\\\",  \\n        grammarName, resultText);  \\n    }  \\n  \\n    // Handle the SpeechRecognitionRejected event.  \\n    static void SpeechRecognitionRejectedHandler(  \\n      object sender, SpeechRecognitionRejectedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\" In SpeechRecognitionRejectedHandler:\\\");  \\n  \\n      string grammarName = \\\"<not available>\\\";  \\n      string resultText = \\\"<not available>\\\";  \\n      if (e.Result != null)  \\n      {  \\n        if (e.Result.Grammar != null)  \\n        {  \\n          grammarName = e.Result.Grammar.Name;  \\n        }  \\n        resultText = e.Result.Text;  \\n      }  \\n  \\n      Console.WriteLine(\\\" - Grammar Name = {0}; Result Text = {1}\\\",  \\n        grammarName, resultText);  \\n    }  \\n  \\n    // Handle the SpeechRecognized event.  \\n    static void SpeechRecognizedHandler(  \\n      object sender, SpeechRecognizedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\" In SpeechRecognizedHandler.\\\");  \\n  \\n      string grammarName = \\\"<not available>\\\";  \\n      string resultText = \\\"<not available>\\\";  \\n      if (e.Result != null)  \\n      {  \\n        if (e.Result.Grammar != null)  \\n        {  \\n          grammarName = e.Result.Grammar.Name;  \\n        }  \\n        resultText = e.Result.Text;  \\n      }  \\n  \\n      Console.WriteLine(\\\" - Grammar Name = {0}; Result Text = {1}\\\",  \\n        grammarName, resultText);  \\n    }  \\n  \\n    // Handle the RecognizeCompleted event.  \\n    static void RecognizeCompletedHandler(  \\n      object sender, RecognizeCompletedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\" In RecognizeCompletedHandler.\\\");  \\n  \\n      if (e.Error != null)  \\n      {  \\n        Console.WriteLine(  \\n          \\\" - Error occurred during recognition: {0}\\\", e.Error);  \\n        return;  \\n      }  \\n      if (e.Cancelled)  \\n      {  \\n        Console.WriteLine(\\\" - asynchronous operation canceled.\\\");  \\n      }  \\n      if (e.InitialSilenceTimeout || e.BabbleTimeout)  \\n      {  \\n        Console.WriteLine(  \\n          \\\" - BabbleTimeout = {0}; InitialSilenceTimeout = {1}\\\",  \\n          e.BabbleTimeout, e.InitialSilenceTimeout);  \\n        return;  \\n      }  \\n      if (e.InputStreamEnded)  \\n      {  \\n        Console.WriteLine(  \\n          \\\" - AudioPosition = {0}; InputStreamEnded = {1}\\\",  \\n          e.AudioPosition, e.InputStreamEnded);  \\n      }  \\n      if (e.Result != null)  \\n      {  \\n        Console.WriteLine(  \\n          \\\" - Grammar = {0}; Text = {1}; Confidence = {2}\\\",  \\n          e.Result.Grammar.Name, e.Result.Text, e.Result.Confidence);  \\n      }  \\n      else  \\n      {  \\n        Console.WriteLine(\\\" - No result.\\\");  \\n      }  \\n  \\n      completed = true;  \\n    }  \\n  }  \\n}  \\n  \\n```\"\n  syntax:\n    content: public void RecognizeAsyncStop ();\n    parameters: []\n  overload: System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted\n  id: RecognizeCompleted\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  langs:\n  - csharp\n  name: RecognizeCompleted\n  nameWithType: SpeechRecognitionEngine.RecognizeCompleted\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted\n  type: Event\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Raised when the <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref> finalizes an asynchronous recognition operation.\n  remarks: \"The <xref:System.Speech.Recognition.SpeechRecognitionEngine> object's <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> method initiates an asynchronous recognition operation. When the recognizer finalizes the asynchronous operation, it raises this event.  \\n  \\n Using the handler for the RecognizeCompleted event, you can access the <xref:System.Speech.Recognition.RecognitionResult> in the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> object. If recognition was not successful, <xref:System.Speech.Recognition.RecognitionResult> will be `null`. To determine whether a timeout or an interruption in audio input caused recognition to fail, you can access the properties for <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.BabbleTimeout%2A>, or <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InputStreamEnded%2A>.  \\n  \\n See the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> class for more information.  \\n  \\n To obtain details on the best rejected recognition candidates, attach a handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> event.  \\n  \\n When you create a RecognizeCompleted delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).\"\n  example:\n  - \"The following example recognizes phrases such as \\\"Display the list of artists in the jazz category\\\" or \\\"Display albums gospel\\\". The example uses a handler for the RecognizeCompleted event to display information about the results of recognition in the console.  \\n  \\n```  \\nusing System;  \\nusing System.Speech.Recognition;  \\n  \\nnamespace SampleRecognition  \\n{  \\n  class Program  \\n  {  \\n    static void Main(string[] args)  \\n  \\n    // Initialize an in-process speech recognition engine.  \\n    {  \\n      using (SpeechRecognitionEngine recognizer =  \\n         new SpeechRecognitionEngine())  \\n      {  \\n  \\n        //  Create lists of alternative choices.  \\n        Choices listTypes = new Choices(new string[] { \\\"albums\\\", \\\"artists\\\" });  \\n        Choices genres = new Choices(new string[] {   \\n          \\\"blues\\\", \\\"classical\\\", \\\"gospel\\\", \\\"jazz\\\", \\\"rock\\\" });  \\n  \\n        //  Create a GrammarBuilder object and assemble the grammar components.  \\n        GrammarBuilder mediaMenu = new GrammarBuilder(\\\"Display\\\");  \\n        mediaMenu.Append(\\\"the list of\\\", 0, 1);  \\n        mediaMenu.Append(listTypes);  \\n        mediaMenu.Append(\\\"in the\\\", 0, 1);  \\n        mediaMenu.Append(genres);  \\n        mediaMenu.Append(\\\"category.\\\", 0, 1);  \\n  \\n        //  Build a Grammar object from the GrammarBuilder.  \\n        Grammar mediaMenuGrammar = new Grammar(mediaMenu);  \\n        mediaMenuGrammar.Name = \\\"Media Chooser\\\";  \\n  \\n        // Attach event handlers.  \\n        recognizer.RecognizeCompleted +=  \\n          new EventHandler<RecognizeCompletedEventArgs>(recognizer_RecognizeCompleted);  \\n        recognizer.LoadGrammarCompleted +=   \\n          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  \\n  \\n        // Load the grammar object to the recognizer.  \\n        recognizer.LoadGrammarAsync(mediaMenuGrammar);  \\n  \\n        // Set the input to the recognizer.  \\n        recognizer.SetInputToDefaultAudioDevice();  \\n  \\n        // Start asynchronous, continuous recognition.  \\n        recognizer.RecognizeAsync();  \\n  \\n        // Keep the console window open.  \\n        Console.ReadLine();  \\n      }  \\n    }  \\n  \\n    // Handle the RecognizeCompleted event.  \\n    static void recognizer_RecognizeCompleted(object sender, RecognizeCompletedEventArgs e)  \\n    {  \\n      if (e.Error != null)  \\n      {  \\n        Console.WriteLine(  \\n          \\\"RecognizeCompleted, error occurred during recognition: {0}\\\", e.Error);  \\n        return;  \\n      }  \\n  \\n      if (e.InitialSilenceTimeout || e.BabbleTimeout)  \\n      {  \\n        Console.WriteLine(  \\n          \\\"RecognizeCompleted: BabbleTimeout({0}), InitialSilenceTimeout({1}).\\\",  \\n          e.BabbleTimeout, e.InitialSilenceTimeout);  \\n        return;  \\n      }  \\n  \\n      if (e.InputStreamEnded)  \\n      {  \\n        Console.WriteLine(  \\n          \\\"RecognizeCompleted: AudioPosition({0}), InputStreamEnded({1}).\\\",  \\n          e.AudioPosition, e.InputStreamEnded);  \\n      }  \\n  \\n      if (e.Result != null)  \\n      {  \\n        Console.WriteLine(\\\"RecognizeCompleted:\\\");  \\n        Console.WriteLine(\\\"  Grammar: \\\" + e.Result.Grammar.Name);  \\n        Console.WriteLine(\\\"  Recognized text: \\\" + e.Result.Text);  \\n        Console.WriteLine(\\\"  Confidence score: \\\" + e.Result.Confidence);  \\n        Console.WriteLine(\\\"  Audio position: \\\" + e.AudioPosition);  \\n      }  \\n  \\n      else  \\n      {  \\n        Console.WriteLine(\\\"RecognizeCompleted: No result.\\\");  \\n      }  \\n  \\n      Console.WriteLine();  \\n      Console.WriteLine(\\\"Press any key to exit...\\\");  \\n      Console.ReadKey();  \\n    }  \\n  \\n    // Handle the LoadGrammarCompleted event.  \\n    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\"Grammar loaded:  \\\" + e.Grammar.Name);  \\n    }  \\n  }  \\n}  \\n  \\n```\"\n  syntax:\n    content: public event EventHandler<System.Speech.Recognition.RecognizeCompletedEventArgs> RecognizeCompleted;\n    return:\n      type: System.EventHandler{System.Speech.Recognition.RecognizeCompletedEventArgs}\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition\n  id: RecognizerAudioPosition\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  langs:\n  - csharp\n  name: RecognizerAudioPosition\n  nameWithType: SpeechRecognitionEngine.RecognizerAudioPosition\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Gets the current location of the <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref> in the audio input that it is processing.\n  remarks: \"The audio position is specific to each speech recognizer. The zero value of an input stream is established when it is enabled.  \\n  \\n The RecognizerAudioPosition property references the <xref:System.Speech.Recognition.SpeechRecognitionEngine> object's position within its audio input. By contrast, the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> property references the input device's position in its generated audio stream. These positions can be different. For example, if the recognizer has received input for which it has not yet generated a recognition result then the value of the RecognizerAudioPosition property is less than the value of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> property.\"\n  syntax:\n    content: public TimeSpan RecognizerAudioPosition { get; }\n    return:\n      type: System.TimeSpan\n      description: The position of the recognizer in the audio input that it is processing.\n  overload: System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo\n  id: RecognizerInfo\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  langs:\n  - csharp\n  name: RecognizerInfo\n  nameWithType: SpeechRecognitionEngine.RecognizerInfo\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Gets information about the current instance of <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref>.\n  remarks: To get information about all of the installed speech recognizers for the current system, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> method.\n  example:\n  - \"The following example gets a partial list of data for the current in-process speech recognition engine. For more information, see <xref:System.Speech.Recognition.RecognizerInfo>.  \\n  \\n```  \\nusing System;  \\nusing System.Speech.Recognition;  \\n  \\nnamespace RecognitionEngine  \\n{  \\n  class Program  \\n  {  \\n    static void Main(string[] args)  \\n    {  \\n      using (SpeechRecognitionEngine recognizer = new SpeechRecognitionEngine())  \\n      {  \\n        Console.WriteLine(\\\"Information for the current speech recognition engine:\\\");  \\n        Console.WriteLine(\\\"  Name: {0}\\\", recognizer.RecognizerInfo.Name);  \\n        Console.WriteLine(\\\"  Culture: {0}\\\", recognizer.RecognizerInfo.Culture.ToString());  \\n        Console.WriteLine(\\\"  Description: {0}\\\", recognizer.RecognizerInfo.Description);  \\n      }  \\n  \\n      Console.WriteLine();  \\n      Console.WriteLine(\\\"Press any key to exit...\\\");  \\n      Console.ReadKey();  \\n    }  \\n  }  \\n}  \\n  \\n```\"\n  syntax:\n    content: public System.Speech.Recognition.RecognizerInfo RecognizerInfo { get; }\n    return:\n      type: System.Speech.Recognition.RecognizerInfo\n      description: Information about the current speech recognizer.\n  overload: System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached\n  id: RecognizerUpdateReached\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  langs:\n  - csharp\n  name: RecognizerUpdateReached\n  nameWithType: SpeechRecognitionEngine.RecognizerUpdateReached\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached\n  type: Event\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Raised when a running <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref> pauses to accept modifications.\n  remarks: \"Applications must use <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> to pause a running instance of <xref:System.Speech.Recognition.SpeechRecognitionEngine> before modifying its settings or its <xref:System.Speech.Recognition.Grammar> objects. The <xref:System.Speech.Recognition.SpeechRecognitionEngine> raises this event when it is ready to accept modifications.  \\n  \\n For example, while the <xref:System.Speech.Recognition.SpeechRecognitionEngine> is paused, you can load, unload, enable, and disable <xref:System.Speech.Recognition.Grammar> objects, and modify values for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> properties. For more information, see the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method.  \\n  \\n When you create a RecognizerUpdateReached delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).\"\n  example:\n  - \"The following example shows a console application that loads and unloads <xref:System.Speech.Recognition.Grammar> objects. The application uses the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method to request the speech recognition engine to pause so it can receive an update. The application then loads or unloads a <xref:System.Speech.Recognition.Grammar> object.  \\n  \\n At each update, a handler for RecognizerUpdateReached event writes the name and status of the currently loaded <xref:System.Speech.Recognition.Grammar> objects to the console. As grammars are loaded and unloaded, the application first recognizes the names of farm animals, then the names of farm animals and the names of fruits, then only the names of fruits.  \\n  \\n```  \\nusing System;  \\nusing System.Speech.Recognition;  \\nusing System.Collections.Generic;  \\nusing System.Threading;  \\n  \\nnamespace SampleRecognition  \\n{  \\n  class Program  \\n  {  \\n    private static SpeechRecognitionEngine recognizer;  \\n    public static void Main(string[] args)  \\n    {  \\n  \\n      // Initialize an in-process speech recognition engine and configure its input.  \\n      using (recognizer = new SpeechRecognitionEngine(new System.Globalization.CultureInfo(\\\"en-US\\\")))  \\n      {  \\n        recognizer.SetInputToDefaultAudioDevice();  \\n  \\n        // Create the first grammar - Farm.  \\n        Choices animals = new Choices(new string[] { \\\"cow\\\", \\\"pig\\\", \\\"goat\\\" });  \\n        GrammarBuilder farm = new GrammarBuilder(animals);  \\n        Grammar farmAnimals = new Grammar(farm);  \\n        farmAnimals.Name = \\\"Farm\\\";  \\n  \\n        // Create the second grammar - Fruit.  \\n        Choices fruit = new Choices(new string[] { \\\"apples\\\", \\\"peaches\\\", \\\"oranges\\\" });  \\n        GrammarBuilder favorite = new GrammarBuilder(fruit);  \\n        Grammar favoriteFruit = new Grammar(favorite);  \\n        favoriteFruit.Name = \\\"Fruit\\\";  \\n  \\n        // Attach event handlers.  \\n        recognizer.SpeechRecognized +=  \\n          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  \\n        recognizer.RecognizerUpdateReached +=  \\n          new EventHandler<RecognizerUpdateReachedEventArgs>(recognizer_RecognizerUpdateReached);  \\n        recognizer.SpeechRecognitionRejected +=  \\n          new EventHandler<SpeechRecognitionRejectedEventArgs>(recognizer_SpeechRecognitionRejected);  \\n  \\n        // Load the Farm grammar.  \\n        recognizer.LoadGrammar(farmAnimals);  \\n  \\n        // Start asynchronous, continuous recognition.  \\n        recognizer.RecognizeAsync(RecognizeMode.Multiple);  \\n        Console.WriteLine(\\\"Starting asynchronous, continuous recognition\\\");  \\n        Console.WriteLine(\\\"  Farm grammar is loaded and enabled.\\\");  \\n  \\n        // Pause to recognize farm animals.  \\n        Thread.Sleep(7000);  \\n        Console.WriteLine();  \\n  \\n        // Request an update and load the Fruit grammar.  \\n        recognizer.RequestRecognizerUpdate();  \\n        recognizer.LoadGrammarAsync(favoriteFruit);  \\n        Thread.Sleep(7000);  \\n  \\n        // Request an update and unload the Farm grammar.  \\n        recognizer.RequestRecognizerUpdate();  \\n        recognizer.UnloadGrammar(farmAnimals);  \\n        Thread.Sleep(7000);  \\n      }  \\n  \\n      // Keep the console window open.  \\n      Console.WriteLine();  \\n      Console.WriteLine(\\\"Press any key to exit...\\\");  \\n      Console.ReadKey();  \\n    }  \\n  \\n    // At the update, get the names and enabled status of the currently loaded grammars.  \\n    public static void recognizer_RecognizerUpdateReached(  \\n      object sender, RecognizerUpdateReachedEventArgs e)  \\n    {  \\n      Console.WriteLine();  \\n      Console.WriteLine(\\\"Update reached:\\\");  \\n      Thread.Sleep(1000);  \\n  \\n      string qualifier;  \\n      List<Grammar> grammars = new List<Grammar>(recognizer.Grammars);  \\n      foreach (Grammar g in grammars)  \\n      {  \\n        qualifier = (g.Enabled) ? \\\"enabled\\\" : \\\"disabled\\\";  \\n        Console.WriteLine(\\\"  {0} grammar is loaded and {1}.\\\",  \\n        g.Name, qualifier);  \\n      }  \\n    }  \\n  \\n    // Write the text of the recognized phrase to the console.  \\n    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\"    Speech recognized: \\\" + e.Result.Text);  \\n    }  \\n  \\n    // Write a message to the console when recognition fails.  \\n    static void recognizer_SpeechRecognitionRejected(object sender, SpeechRecognitionRejectedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\"    Recognition attempt failed\\\");  \\n    }  \\n  }  \\n}  \\n  \\n```\"\n  syntax:\n    content: public event EventHandler<System.Speech.Recognition.RecognizerUpdateReachedEventArgs> RecognizerUpdateReached;\n    return:\n      type: System.EventHandler{System.Speech.Recognition.RecognizerUpdateReachedEventArgs}\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate\n  id: RequestRecognizerUpdate\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  langs:\n  - csharp\n  name: RequestRecognizerUpdate()\n  nameWithType: SpeechRecognitionEngine.RequestRecognizerUpdate()\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate()\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Requests that the recognizer pauses to update its state.\n  remarks: \"When the recognizer generates the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event, the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> property of the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> is `null`.  \\n  \\n To provide a user token, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method. To specify an audio position offset, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method.\"\n  example:\n  - \"The following example shows a console application that loads and unloads <xref:System.Speech.Recognition.Grammar> objects. The application uses the RequestRecognizerUpdate method to request the speech recognition engine to pause so it can receive an update. The application then loads or unloads a <xref:System.Speech.Recognition.Grammar> object.  \\n  \\n At each update, a handler for <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event writes the name and status of the currently loaded <xref:System.Speech.Recognition.Grammar> objects to the console. As grammars are loaded and unloaded, the application first recognizes the names of farm animals, then the names of farm animals and the names of fruits, then only the names of fruits.  \\n  \\n```  \\nusing System;  \\nusing System.Speech.Recognition;  \\nusing System.Collections.Generic;  \\nusing System.Threading;  \\n  \\nnamespace SampleRecognition  \\n{  \\n  class Program  \\n  {  \\n    private static SpeechRecognitionEngine recognizer;  \\n    public static void Main(string[] args)  \\n    {  \\n  \\n      // Initialize an in-process speech recognition engine and configure its input.  \\n      using (recognizer = new SpeechRecognitionEngine(new System.Globalization.CultureInfo(\\\"en-US\\\")))  \\n      {  \\n        recognizer.SetInputToDefaultAudioDevice();  \\n  \\n        // Create the first grammar - Farm.  \\n        Choices animals = new Choices(new string[] { \\\"cow\\\", \\\"pig\\\", \\\"goat\\\" });  \\n        GrammarBuilder farm = new GrammarBuilder(animals);  \\n        Grammar farmAnimals = new Grammar(farm);  \\n        farmAnimals.Name = \\\"Farm\\\";  \\n  \\n        // Create the second grammar - Fruit.  \\n        Choices fruit = new Choices(new string[] { \\\"apples\\\", \\\"peaches\\\", \\\"oranges\\\" });  \\n        GrammarBuilder favorite = new GrammarBuilder(fruit);  \\n        Grammar favoriteFruit = new Grammar(favorite);  \\n        favoriteFruit.Name = \\\"Fruit\\\";  \\n  \\n        // Attach event handlers.  \\n        recognizer.SpeechRecognized +=  \\n          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  \\n        recognizer.RecognizerUpdateReached +=  \\n          new EventHandler<RecognizerUpdateReachedEventArgs>(recognizer_RecognizerUpdateReached);  \\n        recognizer.SpeechRecognitionRejected +=  \\n          new EventHandler<SpeechRecognitionRejectedEventArgs>(recognizer_SpeechRecognitionRejected);  \\n  \\n        // Load the Farm grammar.  \\n        recognizer.LoadGrammar(farmAnimals);  \\n  \\n        // Start asynchronous, continuous recognition.  \\n        recognizer.RecognizeAsync(RecognizeMode.Multiple);  \\n        Console.WriteLine(\\\"Starting asynchronous, continuous recognition\\\");  \\n        Console.WriteLine(\\\"  Farm grammar is loaded and enabled.\\\");  \\n  \\n        // Pause to recognize farm animals.  \\n        Thread.Sleep(7000);  \\n        Console.WriteLine();  \\n  \\n        // Request an update and load the Fruit grammar.  \\n        recognizer.RequestRecognizerUpdate();  \\n        recognizer.LoadGrammarAsync(favoriteFruit);  \\n        Thread.Sleep(7000);  \\n  \\n        // Request an update and unload the Farm grammar.  \\n        recognizer.RequestRecognizerUpdate();  \\n        recognizer.UnloadGrammar(farmAnimals);  \\n        Thread.Sleep(7000);  \\n      }  \\n  \\n      // Keep the console window open.  \\n      Console.WriteLine();  \\n      Console.WriteLine(\\\"Press any key to exit...\\\");  \\n      Console.ReadKey();  \\n    }  \\n  \\n    // At the update, get the names and enabled status of the currently loaded grammars.  \\n    public static void recognizer_RecognizerUpdateReached(  \\n      object sender, RecognizerUpdateReachedEventArgs e)  \\n    {  \\n      Console.WriteLine();  \\n      Console.WriteLine(\\\"Update reached:\\\");  \\n      Thread.Sleep(1000);  \\n  \\n      string qualifier;  \\n      List<Grammar> grammars = new List<Grammar>(recognizer.Grammars);  \\n      foreach (Grammar g in grammars)  \\n      {  \\n        qualifier = (g.Enabled) ? \\\"enabled\\\" : \\\"disabled\\\";  \\n        Console.WriteLine(\\\"  {0} grammar is loaded and {1}.\\\",  \\n        g.Name, qualifier);  \\n      }  \\n    }  \\n  \\n    // Write the text of the recognized phrase to the console.  \\n    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\"    Speech recognized: \\\" + e.Result.Text);  \\n    }  \\n  \\n    // Write a message to the console when recognition fails.  \\n    static void recognizer_SpeechRecognitionRejected(object sender, SpeechRecognitionRejectedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\"    Recognition attempt failed\\\");  \\n    }  \\n  }  \\n}  \\n  \\n```\"\n  syntax:\n    content: public void RequestRecognizerUpdate ();\n    parameters: []\n  overload: System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate(System.Object)\n  id: RequestRecognizerUpdate(System.Object)\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  langs:\n  - csharp\n  name: RequestRecognizerUpdate(Object)\n  nameWithType: SpeechRecognitionEngine.RequestRecognizerUpdate(Object)\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate(Object)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Requests that the recognizer pauses to update its state and provides a user token for the associated event.\n  remarks: \"When the recognizer generates the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event, the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> property of the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> contains the value of the `userToken` parameter.  \\n  \\n To specify an audio position offset, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method.\"\n  syntax:\n    content: public void RequestRecognizerUpdate (object userToken);\n    parameters:\n    - id: userToken\n      type: System.Object\n      description: User-defined information that contains information for the operation.\n  overload: System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate(System.Object,System.TimeSpan)\n  id: RequestRecognizerUpdate(System.Object,System.TimeSpan)\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  langs:\n  - csharp\n  name: RequestRecognizerUpdate(Object,TimeSpan)\n  nameWithType: SpeechRecognitionEngine.RequestRecognizerUpdate(Object,TimeSpan)\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate(Object,TimeSpan)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Requests that the recognizer pauses to update its state and provides an offset and a user token for the associated event.\n  remarks: \"The recognizer does not initiate the recognizer update request until the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> equals the current <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> plus `audioPositionAheadToRaiseUpdate`.  \\n  \\n When the recognizer generates the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event, the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> property of the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> contains the value of the `userToken` parameter.\"\n  syntax:\n    content: public void RequestRecognizerUpdate (object userToken, TimeSpan audioPositionAheadToRaiseUpdate);\n    parameters:\n    - id: userToken\n      type: System.Object\n      description: User-defined information that contains information for the operation.\n    - id: audioPositionAheadToRaiseUpdate\n      type: System.TimeSpan\n      description: The offset from the current <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition*> to delay the request.\n  overload: System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)\n  id: SetInputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  langs:\n  - csharp\n  name: SetInputToAudioStream(Stream,SpeechAudioFormatInfo)\n  nameWithType: SpeechRecognitionEngine.SetInputToAudioStream(Stream,SpeechAudioFormatInfo)\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream(Stream,SpeechAudioFormatInfo)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Configures the <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref> object to receive input from an audio stream.\n  remarks: If the recognizer reaches the end of the input stream during a recognition operation, the recognition operation finalizes with the available input. Any subsequent recognition operations can generate an exception, unless you update the input to the recognizer.\n  example:\n  - \"The following example shows part of a console application that demonstrates basic speech recognition. The example uses input from an audio file, example.wav, that contains the phrases, \\\"testing testing one two three\\\" and \\\"mister cooper\\\", separated by a pause. The example generates the following output.  \\n  \\n```  \\n  \\nStarting asynchronous recognition...  \\n  Recognized text =  Testing testing 123  \\n  Recognized text =  Mr. Cooper  \\n  End of stream encountered.  \\nDone.  \\n  \\nPress any key to exit...  \\n```  \\n  \\n```c#  \\n  \\nusing System;  \\nusing System.Globalization;  \\nusing System.IO;  \\nusing System.Speech.AudioFormat;  \\nusing System.Speech.Recognition;  \\nusing System.Threading;  \\n  \\nnamespace InputExamples  \\n{  \\n  class Program  \\n  {  \\n    // Indicate whether asynchronous recognition is complete.  \\n    static bool completed;  \\n  \\n    static void Main(string[] args)  \\n    {  \\n      using (SpeechRecognitionEngine recognizer =  \\n        new SpeechRecognitionEngine(new CultureInfo(\\\"en-US\\\")))  \\n      {  \\n  \\n        // Create and load a grammar.  \\n        Grammar dictation = new DictationGrammar();  \\n        dictation.Name = \\\"Dictation Grammar\\\";  \\n  \\n        recognizer.LoadGrammar(dictation);  \\n  \\n        // Configure the input to the recognizer.  \\n        recognizer.SetInputToAudioStream(  \\n          File.OpenRead(@\\\"c:\\\\temp\\\\audioinput\\\\example.wav\\\"),  \\n          new SpeechAudioFormatInfo(  \\n            44100, AudioBitsPerSample.Sixteen, AudioChannel.Mono));  \\n  \\n        // Attach event handlers.  \\n        recognizer.SpeechRecognized +=  \\n          new EventHandler<SpeechRecognizedEventArgs>(  \\n            SpeechRecognizedHandler);  \\n        recognizer.RecognizeCompleted +=  \\n          new EventHandler<RecognizeCompletedEventArgs>(  \\n            RecognizeCompletedHandler);  \\n  \\n        // Perform recognition of the whole file.  \\n        Console.WriteLine(\\\"Starting asynchronous recognition...\\\");  \\n        completed = false;  \\n        recognizer.RecognizeAsync(RecognizeMode.Multiple);  \\n  \\n        while (!completed)  \\n        {  \\n          Thread.Sleep(333);  \\n        }  \\n        Console.WriteLine(\\\"Done.\\\");  \\n      }  \\n  \\n      Console.WriteLine();  \\n      Console.WriteLine(\\\"Press any key to exit...\\\");  \\n      Console.ReadKey();  \\n    }  \\n  \\n    // Handle the SpeechRecognized event.  \\n    static void SpeechRecognizedHandler(  \\n      object sender, SpeechRecognizedEventArgs e)  \\n    {  \\n      if (e.Result != null && e.Result.Text != null)  \\n      {  \\n        Console.WriteLine(\\\"  Recognized text =  {0}\\\", e.Result.Text);  \\n      }  \\n      else  \\n      {  \\n        Console.WriteLine(\\\"  Recognized text not available.\\\");  \\n      }  \\n    }  \\n  \\n    // Handle the RecognizeCompleted event.  \\n    static void RecognizeCompletedHandler(  \\n      object sender, RecognizeCompletedEventArgs e)  \\n    {  \\n      if (e.Error != null)  \\n      {  \\n        Console.WriteLine(\\\"  Error encountered, {0}: {1}\\\",  \\n          e.Error.GetType().Name, e.Error.Message);  \\n      }  \\n      if (e.Cancelled)  \\n      {  \\n        Console.WriteLine(\\\"  Operation cancelled.\\\");  \\n      }  \\n      if (e.InputStreamEnded)  \\n      {  \\n        Console.WriteLine(\\\"  End of stream encountered.\\\");  \\n      }  \\n  \\n      completed = true;  \\n    }  \\n  }  \\n}  \\n  \\n```\"\n  syntax:\n    content: public void SetInputToAudioStream (System.IO.Stream audioSource, System.Speech.AudioFormat.SpeechAudioFormatInfo audioFormat);\n    parameters:\n    - id: audioSource\n      type: System.IO.Stream\n      description: The audio input stream.\n    - id: audioFormat\n      type: System.Speech.AudioFormat.SpeechAudioFormatInfo\n      description: The format of the audio input.\n  overload: System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice\n  id: SetInputToDefaultAudioDevice\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  langs:\n  - csharp\n  name: SetInputToDefaultAudioDevice()\n  nameWithType: SpeechRecognitionEngine.SetInputToDefaultAudioDevice()\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice()\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Configures the <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref> object to receive input from the default audio device.\n  remarks: ''\n  example:\n  - \"The following example shows part of a console application that demonstrates basic speech recognition. The example uses output from the default audio device, performs multiple, asynchronous recognition operations, and exits when a user utters the phrase, \\\"exit\\\".  \\n  \\n```c#  \\n  \\nusing System;  \\nusing System.Globalization;  \\nusing System.Speech.Recognition;  \\nusing System.Threading;  \\n  \\nnamespace DefaultInput  \\n{  \\n  class Program  \\n  {  \\n    // Indicate whether asynchronous recognition has finished.  \\n    static bool completed;  \\n  \\n    static void Main(string[] args)  \\n    {  \\n      using (SpeechRecognitionEngine recognizer =  \\n        new SpeechRecognitionEngine(new CultureInfo(\\\"en-US\\\")))  \\n      {  \\n  \\n        // Create and load the exit grammar.  \\n        Grammar exitGrammar = new Grammar(new GrammarBuilder(\\\"exit\\\"));  \\n        exitGrammar.Name = \\\"Exit Grammar\\\";  \\n        recognizer.LoadGrammar(exitGrammar);  \\n  \\n        // Create and load the dictation grammar.  \\n        Grammar dictation = new DictationGrammar();  \\n        dictation.Name = \\\"Dictation Grammar\\\";  \\n        recognizer.LoadGrammar(dictation);  \\n  \\n        // Attach event handlers to the recognizer.  \\n        recognizer.SpeechRecognized +=  \\n          new EventHandler<SpeechRecognizedEventArgs>(  \\n            SpeechRecognizedHandler);  \\n        recognizer.RecognizeCompleted +=  \\n          new EventHandler<RecognizeCompletedEventArgs>(  \\n            RecognizeCompletedHandler);  \\n  \\n        // Assign input to the recognizer.  \\n        recognizer.SetInputToDefaultAudioDevice();  \\n  \\n        // Begin asynchronous recognition.  \\n        Console.WriteLine(\\\"Starting recognition...\\\");  \\n        completed = false;  \\n        recognizer.RecognizeAsync(RecognizeMode.Multiple);  \\n  \\n        // Wait for recognition to finish.  \\n        while (!completed)  \\n        {  \\n          Thread.Sleep(333);  \\n        }  \\n        Console.WriteLine(\\\"Done.\\\");  \\n      }  \\n  \\n      Console.WriteLine();  \\n      Console.WriteLine(\\\"Press any key to exit...\\\");  \\n      Console.ReadKey();  \\n    }  \\n  \\n    static void SpeechRecognizedHandler(  \\n      object sender, SpeechRecognizedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\"  Speech recognized:\\\");  \\n      string grammarName = \\\"<not available>\\\";  \\n      if (e.Result.Grammar.Name != null &&  \\n        !e.Result.Grammar.Name.Equals(string.Empty))  \\n      {  \\n        grammarName = e.Result.Grammar.Name;  \\n      }  \\n      Console.WriteLine(\\\"    {0,-17} - {1}\\\",  \\n        grammarName, e.Result.Text);  \\n  \\n      if (grammarName.Equals(\\\"Exit Grammar\\\"))  \\n      {  \\n        ((SpeechRecognitionEngine)sender).RecognizeAsyncCancel();  \\n      }  \\n    }  \\n  \\n    static void RecognizeCompletedHandler(  \\n      object sender, RecognizeCompletedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\"  Recognition completed.\\\");  \\n      completed = true;  \\n    }  \\n  }  \\n}  \\n```\"\n  syntax:\n    content: public void SetInputToDefaultAudioDevice ();\n    parameters: []\n  overload: System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull\n  id: SetInputToNull\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  langs:\n  - csharp\n  name: SetInputToNull()\n  nameWithType: SpeechRecognitionEngine.SetInputToNull()\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull()\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Disables the input to the speech recognizer.\n  remarks: Configure the <xref:System.Speech.Recognition.SpeechRecognitionEngine> object for no input when using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods, or when taking a recognition engine temporarily off line.\n  syntax:\n    content: public void SetInputToNull ();\n    parameters: []\n  overload: System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile(System.String)\n  id: SetInputToWaveFile(System.String)\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  langs:\n  - csharp\n  name: SetInputToWaveFile(String)\n  nameWithType: SpeechRecognitionEngine.SetInputToWaveFile(String)\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile(String)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Configures the <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref> object to receive input from a Waveform audio format (.wav) file.\n  remarks: If the recognizer reaches the end of the input file during a recognition operation, the recognition operation finalizes with the available input. Any subsequent recognition operations can generate an exception, unless you update the input to the recognizer.\n  example:\n  - \"The following example performs recognition on the audio in a .wav file and writes the recognized text to the console.  \\n  \\n```  \\nusing System;  \\nusing System.IO;  \\nusing System.Speech.Recognition;  \\nusing System.Speech.AudioFormat;  \\n  \\nnamespace SampleRecognition  \\n{  \\n  class Program  \\n  {  \\n    static bool completed;  \\n  \\n    static void Main(string[] args)  \\n  \\n    // Initialize an in-process speech recognition engine.  \\n    {  \\n      using (SpeechRecognitionEngine recognizer =  \\n         new SpeechRecognitionEngine())  \\n      {  \\n  \\n        // Create and load a grammar.  \\n        Grammar dictation = new DictationGrammar();  \\n        dictation.Name = \\\"Dictation Grammar\\\";  \\n  \\n        recognizer.LoadGrammar(dictation);  \\n  \\n        // Configure the input to the recognizer.  \\nrecognizer.SetInputToWaveFile(@\\\"c:\\\\temp\\\\SampleWAVInput.wav\\\");  \\n  \\n        // Attach event handlers for the results of recognition.  \\n        recognizer.SpeechRecognized +=   \\n          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  \\n        recognizer.RecognizeCompleted +=   \\n          new EventHandler<RecognizeCompletedEventArgs>(recognizer_RecognizeCompleted);  \\n  \\n        // Perform recognition on the entire file.  \\n        Console.WriteLine(\\\"Starting asynchronous recognition...\\\");  \\n        completed = false;  \\n        recognizer.RecognizeAsync();  \\n  \\n        // Keep the console window open.  \\n        while (!completed)  \\n        {  \\n          Console.ReadLine();  \\n        }  \\n        Console.WriteLine(\\\"Done.\\\");  \\n      }  \\n  \\n      Console.WriteLine();  \\n      Console.WriteLine(\\\"Press any key to exit...\\\");  \\n      Console.ReadKey();  \\n    }  \\n  \\n    // Handle the SpeechRecognized event.  \\n    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  \\n    {  \\n      if (e.Result != null && e.Result.Text != null)  \\n      {  \\n        Console.WriteLine(\\\"  Recognized text =  {0}\\\", e.Result.Text);  \\n      }  \\n      else  \\n      {  \\n        Console.WriteLine(\\\"  Recognized text not available.\\\");  \\n      }  \\n    }  \\n  \\n    // Handle the RecognizeCompleted event.  \\n    static void recognizer_RecognizeCompleted(object sender, RecognizeCompletedEventArgs e)  \\n    {  \\n      if (e.Error != null)  \\n      {  \\n        Console.WriteLine(\\\"  Error encountered, {0}: {1}\\\",  \\n        e.Error.GetType().Name, e.Error.Message);  \\n      }  \\n      if (e.Cancelled)  \\n      {  \\n        Console.WriteLine(\\\"  Operation cancelled.\\\");  \\n      }  \\n      if (e.InputStreamEnded)  \\n      {  \\n        Console.WriteLine(\\\"  End of stream encountered.\\\");  \\n      }  \\n      completed = true;  \\n    }  \\n  }  \\n}  \\n  \\n```\"\n  syntax:\n    content: public void SetInputToWaveFile (string path);\n    parameters:\n    - id: path\n      type: System.String\n      description: The path of the file to use as input.\n  overload: System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream(System.IO.Stream)\n  id: SetInputToWaveStream(System.IO.Stream)\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  langs:\n  - csharp\n  name: SetInputToWaveStream(Stream)\n  nameWithType: SpeechRecognitionEngine.SetInputToWaveStream(Stream)\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream(Stream)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Configures the <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref> object to receive input from a stream that contains Waveform audio format (.wav) data.\n  remarks: If the recognizer reaches the end of the input stream during a recognition operation, the recognition operation finalizes with the available input. Any subsequent recognition operations can generate an exception, unless you update the input to the recognizer.\n  syntax:\n    content: public void SetInputToWaveStream (System.IO.Stream audioSource);\n    parameters:\n    - id: audioSource\n      type: System.IO.Stream\n      description: The stream containing the audio data.\n  overload: System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected\n  id: SpeechDetected\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  langs:\n  - csharp\n  name: SpeechDetected\n  nameWithType: SpeechRecognitionEngine.SpeechDetected\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected\n  type: Event\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Raised when the <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref> detects input that it can identify as speech.\n  remarks: \"Each speech recognizer has an algorithm to distinguish between silence and speech. When the <xref:System.Speech.Recognition.SpeechRecognitionEngine> performs a speech recognition operation, it raises the SpeechDetected event when its algorithm identifies the input as speech. The <xref:System.Speech.Recognition.SpeechDetectedEventArgs.AudioPosition%2A> property of the associated <xref:System.Speech.Recognition.SpeechDetectedEventArgs> object indicates location in the input stream where the recognizer detected speech. The <xref:System.Speech.Recognition.SpeechRecognitionEngine> raises the SpeechDetected event before it raises any of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>, or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> events.  \\n  \\n For more information see the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods.  \\n  \\n When you create a SpeechDetected delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).\"\n  example:\n  - \"The following example is part of a console application for choosing origin and destination cities for a flight. The application recognizes phrases such as \\\"I want to fly from Miami to Chicago.\\\"  The example uses the SpeechDetected event to report the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> each time speech is detected.  \\n  \\n```  \\nusing System;  \\nusing System.Speech.Recognition;  \\n  \\nnamespace SampleRecognition  \\n{  \\n  class Program  \\n  {  \\n    static void Main(string[] args)  \\n  \\n    // Initialize an in-process speech recognition engine.  \\n    {  \\n      using (SpeechRecognitionEngine recognizer =  \\n         new SpeechRecognitionEngine())  \\n      {  \\n  \\n        // Create a grammar.  \\n        Choices cities = new Choices(new string[] {   \\n          \\\"Los Angeles\\\", \\\"New York\\\", \\\"Chicago\\\", \\\"San Francisco\\\", \\\"Miami\\\", \\\"Dallas\\\" });  \\n  \\n        GrammarBuilder gb = new GrammarBuilder();  \\n        gb.Append(\\\"I would like to fly from\\\");  \\n        gb.Append(cities);  \\n        gb.Append(\\\"to\\\");  \\n        gb.Append(cities);  \\n  \\n        // Create a Grammar object and load it to the recognizer.  \\n        Grammar g = new Grammar(gb);  \\n        g.Name = (\\\"City Chooser\\\");  \\n        recognizer.LoadGrammarAsync(g);  \\n  \\n        // Attach event handlers.  \\n        recognizer.LoadGrammarCompleted +=  \\n          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  \\n        recognizer.SpeechDetected +=  \\n          new EventHandler<SpeechDetectedEventArgs>(recognizer_SpeechDetected);  \\n        recognizer.SpeechRecognized +=  \\n          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  \\n  \\n        // Set the input to the recognizer.  \\n        recognizer.SetInputToDefaultAudioDevice();  \\n  \\n        // Start recognition.  \\n        recognizer.RecognizeAsync();  \\n  \\n        // Keep the console window open.  \\n        Console.ReadLine();  \\n      }  \\n    }  \\n  \\n    // Handle the SpeechDetected event.  \\n    static void recognizer_SpeechDetected(object sender, SpeechDetectedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\"  Speech detected at AudioPosition = {0}\\\", e.AudioPosition);  \\n    }  \\n  \\n    // Handle the LoadGrammarCompleted event.  \\n    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\"Grammar loaded: \\\" + e.Grammar.Name);  \\n    }  \\n  \\n    // Handle the SpeechRecognized event.  \\n    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\"  Speech recognized: \\\" + e.Result.Text);  \\n    }  \\n  }  \\n}  \\n  \\n```\"\n  syntax:\n    content: public event EventHandler<System.Speech.Recognition.SpeechDetectedEventArgs> SpeechDetected;\n    return:\n      type: System.EventHandler{System.Speech.Recognition.SpeechDetectedEventArgs}\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized\n  id: SpeechHypothesized\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  langs:\n  - csharp\n  name: SpeechHypothesized\n  nameWithType: SpeechRecognitionEngine.SpeechHypothesized\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized\n  type: Event\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Raised when the <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref> has recognized a word or words that may be a component of multiple complete phrases in a grammar.\n  remarks: \"The <xref:System.Speech.Recognition.SpeechRecognitionEngine> generates numerous SpeechHypothesized events as it attempts to identify an input phrase. You can access the text of partially recognized phrases in the <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> property of the <xref:System.Speech.Recognition.SpeechHypothesizedEventArgs> object in the handler for the SpeechHypothesized event. Typically, handling these events is useful only for debugging.  \\n  \\n <xref:System.Speech.Recognition.SpeechHypothesizedEventArgs> derives from <xref:System.Speech.Recognition.RecognitionEventArgs>.  \\n  \\n For more information see the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> property and the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods.  \\n  \\n When you create a SpeechHypothesized delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).\"\n  example:\n  - \"The following example recognizes phrases such as \\\"Display the list of artists in the jazz category\\\". The example uses the SpeechHypothesized event to display incomplete phrase fragments in the console as they are recognized.  \\n  \\n```  \\nusing System;  \\nusing System.Speech.Recognition;  \\n  \\nnamespace SampleRecognition  \\n{  \\n  class Program  \\n  {  \\n    static void Main(string[] args)  \\n  \\n    // Initialize an in-process speech recognition engine.  \\n    {  \\n      using (SpeechRecognitionEngine recognizer =  \\n         new SpeechRecognitionEngine())  \\n      {  \\n  \\n        // Create a grammar.  \\n        //  Create lists of alternative choices.  \\n        Choices listTypes = new Choices(new string[] { \\\"albums\\\", \\\"artists\\\" });  \\n        Choices genres = new Choices(new string[] {   \\n          \\\"blues\\\", \\\"classical\\\", \\\"gospel\\\", \\\"jazz\\\", \\\"rock\\\" });  \\n  \\n        //  Create a GrammarBuilder object and assemble the grammar components.  \\n        GrammarBuilder mediaMenu = new GrammarBuilder(\\\"Display the list of\\\");  \\n        mediaMenu.Append(listTypes);  \\n        mediaMenu.Append(\\\"in the\\\");  \\n        mediaMenu.Append(genres);  \\n        mediaMenu.Append(\\\"category.\\\");  \\n  \\n        //  Build a Grammar object from the GrammarBuilder.  \\n        Grammar mediaMenuGrammar = new Grammar(mediaMenu);  \\n        mediaMenuGrammar.Name = \\\"Media Chooser\\\";  \\n  \\n        // Attach event handlers.  \\n        recognizer.LoadGrammarCompleted +=  \\n          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  \\n        recognizer.SpeechRecognized +=  \\n          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  \\n        recognizer.SpeechHypothesized +=  \\n          new EventHandler<SpeechHypothesizedEventArgs>(recognizer_SpeechHypothesized);  \\n  \\n        // Load the grammar object to the recognizer.  \\n        recognizer.LoadGrammarAsync(mediaMenuGrammar);  \\n  \\n        // Set the input to the recognizer.  \\n        recognizer.SetInputToDefaultAudioDevice();  \\n  \\n        // Start asynchronous recognition.  \\n        recognizer.RecognizeAsync();  \\n  \\n        // Keep the console window open.  \\n        Console.ReadLine();  \\n      }  \\n    }  \\n  \\n    // Handle the SpeechHypothesized event.  \\n    static void recognizer_SpeechHypothesized(object sender, SpeechHypothesizedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\"Speech hypothesized: \\\" + e.Result.Text);  \\n    }  \\n  \\n    // Handle the LoadGrammarCompleted event.  \\n    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\"Grammar loaded: \\\" + e.Grammar.Name);  \\n      Console.WriteLine();  \\n    }  \\n  \\n    // Handle the SpeechRecognized event.  \\n    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  \\n    {  \\n      Console.WriteLine();   \\n      Console.WriteLine(\\\"Speech recognized: \\\" + e.Result.Text);  \\n    }  \\n  }  \\n}  \\n  \\n```\"\n  syntax:\n    content: public event EventHandler<System.Speech.Recognition.SpeechHypothesizedEventArgs> SpeechHypothesized;\n    return:\n      type: System.EventHandler{System.Speech.Recognition.SpeechHypothesizedEventArgs}\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected\n  id: SpeechRecognitionRejected\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  langs:\n  - csharp\n  name: SpeechRecognitionRejected\n  nameWithType: SpeechRecognitionEngine.SpeechRecognitionRejected\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected\n  type: Event\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Raised when the <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref> receives input that does not match any of its loaded and enabled <xref href=\"System.Speech.Recognition.Grammar\"></xref> objects.\n  remarks: \"The recognizer raises this event if it determines that input does not match with sufficient confidence any of its loaded and enabled <xref:System.Speech.Recognition.Grammar> objects. The <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> property of the <xref:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs> contains the rejected <xref:System.Speech.Recognition.RecognitionResult> object. You can use the handler for the SpeechRecognitionRejected event to retrieve recognition <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> that were rejected and their <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> scores.  \\n  \\n If your application is using a <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance, you can modify the confidence level at which speech input is accepted or rejected with one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> methods. You can modify how the speech recognition responds to non-speech input using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> properties.  \\n  \\n When you create a SpeechRecognitionRejected delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).\"\n  example:\n  - \"The following example recognizes phrases such as \\\"Display the list of artists in the jazz category\\\" or \\\"Display albums gospel\\\". The example uses a handler for the SpeechRecognitionRejected event to display a notification in the console when the speech input cannot be matched to the contents of the grammar with sufficient <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> to produce a successful recognition. The handler also displays recognition result <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> that were rejected because of low confidence scores.  \\n  \\n```  \\nusing System;  \\nusing System.Speech.Recognition;  \\n  \\nnamespace SampleRecognition  \\n{  \\n  class Program  \\n  {  \\n    static void Main(string[] args)  \\n  \\n    // Initialize an in-process speech recognition engine.  \\n    {  \\n      using (SpeechRecognitionEngine recognizer =  \\n         new SpeechRecognitionEngine(new System.Globalization.CultureInfo(\\\"en-US\\\")))  \\n      {  \\n  \\n        // Create a grammar.  \\n        //  Create lists of alternative choices.  \\n        Choices listTypes = new Choices(new string[] { \\\"albums\\\", \\\"artists\\\" });  \\n        Choices genres = new Choices(new string[] {   \\n          \\\"blues\\\", \\\"classical\\\", \\\"gospel\\\", \\\"jazz\\\", \\\"rock\\\" });  \\n  \\n        //  Create a GrammarBuilder object and assemble the grammar components.  \\n        GrammarBuilder mediaMenu = new GrammarBuilder(\\\"Display\\\");  \\n        mediaMenu.Append(\\\"the list of\\\", 0, 1);  \\n        mediaMenu.Append(listTypes);  \\n        mediaMenu.Append(\\\"in the\\\", 0, 1);  \\n        mediaMenu.Append(genres);  \\n        mediaMenu.Append(\\\"category\\\", 0, 1);  \\n  \\n        //  Build a Grammar object from the GrammarBuilder.  \\n        Grammar mediaMenuGrammar = new Grammar(mediaMenu);  \\n        mediaMenuGrammar.Name = \\\"Media Chooser\\\";  \\n  \\n        // Attach event handlers.  \\n        recognizer.LoadGrammarCompleted +=  \\n          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  \\n        recognizer.SpeechRecognized +=  \\n          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  \\n        recognizer.SpeechRecognitionRejected +=  \\n          new EventHandler<SpeechRecognitionRejectedEventArgs>(recognizer_SpeechRecognitionRejected);  \\n  \\n        // Load the grammar object to the recognizer.  \\n        recognizer.LoadGrammarAsync(mediaMenuGrammar);  \\n  \\n        // Set the input to the recognizer.  \\n        recognizer.SetInputToDefaultAudioDevice();  \\n  \\n        // Start recognition.  \\n        recognizer.RecognizeAsync(RecognizeMode.Multiple);  \\n  \\n        // Keep the console window open.  \\n        Console.ReadLine();  \\n      }  \\n    }  \\n  \\n    // Handle the SpeechRecognitionRejected event.  \\n    static void recognizer_SpeechRecognitionRejected(object sender, SpeechRecognitionRejectedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\"Speech input was rejected.\\\");  \\n      foreach (RecognizedPhrase phrase in e.Result.Alternates)  \\n      {  \\n      Console.WriteLine(\\\"  Rejected phrase: \\\" + phrase.Text);  \\n      Console.WriteLine(\\\"  Confidence score: \\\" + phrase.Confidence);  \\n      }  \\n    }  \\n  \\n    // Handle the LoadGrammarCompleted event.  \\n    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\"Grammar loaded: \\\" + e.Grammar.Name);  \\n    }  \\n  \\n    // Handle the SpeechRecognized event.  \\n    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\"Speech recognized: \\\" + e.Result.Text);  \\n      Console.WriteLine(\\\"  Confidence score: \\\" + e.Result.Confidence);  \\n    }  \\n  }  \\n}  \\n  \\n```\"\n  syntax:\n    content: public event EventHandler<System.Speech.Recognition.SpeechRecognitionRejectedEventArgs> SpeechRecognitionRejected;\n    return:\n      type: System.EventHandler{System.Speech.Recognition.SpeechRecognitionRejectedEventArgs}\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized\n  id: SpeechRecognized\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  langs:\n  - csharp\n  name: SpeechRecognized\n  nameWithType: SpeechRecognitionEngine.SpeechRecognized\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized\n  type: Event\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Raised when the <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref> receives input that matches any of its loaded and enabled <xref href=\"System.Speech.Recognition.Grammar\"></xref> objects.\n  remarks: \"You can initiate a recognition operation using the one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> methods. The recognizer raises the SpeechRecognized event if it determines that input matches one of its loaded <xref:System.Speech.Recognition.Grammar> objects with a sufficient level of confidence to constitute recognition. The <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> property of the <xref:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs> contains the accepted <xref:System.Speech.Recognition.RecognitionResult> object. Handlers of SpeechRecognized events can obtain the recognized phrase as well as a list of recognition <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> with lower confidence scores.  \\n  \\n If your application is using a <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance, you can modify the confidence level at which speech input is accepted or rejected with one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> methods.  You can modify how the speech recognition responds to non-speech input using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> properties.  \\n  \\n When the recognizer receives input that matches a grammar, the <xref:System.Speech.Recognition.Grammar> object can raise its <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event. The <xref:System.Speech.Recognition.Grammar> object's <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event is raised prior to the speech recognizer's SpeechRecognized event. Any tasks specific to a particular grammar should always be performed by a handler for the <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event.  \\n  \\n When you create a SpeechRecognized delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).\"\n  example:\n  - \"The following example is part of a console application that creates speech recognition grammar, constructs a <xref:System.Speech.Recognition.Grammar> object, and loads it into the <xref:System.Speech.Recognition.SpeechRecognitionEngine> to perform recognition. The example demonstrates speech input to a <xref:System.Speech.Recognition.SpeechRecognitionEngine>, the associated recognition results, and the associated events raised by the speech recognizer.  \\n  \\n Spoken input such as \\\"I want to fly from Chicago to Miami\\\" will trigger a SpeechRecognized event. Speaking the phrase \\\"Fly me from Houston to Chicago \\\" will not trigger a SpeechRecognized event.  \\n  \\n The example uses a handler for the SpeechRecognized event to display successfully recognized phrases and the semantics they contain in the console.  \\n  \\n```  \\nusing System;  \\nusing System.Speech.Recognition;  \\n  \\nnamespace SampleRecognition  \\n{  \\n  class Program  \\n  {  \\n    static void Main(string[] args)  \\n  \\n    // Initialize an in-process speech recognition engine.  \\n    {  \\n      using (SpeechRecognitionEngine recognizer = new SpeechRecognitionEngine())  \\n      {  \\n  \\n        // Create SemanticResultValue objects that contain cities and airport codes.  \\n        SemanticResultValue chicago = new SemanticResultValue(\\\"Chicago\\\", \\\"ORD\\\");  \\n        SemanticResultValue boston = new SemanticResultValue(\\\"Boston\\\", \\\"BOS\\\");  \\n        SemanticResultValue miami = new SemanticResultValue(\\\"Miami\\\", \\\"MIA\\\");  \\n        SemanticResultValue dallas = new SemanticResultValue(\\\"Dallas\\\", \\\"DFW\\\");  \\n  \\n        // Create a Choices object and add the SemanticResultValue objects, using  \\n        // implicit conversion from SemanticResultValue to GrammarBuilder  \\n        Choices cities = new Choices();  \\n        cities.Add(new Choices(new GrammarBuilder[] { chicago, boston, miami, dallas }));  \\n  \\n        // Build the phrase and add SemanticResultKeys.  \\n        GrammarBuilder chooseCities = new GrammarBuilder();  \\n        chooseCities.Append(\\\"I want to fly from\\\");  \\n        chooseCities.Append(new SemanticResultKey(\\\"origin\\\", cities));  \\n        chooseCities.Append(\\\"to\\\");  \\n        chooseCities.Append(new SemanticResultKey(\\\"destination\\\", cities));  \\n  \\n        // Build a Grammar object from the GrammarBuilder.  \\n        Grammar bookFlight = new Grammar(chooseCities);  \\n        bookFlight.Name = \\\"Book Flight\\\";  \\n  \\n        // Add a handler for the LoadGrammarCompleted event.  \\n        recognizer.LoadGrammarCompleted +=  \\n          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  \\n  \\n        // Add a handler for the SpeechRecognized event.  \\n        recognizer.SpeechRecognized +=  \\n          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  \\n  \\n        // Load the grammar object to the recognizer.  \\n        recognizer.LoadGrammarAsync(bookFlight);  \\n  \\n        // Set the input to the recognizer.  \\n        recognizer.SetInputToDefaultAudioDevice();  \\n  \\n        // Start recognition.  \\n        recognizer.RecognizeAsync();  \\n  \\n        // Keep the console window open.  \\n        Console.ReadLine();  \\n      }  \\n    }  \\n  \\n    // Handle the LoadGrammarCompleted event.  \\n    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\"Grammar loaded: \\\" + e.Grammar.Name);  \\n      Console.WriteLine();  \\n    }  \\n  \\n    // Handle the SpeechRecognized event.  \\n    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  \\n    {  \\n      Console.WriteLine(\\\"Speech recognized:  \\\" + e.Result.Text);  \\n      Console.WriteLine();  \\n      Console.WriteLine(\\\"Semantic results:\\\");  \\n      Console.WriteLine(\\\"  The flight origin is \\\" + e.Result.Semantics[\\\"origin\\\"].Value);  \\n      Console.WriteLine(\\\"  The flight destination is \\\" + e.Result.Semantics[\\\"destination\\\"].Value);  \\n    }  \\n  }  \\n}  \\n  \\n```\"\n  syntax:\n    content: public event EventHandler<System.Speech.Recognition.SpeechRecognizedEventArgs> SpeechRecognized;\n    return:\n      type: System.EventHandler{System.Speech.Recognition.SpeechRecognizedEventArgs}\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars\n  id: UnloadAllGrammars\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  langs:\n  - csharp\n  name: UnloadAllGrammars()\n  nameWithType: SpeechRecognitionEngine.UnloadAllGrammars()\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars()\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Unloads all <xref href=\"System.Speech.Recognition.Grammar\"></xref> objects from the recognizer.\n  remarks: \"If the recognizer is currently loading a <xref:System.Speech.Recognition.Grammar> asynchronously, this method waits until the <xref:System.Speech.Recognition.Grammar> is loaded, before it unloads all of the <xref:System.Speech.Recognition.Grammar> objects from the <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance.  \\n  \\n To unload a specific grammar, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar%2A> method.\"\n  example:\n  - \"The following example shows part of a console application that demonstrates the synchronous loading and unloading of speech recognition grammars.  \\n  \\n```  \\nLoading grammars...  \\nLoaded grammars:  \\n - Grammar1  \\n - Grammar2  \\n - Grammar3  \\n  \\nUnloading Grammar1...  \\nLoaded grammars:  \\n - Grammar2  \\n - Grammar3  \\n  \\nUnloading all grammars...  \\nNo grammars loaded.  \\n  \\nPress any key to exit...  \\n```  \\n  \\n```c#  \\n  \\nusing System;  \\nusing System.Collections.Generic;  \\nusing System.Globalization;  \\nusing System.Speech.Recognition;  \\n  \\nnamespace UnloadGrammars  \\n{  \\n  class Program  \\n  {  \\n    static void Main(string[] args)  \\n    {  \\n      using (SpeechRecognitionEngine recognizer =  \\n        new SpeechRecognitionEngine(new CultureInfo(\\\"en-US\\\")))  \\n      {  \\n        Console.WriteLine(\\\"Loading grammars...\\\");  \\n  \\n        // Create and load a number of grammars.  \\n        Grammar grammar1 = new Grammar(new GrammarBuilder(\\\"first grammar\\\"));  \\n        grammar1.Name = \\\"Grammar1\\\";  \\n        recognizer.LoadGrammar(grammar1);  \\n  \\n        Grammar grammar2 = new Grammar(new GrammarBuilder(\\\"second grammar\\\"));  \\n        grammar2.Name = \\\"Grammar2\\\";  \\n        recognizer.LoadGrammar(grammar2);  \\n  \\n        Grammar grammar3 = new Grammar(new GrammarBuilder(\\\"third grammar\\\"));  \\n        grammar3.Name = \\\"Grammar3\\\";  \\n        recognizer.LoadGrammar(grammar3);  \\n  \\n        // List the recognizer's loaded grammars.  \\n        ListGrammars(recognizer);  \\n  \\n        // Unload one grammar and list the loaded grammars.  \\n        Console.WriteLine(\\\"Unloading Grammar1...\\\");  \\n        recognizer.UnloadGrammar(grammar1);  \\n        ListGrammars(recognizer);  \\n  \\n        // Unload all grammars and list the loaded grammars.  \\n        Console.WriteLine(\\\"Unloading all grammars...\\\");  \\n        recognizer.UnloadAllGrammars();  \\n        ListGrammars(recognizer);  \\n      }  \\n  \\n      Console.WriteLine(\\\"Press any key to exit...\\\");  \\n      Console.ReadKey();  \\n    }  \\n  \\n    private static void ListGrammars(SpeechRecognitionEngine recognizer)  \\n    {  \\n      // Make a copy of the recognizer's grammar collection.  \\n      List<Grammar> loadedGrammars = new List<Grammar>(recognizer.Grammars);  \\n  \\n      if (loadedGrammars.Count > 0)  \\n      {  \\n        Console.WriteLine(\\\"Loaded grammars:\\\");  \\n        foreach (Grammar g in recognizer.Grammars)  \\n        {  \\n          Console.WriteLine(\\\" - {0}\\\", g.Name);  \\n        }  \\n      }  \\n      else  \\n      {  \\n        Console.WriteLine(\\\"No grammars loaded.\\\");  \\n      }  \\n      Console.WriteLine();  \\n    }  \\n  }  \\n}  \\n```\"\n  syntax:\n    content: public void UnloadAllGrammars ();\n    parameters: []\n  overload: System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar(System.Speech.Recognition.Grammar)\n  id: UnloadGrammar(System.Speech.Recognition.Grammar)\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  langs:\n  - csharp\n  name: UnloadGrammar(Grammar)\n  nameWithType: SpeechRecognitionEngine.UnloadGrammar(Grammar)\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar(Grammar)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Unloads a specified <xref href=\"System.Speech.Recognition.Grammar\"></xref> object from the <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref> instance.\n  remarks: If the recognizer is running, applications must use <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> to pause the <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance before loading, unloading,  enabling, or disabling a <xref:System.Speech.Recognition.Grammar> object. To unload all <xref:System.Speech.Recognition.Grammar> objects, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars%2A> method.\n  example:\n  - \"The following example shows part of a console application that demonstrates the synchronous loading and unloading of speech recognition grammars.  \\n  \\n```  \\nLoading grammars...  \\nLoaded grammars:  \\n - Grammar1  \\n - Grammar2  \\n - Grammar3  \\n  \\nUnloading Grammar1...  \\nLoaded grammars:  \\n - Grammar2  \\n - Grammar3  \\n  \\nUnloading all grammars...  \\nNo grammars loaded.  \\n  \\nPress any key to exit...  \\n```  \\n  \\n```c#  \\n  \\nusing System;  \\nusing System.Collections.Generic;  \\nusing System.Globalization;  \\nusing System.Speech.Recognition;  \\n  \\nnamespace UnloadGrammars  \\n{  \\n  class Program  \\n  {  \\n    static void Main(string[] args)  \\n    {  \\n      using (SpeechRecognitionEngine recognizer =  \\n        new SpeechRecognitionEngine(new CultureInfo(\\\"en-US\\\")))  \\n      {  \\n        Console.WriteLine(\\\"Loading grammars...\\\");  \\n  \\n        // Create and load a number of grammars.  \\n        Grammar grammar1 = new Grammar(new GrammarBuilder(\\\"first grammar\\\"));  \\n        grammar1.Name = \\\"Grammar1\\\";  \\n        recognizer.LoadGrammar(grammar1);  \\n  \\n        Grammar grammar2 = new Grammar(new GrammarBuilder(\\\"second grammar\\\"));  \\n        grammar2.Name = \\\"Grammar2\\\";  \\n        recognizer.LoadGrammar(grammar2);  \\n  \\n        Grammar grammar3 = new Grammar(new GrammarBuilder(\\\"third grammar\\\"));  \\n        grammar3.Name = \\\"Grammar3\\\";  \\n        recognizer.LoadGrammar(grammar3);  \\n  \\n        // List the recognizer's loaded grammars.  \\n        ListGrammars(recognizer);  \\n  \\n        // Unload one grammar and list the loaded grammars.  \\n        Console.WriteLine(\\\"Unloading Grammar1...\\\");  \\n        recognizer.UnloadGrammar(grammar1);  \\n        ListGrammars(recognizer);  \\n  \\n        // Unload all grammars and list the loaded grammars.  \\n        Console.WriteLine(\\\"Unloading all grammars...\\\");  \\n        recognizer.UnloadAllGrammars();  \\n        ListGrammars(recognizer);  \\n      }  \\n  \\n      Console.WriteLine(\\\"Press any key to exit...\\\");  \\n      Console.ReadKey();  \\n    }  \\n  \\n    private static void ListGrammars(SpeechRecognitionEngine recognizer)  \\n    {  \\n      // Make a copy of the recognizer's grammar collection.  \\n      List<Grammar> loadedGrammars = new List<Grammar>(recognizer.Grammars);  \\n  \\n      if (loadedGrammars.Count > 0)  \\n      {  \\n        Console.WriteLine(\\\"Loaded grammars:\\\");  \\n        foreach (Grammar g in recognizer.Grammars)  \\n        {  \\n          Console.WriteLine(\\\" - {0}\\\", g.Name);  \\n        }  \\n      }  \\n      else  \\n      {  \\n        Console.WriteLine(\\\"No grammars loaded.\\\");  \\n      }  \\n      Console.WriteLine();  \\n    }  \\n  }  \\n}  \\n```\"\n  syntax:\n    content: public void UnloadGrammar (System.Speech.Recognition.Grammar grammar);\n    parameters:\n    - id: grammar\n      type: System.Speech.Recognition.Grammar\n      description: The grammar object to unload.\n  overload: System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>Grammar</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The grammar is not loaded in this recognizer, or this recognizer is currently loading the grammar asynchronously.\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting(System.String,System.Int32)\n  id: UpdateRecognizerSetting(System.String,System.Int32)\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  langs:\n  - csharp\n  name: UpdateRecognizerSetting(String,Int32)\n  nameWithType: SpeechRecognitionEngine.UpdateRecognizerSetting(String,Int32)\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting(String,Int32)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Updates the specified setting for the <xref href=\"System.Speech.Recognition.SpeechRecognitionEngine\"></xref> with the specified integer value.\n  remarks: With the exception of `PersistedBackgroundAdaptation`, property values set using the UpdateRecognizerSetting method remain in effect only for the current instance of <xref:System.Speech.Recognition.SpeechRecognitionEngine>, after which they revert to their default settings. See <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> for descriptions of supported settings.\n  example:\n  - \"The following example is part of a console application that outputs the values for a number of the settings defined for the recognizer that supports the en-US locale. The example updates the confidence level settings, and then queries the recognizer to check the updated values. The example generates the following output.  \\n  \\n```  \\nSettings for recognizer MS-1033-80-DESK:  \\n  \\n  ResourceUsage                  is not supported by this recognizer.  \\n  ResponseSpeed                  = 150  \\n  ComplexResponseSpeed           = 500  \\n  AdaptationOn                   = 1  \\n  PersistedBackgroundAdaptation  = 1  \\n  \\nUpdated settings:  \\n  \\n  ResourceUsage                  is not supported by this recognizer.  \\n  ResponseSpeed                  = 200  \\n  ComplexResponseSpeed           = 300  \\n  AdaptationOn                   = 0  \\n  PersistedBackgroundAdaptation  = 0  \\n  \\nPress any key to exit...  \\n```  \\n  \\n```c#  \\nusing System;  \\nusing System.Globalization;  \\nusing System.Speech.Recognition;  \\n  \\nnamespace RecognizerSettings  \\n{  \\n  class Program  \\n  {  \\n    static readonly string[] settings = new string[] {  \\n      \\\"ResourceUsage\\\",  \\n      \\\"ResponseSpeed\\\",  \\n      \\\"ComplexResponseSpeed\\\",  \\n      \\\"AdaptationOn\\\",  \\n      \\\"PersistedBackgroundAdaptation\\\",  \\n    };  \\n  \\n    static void Main(string[] args)  \\n    {  \\n      using (SpeechRecognitionEngine recognizer =  \\n        new SpeechRecognitionEngine(new System.Globalization.CultureInfo(\\\"en-US\\\")))  \\n      {  \\n        Console.WriteLine(\\\"Settings for recognizer {0}:\\\",  \\n          recognizer.RecognizerInfo.Name);  \\n        Console.WriteLine();  \\n  \\n        // List the current settings.  \\n        ListSettings(recognizer);  \\n  \\n        // Change some of the settings.  \\n        recognizer.UpdateRecognizerSetting(\\\"ResponseSpeed\\\", 200);  \\n        recognizer.UpdateRecognizerSetting(\\\"ComplexResponseSpeed\\\", 300);  \\n        recognizer.UpdateRecognizerSetting(\\\"AdaptationOn\\\", 1);  \\n        recognizer.UpdateRecognizerSetting(\\\"PersistedBackgroundAdaptation\\\", 0);  \\n  \\n        Console.WriteLine(\\\"Updated settings:\\\");  \\n        Console.WriteLine();  \\n  \\n        // List the updated settings.  \\n        ListSettings(recognizer);  \\n      }  \\n  \\n      Console.WriteLine(\\\"Press any key to exit...\\\");  \\n      Console.ReadKey();  \\n    }  \\n  \\n    private static void ListSettings(SpeechRecognitionEngine recognizer)  \\n    {  \\n      foreach (string setting in settings)  \\n      {  \\n        try  \\n        {  \\n          object value = recognizer.QueryRecognizerSetting(setting);  \\n          Console.WriteLine(\\\"  {0,-30} = {1}\\\", setting, value);  \\n        }  \\n        catch  \\n        {  \\n          Console.WriteLine(\\\"  {0,-30} is not supported by this recognizer.\\\",  \\n            setting);  \\n        }  \\n      }  \\n      Console.WriteLine();  \\n    }  \\n  }  \\n}  \\n  \\n```\"\n  syntax:\n    content: public void UpdateRecognizerSetting (string settingName, int updatedValue);\n    parameters:\n    - id: settingName\n      type: System.String\n      description: The name of the setting to update.\n    - id: updatedValue\n      type: System.Int32\n      description: The new value for the setting.\n  overload: System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>settingName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>settingName</code> is the empty string (\"\").\n  - type: System.Collections.Generic.KeyNotFoundException\n    commentId: T:System.Collections.Generic.KeyNotFoundException\n    description: The recognizer does not have a setting by that name.\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting(System.String,System.String)\n  id: UpdateRecognizerSetting(System.String,System.String)\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  langs:\n  - csharp\n  name: UpdateRecognizerSetting(String,String)\n  nameWithType: SpeechRecognitionEngine.UpdateRecognizerSetting(String,String)\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting(String,String)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Updates the specified speech recognition engine setting with the specified string value.\n  remarks: With the exception of `PersistedBackgroundAdaptation`, property values set using the UpdateRecognizerSetting method remain in effect only for the current instance of <xref:System.Speech.Recognition.SpeechRecognitionEngine>, after which they revert to their default settings. See <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> for descriptions of supported settings.\n  syntax:\n    content: public void UpdateRecognizerSetting (string settingName, string updatedValue);\n    parameters:\n    - id: settingName\n      type: System.String\n      description: The name of the setting to update.\n    - id: updatedValue\n      type: System.String\n      description: The new value for the setting.\n  overload: System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>settingName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>settingName</code> is the empty string (\"\").\n  - type: System.Collections.Generic.KeyNotFoundException\n    commentId: T:System.Collections.Generic.KeyNotFoundException\n    description: The recognizer does not have a setting by that name.\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.NotSupportedException\n  isExternal: true\n  name: System.NotSupportedException\n- uid: System.OperationCanceledException\n  isExternal: true\n  name: System.OperationCanceledException\n- uid: System.Collections.Generic.KeyNotFoundException\n  isExternal: true\n  name: System.Collections.Generic.KeyNotFoundException\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.#ctor\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: SpeechRecognitionEngine()\n  nameWithType: SpeechRecognitionEngine.SpeechRecognitionEngine()\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionEngine()\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.Globalization.CultureInfo)\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: SpeechRecognitionEngine(CultureInfo)\n  nameWithType: SpeechRecognitionEngine.SpeechRecognitionEngine(CultureInfo)\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionEngine(CultureInfo)\n- uid: System.Globalization.CultureInfo\n  parent: System.Globalization\n  isExternal: true\n  name: CultureInfo\n  nameWithType: CultureInfo\n  fullName: System.Globalization.CultureInfo\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.Speech.Recognition.RecognizerInfo)\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: SpeechRecognitionEngine(RecognizerInfo)\n  nameWithType: SpeechRecognitionEngine.SpeechRecognitionEngine(RecognizerInfo)\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionEngine(RecognizerInfo)\n- uid: System.Speech.Recognition.RecognizerInfo\n  parent: System.Speech.Recognition\n  isExternal: false\n  name: RecognizerInfo\n  nameWithType: RecognizerInfo\n  fullName: System.Speech.Recognition.RecognizerInfo\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.String)\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: SpeechRecognitionEngine(String)\n  nameWithType: SpeechRecognitionEngine.SpeechRecognitionEngine(String)\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionEngine(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.AudioFormat\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: AudioFormat\n  nameWithType: SpeechRecognitionEngine.AudioFormat\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.AudioFormat\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  parent: System.Speech.AudioFormat\n  isExternal: false\n  name: SpeechAudioFormatInfo\n  nameWithType: SpeechAudioFormatInfo\n  fullName: System.Speech.AudioFormat.SpeechAudioFormatInfo\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: AudioLevel\n  nameWithType: SpeechRecognitionEngine.AudioLevel\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.AudioLevelUpdated\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: AudioLevelUpdated\n  nameWithType: SpeechRecognitionEngine.AudioLevelUpdated\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.AudioLevelUpdated\n- uid: System.EventHandler{System.Speech.Recognition.AudioLevelUpdatedEventArgs}\n  parent: System\n  isExternal: true\n  name: EventHandler<AudioLevelUpdatedEventArgs>\n  nameWithType: EventHandler<AudioLevelUpdatedEventArgs>\n  fullName: System.EventHandler<System.Speech.Recognition.AudioLevelUpdatedEventArgs>\n  spec.csharp:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    nameWithType: EventHandler\n    fullName: EventHandler<System.Speech.Recognition.AudioLevelUpdatedEventArgs>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Speech.Recognition.AudioLevelUpdatedEventArgs\n    name: AudioLevelUpdatedEventArgs\n    nameWithType: AudioLevelUpdatedEventArgs\n    fullName: AudioLevelUpdatedEventArgs\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: AudioPosition\n  nameWithType: SpeechRecognitionEngine.AudioPosition\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition\n- uid: System.TimeSpan\n  parent: System\n  isExternal: true\n  name: TimeSpan\n  nameWithType: TimeSpan\n  fullName: System.TimeSpan\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.AudioSignalProblemOccurred\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: AudioSignalProblemOccurred\n  nameWithType: SpeechRecognitionEngine.AudioSignalProblemOccurred\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.AudioSignalProblemOccurred\n- uid: System.EventHandler{System.Speech.Recognition.AudioSignalProblemOccurredEventArgs}\n  parent: System\n  isExternal: true\n  name: EventHandler<AudioSignalProblemOccurredEventArgs>\n  nameWithType: EventHandler<AudioSignalProblemOccurredEventArgs>\n  fullName: System.EventHandler<System.Speech.Recognition.AudioSignalProblemOccurredEventArgs>\n  spec.csharp:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    nameWithType: EventHandler\n    fullName: EventHandler<System.Speech.Recognition.AudioSignalProblemOccurredEventArgs>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Speech.Recognition.AudioSignalProblemOccurredEventArgs\n    name: AudioSignalProblemOccurredEventArgs\n    nameWithType: AudioSignalProblemOccurredEventArgs\n    fullName: AudioSignalProblemOccurredEventArgs\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.AudioState\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: AudioState\n  nameWithType: SpeechRecognitionEngine.AudioState\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.AudioState\n- uid: System.Speech.Recognition.AudioState\n  parent: System.Speech.Recognition\n  isExternal: false\n  name: AudioState\n  nameWithType: AudioState\n  fullName: System.Speech.Recognition.AudioState\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: AudioStateChanged\n  nameWithType: SpeechRecognitionEngine.AudioStateChanged\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged\n- uid: System.EventHandler{System.Speech.Recognition.AudioStateChangedEventArgs}\n  parent: System\n  isExternal: true\n  name: EventHandler<AudioStateChangedEventArgs>\n  nameWithType: EventHandler<AudioStateChangedEventArgs>\n  fullName: System.EventHandler<System.Speech.Recognition.AudioStateChangedEventArgs>\n  spec.csharp:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    nameWithType: EventHandler\n    fullName: EventHandler<System.Speech.Recognition.AudioStateChangedEventArgs>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Speech.Recognition.AudioStateChangedEventArgs\n    name: AudioStateChangedEventArgs\n    nameWithType: AudioStateChangedEventArgs\n    fullName: AudioStateChangedEventArgs\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: BabbleTimeout\n  nameWithType: SpeechRecognitionEngine.BabbleTimeout\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.Dispose\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: Dispose()\n  nameWithType: SpeechRecognitionEngine.Dispose()\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.Dispose()\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.Dispose(System.Boolean)\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: SpeechRecognitionEngine.Dispose(Boolean)\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: EmulateRecognize(String)\n  nameWithType: SpeechRecognitionEngine.EmulateRecognize(String)\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(String)\n- uid: System.Speech.Recognition.RecognitionResult\n  parent: System.Speech.Recognition\n  isExternal: false\n  name: RecognitionResult\n  nameWithType: RecognitionResult\n  fullName: System.Speech.Recognition.RecognitionResult\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: EmulateRecognize(RecognizedWordUnit[],CompareOptions)\n  nameWithType: SpeechRecognitionEngine.EmulateRecognize(RecognizedWordUnit[],CompareOptions)\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(RecognizedWordUnit[],CompareOptions)\n- uid: System.Speech.Recognition.RecognizedWordUnit[]\n  parent: System.Speech.Recognition\n  isExternal: false\n  name: RecognizedWordUnit\n  nameWithType: RecognizedWordUnit\n  fullName: System.Speech.Recognition.RecognizedWordUnit[]\n  spec.csharp:\n  - uid: System.Speech.Recognition.RecognizedWordUnit\n    name: RecognizedWordUnit\n    nameWithType: RecognizedWordUnit\n    fullName: RecognizedWordUnit[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Globalization.CompareOptions\n  parent: System.Globalization\n  isExternal: true\n  name: CompareOptions\n  nameWithType: CompareOptions\n  fullName: System.Globalization.CompareOptions\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String,System.Globalization.CompareOptions)\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: EmulateRecognize(String,CompareOptions)\n  nameWithType: SpeechRecognitionEngine.EmulateRecognize(String,CompareOptions)\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(String,CompareOptions)\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: EmulateRecognizeAsync(String)\n  nameWithType: SpeechRecognitionEngine.EmulateRecognizeAsync(String)\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(String)\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: EmulateRecognizeAsync(RecognizedWordUnit[],CompareOptions)\n  nameWithType: SpeechRecognitionEngine.EmulateRecognizeAsync(RecognizedWordUnit[],CompareOptions)\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(RecognizedWordUnit[],CompareOptions)\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String,System.Globalization.CompareOptions)\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: EmulateRecognizeAsync(String,CompareOptions)\n  nameWithType: SpeechRecognitionEngine.EmulateRecognizeAsync(String,CompareOptions)\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(String,CompareOptions)\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: EmulateRecognizeCompleted\n  nameWithType: SpeechRecognitionEngine.EmulateRecognizeCompleted\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted\n- uid: System.EventHandler{System.Speech.Recognition.EmulateRecognizeCompletedEventArgs}\n  parent: System\n  isExternal: true\n  name: EventHandler<EmulateRecognizeCompletedEventArgs>\n  nameWithType: EventHandler<EmulateRecognizeCompletedEventArgs>\n  fullName: System.EventHandler<System.Speech.Recognition.EmulateRecognizeCompletedEventArgs>\n  spec.csharp:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    nameWithType: EventHandler\n    fullName: EventHandler<System.Speech.Recognition.EmulateRecognizeCompletedEventArgs>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Speech.Recognition.EmulateRecognizeCompletedEventArgs\n    name: EmulateRecognizeCompletedEventArgs\n    nameWithType: EmulateRecognizeCompletedEventArgs\n    fullName: EmulateRecognizeCompletedEventArgs\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: EndSilenceTimeout\n  nameWithType: SpeechRecognitionEngine.EndSilenceTimeout\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: EndSilenceTimeoutAmbiguous\n  nameWithType: SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.Grammars\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: Grammars\n  nameWithType: SpeechRecognitionEngine.Grammars\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.Grammars\n- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Speech.Recognition.Grammar}\n  parent: System.Collections.ObjectModel\n  isExternal: true\n  name: ReadOnlyCollection<Grammar>\n  nameWithType: ReadOnlyCollection<Grammar>\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Speech.Recognition.Grammar>\n  spec.csharp:\n  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n    name: ReadOnlyCollection\n    nameWithType: ReadOnlyCollection\n    fullName: ReadOnlyCollection<System.Speech.Recognition.Grammar>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Speech.Recognition.Grammar\n    name: Grammar\n    nameWithType: Grammar\n    fullName: Grammar\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: InitialSilenceTimeout\n  nameWithType: SpeechRecognitionEngine.InitialSilenceTimeout\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: InstalledRecognizers()\n  nameWithType: SpeechRecognitionEngine.InstalledRecognizers()\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers()\n- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Speech.Recognition.RecognizerInfo}\n  parent: System.Collections.ObjectModel\n  isExternal: true\n  name: ReadOnlyCollection<RecognizerInfo>\n  nameWithType: ReadOnlyCollection<RecognizerInfo>\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Speech.Recognition.RecognizerInfo>\n  spec.csharp:\n  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n    name: ReadOnlyCollection\n    nameWithType: ReadOnlyCollection\n    fullName: ReadOnlyCollection<System.Speech.Recognition.RecognizerInfo>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Speech.Recognition.RecognizerInfo\n    name: RecognizerInfo\n    nameWithType: RecognizerInfo\n    fullName: RecognizerInfo\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar(System.Speech.Recognition.Grammar)\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: LoadGrammar(Grammar)\n  nameWithType: SpeechRecognitionEngine.LoadGrammar(Grammar)\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar(Grammar)\n- uid: System.Speech.Recognition.Grammar\n  parent: System.Speech.Recognition\n  isExternal: false\n  name: Grammar\n  nameWithType: Grammar\n  fullName: System.Speech.Recognition.Grammar\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync(System.Speech.Recognition.Grammar)\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: LoadGrammarAsync(Grammar)\n  nameWithType: SpeechRecognitionEngine.LoadGrammarAsync(Grammar)\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync(Grammar)\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: LoadGrammarCompleted\n  nameWithType: SpeechRecognitionEngine.LoadGrammarCompleted\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted\n- uid: System.EventHandler{System.Speech.Recognition.LoadGrammarCompletedEventArgs}\n  parent: System\n  isExternal: true\n  name: EventHandler<LoadGrammarCompletedEventArgs>\n  nameWithType: EventHandler<LoadGrammarCompletedEventArgs>\n  fullName: System.EventHandler<System.Speech.Recognition.LoadGrammarCompletedEventArgs>\n  spec.csharp:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    nameWithType: EventHandler\n    fullName: EventHandler<System.Speech.Recognition.LoadGrammarCompletedEventArgs>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Speech.Recognition.LoadGrammarCompletedEventArgs\n    name: LoadGrammarCompletedEventArgs\n    nameWithType: LoadGrammarCompletedEventArgs\n    fullName: LoadGrammarCompletedEventArgs\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: MaxAlternates\n  nameWithType: SpeechRecognitionEngine.MaxAlternates\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.QueryRecognizerSetting(System.String)\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: QueryRecognizerSetting(String)\n  nameWithType: SpeechRecognitionEngine.QueryRecognizerSetting(String)\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.QueryRecognizerSetting(String)\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.Recognize\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: Recognize()\n  nameWithType: SpeechRecognitionEngine.Recognize()\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.Recognize()\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.Recognize(System.TimeSpan)\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: Recognize(TimeSpan)\n  nameWithType: SpeechRecognitionEngine.Recognize(TimeSpan)\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.Recognize(TimeSpan)\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: RecognizeAsync()\n  nameWithType: SpeechRecognitionEngine.RecognizeAsync()\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync()\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync(System.Speech.Recognition.RecognizeMode)\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: RecognizeAsync(RecognizeMode)\n  nameWithType: SpeechRecognitionEngine.RecognizeAsync(RecognizeMode)\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync(RecognizeMode)\n- uid: System.Speech.Recognition.RecognizeMode\n  parent: System.Speech.Recognition\n  isExternal: false\n  name: RecognizeMode\n  nameWithType: RecognizeMode\n  fullName: System.Speech.Recognition.RecognizeMode\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: RecognizeAsyncCancel()\n  nameWithType: SpeechRecognitionEngine.RecognizeAsyncCancel()\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel()\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: RecognizeAsyncStop()\n  nameWithType: SpeechRecognitionEngine.RecognizeAsyncStop()\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop()\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: RecognizeCompleted\n  nameWithType: SpeechRecognitionEngine.RecognizeCompleted\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted\n- uid: System.EventHandler{System.Speech.Recognition.RecognizeCompletedEventArgs}\n  parent: System\n  isExternal: true\n  name: EventHandler<RecognizeCompletedEventArgs>\n  nameWithType: EventHandler<RecognizeCompletedEventArgs>\n  fullName: System.EventHandler<System.Speech.Recognition.RecognizeCompletedEventArgs>\n  spec.csharp:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    nameWithType: EventHandler\n    fullName: EventHandler<System.Speech.Recognition.RecognizeCompletedEventArgs>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Speech.Recognition.RecognizeCompletedEventArgs\n    name: RecognizeCompletedEventArgs\n    nameWithType: RecognizeCompletedEventArgs\n    fullName: RecognizeCompletedEventArgs\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: RecognizerAudioPosition\n  nameWithType: SpeechRecognitionEngine.RecognizerAudioPosition\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: RecognizerInfo\n  nameWithType: SpeechRecognitionEngine.RecognizerInfo\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: RecognizerUpdateReached\n  nameWithType: SpeechRecognitionEngine.RecognizerUpdateReached\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached\n- uid: System.EventHandler{System.Speech.Recognition.RecognizerUpdateReachedEventArgs}\n  parent: System\n  isExternal: true\n  name: EventHandler<RecognizerUpdateReachedEventArgs>\n  nameWithType: EventHandler<RecognizerUpdateReachedEventArgs>\n  fullName: System.EventHandler<System.Speech.Recognition.RecognizerUpdateReachedEventArgs>\n  spec.csharp:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    nameWithType: EventHandler\n    fullName: EventHandler<System.Speech.Recognition.RecognizerUpdateReachedEventArgs>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Speech.Recognition.RecognizerUpdateReachedEventArgs\n    name: RecognizerUpdateReachedEventArgs\n    nameWithType: RecognizerUpdateReachedEventArgs\n    fullName: RecognizerUpdateReachedEventArgs\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: RequestRecognizerUpdate()\n  nameWithType: SpeechRecognitionEngine.RequestRecognizerUpdate()\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate()\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate(System.Object)\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: RequestRecognizerUpdate(Object)\n  nameWithType: SpeechRecognitionEngine.RequestRecognizerUpdate(Object)\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate(Object)\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate(System.Object,System.TimeSpan)\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: RequestRecognizerUpdate(Object,TimeSpan)\n  nameWithType: SpeechRecognitionEngine.RequestRecognizerUpdate(Object,TimeSpan)\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate(Object,TimeSpan)\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: SetInputToAudioStream(Stream,SpeechAudioFormatInfo)\n  nameWithType: SpeechRecognitionEngine.SetInputToAudioStream(Stream,SpeechAudioFormatInfo)\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream(Stream,SpeechAudioFormatInfo)\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: true\n  name: Stream\n  nameWithType: Stream\n  fullName: System.IO.Stream\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: SetInputToDefaultAudioDevice()\n  nameWithType: SpeechRecognitionEngine.SetInputToDefaultAudioDevice()\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice()\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: SetInputToNull()\n  nameWithType: SpeechRecognitionEngine.SetInputToNull()\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull()\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile(System.String)\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: SetInputToWaveFile(String)\n  nameWithType: SpeechRecognitionEngine.SetInputToWaveFile(String)\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile(String)\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream(System.IO.Stream)\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: SetInputToWaveStream(Stream)\n  nameWithType: SpeechRecognitionEngine.SetInputToWaveStream(Stream)\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream(Stream)\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: SpeechDetected\n  nameWithType: SpeechRecognitionEngine.SpeechDetected\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected\n- uid: System.EventHandler{System.Speech.Recognition.SpeechDetectedEventArgs}\n  parent: System\n  isExternal: true\n  name: EventHandler<SpeechDetectedEventArgs>\n  nameWithType: EventHandler<SpeechDetectedEventArgs>\n  fullName: System.EventHandler<System.Speech.Recognition.SpeechDetectedEventArgs>\n  spec.csharp:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    nameWithType: EventHandler\n    fullName: EventHandler<System.Speech.Recognition.SpeechDetectedEventArgs>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Speech.Recognition.SpeechDetectedEventArgs\n    name: SpeechDetectedEventArgs\n    nameWithType: SpeechDetectedEventArgs\n    fullName: SpeechDetectedEventArgs\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: SpeechHypothesized\n  nameWithType: SpeechRecognitionEngine.SpeechHypothesized\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized\n- uid: System.EventHandler{System.Speech.Recognition.SpeechHypothesizedEventArgs}\n  parent: System\n  isExternal: true\n  name: EventHandler<SpeechHypothesizedEventArgs>\n  nameWithType: EventHandler<SpeechHypothesizedEventArgs>\n  fullName: System.EventHandler<System.Speech.Recognition.SpeechHypothesizedEventArgs>\n  spec.csharp:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    nameWithType: EventHandler\n    fullName: EventHandler<System.Speech.Recognition.SpeechHypothesizedEventArgs>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Speech.Recognition.SpeechHypothesizedEventArgs\n    name: SpeechHypothesizedEventArgs\n    nameWithType: SpeechHypothesizedEventArgs\n    fullName: SpeechHypothesizedEventArgs\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: SpeechRecognitionRejected\n  nameWithType: SpeechRecognitionEngine.SpeechRecognitionRejected\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected\n- uid: System.EventHandler{System.Speech.Recognition.SpeechRecognitionRejectedEventArgs}\n  parent: System\n  isExternal: true\n  name: EventHandler<SpeechRecognitionRejectedEventArgs>\n  nameWithType: EventHandler<SpeechRecognitionRejectedEventArgs>\n  fullName: System.EventHandler<System.Speech.Recognition.SpeechRecognitionRejectedEventArgs>\n  spec.csharp:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    nameWithType: EventHandler\n    fullName: EventHandler<System.Speech.Recognition.SpeechRecognitionRejectedEventArgs>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Speech.Recognition.SpeechRecognitionRejectedEventArgs\n    name: SpeechRecognitionRejectedEventArgs\n    nameWithType: SpeechRecognitionRejectedEventArgs\n    fullName: SpeechRecognitionRejectedEventArgs\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: SpeechRecognized\n  nameWithType: SpeechRecognitionEngine.SpeechRecognized\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized\n- uid: System.EventHandler{System.Speech.Recognition.SpeechRecognizedEventArgs}\n  parent: System\n  isExternal: true\n  name: EventHandler<SpeechRecognizedEventArgs>\n  nameWithType: EventHandler<SpeechRecognizedEventArgs>\n  fullName: System.EventHandler<System.Speech.Recognition.SpeechRecognizedEventArgs>\n  spec.csharp:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    nameWithType: EventHandler\n    fullName: EventHandler<System.Speech.Recognition.SpeechRecognizedEventArgs>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Speech.Recognition.SpeechRecognizedEventArgs\n    name: SpeechRecognizedEventArgs\n    nameWithType: SpeechRecognizedEventArgs\n    fullName: SpeechRecognizedEventArgs\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: UnloadAllGrammars()\n  nameWithType: SpeechRecognitionEngine.UnloadAllGrammars()\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars()\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar(System.Speech.Recognition.Grammar)\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: UnloadGrammar(Grammar)\n  nameWithType: SpeechRecognitionEngine.UnloadGrammar(Grammar)\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar(Grammar)\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting(System.String,System.Int32)\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: UpdateRecognizerSetting(String,Int32)\n  nameWithType: SpeechRecognitionEngine.UpdateRecognizerSetting(String,Int32)\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting(String,Int32)\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting(System.String,System.String)\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: UpdateRecognizerSetting(String,String)\n  nameWithType: SpeechRecognitionEngine.UpdateRecognizerSetting(String,String)\n  fullName: System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting(String,String)\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.#ctor*\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: SpeechRecognitionEngine\n  nameWithType: SpeechRecognitionEngine.SpeechRecognitionEngine\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.AudioFormat*\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: AudioFormat\n  nameWithType: SpeechRecognitionEngine.AudioFormat\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel*\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: AudioLevel\n  nameWithType: SpeechRecognitionEngine.AudioLevel\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition*\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: AudioPosition\n  nameWithType: SpeechRecognitionEngine.AudioPosition\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.AudioState*\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: AudioState\n  nameWithType: SpeechRecognitionEngine.AudioState\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout*\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: BabbleTimeout\n  nameWithType: SpeechRecognitionEngine.BabbleTimeout\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.Dispose*\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: Dispose\n  nameWithType: SpeechRecognitionEngine.Dispose\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize*\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: EmulateRecognize\n  nameWithType: SpeechRecognitionEngine.EmulateRecognize\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync*\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: EmulateRecognizeAsync\n  nameWithType: SpeechRecognitionEngine.EmulateRecognizeAsync\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout*\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: EndSilenceTimeout\n  nameWithType: SpeechRecognitionEngine.EndSilenceTimeout\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous*\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: EndSilenceTimeoutAmbiguous\n  nameWithType: SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.Grammars*\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: Grammars\n  nameWithType: SpeechRecognitionEngine.Grammars\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout*\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: InitialSilenceTimeout\n  nameWithType: SpeechRecognitionEngine.InitialSilenceTimeout\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers*\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: InstalledRecognizers\n  nameWithType: SpeechRecognitionEngine.InstalledRecognizers\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar*\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: LoadGrammar\n  nameWithType: SpeechRecognitionEngine.LoadGrammar\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync*\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: LoadGrammarAsync\n  nameWithType: SpeechRecognitionEngine.LoadGrammarAsync\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates*\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: MaxAlternates\n  nameWithType: SpeechRecognitionEngine.MaxAlternates\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.QueryRecognizerSetting*\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: QueryRecognizerSetting\n  nameWithType: SpeechRecognitionEngine.QueryRecognizerSetting\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.Recognize*\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: Recognize\n  nameWithType: SpeechRecognitionEngine.Recognize\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync*\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: RecognizeAsync\n  nameWithType: SpeechRecognitionEngine.RecognizeAsync\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel*\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: RecognizeAsyncCancel\n  nameWithType: SpeechRecognitionEngine.RecognizeAsyncCancel\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop*\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: RecognizeAsyncStop\n  nameWithType: SpeechRecognitionEngine.RecognizeAsyncStop\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition*\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: RecognizerAudioPosition\n  nameWithType: SpeechRecognitionEngine.RecognizerAudioPosition\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo*\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: RecognizerInfo\n  nameWithType: SpeechRecognitionEngine.RecognizerInfo\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate*\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: RequestRecognizerUpdate\n  nameWithType: SpeechRecognitionEngine.RequestRecognizerUpdate\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream*\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: SetInputToAudioStream\n  nameWithType: SpeechRecognitionEngine.SetInputToAudioStream\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice*\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: SetInputToDefaultAudioDevice\n  nameWithType: SpeechRecognitionEngine.SetInputToDefaultAudioDevice\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull*\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: SetInputToNull\n  nameWithType: SpeechRecognitionEngine.SetInputToNull\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile*\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: SetInputToWaveFile\n  nameWithType: SpeechRecognitionEngine.SetInputToWaveFile\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream*\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: SetInputToWaveStream\n  nameWithType: SpeechRecognitionEngine.SetInputToWaveStream\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars*\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: UnloadAllGrammars\n  nameWithType: SpeechRecognitionEngine.UnloadAllGrammars\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar*\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: UnloadGrammar\n  nameWithType: SpeechRecognitionEngine.UnloadGrammar\n- uid: System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting*\n  parent: System.Speech.Recognition.SpeechRecognitionEngine\n  isExternal: false\n  name: UpdateRecognizerSetting\n  nameWithType: SpeechRecognitionEngine.UpdateRecognizerSetting\n"}