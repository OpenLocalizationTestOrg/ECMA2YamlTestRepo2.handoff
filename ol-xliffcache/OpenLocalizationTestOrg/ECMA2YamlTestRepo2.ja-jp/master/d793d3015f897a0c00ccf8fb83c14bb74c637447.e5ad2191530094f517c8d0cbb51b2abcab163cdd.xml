{"nodes":[{"pos":[1387,1442],"content":"Provides a client for connecting to WebSocket services.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides a client for connecting to WebSocket services.","pos":[0,55]}]},{"pos":[1454,2064],"content":"Some of the classes and class elements in the <xref:System.Net.WebSockets> namespace are supported on Windows 7, Windows Vista SP2, and Windows Server 2008. However, the only public implementations of client and server WebSockets are supported on Windows 8 and Windows Server 2012. The class elements in the <xref:System.Net.WebSockets> namespace that are supported on Windows 7, Windows Vista SP2, and Windows Server 2008 are abstract class elements. This allows an application developer to inherit and extend these abstract class classes and class elements with an actual implementation of client WebSockets.","needQuote":true,"needEscape":true,"nodes":[{"content":"Some of the classes and class elements in the <xref:System.Net.WebSockets> namespace are supported on Windows 7, Windows Vista SP2, and Windows Server 2008. However, the only public implementations of client and server WebSockets are supported on Windows 8 and Windows Server 2012. The class elements in the <xref:System.Net.WebSockets> namespace that are supported on Windows 7, Windows Vista SP2, and Windows Server 2008 are abstract class elements. This allows an application developer to inherit and extend these abstract class classes and class elements with an actual implementation of client WebSockets.","pos":[0,610],"nodes":[{"content":"Some of the classes and class elements in the &lt;xref:System.Net.WebSockets&gt; namespace are supported on Windows 7, Windows Vista SP2, and Windows Server 2008.","pos":[0,156],"source":"Some of the classes and class elements in the <xref:System.Net.WebSockets> namespace are supported on Windows 7, Windows Vista SP2, and Windows Server 2008."},{"content":"However, the only public implementations of client and server WebSockets are supported on Windows 8 and Windows Server 2012.","pos":[157,281]},{"content":"The class elements in the &lt;xref:System.Net.WebSockets&gt; namespace that are supported on Windows 7, Windows Vista SP2, and Windows Server 2008 are abstract class elements.","pos":[282,451],"source":" The class elements in the <xref:System.Net.WebSockets> namespace that are supported on Windows 7, Windows Vista SP2, and Windows Server 2008 are abstract class elements."},{"content":"This allows an application developer to inherit and extend these abstract class classes and class elements with an actual implementation of client WebSockets.","pos":[452,610]}]}]},{"pos":[3386,3478],"content":"Creates an instance of the <bpt id=\"p1\">&lt;xref href=\"System.Net.WebSockets.ClientWebSocket\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Creates an instance of the <xref href=\"System.Net.WebSockets.ClientWebSocket\"></xref> class."},{"pos":[3976,4036],"content":"Aborts the connection and cancels any pending IO operations.","needQuote":true,"needEscape":true,"nodes":[{"content":"Aborts the connection and cancels any pending IO operations.","pos":[0,60]}]},{"pos":[4884,4991],"content":"Close the <bpt id=\"p1\">&lt;xref href=\"System.Net.WebSockets.ClientWebSocket\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance as an asynchronous operation.","needQuote":true,"needEscape":true,"source":"Close the <xref href=\"System.Net.WebSockets.ClientWebSocket\"></xref> instance as an asynchronous operation."},{"pos":[5003,5177],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task> object will complete after the <xref:System.Net.WebSockets.ClientWebSocket> instance is closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task> object will complete after the <xref:System.Net.WebSockets.ClientWebSocket> instance is closed.","pos":[0,174],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned &lt;xref:System.Threading.Tasks.Task&gt; object will complete after the &lt;xref:System.Net.WebSockets.ClientWebSocket&gt; instance is closed.","pos":[31,174],"source":" The returned <xref:System.Threading.Tasks.Task> object will complete after the <xref:System.Net.WebSockets.ClientWebSocket> instance is closed."}]}]},{"pos":[5506,5533],"content":"The WebSocket close status.","needQuote":true,"needEscape":true,"nodes":[{"content":"The WebSocket close status.","pos":[0,27]}]},{"pos":[5607,5641],"content":"A description of the close status.","needQuote":true,"needEscape":true,"nodes":[{"content":"A description of the close status.","pos":[0,34]}]},{"pos":[5736,5828],"content":"A cancellation token used to propagate notification that this  operation should be canceled.","needQuote":true,"needEscape":true,"nodes":[{"content":"A cancellation token used to propagate notification that this  operation should be canceled.","pos":[0,92]}]},{"pos":[5901,6009],"content":"Returns <xref:System.Threading.Tasks.Task>.       The task object representing the asynchronous operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"Returns <xref:System.Threading.Tasks.Task>.       The task object representing the asynchronous operation.","pos":[0,106],"nodes":[{"content":"Returns &lt;xref:System.Threading.Tasks.Task&gt;.","pos":[0,43],"source":"Returns <xref:System.Threading.Tasks.Task>."},{"content":"The task object representing the asynchronous operation.","pos":[50,106]}]}]},{"pos":[6820,6942],"content":"Close the output for the <bpt id=\"p1\">&lt;xref href=\"System.Net.WebSockets.ClientWebSocket\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance as an asynchronous operation.","needQuote":true,"needEscape":true,"source":"Close the output for the <xref href=\"System.Net.WebSockets.ClientWebSocket\"></xref> instance as an asynchronous operation."},{"pos":[6954,7142],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task> object will complete after the output on the <xref:System.Net.WebSockets.ClientWebSocket> instance is closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task> object will complete after the output on the <xref:System.Net.WebSockets.ClientWebSocket> instance is closed.","pos":[0,188],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned &lt;xref:System.Threading.Tasks.Task&gt; object will complete after the output on the &lt;xref:System.Net.WebSockets.ClientWebSocket&gt; instance is closed.","pos":[31,188],"source":" The returned <xref:System.Threading.Tasks.Task> object will complete after the output on the <xref:System.Net.WebSockets.ClientWebSocket> instance is closed."}]}]},{"pos":[7477,7504],"content":"The WebSocket close status.","needQuote":true,"needEscape":true,"nodes":[{"content":"The WebSocket close status.","pos":[0,27]}]},{"pos":[7578,7612],"content":"A description of the close status.","needQuote":true,"needEscape":true,"nodes":[{"content":"A description of the close status.","pos":[0,34]}]},{"pos":[7707,7799],"content":"A cancellation token used to propagate notification that this  operation should be canceled.","needQuote":true,"needEscape":true,"nodes":[{"content":"A cancellation token used to propagate notification that this  operation should be canceled.","pos":[0,92]}]},{"pos":[7872,7980],"content":"Returns <xref:System.Threading.Tasks.Task>.       The task object representing the asynchronous operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"Returns <xref:System.Threading.Tasks.Task>.       The task object representing the asynchronous operation.","pos":[0,106],"nodes":[{"content":"Returns &lt;xref:System.Threading.Tasks.Task&gt;.","pos":[0,43],"source":"Returns <xref:System.Threading.Tasks.Task>."},{"content":"The task object representing the asynchronous operation.","pos":[50,106]}]}]},{"pos":[8447,8572],"content":"Gets the reason why the close handshake was initiated on <bpt id=\"p1\">&lt;xref href=\"System.Net.WebSockets.ClientWebSocket\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance.","needQuote":true,"needEscape":true,"source":"Gets the reason why the close handshake was initiated on <xref href=\"System.Net.WebSockets.ClientWebSocket\"></xref> instance."},{"pos":[8790,8922],"content":"Returns <xref href=\"System.Net.WebSockets.WebSocketCloseStatus\"></xref>.       The reason why the close handshake was initiated.","needQuote":false,"needEscape":true,"nodes":[{"content":"Returns <bpt id=\"p1\">&lt;xref href=\"System.Net.WebSockets.WebSocketCloseStatus\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,72],"source":"Returns <xref href=\"System.Net.WebSockets.WebSocketCloseStatus\"></xref>."},{"content":"The reason why the close handshake was initiated.","pos":[79,128]}]},{"pos":[9439,9559],"content":"Gets a description of the reason why the <bpt id=\"p1\">&lt;xref href=\"System.Net.WebSockets.ClientWebSocket\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance was closed.","needQuote":true,"needEscape":true,"source":"Gets a description of the reason why the <xref href=\"System.Net.WebSockets.ClientWebSocket\"></xref> instance was closed."},{"pos":[9696,9853],"content":"Returns <xref:System.String>.       The description of the reason why the <xref href=\"System.Net.WebSockets.ClientWebSocket\"></xref> instance was closed.","needQuote":false,"needEscape":true,"nodes":[{"content":"Returns &lt;xref:System.String&gt;.","pos":[0,29],"source":"Returns <xref:System.String>."},{"content":"The description of the reason why the <bpt id=\"p1\">&lt;xref href=\"System.Net.WebSockets.ClientWebSocket\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance was closed.","pos":[36,153],"source":"       The description of the reason why the <xref href=\"System.Net.WebSockets.ClientWebSocket\"></xref> instance was closed."}]},{"pos":[10492,10551],"content":"Connect to a WebSocket server as an asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Connect to a WebSocket server as an asynchronous operation.","pos":[0,59]}]},{"pos":[10564,11052],"content":"The ConnectAsync method initiates the WebSocket handshake with a remote network destination, and then negotiates the sub-protocol.       For plain WebSocket connections, use the `ws://` scheme in the uri. For secure WebSocket connections over TLS/SSL, use the `wss://` scheme.       This operation will not block. The returned <xref:System.Threading.Tasks.Task> object will complete after the connect request on the <xref:System.Net.WebSockets.ClientWebSocket> instance has completed.","needQuote":false,"needEscape":true,"nodes":[{"content":"The ConnectAsync method initiates the WebSocket handshake with a remote network destination, and then negotiates the sub-protocol.","pos":[0,130]},{"content":"For plain WebSocket connections, use the <ph id=\"ph1\">`ws://`</ph> scheme in the uri.","pos":[137,204],"source":"       For plain WebSocket connections, use the `ws://` scheme in the uri."},{"content":"For secure WebSocket connections over TLS/SSL, use the <ph id=\"ph1\">`wss://`</ph> scheme.","pos":[205,276],"source":" For secure WebSocket connections over TLS/SSL, use the `wss://` scheme."},{"content":"This operation will not block.","pos":[283,313]},{"content":"The returned &lt;xref:System.Threading.Tasks.Task&gt; object will complete after the connect request on the &lt;xref:System.Net.WebSockets.ClientWebSocket&gt; instance has completed.","pos":[314,484],"source":" The returned <xref:System.Threading.Tasks.Task> object will complete after the connect request on the <xref:System.Net.WebSockets.ClientWebSocket> instance has completed."}]},{"pos":[11262,11308],"content":"The URI of the WebSocket server to connect to.","needQuote":true,"needEscape":true,"nodes":[{"content":"The URI of the WebSocket server to connect to.","pos":[0,46]}]},{"pos":[11403,11494],"content":"A cancellation token used to propagate notification that the  operation should be canceled.","needQuote":true,"needEscape":true,"nodes":[{"content":"A cancellation token used to propagate notification that the  operation should be canceled.","pos":[0,91]}]},{"pos":[11567,11675],"content":"Returns <xref:System.Threading.Tasks.Task>.       The task object representing the asynchronous operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"Returns <xref:System.Threading.Tasks.Task>.       The task object representing the asynchronous operation.","pos":[0,106],"nodes":[{"content":"Returns &lt;xref:System.Threading.Tasks.Task&gt;.","pos":[0,43],"source":"Returns <xref:System.Threading.Tasks.Task>."},{"content":"The task object representing the asynchronous operation.","pos":[50,106]}]}]},{"pos":[12122,12235],"content":"Releases the unmanaged resources used by the <bpt id=\"p1\">&lt;xref href=\"System.Net.WebSockets.ClientWebSocket\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance.","needQuote":true,"needEscape":true,"source":"Releases the unmanaged resources used by the <xref href=\"System.Net.WebSockets.ClientWebSocket\"></xref> instance."},{"pos":[12747,12850],"content":"Gets the WebSocket options for the <bpt id=\"p1\">&lt;xref href=\"System.Net.WebSockets.ClientWebSocket\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance.","needQuote":true,"needEscape":true,"source":"Gets the WebSocket options for the <xref href=\"System.Net.WebSockets.ClientWebSocket\"></xref> instance."},{"pos":[13032,13217],"content":"Returns <xref href=\"System.Net.WebSockets.ClientWebSocketOptions\"></xref>.       The WebSocket options for the <xref href=\"System.Net.WebSockets.ClientWebSocket\"></xref> instance.","needQuote":false,"needEscape":true,"nodes":[{"content":"Returns <bpt id=\"p1\">&lt;xref href=\"System.Net.WebSockets.ClientWebSocketOptions\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,74],"source":"Returns <xref href=\"System.Net.WebSockets.ClientWebSocketOptions\"></xref>."},{"content":"The WebSocket options for the <bpt id=\"p1\">&lt;xref href=\"System.Net.WebSockets.ClientWebSocket\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance.","pos":[81,179],"source":"       The WebSocket options for the <xref href=\"System.Net.WebSockets.ClientWebSocket\"></xref> instance."}]},{"pos":[13930,14034],"content":"Receive data on <bpt id=\"p1\">&lt;xref href=\"System.Net.WebSockets.ClientWebSocket\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> as an asynchronous operation.","needQuote":true,"needEscape":true,"source":"Receive data on <xref href=\"System.Net.WebSockets.ClientWebSocket\"></xref> as an asynchronous operation."},{"pos":[14047,14379],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the receive request on the <xref:System.Net.WebSockets.ClientWebSocket> instance has completed.       Exactly one send and one receive is supported on each <xref:System.Net.WebSockets.ClientWebSocket> object in parallel.","needQuote":false,"needEscape":true,"nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the receive request on the <xref:System.Net.WebSockets.ClientWebSocket> instance has completed.       Exactly one send and one receive is supported on each <xref:System.Net.WebSockets.ClientWebSocket> object in parallel.","pos":[0,330],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned &lt;xref:System.Threading.Tasks.Task%601&gt; object will complete after the receive request on the &lt;xref:System.Net.WebSockets.ClientWebSocket&gt; instance has completed.","pos":[31,205],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete after the receive request on the <xref:System.Net.WebSockets.ClientWebSocket> instance has completed."},{"content":"Exactly one send and one receive is supported on each &lt;xref:System.Net.WebSockets.ClientWebSocket&gt; object in parallel.","pos":[212,330],"source":"       Exactly one send and one receive is supported on each <xref:System.Net.WebSockets.ClientWebSocket> object in parallel."}]}]},{"pos":[14687,14722],"content":"The buffer to receive the response.","needQuote":true,"needEscape":true,"nodes":[{"content":"The buffer to receive the response.","pos":[0,35]}]},{"pos":[14817,14909],"content":"A cancellation token used to propagate notification that this  operation should be canceled.","needQuote":true,"needEscape":true,"nodes":[{"content":"A cancellation token used to propagate notification that this  operation should be canceled.","pos":[0,92]}]},{"pos":[15028,15146],"content":"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;.       The task object representing the asynchronous operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;.       The task object representing the asynchronous operation.","pos":[0,116],"nodes":[{"content":"Returns <ph id=\"ph1\">&amp;lt;</ph>xref:System.Threading.Tasks.Task%601<ph id=\"ph2\">&amp;gt;</ph>.","pos":[0,53],"source":"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;."},{"content":"The task object representing the asynchronous operation.","pos":[60,116]}]}]},{"pos":[16052,16153],"content":"Send data on <bpt id=\"p1\">&lt;xref href=\"System.Net.WebSockets.ClientWebSocket\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> as an asynchronous operation.","needQuote":true,"needEscape":true,"source":"Send data on <xref href=\"System.Net.WebSockets.ClientWebSocket\"></xref> as an asynchronous operation."},{"pos":[16166,16491],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task> object will complete after the send request on the <xref:System.Net.WebSockets.ClientWebSocket> instance has completed.       Exactly one send and one receive is supported on each <xref:System.Net.WebSockets.ClientWebSocket> object in parallel.","needQuote":false,"needEscape":true,"nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task> object will complete after the send request on the <xref:System.Net.WebSockets.ClientWebSocket> instance has completed.       Exactly one send and one receive is supported on each <xref:System.Net.WebSockets.ClientWebSocket> object in parallel.","pos":[0,323],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned &lt;xref:System.Threading.Tasks.Task&gt; object will complete after the send request on the &lt;xref:System.Net.WebSockets.ClientWebSocket&gt; instance has completed.","pos":[31,198],"source":" The returned <xref:System.Threading.Tasks.Task> object will complete after the send request on the <xref:System.Net.WebSockets.ClientWebSocket> instance has completed."},{"content":"Exactly one send and one receive is supported on each &lt;xref:System.Net.WebSockets.ClientWebSocket&gt; object in parallel.","pos":[205,323],"source":"       Exactly one send and one receive is supported on each <xref:System.Net.WebSockets.ClientWebSocket> object in parallel."}]}]},{"pos":[16825,16870],"content":"The buffer containing the message to be sent.","needQuote":true,"needEscape":true,"nodes":[{"content":"The buffer containing the message to be sent.","pos":[0,45]}]},{"pos":[16967,17032],"content":"Specifies whether the buffer is clear text or in a binary format.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies whether the buffer is clear text or in a binary format.","pos":[0,65]}]},{"pos":[17102,17325],"content":"Specifies whether this is the final asynchronous send. Set to <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if this is the final send; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> otherwise.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies whether this is the final asynchronous send.","pos":[0,54]},{"content":"Set to <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if this is the final send; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> otherwise.","pos":[55,223],"source":" Set to <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if this is the final send; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> otherwise."}]},{"pos":[17420,17512],"content":"A cancellation token used to propagate notification that this  operation should be canceled.","needQuote":true,"needEscape":true,"nodes":[{"content":"A cancellation token used to propagate notification that this  operation should be canceled.","pos":[0,92]}]},{"pos":[17584,17640],"content":"The task object representing the asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]}]},{"pos":[18069,18168],"content":"Get the WebSocket state of the <bpt id=\"p1\">&lt;xref href=\"System.Net.WebSockets.ClientWebSocket\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance.","needQuote":true,"needEscape":true,"source":"Get the WebSocket state of the <xref href=\"System.Net.WebSockets.ClientWebSocket\"></xref> instance."},{"pos":[18341,18515],"content":"Returns <xref href=\"System.Net.WebSockets.WebSocketState\"></xref>.       The WebSocket state of the <xref href=\"System.Net.WebSockets.ClientWebSocket\"></xref> instance.","needQuote":false,"needEscape":true,"nodes":[{"content":"Returns <bpt id=\"p1\">&lt;xref href=\"System.Net.WebSockets.WebSocketState\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,66],"source":"Returns <xref href=\"System.Net.WebSockets.WebSocketState\"></xref>."},{"content":"The WebSocket state of the <bpt id=\"p1\">&lt;xref href=\"System.Net.WebSockets.ClientWebSocket\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance.","pos":[73,168],"source":"       The WebSocket state of the <xref href=\"System.Net.WebSockets.ClientWebSocket\"></xref> instance."}]},{"pos":[18971,19089],"content":"Gets the supported WebSocket sub-protocol for the <bpt id=\"p1\">&lt;xref href=\"System.Net.WebSockets.ClientWebSocket\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance.","needQuote":true,"needEscape":true,"source":"Gets the supported WebSocket sub-protocol for the <xref href=\"System.Net.WebSockets.ClientWebSocket\"></xref> instance."},{"pos":[19215,19290],"content":"Returns <xref:System.String>.       The supported WebSocket sub-protocol.","needQuote":false,"needEscape":true,"nodes":[{"content":"Returns <xref:System.String>.       The supported WebSocket sub-protocol.","pos":[0,73],"nodes":[{"content":"Returns &lt;xref:System.String&gt;.","pos":[0,29],"source":"Returns <xref:System.String>."},{"content":"The supported WebSocket sub-protocol.","pos":[36,73]}]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Net.WebSockets.ClientWebSocket\n  id: ClientWebSocket\n  children:\n  - System.Net.WebSockets.ClientWebSocket.#ctor\n  - System.Net.WebSockets.ClientWebSocket.Abort\n  - System.Net.WebSockets.ClientWebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)\n  - System.Net.WebSockets.ClientWebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)\n  - System.Net.WebSockets.ClientWebSocket.CloseStatus\n  - System.Net.WebSockets.ClientWebSocket.CloseStatusDescription\n  - System.Net.WebSockets.ClientWebSocket.ConnectAsync(System.Uri,System.Threading.CancellationToken)\n  - System.Net.WebSockets.ClientWebSocket.Dispose\n  - System.Net.WebSockets.ClientWebSocket.Options\n  - System.Net.WebSockets.ClientWebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)\n  - System.Net.WebSockets.ClientWebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)\n  - System.Net.WebSockets.ClientWebSocket.State\n  - System.Net.WebSockets.ClientWebSocket.SubProtocol\n  langs:\n  - csharp\n  name: ClientWebSocket\n  nameWithType: ClientWebSocket\n  fullName: System.Net.WebSockets.ClientWebSocket\n  type: Class\n  summary: Provides a client for connecting to WebSocket services.\n  remarks: Some of the classes and class elements in the <xref:System.Net.WebSockets> namespace are supported on Windows 7, Windows Vista SP2, and Windows Server 2008. However, the only public implementations of client and server WebSockets are supported on Windows 8 and Windows Server 2012. The class elements in the <xref:System.Net.WebSockets> namespace that are supported on Windows 7, Windows Vista SP2, and Windows Server 2008 are abstract class elements. This allows an application developer to inherit and extend these abstract class classes and class elements with an actual implementation of client WebSockets.\n  syntax:\n    content: 'public sealed class ClientWebSocket : System.Net.WebSockets.WebSocket'\n  inheritance:\n  - System.Object\n  - System.Net.WebSockets.WebSocket\n  implements: []\n  inheritedMembers:\n  - System.Net.WebSockets.WebSocket.CreateClientBuffer(System.Int32,System.Int32)\n  - System.Net.WebSockets.WebSocket.CreateClientWebSocket(System.IO.Stream,System.String,System.Int32,System.Int32,System.TimeSpan,System.Boolean,System.ArraySegment{System.Byte})\n  - System.Net.WebSockets.WebSocket.CreateServerBuffer(System.Int32)\n  - System.Net.WebSockets.WebSocket.DefaultKeepAliveInterval\n  - System.Net.WebSockets.WebSocket.IsApplicationTargeting45\n  - System.Net.WebSockets.WebSocket.IsStateTerminal(System.Net.WebSockets.WebSocketState)\n  - System.Net.WebSockets.WebSocket.RegisterPrefixes\n  - System.Net.WebSockets.WebSocket.ThrowOnInvalidState(System.Net.WebSockets.WebSocketState,System.Net.WebSockets.WebSocketState[])\n  platform:\n  - net462\n- uid: System.Net.WebSockets.ClientWebSocket.#ctor\n  id: '#ctor'\n  parent: System.Net.WebSockets.ClientWebSocket\n  langs:\n  - csharp\n  name: ClientWebSocket()\n  nameWithType: ClientWebSocket.ClientWebSocket()\n  fullName: System.Net.WebSockets.ClientWebSocket.ClientWebSocket()\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.Net.WebSockets\n  summary: Creates an instance of the <xref href=\"System.Net.WebSockets.ClientWebSocket\"></xref> class.\n  syntax:\n    content: public ClientWebSocket ();\n    parameters: []\n  overload: System.Net.WebSockets.ClientWebSocket.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.WebSockets.ClientWebSocket.Abort\n  id: Abort\n  parent: System.Net.WebSockets.ClientWebSocket\n  langs:\n  - csharp\n  name: Abort()\n  nameWithType: ClientWebSocket.Abort()\n  fullName: System.Net.WebSockets.ClientWebSocket.Abort()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.WebSockets\n  summary: Aborts the connection and cancels any pending IO operations.\n  syntax:\n    content: public override void Abort ();\n    parameters: []\n  overload: System.Net.WebSockets.ClientWebSocket.Abort*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.WebSockets.ClientWebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)\n  id: CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)\n  parent: System.Net.WebSockets.ClientWebSocket\n  langs:\n  - csharp\n  name: CloseAsync(WebSocketCloseStatus,String,CancellationToken)\n  nameWithType: ClientWebSocket.CloseAsync(WebSocketCloseStatus,String,CancellationToken)\n  fullName: System.Net.WebSockets.ClientWebSocket.CloseAsync(WebSocketCloseStatus,String,CancellationToken)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.WebSockets\n  summary: Close the <xref href=\"System.Net.WebSockets.ClientWebSocket\"></xref> instance as an asynchronous operation.\n  remarks: This operation will not block. The returned <xref:System.Threading.Tasks.Task> object will complete after the <xref:System.Net.WebSockets.ClientWebSocket> instance is closed.\n  syntax:\n    content: public override System.Threading.Tasks.Task CloseAsync (System.Net.WebSockets.WebSocketCloseStatus closeStatus, string statusDescription, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: closeStatus\n      type: System.Net.WebSockets.WebSocketCloseStatus\n      description: The WebSocket close status.\n    - id: statusDescription\n      type: System.String\n      description: A description of the close status.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: A cancellation token used to propagate notification that this  operation should be canceled.\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"Returns <xref:System.Threading.Tasks.Task>.  \\n  \\n The task object representing the asynchronous operation.\"\n  overload: System.Net.WebSockets.ClientWebSocket.CloseAsync*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.WebSockets.ClientWebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)\n  id: CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)\n  parent: System.Net.WebSockets.ClientWebSocket\n  langs:\n  - csharp\n  name: CloseOutputAsync(WebSocketCloseStatus,String,CancellationToken)\n  nameWithType: ClientWebSocket.CloseOutputAsync(WebSocketCloseStatus,String,CancellationToken)\n  fullName: System.Net.WebSockets.ClientWebSocket.CloseOutputAsync(WebSocketCloseStatus,String,CancellationToken)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.WebSockets\n  summary: Close the output for the <xref href=\"System.Net.WebSockets.ClientWebSocket\"></xref> instance as an asynchronous operation.\n  remarks: This operation will not block. The returned <xref:System.Threading.Tasks.Task> object will complete after the output on the <xref:System.Net.WebSockets.ClientWebSocket> instance is closed.\n  syntax:\n    content: public override System.Threading.Tasks.Task CloseOutputAsync (System.Net.WebSockets.WebSocketCloseStatus closeStatus, string statusDescription, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: closeStatus\n      type: System.Net.WebSockets.WebSocketCloseStatus\n      description: The WebSocket close status.\n    - id: statusDescription\n      type: System.String\n      description: A description of the close status.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: A cancellation token used to propagate notification that this  operation should be canceled.\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"Returns <xref:System.Threading.Tasks.Task>.  \\n  \\n The task object representing the asynchronous operation.\"\n  overload: System.Net.WebSockets.ClientWebSocket.CloseOutputAsync*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.WebSockets.ClientWebSocket.CloseStatus\n  id: CloseStatus\n  parent: System.Net.WebSockets.ClientWebSocket\n  langs:\n  - csharp\n  name: CloseStatus\n  nameWithType: ClientWebSocket.CloseStatus\n  fullName: System.Net.WebSockets.ClientWebSocket.CloseStatus\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.WebSockets\n  summary: Gets the reason why the close handshake was initiated on <xref href=\"System.Net.WebSockets.ClientWebSocket\"></xref> instance.\n  syntax:\n    content: public override Nullable<System.Net.WebSockets.WebSocketCloseStatus> CloseStatus { get; }\n    return:\n      type: System.Nullable{System.Net.WebSockets.WebSocketCloseStatus}\n      description: \"Returns <xref href=\\\"System.Net.WebSockets.WebSocketCloseStatus\\\"></xref>.  \\n  \\n The reason why the close handshake was initiated.\"\n  overload: System.Net.WebSockets.ClientWebSocket.CloseStatus*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.WebSockets.ClientWebSocket.CloseStatusDescription\n  id: CloseStatusDescription\n  parent: System.Net.WebSockets.ClientWebSocket\n  langs:\n  - csharp\n  name: CloseStatusDescription\n  nameWithType: ClientWebSocket.CloseStatusDescription\n  fullName: System.Net.WebSockets.ClientWebSocket.CloseStatusDescription\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.WebSockets\n  summary: Gets a description of the reason why the <xref href=\"System.Net.WebSockets.ClientWebSocket\"></xref> instance was closed.\n  syntax:\n    content: public override string CloseStatusDescription { get; }\n    return:\n      type: System.String\n      description: \"Returns <xref:System.String>.  \\n  \\n The description of the reason why the <xref href=\\\"System.Net.WebSockets.ClientWebSocket\\\"></xref> instance was closed.\"\n  overload: System.Net.WebSockets.ClientWebSocket.CloseStatusDescription*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.WebSockets.ClientWebSocket.ConnectAsync(System.Uri,System.Threading.CancellationToken)\n  id: ConnectAsync(System.Uri,System.Threading.CancellationToken)\n  parent: System.Net.WebSockets.ClientWebSocket\n  langs:\n  - csharp\n  name: ConnectAsync(Uri,CancellationToken)\n  nameWithType: ClientWebSocket.ConnectAsync(Uri,CancellationToken)\n  fullName: System.Net.WebSockets.ClientWebSocket.ConnectAsync(Uri,CancellationToken)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.WebSockets\n  summary: Connect to a WebSocket server as an asynchronous operation.\n  remarks: \"The ConnectAsync method initiates the WebSocket handshake with a remote network destination, and then negotiates the sub-protocol.  \\n  \\n For plain WebSocket connections, use the `ws://` scheme in the uri. For secure WebSocket connections over TLS/SSL, use the `wss://` scheme.  \\n  \\n This operation will not block. The returned <xref:System.Threading.Tasks.Task> object will complete after the connect request on the <xref:System.Net.WebSockets.ClientWebSocket> instance has completed.\"\n  syntax:\n    content: public System.Threading.Tasks.Task ConnectAsync (Uri uri, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: uri\n      type: System.Uri\n      description: The URI of the WebSocket server to connect to.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: A cancellation token used to propagate notification that the  operation should be canceled.\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"Returns <xref:System.Threading.Tasks.Task>.  \\n  \\n The task object representing the asynchronous operation.\"\n  overload: System.Net.WebSockets.ClientWebSocket.ConnectAsync*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.WebSockets.ClientWebSocket.Dispose\n  id: Dispose\n  parent: System.Net.WebSockets.ClientWebSocket\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: ClientWebSocket.Dispose()\n  fullName: System.Net.WebSockets.ClientWebSocket.Dispose()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.WebSockets\n  summary: Releases the unmanaged resources used by the <xref href=\"System.Net.WebSockets.ClientWebSocket\"></xref> instance.\n  syntax:\n    content: public override void Dispose ();\n    parameters: []\n  overload: System.Net.WebSockets.ClientWebSocket.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.WebSockets.ClientWebSocket.Options\n  id: Options\n  parent: System.Net.WebSockets.ClientWebSocket\n  langs:\n  - csharp\n  name: Options\n  nameWithType: ClientWebSocket.Options\n  fullName: System.Net.WebSockets.ClientWebSocket.Options\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.WebSockets\n  summary: Gets the WebSocket options for the <xref href=\"System.Net.WebSockets.ClientWebSocket\"></xref> instance.\n  syntax:\n    content: public System.Net.WebSockets.ClientWebSocketOptions Options { get; }\n    return:\n      type: System.Net.WebSockets.ClientWebSocketOptions\n      description: \"Returns <xref href=\\\"System.Net.WebSockets.ClientWebSocketOptions\\\"></xref>.  \\n  \\n The WebSocket options for the <xref href=\\\"System.Net.WebSockets.ClientWebSocket\\\"></xref> instance.\"\n  overload: System.Net.WebSockets.ClientWebSocket.Options*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.WebSockets.ClientWebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)\n  id: ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)\n  parent: System.Net.WebSockets.ClientWebSocket\n  langs:\n  - csharp\n  name: ReceiveAsync(ArraySegment<Byte>,CancellationToken)\n  nameWithType: ClientWebSocket.ReceiveAsync(ArraySegment<Byte>,CancellationToken)\n  fullName: System.Net.WebSockets.ClientWebSocket.ReceiveAsync(ArraySegment<Byte>,CancellationToken)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.WebSockets\n  summary: Receive data on <xref href=\"System.Net.WebSockets.ClientWebSocket\"></xref> as an asynchronous operation.\n  remarks: \"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the receive request on the <xref:System.Net.WebSockets.ClientWebSocket> instance has completed.  \\n  \\n Exactly one send and one receive is supported on each <xref:System.Net.WebSockets.ClientWebSocket> object in parallel.\"\n  syntax:\n    content: public override System.Threading.Tasks.Task<System.Net.WebSockets.WebSocketReceiveResult> ReceiveAsync (ArraySegment<byte> buffer, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: buffer\n      type: System.ArraySegment{System.Byte}\n      description: The buffer to receive the response.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: A cancellation token used to propagate notification that this  operation should be canceled.\n    return:\n      type: System.Threading.Tasks.Task{System.Net.WebSockets.WebSocketReceiveResult}\n      description: \"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;.  \\n  \\n The task object representing the asynchronous operation.\"\n  overload: System.Net.WebSockets.ClientWebSocket.ReceiveAsync*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.WebSockets.ClientWebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)\n  id: SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)\n  parent: System.Net.WebSockets.ClientWebSocket\n  langs:\n  - csharp\n  name: SendAsync(ArraySegment<Byte>,WebSocketMessageType,Boolean,CancellationToken)\n  nameWithType: ClientWebSocket.SendAsync(ArraySegment<Byte>,WebSocketMessageType,Boolean,CancellationToken)\n  fullName: System.Net.WebSockets.ClientWebSocket.SendAsync(ArraySegment<Byte>,WebSocketMessageType,Boolean,CancellationToken)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.WebSockets\n  summary: Send data on <xref href=\"System.Net.WebSockets.ClientWebSocket\"></xref> as an asynchronous operation.\n  remarks: \"This operation will not block. The returned <xref:System.Threading.Tasks.Task> object will complete after the send request on the <xref:System.Net.WebSockets.ClientWebSocket> instance has completed.  \\n  \\n Exactly one send and one receive is supported on each <xref:System.Net.WebSockets.ClientWebSocket> object in parallel.\"\n  syntax:\n    content: public override System.Threading.Tasks.Task SendAsync (ArraySegment<byte> buffer, System.Net.WebSockets.WebSocketMessageType messageType, bool endOfMessage, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: buffer\n      type: System.ArraySegment{System.Byte}\n      description: The buffer containing the message to be sent.\n    - id: messageType\n      type: System.Net.WebSockets.WebSocketMessageType\n      description: Specifies whether the buffer is clear text or in a binary format.\n    - id: endOfMessage\n      type: System.Boolean\n      description: Specifies whether this is the final asynchronous send. Set to <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if this is the final send; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> otherwise.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: A cancellation token used to propagate notification that this  operation should be canceled.\n    return:\n      type: System.Threading.Tasks.Task\n      description: The task object representing the asynchronous operation.\n  overload: System.Net.WebSockets.ClientWebSocket.SendAsync*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.WebSockets.ClientWebSocket.State\n  id: State\n  parent: System.Net.WebSockets.ClientWebSocket\n  langs:\n  - csharp\n  name: State\n  nameWithType: ClientWebSocket.State\n  fullName: System.Net.WebSockets.ClientWebSocket.State\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.WebSockets\n  summary: Get the WebSocket state of the <xref href=\"System.Net.WebSockets.ClientWebSocket\"></xref> instance.\n  syntax:\n    content: public override System.Net.WebSockets.WebSocketState State { get; }\n    return:\n      type: System.Net.WebSockets.WebSocketState\n      description: \"Returns <xref href=\\\"System.Net.WebSockets.WebSocketState\\\"></xref>.  \\n  \\n The WebSocket state of the <xref href=\\\"System.Net.WebSockets.ClientWebSocket\\\"></xref> instance.\"\n  overload: System.Net.WebSockets.ClientWebSocket.State*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.WebSockets.ClientWebSocket.SubProtocol\n  id: SubProtocol\n  parent: System.Net.WebSockets.ClientWebSocket\n  langs:\n  - csharp\n  name: SubProtocol\n  nameWithType: ClientWebSocket.SubProtocol\n  fullName: System.Net.WebSockets.ClientWebSocket.SubProtocol\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.WebSockets\n  summary: Gets the supported WebSocket sub-protocol for the <xref href=\"System.Net.WebSockets.ClientWebSocket\"></xref> instance.\n  syntax:\n    content: public override string SubProtocol { get; }\n    return:\n      type: System.String\n      description: \"Returns <xref:System.String>.  \\n  \\n The supported WebSocket sub-protocol.\"\n  overload: System.Net.WebSockets.ClientWebSocket.SubProtocol*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Net.WebSockets.WebSocket\n  isExternal: false\n  name: System.Net.WebSockets.WebSocket\n- uid: System.Net.WebSockets.ClientWebSocket.#ctor\n  parent: System.Net.WebSockets.ClientWebSocket\n  isExternal: false\n  name: ClientWebSocket()\n  nameWithType: ClientWebSocket.ClientWebSocket()\n  fullName: System.Net.WebSockets.ClientWebSocket.ClientWebSocket()\n- uid: System.Net.WebSockets.ClientWebSocket.Abort\n  parent: System.Net.WebSockets.ClientWebSocket\n  isExternal: false\n  name: Abort()\n  nameWithType: ClientWebSocket.Abort()\n  fullName: System.Net.WebSockets.ClientWebSocket.Abort()\n- uid: System.Net.WebSockets.ClientWebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)\n  parent: System.Net.WebSockets.ClientWebSocket\n  isExternal: false\n  name: CloseAsync(WebSocketCloseStatus,String,CancellationToken)\n  nameWithType: ClientWebSocket.CloseAsync(WebSocketCloseStatus,String,CancellationToken)\n  fullName: System.Net.WebSockets.ClientWebSocket.CloseAsync(WebSocketCloseStatus,String,CancellationToken)\n- uid: System.Threading.Tasks.Task\n  parent: System.Threading.Tasks\n  isExternal: true\n  name: Task\n  nameWithType: Task\n  fullName: System.Threading.Tasks.Task\n- uid: System.Net.WebSockets.WebSocketCloseStatus\n  parent: System.Net.WebSockets\n  isExternal: false\n  name: WebSocketCloseStatus\n  nameWithType: WebSocketCloseStatus\n  fullName: System.Net.WebSockets.WebSocketCloseStatus\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Threading.CancellationToken\n  parent: System.Threading\n  isExternal: true\n  name: CancellationToken\n  nameWithType: CancellationToken\n  fullName: System.Threading.CancellationToken\n- uid: System.Net.WebSockets.ClientWebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)\n  parent: System.Net.WebSockets.ClientWebSocket\n  isExternal: false\n  name: CloseOutputAsync(WebSocketCloseStatus,String,CancellationToken)\n  nameWithType: ClientWebSocket.CloseOutputAsync(WebSocketCloseStatus,String,CancellationToken)\n  fullName: System.Net.WebSockets.ClientWebSocket.CloseOutputAsync(WebSocketCloseStatus,String,CancellationToken)\n- uid: System.Net.WebSockets.ClientWebSocket.CloseStatus\n  parent: System.Net.WebSockets.ClientWebSocket\n  isExternal: false\n  name: CloseStatus\n  nameWithType: ClientWebSocket.CloseStatus\n  fullName: System.Net.WebSockets.ClientWebSocket.CloseStatus\n- uid: System.Nullable{System.Net.WebSockets.WebSocketCloseStatus}\n  parent: System\n  isExternal: true\n  name: Nullable<WebSocketCloseStatus>\n  nameWithType: Nullable<WebSocketCloseStatus>\n  fullName: System.Nullable<System.Net.WebSockets.WebSocketCloseStatus>\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    nameWithType: Nullable\n    fullName: Nullable<System.Net.WebSockets.WebSocketCloseStatus>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Net.WebSockets.WebSocketCloseStatus\n    name: WebSocketCloseStatus\n    nameWithType: WebSocketCloseStatus\n    fullName: WebSocketCloseStatus\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Net.WebSockets.ClientWebSocket.CloseStatusDescription\n  parent: System.Net.WebSockets.ClientWebSocket\n  isExternal: false\n  name: CloseStatusDescription\n  nameWithType: ClientWebSocket.CloseStatusDescription\n  fullName: System.Net.WebSockets.ClientWebSocket.CloseStatusDescription\n- uid: System.Net.WebSockets.ClientWebSocket.ConnectAsync(System.Uri,System.Threading.CancellationToken)\n  parent: System.Net.WebSockets.ClientWebSocket\n  isExternal: false\n  name: ConnectAsync(Uri,CancellationToken)\n  nameWithType: ClientWebSocket.ConnectAsync(Uri,CancellationToken)\n  fullName: System.Net.WebSockets.ClientWebSocket.ConnectAsync(Uri,CancellationToken)\n- uid: System.Uri\n  parent: System\n  isExternal: true\n  name: Uri\n  nameWithType: Uri\n  fullName: System.Uri\n- uid: System.Net.WebSockets.ClientWebSocket.Dispose\n  parent: System.Net.WebSockets.ClientWebSocket\n  isExternal: false\n  name: Dispose()\n  nameWithType: ClientWebSocket.Dispose()\n  fullName: System.Net.WebSockets.ClientWebSocket.Dispose()\n- uid: System.Net.WebSockets.ClientWebSocket.Options\n  parent: System.Net.WebSockets.ClientWebSocket\n  isExternal: false\n  name: Options\n  nameWithType: ClientWebSocket.Options\n  fullName: System.Net.WebSockets.ClientWebSocket.Options\n- uid: System.Net.WebSockets.ClientWebSocketOptions\n  parent: System.Net.WebSockets\n  isExternal: false\n  name: ClientWebSocketOptions\n  nameWithType: ClientWebSocketOptions\n  fullName: System.Net.WebSockets.ClientWebSocketOptions\n- uid: System.Net.WebSockets.ClientWebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)\n  parent: System.Net.WebSockets.ClientWebSocket\n  isExternal: false\n  name: ReceiveAsync(ArraySegment<Byte>,CancellationToken)\n  nameWithType: ClientWebSocket.ReceiveAsync(ArraySegment<Byte>,CancellationToken)\n  fullName: System.Net.WebSockets.ClientWebSocket.ReceiveAsync(ArraySegment<Byte>,CancellationToken)\n- uid: System.Threading.Tasks.Task{System.Net.WebSockets.WebSocketReceiveResult}\n  parent: System.Threading.Tasks\n  isExternal: true\n  name: Task<WebSocketReceiveResult>\n  nameWithType: Task<WebSocketReceiveResult>\n  fullName: System.Threading.Tasks.Task<System.Net.WebSockets.WebSocketReceiveResult>\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: Task<System.Net.WebSockets.WebSocketReceiveResult>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Net.WebSockets.WebSocketReceiveResult\n    name: WebSocketReceiveResult\n    nameWithType: WebSocketReceiveResult\n    fullName: WebSocketReceiveResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.ArraySegment{System.Byte}\n  parent: System\n  isExternal: true\n  name: ArraySegment<Byte>\n  nameWithType: ArraySegment<Byte>\n  fullName: System.ArraySegment<System.Byte>\n  spec.csharp:\n  - uid: System.ArraySegment`1\n    name: ArraySegment\n    nameWithType: ArraySegment\n    fullName: ArraySegment<System.Byte>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: Byte\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Net.WebSockets.ClientWebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)\n  parent: System.Net.WebSockets.ClientWebSocket\n  isExternal: false\n  name: SendAsync(ArraySegment<Byte>,WebSocketMessageType,Boolean,CancellationToken)\n  nameWithType: ClientWebSocket.SendAsync(ArraySegment<Byte>,WebSocketMessageType,Boolean,CancellationToken)\n  fullName: System.Net.WebSockets.ClientWebSocket.SendAsync(ArraySegment<Byte>,WebSocketMessageType,Boolean,CancellationToken)\n- uid: System.Net.WebSockets.WebSocketMessageType\n  parent: System.Net.WebSockets\n  isExternal: false\n  name: WebSocketMessageType\n  nameWithType: WebSocketMessageType\n  fullName: System.Net.WebSockets.WebSocketMessageType\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Net.WebSockets.ClientWebSocket.State\n  parent: System.Net.WebSockets.ClientWebSocket\n  isExternal: false\n  name: State\n  nameWithType: ClientWebSocket.State\n  fullName: System.Net.WebSockets.ClientWebSocket.State\n- uid: System.Net.WebSockets.WebSocketState\n  parent: System.Net.WebSockets\n  isExternal: false\n  name: WebSocketState\n  nameWithType: WebSocketState\n  fullName: System.Net.WebSockets.WebSocketState\n- uid: System.Net.WebSockets.ClientWebSocket.SubProtocol\n  parent: System.Net.WebSockets.ClientWebSocket\n  isExternal: false\n  name: SubProtocol\n  nameWithType: ClientWebSocket.SubProtocol\n  fullName: System.Net.WebSockets.ClientWebSocket.SubProtocol\n- uid: System.Net.WebSockets.ClientWebSocket.#ctor*\n  parent: System.Net.WebSockets.ClientWebSocket\n  isExternal: false\n  name: ClientWebSocket\n  nameWithType: ClientWebSocket.ClientWebSocket\n- uid: System.Net.WebSockets.ClientWebSocket.Abort*\n  parent: System.Net.WebSockets.ClientWebSocket\n  isExternal: false\n  name: Abort\n  nameWithType: ClientWebSocket.Abort\n- uid: System.Net.WebSockets.ClientWebSocket.CloseAsync*\n  parent: System.Net.WebSockets.ClientWebSocket\n  isExternal: false\n  name: CloseAsync\n  nameWithType: ClientWebSocket.CloseAsync\n- uid: System.Net.WebSockets.ClientWebSocket.CloseOutputAsync*\n  parent: System.Net.WebSockets.ClientWebSocket\n  isExternal: false\n  name: CloseOutputAsync\n  nameWithType: ClientWebSocket.CloseOutputAsync\n- uid: System.Net.WebSockets.ClientWebSocket.CloseStatus*\n  parent: System.Net.WebSockets.ClientWebSocket\n  isExternal: false\n  name: CloseStatus\n  nameWithType: ClientWebSocket.CloseStatus\n- uid: System.Net.WebSockets.ClientWebSocket.CloseStatusDescription*\n  parent: System.Net.WebSockets.ClientWebSocket\n  isExternal: false\n  name: CloseStatusDescription\n  nameWithType: ClientWebSocket.CloseStatusDescription\n- uid: System.Net.WebSockets.ClientWebSocket.ConnectAsync*\n  parent: System.Net.WebSockets.ClientWebSocket\n  isExternal: false\n  name: ConnectAsync\n  nameWithType: ClientWebSocket.ConnectAsync\n- uid: System.Net.WebSockets.ClientWebSocket.Dispose*\n  parent: System.Net.WebSockets.ClientWebSocket\n  isExternal: false\n  name: Dispose\n  nameWithType: ClientWebSocket.Dispose\n- uid: System.Net.WebSockets.ClientWebSocket.Options*\n  parent: System.Net.WebSockets.ClientWebSocket\n  isExternal: false\n  name: Options\n  nameWithType: ClientWebSocket.Options\n- uid: System.Net.WebSockets.ClientWebSocket.ReceiveAsync*\n  parent: System.Net.WebSockets.ClientWebSocket\n  isExternal: false\n  name: ReceiveAsync\n  nameWithType: ClientWebSocket.ReceiveAsync\n- uid: System.Net.WebSockets.ClientWebSocket.SendAsync*\n  parent: System.Net.WebSockets.ClientWebSocket\n  isExternal: false\n  name: SendAsync\n  nameWithType: ClientWebSocket.SendAsync\n- uid: System.Net.WebSockets.ClientWebSocket.State*\n  parent: System.Net.WebSockets.ClientWebSocket\n  isExternal: false\n  name: State\n  nameWithType: ClientWebSocket.State\n- uid: System.Net.WebSockets.ClientWebSocket.SubProtocol*\n  parent: System.Net.WebSockets.ClientWebSocket\n  isExternal: false\n  name: SubProtocol\n  nameWithType: ClientWebSocket.SubProtocol\n"}