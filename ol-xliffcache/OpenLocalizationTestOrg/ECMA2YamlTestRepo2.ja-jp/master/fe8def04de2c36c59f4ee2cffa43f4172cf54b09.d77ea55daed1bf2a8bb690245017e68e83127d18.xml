{"nodes":[{"pos":[1130,1471],"content":"Provides an interface to add and remove the event handlers for events that add, change, remove or rename components, and provides methods to raise a <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.Design.IComponentChangeService.ComponentChanged\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or <bpt id=\"p2\">&lt;xref href=\"System.ComponentModel.Design.IComponentChangeService.ComponentChanging\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> event.","needQuote":true,"needEscape":true,"source":"Provides an interface to add and remove the event handlers for events that add, change, remove or rename components, and provides methods to raise a <xref href=\"System.ComponentModel.Design.IComponentChangeService.ComponentChanged\"></xref> or <xref href=\"System.ComponentModel.Design.IComponentChangeService.ComponentChanging\"></xref> event."},{"pos":[1484,3441],"content":"IComponentChangeService provides an interface that can be used to indicate the methods that handle the following events:      -   <xref:System.ComponentModel.Design.IComponentChangeService.ComponentAdded>, raised when a component is added.      -   <xref:System.ComponentModel.Design.IComponentChangeService.ComponentAdding>, raised when a component is about to be added.      -   <xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged>, raised when a component is changed.      -   <xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanging>, raised when a component is about to be changed.      -   <xref:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved>, raised when a component is removed.      -   <xref:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving>, raised when a component is about to be removed.      -   <xref:System.ComponentModel.Design.IComponentChangeService.ComponentRename>, raised when a component is renamed.       Typically, the design environment raises these component add, change, remove, or rename events. Designers should call the methods of this interface when using <xref:System.ComponentModel.Design.DesignerTransaction> objects to provide undo and redo functionality for design-time actions that affect components. More information is available in the documentation for <xref:System.ComponentModel.Design.DesignerTransaction>. Generally, only the root designer handles these change notifications.       This service also provides methods that raise a component changed event or component changing event. A <xref:System.ComponentModel.PropertyDescriptor> or a component can indicate that a component has changed or is changing with the <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged%2A> and <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging%2A> methods, respectively.","needQuote":false,"needEscape":true,"nodes":[{"content":"IComponentChangeService provides an interface that can be used to indicate the methods that handle the following events:      -   <xref:System.ComponentModel.Design.IComponentChangeService.ComponentAdded>, raised when a component is added.      -   <xref:System.ComponentModel.Design.IComponentChangeService.ComponentAdding>, raised when a component is about to be added.      -   <xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged>, raised when a component is changed.      -   <xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanging>, raised when a component is about to be changed.      -   <xref:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved>, raised when a component is removed.      -   <xref:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving>, raised when a component is about to be removed.      -   <xref:System.ComponentModel.Design.IComponentChangeService.ComponentRename>, raised when a component is renamed.       Typically, the design environment raises these component add, change, remove, or rename events. Designers should call the methods of this interface when using <xref:System.ComponentModel.Design.DesignerTransaction> objects to provide undo and redo functionality for design-time actions that affect components. More information is available in the documentation for <xref:System.ComponentModel.Design.DesignerTransaction>. Generally, only the root designer handles these change notifications.       This service also provides methods that raise a component changed event or component changing event. A <xref:System.ComponentModel.PropertyDescriptor> or a component can indicate that a component has changed or is changing with the <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged%2A> and <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging%2A> methods, respectively.","pos":[0,1939],"nodes":[{"content":"IComponentChangeService provides an interface that can be used to indicate the methods that handle the following events:      -   &lt;xref:System.ComponentModel.Design.IComponentChangeService.ComponentAdded&gt;, raised when a component is added.","pos":[0,239],"source":"IComponentChangeService provides an interface that can be used to indicate the methods that handle the following events:      -   <xref:System.ComponentModel.Design.IComponentChangeService.ComponentAdded>, raised when a component is added."},{"content":"-   &lt;xref:System.ComponentModel.Design.IComponentChangeService.ComponentAdding&gt;, raised when a component is about to be added.","pos":[245,371],"source":"      -   <xref:System.ComponentModel.Design.IComponentChangeService.ComponentAdding>, raised when a component is about to be added."},{"content":"-   &lt;xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged&gt;, raised when a component is changed.","pos":[377,494],"source":"      -   <xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged>, raised when a component is changed."},{"content":"-   &lt;xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanging&gt;, raised when a component is about to be changed.","pos":[500,630],"source":"      -   <xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanging>, raised when a component is about to be changed."},{"content":"-   &lt;xref:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved&gt;, raised when a component is removed.","pos":[636,753],"source":"      -   <xref:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved>, raised when a component is removed."},{"content":"-   &lt;xref:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving&gt;, raised when a component is about to be removed.","pos":[759,889],"source":"      -   <xref:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving>, raised when a component is about to be removed."},{"content":"-   &lt;xref:System.ComponentModel.Design.IComponentChangeService.ComponentRename&gt;, raised when a component is renamed.","pos":[895,1011],"source":"      -   <xref:System.ComponentModel.Design.IComponentChangeService.ComponentRename>, raised when a component is renamed."},{"content":"Typically, the design environment raises these component add, change, remove, or rename events.","pos":[1018,1113]},{"content":"Designers should call the methods of this interface when using &lt;xref:System.ComponentModel.Design.DesignerTransaction&gt; objects to provide undo and redo functionality for design-time actions that affect components.","pos":[1114,1327],"source":" Designers should call the methods of this interface when using <xref:System.ComponentModel.Design.DesignerTransaction> objects to provide undo and redo functionality for design-time actions that affect components."},{"content":"More information is available in the documentation for &lt;xref:System.ComponentModel.Design.DesignerTransaction&gt;.","pos":[1328,1439],"source":" More information is available in the documentation for <xref:System.ComponentModel.Design.DesignerTransaction>."},{"content":"Generally, only the root designer handles these change notifications.","pos":[1440,1509]},{"content":"This service also provides methods that raise a component changed event or component changing event.","pos":[1516,1616]},{"content":"A &lt;xref:System.ComponentModel.PropertyDescriptor&gt; or a component can indicate that a component has changed or is changing with the &lt;xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged%2A&gt; and &lt;xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging%2A&gt; methods, respectively.","pos":[1617,1939],"source":" A <xref:System.ComponentModel.PropertyDescriptor> or a component can indicate that a component has changed or is changing with the <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged%2A> and <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging%2A> methods, respectively."}]}]},{"pos":[4574,4613],"content":"Occurs when a component has been added.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs when a component has been added.","pos":[0,39]}]},{"pos":[4625,4739],"content":"This event occurs during load and when new components are created by the user, after the component has been sited.","needQuote":true,"needEscape":true,"nodes":[{"content":"This event occurs during load and when new components are created by the user, after the component has been sited.","pos":[0,114]}]},{"pos":[4937,4949],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[5424,5481],"content":"Occurs when a component is in the process of being added.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs when a component is in the process of being added.","pos":[0,57]}]},{"pos":[5493,5645],"content":"This event occurs during load and when the user creates a new component. You can cancel the process of adding a component by throwing an exception here.","needQuote":true,"needEscape":true,"nodes":[{"content":"This event occurs during load and when the user creates a new component. You can cancel the process of adding a component by throwing an exception here.","pos":[0,152],"nodes":[{"content":"This event occurs during load and when the user creates a new component.","pos":[0,72]},{"content":"You can cancel the process of adding a component by throwing an exception here.","pos":[73,152]}]}]},{"pos":[5844,5856],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[6336,6377],"content":"Occurs when a component has been changed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs when a component has been changed.","pos":[0,41]}]},{"pos":[6390,7564],"content":"This event occurs when any component on the form changes. This event will not occur during form load and unload, because changes are expected at this time.      > [!NOTE] >  A <xref:System.ComponentModel.Design.DesignerTransaction> can raise multiple ComponentChanged events. Some ComponentChanged event handlers can interfere with expected sequences of events, such as if your code alters the values of properties while a transaction is occurring. A ComponentChanged event handler can also impair performance if it draws after each change while a <xref:System.ComponentModel.Design.DesignerTransaction> is in progress. In order to allow a <xref:System.ComponentModel.Design.DesignerTransaction> in process to complete without interruption or interference by your ComponentChanged event handler, you can test the state of the <xref:System.ComponentModel.Design.IDesignerHost.InTransaction%2A> property, and defer handling the change events until the completion of the transaction by adding a <xref:System.ComponentModel.Design.DesignerTransactionCloseEventHandler> which will raise your ComponentChanged event handler and remove itself upon completion of the transaction.","needQuote":false,"needEscape":true,"nodes":[{"content":"This event occurs when any component on the form changes.","pos":[0,57]},{"content":"This event will not occur during form load and unload, because changes are expected at this time.","pos":[58,155]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  A &lt;xref:System.ComponentModel.Design.DesignerTransaction&gt; can raise multiple ComponentChanged events.","pos":[161,275],"source":"      > [!NOTE] >  A <xref:System.ComponentModel.Design.DesignerTransaction> can raise multiple ComponentChanged events."},{"content":"Some ComponentChanged event handlers can interfere with expected sequences of events, such as if your code alters the values of properties while a transaction is occurring.","pos":[276,448]},{"content":"A ComponentChanged event handler can also impair performance if it draws after each change while a &lt;xref:System.ComponentModel.Design.DesignerTransaction&gt; is in progress.","pos":[449,619],"source":" A ComponentChanged event handler can also impair performance if it draws after each change while a <xref:System.ComponentModel.Design.DesignerTransaction> is in progress."},{"content":"In order to allow a &lt;xref:System.ComponentModel.Design.DesignerTransaction&gt; in process to complete without interruption or interference by your ComponentChanged event handler, you can test the state of the &lt;xref:System.ComponentModel.Design.IDesignerHost.InTransaction%2A&gt; property, and defer handling the change events until the completion of the transaction by adding a &lt;xref:System.ComponentModel.Design.DesignerTransactionCloseEventHandler&gt; which will raise your ComponentChanged event handler and remove itself upon completion of the transaction.","pos":[620,1171],"source":" In order to allow a <xref:System.ComponentModel.Design.DesignerTransaction> in process to complete without interruption or interference by your ComponentChanged event handler, you can test the state of the <xref:System.ComponentModel.Design.IDesignerHost.InTransaction%2A> property, and defer handling the change events until the completion of the transaction by adding a <xref:System.ComponentModel.Design.DesignerTransactionCloseEventHandler> which will raise your ComponentChanged event handler and remove itself upon completion of the transaction."}]},{"pos":[7779,7791],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[8276,8335],"content":"Occurs when a component is in the process of being changed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs when a component is in the process of being changed.","pos":[0,59]}]},{"pos":[8347,8594],"content":"This event occurs before the component is actually changed, and gives the designer a chance to abort the change or perform any pre-change processing. This event does not occur during form load and unload, because changes are expected at this time.","needQuote":true,"needEscape":true,"nodes":[{"content":"This event occurs before the component is actually changed, and gives the designer a chance to abort the change or perform any pre-change processing. This event does not occur during form load and unload, because changes are expected at this time.","pos":[0,247],"nodes":[{"content":"This event occurs before the component is actually changed, and gives the designer a chance to abort the change or perform any pre-change processing.","pos":[0,149]},{"content":"This event does not occur during form load and unload, because changes are expected at this time.","pos":[150,247]}]}]},{"pos":[8811,8823],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[9303,9344],"content":"Occurs when a component has been removed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs when a component has been removed.","pos":[0,41]}]},{"pos":[9356,9502],"content":"This event occurs during unload and when a component is deleted by the user. The event occurs before the site has been removed from the component.","needQuote":true,"needEscape":true,"nodes":[{"content":"This event occurs during unload and when a component is deleted by the user. The event occurs before the site has been removed from the component.","pos":[0,146],"nodes":[{"content":"This event occurs during unload and when a component is deleted by the user.","pos":[0,76]},{"content":"The event occurs before the site has been removed from the component.","pos":[77,146]}]}]},{"pos":[9702,9714],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[10199,10258],"content":"Occurs when a component is in the process of being removed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs when a component is in the process of being removed.","pos":[0,59]}]},{"pos":[10270,10422],"content":"This event occurs during unload and when the user deletes a component. You can cancel the process of removing a component by throwing an exception here.","needQuote":true,"needEscape":true,"nodes":[{"content":"This event occurs during unload and when the user deletes a component. You can cancel the process of removing a component by throwing an exception here.","pos":[0,152],"nodes":[{"content":"This event occurs during unload and when the user deletes a component.","pos":[0,70]},{"content":"You can cancel the process of removing a component by throwing an exception here.","pos":[71,152]}]}]},{"pos":[10623,10635],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[11110,11145],"content":"Occurs when a component is renamed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs when a component is renamed.","pos":[0,35]}]},{"pos":[11157,11302],"content":"This event occurs after the <xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged> event when a component has been renamed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This event occurs after the &lt;xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged&gt; event when a component has been renamed.","pos":[0,145],"source":"This event occurs after the <xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged> event when a component has been renamed."}]},{"pos":[11513,11525],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[12297,12379],"content":"Announces to the component change service that a particular component has changed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Announces to the component change service that a particular component has changed.","pos":[0,82]}]},{"pos":[12392,13432],"content":"This method raises the <xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged> event.       Most designers that ship with the [!INCLUDE[winsdklong](~/add/includes/winsdklong-md.md)], as well as the Visual Studio design-time environment, typically raise this event for you when a component in a project is changed, so most of the time you do not need to explicitly call this method. The appropriate <xref:System.ComponentModel.Design.IComponentChangeService> events are automatically raised when a <xref:System.ComponentModel.PropertyDescriptor> is used to change a property value or components are added or removed from the <xref:System.ComponentModel.Design.IDesignerHost> container.       Before calling OnComponentChanged, first call <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging%2A> to indicate that a component is about to change, and make the change. Then call OnComponentChanged to raise the <xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged> event.","needQuote":false,"needEscape":true,"nodes":[{"content":"This method raises the &lt;xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged&gt; event.","pos":[0,106],"source":"This method raises the <xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged> event."},{"content":"Most designers that ship with the <ph id=\"ph1\">[!INCLUDE[winsdklong](~/add/includes/winsdklong-md.md)]</ph>, as well as the Visual Studio design-time environment, typically raise this event for you when a component in a project is changed, so most of the time you do not need to explicitly call this method.","pos":[113,402],"source":"       Most designers that ship with the [!INCLUDE[winsdklong](~/add/includes/winsdklong-md.md)], as well as the Visual Studio design-time environment, typically raise this event for you when a component in a project is changed, so most of the time you do not need to explicitly call this method."},{"content":"The appropriate &lt;xref:System.ComponentModel.Design.IComponentChangeService&gt; events are automatically raised when a &lt;xref:System.ComponentModel.PropertyDescriptor&gt; is used to change a property value or components are added or removed from the &lt;xref:System.ComponentModel.Design.IDesignerHost&gt; container.","pos":[403,705],"source":" The appropriate <xref:System.ComponentModel.Design.IComponentChangeService> events are automatically raised when a <xref:System.ComponentModel.PropertyDescriptor> is used to change a property value or components are added or removed from the <xref:System.ComponentModel.Design.IDesignerHost> container."},{"content":"Before calling OnComponentChanged, first call &lt;xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging%2A&gt; to indicate that a component is about to change, and make the change.","pos":[712,910],"source":"       Before calling OnComponentChanged, first call <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging%2A> to indicate that a component is about to change, and make the change."},{"content":"Then call OnComponentChanged to raise the &lt;xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged&gt; event.","pos":[911,1036],"source":" Then call OnComponentChanged to raise the <xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged> event."}]},{"pos":[13670,13701],"content":"The component that has changed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The component that has changed.","pos":[0,31]}]},{"pos":[13789,13936],"content":"The member that has changed. This is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if this change is not related to a single member.","needQuote":true,"needEscape":true,"nodes":[{"content":"The member that has changed.","pos":[0,28]},{"content":"This is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if this change is not related to a single member.","pos":[29,147],"source":" This is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if this change is not related to a single member."}]},{"pos":[14001,14131],"content":"The old value of the member. This is valid only if the member is not <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The old value of the member.","pos":[0,28]},{"content":"This is valid only if the member is not <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[29,130],"source":" This is valid only if the member is not <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[14196,14326],"content":"The new value of the member. This is valid only if the member is not <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The new value of the member.","pos":[0,28]},{"content":"This is valid only if the member is not <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[29,130],"source":" This is valid only if the member is not <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[15090,15172],"content":"Announces to the component change service that a particular component is changing.","needQuote":true,"needEscape":true,"nodes":[{"content":"Announces to the component change service that a particular component is changing.","pos":[0,82]}]},{"pos":[15185,15858],"content":"This method raises the <xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanging> event.       Most designers included with the [!INCLUDE[winsdklong](~/add/includes/winsdklong-md.md)], as well as the Visual Studio design-time environment, typically raise this event automatically; so most of the time, you do not need to explicitly call this method. The appropriate <xref:System.ComponentModel.Design.IComponentChangeService> events are automatically raised when a <xref:System.ComponentModel.PropertyDescriptor> is used to change a property value or components are added or removed from the <xref:System.ComponentModel.Design.IDesignerHost> container.","needQuote":false,"needEscape":true,"nodes":[{"content":"This method raises the &lt;xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanging&gt; event.","pos":[0,107],"source":"This method raises the <xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanging> event."},{"content":"Most designers included with the <ph id=\"ph1\">[!INCLUDE[winsdklong](~/add/includes/winsdklong-md.md)]</ph>, as well as the Visual Studio design-time environment, typically raise this event automatically; so most of the time, you do not need to explicitly call this method.","pos":[114,368],"source":"       Most designers included with the [!INCLUDE[winsdklong](~/add/includes/winsdklong-md.md)], as well as the Visual Studio design-time environment, typically raise this event automatically; so most of the time, you do not need to explicitly call this method."},{"content":"The appropriate &lt;xref:System.ComponentModel.Design.IComponentChangeService&gt; events are automatically raised when a &lt;xref:System.ComponentModel.PropertyDescriptor&gt; is used to change a property value or components are added or removed from the &lt;xref:System.ComponentModel.Design.IDesignerHost&gt; container.","pos":[369,671],"source":" The appropriate <xref:System.ComponentModel.Design.IComponentChangeService> events are automatically raised when a <xref:System.ComponentModel.PropertyDescriptor> is used to change a property value or components are added or removed from the <xref:System.ComponentModel.Design.IDesignerHost> container."}]},{"pos":[16063,16101],"content":"The component that is about to change.","needQuote":true,"needEscape":true,"nodes":[{"content":"The component that is about to change.","pos":[0,38]}]},{"pos":[16189,16336],"content":"The member that is changing. This is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if this change is not related to a single member.","needQuote":true,"needEscape":true,"nodes":[{"content":"The member that is changing.","pos":[0,28]},{"content":"This is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if this change is not related to a single member.","pos":[29,147],"source":" This is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if this change is not related to a single member."}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ComponentModel.Design.IComponentChangeService\n  id: IComponentChangeService\n  children:\n  - System.ComponentModel.Design.IComponentChangeService.ComponentAdded\n  - System.ComponentModel.Design.IComponentChangeService.ComponentAdding\n  - System.ComponentModel.Design.IComponentChangeService.ComponentChanged\n  - System.ComponentModel.Design.IComponentChangeService.ComponentChanging\n  - System.ComponentModel.Design.IComponentChangeService.ComponentRemoved\n  - System.ComponentModel.Design.IComponentChangeService.ComponentRemoving\n  - System.ComponentModel.Design.IComponentChangeService.ComponentRename\n  - System.ComponentModel.Design.IComponentChangeService.OnComponentChanged(System.Object,System.ComponentModel.MemberDescriptor,System.Object,System.Object)\n  - System.ComponentModel.Design.IComponentChangeService.OnComponentChanging(System.Object,System.ComponentModel.MemberDescriptor)\n  langs:\n  - csharp\n  name: IComponentChangeService\n  nameWithType: IComponentChangeService\n  fullName: System.ComponentModel.Design.IComponentChangeService\n  type: Interface\n  summary: Provides an interface to add and remove the event handlers for events that add, change, remove or rename components, and provides methods to raise a <xref href=\"System.ComponentModel.Design.IComponentChangeService.ComponentChanged\"></xref> or <xref href=\"System.ComponentModel.Design.IComponentChangeService.ComponentChanging\"></xref> event.\n  remarks: \"IComponentChangeService provides an interface that can be used to indicate the methods that handle the following events:  \\n  \\n-   <xref:System.ComponentModel.Design.IComponentChangeService.ComponentAdded>, raised when a component is added.  \\n  \\n-   <xref:System.ComponentModel.Design.IComponentChangeService.ComponentAdding>, raised when a component is about to be added.  \\n  \\n-   <xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged>, raised when a component is changed.  \\n  \\n-   <xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanging>, raised when a component is about to be changed.  \\n  \\n-   <xref:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved>, raised when a component is removed.  \\n  \\n-   <xref:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving>, raised when a component is about to be removed.  \\n  \\n-   <xref:System.ComponentModel.Design.IComponentChangeService.ComponentRename>, raised when a component is renamed.  \\n  \\n Typically, the design environment raises these component add, change, remove, or rename events. Designers should call the methods of this interface when using <xref:System.ComponentModel.Design.DesignerTransaction> objects to provide undo and redo functionality for design-time actions that affect components. More information is available in the documentation for <xref:System.ComponentModel.Design.DesignerTransaction>. Generally, only the root designer handles these change notifications.  \\n  \\n This service also provides methods that raise a component changed event or component changing event. A <xref:System.ComponentModel.PropertyDescriptor> or a component can indicate that a component has changed or is changing with the <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged%2A> and <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging%2A> methods, respectively.\"\n  example:\n  - \"This following example demonstrates how to use the IComponentChangeService interface to receive notifications about the addition of, removal of, and changes to components in design mode.  \\n  \\n [!code-vb[IComponentChangeServiceSample2#1](~/add/codesnippet/visualbasic/t-system.componentmodel._48_1.vb)]\\n [!code-cpp[IComponentChangeServiceSample2#1](~/add/codesnippet/cpp/t-system.componentmodel._48_1.cpp)]\\n [!code-cs[IComponentChangeServiceSample2#1](~/add/codesnippet/csharp/t-system.componentmodel._48_1.cs)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public interface IComponentChangeService\n  implements: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Design.IComponentChangeService.ComponentAdded\n  id: ComponentAdded\n  parent: System.ComponentModel.Design.IComponentChangeService\n  langs:\n  - csharp\n  name: ComponentAdded\n  nameWithType: IComponentChangeService.ComponentAdded\n  fullName: System.ComponentModel.Design.IComponentChangeService.ComponentAdded\n  type: Event\n  assemblies:\n  - System\n  namespace: System.ComponentModel.Design\n  summary: Occurs when a component has been added.\n  remarks: This event occurs during load and when new components are created by the user, after the component has been sited.\n  syntax:\n    content: public event System.ComponentModel.Design.ComponentEventHandler ComponentAdded;\n    return:\n      type: System.ComponentModel.Design.ComponentEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Design.IComponentChangeService.ComponentAdding\n  id: ComponentAdding\n  parent: System.ComponentModel.Design.IComponentChangeService\n  langs:\n  - csharp\n  name: ComponentAdding\n  nameWithType: IComponentChangeService.ComponentAdding\n  fullName: System.ComponentModel.Design.IComponentChangeService.ComponentAdding\n  type: Event\n  assemblies:\n  - System\n  namespace: System.ComponentModel.Design\n  summary: Occurs when a component is in the process of being added.\n  remarks: This event occurs during load and when the user creates a new component. You can cancel the process of adding a component by throwing an exception here.\n  syntax:\n    content: public event System.ComponentModel.Design.ComponentEventHandler ComponentAdding;\n    return:\n      type: System.ComponentModel.Design.ComponentEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Design.IComponentChangeService.ComponentChanged\n  id: ComponentChanged\n  parent: System.ComponentModel.Design.IComponentChangeService\n  langs:\n  - csharp\n  name: ComponentChanged\n  nameWithType: IComponentChangeService.ComponentChanged\n  fullName: System.ComponentModel.Design.IComponentChangeService.ComponentChanged\n  type: Event\n  assemblies:\n  - System\n  namespace: System.ComponentModel.Design\n  summary: Occurs when a component has been changed.\n  remarks: \"This event occurs when any component on the form changes. This event will not occur during form load and unload, because changes are expected at this time.  \\n  \\n> [!NOTE]\\n>  A <xref:System.ComponentModel.Design.DesignerTransaction> can raise multiple ComponentChanged events. Some ComponentChanged event handlers can interfere with expected sequences of events, such as if your code alters the values of properties while a transaction is occurring. A ComponentChanged event handler can also impair performance if it draws after each change while a <xref:System.ComponentModel.Design.DesignerTransaction> is in progress. In order to allow a <xref:System.ComponentModel.Design.DesignerTransaction> in process to complete without interruption or interference by your ComponentChanged event handler, you can test the state of the <xref:System.ComponentModel.Design.IDesignerHost.InTransaction%2A> property, and defer handling the change events until the completion of the transaction by adding a <xref:System.ComponentModel.Design.DesignerTransactionCloseEventHandler> which will raise your ComponentChanged event handler and remove itself upon completion of the transaction.\"\n  syntax:\n    content: public event System.ComponentModel.Design.ComponentChangedEventHandler ComponentChanged;\n    return:\n      type: System.ComponentModel.Design.ComponentChangedEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Design.IComponentChangeService.ComponentChanging\n  id: ComponentChanging\n  parent: System.ComponentModel.Design.IComponentChangeService\n  langs:\n  - csharp\n  name: ComponentChanging\n  nameWithType: IComponentChangeService.ComponentChanging\n  fullName: System.ComponentModel.Design.IComponentChangeService.ComponentChanging\n  type: Event\n  assemblies:\n  - System\n  namespace: System.ComponentModel.Design\n  summary: Occurs when a component is in the process of being changed.\n  remarks: This event occurs before the component is actually changed, and gives the designer a chance to abort the change or perform any pre-change processing. This event does not occur during form load and unload, because changes are expected at this time.\n  syntax:\n    content: public event System.ComponentModel.Design.ComponentChangingEventHandler ComponentChanging;\n    return:\n      type: System.ComponentModel.Design.ComponentChangingEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Design.IComponentChangeService.ComponentRemoved\n  id: ComponentRemoved\n  parent: System.ComponentModel.Design.IComponentChangeService\n  langs:\n  - csharp\n  name: ComponentRemoved\n  nameWithType: IComponentChangeService.ComponentRemoved\n  fullName: System.ComponentModel.Design.IComponentChangeService.ComponentRemoved\n  type: Event\n  assemblies:\n  - System\n  namespace: System.ComponentModel.Design\n  summary: Occurs when a component has been removed.\n  remarks: This event occurs during unload and when a component is deleted by the user. The event occurs before the site has been removed from the component.\n  syntax:\n    content: public event System.ComponentModel.Design.ComponentEventHandler ComponentRemoved;\n    return:\n      type: System.ComponentModel.Design.ComponentEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Design.IComponentChangeService.ComponentRemoving\n  id: ComponentRemoving\n  parent: System.ComponentModel.Design.IComponentChangeService\n  langs:\n  - csharp\n  name: ComponentRemoving\n  nameWithType: IComponentChangeService.ComponentRemoving\n  fullName: System.ComponentModel.Design.IComponentChangeService.ComponentRemoving\n  type: Event\n  assemblies:\n  - System\n  namespace: System.ComponentModel.Design\n  summary: Occurs when a component is in the process of being removed.\n  remarks: This event occurs during unload and when the user deletes a component. You can cancel the process of removing a component by throwing an exception here.\n  syntax:\n    content: public event System.ComponentModel.Design.ComponentEventHandler ComponentRemoving;\n    return:\n      type: System.ComponentModel.Design.ComponentEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Design.IComponentChangeService.ComponentRename\n  id: ComponentRename\n  parent: System.ComponentModel.Design.IComponentChangeService\n  langs:\n  - csharp\n  name: ComponentRename\n  nameWithType: IComponentChangeService.ComponentRename\n  fullName: System.ComponentModel.Design.IComponentChangeService.ComponentRename\n  type: Event\n  assemblies:\n  - System\n  namespace: System.ComponentModel.Design\n  summary: Occurs when a component is renamed.\n  remarks: This event occurs after the <xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged> event when a component has been renamed.\n  syntax:\n    content: public event System.ComponentModel.Design.ComponentRenameEventHandler ComponentRename;\n    return:\n      type: System.ComponentModel.Design.ComponentRenameEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Design.IComponentChangeService.OnComponentChanged(System.Object,System.ComponentModel.MemberDescriptor,System.Object,System.Object)\n  id: OnComponentChanged(System.Object,System.ComponentModel.MemberDescriptor,System.Object,System.Object)\n  parent: System.ComponentModel.Design.IComponentChangeService\n  langs:\n  - csharp\n  name: OnComponentChanged(Object,MemberDescriptor,Object,Object)\n  nameWithType: IComponentChangeService.OnComponentChanged(Object,MemberDescriptor,Object,Object)\n  fullName: System.ComponentModel.Design.IComponentChangeService.OnComponentChanged(Object,MemberDescriptor,Object,Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel.Design\n  summary: Announces to the component change service that a particular component has changed.\n  remarks: \"This method raises the <xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged> event.  \\n  \\n Most designers that ship with the [!INCLUDE[winsdklong](~/add/includes/winsdklong-md.md)], as well as the Visual Studio design-time environment, typically raise this event for you when a component in a project is changed, so most of the time you do not need to explicitly call this method. The appropriate <xref:System.ComponentModel.Design.IComponentChangeService> events are automatically raised when a <xref:System.ComponentModel.PropertyDescriptor> is used to change a property value or components are added or removed from the <xref:System.ComponentModel.Design.IDesignerHost> container.  \\n  \\n Before calling OnComponentChanged, first call <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging%2A> to indicate that a component is about to change, and make the change. Then call OnComponentChanged to raise the <xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanged> event.\"\n  syntax:\n    content: public void OnComponentChanged (object component, System.ComponentModel.MemberDescriptor member, object oldValue, object newValue);\n    parameters:\n    - id: component\n      type: System.Object\n      description: The component that has changed.\n    - id: member\n      type: System.ComponentModel.MemberDescriptor\n      description: The member that has changed. This is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if this change is not related to a single member.\n    - id: oldValue\n      type: System.Object\n      description: The old value of the member. This is valid only if the member is not <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n    - id: newValue\n      type: System.Object\n      description: The new value of the member. This is valid only if the member is not <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.ComponentModel.Design.IComponentChangeService.OnComponentChanged*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Design.IComponentChangeService.OnComponentChanging(System.Object,System.ComponentModel.MemberDescriptor)\n  id: OnComponentChanging(System.Object,System.ComponentModel.MemberDescriptor)\n  parent: System.ComponentModel.Design.IComponentChangeService\n  langs:\n  - csharp\n  name: OnComponentChanging(Object,MemberDescriptor)\n  nameWithType: IComponentChangeService.OnComponentChanging(Object,MemberDescriptor)\n  fullName: System.ComponentModel.Design.IComponentChangeService.OnComponentChanging(Object,MemberDescriptor)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel.Design\n  summary: Announces to the component change service that a particular component is changing.\n  remarks: \"This method raises the <xref:System.ComponentModel.Design.IComponentChangeService.ComponentChanging> event.  \\n  \\n Most designers included with the [!INCLUDE[winsdklong](~/add/includes/winsdklong-md.md)], as well as the Visual Studio design-time environment, typically raise this event automatically; so most of the time, you do not need to explicitly call this method. The appropriate <xref:System.ComponentModel.Design.IComponentChangeService> events are automatically raised when a <xref:System.ComponentModel.PropertyDescriptor> is used to change a property value or components are added or removed from the <xref:System.ComponentModel.Design.IDesignerHost> container.\"\n  syntax:\n    content: public void OnComponentChanging (object component, System.ComponentModel.MemberDescriptor member);\n    parameters:\n    - id: component\n      type: System.Object\n      description: The component that is about to change.\n    - id: member\n      type: System.ComponentModel.MemberDescriptor\n      description: The member that is changing. This is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if this change is not related to a single member.\n  overload: System.ComponentModel.Design.IComponentChangeService.OnComponentChanging*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.ComponentModel.Design.IComponentChangeService.ComponentAdded\n  parent: System.ComponentModel.Design.IComponentChangeService\n  isExternal: false\n  name: ComponentAdded\n  nameWithType: IComponentChangeService.ComponentAdded\n  fullName: System.ComponentModel.Design.IComponentChangeService.ComponentAdded\n- uid: System.ComponentModel.Design.ComponentEventHandler\n  parent: System.ComponentModel.Design\n  isExternal: false\n  name: ComponentEventHandler\n  nameWithType: ComponentEventHandler\n  fullName: System.ComponentModel.Design.ComponentEventHandler\n- uid: System.ComponentModel.Design.IComponentChangeService.ComponentAdding\n  parent: System.ComponentModel.Design.IComponentChangeService\n  isExternal: false\n  name: ComponentAdding\n  nameWithType: IComponentChangeService.ComponentAdding\n  fullName: System.ComponentModel.Design.IComponentChangeService.ComponentAdding\n- uid: System.ComponentModel.Design.IComponentChangeService.ComponentChanged\n  parent: System.ComponentModel.Design.IComponentChangeService\n  isExternal: false\n  name: ComponentChanged\n  nameWithType: IComponentChangeService.ComponentChanged\n  fullName: System.ComponentModel.Design.IComponentChangeService.ComponentChanged\n- uid: System.ComponentModel.Design.ComponentChangedEventHandler\n  parent: System.ComponentModel.Design\n  isExternal: false\n  name: ComponentChangedEventHandler\n  nameWithType: ComponentChangedEventHandler\n  fullName: System.ComponentModel.Design.ComponentChangedEventHandler\n- uid: System.ComponentModel.Design.IComponentChangeService.ComponentChanging\n  parent: System.ComponentModel.Design.IComponentChangeService\n  isExternal: false\n  name: ComponentChanging\n  nameWithType: IComponentChangeService.ComponentChanging\n  fullName: System.ComponentModel.Design.IComponentChangeService.ComponentChanging\n- uid: System.ComponentModel.Design.ComponentChangingEventHandler\n  parent: System.ComponentModel.Design\n  isExternal: false\n  name: ComponentChangingEventHandler\n  nameWithType: ComponentChangingEventHandler\n  fullName: System.ComponentModel.Design.ComponentChangingEventHandler\n- uid: System.ComponentModel.Design.IComponentChangeService.ComponentRemoved\n  parent: System.ComponentModel.Design.IComponentChangeService\n  isExternal: false\n  name: ComponentRemoved\n  nameWithType: IComponentChangeService.ComponentRemoved\n  fullName: System.ComponentModel.Design.IComponentChangeService.ComponentRemoved\n- uid: System.ComponentModel.Design.IComponentChangeService.ComponentRemoving\n  parent: System.ComponentModel.Design.IComponentChangeService\n  isExternal: false\n  name: ComponentRemoving\n  nameWithType: IComponentChangeService.ComponentRemoving\n  fullName: System.ComponentModel.Design.IComponentChangeService.ComponentRemoving\n- uid: System.ComponentModel.Design.IComponentChangeService.ComponentRename\n  parent: System.ComponentModel.Design.IComponentChangeService\n  isExternal: false\n  name: ComponentRename\n  nameWithType: IComponentChangeService.ComponentRename\n  fullName: System.ComponentModel.Design.IComponentChangeService.ComponentRename\n- uid: System.ComponentModel.Design.ComponentRenameEventHandler\n  parent: System.ComponentModel.Design\n  isExternal: false\n  name: ComponentRenameEventHandler\n  nameWithType: ComponentRenameEventHandler\n  fullName: System.ComponentModel.Design.ComponentRenameEventHandler\n- uid: System.ComponentModel.Design.IComponentChangeService.OnComponentChanged(System.Object,System.ComponentModel.MemberDescriptor,System.Object,System.Object)\n  parent: System.ComponentModel.Design.IComponentChangeService\n  isExternal: false\n  name: OnComponentChanged(Object,MemberDescriptor,Object,Object)\n  nameWithType: IComponentChangeService.OnComponentChanged(Object,MemberDescriptor,Object,Object)\n  fullName: System.ComponentModel.Design.IComponentChangeService.OnComponentChanged(Object,MemberDescriptor,Object,Object)\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ComponentModel.MemberDescriptor\n  parent: System.ComponentModel\n  isExternal: false\n  name: MemberDescriptor\n  nameWithType: MemberDescriptor\n  fullName: System.ComponentModel.MemberDescriptor\n- uid: System.ComponentModel.Design.IComponentChangeService.OnComponentChanging(System.Object,System.ComponentModel.MemberDescriptor)\n  parent: System.ComponentModel.Design.IComponentChangeService\n  isExternal: false\n  name: OnComponentChanging(Object,MemberDescriptor)\n  nameWithType: IComponentChangeService.OnComponentChanging(Object,MemberDescriptor)\n  fullName: System.ComponentModel.Design.IComponentChangeService.OnComponentChanging(Object,MemberDescriptor)\n- uid: System.ComponentModel.Design.IComponentChangeService.OnComponentChanged*\n  parent: System.ComponentModel.Design.IComponentChangeService\n  isExternal: false\n  name: OnComponentChanged\n  nameWithType: IComponentChangeService.OnComponentChanged\n- uid: System.ComponentModel.Design.IComponentChangeService.OnComponentChanging*\n  parent: System.ComponentModel.Design.IComponentChangeService\n  isExternal: false\n  name: OnComponentChanging\n  nameWithType: IComponentChangeService.OnComponentChanging\n"}