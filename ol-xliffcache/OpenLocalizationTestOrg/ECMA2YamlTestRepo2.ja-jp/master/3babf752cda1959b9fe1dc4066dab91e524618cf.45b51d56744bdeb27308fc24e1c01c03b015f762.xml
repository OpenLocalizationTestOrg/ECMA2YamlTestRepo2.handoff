{"nodes":[{"pos":[1597,1774],"content":"Provides a base class for the event manager that is used in the *weak event pattern*. The manager adds and removes listeners for events (or callbacks) that also use the pattern.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides a base class for the event manager that is used in the <bpt id=\"p1\">*</bpt>weak event pattern<ept id=\"p1\">*</ept>.","pos":[0,85],"source":"Provides a base class for the event manager that is used in the *weak event pattern*."},{"content":"The manager adds and removes listeners for events (or callbacks) that also use the pattern.","pos":[86,177]}]},{"pos":[1787,2565],"content":"You typically use the weak event pattern when the event source has an object lifetime that is independent of the event listeners. Using the central event dispatching capability of a WeakEventManager allows the listener's handlers to be garbage collected even if the source object persists. By contrast, a regular event hookup using the `+=` operator causes the potentially disconnected source to hold a reference to the listeners. This prevents the receiver from being garbage collected in a timely fashion.       One common situation where the lifetime relationships between sources and listeners should use of the weak event pattern is the handling of update events coming from data bindings.       The weak event pattern can also be used for callbacks and regular events.","needQuote":false,"needEscape":true,"nodes":[{"content":"You typically use the weak event pattern when the event source has an object lifetime that is independent of the event listeners.","pos":[0,129]},{"content":"Using the central event dispatching capability of a WeakEventManager allows the listener's handlers to be garbage collected even if the source object persists.","pos":[130,289]},{"content":"By contrast, a regular event hookup using the <ph id=\"ph1\">`+=`</ph> operator causes the potentially disconnected source to hold a reference to the listeners.","pos":[290,430],"source":" By contrast, a regular event hookup using the `+=` operator causes the potentially disconnected source to hold a reference to the listeners."},{"content":"This prevents the receiver from being garbage collected in a timely fashion.","pos":[431,507]},{"content":"One common situation where the lifetime relationships between sources and listeners should use of the weak event pattern is the handling of update events coming from data bindings.","pos":[514,694]},{"content":"The weak event pattern can also be used for callbacks and regular events.","pos":[701,774]}]},{"pos":[3340,3443],"content":"Initializes base class values when it is used as the initializer by the constructor of a derived class.","needQuote":true,"needEscape":true,"nodes":[{"content":"Initializes base class values when it is used as the initializer by the constructor of a derived class.","pos":[0,103]}]},{"pos":[4067,4117],"content":"Delivers the event being managed to each listener.","needQuote":true,"needEscape":true,"nodes":[{"content":"Delivers the event being managed to each listener.","pos":[0,50]}]},{"pos":[4130,5448],"content":"Call the DeliverEvent method from within the event handlers that are added or removed by the <xref:System.Windows.WeakEventManager.StartListening%2A> and <xref:System.Windows.WeakEventManager.StopListening%2A> implementations of subclasses.       If you call the <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> method in your `AddListener` implementation of your class, the list of listeners receiving the event is kept in an underlying collection. (`AddListener` is not part of an interface or class contract. `AddListener` is the suggested name for the method of your manager class that calls <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> and adds weak event pattern listeners for the event.)       <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> adds listeners to a single list. If your manager implementation maintains more than one list of listeners per event, do not use DeliverEvent or <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>. Instead, your implementation should create its own <xref:System.Windows.WeakEventManager.ListenerList> instances, `AddListener` should add listeners to the appropriate list, and events should be delivered to the appropriate listener list by calling <xref:System.Windows.WeakEventManager.DeliverEventToList%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"Call the DeliverEvent method from within the event handlers that are added or removed by the &lt;xref:System.Windows.WeakEventManager.StartListening%2A&gt; and &lt;xref:System.Windows.WeakEventManager.StopListening%2A&gt; implementations of subclasses.","pos":[0,240],"source":"Call the DeliverEvent method from within the event handlers that are added or removed by the <xref:System.Windows.WeakEventManager.StartListening%2A> and <xref:System.Windows.WeakEventManager.StopListening%2A> implementations of subclasses."},{"content":"If you call the &lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt; method in your <ph id=\"ph1\">`AddListener`</ph> implementation of your class, the list of listeners receiving the event is kept in an underlying collection.","pos":[247,463],"source":"       If you call the <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> method in your `AddListener` implementation of your class, the list of listeners receiving the event is kept in an underlying collection."},{"content":"(<ph id=\"ph1\">`AddListener`</ph> is not part of an interface or class contract.","pos":[464,525],"source":" (`AddListener` is not part of an interface or class contract."},{"content":"<ph id=\"ph1\">`AddListener`</ph> is the suggested name for the method of your manager class that calls &lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt; and adds weak event pattern listeners for the event.)       &lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt; adds listeners to a single list.","pos":[526,828],"source":"`AddListener` is the suggested name for the method of your manager class that calls <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> and adds weak event pattern listeners for the event.)       <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> adds listeners to a single list."},{"content":"If your manager implementation maintains more than one list of listeners per event, do not use DeliverEvent or &lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;.","pos":[829,1003],"source":" If your manager implementation maintains more than one list of listeners per event, do not use DeliverEvent or <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>."},{"content":"Instead, your implementation should create its own &lt;xref:System.Windows.WeakEventManager.ListenerList&gt; instances, <ph id=\"ph1\">`AddListener`</ph> should add listeners to the appropriate list, and events should be delivered to the appropriate listener list by calling &lt;xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt;.","pos":[1004,1314],"source":" Instead, your implementation should create its own <xref:System.Windows.WeakEventManager.ListenerList> instances, `AddListener` should add listeners to the appropriate list, and events should be delivered to the appropriate listener list by calling <xref:System.Windows.WeakEventManager.DeliverEventToList%2A>."}]},{"pos":[5612,5659],"content":"The object on which the event is being handled.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object on which the event is being handled.","pos":[0,47]}]},{"pos":[5723,5804],"content":"An <xref:System.EventArgs> that contains the event data for the event to deliver.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.EventArgs&gt; that contains the event data for the event to deliver.","pos":[0,81],"source":"An <xref:System.EventArgs> that contains the event data for the event to deliver."}]},{"pos":[6780,6792],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[6856,6868],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[6960,6972],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[7487,7602],"content":"Returns the <bpt id=\"p1\">&lt;xref href=\"System.Windows.WeakEventManager\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> implementation that is used for the provided type.","needQuote":true,"needEscape":true,"source":"Returns the <xref href=\"System.Windows.WeakEventManager\"></xref> implementation that is used for the provided type."},{"pos":[7614,7913],"content":"<xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> implementations call this method using their passed `managerType`. The returned <xref:System.Windows.WeakEventManager> is then used as the differentiator that determines which event was received, and which private class handler to invoke.","needQuote":true,"needEscape":true,"nodes":[{"content":"&lt;xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A&gt; implementations call this method using their passed <ph id=\"ph1\">`managerType`</ph>.","pos":[0,127],"source":"<xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> implementations call this method using their passed `managerType`."},{"content":"The returned &lt;xref:System.Windows.WeakEventManager&gt; is then used as the differentiator that determines which event was received, and which private class handler to invoke.","pos":[128,299],"source":" The returned <xref:System.Windows.WeakEventManager> is then used as the differentiator that determines which event was received, and which private class handler to invoke."}]},{"pos":[8105,8185],"content":"The type to obtain the <bpt id=\"p1\">&lt;xref href=\"System.Windows.WeakEventManager\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for.","needQuote":true,"needEscape":true,"source":"The type to obtain the <xref href=\"System.Windows.WeakEventManager\"></xref> for."},{"pos":[8261,8342],"content":"The matching <bpt id=\"p1\">&lt;xref href=\"System.Windows.WeakEventManager\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> implementation.","needQuote":true,"needEscape":true,"source":"The matching <xref href=\"System.Windows.WeakEventManager\"></xref> implementation."},{"pos":[8803,8863],"content":"Gets or sets the data being stored for the specified source.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the data being stored for the specified source.","pos":[0,60]}]},{"pos":[8875,9388],"content":"Derived classes can choose what data and type to store in this indexer. Typically this is implemented as a <xref:System.Windows.WeakEventManager.ListenerList>, which is a list of weak references to listeners. You would only have to change this type if the <xref:System.Windows.WeakEventManager.ListenerList> type cannot contain your required information. If so, you will have to override the <xref:System.Windows.WeakEventManager.Purge%2A> method so that all cleanup of the underlying type is performed correctly.","needQuote":true,"needEscape":true,"nodes":[{"content":"Derived classes can choose what data and type to store in this indexer. Typically this is implemented as a <xref:System.Windows.WeakEventManager.ListenerList>, which is a list of weak references to listeners. You would only have to change this type if the <xref:System.Windows.WeakEventManager.ListenerList> type cannot contain your required information. If so, you will have to override the <xref:System.Windows.WeakEventManager.Purge%2A> method so that all cleanup of the underlying type is performed correctly.","pos":[0,513],"nodes":[{"content":"Derived classes can choose what data and type to store in this indexer.","pos":[0,71]},{"content":"Typically this is implemented as a &lt;xref:System.Windows.WeakEventManager.ListenerList&gt;, which is a list of weak references to listeners.","pos":[72,208],"source":" Typically this is implemented as a <xref:System.Windows.WeakEventManager.ListenerList>, which is a list of weak references to listeners."},{"content":"You would only have to change this type if the &lt;xref:System.Windows.WeakEventManager.ListenerList&gt; type cannot contain your required information.","pos":[209,354],"source":" You would only have to change this type if the <xref:System.Windows.WeakEventManager.ListenerList> type cannot contain your required information."},{"content":"If so, you will have to override the &lt;xref:System.Windows.WeakEventManager.Purge%2A&gt; method so that all cleanup of the underlying type is performed correctly.","pos":[355,513],"source":" If so, you will have to override the <xref:System.Windows.WeakEventManager.Purge%2A> method so that all cleanup of the underlying type is performed correctly."}]}]},{"pos":[9541,9586],"content":"The zero-based index of the requested source.","needQuote":true,"needEscape":true,"nodes":[{"content":"The zero-based index of the requested source.","pos":[0,45]}]},{"pos":[9644,9693],"content":"Data being stored by the manager for this source.","needQuote":true,"needEscape":true,"nodes":[{"content":"Data being stored by the manager for this source.","pos":[0,49]}]},{"pos":[10146,10200],"content":"Returns a new object to contain listeners to an event.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a new object to contain listeners to an event.","pos":[0,54]}]},{"pos":[10414,10460],"content":"A new object to contain listeners to an event.","needQuote":true,"needEscape":true,"nodes":[{"content":"A new object to contain listeners to an event.","pos":[0,46]}]},{"pos":[11051,11123],"content":"Adds the specified delegate as an event handler of the specified source.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds the specified delegate as an event handler of the specified source.","pos":[0,72]}]},{"pos":[11295,11353],"content":"The source object that the handler delegate subscribes to.","needQuote":true,"needEscape":true,"nodes":[{"content":"The source object that the handler delegate subscribes to.","pos":[0,58]}]},{"pos":[11419,11482],"content":"The delegate that handles the event that is raised by <ph id=\"ph1\">`source`</ph>.","needQuote":true,"needEscape":true,"source":"The delegate that handles the event that is raised by `source`."},{"pos":[12148,12226],"content":"Adds the provided listener to the provided source for the event being managed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds the provided listener to the provided source for the event being managed.","pos":[0,78]}]},{"pos":[12239,13723],"content":"Call this method within your manager class `AddListener` methods on <xref:System.Windows.WeakEventManager> implementations. `AddListener` is the suggested name for the static method you define on your manager class to enable other classes to add a listener for your weak event pattern. `AddListener` should take two parameters: the `source` where the listener is attached, and the `listener` instance. For your `AddListener` implementation, call the ProtectedAddListener method on the current manager and pass the same two parameters.       If the list of listeners was previously empty, ProtectedAddListener calls the <xref:System.Windows.WeakEventManager.StartListening%2A> method internally, which will call your specific <xref:System.Windows.WeakEventManager.StartListening%2A> override through polymorphism.       ProtectedAddListener adds listeners to a single internal <xref:System.Windows.WeakEventManager.ListenerList> per `source`. If your manager implementation maintains more than one list of listeners for each event-source combination, do not use ProtectedAddListener. Instead, your implementation should create its own <xref:System.Windows.WeakEventManager.ListenerList> instances, `AddListener` should add listeners to the appropriate list, and events should be delivered to the appropriate listener list by calling the <xref:System.Windows.WeakEventManager.DeliverEventToList%2A> event instead of the <xref:System.Windows.WeakEventManager.DeliverEvent%2A> method.","needQuote":false,"needEscape":true,"nodes":[{"content":"Call this method within your manager class <ph id=\"ph1\">`AddListener`</ph> methods on &lt;xref:System.Windows.WeakEventManager&gt; implementations.","pos":[0,123],"source":"Call this method within your manager class `AddListener` methods on <xref:System.Windows.WeakEventManager> implementations."},{"content":"<ph id=\"ph1\">`AddListener`</ph> is the suggested name for the static method you define on your manager class to enable other classes to add a listener for your weak event pattern.","pos":[124,285],"source":"`AddListener` is the suggested name for the static method you define on your manager class to enable other classes to add a listener for your weak event pattern."},{"content":"<ph id=\"ph1\">`AddListener`</ph> should take two parameters: the <ph id=\"ph2\">`source`</ph> where the listener is attached, and the <ph id=\"ph3\">`listener`</ph> instance.","pos":[286,401],"source":"`AddListener` should take two parameters: the `source` where the listener is attached, and the `listener` instance."},{"content":"For your <ph id=\"ph1\">`AddListener`</ph> implementation, call the ProtectedAddListener method on the current manager and pass the same two parameters.","pos":[402,534],"source":" For your `AddListener` implementation, call the ProtectedAddListener method on the current manager and pass the same two parameters."},{"content":"If the list of listeners was previously empty, ProtectedAddListener calls the &lt;xref:System.Windows.WeakEventManager.StartListening%2A&gt; method internally, which will call your specific &lt;xref:System.Windows.WeakEventManager.StartListening%2A&gt; override through polymorphism.","pos":[541,812],"source":"       If the list of listeners was previously empty, ProtectedAddListener calls the <xref:System.Windows.WeakEventManager.StartListening%2A> method internally, which will call your specific <xref:System.Windows.WeakEventManager.StartListening%2A> override through polymorphism."},{"content":"ProtectedAddListener adds listeners to a single internal &lt;xref:System.Windows.WeakEventManager.ListenerList&gt; per <ph id=\"ph1\">`source`</ph>.","pos":[819,941],"source":"       ProtectedAddListener adds listeners to a single internal <xref:System.Windows.WeakEventManager.ListenerList> per `source`."},{"content":"If your manager implementation maintains more than one list of listeners for each event-source combination, do not use ProtectedAddListener.","pos":[942,1082]},{"content":"Instead, your implementation should create its own &lt;xref:System.Windows.WeakEventManager.ListenerList&gt; instances, <ph id=\"ph1\">`AddListener`</ph> should add listeners to the appropriate list, and events should be delivered to the appropriate listener list by calling the &lt;xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt; event instead of the &lt;xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt; method.","pos":[1083,1480],"source":" Instead, your implementation should create its own <xref:System.Windows.WeakEventManager.ListenerList> instances, `AddListener` should add listeners to the appropriate list, and events should be delivered to the appropriate listener list by calling the <xref:System.Windows.WeakEventManager.DeliverEventToList%2A> event instead of the <xref:System.Windows.WeakEventManager.DeliverEvent%2A> method."}]},{"pos":[13923,13957],"content":"The source to attach listeners to.","needQuote":true,"needEscape":true,"nodes":[{"content":"The source to attach listeners to.","pos":[0,34]}]},{"pos":[14042,14140],"content":"The listening class (which must implement <bpt id=\"p1\">&lt;xref href=\"System.Windows.IWeakEventListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>).","needQuote":true,"needEscape":true,"source":"The listening class (which must implement <xref href=\"System.Windows.IWeakEventListener\"></xref>)."},{"pos":[14751,14814],"content":"Removes the previously added handler from the specified source.","needQuote":true,"needEscape":true,"nodes":[{"content":"Removes the previously added handler from the specified source.","pos":[0,63]}]},{"pos":[14989,15027],"content":"The source to remove the handler from.","needQuote":true,"needEscape":true,"nodes":[{"content":"The source to remove the handler from.","pos":[0,38]}]},{"pos":[15093,15130],"content":"The delegate to remove from <ph id=\"ph1\">`source`</ph>.","needQuote":true,"needEscape":true,"source":"The delegate to remove from `source`."},{"pos":[15814,15875],"content":"Removes a previously added listener from the provided source.","needQuote":true,"needEscape":true,"nodes":[{"content":"Removes a previously added listener from the provided source.","pos":[0,61]}]},{"pos":[15888,17436],"content":"Call this method within your manager class `RemoveListener` methods on <xref:System.Windows.WeakEventManager> implementations. `RemoveListener` is the suggested name for the static method you define on your manager class to enable other classes to remove a listener for your weak event pattern. `RemoveListener` should take two parameters: the `source` where the listener is removed, and the `listener` class. For your `RemoveListener` implementation, call the ProtectedRemoveListener method on the current manager and pass the same two parameters.       If a call to ProtectedRemoveListener removes the last listener in the list, ProtectedRemoveListener calls the <xref:System.Windows.WeakEventManager.StopListening%2A> method internally, which will call your specific <xref:System.Windows.WeakEventManager.StopListening%2A> override through polymorphism.       ProtectedRemoveListener removes listeners from a single internal <xref:System.Windows.WeakEventManager.ListenerList> per `source`. If your manager implementation maintains more than one list of listeners for each event-source combination, do not use ProtectedRemoveListener. Instead, your implementation should create its own <xref:System.Windows.WeakEventManager.ListenerList> instances, `RemoveListener` should remove listeners from the appropriate list, and events should be delivered to the appropriate listener list by calling the <xref:System.Windows.WeakEventManager.DeliverEventToList%2A> method instead of the <xref:System.Windows.WeakEventManager.DeliverEvent%2A> method.","needQuote":false,"needEscape":true,"nodes":[{"content":"Call this method within your manager class <ph id=\"ph1\">`RemoveListener`</ph> methods on &lt;xref:System.Windows.WeakEventManager&gt; implementations.","pos":[0,126],"source":"Call this method within your manager class `RemoveListener` methods on <xref:System.Windows.WeakEventManager> implementations."},{"content":"<ph id=\"ph1\">`RemoveListener`</ph> is the suggested name for the static method you define on your manager class to enable other classes to remove a listener for your weak event pattern.","pos":[127,294],"source":"`RemoveListener` is the suggested name for the static method you define on your manager class to enable other classes to remove a listener for your weak event pattern."},{"content":"<ph id=\"ph1\">`RemoveListener`</ph> should take two parameters: the <ph id=\"ph2\">`source`</ph> where the listener is removed, and the <ph id=\"ph3\">`listener`</ph> class.","pos":[295,409],"source":"`RemoveListener` should take two parameters: the `source` where the listener is removed, and the `listener` class."},{"content":"For your <ph id=\"ph1\">`RemoveListener`</ph> implementation, call the ProtectedRemoveListener method on the current manager and pass the same two parameters.","pos":[410,548],"source":" For your `RemoveListener` implementation, call the ProtectedRemoveListener method on the current manager and pass the same two parameters."},{"content":"If a call to ProtectedRemoveListener removes the last listener in the list, ProtectedRemoveListener calls the &lt;xref:System.Windows.WeakEventManager.StopListening%2A&gt; method internally, which will call your specific &lt;xref:System.Windows.WeakEventManager.StopListening%2A&gt; override through polymorphism.","pos":[555,856],"source":"       If a call to ProtectedRemoveListener removes the last listener in the list, ProtectedRemoveListener calls the <xref:System.Windows.WeakEventManager.StopListening%2A> method internally, which will call your specific <xref:System.Windows.WeakEventManager.StopListening%2A> override through polymorphism."},{"content":"ProtectedRemoveListener removes listeners from a single internal &lt;xref:System.Windows.WeakEventManager.ListenerList&gt; per <ph id=\"ph1\">`source`</ph>.","pos":[863,993],"source":"       ProtectedRemoveListener removes listeners from a single internal <xref:System.Windows.WeakEventManager.ListenerList> per `source`."},{"content":"If your manager implementation maintains more than one list of listeners for each event-source combination, do not use ProtectedRemoveListener.","pos":[994,1137]},{"content":"Instead, your implementation should create its own &lt;xref:System.Windows.WeakEventManager.ListenerList&gt; instances, <ph id=\"ph1\">`RemoveListener`</ph> should remove listeners from the appropriate list, and events should be delivered to the appropriate listener list by calling the &lt;xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt; method instead of the &lt;xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt; method.","pos":[1138,1544],"source":" Instead, your implementation should create its own <xref:System.Windows.WeakEventManager.ListenerList> instances, `RemoveListener` should remove listeners from the appropriate list, and events should be delivered to the appropriate listener list by calling the <xref:System.Windows.WeakEventManager.DeliverEventToList%2A> method instead of the <xref:System.Windows.WeakEventManager.DeliverEvent%2A> method."}]},{"pos":[17639,17675],"content":"The source to remove listeners from.","needQuote":true,"needEscape":true,"nodes":[{"content":"The source to remove listeners from.","pos":[0,36]}]},{"pos":[17760,17858],"content":"The listening class (which must implement <bpt id=\"p1\">&lt;xref href=\"System.Windows.IWeakEventListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>).","needQuote":true,"needEscape":true,"source":"The listening class (which must implement <xref href=\"System.Windows.IWeakEventListener\"></xref>)."},{"pos":[18431,18630],"content":"Removes inactive listener entries from the data list for the provided source. Returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if some entries were actually removed from the list.","needQuote":true,"needEscape":true,"nodes":[{"content":"Removes inactive listener entries from the data list for the provided source.","pos":[0,77]},{"content":"Returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if some entries were actually removed from the list.","pos":[78,199],"source":" Returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if some entries were actually removed from the list."}]},{"pos":[18642,18784],"content":"The Purge method has a default implementation that will remove all entries when data is a <xref:System.Windows.WeakEventManager.ListenerList>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The Purge method has a default implementation that will remove all entries when data is a &lt;xref:System.Windows.WeakEventManager.ListenerList&gt;.","pos":[0,142],"source":"The Purge method has a default implementation that will remove all entries when data is a <xref:System.Windows.WeakEventManager.ListenerList>."}]},{"pos":[18960,19000],"content":"The source for events being listened to.","needQuote":true,"needEscape":true,"nodes":[{"content":"The source for events being listened to.","pos":[0,40]}]},{"pos":[19061,19179],"content":"The data to check. This object is expected to be a <xref:System.Windows.WeakEventManager.ListenerList> implementation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The data to check. This object is expected to be a <xref:System.Windows.WeakEventManager.ListenerList> implementation.","pos":[0,118],"nodes":[{"content":"The data to check.","pos":[0,18]},{"content":"This object is expected to be a &lt;xref:System.Windows.WeakEventManager.ListenerList&gt; implementation.","pos":[19,118],"source":" This object is expected to be a <xref:System.Windows.WeakEventManager.ListenerList> implementation."}]}]},{"pos":[19245,19383],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to stop listening to <ph id=\"ph1\">`source`</ph>, and completely remove all entries from <ph id=\"ph2\">`data`</ph>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to stop listening to `source`, and completely remove all entries from `data`."},{"pos":[19442,19616],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if some entries were actually removed; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if some entries were actually removed; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[20031,20126],"content":"Establishes a read-lock on the underlying data table, and returns an <xref:System.IDisposable>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Establishes a read-lock on the underlying data table, and returns an &lt;xref:System.IDisposable&gt;.","pos":[0,95],"source":"Establishes a read-lock on the underlying data table, and returns an <xref:System.IDisposable>."}]},{"pos":[20138,20630],"content":"In derived classes, queries to the table contained in <xref:System.Windows.WeakEventManager.Item%2A> should always occur within a `using (ReadLock) { ... }` clause, except for queries that are already within a write lock. These queries may be necessary if your class supports a more sophisticated `AddListener` implementation that requires more data beyond the `source` and the `listener`, and uses the <xref:System.Windows.WeakEventManager.Item%2A> collection to store the extra information.","needQuote":true,"needEscape":true,"nodes":[{"content":"In derived classes, queries to the table contained in &lt;xref:System.Windows.WeakEventManager.Item%2A&gt; should always occur within a <ph id=\"ph1\">`using (ReadLock) { ... }`</ph> clause, except for queries that are already within a write lock.","pos":[0,221],"source":"In derived classes, queries to the table contained in <xref:System.Windows.WeakEventManager.Item%2A> should always occur within a `using (ReadLock) { ... }` clause, except for queries that are already within a write lock."},{"content":"These queries may be necessary if your class supports a more sophisticated <ph id=\"ph1\">`AddListener`</ph> implementation that requires more data beyond the <ph id=\"ph2\">`source`</ph> and the <ph id=\"ph3\">`listener`</ph>, and uses the &lt;xref:System.Windows.WeakEventManager.Item%2A&gt; collection to store the extra information.","pos":[222,492],"source":" These queries may be necessary if your class supports a more sophisticated `AddListener` implementation that requires more data beyond the `source` and the `listener`, and uses the <xref:System.Windows.WeakEventManager.Item%2A> collection to store the extra information."}]},{"pos":[20756,20944],"content":"An object that can be used to establish a lock on the data table members and then be appropriately disposed with a <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_using\" name=\"using\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> construct.","needQuote":true,"needEscape":true,"source":"An object that can be used to establish a lock on the data table members and then be appropriately disposed with a <xref uid=\"langword_csharp_using\" name=\"using\" href=\"\"></xref> construct."},{"pos":[21404,21451],"content":"Removes all listeners for the specified source.","needQuote":true,"needEscape":true,"nodes":[{"content":"Removes all listeners for the specified source.","pos":[0,47]}]},{"pos":[21592,21638],"content":"The source to remove listener information for.","needQuote":true,"needEscape":true,"nodes":[{"content":"The source to remove listener information for.","pos":[0,46]}]},{"pos":[22093,22205],"content":"Requests that a purge of unused entries in the underlying listener list be performed on a lower priority thread.","needQuote":true,"needEscape":true,"nodes":[{"content":"Requests that a purge of unused entries in the underlying listener list be performed on a lower priority thread.","pos":[0,112]}]},{"pos":[22217,22435],"content":"Calling the ScheduleCleanup method is similar to calling the &lt;xref:System.Windows.WeakEventManager.Purge%2A&gt; method on the current manager's list, at lower thread priority, with the <ph id=\"ph1\">`purgeAll`</ph> parameter set to <ph id=\"ph2\">`false`</ph>.","needQuote":true,"needEscape":true,"source":"Calling the ScheduleCleanup method is similar to calling the <xref:System.Windows.WeakEventManager.Purge%2A> method on the current manager's list, at lower thread priority, with the `purgeAll` parameter set to `false`."},{"pos":[23139,23195],"content":"Sets the current manager for the specified manager type.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sets the current manager for the specified manager type.","pos":[0,56]}]},{"pos":[23207,23389],"content":"Call the SetCurrentManager method to initialize a manager, if that is required by a call to your <ph id=\"ph1\">`CurrentManager`</ph> property on a &lt;xref:System.Windows.WeakEventManager&gt; implementation.","needQuote":true,"needEscape":true,"source":"Call the SetCurrentManager method to initialize a manager, if that is required by a call to your `CurrentManager` property on a <xref:System.Windows.WeakEventManager> implementation."},{"pos":[23595,23633],"content":"The type to set the new event manager.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type to set the new event manager.","pos":[0,38]}]},{"pos":[23715,23737],"content":"The new event manager.","needQuote":true,"needEscape":true,"nodes":[{"content":"The new event manager.","pos":[0,22]}]},{"pos":[24246,24602],"content":"When overridden in a derived class, starts listening for the event being managed. After the StartListening method is first called, the manager should be in the state of calling <xref:System.Windows.WeakEventManager.DeliverEvent*> or <xref:System.Windows.WeakEventManager.DeliverEventToList*> whenever the relevant event from the provided source is handled.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, starts listening for the event being managed.","pos":[0,81]},{"content":"After the StartListening method is first called, the manager should be in the state of calling &lt;xref:System.Windows.WeakEventManager.DeliverEvent<bpt id=\"p1\">*</bpt>&gt; or &lt;xref:System.Windows.WeakEventManager.DeliverEventToList<ept id=\"p1\">*</ept>&gt; whenever the relevant event from the provided source is handled.","pos":[82,356],"source":" After the StartListening method is first called, the manager should be in the state of calling <xref:System.Windows.WeakEventManager.DeliverEvent*> or <xref:System.Windows.WeakEventManager.DeliverEventToList*> whenever the relevant event from the provided source is handled."}]},{"pos":[24760,24793],"content":"The source to begin listening on.","needQuote":true,"needEscape":true,"nodes":[{"content":"The source to begin listening on.","pos":[0,33]}]},{"pos":[25294,25397],"content":"When overridden in a derived class, stops listening on the provided source for the event being managed.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, stops listening on the provided source for the event being managed.","pos":[0,103]}]},{"pos":[25554,25586],"content":"The source to stop listening on.","needQuote":true,"needEscape":true,"nodes":[{"content":"The source to stop listening on.","pos":[0,32]}]},{"pos":[26014,26109],"content":"Establishes a write-lock on the underlying data table, and returns an<xref:System.IDisposable>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Establishes a write-lock on the underlying data table, and returns an&lt;xref:System.IDisposable&gt;.","pos":[0,95],"source":"Establishes a write-lock on the underlying data table, and returns an<xref:System.IDisposable>."}]},{"pos":[26121,26522],"content":"In derived classes, all modifications to the underlying data table should occur within a `using (WriteLock) { ... }` clause. These modifications may be necessary if your class supports a more sophisticated `AddListener` implementation that requires more data beyond the `source` and the `listener`, and uses the <xref:System.Windows.WeakEventManager.Item%2A> collection to store the extra information.","needQuote":true,"needEscape":true,"nodes":[{"content":"In derived classes, all modifications to the underlying data table should occur within a <ph id=\"ph1\">`using (WriteLock) { ... }`</ph> clause.","pos":[0,124],"source":"In derived classes, all modifications to the underlying data table should occur within a `using (WriteLock) { ... }` clause."},{"content":"These modifications may be necessary if your class supports a more sophisticated <ph id=\"ph1\">`AddListener`</ph> implementation that requires more data beyond the <ph id=\"ph2\">`source`</ph> and the <ph id=\"ph3\">`listener`</ph>, and uses the &lt;xref:System.Windows.WeakEventManager.Item%2A&gt; collection to store the extra information.","pos":[125,401],"source":" These modifications may be necessary if your class supports a more sophisticated `AddListener` implementation that requires more data beyond the `source` and the `listener`, and uses the <xref:System.Windows.WeakEventManager.Item%2A> collection to store the extra information."}]},{"pos":[26649,26837],"content":"An object that can be used to establish a lock on the data table members and then be appropriately disposed with a <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_using\" name=\"using\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> construct.","needQuote":true,"needEscape":true,"source":"An object that can be used to establish a lock on the data table members and then be appropriately disposed with a <xref uid=\"langword_csharp_using\" name=\"using\" href=\"\"></xref> construct."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.WeakEventManager\n  id: WeakEventManager\n  children:\n  - System.Windows.WeakEventManager.#ctor\n  - System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)\n  - System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)\n  - System.Windows.WeakEventManager.GetCurrentManager(System.Type)\n  - System.Windows.WeakEventManager.Item(System.Object)\n  - System.Windows.WeakEventManager.NewListenerList\n  - System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)\n  - System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)\n  - System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)\n  - System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)\n  - System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)\n  - System.Windows.WeakEventManager.ReadLock\n  - System.Windows.WeakEventManager.Remove(System.Object)\n  - System.Windows.WeakEventManager.ScheduleCleanup\n  - System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)\n  - System.Windows.WeakEventManager.StartListening(System.Object)\n  - System.Windows.WeakEventManager.StopListening(System.Object)\n  - System.Windows.WeakEventManager.WriteLock\n  langs:\n  - csharp\n  name: WeakEventManager\n  nameWithType: WeakEventManager\n  fullName: System.Windows.WeakEventManager\n  type: Class\n  summary: Provides a base class for the event manager that is used in the *weak event pattern*. The manager adds and removes listeners for events (or callbacks) that also use the pattern.\n  remarks: \"You typically use the weak event pattern when the event source has an object lifetime that is independent of the event listeners. Using the central event dispatching capability of a WeakEventManager allows the listener's handlers to be garbage collected even if the source object persists. By contrast, a regular event hookup using the `+=` operator causes the potentially disconnected source to hold a reference to the listeners. This prevents the receiver from being garbage collected in a timely fashion.  \\n  \\n One common situation where the lifetime relationships between sources and listeners should use of the weak event pattern is the handling of update events coming from data bindings.  \\n  \\n The weak event pattern can also be used for callbacks and regular events.\"\n  syntax:\n    content: 'public abstract class WeakEventManager : System.Windows.Threading.DispatcherObject'\n  inheritance:\n  - System.Object\n  - System.Windows.Threading.DispatcherObject\n  implements: []\n  inheritedMembers:\n  - System.Windows.Threading.DispatcherObject.CheckAccess\n  - System.Windows.Threading.DispatcherObject.Dispatcher\n  - System.Windows.Threading.DispatcherObject.VerifyAccess\n  platform:\n  - net462\n- uid: System.Windows.WeakEventManager.#ctor\n  id: '#ctor'\n  parent: System.Windows.WeakEventManager\n  langs:\n  - csharp\n  name: WeakEventManager()\n  nameWithType: WeakEventManager.WeakEventManager()\n  fullName: System.Windows.WeakEventManager.WeakEventManager()\n  type: Constructor\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Initializes base class values when it is used as the initializer by the constructor of a derived class.\n  syntax:\n    content: protected WeakEventManager ();\n    parameters: []\n  overload: System.Windows.WeakEventManager.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)\n  id: DeliverEvent(System.Object,System.EventArgs)\n  parent: System.Windows.WeakEventManager\n  langs:\n  - csharp\n  name: DeliverEvent(Object,EventArgs)\n  nameWithType: WeakEventManager.DeliverEvent(Object,EventArgs)\n  fullName: System.Windows.WeakEventManager.DeliverEvent(Object,EventArgs)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Delivers the event being managed to each listener.\n  remarks: \"Call the DeliverEvent method from within the event handlers that are added or removed by the <xref:System.Windows.WeakEventManager.StartListening%2A> and <xref:System.Windows.WeakEventManager.StopListening%2A> implementations of subclasses.  \\n  \\n If you call the <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> method in your `AddListener` implementation of your class, the list of listeners receiving the event is kept in an underlying collection. (`AddListener` is not part of an interface or class contract. `AddListener` is the suggested name for the method of your manager class that calls <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> and adds weak event pattern listeners for the event.)  \\n  \\n <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> adds listeners to a single list. If your manager implementation maintains more than one list of listeners per event, do not use DeliverEvent or <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>. Instead, your implementation should create its own <xref:System.Windows.WeakEventManager.ListenerList> instances, `AddListener` should add listeners to the appropriate list, and events should be delivered to the appropriate listener list by calling <xref:System.Windows.WeakEventManager.DeliverEventToList%2A>.\"\n  syntax:\n    content: protected void DeliverEvent (object sender, EventArgs args);\n    parameters:\n    - id: sender\n      type: System.Object\n      description: The object on which the event is being handled.\n    - id: args\n      type: System.EventArgs\n      description: An <xref:System.EventArgs> that contains the event data for the event to deliver.\n  overload: System.Windows.WeakEventManager.DeliverEvent*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)\n  id: DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)\n  parent: System.Windows.WeakEventManager\n  langs:\n  - csharp\n  name: DeliverEventToList(Object,EventArgs,WeakEventManager+ListenerList)\n  nameWithType: WeakEventManager.DeliverEventToList(Object,EventArgs,WeakEventManager+ListenerList)\n  fullName: System.Windows.WeakEventManager.DeliverEventToList(Object,EventArgs,WeakEventManager+ListenerList)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  syntax:\n    content: protected void DeliverEventToList (object sender, EventArgs args, System.Windows.WeakEventManager.ListenerList list);\n    parameters:\n    - id: sender\n      type: System.Object\n      description: To be added.\n    - id: args\n      type: System.EventArgs\n      description: To be added.\n    - id: list\n      type: System.Windows.WeakEventManager.ListenerList\n      description: To be added.\n  overload: System.Windows.WeakEventManager.DeliverEventToList*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.WeakEventManager.GetCurrentManager(System.Type)\n  id: GetCurrentManager(System.Type)\n  parent: System.Windows.WeakEventManager\n  langs:\n  - csharp\n  name: GetCurrentManager(Type)\n  nameWithType: WeakEventManager.GetCurrentManager(Type)\n  fullName: System.Windows.WeakEventManager.GetCurrentManager(Type)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Returns the <xref href=\"System.Windows.WeakEventManager\"></xref> implementation that is used for the provided type.\n  remarks: <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> implementations call this method using their passed `managerType`. The returned <xref:System.Windows.WeakEventManager> is then used as the differentiator that determines which event was received, and which private class handler to invoke.\n  syntax:\n    content: protected static System.Windows.WeakEventManager GetCurrentManager (Type managerType);\n    parameters:\n    - id: managerType\n      type: System.Type\n      description: The type to obtain the <xref href=\"System.Windows.WeakEventManager\"></xref> for.\n    return:\n      type: System.Windows.WeakEventManager\n      description: The matching <xref href=\"System.Windows.WeakEventManager\"></xref> implementation.\n  overload: System.Windows.WeakEventManager.GetCurrentManager*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.WeakEventManager.Item(System.Object)\n  id: Item(System.Object)\n  parent: System.Windows.WeakEventManager\n  langs:\n  - csharp\n  name: Item(Object)\n  nameWithType: WeakEventManager.Item(Object)\n  fullName: System.Windows.WeakEventManager.Item(Object)\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Gets or sets the data being stored for the specified source.\n  remarks: Derived classes can choose what data and type to store in this indexer. Typically this is implemented as a <xref:System.Windows.WeakEventManager.ListenerList>, which is a list of weak references to listeners. You would only have to change this type if the <xref:System.Windows.WeakEventManager.ListenerList> type cannot contain your required information. If so, you will have to override the <xref:System.Windows.WeakEventManager.Purge%2A> method so that all cleanup of the underlying type is performed correctly.\n  syntax:\n    content: protected object this[object source] { get; set; }\n    parameters:\n    - id: source\n      type: System.Object\n      description: The zero-based index of the requested source.\n    return:\n      type: System.Object\n      description: Data being stored by the manager for this source.\n  overload: System.Windows.WeakEventManager.Item*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.WeakEventManager.NewListenerList\n  id: NewListenerList\n  parent: System.Windows.WeakEventManager\n  langs:\n  - csharp\n  name: NewListenerList()\n  nameWithType: WeakEventManager.NewListenerList()\n  fullName: System.Windows.WeakEventManager.NewListenerList()\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Returns a new object to contain listeners to an event.\n  syntax:\n    content: protected virtual System.Windows.WeakEventManager.ListenerList NewListenerList ();\n    parameters: []\n    return:\n      type: System.Windows.WeakEventManager.ListenerList\n      description: A new object to contain listeners to an event.\n  overload: System.Windows.WeakEventManager.NewListenerList*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)\n  id: ProtectedAddHandler(System.Object,System.Delegate)\n  parent: System.Windows.WeakEventManager\n  langs:\n  - csharp\n  name: ProtectedAddHandler(Object,Delegate)\n  nameWithType: WeakEventManager.ProtectedAddHandler(Object,Delegate)\n  fullName: System.Windows.WeakEventManager.ProtectedAddHandler(Object,Delegate)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Adds the specified delegate as an event handler of the specified source.\n  syntax:\n    content: protected void ProtectedAddHandler (object source, Delegate handler);\n    parameters:\n    - id: source\n      type: System.Object\n      description: The source object that the handler delegate subscribes to.\n    - id: handler\n      type: System.Delegate\n      description: The delegate that handles the event that is raised by `source`.\n  overload: System.Windows.WeakEventManager.ProtectedAddHandler*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)\n  id: ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)\n  parent: System.Windows.WeakEventManager\n  langs:\n  - csharp\n  name: ProtectedAddListener(Object,IWeakEventListener)\n  nameWithType: WeakEventManager.ProtectedAddListener(Object,IWeakEventListener)\n  fullName: System.Windows.WeakEventManager.ProtectedAddListener(Object,IWeakEventListener)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Adds the provided listener to the provided source for the event being managed.\n  remarks: \"Call this method within your manager class `AddListener` methods on <xref:System.Windows.WeakEventManager> implementations. `AddListener` is the suggested name for the static method you define on your manager class to enable other classes to add a listener for your weak event pattern. `AddListener` should take two parameters: the `source` where the listener is attached, and the `listener` instance. For your `AddListener` implementation, call the ProtectedAddListener method on the current manager and pass the same two parameters.  \\n  \\n If the list of listeners was previously empty, ProtectedAddListener calls the <xref:System.Windows.WeakEventManager.StartListening%2A> method internally, which will call your specific <xref:System.Windows.WeakEventManager.StartListening%2A> override through polymorphism.  \\n  \\n ProtectedAddListener adds listeners to a single internal <xref:System.Windows.WeakEventManager.ListenerList> per `source`. If your manager implementation maintains more than one list of listeners for each event-source combination, do not use ProtectedAddListener. Instead, your implementation should create its own <xref:System.Windows.WeakEventManager.ListenerList> instances, `AddListener` should add listeners to the appropriate list, and events should be delivered to the appropriate listener list by calling the <xref:System.Windows.WeakEventManager.DeliverEventToList%2A> event instead of the <xref:System.Windows.WeakEventManager.DeliverEvent%2A> method.\"\n  syntax:\n    content: protected void ProtectedAddListener (object source, System.Windows.IWeakEventListener listener);\n    parameters:\n    - id: source\n      type: System.Object\n      description: The source to attach listeners to.\n    - id: listener\n      type: System.Windows.IWeakEventListener\n      description: The listening class (which must implement <xref href=\"System.Windows.IWeakEventListener\"></xref>).\n  overload: System.Windows.WeakEventManager.ProtectedAddListener*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)\n  id: ProtectedRemoveHandler(System.Object,System.Delegate)\n  parent: System.Windows.WeakEventManager\n  langs:\n  - csharp\n  name: ProtectedRemoveHandler(Object,Delegate)\n  nameWithType: WeakEventManager.ProtectedRemoveHandler(Object,Delegate)\n  fullName: System.Windows.WeakEventManager.ProtectedRemoveHandler(Object,Delegate)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Removes the previously added handler from the specified source.\n  syntax:\n    content: protected void ProtectedRemoveHandler (object source, Delegate handler);\n    parameters:\n    - id: source\n      type: System.Object\n      description: The source to remove the handler from.\n    - id: handler\n      type: System.Delegate\n      description: The delegate to remove from `source`.\n  overload: System.Windows.WeakEventManager.ProtectedRemoveHandler*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)\n  id: ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)\n  parent: System.Windows.WeakEventManager\n  langs:\n  - csharp\n  name: ProtectedRemoveListener(Object,IWeakEventListener)\n  nameWithType: WeakEventManager.ProtectedRemoveListener(Object,IWeakEventListener)\n  fullName: System.Windows.WeakEventManager.ProtectedRemoveListener(Object,IWeakEventListener)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Removes a previously added listener from the provided source.\n  remarks: \"Call this method within your manager class `RemoveListener` methods on <xref:System.Windows.WeakEventManager> implementations. `RemoveListener` is the suggested name for the static method you define on your manager class to enable other classes to remove a listener for your weak event pattern. `RemoveListener` should take two parameters: the `source` where the listener is removed, and the `listener` class. For your `RemoveListener` implementation, call the ProtectedRemoveListener method on the current manager and pass the same two parameters.  \\n  \\n If a call to ProtectedRemoveListener removes the last listener in the list, ProtectedRemoveListener calls the <xref:System.Windows.WeakEventManager.StopListening%2A> method internally, which will call your specific <xref:System.Windows.WeakEventManager.StopListening%2A> override through polymorphism.  \\n  \\n ProtectedRemoveListener removes listeners from a single internal <xref:System.Windows.WeakEventManager.ListenerList> per `source`. If your manager implementation maintains more than one list of listeners for each event-source combination, do not use ProtectedRemoveListener. Instead, your implementation should create its own <xref:System.Windows.WeakEventManager.ListenerList> instances, `RemoveListener` should remove listeners from the appropriate list, and events should be delivered to the appropriate listener list by calling the <xref:System.Windows.WeakEventManager.DeliverEventToList%2A> method instead of the <xref:System.Windows.WeakEventManager.DeliverEvent%2A> method.\"\n  syntax:\n    content: protected void ProtectedRemoveListener (object source, System.Windows.IWeakEventListener listener);\n    parameters:\n    - id: source\n      type: System.Object\n      description: The source to remove listeners from.\n    - id: listener\n      type: System.Windows.IWeakEventListener\n      description: The listening class (which must implement <xref href=\"System.Windows.IWeakEventListener\"></xref>).\n  overload: System.Windows.WeakEventManager.ProtectedRemoveListener*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)\n  id: Purge(System.Object,System.Object,System.Boolean)\n  parent: System.Windows.WeakEventManager\n  langs:\n  - csharp\n  name: Purge(Object,Object,Boolean)\n  nameWithType: WeakEventManager.Purge(Object,Object,Boolean)\n  fullName: System.Windows.WeakEventManager.Purge(Object,Object,Boolean)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Removes inactive listener entries from the data list for the provided source. Returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if some entries were actually removed from the list.\n  remarks: The Purge method has a default implementation that will remove all entries when data is a <xref:System.Windows.WeakEventManager.ListenerList>.\n  syntax:\n    content: protected virtual bool Purge (object source, object data, bool purgeAll);\n    parameters:\n    - id: source\n      type: System.Object\n      description: The source for events being listened to.\n    - id: data\n      type: System.Object\n      description: The data to check. This object is expected to be a <xref:System.Windows.WeakEventManager.ListenerList> implementation.\n    - id: purgeAll\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to stop listening to `source`, and completely remove all entries from `data`.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if some entries were actually removed; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.WeakEventManager.Purge*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.WeakEventManager.ReadLock\n  id: ReadLock\n  parent: System.Windows.WeakEventManager\n  langs:\n  - csharp\n  name: ReadLock\n  nameWithType: WeakEventManager.ReadLock\n  fullName: System.Windows.WeakEventManager.ReadLock\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Establishes a read-lock on the underlying data table, and returns an <xref:System.IDisposable>.\n  remarks: In derived classes, queries to the table contained in <xref:System.Windows.WeakEventManager.Item%2A> should always occur within a `using (ReadLock) { ... }` clause, except for queries that are already within a write lock. These queries may be necessary if your class supports a more sophisticated `AddListener` implementation that requires more data beyond the `source` and the `listener`, and uses the <xref:System.Windows.WeakEventManager.Item%2A> collection to store the extra information.\n  syntax:\n    content: protected IDisposable ReadLock { get; }\n    return:\n      type: System.IDisposable\n      description: An object that can be used to establish a lock on the data table members and then be appropriately disposed with a <xref uid=\"langword_csharp_using\" name=\"using\" href=\"\"></xref> construct.\n  overload: System.Windows.WeakEventManager.ReadLock*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.WeakEventManager.Remove(System.Object)\n  id: Remove(System.Object)\n  parent: System.Windows.WeakEventManager\n  langs:\n  - csharp\n  name: Remove(Object)\n  nameWithType: WeakEventManager.Remove(Object)\n  fullName: System.Windows.WeakEventManager.Remove(Object)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Removes all listeners for the specified source.\n  syntax:\n    content: protected void Remove (object source);\n    parameters:\n    - id: source\n      type: System.Object\n      description: The source to remove listener information for.\n  overload: System.Windows.WeakEventManager.Remove*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.WeakEventManager.ScheduleCleanup\n  id: ScheduleCleanup\n  parent: System.Windows.WeakEventManager\n  langs:\n  - csharp\n  name: ScheduleCleanup()\n  nameWithType: WeakEventManager.ScheduleCleanup()\n  fullName: System.Windows.WeakEventManager.ScheduleCleanup()\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Requests that a purge of unused entries in the underlying listener list be performed on a lower priority thread.\n  remarks: Calling the ScheduleCleanup method is similar to calling the <xref:System.Windows.WeakEventManager.Purge%2A> method on the current manager's list, at lower thread priority, with the `purgeAll` parameter set to `false`.\n  syntax:\n    content: protected void ScheduleCleanup ();\n    parameters: []\n  overload: System.Windows.WeakEventManager.ScheduleCleanup*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)\n  id: SetCurrentManager(System.Type,System.Windows.WeakEventManager)\n  parent: System.Windows.WeakEventManager\n  langs:\n  - csharp\n  name: SetCurrentManager(Type,WeakEventManager)\n  nameWithType: WeakEventManager.SetCurrentManager(Type,WeakEventManager)\n  fullName: System.Windows.WeakEventManager.SetCurrentManager(Type,WeakEventManager)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Sets the current manager for the specified manager type.\n  remarks: Call the SetCurrentManager method to initialize a manager, if that is required by a call to your `CurrentManager` property on a <xref:System.Windows.WeakEventManager> implementation.\n  syntax:\n    content: protected static void SetCurrentManager (Type managerType, System.Windows.WeakEventManager manager);\n    parameters:\n    - id: managerType\n      type: System.Type\n      description: The type to set the new event manager.\n    - id: manager\n      type: System.Windows.WeakEventManager\n      description: The new event manager.\n  overload: System.Windows.WeakEventManager.SetCurrentManager*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.WeakEventManager.StartListening(System.Object)\n  id: StartListening(System.Object)\n  parent: System.Windows.WeakEventManager\n  langs:\n  - csharp\n  name: StartListening(Object)\n  nameWithType: WeakEventManager.StartListening(Object)\n  fullName: System.Windows.WeakEventManager.StartListening(Object)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: When overridden in a derived class, starts listening for the event being managed. After the StartListening method is first called, the manager should be in the state of calling <xref:System.Windows.WeakEventManager.DeliverEvent*> or <xref:System.Windows.WeakEventManager.DeliverEventToList*> whenever the relevant event from the provided source is handled.\n  syntax:\n    content: protected abstract void StartListening (object source);\n    parameters:\n    - id: source\n      type: System.Object\n      description: The source to begin listening on.\n  overload: System.Windows.WeakEventManager.StartListening*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.WeakEventManager.StopListening(System.Object)\n  id: StopListening(System.Object)\n  parent: System.Windows.WeakEventManager\n  langs:\n  - csharp\n  name: StopListening(Object)\n  nameWithType: WeakEventManager.StopListening(Object)\n  fullName: System.Windows.WeakEventManager.StopListening(Object)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: When overridden in a derived class, stops listening on the provided source for the event being managed.\n  syntax:\n    content: protected abstract void StopListening (object source);\n    parameters:\n    - id: source\n      type: System.Object\n      description: The source to stop listening on.\n  overload: System.Windows.WeakEventManager.StopListening*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.WeakEventManager.WriteLock\n  id: WriteLock\n  parent: System.Windows.WeakEventManager\n  langs:\n  - csharp\n  name: WriteLock\n  nameWithType: WeakEventManager.WriteLock\n  fullName: System.Windows.WeakEventManager.WriteLock\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Establishes a write-lock on the underlying data table, and returns an<xref:System.IDisposable>.\n  remarks: In derived classes, all modifications to the underlying data table should occur within a `using (WriteLock) { ... }` clause. These modifications may be necessary if your class supports a more sophisticated `AddListener` implementation that requires more data beyond the `source` and the `listener`, and uses the <xref:System.Windows.WeakEventManager.Item%2A> collection to store the extra information.\n  syntax:\n    content: protected IDisposable WriteLock { get; }\n    return:\n      type: System.IDisposable\n      description: An object that can be used to establish a lock on the data table members and then be appropriately disposed with a <xref uid=\"langword_csharp_using\" name=\"using\" href=\"\"></xref> construct.\n  overload: System.Windows.WeakEventManager.WriteLock*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Windows.Threading.DispatcherObject\n  isExternal: false\n  name: System.Windows.Threading.DispatcherObject\n- uid: System.Windows.WeakEventManager.#ctor\n  parent: System.Windows.WeakEventManager\n  isExternal: false\n  name: WeakEventManager()\n  nameWithType: WeakEventManager.WeakEventManager()\n  fullName: System.Windows.WeakEventManager.WeakEventManager()\n- uid: System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)\n  parent: System.Windows.WeakEventManager\n  isExternal: false\n  name: DeliverEvent(Object,EventArgs)\n  nameWithType: WeakEventManager.DeliverEvent(Object,EventArgs)\n  fullName: System.Windows.WeakEventManager.DeliverEvent(Object,EventArgs)\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.EventArgs\n  parent: System\n  isExternal: true\n  name: EventArgs\n  nameWithType: EventArgs\n  fullName: System.EventArgs\n- uid: System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)\n  parent: System.Windows.WeakEventManager\n  isExternal: false\n  name: DeliverEventToList(Object,EventArgs,WeakEventManager+ListenerList)\n  nameWithType: WeakEventManager.DeliverEventToList(Object,EventArgs,WeakEventManager+ListenerList)\n  fullName: System.Windows.WeakEventManager.DeliverEventToList(Object,EventArgs,WeakEventManager+ListenerList)\n- uid: System.Windows.WeakEventManager.ListenerList\n  parent: System.Windows\n  isExternal: false\n  name: WeakEventManager+ListenerList\n  nameWithType: WeakEventManager+ListenerList\n  fullName: System.Windows.WeakEventManager+ListenerList\n- uid: System.Windows.WeakEventManager.GetCurrentManager(System.Type)\n  parent: System.Windows.WeakEventManager\n  isExternal: false\n  name: GetCurrentManager(Type)\n  nameWithType: WeakEventManager.GetCurrentManager(Type)\n  fullName: System.Windows.WeakEventManager.GetCurrentManager(Type)\n- uid: System.Windows.WeakEventManager\n  parent: System.Windows\n  isExternal: false\n  name: WeakEventManager\n  nameWithType: WeakEventManager\n  fullName: System.Windows.WeakEventManager\n- uid: System.Type\n  parent: System\n  isExternal: true\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Windows.WeakEventManager.Item(System.Object)\n  parent: System.Windows.WeakEventManager\n  isExternal: false\n  name: Item(Object)\n  nameWithType: WeakEventManager.Item(Object)\n  fullName: System.Windows.WeakEventManager.Item(Object)\n- uid: System.Windows.WeakEventManager.NewListenerList\n  parent: System.Windows.WeakEventManager\n  isExternal: false\n  name: NewListenerList()\n  nameWithType: WeakEventManager.NewListenerList()\n  fullName: System.Windows.WeakEventManager.NewListenerList()\n- uid: System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)\n  parent: System.Windows.WeakEventManager\n  isExternal: false\n  name: ProtectedAddHandler(Object,Delegate)\n  nameWithType: WeakEventManager.ProtectedAddHandler(Object,Delegate)\n  fullName: System.Windows.WeakEventManager.ProtectedAddHandler(Object,Delegate)\n- uid: System.Delegate\n  parent: System\n  isExternal: true\n  name: Delegate\n  nameWithType: Delegate\n  fullName: System.Delegate\n- uid: System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)\n  parent: System.Windows.WeakEventManager\n  isExternal: false\n  name: ProtectedAddListener(Object,IWeakEventListener)\n  nameWithType: WeakEventManager.ProtectedAddListener(Object,IWeakEventListener)\n  fullName: System.Windows.WeakEventManager.ProtectedAddListener(Object,IWeakEventListener)\n- uid: System.Windows.IWeakEventListener\n  parent: System.Windows\n  isExternal: false\n  name: IWeakEventListener\n  nameWithType: IWeakEventListener\n  fullName: System.Windows.IWeakEventListener\n- uid: System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)\n  parent: System.Windows.WeakEventManager\n  isExternal: false\n  name: ProtectedRemoveHandler(Object,Delegate)\n  nameWithType: WeakEventManager.ProtectedRemoveHandler(Object,Delegate)\n  fullName: System.Windows.WeakEventManager.ProtectedRemoveHandler(Object,Delegate)\n- uid: System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)\n  parent: System.Windows.WeakEventManager\n  isExternal: false\n  name: ProtectedRemoveListener(Object,IWeakEventListener)\n  nameWithType: WeakEventManager.ProtectedRemoveListener(Object,IWeakEventListener)\n  fullName: System.Windows.WeakEventManager.ProtectedRemoveListener(Object,IWeakEventListener)\n- uid: System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)\n  parent: System.Windows.WeakEventManager\n  isExternal: false\n  name: Purge(Object,Object,Boolean)\n  nameWithType: WeakEventManager.Purge(Object,Object,Boolean)\n  fullName: System.Windows.WeakEventManager.Purge(Object,Object,Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Windows.WeakEventManager.ReadLock\n  parent: System.Windows.WeakEventManager\n  isExternal: false\n  name: ReadLock\n  nameWithType: WeakEventManager.ReadLock\n  fullName: System.Windows.WeakEventManager.ReadLock\n- uid: System.IDisposable\n  parent: System\n  isExternal: true\n  name: IDisposable\n  nameWithType: IDisposable\n  fullName: System.IDisposable\n- uid: System.Windows.WeakEventManager.Remove(System.Object)\n  parent: System.Windows.WeakEventManager\n  isExternal: false\n  name: Remove(Object)\n  nameWithType: WeakEventManager.Remove(Object)\n  fullName: System.Windows.WeakEventManager.Remove(Object)\n- uid: System.Windows.WeakEventManager.ScheduleCleanup\n  parent: System.Windows.WeakEventManager\n  isExternal: false\n  name: ScheduleCleanup()\n  nameWithType: WeakEventManager.ScheduleCleanup()\n  fullName: System.Windows.WeakEventManager.ScheduleCleanup()\n- uid: System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)\n  parent: System.Windows.WeakEventManager\n  isExternal: false\n  name: SetCurrentManager(Type,WeakEventManager)\n  nameWithType: WeakEventManager.SetCurrentManager(Type,WeakEventManager)\n  fullName: System.Windows.WeakEventManager.SetCurrentManager(Type,WeakEventManager)\n- uid: System.Windows.WeakEventManager.StartListening(System.Object)\n  parent: System.Windows.WeakEventManager\n  isExternal: false\n  name: StartListening(Object)\n  nameWithType: WeakEventManager.StartListening(Object)\n  fullName: System.Windows.WeakEventManager.StartListening(Object)\n- uid: System.Windows.WeakEventManager.StopListening(System.Object)\n  parent: System.Windows.WeakEventManager\n  isExternal: false\n  name: StopListening(Object)\n  nameWithType: WeakEventManager.StopListening(Object)\n  fullName: System.Windows.WeakEventManager.StopListening(Object)\n- uid: System.Windows.WeakEventManager.WriteLock\n  parent: System.Windows.WeakEventManager\n  isExternal: false\n  name: WriteLock\n  nameWithType: WeakEventManager.WriteLock\n  fullName: System.Windows.WeakEventManager.WriteLock\n- uid: System.Windows.WeakEventManager.#ctor*\n  parent: System.Windows.WeakEventManager\n  isExternal: false\n  name: WeakEventManager\n  nameWithType: WeakEventManager.WeakEventManager\n- uid: System.Windows.WeakEventManager.DeliverEvent*\n  parent: System.Windows.WeakEventManager\n  isExternal: false\n  name: DeliverEvent\n  nameWithType: WeakEventManager.DeliverEvent\n- uid: System.Windows.WeakEventManager.DeliverEventToList*\n  parent: System.Windows.WeakEventManager\n  isExternal: false\n  name: DeliverEventToList\n  nameWithType: WeakEventManager.DeliverEventToList\n- uid: System.Windows.WeakEventManager.GetCurrentManager*\n  parent: System.Windows.WeakEventManager\n  isExternal: false\n  name: GetCurrentManager\n  nameWithType: WeakEventManager.GetCurrentManager\n- uid: System.Windows.WeakEventManager.Item*\n  parent: System.Windows.WeakEventManager\n  isExternal: false\n  name: Item\n  nameWithType: WeakEventManager.Item\n- uid: System.Windows.WeakEventManager.NewListenerList*\n  parent: System.Windows.WeakEventManager\n  isExternal: false\n  name: NewListenerList\n  nameWithType: WeakEventManager.NewListenerList\n- uid: System.Windows.WeakEventManager.ProtectedAddHandler*\n  parent: System.Windows.WeakEventManager\n  isExternal: false\n  name: ProtectedAddHandler\n  nameWithType: WeakEventManager.ProtectedAddHandler\n- uid: System.Windows.WeakEventManager.ProtectedAddListener*\n  parent: System.Windows.WeakEventManager\n  isExternal: false\n  name: ProtectedAddListener\n  nameWithType: WeakEventManager.ProtectedAddListener\n- uid: System.Windows.WeakEventManager.ProtectedRemoveHandler*\n  parent: System.Windows.WeakEventManager\n  isExternal: false\n  name: ProtectedRemoveHandler\n  nameWithType: WeakEventManager.ProtectedRemoveHandler\n- uid: System.Windows.WeakEventManager.ProtectedRemoveListener*\n  parent: System.Windows.WeakEventManager\n  isExternal: false\n  name: ProtectedRemoveListener\n  nameWithType: WeakEventManager.ProtectedRemoveListener\n- uid: System.Windows.WeakEventManager.Purge*\n  parent: System.Windows.WeakEventManager\n  isExternal: false\n  name: Purge\n  nameWithType: WeakEventManager.Purge\n- uid: System.Windows.WeakEventManager.ReadLock*\n  parent: System.Windows.WeakEventManager\n  isExternal: false\n  name: ReadLock\n  nameWithType: WeakEventManager.ReadLock\n- uid: System.Windows.WeakEventManager.Remove*\n  parent: System.Windows.WeakEventManager\n  isExternal: false\n  name: Remove\n  nameWithType: WeakEventManager.Remove\n- uid: System.Windows.WeakEventManager.ScheduleCleanup*\n  parent: System.Windows.WeakEventManager\n  isExternal: false\n  name: ScheduleCleanup\n  nameWithType: WeakEventManager.ScheduleCleanup\n- uid: System.Windows.WeakEventManager.SetCurrentManager*\n  parent: System.Windows.WeakEventManager\n  isExternal: false\n  name: SetCurrentManager\n  nameWithType: WeakEventManager.SetCurrentManager\n- uid: System.Windows.WeakEventManager.StartListening*\n  parent: System.Windows.WeakEventManager\n  isExternal: false\n  name: StartListening\n  nameWithType: WeakEventManager.StartListening\n- uid: System.Windows.WeakEventManager.StopListening*\n  parent: System.Windows.WeakEventManager\n  isExternal: false\n  name: StopListening\n  nameWithType: WeakEventManager.StopListening\n- uid: System.Windows.WeakEventManager.WriteLock*\n  parent: System.Windows.WeakEventManager\n  isExternal: false\n  name: WriteLock\n  nameWithType: WeakEventManager.WriteLock\n"}