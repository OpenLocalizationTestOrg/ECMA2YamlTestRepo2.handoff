{"nodes":[{"pos":[728,789],"content":"Provides the default output methods and behavior for tracing.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides the default output methods and behavior for tracing.","pos":[0,61]}]},{"pos":[8851,9035],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.DefaultTraceListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with \"Default\" as its &lt;xref:System.Diagnostics.TraceListener.Name*&gt; property value.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Diagnostics.DefaultTraceListener\"></xref> class with \"Default\" as its <xref:System.Diagnostics.TraceListener.Name*> property value."},{"pos":[10239,10329],"content":"Gets or sets a value indicating whether the application is running in user-interface mode.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating whether the application is running in user-interface mode.","pos":[0,90]}]},{"pos":[11038,11208],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if user-interface mode is enabled; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if user-interface mode is enabled; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[11700,11781],"content":"Emits or displays a message and a stack trace for an assertion that always fails.","needQuote":true,"needEscape":true,"nodes":[{"content":"Emits or displays a message and a stack trace for an assertion that always fails.","pos":[0,81]}]},{"pos":[11793,12000],"content":"By default, this method sends the <ph id=\"ph1\">`message`</ph> parameter and a stack trace to a message box (when the application runs in user-interface mode) and to the &lt;xref:System.Diagnostics.DefaultTraceListener&gt; instance.","needQuote":true,"needEscape":true,"source":"By default, this method sends the `message` parameter and a stack trace to a message box (when the application runs in user-interface mode) and to the <xref:System.Diagnostics.DefaultTraceListener> instance."},{"pos":[12617,12648],"content":"The message to emit or display.","needQuote":true,"needEscape":true,"nodes":[{"content":"The message to emit or display.","pos":[0,31]}]},{"pos":[13178,13267],"content":"Emits or displays detailed messages and a stack trace for an assertion that always fails.","needQuote":true,"needEscape":true,"nodes":[{"content":"Emits or displays detailed messages and a stack trace for an assertion that always fails.","pos":[0,89]}]},{"pos":[13279,13518],"content":"By default, this method sends the <ph id=\"ph1\">`message`</ph> parameter, the <ph id=\"ph2\">`detailMessage`</ph> parameter, and a stack trace to a message box (when the application runs in user-interface mode) and to the &lt;xref:System.Diagnostics.DefaultTraceListener&gt; instance.","needQuote":true,"needEscape":true,"source":"By default, this method sends the `message` parameter, the `detailMessage` parameter, and a stack trace to a message box (when the application runs in user-interface mode) and to the <xref:System.Diagnostics.DefaultTraceListener> instance."},{"pos":[14166,14197],"content":"The message to emit or display.","needQuote":true,"needEscape":true,"nodes":[{"content":"The message to emit or display.","pos":[0,31]}]},{"pos":[14267,14307],"content":"The detailed message to emit or display.","needQuote":true,"needEscape":true,"nodes":[{"content":"The detailed message to emit or display.","pos":[0,40]}]},{"pos":[14771,14843],"content":"Gets or sets the name of a log file to write trace or debug messages to.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the name of a log file to write trace or debug messages to.","pos":[0,72]}]},{"pos":[15511,15570],"content":"The name of a log file to write trace or debug messages to.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of a log file to write trace or debug messages to.","pos":[0,59]}]},{"pos":[16063,16275],"content":"Writes the output to the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_OutputDebugString\" name=\"OutputDebugString\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> function and to the <ph id=\"ph1\">&amp;lt;</ph>xref:System.Diagnostics.Debugger.Log%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph> method.","needQuote":true,"needEscape":true,"source":"Writes the output to the <xref uid=\"langword_csharp_OutputDebugString\" name=\"OutputDebugString\" href=\"\"></xref> function and to the &lt;xref:System.Diagnostics.Debugger.Log%2A?displayProperty=fullName&gt; method."},{"pos":[16287,16411],"content":"For information about the Win32 <ph id=\"ph1\">`OutputDebugString`</ph> debugging function, see \"OutputDebugString\" in the Platform SDK or MSDN.","needQuote":true,"needEscape":true,"source":"For information about the Win32 `OutputDebugString` debugging function, see \"OutputDebugString\" in the Platform SDK or MSDN."},{"pos":[17014,17169],"content":"The message to write to <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_OutputDebugString\" name=\"OutputDebugString\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and &lt;xref:System.Diagnostics.Debugger.Log*&gt;.","needQuote":true,"needEscape":true,"source":"The message to write to <xref uid=\"langword_csharp_OutputDebugString\" name=\"OutputDebugString\" href=\"\"></xref> and <xref:System.Diagnostics.Debugger.Log*>."},{"pos":[17676,17940],"content":"Writes the output to the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_OutputDebugString\" name=\"OutputDebugString\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> function and to the <ph id=\"ph1\">&amp;lt;</ph>xref:System.Diagnostics.Debugger.Log%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph> method, followed by a carriage return and line feed (\\r ).","needQuote":true,"needEscape":true,"source":"Writes the output to the <xref uid=\"langword_csharp_OutputDebugString\" name=\"OutputDebugString\" href=\"\"></xref> function and to the &lt;xref:System.Diagnostics.Debugger.Log%2A?displayProperty=fullName&gt; method, followed by a carriage return and line feed (\\r )."},{"pos":[18859,19014],"content":"The message to write to <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_OutputDebugString\" name=\"OutputDebugString\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and &lt;xref:System.Diagnostics.Debugger.Log*&gt;.","needQuote":true,"needEscape":true,"source":"The message to write to <xref uid=\"langword_csharp_OutputDebugString\" name=\"OutputDebugString\" href=\"\"></xref> and <xref:System.Diagnostics.Debugger.Log*>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Diagnostics.DefaultTraceListener\n  id: DefaultTraceListener\n  children:\n  - System.Diagnostics.DefaultTraceListener.#ctor\n  - System.Diagnostics.DefaultTraceListener.AssertUiEnabled\n  - System.Diagnostics.DefaultTraceListener.Fail(System.String)\n  - System.Diagnostics.DefaultTraceListener.Fail(System.String,System.String)\n  - System.Diagnostics.DefaultTraceListener.LogFileName\n  - System.Diagnostics.DefaultTraceListener.Write(System.String)\n  - System.Diagnostics.DefaultTraceListener.WriteLine(System.String)\n  langs:\n  - csharp\n  name: DefaultTraceListener\n  nameWithType: DefaultTraceListener\n  fullName: System.Diagnostics.DefaultTraceListener\n  type: Class\n  summary: Provides the default output methods and behavior for tracing.\n  remarks: \"An instance of this class is automatically added to the <xref:System.Diagnostics.Debug.Listeners%2A?displayProperty=fullName> and <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName> collections. Explicitly adding a second DefaultTraceListener causes duplicate messages in the debugger output window and duplicate message boxes for asserts.  \\n  \\n By default, the <xref:System.Diagnostics.DefaultTraceListener.Write%2A> and <xref:System.Diagnostics.DefaultTraceListener.WriteLine%2A> methods emit the message to the Win32 `OutputDebugString` function and to the <xref:System.Diagnostics.Debugger.Log%2A?displayProperty=fullName> method. For information about the `OutputDebugString` function, see the Platform SDK or MSDN.  \\n  \\n The <xref:System.Diagnostics.DefaultTraceListener.Fail%2A> method, by default, displays a message box when the application is running in a user interface mode; it also emits the message using <xref:System.Diagnostics.DefaultTraceListener.WriteLine%2A>.  \\n  \\n> [!NOTE]\\n>  The display of the message box for <xref:System.Diagnostics.Debug.Assert%2A> and <xref:System.Diagnostics.Debug.Fail%2A> method calls depends on the presence of the DefaultTraceListener. If the DefaultTraceListener is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed. The DefaultTraceListener can be removed by the [\\\\<clear> element](../Topic/%3Cclear%3E%20Element%20for%20%3Clisteners%3E%20for%20%3Ctrace%3E.md), by the [\\\\<remove> element](../Topic/%3Cremove%3E%20Element%20for%20%3Clisteners%3E%20for%20%3Ctrace%3E.md), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).  \\n  \\n You must enable tracing or debugging to use a trace listener. The following syntax is compiler specific. If you use compilers other than C# or Visual Basic, refer to the documentation for your compiler.  \\n  \\n-   To enable debugging in C#, add the `/d:DEBUG` flag to the compiler command line when you compile your code, or add `#define DEBUG` to the top of your file. In Visual Basic, add the `/d:DEBUG=True` flag to the compiler command line.  \\n  \\n-   To enable tracing in C#, add the `/d:TRACE` flag to the compiler command line when you compile your code, or add `#define TRACE` to the top of your file. In Visual Basic, add the `/d:TRACE=True` flag to the compiler command line.  \\n  \\n To add a trace listener, edit the configuration file that corresponds to the name of your application. Within this file, you can add a listener, set its type and set its parameters, remove a listener, or clear all the listeners previously set by the application. The configuration file should be formatted similar to the following example:  \\n  \\n```  \\n<configuration>  \\n<system.diagnostics>  \\n  <trace autoflush=\\\"false\\\" indentsize=\\\"4\\\">  \\n    <listeners>  \\n      <remove name=\\\"Default\\\" />  \\n      <add name=\\\"myListener\\\"  type=\\\"System.Diagnostics.TextWriterTraceListener\\\"    initializeData=\\\"c:\\\\myListener.log\\\" />  \\n    </listeners>  \\n  </trace>  \\n</system.diagnostics>  \\n</configuration>  \\n```\"\n  example:\n  - \"The following code example calculates binomial coefficients, which are values used in probability and statistics. This example uses a DefaultTraceListener to trace results and log errors. It creates a new DefaultTraceListener, adds it to the <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName> collection, and sets the <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A> property to the log file specified in the command-line arguments.  \\n  \\n If an error is detected while processing the input parameter, or if the `CalcBinomial` function throws an exception, the <xref:System.Diagnostics.DefaultTraceListener.Fail%2A> method logs and displays an error message. If the <xref:System.Diagnostics.DefaultTraceListener.AssertUiEnabled%2A> property is `false`, the error message is also written to the console. When the result is calculated successfully, the <xref:System.Diagnostics.DefaultTraceListener.Write%28System.String%29> and <xref:System.Diagnostics.DefaultTraceListener.WriteLine%28System.String%29> methods write the results to the log file.  \\n  \\n The <xref:System.Diagnostics.DefaultTraceListener.Fail%2A>, <xref:System.Diagnostics.DefaultTraceListener.Write%2A>, and <xref:System.Diagnostics.DefaultTraceListener.WriteLine%2A> methods cause trace information to be written only to the DefaultTraceListener. To write trace information to all listeners in the <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName> collection, use the <xref:System.Diagnostics.Trace.Fail%2A>, <xref:System.Diagnostics.Trace.Write%2A>, and <xref:System.Diagnostics.Trace.WriteLine%2A> methods of the <xref:System.Diagnostics.Trace> class.  \\n  \\n [!code-cs[System.Diagnostics.DefaultTraceListener#11](~/add/codesnippet/csharp/t-system.diagnostics.def_1.cs)]\\n [!code-vb[System.Diagnostics.DefaultTraceListener#11](~/add/codesnippet/visualbasic/t-system.diagnostics.def_1.vb)]\"\n  syntax:\n    content: 'public class DefaultTraceListener : System.Diagnostics.TraceListener'\n  inheritance:\n  - System.Object\n  - System.MarshalByRefObject\n  - System.Diagnostics.TraceListener\n  implements: []\n  inheritedMembers:\n  - System.Diagnostics.TraceListener.Attributes\n  - System.Diagnostics.TraceListener.Close\n  - System.Diagnostics.TraceListener.Dispose\n  - System.Diagnostics.TraceListener.Dispose(System.Boolean)\n  - System.Diagnostics.TraceListener.Filter\n  - System.Diagnostics.TraceListener.Flush\n  - System.Diagnostics.TraceListener.GetSupportedAttributes\n  - System.Diagnostics.TraceListener.IndentLevel\n  - System.Diagnostics.TraceListener.IndentSize\n  - System.Diagnostics.TraceListener.IsThreadSafe\n  - System.Diagnostics.TraceListener.Name\n  - System.Diagnostics.TraceListener.NeedIndent\n  - System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)\n  - System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])\n  - System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)\n  - System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)\n  - System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])\n  - System.Diagnostics.TraceListener.TraceOutputOptions\n  - System.Diagnostics.TraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)\n  - System.Diagnostics.TraceListener.Write(System.Object)\n  - System.Diagnostics.TraceListener.Write(System.Object,System.String)\n  - System.Diagnostics.TraceListener.Write(System.String,System.String)\n  - System.Diagnostics.TraceListener.WriteIndent\n  - System.Diagnostics.TraceListener.WriteLine(System.Object)\n  - System.Diagnostics.TraceListener.WriteLine(System.Object,System.String)\n  - System.Diagnostics.TraceListener.WriteLine(System.String,System.String)\n  - System.MarshalByRefObject.CreateObjRef(System.Type)\n  - System.MarshalByRefObject.GetLifetimeService\n  - System.MarshalByRefObject.InitializeLifetimeService\n  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  platform:\n  - net462\n- uid: System.Diagnostics.DefaultTraceListener.#ctor\n  id: '#ctor'\n  parent: System.Diagnostics.DefaultTraceListener\n  langs:\n  - csharp\n  name: DefaultTraceListener()\n  nameWithType: DefaultTraceListener.DefaultTraceListener()\n  fullName: System.Diagnostics.DefaultTraceListener.DefaultTraceListener()\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Initializes a new instance of the <xref href=\"System.Diagnostics.DefaultTraceListener\"></xref> class with \"Default\" as its <xref:System.Diagnostics.TraceListener.Name*> property value.\n  remarks: ''\n  example:\n  - \"The following code example removes the <xref:System.Diagnostics.DefaultTraceListener> provided by the application from the <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName> collection and then creates a new <xref:System.Diagnostics.DefaultTraceListener> and adds it to the <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName> collection.  \\n  \\n [!code-cs[System.Diagnostics.DefaultTraceListener#3](~/add/codesnippet/csharp/m-system.diagnostics.def_4_1.cs)]\\n [!code-vb[System.Diagnostics.DefaultTraceListener#3](~/add/codesnippet/visualbasic/m-system.diagnostics.def_4_1.vb)]\"\n  syntax:\n    content: public DefaultTraceListener ();\n    parameters: []\n  overload: System.Diagnostics.DefaultTraceListener.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.DefaultTraceListener.AssertUiEnabled\n  id: AssertUiEnabled\n  parent: System.Diagnostics.DefaultTraceListener\n  langs:\n  - csharp\n  name: AssertUiEnabled\n  nameWithType: DefaultTraceListener.AssertUiEnabled\n  fullName: System.Diagnostics.DefaultTraceListener.AssertUiEnabled\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Gets or sets a value indicating whether the application is running in user-interface mode.\n  remarks: ''\n  example:\n  - \"The following code example calls a function that calls the <xref:System.Diagnostics.DefaultTraceListener.Fail%28System.String%2CSystem.String%29> method to log an error message if the function throws an exception. If the AssertUiEnabled property is `false`, the method also writes the error message to the console.  \\n  \\n [!code-cs[System.Diagnostics.DefaultTraceListener#8](~/add/codesnippet/csharp/p-system.diagnostics.def_1_1.cs)]\\n [!code-vb[System.Diagnostics.DefaultTraceListener#8](~/add/codesnippet/visualbasic/p-system.diagnostics.def_1_1.vb)]\"\n  syntax:\n    content: public bool AssertUiEnabled { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if user-interface mode is enabled; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Diagnostics.DefaultTraceListener.AssertUiEnabled*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.DefaultTraceListener.Fail(System.String)\n  id: Fail(System.String)\n  parent: System.Diagnostics.DefaultTraceListener\n  langs:\n  - csharp\n  name: Fail(String)\n  nameWithType: DefaultTraceListener.Fail(String)\n  fullName: System.Diagnostics.DefaultTraceListener.Fail(String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Emits or displays a message and a stack trace for an assertion that always fails.\n  remarks: By default, this method sends the `message` parameter and a stack trace to a message box (when the application runs in user-interface mode) and to the <xref:System.Diagnostics.DefaultTraceListener> instance.\n  example:\n  - \"The following code example writes an error message to a <xref:System.Diagnostics.DefaultTraceListener> using the Fail method. The method also writes the message to the console if a user interface is not available.  \\n  \\n [!code-cs[System.Diagnostics.DefaultTraceListener#6](~/add/codesnippet/csharp/m-system.diagnostics.def_2_1.cs)]\\n [!code-vb[System.Diagnostics.DefaultTraceListener#6](~/add/codesnippet/visualbasic/m-system.diagnostics.def_2_1.vb)]\"\n  syntax:\n    content: public override void Fail (string message);\n    parameters:\n    - id: message\n      type: System.String\n      description: The message to emit or display.\n  overload: System.Diagnostics.DefaultTraceListener.Fail*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.DefaultTraceListener.Fail(System.String,System.String)\n  id: Fail(System.String,System.String)\n  parent: System.Diagnostics.DefaultTraceListener\n  langs:\n  - csharp\n  name: Fail(String,String)\n  nameWithType: DefaultTraceListener.Fail(String,String)\n  fullName: System.Diagnostics.DefaultTraceListener.Fail(String,String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Emits or displays detailed messages and a stack trace for an assertion that always fails.\n  remarks: By default, this method sends the `message` parameter, the `detailMessage` parameter, and a stack trace to a message box (when the application runs in user-interface mode) and to the <xref:System.Diagnostics.DefaultTraceListener> instance.\n  example:\n  - \"The following code example calls a function that calls the Fail method to log a detailed error message if the function throws an exception. The method writes the message to the console if a user interface is not available.  \\n  \\n [!code-cs[System.Diagnostics.DefaultTraceListener#8](~/add/codesnippet/csharp/m-system.diagnostics.def_0_1.cs)]\\n [!code-vb[System.Diagnostics.DefaultTraceListener#8](~/add/codesnippet/visualbasic/m-system.diagnostics.def_0_1.vb)]\"\n  syntax:\n    content: public override void Fail (string message, string detailMessage);\n    parameters:\n    - id: message\n      type: System.String\n      description: The message to emit or display.\n    - id: detailMessage\n      type: System.String\n      description: The detailed message to emit or display.\n  overload: System.Diagnostics.DefaultTraceListener.Fail*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.DefaultTraceListener.LogFileName\n  id: LogFileName\n  parent: System.Diagnostics.DefaultTraceListener\n  langs:\n  - csharp\n  name: LogFileName\n  nameWithType: DefaultTraceListener.LogFileName\n  fullName: System.Diagnostics.DefaultTraceListener.LogFileName\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Gets or sets the name of a log file to write trace or debug messages to.\n  remarks: ''\n  example:\n  - \"The following code example creates a new <xref:System.Diagnostics.DefaultTraceListener>, adds it to the <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName> collection, and sets the LogFileName property to the log file specified in the command-line arguments.  \\n  \\n [!code-cs[System.Diagnostics.DefaultTraceListener#4](~/add/codesnippet/csharp/p-system.diagnostics.def_0_1.cs)]\\n [!code-vb[System.Diagnostics.DefaultTraceListener#4](~/add/codesnippet/visualbasic/p-system.diagnostics.def_0_1.vb)]\"\n  syntax:\n    content: public string LogFileName { get; set; }\n    return:\n      type: System.String\n      description: The name of a log file to write trace or debug messages to.\n  overload: System.Diagnostics.DefaultTraceListener.LogFileName*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.DefaultTraceListener.Write(System.String)\n  id: Write(System.String)\n  parent: System.Diagnostics.DefaultTraceListener\n  langs:\n  - csharp\n  name: Write(String)\n  nameWithType: DefaultTraceListener.Write(String)\n  fullName: System.Diagnostics.DefaultTraceListener.Write(String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Writes the output to the <xref uid=\"langword_csharp_OutputDebugString\" name=\"OutputDebugString\" href=\"\"></xref> function and to the &lt;xref:System.Diagnostics.Debugger.Log%2A?displayProperty=fullName&gt; method.\n  remarks: For information about the Win32 `OutputDebugString` debugging function, see \"OutputDebugString\" in the Platform SDK or MSDN.\n  example:\n  - \"The following code example formats the results of a function and uses the Write method to write the first part of the message to a <xref:System.Diagnostics.DefaultTraceListener>.  \\n  \\n [!code-vb[System.Diagnostics.DefaultTraceListener.WriteLine#4](~/add/codesnippet/visualbasic/m-system.diagnostics.def_3_1.vb)]\\n [!code-cs[System.Diagnostics.DefaultTraceListener.WriteLine#4](~/add/codesnippet/csharp/m-system.diagnostics.def_3_1.cs)]\"\n  syntax:\n    content: public override void Write (string message);\n    parameters:\n    - id: message\n      type: System.String\n      description: The message to write to <xref uid=\"langword_csharp_OutputDebugString\" name=\"OutputDebugString\" href=\"\"></xref> and <xref:System.Diagnostics.Debugger.Log*>.\n  overload: System.Diagnostics.DefaultTraceListener.Write*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.DefaultTraceListener.WriteLine(System.String)\n  id: WriteLine(System.String)\n  parent: System.Diagnostics.DefaultTraceListener\n  langs:\n  - csharp\n  name: WriteLine(String)\n  nameWithType: DefaultTraceListener.WriteLine(String)\n  fullName: System.Diagnostics.DefaultTraceListener.WriteLine(String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Writes the output to the <xref uid=\"langword_csharp_OutputDebugString\" name=\"OutputDebugString\" href=\"\"></xref> function and to the &lt;xref:System.Diagnostics.Debugger.Log%2A?displayProperty=fullName&gt; method, followed by a carriage return and line feed (\\r\\n).\n  remarks: \"The default line terminator is a carriage return followed by a line feed (\\\\r\\\\n).  \\n  \\n For information about the Win32 `OutputDebugString` debugging function, see the Platform SDK or MSDN.  \\n  \\n This method sets the <xref:System.Diagnostics.TraceListener.NeedIndent%2A> property to `true`.\"\n  example:\n  - \"The following code example formats the results of a function and uses the WriteLine method to write the last part of the message to a <xref:System.Diagnostics.DefaultTraceListener>.  \\n  \\n [!code-vb[System.Diagnostics.DefaultTraceListener.WriteLine#4](~/add/codesnippet/visualbasic/m-system.diagnostics.def_1_1.vb)]\\n [!code-cs[System.Diagnostics.DefaultTraceListener.WriteLine#4](~/add/codesnippet/csharp/m-system.diagnostics.def_1_1.cs)]\"\n  syntax:\n    content: public override void WriteLine (string message);\n    parameters:\n    - id: message\n      type: System.String\n      description: The message to write to <xref uid=\"langword_csharp_OutputDebugString\" name=\"OutputDebugString\" href=\"\"></xref> and <xref:System.Diagnostics.Debugger.Log*>.\n  overload: System.Diagnostics.DefaultTraceListener.WriteLine*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Diagnostics.TraceListener\n  isExternal: false\n  name: System.Diagnostics.TraceListener\n- uid: System.Diagnostics.DefaultTraceListener.#ctor\n  parent: System.Diagnostics.DefaultTraceListener\n  isExternal: false\n  name: DefaultTraceListener()\n  nameWithType: DefaultTraceListener.DefaultTraceListener()\n  fullName: System.Diagnostics.DefaultTraceListener.DefaultTraceListener()\n- uid: System.Diagnostics.DefaultTraceListener.AssertUiEnabled\n  parent: System.Diagnostics.DefaultTraceListener\n  isExternal: false\n  name: AssertUiEnabled\n  nameWithType: DefaultTraceListener.AssertUiEnabled\n  fullName: System.Diagnostics.DefaultTraceListener.AssertUiEnabled\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Diagnostics.DefaultTraceListener.Fail(System.String)\n  parent: System.Diagnostics.DefaultTraceListener\n  isExternal: false\n  name: Fail(String)\n  nameWithType: DefaultTraceListener.Fail(String)\n  fullName: System.Diagnostics.DefaultTraceListener.Fail(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Diagnostics.DefaultTraceListener.Fail(System.String,System.String)\n  parent: System.Diagnostics.DefaultTraceListener\n  isExternal: false\n  name: Fail(String,String)\n  nameWithType: DefaultTraceListener.Fail(String,String)\n  fullName: System.Diagnostics.DefaultTraceListener.Fail(String,String)\n- uid: System.Diagnostics.DefaultTraceListener.LogFileName\n  parent: System.Diagnostics.DefaultTraceListener\n  isExternal: false\n  name: LogFileName\n  nameWithType: DefaultTraceListener.LogFileName\n  fullName: System.Diagnostics.DefaultTraceListener.LogFileName\n- uid: System.Diagnostics.DefaultTraceListener.Write(System.String)\n  parent: System.Diagnostics.DefaultTraceListener\n  isExternal: false\n  name: Write(String)\n  nameWithType: DefaultTraceListener.Write(String)\n  fullName: System.Diagnostics.DefaultTraceListener.Write(String)\n- uid: System.Diagnostics.DefaultTraceListener.WriteLine(System.String)\n  parent: System.Diagnostics.DefaultTraceListener\n  isExternal: false\n  name: WriteLine(String)\n  nameWithType: DefaultTraceListener.WriteLine(String)\n  fullName: System.Diagnostics.DefaultTraceListener.WriteLine(String)\n- uid: System.Diagnostics.DefaultTraceListener.#ctor*\n  parent: System.Diagnostics.DefaultTraceListener\n  isExternal: false\n  name: DefaultTraceListener\n  nameWithType: DefaultTraceListener.DefaultTraceListener\n- uid: System.Diagnostics.DefaultTraceListener.AssertUiEnabled*\n  parent: System.Diagnostics.DefaultTraceListener\n  isExternal: false\n  name: AssertUiEnabled\n  nameWithType: DefaultTraceListener.AssertUiEnabled\n- uid: System.Diagnostics.DefaultTraceListener.Fail*\n  parent: System.Diagnostics.DefaultTraceListener\n  isExternal: false\n  name: Fail\n  nameWithType: DefaultTraceListener.Fail\n- uid: System.Diagnostics.DefaultTraceListener.LogFileName*\n  parent: System.Diagnostics.DefaultTraceListener\n  isExternal: false\n  name: LogFileName\n  nameWithType: DefaultTraceListener.LogFileName\n- uid: System.Diagnostics.DefaultTraceListener.Write*\n  parent: System.Diagnostics.DefaultTraceListener\n  isExternal: false\n  name: Write\n  nameWithType: DefaultTraceListener.Write\n- uid: System.Diagnostics.DefaultTraceListener.WriteLine*\n  parent: System.Diagnostics.DefaultTraceListener\n  isExternal: false\n  name: WriteLine\n  nameWithType: DefaultTraceListener.WriteLine\n"}