{"nodes":[{"pos":[1791,1803],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[3910,3922],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[4620,4632],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[5348,5360],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[6370,6382],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[7028,7040],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[7969,7981],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[8059,8071],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[8841,8853],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[8931,8943],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[9646,9658],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[9704,9716],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[10486,10498],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[10571,10583],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[11497,11509],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[11587,11599],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[12362,12374],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[12452,12464],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[13190,13202],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[13252,13264],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Activities.InOutArgument`1\n  id: InOutArgument`1\n  children:\n  - System.Activities.InOutArgument`1.#ctor\n  - System.Activities.InOutArgument`1.#ctor(System.Activities.Activity{System.Activities.Location{`0}})\n  - System.Activities.InOutArgument`1.#ctor(System.Activities.Variable)\n  - System.Activities.InOutArgument`1.#ctor(System.Activities.Variable`1)\n  - System.Activities.InOutArgument`1.#ctor(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,`0}})\n  - System.Activities.InOutArgument`1.Expression\n  - System.Activities.InOutArgument`1.FromExpression(System.Activities.Activity{System.Activities.Location{`0}})\n  - System.Activities.InOutArgument`1.FromVariable(System.Activities.Variable`1)\n  - System.Activities.InOutArgument`1.Get(System.Activities.ActivityContext)\n  - System.Activities.InOutArgument`1.GetLocation(System.Activities.ActivityContext)\n  - System.Activities.InOutArgument`1.op_Implicit(System.Activities.Activity{System.Activities.Location{`0}})\n  - System.Activities.InOutArgument`1.op_Implicit(System.Activities.Variable`1)\n  - System.Activities.InOutArgument`1.Set(System.Activities.ActivityContext,`0)\n  langs:\n  - csharp\n  name: InOutArgument<T>\n  nameWithType: InOutArgument<T>\n  fullName: System.Activities.InOutArgument<T>\n  type: Class\n  syntax:\n    content: >-\n      [System.ComponentModel.TypeConverter(typeof(System.Activities.XamlIntegration.InOutArgumentConverter))]\n\n      [System.Windows.Markup.ContentProperty(\"Expression\")]\n\n      [System.Windows.Markup.ValueSerializer(typeof(System.Activities.XamlIntegration.ArgumentValueSerializer))]\n\n      public sealed class InOutArgument<T> : System.Activities.InOutArgument\n    typeParameters:\n    - id: T\n      description: To be added.\n  inheritance:\n  - System.Object\n  - System.Activities.Argument\n  - System.Activities.InOutArgument\n  implements: []\n  inheritedMembers:\n  - System.Activities.Argument.ArgumentType\n  - System.Activities.Argument.Create(System.Type,System.Activities.ArgumentDirection)\n  - System.Activities.Argument.CreateReference(System.Activities.Argument,System.String)\n  - System.Activities.Argument.Direction\n  - System.Activities.Argument.EvaluationOrder\n  - System.Activities.Argument.Get``1(System.Activities.ActivityContext)\n  - System.Activities.Argument.ResultValue\n  - System.Activities.Argument.Set(System.Activities.ActivityContext,System.Object)\n  - System.Activities.Argument.UnspecifiedEvaluationOrder\n  - System.Activities.InOutArgument.CreateReference(System.Activities.InOutArgument,System.String)\n  platform:\n  - net462\n- uid: System.Activities.InOutArgument`1.#ctor\n  id: '#ctor'\n  parent: System.Activities.InOutArgument`1\n  langs:\n  - csharp\n  name: InOutArgument()\n  nameWithType: InOutArgument<T>.InOutArgument()\n  fullName: System.Activities.InOutArgument<T>.InOutArgument()\n  type: Constructor\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  syntax:\n    content: public InOutArgument ();\n    parameters: []\n  overload: System.Activities.InOutArgument`1.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.InOutArgument`1.#ctor(System.Activities.Activity{System.Activities.Location{`0}})\n  id: '#ctor(System.Activities.Activity{System.Activities.Location{`0}})'\n  parent: System.Activities.InOutArgument`1\n  langs:\n  - csharp\n  name: InOutArgument(Activity<Location<T>>)\n  nameWithType: InOutArgument<T>.InOutArgument(Activity<Location<T>>)\n  fullName: System.Activities.InOutArgument<T>.InOutArgument(Activity<Location<T>>)\n  type: Constructor\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  syntax:\n    content: public InOutArgument (System.Activities.Activity<System.Activities.Location<T>> expression);\n    parameters:\n    - id: expression\n      type: System.Activities.Activity{System.Activities.Location{T}}\n      description: To be added.\n  overload: System.Activities.InOutArgument`1.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.InOutArgument`1.#ctor(System.Activities.Variable)\n  id: '#ctor(System.Activities.Variable)'\n  parent: System.Activities.InOutArgument`1\n  langs:\n  - csharp\n  name: InOutArgument(Variable)\n  nameWithType: InOutArgument<T>.InOutArgument(Variable)\n  fullName: System.Activities.InOutArgument<T>.InOutArgument(Variable)\n  type: Constructor\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  syntax:\n    content: public InOutArgument (System.Activities.Variable variable);\n    parameters:\n    - id: variable\n      type: System.Activities.Variable\n      description: To be added.\n  overload: System.Activities.InOutArgument`1.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.InOutArgument`1.#ctor(System.Activities.Variable`1)\n  id: '#ctor(System.Activities.Variable`1)'\n  parent: System.Activities.InOutArgument`1\n  langs:\n  - csharp\n  name: InOutArgument(Variable<T>)\n  nameWithType: InOutArgument<T>.InOutArgument(Variable<T>)\n  fullName: System.Activities.InOutArgument<T>.InOutArgument(Variable<T>)\n  type: Constructor\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  syntax:\n    content: public InOutArgument (System.Activities.Variable<T> variable);\n    parameters:\n    - id: variable\n      type: System.Activities.Variable`1\n      description: To be added.\n  overload: System.Activities.InOutArgument`1.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.InOutArgument`1.#ctor(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,`0}})\n  id: '#ctor(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,`0}})'\n  parent: System.Activities.InOutArgument`1\n  langs:\n  - csharp\n  name: InOutArgument(Expression<Func<ActivityContext,T>>)\n  nameWithType: InOutArgument<T>.InOutArgument(Expression<Func<ActivityContext,T>>)\n  fullName: System.Activities.InOutArgument<T>.InOutArgument(Expression<Func<ActivityContext,T>>)\n  type: Constructor\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  syntax:\n    content: public InOutArgument (System.Linq.Expressions.Expression<Func<System.Activities.ActivityContext,T>> expression);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,T}}\n      description: To be added.\n  overload: System.Activities.InOutArgument`1.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.InOutArgument`1.Expression\n  id: Expression\n  parent: System.Activities.InOutArgument`1\n  langs:\n  - csharp\n  name: Expression\n  nameWithType: InOutArgument<T>.Expression\n  fullName: System.Activities.InOutArgument<T>.Expression\n  type: Property\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  syntax:\n    content: public System.Activities.Activity<System.Activities.Location<T>> Expression { get; set; }\n    return:\n      type: System.Activities.Activity{System.Activities.Location{T}}\n      description: To be added.\n  overload: System.Activities.InOutArgument`1.Expression*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.InOutArgument`1.FromExpression(System.Activities.Activity{System.Activities.Location{`0}})\n  id: FromExpression(System.Activities.Activity{System.Activities.Location{`0}})\n  parent: System.Activities.InOutArgument`1\n  langs:\n  - csharp\n  name: FromExpression(Activity<Location<T>>)\n  nameWithType: InOutArgument<T>.FromExpression(Activity<Location<T>>)\n  fullName: System.Activities.InOutArgument<T>.FromExpression(Activity<Location<T>>)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  syntax:\n    content: public static System.Activities.InOutArgument<T> FromExpression (System.Activities.Activity<System.Activities.Location<T>> expression);\n    parameters:\n    - id: expression\n      type: System.Activities.Activity{System.Activities.Location{T}}\n      description: To be added.\n    return:\n      type: System.Activities.InOutArgument`1\n      description: To be added.\n  overload: System.Activities.InOutArgument`1.FromExpression*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.InOutArgument`1.FromVariable(System.Activities.Variable`1)\n  id: FromVariable(System.Activities.Variable`1)\n  parent: System.Activities.InOutArgument`1\n  langs:\n  - csharp\n  name: FromVariable(Variable<T>)\n  nameWithType: InOutArgument<T>.FromVariable(Variable<T>)\n  fullName: System.Activities.InOutArgument<T>.FromVariable(Variable<T>)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  syntax:\n    content: public static System.Activities.InOutArgument<T> FromVariable (System.Activities.Variable<T> variable);\n    parameters:\n    - id: variable\n      type: System.Activities.Variable`1\n      description: To be added.\n    return:\n      type: System.Activities.InOutArgument`1\n      description: To be added.\n  overload: System.Activities.InOutArgument`1.FromVariable*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.InOutArgument`1.Get(System.Activities.ActivityContext)\n  id: Get(System.Activities.ActivityContext)\n  parent: System.Activities.InOutArgument`1\n  langs:\n  - csharp\n  name: Get(ActivityContext)\n  nameWithType: InOutArgument<T>.Get(ActivityContext)\n  fullName: System.Activities.InOutArgument<T>.Get(ActivityContext)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  syntax:\n    content: public T Get (System.Activities.ActivityContext context);\n    parameters:\n    - id: context\n      type: System.Activities.ActivityContext\n      description: To be added.\n    return:\n      type: T\n      description: To be added.\n  overload: System.Activities.InOutArgument`1.Get*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.InOutArgument`1.GetLocation(System.Activities.ActivityContext)\n  id: GetLocation(System.Activities.ActivityContext)\n  parent: System.Activities.InOutArgument`1\n  langs:\n  - csharp\n  name: GetLocation(ActivityContext)\n  nameWithType: InOutArgument<T>.GetLocation(ActivityContext)\n  fullName: System.Activities.InOutArgument<T>.GetLocation(ActivityContext)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  syntax:\n    content: public System.Activities.Location<T> GetLocation (System.Activities.ActivityContext context);\n    parameters:\n    - id: context\n      type: System.Activities.ActivityContext\n      description: To be added.\n    return:\n      type: System.Activities.Location`1\n      description: To be added.\n  overload: System.Activities.InOutArgument`1.GetLocation*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.InOutArgument`1.op_Implicit(System.Activities.Activity{System.Activities.Location{`0}})\n  id: op_Implicit(System.Activities.Activity{System.Activities.Location{`0}})\n  parent: System.Activities.InOutArgument`1\n  langs:\n  - csharp\n  name: op_Implicit(Activity<Location<T>>)\n  nameWithType: InOutArgument<T>.op_Implicit(Activity<Location<T>>)\n  fullName: System.Activities.InOutArgument<T>.op_Implicit(Activity<Location<T>>)\n  type: Operator\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  syntax:\n    content: public static System.Activities.InOutArgument<T> op_Implicit (System.Activities.Activity<System.Activities.Location<T>> expression);\n    parameters:\n    - id: expression\n      type: System.Activities.Activity{System.Activities.Location{T}}\n      description: To be added.\n    return:\n      type: System.Activities.InOutArgument`1\n      description: To be added.\n  overload: System.Activities.InOutArgument`1.op_Implicit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.InOutArgument`1.op_Implicit(System.Activities.Variable`1)\n  id: op_Implicit(System.Activities.Variable`1)\n  parent: System.Activities.InOutArgument`1\n  langs:\n  - csharp\n  name: op_Implicit(Variable<T>)\n  nameWithType: InOutArgument<T>.op_Implicit(Variable<T>)\n  fullName: System.Activities.InOutArgument<T>.op_Implicit(Variable<T>)\n  type: Operator\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  syntax:\n    content: public static System.Activities.InOutArgument<T> op_Implicit (System.Activities.Variable<T> variable);\n    parameters:\n    - id: variable\n      type: System.Activities.Variable`1\n      description: To be added.\n    return:\n      type: System.Activities.InOutArgument`1\n      description: To be added.\n  overload: System.Activities.InOutArgument`1.op_Implicit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.InOutArgument`1.Set(System.Activities.ActivityContext,`0)\n  id: Set(System.Activities.ActivityContext,`0)\n  parent: System.Activities.InOutArgument`1\n  langs:\n  - csharp\n  name: Set(ActivityContext,T)\n  nameWithType: InOutArgument<T>.Set(ActivityContext,T)\n  fullName: System.Activities.InOutArgument<T>.Set(ActivityContext,T)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  syntax:\n    content: public void Set (System.Activities.ActivityContext context, T value);\n    parameters:\n    - id: context\n      type: System.Activities.ActivityContext\n      description: To be added.\n    - id: value\n      type: T\n      description: To be added.\n  overload: System.Activities.InOutArgument`1.Set*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Activities.InOutArgument\n  isExternal: false\n  name: System.Activities.InOutArgument\n- uid: System.Activities.InOutArgument`1.#ctor\n  parent: System.Activities.InOutArgument`1\n  isExternal: false\n  name: InOutArgument()\n  nameWithType: InOutArgument<T>.InOutArgument()\n  fullName: System.Activities.InOutArgument<T>.InOutArgument()\n- uid: System.Activities.InOutArgument`1.#ctor(System.Activities.Activity{System.Activities.Location{`0}})\n  parent: System.Activities.InOutArgument`1\n  isExternal: false\n  name: InOutArgument(Activity<Location<T>>)\n  nameWithType: InOutArgument<T>.InOutArgument(Activity<Location<T>>)\n  fullName: System.Activities.InOutArgument<T>.InOutArgument(Activity<Location<T>>)\n- uid: System.Activities.Activity{System.Activities.Location{T}}\n  parent: System.Activities\n  isExternal: false\n  name: Activity<Location<T>>\n  nameWithType: Activity<Location<T>>\n  fullName: System.Activities.Activity<System.Activities.Location<T>>\n  spec.csharp:\n  - uid: System.Activities.Activity`1\n    name: Activity\n    nameWithType: Activity\n    fullName: Activity<System.Activities.Location<T>>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Activities.Location`1\n    name: Location\n    nameWithType: Location\n    fullName: Location<T>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: T\n    name: T\n    nameWithType: T\n    fullName: T\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Activities.InOutArgument`1.#ctor(System.Activities.Variable)\n  parent: System.Activities.InOutArgument`1\n  isExternal: false\n  name: InOutArgument(Variable)\n  nameWithType: InOutArgument<T>.InOutArgument(Variable)\n  fullName: System.Activities.InOutArgument<T>.InOutArgument(Variable)\n- uid: System.Activities.Variable\n  parent: System.Activities\n  isExternal: false\n  name: Variable\n  nameWithType: Variable\n  fullName: System.Activities.Variable\n- uid: System.Activities.InOutArgument`1.#ctor(System.Activities.Variable`1)\n  parent: System.Activities.InOutArgument`1\n  isExternal: false\n  name: InOutArgument(Variable<T>)\n  nameWithType: InOutArgument<T>.InOutArgument(Variable<T>)\n  fullName: System.Activities.InOutArgument<T>.InOutArgument(Variable<T>)\n- uid: System.Activities.Variable`1\n  parent: System.Activities\n  isExternal: false\n  name: Variable<T>\n  nameWithType: Variable<T>\n  fullName: System.Activities.Variable<T>\n- uid: System.Activities.InOutArgument`1.#ctor(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,`0}})\n  parent: System.Activities.InOutArgument`1\n  isExternal: false\n  name: InOutArgument(Expression<Func<ActivityContext,T>>)\n  nameWithType: InOutArgument<T>.InOutArgument(Expression<Func<ActivityContext,T>>)\n  fullName: System.Activities.InOutArgument<T>.InOutArgument(Expression<Func<ActivityContext,T>>)\n- uid: System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,T}}\n  parent: System.Linq.Expressions\n  isExternal: true\n  name: Expression<Func<ActivityContext,T>>\n  nameWithType: Expression<Func<ActivityContext,T>>\n  fullName: System.Linq.Expressions.Expression<System.Func<System.Activities.ActivityContext,T>>\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expression\n    nameWithType: Expression\n    fullName: Expression<System.Func<System.Activities.ActivityContext,T>>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: Func<System.Activities.ActivityContext,T>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Activities.ActivityContext\n    name: ActivityContext\n    nameWithType: ActivityContext\n    fullName: ActivityContext\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: T\n    name: T\n    nameWithType: T\n    fullName: T\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Activities.InOutArgument`1.Expression\n  parent: System.Activities.InOutArgument`1\n  isExternal: false\n  name: Expression\n  nameWithType: InOutArgument<T>.Expression\n  fullName: System.Activities.InOutArgument<T>.Expression\n- uid: System.Activities.InOutArgument`1.FromExpression(System.Activities.Activity{System.Activities.Location{`0}})\n  parent: System.Activities.InOutArgument`1\n  isExternal: false\n  name: FromExpression(Activity<Location<T>>)\n  nameWithType: InOutArgument<T>.FromExpression(Activity<Location<T>>)\n  fullName: System.Activities.InOutArgument<T>.FromExpression(Activity<Location<T>>)\n- uid: System.Activities.InOutArgument`1\n  parent: System.Activities\n  isExternal: false\n  name: InOutArgument<T>\n  nameWithType: InOutArgument<T>\n  fullName: System.Activities.InOutArgument<T>\n- uid: System.Activities.InOutArgument`1.FromVariable(System.Activities.Variable`1)\n  parent: System.Activities.InOutArgument`1\n  isExternal: false\n  name: FromVariable(Variable<T>)\n  nameWithType: InOutArgument<T>.FromVariable(Variable<T>)\n  fullName: System.Activities.InOutArgument<T>.FromVariable(Variable<T>)\n- uid: System.Activities.InOutArgument`1.Get(System.Activities.ActivityContext)\n  parent: System.Activities.InOutArgument`1\n  isExternal: false\n  name: Get(ActivityContext)\n  nameWithType: InOutArgument<T>.Get(ActivityContext)\n  fullName: System.Activities.InOutArgument<T>.Get(ActivityContext)\n- uid: T\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.Activities.ActivityContext\n  parent: System.Activities\n  isExternal: false\n  name: ActivityContext\n  nameWithType: ActivityContext\n  fullName: System.Activities.ActivityContext\n- uid: System.Activities.InOutArgument`1.GetLocation(System.Activities.ActivityContext)\n  parent: System.Activities.InOutArgument`1\n  isExternal: false\n  name: GetLocation(ActivityContext)\n  nameWithType: InOutArgument<T>.GetLocation(ActivityContext)\n  fullName: System.Activities.InOutArgument<T>.GetLocation(ActivityContext)\n- uid: System.Activities.Location`1\n  parent: System.Activities\n  isExternal: false\n  name: Location<T>\n  nameWithType: Location<T>\n  fullName: System.Activities.Location<T>\n- uid: System.Activities.InOutArgument`1.op_Implicit(System.Activities.Activity{System.Activities.Location{`0}})\n  parent: System.Activities.InOutArgument`1\n  isExternal: false\n  name: op_Implicit(Activity<Location<T>>)\n  nameWithType: InOutArgument<T>.op_Implicit(Activity<Location<T>>)\n  fullName: System.Activities.InOutArgument<T>.op_Implicit(Activity<Location<T>>)\n- uid: System.Activities.InOutArgument`1.op_Implicit(System.Activities.Variable`1)\n  parent: System.Activities.InOutArgument`1\n  isExternal: false\n  name: op_Implicit(Variable<T>)\n  nameWithType: InOutArgument<T>.op_Implicit(Variable<T>)\n  fullName: System.Activities.InOutArgument<T>.op_Implicit(Variable<T>)\n- uid: System.Activities.InOutArgument`1.Set(System.Activities.ActivityContext,`0)\n  parent: System.Activities.InOutArgument`1\n  isExternal: false\n  name: Set(ActivityContext,T)\n  nameWithType: InOutArgument<T>.Set(ActivityContext,T)\n  fullName: System.Activities.InOutArgument<T>.Set(ActivityContext,T)\n- uid: System.Activities.InOutArgument`1.#ctor*\n  parent: System.Activities.InOutArgument`1\n  isExternal: false\n  name: InOutArgument<T>\n  nameWithType: InOutArgument<T>.InOutArgument<T>\n- uid: System.Activities.InOutArgument`1.Expression*\n  parent: System.Activities.InOutArgument`1\n  isExternal: false\n  name: Expression\n  nameWithType: InOutArgument<T>.Expression\n- uid: System.Activities.InOutArgument`1.FromExpression*\n  parent: System.Activities.InOutArgument`1\n  isExternal: false\n  name: FromExpression\n  nameWithType: InOutArgument<T>.FromExpression\n- uid: System.Activities.InOutArgument`1.FromVariable*\n  parent: System.Activities.InOutArgument`1\n  isExternal: false\n  name: FromVariable\n  nameWithType: InOutArgument<T>.FromVariable\n- uid: System.Activities.InOutArgument`1.Get*\n  parent: System.Activities.InOutArgument`1\n  isExternal: false\n  name: Get\n  nameWithType: InOutArgument<T>.Get\n- uid: System.Activities.InOutArgument`1.GetLocation*\n  parent: System.Activities.InOutArgument`1\n  isExternal: false\n  name: GetLocation\n  nameWithType: InOutArgument<T>.GetLocation\n- uid: System.Activities.InOutArgument`1.op_Implicit*\n  parent: System.Activities.InOutArgument`1\n  isExternal: false\n  name: op_Implicit\n  nameWithType: InOutArgument<T>.op_Implicit\n- uid: System.Activities.InOutArgument`1.Set*\n  parent: System.Activities.InOutArgument`1\n  isExternal: false\n  name: Set\n  nameWithType: InOutArgument<T>.Set\n"}