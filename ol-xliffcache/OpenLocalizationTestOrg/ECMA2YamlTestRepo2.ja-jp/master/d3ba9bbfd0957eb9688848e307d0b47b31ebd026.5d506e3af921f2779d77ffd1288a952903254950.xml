{"nodes":[{"pos":[440,504],"content":"Indicates how to open a file when calling file-access functions.","needQuote":true,"needEscape":true,"nodes":[{"content":"Indicates how to open a file when calling file-access functions.","pos":[0,64]}]},{"pos":[517,1542],"content":"When you call file access–related functions, you can use enumeration members in your code instead of the actual values.       The `OpenMode` enumeration defines constants used to set file access modes. The following table lists the `OpenMode` enumeration members.       `Input`, `Output`, and `Append` are used when sequentially accessing files, such as text files, whereas `Binary` is used for binary file access and `Random` for random file access. For examples, see the <xref:Microsoft.VisualBasic.FileSystem.FileOpen%2A> method.       When sequentially accessing a file, you cannot change its data. You can read the data, append to it, or overwrite it with new data. If you open it for input, the contents of the file will be overwritten, even if you do not directly write to the file.       When performing file I/O operations, the `My.Computer.FileSystem` object provides better performance and ease of use than earlier file I/O methods. For more information, see <xref:Microsoft.VisualBasic.FileSystem> object.","needQuote":false,"needEscape":true,"nodes":[{"content":"When you call file access–related functions, you can use enumeration members in your code instead of the actual values.","pos":[0,119]},{"content":"The <ph id=\"ph1\">`OpenMode`</ph> enumeration defines constants used to set file access modes.","pos":[126,201],"source":"       The `OpenMode` enumeration defines constants used to set file access modes."},{"content":"The following table lists the <ph id=\"ph1\">`OpenMode`</ph> enumeration members.","pos":[202,263],"source":" The following table lists the `OpenMode` enumeration members."},{"content":"<ph id=\"ph1\">`Input`</ph>, <ph id=\"ph2\">`Output`</ph>, and <ph id=\"ph3\">`Append`</ph> are used when sequentially accessing files, such as text files, whereas <ph id=\"ph4\">`Binary`</ph> is used for binary file access and <ph id=\"ph5\">`Random`</ph> for random file access.","pos":[270,450],"source":"`Input`, `Output`, and `Append` are used when sequentially accessing files, such as text files, whereas `Binary` is used for binary file access and `Random` for random file access."},{"content":"For examples, see the &lt;xref:Microsoft.VisualBasic.FileSystem.FileOpen%2A&gt; method.","pos":[451,532],"source":" For examples, see the <xref:Microsoft.VisualBasic.FileSystem.FileOpen%2A> method."},{"content":"When sequentially accessing a file, you cannot change its data.","pos":[539,602]},{"content":"You can read the data, append to it, or overwrite it with new data.","pos":[603,670]},{"content":"If you open it for input, the contents of the file will be overwritten, even if you do not directly write to the file.","pos":[671,789]},{"content":"When performing file I/O operations, the <ph id=\"ph1\">`My.Computer.FileSystem`</ph> object provides better performance and ease of use than earlier file I/O methods.","pos":[796,943],"source":"       When performing file I/O operations, the `My.Computer.FileSystem` object provides better performance and ease of use than earlier file I/O methods."},{"content":"For more information, see &lt;xref:Microsoft.VisualBasic.FileSystem&gt; object.","pos":[944,1017],"source":" For more information, see <xref:Microsoft.VisualBasic.FileSystem> object."}]},{"pos":[1958,1995],"content":"File opened to append to it. Default.","needQuote":true,"needEscape":true,"nodes":[{"content":"File opened to append to it. Default.","pos":[0,37],"nodes":[{"content":"File opened to append to it.","pos":[0,28]},{"content":"Default.","pos":[29,37]}]}]},{"pos":[2100,2112],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[2469,2499],"content":"File opened for binary access.","needQuote":true,"needEscape":true,"nodes":[{"content":"File opened for binary access.","pos":[0,30]}]},{"pos":[2604,2616],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[2968,2996],"content":"File opened for read access.","needQuote":true,"needEscape":true,"nodes":[{"content":"File opened for read access.","pos":[0,28]}]},{"pos":[3100,3112],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[3469,3498],"content":"File opened for write access.","needQuote":true,"needEscape":true,"nodes":[{"content":"File opened for write access.","pos":[0,29]}]},{"pos":[3603,3615],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[3972,4002],"content":"File opened for random access.","needQuote":true,"needEscape":true,"nodes":[{"content":"File opened for random access.","pos":[0,30]}]},{"pos":[4107,4119],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: Microsoft.VisualBasic.OpenMode\n  id: OpenMode\n  children:\n  - Microsoft.VisualBasic.OpenMode.Append\n  - Microsoft.VisualBasic.OpenMode.Binary\n  - Microsoft.VisualBasic.OpenMode.Input\n  - Microsoft.VisualBasic.OpenMode.Output\n  - Microsoft.VisualBasic.OpenMode.Random\n  langs:\n  - csharp\n  name: OpenMode\n  nameWithType: OpenMode\n  fullName: Microsoft.VisualBasic.OpenMode\n  type: Enum\n  summary: Indicates how to open a file when calling file-access functions.\n  remarks: \"When you call file access–related functions, you can use enumeration members in your code instead of the actual values.  \\n  \\n The `OpenMode` enumeration defines constants used to set file access modes. The following table lists the `OpenMode` enumeration members.  \\n  \\n `Input`, `Output`, and `Append` are used when sequentially accessing files, such as text files, whereas `Binary` is used for binary file access and `Random` for random file access. For examples, see the <xref:Microsoft.VisualBasic.FileSystem.FileOpen%2A> method.  \\n  \\n When sequentially accessing a file, you cannot change its data. You can read the data, append to it, or overwrite it with new data. If you open it for input, the contents of the file will be overwritten, even if you do not directly write to the file.  \\n  \\n When performing file I/O operations, the `My.Computer.FileSystem` object provides better performance and ease of use than earlier file I/O methods. For more information, see <xref:Microsoft.VisualBasic.FileSystem> object.\"\n  syntax:\n    content: public enum OpenMode\n  inheritance:\n  - System.Enum\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.OpenMode.Append\n  id: Append\n  parent: Microsoft.VisualBasic.OpenMode\n  langs:\n  - csharp\n  name: Append\n  nameWithType: OpenMode.Append\n  fullName: Microsoft.VisualBasic.OpenMode.Append\n  type: Field\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: File opened to append to it. Default.\n  syntax:\n    content: Append\n    return:\n      type: Microsoft.VisualBasic.OpenMode\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.OpenMode.Binary\n  id: Binary\n  parent: Microsoft.VisualBasic.OpenMode\n  langs:\n  - csharp\n  name: Binary\n  nameWithType: OpenMode.Binary\n  fullName: Microsoft.VisualBasic.OpenMode.Binary\n  type: Field\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: File opened for binary access.\n  syntax:\n    content: Binary\n    return:\n      type: Microsoft.VisualBasic.OpenMode\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.OpenMode.Input\n  id: Input\n  parent: Microsoft.VisualBasic.OpenMode\n  langs:\n  - csharp\n  name: Input\n  nameWithType: OpenMode.Input\n  fullName: Microsoft.VisualBasic.OpenMode.Input\n  type: Field\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: File opened for read access.\n  syntax:\n    content: Input\n    return:\n      type: Microsoft.VisualBasic.OpenMode\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.OpenMode.Output\n  id: Output\n  parent: Microsoft.VisualBasic.OpenMode\n  langs:\n  - csharp\n  name: Output\n  nameWithType: OpenMode.Output\n  fullName: Microsoft.VisualBasic.OpenMode.Output\n  type: Field\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: File opened for write access.\n  syntax:\n    content: Output\n    return:\n      type: Microsoft.VisualBasic.OpenMode\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.OpenMode.Random\n  id: Random\n  parent: Microsoft.VisualBasic.OpenMode\n  langs:\n  - csharp\n  name: Random\n  nameWithType: OpenMode.Random\n  fullName: Microsoft.VisualBasic.OpenMode.Random\n  type: Field\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: File opened for random access.\n  syntax:\n    content: Random\n    return:\n      type: Microsoft.VisualBasic.OpenMode\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Enum\n  isExternal: false\n  name: System.Enum\n- uid: Microsoft.VisualBasic.OpenMode.Append\n  parent: Microsoft.VisualBasic.OpenMode\n  isExternal: false\n  name: Append\n  nameWithType: OpenMode.Append\n  fullName: Microsoft.VisualBasic.OpenMode.Append\n- uid: Microsoft.VisualBasic.OpenMode\n  parent: Microsoft.VisualBasic\n  isExternal: false\n  name: OpenMode\n  nameWithType: OpenMode\n  fullName: Microsoft.VisualBasic.OpenMode\n- uid: Microsoft.VisualBasic.OpenMode.Binary\n  parent: Microsoft.VisualBasic.OpenMode\n  isExternal: false\n  name: Binary\n  nameWithType: OpenMode.Binary\n  fullName: Microsoft.VisualBasic.OpenMode.Binary\n- uid: Microsoft.VisualBasic.OpenMode.Input\n  parent: Microsoft.VisualBasic.OpenMode\n  isExternal: false\n  name: Input\n  nameWithType: OpenMode.Input\n  fullName: Microsoft.VisualBasic.OpenMode.Input\n- uid: Microsoft.VisualBasic.OpenMode.Output\n  parent: Microsoft.VisualBasic.OpenMode\n  isExternal: false\n  name: Output\n  nameWithType: OpenMode.Output\n  fullName: Microsoft.VisualBasic.OpenMode.Output\n- uid: Microsoft.VisualBasic.OpenMode.Random\n  parent: Microsoft.VisualBasic.OpenMode\n  isExternal: false\n  name: Random\n  nameWithType: OpenMode.Random\n  fullName: Microsoft.VisualBasic.OpenMode.Random\n"}