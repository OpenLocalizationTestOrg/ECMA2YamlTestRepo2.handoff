{"nodes":[{"pos":[1894,1932],"content":"Represents a connection to a database.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents a connection to a database.","pos":[0,38]}]},{"pos":[3321,3414],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.DbConnection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Data.Common.DbConnection\"></xref> class."},{"pos":[4050,4080],"content":"Starts a database transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"Starts a database transaction.","pos":[0,30]}]},{"pos":[4092,4214],"content":"If you are creating your own connection type, override this method to implement the code necessary to begin a transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"If you are creating your own connection type, override this method to implement the code necessary to begin a transaction.","pos":[0,122]}]},{"pos":[4453,4503],"content":"Specifies the isolation level for the transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies the isolation level for the transaction.","pos":[0,50]}]},{"pos":[4580,4623],"content":"An object representing the new transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object representing the new transaction.","pos":[0,43]}]},{"pos":[5095,5125],"content":"Starts a database transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"Starts a database transaction.","pos":[0,30]}]},{"pos":[5137,5251],"content":"If you do not specify an isolation level, the default isolation level for the specific type of connection is used.","needQuote":true,"needEscape":true,"nodes":[{"content":"If you do not specify an isolation level, the default isolation level for the specific type of connection is used.","pos":[0,114]}]},{"pos":[5431,5474],"content":"An object representing the new transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object representing the new transaction.","pos":[0,43]}]},{"pos":[6042,6107],"content":"Starts a database transaction with the specified isolation level.","needQuote":true,"needEscape":true,"nodes":[{"content":"Starts a database transaction with the specified isolation level.","pos":[0,65]}]},{"pos":[6332,6382],"content":"Specifies the isolation level for the transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies the isolation level for the transaction.","pos":[0,50]}]},{"pos":[6459,6502],"content":"An object representing the new transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object representing the new transaction.","pos":[0,43]}]},{"pos":[7010,7062],"content":"Changes the current database for an open connection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Changes the current database for an open connection.","pos":[0,52]}]},{"pos":[7074,7180],"content":"The value supplied in the <ph id=\"ph1\">`databaseName`</ph> parameter must be a valid database name for the current instance.","needQuote":true,"needEscape":true,"source":"The value supplied in the `databaseName` parameter must be a valid database name for the current instance."},{"pos":[7347,7408],"content":"Specifies the name of the database for the connection to use.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies the name of the database for the connection to use.","pos":[0,61]}]},{"pos":[7821,7920],"content":"Closes the connection to the database. This is the preferred method of closing any open connection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Closes the connection to the database. This is the preferred method of closing any open connection.","pos":[0,99],"nodes":[{"content":"Closes the connection to the database.","pos":[0,38]},{"content":"This is the preferred method of closing any open connection.","pos":[39,99]}]}]},{"pos":[7933,8966],"content":"The Close method rolls back any pending transactions. It then releases the connection to the connection pool, or closes the connection if connection pooling is disabled.       An application can call Close more than one time. No exception is generated.       If the <xref:System.Data.Common.DbConnection> goes out of scope, it is not closed. Therefore, you must explicitly close the connection by calling `Close` or `Dispose`, which are functionally equivalent. If the connection pooling value `Pooling` is set to `true` or `yes`, this also releases the physical connection.      > [!CAUTION] >  Do not call `Close` or `Dispose` on a **Connection**, a **DataReader**, or any other managed object in the `Finalize` method of your class. In a finalizer, you should only release unmanaged resources that your class owns directly. If your class does not own any unmanaged resources, do not include a `Finalize` method in your class definition. For more information, see [Garbage Collection](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"The Close method rolls back any pending transactions.","pos":[0,53]},{"content":"It then releases the connection to the connection pool, or closes the connection if connection pooling is disabled.","pos":[54,169]},{"content":"An application can call Close more than one time.","pos":[176,225]},{"content":"No exception is generated.","pos":[226,252]},{"content":"If the &lt;xref:System.Data.Common.DbConnection&gt; goes out of scope, it is not closed.","pos":[259,341],"source":"       If the <xref:System.Data.Common.DbConnection> goes out of scope, it is not closed."},{"content":"Therefore, you must explicitly close the connection by calling <ph id=\"ph1\">`Close`</ph> or <ph id=\"ph2\">`Dispose`</ph>, which are functionally equivalent.","pos":[342,461],"source":" Therefore, you must explicitly close the connection by calling `Close` or `Dispose`, which are functionally equivalent."},{"content":"If the connection pooling value <ph id=\"ph1\">`Pooling`</ph> is set to <ph id=\"ph2\">`true`</ph> or <ph id=\"ph3\">`yes`</ph>, this also releases the physical connection.","pos":[462,574],"source":" If the connection pooling value `Pooling` is set to `true` or `yes`, this also releases the physical connection."},{"content":"&gt; <ph id=\"ph1\">[!CAUTION]</ph> &gt;  Do not call <ph id=\"ph2\">`Close`</ph> or <ph id=\"ph3\">`Dispose`</ph> on a <bpt id=\"p1\">**</bpt>Connection<ept id=\"p1\">**</ept>, a <bpt id=\"p2\">**</bpt>DataReader<ept id=\"p2\">**</ept>, or any other managed object in the <ph id=\"ph4\">`Finalize`</ph> method of your class.","pos":[580,735],"source":"      > [!CAUTION] >  Do not call `Close` or `Dispose` on a **Connection**, a **DataReader**, or any other managed object in the `Finalize` method of your class."},{"content":"In a finalizer, you should only release unmanaged resources that your class owns directly.","pos":[736,826]},{"content":"If your class does not own any unmanaged resources, do not include a <ph id=\"ph1\">`Finalize`</ph> method in your class definition.","pos":[827,939],"source":" If your class does not own any unmanaged resources, do not include a `Finalize` method in your class definition."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Garbage Collection<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[940,1026],"source":" For more information, see [Garbage Collection](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[9212,9282],"content":"The connection-level error that occurred while opening the connection.","needQuote":true,"needEscape":true,"nodes":[{"content":"The connection-level error that occurred while opening the connection.","pos":[0,70]}]},{"pos":[9669,9721],"content":"Gets or sets the string used to open the connection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the string used to open the connection.","pos":[0,52]}]},{"pos":[9733,9949],"content":"The exact contents of the connection string depend on the specific data source for this connection. To determine which settings are valid, see the documentation for the specific type of connection that you are using.","needQuote":true,"needEscape":true,"nodes":[{"content":"The exact contents of the connection string depend on the specific data source for this connection. To determine which settings are valid, see the documentation for the specific type of connection that you are using.","pos":[0,216],"nodes":[{"content":"The exact contents of the connection string depend on the specific data source for this connection.","pos":[0,99]},{"content":"To determine which settings are valid, see the documentation for the specific type of connection that you are using.","pos":[100,216]}]}]},{"pos":[10084,10285],"content":"The connection string used to establish the initial connection. The exact contents of the connection string depend on the specific data source for this connection. The default value is an empty string.","needQuote":true,"needEscape":true,"nodes":[{"content":"The connection string used to establish the initial connection. The exact contents of the connection string depend on the specific data source for this connection. The default value is an empty string.","pos":[0,201],"nodes":[{"content":"The connection string used to establish the initial connection.","pos":[0,63]},{"content":"The exact contents of the connection string depend on the specific data source for this connection.","pos":[64,163]},{"content":"The default value is an empty string.","pos":[164,201]}]}]},{"pos":[10756,10865],"content":"Gets the time to wait while establishing a connection before terminating the attempt and generating an error.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the time to wait while establishing a connection before terminating the attempt and generating an error.","pos":[0,109]}]},{"pos":[10991,11133],"content":"The time (in seconds) to wait for a connection to open. The default value is determined by the specific type of connection that you are using.","needQuote":true,"needEscape":true,"nodes":[{"content":"The time (in seconds) to wait for a connection to open. The default value is determined by the specific type of connection that you are using.","pos":[0,142],"nodes":[{"content":"The time (in seconds) to wait for a connection to open.","pos":[0,55]},{"content":"The default value is determined by the specific type of connection that you are using.","pos":[56,142]}]}]},{"pos":[11589,11707],"content":"Creates and returns a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.DbCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object associated with the current connection.","needQuote":true,"needEscape":true,"source":"Creates and returns a <xref href=\"System.Data.Common.DbCommand\"></xref> object associated with the current connection."},{"pos":[11876,11935],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.DbCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.Common.DbCommand\"></xref> object."},{"pos":[12397,12515],"content":"Creates and returns a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.DbCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object associated with the current connection.","needQuote":true,"needEscape":true,"source":"Creates and returns a <xref href=\"System.Data.Common.DbCommand\"></xref> object associated with the current connection."},{"pos":[12527,12691],"content":"If you are implementing your own connection, override this method to implement the code necessary to create and return a <xref:System.Data.Common.DbCommand> object.","needQuote":true,"needEscape":true,"nodes":[{"content":"If you are implementing your own connection, override this method to implement the code necessary to create and return a &lt;xref:System.Data.Common.DbCommand&gt; object.","pos":[0,164],"source":"If you are implementing your own connection, override this method to implement the code necessary to create and return a <xref:System.Data.Common.DbCommand> object."}]},{"pos":[12874,12933],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.DbCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.Common.DbCommand\"></xref> object."},{"pos":[13358,13514],"content":"Gets the name of the current database after a connection is opened, or the database name specified in the connection string before the connection is opened.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the name of the current database after a connection is opened, or the database name specified in the connection string before the connection is opened.","pos":[0,156]}]},{"pos":[13526,13617],"content":"A connection typically updates this property dynamically when the current database changes.","needQuote":true,"needEscape":true,"nodes":[{"content":"A connection typically updates this property dynamically when the current database changes.","pos":[0,91]}]},{"pos":[13739,13878],"content":"The name of the current database or the name of the database to be used after a connection is opened. The default value is an empty string.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the current database or the name of the database to be used after a connection is opened. The default value is an empty string.","pos":[0,139],"nodes":[{"content":"The name of the current database or the name of the database to be used after a connection is opened.","pos":[0,101]},{"content":"The default value is an empty string.","pos":[102,139]}]}]},{"pos":[14306,14363],"content":"Gets the name of the database server to which to connect.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the name of the database server to which to connect.","pos":[0,57]}]},{"pos":[14375,15080],"content":"If the connection to the database is closed, the DataSource returns whatever is contained in the <xref:System.Data.Common.DbConnection.ConnectionString%2A> for the `DataSource` keyword. If the connection is open and the <xref:System.Data.Common.DbConnection.ConnectionString%2A> data source keyword's value starts with \"&#124;`datadirectory`&#124;\", the property returns whatever is contained in the <xref:System.Data.Common.DbConnection.ConnectionString%2A> for the `DataSource` keyword only. If the connection to the database is open, the property returns what the native provider returns for the `DBPROP_INIT_DATASOURCE`, and if that is empty, the native provider's `DBPROP_DATASOURCENAME` is returned.","needQuote":true,"needEscape":true,"nodes":[{"content":"If the connection to the database is closed, the DataSource returns whatever is contained in the &lt;xref:System.Data.Common.DbConnection.ConnectionString%2A&gt; for the <ph id=\"ph1\">`DataSource`</ph> keyword.","pos":[0,185],"source":"If the connection to the database is closed, the DataSource returns whatever is contained in the <xref:System.Data.Common.DbConnection.ConnectionString%2A> for the `DataSource` keyword."},{"content":"If the connection is open and the &lt;xref:System.Data.Common.DbConnection.ConnectionString%2A&gt; data source keyword's value starts with \"&amp;#124;<ph id=\"ph1\">`datadirectory`</ph>&amp;#124;\", the property returns whatever is contained in the &lt;xref:System.Data.Common.DbConnection.ConnectionString%2A&gt; for the <ph id=\"ph2\">`DataSource`</ph> keyword only.","pos":[186,493],"source":" If the connection is open and the <xref:System.Data.Common.DbConnection.ConnectionString%2A> data source keyword's value starts with \"&#124;`datadirectory`&#124;\", the property returns whatever is contained in the <xref:System.Data.Common.DbConnection.ConnectionString%2A> for the `DataSource` keyword only."},{"content":"If the connection to the database is open, the property returns what the native provider returns for the <ph id=\"ph1\">`DBPROP_INIT_DATASOURCE`</ph>, and if that is empty, the native provider's <ph id=\"ph2\">`DBPROP_DATASOURCENAME`</ph> is returned.","pos":[494,705],"source":" If the connection to the database is open, the property returns what the native provider returns for the `DBPROP_INIT_DATASOURCE`, and if that is empty, the native provider's `DBPROP_DATASOURCENAME` is returned."}]},{"pos":[15204,15294],"content":"The name of the database server to which to connect. The default value is an empty string.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the database server to which to connect. The default value is an empty string.","pos":[0,90],"nodes":[{"content":"The name of the database server to which to connect.","pos":[0,52]},{"content":"The default value is an empty string.","pos":[53,90]}]}]},{"pos":[15759,15888],"content":"Gets the <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.DbProviderFactory\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for this <bpt id=\"p2\">&lt;xref href=\"System.Data.Common.DbConnection\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets the <xref href=\"System.Data.Common.DbProviderFactory\"></xref> for this <xref href=\"System.Data.Common.DbConnection\"></xref>."},{"pos":[16074,16172],"content":"A set of methods for creating instances of a provider's implementation of the data source classes.","needQuote":true,"needEscape":true,"nodes":[{"content":"A set of methods for creating instances of a provider's implementation of the data source classes.","pos":[0,98]}]},{"pos":[16747,16784],"content":"Enlists in the specified transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"Enlists in the specified transaction.","pos":[0,37]}]},{"pos":[16796,17294],"content":"New in ADO.NET 2.0 is support for using the `EnlistTransaction` method to enlist in a distributed transaction. Because it enlists a connection in a <xref:System.Transactions.Transaction> instance, `EnlistTransaction` takes advantage of functionality available in the <xref:System.Transactions> namespace for managing distributed transactions. Once a connection is explicitly enlisted in a transaction, it cannot be unenlisted or enlisted in another transaction until the first transaction finishes.","needQuote":true,"needEscape":true,"nodes":[{"content":"New in ADO.NET 2.0 is support for using the <ph id=\"ph1\">`EnlistTransaction`</ph> method to enlist in a distributed transaction.","pos":[0,110],"source":"New in ADO.NET 2.0 is support for using the `EnlistTransaction` method to enlist in a distributed transaction."},{"content":"Because it enlists a connection in a &lt;xref:System.Transactions.Transaction&gt; instance, <ph id=\"ph1\">`EnlistTransaction`</ph> takes advantage of functionality available in the &lt;xref:System.Transactions&gt; namespace for managing distributed transactions.","pos":[111,342],"source":" Because it enlists a connection in a <xref:System.Transactions.Transaction> instance, `EnlistTransaction` takes advantage of functionality available in the <xref:System.Transactions> namespace for managing distributed transactions."},{"content":"Once a connection is explicitly enlisted in a transaction, it cannot be unenlisted or enlisted in another transaction until the first transaction finishes.","pos":[343,498]}]},{"pos":[17504,17603],"content":"A reference to an existing <bpt id=\"p1\">&lt;xref href=\"System.Transactions.Transaction\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> in which to enlist.","needQuote":true,"needEscape":true,"source":"A reference to an existing <xref href=\"System.Transactions.Transaction\"></xref> in which to enlist."},{"pos":[18039,18147],"content":"Returns schema information for the data source of this <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.DbConnection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns schema information for the data source of this <xref href=\"System.Data.Common.DbConnection\"></xref>."},{"pos":[18159,18286],"content":"If the connection is associated with a transaction, executing <ph id=\"ph1\">`GetSchema`</ph> calls may cause some providers to throw an exception.","needQuote":true,"needEscape":true,"source":"If the connection is associated with a transaction, executing `GetSchema` calls may cause some providers to throw an exception."},{"pos":[18445,18523],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains schema information.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.DataTable\"></xref> that contains schema information."},{"pos":[18999,19154],"content":"Returns schema information for the data source of this <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.DbConnection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> using the specified string for the schema name.","needQuote":true,"needEscape":true,"source":"Returns schema information for the data source of this <xref href=\"System.Data.Common.DbConnection\"></xref> using the specified string for the schema name."},{"pos":[19166,19293],"content":"If the connection is associated with a transaction, executing <ph id=\"ph1\">`GetSchema`</ph> calls may cause some providers to throw an exception.","needQuote":true,"needEscape":true,"source":"If the connection is associated with a transaction, executing `GetSchema` calls may cause some providers to throw an exception."},{"pos":[19475,19518],"content":"Specifies the name of the schema to return.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies the name of the schema to return.","pos":[0,43]}]},{"pos":[19584,19662],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains schema information.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.DataTable\"></xref> that contains schema information."},{"pos":[19826,19875],"content":"<ph id=\"ph1\">&lt;code&gt;collectionName&lt;/code&gt;</ph> is specified as null.","needQuote":true,"needEscape":true,"source":"<code>collectionName</code> is specified as null."},{"pos":[20338,20551],"content":"Returns schema information for the data source of this <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.DbConnection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> using the specified string for the schema name and the specified string array for the restriction values.","needQuote":true,"needEscape":true,"source":"Returns schema information for the data source of this <xref href=\"System.Data.Common.DbConnection\"></xref> using the specified string for the schema name and the specified string array for the restriction values."},{"pos":[20564,21682],"content":"The `restrictionValues` parameter can supply *n* depth of values, which are specified by the restrictions collection for a specific collection. In order to set values on a given restriction, and not set the values of other restrictions, you need to set the preceding restrictions to null and then put the appropriate value in for the restriction that you would like to specify a value for.       An example of this is the \"Tables\" collection. If the \"Tables\" collection has three restrictions (database, owner, and table name) and you want to get back only the tables associated with the owner \"Carl\", you must pass in the following values at least: null, \"Carl\". If a restriction value is not passed in, the default values are used for that restriction. This is the same mapping as passing in null, which is different from passing in an empty string for the parameter value. In that case, the empty string (\"\") is considered to be the value for the specified parameter.       If the connection is associated with a transaction, executing `GetSchema` calls may cause some providers to throw an exception.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`restrictionValues`</ph> parameter can supply <bpt id=\"p1\">*</bpt>n<ept id=\"p1\">*</ept> depth of values, which are specified by the restrictions collection for a specific collection.","pos":[0,143],"source":"The `restrictionValues` parameter can supply *n* depth of values, which are specified by the restrictions collection for a specific collection."},{"content":"In order to set values on a given restriction, and not set the values of other restrictions, you need to set the preceding restrictions to null and then put the appropriate value in for the restriction that you would like to specify a value for.","pos":[144,389]},{"content":"An example of this is the \"Tables\" collection.","pos":[396,442]},{"content":"If the \"Tables\" collection has three restrictions (database, owner, and table name) and you want to get back only the tables associated with the owner \"Carl\", you must pass in the following values at least: null, \"Carl\".","pos":[443,663]},{"content":"If a restriction value is not passed in, the default values are used for that restriction.","pos":[664,754]},{"content":"This is the same mapping as passing in null, which is different from passing in an empty string for the parameter value.","pos":[755,875]},{"content":"In that case, the empty string (\"\") is considered to be the value for the specified parameter.","pos":[876,970]},{"content":"If the connection is associated with a transaction, executing <ph id=\"ph1\">`GetSchema`</ph> calls may cause some providers to throw an exception.","pos":[977,1104],"source":"       If the connection is associated with a transaction, executing `GetSchema` calls may cause some providers to throw an exception."}]},{"pos":[21893,21936],"content":"Specifies the name of the schema to return.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies the name of the schema to return.","pos":[0,43]}]},{"pos":[22012,22075],"content":"Specifies a set of restriction values for the requested schema.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies a set of restriction values for the requested schema.","pos":[0,63]}]},{"pos":[22141,22219],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains schema information.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.DataTable\"></xref> that contains schema information."},{"pos":[22383,22432],"content":"<ph id=\"ph1\">&lt;code&gt;collectionName&lt;/code&gt;</ph> is specified as null.","needQuote":true,"needEscape":true,"source":"<code>collectionName</code> is specified as null."},{"pos":[22936,23018],"content":"Raises the <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.DbConnection.StateChange\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event.","needQuote":true,"needEscape":true,"source":"Raises the <xref href=\"System.Data.Common.DbConnection.StateChange\"></xref> event."},{"pos":[23031,23209],"content":"Raising an event invokes the event handler through a delegate. For an overview, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).","needQuote":false,"needEscape":true,"nodes":[{"content":"Raising an event invokes the event handler through a delegate.","pos":[0,62]},{"content":"For an overview, see <bpt id=\"p1\">[</bpt>NIB: Raising an Event<ept id=\"p1\">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>.","pos":[63,178],"source":" For an overview, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)."}]},{"pos":[23421,23506],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.StateChangeEventArgs\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains the event data.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.StateChangeEventArgs\"></xref> that contains the event data."},{"pos":[23913,24033],"content":"Opens a database connection with the settings specified by the <xref:System.Data.Common.DbConnection.ConnectionString*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Opens a database connection with the settings specified by the &lt;xref:System.Data.Common.DbConnection.ConnectionString*&gt;.","pos":[0,120],"source":"Opens a database connection with the settings specified by the <xref:System.Data.Common.DbConnection.ConnectionString*>."}]},{"pos":[24045,24247],"content":"This method must be overridden with user-defined behavior. <xref:System.Data.SqlClient.SqlConnection.Open%2A?displayProperty=fullName> will throw an exception if called again without first being closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method must be overridden with user-defined behavior. <xref:System.Data.SqlClient.SqlConnection.Open%2A?displayProperty=fullName> will throw an exception if called again without first being closed.","pos":[0,202],"nodes":[{"content":"This method must be overridden with user-defined behavior.","pos":[0,58]},{"content":"&lt;xref:System.Data.SqlClient.SqlConnection.Open%2A?displayProperty=fullName&gt; will throw an exception if called again without first being closed.","pos":[59,202],"source":" <xref:System.Data.SqlClient.SqlConnection.Open%2A?displayProperty=fullName> will throw an exception if called again without first being closed."}]}]},{"pos":[24742,25059],"content":"An asynchronous version of <xref:System.Data.Common.DbConnection.Open*>, which opens a database connection with the settings specified by the <xref:System.Data.Common.DbConnection.ConnectionString*>. This method invokes the virtual method <xref:System.Data.Common.DbConnection.OpenAsync*> with CancellationToken.None.","needQuote":true,"needEscape":true,"nodes":[{"content":"An asynchronous version of &lt;xref:System.Data.Common.DbConnection.Open<bpt id=\"p1\">*</bpt>&gt;, which opens a database connection with the settings specified by the &lt;xref:System.Data.Common.DbConnection.ConnectionString<ept id=\"p1\">*</ept>&gt;.","pos":[0,199],"source":"An asynchronous version of <xref:System.Data.Common.DbConnection.Open*>, which opens a database connection with the settings specified by the <xref:System.Data.Common.DbConnection.ConnectionString*>."},{"content":"This method invokes the virtual method &lt;xref:System.Data.Common.DbConnection.OpenAsync*&gt; with CancellationToken.None.","pos":[200,317],"source":" This method invokes the virtual method <xref:System.Data.Common.DbConnection.OpenAsync*> with CancellationToken.None."}]},{"pos":[25072,26005],"content":"After calling <xref:System.Data.Common.DbConnection.OpenAsync%2A>, <xref:System.Data.Common.DbConnection.State%2A> must return <xref:System.Data.ConnectionState> until the returned <xref:System.Threading.Tasks.Task> is completed. Then, if the connection was successful, <xref:System.Data.Common.DbConnection.State%2A> must return <xref:System.Data.ConnectionState>. If the connection fails, <xref:System.Data.Common.DbConnection.State%2A> must return <xref:System.Data.ConnectionState>.       A call to <xref:System.Data.Common.DbConnection.Close%2A> will attempt to cancel or close the corresponding <xref:System.Data.Common.DbConnection.OpenAsync%2A> call.       For more information about asynchronous programming in the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], see [Asynchronous Programming](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"After calling &lt;xref:System.Data.Common.DbConnection.OpenAsync%2A&gt;, &lt;xref:System.Data.Common.DbConnection.State%2A&gt; must return &lt;xref:System.Data.ConnectionState&gt; until the returned &lt;xref:System.Threading.Tasks.Task&gt; is completed.","pos":[0,229],"source":"After calling <xref:System.Data.Common.DbConnection.OpenAsync%2A>, <xref:System.Data.Common.DbConnection.State%2A> must return <xref:System.Data.ConnectionState> until the returned <xref:System.Threading.Tasks.Task> is completed."},{"content":"Then, if the connection was successful, &lt;xref:System.Data.Common.DbConnection.State%2A&gt; must return &lt;xref:System.Data.ConnectionState&gt;.","pos":[230,365],"source":" Then, if the connection was successful, <xref:System.Data.Common.DbConnection.State%2A> must return <xref:System.Data.ConnectionState>."},{"content":"If the connection fails, &lt;xref:System.Data.Common.DbConnection.State%2A&gt; must return &lt;xref:System.Data.ConnectionState&gt;.","pos":[366,486],"source":" If the connection fails, <xref:System.Data.Common.DbConnection.State%2A> must return <xref:System.Data.ConnectionState>."},{"content":"A call to &lt;xref:System.Data.Common.DbConnection.Close%2A&gt; will attempt to cancel or close the corresponding &lt;xref:System.Data.Common.DbConnection.OpenAsync%2A&gt; call.","pos":[493,658],"source":"       A call to <xref:System.Data.Common.DbConnection.Close%2A> will attempt to cancel or close the corresponding <xref:System.Data.Common.DbConnection.OpenAsync%2A> call."},{"content":"For more information about asynchronous programming in the <ph id=\"ph1\">[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]</ph> Data Provider for <ph id=\"ph2\">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph>, see <bpt id=\"p1\">[</bpt>Asynchronous Programming<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[665,929],"source":"       For more information about asynchronous programming in the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], see [Asynchronous Programming](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[26169,26216],"content":"A task representing the asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"A task representing the asynchronous operation.","pos":[0,47]}]},{"pos":[26768,27480],"content":"This is the asynchronous version of <xref:System.Data.Common.DbConnection.Open*>. Providers should override with an appropriate implementation. The cancellation token can optionally be honored.       The default implementation invokes the synchronous <xref:System.Data.Common.DbConnection.Open*> call and returns a completed task. The default implementation will return a cancelled task if passed an already cancelled cancellationToken. Exceptions thrown by Open will be communicated via the returned Task Exception property.       Do not invoke other methods and properties of the <xref uid=\"langword_csharp_DbConnection\" name=\"DbConnection\" href=\"\"></xref> object until the returned Task is complete.","needQuote":false,"needEscape":true,"nodes":[{"content":"This is the asynchronous version of &lt;xref:System.Data.Common.DbConnection.Open<bpt id=\"p1\">*</bpt>&gt;. Providers should override with an appropriate implementation. The cancellation token can optionally be honored.       The default implementation invokes the synchronous &lt;xref:System.Data.Common.DbConnection.Open<ept id=\"p1\">*</ept>&gt; call and returns a completed task.","pos":[0,330],"source":"This is the asynchronous version of <xref:System.Data.Common.DbConnection.Open*>. Providers should override with an appropriate implementation. The cancellation token can optionally be honored.       The default implementation invokes the synchronous <xref:System.Data.Common.DbConnection.Open*> call and returns a completed task."},{"content":"The default implementation will return a cancelled task if passed an already cancelled cancellationToken.","pos":[331,436]},{"content":"Exceptions thrown by Open will be communicated via the returned Task Exception property.","pos":[437,525]},{"content":"Do not invoke other methods and properties of the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_DbConnection\" name=\"DbConnection\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object until the returned Task is complete.","pos":[532,702],"source":"       Do not invoke other methods and properties of the <xref uid=\"langword_csharp_DbConnection\" name=\"DbConnection\" href=\"\"></xref> object until the returned Task is complete."}]},{"pos":[27494,28427],"content":"After calling <xref:System.Data.Common.DbConnection.OpenAsync%2A>, <xref:System.Data.Common.DbConnection.State%2A> must return <xref:System.Data.ConnectionState> until the returned <xref:System.Threading.Tasks.Task> is completed. Then, if the connection was successful, <xref:System.Data.Common.DbConnection.State%2A> must return <xref:System.Data.ConnectionState>. If the connection fails, <xref:System.Data.Common.DbConnection.State%2A> must return <xref:System.Data.ConnectionState>.       A call to <xref:System.Data.Common.DbConnection.Close%2A> will attempt to cancel or close the corresponding <xref:System.Data.Common.DbConnection.OpenAsync%2A> call.       For more information about asynchronous programming in the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], see [Asynchronous Programming](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"After calling &lt;xref:System.Data.Common.DbConnection.OpenAsync%2A&gt;, &lt;xref:System.Data.Common.DbConnection.State%2A&gt; must return &lt;xref:System.Data.ConnectionState&gt; until the returned &lt;xref:System.Threading.Tasks.Task&gt; is completed.","pos":[0,229],"source":"After calling <xref:System.Data.Common.DbConnection.OpenAsync%2A>, <xref:System.Data.Common.DbConnection.State%2A> must return <xref:System.Data.ConnectionState> until the returned <xref:System.Threading.Tasks.Task> is completed."},{"content":"Then, if the connection was successful, &lt;xref:System.Data.Common.DbConnection.State%2A&gt; must return &lt;xref:System.Data.ConnectionState&gt;.","pos":[230,365],"source":" Then, if the connection was successful, <xref:System.Data.Common.DbConnection.State%2A> must return <xref:System.Data.ConnectionState>."},{"content":"If the connection fails, &lt;xref:System.Data.Common.DbConnection.State%2A&gt; must return &lt;xref:System.Data.ConnectionState&gt;.","pos":[366,486],"source":" If the connection fails, <xref:System.Data.Common.DbConnection.State%2A> must return <xref:System.Data.ConnectionState>."},{"content":"A call to &lt;xref:System.Data.Common.DbConnection.Close%2A&gt; will attempt to cancel or close the corresponding &lt;xref:System.Data.Common.DbConnection.OpenAsync%2A&gt; call.","pos":[493,658],"source":"       A call to <xref:System.Data.Common.DbConnection.Close%2A> will attempt to cancel or close the corresponding <xref:System.Data.Common.DbConnection.OpenAsync%2A> call."},{"content":"For more information about asynchronous programming in the <ph id=\"ph1\">[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]</ph> Data Provider for <ph id=\"ph2\">[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]</ph>, see <bpt id=\"p1\">[</bpt>Asynchronous Programming<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[665,929],"source":"       For more information about asynchronous programming in the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], see [Asynchronous Programming](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[28671,28700],"content":"The cancellation instruction.","needQuote":true,"needEscape":true,"nodes":[{"content":"The cancellation instruction.","pos":[0,29]}]},{"pos":[28772,28819],"content":"A task representing the asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"A task representing the asynchronous operation.","pos":[0,47]}]},{"pos":[29263,29352],"content":"Gets a string that represents the version of the server to which the object is connected.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a string that represents the version of the server to which the object is connected.","pos":[0,89]}]},{"pos":[29479,29599],"content":"The version of the database. The format of the string returned depends on the specific type of connection you are using.","needQuote":true,"needEscape":true,"nodes":[{"content":"The version of the database. The format of the string returned depends on the specific type of connection you are using.","pos":[0,120],"nodes":[{"content":"The version of the database.","pos":[0,28]},{"content":"The format of the string returned depends on the specific type of connection you are using.","pos":[29,120]}]}]},{"pos":[29783,29950],"content":"ServerVersion was called while the returned Task was not completed and the connection was not opened after a call to <xref:System.Data.Common.DbConnection.OpenAsync*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"ServerVersion was called while the returned Task was not completed and the connection was not opened after a call to &lt;xref:System.Data.Common.DbConnection.OpenAsync*&gt;.","pos":[0,167],"source":"ServerVersion was called while the returned Task was not completed and the connection was not opened after a call to <xref:System.Data.Common.DbConnection.OpenAsync*>."}]},{"pos":[30282,30339],"content":"Gets a string that describes the state of the connection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a string that describes the state of the connection.","pos":[0,57]}]},{"pos":[30493,30613],"content":"The state of the connection. The format of the string returned depends on the specific type of connection you are using.","needQuote":true,"needEscape":true,"nodes":[{"content":"The state of the connection. The format of the string returned depends on the specific type of connection you are using.","pos":[0,120],"nodes":[{"content":"The state of the connection.","pos":[0,28]},{"content":"The format of the string returned depends on the specific type of connection you are using.","pos":[29,120]}]}]},{"pos":[31040,31083],"content":"Occurs when the state of the event changes.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs when the state of the event changes.","pos":[0,43]}]},{"pos":[31095,31203],"content":"The StateChange event occurs when the state of the event changes from closed to opened, or opened to closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The StateChange event occurs when the state of the event changes from closed to opened, or opened to closed.","pos":[0,108]}]},{"pos":[31376,31388],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[31940,31970],"content":"Begins a database transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"Begins a database transaction.","pos":[0,30]}]},{"pos":[31983,32265],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Common.DbConnection> instance is cast to an <xref:System.Data.IDbConnection> interface.       For more information, see <xref:System.Data.IDbConnection.BeginTransaction%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Common.DbConnection> instance is cast to an <xref:System.Data.IDbConnection> interface.       For more information, see <xref:System.Data.IDbConnection.BeginTransaction%2A>.","pos":[0,280],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the &lt;xref:System.Data.Common.DbConnection&gt; instance is cast to an &lt;xref:System.Data.IDbConnection&gt; interface.","pos":[60,194],"source":" It can be used only when the <xref:System.Data.Common.DbConnection> instance is cast to an <xref:System.Data.IDbConnection> interface."},{"content":"For more information, see &lt;xref:System.Data.IDbConnection.BeginTransaction%2A&gt;.","pos":[201,280],"source":"       For more information, see <xref:System.Data.IDbConnection.BeginTransaction%2A>."}]}]},{"pos":[32441,32487],"content":"An object that represents the new transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that represents the new transaction.","pos":[0,46]}]},{"pos":[33225,33328],"content":"Begins a database transaction with the specified <bpt id=\"p1\">&lt;xref href=\"System.Data.IsolationLevel\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value.","needQuote":true,"needEscape":true,"source":"Begins a database transaction with the specified <xref href=\"System.Data.IsolationLevel\"></xref> value."},{"pos":[33340,33419],"content":"For more information, see <xref:System.Data.IDbConnection.BeginTransaction%2A>.","needQuote":true,"needEscape":true,"nodes":[{"content":"For more information, see &lt;xref:System.Data.IDbConnection.BeginTransaction%2A&gt;.","pos":[0,79],"source":"For more information, see <xref:System.Data.IDbConnection.BeginTransaction%2A>."}]},{"pos":[33645,33711],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Data.IsolationLevel\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Data.IsolationLevel\"></xref> values."},{"pos":[33782,33828],"content":"An object that represents the new transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that represents the new transaction.","pos":[0,46]}]},{"pos":[34453,34579],"content":"Creates and returns a <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.DbCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that is associated with the current connection.","needQuote":true,"needEscape":true,"source":"Creates and returns a <xref href=\"System.Data.Common.DbCommand\"></xref> object that is associated with the current connection."},{"pos":[34591,34736],"content":"For more information, see <bpt id=\"p1\">[</bpt>Commands and Parameters<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> and &lt;xref:System.Data.IDbConnection.CreateCommand%2A&gt;.","needQuote":true,"needEscape":true,"source":"For more information, see [Commands and Parameters](~/add/includes/ajax-current-ext-md.md) and <xref:System.Data.IDbConnection.CreateCommand%2A>."},{"pos":[34900,34998],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.DbCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that is associated with the connection.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.Common.DbCommand\"></xref> object that is associated with the connection."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Data.Common.DbConnection\n  id: DbConnection\n  children:\n  - System.Data.Common.DbConnection.#ctor\n  - System.Data.Common.DbConnection.BeginDbTransaction(System.Data.IsolationLevel)\n  - System.Data.Common.DbConnection.BeginTransaction\n  - System.Data.Common.DbConnection.BeginTransaction(System.Data.IsolationLevel)\n  - System.Data.Common.DbConnection.ChangeDatabase(System.String)\n  - System.Data.Common.DbConnection.Close\n  - System.Data.Common.DbConnection.ConnectionString\n  - System.Data.Common.DbConnection.ConnectionTimeout\n  - System.Data.Common.DbConnection.CreateCommand\n  - System.Data.Common.DbConnection.CreateDbCommand\n  - System.Data.Common.DbConnection.Database\n  - System.Data.Common.DbConnection.DataSource\n  - System.Data.Common.DbConnection.DbProviderFactory\n  - System.Data.Common.DbConnection.EnlistTransaction(System.Transactions.Transaction)\n  - System.Data.Common.DbConnection.GetSchema\n  - System.Data.Common.DbConnection.GetSchema(System.String)\n  - System.Data.Common.DbConnection.GetSchema(System.String,System.String[])\n  - System.Data.Common.DbConnection.OnStateChange(System.Data.StateChangeEventArgs)\n  - System.Data.Common.DbConnection.Open\n  - System.Data.Common.DbConnection.OpenAsync\n  - System.Data.Common.DbConnection.OpenAsync(System.Threading.CancellationToken)\n  - System.Data.Common.DbConnection.ServerVersion\n  - System.Data.Common.DbConnection.State\n  - System.Data.Common.DbConnection.StateChange\n  - System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction\n  - System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction(System.Data.IsolationLevel)\n  - System.Data.Common.DbConnection.System#Data#IDbConnection#CreateCommand\n  langs:\n  - csharp\n  name: DbConnection\n  nameWithType: DbConnection\n  fullName: System.Data.Common.DbConnection\n  type: Class\n  summary: Represents a connection to a database.\n  syntax:\n    content: 'public abstract class DbConnection : System.ComponentModel.Component, IDisposable, System.Data.IDbConnection'\n  inheritance:\n  - System.Object\n  - System.MarshalByRefObject\n  - System.ComponentModel.Component\n  implements:\n  - System.Data.IDbConnection\n  - System.IDisposable\n  inheritedMembers:\n  - System.ComponentModel.Component.CanRaiseEvents\n  - System.ComponentModel.Component.Container\n  - System.ComponentModel.Component.DesignMode\n  - System.ComponentModel.Component.Dispose\n  - System.ComponentModel.Component.Dispose(System.Boolean)\n  - System.ComponentModel.Component.Disposed\n  - System.ComponentModel.Component.Events\n  - System.ComponentModel.Component.GetService(System.Type)\n  - System.ComponentModel.Component.Site\n  - System.ComponentModel.Component.ToString\n  - System.MarshalByRefObject.CreateObjRef(System.Type)\n  - System.MarshalByRefObject.GetLifetimeService\n  - System.MarshalByRefObject.InitializeLifetimeService\n  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  platform:\n  - net462\n- uid: System.Data.Common.DbConnection.#ctor\n  id: '#ctor'\n  parent: System.Data.Common.DbConnection\n  langs:\n  - csharp\n  name: DbConnection()\n  nameWithType: DbConnection.DbConnection()\n  fullName: System.Data.Common.DbConnection.DbConnection()\n  type: Constructor\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Initializes a new instance of the <xref href=\"System.Data.Common.DbConnection\"></xref> class.\n  syntax:\n    content: protected DbConnection ();\n    parameters: []\n  overload: System.Data.Common.DbConnection.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbConnection.BeginDbTransaction(System.Data.IsolationLevel)\n  id: BeginDbTransaction(System.Data.IsolationLevel)\n  parent: System.Data.Common.DbConnection\n  langs:\n  - csharp\n  name: BeginDbTransaction(IsolationLevel)\n  nameWithType: DbConnection.BeginDbTransaction(IsolationLevel)\n  fullName: System.Data.Common.DbConnection.BeginDbTransaction(IsolationLevel)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Starts a database transaction.\n  remarks: If you are creating your own connection type, override this method to implement the code necessary to begin a transaction.\n  syntax:\n    content: protected abstract System.Data.Common.DbTransaction BeginDbTransaction (System.Data.IsolationLevel isolationLevel);\n    parameters:\n    - id: isolationLevel\n      type: System.Data.IsolationLevel\n      description: Specifies the isolation level for the transaction.\n    return:\n      type: System.Data.Common.DbTransaction\n      description: An object representing the new transaction.\n  overload: System.Data.Common.DbConnection.BeginDbTransaction*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbConnection.BeginTransaction\n  id: BeginTransaction\n  parent: System.Data.Common.DbConnection\n  langs:\n  - csharp\n  name: BeginTransaction()\n  nameWithType: DbConnection.BeginTransaction()\n  fullName: System.Data.Common.DbConnection.BeginTransaction()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Starts a database transaction.\n  remarks: If you do not specify an isolation level, the default isolation level for the specific type of connection is used.\n  syntax:\n    content: public System.Data.Common.DbTransaction BeginTransaction ();\n    parameters: []\n    return:\n      type: System.Data.Common.DbTransaction\n      description: An object representing the new transaction.\n  overload: System.Data.Common.DbConnection.BeginTransaction*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbConnection.BeginTransaction(System.Data.IsolationLevel)\n  id: BeginTransaction(System.Data.IsolationLevel)\n  parent: System.Data.Common.DbConnection\n  langs:\n  - csharp\n  name: BeginTransaction(IsolationLevel)\n  nameWithType: DbConnection.BeginTransaction(IsolationLevel)\n  fullName: System.Data.Common.DbConnection.BeginTransaction(IsolationLevel)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Starts a database transaction with the specified isolation level.\n  syntax:\n    content: public System.Data.Common.DbTransaction BeginTransaction (System.Data.IsolationLevel isolationLevel);\n    parameters:\n    - id: isolationLevel\n      type: System.Data.IsolationLevel\n      description: Specifies the isolation level for the transaction.\n    return:\n      type: System.Data.Common.DbTransaction\n      description: An object representing the new transaction.\n  overload: System.Data.Common.DbConnection.BeginTransaction*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbConnection.ChangeDatabase(System.String)\n  id: ChangeDatabase(System.String)\n  parent: System.Data.Common.DbConnection\n  langs:\n  - csharp\n  name: ChangeDatabase(String)\n  nameWithType: DbConnection.ChangeDatabase(String)\n  fullName: System.Data.Common.DbConnection.ChangeDatabase(String)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Changes the current database for an open connection.\n  remarks: The value supplied in the `databaseName` parameter must be a valid database name for the current instance.\n  syntax:\n    content: public abstract void ChangeDatabase (string databaseName);\n    parameters:\n    - id: databaseName\n      type: System.String\n      description: Specifies the name of the database for the connection to use.\n  overload: System.Data.Common.DbConnection.ChangeDatabase*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbConnection.Close\n  id: Close\n  parent: System.Data.Common.DbConnection\n  langs:\n  - csharp\n  name: Close()\n  nameWithType: DbConnection.Close()\n  fullName: System.Data.Common.DbConnection.Close()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Closes the connection to the database. This is the preferred method of closing any open connection.\n  remarks: \"The Close method rolls back any pending transactions. It then releases the connection to the connection pool, or closes the connection if connection pooling is disabled.  \\n  \\n An application can call Close more than one time. No exception is generated.  \\n  \\n If the <xref:System.Data.Common.DbConnection> goes out of scope, it is not closed. Therefore, you must explicitly close the connection by calling `Close` or `Dispose`, which are functionally equivalent. If the connection pooling value `Pooling` is set to `true` or `yes`, this also releases the physical connection.  \\n  \\n> [!CAUTION]\\n>  Do not call `Close` or `Dispose` on a **Connection**, a **DataReader**, or any other managed object in the `Finalize` method of your class. In a finalizer, you should only release unmanaged resources that your class owns directly. If your class does not own any unmanaged resources, do not include a `Finalize` method in your class definition. For more information, see [Garbage Collection](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public abstract void Close ();\n    parameters: []\n  overload: System.Data.Common.DbConnection.Close*\n  exceptions:\n  - type: System.Data.Common.DbException\n    commentId: T:System.Data.Common.DbException\n    description: The connection-level error that occurred while opening the connection.\n  platform:\n  - net462\n- uid: System.Data.Common.DbConnection.ConnectionString\n  id: ConnectionString\n  parent: System.Data.Common.DbConnection\n  langs:\n  - csharp\n  name: ConnectionString\n  nameWithType: DbConnection.ConnectionString\n  fullName: System.Data.Common.DbConnection.ConnectionString\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Gets or sets the string used to open the connection.\n  remarks: The exact contents of the connection string depend on the specific data source for this connection. To determine which settings are valid, see the documentation for the specific type of connection that you are using.\n  syntax:\n    content: public abstract string ConnectionString { get; set; }\n    return:\n      type: System.String\n      description: The connection string used to establish the initial connection. The exact contents of the connection string depend on the specific data source for this connection. The default value is an empty string.\n  overload: System.Data.Common.DbConnection.ConnectionString*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbConnection.ConnectionTimeout\n  id: ConnectionTimeout\n  parent: System.Data.Common.DbConnection\n  langs:\n  - csharp\n  name: ConnectionTimeout\n  nameWithType: DbConnection.ConnectionTimeout\n  fullName: System.Data.Common.DbConnection.ConnectionTimeout\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Gets the time to wait while establishing a connection before terminating the attempt and generating an error.\n  syntax:\n    content: public virtual int ConnectionTimeout { get; }\n    return:\n      type: System.Int32\n      description: The time (in seconds) to wait for a connection to open. The default value is determined by the specific type of connection that you are using.\n  overload: System.Data.Common.DbConnection.ConnectionTimeout*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbConnection.CreateCommand\n  id: CreateCommand\n  parent: System.Data.Common.DbConnection\n  langs:\n  - csharp\n  name: CreateCommand()\n  nameWithType: DbConnection.CreateCommand()\n  fullName: System.Data.Common.DbConnection.CreateCommand()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Creates and returns a <xref href=\"System.Data.Common.DbCommand\"></xref> object associated with the current connection.\n  syntax:\n    content: public System.Data.Common.DbCommand CreateCommand ();\n    parameters: []\n    return:\n      type: System.Data.Common.DbCommand\n      description: A <xref href=\"System.Data.Common.DbCommand\"></xref> object.\n  overload: System.Data.Common.DbConnection.CreateCommand*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbConnection.CreateDbCommand\n  id: CreateDbCommand\n  parent: System.Data.Common.DbConnection\n  langs:\n  - csharp\n  name: CreateDbCommand()\n  nameWithType: DbConnection.CreateDbCommand()\n  fullName: System.Data.Common.DbConnection.CreateDbCommand()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Creates and returns a <xref href=\"System.Data.Common.DbCommand\"></xref> object associated with the current connection.\n  remarks: If you are implementing your own connection, override this method to implement the code necessary to create and return a <xref:System.Data.Common.DbCommand> object.\n  syntax:\n    content: protected abstract System.Data.Common.DbCommand CreateDbCommand ();\n    parameters: []\n    return:\n      type: System.Data.Common.DbCommand\n      description: A <xref href=\"System.Data.Common.DbCommand\"></xref> object.\n  overload: System.Data.Common.DbConnection.CreateDbCommand*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbConnection.Database\n  id: Database\n  parent: System.Data.Common.DbConnection\n  langs:\n  - csharp\n  name: Database\n  nameWithType: DbConnection.Database\n  fullName: System.Data.Common.DbConnection.Database\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Gets the name of the current database after a connection is opened, or the database name specified in the connection string before the connection is opened.\n  remarks: A connection typically updates this property dynamically when the current database changes.\n  syntax:\n    content: public abstract string Database { get; }\n    return:\n      type: System.String\n      description: The name of the current database or the name of the database to be used after a connection is opened. The default value is an empty string.\n  overload: System.Data.Common.DbConnection.Database*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbConnection.DataSource\n  id: DataSource\n  parent: System.Data.Common.DbConnection\n  langs:\n  - csharp\n  name: DataSource\n  nameWithType: DbConnection.DataSource\n  fullName: System.Data.Common.DbConnection.DataSource\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Gets the name of the database server to which to connect.\n  remarks: If the connection to the database is closed, the DataSource returns whatever is contained in the <xref:System.Data.Common.DbConnection.ConnectionString%2A> for the `DataSource` keyword. If the connection is open and the <xref:System.Data.Common.DbConnection.ConnectionString%2A> data source keyword's value starts with \"&#124;`datadirectory`&#124;\", the property returns whatever is contained in the <xref:System.Data.Common.DbConnection.ConnectionString%2A> for the `DataSource` keyword only. If the connection to the database is open, the property returns what the native provider returns for the `DBPROP_INIT_DATASOURCE`, and if that is empty, the native provider's `DBPROP_DATASOURCENAME` is returned.\n  syntax:\n    content: public abstract string DataSource { get; }\n    return:\n      type: System.String\n      description: The name of the database server to which to connect. The default value is an empty string.\n  overload: System.Data.Common.DbConnection.DataSource*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbConnection.DbProviderFactory\n  id: DbProviderFactory\n  parent: System.Data.Common.DbConnection\n  langs:\n  - csharp\n  name: DbProviderFactory\n  nameWithType: DbConnection.DbProviderFactory\n  fullName: System.Data.Common.DbConnection.DbProviderFactory\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Gets the <xref href=\"System.Data.Common.DbProviderFactory\"></xref> for this <xref href=\"System.Data.Common.DbConnection\"></xref>.\n  syntax:\n    content: protected virtual System.Data.Common.DbProviderFactory DbProviderFactory { get; }\n    return:\n      type: System.Data.Common.DbProviderFactory\n      description: A set of methods for creating instances of a provider's implementation of the data source classes.\n  overload: System.Data.Common.DbConnection.DbProviderFactory*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbConnection.EnlistTransaction(System.Transactions.Transaction)\n  id: EnlistTransaction(System.Transactions.Transaction)\n  parent: System.Data.Common.DbConnection\n  langs:\n  - csharp\n  name: EnlistTransaction(Transaction)\n  nameWithType: DbConnection.EnlistTransaction(Transaction)\n  fullName: System.Data.Common.DbConnection.EnlistTransaction(Transaction)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Enlists in the specified transaction.\n  remarks: New in ADO.NET 2.0 is support for using the `EnlistTransaction` method to enlist in a distributed transaction. Because it enlists a connection in a <xref:System.Transactions.Transaction> instance, `EnlistTransaction` takes advantage of functionality available in the <xref:System.Transactions> namespace for managing distributed transactions. Once a connection is explicitly enlisted in a transaction, it cannot be unenlisted or enlisted in another transaction until the first transaction finishes.\n  syntax:\n    content: public virtual void EnlistTransaction (System.Transactions.Transaction transaction);\n    parameters:\n    - id: transaction\n      type: System.Transactions.Transaction\n      description: A reference to an existing <xref href=\"System.Transactions.Transaction\"></xref> in which to enlist.\n  overload: System.Data.Common.DbConnection.EnlistTransaction*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbConnection.GetSchema\n  id: GetSchema\n  parent: System.Data.Common.DbConnection\n  langs:\n  - csharp\n  name: GetSchema()\n  nameWithType: DbConnection.GetSchema()\n  fullName: System.Data.Common.DbConnection.GetSchema()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Returns schema information for the data source of this <xref href=\"System.Data.Common.DbConnection\"></xref>.\n  remarks: If the connection is associated with a transaction, executing `GetSchema` calls may cause some providers to throw an exception.\n  syntax:\n    content: public virtual System.Data.DataTable GetSchema ();\n    parameters: []\n    return:\n      type: System.Data.DataTable\n      description: A <xref href=\"System.Data.DataTable\"></xref> that contains schema information.\n  overload: System.Data.Common.DbConnection.GetSchema*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbConnection.GetSchema(System.String)\n  id: GetSchema(System.String)\n  parent: System.Data.Common.DbConnection\n  langs:\n  - csharp\n  name: GetSchema(String)\n  nameWithType: DbConnection.GetSchema(String)\n  fullName: System.Data.Common.DbConnection.GetSchema(String)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Returns schema information for the data source of this <xref href=\"System.Data.Common.DbConnection\"></xref> using the specified string for the schema name.\n  remarks: If the connection is associated with a transaction, executing `GetSchema` calls may cause some providers to throw an exception.\n  syntax:\n    content: public virtual System.Data.DataTable GetSchema (string collectionName);\n    parameters:\n    - id: collectionName\n      type: System.String\n      description: Specifies the name of the schema to return.\n    return:\n      type: System.Data.DataTable\n      description: A <xref href=\"System.Data.DataTable\"></xref> that contains schema information.\n  overload: System.Data.Common.DbConnection.GetSchema*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>collectionName</code> is specified as null.\n  platform:\n  - net462\n- uid: System.Data.Common.DbConnection.GetSchema(System.String,System.String[])\n  id: GetSchema(System.String,System.String[])\n  parent: System.Data.Common.DbConnection\n  langs:\n  - csharp\n  name: GetSchema(String,String[])\n  nameWithType: DbConnection.GetSchema(String,String[])\n  fullName: System.Data.Common.DbConnection.GetSchema(String,String[])\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Returns schema information for the data source of this <xref href=\"System.Data.Common.DbConnection\"></xref> using the specified string for the schema name and the specified string array for the restriction values.\n  remarks: \"The `restrictionValues` parameter can supply *n* depth of values, which are specified by the restrictions collection for a specific collection. In order to set values on a given restriction, and not set the values of other restrictions, you need to set the preceding restrictions to null and then put the appropriate value in for the restriction that you would like to specify a value for.  \\n  \\n An example of this is the \\\"Tables\\\" collection. If the \\\"Tables\\\" collection has three restrictions (database, owner, and table name) and you want to get back only the tables associated with the owner \\\"Carl\\\", you must pass in the following values at least: null, \\\"Carl\\\". If a restriction value is not passed in, the default values are used for that restriction. This is the same mapping as passing in null, which is different from passing in an empty string for the parameter value. In that case, the empty string (\\\"\\\") is considered to be the value for the specified parameter.  \\n  \\n If the connection is associated with a transaction, executing `GetSchema` calls may cause some providers to throw an exception.\"\n  syntax:\n    content: public virtual System.Data.DataTable GetSchema (string collectionName, string[] restrictionValues);\n    parameters:\n    - id: collectionName\n      type: System.String\n      description: Specifies the name of the schema to return.\n    - id: restrictionValues\n      type: System.String[]\n      description: Specifies a set of restriction values for the requested schema.\n    return:\n      type: System.Data.DataTable\n      description: A <xref href=\"System.Data.DataTable\"></xref> that contains schema information.\n  overload: System.Data.Common.DbConnection.GetSchema*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>collectionName</code> is specified as null.\n  platform:\n  - net462\n- uid: System.Data.Common.DbConnection.OnStateChange(System.Data.StateChangeEventArgs)\n  id: OnStateChange(System.Data.StateChangeEventArgs)\n  parent: System.Data.Common.DbConnection\n  langs:\n  - csharp\n  name: OnStateChange(StateChangeEventArgs)\n  nameWithType: DbConnection.OnStateChange(StateChangeEventArgs)\n  fullName: System.Data.Common.DbConnection.OnStateChange(StateChangeEventArgs)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Raises the <xref href=\"System.Data.Common.DbConnection.StateChange\"></xref> event.\n  remarks: 'Raising an event invokes the event handler through a delegate. For an overview, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).'\n  syntax:\n    content: protected virtual void OnStateChange (System.Data.StateChangeEventArgs stateChange);\n    parameters:\n    - id: stateChange\n      type: System.Data.StateChangeEventArgs\n      description: A <xref href=\"System.Data.StateChangeEventArgs\"></xref> that contains the event data.\n  overload: System.Data.Common.DbConnection.OnStateChange*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbConnection.Open\n  id: Open\n  parent: System.Data.Common.DbConnection\n  langs:\n  - csharp\n  name: Open()\n  nameWithType: DbConnection.Open()\n  fullName: System.Data.Common.DbConnection.Open()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Opens a database connection with the settings specified by the <xref:System.Data.Common.DbConnection.ConnectionString*>.\n  remarks: This method must be overridden with user-defined behavior. <xref:System.Data.SqlClient.SqlConnection.Open%2A?displayProperty=fullName> will throw an exception if called again without first being closed.\n  syntax:\n    content: public abstract void Open ();\n    parameters: []\n  overload: System.Data.Common.DbConnection.Open*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbConnection.OpenAsync\n  id: OpenAsync\n  parent: System.Data.Common.DbConnection\n  langs:\n  - csharp\n  name: OpenAsync()\n  nameWithType: DbConnection.OpenAsync()\n  fullName: System.Data.Common.DbConnection.OpenAsync()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: An asynchronous version of <xref:System.Data.Common.DbConnection.Open*>, which opens a database connection with the settings specified by the <xref:System.Data.Common.DbConnection.ConnectionString*>. This method invokes the virtual method <xref:System.Data.Common.DbConnection.OpenAsync*> with CancellationToken.None.\n  remarks: \"After calling <xref:System.Data.Common.DbConnection.OpenAsync%2A>, <xref:System.Data.Common.DbConnection.State%2A> must return <xref:System.Data.ConnectionState> until the returned <xref:System.Threading.Tasks.Task> is completed. Then, if the connection was successful, <xref:System.Data.Common.DbConnection.State%2A> must return <xref:System.Data.ConnectionState>. If the connection fails, <xref:System.Data.Common.DbConnection.State%2A> must return <xref:System.Data.ConnectionState>.  \\n  \\n A call to <xref:System.Data.Common.DbConnection.Close%2A> will attempt to cancel or close the corresponding <xref:System.Data.Common.DbConnection.OpenAsync%2A> call.  \\n  \\n For more information about asynchronous programming in the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], see [Asynchronous Programming](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public System.Threading.Tasks.Task OpenAsync ();\n    parameters: []\n    return:\n      type: System.Threading.Tasks.Task\n      description: A task representing the asynchronous operation.\n  overload: System.Data.Common.DbConnection.OpenAsync*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbConnection.OpenAsync(System.Threading.CancellationToken)\n  id: OpenAsync(System.Threading.CancellationToken)\n  parent: System.Data.Common.DbConnection\n  langs:\n  - csharp\n  name: OpenAsync(CancellationToken)\n  nameWithType: DbConnection.OpenAsync(CancellationToken)\n  fullName: System.Data.Common.DbConnection.OpenAsync(CancellationToken)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: \"This is the asynchronous version of <xref:System.Data.Common.DbConnection.Open*>. Providers should override with an appropriate implementation. The cancellation token can optionally be honored.  \\n  \\n The default implementation invokes the synchronous <xref:System.Data.Common.DbConnection.Open*> call and returns a completed task. The default implementation will return a cancelled task if passed an already cancelled cancellationToken. Exceptions thrown by Open will be communicated via the returned Task Exception property.  \\n  \\n Do not invoke other methods and properties of the <xref uid=\\\"langword_csharp_DbConnection\\\" name=\\\"DbConnection\\\" href=\\\"\\\"></xref> object until the returned Task is complete.\"\n  remarks: \"After calling <xref:System.Data.Common.DbConnection.OpenAsync%2A>, <xref:System.Data.Common.DbConnection.State%2A> must return <xref:System.Data.ConnectionState> until the returned <xref:System.Threading.Tasks.Task> is completed. Then, if the connection was successful, <xref:System.Data.Common.DbConnection.State%2A> must return <xref:System.Data.ConnectionState>. If the connection fails, <xref:System.Data.Common.DbConnection.State%2A> must return <xref:System.Data.ConnectionState>.  \\n  \\n A call to <xref:System.Data.Common.DbConnection.Close%2A> will attempt to cancel or close the corresponding <xref:System.Data.Common.DbConnection.OpenAsync%2A> call.  \\n  \\n For more information about asynchronous programming in the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], see [Asynchronous Programming](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public virtual System.Threading.Tasks.Task OpenAsync (System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The cancellation instruction.\n    return:\n      type: System.Threading.Tasks.Task\n      description: A task representing the asynchronous operation.\n  overload: System.Data.Common.DbConnection.OpenAsync*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbConnection.ServerVersion\n  id: ServerVersion\n  parent: System.Data.Common.DbConnection\n  langs:\n  - csharp\n  name: ServerVersion\n  nameWithType: DbConnection.ServerVersion\n  fullName: System.Data.Common.DbConnection.ServerVersion\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Gets a string that represents the version of the server to which the object is connected.\n  syntax:\n    content: public abstract string ServerVersion { get; }\n    return:\n      type: System.String\n      description: The version of the database. The format of the string returned depends on the specific type of connection you are using.\n  overload: System.Data.Common.DbConnection.ServerVersion*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: ServerVersion was called while the returned Task was not completed and the connection was not opened after a call to <xref:System.Data.Common.DbConnection.OpenAsync*>.\n  platform:\n  - net462\n- uid: System.Data.Common.DbConnection.State\n  id: State\n  parent: System.Data.Common.DbConnection\n  langs:\n  - csharp\n  name: State\n  nameWithType: DbConnection.State\n  fullName: System.Data.Common.DbConnection.State\n  type: Property\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Gets a string that describes the state of the connection.\n  syntax:\n    content: public abstract System.Data.ConnectionState State { get; }\n    return:\n      type: System.Data.ConnectionState\n      description: The state of the connection. The format of the string returned depends on the specific type of connection you are using.\n  overload: System.Data.Common.DbConnection.State*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbConnection.StateChange\n  id: StateChange\n  parent: System.Data.Common.DbConnection\n  langs:\n  - csharp\n  name: StateChange\n  nameWithType: DbConnection.StateChange\n  fullName: System.Data.Common.DbConnection.StateChange\n  type: Event\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Occurs when the state of the event changes.\n  remarks: The StateChange event occurs when the state of the event changes from closed to opened, or opened to closed.\n  syntax:\n    content: public virtual event System.Data.StateChangeEventHandler StateChange;\n    return:\n      type: System.Data.StateChangeEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction\n  id: System#Data#IDbConnection#BeginTransaction\n  isEii: true\n  parent: System.Data.Common.DbConnection\n  langs:\n  - csharp\n  name: System.Data.IDbConnection.BeginTransaction()\n  nameWithType: DbConnection.System.Data.IDbConnection.BeginTransaction()\n  fullName: System.Data.Common.DbConnection.System.Data.IDbConnection.BeginTransaction()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Begins a database transaction.\n  remarks: \"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Common.DbConnection> instance is cast to an <xref:System.Data.IDbConnection> interface.  \\n  \\n For more information, see <xref:System.Data.IDbConnection.BeginTransaction%2A>.\"\n  syntax:\n    content: System.Data.IDbTransaction IDbConnection.BeginTransaction ();\n    parameters: []\n    return:\n      type: System.Data.IDbTransaction\n      description: An object that represents the new transaction.\n  overload: System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction(System.Data.IsolationLevel)\n  id: System#Data#IDbConnection#BeginTransaction(System.Data.IsolationLevel)\n  isEii: true\n  parent: System.Data.Common.DbConnection\n  langs:\n  - csharp\n  name: System.Data.IDbConnection.BeginTransaction(IsolationLevel)\n  nameWithType: DbConnection.System.Data.IDbConnection.BeginTransaction(IsolationLevel)\n  fullName: System.Data.Common.DbConnection.System.Data.IDbConnection.BeginTransaction(IsolationLevel)\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Begins a database transaction with the specified <xref href=\"System.Data.IsolationLevel\"></xref> value.\n  remarks: For more information, see <xref:System.Data.IDbConnection.BeginTransaction%2A>.\n  syntax:\n    content: System.Data.IDbTransaction IDbConnection.BeginTransaction (System.Data.IsolationLevel isolationLevel);\n    parameters:\n    - id: isolationLevel\n      type: System.Data.IsolationLevel\n      description: One of the <xref href=\"System.Data.IsolationLevel\"></xref> values.\n    return:\n      type: System.Data.IDbTransaction\n      description: An object that represents the new transaction.\n  overload: System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbConnection.System#Data#IDbConnection#CreateCommand\n  id: System#Data#IDbConnection#CreateCommand\n  isEii: true\n  parent: System.Data.Common.DbConnection\n  langs:\n  - csharp\n  name: System.Data.IDbConnection.CreateCommand()\n  nameWithType: DbConnection.System.Data.IDbConnection.CreateCommand()\n  fullName: System.Data.Common.DbConnection.System.Data.IDbConnection.CreateCommand()\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.Common\n  summary: Creates and returns a <xref href=\"System.Data.Common.DbCommand\"></xref> object that is associated with the current connection.\n  remarks: For more information, see [Commands and Parameters](~/add/includes/ajax-current-ext-md.md) and <xref:System.Data.IDbConnection.CreateCommand%2A>.\n  syntax:\n    content: System.Data.IDbCommand IDbConnection.CreateCommand ();\n    parameters: []\n    return:\n      type: System.Data.IDbCommand\n      description: A <xref href=\"System.Data.Common.DbCommand\"></xref> object that is associated with the connection.\n  overload: System.Data.Common.DbConnection.System#Data#IDbConnection#CreateCommand*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.ComponentModel.Component\n  isExternal: false\n  name: System.ComponentModel.Component\n- uid: System.Data.Common.DbException\n  parent: System.Data.Common\n  isExternal: false\n  name: DbException\n  nameWithType: DbException\n  fullName: System.Data.Common.DbException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.Data.Common.DbConnection.#ctor\n  parent: System.Data.Common.DbConnection\n  isExternal: false\n  name: DbConnection()\n  nameWithType: DbConnection.DbConnection()\n  fullName: System.Data.Common.DbConnection.DbConnection()\n- uid: System.Data.Common.DbConnection.BeginDbTransaction(System.Data.IsolationLevel)\n  parent: System.Data.Common.DbConnection\n  isExternal: false\n  name: BeginDbTransaction(IsolationLevel)\n  nameWithType: DbConnection.BeginDbTransaction(IsolationLevel)\n  fullName: System.Data.Common.DbConnection.BeginDbTransaction(IsolationLevel)\n- uid: System.Data.Common.DbTransaction\n  parent: System.Data.Common\n  isExternal: false\n  name: DbTransaction\n  nameWithType: DbTransaction\n  fullName: System.Data.Common.DbTransaction\n- uid: System.Data.IsolationLevel\n  parent: System.Data\n  isExternal: false\n  name: IsolationLevel\n  nameWithType: IsolationLevel\n  fullName: System.Data.IsolationLevel\n- uid: System.Data.Common.DbConnection.BeginTransaction\n  parent: System.Data.Common.DbConnection\n  isExternal: false\n  name: BeginTransaction()\n  nameWithType: DbConnection.BeginTransaction()\n  fullName: System.Data.Common.DbConnection.BeginTransaction()\n- uid: System.Data.Common.DbConnection.BeginTransaction(System.Data.IsolationLevel)\n  parent: System.Data.Common.DbConnection\n  isExternal: false\n  name: BeginTransaction(IsolationLevel)\n  nameWithType: DbConnection.BeginTransaction(IsolationLevel)\n  fullName: System.Data.Common.DbConnection.BeginTransaction(IsolationLevel)\n- uid: System.Data.Common.DbConnection.ChangeDatabase(System.String)\n  parent: System.Data.Common.DbConnection\n  isExternal: false\n  name: ChangeDatabase(String)\n  nameWithType: DbConnection.ChangeDatabase(String)\n  fullName: System.Data.Common.DbConnection.ChangeDatabase(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Data.Common.DbConnection.Close\n  parent: System.Data.Common.DbConnection\n  isExternal: false\n  name: Close()\n  nameWithType: DbConnection.Close()\n  fullName: System.Data.Common.DbConnection.Close()\n- uid: System.Data.Common.DbConnection.ConnectionString\n  parent: System.Data.Common.DbConnection\n  isExternal: false\n  name: ConnectionString\n  nameWithType: DbConnection.ConnectionString\n  fullName: System.Data.Common.DbConnection.ConnectionString\n- uid: System.Data.Common.DbConnection.ConnectionTimeout\n  parent: System.Data.Common.DbConnection\n  isExternal: false\n  name: ConnectionTimeout\n  nameWithType: DbConnection.ConnectionTimeout\n  fullName: System.Data.Common.DbConnection.ConnectionTimeout\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Data.Common.DbConnection.CreateCommand\n  parent: System.Data.Common.DbConnection\n  isExternal: false\n  name: CreateCommand()\n  nameWithType: DbConnection.CreateCommand()\n  fullName: System.Data.Common.DbConnection.CreateCommand()\n- uid: System.Data.Common.DbCommand\n  parent: System.Data.Common\n  isExternal: false\n  name: DbCommand\n  nameWithType: DbCommand\n  fullName: System.Data.Common.DbCommand\n- uid: System.Data.Common.DbConnection.CreateDbCommand\n  parent: System.Data.Common.DbConnection\n  isExternal: false\n  name: CreateDbCommand()\n  nameWithType: DbConnection.CreateDbCommand()\n  fullName: System.Data.Common.DbConnection.CreateDbCommand()\n- uid: System.Data.Common.DbConnection.Database\n  parent: System.Data.Common.DbConnection\n  isExternal: false\n  name: Database\n  nameWithType: DbConnection.Database\n  fullName: System.Data.Common.DbConnection.Database\n- uid: System.Data.Common.DbConnection.DataSource\n  parent: System.Data.Common.DbConnection\n  isExternal: false\n  name: DataSource\n  nameWithType: DbConnection.DataSource\n  fullName: System.Data.Common.DbConnection.DataSource\n- uid: System.Data.Common.DbConnection.DbProviderFactory\n  parent: System.Data.Common.DbConnection\n  isExternal: false\n  name: DbProviderFactory\n  nameWithType: DbConnection.DbProviderFactory\n  fullName: System.Data.Common.DbConnection.DbProviderFactory\n- uid: System.Data.Common.DbProviderFactory\n  parent: System.Data.Common\n  isExternal: false\n  name: DbProviderFactory\n  nameWithType: DbProviderFactory\n  fullName: System.Data.Common.DbProviderFactory\n- uid: System.Data.Common.DbConnection.EnlistTransaction(System.Transactions.Transaction)\n  parent: System.Data.Common.DbConnection\n  isExternal: false\n  name: EnlistTransaction(Transaction)\n  nameWithType: DbConnection.EnlistTransaction(Transaction)\n  fullName: System.Data.Common.DbConnection.EnlistTransaction(Transaction)\n- uid: System.Transactions.Transaction\n  parent: System.Transactions\n  isExternal: false\n  name: Transaction\n  nameWithType: Transaction\n  fullName: System.Transactions.Transaction\n- uid: System.Data.Common.DbConnection.GetSchema\n  parent: System.Data.Common.DbConnection\n  isExternal: false\n  name: GetSchema()\n  nameWithType: DbConnection.GetSchema()\n  fullName: System.Data.Common.DbConnection.GetSchema()\n- uid: System.Data.DataTable\n  parent: System.Data\n  isExternal: false\n  name: DataTable\n  nameWithType: DataTable\n  fullName: System.Data.DataTable\n- uid: System.Data.Common.DbConnection.GetSchema(System.String)\n  parent: System.Data.Common.DbConnection\n  isExternal: false\n  name: GetSchema(String)\n  nameWithType: DbConnection.GetSchema(String)\n  fullName: System.Data.Common.DbConnection.GetSchema(String)\n- uid: System.Data.Common.DbConnection.GetSchema(System.String,System.String[])\n  parent: System.Data.Common.DbConnection\n  isExternal: false\n  name: GetSchema(String,String[])\n  nameWithType: DbConnection.GetSchema(String,String[])\n  fullName: System.Data.Common.DbConnection.GetSchema(String,String[])\n- uid: System.String[]\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String[]\n  spec.csharp:\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: String[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Data.Common.DbConnection.OnStateChange(System.Data.StateChangeEventArgs)\n  parent: System.Data.Common.DbConnection\n  isExternal: false\n  name: OnStateChange(StateChangeEventArgs)\n  nameWithType: DbConnection.OnStateChange(StateChangeEventArgs)\n  fullName: System.Data.Common.DbConnection.OnStateChange(StateChangeEventArgs)\n- uid: System.Data.StateChangeEventArgs\n  parent: System.Data\n  isExternal: false\n  name: StateChangeEventArgs\n  nameWithType: StateChangeEventArgs\n  fullName: System.Data.StateChangeEventArgs\n- uid: System.Data.Common.DbConnection.Open\n  parent: System.Data.Common.DbConnection\n  isExternal: false\n  name: Open()\n  nameWithType: DbConnection.Open()\n  fullName: System.Data.Common.DbConnection.Open()\n- uid: System.Data.Common.DbConnection.OpenAsync\n  parent: System.Data.Common.DbConnection\n  isExternal: false\n  name: OpenAsync()\n  nameWithType: DbConnection.OpenAsync()\n  fullName: System.Data.Common.DbConnection.OpenAsync()\n- uid: System.Threading.Tasks.Task\n  parent: System.Threading.Tasks\n  isExternal: true\n  name: Task\n  nameWithType: Task\n  fullName: System.Threading.Tasks.Task\n- uid: System.Data.Common.DbConnection.OpenAsync(System.Threading.CancellationToken)\n  parent: System.Data.Common.DbConnection\n  isExternal: false\n  name: OpenAsync(CancellationToken)\n  nameWithType: DbConnection.OpenAsync(CancellationToken)\n  fullName: System.Data.Common.DbConnection.OpenAsync(CancellationToken)\n- uid: System.Threading.CancellationToken\n  parent: System.Threading\n  isExternal: true\n  name: CancellationToken\n  nameWithType: CancellationToken\n  fullName: System.Threading.CancellationToken\n- uid: System.Data.Common.DbConnection.ServerVersion\n  parent: System.Data.Common.DbConnection\n  isExternal: false\n  name: ServerVersion\n  nameWithType: DbConnection.ServerVersion\n  fullName: System.Data.Common.DbConnection.ServerVersion\n- uid: System.Data.Common.DbConnection.State\n  parent: System.Data.Common.DbConnection\n  isExternal: false\n  name: State\n  nameWithType: DbConnection.State\n  fullName: System.Data.Common.DbConnection.State\n- uid: System.Data.ConnectionState\n  parent: System.Data\n  isExternal: false\n  name: ConnectionState\n  nameWithType: ConnectionState\n  fullName: System.Data.ConnectionState\n- uid: System.Data.Common.DbConnection.StateChange\n  parent: System.Data.Common.DbConnection\n  isExternal: false\n  name: StateChange\n  nameWithType: DbConnection.StateChange\n  fullName: System.Data.Common.DbConnection.StateChange\n- uid: System.Data.StateChangeEventHandler\n  parent: System.Data\n  isExternal: false\n  name: StateChangeEventHandler\n  nameWithType: StateChangeEventHandler\n  fullName: System.Data.StateChangeEventHandler\n- uid: System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction\n  parent: System.Data.Common.DbConnection\n  isExternal: false\n  name: System.Data.IDbConnection.BeginTransaction()\n  nameWithType: DbConnection.System.Data.IDbConnection.BeginTransaction()\n  fullName: System.Data.Common.DbConnection.System.Data.IDbConnection.BeginTransaction()\n- uid: System.Data.IDbTransaction\n  parent: System.Data\n  isExternal: false\n  name: IDbTransaction\n  nameWithType: IDbTransaction\n  fullName: System.Data.IDbTransaction\n- uid: System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction(System.Data.IsolationLevel)\n  parent: System.Data.Common.DbConnection\n  isExternal: false\n  name: System.Data.IDbConnection.BeginTransaction(IsolationLevel)\n  nameWithType: DbConnection.System.Data.IDbConnection.BeginTransaction(IsolationLevel)\n  fullName: System.Data.Common.DbConnection.System.Data.IDbConnection.BeginTransaction(IsolationLevel)\n- uid: System.Data.Common.DbConnection.System#Data#IDbConnection#CreateCommand\n  parent: System.Data.Common.DbConnection\n  isExternal: false\n  name: System.Data.IDbConnection.CreateCommand()\n  nameWithType: DbConnection.System.Data.IDbConnection.CreateCommand()\n  fullName: System.Data.Common.DbConnection.System.Data.IDbConnection.CreateCommand()\n- uid: System.Data.IDbCommand\n  parent: System.Data\n  isExternal: false\n  name: IDbCommand\n  nameWithType: IDbCommand\n  fullName: System.Data.IDbCommand\n- uid: System.Data.Common.DbConnection.#ctor*\n  parent: System.Data.Common.DbConnection\n  isExternal: false\n  name: DbConnection\n  nameWithType: DbConnection.DbConnection\n- uid: System.Data.Common.DbConnection.BeginDbTransaction*\n  parent: System.Data.Common.DbConnection\n  isExternal: false\n  name: BeginDbTransaction\n  nameWithType: DbConnection.BeginDbTransaction\n- uid: System.Data.Common.DbConnection.BeginTransaction*\n  parent: System.Data.Common.DbConnection\n  isExternal: false\n  name: BeginTransaction\n  nameWithType: DbConnection.BeginTransaction\n- uid: System.Data.Common.DbConnection.ChangeDatabase*\n  parent: System.Data.Common.DbConnection\n  isExternal: false\n  name: ChangeDatabase\n  nameWithType: DbConnection.ChangeDatabase\n- uid: System.Data.Common.DbConnection.Close*\n  parent: System.Data.Common.DbConnection\n  isExternal: false\n  name: Close\n  nameWithType: DbConnection.Close\n- uid: System.Data.Common.DbConnection.ConnectionString*\n  parent: System.Data.Common.DbConnection\n  isExternal: false\n  name: ConnectionString\n  nameWithType: DbConnection.ConnectionString\n- uid: System.Data.Common.DbConnection.ConnectionTimeout*\n  parent: System.Data.Common.DbConnection\n  isExternal: false\n  name: ConnectionTimeout\n  nameWithType: DbConnection.ConnectionTimeout\n- uid: System.Data.Common.DbConnection.CreateCommand*\n  parent: System.Data.Common.DbConnection\n  isExternal: false\n  name: CreateCommand\n  nameWithType: DbConnection.CreateCommand\n- uid: System.Data.Common.DbConnection.CreateDbCommand*\n  parent: System.Data.Common.DbConnection\n  isExternal: false\n  name: CreateDbCommand\n  nameWithType: DbConnection.CreateDbCommand\n- uid: System.Data.Common.DbConnection.Database*\n  parent: System.Data.Common.DbConnection\n  isExternal: false\n  name: Database\n  nameWithType: DbConnection.Database\n- uid: System.Data.Common.DbConnection.DataSource*\n  parent: System.Data.Common.DbConnection\n  isExternal: false\n  name: DataSource\n  nameWithType: DbConnection.DataSource\n- uid: System.Data.Common.DbConnection.DbProviderFactory*\n  parent: System.Data.Common.DbConnection\n  isExternal: false\n  name: DbProviderFactory\n  nameWithType: DbConnection.DbProviderFactory\n- uid: System.Data.Common.DbConnection.EnlistTransaction*\n  parent: System.Data.Common.DbConnection\n  isExternal: false\n  name: EnlistTransaction\n  nameWithType: DbConnection.EnlistTransaction\n- uid: System.Data.Common.DbConnection.GetSchema*\n  parent: System.Data.Common.DbConnection\n  isExternal: false\n  name: GetSchema\n  nameWithType: DbConnection.GetSchema\n- uid: System.Data.Common.DbConnection.OnStateChange*\n  parent: System.Data.Common.DbConnection\n  isExternal: false\n  name: OnStateChange\n  nameWithType: DbConnection.OnStateChange\n- uid: System.Data.Common.DbConnection.Open*\n  parent: System.Data.Common.DbConnection\n  isExternal: false\n  name: Open\n  nameWithType: DbConnection.Open\n- uid: System.Data.Common.DbConnection.OpenAsync*\n  parent: System.Data.Common.DbConnection\n  isExternal: false\n  name: OpenAsync\n  nameWithType: DbConnection.OpenAsync\n- uid: System.Data.Common.DbConnection.ServerVersion*\n  parent: System.Data.Common.DbConnection\n  isExternal: false\n  name: ServerVersion\n  nameWithType: DbConnection.ServerVersion\n- uid: System.Data.Common.DbConnection.State*\n  parent: System.Data.Common.DbConnection\n  isExternal: false\n  name: State\n  nameWithType: DbConnection.State\n- uid: System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction*\n  parent: System.Data.Common.DbConnection\n  isExternal: false\n  name: System.Data.IDbConnection.BeginTransaction\n  nameWithType: DbConnection.System.Data.IDbConnection.BeginTransaction\n- uid: System.Data.Common.DbConnection.System#Data#IDbConnection#CreateCommand*\n  parent: System.Data.Common.DbConnection\n  isExternal: false\n  name: System.Data.IDbConnection.CreateCommand\n  nameWithType: DbConnection.System.Data.IDbConnection.CreateCommand\n"}