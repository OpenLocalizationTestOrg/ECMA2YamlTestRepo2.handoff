{"nodes":[{"pos":[533,658],"content":"Provides a base class for Win32 safe handle implementations in which the value of either 0 or -1 indicates an invalid handle.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides a base class for Win32 safe handle implementations in which the value of either 0 or -1 indicates an invalid handle.","pos":[0,125]}]},{"pos":[671,1848],"content":"This class derives from the <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=fullName> class. It describes the format of an invalid handle. For example, some handles use -1 as an invalid handle value, while others use 0. Further derivations of this class (for example, file or registry handles) can specialize this further. See the <xref:Microsoft.Win32.SafeHandles.SafeFileHandle> class for an example of a class that derives from SafeHandleZeroOrMinusOneIsInvalid.      > [!IMPORTANT] >  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref:System.IDisposable> interface topic.       Use the SafeHandleZeroOrMinusOneIsInvalid class whenever you need to safely wrap an unmanaged resource that does not have an existing managed wrapper.","needQuote":false,"needEscape":true,"nodes":[{"content":"This class derives from the &lt;xref:System.Runtime.InteropServices.SafeHandle?displayProperty=fullName&gt; class.","pos":[0,108],"source":"This class derives from the <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=fullName> class."},{"content":"It describes the format of an invalid handle.","pos":[109,154]},{"content":"For example, some handles use -1 as an invalid handle value, while others use 0.","pos":[155,235]},{"content":"Further derivations of this class (for example, file or registry handles) can specialize this further.","pos":[236,338]},{"content":"See the &lt;xref:Microsoft.Win32.SafeHandles.SafeFileHandle&gt; class for an example of a class that derives from SafeHandleZeroOrMinusOneIsInvalid.","pos":[339,481],"source":" See the <xref:Microsoft.Win32.SafeHandles.SafeFileHandle> class for an example of a class that derives from SafeHandleZeroOrMinusOneIsInvalid."},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  This type implements the &lt;xref:System.IDisposable&gt; interface.","pos":[487,566],"source":"      > [!IMPORTANT] >  This type implements the <xref:System.IDisposable> interface."},{"content":"When you have finished using the type, you should dispose of it either directly or indirectly.","pos":[567,661]},{"content":"To dispose of the type directly, call its &lt;xref:System.IDisposable.Dispose%2A&gt; method in a <ph id=\"ph1\">`try`</ph><ph id=\"ph2\">/</ph><ph id=\"ph3\">`catch`</ph> block.","pos":[662,773],"source":" To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block."},{"content":"To dispose of it indirectly, use a language construct such as <ph id=\"ph1\">`using`</ph> (in C#) or <ph id=\"ph2\">`Using`</ph> (in Visual Basic).","pos":[774,881],"source":" To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic)."},{"content":"For more information, see the “Using an Object that Implements IDisposable” section in the &lt;xref:System.IDisposable&gt; interface topic.","pos":[882,1015],"source":" For more information, see the “Using an Object that Implements IDisposable” section in the <xref:System.IDisposable> interface topic."},{"content":"Use the SafeHandleZeroOrMinusOneIsInvalid class whenever you need to safely wrap an unmanaged resource that does not have an existing managed wrapper.","pos":[1022,1172]}]},{"pos":[2721,2902],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class, specifying whether the handle is to be reliably released.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid\"></xref> class, specifying whether the handle is to be reliably released."},{"pos":[3072,3304],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to reliably release the handle during the finalization phase; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> to prevent reliable release (not recommended).","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to reliably release the handle during the finalization phase; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to prevent reliable release (not recommended)."},{"pos":[3871,3929],"content":"Gets a value that indicates whether the handle is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that indicates whether the handle is invalid.","pos":[0,58]}]},{"pos":[3941,4043],"content":"The common language runtime uses this property to determine whether critical finalization is required.","needQuote":true,"needEscape":true,"nodes":[{"content":"The common language runtime uses this property to determine whether critical finalization is required.","pos":[0,102]}]},{"pos":[4165,4328],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the handle is not valid; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the handle is not valid; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid\n  id: SafeHandleZeroOrMinusOneIsInvalid\n  children:\n  - Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.#ctor(System.Boolean)\n  - Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.IsInvalid\n  langs:\n  - csharp\n  name: SafeHandleZeroOrMinusOneIsInvalid\n  nameWithType: SafeHandleZeroOrMinusOneIsInvalid\n  fullName: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid\n  type: Class\n  summary: Provides a base class for Win32 safe handle implementations in which the value of either 0 or -1 indicates an invalid handle.\n  remarks: \"This class derives from the <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=fullName> class. It describes the format of an invalid handle. For example, some handles use -1 as an invalid handle value, while others use 0. Further derivations of this class (for example, file or registry handles) can specialize this further. See the <xref:Microsoft.Win32.SafeHandles.SafeFileHandle> class for an example of a class that derives from SafeHandleZeroOrMinusOneIsInvalid.  \\n  \\n> [!IMPORTANT]\\n>  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref:System.IDisposable> interface topic.  \\n  \\n Use the SafeHandleZeroOrMinusOneIsInvalid class whenever you need to safely wrap an unmanaged resource that does not have an existing managed wrapper.\"\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      public abstract class SafeHandleZeroOrMinusOneIsInvalid : System.Runtime.InteropServices.SafeHandle\n  inheritance:\n  - System.Runtime.InteropServices.SafeHandle\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.#ctor(System.Boolean)\n  id: '#ctor(System.Boolean)'\n  parent: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid\n  langs:\n  - csharp\n  name: SafeHandleZeroOrMinusOneIsInvalid(Boolean)\n  nameWithType: SafeHandleZeroOrMinusOneIsInvalid.SafeHandleZeroOrMinusOneIsInvalid(Boolean)\n  fullName: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.SafeHandleZeroOrMinusOneIsInvalid(Boolean)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: Microsoft.Win32.SafeHandles\n  summary: Initializes a new instance of the <xref href=\"Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid\"></xref> class, specifying whether the handle is to be reliably released.\n  syntax:\n    content: protected SafeHandleZeroOrMinusOneIsInvalid (bool ownsHandle);\n    parameters:\n    - id: ownsHandle\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to reliably release the handle during the finalization phase; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to prevent reliable release (not recommended).\n  overload: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.IsInvalid\n  id: IsInvalid\n  parent: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid\n  langs:\n  - csharp\n  name: IsInvalid\n  nameWithType: SafeHandleZeroOrMinusOneIsInvalid.IsInvalid\n  fullName: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.IsInvalid\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: Microsoft.Win32.SafeHandles\n  summary: Gets a value that indicates whether the handle is invalid.\n  remarks: The common language runtime uses this property to determine whether critical finalization is required.\n  syntax:\n    content: public override bool IsInvalid { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the handle is not valid; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.IsInvalid*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: System.Runtime.InteropServices.SafeHandle\n- uid: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.#ctor(System.Boolean)\n  parent: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid\n  isExternal: false\n  name: SafeHandleZeroOrMinusOneIsInvalid(Boolean)\n  nameWithType: SafeHandleZeroOrMinusOneIsInvalid.SafeHandleZeroOrMinusOneIsInvalid(Boolean)\n  fullName: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.SafeHandleZeroOrMinusOneIsInvalid(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.IsInvalid\n  parent: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid\n  isExternal: false\n  name: IsInvalid\n  nameWithType: SafeHandleZeroOrMinusOneIsInvalid.IsInvalid\n  fullName: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.IsInvalid\n- uid: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.#ctor*\n  parent: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid\n  isExternal: false\n  name: SafeHandleZeroOrMinusOneIsInvalid\n  nameWithType: SafeHandleZeroOrMinusOneIsInvalid.SafeHandleZeroOrMinusOneIsInvalid\n- uid: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.IsInvalid*\n  parent: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid\n  isExternal: false\n  name: IsInvalid\n  nameWithType: SafeHandleZeroOrMinusOneIsInvalid.IsInvalid\n"}