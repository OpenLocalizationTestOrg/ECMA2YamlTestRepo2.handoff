{"nodes":[{"pos":[1161,1270],"content":"Performs a cryptographic transformation of data using the Rijndael algorithm. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Performs a cryptographic transformation of data using the Rijndael algorithm. This class cannot be inherited.","pos":[0,109],"nodes":[{"content":"Performs a cryptographic transformation of data using the Rijndael algorithm.","pos":[0,77]},{"content":"This class cannot be inherited.","pos":[78,109]}]}]},{"pos":[1283,2243],"content":"> [!NOTE] >  Using this class is not recommended. A better practice is to use <xref:System.Security.Cryptography.RijndaelManaged> with a <xref:System.Security.Cryptography.CryptoStream> object. The <xref:System.Security.Cryptography.CryptoStream> object handles the padding issues that can occur when using RijndaelManagedTransform directly. For an example, see the <xref:System.Security.Cryptography.RijndaelManaged> class.       Both the <xref:System.Security.Cryptography.RijndaelManaged.CreateEncryptor%2A> and <xref:System.Security.Cryptography.RijndaelManaged.CreateDecryptor%2A> methods return an instance of the RijndaelManagedTransform class that is initialized with the key information of the current <xref:System.Security.Cryptography.RijndaelManaged> object.  To encrypt or decrypt data using the Rijndael algorithm, pass the RijndaelManagedTransform object returned by these methods to a <xref:System.Security.Cryptography.CryptoStream> object.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&gt; [!NOTE]</ph> &gt;  Using this class is not recommended.","pos":[0,49],"source":"> [!NOTE] >  Using this class is not recommended."},{"content":"A better practice is to use &lt;xref:System.Security.Cryptography.RijndaelManaged&gt; with a &lt;xref:System.Security.Cryptography.CryptoStream&gt; object.","pos":[50,193],"source":" A better practice is to use <xref:System.Security.Cryptography.RijndaelManaged> with a <xref:System.Security.Cryptography.CryptoStream> object."},{"content":"The &lt;xref:System.Security.Cryptography.CryptoStream&gt; object handles the padding issues that can occur when using RijndaelManagedTransform directly.","pos":[194,341],"source":" The <xref:System.Security.Cryptography.CryptoStream> object handles the padding issues that can occur when using RijndaelManagedTransform directly."},{"content":"For an example, see the &lt;xref:System.Security.Cryptography.RijndaelManaged&gt; class.","pos":[342,424],"source":" For an example, see the <xref:System.Security.Cryptography.RijndaelManaged> class."},{"content":"Both the &lt;xref:System.Security.Cryptography.RijndaelManaged.CreateEncryptor%2A&gt; and &lt;xref:System.Security.Cryptography.RijndaelManaged.CreateDecryptor%2A&gt; methods return an instance of the RijndaelManagedTransform class that is initialized with the key information of the current &lt;xref:System.Security.Cryptography.RijndaelManaged&gt; object.","pos":[431,770],"source":"       Both the <xref:System.Security.Cryptography.RijndaelManaged.CreateEncryptor%2A> and <xref:System.Security.Cryptography.RijndaelManaged.CreateDecryptor%2A> methods return an instance of the RijndaelManagedTransform class that is initialized with the key information of the current <xref:System.Security.Cryptography.RijndaelManaged> object."},{"content":"To encrypt or decrypt data using the Rijndael algorithm, pass the RijndaelManagedTransform object returned by these methods to a &lt;xref:System.Security.Cryptography.CryptoStream&gt; object.","pos":[772,957],"source":"  To encrypt or decrypt data using the Rijndael algorithm, pass the RijndaelManagedTransform object returned by these methods to a <xref:System.Security.Cryptography.CryptoStream> object."}]},{"pos":[3008,3028],"content":"Gets the block size.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the block size.","pos":[0,20]}]},{"pos":[3143,3180],"content":"The size of the data blocks in bytes.","needQuote":true,"needEscape":true,"nodes":[{"content":"The size of the data blocks in bytes.","pos":[0,37]}]},{"pos":[3756,3824],"content":"Gets a value indicating whether the current transform can be reused.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value indicating whether the current transform can be reused.","pos":[0,68]}]},{"pos":[3945,4013],"content":"Always <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Always <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>."},{"pos":[4637,4704],"content":"Gets a value indicating whether multiple blocks can be transformed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value indicating whether multiple blocks can be transformed.","pos":[0,67]}]},{"pos":[4834,5008],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if multiple blocks can be transformed; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if multiple blocks can be transformed; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[5540,5656],"content":"Releases all resources used by the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.RijndaelManagedTransform\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Releases all resources used by the <xref href=\"System.Security.Cryptography.RijndaelManagedTransform\"></xref> class."},{"pos":[5669,6043],"content":"This method is a simple call to <xref:System.IDisposable.Dispose%2A?displayProperty=fullName> class.       Calling `Dispose` allows the resources used by the <xref:System.Security.Cryptography.RijndaelManagedTransform> to be reallocated for other purposes. For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"This method is a simple call to &lt;xref:System.IDisposable.Dispose%2A?displayProperty=fullName&gt; class.","pos":[0,100],"source":"This method is a simple call to <xref:System.IDisposable.Dispose%2A?displayProperty=fullName> class."},{"content":"Calling <ph id=\"ph1\">`Dispose`</ph> allows the resources used by the &lt;xref:System.Security.Cryptography.RijndaelManagedTransform&gt; to be reallocated for other purposes.","pos":[107,256],"source":"       Calling `Dispose` allows the resources used by the <xref:System.Security.Cryptography.RijndaelManagedTransform> to be reallocated for other purposes."},{"content":"For more information about <ph id=\"ph1\">`Dispose`</ph>, see <bpt id=\"p1\">[</bpt>Cleaning Up Unmanaged Resources<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[257,372],"source":" For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[6629,6769],"content":"Releases all resources used by the current instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.RijndaelManagedTransform\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Releases all resources used by the current instance of the <xref href=\"System.Security.Cryptography.RijndaelManagedTransform\"></xref> class."},{"pos":[6782,7779],"content":"Call `Dispose` when you are finished using the <xref:System.Security.Cryptography.RijndaelManagedTransform>. The `Dispose` method leaves the <xref:System.Security.Cryptography.RijndaelManagedTransform> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.Security.Cryptography.RijndaelManagedTransform> so the garbage collector can reclaim the memory that the <xref:System.Security.Cryptography.RijndaelManagedTransform> was occupying.       For more information, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md) and [Implementing a Dispose Method](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] >  Always call `Dispose` before you release your last reference to the <xref:System.Security.Cryptography.RijndaelManagedTransform>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Security.Cryptography.RijndaelManagedTransform> object's `Finalize` method.","needQuote":false,"needEscape":true,"nodes":[{"content":"Call <ph id=\"ph1\">`Dispose`</ph> when you are finished using the &lt;xref:System.Security.Cryptography.RijndaelManagedTransform&gt;.","pos":[0,108],"source":"Call `Dispose` when you are finished using the <xref:System.Security.Cryptography.RijndaelManagedTransform>."},{"content":"The <ph id=\"ph1\">`Dispose`</ph> method leaves the &lt;xref:System.Security.Cryptography.RijndaelManagedTransform&gt; in an unusable state.","pos":[109,223],"source":" The `Dispose` method leaves the <xref:System.Security.Cryptography.RijndaelManagedTransform> in an unusable state."},{"content":"After calling <ph id=\"ph1\">`Dispose`</ph>, you must release all references to the &lt;xref:System.Security.Cryptography.RijndaelManagedTransform&gt; so the garbage collector can reclaim the memory that the &lt;xref:System.Security.Cryptography.RijndaelManagedTransform&gt; was occupying.","pos":[224,481],"source":" After calling `Dispose`, you must release all references to the <xref:System.Security.Cryptography.RijndaelManagedTransform> so the garbage collector can reclaim the memory that the <xref:System.Security.Cryptography.RijndaelManagedTransform> was occupying."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Cleaning Up Unmanaged Resources<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id=\"p2\">[</bpt>Implementing a Dispose Method<ept id=\"p2\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[488,662],"source":"       For more information, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md) and [Implementing a Dispose Method](~/add/includes/ajax-current-ext-md.md)."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Always call <ph id=\"ph2\">`Dispose`</ph> before you release your last reference to the &lt;xref:System.Security.Cryptography.RijndaelManagedTransform&gt;.","pos":[668,810],"source":"      > [!NOTE] >  Always call `Dispose` before you release your last reference to the <xref:System.Security.Cryptography.RijndaelManagedTransform>."},{"content":"Otherwise, the resources it is using will not be freed until the garbage collector calls the &lt;xref:System.Security.Cryptography.RijndaelManagedTransform&gt; object's <ph id=\"ph1\">`Finalize`</ph> method.","pos":[811,992],"source":" Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Security.Cryptography.RijndaelManagedTransform> object's `Finalize` method."}]},{"pos":[8400,8426],"content":"Gets the input block size.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the input block size.","pos":[0,26]}]},{"pos":[8541,8584],"content":"The size of the input data blocks in bytes.","needQuote":true,"needEscape":true,"nodes":[{"content":"The size of the input data blocks in bytes.","pos":[0,43]}]},{"pos":[9150,9177],"content":"Gets the output block size.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the output block size.","pos":[0,27]}]},{"pos":[9293,9337],"content":"The size of the output data blocks in bytes.","needQuote":true,"needEscape":true,"nodes":[{"content":"The size of the output data blocks in bytes.","pos":[0,44]}]},{"pos":[9858,10029],"content":"Resets the internal state of <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.RijndaelManagedTransform\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> so it can be used again to do a different encryption or decryption.","needQuote":true,"needEscape":true,"source":"Resets the internal state of <xref href=\"System.Security.Cryptography.RijndaelManagedTransform\"></xref> so it can be used again to do a different encryption or decryption."},{"pos":[10041,10416],"content":"The Reset method is called automatically when you call <xref:System.Security.Cryptography.RijndaelManagedTransform.TransformFinalBlock%2A>. The Reset method is not called when, for example, the encrypted input data is garbage and cannot be decrypted. In this case, an exception is thrown and Reset is not called. You can choose to manually call the Reset method in this case.","needQuote":true,"needEscape":true,"nodes":[{"content":"The Reset method is called automatically when you call <xref:System.Security.Cryptography.RijndaelManagedTransform.TransformFinalBlock%2A>. The Reset method is not called when, for example, the encrypted input data is garbage and cannot be decrypted. In this case, an exception is thrown and Reset is not called. You can choose to manually call the Reset method in this case.","pos":[0,375],"nodes":[{"content":"The Reset method is called automatically when you call &lt;xref:System.Security.Cryptography.RijndaelManagedTransform.TransformFinalBlock%2A&gt;.","pos":[0,139],"source":"The Reset method is called automatically when you call <xref:System.Security.Cryptography.RijndaelManagedTransform.TransformFinalBlock%2A>."},{"content":"The Reset method is not called when, for example, the encrypted input data is garbage and cannot be decrypted.","pos":[140,250]},{"content":"In this case, an exception is thrown and Reset is not called.","pos":[251,312]},{"content":"You can choose to manually call the Reset method in this case.","pos":[313,375]}]}]},{"pos":[11265,11431],"content":"Computes the transformation for the specified region of the input byte array and copies the resulting transformation to the specified region of the output byte array.","needQuote":true,"needEscape":true,"nodes":[{"content":"Computes the transformation for the specified region of the input byte array and copies the resulting transformation to the specified region of the output byte array.","pos":[0,166]}]},{"pos":[11658,11696],"content":"The input to perform the operation on.","needQuote":true,"needEscape":true,"nodes":[{"content":"The input to perform the operation on.","pos":[0,38]}]},{"pos":[11763,11825],"content":"The offset into the input byte array to begin using data from.","needQuote":true,"needEscape":true,"nodes":[{"content":"The offset into the input byte array to begin using data from.","pos":[0,62]}]},{"pos":[11891,11950],"content":"The number of bytes in the input byte array to use as data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes in the input byte array to use as data.","pos":[0,59]}]},{"pos":[12019,12051],"content":"The output to write the data to.","needQuote":true,"needEscape":true,"nodes":[{"content":"The output to write the data to.","pos":[0,32]}]},{"pos":[12119,12184],"content":"The offset into the output byte array to begin writing data from.","needQuote":true,"needEscape":true,"nodes":[{"content":"The offset into the output byte array to begin writing data from.","pos":[0,65]}]},{"pos":[12241,12269],"content":"The number of bytes written.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes written.","pos":[0,28]}]},{"pos":[12469,12710],"content":"The <code>inputBuffer</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       The <code>outputBuffer</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">inputBuffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,103],"source":"The <code>inputBuffer</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">outputBuffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[110,225],"source":"       -or-       The <code>outputBuffer</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[12807,13259],"content":"The length of the input buffer is less than the sum of the input offset and the input count.       -or-       The value of the <code>inputCount</code> parameter is less than or equal to 0.       -or-       The value of the <code>inputCount</code> parameter is greater than the length of the <code>inputBuffer</code> parameter.       -or-       The length of the <code>inputCount</code> parameter is not evenly devisable by input block size.","needQuote":false,"needEscape":true,"nodes":[{"content":"The length of the input buffer is less than the sum of the input offset and the input count.","pos":[0,92]},{"content":"-or-       The value of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">inputCount</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is less than or equal to 0.","pos":[99,188],"source":"       -or-       The value of the <code>inputCount</code> parameter is less than or equal to 0."},{"content":"-or-       The value of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">inputCount</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is greater than the length of the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">inputBuffer</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter.","pos":[195,326],"source":"       -or-       The value of the <code>inputCount</code> parameter is greater than the length of the <code>inputBuffer</code> parameter."},{"content":"-or-       The length of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">inputCount</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not evenly devisable by input block size.","pos":[333,440],"source":"       -or-       The length of the <code>inputCount</code> parameter is not evenly devisable by input block size."}]},{"pos":[13375,13439],"content":"The value of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">inputOffset</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is negative.","needQuote":true,"needEscape":true,"source":"The value of the <code>inputOffset</code> parameter is negative."},{"pos":[14066,14147],"content":"Computes the transformation for the specified region of the specified byte array.","needQuote":true,"needEscape":true,"nodes":[{"content":"Computes the transformation for the specified region of the specified byte array.","pos":[0,81]}]},{"pos":[14343,14381],"content":"The input to perform the operation on.","needQuote":true,"needEscape":true,"nodes":[{"content":"The input to perform the operation on.","pos":[0,38]}]},{"pos":[14448,14504],"content":"The offset into the byte array to begin using data from.","needQuote":true,"needEscape":true,"nodes":[{"content":"The offset into the byte array to begin using data from.","pos":[0,56]}]},{"pos":[14570,14623],"content":"The number of bytes in the byte array to use as data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes in the byte array to use as data.","pos":[0,53]}]},{"pos":[14681,14709],"content":"The computed transformation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The computed transformation.","pos":[0,28]}]},{"pos":[14913,15016],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">inputBuffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>inputBuffer</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[15112,15315],"content":"The value of the <code>inputCount</code> parameter is less than 0.       -or-       The value of the <code>inputCount</code> parameter is grater than the length of <code>inputBuffer</code> parameter.","needQuote":false,"needEscape":true,"nodes":[{"content":"The value of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">inputCount</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is less than 0.","pos":[0,66],"source":"The value of the <code>inputCount</code> parameter is less than 0."},{"content":"-or-       The value of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">inputCount</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is grater than the length of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">inputBuffer</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter.","pos":[73,199],"source":"       -or-       The value of the <code>inputCount</code> parameter is grater than the length of <code>inputBuffer</code> parameter."}]},{"pos":[15431,15495],"content":"The value of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">inputOffset</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is negative.","needQuote":true,"needEscape":true,"source":"The value of the <code>inputOffset</code> parameter is negative."},{"pos":[15644,15740],"content":"The length of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">inputCount</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not evenly devisable by input block size.","needQuote":true,"needEscape":true,"source":"The length of the <code>inputCount</code> parameter is not evenly devisable by input block size."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.RijndaelManagedTransform\n  id: RijndaelManagedTransform\n  children:\n  - System.Security.Cryptography.RijndaelManagedTransform.BlockSizeValue\n  - System.Security.Cryptography.RijndaelManagedTransform.CanReuseTransform\n  - System.Security.Cryptography.RijndaelManagedTransform.CanTransformMultipleBlocks\n  - System.Security.Cryptography.RijndaelManagedTransform.Clear\n  - System.Security.Cryptography.RijndaelManagedTransform.Dispose\n  - System.Security.Cryptography.RijndaelManagedTransform.InputBlockSize\n  - System.Security.Cryptography.RijndaelManagedTransform.OutputBlockSize\n  - System.Security.Cryptography.RijndaelManagedTransform.Reset\n  - System.Security.Cryptography.RijndaelManagedTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  - System.Security.Cryptography.RijndaelManagedTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  langs:\n  - csharp\n  name: RijndaelManagedTransform\n  nameWithType: RijndaelManagedTransform\n  fullName: System.Security.Cryptography.RijndaelManagedTransform\n  type: Class\n  summary: Performs a cryptographic transformation of data using the Rijndael algorithm. This class cannot be inherited.\n  remarks: \"> [!NOTE]\\n>  Using this class is not recommended. A better practice is to use <xref:System.Security.Cryptography.RijndaelManaged> with a <xref:System.Security.Cryptography.CryptoStream> object. The <xref:System.Security.Cryptography.CryptoStream> object handles the padding issues that can occur when using RijndaelManagedTransform directly. For an example, see the <xref:System.Security.Cryptography.RijndaelManaged> class.  \\n  \\n Both the <xref:System.Security.Cryptography.RijndaelManaged.CreateEncryptor%2A> and <xref:System.Security.Cryptography.RijndaelManaged.CreateDecryptor%2A> methods return an instance of the RijndaelManagedTransform class that is initialized with the key information of the current <xref:System.Security.Cryptography.RijndaelManaged> object.  To encrypt or decrypt data using the Rijndael algorithm, pass the RijndaelManagedTransform object returned by these methods to a <xref:System.Security.Cryptography.CryptoStream> object.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class RijndaelManagedTransform : System.Security.Cryptography.ICryptoTransform\n  inheritance:\n  - System.Object\n  implements:\n  - System.Security.Cryptography.ICryptoTransform\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.RijndaelManagedTransform.BlockSizeValue\n  id: BlockSizeValue\n  parent: System.Security.Cryptography.RijndaelManagedTransform\n  langs:\n  - csharp\n  name: BlockSizeValue\n  nameWithType: RijndaelManagedTransform.BlockSizeValue\n  fullName: System.Security.Cryptography.RijndaelManagedTransform.BlockSizeValue\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Gets the block size.\n  syntax:\n    content: public int BlockSizeValue { get; }\n    return:\n      type: System.Int32\n      description: The size of the data blocks in bytes.\n  overload: System.Security.Cryptography.RijndaelManagedTransform.BlockSizeValue*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.RijndaelManagedTransform.CanReuseTransform\n  id: CanReuseTransform\n  parent: System.Security.Cryptography.RijndaelManagedTransform\n  langs:\n  - csharp\n  name: CanReuseTransform\n  nameWithType: RijndaelManagedTransform.CanReuseTransform\n  fullName: System.Security.Cryptography.RijndaelManagedTransform.CanReuseTransform\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Gets a value indicating whether the current transform can be reused.\n  syntax:\n    content: public bool CanReuseTransform { get; }\n    return:\n      type: System.Boolean\n      description: Always <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.\n  overload: System.Security.Cryptography.RijndaelManagedTransform.CanReuseTransform*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.RijndaelManagedTransform.CanTransformMultipleBlocks\n  id: CanTransformMultipleBlocks\n  parent: System.Security.Cryptography.RijndaelManagedTransform\n  langs:\n  - csharp\n  name: CanTransformMultipleBlocks\n  nameWithType: RijndaelManagedTransform.CanTransformMultipleBlocks\n  fullName: System.Security.Cryptography.RijndaelManagedTransform.CanTransformMultipleBlocks\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Gets a value indicating whether multiple blocks can be transformed.\n  syntax:\n    content: public bool CanTransformMultipleBlocks { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if multiple blocks can be transformed; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Cryptography.RijndaelManagedTransform.CanTransformMultipleBlocks*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.RijndaelManagedTransform.Clear\n  id: Clear\n  parent: System.Security.Cryptography.RijndaelManagedTransform\n  langs:\n  - csharp\n  name: Clear()\n  nameWithType: RijndaelManagedTransform.Clear()\n  fullName: System.Security.Cryptography.RijndaelManagedTransform.Clear()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Releases all resources used by the <xref href=\"System.Security.Cryptography.RijndaelManagedTransform\"></xref> class.\n  remarks: \"This method is a simple call to <xref:System.IDisposable.Dispose%2A?displayProperty=fullName> class.  \\n  \\n Calling `Dispose` allows the resources used by the <xref:System.Security.Cryptography.RijndaelManagedTransform> to be reallocated for other purposes. For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public void Clear ();\n    parameters: []\n  overload: System.Security.Cryptography.RijndaelManagedTransform.Clear*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.RijndaelManagedTransform.Dispose\n  id: Dispose\n  parent: System.Security.Cryptography.RijndaelManagedTransform\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: RijndaelManagedTransform.Dispose()\n  fullName: System.Security.Cryptography.RijndaelManagedTransform.Dispose()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Releases all resources used by the current instance of the <xref href=\"System.Security.Cryptography.RijndaelManagedTransform\"></xref> class.\n  remarks: \"Call `Dispose` when you are finished using the <xref:System.Security.Cryptography.RijndaelManagedTransform>. The `Dispose` method leaves the <xref:System.Security.Cryptography.RijndaelManagedTransform> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.Security.Cryptography.RijndaelManagedTransform> so the garbage collector can reclaim the memory that the <xref:System.Security.Cryptography.RijndaelManagedTransform> was occupying.  \\n  \\n For more information, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md) and [Implementing a Dispose Method](~/add/includes/ajax-current-ext-md.md).  \\n  \\n> [!NOTE]\\n>  Always call `Dispose` before you release your last reference to the <xref:System.Security.Cryptography.RijndaelManagedTransform>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Security.Cryptography.RijndaelManagedTransform> object's `Finalize` method.\"\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.Security.Cryptography.RijndaelManagedTransform.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.RijndaelManagedTransform.InputBlockSize\n  id: InputBlockSize\n  parent: System.Security.Cryptography.RijndaelManagedTransform\n  langs:\n  - csharp\n  name: InputBlockSize\n  nameWithType: RijndaelManagedTransform.InputBlockSize\n  fullName: System.Security.Cryptography.RijndaelManagedTransform.InputBlockSize\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Gets the input block size.\n  syntax:\n    content: public int InputBlockSize { get; }\n    return:\n      type: System.Int32\n      description: The size of the input data blocks in bytes.\n  overload: System.Security.Cryptography.RijndaelManagedTransform.InputBlockSize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.RijndaelManagedTransform.OutputBlockSize\n  id: OutputBlockSize\n  parent: System.Security.Cryptography.RijndaelManagedTransform\n  langs:\n  - csharp\n  name: OutputBlockSize\n  nameWithType: RijndaelManagedTransform.OutputBlockSize\n  fullName: System.Security.Cryptography.RijndaelManagedTransform.OutputBlockSize\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Gets the output block size.\n  syntax:\n    content: public int OutputBlockSize { get; }\n    return:\n      type: System.Int32\n      description: The size of the output data blocks in bytes.\n  overload: System.Security.Cryptography.RijndaelManagedTransform.OutputBlockSize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.RijndaelManagedTransform.Reset\n  id: Reset\n  parent: System.Security.Cryptography.RijndaelManagedTransform\n  langs:\n  - csharp\n  name: Reset()\n  nameWithType: RijndaelManagedTransform.Reset()\n  fullName: System.Security.Cryptography.RijndaelManagedTransform.Reset()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Resets the internal state of <xref href=\"System.Security.Cryptography.RijndaelManagedTransform\"></xref> so it can be used again to do a different encryption or decryption.\n  remarks: The Reset method is called automatically when you call <xref:System.Security.Cryptography.RijndaelManagedTransform.TransformFinalBlock%2A>. The Reset method is not called when, for example, the encrypted input data is garbage and cannot be decrypted. In this case, an exception is thrown and Reset is not called. You can choose to manually call the Reset method in this case.\n  syntax:\n    content: public void Reset ();\n    parameters: []\n  overload: System.Security.Cryptography.RijndaelManagedTransform.Reset*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.RijndaelManagedTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  id: TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Security.Cryptography.RijndaelManagedTransform\n  langs:\n  - csharp\n  name: TransformBlock(Byte[],Int32,Int32,Byte[],Int32)\n  nameWithType: RijndaelManagedTransform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)\n  fullName: System.Security.Cryptography.RijndaelManagedTransform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Computes the transformation for the specified region of the input byte array and copies the resulting transformation to the specified region of the output byte array.\n  syntax:\n    content: public int TransformBlock (byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);\n    parameters:\n    - id: inputBuffer\n      type: System.Byte[]\n      description: The input to perform the operation on.\n    - id: inputOffset\n      type: System.Int32\n      description: The offset into the input byte array to begin using data from.\n    - id: inputCount\n      type: System.Int32\n      description: The number of bytes in the input byte array to use as data.\n    - id: outputBuffer\n      type: System.Byte[]\n      description: The output to write the data to.\n    - id: outputOffset\n      type: System.Int32\n      description: The offset into the output byte array to begin writing data from.\n    return:\n      type: System.Int32\n      description: The number of bytes written.\n  overload: System.Security.Cryptography.RijndaelManagedTransform.TransformBlock*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>inputBuffer</code> parameter is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n The <code>outputBuffer</code> parameter is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The length of the input buffer is less than the sum of the input offset and the input count.  \\n  \\n -or-  \\n  \\n The value of the <code>inputCount</code> parameter is less than or equal to 0.  \\n  \\n -or-  \\n  \\n The value of the <code>inputCount</code> parameter is greater than the length of the <code>inputBuffer</code> parameter.  \\n  \\n -or-  \\n  \\n The length of the <code>inputCount</code> parameter is not evenly devisable by input block size.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The value of the <code>inputOffset</code> parameter is negative.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.RijndaelManagedTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  id: TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.RijndaelManagedTransform\n  langs:\n  - csharp\n  name: TransformFinalBlock(Byte[],Int32,Int32)\n  nameWithType: RijndaelManagedTransform.TransformFinalBlock(Byte[],Int32,Int32)\n  fullName: System.Security.Cryptography.RijndaelManagedTransform.TransformFinalBlock(Byte[],Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Computes the transformation for the specified region of the specified byte array.\n  syntax:\n    content: public byte[] TransformFinalBlock (byte[] inputBuffer, int inputOffset, int inputCount);\n    parameters:\n    - id: inputBuffer\n      type: System.Byte[]\n      description: The input to perform the operation on.\n    - id: inputOffset\n      type: System.Int32\n      description: The offset into the byte array to begin using data from.\n    - id: inputCount\n      type: System.Int32\n      description: The number of bytes in the byte array to use as data.\n    return:\n      type: System.Byte[]\n      description: The computed transformation.\n  overload: System.Security.Cryptography.RijndaelManagedTransform.TransformFinalBlock*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>inputBuffer</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The value of the <code>inputCount</code> parameter is less than 0.  \\n  \\n -or-  \\n  \\n The value of the <code>inputCount</code> parameter is grater than the length of <code>inputBuffer</code> parameter.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The value of the <code>inputOffset</code> parameter is negative.\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: The length of the <code>inputCount</code> parameter is not evenly devisable by input block size.\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.Security.Cryptography.CryptographicException\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CryptographicException\n  nameWithType: CryptographicException\n  fullName: System.Security.Cryptography.CryptographicException\n- uid: System.Security.Cryptography.RijndaelManagedTransform.BlockSizeValue\n  parent: System.Security.Cryptography.RijndaelManagedTransform\n  isExternal: false\n  name: BlockSizeValue\n  nameWithType: RijndaelManagedTransform.BlockSizeValue\n  fullName: System.Security.Cryptography.RijndaelManagedTransform.BlockSizeValue\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.RijndaelManagedTransform.CanReuseTransform\n  parent: System.Security.Cryptography.RijndaelManagedTransform\n  isExternal: false\n  name: CanReuseTransform\n  nameWithType: RijndaelManagedTransform.CanReuseTransform\n  fullName: System.Security.Cryptography.RijndaelManagedTransform.CanReuseTransform\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.RijndaelManagedTransform.CanTransformMultipleBlocks\n  parent: System.Security.Cryptography.RijndaelManagedTransform\n  isExternal: false\n  name: CanTransformMultipleBlocks\n  nameWithType: RijndaelManagedTransform.CanTransformMultipleBlocks\n  fullName: System.Security.Cryptography.RijndaelManagedTransform.CanTransformMultipleBlocks\n- uid: System.Security.Cryptography.RijndaelManagedTransform.Clear\n  parent: System.Security.Cryptography.RijndaelManagedTransform\n  isExternal: false\n  name: Clear()\n  nameWithType: RijndaelManagedTransform.Clear()\n  fullName: System.Security.Cryptography.RijndaelManagedTransform.Clear()\n- uid: System.Security.Cryptography.RijndaelManagedTransform.Dispose\n  parent: System.Security.Cryptography.RijndaelManagedTransform\n  isExternal: false\n  name: Dispose()\n  nameWithType: RijndaelManagedTransform.Dispose()\n  fullName: System.Security.Cryptography.RijndaelManagedTransform.Dispose()\n- uid: System.Security.Cryptography.RijndaelManagedTransform.InputBlockSize\n  parent: System.Security.Cryptography.RijndaelManagedTransform\n  isExternal: false\n  name: InputBlockSize\n  nameWithType: RijndaelManagedTransform.InputBlockSize\n  fullName: System.Security.Cryptography.RijndaelManagedTransform.InputBlockSize\n- uid: System.Security.Cryptography.RijndaelManagedTransform.OutputBlockSize\n  parent: System.Security.Cryptography.RijndaelManagedTransform\n  isExternal: false\n  name: OutputBlockSize\n  nameWithType: RijndaelManagedTransform.OutputBlockSize\n  fullName: System.Security.Cryptography.RijndaelManagedTransform.OutputBlockSize\n- uid: System.Security.Cryptography.RijndaelManagedTransform.Reset\n  parent: System.Security.Cryptography.RijndaelManagedTransform\n  isExternal: false\n  name: Reset()\n  nameWithType: RijndaelManagedTransform.Reset()\n  fullName: System.Security.Cryptography.RijndaelManagedTransform.Reset()\n- uid: System.Security.Cryptography.RijndaelManagedTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Security.Cryptography.RijndaelManagedTransform\n  isExternal: false\n  name: TransformBlock(Byte[],Int32,Int32,Byte[],Int32)\n  nameWithType: RijndaelManagedTransform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)\n  fullName: System.Security.Cryptography.RijndaelManagedTransform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)\n- uid: System.Byte[]\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: Byte[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Security.Cryptography.RijndaelManagedTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.RijndaelManagedTransform\n  isExternal: false\n  name: TransformFinalBlock(Byte[],Int32,Int32)\n  nameWithType: RijndaelManagedTransform.TransformFinalBlock(Byte[],Int32,Int32)\n  fullName: System.Security.Cryptography.RijndaelManagedTransform.TransformFinalBlock(Byte[],Int32,Int32)\n- uid: System.Security.Cryptography.RijndaelManagedTransform.BlockSizeValue*\n  parent: System.Security.Cryptography.RijndaelManagedTransform\n  isExternal: false\n  name: BlockSizeValue\n  nameWithType: RijndaelManagedTransform.BlockSizeValue\n- uid: System.Security.Cryptography.RijndaelManagedTransform.CanReuseTransform*\n  parent: System.Security.Cryptography.RijndaelManagedTransform\n  isExternal: false\n  name: CanReuseTransform\n  nameWithType: RijndaelManagedTransform.CanReuseTransform\n- uid: System.Security.Cryptography.RijndaelManagedTransform.CanTransformMultipleBlocks*\n  parent: System.Security.Cryptography.RijndaelManagedTransform\n  isExternal: false\n  name: CanTransformMultipleBlocks\n  nameWithType: RijndaelManagedTransform.CanTransformMultipleBlocks\n- uid: System.Security.Cryptography.RijndaelManagedTransform.Clear*\n  parent: System.Security.Cryptography.RijndaelManagedTransform\n  isExternal: false\n  name: Clear\n  nameWithType: RijndaelManagedTransform.Clear\n- uid: System.Security.Cryptography.RijndaelManagedTransform.Dispose*\n  parent: System.Security.Cryptography.RijndaelManagedTransform\n  isExternal: false\n  name: Dispose\n  nameWithType: RijndaelManagedTransform.Dispose\n- uid: System.Security.Cryptography.RijndaelManagedTransform.InputBlockSize*\n  parent: System.Security.Cryptography.RijndaelManagedTransform\n  isExternal: false\n  name: InputBlockSize\n  nameWithType: RijndaelManagedTransform.InputBlockSize\n- uid: System.Security.Cryptography.RijndaelManagedTransform.OutputBlockSize*\n  parent: System.Security.Cryptography.RijndaelManagedTransform\n  isExternal: false\n  name: OutputBlockSize\n  nameWithType: RijndaelManagedTransform.OutputBlockSize\n- uid: System.Security.Cryptography.RijndaelManagedTransform.Reset*\n  parent: System.Security.Cryptography.RijndaelManagedTransform\n  isExternal: false\n  name: Reset\n  nameWithType: RijndaelManagedTransform.Reset\n- uid: System.Security.Cryptography.RijndaelManagedTransform.TransformBlock*\n  parent: System.Security.Cryptography.RijndaelManagedTransform\n  isExternal: false\n  name: TransformBlock\n  nameWithType: RijndaelManagedTransform.TransformBlock\n- uid: System.Security.Cryptography.RijndaelManagedTransform.TransformFinalBlock*\n  parent: System.Security.Cryptography.RijndaelManagedTransform\n  isExternal: false\n  name: TransformFinalBlock\n  nameWithType: RijndaelManagedTransform.TransformFinalBlock\n"}