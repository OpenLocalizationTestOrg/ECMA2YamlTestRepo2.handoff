{"nodes":[{"pos":[560,629],"content":"Allows users to control class loading and mandate what class to load.","needQuote":true,"needEscape":true,"nodes":[{"content":"Allows users to control class loading and mandate what class to load.","pos":[0,69]}]},{"pos":[642,2213],"content":"During serialization, a formatter transmits the information required to create an instance of an object of the correct type and version. This information generally includes the full type name and assembly name of the object. The assembly name includes the name, version, and strong name (see [Strong-Named Assemblies](~/add/includes/ajax-current-ext-md.md)) hash of the assembly. By default, deserialization uses this information to create an instance of an identical object (with the exception of any assembly loading restricted by the security policy). Some users need to control which class to load, either because the class has moved between assemblies or a different version of the class is required on the server and client.       SerializationBinder can also be used for security. There might be some security exploits when you are trying to deserialize some data from an untrusted source. The binder gives you an opportunity to inspect what types are being loaded in your application domain. You can then either maintain list of denied types or a list of allowed types and restrict which types are being loaded and instantiated. In addition you should be mindful of what information is being put out on the wire, you may want to secure (use transport or message security) when sending type names or other data on the wire.      > [!WARNING] >  Only use SerializationBinder if you are completely sure of what information is being serialized. Malicious types can cause unexpected behavior.       This is an abstract base class. All binders extend this class.","needQuote":false,"needEscape":true,"nodes":[{"content":"During serialization, a formatter transmits the information required to create an instance of an object of the correct type and version.","pos":[0,136]},{"content":"This information generally includes the full type name and assembly name of the object.","pos":[137,224]},{"content":"The assembly name includes the name, version, and strong name (see <bpt id=\"p1\">[</bpt>Strong-Named Assemblies<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>) hash of the assembly.","pos":[225,379],"source":" The assembly name includes the name, version, and strong name (see [Strong-Named Assemblies](~/add/includes/ajax-current-ext-md.md)) hash of the assembly."},{"content":"By default, deserialization uses this information to create an instance of an identical object (with the exception of any assembly loading restricted by the security policy).","pos":[380,554]},{"content":"Some users need to control which class to load, either because the class has moved between assemblies or a different version of the class is required on the server and client.","pos":[555,730]},{"content":"SerializationBinder can also be used for security.","pos":[737,787]},{"content":"There might be some security exploits when you are trying to deserialize some data from an untrusted source.","pos":[788,896]},{"content":"The binder gives you an opportunity to inspect what types are being loaded in your application domain.","pos":[897,999]},{"content":"You can then either maintain list of denied types or a list of allowed types and restrict which types are being loaded and instantiated.","pos":[1000,1136]},{"content":"In addition you should be mindful of what information is being put out on the wire, you may want to secure (use transport or message security) when sending type names or other data on the wire.","pos":[1137,1330]},{"content":"&gt; <ph id=\"ph1\">[!WARNING]</ph> &gt;  Only use SerializationBinder if you are completely sure of what information is being serialized.","pos":[1336,1448],"source":"      > [!WARNING] >  Only use SerializationBinder if you are completely sure of what information is being serialized."},{"content":"Malicious types can cause unexpected behavior.","pos":[1449,1495]},{"content":"This is an abstract base class.","pos":[1502,1533]},{"content":"All binders extend this class.","pos":[1534,1564]}]},{"pos":[3207,3317],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Serialization.SerializationBinder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Runtime.Serialization.SerializationBinder\"></xref> class."},{"pos":[4044,4134],"content":"When overridden in a derived class, controls the binding of a serialized object to a type.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, controls the binding of a serialized object to a type.","pos":[0,90]}]},{"pos":[4342,4405],"content":"The type of the object the formatter creates a new instance of.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type of the object the formatter creates a new instance of.","pos":[0,63]}]},{"pos":[4474,4552],"content":"Specifies the <xref:System.Reflection.Assembly> name of the serialized object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies the &lt;xref:System.Reflection.Assembly&gt; name of the serialized object.","pos":[0,78],"source":"Specifies the <xref:System.Reflection.Assembly> name of the serialized object."}]},{"pos":[4617,4680],"content":"Specifies the <xref:System.Type> name of the serialized object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies the &lt;xref:System.Type&gt; name of the serialized object.","pos":[0,63],"source":"Specifies the <xref:System.Type> name of the serialized object."}]},{"pos":[5293,5383],"content":"When overridden in a derived class, controls the binding of a serialized object to a type.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, controls the binding of a serialized object to a type.","pos":[0,90]}]},{"pos":[5622,5700],"content":"Specifies the <xref:System.Reflection.Assembly> name of the serialized object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies the &lt;xref:System.Reflection.Assembly&gt; name of the serialized object.","pos":[0,78],"source":"Specifies the <xref:System.Reflection.Assembly> name of the serialized object."}]},{"pos":[5765,5828],"content":"Specifies the <xref:System.Type> name of the serialized object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies the &lt;xref:System.Type&gt; name of the serialized object.","pos":[0,63],"source":"Specifies the <xref:System.Type> name of the serialized object."}]},{"pos":[5884,5947],"content":"The type of the object the formatter creates a new instance of.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type of the object the formatter creates a new instance of.","pos":[0,63]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Runtime.Serialization.SerializationBinder\n  id: SerializationBinder\n  children:\n  - System.Runtime.Serialization.SerializationBinder.#ctor\n  - System.Runtime.Serialization.SerializationBinder.BindToName(System.Type,System.String@,System.String@)\n  - System.Runtime.Serialization.SerializationBinder.BindToType(System.String,System.String)\n  langs:\n  - csharp\n  name: SerializationBinder\n  nameWithType: SerializationBinder\n  fullName: System.Runtime.Serialization.SerializationBinder\n  type: Class\n  summary: Allows users to control class loading and mandate what class to load.\n  remarks: \"During serialization, a formatter transmits the information required to create an instance of an object of the correct type and version. This information generally includes the full type name and assembly name of the object. The assembly name includes the name, version, and strong name (see [Strong-Named Assemblies](~/add/includes/ajax-current-ext-md.md)) hash of the assembly. By default, deserialization uses this information to create an instance of an identical object (with the exception of any assembly loading restricted by the security policy). Some users need to control which class to load, either because the class has moved between assemblies or a different version of the class is required on the server and client.  \\n  \\n SerializationBinder can also be used for security. There might be some security exploits when you are trying to deserialize some data from an untrusted source. The binder gives you an opportunity to inspect what types are being loaded in your application domain. You can then either maintain list of denied types or a list of allowed types and restrict which types are being loaded and instantiated. In addition you should be mindful of what information is being put out on the wire, you may want to secure (use transport or message security) when sending type names or other data on the wire.  \\n  \\n> [!WARNING]\\n>  Only use SerializationBinder if you are completely sure of what information is being serialized. Malicious types can cause unexpected behavior.  \\n  \\n This is an abstract base class. All binders extend this class.\"\n  example:\n  - >-\n    [!code-vb[SerializationBinder Example#1](~/add/codesnippet/visualbasic/t-system.runtime.seriali_11_1.vb)]\n     [!code-cpp[SerializationBinder Example#1](~/add/codesnippet/cpp/t-system.runtime.seriali_11_1.cpp)]\n     [!code-cs[SerializationBinder Example#1](~/add/codesnippet/csharp/t-system.runtime.seriali_11_1.cs)]\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public abstract class SerializationBinder\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Runtime.Serialization.SerializationBinder.#ctor\n  id: '#ctor'\n  parent: System.Runtime.Serialization.SerializationBinder\n  langs:\n  - csharp\n  name: SerializationBinder()\n  nameWithType: SerializationBinder.SerializationBinder()\n  fullName: System.Runtime.Serialization.SerializationBinder.SerializationBinder()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Serialization\n  summary: Initializes a new instance of the <xref href=\"System.Runtime.Serialization.SerializationBinder\"></xref> class.\n  syntax:\n    content: protected SerializationBinder ();\n    parameters: []\n  overload: System.Runtime.Serialization.SerializationBinder.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.Serialization.SerializationBinder.BindToName(System.Type,System.String@,System.String@)\n  id: BindToName(System.Type,System.String@,System.String@)\n  parent: System.Runtime.Serialization.SerializationBinder\n  langs:\n  - csharp\n  name: BindToName(Type,String,String)\n  nameWithType: SerializationBinder.BindToName(Type,String,String)\n  fullName: System.Runtime.Serialization.SerializationBinder.BindToName(Type,String,String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Serialization\n  summary: When overridden in a derived class, controls the binding of a serialized object to a type.\n  syntax:\n    content: public virtual void BindToName (Type serializedType, out string assemblyName, out string typeName);\n    parameters:\n    - id: serializedType\n      type: System.Type\n      description: The type of the object the formatter creates a new instance of.\n    - id: assemblyName\n      type: System.String\n      description: Specifies the <xref:System.Reflection.Assembly> name of the serialized object.\n    - id: typeName\n      type: System.String\n      description: Specifies the <xref:System.Type> name of the serialized object.\n  overload: System.Runtime.Serialization.SerializationBinder.BindToName*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.Serialization.SerializationBinder.BindToType(System.String,System.String)\n  id: BindToType(System.String,System.String)\n  parent: System.Runtime.Serialization.SerializationBinder\n  langs:\n  - csharp\n  name: BindToType(String,String)\n  nameWithType: SerializationBinder.BindToType(String,String)\n  fullName: System.Runtime.Serialization.SerializationBinder.BindToType(String,String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Serialization\n  summary: When overridden in a derived class, controls the binding of a serialized object to a type.\n  remarks: ''\n  example:\n  - SerializationBinder Example#1\n  syntax:\n    content: public abstract Type BindToType (string assemblyName, string typeName);\n    parameters:\n    - id: assemblyName\n      type: System.String\n      description: Specifies the <xref:System.Reflection.Assembly> name of the serialized object.\n    - id: typeName\n      type: System.String\n      description: Specifies the <xref:System.Type> name of the serialized object.\n    return:\n      type: System.Type\n      description: The type of the object the formatter creates a new instance of.\n  overload: System.Runtime.Serialization.SerializationBinder.BindToType*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Runtime.Serialization.SerializationBinder.#ctor\n  parent: System.Runtime.Serialization.SerializationBinder\n  isExternal: false\n  name: SerializationBinder()\n  nameWithType: SerializationBinder.SerializationBinder()\n  fullName: System.Runtime.Serialization.SerializationBinder.SerializationBinder()\n- uid: System.Runtime.Serialization.SerializationBinder.BindToName(System.Type,System.String@,System.String@)\n  parent: System.Runtime.Serialization.SerializationBinder\n  isExternal: false\n  name: BindToName(Type,String,String)\n  nameWithType: SerializationBinder.BindToName(Type,String,String)\n  fullName: System.Runtime.Serialization.SerializationBinder.BindToName(Type,String,String)\n- uid: System.Type\n  parent: System\n  isExternal: true\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Runtime.Serialization.SerializationBinder.BindToType(System.String,System.String)\n  parent: System.Runtime.Serialization.SerializationBinder\n  isExternal: false\n  name: BindToType(String,String)\n  nameWithType: SerializationBinder.BindToType(String,String)\n  fullName: System.Runtime.Serialization.SerializationBinder.BindToType(String,String)\n- uid: System.Runtime.Serialization.SerializationBinder.#ctor*\n  parent: System.Runtime.Serialization.SerializationBinder\n  isExternal: false\n  name: SerializationBinder\n  nameWithType: SerializationBinder.SerializationBinder\n- uid: System.Runtime.Serialization.SerializationBinder.BindToName*\n  parent: System.Runtime.Serialization.SerializationBinder\n  isExternal: false\n  name: BindToName\n  nameWithType: SerializationBinder.BindToName\n- uid: System.Runtime.Serialization.SerializationBinder.BindToType*\n  parent: System.Runtime.Serialization.SerializationBinder\n  isExternal: false\n  name: BindToType\n  nameWithType: SerializationBinder.BindToType\n"}