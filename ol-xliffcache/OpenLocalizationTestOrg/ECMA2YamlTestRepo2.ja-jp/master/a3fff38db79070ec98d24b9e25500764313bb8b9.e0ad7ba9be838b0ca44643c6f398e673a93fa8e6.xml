{"nodes":[{"pos":[1451,1592],"content":"Defines the interface that a channel must implement to be on the receiving side of a request-reply communication between messaging endpoints.","needQuote":true,"needEscape":true,"nodes":[{"content":"Defines the interface that a channel must implement to be on the receiving side of a request-reply communication between messaging endpoints.","pos":[0,141]}]},{"pos":[1605,2472],"content":"The IReplyChannel interface includes synchronous and asynchronous variants of a <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> method return an <xref:System.ServiceModel.Channels.RequestContext> that can be used to construct replies to received requests.       The contract includes synchronous and asynchronous variants of receive, try-to-receive and wait-for-a-message functionality.       An IReplyChannel is not necessarily bound to a single sender. Other channels and channel interfaces provide correlation between the sender and the reply channel, but the base contract makes no such restriction.       The pull model is used with an IReplyChannel to receive messages. This model consists of calling <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> (or one of its variants) and then waiting for a message to arrive.","needQuote":false,"needEscape":true,"nodes":[{"content":"The IReplyChannel interface includes synchronous and asynchronous variants of a <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> method return an <xref:System.ServiceModel.Channels.RequestContext> that can be used to construct replies to received requests.       The contract includes synchronous and asynchronous variants of receive, try-to-receive and wait-for-a-message functionality.       An IReplyChannel is not necessarily bound to a single sender. Other channels and channel interfaces provide correlation between the sender and the reply channel, but the base contract makes no such restriction.       The pull model is used with an IReplyChannel to receive messages. This model consists of calling <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> (or one of its variants) and then waiting for a message to arrive.","pos":[0,861],"nodes":[{"content":"The IReplyChannel interface includes synchronous and asynchronous variants of a &lt;xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A&gt; method return an &lt;xref:System.ServiceModel.Channels.RequestContext&gt; that can be used to construct replies to received requests.","pos":[0,275],"source":"The IReplyChannel interface includes synchronous and asynchronous variants of a <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> method return an <xref:System.ServiceModel.Channels.RequestContext> that can be used to construct replies to received requests."},{"content":"The contract includes synchronous and asynchronous variants of receive, try-to-receive and wait-for-a-message functionality.","pos":[282,406]},{"content":"An IReplyChannel is not necessarily bound to a single sender.","pos":[413,474]},{"content":"Other channels and channel interfaces provide correlation between the sender and the reply channel, but the base contract makes no such restriction.","pos":[475,623]},{"content":"The pull model is used with an IReplyChannel to receive messages.","pos":[630,695]},{"content":"This model consists of calling &lt;xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A&gt; (or one of its variants) and then waiting for a message to arrive.","pos":[696,861],"source":" This model consists of calling <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> (or one of its variants) and then waiting for a message to arrive."}]}]},{"pos":[3215,3303],"content":"Begins an asynchronous operation to receive an available request with a default timeout.","needQuote":true,"needEscape":true,"nodes":[{"content":"Begins an asynchronous operation to receive an available request with a default timeout.","pos":[0,88]}]},{"pos":[3316,4180],"content":"The BeginReceiveRequest method implements the standard pattern for invoking <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest> asynchronously. The default timeout is 1 minute. If a receive timeout is set on the binding used to configure the connection, then that value is used. Use <xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> if you want to specify an explicit timeout with the call that overrides these other values.       If the request message received is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown. The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property. The default value is 65536 bytes.","needQuote":false,"needEscape":true,"nodes":[{"content":"The BeginReceiveRequest method implements the standard pattern for invoking <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest> asynchronously. The default timeout is 1 minute. If a receive timeout is set on the binding used to configure the connection, then that value is used. Use <xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> if you want to specify an explicit timeout with the call that overrides these other values.       If the request message received is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown. The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property. The default value is 65536 bytes.","pos":[0,862],"nodes":[{"content":"The BeginReceiveRequest method implements the standard pattern for invoking &lt;xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest&gt; asynchronously.","pos":[0,156],"source":"The BeginReceiveRequest method implements the standard pattern for invoking <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest> asynchronously."},{"content":"The default timeout is 1 minute.","pos":[157,189]},{"content":"If a receive timeout is set on the binding used to configure the connection, then that value is used.","pos":[190,291]},{"content":"Use &lt;xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt; if you want to specify an explicit timeout with the call that overrides these other values.","pos":[292,517],"source":" Use <xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> if you want to specify an explicit timeout with the call that overrides these other values."},{"content":"If the request message received is larger that the maximum message size allowed by the binding being used, a &lt;xref:System.ServiceModel.QuotaExceededException&gt; is thrown.","pos":[524,693],"source":"       If the request message received is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown."},{"content":"The maximum message size is set by the &lt;xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A&gt; property.","pos":[694,828],"source":" The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property."},{"content":"The default value is 65536 bytes.","pos":[829,862]}]}]},{"pos":[4552,4687],"content":"The <xref:System.AsyncCallback> delegate that receives the notification of the asynchronous receive that a request operation completes.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.AsyncCallback&gt; delegate that receives the notification of the asynchronous receive that a request operation completes.","pos":[0,135],"source":"The <xref:System.AsyncCallback> delegate that receives the notification of the asynchronous receive that a request operation completes."}]},{"pos":[4749,4886],"content":"An object, specified by the application, that contains state information associated with the asynchronous receive of a request operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object, specified by the application, that contains state information associated with the asynchronous receive of a request operation.","pos":[0,137]}]},{"pos":[4950,5039],"content":"The <xref:System.IAsyncResult> that references the asynchronous reception of the request.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.IAsyncResult&gt; that references the asynchronous reception of the request.","pos":[0,89],"source":"The <xref:System.IAsyncResult> that references the asynchronous reception of the request."}]},{"pos":[5781,5871],"content":"Begins an asynchronous operation to receive an available request with a specified timeout.","needQuote":true,"needEscape":true,"nodes":[{"content":"Begins an asynchronous operation to receive an available request with a specified timeout.","pos":[0,90]}]},{"pos":[5884,6527],"content":"The BeginReceiveRequest method implements the standard pattern for invoking <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%28System.TimeSpan%29>asynchronously. The timeout set on this method overrides a receive timeout set on the binding that is used to configure the connection.       If the request message received is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown. The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property. The default value is 65536 bytes.","needQuote":false,"needEscape":true,"nodes":[{"content":"The BeginReceiveRequest method implements the standard pattern for invoking <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%28System.TimeSpan%29>asynchronously. The timeout set on this method overrides a receive timeout set on the binding that is used to configure the connection.       If the request message received is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown. The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property. The default value is 65536 bytes.","pos":[0,641],"nodes":[{"content":"The BeginReceiveRequest method implements the standard pattern for invoking &lt;xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%28System.TimeSpan%29&gt;asynchronously.","pos":[0,176],"source":"The BeginReceiveRequest method implements the standard pattern for invoking <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%28System.TimeSpan%29>asynchronously."},{"content":"The timeout set on this method overrides a receive timeout set on the binding that is used to configure the connection.","pos":[177,296]},{"content":"If the request message received is larger that the maximum message size allowed by the binding being used, a &lt;xref:System.ServiceModel.QuotaExceededException&gt; is thrown.","pos":[303,472],"source":"       If the request message received is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown."},{"content":"The maximum message size is set by the &lt;xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A&gt; property.","pos":[473,607],"source":" The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property."},{"content":"The default value is 65536 bytes.","pos":[608,641]}]}]},{"pos":[6911,7024],"content":"The <xref:System.TimeSpan> that specifies the interval of time to wait for the reception of an available request.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.TimeSpan&gt; that specifies the interval of time to wait for the reception of an available request.","pos":[0,113],"source":"The <xref:System.TimeSpan> that specifies the interval of time to wait for the reception of an available request."}]},{"pos":[7096,7231],"content":"The <xref:System.AsyncCallback> delegate that receives the notification of the asynchronous receive that a request operation completes.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.AsyncCallback&gt; delegate that receives the notification of the asynchronous receive that a request operation completes.","pos":[0,135],"source":"The <xref:System.AsyncCallback> delegate that receives the notification of the asynchronous receive that a request operation completes."}]},{"pos":[7293,7430],"content":"An object, specified by the application, that contains state information associated with the asynchronous receive of a request operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object, specified by the application, that contains state information associated with the asynchronous receive of a request operation.","pos":[0,137]}]},{"pos":[7494,7583],"content":"The <xref:System.IAsyncResult> that references the asynchronous reception of the request.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.IAsyncResult&gt; that references the asynchronous reception of the request.","pos":[0,89],"source":"The <xref:System.IAsyncResult> that references the asynchronous reception of the request."}]},{"pos":[8340,8468],"content":"Begins an asynchronous operation to receive a request message that has a specified time out and state object associated with it.","needQuote":true,"needEscape":true,"nodes":[{"content":"Begins an asynchronous operation to receive a request message that has a specified time out and state object associated with it.","pos":[0,128]}]},{"pos":[8481,9145],"content":"Use the asynchronous BeginTryReceiveRequest method when you need the application processing to continue without waiting. Use one of the synchronous <xref:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest%28System.TimeSpan%2CSystem.ServiceModel.Channels.RequestContext%40%29> methods when it is acceptable for the current thread to be blocked while it replies to the request message or until the timeout interval is exceeded.       This method receives notification, through a callback, of the identity of the event handler for the operation. The operation is not complete until either a message becomes available in the channel or the time out occurs.","needQuote":false,"needEscape":true,"nodes":[{"content":"Use the asynchronous BeginTryReceiveRequest method when you need the application processing to continue without waiting. Use one of the synchronous <xref:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest%28System.TimeSpan%2CSystem.ServiceModel.Channels.RequestContext%40%29> methods when it is acceptable for the current thread to be blocked while it replies to the request message or until the timeout interval is exceeded.       This method receives notification, through a callback, of the identity of the event handler for the operation. The operation is not complete until either a message becomes available in the channel or the time out occurs.","pos":[0,662],"nodes":[{"content":"Use the asynchronous BeginTryReceiveRequest method when you need the application processing to continue without waiting.","pos":[0,120]},{"content":"Use one of the synchronous &lt;xref:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest%28System.TimeSpan%2CSystem.ServiceModel.Channels.RequestContext%40%29&gt; methods when it is acceptable for the current thread to be blocked while it replies to the request message or until the timeout interval is exceeded.","pos":[121,435],"source":" Use one of the synchronous <xref:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest%28System.TimeSpan%2CSystem.ServiceModel.Channels.RequestContext%40%29> methods when it is acceptable for the current thread to be blocked while it replies to the request message or until the timeout interval is exceeded."},{"content":"This method receives notification, through a callback, of the identity of the event handler for the operation.","pos":[442,552]},{"content":"The operation is not complete until either a message becomes available in the channel or the time out occurs.","pos":[553,662]}]}]},{"pos":[9532,9724],"content":"The &lt;xref:System.TimeSpan&gt; that specifies how long the receive request operation has to complete before timing out and returning <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <xref:System.TimeSpan> that specifies how long the receive request operation has to complete before timing out and returning <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[9796,9931],"content":"The <xref:System.AsyncCallback> delegate that receives the notification of the asynchronous receive that a request operation completes.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.AsyncCallback&gt; delegate that receives the notification of the asynchronous receive that a request operation completes.","pos":[0,135],"source":"The <xref:System.AsyncCallback> delegate that receives the notification of the asynchronous receive that a request operation completes."}]},{"pos":[9993,10130],"content":"An object, specified by the application, that contains state information associated with the asynchronous receive of a request operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object, specified by the application, that contains state information associated with the asynchronous receive of a request operation.","pos":[0,137]}]},{"pos":[10194,10284],"content":"The <xref:System.IAsyncResult> that references the asynchronous receive request operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.IAsyncResult&gt; that references the asynchronous receive request operation.","pos":[0,90],"source":"The <xref:System.IAsyncResult> that references the asynchronous receive request operation."}]},{"pos":[11029,11136],"content":"Begins an asynchronous request operation that has a specified time out and state object associated with it.","needQuote":true,"needEscape":true,"nodes":[{"content":"Begins an asynchronous request operation that has a specified time out and state object associated with it.","pos":[0,107]}]},{"pos":[11149,11671],"content":"Use the synchronous <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29> method when it is acceptable for the current thread to be blocked while it waits for a request message to arrive in the queue. The thread is blocked up to the specified `timeout`.       This method receives notification, through a callback, of the identity of the event handler for the operation. The operation is not complete until either a request message becomes available in the channel or the time out occurs.","needQuote":false,"needEscape":true,"nodes":[{"content":"Use the synchronous &lt;xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29&gt; method when it is acceptable for the current thread to be blocked while it waits for a request message to arrive in the queue.","pos":[0,232],"source":"Use the synchronous <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29> method when it is acceptable for the current thread to be blocked while it waits for a request message to arrive in the queue."},{"content":"The thread is blocked up to the specified <ph id=\"ph1\">`timeout`</ph>.","pos":[233,285],"source":" The thread is blocked up to the specified `timeout`."},{"content":"This method receives notification, through a callback, of the identity of the event handler for the operation.","pos":[292,402]},{"content":"The operation is not complete until either a request message becomes available in the channel or the time out occurs.","pos":[403,520]}]},{"pos":[12056,12169],"content":"The <xref:System.TimeSpan> that specifies the interval of time to wait for the reception of an available request.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.TimeSpan&gt; that specifies the interval of time to wait for the reception of an available request.","pos":[0,113],"source":"The <xref:System.TimeSpan> that specifies the interval of time to wait for the reception of an available request."}]},{"pos":[12241,12376],"content":"The <xref:System.AsyncCallback> delegate that receives the notification of the asynchronous receive that a request operation completes.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.AsyncCallback&gt; delegate that receives the notification of the asynchronous receive that a request operation completes.","pos":[0,135],"source":"The <xref:System.AsyncCallback> delegate that receives the notification of the asynchronous receive that a request operation completes."}]},{"pos":[12438,12575],"content":"An object, specified by the application, that contains state information associated with the asynchronous receive of a request operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object, specified by the application, that contains state information associated with the asynchronous receive of a request operation.","pos":[0,137]}]},{"pos":[12639,12753],"content":"The <xref:System.IAsyncResult> that references the asynchronous operation to wait for a request message to arrive.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.IAsyncResult&gt; that references the asynchronous operation to wait for a request message to arrive.","pos":[0,114],"source":"The <xref:System.IAsyncResult> that references the asynchronous operation to wait for a request message to arrive."}]},{"pos":[13372,13440],"content":"Completes an asynchronous operation to receive an available request.","needQuote":true,"needEscape":true,"nodes":[{"content":"Completes an asynchronous operation to receive an available request.","pos":[0,68]}]},{"pos":[13452,13790],"content":"If the request message received is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown. The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property. The default value is 65536 bytes.","needQuote":true,"needEscape":true,"nodes":[{"content":"If the request message received is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown. The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property. The default value is 65536 bytes.","pos":[0,338],"nodes":[{"content":"If the request message received is larger that the maximum message size allowed by the binding being used, a &lt;xref:System.ServiceModel.QuotaExceededException&gt; is thrown.","pos":[0,169],"source":"If the request message received is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown."},{"content":"The maximum message size is set by the &lt;xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A&gt; property.","pos":[170,304],"source":" The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property."},{"content":"The default value is 65536 bytes.","pos":[305,338]}]}]},{"pos":[14170,14298],"content":"The <xref:System.IAsyncResult> returned by a call to the <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive*> method.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.IAsyncResult&gt; returned by a call to the &lt;xref:System.ServiceModel.Channels.IInputChannel.BeginReceive*&gt; method.","pos":[0,128],"source":"The <xref:System.IAsyncResult> returned by a call to the <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive*> method."}]},{"pos":[14386,14482],"content":"The <xref:System.ServiceModel.Channels.RequestContext> used to construct a reply to the request.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.ServiceModel.Channels.RequestContext&gt; used to construct a reply to the request.","pos":[0,96],"source":"The <xref:System.ServiceModel.Channels.RequestContext> used to construct a reply to the request."}]},{"pos":[15249,15325],"content":"Completes the specified asynchronous operation to receive a request message.","needQuote":true,"needEscape":true,"nodes":[{"content":"Completes the specified asynchronous operation to receive a request message.","pos":[0,76]}]},{"pos":[15740,15943],"content":"The <xref:System.IAsyncResult> returned by a call to the &lt;xref:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt; method.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.IAsyncResult&gt; returned by a call to the <ph id=\"ph1\">&amp;lt;</ph>xref:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29<ph id=\"ph2\">&amp;gt;</ph> method.","pos":[0,203],"source":"The <xref:System.IAsyncResult> returned by a call to the &lt;xref:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt; method."}]},{"pos":[16037,16101],"content":"The <xref:System.ServiceModel.Channels.RequestContext> received.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.ServiceModel.Channels.RequestContext&gt; received.","pos":[0,64],"source":"The <xref:System.ServiceModel.Channels.RequestContext> received."}]},{"pos":[16160,16374],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if a request message is received before the specified interval of time elapses; otherwise <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if a request message is received before the specified interval of time elapses; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[16994,17068],"content":"Completes the specified asynchronous wait-for-a-request message operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Completes the specified asynchronous wait-for-a-request message operation.","pos":[0,74]}]},{"pos":[17424,17673],"content":"The <xref:System.IAsyncResult> that identifies the &lt;xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt; operation to finish, and from which to retrieve an end result.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.IAsyncResult&gt; that identifies the <ph id=\"ph1\">&amp;lt;</ph>xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29<ph id=\"ph2\">&amp;gt;</ph> operation to finish, and from which to retrieve an end result.","pos":[0,249],"source":"The <xref:System.IAsyncResult> that identifies the &lt;xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt; operation to finish, and from which to retrieve an end result."}]},{"pos":[17732,17938],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if a request is received before the specified interval of time elapses; otherwise <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if a request is received before the specified interval of time elapses; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[18448,18511],"content":"Gets the address on which this reply channel receives messages.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the address on which this reply channel receives messages.","pos":[0,63]}]},{"pos":[18877,18970],"content":"The <xref:System.ServiceModel.EndpointAddress> on which this reply channel receives messages.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.ServiceModel.EndpointAddress&gt; on which this reply channel receives messages.","pos":[0,93],"source":"The <xref:System.ServiceModel.EndpointAddress> on which this reply channel receives messages."}]},{"pos":[19489,19621],"content":"Returns the context of the request received, if one is available. If a context is not available, waits until there is one available.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the context of the request received, if one is available. If a context is not available, waits until there is one available.","pos":[0,132],"nodes":[{"content":"Returns the context of the request received, if one is available.","pos":[0,65]},{"content":"If a context is not available, waits until there is one available.","pos":[66,132]}]}]},{"pos":[19634,20240],"content":"<xref:System.ServiceModel.Channels.RequestContext> encapsulates the request message and a mechanism for replying to that message.       ReceiveRequest can be called multiple times or concurrently. Only one ReceiveRequest call completes per request received.       If the request message received is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown. The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property. The default value is 65536 bytes.","needQuote":false,"needEscape":true,"nodes":[{"content":"<xref:System.ServiceModel.Channels.RequestContext> encapsulates the request message and a mechanism for replying to that message.       ReceiveRequest can be called multiple times or concurrently. Only one ReceiveRequest call completes per request received.       If the request message received is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown. The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property. The default value is 65536 bytes.","pos":[0,602],"nodes":[{"content":"&lt;xref:System.ServiceModel.Channels.RequestContext&gt; encapsulates the request message and a mechanism for replying to that message.","pos":[0,129],"source":"<xref:System.ServiceModel.Channels.RequestContext> encapsulates the request message and a mechanism for replying to that message."},{"content":"ReceiveRequest can be called multiple times or concurrently.","pos":[136,196]},{"content":"Only one ReceiveRequest call completes per request received.","pos":[197,257]},{"content":"If the request message received is larger that the maximum message size allowed by the binding being used, a &lt;xref:System.ServiceModel.QuotaExceededException&gt; is thrown.","pos":[264,433],"source":"       If the request message received is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown."},{"content":"The maximum message size is set by the &lt;xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A&gt; property.","pos":[434,568],"source":" The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property."},{"content":"The default value is 65536 bytes.","pos":[569,602]}]}]},{"pos":[20623,20704],"content":"The <xref:System.ServiceModel.Channels.RequestContext> used to construct replies.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.ServiceModel.Channels.RequestContext&gt; used to construct replies.","pos":[0,81],"source":"The <xref:System.ServiceModel.Channels.RequestContext> used to construct replies."}]},{"pos":[21283,21415],"content":"Returns the context of the request received, if one is available. If a context is not available, waits until there is one available.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the context of the request received, if one is available. If a context is not available, waits until there is one available.","pos":[0,132],"nodes":[{"content":"Returns the context of the request received, if one is available.","pos":[0,65]},{"content":"If a context is not available, waits until there is one available.","pos":[66,132]}]}]},{"pos":[21428,22140],"content":"<xref:System.ServiceModel.Channels.RequestContext> encapsulates the request message and a mechanism for replying to that message.       <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> can be called multiple times or concurrently. Only one <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> call completes per request received.       If the request message received is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown. The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property. The default value is 65536 bytes.","needQuote":false,"needEscape":true,"nodes":[{"content":"<xref:System.ServiceModel.Channels.RequestContext> encapsulates the request message and a mechanism for replying to that message.       <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> can be called multiple times or concurrently. Only one <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> call completes per request received.       If the request message received is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown. The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property. The default value is 65536 bytes.","pos":[0,708],"nodes":[{"content":"&lt;xref:System.ServiceModel.Channels.RequestContext&gt; encapsulates the request message and a mechanism for replying to that message.","pos":[0,129],"source":"<xref:System.ServiceModel.Channels.RequestContext> encapsulates the request message and a mechanism for replying to that message."},{"content":"&lt;xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A&gt; can be called multiple times or concurrently.","pos":[136,249],"source":"       <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> can be called multiple times or concurrently."},{"content":"Only one &lt;xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A&gt; call completes per request received.","pos":[250,363],"source":" Only one <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> call completes per request received."},{"content":"If the request message received is larger that the maximum message size allowed by the binding being used, a &lt;xref:System.ServiceModel.QuotaExceededException&gt; is thrown.","pos":[370,539],"source":"       If the request message received is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown."},{"content":"The maximum message size is set by the &lt;xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A&gt; property.","pos":[540,674],"source":" The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property."},{"content":"The default value is 65536 bytes.","pos":[675,708]}]}]},{"pos":[22514,22711],"content":"The &lt;xref:System.TimeSpan&gt; that specifies how long the receive of a request operation has to complete before timing out and returning <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <xref:System.TimeSpan> that specifies how long the receive of a request operation has to complete before timing out and returning <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[22799,22880],"content":"The <xref:System.ServiceModel.Channels.RequestContext> used to construct replies.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.ServiceModel.Channels.RequestContext&gt; used to construct replies.","pos":[0,81],"source":"The <xref:System.ServiceModel.Channels.RequestContext> used to construct replies."}]},{"pos":[23609,23714],"content":"Returns a value that indicates whether a request is received before a specified interval of time elapses.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a value that indicates whether a request is received before a specified interval of time elapses.","pos":[0,105]}]},{"pos":[23726,24150],"content":"Use TryReceiveRequest when it is acceptable for the current thread to be blocked while it waits for a request message to arrive in the queue. The thread is blocked up to the specified `timeout`. If you need the application processing to continue without waiting, use the asynchronous <xref:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method.","needQuote":true,"needEscape":true,"nodes":[{"content":"Use TryReceiveRequest when it is acceptable for the current thread to be blocked while it waits for a request message to arrive in the queue.","pos":[0,141]},{"content":"The thread is blocked up to the specified <ph id=\"ph1\">`timeout`</ph>.","pos":[142,194],"source":" The thread is blocked up to the specified `timeout`."},{"content":"If you need the application processing to continue without waiting, use the asynchronous &lt;xref:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt; method.","pos":[195,424],"source":" If you need the application processing to continue without waiting, use the asynchronous <xref:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method."}]},{"pos":[24542,24739],"content":"The &lt;xref:System.TimeSpan&gt; that specifies how long the receive of a request operation has to complete before timing out and returning <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <xref:System.TimeSpan> that specifies how long the receive of a request operation has to complete before timing out and returning <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[24833,24897],"content":"The <xref:System.ServiceModel.Channels.RequestContext> received.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.ServiceModel.Channels.RequestContext&gt; received.","pos":[0,64],"source":"The <xref:System.ServiceModel.Channels.RequestContext> received."}]},{"pos":[24956,25170],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if a request message is received before the specified interval of time elapses; otherwise <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if a request message is received before the specified interval of time elapses; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[25752,25865],"content":"Returns a value that indicates whether a request message is received before a specified interval of time elapses.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a value that indicates whether a request message is received before a specified interval of time elapses.","pos":[0,113]}]},{"pos":[25878,27273],"content":"Calling WaitForRequest does not result in a request message being received or processed in any way.       The <xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method exists primarily for transacted scenarios where the user wants to receive the message using a transaction. When using just <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> normally for this, the user must create the transaction, and then call <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> and hope the message arrives before the transaction times out, which may not be possible.       Instead, the user can call WaitForRequest and specify the time out (even infinite), then when a message arrives they can open the transaction, call <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> and be confident that they can get the message back before the transaction expires.       Use WaitForRequest when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue. The thread is blocked up to the specified `timeout`. If you need the application processing to continue without waiting, use the asynchronous <xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method.","needQuote":false,"needEscape":true,"nodes":[{"content":"Calling WaitForRequest does not result in a request message being received or processed in any way.","pos":[0,99]},{"content":"The &lt;xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt; method exists primarily for transacted scenarios where the user wants to receive the message using a transaction.","pos":[106,353],"source":"       The <xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method exists primarily for transacted scenarios where the user wants to receive the message using a transaction."},{"content":"When using just &lt;xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A&gt; normally for this, the user must create the transaction, and then call &lt;xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A&gt; and hope the message arrives before the transaction times out, which may not be possible.","pos":[354,666],"source":" When using just <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> normally for this, the user must create the transaction, and then call <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> and hope the message arrives before the transaction times out, which may not be possible."},{"content":"Instead, the user can call WaitForRequest and specify the time out (even infinite), then when a message arrives they can open the transaction, call &lt;xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A&gt; and be confident that they can get the message back before the transaction expires.","pos":[673,972],"source":"       Instead, the user can call WaitForRequest and specify the time out (even infinite), then when a message arrives they can open the transaction, call <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> and be confident that they can get the message back before the transaction expires."},{"content":"Use WaitForRequest when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue.","pos":[979,1109]},{"content":"The thread is blocked up to the specified <ph id=\"ph1\">`timeout`</ph>.","pos":[1110,1162],"source":" The thread is blocked up to the specified `timeout`."},{"content":"If you need the application processing to continue without waiting, use the asynchronous &lt;xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt; method.","pos":[1163,1389],"source":" If you need the application processing to continue without waiting, use the asynchronous <xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method."}]},{"pos":[27608,27790],"content":"The &lt;xref:System.TimeSpan&gt; that specifies how long a request operation has to complete before timing out and returning <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <xref:System.TimeSpan> that specifies how long a request operation has to complete before timing out and returning <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[27849,28055],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if a request is received before the specified interval of time elapses; otherwise <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if a request is received before the specified interval of time elapses; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ServiceModel.Channels.IReplyChannel\n  id: IReplyChannel\n  children:\n  - System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.AsyncCallback,System.Object)\n  - System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)\n  - System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)\n  - System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)\n  - System.ServiceModel.Channels.IReplyChannel.EndReceiveRequest(System.IAsyncResult)\n  - System.ServiceModel.Channels.IReplyChannel.EndTryReceiveRequest(System.IAsyncResult,System.ServiceModel.Channels.RequestContext@)\n  - System.ServiceModel.Channels.IReplyChannel.EndWaitForRequest(System.IAsyncResult)\n  - System.ServiceModel.Channels.IReplyChannel.LocalAddress\n  - System.ServiceModel.Channels.IReplyChannel.ReceiveRequest\n  - System.ServiceModel.Channels.IReplyChannel.ReceiveRequest(System.TimeSpan)\n  - System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest(System.TimeSpan,System.ServiceModel.Channels.RequestContext@)\n  - System.ServiceModel.Channels.IReplyChannel.WaitForRequest(System.TimeSpan)\n  langs:\n  - csharp\n  name: IReplyChannel\n  nameWithType: IReplyChannel\n  fullName: System.ServiceModel.Channels.IReplyChannel\n  type: Interface\n  summary: Defines the interface that a channel must implement to be on the receiving side of a request-reply communication between messaging endpoints.\n  remarks: \"The IReplyChannel interface includes synchronous and asynchronous variants of a <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> method return an <xref:System.ServiceModel.Channels.RequestContext> that can be used to construct replies to received requests.  \\n  \\n The contract includes synchronous and asynchronous variants of receive, try-to-receive and wait-for-a-message functionality.  \\n  \\n An IReplyChannel is not necessarily bound to a single sender. Other channels and channel interfaces provide correlation between the sender and the reply channel, but the base contract makes no such restriction.  \\n  \\n The pull model is used with an IReplyChannel to receive messages. This model consists of calling <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> (or one of its variants) and then waiting for a message to arrive.\"\n  syntax:\n    content: 'public interface IReplyChannel : System.ServiceModel.Channels.IChannel'\n  implements:\n  - System.ServiceModel.Channels.IChannel\n  platform:\n  - net462\n- uid: System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.AsyncCallback,System.Object)\n  id: BeginReceiveRequest(System.AsyncCallback,System.Object)\n  parent: System.ServiceModel.Channels.IReplyChannel\n  langs:\n  - csharp\n  name: BeginReceiveRequest(AsyncCallback,Object)\n  nameWithType: IReplyChannel.BeginReceiveRequest(AsyncCallback,Object)\n  fullName: System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(AsyncCallback,Object)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Channels\n  summary: Begins an asynchronous operation to receive an available request with a default timeout.\n  remarks: \"The BeginReceiveRequest method implements the standard pattern for invoking <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest> asynchronously. The default timeout is 1 minute. If a receive timeout is set on the binding used to configure the connection, then that value is used. Use <xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> if you want to specify an explicit timeout with the call that overrides these other values.  \\n  \\n If the request message received is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown. The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property. The default value is 65536 bytes.\"\n  example:\n  - \"The following code illustrates how to implement this method:  \\n  \\n [!code-cs[S_UE_MessageInterceptor#1](~/add/codesnippet/csharp/b714b94c-13fc-4c03-a779-_1.cs)]\"\n  syntax:\n    content: public IAsyncResult BeginReceiveRequest (AsyncCallback callback, object state);\n    parameters:\n    - id: callback\n      type: System.AsyncCallback\n      description: The <xref:System.AsyncCallback> delegate that receives the notification of the asynchronous receive that a request operation completes.\n    - id: state\n      type: System.Object\n      description: An object, specified by the application, that contains state information associated with the asynchronous receive of a request operation.\n    return:\n      type: System.IAsyncResult\n      description: The <xref:System.IAsyncResult> that references the asynchronous reception of the request.\n  overload: System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)\n  id: BeginReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)\n  parent: System.ServiceModel.Channels.IReplyChannel\n  langs:\n  - csharp\n  name: BeginReceiveRequest(TimeSpan,AsyncCallback,Object)\n  nameWithType: IReplyChannel.BeginReceiveRequest(TimeSpan,AsyncCallback,Object)\n  fullName: System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(TimeSpan,AsyncCallback,Object)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Channels\n  summary: Begins an asynchronous operation to receive an available request with a specified timeout.\n  remarks: \"The BeginReceiveRequest method implements the standard pattern for invoking <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%28System.TimeSpan%29>asynchronously. The timeout set on this method overrides a receive timeout set on the binding that is used to configure the connection.  \\n  \\n If the request message received is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown. The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property. The default value is 65536 bytes.\"\n  example:\n  - \"The following code illustrates how to implement this method:  \\n  \\n [!code-cs[S_UE_MessageInterceptor#2](~/add/codesnippet/csharp/6f48cd8d-c63c-4708-86c4-_1.cs)]\"\n  syntax:\n    content: public IAsyncResult BeginReceiveRequest (TimeSpan timeout, AsyncCallback callback, object state);\n    parameters:\n    - id: timeout\n      type: System.TimeSpan\n      description: The <xref:System.TimeSpan> that specifies the interval of time to wait for the reception of an available request.\n    - id: callback\n      type: System.AsyncCallback\n      description: The <xref:System.AsyncCallback> delegate that receives the notification of the asynchronous receive that a request operation completes.\n    - id: state\n      type: System.Object\n      description: An object, specified by the application, that contains state information associated with the asynchronous receive of a request operation.\n    return:\n      type: System.IAsyncResult\n      description: The <xref:System.IAsyncResult> that references the asynchronous reception of the request.\n  overload: System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)\n  id: BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)\n  parent: System.ServiceModel.Channels.IReplyChannel\n  langs:\n  - csharp\n  name: BeginTryReceiveRequest(TimeSpan,AsyncCallback,Object)\n  nameWithType: IReplyChannel.BeginTryReceiveRequest(TimeSpan,AsyncCallback,Object)\n  fullName: System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(TimeSpan,AsyncCallback,Object)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Channels\n  summary: Begins an asynchronous operation to receive a request message that has a specified time out and state object associated with it.\n  remarks: \"Use the asynchronous BeginTryReceiveRequest method when you need the application processing to continue without waiting. Use one of the synchronous <xref:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest%28System.TimeSpan%2CSystem.ServiceModel.Channels.RequestContext%40%29> methods when it is acceptable for the current thread to be blocked while it replies to the request message or until the timeout interval is exceeded.  \\n  \\n This method receives notification, through a callback, of the identity of the event handler for the operation. The operation is not complete until either a message becomes available in the channel or the time out occurs.\"\n  example:\n  - \"The following code illustrates how to implement this method:  \\n  \\n [!code-cs[S_UE_MessageInterceptor#5](~/add/codesnippet/csharp/cdb71277-0f0f-4e22-85af-_1.cs)]\"\n  syntax:\n    content: public IAsyncResult BeginTryReceiveRequest (TimeSpan timeout, AsyncCallback callback, object state);\n    parameters:\n    - id: timeout\n      type: System.TimeSpan\n      description: The <xref:System.TimeSpan> that specifies how long the receive request operation has to complete before timing out and returning <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n    - id: callback\n      type: System.AsyncCallback\n      description: The <xref:System.AsyncCallback> delegate that receives the notification of the asynchronous receive that a request operation completes.\n    - id: state\n      type: System.Object\n      description: An object, specified by the application, that contains state information associated with the asynchronous receive of a request operation.\n    return:\n      type: System.IAsyncResult\n      description: The <xref:System.IAsyncResult> that references the asynchronous receive request operation.\n  overload: System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)\n  id: BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)\n  parent: System.ServiceModel.Channels.IReplyChannel\n  langs:\n  - csharp\n  name: BeginWaitForRequest(TimeSpan,AsyncCallback,Object)\n  nameWithType: IReplyChannel.BeginWaitForRequest(TimeSpan,AsyncCallback,Object)\n  fullName: System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(TimeSpan,AsyncCallback,Object)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Channels\n  summary: Begins an asynchronous request operation that has a specified time out and state object associated with it.\n  remarks: \"Use the synchronous <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29> method when it is acceptable for the current thread to be blocked while it waits for a request message to arrive in the queue. The thread is blocked up to the specified `timeout`.  \\n  \\n This method receives notification, through a callback, of the identity of the event handler for the operation. The operation is not complete until either a request message becomes available in the channel or the time out occurs.\"\n  example:\n  - \"The following code illustrates how to implement this method:  \\n  \\n [!code-cs[S_UE_MessageInterceptor#10](~/add/codesnippet/csharp/80573a5a-f5c0-4be0-a875-_1.cs)]\"\n  syntax:\n    content: public IAsyncResult BeginWaitForRequest (TimeSpan timeout, AsyncCallback callback, object state);\n    parameters:\n    - id: timeout\n      type: System.TimeSpan\n      description: The <xref:System.TimeSpan> that specifies the interval of time to wait for the reception of an available request.\n    - id: callback\n      type: System.AsyncCallback\n      description: The <xref:System.AsyncCallback> delegate that receives the notification of the asynchronous receive that a request operation completes.\n    - id: state\n      type: System.Object\n      description: An object, specified by the application, that contains state information associated with the asynchronous receive of a request operation.\n    return:\n      type: System.IAsyncResult\n      description: The <xref:System.IAsyncResult> that references the asynchronous operation to wait for a request message to arrive.\n  overload: System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Channels.IReplyChannel.EndReceiveRequest(System.IAsyncResult)\n  id: EndReceiveRequest(System.IAsyncResult)\n  parent: System.ServiceModel.Channels.IReplyChannel\n  langs:\n  - csharp\n  name: EndReceiveRequest(IAsyncResult)\n  nameWithType: IReplyChannel.EndReceiveRequest(IAsyncResult)\n  fullName: System.ServiceModel.Channels.IReplyChannel.EndReceiveRequest(IAsyncResult)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Channels\n  summary: Completes an asynchronous operation to receive an available request.\n  remarks: If the request message received is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown. The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property. The default value is 65536 bytes.\n  example:\n  - \"The following code illustrates how to implement this method:  \\n  \\n [!code-cs[S_UE_MessageInterceptor#3](~/add/codesnippet/csharp/c3561a14-d2f1-46f1-99c2-_1.cs)]\"\n  syntax:\n    content: public System.ServiceModel.Channels.RequestContext EndReceiveRequest (IAsyncResult result);\n    parameters:\n    - id: result\n      type: System.IAsyncResult\n      description: The <xref:System.IAsyncResult> returned by a call to the <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive*> method.\n    return:\n      type: System.ServiceModel.Channels.RequestContext\n      description: The <xref:System.ServiceModel.Channels.RequestContext> used to construct a reply to the request.\n  overload: System.ServiceModel.Channels.IReplyChannel.EndReceiveRequest*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Channels.IReplyChannel.EndTryReceiveRequest(System.IAsyncResult,System.ServiceModel.Channels.RequestContext@)\n  id: EndTryReceiveRequest(System.IAsyncResult,System.ServiceModel.Channels.RequestContext@)\n  parent: System.ServiceModel.Channels.IReplyChannel\n  langs:\n  - csharp\n  name: EndTryReceiveRequest(IAsyncResult,RequestContext)\n  nameWithType: IReplyChannel.EndTryReceiveRequest(IAsyncResult,RequestContext)\n  fullName: System.ServiceModel.Channels.IReplyChannel.EndTryReceiveRequest(IAsyncResult,RequestContext)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Channels\n  summary: Completes the specified asynchronous operation to receive a request message.\n  remarks: ''\n  example:\n  - \"The following code illustrates how to implement this method:  \\n  \\n [!code-cs[S_UE_MessageInterceptor#6](~/add/codesnippet/csharp/2c432ec9-bfc6-46e4-8a1c-_1.cs)]\"\n  syntax:\n    content: public bool EndTryReceiveRequest (IAsyncResult result, out System.ServiceModel.Channels.RequestContext context);\n    parameters:\n    - id: result\n      type: System.IAsyncResult\n      description: The <xref:System.IAsyncResult> returned by a call to the &lt;xref:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt; method.\n    - id: context\n      type: System.ServiceModel.Channels.RequestContext\n      description: The <xref:System.ServiceModel.Channels.RequestContext> received.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if a request message is received before the specified interval of time elapses; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ServiceModel.Channels.IReplyChannel.EndTryReceiveRequest*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Channels.IReplyChannel.EndWaitForRequest(System.IAsyncResult)\n  id: EndWaitForRequest(System.IAsyncResult)\n  parent: System.ServiceModel.Channels.IReplyChannel\n  langs:\n  - csharp\n  name: EndWaitForRequest(IAsyncResult)\n  nameWithType: IReplyChannel.EndWaitForRequest(IAsyncResult)\n  fullName: System.ServiceModel.Channels.IReplyChannel.EndWaitForRequest(IAsyncResult)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Channels\n  summary: Completes the specified asynchronous wait-for-a-request message operation.\n  remarks: ''\n  example:\n  - \"The following code illustrates how to implement this method:  \\n  \\n [!code-cs[S_UE_MessageInterceptor#11](~/add/codesnippet/csharp/fc7d466d-2acc-417f-aa1b-_1.cs)]\"\n  syntax:\n    content: public bool EndWaitForRequest (IAsyncResult result);\n    parameters:\n    - id: result\n      type: System.IAsyncResult\n      description: The <xref:System.IAsyncResult> that identifies the &lt;xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt; operation to finish, and from which to retrieve an end result.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if a request is received before the specified interval of time elapses; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ServiceModel.Channels.IReplyChannel.EndWaitForRequest*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Channels.IReplyChannel.LocalAddress\n  id: LocalAddress\n  parent: System.ServiceModel.Channels.IReplyChannel\n  langs:\n  - csharp\n  name: LocalAddress\n  nameWithType: IReplyChannel.LocalAddress\n  fullName: System.ServiceModel.Channels.IReplyChannel.LocalAddress\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Channels\n  summary: Gets the address on which this reply channel receives messages.\n  remarks: ''\n  example:\n  - \"The following code illustrates how to implement this property:  \\n  \\n [!code-cs[S_UE_MessageInterceptor#0](~/add/codesnippet/csharp/p-system.servicemodel.ch_2_1.cs)]\"\n  syntax:\n    content: public System.ServiceModel.EndpointAddress LocalAddress { get; }\n    return:\n      type: System.ServiceModel.EndpointAddress\n      description: The <xref:System.ServiceModel.EndpointAddress> on which this reply channel receives messages.\n  overload: System.ServiceModel.Channels.IReplyChannel.LocalAddress*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Channels.IReplyChannel.ReceiveRequest\n  id: ReceiveRequest\n  parent: System.ServiceModel.Channels.IReplyChannel\n  langs:\n  - csharp\n  name: ReceiveRequest()\n  nameWithType: IReplyChannel.ReceiveRequest()\n  fullName: System.ServiceModel.Channels.IReplyChannel.ReceiveRequest()\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Channels\n  summary: Returns the context of the request received, if one is available. If a context is not available, waits until there is one available.\n  remarks: \"<xref:System.ServiceModel.Channels.RequestContext> encapsulates the request message and a mechanism for replying to that message.  \\n  \\n ReceiveRequest can be called multiple times or concurrently. Only one ReceiveRequest call completes per request received.  \\n  \\n If the request message received is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown. The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property. The default value is 65536 bytes.\"\n  example:\n  - \"The following code illustrates how to implement this method:  \\n  \\n [!code-cs[S_UE_MessageInterceptor#7](~/add/codesnippet/csharp/m-system.servicemodel.ch_9_1.cs)]\"\n  syntax:\n    content: public System.ServiceModel.Channels.RequestContext ReceiveRequest ();\n    parameters: []\n    return:\n      type: System.ServiceModel.Channels.RequestContext\n      description: The <xref:System.ServiceModel.Channels.RequestContext> used to construct replies.\n  overload: System.ServiceModel.Channels.IReplyChannel.ReceiveRequest*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Channels.IReplyChannel.ReceiveRequest(System.TimeSpan)\n  id: ReceiveRequest(System.TimeSpan)\n  parent: System.ServiceModel.Channels.IReplyChannel\n  langs:\n  - csharp\n  name: ReceiveRequest(TimeSpan)\n  nameWithType: IReplyChannel.ReceiveRequest(TimeSpan)\n  fullName: System.ServiceModel.Channels.IReplyChannel.ReceiveRequest(TimeSpan)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Channels\n  summary: Returns the context of the request received, if one is available. If a context is not available, waits until there is one available.\n  remarks: \"<xref:System.ServiceModel.Channels.RequestContext> encapsulates the request message and a mechanism for replying to that message.  \\n  \\n <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> can be called multiple times or concurrently. Only one <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> call completes per request received.  \\n  \\n If the request message received is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown. The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property. The default value is 65536 bytes.\"\n  example:\n  - \"The following code illustrates how to implement this method:  \\n  \\n [!code-cs[S_UE_MessageInterceptor#8](~/add/codesnippet/csharp/m-system.servicemodel.ch_3_1.cs)]\"\n  syntax:\n    content: public System.ServiceModel.Channels.RequestContext ReceiveRequest (TimeSpan timeout);\n    parameters:\n    - id: timeout\n      type: System.TimeSpan\n      description: The <xref:System.TimeSpan> that specifies how long the receive of a request operation has to complete before timing out and returning <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n    return:\n      type: System.ServiceModel.Channels.RequestContext\n      description: The <xref:System.ServiceModel.Channels.RequestContext> used to construct replies.\n  overload: System.ServiceModel.Channels.IReplyChannel.ReceiveRequest*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest(System.TimeSpan,System.ServiceModel.Channels.RequestContext@)\n  id: TryReceiveRequest(System.TimeSpan,System.ServiceModel.Channels.RequestContext@)\n  parent: System.ServiceModel.Channels.IReplyChannel\n  langs:\n  - csharp\n  name: TryReceiveRequest(TimeSpan,RequestContext)\n  nameWithType: IReplyChannel.TryReceiveRequest(TimeSpan,RequestContext)\n  fullName: System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest(TimeSpan,RequestContext)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Channels\n  summary: Returns a value that indicates whether a request is received before a specified interval of time elapses.\n  remarks: Use TryReceiveRequest when it is acceptable for the current thread to be blocked while it waits for a request message to arrive in the queue. The thread is blocked up to the specified `timeout`. If you need the application processing to continue without waiting, use the asynchronous <xref:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method.\n  example:\n  - \"The following code illustrates how to implement this method:  \\n  \\n [!code-cs[S_UE_MessageInterceptor#4](~/add/codesnippet/csharp/78581c5e-1028-4e54-ba3b-_1.cs)]\"\n  syntax:\n    content: public bool TryReceiveRequest (TimeSpan timeout, out System.ServiceModel.Channels.RequestContext context);\n    parameters:\n    - id: timeout\n      type: System.TimeSpan\n      description: The <xref:System.TimeSpan> that specifies how long the receive of a request operation has to complete before timing out and returning <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n    - id: context\n      type: System.ServiceModel.Channels.RequestContext\n      description: The <xref:System.ServiceModel.Channels.RequestContext> received.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if a request message is received before the specified interval of time elapses; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Channels.IReplyChannel.WaitForRequest(System.TimeSpan)\n  id: WaitForRequest(System.TimeSpan)\n  parent: System.ServiceModel.Channels.IReplyChannel\n  langs:\n  - csharp\n  name: WaitForRequest(TimeSpan)\n  nameWithType: IReplyChannel.WaitForRequest(TimeSpan)\n  fullName: System.ServiceModel.Channels.IReplyChannel.WaitForRequest(TimeSpan)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Channels\n  summary: Returns a value that indicates whether a request message is received before a specified interval of time elapses.\n  remarks: \"Calling WaitForRequest does not result in a request message being received or processed in any way.  \\n  \\n The <xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method exists primarily for transacted scenarios where the user wants to receive the message using a transaction. When using just <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> normally for this, the user must create the transaction, and then call <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> and hope the message arrives before the transaction times out, which may not be possible.  \\n  \\n Instead, the user can call WaitForRequest and specify the time out (even infinite), then when a message arrives they can open the transaction, call <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> and be confident that they can get the message back before the transaction expires.  \\n  \\n Use WaitForRequest when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue. The thread is blocked up to the specified `timeout`. If you need the application processing to continue without waiting, use the asynchronous <xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method.\"\n  example:\n  - \"The following code illustrates how to implement this method:  \\n  \\n [!code-cs[S_UE_MessageInterceptor#9](~/add/codesnippet/csharp/m-system.servicemodel.ch_6_1.cs)]\"\n  syntax:\n    content: public bool WaitForRequest (TimeSpan timeout);\n    parameters:\n    - id: timeout\n      type: System.TimeSpan\n      description: The <xref:System.TimeSpan> that specifies how long a request operation has to complete before timing out and returning <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if a request is received before the specified interval of time elapses; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ServiceModel.Channels.IReplyChannel.WaitForRequest*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.AsyncCallback,System.Object)\n  parent: System.ServiceModel.Channels.IReplyChannel\n  isExternal: false\n  name: BeginReceiveRequest(AsyncCallback,Object)\n  nameWithType: IReplyChannel.BeginReceiveRequest(AsyncCallback,Object)\n  fullName: System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(AsyncCallback,Object)\n- uid: System.IAsyncResult\n  parent: System\n  isExternal: true\n  name: IAsyncResult\n  nameWithType: IAsyncResult\n  fullName: System.IAsyncResult\n- uid: System.AsyncCallback\n  parent: System\n  isExternal: true\n  name: AsyncCallback\n  nameWithType: AsyncCallback\n  fullName: System.AsyncCallback\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)\n  parent: System.ServiceModel.Channels.IReplyChannel\n  isExternal: false\n  name: BeginReceiveRequest(TimeSpan,AsyncCallback,Object)\n  nameWithType: IReplyChannel.BeginReceiveRequest(TimeSpan,AsyncCallback,Object)\n  fullName: System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(TimeSpan,AsyncCallback,Object)\n- uid: System.TimeSpan\n  parent: System\n  isExternal: true\n  name: TimeSpan\n  nameWithType: TimeSpan\n  fullName: System.TimeSpan\n- uid: System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)\n  parent: System.ServiceModel.Channels.IReplyChannel\n  isExternal: false\n  name: BeginTryReceiveRequest(TimeSpan,AsyncCallback,Object)\n  nameWithType: IReplyChannel.BeginTryReceiveRequest(TimeSpan,AsyncCallback,Object)\n  fullName: System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(TimeSpan,AsyncCallback,Object)\n- uid: System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)\n  parent: System.ServiceModel.Channels.IReplyChannel\n  isExternal: false\n  name: BeginWaitForRequest(TimeSpan,AsyncCallback,Object)\n  nameWithType: IReplyChannel.BeginWaitForRequest(TimeSpan,AsyncCallback,Object)\n  fullName: System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(TimeSpan,AsyncCallback,Object)\n- uid: System.ServiceModel.Channels.IReplyChannel.EndReceiveRequest(System.IAsyncResult)\n  parent: System.ServiceModel.Channels.IReplyChannel\n  isExternal: false\n  name: EndReceiveRequest(IAsyncResult)\n  nameWithType: IReplyChannel.EndReceiveRequest(IAsyncResult)\n  fullName: System.ServiceModel.Channels.IReplyChannel.EndReceiveRequest(IAsyncResult)\n- uid: System.ServiceModel.Channels.RequestContext\n  parent: System.ServiceModel.Channels\n  isExternal: true\n  name: RequestContext\n  nameWithType: RequestContext\n  fullName: System.ServiceModel.Channels.RequestContext\n- uid: System.ServiceModel.Channels.IReplyChannel.EndTryReceiveRequest(System.IAsyncResult,System.ServiceModel.Channels.RequestContext@)\n  parent: System.ServiceModel.Channels.IReplyChannel\n  isExternal: false\n  name: EndTryReceiveRequest(IAsyncResult,RequestContext)\n  nameWithType: IReplyChannel.EndTryReceiveRequest(IAsyncResult,RequestContext)\n  fullName: System.ServiceModel.Channels.IReplyChannel.EndTryReceiveRequest(IAsyncResult,RequestContext)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.ServiceModel.Channels.IReplyChannel.EndWaitForRequest(System.IAsyncResult)\n  parent: System.ServiceModel.Channels.IReplyChannel\n  isExternal: false\n  name: EndWaitForRequest(IAsyncResult)\n  nameWithType: IReplyChannel.EndWaitForRequest(IAsyncResult)\n  fullName: System.ServiceModel.Channels.IReplyChannel.EndWaitForRequest(IAsyncResult)\n- uid: System.ServiceModel.Channels.IReplyChannel.LocalAddress\n  parent: System.ServiceModel.Channels.IReplyChannel\n  isExternal: false\n  name: LocalAddress\n  nameWithType: IReplyChannel.LocalAddress\n  fullName: System.ServiceModel.Channels.IReplyChannel.LocalAddress\n- uid: System.ServiceModel.EndpointAddress\n  parent: System.ServiceModel\n  isExternal: true\n  name: EndpointAddress\n  nameWithType: EndpointAddress\n  fullName: System.ServiceModel.EndpointAddress\n- uid: System.ServiceModel.Channels.IReplyChannel.ReceiveRequest\n  parent: System.ServiceModel.Channels.IReplyChannel\n  isExternal: false\n  name: ReceiveRequest()\n  nameWithType: IReplyChannel.ReceiveRequest()\n  fullName: System.ServiceModel.Channels.IReplyChannel.ReceiveRequest()\n- uid: System.ServiceModel.Channels.IReplyChannel.ReceiveRequest(System.TimeSpan)\n  parent: System.ServiceModel.Channels.IReplyChannel\n  isExternal: false\n  name: ReceiveRequest(TimeSpan)\n  nameWithType: IReplyChannel.ReceiveRequest(TimeSpan)\n  fullName: System.ServiceModel.Channels.IReplyChannel.ReceiveRequest(TimeSpan)\n- uid: System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest(System.TimeSpan,System.ServiceModel.Channels.RequestContext@)\n  parent: System.ServiceModel.Channels.IReplyChannel\n  isExternal: false\n  name: TryReceiveRequest(TimeSpan,RequestContext)\n  nameWithType: IReplyChannel.TryReceiveRequest(TimeSpan,RequestContext)\n  fullName: System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest(TimeSpan,RequestContext)\n- uid: System.ServiceModel.Channels.IReplyChannel.WaitForRequest(System.TimeSpan)\n  parent: System.ServiceModel.Channels.IReplyChannel\n  isExternal: false\n  name: WaitForRequest(TimeSpan)\n  nameWithType: IReplyChannel.WaitForRequest(TimeSpan)\n  fullName: System.ServiceModel.Channels.IReplyChannel.WaitForRequest(TimeSpan)\n- uid: System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest*\n  parent: System.ServiceModel.Channels.IReplyChannel\n  isExternal: false\n  name: BeginReceiveRequest\n  nameWithType: IReplyChannel.BeginReceiveRequest\n- uid: System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest*\n  parent: System.ServiceModel.Channels.IReplyChannel\n  isExternal: false\n  name: BeginTryReceiveRequest\n  nameWithType: IReplyChannel.BeginTryReceiveRequest\n- uid: System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest*\n  parent: System.ServiceModel.Channels.IReplyChannel\n  isExternal: false\n  name: BeginWaitForRequest\n  nameWithType: IReplyChannel.BeginWaitForRequest\n- uid: System.ServiceModel.Channels.IReplyChannel.EndReceiveRequest*\n  parent: System.ServiceModel.Channels.IReplyChannel\n  isExternal: false\n  name: EndReceiveRequest\n  nameWithType: IReplyChannel.EndReceiveRequest\n- uid: System.ServiceModel.Channels.IReplyChannel.EndTryReceiveRequest*\n  parent: System.ServiceModel.Channels.IReplyChannel\n  isExternal: false\n  name: EndTryReceiveRequest\n  nameWithType: IReplyChannel.EndTryReceiveRequest\n- uid: System.ServiceModel.Channels.IReplyChannel.EndWaitForRequest*\n  parent: System.ServiceModel.Channels.IReplyChannel\n  isExternal: false\n  name: EndWaitForRequest\n  nameWithType: IReplyChannel.EndWaitForRequest\n- uid: System.ServiceModel.Channels.IReplyChannel.LocalAddress*\n  parent: System.ServiceModel.Channels.IReplyChannel\n  isExternal: false\n  name: LocalAddress\n  nameWithType: IReplyChannel.LocalAddress\n- uid: System.ServiceModel.Channels.IReplyChannel.ReceiveRequest*\n  parent: System.ServiceModel.Channels.IReplyChannel\n  isExternal: false\n  name: ReceiveRequest\n  nameWithType: IReplyChannel.ReceiveRequest\n- uid: System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest*\n  parent: System.ServiceModel.Channels.IReplyChannel\n  isExternal: false\n  name: TryReceiveRequest\n  nameWithType: IReplyChannel.TryReceiveRequest\n- uid: System.ServiceModel.Channels.IReplyChannel.WaitForRequest*\n  parent: System.ServiceModel.Channels.IReplyChannel\n  isExternal: false\n  name: WaitForRequest\n  nameWithType: IReplyChannel.WaitForRequest\n"}