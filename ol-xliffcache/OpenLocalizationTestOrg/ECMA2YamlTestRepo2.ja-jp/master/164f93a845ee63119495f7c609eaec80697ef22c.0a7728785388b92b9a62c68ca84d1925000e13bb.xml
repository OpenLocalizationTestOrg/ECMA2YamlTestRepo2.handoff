{"nodes":[{"pos":[1249,1312],"content":"An activity that supports compensation of its child activities.","needQuote":true,"needEscape":true,"nodes":[{"content":"An activity that supports compensation of its child activities.","pos":[0,63]}]},{"pos":[1324,2740],"content":"CompensableActivity allows a developer to specify a <xref:System.Activities.Statements.CompensableActivity.Body%2A> activity that defines a long-running task that performs their core business logic. It also allows the developer to optionally specify a compensation and confirmation activity to schedule appropriate business logic in the event of errors or successful completion of the <xref:System.Activities.Statements.CompensableActivity.Body%2A>. Compensation and confirmation of a CompensableActivity is invoked by using the <xref:System.Activities.Statements.CompensationToken> returned by the CompensableActivity. <xref:System.Activities.Statements.CompensationToken> is an opaque, typed object returned as the <xref:System.Activities.WorkflowElement%601.Result%2A> argument after successful completion of a CompensableActivity activity’s <xref:System.Activities.Statements.CompensableActivity.Body%2A>. This <xref:System.Activities.Statements.CompensationToken> is used by the <xref:System.Activities.Statements.Confirm> and <xref:System.Activities.Statements.Compensate> activities to explicitly invoke confirmation and compensation of a CompensableActivity. CompensableActivity can be composed in a nested hierarchical fashion in the workflow. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Compensation Programming Model](http://msdn.microsoft.com/en-us/29e5442c-1df7-401d-a6ca-746e617cbf9f).","needQuote":true,"needEscape":true,"nodes":[{"content":"CompensableActivity allows a developer to specify a &lt;xref:System.Activities.Statements.CompensableActivity.Body%2A&gt; activity that defines a long-running task that performs their core business logic.","pos":[0,198],"source":"CompensableActivity allows a developer to specify a <xref:System.Activities.Statements.CompensableActivity.Body%2A> activity that defines a long-running task that performs their core business logic."},{"content":"It also allows the developer to optionally specify a compensation and confirmation activity to schedule appropriate business logic in the event of errors or successful completion of the &lt;xref:System.Activities.Statements.CompensableActivity.Body%2A&gt;.","pos":[199,449],"source":" It also allows the developer to optionally specify a compensation and confirmation activity to schedule appropriate business logic in the event of errors or successful completion of the <xref:System.Activities.Statements.CompensableActivity.Body%2A>."},{"content":"Compensation and confirmation of a CompensableActivity is invoked by using the &lt;xref:System.Activities.Statements.CompensationToken&gt; returned by the CompensableActivity.","pos":[450,619],"source":" Compensation and confirmation of a CompensableActivity is invoked by using the <xref:System.Activities.Statements.CompensationToken> returned by the CompensableActivity."},{"content":"&lt;xref:System.Activities.Statements.CompensationToken&gt; is an opaque, typed object returned as the &lt;xref:System.Activities.WorkflowElement%601.Result%2A&gt; argument after successful completion of a CompensableActivity activity’s &lt;xref:System.Activities.Statements.CompensableActivity.Body%2A&gt;.","pos":[620,909],"source":" <xref:System.Activities.Statements.CompensationToken> is an opaque, typed object returned as the <xref:System.Activities.WorkflowElement%601.Result%2A> argument after successful completion of a CompensableActivity activity’s <xref:System.Activities.Statements.CompensableActivity.Body%2A>."},{"content":"This &lt;xref:System.Activities.Statements.CompensationToken&gt; is used by the &lt;xref:System.Activities.Statements.Confirm&gt; and &lt;xref:System.Activities.Statements.Compensate&gt; activities to explicitly invoke confirmation and compensation of a CompensableActivity.","pos":[910,1166],"source":" This <xref:System.Activities.Statements.CompensationToken> is used by the <xref:System.Activities.Statements.Confirm> and <xref:System.Activities.Statements.Compensate> activities to explicitly invoke confirmation and compensation of a CompensableActivity."},{"content":"CompensableActivity can be composed in a nested hierarchical fashion in the workflow.","pos":[1167,1252]},{"content":"<ph id=\"ph1\">[!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)]</ph><bpt id=\"p1\">[</bpt>Compensation Programming Model<ept id=\"p1\">](http://msdn.microsoft.com/en-us/29e5442c-1df7-401d-a6ca-746e617cbf9f)</ept>.","pos":[1253,1416],"source":"[!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Compensation Programming Model](http://msdn.microsoft.com/en-us/29e5442c-1df7-401d-a6ca-746e617cbf9f)."}]},{"pos":[4922,5032],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Activities.Statements.CompensableActivity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Activities.Statements.CompensableActivity\"></xref> class."},{"pos":[5591,5723],"content":"Gets or sets the activity that is scheduled when the <bpt id=\"p1\">&lt;xref href=\"System.Activities.Statements.CompensableActivity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> executes.","needQuote":true,"needEscape":true,"source":"Gets or sets the activity that is scheduled when the <xref href=\"System.Activities.Statements.CompensableActivity\"></xref> executes."},{"pos":[5735,5859],"content":"This property is read-only at runtime. If the value is set at runtime, an <xref:System.InvalidOperationException> is thrown.","needQuote":true,"needEscape":true,"nodes":[{"content":"This property is read-only at runtime. If the value is set at runtime, an <xref:System.InvalidOperationException> is thrown.","pos":[0,124],"nodes":[{"content":"This property is read-only at runtime.","pos":[0,38]},{"content":"If the value is set at runtime, an &lt;xref:System.InvalidOperationException&gt; is thrown.","pos":[39,124],"source":" If the value is set at runtime, an <xref:System.InvalidOperationException> is thrown."}]}]},{"pos":[6006,6125],"content":"The activity that is scheduled when the <bpt id=\"p1\">&lt;xref href=\"System.Activities.Statements.CompensableActivity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> executes.","needQuote":true,"needEscape":true,"source":"The activity that is scheduled when the <xref href=\"System.Activities.Statements.CompensableActivity\"></xref> executes."},{"pos":[7019,7031],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[7883,7895],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[8457,8531],"content":"Gets or sets the activity that is scheduled when the activity is canceled.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the activity that is scheduled when the activity is canceled.","pos":[0,74]}]},{"pos":[8544,8880],"content":"CancellationHandler can be used to specify custom cancelation logic for the <xref:System.Activities.Statements.CompensableActivity.Body%2A> of the <xref:System.Activities.Statements.CompensableActivity>.       This property is read-only at runtime. If the value is set at runtime, an <xref:System.InvalidOperationException> is thrown.","needQuote":false,"needEscape":true,"nodes":[{"content":"CancellationHandler can be used to specify custom cancelation logic for the <xref:System.Activities.Statements.CompensableActivity.Body%2A> of the <xref:System.Activities.Statements.CompensableActivity>.       This property is read-only at runtime. If the value is set at runtime, an <xref:System.InvalidOperationException> is thrown.","pos":[0,334],"nodes":[{"content":"CancellationHandler can be used to specify custom cancelation logic for the &lt;xref:System.Activities.Statements.CompensableActivity.Body%2A&gt; of the &lt;xref:System.Activities.Statements.CompensableActivity&gt;.","pos":[0,203],"source":"CancellationHandler can be used to specify custom cancelation logic for the <xref:System.Activities.Statements.CompensableActivity.Body%2A> of the <xref:System.Activities.Statements.CompensableActivity>."},{"content":"This property is read-only at runtime.","pos":[210,248]},{"content":"If the value is set at runtime, an &lt;xref:System.InvalidOperationException&gt; is thrown.","pos":[249,334],"source":" If the value is set at runtime, an <xref:System.InvalidOperationException> is thrown."}]}]},{"pos":[9043,9104],"content":"The activity that is scheduled when the activity is canceled.","needQuote":true,"needEscape":true,"nodes":[{"content":"The activity that is scheduled when the activity is canceled.","pos":[0,61]}]},{"pos":[9766,9778],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[10347,10499],"content":"Gets or sets the activity that is scheduled when compensation is performed on the <bpt id=\"p1\">&lt;xref href=\"System.Activities.Statements.CompensableActivity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets or sets the activity that is scheduled when compensation is performed on the <xref href=\"System.Activities.Statements.CompensableActivity\"></xref>."},{"pos":[10512,10849],"content":"CompensationHandler can be used to specify custom compensation logic for the <xref:System.Activities.Statements.CompensableActivity.Body%2A> of the <xref:System.Activities.Statements.CompensableActivity>.       This property is read-only at runtime. If the value is set at runtime, an <xref:System.InvalidOperationException> is thrown.","needQuote":false,"needEscape":true,"nodes":[{"content":"CompensationHandler can be used to specify custom compensation logic for the <xref:System.Activities.Statements.CompensableActivity.Body%2A> of the <xref:System.Activities.Statements.CompensableActivity>.       This property is read-only at runtime. If the value is set at runtime, an <xref:System.InvalidOperationException> is thrown.","pos":[0,335],"nodes":[{"content":"CompensationHandler can be used to specify custom compensation logic for the &lt;xref:System.Activities.Statements.CompensableActivity.Body%2A&gt; of the &lt;xref:System.Activities.Statements.CompensableActivity&gt;.","pos":[0,204],"source":"CompensationHandler can be used to specify custom compensation logic for the <xref:System.Activities.Statements.CompensableActivity.Body%2A> of the <xref:System.Activities.Statements.CompensableActivity>."},{"content":"This property is read-only at runtime.","pos":[211,249]},{"content":"If the value is set at runtime, an &lt;xref:System.InvalidOperationException&gt; is thrown.","pos":[250,335],"source":" If the value is set at runtime, an <xref:System.InvalidOperationException> is thrown."}]}]},{"pos":[11012,11151],"content":"The activity that is scheduled when compensation is performed on the <bpt id=\"p1\">&lt;xref href=\"System.Activities.Statements.CompensableActivity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The activity that is scheduled when compensation is performed on the <xref href=\"System.Activities.Statements.CompensableActivity\"></xref>."},{"pos":[11726,11880],"content":"Gets or sets the activity that is scheduled when confirmation is performed for this <bpt id=\"p1\">&lt;xref href=\"System.Activities.Statements.CompensableActivity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets or sets the activity that is scheduled when confirmation is performed for this <xref href=\"System.Activities.Statements.CompensableActivity\"></xref>."},{"pos":[11893,12230],"content":"ConfirmationHandler can be used to specify custom confirmation logic for the <xref:System.Activities.Statements.CompensableActivity.Body%2A> of the <xref:System.Activities.Statements.CompensableActivity>.       This property is read-only at runtime. If the value is set at runtime, an <xref:System.InvalidOperationException> is thrown.","needQuote":false,"needEscape":true,"nodes":[{"content":"ConfirmationHandler can be used to specify custom confirmation logic for the <xref:System.Activities.Statements.CompensableActivity.Body%2A> of the <xref:System.Activities.Statements.CompensableActivity>.       This property is read-only at runtime. If the value is set at runtime, an <xref:System.InvalidOperationException> is thrown.","pos":[0,335],"nodes":[{"content":"ConfirmationHandler can be used to specify custom confirmation logic for the &lt;xref:System.Activities.Statements.CompensableActivity.Body%2A&gt; of the &lt;xref:System.Activities.Statements.CompensableActivity&gt;.","pos":[0,204],"source":"ConfirmationHandler can be used to specify custom confirmation logic for the <xref:System.Activities.Statements.CompensableActivity.Body%2A> of the <xref:System.Activities.Statements.CompensableActivity>."},{"content":"This property is read-only at runtime.","pos":[211,249]},{"content":"If the value is set at runtime, an &lt;xref:System.InvalidOperationException&gt; is thrown.","pos":[250,335],"source":" If the value is set at runtime, an <xref:System.InvalidOperationException> is thrown."}]}]},{"pos":[12393,12534],"content":"The activity that is scheduled when confirmation is performed for this <bpt id=\"p1\">&lt;xref href=\"System.Activities.Statements.CompensableActivity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The activity that is scheduled when confirmation is performed for this <xref href=\"System.Activities.Statements.CompensableActivity\"></xref>."},{"pos":[13398,13410],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[14618,14630],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[14716,14728],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[15258,15405],"content":"Gets the collection of &lt;xref:System.WorkflowModel.Variable&gt; objects for this <bpt id=\"p1\">&lt;xref href=\"System.Activities.Statements.CompensableActivity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets the collection of <xref:System.WorkflowModel.Variable> objects for this <xref href=\"System.Activities.Statements.CompensableActivity\"></xref>."},{"pos":[15638,15780],"content":"The collection of &lt;xref:System.WorkflowModel.Variable&gt; objects for this <bpt id=\"p1\">&lt;xref href=\"System.Activities.Statements.CompensableActivity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The collection of <xref:System.WorkflowModel.Variable> objects for this <xref href=\"System.Activities.Statements.CompensableActivity\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Activities.Statements.CompensableActivity\n  id: CompensableActivity\n  children:\n  - System.Activities.Statements.CompensableActivity.#ctor\n  - System.Activities.Statements.CompensableActivity.Body\n  - System.Activities.Statements.CompensableActivity.CacheMetadata(System.Activities.NativeActivityMetadata)\n  - System.Activities.Statements.CompensableActivity.Cancel(System.Activities.NativeActivityContext)\n  - System.Activities.Statements.CompensableActivity.CancellationHandler\n  - System.Activities.Statements.CompensableActivity.CanInduceIdle\n  - System.Activities.Statements.CompensableActivity.CompensationHandler\n  - System.Activities.Statements.CompensableActivity.ConfirmationHandler\n  - System.Activities.Statements.CompensableActivity.Execute(System.Activities.NativeActivityContext)\n  - System.Activities.Statements.CompensableActivity.OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata,System.Activities.Activity)\n  - System.Activities.Statements.CompensableActivity.Variables\n  langs:\n  - csharp\n  name: CompensableActivity\n  nameWithType: CompensableActivity\n  fullName: System.Activities.Statements.CompensableActivity\n  type: Class\n  summary: An activity that supports compensation of its child activities.\n  remarks: CompensableActivity allows a developer to specify a <xref:System.Activities.Statements.CompensableActivity.Body%2A> activity that defines a long-running task that performs their core business logic. It also allows the developer to optionally specify a compensation and confirmation activity to schedule appropriate business logic in the event of errors or successful completion of the <xref:System.Activities.Statements.CompensableActivity.Body%2A>. Compensation and confirmation of a CompensableActivity is invoked by using the <xref:System.Activities.Statements.CompensationToken> returned by the CompensableActivity. <xref:System.Activities.Statements.CompensationToken> is an opaque, typed object returned as the <xref:System.Activities.WorkflowElement%601.Result%2A> argument after successful completion of a CompensableActivity activity’s <xref:System.Activities.Statements.CompensableActivity.Body%2A>. This <xref:System.Activities.Statements.CompensationToken> is used by the <xref:System.Activities.Statements.Confirm> and <xref:System.Activities.Statements.Compensate> activities to explicitly invoke confirmation and compensation of a CompensableActivity. CompensableActivity can be composed in a nested hierarchical fashion in the workflow. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Compensation Programming Model](http://msdn.microsoft.com/en-us/29e5442c-1df7-401d-a6ca-746e617cbf9f).\n  syntax:\n    content: >-\n      [System.Windows.Markup.ContentProperty(\"Body\")]\n\n      public sealed class CompensableActivity : System.Activities.NativeActivity<System.Activities.Statements.CompensationToken>\n  inheritance:\n  - System.Object\n  - System.Activities.Activity\n  - System.Activities.ActivityWithResult\n  - System.Activities.Activity`1\n  - System.Activities.NativeActivity`1\n  implements: []\n  inheritedMembers:\n  - System.Activities.Activity.CacheId\n  - System.Activities.Activity.Constraints\n  - System.Activities.Activity.DisplayName\n  - System.Activities.Activity.Id\n  - System.Activities.Activity.ShouldSerializeDisplayName\n  - System.Activities.Activity.ToString\n  - System.Activities.Activity`1.FromValue(`0)\n  - System.Activities.Activity`1.FromVariable(System.Activities.Variable)\n  - System.Activities.Activity`1.FromVariable(System.Activities.Variable{`0})\n  - System.Activities.Activity`1.op_Implicit(`0)\n  - System.Activities.Activity`1.op_Implicit(System.Activities.Variable)\n  - System.Activities.Activity`1.op_Implicit(System.Activities.Variable{`0})\n  - System.Activities.Activity`1.Result\n  - System.Activities.ActivityWithResult.ResultType\n  - System.Activities.NativeActivity`1.Abort(System.Activities.NativeActivityAbortContext)\n  - System.Activities.NativeActivity`1.CacheMetadata(System.Activities.ActivityMetadata)\n  - System.Activities.NativeActivity`1.Implementation\n  - System.Activities.NativeActivity`1.ImplementationVersion\n  - System.Activities.NativeActivity`1.OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.UpdateMapMetadata,System.Activities.Activity)\n  - System.Activities.NativeActivity`1.UpdateInstance(System.Activities.DynamicUpdate.NativeActivityUpdateContext)\n  platform:\n  - net462\n- uid: System.Activities.Statements.CompensableActivity.#ctor\n  id: '#ctor'\n  parent: System.Activities.Statements.CompensableActivity\n  langs:\n  - csharp\n  name: CompensableActivity()\n  nameWithType: CompensableActivity.CompensableActivity()\n  fullName: System.Activities.Statements.CompensableActivity.CompensableActivity()\n  type: Constructor\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Statements\n  summary: Initializes a new instance of the <xref href=\"System.Activities.Statements.CompensableActivity\"></xref> class.\n  syntax:\n    content: public CompensableActivity ();\n    parameters: []\n  overload: System.Activities.Statements.CompensableActivity.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Statements.CompensableActivity.Body\n  id: Body\n  parent: System.Activities.Statements.CompensableActivity\n  langs:\n  - csharp\n  name: Body\n  nameWithType: CompensableActivity.Body\n  fullName: System.Activities.Statements.CompensableActivity.Body\n  type: Property\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Statements\n  summary: Gets or sets the activity that is scheduled when the <xref href=\"System.Activities.Statements.CompensableActivity\"></xref> executes.\n  remarks: This property is read-only at runtime. If the value is set at runtime, an <xref:System.InvalidOperationException> is thrown.\n  syntax:\n    content: public System.Activities.Activity Body { get; set; }\n    return:\n      type: System.Activities.Activity\n      description: The activity that is scheduled when the <xref href=\"System.Activities.Statements.CompensableActivity\"></xref> executes.\n  overload: System.Activities.Statements.CompensableActivity.Body*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Statements.CompensableActivity.CacheMetadata(System.Activities.NativeActivityMetadata)\n  id: CacheMetadata(System.Activities.NativeActivityMetadata)\n  parent: System.Activities.Statements.CompensableActivity\n  langs:\n  - csharp\n  name: CacheMetadata(NativeActivityMetadata)\n  nameWithType: CompensableActivity.CacheMetadata(NativeActivityMetadata)\n  fullName: System.Activities.Statements.CompensableActivity.CacheMetadata(NativeActivityMetadata)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Statements\n  syntax:\n    content: protected override void CacheMetadata (System.Activities.NativeActivityMetadata metadata);\n    parameters:\n    - id: metadata\n      type: System.Activities.NativeActivityMetadata\n      description: To be added.\n  overload: System.Activities.Statements.CompensableActivity.CacheMetadata*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Statements.CompensableActivity.Cancel(System.Activities.NativeActivityContext)\n  id: Cancel(System.Activities.NativeActivityContext)\n  parent: System.Activities.Statements.CompensableActivity\n  langs:\n  - csharp\n  name: Cancel(NativeActivityContext)\n  nameWithType: CompensableActivity.Cancel(NativeActivityContext)\n  fullName: System.Activities.Statements.CompensableActivity.Cancel(NativeActivityContext)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Statements\n  syntax:\n    content: protected override void Cancel (System.Activities.NativeActivityContext context);\n    parameters:\n    - id: context\n      type: System.Activities.NativeActivityContext\n      description: To be added.\n  overload: System.Activities.Statements.CompensableActivity.Cancel*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Statements.CompensableActivity.CancellationHandler\n  id: CancellationHandler\n  parent: System.Activities.Statements.CompensableActivity\n  langs:\n  - csharp\n  name: CancellationHandler\n  nameWithType: CompensableActivity.CancellationHandler\n  fullName: System.Activities.Statements.CompensableActivity.CancellationHandler\n  type: Property\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Statements\n  summary: Gets or sets the activity that is scheduled when the activity is canceled.\n  remarks: \"CancellationHandler can be used to specify custom cancelation logic for the <xref:System.Activities.Statements.CompensableActivity.Body%2A> of the <xref:System.Activities.Statements.CompensableActivity>.  \\n  \\n This property is read-only at runtime. If the value is set at runtime, an <xref:System.InvalidOperationException> is thrown.\"\n  syntax:\n    content: public System.Activities.Activity CancellationHandler { get; set; }\n    return:\n      type: System.Activities.Activity\n      description: The activity that is scheduled when the activity is canceled.\n  overload: System.Activities.Statements.CompensableActivity.CancellationHandler*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Statements.CompensableActivity.CanInduceIdle\n  id: CanInduceIdle\n  parent: System.Activities.Statements.CompensableActivity\n  langs:\n  - csharp\n  name: CanInduceIdle\n  nameWithType: CompensableActivity.CanInduceIdle\n  fullName: System.Activities.Statements.CompensableActivity.CanInduceIdle\n  type: Property\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Statements\n  syntax:\n    content: protected override bool CanInduceIdle { get; }\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Activities.Statements.CompensableActivity.CanInduceIdle*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Statements.CompensableActivity.CompensationHandler\n  id: CompensationHandler\n  parent: System.Activities.Statements.CompensableActivity\n  langs:\n  - csharp\n  name: CompensationHandler\n  nameWithType: CompensableActivity.CompensationHandler\n  fullName: System.Activities.Statements.CompensableActivity.CompensationHandler\n  type: Property\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Statements\n  summary: Gets or sets the activity that is scheduled when compensation is performed on the <xref href=\"System.Activities.Statements.CompensableActivity\"></xref>.\n  remarks: \"CompensationHandler can be used to specify custom compensation logic for the <xref:System.Activities.Statements.CompensableActivity.Body%2A> of the <xref:System.Activities.Statements.CompensableActivity>.  \\n  \\n This property is read-only at runtime. If the value is set at runtime, an <xref:System.InvalidOperationException> is thrown.\"\n  syntax:\n    content: public System.Activities.Activity CompensationHandler { get; set; }\n    return:\n      type: System.Activities.Activity\n      description: The activity that is scheduled when compensation is performed on the <xref href=\"System.Activities.Statements.CompensableActivity\"></xref>.\n  overload: System.Activities.Statements.CompensableActivity.CompensationHandler*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Statements.CompensableActivity.ConfirmationHandler\n  id: ConfirmationHandler\n  parent: System.Activities.Statements.CompensableActivity\n  langs:\n  - csharp\n  name: ConfirmationHandler\n  nameWithType: CompensableActivity.ConfirmationHandler\n  fullName: System.Activities.Statements.CompensableActivity.ConfirmationHandler\n  type: Property\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Statements\n  summary: Gets or sets the activity that is scheduled when confirmation is performed for this <xref href=\"System.Activities.Statements.CompensableActivity\"></xref>.\n  remarks: \"ConfirmationHandler can be used to specify custom confirmation logic for the <xref:System.Activities.Statements.CompensableActivity.Body%2A> of the <xref:System.Activities.Statements.CompensableActivity>.  \\n  \\n This property is read-only at runtime. If the value is set at runtime, an <xref:System.InvalidOperationException> is thrown.\"\n  syntax:\n    content: public System.Activities.Activity ConfirmationHandler { get; set; }\n    return:\n      type: System.Activities.Activity\n      description: The activity that is scheduled when confirmation is performed for this <xref href=\"System.Activities.Statements.CompensableActivity\"></xref>.\n  overload: System.Activities.Statements.CompensableActivity.ConfirmationHandler*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Statements.CompensableActivity.Execute(System.Activities.NativeActivityContext)\n  id: Execute(System.Activities.NativeActivityContext)\n  parent: System.Activities.Statements.CompensableActivity\n  langs:\n  - csharp\n  name: Execute(NativeActivityContext)\n  nameWithType: CompensableActivity.Execute(NativeActivityContext)\n  fullName: System.Activities.Statements.CompensableActivity.Execute(NativeActivityContext)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Statements\n  syntax:\n    content: protected override void Execute (System.Activities.NativeActivityContext context);\n    parameters:\n    - id: context\n      type: System.Activities.NativeActivityContext\n      description: To be added.\n  overload: System.Activities.Statements.CompensableActivity.Execute*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Statements.CompensableActivity.OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata,System.Activities.Activity)\n  id: OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata,System.Activities.Activity)\n  parent: System.Activities.Statements.CompensableActivity\n  langs:\n  - csharp\n  name: OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata,Activity)\n  nameWithType: CompensableActivity.OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata,Activity)\n  fullName: System.Activities.Statements.CompensableActivity.OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata,Activity)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Statements\n  syntax:\n    content: protected override void OnCreateDynamicUpdateMap (System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata metadata, System.Activities.Activity originalActivity);\n    parameters:\n    - id: metadata\n      type: System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata\n      description: To be added.\n    - id: originalActivity\n      type: System.Activities.Activity\n      description: To be added.\n  overload: System.Activities.Statements.CompensableActivity.OnCreateDynamicUpdateMap*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Statements.CompensableActivity.Variables\n  id: Variables\n  parent: System.Activities.Statements.CompensableActivity\n  langs:\n  - csharp\n  name: Variables\n  nameWithType: CompensableActivity.Variables\n  fullName: System.Activities.Statements.CompensableActivity.Variables\n  type: Property\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Statements\n  summary: Gets the collection of <xref:System.WorkflowModel.Variable> objects for this <xref href=\"System.Activities.Statements.CompensableActivity\"></xref>.\n  syntax:\n    content: public System.Collections.ObjectModel.Collection<System.Activities.Variable> Variables { get; }\n    return:\n      type: System.Collections.ObjectModel.Collection{System.Activities.Variable}\n      description: The collection of <xref:System.WorkflowModel.Variable> objects for this <xref href=\"System.Activities.Statements.CompensableActivity\"></xref>.\n  overload: System.Activities.Statements.CompensableActivity.Variables*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Activities.NativeActivity`1\n  isExternal: false\n  name: System.Activities.NativeActivity<System.Activities.Statements.CompensationToken>\n- uid: System.Activities.Statements.CompensableActivity.#ctor\n  parent: System.Activities.Statements.CompensableActivity\n  isExternal: false\n  name: CompensableActivity()\n  nameWithType: CompensableActivity.CompensableActivity()\n  fullName: System.Activities.Statements.CompensableActivity.CompensableActivity()\n- uid: System.Activities.Statements.CompensableActivity.Body\n  parent: System.Activities.Statements.CompensableActivity\n  isExternal: false\n  name: Body\n  nameWithType: CompensableActivity.Body\n  fullName: System.Activities.Statements.CompensableActivity.Body\n- uid: System.Activities.Activity\n  parent: System.Activities\n  isExternal: false\n  name: Activity\n  nameWithType: Activity\n  fullName: System.Activities.Activity\n- uid: System.Activities.Statements.CompensableActivity.CacheMetadata(System.Activities.NativeActivityMetadata)\n  parent: System.Activities.Statements.CompensableActivity\n  isExternal: false\n  name: CacheMetadata(NativeActivityMetadata)\n  nameWithType: CompensableActivity.CacheMetadata(NativeActivityMetadata)\n  fullName: System.Activities.Statements.CompensableActivity.CacheMetadata(NativeActivityMetadata)\n- uid: System.Activities.NativeActivityMetadata\n  parent: System.Activities\n  isExternal: false\n  name: NativeActivityMetadata\n  nameWithType: NativeActivityMetadata\n  fullName: System.Activities.NativeActivityMetadata\n- uid: System.Activities.Statements.CompensableActivity.Cancel(System.Activities.NativeActivityContext)\n  parent: System.Activities.Statements.CompensableActivity\n  isExternal: false\n  name: Cancel(NativeActivityContext)\n  nameWithType: CompensableActivity.Cancel(NativeActivityContext)\n  fullName: System.Activities.Statements.CompensableActivity.Cancel(NativeActivityContext)\n- uid: System.Activities.NativeActivityContext\n  parent: System.Activities\n  isExternal: false\n  name: NativeActivityContext\n  nameWithType: NativeActivityContext\n  fullName: System.Activities.NativeActivityContext\n- uid: System.Activities.Statements.CompensableActivity.CancellationHandler\n  parent: System.Activities.Statements.CompensableActivity\n  isExternal: false\n  name: CancellationHandler\n  nameWithType: CompensableActivity.CancellationHandler\n  fullName: System.Activities.Statements.CompensableActivity.CancellationHandler\n- uid: System.Activities.Statements.CompensableActivity.CanInduceIdle\n  parent: System.Activities.Statements.CompensableActivity\n  isExternal: false\n  name: CanInduceIdle\n  nameWithType: CompensableActivity.CanInduceIdle\n  fullName: System.Activities.Statements.CompensableActivity.CanInduceIdle\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Activities.Statements.CompensableActivity.CompensationHandler\n  parent: System.Activities.Statements.CompensableActivity\n  isExternal: false\n  name: CompensationHandler\n  nameWithType: CompensableActivity.CompensationHandler\n  fullName: System.Activities.Statements.CompensableActivity.CompensationHandler\n- uid: System.Activities.Statements.CompensableActivity.ConfirmationHandler\n  parent: System.Activities.Statements.CompensableActivity\n  isExternal: false\n  name: ConfirmationHandler\n  nameWithType: CompensableActivity.ConfirmationHandler\n  fullName: System.Activities.Statements.CompensableActivity.ConfirmationHandler\n- uid: System.Activities.Statements.CompensableActivity.Execute(System.Activities.NativeActivityContext)\n  parent: System.Activities.Statements.CompensableActivity\n  isExternal: false\n  name: Execute(NativeActivityContext)\n  nameWithType: CompensableActivity.Execute(NativeActivityContext)\n  fullName: System.Activities.Statements.CompensableActivity.Execute(NativeActivityContext)\n- uid: System.Activities.Statements.CompensableActivity.OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata,System.Activities.Activity)\n  parent: System.Activities.Statements.CompensableActivity\n  isExternal: false\n  name: OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata,Activity)\n  nameWithType: CompensableActivity.OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata,Activity)\n  fullName: System.Activities.Statements.CompensableActivity.OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata,Activity)\n- uid: System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata\n  parent: System.Activities.DynamicUpdate\n  isExternal: false\n  name: NativeActivityUpdateMapMetadata\n  nameWithType: NativeActivityUpdateMapMetadata\n  fullName: System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata\n- uid: System.Activities.Statements.CompensableActivity.Variables\n  parent: System.Activities.Statements.CompensableActivity\n  isExternal: false\n  name: Variables\n  nameWithType: CompensableActivity.Variables\n  fullName: System.Activities.Statements.CompensableActivity.Variables\n- uid: System.Collections.ObjectModel.Collection{System.Activities.Variable}\n  parent: System.Collections.ObjectModel\n  isExternal: true\n  name: Collection<Variable>\n  nameWithType: Collection<Variable>\n  fullName: System.Collections.ObjectModel.Collection<System.Activities.Variable>\n  spec.csharp:\n  - uid: System.Collections.ObjectModel.Collection`1\n    name: Collection\n    nameWithType: Collection\n    fullName: Collection<System.Activities.Variable>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Activities.Variable\n    name: Variable\n    nameWithType: Variable\n    fullName: Variable\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Activities.Statements.CompensableActivity.#ctor*\n  parent: System.Activities.Statements.CompensableActivity\n  isExternal: false\n  name: CompensableActivity\n  nameWithType: CompensableActivity.CompensableActivity\n- uid: System.Activities.Statements.CompensableActivity.Body*\n  parent: System.Activities.Statements.CompensableActivity\n  isExternal: false\n  name: Body\n  nameWithType: CompensableActivity.Body\n- uid: System.Activities.Statements.CompensableActivity.CacheMetadata*\n  parent: System.Activities.Statements.CompensableActivity\n  isExternal: false\n  name: CacheMetadata\n  nameWithType: CompensableActivity.CacheMetadata\n- uid: System.Activities.Statements.CompensableActivity.Cancel*\n  parent: System.Activities.Statements.CompensableActivity\n  isExternal: false\n  name: Cancel\n  nameWithType: CompensableActivity.Cancel\n- uid: System.Activities.Statements.CompensableActivity.CancellationHandler*\n  parent: System.Activities.Statements.CompensableActivity\n  isExternal: false\n  name: CancellationHandler\n  nameWithType: CompensableActivity.CancellationHandler\n- uid: System.Activities.Statements.CompensableActivity.CanInduceIdle*\n  parent: System.Activities.Statements.CompensableActivity\n  isExternal: false\n  name: CanInduceIdle\n  nameWithType: CompensableActivity.CanInduceIdle\n- uid: System.Activities.Statements.CompensableActivity.CompensationHandler*\n  parent: System.Activities.Statements.CompensableActivity\n  isExternal: false\n  name: CompensationHandler\n  nameWithType: CompensableActivity.CompensationHandler\n- uid: System.Activities.Statements.CompensableActivity.ConfirmationHandler*\n  parent: System.Activities.Statements.CompensableActivity\n  isExternal: false\n  name: ConfirmationHandler\n  nameWithType: CompensableActivity.ConfirmationHandler\n- uid: System.Activities.Statements.CompensableActivity.Execute*\n  parent: System.Activities.Statements.CompensableActivity\n  isExternal: false\n  name: Execute\n  nameWithType: CompensableActivity.Execute\n- uid: System.Activities.Statements.CompensableActivity.OnCreateDynamicUpdateMap*\n  parent: System.Activities.Statements.CompensableActivity\n  isExternal: false\n  name: OnCreateDynamicUpdateMap\n  nameWithType: CompensableActivity.OnCreateDynamicUpdateMap\n- uid: System.Activities.Statements.CompensableActivity.Variables*\n  parent: System.Activities.Statements.CompensableActivity\n  isExternal: false\n  name: Variables\n  nameWithType: CompensableActivity.Variables\n"}