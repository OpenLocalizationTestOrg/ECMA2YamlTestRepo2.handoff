<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">94c728563c3b791418936bc2c17f1fbb0a19e77e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Web.Compilation.BuildProvider.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">35f049f7a11275f63b9113ffe7d0b8f1410f4eff</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">66c7df0e60cd5d48bb48d36b0a44ce6013276c7e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Defines a set of properties and methods for generating source code within the ASP.NET build environment.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This class is abstract.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The ASP.NET build environment uses BuildProvider objects to generate source code for different file types within an application.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Classes derived from BuildProvider predominantly provide source code for files, Web pages, resources, and other custom items.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Typically, you do not create an instance of the BuildProvider class directly.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Instead, you implement a class that derives from BuildProvider, and configure the BuildProvider implementation for use within the ASP.NET build environment.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Instances of the BuildProvider class are used with &lt;xref:System.Web.Compilation.AssemblyBuilder&gt; objects to build one or more files into a compiled assembly.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A BuildProvider instance generates source code in the appropriate language for individual files, and the &lt;xref:System.Web.Compilation.AssemblyBuilder&gt; object combines the source contributed by each BuildProvider instance into a single assembly.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The ASP.NET build environment uses instances of the BuildProvider class to build files within an application.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Web.Compilation.BuildProvider.VirtualPath%2A&gt; property of the BuildProvider class indicates the path of the file to be built.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The file extension of each file within an application is mapped to a corresponding build provider.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The ASP.NET build environment initializes a BuildProvider instance for each file based on the file extension, and uses the BuildProvider methods to generate source code for the file.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The ASP.NET build environment passes an &lt;xref:System.Web.Compilation.AssemblyBuilder&gt; object based on the preferred compiler language and the context of the file to the BuildProvider methods when building an assembly from one or more files, so that the BuildProvider instance can contribute source code for its file to the overall assembly.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To define custom build actions for a file type within an ASP.NET application, you must derive a class from BuildProvider, implement members within the derived class for building the file type, and configure the build provider for the corresponding file extension within the application configuration file.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The  specifies the file extension for supported files, and whether the build provider supports code files, Web files, resource files or all files.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`type`</ph> attribute to specify the fully qualified type name of the build provider implementation.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Use the &lt;xref:System.Web.Compilation.BuildProviderAppliesToAttribute&gt; class to specify whether the build provider applies to files in the App_Code directory, to files in a Web content directory, to global or local resources, or to all files.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`extension`</ph> attribute to specify the file extension used to identify files that the BuildProvider class supports.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Use the &lt;xref:System.Web.Configuration.BuildProviderCollection&gt; class to examine build providers in a configuration file.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For more information about configuring a build provider, see <bpt id="p1">[</bpt>buildProviders Element for compilation (ASP.NET Settings Schema)<ept id="p1">](http://msdn.microsoft.com/en-us/40fa889d-5412-487a-b6a9-21eb011c2384)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To implement a build provider that generates source code for a custom file type, derive a class from BuildProvider, and override the &lt;xref:System.Web.Compilation.BuildProvider.GenerateCode%2A&gt; method to generate source code for the supported file type.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The generated source is added to the &lt;xref:System.Web.Compilation.AssemblyBuilder&gt; object in the form of a CodeDOM graph, or as content that represents a physical source code file.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If the build provider requires a specific programming language, override the &lt;xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A&gt; property to return a &lt;xref:System.Web.Compilation.CompilerType&gt; object for the supported programming language.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If the build provider does not require a specific programming language, do not override the &lt;xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A&gt; property; use the base class implementation, which indicates that the build provider can use any .NET Framework language, such as Visual Basic or C#.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>To implement a build provider that generates source code for Web content, derive a class from BuildProvider and override the &lt;xref:System.Web.Compilation.BuildProvider.GetGeneratedType%2A&gt; method to return the &lt;xref:System.Type&gt; for the class generated by BuildProvider.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Override the &lt;xref:System.Web.Compilation.BuildProvider.GenerateCode%2A&gt; method to generate source code for the type provided by the supported file.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Adding a customized BuildProvider class to the Web.config file works in an ASP.NET Web site but does not work in an ASP.NET Web application project.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In a Web application project, the code that is generated by the BuildProvider class cannot be included in the application.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>ASP.NET Web Application Project Precompilation Overview<ept id="p1">](http://msdn.microsoft.com/en-us/b940abbd-178d-4570-b441-52914fa7b887)</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Web.Compilation.BuildProvider"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Because the &lt;xref:System.Web.Compilation.BuildProvider&gt; class is abstract, you cannot create an instance of &lt;xref:System.Web.Compilation.BuildProvider&gt; directly using the constructor.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>When deriving from the &lt;xref:System.Web.Compilation.BuildProvider&gt; class, override the constructor to implement custom initialization actions for your build provider implementation.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Represents the compiler type used by a build provider to generate source code for a custom file type.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Use the CodeCompilerType property to provide the settings for compiling source code for an implementation of &lt;xref:System.Web.Compilation.BuildProvider&gt;.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The CodeCompilerType property is <ph id="ph1">`null`</ph> if the build provider does not require a specific code language for generating and compiling source code.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>To set the value for a &lt;xref:System.Web.Compilation.CompilerType&gt; object within a build provider implementation, use the &lt;xref:System.Web.Compilation.BuildProvider.GetDefaultCompilerType%2A&gt; or &lt;xref:System.Web.Compilation.BuildProvider.GetDefaultCompilerTypeForLanguage%2A&gt; method.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Web.Compilation.CompilerType.CodeDomProviderType%2A&gt; property specifies the &lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt; implementation that is used to generate and compile source code for a build provider.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Web.Compilation.CompilerType.CompilerParameters%2A&gt; property defines the settings that are used to compile the source code into an assembly.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>A read-only <bpt id="p1">&lt;xref href="System.Web.Compilation.CompilerType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> representing the code generator, code compiler, and compiler settings used to build source code for the virtual path.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The base class returns <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Generates source code for the virtual path of the build provider, and adds the source code to a specified assembly builder.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>To implement a build provider that generates source code for a custom file type, derive a class from the &lt;xref:System.Web.Compilation.BuildProvider&gt; class, and override the GenerateCode method to generate source code for the supported file type.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Typically, a build provider's GenerateCode implementation reads the &lt;xref:System.Web.Compilation.BuildProvider.VirtualPath%2A&gt; property, parses the contents, and adds the generated source code to the specified &lt;xref:System.Web.Compilation.AssemblyBuilder&gt; object.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>You can contribute source code to the assembly in the form of a &lt;xref:System.IO.TextWriter&gt; object or a CodeDOM graph.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>To add source code to the assembly through a &lt;xref:System.IO.TextWriter&gt; object, use the &lt;xref:System.Web.Compilation.AssemblyBuilder.CreateCodeFile%2A&gt; method.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>To add source code in a CodeDOM graph to the assembly, use the &lt;xref:System.Web.Compilation.AssemblyBuilder.AddCodeCompileUnit%2A&gt; method.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>If the build provider generates source code in a specific programming language, you must override the &lt;xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A&gt; property to return a &lt;xref:System.Web.Compilation.CompilerType&gt; object for the supported programming language.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The assembly builder that references the source code generated by the build provider.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Represents the container for the generated CodeDOM graph.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>This method can be used through the &lt;xref:System.Web.Compilation.ClientBuildManager&gt; class for syntax highlighting and designer support in Visual Studio.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>When this method returns, contains a dictionary that contains all associated line numbers and line pragmas of the source code.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>This parameter is passed uninitialized.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The container for the CodeDOM graph that is generated by the <bpt id="p1">&lt;xref href="System.Web.Compilation.BuildProvider"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> instance.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Generates a string to be persisted in the compiled assembly.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Web.Compilation.BuildManager.GetCompiledCustomString%2A&gt; method of a &lt;xref:System.Web.Compilation.BuildManager&gt; object creates an instance of a build provider for an input virtual path, and calls the GetCustomString method on the &lt;xref:System.Web.Compilation.BuildProvider&gt; object.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The base &lt;xref:System.Web.Compilation.BuildProvider&gt; class returns <ph id="ph1">`null`</ph> for the GetCustomString method, indicating that GetCustomString is not implemented.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Certain build provider implementations can implement GetCustomString in place of the &lt;xref:System.Web.Compilation.BuildProvider.GetGeneratedType%2A&gt; method.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.Web.Compilation.BuildProvider&gt; object typically uses &lt;xref:System.Web.Compilation.BuildProvider.GetGeneratedType%2A&gt; to return a &lt;xref:System.Type&gt; object for a virtual path.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>However, the GetCustomString method can be used to indicate that a &lt;xref:System.Web.Compilation.BuildProvider&gt; object can generate multiple types from a virtual path.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The compilation results for the build provider's virtual path.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>A string to be persisted in the build environment, or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the <bpt id="p2">&lt;xref href="System.Web.Compilation.BuildProvider"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> instance does not implement GetCustomString.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Returns the compiler settings for the default language in the application.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Use the GetDefaultCompilerType method to examine the default compiler type for a build provider.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Use the &lt;xref:System.Web.Compilation.BuildProvider.GetDefaultCompilerTypeForLanguage%2A&gt; method to examine the compiler type configured in a build provider for a specific language name.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The base &lt;xref:System.Web.Compilation.BuildProvider&gt; class determines the default compiler type using the <ph id="ph1">`defaultLanguage`</ph> attribute value in the  section of the application configuration file.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>If there is no default language setting in the compilation section, the default compiler type is set using the &lt;xref:Microsoft.VisualBasic.VBCodeProvider&gt; language provider.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>When deriving from the &lt;xref:System.Web.Compilation.BuildProvider&gt; class, you can use GetDefaultCompilerType to set the &lt;xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A&gt; property within your implementation.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Web.Compilation.CompilerType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that represents the compiler settings for the default language in the application.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The base class returns the default compiler based on the application configuration file.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Returns the compiler settings for the build provider based on the specified language.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Use the GetDefaultCompilerTypeForLanguage method to examine the compiler type configured in the build provider for a specific language name.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Use the &lt;xref:System.Web.Compilation.BuildProvider.GetDefaultCompilerType%2A&gt; method to examine the default compiler type for a build provider.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The base &lt;xref:System.Web.Compilation.BuildProvider&gt; class determines the default compiler type using the &lt;xref:System.Web.Configuration.Compiler&gt; elements in the &lt;xref:System.Web.Configuration.CompilationSection.Compilers%2A&gt; property of the &lt;xref:System.Web.Configuration.CompilationSection&gt; object for the configuration file.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>This is equivalent to examining the  elements in the  and the  elements in the  sections of the configuration file.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>For example, for the <ph id="ph1">`language`</ph> value VB, the base class method returns a &lt;xref:System.Web.Compilation.CompilerType&gt; object that corresponds to the configured settings for an instance of &lt;xref:Microsoft.VisualBasic.VBCodeProvider?displayProperty=fullName&gt;.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>When you derive from the &lt;xref:System.Web.Compilation.BuildProvider&gt; class, you can use GetDefaultCompilerTypeForLanguage to set the &lt;xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A&gt; property value for the language supported by your implementation.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>A code language name.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Web.Compilation.CompilerType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that represents the compiler settings for the build provider based on the specified language.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The base class returns the default compiler settings for the language based on the application configuration file.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;language&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;language&lt;/code&gt;</ph> does not match a configured compiler for the build provider.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Returns a type generated by the build provider from the virtual path.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>To implement a build provider that generates source code for Web content such as .aspx files, derive a class from the &lt;xref:System.Web.Compilation.BuildProvider&gt; class and override the GetGeneratedType method to return the type generated by the build provider.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The ASP.NET build system compiles files for each build provider, and generates a &lt;xref:System.CodeDom.Compiler.CompilerResults&gt; object, which is passed to the GetGeneratedType method.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Typically, a build provider's GetGeneratedType implementation uses the &lt;xref:System.Reflection.Assembly.GetType%2A&gt; method on the &lt;xref:System.CodeDom.Compiler.CompilerResults.CompiledAssembly%2A&gt; property of the input <ph id="ph1">`results`</ph> object to return the provided type.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The compilation results for the build provider's virtual path.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The type that is generated by the build provider for the virtual path.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The base class returns <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Returns a value indicating actions required when a virtual path is built.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The GetResultFlags method is used by the ASP.NET build environment when using instances of the &lt;xref:System.Web.Compilation.BuildProvider&gt; class to build files and load the compiled assemblies.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The base &lt;xref:System.Web.Compilation.BuildProvider&gt; class method returns the &lt;xref:System.Web.Compilation.BuildProviderResultFlags&gt; field value, indicating that no special action is required when the virtual path is built.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>When deriving from the &lt;xref:System.Web.Compilation.BuildProvider&gt; class, you can implement the GetResultFlags method to return a different &lt;xref:System.Web.Compilation.BuildProviderResultFlags&gt; value for your custom file type or virtual path.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>For example, if a rebuild of your virtual path requires the containing &lt;xref:System.AppDomain&gt; object to be reloaded, you can return the &lt;xref:System.Web.Compilation.BuildProviderResultFlags&gt; enumeration value from your GetResultFlags method.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The compilation results for the build provider's virtual path.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Web.Compilation.BuildProviderResultFlags"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value indicating actions required after the virtual path is built within the ASP.NET build environment.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Opens a text reader for reading from the virtual path of the current build provider object.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Use the &lt;xref:System.IO.TextReader.Read%2A&gt; method on the returned &lt;xref:System.IO.TextReader&gt; object to read the contents of the &lt;xref:System.Web.Compilation.BuildProvider.VirtualPath%2A&gt; property for a &lt;xref:System.Web.Compilation.BuildProvider&gt; object.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>After calling the OpenReader method, you must use the &lt;xref:System.IO.TextReader.Close%2A&gt; method to close the &lt;xref:System.IO.TextReader&gt; object and free associated system resources.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>An open &lt;xref:System.IO.TextReader&gt; that can be used to read the contents of the &lt;xref:System.Web.Compilation.BuildProvider.VirtualPath*&gt;.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Opens a text reader for reading from a specified virtual path.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Use the &lt;xref:System.IO.TextReader.Read%2A&gt; method on the returned &lt;xref:System.IO.TextReader&gt; object to read the contents of the virtual path.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>After calling the &lt;xref:System.Web.Compilation.BuildProvider.OpenReader%2A&gt; method, you must use the &lt;xref:System.IO.TextReader.Close%2A&gt; method to close the &lt;xref:System.IO.TextReader&gt; object and free associated system resources.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The virtual path to read.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>An open &lt;xref:System.IO.TextReader&gt; that can be used to read the contents of the specified virtual path.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Opens a stream for reading the virtual path of the current build provider object.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Use the &lt;xref:System.IO.Stream.Read%2A&gt; method on the returned &lt;xref:System.IO.Stream&gt; object to read the contents of the virtual path for the &lt;xref:System.Web.Compilation.BuildProvider&gt; object.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>After calling the OpenStream method, you must use the &lt;xref:System.IO.Stream.Close%2A&gt; method to close the &lt;xref:System.IO.Stream&gt; object and free associated system resources.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>An open &lt;xref:System.IO.Stream&gt; that can be used to read the contents of the &lt;xref:System.Web.Compilation.BuildProvider.VirtualPath*&gt;.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Opens a stream for reading from a specified virtual path.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Use the &lt;xref:System.IO.Stream.Read%2A&gt; method on the returned &lt;xref:System.IO.Stream&gt; object to read the contents of the virtual path.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>After calling the &lt;xref:System.Web.Compilation.BuildProvider.OpenStream%2A&gt; method, you must use the &lt;xref:System.IO.Stream.Close%2A&gt; method to close the &lt;xref:System.IO.Stream&gt; object and free associated system resources.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The virtual path to read.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>An open &lt;xref:System.IO.Stream&gt; that can be used to read the contents of the specified virtual path.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, enables you to review compiler error messages so that you can modify them to provide more information.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>You typically override this method so that you can modify compiler errors before they are displayed in order to make the error text more helpful to the user.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>This is useful in scenarios where you know the context of certain errors and can provide information to the user about how to fix them.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The original compiler error message is usually specific to a particular language construct and might not make the real cause or solution obvious to the user.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>You can access the errors by using the &lt;xref:System.CodeDom.Compiler.CompilerResults&gt; object that is passed to the method.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Compiler results.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Represents the assemblies to compile with the source generated by the build provider.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The ASP.NET build environment initializes the collection of assemblies that are available for reference by the build provider.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The source code generated by a build provider can use public types in the referenced assemblies.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The referenced assembly collection consists of other assemblies built in the ASP.NET application, and assemblies listed in the  element in the configuration file.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>If the build provider generates source code that references additional assemblies, the build provider adds the additional assemblies using the &lt;xref:System.Web.Compilation.AssemblyBuilder.AddAssemblyReference%2A&gt; method.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The ASP.NET build environment resolves external types during assembly compilation using both the referenced assemblies added by build providers and the default collection of assemblies available for reference.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The ReferencedAssemblies collection does not include assemblies that are added for reference by other build providers through the &lt;xref:System.Web.Compilation.AssemblyBuilder.AddAssemblyReference%2A&gt; method.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>A read-only collection of assemblies that can be referenced by the source code generated by the build provider.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Registers a build provider.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>You can use this method to register build providers instead of defining them in the Web.config file.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>For more information about build providers, see the &lt;xref:System.Web.Compilation.BuildProvider&gt; class and <bpt id="p1">[</bpt>buildProviders Element for compilation (ASP.NET Settings Schema)<ept id="p1">](http://msdn.microsoft.com/en-us/40fa889d-5412-487a-b6a9-21eb011c2384)</ept>.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The file-name extension that the build provider is for.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The build provider class.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Represents the file to be built by this build provider implementation.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The virtual path of a &lt;xref:System.Web.Compilation.BuildProvider&gt; object is the path to the file that is being compiled by the build provider.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>For example, if you have configured a custom &lt;xref:System.Web.Compilation.BuildProvider&gt; class to build all files in the Web site with the custom extension of .abc, if your Web site is named WebSite1, and the Web site contains a file named Example.abc, the VirtualPath property contains the value <ph id="ph1">`/WebSite1/Example.abc`</ph>.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The file extension of each file within the application determines the file type, and the corresponding build provider for the file type.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The ASP.NET build environment initializes a &lt;xref:System.Web.Compilation.BuildProvider&gt; object for each file based on the file type, and uses the &lt;xref:System.Web.Compilation.BuildProvider&gt; methods to generate source for each file.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>For more information about configuring a build provider, see <bpt id="p1">[</bpt>buildProviders Element for compilation (ASP.NET Settings Schema)<ept id="p1">](http://msdn.microsoft.com/en-us/40fa889d-5412-487a-b6a9-21eb011c2384)</ept>.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>A read-only string that specifies the virtual path of a file to be compiled by this build provider.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Represents a collection of virtual paths that must be built before the build provider generates code.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The VirtualPathDependencies property is a collection of virtual paths that must be compiled before the &lt;xref:System.Web.Compilation.BuildProvider&gt; instance generates source code.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The assemblies from the virtual paths in VirtualPathDependencies are added as references to the compilation for the &lt;xref:System.Web.Compilation.BuildProvider&gt; instance.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>A read-only collection of strings, representing the virtual paths that this instance of the build provider is dependent on.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>