{"nodes":[{"pos":[926,1002],"content":"Provides methods for working with the runtime metadata for an activity tree.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides methods for working with the runtime metadata for an activity tree.","pos":[0,76]}]},{"pos":[1659,1719],"content":"Caches the runtime metadata for the specified activity tree.","needQuote":true,"needEscape":true,"nodes":[{"content":"Caches the runtime metadata for the specified activity tree.","pos":[0,60]}]},{"pos":[1916,1955],"content":"The root activity of the activity tree.","needQuote":true,"needEscape":true,"nodes":[{"content":"The root activity of the activity tree.","pos":[0,39]}]},{"pos":[2739,2831],"content":"Caches the runtime metadata for the specified activity tree using the specified environment.","needQuote":true,"needEscape":true,"nodes":[{"content":"Caches the runtime metadata for the specified activity tree using the specified environment.","pos":[0,92]}]},{"pos":[3092,3131],"content":"The root activity of the activity tree.","needQuote":true,"needEscape":true,"nodes":[{"content":"The root activity of the activity tree.","pos":[0,39]}]},{"pos":[3236,3286],"content":"The environment associated with the activity tree.","needQuote":true,"needEscape":true,"nodes":[{"content":"The environment associated with the activity tree.","pos":[0,50]}]},{"pos":[3889,3947],"content":"Specifies whether the service can include idle activities.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies whether the service can include idle activities.","pos":[0,58]}]},{"pos":[4136,4149],"content":"The activity.","needQuote":true,"needEscape":true,"nodes":[{"content":"The activity.","pos":[0,13]}]},{"pos":[4208,4387],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the service can include idle activities; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"></xref> if the service can include idle activities; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[4990,5123],"content":"Returns an &lt;xref:System.Collections.Generic.IEnumerable%601&gt; that represents all activities associated with the input activity.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an <ph id=\"ph1\">&amp;lt;</ph>xref:System.Collections.Generic.IEnumerable%601<ph id=\"ph2\">&amp;gt;</ph> that represents all activities associated with the input activity.","pos":[0,133],"source":"Returns an &lt;xref:System.Collections.Generic.IEnumerable%601&gt; that represents all activities associated with the input activity."}]},{"pos":[5136,5977],"content":"The enumeration contains all child activities, delegate handlers, variable defaults, and argument expressions. If the input activity is `null`, an <xref:System.ArgumentNullException> is thrown. The activity tree must remain unmodified and <xref:System.Activities.WorkflowInspectionServices.CacheMetadata%2A> must not be called while the tree is being enumerated or else an <xref:System.InvalidOperationException> is thrown when <xref:System.Collections.IEnumerator.MoveNext%2A> is called.       Calling this method causes a full cache metadata to occur. If you make changes to the workflow after calling this method, you must call the <xref:System.Activities.Validation.ActivityValidationServices> <xref:System.Activities.Validation.ActivityValidationServices.Validate%2A> method after making the changes in order to re-cache the metadata.","needQuote":false,"needEscape":true,"nodes":[{"content":"The enumeration contains all child activities, delegate handlers, variable defaults, and argument expressions.","pos":[0,110]},{"content":"If the input activity is <ph id=\"ph1\">`null`</ph>, an &lt;xref:System.ArgumentNullException&gt; is thrown.","pos":[111,193],"source":" If the input activity is `null`, an <xref:System.ArgumentNullException> is thrown."},{"content":"The activity tree must remain unmodified and &lt;xref:System.Activities.WorkflowInspectionServices.CacheMetadata%2A&gt; must not be called while the tree is being enumerated or else an &lt;xref:System.InvalidOperationException&gt; is thrown when &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; is called.","pos":[194,488],"source":" The activity tree must remain unmodified and <xref:System.Activities.WorkflowInspectionServices.CacheMetadata%2A> must not be called while the tree is being enumerated or else an <xref:System.InvalidOperationException> is thrown when <xref:System.Collections.IEnumerator.MoveNext%2A> is called."},{"content":"Calling this method causes a full cache metadata to occur.","pos":[495,553]},{"content":"If you make changes to the workflow after calling this method, you must call the &lt;xref:System.Activities.Validation.ActivityValidationServices&gt; &lt;xref:System.Activities.Validation.ActivityValidationServices.Validate%2A&gt; method after making the changes in order to re-cache the metadata.","pos":[554,839],"source":" If you make changes to the workflow after calling this method, you must call the <xref:System.Activities.Validation.ActivityValidationServices> <xref:System.Activities.Validation.ActivityValidationServices.Validate%2A> method after making the changes in order to re-cache the metadata."}]},{"pos":[6229,6247],"content":"The root activity.","needQuote":true,"needEscape":true,"nodes":[{"content":"The root activity.","pos":[0,18]}]},{"pos":[6358,6439],"content":"An enumeration that represents all activities associated with the input activity.","needQuote":true,"needEscape":true,"nodes":[{"content":"An enumeration that represents all activities associated with the input activity.","pos":[0,81]}]},{"pos":[7097,7150],"content":"Retrieves the implementation version of the activity.","needQuote":true,"needEscape":true,"nodes":[{"content":"Retrieves the implementation version of the activity.","pos":[0,53]}]},{"pos":[7353,7366],"content":"The activity.","needQuote":true,"needEscape":true,"nodes":[{"content":"The activity.","pos":[0,13]}]},{"pos":[7425,7468],"content":"The implementation version of the activity.","needQuote":true,"needEscape":true,"nodes":[{"content":"The implementation version of the activity.","pos":[0,43]}]},{"pos":[8101,8190],"content":"Returns the activity with the specified <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">id</ph><ept id=\"p1\">&lt;/code&gt;</ept> from the specified activity tree.","needQuote":true,"needEscape":true,"source":"Returns the activity with the specified <code>id</code> from the specified activity tree."},{"pos":[8398,8426],"content":"The activity tree to search.","needQuote":true,"needEscape":true,"nodes":[{"content":"The activity tree to search.","pos":[0,28]}]},{"pos":[8485,8524],"content":"The identifier of the activity to find.","needQuote":true,"needEscape":true,"nodes":[{"content":"The identifier of the activity to find.","pos":[0,39]}]},{"pos":[8595,8684],"content":"The specified activity if found; otherwise, an <xref:System.ArgumentException> is thrown.","needQuote":true,"needEscape":true,"nodes":[{"content":"The specified activity if found; otherwise, an &lt;xref:System.ArgumentException&gt; is thrown.","pos":[0,89],"source":"The specified activity if found; otherwise, an <xref:System.ArgumentException> is thrown."}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Activities.WorkflowInspectionServices\n  id: WorkflowInspectionServices\n  children:\n  - System.Activities.WorkflowInspectionServices.CacheMetadata(System.Activities.Activity)\n  - System.Activities.WorkflowInspectionServices.CacheMetadata(System.Activities.Activity,System.Activities.LocationReferenceEnvironment)\n  - System.Activities.WorkflowInspectionServices.CanInduceIdle(System.Activities.Activity)\n  - System.Activities.WorkflowInspectionServices.GetActivities(System.Activities.Activity)\n  - System.Activities.WorkflowInspectionServices.GetImplementationVersion(System.Activities.Activity)\n  - System.Activities.WorkflowInspectionServices.Resolve(System.Activities.Activity,System.String)\n  langs:\n  - csharp\n  name: WorkflowInspectionServices\n  nameWithType: WorkflowInspectionServices\n  fullName: System.Activities.WorkflowInspectionServices\n  type: Class\n  summary: Provides methods for working with the runtime metadata for an activity tree.\n  syntax:\n    content: public static class WorkflowInspectionServices\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Activities.WorkflowInspectionServices.CacheMetadata(System.Activities.Activity)\n  id: CacheMetadata(System.Activities.Activity)\n  parent: System.Activities.WorkflowInspectionServices\n  langs:\n  - csharp\n  name: CacheMetadata(Activity)\n  nameWithType: WorkflowInspectionServices.CacheMetadata(Activity)\n  fullName: System.Activities.WorkflowInspectionServices.CacheMetadata(Activity)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Caches the runtime metadata for the specified activity tree.\n  syntax:\n    content: public static void CacheMetadata (System.Activities.Activity rootActivity);\n    parameters:\n    - id: rootActivity\n      type: System.Activities.Activity\n      description: The root activity of the activity tree.\n  overload: System.Activities.WorkflowInspectionServices.CacheMetadata*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.WorkflowInspectionServices.CacheMetadata(System.Activities.Activity,System.Activities.LocationReferenceEnvironment)\n  id: CacheMetadata(System.Activities.Activity,System.Activities.LocationReferenceEnvironment)\n  parent: System.Activities.WorkflowInspectionServices\n  langs:\n  - csharp\n  name: CacheMetadata(Activity,LocationReferenceEnvironment)\n  nameWithType: WorkflowInspectionServices.CacheMetadata(Activity,LocationReferenceEnvironment)\n  fullName: System.Activities.WorkflowInspectionServices.CacheMetadata(Activity,LocationReferenceEnvironment)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Caches the runtime metadata for the specified activity tree using the specified environment.\n  syntax:\n    content: public static void CacheMetadata (System.Activities.Activity rootActivity, System.Activities.LocationReferenceEnvironment hostEnvironment);\n    parameters:\n    - id: rootActivity\n      type: System.Activities.Activity\n      description: The root activity of the activity tree.\n    - id: hostEnvironment\n      type: System.Activities.LocationReferenceEnvironment\n      description: The environment associated with the activity tree.\n  overload: System.Activities.WorkflowInspectionServices.CacheMetadata*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.WorkflowInspectionServices.CanInduceIdle(System.Activities.Activity)\n  id: CanInduceIdle(System.Activities.Activity)\n  parent: System.Activities.WorkflowInspectionServices\n  langs:\n  - csharp\n  name: CanInduceIdle(Activity)\n  nameWithType: WorkflowInspectionServices.CanInduceIdle(Activity)\n  fullName: System.Activities.WorkflowInspectionServices.CanInduceIdle(Activity)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Specifies whether the service can include idle activities.\n  syntax:\n    content: public static bool CanInduceIdle (System.Activities.Activity activity);\n    parameters:\n    - id: activity\n      type: System.Activities.Activity\n      description: The activity.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"></xref> if the service can include idle activities; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Activities.WorkflowInspectionServices.CanInduceIdle*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.WorkflowInspectionServices.GetActivities(System.Activities.Activity)\n  id: GetActivities(System.Activities.Activity)\n  parent: System.Activities.WorkflowInspectionServices\n  langs:\n  - csharp\n  name: GetActivities(Activity)\n  nameWithType: WorkflowInspectionServices.GetActivities(Activity)\n  fullName: System.Activities.WorkflowInspectionServices.GetActivities(Activity)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Returns an &lt;xref:System.Collections.Generic.IEnumerable%601&gt; that represents all activities associated with the input activity.\n  remarks: \"The enumeration contains all child activities, delegate handlers, variable defaults, and argument expressions. If the input activity is `null`, an <xref:System.ArgumentNullException> is thrown. The activity tree must remain unmodified and <xref:System.Activities.WorkflowInspectionServices.CacheMetadata%2A> must not be called while the tree is being enumerated or else an <xref:System.InvalidOperationException> is thrown when <xref:System.Collections.IEnumerator.MoveNext%2A> is called.  \\n  \\n Calling this method causes a full cache metadata to occur. If you make changes to the workflow after calling this method, you must call the <xref:System.Activities.Validation.ActivityValidationServices> <xref:System.Activities.Validation.ActivityValidationServices.Validate%2A> method after making the changes in order to re-cache the metadata.\"\n  syntax:\n    content: public static System.Collections.Generic.IEnumerable<System.Activities.Activity> GetActivities (System.Activities.Activity activity);\n    parameters:\n    - id: activity\n      type: System.Activities.Activity\n      description: The root activity.\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Activities.Activity}\n      description: An enumeration that represents all activities associated with the input activity.\n  overload: System.Activities.WorkflowInspectionServices.GetActivities*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.WorkflowInspectionServices.GetImplementationVersion(System.Activities.Activity)\n  id: GetImplementationVersion(System.Activities.Activity)\n  parent: System.Activities.WorkflowInspectionServices\n  langs:\n  - csharp\n  name: GetImplementationVersion(Activity)\n  nameWithType: WorkflowInspectionServices.GetImplementationVersion(Activity)\n  fullName: System.Activities.WorkflowInspectionServices.GetImplementationVersion(Activity)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Retrieves the implementation version of the activity.\n  syntax:\n    content: public static Version GetImplementationVersion (System.Activities.Activity activity);\n    parameters:\n    - id: activity\n      type: System.Activities.Activity\n      description: The activity.\n    return:\n      type: System.Version\n      description: The implementation version of the activity.\n  overload: System.Activities.WorkflowInspectionServices.GetImplementationVersion*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.WorkflowInspectionServices.Resolve(System.Activities.Activity,System.String)\n  id: Resolve(System.Activities.Activity,System.String)\n  parent: System.Activities.WorkflowInspectionServices\n  langs:\n  - csharp\n  name: Resolve(Activity,String)\n  nameWithType: WorkflowInspectionServices.Resolve(Activity,String)\n  fullName: System.Activities.WorkflowInspectionServices.Resolve(Activity,String)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Returns the activity with the specified <code>id</code> from the specified activity tree.\n  syntax:\n    content: public static System.Activities.Activity Resolve (System.Activities.Activity root, string id);\n    parameters:\n    - id: root\n      type: System.Activities.Activity\n      description: The activity tree to search.\n    - id: id\n      type: System.String\n      description: The identifier of the activity to find.\n    return:\n      type: System.Activities.Activity\n      description: The specified activity if found; otherwise, an <xref:System.ArgumentException> is thrown.\n  overload: System.Activities.WorkflowInspectionServices.Resolve*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Activities.WorkflowInspectionServices.CacheMetadata(System.Activities.Activity)\n  parent: System.Activities.WorkflowInspectionServices\n  isExternal: false\n  name: CacheMetadata(Activity)\n  nameWithType: WorkflowInspectionServices.CacheMetadata(Activity)\n  fullName: System.Activities.WorkflowInspectionServices.CacheMetadata(Activity)\n- uid: System.Activities.Activity\n  parent: System.Activities\n  isExternal: false\n  name: Activity\n  nameWithType: Activity\n  fullName: System.Activities.Activity\n- uid: System.Activities.WorkflowInspectionServices.CacheMetadata(System.Activities.Activity,System.Activities.LocationReferenceEnvironment)\n  parent: System.Activities.WorkflowInspectionServices\n  isExternal: false\n  name: CacheMetadata(Activity,LocationReferenceEnvironment)\n  nameWithType: WorkflowInspectionServices.CacheMetadata(Activity,LocationReferenceEnvironment)\n  fullName: System.Activities.WorkflowInspectionServices.CacheMetadata(Activity,LocationReferenceEnvironment)\n- uid: System.Activities.LocationReferenceEnvironment\n  parent: System.Activities\n  isExternal: false\n  name: LocationReferenceEnvironment\n  nameWithType: LocationReferenceEnvironment\n  fullName: System.Activities.LocationReferenceEnvironment\n- uid: System.Activities.WorkflowInspectionServices.CanInduceIdle(System.Activities.Activity)\n  parent: System.Activities.WorkflowInspectionServices\n  isExternal: false\n  name: CanInduceIdle(Activity)\n  nameWithType: WorkflowInspectionServices.CanInduceIdle(Activity)\n  fullName: System.Activities.WorkflowInspectionServices.CanInduceIdle(Activity)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Activities.WorkflowInspectionServices.GetActivities(System.Activities.Activity)\n  parent: System.Activities.WorkflowInspectionServices\n  isExternal: false\n  name: GetActivities(Activity)\n  nameWithType: WorkflowInspectionServices.GetActivities(Activity)\n  fullName: System.Activities.WorkflowInspectionServices.GetActivities(Activity)\n- uid: System.Collections.Generic.IEnumerable{System.Activities.Activity}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IEnumerable<Activity>\n  nameWithType: IEnumerable<Activity>\n  fullName: System.Collections.Generic.IEnumerable<System.Activities.Activity>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: IEnumerable<System.Activities.Activity>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Activities.Activity\n    name: Activity\n    nameWithType: Activity\n    fullName: Activity\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Activities.WorkflowInspectionServices.GetImplementationVersion(System.Activities.Activity)\n  parent: System.Activities.WorkflowInspectionServices\n  isExternal: false\n  name: GetImplementationVersion(Activity)\n  nameWithType: WorkflowInspectionServices.GetImplementationVersion(Activity)\n  fullName: System.Activities.WorkflowInspectionServices.GetImplementationVersion(Activity)\n- uid: System.Version\n  parent: System\n  isExternal: true\n  name: Version\n  nameWithType: Version\n  fullName: System.Version\n- uid: System.Activities.WorkflowInspectionServices.Resolve(System.Activities.Activity,System.String)\n  parent: System.Activities.WorkflowInspectionServices\n  isExternal: false\n  name: Resolve(Activity,String)\n  nameWithType: WorkflowInspectionServices.Resolve(Activity,String)\n  fullName: System.Activities.WorkflowInspectionServices.Resolve(Activity,String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Activities.WorkflowInspectionServices.CacheMetadata*\n  parent: System.Activities.WorkflowInspectionServices\n  isExternal: false\n  name: CacheMetadata\n  nameWithType: WorkflowInspectionServices.CacheMetadata\n- uid: System.Activities.WorkflowInspectionServices.CanInduceIdle*\n  parent: System.Activities.WorkflowInspectionServices\n  isExternal: false\n  name: CanInduceIdle\n  nameWithType: WorkflowInspectionServices.CanInduceIdle\n- uid: System.Activities.WorkflowInspectionServices.GetActivities*\n  parent: System.Activities.WorkflowInspectionServices\n  isExternal: false\n  name: GetActivities\n  nameWithType: WorkflowInspectionServices.GetActivities\n- uid: System.Activities.WorkflowInspectionServices.GetImplementationVersion*\n  parent: System.Activities.WorkflowInspectionServices\n  isExternal: false\n  name: GetImplementationVersion\n  nameWithType: WorkflowInspectionServices.GetImplementationVersion\n- uid: System.Activities.WorkflowInspectionServices.Resolve*\n  parent: System.Activities.WorkflowInspectionServices\n  isExternal: false\n  name: Resolve\n  nameWithType: WorkflowInspectionServices.Resolve\n"}