{"nodes":[{"pos":[703,771],"content":"Provides a simple list of delegates. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides a simple list of delegates. This class cannot be inherited.","pos":[0,68],"nodes":[{"content":"Provides a simple list of delegates.","pos":[0,36]},{"content":"This class cannot be inherited.","pos":[37,68]}]}]},{"pos":[783,1016],"content":"This class uses a linear search algorithm to find entries in the list of delegates. A linear search algorithm is inefficient when working with a large number of entries. Therefore, when you have a large list, finding entries is slow.","needQuote":true,"needEscape":true,"nodes":[{"content":"This class uses a linear search algorithm to find entries in the list of delegates. A linear search algorithm is inefficient when working with a large number of entries. Therefore, when you have a large list, finding entries is slow.","pos":[0,233],"nodes":[{"content":"This class uses a linear search algorithm to find entries in the list of delegates.","pos":[0,83]},{"content":"A linear search algorithm is inefficient when working with a large number of entries.","pos":[84,169]},{"content":"Therefore, when you have a large list, finding entries is slow.","pos":[170,233]}]}]},{"pos":[1746,1846],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.EventHandlerList\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.ComponentModel.EventHandlerList\"></xref> class."},{"pos":[2482,2510],"content":"Adds a delegate to the list.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds a delegate to the list.","pos":[0,28]}]},{"pos":[2662,2693],"content":"The object that owns the event.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object that owns the event.","pos":[0,31]}]},{"pos":[2757,2789],"content":"The delegate to add to the list.","needQuote":true,"needEscape":true,"nodes":[{"content":"The delegate to add to the list.","pos":[0,32]}]},{"pos":[3386,3431],"content":"Adds a list of delegates to the current list.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds a list of delegates to the current list.","pos":[0,45]}]},{"pos":[3645,3661],"content":"The list to add.","needQuote":true,"needEscape":true,"nodes":[{"content":"The list to add.","pos":[0,16]}]},{"pos":[4111,4138],"content":"Disposes the delegate list.","needQuote":true,"needEscape":true,"nodes":[{"content":"Disposes the delegate list.","pos":[0,27]}]},{"pos":[4151,4857],"content":"Call Dispose when you are finished using the <xref:System.ComponentModel.EventHandlerList>. The Dispose method leaves the <xref:System.ComponentModel.EventHandlerList> in an unusable state. After calling Dispose, you must release all references to the <xref:System.ComponentModel.EventHandlerList> so the memory it was occupying can be reclaimed by garbage collection.      > [!NOTE] >  Always call Dispose before you release your last reference to the <xref:System.ComponentModel.EventHandlerList>. Otherwise, the resources the <xref:System.ComponentModel.EventHandlerList> is using will not be freed until garbage collection calls the <xref:System.ComponentModel.EventHandlerList> object's destructor.","needQuote":false,"needEscape":true,"nodes":[{"content":"Call Dispose when you are finished using the &lt;xref:System.ComponentModel.EventHandlerList&gt;.","pos":[0,91],"source":"Call Dispose when you are finished using the <xref:System.ComponentModel.EventHandlerList>."},{"content":"The Dispose method leaves the &lt;xref:System.ComponentModel.EventHandlerList&gt; in an unusable state.","pos":[92,189],"source":" The Dispose method leaves the <xref:System.ComponentModel.EventHandlerList> in an unusable state."},{"content":"After calling Dispose, you must release all references to the &lt;xref:System.ComponentModel.EventHandlerList&gt; so the memory it was occupying can be reclaimed by garbage collection.","pos":[190,368],"source":" After calling Dispose, you must release all references to the <xref:System.ComponentModel.EventHandlerList> so the memory it was occupying can be reclaimed by garbage collection."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Always call Dispose before you release your last reference to the &lt;xref:System.ComponentModel.EventHandlerList&gt;.","pos":[374,499],"source":"      > [!NOTE] >  Always call Dispose before you release your last reference to the <xref:System.ComponentModel.EventHandlerList>."},{"content":"Otherwise, the resources the &lt;xref:System.ComponentModel.EventHandlerList&gt; is using will not be freed until garbage collection calls the &lt;xref:System.ComponentModel.EventHandlerList&gt; object's destructor.","pos":[500,703],"source":" Otherwise, the resources the <xref:System.ComponentModel.EventHandlerList> is using will not be freed until garbage collection calls the <xref:System.ComponentModel.EventHandlerList> object's destructor."}]},{"pos":[5405,5456],"content":"Gets or sets the delegate for the specified object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the delegate for the specified object.","pos":[0,51]}]},{"pos":[5468,5649],"content":"When the key is not found in the list and you provide a delegate to set the value of the key, then the key is added to the top of the list and assigned to the delegate as its value.","needQuote":true,"needEscape":true,"nodes":[{"content":"When the key is not found in the list and you provide a delegate to set the value of the key, then the key is added to the top of the list and assigned to the delegate as its value.","pos":[0,181]}]},{"pos":[5795,5825],"content":"An object to find in the list.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object to find in the list.","pos":[0,30]}]},{"pos":[5885,6014],"content":"The delegate for the specified key, or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if a delegate does not exist.","needQuote":true,"needEscape":true,"source":"The delegate for the specified key, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if a delegate does not exist."},{"pos":[6594,6627],"content":"Removes a delegate from the list.","needQuote":true,"needEscape":true,"nodes":[{"content":"Removes a delegate from the list.","pos":[0,33]}]},{"pos":[6782,6813],"content":"The object that owns the event.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object that owns the event.","pos":[0,31]}]},{"pos":[6877,6914],"content":"The delegate to remove from the list.","needQuote":true,"needEscape":true,"nodes":[{"content":"The delegate to remove from the list.","pos":[0,37]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ComponentModel.EventHandlerList\n  id: EventHandlerList\n  children:\n  - System.ComponentModel.EventHandlerList.#ctor\n  - System.ComponentModel.EventHandlerList.AddHandler(System.Object,System.Delegate)\n  - System.ComponentModel.EventHandlerList.AddHandlers(System.ComponentModel.EventHandlerList)\n  - System.ComponentModel.EventHandlerList.Dispose\n  - System.ComponentModel.EventHandlerList.Item(System.Object)\n  - System.ComponentModel.EventHandlerList.RemoveHandler(System.Object,System.Delegate)\n  langs:\n  - csharp\n  name: EventHandlerList\n  nameWithType: EventHandlerList\n  fullName: System.ComponentModel.EventHandlerList\n  type: Class\n  summary: Provides a simple list of delegates. This class cannot be inherited.\n  remarks: This class uses a linear search algorithm to find entries in the list of delegates. A linear search algorithm is inefficient when working with a large number of entries. Therefore, when you have a large list, finding entries is slow.\n  example:\n  - 'For an example of using an EventHandlerList, see [How to: Handle Multiple Events Using Event Properties](~/add/includes/ajax-current-ext-md.md).'\n  syntax:\n    content: 'public sealed class EventHandlerList : IDisposable'\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.ComponentModel.EventHandlerList.#ctor\n  id: '#ctor'\n  parent: System.ComponentModel.EventHandlerList\n  langs:\n  - csharp\n  name: EventHandlerList()\n  nameWithType: EventHandlerList.EventHandlerList()\n  fullName: System.ComponentModel.EventHandlerList.EventHandlerList()\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Initializes a new instance of the <xref href=\"System.ComponentModel.EventHandlerList\"></xref> class.\n  syntax:\n    content: public EventHandlerList ();\n    parameters: []\n  overload: System.ComponentModel.EventHandlerList.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.EventHandlerList.AddHandler(System.Object,System.Delegate)\n  id: AddHandler(System.Object,System.Delegate)\n  parent: System.ComponentModel.EventHandlerList\n  langs:\n  - csharp\n  name: AddHandler(Object,Delegate)\n  nameWithType: EventHandlerList.AddHandler(Object,Delegate)\n  fullName: System.ComponentModel.EventHandlerList.AddHandler(Object,Delegate)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Adds a delegate to the list.\n  syntax:\n    content: public void AddHandler (object key, Delegate value);\n    parameters:\n    - id: key\n      type: System.Object\n      description: The object that owns the event.\n    - id: value\n      type: System.Delegate\n      description: The delegate to add to the list.\n  overload: System.ComponentModel.EventHandlerList.AddHandler*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.EventHandlerList.AddHandlers(System.ComponentModel.EventHandlerList)\n  id: AddHandlers(System.ComponentModel.EventHandlerList)\n  parent: System.ComponentModel.EventHandlerList\n  langs:\n  - csharp\n  name: AddHandlers(EventHandlerList)\n  nameWithType: EventHandlerList.AddHandlers(EventHandlerList)\n  fullName: System.ComponentModel.EventHandlerList.AddHandlers(EventHandlerList)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Adds a list of delegates to the current list.\n  syntax:\n    content: public void AddHandlers (System.ComponentModel.EventHandlerList listToAddFrom);\n    parameters:\n    - id: listToAddFrom\n      type: System.ComponentModel.EventHandlerList\n      description: The list to add.\n  overload: System.ComponentModel.EventHandlerList.AddHandlers*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.EventHandlerList.Dispose\n  id: Dispose\n  parent: System.ComponentModel.EventHandlerList\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: EventHandlerList.Dispose()\n  fullName: System.ComponentModel.EventHandlerList.Dispose()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Disposes the delegate list.\n  remarks: \"Call Dispose when you are finished using the <xref:System.ComponentModel.EventHandlerList>. The Dispose method leaves the <xref:System.ComponentModel.EventHandlerList> in an unusable state. After calling Dispose, you must release all references to the <xref:System.ComponentModel.EventHandlerList> so the memory it was occupying can be reclaimed by garbage collection.  \\n  \\n> [!NOTE]\\n>  Always call Dispose before you release your last reference to the <xref:System.ComponentModel.EventHandlerList>. Otherwise, the resources the <xref:System.ComponentModel.EventHandlerList> is using will not be freed until garbage collection calls the <xref:System.ComponentModel.EventHandlerList> object's destructor.\"\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.ComponentModel.EventHandlerList.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.EventHandlerList.Item(System.Object)\n  id: Item(System.Object)\n  parent: System.ComponentModel.EventHandlerList\n  langs:\n  - csharp\n  name: Item(Object)\n  nameWithType: EventHandlerList.Item(Object)\n  fullName: System.ComponentModel.EventHandlerList.Item(Object)\n  type: Property\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Gets or sets the delegate for the specified object.\n  remarks: When the key is not found in the list and you provide a delegate to set the value of the key, then the key is added to the top of the list and assigned to the delegate as its value.\n  syntax:\n    content: public Delegate this[object key] { get; set; }\n    parameters:\n    - id: key\n      type: System.Object\n      description: An object to find in the list.\n    return:\n      type: System.Delegate\n      description: The delegate for the specified key, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if a delegate does not exist.\n  overload: System.ComponentModel.EventHandlerList.Item*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.EventHandlerList.RemoveHandler(System.Object,System.Delegate)\n  id: RemoveHandler(System.Object,System.Delegate)\n  parent: System.ComponentModel.EventHandlerList\n  langs:\n  - csharp\n  name: RemoveHandler(Object,Delegate)\n  nameWithType: EventHandlerList.RemoveHandler(Object,Delegate)\n  fullName: System.ComponentModel.EventHandlerList.RemoveHandler(Object,Delegate)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Removes a delegate from the list.\n  syntax:\n    content: public void RemoveHandler (object key, Delegate value);\n    parameters:\n    - id: key\n      type: System.Object\n      description: The object that owns the event.\n    - id: value\n      type: System.Delegate\n      description: The delegate to remove from the list.\n  overload: System.ComponentModel.EventHandlerList.RemoveHandler*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ComponentModel.EventHandlerList.#ctor\n  parent: System.ComponentModel.EventHandlerList\n  isExternal: false\n  name: EventHandlerList()\n  nameWithType: EventHandlerList.EventHandlerList()\n  fullName: System.ComponentModel.EventHandlerList.EventHandlerList()\n- uid: System.ComponentModel.EventHandlerList.AddHandler(System.Object,System.Delegate)\n  parent: System.ComponentModel.EventHandlerList\n  isExternal: false\n  name: AddHandler(Object,Delegate)\n  nameWithType: EventHandlerList.AddHandler(Object,Delegate)\n  fullName: System.ComponentModel.EventHandlerList.AddHandler(Object,Delegate)\n- uid: System.Delegate\n  parent: System\n  isExternal: true\n  name: Delegate\n  nameWithType: Delegate\n  fullName: System.Delegate\n- uid: System.ComponentModel.EventHandlerList.AddHandlers(System.ComponentModel.EventHandlerList)\n  parent: System.ComponentModel.EventHandlerList\n  isExternal: false\n  name: AddHandlers(EventHandlerList)\n  nameWithType: EventHandlerList.AddHandlers(EventHandlerList)\n  fullName: System.ComponentModel.EventHandlerList.AddHandlers(EventHandlerList)\n- uid: System.ComponentModel.EventHandlerList\n  parent: System.ComponentModel\n  isExternal: false\n  name: EventHandlerList\n  nameWithType: EventHandlerList\n  fullName: System.ComponentModel.EventHandlerList\n- uid: System.ComponentModel.EventHandlerList.Dispose\n  parent: System.ComponentModel.EventHandlerList\n  isExternal: false\n  name: Dispose()\n  nameWithType: EventHandlerList.Dispose()\n  fullName: System.ComponentModel.EventHandlerList.Dispose()\n- uid: System.ComponentModel.EventHandlerList.Item(System.Object)\n  parent: System.ComponentModel.EventHandlerList\n  isExternal: false\n  name: Item(Object)\n  nameWithType: EventHandlerList.Item(Object)\n  fullName: System.ComponentModel.EventHandlerList.Item(Object)\n- uid: System.ComponentModel.EventHandlerList.RemoveHandler(System.Object,System.Delegate)\n  parent: System.ComponentModel.EventHandlerList\n  isExternal: false\n  name: RemoveHandler(Object,Delegate)\n  nameWithType: EventHandlerList.RemoveHandler(Object,Delegate)\n  fullName: System.ComponentModel.EventHandlerList.RemoveHandler(Object,Delegate)\n- uid: System.ComponentModel.EventHandlerList.#ctor*\n  parent: System.ComponentModel.EventHandlerList\n  isExternal: false\n  name: EventHandlerList\n  nameWithType: EventHandlerList.EventHandlerList\n- uid: System.ComponentModel.EventHandlerList.AddHandler*\n  parent: System.ComponentModel.EventHandlerList\n  isExternal: false\n  name: AddHandler\n  nameWithType: EventHandlerList.AddHandler\n- uid: System.ComponentModel.EventHandlerList.AddHandlers*\n  parent: System.ComponentModel.EventHandlerList\n  isExternal: false\n  name: AddHandlers\n  nameWithType: EventHandlerList.AddHandlers\n- uid: System.ComponentModel.EventHandlerList.Dispose*\n  parent: System.ComponentModel.EventHandlerList\n  isExternal: false\n  name: Dispose\n  nameWithType: EventHandlerList.Dispose\n- uid: System.ComponentModel.EventHandlerList.Item*\n  parent: System.ComponentModel.EventHandlerList\n  isExternal: false\n  name: Item\n  nameWithType: EventHandlerList.Item\n- uid: System.ComponentModel.EventHandlerList.RemoveHandler*\n  parent: System.ComponentModel.EventHandlerList\n  isExternal: false\n  name: RemoveHandler\n  nameWithType: EventHandlerList.RemoveHandler\n"}