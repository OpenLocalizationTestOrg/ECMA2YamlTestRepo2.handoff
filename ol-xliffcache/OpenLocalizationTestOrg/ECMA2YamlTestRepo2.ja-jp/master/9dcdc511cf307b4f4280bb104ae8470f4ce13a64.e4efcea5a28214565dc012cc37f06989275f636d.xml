{"nodes":[{"pos":[1258,1330],"content":"Represents a single composition operation for transactional composition.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents a single composition operation for transactional composition.","pos":[0,72]}]},{"pos":[2558,2679],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.Composition.Hosting.AtomicComposition\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.ComponentModel.Composition.Hosting.AtomicComposition\"></xref> class."},{"pos":[3532,3760],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.Composition.Hosting.AtomicComposition\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified parent <bpt id=\"p2\">&lt;xref href=\"System.ComponentModel.Composition.Hosting.AtomicComposition\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.ComponentModel.Composition.Hosting.AtomicComposition\"></xref> class with the specified parent <xref href=\"System.ComponentModel.Composition.Hosting.AtomicComposition\"></xref>."},{"pos":[4035,4076],"content":"The parent of this composition operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The parent of this composition operation.","pos":[0,41]}]},{"pos":[4750,4842],"content":"Adds an action to be executed when the overall composition operation completes successfully.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds an action to be executed when the overall composition operation completes successfully.","pos":[0,92]}]},{"pos":[5007,5033],"content":"The action to be executed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The action to be executed.","pos":[0,26]}]},{"pos":[5709,5782],"content":"Adds an action to be executed if the overall composition operation fails.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds an action to be executed if the overall composition operation fails.","pos":[0,73]}]},{"pos":[5941,5967],"content":"The action to be executed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The action to be executed.","pos":[0,26]}]},{"pos":[6558,6603],"content":"Marks this composition operation as complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"Marks this composition operation as complete.","pos":[0,45]}]},{"pos":[6615,6799],"content":"If this <xref:System.ComponentModel.Composition.Hosting.AtomicComposition> is nested, completion actions will not be executed until the parent composition operation has also completed.","needQuote":true,"needEscape":true,"nodes":[{"content":"If this &lt;xref:System.ComponentModel.Composition.Hosting.AtomicComposition&gt; is nested, completion actions will not be executed until the parent composition operation has also completed.","pos":[0,184],"source":"If this <xref:System.ComponentModel.Composition.Hosting.AtomicComposition> is nested, completion actions will not be executed until the parent composition operation has also completed."}]},{"pos":[7445,7638],"content":"Releases all resources used by the current instance of the <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.Composition.Hosting.AtomicComposition\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class, and mark this composition operation as failed.","needQuote":true,"needEscape":true,"source":"Releases all resources used by the current instance of the <xref href=\"System.ComponentModel.Composition.Hosting.AtomicComposition\"></xref> class, and mark this composition operation as failed."},{"pos":[7651,8684],"content":"Call `Dispose` when you are finished using the <xref:System.ComponentModel.Composition.Hosting.AtomicComposition>. The `Dispose` method leaves the <xref:System.ComponentModel.Composition.Hosting.AtomicComposition> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.ComponentModel.Composition.Hosting.AtomicComposition> so the garbage collector can reclaim the memory that the <xref:System.ComponentModel.Composition.Hosting.AtomicComposition> was occupying.       For more information, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md) and [Implementing a Dispose Method](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] >  Always call `Dispose` before you release your last reference to the <xref:System.ComponentModel.Composition.Hosting.AtomicComposition>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.ComponentModel.Composition.Hosting.AtomicComposition> object's `Finalize` method.","needQuote":false,"needEscape":true,"nodes":[{"content":"Call <ph id=\"ph1\">`Dispose`</ph> when you are finished using the &lt;xref:System.ComponentModel.Composition.Hosting.AtomicComposition&gt;.","pos":[0,114],"source":"Call `Dispose` when you are finished using the <xref:System.ComponentModel.Composition.Hosting.AtomicComposition>."},{"content":"The <ph id=\"ph1\">`Dispose`</ph> method leaves the &lt;xref:System.ComponentModel.Composition.Hosting.AtomicComposition&gt; in an unusable state.","pos":[115,235],"source":" The `Dispose` method leaves the <xref:System.ComponentModel.Composition.Hosting.AtomicComposition> in an unusable state."},{"content":"After calling <ph id=\"ph1\">`Dispose`</ph>, you must release all references to the &lt;xref:System.ComponentModel.Composition.Hosting.AtomicComposition&gt; so the garbage collector can reclaim the memory that the &lt;xref:System.ComponentModel.Composition.Hosting.AtomicComposition&gt; was occupying.","pos":[236,505],"source":" After calling `Dispose`, you must release all references to the <xref:System.ComponentModel.Composition.Hosting.AtomicComposition> so the garbage collector can reclaim the memory that the <xref:System.ComponentModel.Composition.Hosting.AtomicComposition> was occupying."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Cleaning Up Unmanaged Resources<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id=\"p2\">[</bpt>Implementing a Dispose Method<ept id=\"p2\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[512,686],"source":"       For more information, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md) and [Implementing a Dispose Method](~/add/includes/ajax-current-ext-md.md)."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Always call <ph id=\"ph2\">`Dispose`</ph> before you release your last reference to the &lt;xref:System.ComponentModel.Composition.Hosting.AtomicComposition&gt;.","pos":[692,840],"source":"      > [!NOTE] >  Always call `Dispose` before you release your last reference to the <xref:System.ComponentModel.Composition.Hosting.AtomicComposition>."},{"content":"Otherwise, the resources it is using will not be freed until the garbage collector calls the &lt;xref:System.ComponentModel.Composition.Hosting.AtomicComposition&gt; object's <ph id=\"ph1\">`Finalize`</ph> method.","pos":[841,1028],"source":" Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.ComponentModel.Composition.Hosting.AtomicComposition> object's `Finalize` method."}]},{"pos":[9382,9554],"content":"Releases the unmanaged resources used by the <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.Composition.Hosting.AtomicComposition\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and optionally releases the managed resources.","needQuote":true,"needEscape":true,"source":"Releases the unmanaged resources used by the <xref href=\"System.ComponentModel.Composition.Hosting.AtomicComposition\"></xref> and optionally releases the managed resources."},{"pos":[9709,9918],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to release both managed and unmanaged resources; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> to release only unmanaged resources.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only unmanaged resources."},{"pos":[10598,10665],"content":"Saves a key-value pair in the transaction to track tentative state.","needQuote":true,"needEscape":true,"nodes":[{"content":"Saves a key-value pair in the transaction to track tentative state.","pos":[0,67]}]},{"pos":[10813,10829],"content":"The key to save.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key to save.","pos":[0,16]}]},{"pos":[10891,10909],"content":"The value to save.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value to save.","pos":[0,18]}]},{"pos":[11719,11731],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[11781,11793],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[11852,11864],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[12767,12779],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[12863,12875],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[12925,12937],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[12996,13008],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ComponentModel.Composition.Hosting.AtomicComposition\n  id: AtomicComposition\n  children:\n  - System.ComponentModel.Composition.Hosting.AtomicComposition.#ctor\n  - System.ComponentModel.Composition.Hosting.AtomicComposition.#ctor(System.ComponentModel.Composition.Hosting.AtomicComposition)\n  - System.ComponentModel.Composition.Hosting.AtomicComposition.AddCompleteAction(System.Action)\n  - System.ComponentModel.Composition.Hosting.AtomicComposition.AddRevertAction(System.Action)\n  - System.ComponentModel.Composition.Hosting.AtomicComposition.Complete\n  - System.ComponentModel.Composition.Hosting.AtomicComposition.Dispose\n  - System.ComponentModel.Composition.Hosting.AtomicComposition.Dispose(System.Boolean)\n  - System.ComponentModel.Composition.Hosting.AtomicComposition.SetValue(System.Object,System.Object)\n  - System.ComponentModel.Composition.Hosting.AtomicComposition.TryGetValue``1(System.Object,``0@)\n  - System.ComponentModel.Composition.Hosting.AtomicComposition.TryGetValue``1(System.Object,System.Boolean,``0@)\n  langs:\n  - csharp\n  name: AtomicComposition\n  nameWithType: AtomicComposition\n  fullName: System.ComponentModel.Composition.Hosting.AtomicComposition\n  type: Class\n  summary: Represents a single composition operation for transactional composition.\n  remarks: >-\n    > [!IMPORTANT]\n\n    >  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref:System.IDisposable> interface topic.\n  syntax:\n    content: 'public class AtomicComposition : IDisposable'\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Composition.Hosting.AtomicComposition.#ctor\n  id: '#ctor'\n  parent: System.ComponentModel.Composition.Hosting.AtomicComposition\n  langs:\n  - csharp\n  name: AtomicComposition()\n  nameWithType: AtomicComposition.AtomicComposition()\n  fullName: System.ComponentModel.Composition.Hosting.AtomicComposition.AtomicComposition()\n  type: Constructor\n  assemblies:\n  - System.ComponentModel.Composition\n  namespace: System.ComponentModel.Composition.Hosting\n  summary: Initializes a new instance of the <xref href=\"System.ComponentModel.Composition.Hosting.AtomicComposition\"></xref> class.\n  syntax:\n    content: public AtomicComposition ();\n    parameters: []\n  overload: System.ComponentModel.Composition.Hosting.AtomicComposition.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Composition.Hosting.AtomicComposition.#ctor(System.ComponentModel.Composition.Hosting.AtomicComposition)\n  id: '#ctor(System.ComponentModel.Composition.Hosting.AtomicComposition)'\n  parent: System.ComponentModel.Composition.Hosting.AtomicComposition\n  langs:\n  - csharp\n  name: AtomicComposition(AtomicComposition)\n  nameWithType: AtomicComposition.AtomicComposition(AtomicComposition)\n  fullName: System.ComponentModel.Composition.Hosting.AtomicComposition.AtomicComposition(AtomicComposition)\n  type: Constructor\n  assemblies:\n  - System.ComponentModel.Composition\n  namespace: System.ComponentModel.Composition.Hosting\n  summary: Initializes a new instance of the <xref href=\"System.ComponentModel.Composition.Hosting.AtomicComposition\"></xref> class with the specified parent <xref href=\"System.ComponentModel.Composition.Hosting.AtomicComposition\"></xref>.\n  syntax:\n    content: public AtomicComposition (System.ComponentModel.Composition.Hosting.AtomicComposition outerAtomicComposition);\n    parameters:\n    - id: outerAtomicComposition\n      type: System.ComponentModel.Composition.Hosting.AtomicComposition\n      description: The parent of this composition operation.\n  overload: System.ComponentModel.Composition.Hosting.AtomicComposition.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Composition.Hosting.AtomicComposition.AddCompleteAction(System.Action)\n  id: AddCompleteAction(System.Action)\n  parent: System.ComponentModel.Composition.Hosting.AtomicComposition\n  langs:\n  - csharp\n  name: AddCompleteAction(Action)\n  nameWithType: AtomicComposition.AddCompleteAction(Action)\n  fullName: System.ComponentModel.Composition.Hosting.AtomicComposition.AddCompleteAction(Action)\n  type: Method\n  assemblies:\n  - System.ComponentModel.Composition\n  namespace: System.ComponentModel.Composition.Hosting\n  summary: Adds an action to be executed when the overall composition operation completes successfully.\n  syntax:\n    content: public void AddCompleteAction (Action completeAction);\n    parameters:\n    - id: completeAction\n      type: System.Action\n      description: The action to be executed.\n  overload: System.ComponentModel.Composition.Hosting.AtomicComposition.AddCompleteAction*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Composition.Hosting.AtomicComposition.AddRevertAction(System.Action)\n  id: AddRevertAction(System.Action)\n  parent: System.ComponentModel.Composition.Hosting.AtomicComposition\n  langs:\n  - csharp\n  name: AddRevertAction(Action)\n  nameWithType: AtomicComposition.AddRevertAction(Action)\n  fullName: System.ComponentModel.Composition.Hosting.AtomicComposition.AddRevertAction(Action)\n  type: Method\n  assemblies:\n  - System.ComponentModel.Composition\n  namespace: System.ComponentModel.Composition.Hosting\n  summary: Adds an action to be executed if the overall composition operation fails.\n  syntax:\n    content: public void AddRevertAction (Action revertAction);\n    parameters:\n    - id: revertAction\n      type: System.Action\n      description: The action to be executed.\n  overload: System.ComponentModel.Composition.Hosting.AtomicComposition.AddRevertAction*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Composition.Hosting.AtomicComposition.Complete\n  id: Complete\n  parent: System.ComponentModel.Composition.Hosting.AtomicComposition\n  langs:\n  - csharp\n  name: Complete()\n  nameWithType: AtomicComposition.Complete()\n  fullName: System.ComponentModel.Composition.Hosting.AtomicComposition.Complete()\n  type: Method\n  assemblies:\n  - System.ComponentModel.Composition\n  namespace: System.ComponentModel.Composition.Hosting\n  summary: Marks this composition operation as complete.\n  remarks: If this <xref:System.ComponentModel.Composition.Hosting.AtomicComposition> is nested, completion actions will not be executed until the parent composition operation has also completed.\n  syntax:\n    content: public void Complete ();\n    parameters: []\n  overload: System.ComponentModel.Composition.Hosting.AtomicComposition.Complete*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Composition.Hosting.AtomicComposition.Dispose\n  id: Dispose\n  parent: System.ComponentModel.Composition.Hosting.AtomicComposition\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: AtomicComposition.Dispose()\n  fullName: System.ComponentModel.Composition.Hosting.AtomicComposition.Dispose()\n  type: Method\n  assemblies:\n  - System.ComponentModel.Composition\n  namespace: System.ComponentModel.Composition.Hosting\n  summary: Releases all resources used by the current instance of the <xref href=\"System.ComponentModel.Composition.Hosting.AtomicComposition\"></xref> class, and mark this composition operation as failed.\n  remarks: \"Call `Dispose` when you are finished using the <xref:System.ComponentModel.Composition.Hosting.AtomicComposition>. The `Dispose` method leaves the <xref:System.ComponentModel.Composition.Hosting.AtomicComposition> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.ComponentModel.Composition.Hosting.AtomicComposition> so the garbage collector can reclaim the memory that the <xref:System.ComponentModel.Composition.Hosting.AtomicComposition> was occupying.  \\n  \\n For more information, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md) and [Implementing a Dispose Method](~/add/includes/ajax-current-ext-md.md).  \\n  \\n> [!NOTE]\\n>  Always call `Dispose` before you release your last reference to the <xref:System.ComponentModel.Composition.Hosting.AtomicComposition>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.ComponentModel.Composition.Hosting.AtomicComposition> object's `Finalize` method.\"\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.ComponentModel.Composition.Hosting.AtomicComposition.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Composition.Hosting.AtomicComposition.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.ComponentModel.Composition.Hosting.AtomicComposition\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: AtomicComposition.Dispose(Boolean)\n  fullName: System.ComponentModel.Composition.Hosting.AtomicComposition.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.ComponentModel.Composition\n  namespace: System.ComponentModel.Composition.Hosting\n  summary: Releases the unmanaged resources used by the <xref href=\"System.ComponentModel.Composition.Hosting.AtomicComposition\"></xref> and optionally releases the managed resources.\n  syntax:\n    content: protected virtual void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only unmanaged resources.\n  overload: System.ComponentModel.Composition.Hosting.AtomicComposition.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Composition.Hosting.AtomicComposition.SetValue(System.Object,System.Object)\n  id: SetValue(System.Object,System.Object)\n  parent: System.ComponentModel.Composition.Hosting.AtomicComposition\n  langs:\n  - csharp\n  name: SetValue(Object,Object)\n  nameWithType: AtomicComposition.SetValue(Object,Object)\n  fullName: System.ComponentModel.Composition.Hosting.AtomicComposition.SetValue(Object,Object)\n  type: Method\n  assemblies:\n  - System.ComponentModel.Composition\n  namespace: System.ComponentModel.Composition.Hosting\n  summary: Saves a key-value pair in the transaction to track tentative state.\n  syntax:\n    content: public void SetValue (object key, object value);\n    parameters:\n    - id: key\n      type: System.Object\n      description: The key to save.\n    - id: value\n      type: System.Object\n      description: The value to save.\n  overload: System.ComponentModel.Composition.Hosting.AtomicComposition.SetValue*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Composition.Hosting.AtomicComposition.TryGetValue``1(System.Object,``0@)\n  id: TryGetValue``1(System.Object,``0@)\n  parent: System.ComponentModel.Composition.Hosting.AtomicComposition\n  langs:\n  - csharp\n  name: TryGetValue(Object,T)\n  nameWithType: AtomicComposition.TryGetValue(Object,T)\n  fullName: System.ComponentModel.Composition.Hosting.AtomicComposition.TryGetValue(Object,T)\n  type: Method\n  assemblies:\n  - System.ComponentModel.Composition\n  namespace: System.ComponentModel.Composition.Hosting\n  syntax:\n    content: public bool TryGetValue<T> (object key, out T value);\n    parameters:\n    - id: key\n      type: System.Object\n      description: To be added.\n    - id: value\n      type: T\n      description: To be added.\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.ComponentModel.Composition.Hosting.AtomicComposition.TryGetValue<T>*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.Composition.Hosting.AtomicComposition.TryGetValue``1(System.Object,System.Boolean,``0@)\n  id: TryGetValue``1(System.Object,System.Boolean,``0@)\n  parent: System.ComponentModel.Composition.Hosting.AtomicComposition\n  langs:\n  - csharp\n  name: TryGetValue(Object,Boolean,T)\n  nameWithType: AtomicComposition.TryGetValue(Object,Boolean,T)\n  fullName: System.ComponentModel.Composition.Hosting.AtomicComposition.TryGetValue(Object,Boolean,T)\n  type: Method\n  assemblies:\n  - System.ComponentModel.Composition\n  namespace: System.ComponentModel.Composition.Hosting\n  syntax:\n    content: public bool TryGetValue<T> (object key, bool localAtomicCompositionOnly, out T value);\n    parameters:\n    - id: key\n      type: System.Object\n      description: To be added.\n    - id: localAtomicCompositionOnly\n      type: System.Boolean\n      description: To be added.\n    - id: value\n      type: T\n      description: To be added.\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.ComponentModel.Composition.Hosting.AtomicComposition.TryGetValue<T>*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ComponentModel.Composition.Hosting.AtomicComposition.#ctor\n  parent: System.ComponentModel.Composition.Hosting.AtomicComposition\n  isExternal: false\n  name: AtomicComposition()\n  nameWithType: AtomicComposition.AtomicComposition()\n  fullName: System.ComponentModel.Composition.Hosting.AtomicComposition.AtomicComposition()\n- uid: System.ComponentModel.Composition.Hosting.AtomicComposition.#ctor(System.ComponentModel.Composition.Hosting.AtomicComposition)\n  parent: System.ComponentModel.Composition.Hosting.AtomicComposition\n  isExternal: false\n  name: AtomicComposition(AtomicComposition)\n  nameWithType: AtomicComposition.AtomicComposition(AtomicComposition)\n  fullName: System.ComponentModel.Composition.Hosting.AtomicComposition.AtomicComposition(AtomicComposition)\n- uid: System.ComponentModel.Composition.Hosting.AtomicComposition\n  parent: System.ComponentModel.Composition.Hosting\n  isExternal: false\n  name: AtomicComposition\n  nameWithType: AtomicComposition\n  fullName: System.ComponentModel.Composition.Hosting.AtomicComposition\n- uid: System.ComponentModel.Composition.Hosting.AtomicComposition.AddCompleteAction(System.Action)\n  parent: System.ComponentModel.Composition.Hosting.AtomicComposition\n  isExternal: false\n  name: AddCompleteAction(Action)\n  nameWithType: AtomicComposition.AddCompleteAction(Action)\n  fullName: System.ComponentModel.Composition.Hosting.AtomicComposition.AddCompleteAction(Action)\n- uid: System.Action\n  parent: System\n  isExternal: true\n  name: Action\n  nameWithType: Action\n  fullName: System.Action\n- uid: System.ComponentModel.Composition.Hosting.AtomicComposition.AddRevertAction(System.Action)\n  parent: System.ComponentModel.Composition.Hosting.AtomicComposition\n  isExternal: false\n  name: AddRevertAction(Action)\n  nameWithType: AtomicComposition.AddRevertAction(Action)\n  fullName: System.ComponentModel.Composition.Hosting.AtomicComposition.AddRevertAction(Action)\n- uid: System.ComponentModel.Composition.Hosting.AtomicComposition.Complete\n  parent: System.ComponentModel.Composition.Hosting.AtomicComposition\n  isExternal: false\n  name: Complete()\n  nameWithType: AtomicComposition.Complete()\n  fullName: System.ComponentModel.Composition.Hosting.AtomicComposition.Complete()\n- uid: System.ComponentModel.Composition.Hosting.AtomicComposition.Dispose\n  parent: System.ComponentModel.Composition.Hosting.AtomicComposition\n  isExternal: false\n  name: Dispose()\n  nameWithType: AtomicComposition.Dispose()\n  fullName: System.ComponentModel.Composition.Hosting.AtomicComposition.Dispose()\n- uid: System.ComponentModel.Composition.Hosting.AtomicComposition.Dispose(System.Boolean)\n  parent: System.ComponentModel.Composition.Hosting.AtomicComposition\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: AtomicComposition.Dispose(Boolean)\n  fullName: System.ComponentModel.Composition.Hosting.AtomicComposition.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.ComponentModel.Composition.Hosting.AtomicComposition.SetValue(System.Object,System.Object)\n  parent: System.ComponentModel.Composition.Hosting.AtomicComposition\n  isExternal: false\n  name: SetValue(Object,Object)\n  nameWithType: AtomicComposition.SetValue(Object,Object)\n  fullName: System.ComponentModel.Composition.Hosting.AtomicComposition.SetValue(Object,Object)\n- uid: System.ComponentModel.Composition.Hosting.AtomicComposition.TryGetValue``1(System.Object,``0@)\n  parent: System.ComponentModel.Composition.Hosting.AtomicComposition\n  isExternal: false\n  name: TryGetValue(Object,T)\n  nameWithType: AtomicComposition.TryGetValue(Object,T)\n  fullName: System.ComponentModel.Composition.Hosting.AtomicComposition.TryGetValue(Object,T)\n- uid: T\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.ComponentModel.Composition.Hosting.AtomicComposition.TryGetValue``1(System.Object,System.Boolean,``0@)\n  parent: System.ComponentModel.Composition.Hosting.AtomicComposition\n  isExternal: false\n  name: TryGetValue(Object,Boolean,T)\n  nameWithType: AtomicComposition.TryGetValue(Object,Boolean,T)\n  fullName: System.ComponentModel.Composition.Hosting.AtomicComposition.TryGetValue(Object,Boolean,T)\n- uid: System.ComponentModel.Composition.Hosting.AtomicComposition.#ctor*\n  parent: System.ComponentModel.Composition.Hosting.AtomicComposition\n  isExternal: false\n  name: AtomicComposition\n  nameWithType: AtomicComposition.AtomicComposition\n- uid: System.ComponentModel.Composition.Hosting.AtomicComposition.AddCompleteAction*\n  parent: System.ComponentModel.Composition.Hosting.AtomicComposition\n  isExternal: false\n  name: AddCompleteAction\n  nameWithType: AtomicComposition.AddCompleteAction\n- uid: System.ComponentModel.Composition.Hosting.AtomicComposition.AddRevertAction*\n  parent: System.ComponentModel.Composition.Hosting.AtomicComposition\n  isExternal: false\n  name: AddRevertAction\n  nameWithType: AtomicComposition.AddRevertAction\n- uid: System.ComponentModel.Composition.Hosting.AtomicComposition.Complete*\n  parent: System.ComponentModel.Composition.Hosting.AtomicComposition\n  isExternal: false\n  name: Complete\n  nameWithType: AtomicComposition.Complete\n- uid: System.ComponentModel.Composition.Hosting.AtomicComposition.Dispose*\n  parent: System.ComponentModel.Composition.Hosting.AtomicComposition\n  isExternal: false\n  name: Dispose\n  nameWithType: AtomicComposition.Dispose\n- uid: System.ComponentModel.Composition.Hosting.AtomicComposition.SetValue*\n  parent: System.ComponentModel.Composition.Hosting.AtomicComposition\n  isExternal: false\n  name: SetValue\n  nameWithType: AtomicComposition.SetValue\n- uid: System.ComponentModel.Composition.Hosting.AtomicComposition.TryGetValue<T>*\n  parent: System.ComponentModel.Composition.Hosting.AtomicComposition\n  isExternal: false\n  name: TryGetValue<T>\n  nameWithType: AtomicComposition.TryGetValue<T>\n"}