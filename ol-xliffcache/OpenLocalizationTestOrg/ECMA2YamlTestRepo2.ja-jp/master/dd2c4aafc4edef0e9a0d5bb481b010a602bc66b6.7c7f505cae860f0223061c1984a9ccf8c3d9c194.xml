{"nodes":[{"pos":[1658,1835],"content":"Allows security actions for <xref href=\"System.Security.Permissions.SecurityPermission\"></xref> to be applied to code using declarative security. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Allows security actions for <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.SecurityPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to be applied to code using declarative security.","pos":[0,145],"source":"Allows security actions for <xref href=\"System.Security.Permissions.SecurityPermission\"></xref> to be applied to code using declarative security."},{"content":"This class cannot be inherited.","pos":[146,177]}]},{"pos":[1848,3341],"content":"The scope of the declaration that is allowed depends on the <xref:System.Security.Permissions.SecurityAction> that is used.       The security information declared by a security attribute is stored in the metadata of the attribute target and is accessed by the system at run time. Security attributes are used only for declarative security. For imperative security, use the corresponding permission class.       When you use the SecurityPermissionAttribute class, follow the security action with the permission(s) that are being requested. Each security permission that can be requested, as defined in the <xref:System.Security.Permissions.SecurityPermissionFlag> enumeration, has a corresponding property in the SecurityPermissionAttribute class. For example, to demand the ability to access unmanaged code, follow the demand statement with the property setting that is being requested, as follows: `SecurityPermissionAttribute(SecurityAction.Demand, UnmanagedCode=true)`.      > [!NOTE] >  An exception to the equivalence between the <xref:System.Security.Permissions.SecurityPermissionFlag> enumeration and the SecurityPermissionAttribute properties is that the <xref:System.Security.Permissions.SecurityPermissionFlag> enumeration value is represented by the <xref:System.Security.Permissions.SecurityAttribute.Unrestricted%2A> property (inherited from the <xref:System.Security.Permissions.SecurityAttribute> class). To demand all security permissions, specify `Unrestricted=true`.","needQuote":false,"needEscape":true,"nodes":[{"content":"The scope of the declaration that is allowed depends on the &lt;xref:System.Security.Permissions.SecurityAction&gt; that is used.","pos":[0,123],"source":"The scope of the declaration that is allowed depends on the <xref:System.Security.Permissions.SecurityAction> that is used."},{"content":"The security information declared by a security attribute is stored in the metadata of the attribute target and is accessed by the system at run time.","pos":[130,280]},{"content":"Security attributes are used only for declarative security.","pos":[281,340]},{"content":"For imperative security, use the corresponding permission class.","pos":[341,405]},{"content":"When you use the SecurityPermissionAttribute class, follow the security action with the permission(s) that are being requested.","pos":[412,539]},{"content":"Each security permission that can be requested, as defined in the &lt;xref:System.Security.Permissions.SecurityPermissionFlag&gt; enumeration, has a corresponding property in the SecurityPermissionAttribute class.","pos":[540,747],"source":" Each security permission that can be requested, as defined in the <xref:System.Security.Permissions.SecurityPermissionFlag> enumeration, has a corresponding property in the SecurityPermissionAttribute class."},{"content":"For example, to demand the ability to access unmanaged code, follow the demand statement with the property setting that is being requested, as follows: <ph id=\"ph1\">`SecurityPermissionAttribute(SecurityAction.Demand, UnmanagedCode=true)`</ph>.","pos":[748,973],"source":" For example, to demand the ability to access unmanaged code, follow the demand statement with the property setting that is being requested, as follows: `SecurityPermissionAttribute(SecurityAction.Demand, UnmanagedCode=true)`."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  An exception to the equivalence between the &lt;xref:System.Security.Permissions.SecurityPermissionFlag&gt; enumeration and the SecurityPermissionAttribute properties is that the &lt;xref:System.Security.Permissions.SecurityPermissionFlag&gt; enumeration value is represented by the &lt;xref:System.Security.Permissions.SecurityAttribute.Unrestricted%2A&gt; property (inherited from the &lt;xref:System.Security.Permissions.SecurityAttribute&gt; class).","pos":[979,1421],"source":"      > [!NOTE] >  An exception to the equivalence between the <xref:System.Security.Permissions.SecurityPermissionFlag> enumeration and the SecurityPermissionAttribute properties is that the <xref:System.Security.Permissions.SecurityPermissionFlag> enumeration value is represented by the <xref:System.Security.Permissions.SecurityAttribute.Unrestricted%2A> property (inherited from the <xref:System.Security.Permissions.SecurityAttribute> class)."},{"content":"To demand all security permissions, specify <ph id=\"ph1\">`Unrestricted=true`</ph>.","pos":[1422,1486],"source":" To demand all security permissions, specify `Unrestricted=true`."}]},{"pos":[4710,4910],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.SecurityPermissionAttribute\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified <bpt id=\"p2\">&lt;xref href=\"System.Security.Permissions.SecurityAction\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Permissions.SecurityPermissionAttribute\"></xref> class with the specified <xref href=\"System.Security.Permissions.SecurityAction\"></xref>."},{"pos":[5129,5211],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.SecurityAction\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Security.Permissions.SecurityAction\"></xref> values."},{"pos":[5748,5898],"content":"Gets or sets a value indicating whether permission to assert that all this code's callers have the requisite permission for the operation is declared.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating whether permission to assert that all this code's callers have the requisite permission for the operation is declared.","pos":[0,150]}]},{"pos":[6016,6188],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if permission to assert is declared; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if permission to assert is declared; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[6764,6897],"content":"Gets or sets a value that indicates whether code has permission to perform binding redirection in the application configuration file.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value that indicates whether code has permission to perform binding redirection in the application configuration file.","pos":[0,133]}]},{"pos":[6909,7058],"content":"This permission allows redirection of .NET Framework assemblies that have been unified, as well as other assemblies found outside the .NET Framework.","needQuote":true,"needEscape":true,"nodes":[{"content":"This permission allows redirection of .NET Framework assemblies that have been unified, as well as other assemblies found outside the .NET Framework.","pos":[0,149]}]},{"pos":[7183,7357],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if code can perform binding redirects; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if code can perform binding redirects; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[7940,8055],"content":"Gets or sets a value indicating whether permission to manipulate <bpt id=\"p1\">&lt;xref href=\"System.AppDomain\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is declared.","needQuote":true,"needEscape":true,"source":"Gets or sets a value indicating whether permission to manipulate <xref href=\"System.AppDomain\"></xref> is declared."},{"pos":[8180,8394],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if permission to manipulate <bpt id=\"p2\">&lt;xref href=\"System.AppDomain\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> is declared; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if permission to manipulate <xref href=\"System.AppDomain\"></xref> is declared; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[8992,9101],"content":"Gets or sets a value indicating whether permission to alter or manipulate domain security policy is declared.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating whether permission to alter or manipulate domain security policy is declared.","pos":[0,109]}]},{"pos":[9229,9455],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if permission to alter or manipulate security policy in an application domain is declared; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if permission to alter or manipulate security policy in an application domain is declared; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[10036,10131],"content":"Gets or sets a value indicating whether permission to alter or manipulate evidence is declared.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating whether permission to alter or manipulate evidence is declared.","pos":[0,95]}]},{"pos":[10255,10450],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the ability to alter or manipulate evidence is declared; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the ability to alter or manipulate evidence is declared; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[11017,11119],"content":"Gets or sets a value indicating whether permission to view and manipulate security policy is declared.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating whether permission to view and manipulate security policy is declared.","pos":[0,102]}]},{"pos":[11241,11433],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if permission to manipulate security policy is declared; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if permission to manipulate security policy is declared; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[12013,12112],"content":"Gets or sets a value indicating whether permission to manipulate the current principal is declared.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating whether permission to manipulate the current principal is declared.","pos":[0,99]}]},{"pos":[12237,12435],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if permission to manipulate the current principal is declared; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if permission to manipulate the current principal is declared; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[13003,13088],"content":"Gets or sets a value indicating whether permission to manipulate threads is declared.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating whether permission to manipulate threads is declared.","pos":[0,85]}]},{"pos":[13100,13157],"content":"For more information, see <xref:System.Threading.Thread>.","needQuote":true,"needEscape":true,"nodes":[{"content":"For more information, see &lt;xref:System.Threading.Thread&gt;.","pos":[0,57],"source":"For more information, see <xref:System.Threading.Thread>."}]},{"pos":[13279,13463],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if permission to manipulate threads is declared; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if permission to manipulate threads is declared; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[14047,14141],"content":"Creates and returns a new <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.SecurityPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Creates and returns a new <xref href=\"System.Security.Permissions.SecurityPermission\"></xref>."},{"pos":[14154,14468],"content":"This method should only be called by the security system, never by application code.       At compile time, attributes convert security declarations to a serialized form in metadata. Declarative security data in metadata is created from the permission that this method returns that corresponds to this attribute.","needQuote":false,"needEscape":true,"nodes":[{"content":"This method should only be called by the security system, never by application code.       At compile time, attributes convert security declarations to a serialized form in metadata. Declarative security data in metadata is created from the permission that this method returns that corresponds to this attribute.","pos":[0,312],"nodes":[{"content":"This method should only be called by the security system, never by application code.","pos":[0,84]},{"content":"At compile time, attributes convert security declarations to a serialized form in metadata.","pos":[91,182]},{"content":"Declarative security data in metadata is created from the permission that this method returns that corresponds to this attribute.","pos":[183,312]}]}]},{"pos":[14648,14753],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.SecurityPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that corresponds to this attribute.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Security.Permissions.SecurityPermission\"></xref> that corresponds to this attribute."},{"pos":[15301,15380],"content":"Gets or sets a value indicating whether permission to execute code is declared.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating whether permission to execute code is declared.","pos":[0,79]}]},{"pos":[15392,15721],"content":"A demand for <xref:System.Security.Permissions.SecurityPermissionFlag> permission at the assembly level is ignored. If an assembly has the right to execute, <xref:System.Security.Permissions.SecurityPermissionFlag> permission is automatically granted, and setting the Execution property to either `true` or `false` has no effect.","needQuote":true,"needEscape":true,"nodes":[{"content":"A demand for &lt;xref:System.Security.Permissions.SecurityPermissionFlag&gt; permission at the assembly level is ignored.","pos":[0,115],"source":"A demand for <xref:System.Security.Permissions.SecurityPermissionFlag> permission at the assembly level is ignored."},{"content":"If an assembly has the right to execute, &lt;xref:System.Security.Permissions.SecurityPermissionFlag&gt; permission is automatically granted, and setting the Execution property to either <ph id=\"ph1\">`true`</ph> or <ph id=\"ph2\">`false`</ph> has no effect.","pos":[116,329],"source":" If an assembly has the right to execute, <xref:System.Security.Permissions.SecurityPermissionFlag> permission is automatically granted, and setting the Execution property to either `true` or `false` has no effect."}]},{"pos":[15839,16017],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if permission to execute code is declared; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if permission to execute code is declared; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[16538,16667],"content":"Gets or sets all permission flags comprising the <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.SecurityPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> permissions.","needQuote":true,"needEscape":true,"source":"Gets or sets all permission flags comprising the <xref href=\"System.Security.Permissions.SecurityPermission\"></xref> permissions."},{"pos":[16863,16989],"content":"One or more of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.SecurityPermissionFlag\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values combined using a bitwise OR.","needQuote":true,"needEscape":true,"source":"One or more of the <xref href=\"System.Security.Permissions.SecurityPermissionFlag\"></xref> values combined using a bitwise OR."},{"pos":[17173,17331],"content":"An attempt is made to set this property to an invalid value. See <xref href=\"System.Security.Permissions.SecurityPermissionFlag\"></xref> for the valid values.","needQuote":true,"needEscape":true,"nodes":[{"content":"An attempt is made to set this property to an invalid value.","pos":[0,60]},{"content":"See <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.SecurityPermissionFlag\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for the valid values.","pos":[61,158],"source":" See <xref href=\"System.Security.Permissions.SecurityPermissionFlag\"></xref> for the valid values."}]},{"pos":[17801,17973],"content":"Gets or sets a value indicating whether code can plug into the common language runtime infrastructure, such as adding Remoting Context Sinks, Envoy Sinks and Dynamic Sinks.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating whether code can plug into the common language runtime infrastructure, such as adding Remoting Context Sinks, Envoy Sinks and Dynamic Sinks.","pos":[0,172]}]},{"pos":[18096,18297],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if code can plug into the common language runtime infrastructure; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if code can plug into the common language runtime infrastructure; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[18903,18990],"content":"Gets or sets a value indicating whether code can configure remoting types and channels.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating whether code can configure remoting types and channels.","pos":[0,87]}]},{"pos":[19120,19306],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if code can configure remoting types and channels; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if code can configure remoting types and channels; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[19924,20041],"content":"Gets or sets a value indicating whether code can use a serialization formatter to serialize or deserialize an object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating whether code can use a serialization formatter to serialize or deserialize an object.","pos":[0,117]}]},{"pos":[20172,20388],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if code can use a serialization formatter to serialize or deserialize an object; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if code can use a serialization formatter to serialize or deserialize an object; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[20977,21068],"content":"Gets or sets a value indicating whether permission to bypass code verification is declared.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating whether permission to bypass code verification is declared.","pos":[0,91]}]},{"pos":[21314,21504],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if permission to bypass code verification is declared; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if permission to bypass code verification is declared; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[22072,22158],"content":"Gets or sets a value indicating whether permission to call unmanaged code is declared.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating whether permission to call unmanaged code is declared.","pos":[0,86]}]},{"pos":[22280,22465],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if permission to call unmanaged code is declared; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if permission to call unmanaged code is declared; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Permissions.SecurityPermissionAttribute\n  id: SecurityPermissionAttribute\n  children:\n  - System.Security.Permissions.SecurityPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)\n  - System.Security.Permissions.SecurityPermissionAttribute.Assertion\n  - System.Security.Permissions.SecurityPermissionAttribute.BindingRedirects\n  - System.Security.Permissions.SecurityPermissionAttribute.ControlAppDomain\n  - System.Security.Permissions.SecurityPermissionAttribute.ControlDomainPolicy\n  - System.Security.Permissions.SecurityPermissionAttribute.ControlEvidence\n  - System.Security.Permissions.SecurityPermissionAttribute.ControlPolicy\n  - System.Security.Permissions.SecurityPermissionAttribute.ControlPrincipal\n  - System.Security.Permissions.SecurityPermissionAttribute.ControlThread\n  - System.Security.Permissions.SecurityPermissionAttribute.CreatePermission\n  - System.Security.Permissions.SecurityPermissionAttribute.Execution\n  - System.Security.Permissions.SecurityPermissionAttribute.Flags\n  - System.Security.Permissions.SecurityPermissionAttribute.Infrastructure\n  - System.Security.Permissions.SecurityPermissionAttribute.RemotingConfiguration\n  - System.Security.Permissions.SecurityPermissionAttribute.SerializationFormatter\n  - System.Security.Permissions.SecurityPermissionAttribute.SkipVerification\n  - System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode\n  langs:\n  - csharp\n  name: SecurityPermissionAttribute\n  nameWithType: SecurityPermissionAttribute\n  fullName: System.Security.Permissions.SecurityPermissionAttribute\n  type: Class\n  summary: Allows security actions for <xref href=\"System.Security.Permissions.SecurityPermission\"></xref> to be applied to code using declarative security. This class cannot be inherited.\n  remarks: \"The scope of the declaration that is allowed depends on the <xref:System.Security.Permissions.SecurityAction> that is used.  \\n  \\n The security information declared by a security attribute is stored in the metadata of the attribute target and is accessed by the system at run time. Security attributes are used only for declarative security. For imperative security, use the corresponding permission class.  \\n  \\n When you use the SecurityPermissionAttribute class, follow the security action with the permission(s) that are being requested. Each security permission that can be requested, as defined in the <xref:System.Security.Permissions.SecurityPermissionFlag> enumeration, has a corresponding property in the SecurityPermissionAttribute class. For example, to demand the ability to access unmanaged code, follow the demand statement with the property setting that is being requested, as follows: `SecurityPermissionAttribute(SecurityAction.Demand, UnmanagedCode=true)`.  \\n  \\n> [!NOTE]\\n>  An exception to the equivalence between the <xref:System.Security.Permissions.SecurityPermissionFlag> enumeration and the SecurityPermissionAttribute properties is that the <xref:System.Security.Permissions.SecurityPermissionFlag> enumeration value is represented by the <xref:System.Security.Permissions.SecurityAttribute.Unrestricted%2A> property (inherited from the <xref:System.Security.Permissions.SecurityAttribute> class). To demand all security permissions, specify `Unrestricted=true`.\"\n  syntax:\n    content: >-\n      [System.AttributeUsage(System.AttributeTargets.Assembly | System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Constructor | System.AttributeTargets.Method, AllowMultiple=true, Inherited=false)]\n\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class SecurityPermissionAttribute : System.Security.Permissions.CodeAccessSecurityAttribute\n  inheritance:\n  - System.Attribute\n  - System.Security.Permissions.SecurityAttribute\n  - System.Security.Permissions.CodeAccessSecurityAttribute\n  implements: []\n  inheritedMembers:\n  - System.Security.Permissions.SecurityAttribute.Action\n  - System.Security.Permissions.SecurityAttribute.Unrestricted\n  platform:\n  - net462\n- uid: System.Security.Permissions.SecurityPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)\n  id: '#ctor(System.Security.Permissions.SecurityAction)'\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  langs:\n  - csharp\n  name: SecurityPermissionAttribute(SecurityAction)\n  nameWithType: SecurityPermissionAttribute.SecurityPermissionAttribute(SecurityAction)\n  fullName: System.Security.Permissions.SecurityPermissionAttribute.SecurityPermissionAttribute(SecurityAction)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Initializes a new instance of the <xref href=\"System.Security.Permissions.SecurityPermissionAttribute\"></xref> class with the specified <xref href=\"System.Security.Permissions.SecurityAction\"></xref>.\n  syntax:\n    content: public SecurityPermissionAttribute (System.Security.Permissions.SecurityAction action);\n    parameters:\n    - id: action\n      type: System.Security.Permissions.SecurityAction\n      description: One of the <xref href=\"System.Security.Permissions.SecurityAction\"></xref> values.\n  overload: System.Security.Permissions.SecurityPermissionAttribute.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Permissions.SecurityPermissionAttribute.Assertion\n  id: Assertion\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  langs:\n  - csharp\n  name: Assertion\n  nameWithType: SecurityPermissionAttribute.Assertion\n  fullName: System.Security.Permissions.SecurityPermissionAttribute.Assertion\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Gets or sets a value indicating whether permission to assert that all this code's callers have the requisite permission for the operation is declared.\n  syntax:\n    content: public bool Assertion { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if permission to assert is declared; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Permissions.SecurityPermissionAttribute.Assertion*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Permissions.SecurityPermissionAttribute.BindingRedirects\n  id: BindingRedirects\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  langs:\n  - csharp\n  name: BindingRedirects\n  nameWithType: SecurityPermissionAttribute.BindingRedirects\n  fullName: System.Security.Permissions.SecurityPermissionAttribute.BindingRedirects\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Gets or sets a value that indicates whether code has permission to perform binding redirection in the application configuration file.\n  remarks: This permission allows redirection of .NET Framework assemblies that have been unified, as well as other assemblies found outside the .NET Framework.\n  syntax:\n    content: public bool BindingRedirects { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if code can perform binding redirects; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Permissions.SecurityPermissionAttribute.BindingRedirects*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Permissions.SecurityPermissionAttribute.ControlAppDomain\n  id: ControlAppDomain\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  langs:\n  - csharp\n  name: ControlAppDomain\n  nameWithType: SecurityPermissionAttribute.ControlAppDomain\n  fullName: System.Security.Permissions.SecurityPermissionAttribute.ControlAppDomain\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Gets or sets a value indicating whether permission to manipulate <xref href=\"System.AppDomain\"></xref> is declared.\n  syntax:\n    content: public bool ControlAppDomain { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if permission to manipulate <xref href=\"System.AppDomain\"></xref> is declared; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Permissions.SecurityPermissionAttribute.ControlAppDomain*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Permissions.SecurityPermissionAttribute.ControlDomainPolicy\n  id: ControlDomainPolicy\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  langs:\n  - csharp\n  name: ControlDomainPolicy\n  nameWithType: SecurityPermissionAttribute.ControlDomainPolicy\n  fullName: System.Security.Permissions.SecurityPermissionAttribute.ControlDomainPolicy\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Gets or sets a value indicating whether permission to alter or manipulate domain security policy is declared.\n  syntax:\n    content: public bool ControlDomainPolicy { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if permission to alter or manipulate security policy in an application domain is declared; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Permissions.SecurityPermissionAttribute.ControlDomainPolicy*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Permissions.SecurityPermissionAttribute.ControlEvidence\n  id: ControlEvidence\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  langs:\n  - csharp\n  name: ControlEvidence\n  nameWithType: SecurityPermissionAttribute.ControlEvidence\n  fullName: System.Security.Permissions.SecurityPermissionAttribute.ControlEvidence\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Gets or sets a value indicating whether permission to alter or manipulate evidence is declared.\n  syntax:\n    content: public bool ControlEvidence { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the ability to alter or manipulate evidence is declared; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Permissions.SecurityPermissionAttribute.ControlEvidence*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Permissions.SecurityPermissionAttribute.ControlPolicy\n  id: ControlPolicy\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  langs:\n  - csharp\n  name: ControlPolicy\n  nameWithType: SecurityPermissionAttribute.ControlPolicy\n  fullName: System.Security.Permissions.SecurityPermissionAttribute.ControlPolicy\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Gets or sets a value indicating whether permission to view and manipulate security policy is declared.\n  syntax:\n    content: public bool ControlPolicy { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if permission to manipulate security policy is declared; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Permissions.SecurityPermissionAttribute.ControlPolicy*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Permissions.SecurityPermissionAttribute.ControlPrincipal\n  id: ControlPrincipal\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  langs:\n  - csharp\n  name: ControlPrincipal\n  nameWithType: SecurityPermissionAttribute.ControlPrincipal\n  fullName: System.Security.Permissions.SecurityPermissionAttribute.ControlPrincipal\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Gets or sets a value indicating whether permission to manipulate the current principal is declared.\n  syntax:\n    content: public bool ControlPrincipal { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if permission to manipulate the current principal is declared; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Permissions.SecurityPermissionAttribute.ControlPrincipal*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Permissions.SecurityPermissionAttribute.ControlThread\n  id: ControlThread\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  langs:\n  - csharp\n  name: ControlThread\n  nameWithType: SecurityPermissionAttribute.ControlThread\n  fullName: System.Security.Permissions.SecurityPermissionAttribute.ControlThread\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Gets or sets a value indicating whether permission to manipulate threads is declared.\n  remarks: For more information, see <xref:System.Threading.Thread>.\n  syntax:\n    content: public bool ControlThread { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if permission to manipulate threads is declared; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Permissions.SecurityPermissionAttribute.ControlThread*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Permissions.SecurityPermissionAttribute.CreatePermission\n  id: CreatePermission\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  langs:\n  - csharp\n  name: CreatePermission()\n  nameWithType: SecurityPermissionAttribute.CreatePermission()\n  fullName: System.Security.Permissions.SecurityPermissionAttribute.CreatePermission()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Creates and returns a new <xref href=\"System.Security.Permissions.SecurityPermission\"></xref>.\n  remarks: \"This method should only be called by the security system, never by application code.  \\n  \\n At compile time, attributes convert security declarations to a serialized form in metadata. Declarative security data in metadata is created from the permission that this method returns that corresponds to this attribute.\"\n  syntax:\n    content: public override System.Security.IPermission CreatePermission ();\n    parameters: []\n    return:\n      type: System.Security.IPermission\n      description: A <xref href=\"System.Security.Permissions.SecurityPermission\"></xref> that corresponds to this attribute.\n  overload: System.Security.Permissions.SecurityPermissionAttribute.CreatePermission*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Permissions.SecurityPermissionAttribute.Execution\n  id: Execution\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  langs:\n  - csharp\n  name: Execution\n  nameWithType: SecurityPermissionAttribute.Execution\n  fullName: System.Security.Permissions.SecurityPermissionAttribute.Execution\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Gets or sets a value indicating whether permission to execute code is declared.\n  remarks: A demand for <xref:System.Security.Permissions.SecurityPermissionFlag> permission at the assembly level is ignored. If an assembly has the right to execute, <xref:System.Security.Permissions.SecurityPermissionFlag> permission is automatically granted, and setting the Execution property to either `true` or `false` has no effect.\n  syntax:\n    content: public bool Execution { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if permission to execute code is declared; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Permissions.SecurityPermissionAttribute.Execution*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Permissions.SecurityPermissionAttribute.Flags\n  id: Flags\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  langs:\n  - csharp\n  name: Flags\n  nameWithType: SecurityPermissionAttribute.Flags\n  fullName: System.Security.Permissions.SecurityPermissionAttribute.Flags\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Gets or sets all permission flags comprising the <xref href=\"System.Security.Permissions.SecurityPermission\"></xref> permissions.\n  syntax:\n    content: public System.Security.Permissions.SecurityPermissionFlag Flags { get; set; }\n    return:\n      type: System.Security.Permissions.SecurityPermissionFlag\n      description: One or more of the <xref href=\"System.Security.Permissions.SecurityPermissionFlag\"></xref> values combined using a bitwise OR.\n  overload: System.Security.Permissions.SecurityPermissionAttribute.Flags*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: An attempt is made to set this property to an invalid value. See <xref href=\"System.Security.Permissions.SecurityPermissionFlag\"></xref> for the valid values.\n  platform:\n  - net462\n- uid: System.Security.Permissions.SecurityPermissionAttribute.Infrastructure\n  id: Infrastructure\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  langs:\n  - csharp\n  name: Infrastructure\n  nameWithType: SecurityPermissionAttribute.Infrastructure\n  fullName: System.Security.Permissions.SecurityPermissionAttribute.Infrastructure\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Gets or sets a value indicating whether code can plug into the common language runtime infrastructure, such as adding Remoting Context Sinks, Envoy Sinks and Dynamic Sinks.\n  syntax:\n    content: public bool Infrastructure { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if code can plug into the common language runtime infrastructure; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Permissions.SecurityPermissionAttribute.Infrastructure*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Permissions.SecurityPermissionAttribute.RemotingConfiguration\n  id: RemotingConfiguration\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  langs:\n  - csharp\n  name: RemotingConfiguration\n  nameWithType: SecurityPermissionAttribute.RemotingConfiguration\n  fullName: System.Security.Permissions.SecurityPermissionAttribute.RemotingConfiguration\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Gets or sets a value indicating whether code can configure remoting types and channels.\n  syntax:\n    content: public bool RemotingConfiguration { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if code can configure remoting types and channels; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Permissions.SecurityPermissionAttribute.RemotingConfiguration*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Permissions.SecurityPermissionAttribute.SerializationFormatter\n  id: SerializationFormatter\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  langs:\n  - csharp\n  name: SerializationFormatter\n  nameWithType: SecurityPermissionAttribute.SerializationFormatter\n  fullName: System.Security.Permissions.SecurityPermissionAttribute.SerializationFormatter\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Gets or sets a value indicating whether code can use a serialization formatter to serialize or deserialize an object.\n  syntax:\n    content: public bool SerializationFormatter { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if code can use a serialization formatter to serialize or deserialize an object; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Permissions.SecurityPermissionAttribute.SerializationFormatter*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Permissions.SecurityPermissionAttribute.SkipVerification\n  id: SkipVerification\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  langs:\n  - csharp\n  name: SkipVerification\n  nameWithType: SecurityPermissionAttribute.SkipVerification\n  fullName: System.Security.Permissions.SecurityPermissionAttribute.SkipVerification\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Gets or sets a value indicating whether permission to bypass code verification is declared.\n  remarks: >-\n    > [!CAUTION]\n\n    >  This is a powerful permission that should be granted only to highly trusted code.\n  syntax:\n    content: public bool SkipVerification { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if permission to bypass code verification is declared; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Permissions.SecurityPermissionAttribute.SkipVerification*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode\n  id: UnmanagedCode\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  langs:\n  - csharp\n  name: UnmanagedCode\n  nameWithType: SecurityPermissionAttribute.UnmanagedCode\n  fullName: System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Gets or sets a value indicating whether permission to call unmanaged code is declared.\n  syntax:\n    content: public bool UnmanagedCode { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if permission to call unmanaged code is declared; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Security.Permissions.CodeAccessSecurityAttribute\n  isExternal: false\n  name: System.Security.Permissions.CodeAccessSecurityAttribute\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.Security.Permissions.SecurityPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: SecurityPermissionAttribute(SecurityAction)\n  nameWithType: SecurityPermissionAttribute.SecurityPermissionAttribute(SecurityAction)\n  fullName: System.Security.Permissions.SecurityPermissionAttribute.SecurityPermissionAttribute(SecurityAction)\n- uid: System.Security.Permissions.SecurityAction\n  parent: System.Security.Permissions\n  isExternal: false\n  name: SecurityAction\n  nameWithType: SecurityAction\n  fullName: System.Security.Permissions.SecurityAction\n- uid: System.Security.Permissions.SecurityPermissionAttribute.Assertion\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: Assertion\n  nameWithType: SecurityPermissionAttribute.Assertion\n  fullName: System.Security.Permissions.SecurityPermissionAttribute.Assertion\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Permissions.SecurityPermissionAttribute.BindingRedirects\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: BindingRedirects\n  nameWithType: SecurityPermissionAttribute.BindingRedirects\n  fullName: System.Security.Permissions.SecurityPermissionAttribute.BindingRedirects\n- uid: System.Security.Permissions.SecurityPermissionAttribute.ControlAppDomain\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: ControlAppDomain\n  nameWithType: SecurityPermissionAttribute.ControlAppDomain\n  fullName: System.Security.Permissions.SecurityPermissionAttribute.ControlAppDomain\n- uid: System.Security.Permissions.SecurityPermissionAttribute.ControlDomainPolicy\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: ControlDomainPolicy\n  nameWithType: SecurityPermissionAttribute.ControlDomainPolicy\n  fullName: System.Security.Permissions.SecurityPermissionAttribute.ControlDomainPolicy\n- uid: System.Security.Permissions.SecurityPermissionAttribute.ControlEvidence\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: ControlEvidence\n  nameWithType: SecurityPermissionAttribute.ControlEvidence\n  fullName: System.Security.Permissions.SecurityPermissionAttribute.ControlEvidence\n- uid: System.Security.Permissions.SecurityPermissionAttribute.ControlPolicy\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: ControlPolicy\n  nameWithType: SecurityPermissionAttribute.ControlPolicy\n  fullName: System.Security.Permissions.SecurityPermissionAttribute.ControlPolicy\n- uid: System.Security.Permissions.SecurityPermissionAttribute.ControlPrincipal\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: ControlPrincipal\n  nameWithType: SecurityPermissionAttribute.ControlPrincipal\n  fullName: System.Security.Permissions.SecurityPermissionAttribute.ControlPrincipal\n- uid: System.Security.Permissions.SecurityPermissionAttribute.ControlThread\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: ControlThread\n  nameWithType: SecurityPermissionAttribute.ControlThread\n  fullName: System.Security.Permissions.SecurityPermissionAttribute.ControlThread\n- uid: System.Security.Permissions.SecurityPermissionAttribute.CreatePermission\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: CreatePermission()\n  nameWithType: SecurityPermissionAttribute.CreatePermission()\n  fullName: System.Security.Permissions.SecurityPermissionAttribute.CreatePermission()\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n- uid: System.Security.Permissions.SecurityPermissionAttribute.Execution\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: Execution\n  nameWithType: SecurityPermissionAttribute.Execution\n  fullName: System.Security.Permissions.SecurityPermissionAttribute.Execution\n- uid: System.Security.Permissions.SecurityPermissionAttribute.Flags\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: Flags\n  nameWithType: SecurityPermissionAttribute.Flags\n  fullName: System.Security.Permissions.SecurityPermissionAttribute.Flags\n- uid: System.Security.Permissions.SecurityPermissionFlag\n  parent: System.Security.Permissions\n  isExternal: false\n  name: SecurityPermissionFlag\n  nameWithType: SecurityPermissionFlag\n  fullName: System.Security.Permissions.SecurityPermissionFlag\n- uid: System.Security.Permissions.SecurityPermissionAttribute.Infrastructure\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: Infrastructure\n  nameWithType: SecurityPermissionAttribute.Infrastructure\n  fullName: System.Security.Permissions.SecurityPermissionAttribute.Infrastructure\n- uid: System.Security.Permissions.SecurityPermissionAttribute.RemotingConfiguration\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: RemotingConfiguration\n  nameWithType: SecurityPermissionAttribute.RemotingConfiguration\n  fullName: System.Security.Permissions.SecurityPermissionAttribute.RemotingConfiguration\n- uid: System.Security.Permissions.SecurityPermissionAttribute.SerializationFormatter\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: SerializationFormatter\n  nameWithType: SecurityPermissionAttribute.SerializationFormatter\n  fullName: System.Security.Permissions.SecurityPermissionAttribute.SerializationFormatter\n- uid: System.Security.Permissions.SecurityPermissionAttribute.SkipVerification\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: SkipVerification\n  nameWithType: SecurityPermissionAttribute.SkipVerification\n  fullName: System.Security.Permissions.SecurityPermissionAttribute.SkipVerification\n- uid: System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: UnmanagedCode\n  nameWithType: SecurityPermissionAttribute.UnmanagedCode\n  fullName: System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode\n- uid: System.Security.Permissions.SecurityPermissionAttribute.#ctor*\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: SecurityPermissionAttribute\n  nameWithType: SecurityPermissionAttribute.SecurityPermissionAttribute\n- uid: System.Security.Permissions.SecurityPermissionAttribute.Assertion*\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: Assertion\n  nameWithType: SecurityPermissionAttribute.Assertion\n- uid: System.Security.Permissions.SecurityPermissionAttribute.BindingRedirects*\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: BindingRedirects\n  nameWithType: SecurityPermissionAttribute.BindingRedirects\n- uid: System.Security.Permissions.SecurityPermissionAttribute.ControlAppDomain*\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: ControlAppDomain\n  nameWithType: SecurityPermissionAttribute.ControlAppDomain\n- uid: System.Security.Permissions.SecurityPermissionAttribute.ControlDomainPolicy*\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: ControlDomainPolicy\n  nameWithType: SecurityPermissionAttribute.ControlDomainPolicy\n- uid: System.Security.Permissions.SecurityPermissionAttribute.ControlEvidence*\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: ControlEvidence\n  nameWithType: SecurityPermissionAttribute.ControlEvidence\n- uid: System.Security.Permissions.SecurityPermissionAttribute.ControlPolicy*\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: ControlPolicy\n  nameWithType: SecurityPermissionAttribute.ControlPolicy\n- uid: System.Security.Permissions.SecurityPermissionAttribute.ControlPrincipal*\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: ControlPrincipal\n  nameWithType: SecurityPermissionAttribute.ControlPrincipal\n- uid: System.Security.Permissions.SecurityPermissionAttribute.ControlThread*\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: ControlThread\n  nameWithType: SecurityPermissionAttribute.ControlThread\n- uid: System.Security.Permissions.SecurityPermissionAttribute.CreatePermission*\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: CreatePermission\n  nameWithType: SecurityPermissionAttribute.CreatePermission\n- uid: System.Security.Permissions.SecurityPermissionAttribute.Execution*\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: Execution\n  nameWithType: SecurityPermissionAttribute.Execution\n- uid: System.Security.Permissions.SecurityPermissionAttribute.Flags*\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: Flags\n  nameWithType: SecurityPermissionAttribute.Flags\n- uid: System.Security.Permissions.SecurityPermissionAttribute.Infrastructure*\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: Infrastructure\n  nameWithType: SecurityPermissionAttribute.Infrastructure\n- uid: System.Security.Permissions.SecurityPermissionAttribute.RemotingConfiguration*\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: RemotingConfiguration\n  nameWithType: SecurityPermissionAttribute.RemotingConfiguration\n- uid: System.Security.Permissions.SecurityPermissionAttribute.SerializationFormatter*\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: SerializationFormatter\n  nameWithType: SecurityPermissionAttribute.SerializationFormatter\n- uid: System.Security.Permissions.SecurityPermissionAttribute.SkipVerification*\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: SkipVerification\n  nameWithType: SecurityPermissionAttribute.SkipVerification\n- uid: System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode*\n  parent: System.Security.Permissions.SecurityPermissionAttribute\n  isExternal: false\n  name: UnmanagedCode\n  nameWithType: SecurityPermissionAttribute.UnmanagedCode\n"}