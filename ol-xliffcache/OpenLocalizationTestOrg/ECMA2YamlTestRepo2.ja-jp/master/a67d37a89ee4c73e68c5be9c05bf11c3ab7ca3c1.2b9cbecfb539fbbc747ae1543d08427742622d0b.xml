{"nodes":[{"pos":[1175,1243],"content":"Encapsulates the results of an asynchronous operation on a delegate.","needQuote":true,"needEscape":true,"nodes":[{"content":"Encapsulates the results of an asynchronous operation on a delegate.","pos":[0,68]}]},{"pos":[1256,1819],"content":"The AsyncResult class is used in conjunction with asynchronous method calls made using delegates. The <xref:System.IAsyncResult> returned from the delegate's `BeginInvoke` method can be cast to an AsyncResult. The AsyncResult has the <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate%2A> property that holds the delegate object on which the asynchronous call was invoked.       For more information about `BeginInvoke` and asynchronous calls using delegates, see [Asynchronous Programming Using Delegates](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"The AsyncResult class is used in conjunction with asynchronous method calls made using delegates.","pos":[0,97]},{"content":"The &lt;xref:System.IAsyncResult&gt; returned from the delegate's <ph id=\"ph1\">`BeginInvoke`</ph> method can be cast to an AsyncResult.","pos":[98,209],"source":" The <xref:System.IAsyncResult> returned from the delegate's `BeginInvoke` method can be cast to an AsyncResult."},{"content":"The AsyncResult has the &lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate%2A&gt; property that holds the delegate object on which the asynchronous call was invoked.","pos":[210,387],"source":" The AsyncResult has the <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate%2A> property that holds the delegate object on which the asynchronous call was invoked."},{"content":"For more information about <ph id=\"ph1\">`BeginInvoke`</ph> and asynchronous calls using delegates, see <bpt id=\"p1\">[</bpt>Asynchronous Programming Using Delegates<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[394,561],"source":"       For more information about `BeginInvoke` and asynchronous calls using delegates, see [Asynchronous Programming Using Delegates](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[3962,4030],"content":"Gets the delegate object on which the asynchronous call was invoked.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the delegate object on which the asynchronous call was invoked.","pos":[0,68]}]},{"pos":[4043,4474],"content":"The AsyncDelegate property can be cast to the actual class of the user-defined delegate.       For example, if the delegate that was used to make the asynchronous call is of type `MyDelegate`, the delegate that is returned by this property must be cast to `MyDelegate`. The callback method can then call the delegate's `EndInvoke` method with the correct signature, in order to obtain the results of the asynchronous method call.","needQuote":false,"needEscape":true,"nodes":[{"content":"The AsyncDelegate property can be cast to the actual class of the user-defined delegate.","pos":[0,88]},{"content":"For example, if the delegate that was used to make the asynchronous call is of type <ph id=\"ph1\">`MyDelegate`</ph>, the delegate that is returned by this property must be cast to <ph id=\"ph2\">`MyDelegate`</ph>.","pos":[95,269],"source":"       For example, if the delegate that was used to make the asynchronous call is of type `MyDelegate`, the delegate that is returned by this property must be cast to `MyDelegate`."},{"content":"The callback method can then call the delegate's <ph id=\"ph1\">`EndInvoke`</ph> method with the correct signature, in order to obtain the results of the asynchronous method call.","pos":[270,429],"source":" The callback method can then call the delegate's `EndInvoke` method with the correct signature, in order to obtain the results of the asynchronous method call."}]},{"pos":[5964,6027],"content":"The delegate object on which the asynchronous call was invoked.","needQuote":true,"needEscape":true,"nodes":[{"content":"The delegate object on which the asynchronous call was invoked.","pos":[0,63]}]},{"pos":[6821,6914],"content":"Implements the <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Remoting.Messaging.IMessageSink\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> interface.","needQuote":true,"needEscape":true,"source":"Implements the <xref href=\"System.Runtime.Remoting.Messaging.IMessageSink\"></xref> interface."},{"pos":[6926,7407],"content":"The AsyncProcessMessage method of the <xref:System.Runtime.Remoting.Messaging.IMessageSink> interface is not relevant to the <xref:System.Runtime.Remoting.Messaging.AsyncResult> class. Implementation by <xref:System.Runtime.Remoting.Messaging.AsyncResult> throws a <xref:System.NotSupportedException>. Instead, obtain an <xref:System.Runtime.Remoting.Messaging.AsyncResult> by casting the <xref:System.IAsyncResult> interface returned by an asynchronous call made using a delegate.","needQuote":true,"needEscape":true,"nodes":[{"content":"The AsyncProcessMessage method of the <xref:System.Runtime.Remoting.Messaging.IMessageSink> interface is not relevant to the <xref:System.Runtime.Remoting.Messaging.AsyncResult> class. Implementation by <xref:System.Runtime.Remoting.Messaging.AsyncResult> throws a <xref:System.NotSupportedException>. Instead, obtain an <xref:System.Runtime.Remoting.Messaging.AsyncResult> by casting the <xref:System.IAsyncResult> interface returned by an asynchronous call made using a delegate.","pos":[0,481],"nodes":[{"content":"The AsyncProcessMessage method of the &lt;xref:System.Runtime.Remoting.Messaging.IMessageSink&gt; interface is not relevant to the &lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt; class.","pos":[0,184],"source":"The AsyncProcessMessage method of the <xref:System.Runtime.Remoting.Messaging.IMessageSink> interface is not relevant to the <xref:System.Runtime.Remoting.Messaging.AsyncResult> class."},{"content":"Implementation by &lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt; throws a &lt;xref:System.NotSupportedException&gt;.","pos":[185,301],"source":" Implementation by <xref:System.Runtime.Remoting.Messaging.AsyncResult> throws a <xref:System.NotSupportedException>."},{"content":"Instead, obtain an &lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt; by casting the &lt;xref:System.IAsyncResult&gt; interface returned by an asynchronous call made using a delegate.","pos":[302,481],"source":" Instead, obtain an <xref:System.Runtime.Remoting.Messaging.AsyncResult> by casting the <xref:System.IAsyncResult> interface returned by an asynchronous call made using a delegate."}]}]},{"pos":[7725,7811],"content":"The request <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Remoting.Messaging.IMessage\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> interface.","needQuote":true,"needEscape":true,"source":"The request <xref href=\"System.Runtime.Remoting.Messaging.IMessage\"></xref> interface."},{"pos":[7910,8001],"content":"The response <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Remoting.Messaging.IMessageSink\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> interface.","needQuote":true,"needEscape":true,"source":"The response <xref href=\"System.Runtime.Remoting.Messaging.IMessageSink\"></xref> interface."},{"pos":[8092,8113],"content":"No value is returned.","needQuote":true,"needEscape":true,"nodes":[{"content":"No value is returned.","pos":[0,21]}]},{"pos":[8619,8758],"content":"Gets the object provided as the last parameter of a <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_BeginInvoke\" name=\"BeginInvoke\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> method call.","needQuote":true,"needEscape":true,"source":"Gets the object provided as the last parameter of a <xref uid=\"langword_csharp_BeginInvoke\" name=\"BeginInvoke\" href=\"\"></xref> method call."},{"pos":[8770,8909],"content":"For more information about the <ph id=\"ph1\">`BeginInvoke`</ph> method, see <bpt id=\"p1\">[</bpt>Asynchronous Programming Using Delegates<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","needQuote":true,"needEscape":true,"source":"For more information about the `BeginInvoke` method, see [Asynchronous Programming Using Delegates](~/add/includes/ajax-current-ext-md.md)."},{"pos":[10303,10437],"content":"The object provided as the last parameter of a <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_BeginInvoke\" name=\"BeginInvoke\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> method call.","needQuote":true,"needEscape":true,"source":"The object provided as the last parameter of a <xref uid=\"langword_csharp_BeginInvoke\" name=\"BeginInvoke\" href=\"\"></xref> method call."},{"pos":[10959,11115],"content":"Gets a <xref:System.Threading.WaitHandle> that encapsulates Win32 synchronization handles, and allows the implementation of various synchronization schemes.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a &lt;xref:System.Threading.WaitHandle&gt; that encapsulates Win32 synchronization handles, and allows the implementation of various synchronization schemes.","pos":[0,156],"source":"Gets a <xref:System.Threading.WaitHandle> that encapsulates Win32 synchronization handles, and allows the implementation of various synchronization schemes."}]},{"pos":[11128,12575],"content":"The <xref:System.Threading.WaitHandle> returned by this method is automatically signaled when the asynchronous operation has completed.       The wait handle is not closed automatically when you call `EndInvoke` on the delegate that was used to make the asynchronous method call. If you release all references to the wait handle, system resources are freed when garbage collection reclaims the wait handle. To free the system resources as soon as you are finished using the wait handle, call the <xref:System.Threading.WaitHandle.Close%2A?displayProperty=fullName> method. Garbage collection works more efficiently when disposable objects are explicitly closed or disposed.      > [!CAUTION] >  The <xref:System.Threading.WaitHandle> contained in the AsyncWaitHandle property can be used to block the current thread until the asynchronous call is complete. However the <xref:System.Threading.WaitHandle> will ignore the <xref:System.AsyncCallback>, if one was specified during the `BeginInvoke` call. Therefore, a situation can occur where the application shuts down before the <xref:System.AsyncCallback> has finished executing, even if a <xref:System.Threading.WaitHandle> is used to block until the asynchronous call completion. For an example of such a situation, see the example for the <xref:System.Runtime.Remoting.Messaging.AsyncResult> class, and remove the <xref:System.Threading.Thread.Sleep%2A?displayProperty=fullName> statement.","needQuote":false,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Threading.WaitHandle&gt; returned by this method is automatically signaled when the asynchronous operation has completed.","pos":[0,135],"source":"The <xref:System.Threading.WaitHandle> returned by this method is automatically signaled when the asynchronous operation has completed."},{"content":"The wait handle is not closed automatically when you call <ph id=\"ph1\">`EndInvoke`</ph> on the delegate that was used to make the asynchronous method call.","pos":[142,279],"source":"       The wait handle is not closed automatically when you call `EndInvoke` on the delegate that was used to make the asynchronous method call."},{"content":"If you release all references to the wait handle, system resources are freed when garbage collection reclaims the wait handle.","pos":[280,406]},{"content":"To free the system resources as soon as you are finished using the wait handle, call the &lt;xref:System.Threading.WaitHandle.Close%2A?displayProperty=fullName&gt; method.","pos":[407,572],"source":" To free the system resources as soon as you are finished using the wait handle, call the <xref:System.Threading.WaitHandle.Close%2A?displayProperty=fullName> method."},{"content":"Garbage collection works more efficiently when disposable objects are explicitly closed or disposed.","pos":[573,673]},{"content":"&gt; <ph id=\"ph1\">[!CAUTION]</ph> &gt;  The &lt;xref:System.Threading.WaitHandle&gt; contained in the AsyncWaitHandle property can be used to block the current thread until the asynchronous call is complete.","pos":[679,856],"source":"      > [!CAUTION] >  The <xref:System.Threading.WaitHandle> contained in the AsyncWaitHandle property can be used to block the current thread until the asynchronous call is complete."},{"content":"However the &lt;xref:System.Threading.WaitHandle&gt; will ignore the &lt;xref:System.AsyncCallback&gt;, if one was specified during the <ph id=\"ph1\">`BeginInvoke`</ph> call.","pos":[857,1000],"source":" However the <xref:System.Threading.WaitHandle> will ignore the <xref:System.AsyncCallback>, if one was specified during the `BeginInvoke` call."},{"content":"Therefore, a situation can occur where the application shuts down before the &lt;xref:System.AsyncCallback&gt; has finished executing, even if a &lt;xref:System.Threading.WaitHandle&gt; is used to block until the asynchronous call completion.","pos":[1001,1231],"source":" Therefore, a situation can occur where the application shuts down before the <xref:System.AsyncCallback> has finished executing, even if a <xref:System.Threading.WaitHandle> is used to block until the asynchronous call completion."},{"content":"For an example of such a situation, see the example for the &lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt; class, and remove the &lt;xref:System.Threading.Thread.Sleep%2A?displayProperty=fullName&gt; statement.","pos":[1232,1442],"source":" For an example of such a situation, see the example for the <xref:System.Runtime.Remoting.Messaging.AsyncResult> class, and remove the <xref:System.Threading.Thread.Sleep%2A?displayProperty=fullName> statement."}]},{"pos":[14078,14229],"content":"A <xref:System.Threading.WaitHandle> that encapsulates Win32 synchronization handles, and allows the implementation of various synchronization schemes.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Threading.WaitHandle&gt; that encapsulates Win32 synchronization handles, and allows the implementation of various synchronization schemes.","pos":[0,151],"source":"A <xref:System.Threading.WaitHandle> that encapsulates Win32 synchronization handles, and allows the implementation of various synchronization schemes."}]},{"pos":[14791,14931],"content":"Gets a value indicating whether the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_BeginInvoke\" name=\"BeginInvoke\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> call completed synchronously.","needQuote":true,"needEscape":true,"source":"Gets a value indicating whether the <xref uid=\"langword_csharp_BeginInvoke\" name=\"BeginInvoke\" href=\"\"></xref> call completed synchronously."},{"pos":[14944,15339],"content":"If it is detected that the `BeginInvoke` call completed synchronously in the <xref:System.AsyncCallback> delegate, it is probable that the thread that called BeginInvoke is the current thread. Most providers of the <xref:System.IAsyncResult> interface will not use the capability and will return a default `false`.       Current implementation of CompletedSynchronously always returns `false`.","needQuote":false,"needEscape":true,"nodes":[{"content":"If it is detected that the <ph id=\"ph1\">`BeginInvoke`</ph> call completed synchronously in the &lt;xref:System.AsyncCallback&gt; delegate, it is probable that the thread that called BeginInvoke is the current thread.","pos":[0,192],"source":"If it is detected that the `BeginInvoke` call completed synchronously in the <xref:System.AsyncCallback> delegate, it is probable that the thread that called BeginInvoke is the current thread."},{"content":"Most providers of the &lt;xref:System.IAsyncResult&gt; interface will not use the capability and will return a default <ph id=\"ph1\">`false`</ph>.","pos":[193,314],"source":" Most providers of the <xref:System.IAsyncResult> interface will not use the capability and will return a default `false`."},{"content":"Current implementation of CompletedSynchronously always returns <ph id=\"ph1\">`false`</ph>.","pos":[321,393],"source":"       Current implementation of CompletedSynchronously always returns `false`."}]},{"pos":[15474,15721],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_BeginInvoke\" name=\"BeginInvoke\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> call completed synchronously; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref uid=\"langword_csharp_BeginInvoke\" name=\"BeginInvoke\" href=\"\"></xref> call completed synchronously; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[16255,16464],"content":"Gets or sets a value indicating whether <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_EndInvoke\" name=\"EndInvoke\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> has been called on the current <bpt id=\"p2\">&lt;xref href=\"System.Runtime.Remoting.Messaging.AsyncResult\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets or sets a value indicating whether <xref uid=\"langword_csharp_EndInvoke\" name=\"EndInvoke\" href=\"\"></xref> has been called on the current <xref href=\"System.Runtime.Remoting.Messaging.AsyncResult\"></xref>."},{"pos":[16588,16896],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_EndInvoke\" name=\"EndInvoke\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> has been called on the current <bpt id=\"p3\">&lt;xref href=\"System.Runtime.Remoting.Messaging.AsyncResult\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>; otherwise, <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <xref uid=\"langword_csharp_EndInvoke\" name=\"EndInvoke\" href=\"\"></xref> has been called on the current <xref href=\"System.Runtime.Remoting.Messaging.AsyncResult\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[17427,17479],"content":"Gets the response message for the asynchronous call.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the response message for the asynchronous call.","pos":[0,52]}]},{"pos":[17492,17945],"content":"The GetReplyMessage method can return an object after the <xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A> method is called. The <xref:System.Runtime.Remoting.Messaging.IMessage> return value can be cast to an <xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage>.       However, you do not need to call either of these methods directly. They are intended for use by the remoting infrastructure of the .NET Framework.","needQuote":false,"needEscape":true,"nodes":[{"content":"The GetReplyMessage method can return an object after the <xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A> method is called. The <xref:System.Runtime.Remoting.Messaging.IMessage> return value can be cast to an <xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage>.       However, you do not need to call either of these methods directly. They are intended for use by the remoting infrastructure of the .NET Framework.","pos":[0,451],"nodes":[{"content":"The GetReplyMessage method can return an object after the &lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A&gt; method is called.","pos":[0,150],"source":"The GetReplyMessage method can return an object after the <xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A> method is called."},{"content":"The &lt;xref:System.Runtime.Remoting.Messaging.IMessage&gt; return value can be cast to an &lt;xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage&gt;.","pos":[151,298],"source":" The <xref:System.Runtime.Remoting.Messaging.IMessage> return value can be cast to an <xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage>."},{"content":"However, you do not need to call either of these methods directly.","pos":[305,371]},{"content":"They are intended for use by the remoting infrastructure of the .NET Framework.","pos":[372,451]}]}]},{"pos":[18153,18241],"content":"A remoting message that should represent a response to a method call on a remote object.","needQuote":true,"needEscape":true,"nodes":[{"content":"A remoting message that should represent a response to a method call on a remote object.","pos":[0,88]}]},{"pos":[18748,18814],"content":"Gets a value indicating whether the server has completed the call.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value indicating whether the server has completed the call.","pos":[0,66]}]},{"pos":[18826,19078],"content":"The server must not use any client supplied resources outside of the agreed upon sharing semantics after it sets the IsCompleted property to `true`. Thus, it is safe for the client to destroy the resources after the IsCompleted property returns `true`.","needQuote":true,"needEscape":true,"nodes":[{"content":"The server must not use any client supplied resources outside of the agreed upon sharing semantics after it sets the IsCompleted property to <ph id=\"ph1\">`true`</ph>.","pos":[0,148],"source":"The server must not use any client supplied resources outside of the agreed upon sharing semantics after it sets the IsCompleted property to `true`."},{"content":"Thus, it is safe for the client to destroy the resources after the IsCompleted property returns <ph id=\"ph1\">`true`</ph>.","pos":[149,252],"source":" Thus, it is safe for the client to destroy the resources after the IsCompleted property returns `true`."}]},{"pos":[20667,20843],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> after the server has completed the call; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> after the server has completed the call; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[21331,21376],"content":"Gets the next message sink in the sink chain.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the next message sink in the sink chain.","pos":[0,45]}]},{"pos":[21388,21442],"content":"The current implementation of NextSink returns <ph id=\"ph1\">`null`</ph>.","needQuote":true,"needEscape":true,"source":"The current implementation of NextSink returns `null`."},{"pos":[21628,21765],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Remoting.Messaging.IMessageSink\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> interface that represents the next message sink in the sink chain.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Runtime.Remoting.Messaging.IMessageSink\"></xref> interface that represents the next message sink in the sink chain."},{"pos":[22416,22614],"content":"Sets an <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Remoting.Messaging.IMessageCtrl\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for the current remote method call, which provides a way to control asynchronous messages after they have been dispatched.","needQuote":true,"needEscape":true,"source":"Sets an <xref href=\"System.Runtime.Remoting.Messaging.IMessageCtrl\"></xref> for the current remote method call, which provides a way to control asynchronous messages after they have been dispatched."},{"pos":[22626,22676],"content":"You do not need to call the SetMessageCtrl method.","needQuote":true,"needEscape":true,"nodes":[{"content":"You do not need to call the SetMessageCtrl method.","pos":[0,50]}]},{"pos":[22895,23002],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Remoting.Messaging.IMessageCtrl\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for the current remote method call.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Runtime.Remoting.Messaging.IMessageCtrl\"></xref> for the current remote method call."},{"pos":[23659,23747],"content":"Synchronously processes a response message returned by a method call on a remote object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Synchronously processes a response message returned by a method call on a remote object.","pos":[0,88]}]},{"pos":[23760,24690],"content":"The SyncProcessMessage method implements the <xref:System.Runtime.Remoting.Messaging.IMessageSink> interface. You do not need to call this method directly. It is intended for use by the remoting infrastructure of the .NET Framework.       SyncProcessMessage invokes the consumer code's <xref:System.AsyncCallback> delegate. It also sets the <xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage> instance returned by the <xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A> method. If the `msg` parameter is of type <xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage>, the same object is returned by <xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A>. Otherwise, a reply message that contains a remoting exception is returned.       SyncProcessMessage also modifies the value returned by the <xref:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted%2A> property.","needQuote":false,"needEscape":true,"nodes":[{"content":"The SyncProcessMessage method implements the &lt;xref:System.Runtime.Remoting.Messaging.IMessageSink&gt; interface.","pos":[0,109],"source":"The SyncProcessMessage method implements the <xref:System.Runtime.Remoting.Messaging.IMessageSink> interface."},{"content":"You do not need to call this method directly.","pos":[110,155]},{"content":"It is intended for use by the remoting infrastructure of the .NET Framework.","pos":[156,232]},{"content":"SyncProcessMessage invokes the consumer code's &lt;xref:System.AsyncCallback&gt; delegate.","pos":[239,323],"source":"       SyncProcessMessage invokes the consumer code's <xref:System.AsyncCallback> delegate."},{"content":"It also sets the &lt;xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage&gt; instance returned by the &lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A&gt; method.","pos":[324,507],"source":" It also sets the <xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage> instance returned by the <xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A> method."},{"content":"If the <ph id=\"ph1\">`msg`</ph> parameter is of type &lt;xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage&gt;, the same object is returned by &lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A&gt;.","pos":[508,708],"source":" If the `msg` parameter is of type <xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage>, the same object is returned by <xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A>."},{"content":"Otherwise, a reply message that contains a remoting exception is returned.","pos":[709,783]},{"content":"SyncProcessMessage also modifies the value returned by the &lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted%2A&gt; property.","pos":[790,926],"source":"       SyncProcessMessage also modifies the value returned by the <xref:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted%2A> property."}]},{"pos":[24946,25001],"content":"A response message to a method call on a remote object.","needQuote":true,"needEscape":true,"nodes":[{"content":"A response message to a method call on a remote object.","pos":[0,55]}]},{"pos":[25088,25157],"content":"Returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Runtime.Remoting.Messaging.AsyncResult\n  id: AsyncResult\n  children:\n  - System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate\n  - System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)\n  - System.Runtime.Remoting.Messaging.AsyncResult.AsyncState\n  - System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle\n  - System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously\n  - System.Runtime.Remoting.Messaging.AsyncResult.EndInvokeCalled\n  - System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage\n  - System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted\n  - System.Runtime.Remoting.Messaging.AsyncResult.NextSink\n  - System.Runtime.Remoting.Messaging.AsyncResult.SetMessageCtrl(System.Runtime.Remoting.Messaging.IMessageCtrl)\n  - System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)\n  langs:\n  - csharp\n  name: AsyncResult\n  nameWithType: AsyncResult\n  fullName: System.Runtime.Remoting.Messaging.AsyncResult\n  type: Class\n  summary: Encapsulates the results of an asynchronous operation on a delegate.\n  remarks: \"The AsyncResult class is used in conjunction with asynchronous method calls made using delegates. The <xref:System.IAsyncResult> returned from the delegate's `BeginInvoke` method can be cast to an AsyncResult. The AsyncResult has the <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate%2A> property that holds the delegate object on which the asynchronous call was invoked.  \\n  \\n For more information about `BeginInvoke` and asynchronous calls using delegates, see [Asynchronous Programming Using Delegates](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A> property to get a <xref:System.Threading.WaitHandle>, and how to wait for an asynchronous call on a delegate. The <xref:System.Threading.WaitHandle> is signaled when the asynchronous call completes, and you can wait for it by calling the <xref:System.Threading.WaitHandle.WaitOne%2A> method.  \\n  \\n The example consists of two classes, the class that contains the method which is called asynchronously, and the class that contains the `Main` method that makes the call.  \\n  \\n For more information and more examples of calling methods asynchronously by using delegates, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md).  \\n  \\n [!code-vb[AsyncDelegateExamples#1](~/add/codesnippet/visualbasic/t-system.runtime.remotin_18_1.vb)]\\n [!code-cs[AsyncDelegateExamples#1](~/add/codesnippet/csharp/t-system.runtime.remotin_18_1.cs)]\\n [!code-cpp[AsyncDelegateExamples#1](~/add/codesnippet/cpp/t-system.runtime.remotin_18_1.cpp)]  \\n[!code-vb[AsyncDelegateExamples#3](~/add/codesnippet/visualbasic/t-system.runtime.remotin_18_2.vb)]\\n[!code-cpp[AsyncDelegateExamples#3](~/add/codesnippet/cpp/t-system.runtime.remotin_18_2.cpp)]\\n[!code-cs[AsyncDelegateExamples#3](~/add/codesnippet/csharp/t-system.runtime.remotin_18_2.cs)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class AsyncResult : IAsyncResult, System.Runtime.Remoting.Messaging.IMessageSink\n  inheritance:\n  - System.Object\n  implements:\n  - System.IAsyncResult\n  - System.Runtime.Remoting.Messaging.IMessageSink\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate\n  id: AsyncDelegate\n  parent: System.Runtime.Remoting.Messaging.AsyncResult\n  langs:\n  - csharp\n  name: AsyncDelegate\n  nameWithType: AsyncResult.AsyncDelegate\n  fullName: System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting.Messaging\n  summary: Gets the delegate object on which the asynchronous call was invoked.\n  remarks: \"The AsyncDelegate property can be cast to the actual class of the user-defined delegate.  \\n  \\n For example, if the delegate that was used to make the asynchronous call is of type `MyDelegate`, the delegate that is returned by this property must be cast to `MyDelegate`. The callback method can then call the delegate's `EndInvoke` method with the correct signature, in order to obtain the results of the asynchronous method call.\"\n  example:\n  - \"The following code example demonstrates how to use the AsyncDelegate property to get the delegate that was used to make the asynchronous call, in order to call `EndInvoke`. The example casts the <xref:System.IAsyncResult>, which is the only parameter of the callback method, to an <xref:System.Runtime.Remoting.Messaging.AsyncResult> object.  \\n  \\n The example consists of two classes, the class that contains the method which is called asynchronously, and the class that contains the `Main` method that makes the call.  \\n  \\n For more information on the way this callback example works, and more examples of calling methods asynchronously by using delegates, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md).  \\n  \\n [!code-vb[AsyncDelegateExamples#1](~/add/codesnippet/visualbasic/p-system.runtime.remotin_95_1.vb)]\\n [!code-cs[AsyncDelegateExamples#1](~/add/codesnippet/csharp/p-system.runtime.remotin_95_1.cs)]\\n [!code-cpp[AsyncDelegateExamples#1](~/add/codesnippet/cpp/p-system.runtime.remotin_95_1.cpp)]  \\n[!code-cs[AsyncDelegateExamples#5](~/add/codesnippet/csharp/p-system.runtime.remotin_95_2.cs)]\\n[!code-cpp[AsyncDelegateExamples#5](~/add/codesnippet/cpp/p-system.runtime.remotin_95_2.cpp)]\\n[!code-vb[AsyncDelegateExamples#5](~/add/codesnippet/visualbasic/p-system.runtime.remotin_95_2.vb)]\"\n  syntax:\n    content: public virtual object AsyncDelegate { get; }\n    return:\n      type: System.Object\n      description: The delegate object on which the asynchronous call was invoked.\n  overload: System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)\n  id: AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)\n  parent: System.Runtime.Remoting.Messaging.AsyncResult\n  langs:\n  - csharp\n  name: AsyncProcessMessage(IMessage,IMessageSink)\n  nameWithType: AsyncResult.AsyncProcessMessage(IMessage,IMessageSink)\n  fullName: System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage(IMessage,IMessageSink)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting.Messaging\n  summary: Implements the <xref href=\"System.Runtime.Remoting.Messaging.IMessageSink\"></xref> interface.\n  remarks: The AsyncProcessMessage method of the <xref:System.Runtime.Remoting.Messaging.IMessageSink> interface is not relevant to the <xref:System.Runtime.Remoting.Messaging.AsyncResult> class. Implementation by <xref:System.Runtime.Remoting.Messaging.AsyncResult> throws a <xref:System.NotSupportedException>. Instead, obtain an <xref:System.Runtime.Remoting.Messaging.AsyncResult> by casting the <xref:System.IAsyncResult> interface returned by an asynchronous call made using a delegate.\n  syntax:\n    content: public virtual System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage (System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);\n    parameters:\n    - id: msg\n      type: System.Runtime.Remoting.Messaging.IMessage\n      description: The request <xref href=\"System.Runtime.Remoting.Messaging.IMessage\"></xref> interface.\n    - id: replySink\n      type: System.Runtime.Remoting.Messaging.IMessageSink\n      description: The response <xref href=\"System.Runtime.Remoting.Messaging.IMessageSink\"></xref> interface.\n    return:\n      type: System.Runtime.Remoting.Messaging.IMessageCtrl\n      description: No value is returned.\n  overload: System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.Remoting.Messaging.AsyncResult.AsyncState\n  id: AsyncState\n  parent: System.Runtime.Remoting.Messaging.AsyncResult\n  langs:\n  - csharp\n  name: AsyncState\n  nameWithType: AsyncResult.AsyncState\n  fullName: System.Runtime.Remoting.Messaging.AsyncResult.AsyncState\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting.Messaging\n  summary: Gets the object provided as the last parameter of a <xref uid=\"langword_csharp_BeginInvoke\" name=\"BeginInvoke\" href=\"\"></xref> method call.\n  remarks: For more information about the `BeginInvoke` method, see [Asynchronous Programming Using Delegates](~/add/includes/ajax-current-ext-md.md).\n  example:\n  - \"The following code example demonstrates how the AsyncState property is used to pass information to a callback method. The last parameter of the `BeginInvoke` method call is a format string, which the callback method uses to format an output message.  \\n  \\n The example consists of two classes, the class that contains the method which is called asynchronously, and the class that contains the `Main` method that makes the call.  \\n  \\n For more information on the way this callback example works, and more examples of calling methods asynchronously by using delegates, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md).  \\n  \\n [!code-vb[AsyncDelegateExamples#1](~/add/codesnippet/visualbasic/p-system.runtime.remotin_83_1.vb)]\\n [!code-cs[AsyncDelegateExamples#1](~/add/codesnippet/csharp/p-system.runtime.remotin_83_1.cs)]\\n [!code-cpp[AsyncDelegateExamples#1](~/add/codesnippet/cpp/p-system.runtime.remotin_83_1.cpp)]  \\n[!code-cs[AsyncDelegateExamples#5](~/add/codesnippet/csharp/p-system.runtime.remotin_83_2.cs)]\\n[!code-cpp[AsyncDelegateExamples#5](~/add/codesnippet/cpp/p-system.runtime.remotin_83_2.cpp)]\\n[!code-vb[AsyncDelegateExamples#5](~/add/codesnippet/visualbasic/p-system.runtime.remotin_83_2.vb)]\"\n  syntax:\n    content: public virtual object AsyncState { get; }\n    return:\n      type: System.Object\n      description: The object provided as the last parameter of a <xref uid=\"langword_csharp_BeginInvoke\" name=\"BeginInvoke\" href=\"\"></xref> method call.\n  overload: System.Runtime.Remoting.Messaging.AsyncResult.AsyncState*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle\n  id: AsyncWaitHandle\n  parent: System.Runtime.Remoting.Messaging.AsyncResult\n  langs:\n  - csharp\n  name: AsyncWaitHandle\n  nameWithType: AsyncResult.AsyncWaitHandle\n  fullName: System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting.Messaging\n  summary: Gets a <xref:System.Threading.WaitHandle> that encapsulates Win32 synchronization handles, and allows the implementation of various synchronization schemes.\n  remarks: \"The <xref:System.Threading.WaitHandle> returned by this method is automatically signaled when the asynchronous operation has completed.  \\n  \\n The wait handle is not closed automatically when you call `EndInvoke` on the delegate that was used to make the asynchronous method call. If you release all references to the wait handle, system resources are freed when garbage collection reclaims the wait handle. To free the system resources as soon as you are finished using the wait handle, call the <xref:System.Threading.WaitHandle.Close%2A?displayProperty=fullName> method. Garbage collection works more efficiently when disposable objects are explicitly closed or disposed.  \\n  \\n> [!CAUTION]\\n>  The <xref:System.Threading.WaitHandle> contained in the AsyncWaitHandle property can be used to block the current thread until the asynchronous call is complete. However the <xref:System.Threading.WaitHandle> will ignore the <xref:System.AsyncCallback>, if one was specified during the `BeginInvoke` call. Therefore, a situation can occur where the application shuts down before the <xref:System.AsyncCallback> has finished executing, even if a <xref:System.Threading.WaitHandle> is used to block until the asynchronous call completion. For an example of such a situation, see the example for the <xref:System.Runtime.Remoting.Messaging.AsyncResult> class, and remove the <xref:System.Threading.Thread.Sleep%2A?displayProperty=fullName> statement.\"\n  example:\n  - \"The following example demonstrates how to use the AsyncWaitHandle property to get a <xref:System.Threading.WaitHandle>, and how to wait for an asynchronous call on a delegate. The <xref:System.Threading.WaitHandle> is signaled when the asynchronous call completes, and you can wait for it by calling the <xref:System.Threading.WaitHandle.WaitOne%2A> method.  \\n  \\n The example consists of two classes, the class that contains the method which is called asynchronously, and the class that contains the `Main` method that makes the call.  \\n  \\n For more information and more examples of calling methods asynchronously by using delegates, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md).  \\n  \\n [!code-vb[AsyncDelegateExamples#1](~/add/codesnippet/visualbasic/p-system.runtime.remotin_47_1.vb)]\\n [!code-cs[AsyncDelegateExamples#1](~/add/codesnippet/csharp/p-system.runtime.remotin_47_1.cs)]\\n [!code-cpp[AsyncDelegateExamples#1](~/add/codesnippet/cpp/p-system.runtime.remotin_47_1.cpp)]  \\n[!code-vb[AsyncDelegateExamples#3](~/add/codesnippet/visualbasic/p-system.runtime.remotin_47_2.vb)]\\n[!code-cpp[AsyncDelegateExamples#3](~/add/codesnippet/cpp/p-system.runtime.remotin_47_2.cpp)]\\n[!code-cs[AsyncDelegateExamples#3](~/add/codesnippet/csharp/p-system.runtime.remotin_47_2.cs)]\"\n  syntax:\n    content: public virtual System.Threading.WaitHandle AsyncWaitHandle { get; }\n    return:\n      type: System.Threading.WaitHandle\n      description: A <xref:System.Threading.WaitHandle> that encapsulates Win32 synchronization handles, and allows the implementation of various synchronization schemes.\n  overload: System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously\n  id: CompletedSynchronously\n  parent: System.Runtime.Remoting.Messaging.AsyncResult\n  langs:\n  - csharp\n  name: CompletedSynchronously\n  nameWithType: AsyncResult.CompletedSynchronously\n  fullName: System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting.Messaging\n  summary: Gets a value indicating whether the <xref uid=\"langword_csharp_BeginInvoke\" name=\"BeginInvoke\" href=\"\"></xref> call completed synchronously.\n  remarks: \"If it is detected that the `BeginInvoke` call completed synchronously in the <xref:System.AsyncCallback> delegate, it is probable that the thread that called BeginInvoke is the current thread. Most providers of the <xref:System.IAsyncResult> interface will not use the capability and will return a default `false`.  \\n  \\n Current implementation of CompletedSynchronously always returns `false`.\"\n  syntax:\n    content: public virtual bool CompletedSynchronously { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref uid=\"langword_csharp_BeginInvoke\" name=\"BeginInvoke\" href=\"\"></xref> call completed synchronously; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.Remoting.Messaging.AsyncResult.EndInvokeCalled\n  id: EndInvokeCalled\n  parent: System.Runtime.Remoting.Messaging.AsyncResult\n  langs:\n  - csharp\n  name: EndInvokeCalled\n  nameWithType: AsyncResult.EndInvokeCalled\n  fullName: System.Runtime.Remoting.Messaging.AsyncResult.EndInvokeCalled\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting.Messaging\n  summary: Gets or sets a value indicating whether <xref uid=\"langword_csharp_EndInvoke\" name=\"EndInvoke\" href=\"\"></xref> has been called on the current <xref href=\"System.Runtime.Remoting.Messaging.AsyncResult\"></xref>.\n  syntax:\n    content: public bool EndInvokeCalled { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <xref uid=\"langword_csharp_EndInvoke\" name=\"EndInvoke\" href=\"\"></xref> has been called on the current <xref href=\"System.Runtime.Remoting.Messaging.AsyncResult\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Runtime.Remoting.Messaging.AsyncResult.EndInvokeCalled*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage\n  id: GetReplyMessage\n  parent: System.Runtime.Remoting.Messaging.AsyncResult\n  langs:\n  - csharp\n  name: GetReplyMessage()\n  nameWithType: AsyncResult.GetReplyMessage()\n  fullName: System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting.Messaging\n  summary: Gets the response message for the asynchronous call.\n  remarks: \"The GetReplyMessage method can return an object after the <xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A> method is called. The <xref:System.Runtime.Remoting.Messaging.IMessage> return value can be cast to an <xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage>.  \\n  \\n However, you do not need to call either of these methods directly. They are intended for use by the remoting infrastructure of the .NET Framework.\"\n  syntax:\n    content: public virtual System.Runtime.Remoting.Messaging.IMessage GetReplyMessage ();\n    parameters: []\n    return:\n      type: System.Runtime.Remoting.Messaging.IMessage\n      description: A remoting message that should represent a response to a method call on a remote object.\n  overload: System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted\n  id: IsCompleted\n  parent: System.Runtime.Remoting.Messaging.AsyncResult\n  langs:\n  - csharp\n  name: IsCompleted\n  nameWithType: AsyncResult.IsCompleted\n  fullName: System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting.Messaging\n  summary: Gets a value indicating whether the server has completed the call.\n  remarks: The server must not use any client supplied resources outside of the agreed upon sharing semantics after it sets the IsCompleted property to `true`. Thus, it is safe for the client to destroy the resources after the IsCompleted property returns `true`.\n  example:\n  - \"The following example shows how to use the <xref:System.IAsyncResult.IsCompleted%2A> property of the <xref:System.Runtime.Remoting.Messaging.AsyncResult> returned by `BeginInvoke` to discover when an asynchronous call completes. You might do this when making the asynchronous call from a thread that services the user interface. Polling for completion allows the calling thread to continue executing while the asynchronous call executes on a <xref:System.Threading.ThreadPool> thread.  \\n  \\n The example consists of two classes, the class that contains the method which is called asynchronously, and the class that contains the `Main` method that makes the call.  \\n  \\n For more information and more examples of calling methods asynchronously by using delegates, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md).  \\n  \\n [!code-vb[AsyncDelegateExamples#1](~/add/codesnippet/visualbasic/p-system.runtime.remotin_39_1.vb)]\\n [!code-cs[AsyncDelegateExamples#1](~/add/codesnippet/csharp/p-system.runtime.remotin_39_1.cs)]\\n [!code-cpp[AsyncDelegateExamples#1](~/add/codesnippet/cpp/p-system.runtime.remotin_39_1.cpp)]  \\n[!code-cpp[AsyncDelegateExamples#4](~/add/codesnippet/cpp/p-system.runtime.remotin_39_2.cpp)]\\n[!code-cs[AsyncDelegateExamples#4](~/add/codesnippet/csharp/p-system.runtime.remotin_39_2.cs)]\\n[!code-vb[AsyncDelegateExamples#4](~/add/codesnippet/visualbasic/p-system.runtime.remotin_39_2.vb)]\"\n  syntax:\n    content: public virtual bool IsCompleted { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> after the server has completed the call; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.Remoting.Messaging.AsyncResult.NextSink\n  id: NextSink\n  parent: System.Runtime.Remoting.Messaging.AsyncResult\n  langs:\n  - csharp\n  name: NextSink\n  nameWithType: AsyncResult.NextSink\n  fullName: System.Runtime.Remoting.Messaging.AsyncResult.NextSink\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting.Messaging\n  summary: Gets the next message sink in the sink chain.\n  remarks: The current implementation of NextSink returns `null`.\n  syntax:\n    content: public System.Runtime.Remoting.Messaging.IMessageSink NextSink { get; }\n    return:\n      type: System.Runtime.Remoting.Messaging.IMessageSink\n      description: An <xref href=\"System.Runtime.Remoting.Messaging.IMessageSink\"></xref> interface that represents the next message sink in the sink chain.\n  overload: System.Runtime.Remoting.Messaging.AsyncResult.NextSink*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.Remoting.Messaging.AsyncResult.SetMessageCtrl(System.Runtime.Remoting.Messaging.IMessageCtrl)\n  id: SetMessageCtrl(System.Runtime.Remoting.Messaging.IMessageCtrl)\n  parent: System.Runtime.Remoting.Messaging.AsyncResult\n  langs:\n  - csharp\n  name: SetMessageCtrl(IMessageCtrl)\n  nameWithType: AsyncResult.SetMessageCtrl(IMessageCtrl)\n  fullName: System.Runtime.Remoting.Messaging.AsyncResult.SetMessageCtrl(IMessageCtrl)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting.Messaging\n  summary: Sets an <xref href=\"System.Runtime.Remoting.Messaging.IMessageCtrl\"></xref> for the current remote method call, which provides a way to control asynchronous messages after they have been dispatched.\n  remarks: You do not need to call the SetMessageCtrl method.\n  syntax:\n    content: public virtual void SetMessageCtrl (System.Runtime.Remoting.Messaging.IMessageCtrl mc);\n    parameters:\n    - id: mc\n      type: System.Runtime.Remoting.Messaging.IMessageCtrl\n      description: The <xref href=\"System.Runtime.Remoting.Messaging.IMessageCtrl\"></xref> for the current remote method call.\n  overload: System.Runtime.Remoting.Messaging.AsyncResult.SetMessageCtrl*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)\n  id: SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)\n  parent: System.Runtime.Remoting.Messaging.AsyncResult\n  langs:\n  - csharp\n  name: SyncProcessMessage(IMessage)\n  nameWithType: AsyncResult.SyncProcessMessage(IMessage)\n  fullName: System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(IMessage)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting.Messaging\n  summary: Synchronously processes a response message returned by a method call on a remote object.\n  remarks: \"The SyncProcessMessage method implements the <xref:System.Runtime.Remoting.Messaging.IMessageSink> interface. You do not need to call this method directly. It is intended for use by the remoting infrastructure of the .NET Framework.  \\n  \\n SyncProcessMessage invokes the consumer code's <xref:System.AsyncCallback> delegate. It also sets the <xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage> instance returned by the <xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A> method. If the `msg` parameter is of type <xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage>, the same object is returned by <xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A>. Otherwise, a reply message that contains a remoting exception is returned.  \\n  \\n SyncProcessMessage also modifies the value returned by the <xref:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted%2A> property.\"\n  syntax:\n    content: public virtual System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage (System.Runtime.Remoting.Messaging.IMessage msg);\n    parameters:\n    - id: msg\n      type: System.Runtime.Remoting.Messaging.IMessage\n      description: A response message to a method call on a remote object.\n    return:\n      type: System.Runtime.Remoting.Messaging.IMessage\n      description: Returns <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate\n  parent: System.Runtime.Remoting.Messaging.AsyncResult\n  isExternal: false\n  name: AsyncDelegate\n  nameWithType: AsyncResult.AsyncDelegate\n  fullName: System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate\n- uid: System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)\n  parent: System.Runtime.Remoting.Messaging.AsyncResult\n  isExternal: false\n  name: AsyncProcessMessage(IMessage,IMessageSink)\n  nameWithType: AsyncResult.AsyncProcessMessage(IMessage,IMessageSink)\n  fullName: System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage(IMessage,IMessageSink)\n- uid: System.Runtime.Remoting.Messaging.IMessageCtrl\n  parent: System.Runtime.Remoting.Messaging\n  isExternal: false\n  name: IMessageCtrl\n  nameWithType: IMessageCtrl\n  fullName: System.Runtime.Remoting.Messaging.IMessageCtrl\n- uid: System.Runtime.Remoting.Messaging.IMessage\n  parent: System.Runtime.Remoting.Messaging\n  isExternal: false\n  name: IMessage\n  nameWithType: IMessage\n  fullName: System.Runtime.Remoting.Messaging.IMessage\n- uid: System.Runtime.Remoting.Messaging.IMessageSink\n  parent: System.Runtime.Remoting.Messaging\n  isExternal: false\n  name: IMessageSink\n  nameWithType: IMessageSink\n  fullName: System.Runtime.Remoting.Messaging.IMessageSink\n- uid: System.Runtime.Remoting.Messaging.AsyncResult.AsyncState\n  parent: System.Runtime.Remoting.Messaging.AsyncResult\n  isExternal: false\n  name: AsyncState\n  nameWithType: AsyncResult.AsyncState\n  fullName: System.Runtime.Remoting.Messaging.AsyncResult.AsyncState\n- uid: System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle\n  parent: System.Runtime.Remoting.Messaging.AsyncResult\n  isExternal: false\n  name: AsyncWaitHandle\n  nameWithType: AsyncResult.AsyncWaitHandle\n  fullName: System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle\n- uid: System.Threading.WaitHandle\n  parent: System.Threading\n  isExternal: true\n  name: WaitHandle\n  nameWithType: WaitHandle\n  fullName: System.Threading.WaitHandle\n- uid: System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously\n  parent: System.Runtime.Remoting.Messaging.AsyncResult\n  isExternal: false\n  name: CompletedSynchronously\n  nameWithType: AsyncResult.CompletedSynchronously\n  fullName: System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Runtime.Remoting.Messaging.AsyncResult.EndInvokeCalled\n  parent: System.Runtime.Remoting.Messaging.AsyncResult\n  isExternal: false\n  name: EndInvokeCalled\n  nameWithType: AsyncResult.EndInvokeCalled\n  fullName: System.Runtime.Remoting.Messaging.AsyncResult.EndInvokeCalled\n- uid: System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage\n  parent: System.Runtime.Remoting.Messaging.AsyncResult\n  isExternal: false\n  name: GetReplyMessage()\n  nameWithType: AsyncResult.GetReplyMessage()\n  fullName: System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage()\n- uid: System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted\n  parent: System.Runtime.Remoting.Messaging.AsyncResult\n  isExternal: false\n  name: IsCompleted\n  nameWithType: AsyncResult.IsCompleted\n  fullName: System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted\n- uid: System.Runtime.Remoting.Messaging.AsyncResult.NextSink\n  parent: System.Runtime.Remoting.Messaging.AsyncResult\n  isExternal: false\n  name: NextSink\n  nameWithType: AsyncResult.NextSink\n  fullName: System.Runtime.Remoting.Messaging.AsyncResult.NextSink\n- uid: System.Runtime.Remoting.Messaging.AsyncResult.SetMessageCtrl(System.Runtime.Remoting.Messaging.IMessageCtrl)\n  parent: System.Runtime.Remoting.Messaging.AsyncResult\n  isExternal: false\n  name: SetMessageCtrl(IMessageCtrl)\n  nameWithType: AsyncResult.SetMessageCtrl(IMessageCtrl)\n  fullName: System.Runtime.Remoting.Messaging.AsyncResult.SetMessageCtrl(IMessageCtrl)\n- uid: System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)\n  parent: System.Runtime.Remoting.Messaging.AsyncResult\n  isExternal: false\n  name: SyncProcessMessage(IMessage)\n  nameWithType: AsyncResult.SyncProcessMessage(IMessage)\n  fullName: System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(IMessage)\n- uid: System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate*\n  parent: System.Runtime.Remoting.Messaging.AsyncResult\n  isExternal: false\n  name: AsyncDelegate\n  nameWithType: AsyncResult.AsyncDelegate\n- uid: System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage*\n  parent: System.Runtime.Remoting.Messaging.AsyncResult\n  isExternal: false\n  name: AsyncProcessMessage\n  nameWithType: AsyncResult.AsyncProcessMessage\n- uid: System.Runtime.Remoting.Messaging.AsyncResult.AsyncState*\n  parent: System.Runtime.Remoting.Messaging.AsyncResult\n  isExternal: false\n  name: AsyncState\n  nameWithType: AsyncResult.AsyncState\n- uid: System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle*\n  parent: System.Runtime.Remoting.Messaging.AsyncResult\n  isExternal: false\n  name: AsyncWaitHandle\n  nameWithType: AsyncResult.AsyncWaitHandle\n- uid: System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously*\n  parent: System.Runtime.Remoting.Messaging.AsyncResult\n  isExternal: false\n  name: CompletedSynchronously\n  nameWithType: AsyncResult.CompletedSynchronously\n- uid: System.Runtime.Remoting.Messaging.AsyncResult.EndInvokeCalled*\n  parent: System.Runtime.Remoting.Messaging.AsyncResult\n  isExternal: false\n  name: EndInvokeCalled\n  nameWithType: AsyncResult.EndInvokeCalled\n- uid: System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage*\n  parent: System.Runtime.Remoting.Messaging.AsyncResult\n  isExternal: false\n  name: GetReplyMessage\n  nameWithType: AsyncResult.GetReplyMessage\n- uid: System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted*\n  parent: System.Runtime.Remoting.Messaging.AsyncResult\n  isExternal: false\n  name: IsCompleted\n  nameWithType: AsyncResult.IsCompleted\n- uid: System.Runtime.Remoting.Messaging.AsyncResult.NextSink*\n  parent: System.Runtime.Remoting.Messaging.AsyncResult\n  isExternal: false\n  name: NextSink\n  nameWithType: AsyncResult.NextSink\n- uid: System.Runtime.Remoting.Messaging.AsyncResult.SetMessageCtrl*\n  parent: System.Runtime.Remoting.Messaging.AsyncResult\n  isExternal: false\n  name: SetMessageCtrl\n  nameWithType: AsyncResult.SetMessageCtrl\n- uid: System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage*\n  parent: System.Runtime.Remoting.Messaging.AsyncResult\n  isExternal: false\n  name: SyncProcessMessage\n  nameWithType: AsyncResult.SyncProcessMessage\n"}