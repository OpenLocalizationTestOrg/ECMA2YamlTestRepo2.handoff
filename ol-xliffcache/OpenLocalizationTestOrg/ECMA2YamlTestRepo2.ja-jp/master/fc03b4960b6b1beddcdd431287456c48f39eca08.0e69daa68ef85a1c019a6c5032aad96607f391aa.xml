{"nodes":[{"pos":[582,748],"content":"Provides data for the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept><bpt id=\"p2\">&lt;xref href=\"System.Windows.Threading.Dispatcher.UnhandledExceptionFilter\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> event.","needQuote":true,"needEscape":true,"source":"Provides data for the <xref href=\"System.Windows.Threading.Dispatcher\"></xref><xref href=\"System.Windows.Threading.Dispatcher.UnhandledExceptionFilter\"></xref> event."},{"pos":[761,1510],"content":"The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event occurs when code executing by way of the <xref:System.Windows.Threading.Dispatcher> throws an exception which is not handled.       The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event provides a means to not raise the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event.  The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event is raised first, and If <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> on the DispatcherUnhandledExceptionFilterEventArgs is set to `false`, the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event will not be raised.","needQuote":false,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter&gt; event occurs when code executing by way of the &lt;xref:System.Windows.Threading.Dispatcher&gt; throws an exception which is not handled.","pos":[0,203],"source":"The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event occurs when code executing by way of the <xref:System.Windows.Threading.Dispatcher> throws an exception which is not handled."},{"content":"The &lt;xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter&gt; event provides a means to not raise the &lt;xref:System.Windows.Threading.Dispatcher.UnhandledException&gt; event.","pos":[210,390],"source":"       The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event provides a means to not raise the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event."},{"content":"The &lt;xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter&gt; event is raised first, and If &lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A&gt; on the DispatcherUnhandledExceptionFilterEventArgs is set to <ph id=\"ph1\">`false`</ph>, the &lt;xref:System.Windows.Threading.Dispatcher.UnhandledException&gt; event will not be raised.","pos":[392,747],"source":"  The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event is raised first, and If <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> on the DispatcherUnhandledExceptionFilterEventArgs is set to `false`, the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event will not be raised."}]},{"pos":[2329,2409],"content":"Gets the exception that was raised when executing code by way of the dispatcher.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the exception that was raised when executing code by way of the dispatcher.","pos":[0,80]}]},{"pos":[2529,2543],"content":"The exception.","needQuote":true,"needEscape":true,"nodes":[{"content":"The exception.","pos":[0,14]}]},{"pos":[3167,3249],"content":"Gets or sets whether the exception should be caught and the event handlers called.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets whether the exception should be caught and the event handlers called.","pos":[0,82]}]},{"pos":[3262,3995],"content":"The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event provides a means to not raise the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event.  The <xref:System.Windows.Threading.Dispatcher.UnhandledException> is raised first, and If RequestCatch on the <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> is set to `false`, the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event will not be raised.       A previous handler in the event multicast might have already set this property to `false`, indicating that the exception will not be caught.  The \"don't catch\" behavior will override all others because it most likely means a debugging scenario.","needQuote":false,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter&gt; event provides a means to not raise the &lt;xref:System.Windows.Threading.Dispatcher.UnhandledException&gt; event.","pos":[0,180],"source":"The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event provides a means to not raise the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event."},{"content":"The &lt;xref:System.Windows.Threading.Dispatcher.UnhandledException&gt; is raised first, and If RequestCatch on the &lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs&gt; is set to <ph id=\"ph1\">`false`</ph>, the &lt;xref:System.Windows.Threading.Dispatcher.UnhandledException&gt; event will not be raised.","pos":[182,478],"source":"  The <xref:System.Windows.Threading.Dispatcher.UnhandledException> is raised first, and If RequestCatch on the <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> is set to `false`, the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event will not be raised."},{"content":"A previous handler in the event multicast might have already set this property to <ph id=\"ph1\">`false`</ph>, indicating that the exception will not be caught.","pos":[485,625],"source":"       A previous handler in the event multicast might have already set this property to `false`, indicating that the exception will not be caught."},{"content":"The \"don't catch\" behavior will override all others because it most likely means a debugging scenario.","pos":[627,729]}]},{"pos":[4117,4437],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Windows.Threading.Dispatcher.UnhandledException\"></xref> should be raised; otherwise; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.  The default value is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the <bpt id=\"p2\">&lt;xref href=\"System.Windows.Threading.Dispatcher.UnhandledException\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> should be raised; otherwise; <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","pos":[0,236],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Windows.Threading.Dispatcher.UnhandledException\"></xref> should be raised; otherwise; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default value is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[238,320],"source":"  The default value is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>."}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs\n  id: DispatcherUnhandledExceptionFilterEventArgs\n  children:\n  - System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.Exception\n  - System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch\n  langs:\n  - csharp\n  name: DispatcherUnhandledExceptionFilterEventArgs\n  nameWithType: DispatcherUnhandledExceptionFilterEventArgs\n  fullName: System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs\n  type: Class\n  summary: Provides data for the <xref href=\"System.Windows.Threading.Dispatcher\"></xref><xref href=\"System.Windows.Threading.Dispatcher.UnhandledExceptionFilter\"></xref> event.\n  remarks: \"The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event occurs when code executing by way of the <xref:System.Windows.Threading.Dispatcher> throws an exception which is not handled.  \\n  \\n The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event provides a means to not raise the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event.  The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event is raised first, and If <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> on the DispatcherUnhandledExceptionFilterEventArgs is set to `false`, the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event will not be raised.\"\n  syntax:\n    content: 'public sealed class DispatcherUnhandledExceptionFilterEventArgs : System.Windows.Threading.DispatcherEventArgs'\n  inheritance:\n  - System.EventArgs\n  - System.Windows.Threading.DispatcherEventArgs\n  implements: []\n  inheritedMembers:\n  - System.Windows.Threading.DispatcherEventArgs.Dispatcher\n  platform:\n  - net462\n- uid: System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.Exception\n  id: Exception\n  parent: System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs\n  langs:\n  - csharp\n  name: Exception\n  nameWithType: DispatcherUnhandledExceptionFilterEventArgs.Exception\n  fullName: System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.Exception\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Gets the exception that was raised when executing code by way of the dispatcher.\n  syntax:\n    content: public Exception Exception { get; }\n    return:\n      type: System.Exception\n      description: The exception.\n  overload: System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.Exception*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch\n  id: RequestCatch\n  parent: System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs\n  langs:\n  - csharp\n  name: RequestCatch\n  nameWithType: DispatcherUnhandledExceptionFilterEventArgs.RequestCatch\n  fullName: System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Gets or sets whether the exception should be caught and the event handlers called.\n  remarks: \"The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event provides a means to not raise the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event.  The <xref:System.Windows.Threading.Dispatcher.UnhandledException> is raised first, and If RequestCatch on the <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> is set to `false`, the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event will not be raised.  \\n  \\n A previous handler in the event multicast might have already set this property to `false`, indicating that the exception will not be caught.  The \\\"don't catch\\\" behavior will override all others because it most likely means a debugging scenario.\"\n  syntax:\n    content: public bool RequestCatch { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Windows.Threading.Dispatcher.UnhandledException\"></xref> should be raised; otherwise; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.  The default value is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.\n  overload: System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Windows.Threading.DispatcherEventArgs\n  isExternal: false\n  name: System.Windows.Threading.DispatcherEventArgs\n- uid: System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.Exception\n  parent: System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs\n  isExternal: false\n  name: Exception\n  nameWithType: DispatcherUnhandledExceptionFilterEventArgs.Exception\n  fullName: System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.Exception\n- uid: System.Exception\n  parent: System\n  isExternal: true\n  name: Exception\n  nameWithType: Exception\n  fullName: System.Exception\n- uid: System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch\n  parent: System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs\n  isExternal: false\n  name: RequestCatch\n  nameWithType: DispatcherUnhandledExceptionFilterEventArgs.RequestCatch\n  fullName: System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.Exception*\n  parent: System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs\n  isExternal: false\n  name: Exception\n  nameWithType: DispatcherUnhandledExceptionFilterEventArgs.Exception\n- uid: System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch*\n  parent: System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs\n  isExternal: false\n  name: RequestCatch\n  nameWithType: DispatcherUnhandledExceptionFilterEventArgs.RequestCatch\n"}