{"nodes":[{"pos":[720,931],"content":"Provides data for the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Forms.Control.DragDrop\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, <bpt id=\"p2\">&lt;xref href=\"System.Windows.Forms.Control.DragEnter\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, or <bpt id=\"p3\">&lt;xref href=\"System.Windows.Forms.Control.DragOver\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> event.","needQuote":true,"needEscape":true,"source":"Provides data for the <xref href=\"System.Windows.Forms.Control.DragDrop\"></xref>, <xref href=\"System.Windows.Forms.Control.DragEnter\"></xref>, or <xref href=\"System.Windows.Forms.Control.DragOver\"></xref> event."},{"pos":[944,1827],"content":"The <xref:System.Windows.Forms.Control.DragDrop> event occurs when the user completes a drag-and-drop operation by dragging an object over the control and then dropping it onto the control by releasing the mouse button. The <xref:System.Windows.Forms.Control.DragEnter> event occurs when the user moves the mouse pointer onto the control while dragging an object with the mouse. The <xref:System.Windows.Forms.Control.DragOver> event occurs when the user moves the mouse pointer over the control while dragging an object with the mouse.       A DragEventArgs object specifies any data associated with this event; the current state of the SHIFT, CTRL, and ALT keys; the location of the mouse pointer; and the drag-and-drop effects allowed by the source and target of the drag event.       For information about the event model, see [Events](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Windows.Forms.Control.DragDrop&gt; event occurs when the user completes a drag-and-drop operation by dragging an object over the control and then dropping it onto the control by releasing the mouse button.","pos":[0,219],"source":"The <xref:System.Windows.Forms.Control.DragDrop> event occurs when the user completes a drag-and-drop operation by dragging an object over the control and then dropping it onto the control by releasing the mouse button."},{"content":"The &lt;xref:System.Windows.Forms.Control.DragEnter&gt; event occurs when the user moves the mouse pointer onto the control while dragging an object with the mouse.","pos":[220,378],"source":" The <xref:System.Windows.Forms.Control.DragEnter> event occurs when the user moves the mouse pointer onto the control while dragging an object with the mouse."},{"content":"The &lt;xref:System.Windows.Forms.Control.DragOver&gt; event occurs when the user moves the mouse pointer over the control while dragging an object with the mouse.","pos":[379,536],"source":" The <xref:System.Windows.Forms.Control.DragOver> event occurs when the user moves the mouse pointer over the control while dragging an object with the mouse."},{"content":"A DragEventArgs object specifies any data associated with this event; the current state of the SHIFT, CTRL, and ALT keys; the location of the mouse pointer; and the drag-and-drop effects allowed by the source and target of the drag event.","pos":[543,781]},{"content":"For information about the event model, see <bpt id=\"p1\">[</bpt>Events<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[788,879],"source":"       For information about the event model, see [Events](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[7163,7259],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Forms.DragEventArgs\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Windows.Forms.DragEventArgs\"></xref> class."},{"pos":[7565,7601],"content":"The data associated with this event.","needQuote":true,"needEscape":true,"nodes":[{"content":"The data associated with this event.","pos":[0,36]}]},{"pos":[7665,7716],"content":"The current state of the SHIFT, CTRL, and ALT keys.","needQuote":true,"needEscape":true,"nodes":[{"content":"The current state of the SHIFT, CTRL, and ALT keys.","pos":[0,51]}]},{"pos":[7773,7820],"content":"The x-coordinate of the mouse cursor in pixels.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the mouse cursor in pixels.","pos":[0,47]}]},{"pos":[7877,7924],"content":"The y-coordinate of the mouse cursor in pixels.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the mouse cursor in pixels.","pos":[0,47]}]},{"pos":[8017,8093],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Forms.DragDropEffects\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Windows.Forms.DragDropEffects\"></xref> values."},{"pos":[8179,8255],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Forms.DragDropEffects\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Windows.Forms.DragDropEffects\"></xref> values."},{"pos":[8719,8815],"content":"Gets which drag-and-drop operations are allowed by the originator (or source) of the drag event.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets which drag-and-drop operations are allowed by the originator (or source) of the drag event.","pos":[0,96]}]},{"pos":[8828,9391],"content":"When a control initiates a drag-and-drop operation by calling the <xref:System.Windows.Forms.Control.DoDragDrop%2A?displayProperty=fullName> method, it specifies the permissible effects of the operation. For example, when you drag a file from a source, if the file is read-only (or from a read-only storage medium such as a CD), the source will indicate that the file can be copied, but not transferred, to the target.       Before attempting to perform an operation on the dragged data, you should examine this property to ensure that the operation is allowed.","needQuote":false,"needEscape":true,"nodes":[{"content":"When a control initiates a drag-and-drop operation by calling the <xref:System.Windows.Forms.Control.DoDragDrop%2A?displayProperty=fullName> method, it specifies the permissible effects of the operation. For example, when you drag a file from a source, if the file is read-only (or from a read-only storage medium such as a CD), the source will indicate that the file can be copied, but not transferred, to the target.       Before attempting to perform an operation on the dragged data, you should examine this property to ensure that the operation is allowed.","pos":[0,561],"nodes":[{"content":"When a control initiates a drag-and-drop operation by calling the &lt;xref:System.Windows.Forms.Control.DoDragDrop%2A?displayProperty=fullName&gt; method, it specifies the permissible effects of the operation.","pos":[0,203],"source":"When a control initiates a drag-and-drop operation by calling the <xref:System.Windows.Forms.Control.DoDragDrop%2A?displayProperty=fullName> method, it specifies the permissible effects of the operation."},{"content":"For example, when you drag a file from a source, if the file is read-only (or from a read-only storage medium such as a CD), the source will indicate that the file can be copied, but not transferred, to the target.","pos":[204,418]},{"content":"Before attempting to perform an operation on the dragged data, you should examine this property to ensure that the operation is allowed.","pos":[425,561]}]}]},{"pos":[12235,12311],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Forms.DragDropEffects\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Windows.Forms.DragDropEffects\"></xref> values."},{"pos":[12738,12851],"content":"Gets the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Forms.IDataObject\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains the data associated with this event.","needQuote":true,"needEscape":true,"source":"Gets the <xref href=\"System.Windows.Forms.IDataObject\"></xref> that contains the data associated with this event."},{"pos":[12863,13336],"content":"In the body of your event handler, you can use the <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> method to determine whether the data matches the format requirements of the control onto which the data is being dragged. You also can specify whether you want to attempt to convert the data to meet your format requirements. If the dragged data meets your format requirements, use the <xref:System.Windows.Forms.IDataObject.GetData%2A> method to retrieve the data.","needQuote":true,"needEscape":true,"nodes":[{"content":"In the body of your event handler, you can use the <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> method to determine whether the data matches the format requirements of the control onto which the data is being dragged. You also can specify whether you want to attempt to convert the data to meet your format requirements. If the dragged data meets your format requirements, use the <xref:System.Windows.Forms.IDataObject.GetData%2A> method to retrieve the data.","pos":[0,473],"nodes":[{"content":"In the body of your event handler, you can use the &lt;xref:System.Windows.Forms.IDataObject.GetDataPresent%2A&gt; method to determine whether the data matches the format requirements of the control onto which the data is being dragged.","pos":[0,230],"source":"In the body of your event handler, you can use the <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> method to determine whether the data matches the format requirements of the control onto which the data is being dragged."},{"content":"You also can specify whether you want to attempt to convert the data to meet your format requirements.","pos":[231,333]},{"content":"If the dragged data meets your format requirements, use the &lt;xref:System.Windows.Forms.IDataObject.GetData%2A&gt; method to retrieve the data.","pos":[334,473],"source":" If the dragged data meets your format requirements, use the <xref:System.Windows.Forms.IDataObject.GetData%2A> method to retrieve the data."}]}]},{"pos":[16159,16195],"content":"The data associated with this event.","needQuote":true,"needEscape":true,"nodes":[{"content":"The data associated with this event.","pos":[0,36]}]},{"pos":[16623,16688],"content":"Gets or sets the target drop effect in a drag-and-drop operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the target drop effect in a drag-and-drop operation.","pos":[0,65]}]},{"pos":[16701,17251],"content":"By default, the effect applied determines the mouse cursor for the target of a drag-and-drop operation. This is useful to provide feedback to the user on the operation that will occur. For example, if you press the CTRL key when you drag a file from a source, specify <xref:System.Windows.Forms.DragDropEffects?displayProperty=fullName> to indicate the target will try to perform a copy operation.       To use custom cursors for a drag operation, see <xref:System.Windows.Forms.GiveFeedbackEventArgs.UseDefaultCursors%2A?displayProperty=fullName>.","needQuote":false,"needEscape":true,"nodes":[{"content":"By default, the effect applied determines the mouse cursor for the target of a drag-and-drop operation. This is useful to provide feedback to the user on the operation that will occur. For example, if you press the CTRL key when you drag a file from a source, specify <xref:System.Windows.Forms.DragDropEffects?displayProperty=fullName> to indicate the target will try to perform a copy operation.       To use custom cursors for a drag operation, see <xref:System.Windows.Forms.GiveFeedbackEventArgs.UseDefaultCursors%2A?displayProperty=fullName>.","pos":[0,548],"nodes":[{"content":"By default, the effect applied determines the mouse cursor for the target of a drag-and-drop operation.","pos":[0,103]},{"content":"This is useful to provide feedback to the user on the operation that will occur.","pos":[104,184]},{"content":"For example, if you press the CTRL key when you drag a file from a source, specify &lt;xref:System.Windows.Forms.DragDropEffects?displayProperty=fullName&gt; to indicate the target will try to perform a copy operation.","pos":[185,397],"source":" For example, if you press the CTRL key when you drag a file from a source, specify <xref:System.Windows.Forms.DragDropEffects?displayProperty=fullName> to indicate the target will try to perform a copy operation."},{"content":"To use custom cursors for a drag operation, see &lt;xref:System.Windows.Forms.GiveFeedbackEventArgs.UseDefaultCursors%2A?displayProperty=fullName&gt;.","pos":[404,548],"source":"       To use custom cursors for a drag operation, see <xref:System.Windows.Forms.GiveFeedbackEventArgs.UseDefaultCursors%2A?displayProperty=fullName>."}]}]},{"pos":[20023,20099],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Forms.DragDropEffects\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Windows.Forms.DragDropEffects\"></xref> values."},{"pos":[20539,20638],"content":"Gets the current state of the SHIFT, CTRL, and ALT keys, as well as the state of the mouse buttons.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the current state of the SHIFT, CTRL, and ALT keys, as well as the state of the mouse buttons.","pos":[0,99]}]},{"pos":[20651,21517],"content":"You can make the effect of a drag-and-drop operation to depend on the state of a particular key. For example, you may decide to copy or move data depending on whether the CTRL or SHIFT keys are pressed during the drag-and-drop operation.       The bits that are set in the KeyState property identify the keys or mouse buttons that were pressed during the operation. For example, if the left mouse button is pressed, the first bit in the KeyState property is set. You can use the bitwise AND operator to test for a given key state.       The following table lists the values that are used for a specified event.      |Value|Key|   |-----------|---------|   |1 (bit 0)|The left mouse button.|   |2 (bit 1)|The right mouse button.|   |4 (bit 2)|The SHIFT key.|   |8 (bit 3)|The CTRL key.|   |16 (bit 4)|The middle mouse button.|   |32 (bit 5)|The ALT key.|","needQuote":false,"needEscape":true,"nodes":[{"content":"You can make the effect of a drag-and-drop operation to depend on the state of a particular key. For example, you may decide to copy or move data depending on whether the CTRL or SHIFT keys are pressed during the drag-and-drop operation.       The bits that are set in the KeyState property identify the keys or mouse buttons that were pressed during the operation. For example, if the left mouse button is pressed, the first bit in the KeyState property is set. You can use the bitwise AND operator to test for a given key state.       The following table lists the values that are used for a specified event.      |Value|Key|   |-----------|---------|   |1 (bit 0)|The left mouse button.|   |2 (bit 1)|The right mouse button.|   |4 (bit 2)|The SHIFT key.|   |8 (bit 3)|The CTRL key.|   |16 (bit 4)|The middle mouse button.|   |32 (bit 5)|The ALT key.|","pos":[0,853],"nodes":[{"content":"You can make the effect of a drag-and-drop operation to depend on the state of a particular key.","pos":[0,96]},{"content":"For example, you may decide to copy or move data depending on whether the CTRL or SHIFT keys are pressed during the drag-and-drop operation.","pos":[97,237]},{"content":"The bits that are set in the KeyState property identify the keys or mouse buttons that were pressed during the operation.","pos":[244,365]},{"content":"For example, if the left mouse button is pressed, the first bit in the KeyState property is set.","pos":[366,462]},{"content":"You can use the bitwise AND operator to test for a given key state.","pos":[463,530]},{"content":"The following table lists the values that are used for a specified event.","pos":[537,610]},{"content":"|Value|Key|   |-----------|---------|   |1 (bit 0)|The left mouse button.|   |2 (bit 1)|The right mouse button.|   |4 (bit 2)|The SHIFT key.|   |8 (bit 3)|The CTRL key.|   |16 (bit 4)|The middle mouse button.|   |32 (bit 5)|The ALT key.|","pos":[616,853]}]}]},{"pos":[24299,24375],"content":"The current state of the SHIFT, CTRL, and ALT keys and of the mouse buttons.","needQuote":true,"needEscape":true,"nodes":[{"content":"The current state of the SHIFT, CTRL, and ALT keys and of the mouse buttons.","pos":[0,76]}]},{"pos":[24782,24848],"content":"Gets the x-coordinate of the mouse pointer, in screen coordinates.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the x-coordinate of the mouse pointer, in screen coordinates.","pos":[0,66]}]},{"pos":[27636,27684],"content":"The x-coordinate of the mouse pointer in pixels.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x-coordinate of the mouse pointer in pixels.","pos":[0,48]}]},{"pos":[28084,28150],"content":"Gets the y-coordinate of the mouse pointer, in screen coordinates.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the y-coordinate of the mouse pointer, in screen coordinates.","pos":[0,66]}]},{"pos":[30935,30983],"content":"The y-coordinate of the mouse pointer in pixels.","needQuote":true,"needEscape":true,"nodes":[{"content":"The y-coordinate of the mouse pointer in pixels.","pos":[0,48]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Forms.DragEventArgs\n  id: DragEventArgs\n  children:\n  - System.Windows.Forms.DragEventArgs.#ctor(System.Windows.Forms.IDataObject,System.Int32,System.Int32,System.Int32,System.Windows.Forms.DragDropEffects,System.Windows.Forms.DragDropEffects)\n  - System.Windows.Forms.DragEventArgs.AllowedEffect\n  - System.Windows.Forms.DragEventArgs.Data\n  - System.Windows.Forms.DragEventArgs.Effect\n  - System.Windows.Forms.DragEventArgs.KeyState\n  - System.Windows.Forms.DragEventArgs.X\n  - System.Windows.Forms.DragEventArgs.Y\n  langs:\n  - csharp\n  name: DragEventArgs\n  nameWithType: DragEventArgs\n  fullName: System.Windows.Forms.DragEventArgs\n  type: Class\n  summary: Provides data for the <xref href=\"System.Windows.Forms.Control.DragDrop\"></xref>, <xref href=\"System.Windows.Forms.Control.DragEnter\"></xref>, or <xref href=\"System.Windows.Forms.Control.DragOver\"></xref> event.\n  remarks: \"The <xref:System.Windows.Forms.Control.DragDrop> event occurs when the user completes a drag-and-drop operation by dragging an object over the control and then dropping it onto the control by releasing the mouse button. The <xref:System.Windows.Forms.Control.DragEnter> event occurs when the user moves the mouse pointer onto the control while dragging an object with the mouse. The <xref:System.Windows.Forms.Control.DragOver> event occurs when the user moves the mouse pointer over the control while dragging an object with the mouse.  \\n  \\n A DragEventArgs object specifies any data associated with this event; the current state of the SHIFT, CTRL, and ALT keys; the location of the mouse pointer; and the drag-and-drop effects allowed by the source and target of the drag event.  \\n  \\n For information about the event model, see [Events](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"The following example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls. The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts. The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=fullName> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event. The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.  \\n  \\n The example also demonstrates using custom cursors for the drag-and-drop operation. The example assumes that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively. The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked. The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.  \\n  \\n The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right `ListBox`, to determine what the drag operation will be based upon state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the `ListBox` where the drop would occur is also determined during the `DragOver` event. If the data to drop is not a `String`, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=fullName> is set to <xref:System.Windows.Forms.DragDropEffects?displayProperty=fullName>. Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.  \\n  \\n The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`. If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.  \\n  \\n This code excerpt demonstrates using the DragEventArgs class. See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.  \\n  \\n [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/cpp/t-system.windows.forms.d_17_1.cpp)]\\n [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/visualbasic/t-system.windows.forms.d_17_1.vb)]\\n [!code-cs[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/csharp/t-system.windows.forms.d_17_1.cs)]  \\n  \\n The following example illustrates how DragEventArgs are passed between the source and target of a drag-and-drop operation. In this example, a <xref:System.Windows.Forms.ListBox> control is the source of the data, and the <xref:System.Windows.Forms.RichTextBox> control is the target. The example assumes that the <xref:System.Windows.Forms.ListBox> control has been populated with a list of valid filenames. When the user drags one of the displayed filenames from the <xref:System.Windows.Forms.ListBox> control onto the <xref:System.Windows.Forms.RichTextBox> control, the file referenced in the filename is opened.  \\n  \\n The operation is initiated in the <xref:System.Windows.Forms.ListBox> control's MouseDown event. In the <xref:System.Windows.Forms.RichTextBox.DragEnter> event handler, the example uses the <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> method to verify that the data is in a format that the <xref:System.Windows.Forms.RichTextBox> control can display and then sets the <xref:System.Windows.Forms.DragDropEffects> property to specify that data should be copied from the source control to the target control. Finally, the <xref:System.Windows.Forms.RichTextBox> control's DragDrop event handler uses the <xref:System.Windows.Forms.IDataObject.GetData%2A> method to retrieve the filename to open.  \\n  \\n [!code-cs[RichTextDragDrop#1](~/add/codesnippet/csharp/t-system.windows.forms.d_17_2.cs)]\\n [!code-vb[RichTextDragDrop#1](~/add/codesnippet/visualbasic/t-system.windows.forms.d_17_2.vb)]\\n [!code-cpp[RichTextDragDrop#1](~/add/codesnippet/cpp/t-system.windows.forms.d_17_2.cpp)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class DragEventArgs : EventArgs\n  inheritance:\n  - System.EventArgs\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.DragEventArgs.#ctor(System.Windows.Forms.IDataObject,System.Int32,System.Int32,System.Int32,System.Windows.Forms.DragDropEffects,System.Windows.Forms.DragDropEffects)\n  id: '#ctor(System.Windows.Forms.IDataObject,System.Int32,System.Int32,System.Int32,System.Windows.Forms.DragDropEffects,System.Windows.Forms.DragDropEffects)'\n  parent: System.Windows.Forms.DragEventArgs\n  langs:\n  - csharp\n  name: DragEventArgs(IDataObject,Int32,Int32,Int32,DragDropEffects,DragDropEffects)\n  nameWithType: DragEventArgs.DragEventArgs(IDataObject,Int32,Int32,Int32,DragDropEffects,DragDropEffects)\n  fullName: System.Windows.Forms.DragEventArgs.DragEventArgs(IDataObject,Int32,Int32,Int32,DragDropEffects,DragDropEffects)\n  type: Constructor\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Forms.DragEventArgs\"></xref> class.\n  syntax:\n    content: public DragEventArgs (System.Windows.Forms.IDataObject data, int keyState, int x, int y, System.Windows.Forms.DragDropEffects allowedEffect, System.Windows.Forms.DragDropEffects effect);\n    parameters:\n    - id: data\n      type: System.Windows.Forms.IDataObject\n      description: The data associated with this event.\n    - id: keyState\n      type: System.Int32\n      description: The current state of the SHIFT, CTRL, and ALT keys.\n    - id: x\n      type: System.Int32\n      description: The x-coordinate of the mouse cursor in pixels.\n    - id: y\n      type: System.Int32\n      description: The y-coordinate of the mouse cursor in pixels.\n    - id: allowedEffect\n      type: System.Windows.Forms.DragDropEffects\n      description: One of the <xref href=\"System.Windows.Forms.DragDropEffects\"></xref> values.\n    - id: effect\n      type: System.Windows.Forms.DragDropEffects\n      description: One of the <xref href=\"System.Windows.Forms.DragDropEffects\"></xref> values.\n  overload: System.Windows.Forms.DragEventArgs.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.DragEventArgs.AllowedEffect\n  id: AllowedEffect\n  parent: System.Windows.Forms.DragEventArgs\n  langs:\n  - csharp\n  name: AllowedEffect\n  nameWithType: DragEventArgs.AllowedEffect\n  fullName: System.Windows.Forms.DragEventArgs.AllowedEffect\n  type: Property\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Gets which drag-and-drop operations are allowed by the originator (or source) of the drag event.\n  remarks: \"When a control initiates a drag-and-drop operation by calling the <xref:System.Windows.Forms.Control.DoDragDrop%2A?displayProperty=fullName> method, it specifies the permissible effects of the operation. For example, when you drag a file from a source, if the file is read-only (or from a read-only storage medium such as a CD), the source will indicate that the file can be copied, but not transferred, to the target.  \\n  \\n Before attempting to perform an operation on the dragged data, you should examine this property to ensure that the operation is allowed.\"\n  example:\n  - \"The following example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls. The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts. The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=fullName> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event. The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.  \\n  \\n The example also demonstrates using custom cursors for the drag-and-drop operation. The example assumes that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively. The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked. The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.  \\n  \\n The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right `ListBox`, to determine what the drag operation will be based upon state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the `ListBox` where the drop would occur is also determined during the `DragOver` event. If the data to drop is not a `String`, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=fullName> is set to <xref:System.Windows.Forms.DragDropEffects?displayProperty=fullName>. Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.  \\n  \\n The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`. If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.  \\n  \\n This code excerpt demonstrates using the <xref:System.Windows.Forms.DragEventArgs> class. See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.  \\n  \\n [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/cpp/p-system.windows.forms.d_303_1.cpp)]\\n [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/visualbasic/p-system.windows.forms.d_303_1.vb)]\\n [!code-cs[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/csharp/p-system.windows.forms.d_303_1.cs)]\"\n  syntax:\n    content: public System.Windows.Forms.DragDropEffects AllowedEffect { get; }\n    return:\n      type: System.Windows.Forms.DragDropEffects\n      description: One of the <xref href=\"System.Windows.Forms.DragDropEffects\"></xref> values.\n  overload: System.Windows.Forms.DragEventArgs.AllowedEffect*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.DragEventArgs.Data\n  id: Data\n  parent: System.Windows.Forms.DragEventArgs\n  langs:\n  - csharp\n  name: Data\n  nameWithType: DragEventArgs.Data\n  fullName: System.Windows.Forms.DragEventArgs.Data\n  type: Property\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Gets the <xref href=\"System.Windows.Forms.IDataObject\"></xref> that contains the data associated with this event.\n  remarks: In the body of your event handler, you can use the <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> method to determine whether the data matches the format requirements of the control onto which the data is being dragged. You also can specify whether you want to attempt to convert the data to meet your format requirements. If the dragged data meets your format requirements, use the <xref:System.Windows.Forms.IDataObject.GetData%2A> method to retrieve the data.\n  example:\n  - \"The following example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls. The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts. The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=fullName> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event. The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.  \\n  \\n The example also demonstrates using custom cursors for the drag-and-drop operation. The example assumes that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively. The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked. The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.  \\n  \\n The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right `ListBox`, to determine what the drag operation will be based upon state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the `ListBox` where the drop would occur is also determined during the `DragOver` event. If the data to drop is not a `String`, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=fullName> is set to <xref:System.Windows.Forms.DragDropEffects?displayProperty=fullName>. Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.  \\n  \\n The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`. If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.  \\n  \\n This code excerpt demonstrates using the <xref:System.Windows.Forms.DragEventArgs> class. See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.  \\n  \\n [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/cpp/p-system.windows.forms.d_79_1.cpp)]\\n [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/visualbasic/p-system.windows.forms.d_79_1.vb)]\\n [!code-cs[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/csharp/p-system.windows.forms.d_79_1.cs)]\"\n  syntax:\n    content: public System.Windows.Forms.IDataObject Data { get; }\n    return:\n      type: System.Windows.Forms.IDataObject\n      description: The data associated with this event.\n  overload: System.Windows.Forms.DragEventArgs.Data*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.DragEventArgs.Effect\n  id: Effect\n  parent: System.Windows.Forms.DragEventArgs\n  langs:\n  - csharp\n  name: Effect\n  nameWithType: DragEventArgs.Effect\n  fullName: System.Windows.Forms.DragEventArgs.Effect\n  type: Property\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Gets or sets the target drop effect in a drag-and-drop operation.\n  remarks: \"By default, the effect applied determines the mouse cursor for the target of a drag-and-drop operation. This is useful to provide feedback to the user on the operation that will occur. For example, if you press the CTRL key when you drag a file from a source, specify <xref:System.Windows.Forms.DragDropEffects?displayProperty=fullName> to indicate the target will try to perform a copy operation.  \\n  \\n To use custom cursors for a drag operation, see <xref:System.Windows.Forms.GiveFeedbackEventArgs.UseDefaultCursors%2A?displayProperty=fullName>.\"\n  example:\n  - \"The following example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls. The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts. The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=fullName> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event. The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.  \\n  \\n The example also demonstrates using custom cursors for the drag-and-drop operation. The example assumes that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively. The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked. The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.  \\n  \\n The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right `ListBox`, to determine what the drag operation will be based upon state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the `ListBox` where the drop would occur is also determined during the `DragOver` event. If the data to drop is not a `String`, then the Effect is set to <xref:System.Windows.Forms.DragDropEffects?displayProperty=fullName>. Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.  \\n  \\n The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`. If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.  \\n  \\n This code excerpt demonstrates using the <xref:System.Windows.Forms.DragEventArgs> class. See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.  \\n  \\n [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/cpp/p-system.windows.forms.d_330_1.cpp)]\\n [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/visualbasic/p-system.windows.forms.d_330_1.vb)]\\n [!code-cs[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/csharp/p-system.windows.forms.d_330_1.cs)]\"\n  syntax:\n    content: public System.Windows.Forms.DragDropEffects Effect { get; set; }\n    return:\n      type: System.Windows.Forms.DragDropEffects\n      description: One of the <xref href=\"System.Windows.Forms.DragDropEffects\"></xref> values.\n  overload: System.Windows.Forms.DragEventArgs.Effect*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.DragEventArgs.KeyState\n  id: KeyState\n  parent: System.Windows.Forms.DragEventArgs\n  langs:\n  - csharp\n  name: KeyState\n  nameWithType: DragEventArgs.KeyState\n  fullName: System.Windows.Forms.DragEventArgs.KeyState\n  type: Property\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Gets the current state of the SHIFT, CTRL, and ALT keys, as well as the state of the mouse buttons.\n  remarks: \"You can make the effect of a drag-and-drop operation to depend on the state of a particular key. For example, you may decide to copy or move data depending on whether the CTRL or SHIFT keys are pressed during the drag-and-drop operation.  \\n  \\n The bits that are set in the KeyState property identify the keys or mouse buttons that were pressed during the operation. For example, if the left mouse button is pressed, the first bit in the KeyState property is set. You can use the bitwise AND operator to test for a given key state.  \\n  \\n The following table lists the values that are used for a specified event.  \\n  \\n|Value|Key|  \\n|-----------|---------|  \\n|1 (bit 0)|The left mouse button.|  \\n|2 (bit 1)|The right mouse button.|  \\n|4 (bit 2)|The SHIFT key.|  \\n|8 (bit 3)|The CTRL key.|  \\n|16 (bit 4)|The middle mouse button.|  \\n|32 (bit 5)|The ALT key.|\"\n  example:\n  - \"The following example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls. The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts. The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=fullName> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event. The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.  \\n  \\n The example also demonstrates using custom cursors for the drag-and-drop operation. The example assumes that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively. The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked. The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.  \\n  \\n The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right `ListBox`, to determine what the drag operation will be based upon state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the `ListBox` where the drop would occur is also determined during the `DragOver` event. If the data to drop is not a `String`, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=fullName> is set to <xref:System.Windows.Forms.DragDropEffects?displayProperty=fullName>. Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.  \\n  \\n The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`. If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.  \\n  \\n This code excerpt demonstrates using the <xref:System.Windows.Forms.DragEventArgs> class. See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.  \\n  \\n [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/cpp/p-system.windows.forms.d_339_1.cpp)]\\n [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/visualbasic/p-system.windows.forms.d_339_1.vb)]\\n [!code-cs[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/csharp/p-system.windows.forms.d_339_1.cs)]\"\n  syntax:\n    content: public int KeyState { get; }\n    return:\n      type: System.Int32\n      description: The current state of the SHIFT, CTRL, and ALT keys and of the mouse buttons.\n  overload: System.Windows.Forms.DragEventArgs.KeyState*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.DragEventArgs.X\n  id: X\n  parent: System.Windows.Forms.DragEventArgs\n  langs:\n  - csharp\n  name: X\n  nameWithType: DragEventArgs.X\n  fullName: System.Windows.Forms.DragEventArgs.X\n  type: Property\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Gets the x-coordinate of the mouse pointer, in screen coordinates.\n  remarks: ''\n  example:\n  - \"The following example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls. The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts. The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=fullName> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event. The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.  \\n  \\n The example also demonstrates using custom cursors for the drag-and-drop operation. The example assumes that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively. The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked. The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.  \\n  \\n The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right `ListBox`, to determine what the drag operation will be based upon state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the `ListBox` where the drop would occur is also determined during the `DragOver` event. If the data to drop is not a `String`, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=fullName> is set to <xref:System.Windows.Forms.DragDropEffects?displayProperty=fullName>. Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.  \\n  \\n The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`. If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.  \\n  \\n This code excerpt demonstrates using the <xref:System.Windows.Forms.DragEventArgs> class. See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.  \\n  \\n [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/cpp/p-system.windows.forms.d_210_1.cpp)]\\n [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/visualbasic/p-system.windows.forms.d_210_1.vb)]\\n [!code-cs[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/csharp/p-system.windows.forms.d_210_1.cs)]\"\n  syntax:\n    content: public int X { get; }\n    return:\n      type: System.Int32\n      description: The x-coordinate of the mouse pointer in pixels.\n  overload: System.Windows.Forms.DragEventArgs.X*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.DragEventArgs.Y\n  id: Y\n  parent: System.Windows.Forms.DragEventArgs\n  langs:\n  - csharp\n  name: Y\n  nameWithType: DragEventArgs.Y\n  fullName: System.Windows.Forms.DragEventArgs.Y\n  type: Property\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Gets the y-coordinate of the mouse pointer, in screen coordinates.\n  remarks: ''\n  example:\n  - \"The following example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls. The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts. The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=fullName> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event. The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.  \\n  \\n The example also demonstrates using custom cursors for the drag-and-drop operation. The example assumes that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively. The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked. The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.  \\n  \\n The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right `ListBox`, to determine what the drag operation will be based upon state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the `ListBox` where the drop would occur is also determined during the `DragOver` event. If the data to drop is not a `String`, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=fullName> is set to <xref:System.Windows.Forms.DragDropEffects?displayProperty=fullName>. Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.  \\n  \\n The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`. If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.  \\n  \\n This code excerpt demonstrates using the <xref:System.Windows.Forms.DragEventArgs> class. See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.  \\n  \\n [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/cpp/p-system.windows.forms.d_56_1.cpp)]\\n [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/visualbasic/p-system.windows.forms.d_56_1.vb)]\\n [!code-cs[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/csharp/p-system.windows.forms.d_56_1.cs)]\"\n  syntax:\n    content: public int Y { get; }\n    return:\n      type: System.Int32\n      description: The y-coordinate of the mouse pointer in pixels.\n  overload: System.Windows.Forms.DragEventArgs.Y*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.EventArgs\n  isExternal: false\n  name: System.EventArgs\n- uid: System.Windows.Forms.DragEventArgs.#ctor(System.Windows.Forms.IDataObject,System.Int32,System.Int32,System.Int32,System.Windows.Forms.DragDropEffects,System.Windows.Forms.DragDropEffects)\n  parent: System.Windows.Forms.DragEventArgs\n  isExternal: false\n  name: DragEventArgs(IDataObject,Int32,Int32,Int32,DragDropEffects,DragDropEffects)\n  nameWithType: DragEventArgs.DragEventArgs(IDataObject,Int32,Int32,Int32,DragDropEffects,DragDropEffects)\n  fullName: System.Windows.Forms.DragEventArgs.DragEventArgs(IDataObject,Int32,Int32,Int32,DragDropEffects,DragDropEffects)\n- uid: System.Windows.Forms.IDataObject\n  parent: System.Windows.Forms\n  isExternal: false\n  name: IDataObject\n  nameWithType: IDataObject\n  fullName: System.Windows.Forms.IDataObject\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Windows.Forms.DragDropEffects\n  parent: System.Windows.Forms\n  isExternal: false\n  name: DragDropEffects\n  nameWithType: DragDropEffects\n  fullName: System.Windows.Forms.DragDropEffects\n- uid: System.Windows.Forms.DragEventArgs.AllowedEffect\n  parent: System.Windows.Forms.DragEventArgs\n  isExternal: false\n  name: AllowedEffect\n  nameWithType: DragEventArgs.AllowedEffect\n  fullName: System.Windows.Forms.DragEventArgs.AllowedEffect\n- uid: System.Windows.Forms.DragEventArgs.Data\n  parent: System.Windows.Forms.DragEventArgs\n  isExternal: false\n  name: Data\n  nameWithType: DragEventArgs.Data\n  fullName: System.Windows.Forms.DragEventArgs.Data\n- uid: System.Windows.Forms.DragEventArgs.Effect\n  parent: System.Windows.Forms.DragEventArgs\n  isExternal: false\n  name: Effect\n  nameWithType: DragEventArgs.Effect\n  fullName: System.Windows.Forms.DragEventArgs.Effect\n- uid: System.Windows.Forms.DragEventArgs.KeyState\n  parent: System.Windows.Forms.DragEventArgs\n  isExternal: false\n  name: KeyState\n  nameWithType: DragEventArgs.KeyState\n  fullName: System.Windows.Forms.DragEventArgs.KeyState\n- uid: System.Windows.Forms.DragEventArgs.X\n  parent: System.Windows.Forms.DragEventArgs\n  isExternal: false\n  name: X\n  nameWithType: DragEventArgs.X\n  fullName: System.Windows.Forms.DragEventArgs.X\n- uid: System.Windows.Forms.DragEventArgs.Y\n  parent: System.Windows.Forms.DragEventArgs\n  isExternal: false\n  name: Y\n  nameWithType: DragEventArgs.Y\n  fullName: System.Windows.Forms.DragEventArgs.Y\n- uid: System.Windows.Forms.DragEventArgs.#ctor*\n  parent: System.Windows.Forms.DragEventArgs\n  isExternal: false\n  name: DragEventArgs\n  nameWithType: DragEventArgs.DragEventArgs\n- uid: System.Windows.Forms.DragEventArgs.AllowedEffect*\n  parent: System.Windows.Forms.DragEventArgs\n  isExternal: false\n  name: AllowedEffect\n  nameWithType: DragEventArgs.AllowedEffect\n- uid: System.Windows.Forms.DragEventArgs.Data*\n  parent: System.Windows.Forms.DragEventArgs\n  isExternal: false\n  name: Data\n  nameWithType: DragEventArgs.Data\n- uid: System.Windows.Forms.DragEventArgs.Effect*\n  parent: System.Windows.Forms.DragEventArgs\n  isExternal: false\n  name: Effect\n  nameWithType: DragEventArgs.Effect\n- uid: System.Windows.Forms.DragEventArgs.KeyState*\n  parent: System.Windows.Forms.DragEventArgs\n  isExternal: false\n  name: KeyState\n  nameWithType: DragEventArgs.KeyState\n- uid: System.Windows.Forms.DragEventArgs.X*\n  parent: System.Windows.Forms.DragEventArgs\n  isExternal: false\n  name: X\n  nameWithType: DragEventArgs.X\n- uid: System.Windows.Forms.DragEventArgs.Y*\n  parent: System.Windows.Forms.DragEventArgs\n  isExternal: false\n  name: Y\n  nameWithType: DragEventArgs.Y\n"}