{"nodes":[{"pos":[821,885],"content":"Represents the properties and methods of a default HTTP handler.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the properties and methods of a default HTTP handler.","pos":[0,64]}]},{"pos":[898,2476],"content":"A DefaultHttpHandler object intercepts incoming requests in the HTTP pipeline when both request interception has been configured through Internet Information Services (IIS) 6.0 and no explicit  bindings apply to the requested extension.       Request interception can be set up through the wildcard application mapping feature introduced in IIS 6.0. For more information, search the [MSDN Library](http://go.microsoft.com/fwlink/?linkid=37118) for information about using wildcard application maps to remap a URL.       The DefaultHttpHandler class implements the <xref:System.Web.IHttpAsyncHandler> interface to provide asynchronous request processing. For general information about HTTP handlers, see [HTTP Handlers and HTTP Modules Overview](~/add/includes/ajax-current-ext-md.md). Additionally, for more information see the following:      -   About creating asynchronous HTTP handlers, see [Walkthrough: Creating an Asynchronous HTTP Handler](~/add/includes/ajax-current-ext-md.md).      -   About registering HTTP handlers, see [How to: Register HTTP Handlers](~/add/includes/ajax-current-ext-md.md).       Classes can derive from the DefaultHttpHandler class to provide customized handling of requests. An asynchronous HTTP handler that is derived from the DefaultHttpHandler could override the <xref:System.Web.DefaultHttpHandler.BeginProcessRequest%2A> method to change how requests are processed.       A DefaultHttpHandler does not use ASP.NET errors. Existing content that uses IIS errors or a propriety ISAPI custom error mechanism would work unchanged.","needQuote":false,"needEscape":true,"nodes":[{"content":"A DefaultHttpHandler object intercepts incoming requests in the HTTP pipeline when both request interception has been configured through Internet Information Services (IIS) 6.0 and no explicit  bindings apply to the requested extension.","pos":[0,236]},{"content":"Request interception can be set up through the wildcard application mapping feature introduced in IIS 6.0.","pos":[243,349]},{"content":"For more information, search the <bpt id=\"p1\">[</bpt>MSDN Library<ept id=\"p1\">](http://go.microsoft.com/fwlink/?linkid=37118)</ept> for information about using wildcard application maps to remap a URL.","pos":[350,513],"source":" For more information, search the [MSDN Library](http://go.microsoft.com/fwlink/?linkid=37118) for information about using wildcard application maps to remap a URL."},{"content":"The DefaultHttpHandler class implements the &lt;xref:System.Web.IHttpAsyncHandler&gt; interface to provide asynchronous request processing.","pos":[520,653],"source":"       The DefaultHttpHandler class implements the <xref:System.Web.IHttpAsyncHandler> interface to provide asynchronous request processing."},{"content":"For general information about HTTP handlers, see <bpt id=\"p1\">[</bpt>HTTP Handlers and HTTP Modules Overview<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[654,784],"source":" For general information about HTTP handlers, see [HTTP Handlers and HTTP Modules Overview](~/add/includes/ajax-current-ext-md.md)."},{"content":"Additionally, for more information see the following:      -   About creating asynchronous HTTP handlers, see <bpt id=\"p1\">[</bpt>Walkthrough: Creating an Asynchronous HTTP Handler<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[785,987],"source":" Additionally, for more information see the following:      -   About creating asynchronous HTTP handlers, see [Walkthrough: Creating an Asynchronous HTTP Handler](~/add/includes/ajax-current-ext-md.md)."},{"content":"-   About registering HTTP handlers, see <bpt id=\"p1\">[</bpt>How to: Register HTTP Handlers<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[993,1106],"source":"      -   About registering HTTP handlers, see [How to: Register HTTP Handlers](~/add/includes/ajax-current-ext-md.md)."},{"content":"Classes can derive from the DefaultHttpHandler class to provide customized handling of requests.","pos":[1113,1209]},{"content":"An asynchronous HTTP handler that is derived from the DefaultHttpHandler could override the &lt;xref:System.Web.DefaultHttpHandler.BeginProcessRequest%2A&gt; method to change how requests are processed.","pos":[1210,1406],"source":" An asynchronous HTTP handler that is derived from the DefaultHttpHandler could override the <xref:System.Web.DefaultHttpHandler.BeginProcessRequest%2A> method to change how requests are processed."},{"content":"A DefaultHttpHandler does not use ASP.NET errors.","pos":[1413,1462]},{"content":"Existing content that uses IIS errors or a propriety ISAPI custom error mechanism would work unchanged.","pos":[1463,1566]}]},{"pos":[3403,3494],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Web.DefaultHttpHandler\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Web.DefaultHttpHandler\"></xref> class."},{"pos":[4243,4294],"content":"Initiates an asynchronous call to the HTTP handler.","needQuote":true,"needEscape":true,"nodes":[{"content":"Initiates an asynchronous call to the HTTP handler.","pos":[0,51]}]},{"pos":[4306,4535],"content":"When creating an HTTP handler for asynchronous use, your handler must implement the asynchronous BeginProcessRequest and <xref:System.Web.DefaultHttpHandler.EndProcessRequest%2A> methods that are called asynchronously by ASP.NET.","needQuote":true,"needEscape":true,"nodes":[{"content":"When creating an HTTP handler for asynchronous use, your handler must implement the asynchronous BeginProcessRequest and &lt;xref:System.Web.DefaultHttpHandler.EndProcessRequest%2A&gt; methods that are called asynchronously by ASP.NET.","pos":[0,229],"source":"When creating an HTTP handler for asynchronous use, your handler must implement the asynchronous BeginProcessRequest and <xref:System.Web.DefaultHttpHandler.EndProcessRequest%2A> methods that are called asynchronously by ASP.NET."}]},{"pos":[4767,4869],"content":"An object that provides references to intrinsic server objects that are used to service HTTP requests.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that provides references to intrinsic server objects that are used to service HTTP requests.","pos":[0,102]}]},{"pos":[4941,5113],"content":"The method to call when the asynchronous method call is complete. If `callback` is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, the delegate is not called.","needQuote":true,"needEscape":true,"nodes":[{"content":"The method to call when the asynchronous method call is complete.","pos":[0,65]},{"content":"If <ph id=\"ph1\">`callback`</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, the delegate is not called.","pos":[66,172],"source":" If `callback` is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, the delegate is not called."}]},{"pos":[5175,5228],"content":"Any state data that is needed to process the request.","needQuote":true,"needEscape":true,"nodes":[{"content":"Any state data that is needed to process the request.","pos":[0,53]}]},{"pos":[5292,5380],"content":"An <xref:System.IAsyncResult> that contains information about the status of the process.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.IAsyncResult&gt; that contains information about the status of the process.","pos":[0,88],"source":"An <xref:System.IAsyncResult> that contains information about the status of the process."}]},{"pos":[5552,5687],"content":"The preconditions for processing a request fail and either the requested file has the suffix .asp or the request was sent through POST.","needQuote":true,"needEscape":true,"nodes":[{"content":"The preconditions for processing a request fail and either the requested file has the suffix .asp or the request was sent through POST.","pos":[0,135]}]},{"pos":[6020,6131],"content":"Gets the context that is associated with the current <bpt id=\"p1\">&lt;xref href=\"System.Web.DefaultHttpHandler\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Gets the context that is associated with the current <xref href=\"System.Web.DefaultHttpHandler\"></xref> object."},{"pos":[6143,6590],"content":"The Context property provides access to the current <xref:System.Web.HttpContext> object for derived classes. An <xref:System.Web.HttpContext> object provides access to the intrinsic <xref:System.Web.HttpApplication.Request%2A>, <xref:System.Web.HttpApplication.Response%2A>, and <xref:System.Web.HttpApplication.Server%2A> properties for the request. For more information about accessing contextual information, see <xref:System.Web.HttpContext>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The Context property provides access to the current <xref:System.Web.HttpContext> object for derived classes. An <xref:System.Web.HttpContext> object provides access to the intrinsic <xref:System.Web.HttpApplication.Request%2A>, <xref:System.Web.HttpApplication.Response%2A>, and <xref:System.Web.HttpApplication.Server%2A> properties for the request. For more information about accessing contextual information, see <xref:System.Web.HttpContext>.","pos":[0,447],"nodes":[{"content":"The Context property provides access to the current &lt;xref:System.Web.HttpContext&gt; object for derived classes.","pos":[0,109],"source":"The Context property provides access to the current <xref:System.Web.HttpContext> object for derived classes."},{"content":"An &lt;xref:System.Web.HttpContext&gt; object provides access to the intrinsic &lt;xref:System.Web.HttpApplication.Request%2A&gt;, &lt;xref:System.Web.HttpApplication.Response%2A&gt;, and &lt;xref:System.Web.HttpApplication.Server%2A&gt; properties for the request.","pos":[110,351],"source":" An <xref:System.Web.HttpContext> object provides access to the intrinsic <xref:System.Web.HttpApplication.Request%2A>, <xref:System.Web.HttpApplication.Response%2A>, and <xref:System.Web.HttpApplication.Server%2A> properties for the request."},{"content":"For more information about accessing contextual information, see &lt;xref:System.Web.HttpContext&gt;.","pos":[352,447],"source":" For more information about accessing contextual information, see <xref:System.Web.HttpContext>."}]}]},{"pos":[6730,6818],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Web.HttpContext\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that contains the current context.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Web.HttpContext\"></xref> object that contains the current context."},{"pos":[7351,7402],"content":"Provides an end method for an asynchronous process.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides an end method for an asynchronous process.","pos":[0,51]}]},{"pos":[7414,7527],"content":"You can use the EndProcessRequest method to throw any exceptions that are caught during the asynchronous process.","needQuote":true,"needEscape":true,"nodes":[{"content":"You can use the EndProcessRequest method to throw any exceptions that are caught during the asynchronous process.","pos":[0,113]}]},{"pos":[7696,7764],"content":"An object that contains information about the status of the process.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that contains information about the status of the process.","pos":[0,68]}]},{"pos":[8225,8316],"content":"Gets a collection of request headers and request values to transfer along with the request.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a collection of request headers and request values to transfer along with the request.","pos":[0,91]}]},{"pos":[8328,8645],"content":"The ExecuteUrlHeaders property returns an empty collection unless it is populated in a class that is derived from the <xref:System.Web.DefaultHttpHandler> class. The headers that are added are appended to the collection of headers in the request before passing the request back to Internet Information Services (IIS).","needQuote":true,"needEscape":true,"nodes":[{"content":"The ExecuteUrlHeaders property returns an empty collection unless it is populated in a class that is derived from the <xref:System.Web.DefaultHttpHandler> class. The headers that are added are appended to the collection of headers in the request before passing the request back to Internet Information Services (IIS).","pos":[0,317],"nodes":[{"content":"The ExecuteUrlHeaders property returns an empty collection unless it is populated in a class that is derived from the &lt;xref:System.Web.DefaultHttpHandler&gt; class.","pos":[0,161],"source":"The ExecuteUrlHeaders property returns an empty collection unless it is populated in a class that is derived from the <xref:System.Web.DefaultHttpHandler> class."},{"content":"The headers that are added are appended to the collection of headers in the request before passing the request back to Internet Information Services (IIS).","pos":[162,317]}]}]},{"pos":[8851,8963],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.NameValueCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> containing request headers and values.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> containing request headers and values."},{"pos":[9389,9535],"content":"Gets a Boolean value indicating that another request can use the current instance of the <bpt id=\"p1\">&lt;xref href=\"System.Web.DefaultHttpHandler\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Gets a Boolean value indicating that another request can use the current instance of the <xref href=\"System.Web.DefaultHttpHandler\"></xref> class."},{"pos":[9547,9644],"content":"To explicitly set the IsReusable property to <ph id=\"ph1\">`true`</ph> or <ph id=\"ph2\">`false`</ph>, override the IsReusable property.","needQuote":true,"needEscape":true,"source":"To explicitly set the IsReusable property to `true` or `false`, override the IsReusable property."},{"pos":[9766,9972],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the <bpt id=\"p2\">&lt;xref href=\"System.Web.DefaultHttpHandler\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> is reusable; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Web.DefaultHttpHandler\"></xref> is reusable; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[10500,10622],"content":"Called when preconditions prevent the <bpt id=\"p1\">&lt;xref href=\"System.Web.DefaultHttpHandler\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object from processing a request.","needQuote":true,"needEscape":true,"source":"Called when preconditions prevent the <xref href=\"System.Web.DefaultHttpHandler\"></xref> object from processing a request."},{"pos":[10635,12057],"content":"Preconditions are specified by the client in the request-header fields and are evaluated on the Web server. For example, by using preconditions, clients can prevent a requested method (for example, GET) from being applied to a resource other than the one intended. For more information, see section 14, \"Header Field Definitions,\" in the [Hypertext Transfer Protocol -- HTTP/1.1](http://go.microsoft.com/fwlink/?LinkID=73147) specification on the World Wide Web Consortium (W3C) Web site.       The OnExecuteUrlPreconditionFailure method is called when preconditions prevent the <xref:System.Web.DefaultHttpHandler> object from processing a request. A deriving class might override the OnExecuteUrlPreconditionFailure method to throw an exception when the preconditions fail. The <xref:System.Web.DefaultHttpHandler> does not throw an exception in the OnExecuteUrlPreconditionFailure method.       Any of the following will cause the preconditions to fail:      -   Calling <xref:System.Web.HttpResponse.Write%2A?displayProperty=fullName>.      -   Calling <xref:System.Web.HttpResponse.AddHeader%2A?displayProperty=fullName>.      -   Calling <xref:System.Web.HttpResponse.Flush%2A?displayProperty=fullName>.      -   Changing the cache policy for the response.      -   Adding a <xref:System.IO.Stream> object as a filter to the <xref:System.Web.HttpResponse.Filter%2A?displayProperty=fullName> property.","needQuote":false,"needEscape":true,"nodes":[{"content":"Preconditions are specified by the client in the request-header fields and are evaluated on the Web server.","pos":[0,107]},{"content":"For example, by using preconditions, clients can prevent a requested method (for example, GET) from being applied to a resource other than the one intended.","pos":[108,264]},{"content":"For more information, see section 14, \"Header Field Definitions,\" in the <bpt id=\"p1\">[</bpt>Hypertext Transfer Protocol -- HTTP/1.1<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=73147)</ept> specification on the World Wide Web Consortium (W3C) Web site.","pos":[265,488],"source":" For more information, see section 14, \"Header Field Definitions,\" in the [Hypertext Transfer Protocol -- HTTP/1.1](http://go.microsoft.com/fwlink/?LinkID=73147) specification on the World Wide Web Consortium (W3C) Web site."},{"content":"The OnExecuteUrlPreconditionFailure method is called when preconditions prevent the &lt;xref:System.Web.DefaultHttpHandler&gt; object from processing a request.","pos":[495,649],"source":"       The OnExecuteUrlPreconditionFailure method is called when preconditions prevent the <xref:System.Web.DefaultHttpHandler> object from processing a request."},{"content":"A deriving class might override the OnExecuteUrlPreconditionFailure method to throw an exception when the preconditions fail.","pos":[650,775]},{"content":"The &lt;xref:System.Web.DefaultHttpHandler&gt; does not throw an exception in the OnExecuteUrlPreconditionFailure method.","pos":[776,891],"source":" The <xref:System.Web.DefaultHttpHandler> does not throw an exception in the OnExecuteUrlPreconditionFailure method."},{"content":"Any of the following will cause the preconditions to fail:      -   Calling &lt;xref:System.Web.HttpResponse.Write%2A?displayProperty=fullName&gt;.","pos":[898,1039],"source":"       Any of the following will cause the preconditions to fail:      -   Calling <xref:System.Web.HttpResponse.Write%2A?displayProperty=fullName>."},{"content":"-   Calling &lt;xref:System.Web.HttpResponse.AddHeader%2A?displayProperty=fullName&gt;.","pos":[1045,1126],"source":"      -   Calling <xref:System.Web.HttpResponse.AddHeader%2A?displayProperty=fullName>."},{"content":"-   Calling &lt;xref:System.Web.HttpResponse.Flush%2A?displayProperty=fullName&gt;.","pos":[1132,1209],"source":"      -   Calling <xref:System.Web.HttpResponse.Flush%2A?displayProperty=fullName>."},{"content":"-   Changing the cache policy for the response.","pos":[1215,1262]},{"content":"-   Adding a &lt;xref:System.IO.Stream&gt; object as a filter to the &lt;xref:System.Web.HttpResponse.Filter%2A?displayProperty=fullName&gt; property.","pos":[1268,1406],"source":"      -   Adding a <xref:System.IO.Stream> object as a filter to the <xref:System.Web.HttpResponse.Filter%2A?displayProperty=fullName> property."}]},{"pos":[12660,12709],"content":"Overrides the target URL for the current request.","needQuote":true,"needEscape":true,"nodes":[{"content":"Overrides the target URL for the current request.","pos":[0,49]}]},{"pos":[12722,13612],"content":"The OverrideExecuteUrlPath method returns `null` unless it is overridden in a class that is derived from the <xref:System.Web.DefaultHttpHandler> class.       The OverrideExecuteUrlPath method is called only if ASP.NET is running in worker process isolation mode on IIS 6.0, and if the response was not modified before the <xref:System.Web.DefaultHttpHandler> object was called. The response is modified by any of the following:      -   Calling <xref:System.Web.HttpResponse.Write%2A?displayProperty=fullName>.      -   Calling <xref:System.Web.HttpResponse.AddHeader%2A?displayProperty=fullName>.      -   Calling <xref:System.Web.HttpResponse.Flush%2A?displayProperty=fullName>.      -   Changing the cache policy for the response.      -   Adding a <xref:System.IO.Stream> object as a filter to the <xref:System.Web.HttpResponse.Filter%2A?displayProperty=fullName> property.","needQuote":false,"needEscape":true,"nodes":[{"content":"The OverrideExecuteUrlPath method returns <ph id=\"ph1\">`null`</ph> unless it is overridden in a class that is derived from the &lt;xref:System.Web.DefaultHttpHandler&gt; class.","pos":[0,152],"source":"The OverrideExecuteUrlPath method returns `null` unless it is overridden in a class that is derived from the <xref:System.Web.DefaultHttpHandler> class."},{"content":"The OverrideExecuteUrlPath method is called only if ASP.NET is running in worker process isolation mode on IIS 6.0, and if the response was not modified before the &lt;xref:System.Web.DefaultHttpHandler&gt; object was called.","pos":[159,378],"source":"       The OverrideExecuteUrlPath method is called only if ASP.NET is running in worker process isolation mode on IIS 6.0, and if the response was not modified before the <xref:System.Web.DefaultHttpHandler> object was called."},{"content":"The response is modified by any of the following:      -   Calling &lt;xref:System.Web.HttpResponse.Write%2A?displayProperty=fullName&gt;.","pos":[379,511],"source":" The response is modified by any of the following:      -   Calling <xref:System.Web.HttpResponse.Write%2A?displayProperty=fullName>."},{"content":"-   Calling &lt;xref:System.Web.HttpResponse.AddHeader%2A?displayProperty=fullName&gt;.","pos":[517,598],"source":"      -   Calling <xref:System.Web.HttpResponse.AddHeader%2A?displayProperty=fullName>."},{"content":"-   Calling &lt;xref:System.Web.HttpResponse.Flush%2A?displayProperty=fullName&gt;.","pos":[604,681],"source":"      -   Calling <xref:System.Web.HttpResponse.Flush%2A?displayProperty=fullName>."},{"content":"-   Changing the cache policy for the response.","pos":[687,734]},{"content":"-   Adding a &lt;xref:System.IO.Stream&gt; object as a filter to the &lt;xref:System.Web.HttpResponse.Filter%2A?displayProperty=fullName&gt; property.","pos":[740,878],"source":"      -   Adding a <xref:System.IO.Stream> object as a filter to the <xref:System.Web.HttpResponse.Filter%2A?displayProperty=fullName> property."}]},{"pos":[13762,13905],"content":"The overridden URL to use in the request; or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if an overridden URL is not provided.","needQuote":true,"needEscape":true,"source":"The overridden URL to use in the request; or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if an overridden URL is not provided."},{"pos":[14441,14541],"content":"Enables a <bpt id=\"p1\">&lt;xref href=\"System.Web.DefaultHttpHandler\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object to process of HTTP Web requests.","needQuote":true,"needEscape":true,"source":"Enables a <xref href=\"System.Web.DefaultHttpHandler\"></xref> object to process of HTTP Web requests."},{"pos":[14553,14765],"content":"The ProcessRequest method should not be called synchronously. Classes that are derived from the <xref:System.Web.DefaultHttpHandler> class can override the ProcessRequest to provide customized request processing.","needQuote":true,"needEscape":true,"nodes":[{"content":"The ProcessRequest method should not be called synchronously. Classes that are derived from the <xref:System.Web.DefaultHttpHandler> class can override the ProcessRequest to provide customized request processing.","pos":[0,212],"nodes":[{"content":"The ProcessRequest method should not be called synchronously.","pos":[0,61]},{"content":"Classes that are derived from the &lt;xref:System.Web.DefaultHttpHandler&gt; class can override the ProcessRequest to provide customized request processing.","pos":[62,212],"source":" Classes that are derived from the <xref:System.Web.DefaultHttpHandler> class can override the ProcessRequest to provide customized request processing."}]}]},{"pos":[14946,15039],"content":"An object that provides references to intrinsic server objects used to service HTTP requests.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that provides references to intrinsic server objects used to service HTTP requests.","pos":[0,93]}]},{"pos":[15222,15265],"content":"The ProcessRequest is called synchronously.","needQuote":true,"needEscape":true,"nodes":[{"content":"The ProcessRequest is called synchronously.","pos":[0,43]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.DefaultHttpHandler\n  id: DefaultHttpHandler\n  children:\n  - System.Web.DefaultHttpHandler.#ctor\n  - System.Web.DefaultHttpHandler.BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)\n  - System.Web.DefaultHttpHandler.Context\n  - System.Web.DefaultHttpHandler.EndProcessRequest(System.IAsyncResult)\n  - System.Web.DefaultHttpHandler.ExecuteUrlHeaders\n  - System.Web.DefaultHttpHandler.IsReusable\n  - System.Web.DefaultHttpHandler.OnExecuteUrlPreconditionFailure\n  - System.Web.DefaultHttpHandler.OverrideExecuteUrlPath\n  - System.Web.DefaultHttpHandler.ProcessRequest(System.Web.HttpContext)\n  langs:\n  - csharp\n  name: DefaultHttpHandler\n  nameWithType: DefaultHttpHandler\n  fullName: System.Web.DefaultHttpHandler\n  type: Class\n  summary: Represents the properties and methods of a default HTTP handler.\n  remarks: \"A DefaultHttpHandler object intercepts incoming requests in the HTTP pipeline when both request interception has been configured through Internet Information Services (IIS) 6.0 and no explicit  bindings apply to the requested extension.  \\n  \\n Request interception can be set up through the wildcard application mapping feature introduced in IIS 6.0. For more information, search the [MSDN Library](http://go.microsoft.com/fwlink/?linkid=37118) for information about using wildcard application maps to remap a URL.  \\n  \\n The DefaultHttpHandler class implements the <xref:System.Web.IHttpAsyncHandler> interface to provide asynchronous request processing. For general information about HTTP handlers, see [HTTP Handlers and HTTP Modules Overview](~/add/includes/ajax-current-ext-md.md). Additionally, for more information see the following:  \\n  \\n-   About creating asynchronous HTTP handlers, see [Walkthrough: Creating an Asynchronous HTTP Handler](~/add/includes/ajax-current-ext-md.md).  \\n  \\n-   About registering HTTP handlers, see [How to: Register HTTP Handlers](~/add/includes/ajax-current-ext-md.md).  \\n  \\n Classes can derive from the DefaultHttpHandler class to provide customized handling of requests. An asynchronous HTTP handler that is derived from the DefaultHttpHandler could override the <xref:System.Web.DefaultHttpHandler.BeginProcessRequest%2A> method to change how requests are processed.  \\n  \\n A DefaultHttpHandler does not use ASP.NET errors. Existing content that uses IIS errors or a propriety ISAPI custom error mechanism would work unchanged.\"\n  example:\n  - \"The following code example demonstrates how to implement a customized HTTP handler by deriving from the DefaultHttpHandler class.  \\n  \\n [!code-vb[System.Web.DefaultHttpHandler#1](~/add/codesnippet/visualbasic/t-system.web.defaulthttp_1.vb)]\\n [!code-cs[System.Web.DefaultHttpHandler#1](~/add/codesnippet/csharp/t-system.web.defaulthttp_1.cs)]\"\n  syntax:\n    content: 'public class DefaultHttpHandler : System.Web.IHttpAsyncHandler'\n  inheritance:\n  - System.Object\n  implements:\n  - System.Web.IHttpAsyncHandler\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Web.DefaultHttpHandler.#ctor\n  id: '#ctor'\n  parent: System.Web.DefaultHttpHandler\n  langs:\n  - csharp\n  name: DefaultHttpHandler()\n  nameWithType: DefaultHttpHandler.DefaultHttpHandler()\n  fullName: System.Web.DefaultHttpHandler.DefaultHttpHandler()\n  type: Constructor\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Initializes a new instance of the <xref href=\"System.Web.DefaultHttpHandler\"></xref> class.\n  syntax:\n    content: public DefaultHttpHandler ();\n    parameters: []\n  overload: System.Web.DefaultHttpHandler.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.DefaultHttpHandler.BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)\n  id: BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)\n  parent: System.Web.DefaultHttpHandler\n  langs:\n  - csharp\n  name: BeginProcessRequest(HttpContext,AsyncCallback,Object)\n  nameWithType: DefaultHttpHandler.BeginProcessRequest(HttpContext,AsyncCallback,Object)\n  fullName: System.Web.DefaultHttpHandler.BeginProcessRequest(HttpContext,AsyncCallback,Object)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Initiates an asynchronous call to the HTTP handler.\n  remarks: When creating an HTTP handler for asynchronous use, your handler must implement the asynchronous BeginProcessRequest and <xref:System.Web.DefaultHttpHandler.EndProcessRequest%2A> methods that are called asynchronously by ASP.NET.\n  syntax:\n    content: public virtual IAsyncResult BeginProcessRequest (System.Web.HttpContext context, AsyncCallback callback, object state);\n    parameters:\n    - id: context\n      type: System.Web.HttpContext\n      description: An object that provides references to intrinsic server objects that are used to service HTTP requests.\n    - id: callback\n      type: System.AsyncCallback\n      description: The method to call when the asynchronous method call is complete. If `callback` is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, the delegate is not called.\n    - id: state\n      type: System.Object\n      description: Any state data that is needed to process the request.\n    return:\n      type: System.IAsyncResult\n      description: An <xref:System.IAsyncResult> that contains information about the status of the process.\n  overload: System.Web.DefaultHttpHandler.BeginProcessRequest*\n  exceptions:\n  - type: System.Web.HttpException\n    commentId: T:System.Web.HttpException\n    description: The preconditions for processing a request fail and either the requested file has the suffix .asp or the request was sent through POST.\n  platform:\n  - net462\n- uid: System.Web.DefaultHttpHandler.Context\n  id: Context\n  parent: System.Web.DefaultHttpHandler\n  langs:\n  - csharp\n  name: Context\n  nameWithType: DefaultHttpHandler.Context\n  fullName: System.Web.DefaultHttpHandler.Context\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Gets the context that is associated with the current <xref href=\"System.Web.DefaultHttpHandler\"></xref> object.\n  remarks: The Context property provides access to the current <xref:System.Web.HttpContext> object for derived classes. An <xref:System.Web.HttpContext> object provides access to the intrinsic <xref:System.Web.HttpApplication.Request%2A>, <xref:System.Web.HttpApplication.Response%2A>, and <xref:System.Web.HttpApplication.Server%2A> properties for the request. For more information about accessing contextual information, see <xref:System.Web.HttpContext>.\n  syntax:\n    content: protected System.Web.HttpContext Context { get; }\n    return:\n      type: System.Web.HttpContext\n      description: An <xref href=\"System.Web.HttpContext\"></xref> object that contains the current context.\n  overload: System.Web.DefaultHttpHandler.Context*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.DefaultHttpHandler.EndProcessRequest(System.IAsyncResult)\n  id: EndProcessRequest(System.IAsyncResult)\n  parent: System.Web.DefaultHttpHandler\n  langs:\n  - csharp\n  name: EndProcessRequest(IAsyncResult)\n  nameWithType: DefaultHttpHandler.EndProcessRequest(IAsyncResult)\n  fullName: System.Web.DefaultHttpHandler.EndProcessRequest(IAsyncResult)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Provides an end method for an asynchronous process.\n  remarks: You can use the EndProcessRequest method to throw any exceptions that are caught during the asynchronous process.\n  syntax:\n    content: public virtual void EndProcessRequest (IAsyncResult result);\n    parameters:\n    - id: result\n      type: System.IAsyncResult\n      description: An object that contains information about the status of the process.\n  overload: System.Web.DefaultHttpHandler.EndProcessRequest*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.DefaultHttpHandler.ExecuteUrlHeaders\n  id: ExecuteUrlHeaders\n  parent: System.Web.DefaultHttpHandler\n  langs:\n  - csharp\n  name: ExecuteUrlHeaders\n  nameWithType: DefaultHttpHandler.ExecuteUrlHeaders\n  fullName: System.Web.DefaultHttpHandler.ExecuteUrlHeaders\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Gets a collection of request headers and request values to transfer along with the request.\n  remarks: The ExecuteUrlHeaders property returns an empty collection unless it is populated in a class that is derived from the <xref:System.Web.DefaultHttpHandler> class. The headers that are added are appended to the collection of headers in the request before passing the request back to Internet Information Services (IIS).\n  syntax:\n    content: protected System.Collections.Specialized.NameValueCollection ExecuteUrlHeaders { get; }\n    return:\n      type: System.Collections.Specialized.NameValueCollection\n      description: A <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> containing request headers and values.\n  overload: System.Web.DefaultHttpHandler.ExecuteUrlHeaders*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.DefaultHttpHandler.IsReusable\n  id: IsReusable\n  parent: System.Web.DefaultHttpHandler\n  langs:\n  - csharp\n  name: IsReusable\n  nameWithType: DefaultHttpHandler.IsReusable\n  fullName: System.Web.DefaultHttpHandler.IsReusable\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Gets a Boolean value indicating that another request can use the current instance of the <xref href=\"System.Web.DefaultHttpHandler\"></xref> class.\n  remarks: To explicitly set the IsReusable property to `true` or `false`, override the IsReusable property.\n  syntax:\n    content: public virtual bool IsReusable { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Web.DefaultHttpHandler\"></xref> is reusable; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Web.DefaultHttpHandler.IsReusable*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.DefaultHttpHandler.OnExecuteUrlPreconditionFailure\n  id: OnExecuteUrlPreconditionFailure\n  parent: System.Web.DefaultHttpHandler\n  langs:\n  - csharp\n  name: OnExecuteUrlPreconditionFailure()\n  nameWithType: DefaultHttpHandler.OnExecuteUrlPreconditionFailure()\n  fullName: System.Web.DefaultHttpHandler.OnExecuteUrlPreconditionFailure()\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Called when preconditions prevent the <xref href=\"System.Web.DefaultHttpHandler\"></xref> object from processing a request.\n  remarks: \"Preconditions are specified by the client in the request-header fields and are evaluated on the Web server. For example, by using preconditions, clients can prevent a requested method (for example, GET) from being applied to a resource other than the one intended. For more information, see section 14, \\\"Header Field Definitions,\\\" in the [Hypertext Transfer Protocol -- HTTP/1.1](http://go.microsoft.com/fwlink/?LinkID=73147) specification on the World Wide Web Consortium (W3C) Web site.  \\n  \\n The OnExecuteUrlPreconditionFailure method is called when preconditions prevent the <xref:System.Web.DefaultHttpHandler> object from processing a request. A deriving class might override the OnExecuteUrlPreconditionFailure method to throw an exception when the preconditions fail. The <xref:System.Web.DefaultHttpHandler> does not throw an exception in the OnExecuteUrlPreconditionFailure method.  \\n  \\n Any of the following will cause the preconditions to fail:  \\n  \\n-   Calling <xref:System.Web.HttpResponse.Write%2A?displayProperty=fullName>.  \\n  \\n-   Calling <xref:System.Web.HttpResponse.AddHeader%2A?displayProperty=fullName>.  \\n  \\n-   Calling <xref:System.Web.HttpResponse.Flush%2A?displayProperty=fullName>.  \\n  \\n-   Changing the cache policy for the response.  \\n  \\n-   Adding a <xref:System.IO.Stream> object as a filter to the <xref:System.Web.HttpResponse.Filter%2A?displayProperty=fullName> property.\"\n  syntax:\n    content: public virtual void OnExecuteUrlPreconditionFailure ();\n    parameters: []\n  overload: System.Web.DefaultHttpHandler.OnExecuteUrlPreconditionFailure*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.DefaultHttpHandler.OverrideExecuteUrlPath\n  id: OverrideExecuteUrlPath\n  parent: System.Web.DefaultHttpHandler\n  langs:\n  - csharp\n  name: OverrideExecuteUrlPath()\n  nameWithType: DefaultHttpHandler.OverrideExecuteUrlPath()\n  fullName: System.Web.DefaultHttpHandler.OverrideExecuteUrlPath()\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Overrides the target URL for the current request.\n  remarks: \"The OverrideExecuteUrlPath method returns `null` unless it is overridden in a class that is derived from the <xref:System.Web.DefaultHttpHandler> class.  \\n  \\n The OverrideExecuteUrlPath method is called only if ASP.NET is running in worker process isolation mode on IIS 6.0, and if the response was not modified before the <xref:System.Web.DefaultHttpHandler> object was called. The response is modified by any of the following:  \\n  \\n-   Calling <xref:System.Web.HttpResponse.Write%2A?displayProperty=fullName>.  \\n  \\n-   Calling <xref:System.Web.HttpResponse.AddHeader%2A?displayProperty=fullName>.  \\n  \\n-   Calling <xref:System.Web.HttpResponse.Flush%2A?displayProperty=fullName>.  \\n  \\n-   Changing the cache policy for the response.  \\n  \\n-   Adding a <xref:System.IO.Stream> object as a filter to the <xref:System.Web.HttpResponse.Filter%2A?displayProperty=fullName> property.\"\n  syntax:\n    content: public virtual string OverrideExecuteUrlPath ();\n    parameters: []\n    return:\n      type: System.String\n      description: The overridden URL to use in the request; or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if an overridden URL is not provided.\n  overload: System.Web.DefaultHttpHandler.OverrideExecuteUrlPath*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.DefaultHttpHandler.ProcessRequest(System.Web.HttpContext)\n  id: ProcessRequest(System.Web.HttpContext)\n  parent: System.Web.DefaultHttpHandler\n  langs:\n  - csharp\n  name: ProcessRequest(HttpContext)\n  nameWithType: DefaultHttpHandler.ProcessRequest(HttpContext)\n  fullName: System.Web.DefaultHttpHandler.ProcessRequest(HttpContext)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Enables a <xref href=\"System.Web.DefaultHttpHandler\"></xref> object to process of HTTP Web requests.\n  remarks: The ProcessRequest method should not be called synchronously. Classes that are derived from the <xref:System.Web.DefaultHttpHandler> class can override the ProcessRequest to provide customized request processing.\n  syntax:\n    content: public virtual void ProcessRequest (System.Web.HttpContext context);\n    parameters:\n    - id: context\n      type: System.Web.HttpContext\n      description: An object that provides references to intrinsic server objects used to service HTTP requests.\n  overload: System.Web.DefaultHttpHandler.ProcessRequest*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The ProcessRequest is called synchronously.\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Web.HttpException\n  parent: System.Web\n  isExternal: false\n  name: HttpException\n  nameWithType: HttpException\n  fullName: System.Web.HttpException\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.Web.DefaultHttpHandler.#ctor\n  parent: System.Web.DefaultHttpHandler\n  isExternal: false\n  name: DefaultHttpHandler()\n  nameWithType: DefaultHttpHandler.DefaultHttpHandler()\n  fullName: System.Web.DefaultHttpHandler.DefaultHttpHandler()\n- uid: System.Web.DefaultHttpHandler.BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)\n  parent: System.Web.DefaultHttpHandler\n  isExternal: false\n  name: BeginProcessRequest(HttpContext,AsyncCallback,Object)\n  nameWithType: DefaultHttpHandler.BeginProcessRequest(HttpContext,AsyncCallback,Object)\n  fullName: System.Web.DefaultHttpHandler.BeginProcessRequest(HttpContext,AsyncCallback,Object)\n- uid: System.IAsyncResult\n  parent: System\n  isExternal: true\n  name: IAsyncResult\n  nameWithType: IAsyncResult\n  fullName: System.IAsyncResult\n- uid: System.Web.HttpContext\n  parent: System.Web\n  isExternal: false\n  name: HttpContext\n  nameWithType: HttpContext\n  fullName: System.Web.HttpContext\n- uid: System.AsyncCallback\n  parent: System\n  isExternal: true\n  name: AsyncCallback\n  nameWithType: AsyncCallback\n  fullName: System.AsyncCallback\n- uid: System.Web.DefaultHttpHandler.Context\n  parent: System.Web.DefaultHttpHandler\n  isExternal: false\n  name: Context\n  nameWithType: DefaultHttpHandler.Context\n  fullName: System.Web.DefaultHttpHandler.Context\n- uid: System.Web.DefaultHttpHandler.EndProcessRequest(System.IAsyncResult)\n  parent: System.Web.DefaultHttpHandler\n  isExternal: false\n  name: EndProcessRequest(IAsyncResult)\n  nameWithType: DefaultHttpHandler.EndProcessRequest(IAsyncResult)\n  fullName: System.Web.DefaultHttpHandler.EndProcessRequest(IAsyncResult)\n- uid: System.Web.DefaultHttpHandler.ExecuteUrlHeaders\n  parent: System.Web.DefaultHttpHandler\n  isExternal: false\n  name: ExecuteUrlHeaders\n  nameWithType: DefaultHttpHandler.ExecuteUrlHeaders\n  fullName: System.Web.DefaultHttpHandler.ExecuteUrlHeaders\n- uid: System.Collections.Specialized.NameValueCollection\n  parent: System.Collections.Specialized\n  isExternal: false\n  name: NameValueCollection\n  nameWithType: NameValueCollection\n  fullName: System.Collections.Specialized.NameValueCollection\n- uid: System.Web.DefaultHttpHandler.IsReusable\n  parent: System.Web.DefaultHttpHandler\n  isExternal: false\n  name: IsReusable\n  nameWithType: DefaultHttpHandler.IsReusable\n  fullName: System.Web.DefaultHttpHandler.IsReusable\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Web.DefaultHttpHandler.OnExecuteUrlPreconditionFailure\n  parent: System.Web.DefaultHttpHandler\n  isExternal: false\n  name: OnExecuteUrlPreconditionFailure()\n  nameWithType: DefaultHttpHandler.OnExecuteUrlPreconditionFailure()\n  fullName: System.Web.DefaultHttpHandler.OnExecuteUrlPreconditionFailure()\n- uid: System.Web.DefaultHttpHandler.OverrideExecuteUrlPath\n  parent: System.Web.DefaultHttpHandler\n  isExternal: false\n  name: OverrideExecuteUrlPath()\n  nameWithType: DefaultHttpHandler.OverrideExecuteUrlPath()\n  fullName: System.Web.DefaultHttpHandler.OverrideExecuteUrlPath()\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Web.DefaultHttpHandler.ProcessRequest(System.Web.HttpContext)\n  parent: System.Web.DefaultHttpHandler\n  isExternal: false\n  name: ProcessRequest(HttpContext)\n  nameWithType: DefaultHttpHandler.ProcessRequest(HttpContext)\n  fullName: System.Web.DefaultHttpHandler.ProcessRequest(HttpContext)\n- uid: System.Web.DefaultHttpHandler.#ctor*\n  parent: System.Web.DefaultHttpHandler\n  isExternal: false\n  name: DefaultHttpHandler\n  nameWithType: DefaultHttpHandler.DefaultHttpHandler\n- uid: System.Web.DefaultHttpHandler.BeginProcessRequest*\n  parent: System.Web.DefaultHttpHandler\n  isExternal: false\n  name: BeginProcessRequest\n  nameWithType: DefaultHttpHandler.BeginProcessRequest\n- uid: System.Web.DefaultHttpHandler.Context*\n  parent: System.Web.DefaultHttpHandler\n  isExternal: false\n  name: Context\n  nameWithType: DefaultHttpHandler.Context\n- uid: System.Web.DefaultHttpHandler.EndProcessRequest*\n  parent: System.Web.DefaultHttpHandler\n  isExternal: false\n  name: EndProcessRequest\n  nameWithType: DefaultHttpHandler.EndProcessRequest\n- uid: System.Web.DefaultHttpHandler.ExecuteUrlHeaders*\n  parent: System.Web.DefaultHttpHandler\n  isExternal: false\n  name: ExecuteUrlHeaders\n  nameWithType: DefaultHttpHandler.ExecuteUrlHeaders\n- uid: System.Web.DefaultHttpHandler.IsReusable*\n  parent: System.Web.DefaultHttpHandler\n  isExternal: false\n  name: IsReusable\n  nameWithType: DefaultHttpHandler.IsReusable\n- uid: System.Web.DefaultHttpHandler.OnExecuteUrlPreconditionFailure*\n  parent: System.Web.DefaultHttpHandler\n  isExternal: false\n  name: OnExecuteUrlPreconditionFailure\n  nameWithType: DefaultHttpHandler.OnExecuteUrlPreconditionFailure\n- uid: System.Web.DefaultHttpHandler.OverrideExecuteUrlPath*\n  parent: System.Web.DefaultHttpHandler\n  isExternal: false\n  name: OverrideExecuteUrlPath\n  nameWithType: DefaultHttpHandler.OverrideExecuteUrlPath\n- uid: System.Web.DefaultHttpHandler.ProcessRequest*\n  parent: System.Web.DefaultHttpHandler\n  isExternal: false\n  name: ProcessRequest\n  nameWithType: DefaultHttpHandler.ProcessRequest\n"}