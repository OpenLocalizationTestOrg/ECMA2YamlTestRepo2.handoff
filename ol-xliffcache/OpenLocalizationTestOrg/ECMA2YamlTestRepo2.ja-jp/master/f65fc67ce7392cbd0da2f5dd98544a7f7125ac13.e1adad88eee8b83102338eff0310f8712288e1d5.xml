{"nodes":[{"pos":[325,461],"content":"Provides functionality for nested containers, which logically contain zero or more other components and are owned by a parent component.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides functionality for nested containers, which logically contain zero or more other components and are owned by a parent component.","pos":[0,136]}]},{"pos":[474,1944],"content":"The INestedContainer interface adds the concept of an owning component to the <xref:System.ComponentModel.IContainer> interface. A nested container is an object that logically, but not necessarily visually, contains zero or more child components and is owned by some parent component. For visual containment, the owning component is often another container.       Nested containers allow sections of a control to be designable, without requiring an explicit serialized member variable or a custom serializer for each subcontrol. Instead, the form designer maintains one master container of components. Each component’s site may have a nested container that provides a place to put extra components. When a component is sited in a nested container, the name it receives is a combination of its given name and its owning component’s name. Additionally, components added to a nested container have full access to the services of the parent container, and the nested container provides the same behavior of the parent with respect to adding new components. The nested container will create the designer for each component it contains, thereby enabling design-time support. Because standard code serializers do not look at nested containers, these components are only serialized if a path to them can be obtained by walking the components in the primary container.       Nested containers can be found by querying a component's site for services of type INestedContainer.","needQuote":false,"needEscape":true,"nodes":[{"content":"The INestedContainer interface adds the concept of an owning component to the <xref:System.ComponentModel.IContainer> interface. A nested container is an object that logically, but not necessarily visually, contains zero or more child components and is owned by some parent component. For visual containment, the owning component is often another container.       Nested containers allow sections of a control to be designable, without requiring an explicit serialized member variable or a custom serializer for each subcontrol. Instead, the form designer maintains one master container of components. Each component’s site may have a nested container that provides a place to put extra components. When a component is sited in a nested container, the name it receives is a combination of its given name and its owning component’s name. Additionally, components added to a nested container have full access to the services of the parent container, and the nested container provides the same behavior of the parent with respect to adding new components. The nested container will create the designer for each component it contains, thereby enabling design-time support. Because standard code serializers do not look at nested containers, these components are only serialized if a path to them can be obtained by walking the components in the primary container.       Nested containers can be found by querying a component's site for services of type INestedContainer.","pos":[0,1466],"nodes":[{"content":"The INestedContainer interface adds the concept of an owning component to the &lt;xref:System.ComponentModel.IContainer&gt; interface.","pos":[0,128],"source":"The INestedContainer interface adds the concept of an owning component to the <xref:System.ComponentModel.IContainer> interface."},{"content":"A nested container is an object that logically, but not necessarily visually, contains zero or more child components and is owned by some parent component.","pos":[129,284]},{"content":"For visual containment, the owning component is often another container.","pos":[285,357]},{"content":"Nested containers allow sections of a control to be designable, without requiring an explicit serialized member variable or a custom serializer for each subcontrol.","pos":[364,528]},{"content":"Instead, the form designer maintains one master container of components.","pos":[529,601]},{"content":"Each component’s site may have a nested container that provides a place to put extra components.","pos":[602,698]},{"content":"When a component is sited in a nested container, the name it receives is a combination of its given name and its owning component’s name.","pos":[699,836]},{"content":"Additionally, components added to a nested container have full access to the services of the parent container, and the nested container provides the same behavior of the parent with respect to adding new components.","pos":[837,1052]},{"content":"The nested container will create the designer for each component it contains, thereby enabling design-time support.","pos":[1053,1168]},{"content":"Because standard code serializers do not look at nested containers, these components are only serialized if a path to them can be obtained by walking the components in the primary container.","pos":[1169,1359]},{"content":"Nested containers can be found by querying a component's site for services of type INestedContainer.","pos":[1366,1466]}]}]},{"pos":[2481,2532],"content":"Gets the owning component for the nested container.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the owning component for the nested container.","pos":[0,51]}]},{"pos":[2544,2650],"content":"The owning component is the characteristic that differentiates nested containers from ordinary containers.","needQuote":true,"needEscape":true,"nodes":[{"content":"The owning component is the characteristic that differentiates nested containers from ordinary containers.","pos":[0,106]}]},{"pos":[2805,2894],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.IComponent\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that owns the nested container.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.ComponentModel.IComponent\"></xref> that owns the nested container."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ComponentModel.INestedContainer\n  id: INestedContainer\n  children:\n  - System.ComponentModel.INestedContainer.Owner\n  langs:\n  - csharp\n  name: INestedContainer\n  nameWithType: INestedContainer\n  fullName: System.ComponentModel.INestedContainer\n  type: Interface\n  summary: Provides functionality for nested containers, which logically contain zero or more other components and are owned by a parent component.\n  remarks: \"The INestedContainer interface adds the concept of an owning component to the <xref:System.ComponentModel.IContainer> interface. A nested container is an object that logically, but not necessarily visually, contains zero or more child components and is owned by some parent component. For visual containment, the owning component is often another container.  \\n  \\n Nested containers allow sections of a control to be designable, without requiring an explicit serialized member variable or a custom serializer for each subcontrol. Instead, the form designer maintains one master container of components. Each component’s site may have a nested container that provides a place to put extra components. When a component is sited in a nested container, the name it receives is a combination of its given name and its owning component’s name. Additionally, components added to a nested container have full access to the services of the parent container, and the nested container provides the same behavior of the parent with respect to adding new components. The nested container will create the designer for each component it contains, thereby enabling design-time support. Because standard code serializers do not look at nested containers, these components are only serialized if a path to them can be obtained by walking the components in the primary container.  \\n  \\n Nested containers can be found by querying a component's site for services of type INestedContainer.\"\n  syntax:\n    content: 'public interface INestedContainer : IDisposable, System.ComponentModel.IContainer'\n  implements:\n  - System.ComponentModel.IContainer\n  - System.IDisposable\n  platform:\n  - net462\n- uid: System.ComponentModel.INestedContainer.Owner\n  id: Owner\n  parent: System.ComponentModel.INestedContainer\n  langs:\n  - csharp\n  name: Owner\n  nameWithType: INestedContainer.Owner\n  fullName: System.ComponentModel.INestedContainer.Owner\n  type: Property\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Gets the owning component for the nested container.\n  remarks: The owning component is the characteristic that differentiates nested containers from ordinary containers.\n  syntax:\n    content: public System.ComponentModel.IComponent Owner { get; }\n    return:\n      type: System.ComponentModel.IComponent\n      description: The <xref href=\"System.ComponentModel.IComponent\"></xref> that owns the nested container.\n  overload: System.ComponentModel.INestedContainer.Owner*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.ComponentModel.INestedContainer.Owner\n  parent: System.ComponentModel.INestedContainer\n  isExternal: false\n  name: Owner\n  nameWithType: INestedContainer.Owner\n  fullName: System.ComponentModel.INestedContainer.Owner\n- uid: System.ComponentModel.IComponent\n  parent: System.ComponentModel\n  isExternal: false\n  name: IComponent\n  nameWithType: IComponent\n  fullName: System.ComponentModel.IComponent\n- uid: System.ComponentModel.INestedContainer.Owner*\n  parent: System.ComponentModel.INestedContainer\n  isExternal: false\n  name: Owner\n  nameWithType: INestedContainer.Owner\n"}