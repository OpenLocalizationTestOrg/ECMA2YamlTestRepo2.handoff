{"nodes":[{"pos":[2753,2839],"content":"Represents the base class from which all implementations of the RSA algorithm inherit.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the base class from which all implementations of the RSA algorithm inherit.","pos":[0,86]}]},{"pos":[2852,3458],"content":"Extending this class proves that you are implementing an `RSA` key. This is required for any developer providing a new `RSA` key implementation.       The only purpose of this class is as a hierarchy member for identification of the `RSA` algorithm.       The <xref:System.Security.Cryptography.RSACryptoServiceProvider> supports key lengths from 384 bits to 16384 bits in increments of 8 bits if you have the Microsoft Enhanced Cryptographic Provider installed.  It supports key lengths from 384 bits to 512 bits in increments of 8 bits if you have the Microsoft Base Cryptographic Provider installed.","needQuote":false,"needEscape":true,"nodes":[{"content":"Extending this class proves that you are implementing an <ph id=\"ph1\">`RSA`</ph> key.","pos":[0,67],"source":"Extending this class proves that you are implementing an `RSA` key."},{"content":"This is required for any developer providing a new <ph id=\"ph1\">`RSA`</ph> key implementation.","pos":[68,144],"source":" This is required for any developer providing a new `RSA` key implementation."},{"content":"The only purpose of this class is as a hierarchy member for identification of the <ph id=\"ph1\">`RSA`</ph> algorithm.","pos":[151,249],"source":"       The only purpose of this class is as a hierarchy member for identification of the `RSA` algorithm."},{"content":"The &lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt; supports key lengths from 384 bits to 16384 bits in increments of 8 bits if you have the Microsoft Enhanced Cryptographic Provider installed.","pos":[256,462],"source":"       The <xref:System.Security.Cryptography.RSACryptoServiceProvider> supports key lengths from 384 bits to 16384 bits in increments of 8 bits if you have the Microsoft Enhanced Cryptographic Provider installed."},{"content":"It supports key lengths from 384 bits to 512 bits in increments of 8 bits if you have the Microsoft Base Cryptographic Provider installed.","pos":[464,602]}]},{"pos":[4549,4643],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.RSA\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.RSA\"></xref> class."},{"pos":[4655,4824],"content":"This is a protected method that can only be called from a class derived from <xref:System.Security.Cryptography.RSA>. You cannot create an instance of an abstract class.","needQuote":true,"needEscape":true,"nodes":[{"content":"This is a protected method that can only be called from a class derived from <xref:System.Security.Cryptography.RSA>. You cannot create an instance of an abstract class.","pos":[0,169],"nodes":[{"content":"This is a protected method that can only be called from a class derived from &lt;xref:System.Security.Cryptography.RSA&gt;.","pos":[0,117],"source":"This is a protected method that can only be called from a class derived from <xref:System.Security.Cryptography.RSA>."},{"content":"You cannot create an instance of an abstract class.","pos":[118,169]}]}]},{"pos":[5295,5416],"content":"Creates an instance of the default implementation of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.RSA\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> algorithm.","needQuote":true,"needEscape":true,"source":"Creates an instance of the default implementation of the <xref href=\"System.Security.Cryptography.RSA\"></xref> algorithm."},{"pos":[5593,5695],"content":"A new instance of the default implementation of <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.RSA\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A new instance of the default implementation of <xref href=\"System.Security.Cryptography.RSA\"></xref>."},{"pos":[6155,6264],"content":"Creates an instance of the specified implementation of <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.RSA\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Creates an instance of the specified implementation of <xref href=\"System.Security.Cryptography.RSA\"></xref>."},{"pos":[6439,6534],"content":"The name of the implementation of <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.RSA\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to use.","needQuote":true,"needEscape":true,"source":"The name of the implementation of <xref href=\"System.Security.Cryptography.RSA\"></xref> to use."},{"pos":[6611,6715],"content":"A new instance of the specified implementation of <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.RSA\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A new instance of the specified implementation of <xref href=\"System.Security.Cryptography.RSA\"></xref>."},{"pos":[7343,7436],"content":"When overridden in a derived class, decrypts the input data using the specified padding mode.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, decrypts the input data using the specified padding mode.","pos":[0,93]}]},{"pos":[7640,7660],"content":"The data to decrypt.","needQuote":true,"needEscape":true,"nodes":[{"content":"The data to decrypt.","pos":[0,20]}]},{"pos":[7760,7777],"content":"The padding mode.","needQuote":true,"needEscape":true,"nodes":[{"content":"The padding mode.","pos":[0,17]}]},{"pos":[7835,7854],"content":"The decrypted data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The decrypted data.","pos":[0,19]}]},{"pos":[8029,8071],"content":"A derived class must override this method.","needQuote":true,"needEscape":true,"nodes":[{"content":"A derived class must override this method.","pos":[0,42]}]},{"pos":[8491,8573],"content":"When overridden in a derived class, decrypts the input data using the private key.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, decrypts the input data using the private key.","pos":[0,82]}]},{"pos":[8585,8931],"content":"In the [!INCLUDE[net_v452](~/add/includes/net-v452-md.md)] and earlier versions of the .NET Framework, this method was `abstract`. However, the only implementation by a derived class, <xref:System.Security.Cryptography.RSACryptoServiceProvider.DecryptValue%2A?displayProperty=fullName>, also threw a <xref:System.NotSupportedException> exception.","needQuote":true,"needEscape":true,"nodes":[{"content":"In the <ph id=\"ph1\">[!INCLUDE[net_v452](~/add/includes/net-v452-md.md)]</ph> and earlier versions of the .NET Framework, this method was <ph id=\"ph2\">`abstract`</ph>.","pos":[0,130],"source":"In the [!INCLUDE[net_v452](~/add/includes/net-v452-md.md)] and earlier versions of the .NET Framework, this method was `abstract`."},{"content":"However, the only implementation by a derived class, &lt;xref:System.Security.Cryptography.RSACryptoServiceProvider.DecryptValue%2A?displayProperty=fullName&gt;, also threw a &lt;xref:System.NotSupportedException&gt; exception.","pos":[131,346],"source":" However, the only implementation by a derived class, <xref:System.Security.Cryptography.RSACryptoServiceProvider.DecryptValue%2A?displayProperty=fullName>, also threw a <xref:System.NotSupportedException> exception."}]},{"pos":[9079,9111],"content":"The cipher text to be decrypted.","needQuote":true,"needEscape":true,"nodes":[{"content":"The cipher text to be decrypted.","pos":[0,32]}]},{"pos":[9169,9242],"content":"The resulting decryption of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">rgb</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter in plain text.","needQuote":true,"needEscape":true,"source":"The resulting decryption of the <code>rgb</code> parameter in plain text."},{"pos":[9418,9546],"content":"This method call is not supported. This exception is thrown starting with the [!INCLUDE[net_v46](~/add/includes/net-v46-md.md)].","needQuote":true,"needEscape":true,"nodes":[{"content":"This method call is not supported.","pos":[0,34]},{"content":"This exception is thrown starting with the <ph id=\"ph1\">[!INCLUDE[net_v46](~/add/includes/net-v46-md.md)]</ph>.","pos":[35,128],"source":" This exception is thrown starting with the [!INCLUDE[net_v46](~/add/includes/net-v46-md.md)]."}]},{"pos":[10104,10197],"content":"When overridden in a derived class, encrypts the input data using the specified padding mode.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, encrypts the input data using the specified padding mode.","pos":[0,93]}]},{"pos":[10401,10421],"content":"The data to encrypt.","needQuote":true,"needEscape":true,"nodes":[{"content":"The data to encrypt.","pos":[0,20]}]},{"pos":[10521,10538],"content":"The padding mode.","needQuote":true,"needEscape":true,"nodes":[{"content":"The padding mode.","pos":[0,17]}]},{"pos":[10596,10615],"content":"The encrypted data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The encrypted data.","pos":[0,19]}]},{"pos":[10790,10832],"content":"A derived class must override this method.","needQuote":true,"needEscape":true,"nodes":[{"content":"A derived class must override this method.","pos":[0,42]}]},{"pos":[11252,11333],"content":"When overridden in a derived class, encrypts the input data using the public key.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, encrypts the input data using the public key.","pos":[0,81]}]},{"pos":[11345,11691],"content":"In the [!INCLUDE[net_v452](~/add/includes/net-v452-md.md)] and earlier versions of the .NET Framework, this method was `abstract`. However, the only implementation by a derived class, <xref:System.Security.Cryptography.RSACryptoServiceProvider.DecryptValue%2A?displayProperty=fullName>, also threw a <xref:System.NotSupportedException> exception.","needQuote":true,"needEscape":true,"nodes":[{"content":"In the <ph id=\"ph1\">[!INCLUDE[net_v452](~/add/includes/net-v452-md.md)]</ph> and earlier versions of the .NET Framework, this method was <ph id=\"ph2\">`abstract`</ph>.","pos":[0,130],"source":"In the [!INCLUDE[net_v452](~/add/includes/net-v452-md.md)] and earlier versions of the .NET Framework, this method was `abstract`."},{"content":"However, the only implementation by a derived class, &lt;xref:System.Security.Cryptography.RSACryptoServiceProvider.DecryptValue%2A?displayProperty=fullName&gt;, also threw a &lt;xref:System.NotSupportedException&gt; exception.","pos":[131,346],"source":" However, the only implementation by a derived class, <xref:System.Security.Cryptography.RSACryptoServiceProvider.DecryptValue%2A?displayProperty=fullName>, also threw a <xref:System.NotSupportedException> exception."}]},{"pos":[11839,11870],"content":"The plain text to be encrypted.","needQuote":true,"needEscape":true,"nodes":[{"content":"The plain text to be encrypted.","pos":[0,31]}]},{"pos":[11928,12002],"content":"The resulting encryption of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">rgb</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter as cipher text.","needQuote":true,"needEscape":true,"source":"The resulting encryption of the <code>rgb</code> parameter as cipher text."},{"pos":[12178,12306],"content":"This method call is not supported. This exception is thrown starting with the [!INCLUDE[net_v46](~/add/includes/net-v46-md.md)].","needQuote":true,"needEscape":true,"nodes":[{"content":"This method call is not supported.","pos":[0,34]},{"content":"This exception is thrown starting with the <ph id=\"ph1\">[!INCLUDE[net_v46](~/add/includes/net-v46-md.md)]</ph>.","pos":[35,128],"source":" This exception is thrown starting with the [!INCLUDE[net_v46](~/add/includes/net-v46-md.md)]."}]},{"pos":[12751,12863],"content":"When overridden in a derived class, exports the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.RSAParameters\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"When overridden in a derived class, exports the <xref href=\"System.Security.Cryptography.RSAParameters\"></xref>."},{"pos":[13093,13259],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to include private parameters; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to include private parameters; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[13346,13419],"content":"The parameters for <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.DSA\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The parameters for <xref href=\"System.Security.Cryptography.DSA\"></xref>."},{"pos":[13924,14044],"content":"Initializes an <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.RSA\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object from the key information from an XML string.","needQuote":true,"needEscape":true,"source":"Initializes an <xref href=\"System.Security.Cryptography.RSA\"></xref> object from the key information from an XML string."},{"pos":[14057,14943],"content":"The FromXmlString initializes an RSA object using key information in an XML string that was generated using the <xref:System.Security.Cryptography.RSA.ToXmlString%2A> method.  The FromXmlString method accepts either an XML string containing a public key or an XML string containing a public and private key.       Use the FromXmlString method to conveniently initialize <xref:System.Security.Cryptography.RSA> key information.      > [!CAUTION] >  Persisting an XML string containing a private key to an insecure location is a security threat.  The security of your application can be compromised if a malicious third party can access your private key.  To safely persist a private key, use a secure key container.  For more information about persisting private keys in a key container, see [How to: Store Asymmetric Keys in a Key Container](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"The FromXmlString initializes an RSA object using key information in an XML string that was generated using the &lt;xref:System.Security.Cryptography.RSA.ToXmlString%2A&gt; method.","pos":[0,174],"source":"The FromXmlString initializes an RSA object using key information in an XML string that was generated using the <xref:System.Security.Cryptography.RSA.ToXmlString%2A> method."},{"content":"The FromXmlString method accepts either an XML string containing a public key or an XML string containing a public and private key.","pos":[176,307]},{"content":"Use the FromXmlString method to conveniently initialize &lt;xref:System.Security.Cryptography.RSA&gt; key information.","pos":[314,426],"source":"       Use the FromXmlString method to conveniently initialize <xref:System.Security.Cryptography.RSA> key information."},{"content":"&gt; <ph id=\"ph1\">[!CAUTION]</ph> &gt;  Persisting an XML string containing a private key to an insecure location is a security threat.","pos":[432,543],"source":"      > [!CAUTION] >  Persisting an XML string containing a private key to an insecure location is a security threat."},{"content":"The security of your application can be compromised if a malicious third party can access your private key.","pos":[545,652]},{"content":"To safely persist a private key, use a secure key container.","pos":[654,714]},{"content":"For more information about persisting private keys in a key container, see <bpt id=\"p1\">[</bpt>How to: Store Asymmetric Keys in a Key Container<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[716,881],"source":"  For more information about persisting private keys in a key container, see [How to: Store Asymmetric Keys in a Key Container](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[15104,15200],"content":"The XML string containing <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.RSA\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> key information.","needQuote":true,"needEscape":true,"source":"The XML string containing <xref href=\"System.Security.Cryptography.RSA\"></xref> key information."},{"pos":[15377,15478],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">xmlString</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>xmlString</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[15627,15691],"content":"The format of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">xmlString</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not valid.","needQuote":true,"needEscape":true,"source":"The format of the <code>xmlString</code> parameter is not valid."},{"pos":[16245,16373],"content":"When overridden in a derived class, computes the hash value of a specified binary stream by using a specified hashing algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, computes the hash value of a specified binary stream by using a specified hashing algorithm.","pos":[0,128]}]},{"pos":[16597,16623],"content":"The binary stream to hash.","needQuote":true,"needEscape":true,"nodes":[{"content":"The binary stream to hash.","pos":[0,26]}]},{"pos":[16726,16745],"content":"The hash algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"The hash algorithm.","pos":[0,19]}]},{"pos":[16803,16819],"content":"The hashed data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The hashed data.","pos":[0,16]}]},{"pos":[16995,17037],"content":"A derived class must override this method.","needQuote":true,"needEscape":true,"nodes":[{"content":"A derived class must override this method.","pos":[0,42]}]},{"pos":[17673,17811],"content":"When overridden in a derived class, computes the hash value of a specified portion of a byte array by using a specified hashing algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, computes the hash value of a specified portion of a byte array by using a specified hashing algorithm.","pos":[0,138]}]},{"pos":[18045,18067],"content":"The data to be hashed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The data to be hashed.","pos":[0,22]}]},{"pos":[18129,18188],"content":"The index of the first byte in <ph id=\"ph1\">`data`</ph> that is to be hashed.","needQuote":true,"needEscape":true,"source":"The index of the first byte in `data` that is to be hashed."},{"pos":[18249,18277],"content":"The number of bytes to hash.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes to hash.","pos":[0,28]}]},{"pos":[18380,18418],"content":"The algorithm to use in hash the data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The algorithm to use in hash the data.","pos":[0,38]}]},{"pos":[18476,18492],"content":"The hashed data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The hashed data.","pos":[0,16]}]},{"pos":[18668,18710],"content":"A derived class must override this method.","needQuote":true,"needEscape":true,"nodes":[{"content":"A derived class must override this method.","pos":[0,42]}]},{"pos":[19229,19351],"content":"When overridden in a derived class, imports the specified <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.RSAParameters\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"When overridden in a derived class, imports the specified <xref href=\"System.Security.Cryptography.RSAParameters\"></xref>."},{"pos":[19581,19654],"content":"The parameters for <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.RSA\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The parameters for <xref href=\"System.Security.Cryptography.RSA\"></xref>."},{"pos":[20142,20278],"content":"Gets the name of the key exchange algorithm available with this implementation of <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.RSA\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets the name of the key exchange algorithm available with this implementation of <xref href=\"System.Security.Cryptography.RSA\"></xref>."},{"pos":[20412,20426],"content":"Returns \"RSA\".","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns \"RSA\".","pos":[0,14]}]},{"pos":[20908,21041],"content":"Gets the name of the signature algorithm available with this implementation of <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.RSA\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets the name of the signature algorithm available with this implementation of <xref href=\"System.Security.Cryptography.RSA\"></xref>."},{"pos":[21173,21187],"content":"Returns \"RSA\".","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns \"RSA\".","pos":[0,14]}]},{"pos":[21975,22115],"content":"Computes the hash value of the specified byte array using the specified hash algorithm and padding mode, and signs the resulting hash value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Computes the hash value of the specified byte array using the specified hash algorithm and padding mode, and signs the resulting hash value.","pos":[0,140]}]},{"pos":[22373,22418],"content":"The input data for which to compute the hash.","needQuote":true,"needEscape":true,"nodes":[{"content":"The input data for which to compute the hash.","pos":[0,45]}]},{"pos":[22521,22572],"content":"The hash algorithm to use to create the hash value.","needQuote":true,"needEscape":true,"nodes":[{"content":"The hash algorithm to use to create the hash value.","pos":[0,51]}]},{"pos":[22671,22688],"content":"The padding mode.","needQuote":true,"needEscape":true,"nodes":[{"content":"The padding mode.","pos":[0,17]}]},{"pos":[22746,22787],"content":"The RSA signature for the specified data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The RSA signature for the specified data.","pos":[0,41]}]},{"pos":[22960,23161],"content":"<code>data</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>padding</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;data&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,82],"source":"<code>data</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;padding&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[89,185],"source":"       -or-       <code>padding</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[23257,23469],"content":"<code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or &lt;xref:System.String.Empty?displayProperty=fullName&gt;.","needQuote":true,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;hashAlgorithm&lt;/code&gt;</ph>.<ph id=\"ph2\">&lt;xref:System.Security.Cryptography.HashAlgorithmName.Name*&gt;</ph>","pos":[0,86],"source":"<code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*>"},{"content":"is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or <ph id=\"ph1\">&amp;lt;</ph>xref:System.String.Empty?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>.","pos":[87,212],"source":" is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or &lt;xref:System.String.Empty?displayProperty=fullName&gt;."}]},{"pos":[24181,24317],"content":"Computes the hash value of the specified stream using the specified hash algorithm and padding mode, and signs the resulting hash value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Computes the hash value of the specified stream using the specified hash algorithm and padding mode, and signs the resulting hash value.","pos":[0,136]}]},{"pos":[24596,24643],"content":"The input stream for which to compute the hash.","needQuote":true,"needEscape":true,"nodes":[{"content":"The input stream for which to compute the hash.","pos":[0,47]}]},{"pos":[24746,24797],"content":"The hash algorithm to use to create the hash value.","needQuote":true,"needEscape":true,"nodes":[{"content":"The hash algorithm to use to create the hash value.","pos":[0,51]}]},{"pos":[24896,24913],"content":"The padding mode.","needQuote":true,"needEscape":true,"nodes":[{"content":"The padding mode.","pos":[0,17]}]},{"pos":[24971,25012],"content":"The RSA signature for the specified data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The RSA signature for the specified data.","pos":[0,41]}]},{"pos":[25185,25386],"content":"<code>data</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>padding</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;data&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,82],"source":"<code>data</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;padding&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[89,185],"source":"       -or-       <code>padding</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[25482,25694],"content":"<code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or &lt;xref:System.String.Empty?displayProperty=fullName&gt;.","needQuote":true,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;hashAlgorithm&lt;/code&gt;</ph>.<ph id=\"ph2\">&lt;xref:System.Security.Cryptography.HashAlgorithmName.Name*&gt;</ph>","pos":[0,86],"source":"<code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*>"},{"content":"is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or <ph id=\"ph1\">&amp;lt;</ph>xref:System.String.Empty?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>.","pos":[87,212],"source":" is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or &lt;xref:System.String.Empty?displayProperty=fullName&gt;."}]},{"pos":[26488,26641],"content":"Computes the hash value of a portion of the specified byte array using the specified hash algorithm and padding mode, and signs the resulting hash value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Computes the hash value of a portion of the specified byte array using the specified hash algorithm and padding mode, and signs the resulting hash value.","pos":[0,153]}]},{"pos":[26930,26975],"content":"The input data for which to compute the hash.","needQuote":true,"needEscape":true,"nodes":[{"content":"The input data for which to compute the hash.","pos":[0,45]}]},{"pos":[27037,27092],"content":"The offset into the array at which to begin using data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The offset into the array at which to begin using data.","pos":[0,55]}]},{"pos":[27153,27201],"content":"The number of bytes in the array to use as data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes in the array to use as data.","pos":[0,48]}]},{"pos":[27304,27355],"content":"The hash algorithm to use to create the hash value.","needQuote":true,"needEscape":true,"nodes":[{"content":"The hash algorithm to use to create the hash value.","pos":[0,51]}]},{"pos":[27454,27471],"content":"The padding mode.","needQuote":true,"needEscape":true,"nodes":[{"content":"The padding mode.","pos":[0,17]}]},{"pos":[27529,27570],"content":"The RSA signature for the specified data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The RSA signature for the specified data.","pos":[0,41]}]},{"pos":[27743,27944],"content":"<code>data</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>padding</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;data&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,82],"source":"<code>data</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;padding&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[89,185],"source":"       -or-       <code>padding</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[28040,28252],"content":"<code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or &lt;xref:System.String.Empty?displayProperty=fullName&gt;.","needQuote":true,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;hashAlgorithm&lt;/code&gt;</ph>.<ph id=\"ph2\">&lt;xref:System.Security.Cryptography.HashAlgorithmName.Name*&gt;</ph>","pos":[0,86],"source":"<code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*>"},{"content":"is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or <ph id=\"ph1\">&amp;lt;</ph>xref:System.String.Empty?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>.","pos":[87,212],"source":" is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or &lt;xref:System.String.Empty?displayProperty=fullName&gt;."}]},{"pos":[28368,28604],"content":"<code>offset</code> is less than zero.       -or-       <code>count</code> is less than zero.       -or-       <code>offset</code> + <code>count</code> – 1 results in an index that is beyond the upper bound of <code>data</code>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph> is less than zero.","pos":[0,38],"source":"<code>offset</code> is less than zero."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.","pos":[45,93],"source":"       -or-       <code>count</code> is less than zero."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph><ph id=\"ph2\"> + &lt;code&gt;count&lt;/code&gt;</ph> – 1 results in an index that is beyond the upper bound of <ph id=\"ph3\">&lt;code&gt;data&lt;/code&gt;</ph>.","pos":[100,228],"source":"       -or-       <code>offset</code> + <code>count</code> – 1 results in an index that is beyond the upper bound of <code>data</code>."}]},{"pos":[29311,29465],"content":"When overridden in a derived class, computes the signature for the specified hash value by encrypting it with the private key using the specified padding.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, computes the signature for the specified hash value by encrypting it with the private key using the specified padding.","pos":[0,154]}]},{"pos":[29731,29771],"content":"The hash value of the data to be signed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The hash value of the data to be signed.","pos":[0,40]}]},{"pos":[29874,29935],"content":"The hash algorithm used to create the hash value of the data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The hash algorithm used to create the hash value of the data.","pos":[0,61]}]},{"pos":[30034,30046],"content":"The padding.","needQuote":true,"needEscape":true,"nodes":[{"content":"The padding.","pos":[0,12]}]},{"pos":[30104,30151],"content":"The RSA signature for the specified hash value.","needQuote":true,"needEscape":true,"nodes":[{"content":"The RSA signature for the specified hash value.","pos":[0,47]}]},{"pos":[30327,30369],"content":"A derived class must override this method.","needQuote":true,"needEscape":true,"nodes":[{"content":"A derived class must override this method.","pos":[0,42]}]},{"pos":[30789,30918],"content":"Creates and returns an XML string containing the key of the current <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.RSA\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Creates and returns an XML string containing the key of the current <xref href=\"System.Security.Cryptography.RSA\"></xref> object."},{"pos":[30931,32446],"content":"The ToXmlString method creates an XML string that contains either the public and private key of the current <xref:System.Security.Cryptography.RSA> object or contains only the public key of the current <xref:System.Security.Cryptography.RSA> object.       Use the ToXmlString method whenever you need to conveniently persist RSA key information.  To initialize an <xref:System.Security.Cryptography.RSA> object with the key in an XML string, use the <xref:System.Security.Cryptography.RSA.FromXmlString%2A> method.      > [!CAUTION] >  Persisting an XML string containing a private key to an insecure location is a security threat.  The security of your application can be compromised if a malicious third party can access your private key.  To safely persist a private key, use a secure key container.  For more information about persisting private keys in a key container, see [How to: Store Asymmetric Keys in a Key Container](~/add/includes/ajax-current-ext-md.md).       When you pass `true` to the ToXmlString method, the resulting XML string takes the following form:      ```   <RSAKeyValue>      <Modulus>…</Modulus>      <Exponent>…</Exponent>      <P>…</P>      <Q>…</Q>      <DP>…</DP>      <DQ>…</DQ>      <InverseQ>…</InverseQ>      <D>…</D>   </RSAKeyValue>   ```       When you pass `false` to the ToXmlString method, the resulting XML string takes the following form:      ```   <RSAKeyValue>      <Modulus>…</Modulus>      <Exponent>…</Exponent>   </RSAKeyValue>   ```","needQuote":false,"needEscape":true,"nodes":[{"content":"The ToXmlString method creates an XML string that contains either the public and private key of the current &lt;xref:System.Security.Cryptography.RSA&gt; object or contains only the public key of the current &lt;xref:System.Security.Cryptography.RSA&gt; object.","pos":[0,249],"source":"The ToXmlString method creates an XML string that contains either the public and private key of the current <xref:System.Security.Cryptography.RSA> object or contains only the public key of the current <xref:System.Security.Cryptography.RSA> object."},{"content":"Use the ToXmlString method whenever you need to conveniently persist RSA key information.","pos":[256,345]},{"content":"To initialize an &lt;xref:System.Security.Cryptography.RSA&gt; object with the key in an XML string, use the &lt;xref:System.Security.Cryptography.RSA.FromXmlString%2A&gt; method.","pos":[347,514],"source":"  To initialize an <xref:System.Security.Cryptography.RSA> object with the key in an XML string, use the <xref:System.Security.Cryptography.RSA.FromXmlString%2A> method."},{"content":"&gt; <ph id=\"ph1\">[!CAUTION]</ph> &gt;  Persisting an XML string containing a private key to an insecure location is a security threat.","pos":[520,631],"source":"      > [!CAUTION] >  Persisting an XML string containing a private key to an insecure location is a security threat."},{"content":"The security of your application can be compromised if a malicious third party can access your private key.","pos":[633,740]},{"content":"To safely persist a private key, use a secure key container.","pos":[742,802]},{"content":"For more information about persisting private keys in a key container, see <bpt id=\"p1\">[</bpt>How to: Store Asymmetric Keys in a Key Container<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[804,969],"source":"  For more information about persisting private keys in a key container, see [How to: Store Asymmetric Keys in a Key Container](~/add/includes/ajax-current-ext-md.md)."},{"content":"When you pass <ph id=\"ph1\">`true`</ph> to the ToXmlString method, the resulting XML string takes the following form:      <ph id=\"ph2\">```   &lt;RSAKeyValue&gt;      &lt;Modulus&gt;…&lt;/Modulus&gt;      &lt;Exponent&gt;…&lt;/Exponent&gt;      &lt;P&gt;…&lt;/P&gt;      &lt;Q&gt;…&lt;/Q&gt;      &lt;DP&gt;…&lt;/DP&gt;      &lt;DQ&gt;…&lt;/DQ&gt;      &lt;InverseQ&gt;…&lt;/InverseQ&gt;      &lt;D&gt;…&lt;/D&gt;   &lt;/RSAKeyValue&gt;   ```</ph>       When you pass <ph id=\"ph3\">`false`</ph> to the ToXmlString method, the resulting XML string takes the following form:      <ph id=\"ph4\">```   &lt;RSAKeyValue&gt;      &lt;Modulus&gt;…&lt;/Modulus&gt;      &lt;Exponent&gt;…&lt;/Exponent&gt;   &lt;/RSAKeyValue&gt;   ```</ph>","pos":[976,1486],"source":"       When you pass `true` to the ToXmlString method, the resulting XML string takes the following form:      ```   <RSAKeyValue>      <Modulus>…</Modulus>      <Exponent>…</Exponent>      <P>…</P>      <Q>…</Q>      <DP>…</DP>      <DQ>…</DQ>      <InverseQ>…</InverseQ>      <D>…</D>   </RSAKeyValue>   ```       When you pass `false` to the ToXmlString method, the resulting XML string takes the following form:      ```   <RSAKeyValue>      <Modulus>…</Modulus>      <Exponent>…</Exponent>   </RSAKeyValue>   ```"}]},{"pos":[32636,32832],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to include a public and private RSA key; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> to include only the public key.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to include a public and private RSA key; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to include only the public key."},{"pos":[32890,32999],"content":"An XML string containing the key of the current <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.RSA\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"An XML string containing the key of the current <xref href=\"System.Security.Cryptography.RSA\"></xref> object."},{"pos":[33839,34025],"content":"Verifies that a digital signature is valid by calculating the hash value of the specified data using the specified hash algorithm and padding, and comparing it to the provided signature.","needQuote":true,"needEscape":true,"nodes":[{"content":"Verifies that a digital signature is valid by calculating the hash value of the specified data using the specified hash algorithm and padding, and comparing it to the provided signature.","pos":[0,186]}]},{"pos":[34301,34317],"content":"The signed data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The signed data.","pos":[0,16]}]},{"pos":[34383,34417],"content":"The signature data to be verified.","needQuote":true,"needEscape":true,"nodes":[{"content":"The signature data to be verified.","pos":[0,34]}]},{"pos":[34520,34581],"content":"The hash algorithm used to create the hash value of the data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The hash algorithm used to create the hash value of the data.","pos":[0,61]}]},{"pos":[34680,34697],"content":"The padding mode.","needQuote":true,"needEscape":true,"nodes":[{"content":"The padding mode.","pos":[0,17]}]},{"pos":[34756,34918],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the signature is valid; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the signature is valid; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[35093,35409],"content":"<code>data</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>signature</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>padding</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;data&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,82],"source":"<code>data</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;signature&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[89,187],"source":"       -or-       <code>signature</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;padding&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[194,290],"source":"       -or-       <code>padding</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[35505,35717],"content":"<code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or &lt;xref:System.String.Empty?displayProperty=fullName&gt;.","needQuote":true,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;hashAlgorithm&lt;/code&gt;</ph>.<ph id=\"ph2\">&lt;xref:System.Security.Cryptography.HashAlgorithmName.Name*&gt;</ph>","pos":[0,86],"source":"<code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*>"},{"content":"is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or <ph id=\"ph1\">&amp;lt;</ph>xref:System.String.Empty?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>.","pos":[87,212],"source":" is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or &lt;xref:System.String.Empty?displayProperty=fullName&gt;."}]},{"pos":[36488,36676],"content":"Verifies that a digital signature is valid by calculating the hash value of the specified stream using the specified hash algorithm and padding, and comparing it to the provided signature.","needQuote":true,"needEscape":true,"nodes":[{"content":"Verifies that a digital signature is valid by calculating the hash value of the specified stream using the specified hash algorithm and padding, and comparing it to the provided signature.","pos":[0,188]}]},{"pos":[36965,36981],"content":"The signed data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The signed data.","pos":[0,16]}]},{"pos":[37047,37081],"content":"The signature data to be verified.","needQuote":true,"needEscape":true,"nodes":[{"content":"The signature data to be verified.","pos":[0,34]}]},{"pos":[37184,37245],"content":"The hash algorithm used to create the hash value of the data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The hash algorithm used to create the hash value of the data.","pos":[0,61]}]},{"pos":[37344,37361],"content":"The padding mode.","needQuote":true,"needEscape":true,"nodes":[{"content":"The padding mode.","pos":[0,17]}]},{"pos":[37420,37582],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the signature is valid; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the signature is valid; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[37757,38073],"content":"<code>data</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>signature</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>padding</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;data&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,82],"source":"<code>data</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;signature&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[89,187],"source":"       -or-       <code>signature</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;padding&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[194,290],"source":"       -or-       <code>padding</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[38169,38381],"content":"<code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or &lt;xref:System.String.Empty?displayProperty=fullName&gt;.","needQuote":true,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;hashAlgorithm&lt;/code&gt;</ph>.<ph id=\"ph2\">&lt;xref:System.Security.Cryptography.HashAlgorithmName.Name*&gt;</ph>","pos":[0,86],"source":"<code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*>"},{"content":"is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or <ph id=\"ph1\">&amp;lt;</ph>xref:System.String.Empty?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>.","pos":[87,212],"source":" is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or &lt;xref:System.String.Empty?displayProperty=fullName&gt;."}]},{"pos":[39234,39439],"content":"Verifies that a digital signature is valid by calculating the hash value of the data in a portion of a byte array using the specified hash algorithm and padding, and comparing it to the provided signature.","needQuote":true,"needEscape":true,"nodes":[{"content":"Verifies that a digital signature is valid by calculating the hash value of the data in a portion of a byte array using the specified hash algorithm and padding, and comparing it to the provided signature.","pos":[0,205]}]},{"pos":[39746,39762],"content":"The signed data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The signed data.","pos":[0,16]}]},{"pos":[39824,39872],"content":"The starting index at which to compute the hash.","needQuote":true,"needEscape":true,"nodes":[{"content":"The starting index at which to compute the hash.","pos":[0,48]}]},{"pos":[39933,39961],"content":"The number of bytes to hash.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes to hash.","pos":[0,28]}]},{"pos":[40027,40061],"content":"The signature data to be verified.","needQuote":true,"needEscape":true,"nodes":[{"content":"The signature data to be verified.","pos":[0,34]}]},{"pos":[40164,40225],"content":"The hash algorithm used to create the hash value of the data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The hash algorithm used to create the hash value of the data.","pos":[0,61]}]},{"pos":[40324,40341],"content":"The padding mode.","needQuote":true,"needEscape":true,"nodes":[{"content":"The padding mode.","pos":[0,17]}]},{"pos":[40400,40562],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the signature is valid; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the signature is valid; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[40737,41053],"content":"<code>data</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>signature</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>padding</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;data&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,82],"source":"<code>data</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;signature&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[89,187],"source":"       -or-       <code>signature</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;padding&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[194,290],"source":"       -or-       <code>padding</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[41149,41361],"content":"<code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or &lt;xref:System.String.Empty?displayProperty=fullName&gt;.","needQuote":true,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;hashAlgorithm&lt;/code&gt;</ph>.<ph id=\"ph2\">&lt;xref:System.Security.Cryptography.HashAlgorithmName.Name*&gt;</ph>","pos":[0,86],"source":"<code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*>"},{"content":"is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or <ph id=\"ph1\">&amp;lt;</ph>xref:System.String.Empty?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>.","pos":[87,212],"source":" is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or &lt;xref:System.String.Empty?displayProperty=fullName&gt;."}]},{"pos":[41477,41713],"content":"<code>offset</code> is less than zero.       -or-       <code>count</code> is less than zero.       -or-       <code>offset</code> + <code>count</code> – 1 results in an index that is beyond the upper bound of <code>data</code>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph> is less than zero.","pos":[0,38],"source":"<code>offset</code> is less than zero."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.","pos":[45,93],"source":"       -or-       <code>count</code> is less than zero."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph><ph id=\"ph2\"> + &lt;code&gt;count&lt;/code&gt;</ph> – 1 results in an index that is beyond the upper bound of <ph id=\"ph3\">&lt;code&gt;data&lt;/code&gt;</ph>.","pos":[100,228],"source":"       -or-       <code>offset</code> + <code>count</code> – 1 results in an index that is beyond the upper bound of <code>data</code>."}]},{"pos":[42479,42661],"content":"Verifies that a digital signature is valid by determining the hash value in the signature using the specified hash algorithm and padding, and comparing it to the provided hash value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Verifies that a digital signature is valid by determining the hash value in the signature using the specified hash algorithm and padding, and comparing it to the provided hash value.","pos":[0,182]}]},{"pos":[42945,42979],"content":"The hash value of the signed data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The hash value of the signed data.","pos":[0,34]}]},{"pos":[43045,43079],"content":"The signature data to be verified.","needQuote":true,"needEscape":true,"nodes":[{"content":"The signature data to be verified.","pos":[0,34]}]},{"pos":[43182,43231],"content":"The hash algorithm used to create the hash value.","needQuote":true,"needEscape":true,"nodes":[{"content":"The hash algorithm used to create the hash value.","pos":[0,49]}]},{"pos":[43330,43347],"content":"The padding mode.","needQuote":true,"needEscape":true,"nodes":[{"content":"The padding mode.","pos":[0,17]}]},{"pos":[43406,43568],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the signature is valid; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the signature is valid; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[43746,43788],"content":"A derived class must override this method.","needQuote":true,"needEscape":true,"nodes":[{"content":"A derived class must override this method.","pos":[0,42]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.RSA\n  id: RSA\n  children:\n  - System.Security.Cryptography.RSA.#ctor\n  - System.Security.Cryptography.RSA.Create\n  - System.Security.Cryptography.RSA.Create(System.String)\n  - System.Security.Cryptography.RSA.Decrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  - System.Security.Cryptography.RSA.DecryptValue(System.Byte[])\n  - System.Security.Cryptography.RSA.Encrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  - System.Security.Cryptography.RSA.EncryptValue(System.Byte[])\n  - System.Security.Cryptography.RSA.ExportParameters(System.Boolean)\n  - System.Security.Cryptography.RSA.FromXmlString(System.String)\n  - System.Security.Cryptography.RSA.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.RSA.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.RSA.ImportParameters(System.Security.Cryptography.RSAParameters)\n  - System.Security.Cryptography.RSA.KeyExchangeAlgorithm\n  - System.Security.Cryptography.RSA.SignatureAlgorithm\n  - System.Security.Cryptography.RSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  - System.Security.Cryptography.RSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  - System.Security.Cryptography.RSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  - System.Security.Cryptography.RSA.SignHash(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  - System.Security.Cryptography.RSA.ToXmlString(System.Boolean)\n  - System.Security.Cryptography.RSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  - System.Security.Cryptography.RSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  - System.Security.Cryptography.RSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  - System.Security.Cryptography.RSA.VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  langs:\n  - csharp\n  name: RSA\n  nameWithType: RSA\n  fullName: System.Security.Cryptography.RSA\n  type: Class\n  summary: Represents the base class from which all implementations of the RSA algorithm inherit.\n  remarks: \"Extending this class proves that you are implementing an `RSA` key. This is required for any developer providing a new `RSA` key implementation.  \\n  \\n The only purpose of this class is as a hierarchy member for identification of the `RSA` algorithm.  \\n  \\n The <xref:System.Security.Cryptography.RSACryptoServiceProvider> supports key lengths from 384 bits to 16384 bits in increments of 8 bits if you have the Microsoft Enhanced Cryptographic Provider installed.  It supports key lengths from 384 bits to 512 bits in increments of 8 bits if you have the Microsoft Base Cryptographic Provider installed.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public abstract class RSA : System.Security.Cryptography.AsymmetricAlgorithm\n  inheritance:\n  - System.Object\n  - System.Security.Cryptography.AsymmetricAlgorithm\n  implements: []\n  inheritedMembers:\n  - System.Security.Cryptography.AsymmetricAlgorithm.Clear\n  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)\n  - System.Security.Cryptography.AsymmetricAlgorithm.KeySize\n  - System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue\n  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes\n  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue\n  platform:\n  - net462\n- uid: System.Security.Cryptography.RSA.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.RSA\n  langs:\n  - csharp\n  name: RSA()\n  nameWithType: RSA.RSA()\n  fullName: System.Security.Cryptography.RSA.RSA()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.RSA\"></xref> class.\n  remarks: This is a protected method that can only be called from a class derived from <xref:System.Security.Cryptography.RSA>. You cannot create an instance of an abstract class.\n  syntax:\n    content: protected RSA ();\n    parameters: []\n  overload: System.Security.Cryptography.RSA.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.RSA.Create\n  id: Create\n  parent: System.Security.Cryptography.RSA\n  langs:\n  - csharp\n  name: Create()\n  nameWithType: RSA.Create()\n  fullName: System.Security.Cryptography.RSA.Create()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Creates an instance of the default implementation of the <xref href=\"System.Security.Cryptography.RSA\"></xref> algorithm.\n  syntax:\n    content: public static System.Security.Cryptography.RSA Create ();\n    parameters: []\n    return:\n      type: System.Security.Cryptography.RSA\n      description: A new instance of the default implementation of <xref href=\"System.Security.Cryptography.RSA\"></xref>.\n  overload: System.Security.Cryptography.RSA.Create*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.RSA.Create(System.String)\n  id: Create(System.String)\n  parent: System.Security.Cryptography.RSA\n  langs:\n  - csharp\n  name: Create(String)\n  nameWithType: RSA.Create(String)\n  fullName: System.Security.Cryptography.RSA.Create(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Creates an instance of the specified implementation of <xref href=\"System.Security.Cryptography.RSA\"></xref>.\n  syntax:\n    content: public static System.Security.Cryptography.RSA Create (string algName);\n    parameters:\n    - id: algName\n      type: System.String\n      description: The name of the implementation of <xref href=\"System.Security.Cryptography.RSA\"></xref> to use.\n    return:\n      type: System.Security.Cryptography.RSA\n      description: A new instance of the specified implementation of <xref href=\"System.Security.Cryptography.RSA\"></xref>.\n  overload: System.Security.Cryptography.RSA.Create*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.RSA.Decrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  id: Decrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  parent: System.Security.Cryptography.RSA\n  langs:\n  - csharp\n  name: Decrypt(Byte[],RSAEncryptionPadding)\n  nameWithType: RSA.Decrypt(Byte[],RSAEncryptionPadding)\n  fullName: System.Security.Cryptography.RSA.Decrypt(Byte[],RSAEncryptionPadding)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: When overridden in a derived class, decrypts the input data using the specified padding mode.\n  syntax:\n    content: public virtual byte[] Decrypt (byte[] data, System.Security.Cryptography.RSAEncryptionPadding padding);\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: The data to decrypt.\n    - id: padding\n      type: System.Security.Cryptography.RSAEncryptionPadding\n      description: The padding mode.\n    return:\n      type: System.Byte[]\n      description: The decrypted data.\n  overload: System.Security.Cryptography.RSA.Decrypt*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: A derived class must override this method.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.RSA.DecryptValue(System.Byte[])\n  id: DecryptValue(System.Byte[])\n  parent: System.Security.Cryptography.RSA\n  langs:\n  - csharp\n  name: DecryptValue(Byte[])\n  nameWithType: RSA.DecryptValue(Byte[])\n  fullName: System.Security.Cryptography.RSA.DecryptValue(Byte[])\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: When overridden in a derived class, decrypts the input data using the private key.\n  remarks: In the [!INCLUDE[net_v452](~/add/includes/net-v452-md.md)] and earlier versions of the .NET Framework, this method was `abstract`. However, the only implementation by a derived class, <xref:System.Security.Cryptography.RSACryptoServiceProvider.DecryptValue%2A?displayProperty=fullName>, also threw a <xref:System.NotSupportedException> exception.\n  syntax:\n    content: public virtual byte[] DecryptValue (byte[] rgb);\n    parameters:\n    - id: rgb\n      type: System.Byte[]\n      description: The cipher text to be decrypted.\n    return:\n      type: System.Byte[]\n      description: The resulting decryption of the <code>rgb</code> parameter in plain text.\n  overload: System.Security.Cryptography.RSA.DecryptValue*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This method call is not supported. This exception is thrown starting with the [!INCLUDE[net_v46](~/add/includes/net-v46-md.md)].\n  platform:\n  - net462\n- uid: System.Security.Cryptography.RSA.Encrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  id: Encrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  parent: System.Security.Cryptography.RSA\n  langs:\n  - csharp\n  name: Encrypt(Byte[],RSAEncryptionPadding)\n  nameWithType: RSA.Encrypt(Byte[],RSAEncryptionPadding)\n  fullName: System.Security.Cryptography.RSA.Encrypt(Byte[],RSAEncryptionPadding)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: When overridden in a derived class, encrypts the input data using the specified padding mode.\n  syntax:\n    content: public virtual byte[] Encrypt (byte[] data, System.Security.Cryptography.RSAEncryptionPadding padding);\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: The data to encrypt.\n    - id: padding\n      type: System.Security.Cryptography.RSAEncryptionPadding\n      description: The padding mode.\n    return:\n      type: System.Byte[]\n      description: The encrypted data.\n  overload: System.Security.Cryptography.RSA.Encrypt*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: A derived class must override this method.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.RSA.EncryptValue(System.Byte[])\n  id: EncryptValue(System.Byte[])\n  parent: System.Security.Cryptography.RSA\n  langs:\n  - csharp\n  name: EncryptValue(Byte[])\n  nameWithType: RSA.EncryptValue(Byte[])\n  fullName: System.Security.Cryptography.RSA.EncryptValue(Byte[])\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: When overridden in a derived class, encrypts the input data using the public key.\n  remarks: In the [!INCLUDE[net_v452](~/add/includes/net-v452-md.md)] and earlier versions of the .NET Framework, this method was `abstract`. However, the only implementation by a derived class, <xref:System.Security.Cryptography.RSACryptoServiceProvider.DecryptValue%2A?displayProperty=fullName>, also threw a <xref:System.NotSupportedException> exception.\n  syntax:\n    content: public virtual byte[] EncryptValue (byte[] rgb);\n    parameters:\n    - id: rgb\n      type: System.Byte[]\n      description: The plain text to be encrypted.\n    return:\n      type: System.Byte[]\n      description: The resulting encryption of the <code>rgb</code> parameter as cipher text.\n  overload: System.Security.Cryptography.RSA.EncryptValue*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This method call is not supported. This exception is thrown starting with the [!INCLUDE[net_v46](~/add/includes/net-v46-md.md)].\n  platform:\n  - net462\n- uid: System.Security.Cryptography.RSA.ExportParameters(System.Boolean)\n  id: ExportParameters(System.Boolean)\n  parent: System.Security.Cryptography.RSA\n  langs:\n  - csharp\n  name: ExportParameters(Boolean)\n  nameWithType: RSA.ExportParameters(Boolean)\n  fullName: System.Security.Cryptography.RSA.ExportParameters(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: When overridden in a derived class, exports the <xref href=\"System.Security.Cryptography.RSAParameters\"></xref>.\n  syntax:\n    content: public abstract System.Security.Cryptography.RSAParameters ExportParameters (bool includePrivateParameters);\n    parameters:\n    - id: includePrivateParameters\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to include private parameters; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n    return:\n      type: System.Security.Cryptography.RSAParameters\n      description: The parameters for <xref href=\"System.Security.Cryptography.DSA\"></xref>.\n  overload: System.Security.Cryptography.RSA.ExportParameters*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.RSA.FromXmlString(System.String)\n  id: FromXmlString(System.String)\n  parent: System.Security.Cryptography.RSA\n  langs:\n  - csharp\n  name: FromXmlString(String)\n  nameWithType: RSA.FromXmlString(String)\n  fullName: System.Security.Cryptography.RSA.FromXmlString(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Initializes an <xref href=\"System.Security.Cryptography.RSA\"></xref> object from the key information from an XML string.\n  remarks: \"The FromXmlString initializes an RSA object using key information in an XML string that was generated using the <xref:System.Security.Cryptography.RSA.ToXmlString%2A> method.  The FromXmlString method accepts either an XML string containing a public key or an XML string containing a public and private key.  \\n  \\n Use the FromXmlString method to conveniently initialize <xref:System.Security.Cryptography.RSA> key information.  \\n  \\n> [!CAUTION]\\n>  Persisting an XML string containing a private key to an insecure location is a security threat.  The security of your application can be compromised if a malicious third party can access your private key.  To safely persist a private key, use a secure key container.  For more information about persisting private keys in a key container, see [How to: Store Asymmetric Keys in a Key Container](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public override void FromXmlString (string xmlString);\n    parameters:\n    - id: xmlString\n      type: System.String\n      description: The XML string containing <xref href=\"System.Security.Cryptography.RSA\"></xref> key information.\n  overload: System.Security.Cryptography.RSA.FromXmlString*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>xmlString</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: The format of the <code>xmlString</code> parameter is not valid.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.RSA.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  id: HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.RSA\n  langs:\n  - csharp\n  name: HashData(Stream,HashAlgorithmName)\n  nameWithType: RSA.HashData(Stream,HashAlgorithmName)\n  fullName: System.Security.Cryptography.RSA.HashData(Stream,HashAlgorithmName)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: When overridden in a derived class, computes the hash value of a specified binary stream by using a specified hashing algorithm.\n  syntax:\n    content: protected virtual byte[] HashData (System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);\n    parameters:\n    - id: data\n      type: System.IO.Stream\n      description: The binary stream to hash.\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: The hash algorithm.\n    return:\n      type: System.Byte[]\n      description: The hashed data.\n  overload: System.Security.Cryptography.RSA.HashData*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: A derived class must override this method.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.RSA.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  id: HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.RSA\n  langs:\n  - csharp\n  name: HashData(Byte[],Int32,Int32,HashAlgorithmName)\n  nameWithType: RSA.HashData(Byte[],Int32,Int32,HashAlgorithmName)\n  fullName: System.Security.Cryptography.RSA.HashData(Byte[],Int32,Int32,HashAlgorithmName)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: When overridden in a derived class, computes the hash value of a specified portion of a byte array by using a specified hashing algorithm.\n  syntax:\n    content: protected virtual byte[] HashData (byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: The data to be hashed.\n    - id: offset\n      type: System.Int32\n      description: The index of the first byte in `data` that is to be hashed.\n    - id: count\n      type: System.Int32\n      description: The number of bytes to hash.\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: The algorithm to use in hash the data.\n    return:\n      type: System.Byte[]\n      description: The hashed data.\n  overload: System.Security.Cryptography.RSA.HashData*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: A derived class must override this method.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.RSA.ImportParameters(System.Security.Cryptography.RSAParameters)\n  id: ImportParameters(System.Security.Cryptography.RSAParameters)\n  parent: System.Security.Cryptography.RSA\n  langs:\n  - csharp\n  name: ImportParameters(RSAParameters)\n  nameWithType: RSA.ImportParameters(RSAParameters)\n  fullName: System.Security.Cryptography.RSA.ImportParameters(RSAParameters)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: When overridden in a derived class, imports the specified <xref href=\"System.Security.Cryptography.RSAParameters\"></xref>.\n  syntax:\n    content: public abstract void ImportParameters (System.Security.Cryptography.RSAParameters parameters);\n    parameters:\n    - id: parameters\n      type: System.Security.Cryptography.RSAParameters\n      description: The parameters for <xref href=\"System.Security.Cryptography.RSA\"></xref>.\n  overload: System.Security.Cryptography.RSA.ImportParameters*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.RSA.KeyExchangeAlgorithm\n  id: KeyExchangeAlgorithm\n  parent: System.Security.Cryptography.RSA\n  langs:\n  - csharp\n  name: KeyExchangeAlgorithm\n  nameWithType: RSA.KeyExchangeAlgorithm\n  fullName: System.Security.Cryptography.RSA.KeyExchangeAlgorithm\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Gets the name of the key exchange algorithm available with this implementation of <xref href=\"System.Security.Cryptography.RSA\"></xref>.\n  syntax:\n    content: public override string KeyExchangeAlgorithm { get; }\n    return:\n      type: System.String\n      description: Returns \"RSA\".\n  overload: System.Security.Cryptography.RSA.KeyExchangeAlgorithm*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.RSA.SignatureAlgorithm\n  id: SignatureAlgorithm\n  parent: System.Security.Cryptography.RSA\n  langs:\n  - csharp\n  name: SignatureAlgorithm\n  nameWithType: RSA.SignatureAlgorithm\n  fullName: System.Security.Cryptography.RSA.SignatureAlgorithm\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Gets the name of the signature algorithm available with this implementation of <xref href=\"System.Security.Cryptography.RSA\"></xref>.\n  syntax:\n    content: public override string SignatureAlgorithm { get; }\n    return:\n      type: System.String\n      description: Returns \"RSA\".\n  overload: System.Security.Cryptography.RSA.SignatureAlgorithm*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.RSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  id: SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  parent: System.Security.Cryptography.RSA\n  langs:\n  - csharp\n  name: SignData(Byte[],HashAlgorithmName,RSASignaturePadding)\n  nameWithType: RSA.SignData(Byte[],HashAlgorithmName,RSASignaturePadding)\n  fullName: System.Security.Cryptography.RSA.SignData(Byte[],HashAlgorithmName,RSASignaturePadding)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Computes the hash value of the specified byte array using the specified hash algorithm and padding mode, and signs the resulting hash value.\n  syntax:\n    content: public byte[] SignData (byte[] data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.RSASignaturePadding padding);\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: The input data for which to compute the hash.\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: The hash algorithm to use to create the hash value.\n    - id: padding\n      type: System.Security.Cryptography.RSASignaturePadding\n      description: The padding mode.\n    return:\n      type: System.Byte[]\n      description: The RSA signature for the specified data.\n  overload: System.Security.Cryptography.RSA.SignData*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>data</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>padding</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or &lt;xref:System.String.Empty?displayProperty=fullName&gt;.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.RSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  id: SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  parent: System.Security.Cryptography.RSA\n  langs:\n  - csharp\n  name: SignData(Stream,HashAlgorithmName,RSASignaturePadding)\n  nameWithType: RSA.SignData(Stream,HashAlgorithmName,RSASignaturePadding)\n  fullName: System.Security.Cryptography.RSA.SignData(Stream,HashAlgorithmName,RSASignaturePadding)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Computes the hash value of the specified stream using the specified hash algorithm and padding mode, and signs the resulting hash value.\n  syntax:\n    content: public virtual byte[] SignData (System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.RSASignaturePadding padding);\n    parameters:\n    - id: data\n      type: System.IO.Stream\n      description: The input stream for which to compute the hash.\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: The hash algorithm to use to create the hash value.\n    - id: padding\n      type: System.Security.Cryptography.RSASignaturePadding\n      description: The padding mode.\n    return:\n      type: System.Byte[]\n      description: The RSA signature for the specified data.\n  overload: System.Security.Cryptography.RSA.SignData*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>data</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>padding</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or &lt;xref:System.String.Empty?displayProperty=fullName&gt;.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.RSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  id: SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  parent: System.Security.Cryptography.RSA\n  langs:\n  - csharp\n  name: SignData(Byte[],Int32,Int32,HashAlgorithmName,RSASignaturePadding)\n  nameWithType: RSA.SignData(Byte[],Int32,Int32,HashAlgorithmName,RSASignaturePadding)\n  fullName: System.Security.Cryptography.RSA.SignData(Byte[],Int32,Int32,HashAlgorithmName,RSASignaturePadding)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Computes the hash value of a portion of the specified byte array using the specified hash algorithm and padding mode, and signs the resulting hash value.\n  syntax:\n    content: public virtual byte[] SignData (byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.RSASignaturePadding padding);\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: The input data for which to compute the hash.\n    - id: offset\n      type: System.Int32\n      description: The offset into the array at which to begin using data.\n    - id: count\n      type: System.Int32\n      description: The number of bytes in the array to use as data.\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: The hash algorithm to use to create the hash value.\n    - id: padding\n      type: System.Security.Cryptography.RSASignaturePadding\n      description: The padding mode.\n    return:\n      type: System.Byte[]\n      description: The RSA signature for the specified data.\n  overload: System.Security.Cryptography.RSA.SignData*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>data</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>padding</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or &lt;xref:System.String.Empty?displayProperty=fullName&gt;.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>offset</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>count</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>offset</code> + <code>count</code> – 1 results in an index that is beyond the upper bound of <code>data</code>.\"\n  platform:\n  - net462\n- uid: System.Security.Cryptography.RSA.SignHash(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  id: SignHash(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  parent: System.Security.Cryptography.RSA\n  langs:\n  - csharp\n  name: SignHash(Byte[],HashAlgorithmName,RSASignaturePadding)\n  nameWithType: RSA.SignHash(Byte[],HashAlgorithmName,RSASignaturePadding)\n  fullName: System.Security.Cryptography.RSA.SignHash(Byte[],HashAlgorithmName,RSASignaturePadding)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: When overridden in a derived class, computes the signature for the specified hash value by encrypting it with the private key using the specified padding.\n  syntax:\n    content: public virtual byte[] SignHash (byte[] hash, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.RSASignaturePadding padding);\n    parameters:\n    - id: hash\n      type: System.Byte[]\n      description: The hash value of the data to be signed.\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: The hash algorithm used to create the hash value of the data.\n    - id: padding\n      type: System.Security.Cryptography.RSASignaturePadding\n      description: The padding.\n    return:\n      type: System.Byte[]\n      description: The RSA signature for the specified hash value.\n  overload: System.Security.Cryptography.RSA.SignHash*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: A derived class must override this method.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.RSA.ToXmlString(System.Boolean)\n  id: ToXmlString(System.Boolean)\n  parent: System.Security.Cryptography.RSA\n  langs:\n  - csharp\n  name: ToXmlString(Boolean)\n  nameWithType: RSA.ToXmlString(Boolean)\n  fullName: System.Security.Cryptography.RSA.ToXmlString(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Creates and returns an XML string containing the key of the current <xref href=\"System.Security.Cryptography.RSA\"></xref> object.\n  remarks: \"The ToXmlString method creates an XML string that contains either the public and private key of the current <xref:System.Security.Cryptography.RSA> object or contains only the public key of the current <xref:System.Security.Cryptography.RSA> object.  \\n  \\n Use the ToXmlString method whenever you need to conveniently persist RSA key information.  To initialize an <xref:System.Security.Cryptography.RSA> object with the key in an XML string, use the <xref:System.Security.Cryptography.RSA.FromXmlString%2A> method.  \\n  \\n> [!CAUTION]\\n>  Persisting an XML string containing a private key to an insecure location is a security threat.  The security of your application can be compromised if a malicious third party can access your private key.  To safely persist a private key, use a secure key container.  For more information about persisting private keys in a key container, see [How to: Store Asymmetric Keys in a Key Container](~/add/includes/ajax-current-ext-md.md).  \\n  \\n When you pass `true` to the ToXmlString method, the resulting XML string takes the following form:  \\n  \\n```  \\n<RSAKeyValue>  \\n   <Modulus>…</Modulus>  \\n   <Exponent>…</Exponent>  \\n   <P>…</P>  \\n   <Q>…</Q>  \\n   <DP>…</DP>  \\n   <DQ>…</DQ>  \\n   <InverseQ>…</InverseQ>  \\n   <D>…</D>  \\n</RSAKeyValue>  \\n```  \\n  \\n When you pass `false` to the ToXmlString method, the resulting XML string takes the following form:  \\n  \\n```  \\n<RSAKeyValue>  \\n   <Modulus>…</Modulus>  \\n   <Exponent>…</Exponent>  \\n</RSAKeyValue>  \\n```\"\n  syntax:\n    content: public override string ToXmlString (bool includePrivateParameters);\n    parameters:\n    - id: includePrivateParameters\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to include a public and private RSA key; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to include only the public key.\n    return:\n      type: System.String\n      description: An XML string containing the key of the current <xref href=\"System.Security.Cryptography.RSA\"></xref> object.\n  overload: System.Security.Cryptography.RSA.ToXmlString*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.RSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  id: VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  parent: System.Security.Cryptography.RSA\n  langs:\n  - csharp\n  name: VerifyData(Byte[],Byte[],HashAlgorithmName,RSASignaturePadding)\n  nameWithType: RSA.VerifyData(Byte[],Byte[],HashAlgorithmName,RSASignaturePadding)\n  fullName: System.Security.Cryptography.RSA.VerifyData(Byte[],Byte[],HashAlgorithmName,RSASignaturePadding)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Verifies that a digital signature is valid by calculating the hash value of the specified data using the specified hash algorithm and padding, and comparing it to the provided signature.\n  syntax:\n    content: public bool VerifyData (byte[] data, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.RSASignaturePadding padding);\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: The signed data.\n    - id: signature\n      type: System.Byte[]\n      description: The signature data to be verified.\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: The hash algorithm used to create the hash value of the data.\n    - id: padding\n      type: System.Security.Cryptography.RSASignaturePadding\n      description: The padding mode.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the signature is valid; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Cryptography.RSA.VerifyData*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>data</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>signature</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>padding</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or &lt;xref:System.String.Empty?displayProperty=fullName&gt;.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.RSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  id: VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  parent: System.Security.Cryptography.RSA\n  langs:\n  - csharp\n  name: VerifyData(Stream,Byte[],HashAlgorithmName,RSASignaturePadding)\n  nameWithType: RSA.VerifyData(Stream,Byte[],HashAlgorithmName,RSASignaturePadding)\n  fullName: System.Security.Cryptography.RSA.VerifyData(Stream,Byte[],HashAlgorithmName,RSASignaturePadding)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Verifies that a digital signature is valid by calculating the hash value of the specified stream using the specified hash algorithm and padding, and comparing it to the provided signature.\n  syntax:\n    content: public bool VerifyData (System.IO.Stream data, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.RSASignaturePadding padding);\n    parameters:\n    - id: data\n      type: System.IO.Stream\n      description: The signed data.\n    - id: signature\n      type: System.Byte[]\n      description: The signature data to be verified.\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: The hash algorithm used to create the hash value of the data.\n    - id: padding\n      type: System.Security.Cryptography.RSASignaturePadding\n      description: The padding mode.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the signature is valid; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Cryptography.RSA.VerifyData*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>data</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>signature</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>padding</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or &lt;xref:System.String.Empty?displayProperty=fullName&gt;.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.RSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  id: VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  parent: System.Security.Cryptography.RSA\n  langs:\n  - csharp\n  name: VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName,RSASignaturePadding)\n  nameWithType: RSA.VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName,RSASignaturePadding)\n  fullName: System.Security.Cryptography.RSA.VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName,RSASignaturePadding)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Verifies that a digital signature is valid by calculating the hash value of the data in a portion of a byte array using the specified hash algorithm and padding, and comparing it to the provided signature.\n  syntax:\n    content: public virtual bool VerifyData (byte[] data, int offset, int count, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.RSASignaturePadding padding);\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: The signed data.\n    - id: offset\n      type: System.Int32\n      description: The starting index at which to compute the hash.\n    - id: count\n      type: System.Int32\n      description: The number of bytes to hash.\n    - id: signature\n      type: System.Byte[]\n      description: The signature data to be verified.\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: The hash algorithm used to create the hash value of the data.\n    - id: padding\n      type: System.Security.Cryptography.RSASignaturePadding\n      description: The padding mode.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the signature is valid; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Cryptography.RSA.VerifyData*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>data</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>signature</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>padding</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or &lt;xref:System.String.Empty?displayProperty=fullName&gt;.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>offset</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>count</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>offset</code> + <code>count</code> – 1 results in an index that is beyond the upper bound of <code>data</code>.\"\n  platform:\n  - net462\n- uid: System.Security.Cryptography.RSA.VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  id: VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  parent: System.Security.Cryptography.RSA\n  langs:\n  - csharp\n  name: VerifyHash(Byte[],Byte[],HashAlgorithmName,RSASignaturePadding)\n  nameWithType: RSA.VerifyHash(Byte[],Byte[],HashAlgorithmName,RSASignaturePadding)\n  fullName: System.Security.Cryptography.RSA.VerifyHash(Byte[],Byte[],HashAlgorithmName,RSASignaturePadding)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Verifies that a digital signature is valid by determining the hash value in the signature using the specified hash algorithm and padding, and comparing it to the provided hash value.\n  syntax:\n    content: public virtual bool VerifyHash (byte[] hash, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.RSASignaturePadding padding);\n    parameters:\n    - id: hash\n      type: System.Byte[]\n      description: The hash value of the signed data.\n    - id: signature\n      type: System.Byte[]\n      description: The signature data to be verified.\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: The hash algorithm used to create the hash value.\n    - id: padding\n      type: System.Security.Cryptography.RSASignaturePadding\n      description: The padding mode.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the signature is valid; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Cryptography.RSA.VerifyHash*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: A derived class must override this method.\n  platform:\n  - net462\nreferences:\n- uid: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: System.Security.Cryptography.AsymmetricAlgorithm\n- uid: System.NotImplementedException\n  isExternal: true\n  name: System.NotImplementedException\n- uid: System.NotSupportedException\n  isExternal: true\n  name: System.NotSupportedException\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.Security.Cryptography.CryptographicException\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CryptographicException\n  nameWithType: CryptographicException\n  fullName: System.Security.Cryptography.CryptographicException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.Security.Cryptography.RSA.#ctor\n  parent: System.Security.Cryptography.RSA\n  isExternal: false\n  name: RSA()\n  nameWithType: RSA.RSA()\n  fullName: System.Security.Cryptography.RSA.RSA()\n- uid: System.Security.Cryptography.RSA.Create\n  parent: System.Security.Cryptography.RSA\n  isExternal: false\n  name: Create()\n  nameWithType: RSA.Create()\n  fullName: System.Security.Cryptography.RSA.Create()\n- uid: System.Security.Cryptography.RSA\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: RSA\n  nameWithType: RSA\n  fullName: System.Security.Cryptography.RSA\n- uid: System.Security.Cryptography.RSA.Create(System.String)\n  parent: System.Security.Cryptography.RSA\n  isExternal: false\n  name: Create(String)\n  nameWithType: RSA.Create(String)\n  fullName: System.Security.Cryptography.RSA.Create(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Cryptography.RSA.Decrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  parent: System.Security.Cryptography.RSA\n  isExternal: false\n  name: Decrypt(Byte[],RSAEncryptionPadding)\n  nameWithType: RSA.Decrypt(Byte[],RSAEncryptionPadding)\n  fullName: System.Security.Cryptography.RSA.Decrypt(Byte[],RSAEncryptionPadding)\n- uid: System.Byte[]\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: Byte[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Security.Cryptography.RSAEncryptionPadding\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: RSAEncryptionPadding\n  nameWithType: RSAEncryptionPadding\n  fullName: System.Security.Cryptography.RSAEncryptionPadding\n- uid: System.Security.Cryptography.RSA.DecryptValue(System.Byte[])\n  parent: System.Security.Cryptography.RSA\n  isExternal: false\n  name: DecryptValue(Byte[])\n  nameWithType: RSA.DecryptValue(Byte[])\n  fullName: System.Security.Cryptography.RSA.DecryptValue(Byte[])\n- uid: System.Security.Cryptography.RSA.Encrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  parent: System.Security.Cryptography.RSA\n  isExternal: false\n  name: Encrypt(Byte[],RSAEncryptionPadding)\n  nameWithType: RSA.Encrypt(Byte[],RSAEncryptionPadding)\n  fullName: System.Security.Cryptography.RSA.Encrypt(Byte[],RSAEncryptionPadding)\n- uid: System.Security.Cryptography.RSA.EncryptValue(System.Byte[])\n  parent: System.Security.Cryptography.RSA\n  isExternal: false\n  name: EncryptValue(Byte[])\n  nameWithType: RSA.EncryptValue(Byte[])\n  fullName: System.Security.Cryptography.RSA.EncryptValue(Byte[])\n- uid: System.Security.Cryptography.RSA.ExportParameters(System.Boolean)\n  parent: System.Security.Cryptography.RSA\n  isExternal: false\n  name: ExportParameters(Boolean)\n  nameWithType: RSA.ExportParameters(Boolean)\n  fullName: System.Security.Cryptography.RSA.ExportParameters(Boolean)\n- uid: System.Security.Cryptography.RSAParameters\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: RSAParameters\n  nameWithType: RSAParameters\n  fullName: System.Security.Cryptography.RSAParameters\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.RSA.FromXmlString(System.String)\n  parent: System.Security.Cryptography.RSA\n  isExternal: false\n  name: FromXmlString(String)\n  nameWithType: RSA.FromXmlString(String)\n  fullName: System.Security.Cryptography.RSA.FromXmlString(String)\n- uid: System.Security.Cryptography.RSA.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.RSA\n  isExternal: false\n  name: HashData(Stream,HashAlgorithmName)\n  nameWithType: RSA.HashData(Stream,HashAlgorithmName)\n  fullName: System.Security.Cryptography.RSA.HashData(Stream,HashAlgorithmName)\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: true\n  name: Stream\n  nameWithType: Stream\n  fullName: System.IO.Stream\n- uid: System.Security.Cryptography.HashAlgorithmName\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: HashAlgorithmName\n  nameWithType: HashAlgorithmName\n  fullName: System.Security.Cryptography.HashAlgorithmName\n- uid: System.Security.Cryptography.RSA.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.RSA\n  isExternal: false\n  name: HashData(Byte[],Int32,Int32,HashAlgorithmName)\n  nameWithType: RSA.HashData(Byte[],Int32,Int32,HashAlgorithmName)\n  fullName: System.Security.Cryptography.RSA.HashData(Byte[],Int32,Int32,HashAlgorithmName)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.RSA.ImportParameters(System.Security.Cryptography.RSAParameters)\n  parent: System.Security.Cryptography.RSA\n  isExternal: false\n  name: ImportParameters(RSAParameters)\n  nameWithType: RSA.ImportParameters(RSAParameters)\n  fullName: System.Security.Cryptography.RSA.ImportParameters(RSAParameters)\n- uid: System.Security.Cryptography.RSA.KeyExchangeAlgorithm\n  parent: System.Security.Cryptography.RSA\n  isExternal: false\n  name: KeyExchangeAlgorithm\n  nameWithType: RSA.KeyExchangeAlgorithm\n  fullName: System.Security.Cryptography.RSA.KeyExchangeAlgorithm\n- uid: System.Security.Cryptography.RSA.SignatureAlgorithm\n  parent: System.Security.Cryptography.RSA\n  isExternal: false\n  name: SignatureAlgorithm\n  nameWithType: RSA.SignatureAlgorithm\n  fullName: System.Security.Cryptography.RSA.SignatureAlgorithm\n- uid: System.Security.Cryptography.RSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  parent: System.Security.Cryptography.RSA\n  isExternal: false\n  name: SignData(Byte[],HashAlgorithmName,RSASignaturePadding)\n  nameWithType: RSA.SignData(Byte[],HashAlgorithmName,RSASignaturePadding)\n  fullName: System.Security.Cryptography.RSA.SignData(Byte[],HashAlgorithmName,RSASignaturePadding)\n- uid: System.Security.Cryptography.RSASignaturePadding\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: RSASignaturePadding\n  nameWithType: RSASignaturePadding\n  fullName: System.Security.Cryptography.RSASignaturePadding\n- uid: System.Security.Cryptography.RSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  parent: System.Security.Cryptography.RSA\n  isExternal: false\n  name: SignData(Stream,HashAlgorithmName,RSASignaturePadding)\n  nameWithType: RSA.SignData(Stream,HashAlgorithmName,RSASignaturePadding)\n  fullName: System.Security.Cryptography.RSA.SignData(Stream,HashAlgorithmName,RSASignaturePadding)\n- uid: System.Security.Cryptography.RSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  parent: System.Security.Cryptography.RSA\n  isExternal: false\n  name: SignData(Byte[],Int32,Int32,HashAlgorithmName,RSASignaturePadding)\n  nameWithType: RSA.SignData(Byte[],Int32,Int32,HashAlgorithmName,RSASignaturePadding)\n  fullName: System.Security.Cryptography.RSA.SignData(Byte[],Int32,Int32,HashAlgorithmName,RSASignaturePadding)\n- uid: System.Security.Cryptography.RSA.SignHash(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  parent: System.Security.Cryptography.RSA\n  isExternal: false\n  name: SignHash(Byte[],HashAlgorithmName,RSASignaturePadding)\n  nameWithType: RSA.SignHash(Byte[],HashAlgorithmName,RSASignaturePadding)\n  fullName: System.Security.Cryptography.RSA.SignHash(Byte[],HashAlgorithmName,RSASignaturePadding)\n- uid: System.Security.Cryptography.RSA.ToXmlString(System.Boolean)\n  parent: System.Security.Cryptography.RSA\n  isExternal: false\n  name: ToXmlString(Boolean)\n  nameWithType: RSA.ToXmlString(Boolean)\n  fullName: System.Security.Cryptography.RSA.ToXmlString(Boolean)\n- uid: System.Security.Cryptography.RSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  parent: System.Security.Cryptography.RSA\n  isExternal: false\n  name: VerifyData(Byte[],Byte[],HashAlgorithmName,RSASignaturePadding)\n  nameWithType: RSA.VerifyData(Byte[],Byte[],HashAlgorithmName,RSASignaturePadding)\n  fullName: System.Security.Cryptography.RSA.VerifyData(Byte[],Byte[],HashAlgorithmName,RSASignaturePadding)\n- uid: System.Security.Cryptography.RSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  parent: System.Security.Cryptography.RSA\n  isExternal: false\n  name: VerifyData(Stream,Byte[],HashAlgorithmName,RSASignaturePadding)\n  nameWithType: RSA.VerifyData(Stream,Byte[],HashAlgorithmName,RSASignaturePadding)\n  fullName: System.Security.Cryptography.RSA.VerifyData(Stream,Byte[],HashAlgorithmName,RSASignaturePadding)\n- uid: System.Security.Cryptography.RSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  parent: System.Security.Cryptography.RSA\n  isExternal: false\n  name: VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName,RSASignaturePadding)\n  nameWithType: RSA.VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName,RSASignaturePadding)\n  fullName: System.Security.Cryptography.RSA.VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName,RSASignaturePadding)\n- uid: System.Security.Cryptography.RSA.VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  parent: System.Security.Cryptography.RSA\n  isExternal: false\n  name: VerifyHash(Byte[],Byte[],HashAlgorithmName,RSASignaturePadding)\n  nameWithType: RSA.VerifyHash(Byte[],Byte[],HashAlgorithmName,RSASignaturePadding)\n  fullName: System.Security.Cryptography.RSA.VerifyHash(Byte[],Byte[],HashAlgorithmName,RSASignaturePadding)\n- uid: System.Security.Cryptography.RSA.#ctor*\n  parent: System.Security.Cryptography.RSA\n  isExternal: false\n  name: RSA\n  nameWithType: RSA.RSA\n- uid: System.Security.Cryptography.RSA.Create*\n  parent: System.Security.Cryptography.RSA\n  isExternal: false\n  name: Create\n  nameWithType: RSA.Create\n- uid: System.Security.Cryptography.RSA.Decrypt*\n  parent: System.Security.Cryptography.RSA\n  isExternal: false\n  name: Decrypt\n  nameWithType: RSA.Decrypt\n- uid: System.Security.Cryptography.RSA.DecryptValue*\n  parent: System.Security.Cryptography.RSA\n  isExternal: false\n  name: DecryptValue\n  nameWithType: RSA.DecryptValue\n- uid: System.Security.Cryptography.RSA.Encrypt*\n  parent: System.Security.Cryptography.RSA\n  isExternal: false\n  name: Encrypt\n  nameWithType: RSA.Encrypt\n- uid: System.Security.Cryptography.RSA.EncryptValue*\n  parent: System.Security.Cryptography.RSA\n  isExternal: false\n  name: EncryptValue\n  nameWithType: RSA.EncryptValue\n- uid: System.Security.Cryptography.RSA.ExportParameters*\n  parent: System.Security.Cryptography.RSA\n  isExternal: false\n  name: ExportParameters\n  nameWithType: RSA.ExportParameters\n- uid: System.Security.Cryptography.RSA.FromXmlString*\n  parent: System.Security.Cryptography.RSA\n  isExternal: false\n  name: FromXmlString\n  nameWithType: RSA.FromXmlString\n- uid: System.Security.Cryptography.RSA.HashData*\n  parent: System.Security.Cryptography.RSA\n  isExternal: false\n  name: HashData\n  nameWithType: RSA.HashData\n- uid: System.Security.Cryptography.RSA.ImportParameters*\n  parent: System.Security.Cryptography.RSA\n  isExternal: false\n  name: ImportParameters\n  nameWithType: RSA.ImportParameters\n- uid: System.Security.Cryptography.RSA.KeyExchangeAlgorithm*\n  parent: System.Security.Cryptography.RSA\n  isExternal: false\n  name: KeyExchangeAlgorithm\n  nameWithType: RSA.KeyExchangeAlgorithm\n- uid: System.Security.Cryptography.RSA.SignatureAlgorithm*\n  parent: System.Security.Cryptography.RSA\n  isExternal: false\n  name: SignatureAlgorithm\n  nameWithType: RSA.SignatureAlgorithm\n- uid: System.Security.Cryptography.RSA.SignData*\n  parent: System.Security.Cryptography.RSA\n  isExternal: false\n  name: SignData\n  nameWithType: RSA.SignData\n- uid: System.Security.Cryptography.RSA.SignHash*\n  parent: System.Security.Cryptography.RSA\n  isExternal: false\n  name: SignHash\n  nameWithType: RSA.SignHash\n- uid: System.Security.Cryptography.RSA.ToXmlString*\n  parent: System.Security.Cryptography.RSA\n  isExternal: false\n  name: ToXmlString\n  nameWithType: RSA.ToXmlString\n- uid: System.Security.Cryptography.RSA.VerifyData*\n  parent: System.Security.Cryptography.RSA\n  isExternal: false\n  name: VerifyData\n  nameWithType: RSA.VerifyData\n- uid: System.Security.Cryptography.RSA.VerifyHash*\n  parent: System.Security.Cryptography.RSA\n  isExternal: false\n  name: VerifyHash\n  nameWithType: RSA.VerifyHash\n"}