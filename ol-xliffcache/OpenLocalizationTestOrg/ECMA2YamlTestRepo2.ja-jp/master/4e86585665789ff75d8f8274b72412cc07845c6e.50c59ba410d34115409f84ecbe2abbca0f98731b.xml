{"nodes":[{"pos":[1001,1156],"content":"Represents an object that is used to interact with an operation that has been posted to the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> queue.","needQuote":true,"needEscape":true,"source":"Represents an object that is used to interact with an operation that has been posted to the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> queue."},{"pos":[1169,1834],"content":"<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a DispatcherOperation object when it is called.       The DispatcherOperation object can be used to interact with the delegate on the <xref:System.Windows.Threading.Dispatcher> queue, such as changing the priority of the operation or aborting the operation.       To obtain the return value of the invoked delegate, use the <xref:System.Windows.Threading.DispatcherOperation.Result%2A> property.       The DispatcherOperation is not an exception handling boundary. This means that exceptions are handled by the <xref:System.Windows.Threading.Dispatcher> and are not preserved by the operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a DispatcherOperation object when it is called.       The DispatcherOperation object can be used to interact with the delegate on the <xref:System.Windows.Threading.Dispatcher> queue, such as changing the priority of the operation or aborting the operation.       To obtain the return value of the invoked delegate, use the <xref:System.Windows.Threading.DispatcherOperation.Result%2A> property.       The DispatcherOperation is not an exception handling boundary. This means that exceptions are handled by the <xref:System.Windows.Threading.Dispatcher> and are not preserved by the operation.","pos":[0,659],"nodes":[{"content":"&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; returns a DispatcherOperation object when it is called.","pos":[0,113],"source":"<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a DispatcherOperation object when it is called."},{"content":"The DispatcherOperation object can be used to interact with the delegate on the &lt;xref:System.Windows.Threading.Dispatcher&gt; queue, such as changing the priority of the operation or aborting the operation.","pos":[120,323],"source":"       The DispatcherOperation object can be used to interact with the delegate on the <xref:System.Windows.Threading.Dispatcher> queue, such as changing the priority of the operation or aborting the operation."},{"content":"To obtain the return value of the invoked delegate, use the &lt;xref:System.Windows.Threading.DispatcherOperation.Result%2A&gt; property.","pos":[330,461],"source":"       To obtain the return value of the invoked delegate, use the <xref:System.Windows.Threading.DispatcherOperation.Result%2A> property."},{"content":"The DispatcherOperation is not an exception handling boundary.","pos":[468,530]},{"content":"This means that exceptions are handled by the &lt;xref:System.Windows.Threading.Dispatcher&gt; and are not preserved by the operation.","pos":[531,659],"source":" This means that exceptions are handled by the <xref:System.Windows.Threading.Dispatcher> and are not preserved by the operation."}]}]},{"pos":[2352,2373],"content":"Aborts the operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Aborts the operation.","pos":[0,21]}]},{"pos":[2386,2774],"content":"If an operation is already in progress, this method will return `false`.       When an operation is aborted, the <xref:System.Windows.Threading.DispatcherOperation.Status%2A> of the <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus> and the <xref:System.Windows.Threading.DispatcherOperation.Aborted> event is raised.","needQuote":false,"needEscape":true,"nodes":[{"content":"If an operation is already in progress, this method will return <ph id=\"ph1\">`false`</ph>.","pos":[0,72],"source":"If an operation is already in progress, this method will return `false`."},{"content":"When an operation is aborted, the &lt;xref:System.Windows.Threading.DispatcherOperation.Status%2A&gt; of the &lt;xref:System.Windows.Threading.DispatcherOperation&gt; is set to &lt;xref:System.Windows.Threading.DispatcherOperationStatus&gt; and the &lt;xref:System.Windows.Threading.DispatcherOperation.Aborted&gt; event is raised.","pos":[79,386],"source":"       When an operation is aborted, the <xref:System.Windows.Threading.DispatcherOperation.Status%2A> of the <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus> and the <xref:System.Windows.Threading.DispatcherOperation.Aborted> event is raised."}]},{"pos":[2898,3063],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the operation was aborted; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the operation was aborted; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[3535,3572],"content":"Occurs when the operation is aborted.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs when the operation is aborted.","pos":[0,37]}]},{"pos":[3694,3706],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[4124,4164],"content":"Occurs when the operation has completed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs when the operation has completed.","pos":[0,40]}]},{"pos":[4288,4300],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[4726,4825],"content":"Gets the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that the operation was posted to.","needQuote":true,"needEscape":true,"source":"Gets the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> that the operation was posted to."},{"pos":[4991,5006],"content":"The dispatcher.","needQuote":true,"needEscape":true,"nodes":[{"content":"The dispatcher.","pos":[0,15]}]},{"pos":[5505,5584],"content":"Returns an object that is notified when the asynchronous operation is finished.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an object that is notified when the asynchronous operation is finished.","pos":[0,79]}]},{"pos":[5780,5851],"content":"An object that is notified when the asynchronous operation is finished.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that is notified when the asynchronous operation is finished.","pos":[0,71]}]},{"pos":[6390,6506],"content":"Begins the operation that is associated with this <bpt id=\"p1\">&lt;xref href=\"System.Windows.Threading.DispatcherOperation\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Begins the operation that is associated with this <xref href=\"System.Windows.Threading.DispatcherOperation\"></xref>."},{"pos":[6654,6728],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> in all cases.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> in all cases."},{"pos":[7221,7334],"content":"Gets or sets the priority of the operation in the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> queue.","needQuote":true,"needEscape":true,"source":"Gets or sets the priority of the operation in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> queue."},{"pos":[7519,7561],"content":"The priority of the delegate on the queue.","needQuote":true,"needEscape":true,"nodes":[{"content":"The priority of the delegate on the queue.","pos":[0,42]}]},{"pos":[8034,8090],"content":"Gets the result of the operation after it has completed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the result of the operation after it has completed.","pos":[0,56]}]},{"pos":[8201,8330],"content":"The result of the operation -or- <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the operation has not completed.","needQuote":true,"needEscape":true,"source":"The result of the operation -or- <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the operation has not completed."},{"pos":[8801,8843],"content":"Gets the current status of the operation..","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the current status of the operation..","pos":[0,42]}]},{"pos":[8855,9241],"content":"The stages of a <xref:System.Windows.Threading.DispatcherOperation> are <xref:System.Windows.Threading.DispatcherOperationStatus>, <xref:System.Windows.Threading.DispatcherOperationStatus>, and <xref:System.Windows.Threading.DispatcherOperationStatus>.  At any point before the operation has completed, the status can be set to <xref:System.Windows.Threading.DispatcherOperationStatus>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The stages of a <xref:System.Windows.Threading.DispatcherOperation> are <xref:System.Windows.Threading.DispatcherOperationStatus>, <xref:System.Windows.Threading.DispatcherOperationStatus>, and <xref:System.Windows.Threading.DispatcherOperationStatus>.  At any point before the operation has completed, the status can be set to <xref:System.Windows.Threading.DispatcherOperationStatus>.","pos":[0,386],"nodes":[{"content":"The stages of a &lt;xref:System.Windows.Threading.DispatcherOperation&gt; are &lt;xref:System.Windows.Threading.DispatcherOperationStatus&gt;, &lt;xref:System.Windows.Threading.DispatcherOperationStatus&gt;, and &lt;xref:System.Windows.Threading.DispatcherOperationStatus&gt;.","pos":[0,252],"source":"The stages of a <xref:System.Windows.Threading.DispatcherOperation> are <xref:System.Windows.Threading.DispatcherOperationStatus>, <xref:System.Windows.Threading.DispatcherOperationStatus>, and <xref:System.Windows.Threading.DispatcherOperationStatus>."},{"content":"At any point before the operation has completed, the status can be set to &lt;xref:System.Windows.Threading.DispatcherOperationStatus&gt;.","pos":[254,386],"source":"  At any point before the operation has completed, the status can be set to <xref:System.Windows.Threading.DispatcherOperationStatus>."}]}]},{"pos":[9433,9461],"content":"The status of the operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The status of the operation.","pos":[0,28]}]},{"pos":[9922,10012],"content":"Gets a &lt;xref:System.Threading.Tasks.Task%601&gt; that represents the current operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a <ph id=\"ph1\">&amp;lt;</ph>xref:System.Threading.Tasks.Task%601<ph id=\"ph2\">&amp;gt;</ph> that represents the current operation.","pos":[0,90],"source":"Gets a &lt;xref:System.Threading.Tasks.Task%601&gt; that represents the current operation."}]},{"pos":[10156,10204],"content":"An object that represents the current operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that represents the current operation.","pos":[0,48]}]},{"pos":[10667,10702],"content":"Waits for the operation to complete","needQuote":true,"needEscape":true,"nodes":[{"content":"Waits for the operation to complete","pos":[0,35]}]},{"pos":[10714,10845],"content":"To obtain the return value of the invoked delegate, use the <xref:System.Windows.Threading.DispatcherOperation.Result%2A> property.","needQuote":true,"needEscape":true,"nodes":[{"content":"To obtain the return value of the invoked delegate, use the &lt;xref:System.Windows.Threading.DispatcherOperation.Result%2A&gt; property.","pos":[0,131],"source":"To obtain the return value of the invoked delegate, use the <xref:System.Windows.Threading.DispatcherOperation.Result%2A> property."}]},{"pos":[11049,11077],"content":"The status of the operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The status of the operation.","pos":[0,28]}]},{"pos":[11265,11501],"content":"<xref:System.Windows.Threading.DispatcherOperation.Status*> is equal to <xref href=\"System.Windows.Threading.DispatcherOperationStatus\"></xref>.  This can occur when waiting for an operation that is already executing on the same thread.","needQuote":true,"needEscape":true,"nodes":[{"content":"&lt;xref:System.Windows.Threading.DispatcherOperation.Status*&gt; is equal to <bpt id=\"p1\">&lt;xref href=\"System.Windows.Threading.DispatcherOperationStatus\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,144],"source":"<xref:System.Windows.Threading.DispatcherOperation.Status*> is equal to <xref href=\"System.Windows.Threading.DispatcherOperationStatus\"></xref>."},{"content":"This can occur when waiting for an operation that is already executing on the same thread.","pos":[146,236]}]},{"pos":[11942,12010],"content":"Waits for the operation to complete in the specified period of time.","needQuote":true,"needEscape":true,"nodes":[{"content":"Waits for the operation to complete in the specified period of time.","pos":[0,68]}]},{"pos":[12022,12153],"content":"To obtain the return value of the invoked delegate, use the <xref:System.Windows.Threading.DispatcherOperation.Result%2A> property.","needQuote":true,"needEscape":true,"nodes":[{"content":"To obtain the return value of the invoked delegate, use the &lt;xref:System.Windows.Threading.DispatcherOperation.Result%2A&gt; property.","pos":[0,131],"source":"To obtain the return value of the invoked delegate, use the <xref:System.Windows.Threading.DispatcherOperation.Result%2A> property."}]},{"pos":[12341,12376],"content":"The maximum period of time to wait.","needQuote":true,"needEscape":true,"nodes":[{"content":"The maximum period of time to wait.","pos":[0,35]}]},{"pos":[12471,12499],"content":"The status of the operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The status of the operation.","pos":[0,28]}]},{"pos":[12687,12923],"content":"<xref:System.Windows.Threading.DispatcherOperation.Status*> is equal to <xref href=\"System.Windows.Threading.DispatcherOperationStatus\"></xref>.  This can occur when waiting for an operation that is already executing on the same thread.","needQuote":true,"needEscape":true,"nodes":[{"content":"&lt;xref:System.Windows.Threading.DispatcherOperation.Status*&gt; is equal to <bpt id=\"p1\">&lt;xref href=\"System.Windows.Threading.DispatcherOperationStatus\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,144],"source":"<xref:System.Windows.Threading.DispatcherOperation.Status*> is equal to <xref href=\"System.Windows.Threading.DispatcherOperationStatus\"></xref>."},{"content":"This can occur when waiting for an operation that is already executing on the same thread.","pos":[146,236]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Threading.DispatcherOperation\n  id: DispatcherOperation\n  children:\n  - System.Windows.Threading.DispatcherOperation.Abort\n  - System.Windows.Threading.DispatcherOperation.Aborted\n  - System.Windows.Threading.DispatcherOperation.Completed\n  - System.Windows.Threading.DispatcherOperation.Dispatcher\n  - System.Windows.Threading.DispatcherOperation.GetAwaiter\n  - System.Windows.Threading.DispatcherOperation.InvokeDelegateCore\n  - System.Windows.Threading.DispatcherOperation.Priority\n  - System.Windows.Threading.DispatcherOperation.Result\n  - System.Windows.Threading.DispatcherOperation.Status\n  - System.Windows.Threading.DispatcherOperation.Task\n  - System.Windows.Threading.DispatcherOperation.Wait\n  - System.Windows.Threading.DispatcherOperation.Wait(System.TimeSpan)\n  langs:\n  - csharp\n  name: DispatcherOperation\n  nameWithType: DispatcherOperation\n  fullName: System.Windows.Threading.DispatcherOperation\n  type: Class\n  summary: Represents an object that is used to interact with an operation that has been posted to the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> queue.\n  remarks: \"<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a DispatcherOperation object when it is called.  \\n  \\n The DispatcherOperation object can be used to interact with the delegate on the <xref:System.Windows.Threading.Dispatcher> queue, such as changing the priority of the operation or aborting the operation.  \\n  \\n To obtain the return value of the invoked delegate, use the <xref:System.Windows.Threading.DispatcherOperation.Result%2A> property.  \\n  \\n The DispatcherOperation is not an exception handling boundary. This means that exceptions are handled by the <xref:System.Windows.Threading.Dispatcher> and are not preserved by the operation.\"\n  syntax:\n    content: public class DispatcherOperation\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Windows.Threading.DispatcherOperation.Abort\n  id: Abort\n  parent: System.Windows.Threading.DispatcherOperation\n  langs:\n  - csharp\n  name: Abort()\n  nameWithType: DispatcherOperation.Abort()\n  fullName: System.Windows.Threading.DispatcherOperation.Abort()\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Aborts the operation.\n  remarks: \"If an operation is already in progress, this method will return `false`.  \\n  \\n When an operation is aborted, the <xref:System.Windows.Threading.DispatcherOperation.Status%2A> of the <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus> and the <xref:System.Windows.Threading.DispatcherOperation.Aborted> event is raised.\"\n  syntax:\n    content: public bool Abort ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the operation was aborted; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.Threading.DispatcherOperation.Abort*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Threading.DispatcherOperation.Aborted\n  id: Aborted\n  parent: System.Windows.Threading.DispatcherOperation\n  langs:\n  - csharp\n  name: Aborted\n  nameWithType: DispatcherOperation.Aborted\n  fullName: System.Windows.Threading.DispatcherOperation.Aborted\n  type: Event\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Occurs when the operation is aborted.\n  syntax:\n    content: public event EventHandler Aborted;\n    return:\n      type: System.EventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Threading.DispatcherOperation.Completed\n  id: Completed\n  parent: System.Windows.Threading.DispatcherOperation\n  langs:\n  - csharp\n  name: Completed\n  nameWithType: DispatcherOperation.Completed\n  fullName: System.Windows.Threading.DispatcherOperation.Completed\n  type: Event\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Occurs when the operation has completed.\n  syntax:\n    content: public event EventHandler Completed;\n    return:\n      type: System.EventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Threading.DispatcherOperation.Dispatcher\n  id: Dispatcher\n  parent: System.Windows.Threading.DispatcherOperation\n  langs:\n  - csharp\n  name: Dispatcher\n  nameWithType: DispatcherOperation.Dispatcher\n  fullName: System.Windows.Threading.DispatcherOperation.Dispatcher\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Gets the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> that the operation was posted to.\n  syntax:\n    content: public System.Windows.Threading.Dispatcher Dispatcher { get; }\n    return:\n      type: System.Windows.Threading.Dispatcher\n      description: The dispatcher.\n  overload: System.Windows.Threading.DispatcherOperation.Dispatcher*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Threading.DispatcherOperation.GetAwaiter\n  id: GetAwaiter\n  parent: System.Windows.Threading.DispatcherOperation\n  langs:\n  - csharp\n  name: GetAwaiter()\n  nameWithType: DispatcherOperation.GetAwaiter()\n  fullName: System.Windows.Threading.DispatcherOperation.GetAwaiter()\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Returns an object that is notified when the asynchronous operation is finished.\n  syntax:\n    content: public System.Runtime.CompilerServices.TaskAwaiter GetAwaiter ();\n    parameters: []\n    return:\n      type: System.Runtime.CompilerServices.TaskAwaiter\n      description: An object that is notified when the asynchronous operation is finished.\n  overload: System.Windows.Threading.DispatcherOperation.GetAwaiter*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Threading.DispatcherOperation.InvokeDelegateCore\n  id: InvokeDelegateCore\n  parent: System.Windows.Threading.DispatcherOperation\n  langs:\n  - csharp\n  name: InvokeDelegateCore()\n  nameWithType: DispatcherOperation.InvokeDelegateCore()\n  fullName: System.Windows.Threading.DispatcherOperation.InvokeDelegateCore()\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Begins the operation that is associated with this <xref href=\"System.Windows.Threading.DispatcherOperation\"></xref>.\n  syntax:\n    content: protected virtual object InvokeDelegateCore ();\n    parameters: []\n    return:\n      type: System.Object\n      description: <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> in all cases.\n  overload: System.Windows.Threading.DispatcherOperation.InvokeDelegateCore*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Threading.DispatcherOperation.Priority\n  id: Priority\n  parent: System.Windows.Threading.DispatcherOperation\n  langs:\n  - csharp\n  name: Priority\n  nameWithType: DispatcherOperation.Priority\n  fullName: System.Windows.Threading.DispatcherOperation.Priority\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Gets or sets the priority of the operation in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> queue.\n  syntax:\n    content: public System.Windows.Threading.DispatcherPriority Priority { get; set; }\n    return:\n      type: System.Windows.Threading.DispatcherPriority\n      description: The priority of the delegate on the queue.\n  overload: System.Windows.Threading.DispatcherOperation.Priority*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Threading.DispatcherOperation.Result\n  id: Result\n  parent: System.Windows.Threading.DispatcherOperation\n  langs:\n  - csharp\n  name: Result\n  nameWithType: DispatcherOperation.Result\n  fullName: System.Windows.Threading.DispatcherOperation.Result\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Gets the result of the operation after it has completed.\n  syntax:\n    content: public object Result { get; }\n    return:\n      type: System.Object\n      description: The result of the operation -or- <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the operation has not completed.\n  overload: System.Windows.Threading.DispatcherOperation.Result*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Threading.DispatcherOperation.Status\n  id: Status\n  parent: System.Windows.Threading.DispatcherOperation\n  langs:\n  - csharp\n  name: Status\n  nameWithType: DispatcherOperation.Status\n  fullName: System.Windows.Threading.DispatcherOperation.Status\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Gets the current status of the operation..\n  remarks: The stages of a <xref:System.Windows.Threading.DispatcherOperation> are <xref:System.Windows.Threading.DispatcherOperationStatus>, <xref:System.Windows.Threading.DispatcherOperationStatus>, and <xref:System.Windows.Threading.DispatcherOperationStatus>.  At any point before the operation has completed, the status can be set to <xref:System.Windows.Threading.DispatcherOperationStatus>.\n  syntax:\n    content: public System.Windows.Threading.DispatcherOperationStatus Status { get; }\n    return:\n      type: System.Windows.Threading.DispatcherOperationStatus\n      description: The status of the operation.\n  overload: System.Windows.Threading.DispatcherOperation.Status*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Threading.DispatcherOperation.Task\n  id: Task\n  parent: System.Windows.Threading.DispatcherOperation\n  langs:\n  - csharp\n  name: Task\n  nameWithType: DispatcherOperation.Task\n  fullName: System.Windows.Threading.DispatcherOperation.Task\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Gets a &lt;xref:System.Threading.Tasks.Task%601&gt; that represents the current operation.\n  syntax:\n    content: public System.Threading.Tasks.Task Task { get; }\n    return:\n      type: System.Threading.Tasks.Task\n      description: An object that represents the current operation.\n  overload: System.Windows.Threading.DispatcherOperation.Task*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Threading.DispatcherOperation.Wait\n  id: Wait\n  parent: System.Windows.Threading.DispatcherOperation\n  langs:\n  - csharp\n  name: Wait()\n  nameWithType: DispatcherOperation.Wait()\n  fullName: System.Windows.Threading.DispatcherOperation.Wait()\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Waits for the operation to complete\n  remarks: To obtain the return value of the invoked delegate, use the <xref:System.Windows.Threading.DispatcherOperation.Result%2A> property.\n  syntax:\n    content: public System.Windows.Threading.DispatcherOperationStatus Wait ();\n    parameters: []\n    return:\n      type: System.Windows.Threading.DispatcherOperationStatus\n      description: The status of the operation.\n  overload: System.Windows.Threading.DispatcherOperation.Wait*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <xref:System.Windows.Threading.DispatcherOperation.Status*> is equal to <xref href=\"System.Windows.Threading.DispatcherOperationStatus\"></xref>.  This can occur when waiting for an operation that is already executing on the same thread.\n  platform:\n  - net462\n- uid: System.Windows.Threading.DispatcherOperation.Wait(System.TimeSpan)\n  id: Wait(System.TimeSpan)\n  parent: System.Windows.Threading.DispatcherOperation\n  langs:\n  - csharp\n  name: Wait(TimeSpan)\n  nameWithType: DispatcherOperation.Wait(TimeSpan)\n  fullName: System.Windows.Threading.DispatcherOperation.Wait(TimeSpan)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Waits for the operation to complete in the specified period of time.\n  remarks: To obtain the return value of the invoked delegate, use the <xref:System.Windows.Threading.DispatcherOperation.Result%2A> property.\n  syntax:\n    content: public System.Windows.Threading.DispatcherOperationStatus Wait (TimeSpan timeout);\n    parameters:\n    - id: timeout\n      type: System.TimeSpan\n      description: The maximum period of time to wait.\n    return:\n      type: System.Windows.Threading.DispatcherOperationStatus\n      description: The status of the operation.\n  overload: System.Windows.Threading.DispatcherOperation.Wait*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <xref:System.Windows.Threading.DispatcherOperation.Status*> is equal to <xref href=\"System.Windows.Threading.DispatcherOperationStatus\"></xref>.  This can occur when waiting for an operation that is already executing on the same thread.\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.Windows.Threading.DispatcherOperation.Abort\n  parent: System.Windows.Threading.DispatcherOperation\n  isExternal: false\n  name: Abort()\n  nameWithType: DispatcherOperation.Abort()\n  fullName: System.Windows.Threading.DispatcherOperation.Abort()\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Windows.Threading.DispatcherOperation.Aborted\n  parent: System.Windows.Threading.DispatcherOperation\n  isExternal: false\n  name: Aborted\n  nameWithType: DispatcherOperation.Aborted\n  fullName: System.Windows.Threading.DispatcherOperation.Aborted\n- uid: System.EventHandler\n  parent: System\n  isExternal: true\n  name: EventHandler\n  nameWithType: EventHandler\n  fullName: System.EventHandler\n- uid: System.Windows.Threading.DispatcherOperation.Completed\n  parent: System.Windows.Threading.DispatcherOperation\n  isExternal: false\n  name: Completed\n  nameWithType: DispatcherOperation.Completed\n  fullName: System.Windows.Threading.DispatcherOperation.Completed\n- uid: System.Windows.Threading.DispatcherOperation.Dispatcher\n  parent: System.Windows.Threading.DispatcherOperation\n  isExternal: false\n  name: Dispatcher\n  nameWithType: DispatcherOperation.Dispatcher\n  fullName: System.Windows.Threading.DispatcherOperation.Dispatcher\n- uid: System.Windows.Threading.Dispatcher\n  parent: System.Windows.Threading\n  isExternal: false\n  name: Dispatcher\n  nameWithType: Dispatcher\n  fullName: System.Windows.Threading.Dispatcher\n- uid: System.Windows.Threading.DispatcherOperation.GetAwaiter\n  parent: System.Windows.Threading.DispatcherOperation\n  isExternal: false\n  name: GetAwaiter()\n  nameWithType: DispatcherOperation.GetAwaiter()\n  fullName: System.Windows.Threading.DispatcherOperation.GetAwaiter()\n- uid: System.Runtime.CompilerServices.TaskAwaiter\n  parent: System.Runtime.CompilerServices\n  isExternal: true\n  name: TaskAwaiter\n  nameWithType: TaskAwaiter\n  fullName: System.Runtime.CompilerServices.TaskAwaiter\n- uid: System.Windows.Threading.DispatcherOperation.InvokeDelegateCore\n  parent: System.Windows.Threading.DispatcherOperation\n  isExternal: false\n  name: InvokeDelegateCore()\n  nameWithType: DispatcherOperation.InvokeDelegateCore()\n  fullName: System.Windows.Threading.DispatcherOperation.InvokeDelegateCore()\n- uid: System.Windows.Threading.DispatcherOperation.Priority\n  parent: System.Windows.Threading.DispatcherOperation\n  isExternal: false\n  name: Priority\n  nameWithType: DispatcherOperation.Priority\n  fullName: System.Windows.Threading.DispatcherOperation.Priority\n- uid: System.Windows.Threading.DispatcherPriority\n  parent: System.Windows.Threading\n  isExternal: false\n  name: DispatcherPriority\n  nameWithType: DispatcherPriority\n  fullName: System.Windows.Threading.DispatcherPriority\n- uid: System.Windows.Threading.DispatcherOperation.Result\n  parent: System.Windows.Threading.DispatcherOperation\n  isExternal: false\n  name: Result\n  nameWithType: DispatcherOperation.Result\n  fullName: System.Windows.Threading.DispatcherOperation.Result\n- uid: System.Windows.Threading.DispatcherOperation.Status\n  parent: System.Windows.Threading.DispatcherOperation\n  isExternal: false\n  name: Status\n  nameWithType: DispatcherOperation.Status\n  fullName: System.Windows.Threading.DispatcherOperation.Status\n- uid: System.Windows.Threading.DispatcherOperationStatus\n  parent: System.Windows.Threading\n  isExternal: false\n  name: DispatcherOperationStatus\n  nameWithType: DispatcherOperationStatus\n  fullName: System.Windows.Threading.DispatcherOperationStatus\n- uid: System.Windows.Threading.DispatcherOperation.Task\n  parent: System.Windows.Threading.DispatcherOperation\n  isExternal: false\n  name: Task\n  nameWithType: DispatcherOperation.Task\n  fullName: System.Windows.Threading.DispatcherOperation.Task\n- uid: System.Threading.Tasks.Task\n  parent: System.Threading.Tasks\n  isExternal: true\n  name: Task\n  nameWithType: Task\n  fullName: System.Threading.Tasks.Task\n- uid: System.Windows.Threading.DispatcherOperation.Wait\n  parent: System.Windows.Threading.DispatcherOperation\n  isExternal: false\n  name: Wait()\n  nameWithType: DispatcherOperation.Wait()\n  fullName: System.Windows.Threading.DispatcherOperation.Wait()\n- uid: System.Windows.Threading.DispatcherOperation.Wait(System.TimeSpan)\n  parent: System.Windows.Threading.DispatcherOperation\n  isExternal: false\n  name: Wait(TimeSpan)\n  nameWithType: DispatcherOperation.Wait(TimeSpan)\n  fullName: System.Windows.Threading.DispatcherOperation.Wait(TimeSpan)\n- uid: System.TimeSpan\n  parent: System\n  isExternal: true\n  name: TimeSpan\n  nameWithType: TimeSpan\n  fullName: System.TimeSpan\n- uid: System.Windows.Threading.DispatcherOperation.Abort*\n  parent: System.Windows.Threading.DispatcherOperation\n  isExternal: false\n  name: Abort\n  nameWithType: DispatcherOperation.Abort\n- uid: System.Windows.Threading.DispatcherOperation.Dispatcher*\n  parent: System.Windows.Threading.DispatcherOperation\n  isExternal: false\n  name: Dispatcher\n  nameWithType: DispatcherOperation.Dispatcher\n- uid: System.Windows.Threading.DispatcherOperation.GetAwaiter*\n  parent: System.Windows.Threading.DispatcherOperation\n  isExternal: false\n  name: GetAwaiter\n  nameWithType: DispatcherOperation.GetAwaiter\n- uid: System.Windows.Threading.DispatcherOperation.InvokeDelegateCore*\n  parent: System.Windows.Threading.DispatcherOperation\n  isExternal: false\n  name: InvokeDelegateCore\n  nameWithType: DispatcherOperation.InvokeDelegateCore\n- uid: System.Windows.Threading.DispatcherOperation.Priority*\n  parent: System.Windows.Threading.DispatcherOperation\n  isExternal: false\n  name: Priority\n  nameWithType: DispatcherOperation.Priority\n- uid: System.Windows.Threading.DispatcherOperation.Result*\n  parent: System.Windows.Threading.DispatcherOperation\n  isExternal: false\n  name: Result\n  nameWithType: DispatcherOperation.Result\n- uid: System.Windows.Threading.DispatcherOperation.Status*\n  parent: System.Windows.Threading.DispatcherOperation\n  isExternal: false\n  name: Status\n  nameWithType: DispatcherOperation.Status\n- uid: System.Windows.Threading.DispatcherOperation.Task*\n  parent: System.Windows.Threading.DispatcherOperation\n  isExternal: false\n  name: Task\n  nameWithType: DispatcherOperation.Task\n- uid: System.Windows.Threading.DispatcherOperation.Wait*\n  parent: System.Windows.Threading.DispatcherOperation\n  isExternal: false\n  name: Wait\n  nameWithType: DispatcherOperation.Wait\n"}