{"nodes":[{"pos":[1464,1513],"content":"Listens for connections from TCP network clients.","needQuote":true,"needEscape":true,"nodes":[{"content":"Listens for connections from TCP network clients.","pos":[0,49]}]},{"pos":[1526,3251],"content":"The TcpListener class provides simple methods that listen for and accept incoming connection requests in blocking synchronous mode. You can use either a <xref:System.Net.Sockets.TcpClient> or a <xref:System.Net.Sockets.Socket> to connect with a TcpListener. Create a TcpListener using an <xref:System.Net.IPEndPoint>, a Local IP address and port number, or just a port number. Specify <xref:System.Net.IPAddress.Any> for the local IP address and 0 for the local port number if you want the underlying service provider to assign those values for you. If you choose to do this, you can use the <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> property to identify the assigned information, after the socket has connected.       Use the <xref:System.Net.Sockets.TcpListener.Start%2A> method to begin listening for incoming connection requests. <xref:System.Net.Sockets.TcpListener.Start%2A> will queue incoming connections until you either call the <xref:System.Net.Sockets.TcpListener.Stop%2A> method or it has queued <xref:System.Net.Sockets.SocketOptionName>. Use either <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> or <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> to pull a connection from the incoming connection request queue. These two methods will block. If you want to avoid blocking, you can use the <xref:System.Net.Sockets.TcpListener.Pending%2A> method first to determine if connection requests are available in the queue.       Call the <xref:System.Net.Sockets.TcpListener.Stop%2A> method to close the TcpListener.      > [!NOTE] >  The <xref:System.Net.Sockets.TcpListener.Stop%2A> method does not close any accepted connections. You are responsible for closing these separately.","needQuote":false,"needEscape":true,"nodes":[{"content":"The TcpListener class provides simple methods that listen for and accept incoming connection requests in blocking synchronous mode.","pos":[0,131]},{"content":"You can use either a &lt;xref:System.Net.Sockets.TcpClient&gt; or a &lt;xref:System.Net.Sockets.Socket&gt; to connect with a TcpListener.","pos":[132,257],"source":" You can use either a <xref:System.Net.Sockets.TcpClient> or a <xref:System.Net.Sockets.Socket> to connect with a TcpListener."},{"content":"Create a TcpListener using an &lt;xref:System.Net.IPEndPoint&gt;, a Local IP address and port number, or just a port number.","pos":[258,376],"source":" Create a TcpListener using an <xref:System.Net.IPEndPoint>, a Local IP address and port number, or just a port number."},{"content":"Specify &lt;xref:System.Net.IPAddress.Any&gt; for the local IP address and 0 for the local port number if you want the underlying service provider to assign those values for you.","pos":[377,549],"source":" Specify <xref:System.Net.IPAddress.Any> for the local IP address and 0 for the local port number if you want the underlying service provider to assign those values for you."},{"content":"If you choose to do this, you can use the &lt;xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A&gt; property to identify the assigned information, after the socket has connected.","pos":[550,725],"source":" If you choose to do this, you can use the <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> property to identify the assigned information, after the socket has connected."},{"content":"Use the &lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt; method to begin listening for incoming connection requests.","pos":[732,846],"source":"       Use the <xref:System.Net.Sockets.TcpListener.Start%2A> method to begin listening for incoming connection requests."},{"content":"&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt; will queue incoming connections until you either call the &lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt; method or it has queued &lt;xref:System.Net.Sockets.SocketOptionName&gt;.","pos":[847,1065],"source":" <xref:System.Net.Sockets.TcpListener.Start%2A> will queue incoming connections until you either call the <xref:System.Net.Sockets.TcpListener.Stop%2A> method or it has queued <xref:System.Net.Sockets.SocketOptionName>."},{"content":"Use either &lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt; or &lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt; to pull a connection from the incoming connection request queue.","pos":[1066,1255],"source":" Use either <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> or <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> to pull a connection from the incoming connection request queue."},{"content":"These two methods will block.","pos":[1256,1285]},{"content":"If you want to avoid blocking, you can use the &lt;xref:System.Net.Sockets.TcpListener.Pending%2A&gt; method first to determine if connection requests are available in the queue.","pos":[1286,1458],"source":" If you want to avoid blocking, you can use the <xref:System.Net.Sockets.TcpListener.Pending%2A> method first to determine if connection requests are available in the queue."},{"content":"Call the &lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt; method to close the TcpListener.","pos":[1465,1552],"source":"       Call the <xref:System.Net.Sockets.TcpListener.Stop%2A> method to close the TcpListener."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The &lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt; method does not close any accepted connections.","pos":[1558,1668],"source":"      > [!NOTE] >  The <xref:System.Net.Sockets.TcpListener.Stop%2A> method does not close any accepted connections."},{"content":"You are responsible for closing these separately.","pos":[1669,1718]}]},{"pos":[4230,4357],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.TcpListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class that listens on the specified port.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Net.Sockets.TcpListener\"></xref> class that listens on the specified port."},{"pos":[4370,5336],"content":"This constructor is obsolete. Use the <xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPAddress%2CSystem.Int32%29?displayProperty=fullName> or <xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPEndPoint%29?displayProperty=fullName> constructors.       This constructor allows you to specify the port number on which to listen for incoming connection attempts. With this constructor, the underlying service provider assigns the most appropriate network address. If you do not care which local port is used, you can specify 0 for the port number. In this case, the service provider will assign an available port number between 1024 and 5000. If you use this approach, you can discover what local network address and port number has been assigned by using the <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> property.       Call the <xref:System.Net.Sockets.TcpListener.Start%2A> method to begin listening for incoming connection attempts.","needQuote":false,"needEscape":true,"nodes":[{"content":"This constructor is obsolete. Use the <xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPAddress%2CSystem.Int32%29?displayProperty=fullName> or <xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPEndPoint%29?displayProperty=fullName> constructors.       This constructor allows you to specify the port number on which to listen for incoming connection attempts. With this constructor, the underlying service provider assigns the most appropriate network address. If you do not care which local port is used, you can specify 0 for the port number. In this case, the service provider will assign an available port number between 1024 and 5000. If you use this approach, you can discover what local network address and port number has been assigned by using the <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> property.       Call the <xref:System.Net.Sockets.TcpListener.Start%2A> method to begin listening for incoming connection attempts.","pos":[0,962],"nodes":[{"content":"This constructor is obsolete.","pos":[0,29]},{"content":"Use the &lt;xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPAddress%2CSystem.Int32%29?displayProperty=fullName&gt; or &lt;xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPEndPoint%29?displayProperty=fullName&gt; constructors.","pos":[30,264],"source":" Use the <xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPAddress%2CSystem.Int32%29?displayProperty=fullName> or <xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPEndPoint%29?displayProperty=fullName> constructors."},{"content":"This constructor allows you to specify the port number on which to listen for incoming connection attempts.","pos":[271,378]},{"content":"With this constructor, the underlying service provider assigns the most appropriate network address.","pos":[379,479]},{"content":"If you do not care which local port is used, you can specify 0 for the port number.","pos":[480,563]},{"content":"In this case, the service provider will assign an available port number between 1024 and 5000.","pos":[564,658]},{"content":"If you use this approach, you can discover what local network address and port number has been assigned by using the &lt;xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A&gt; property.","pos":[659,840],"source":" If you use this approach, you can discover what local network address and port number has been assigned by using the <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> property."},{"content":"Call the &lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt; method to begin listening for incoming connection attempts.","pos":[847,962],"source":"       Call the <xref:System.Net.Sockets.TcpListener.Start%2A> method to begin listening for incoming connection attempts."}]}]},{"pos":[5983,6044],"content":"The port on which to listen for incoming connection attempts.","needQuote":true,"needEscape":true,"nodes":[{"content":"The port on which to listen for incoming connection attempts.","pos":[0,61]}]},{"pos":[6223,6334],"content":"<ph id=\"ph1\">&lt;code&gt;port&lt;/code&gt;</ph> is not between <ph id=\"ph2\">&lt;xref:System.Net.IPEndPoint.MinPort&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Net.IPEndPoint.MaxPort&gt;</ph>.","needQuote":true,"needEscape":true,"source":"<code>port</code> is not between <xref:System.Net.IPEndPoint.MinPort> and <xref:System.Net.IPEndPoint.MaxPort>."},{"pos":[6762,6888],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.TcpListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified local endpoint.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Net.Sockets.TcpListener\"></xref> class with the specified local endpoint."},{"pos":[6901,8351],"content":"This constructor allows you to specify the local IP address and port number on which to listen for incoming connection attempts. Before using this constructor, you must create an <xref:System.Net.IPEndPoint> using the desired local IP address and port number. Pass this <xref:System.Net.IPEndPoint> to the constructor as the `localEP` parameter.       If you do not care which local address is assigned, you can create an <xref:System.Net.IPEndPoint> using <xref:System.Net.IPAddress.Any?displayProperty=fullName> as the address parameter, and the underlying service provider will assign the most appropriate network address. This might help simplify your application if you have multiple network interfaces. If you do not care which local port is used, you can create an <xref:System.Net.IPEndPoint> using 0 for the port number. In this case, the service provider will assign an available port number between 1024 and 5000. If you use this approach, you can discover what local network address and port number has been assigned by using the <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> property.       Call the <xref:System.Net.Sockets.TcpListener.Start%2A> method to begin listening for incoming connection attempts.      > [!NOTE] >  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"This constructor allows you to specify the local IP address and port number on which to listen for incoming connection attempts.","pos":[0,128]},{"content":"Before using this constructor, you must create an &lt;xref:System.Net.IPEndPoint&gt; using the desired local IP address and port number.","pos":[129,259],"source":" Before using this constructor, you must create an <xref:System.Net.IPEndPoint> using the desired local IP address and port number."},{"content":"Pass this &lt;xref:System.Net.IPEndPoint&gt; to the constructor as the <ph id=\"ph1\">`localEP`</ph> parameter.","pos":[260,345],"source":" Pass this <xref:System.Net.IPEndPoint> to the constructor as the `localEP` parameter."},{"content":"If you do not care which local address is assigned, you can create an &lt;xref:System.Net.IPEndPoint&gt; using &lt;xref:System.Net.IPAddress.Any?displayProperty=fullName&gt; as the address parameter, and the underlying service provider will assign the most appropriate network address.","pos":[352,625],"source":"       If you do not care which local address is assigned, you can create an <xref:System.Net.IPEndPoint> using <xref:System.Net.IPAddress.Any?displayProperty=fullName> as the address parameter, and the underlying service provider will assign the most appropriate network address."},{"content":"This might help simplify your application if you have multiple network interfaces.","pos":[626,708]},{"content":"If you do not care which local port is used, you can create an &lt;xref:System.Net.IPEndPoint&gt; using 0 for the port number.","pos":[709,829],"source":" If you do not care which local port is used, you can create an <xref:System.Net.IPEndPoint> using 0 for the port number."},{"content":"In this case, the service provider will assign an available port number between 1024 and 5000.","pos":[830,924]},{"content":"If you use this approach, you can discover what local network address and port number has been assigned by using the &lt;xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A&gt; property.","pos":[925,1106],"source":" If you use this approach, you can discover what local network address and port number has been assigned by using the <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> property."},{"content":"Call the &lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt; method to begin listening for incoming connection attempts.","pos":[1113,1228],"source":"       Call the <xref:System.Net.Sockets.TcpListener.Start%2A> method to begin listening for incoming connection attempts."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  This member outputs trace information when you enable network tracing in your application.","pos":[1234,1337],"source":"      > [!NOTE] >  This member outputs trace information when you enable network tracing in your application."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1338,1443],"source":" For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[9053,9183],"content":"An <xref:System.Net.IPEndPoint> that represents the local endpoint to which to bind the listener <xref:System.Net.Sockets.Socket>.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Net.IPEndPoint&gt; that represents the local endpoint to which to bind the listener &lt;xref:System.Net.Sockets.Socket&gt;.","pos":[0,130],"source":"An <xref:System.Net.IPEndPoint> that represents the local endpoint to which to bind the listener <xref:System.Net.Sockets.Socket>."}]},{"pos":[9350,9435],"content":"<ph id=\"ph1\">&lt;code&gt;localEP&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>localEP</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[9902,10090],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.TcpListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class that listens for incoming connection attempts on the specified local IP address and port number.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Net.Sockets.TcpListener\"></xref> class that listens for incoming connection attempts on the specified local IP address and port number."},{"pos":[10103,11456],"content":"This constructor allows you to specify the local IP address and port number on which to listen for incoming connection attempts. Before calling this constructor you must first create an <xref:System.Net.IPAddress> using the desired local address. Pass this <xref:System.Net.IPAddress> to the constructor as the `localaddr` parameter. If you do not care which local address is assigned, specify <xref:System.Net.IPAddress.Any?displayProperty=fullName> for the `localaddr` parameter, and the underlying service provider will assign the most appropriate network address. This might help simplify your application if you have multiple network interfaces. If you do not care which local port is used, you can specify 0 for the port number. In this case, the service provider will assign an available port number between 1024 and 5000. If you use this approach, you can discover what local network address and port number has been assigned by using the <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> property.       Call the <xref:System.Net.Sockets.TcpListener.Start%2A> method to begin listening for incoming connection attempts.      > [!NOTE] >  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"This constructor allows you to specify the local IP address and port number on which to listen for incoming connection attempts.","pos":[0,128]},{"content":"Before calling this constructor you must first create an &lt;xref:System.Net.IPAddress&gt; using the desired local address.","pos":[129,246],"source":" Before calling this constructor you must first create an <xref:System.Net.IPAddress> using the desired local address."},{"content":"Pass this &lt;xref:System.Net.IPAddress&gt; to the constructor as the <ph id=\"ph1\">`localaddr`</ph> parameter.","pos":[247,333],"source":" Pass this <xref:System.Net.IPAddress> to the constructor as the `localaddr` parameter."},{"content":"If you do not care which local address is assigned, specify &lt;xref:System.Net.IPAddress.Any?displayProperty=fullName&gt; for the <ph id=\"ph1\">`localaddr`</ph> parameter, and the underlying service provider will assign the most appropriate network address.","pos":[334,567],"source":" If you do not care which local address is assigned, specify <xref:System.Net.IPAddress.Any?displayProperty=fullName> for the `localaddr` parameter, and the underlying service provider will assign the most appropriate network address."},{"content":"This might help simplify your application if you have multiple network interfaces.","pos":[568,650]},{"content":"If you do not care which local port is used, you can specify 0 for the port number.","pos":[651,734]},{"content":"In this case, the service provider will assign an available port number between 1024 and 5000.","pos":[735,829]},{"content":"If you use this approach, you can discover what local network address and port number has been assigned by using the &lt;xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A&gt; property.","pos":[830,1011],"source":" If you use this approach, you can discover what local network address and port number has been assigned by using the <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> property."},{"content":"Call the &lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt; method to begin listening for incoming connection attempts.","pos":[1018,1133],"source":"       Call the <xref:System.Net.Sockets.TcpListener.Start%2A> method to begin listening for incoming connection attempts."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  This member outputs trace information when you enable network tracing in your application.","pos":[1139,1242],"source":"      > [!NOTE] >  This member outputs trace information when you enable network tracing in your application."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1243,1348],"source":" For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[12186,12254],"content":"An <xref:System.Net.IPAddress> that represents the local IP address.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Net.IPAddress&gt; that represents the local IP address.","pos":[0,68],"source":"An <xref:System.Net.IPAddress> that represents the local IP address."}]},{"pos":[12314,12375],"content":"The port on which to listen for incoming connection attempts.","needQuote":true,"needEscape":true,"nodes":[{"content":"The port on which to listen for incoming connection attempts.","pos":[0,61]}]},{"pos":[12542,12629],"content":"<ph id=\"ph1\">&lt;code&gt;localaddr&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>localaddr</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[12744,12855],"content":"<ph id=\"ph1\">&lt;code&gt;port&lt;/code&gt;</ph> is not between <ph id=\"ph2\">&lt;xref:System.Net.IPEndPoint.MinPort&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Net.IPEndPoint.MaxPort&gt;</ph>.","needQuote":true,"needEscape":true,"source":"<code>port</code> is not between <xref:System.Net.IPEndPoint.MinPort> and <xref:System.Net.IPEndPoint.MaxPort>."},{"pos":[13217,13254],"content":"Accepts a pending connection request.","needQuote":true,"needEscape":true,"nodes":[{"content":"Accepts a pending connection request.","pos":[0,37]}]},{"pos":[13267,14569],"content":"AcceptSocket is a blocking method that returns a <xref:System.Net.Sockets.Socket> that you can use to send and receive data. If you want to avoid blocking, use the <xref:System.Net.Sockets.TcpListener.Pending%2A> method to determine if connection requests are available in the incoming connection queue.       The <xref:System.Net.Sockets.Socket> returned is initialized with the IP address and port number of the remote host. You can use any of the <xref:System.Net.Sockets.Socket.Send%2A> and <xref:System.Net.Sockets.Socket.Receive%2A> methods available in the <xref:System.Net.Sockets.Socket> class to communicate with the remote host. When you are finished using the <xref:System.Net.Sockets.Socket>, be sure to call its <xref:System.Net.Sockets.Socket.Close%2A> method. If your application is relatively simple, consider using the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method rather than the AcceptSocket method. <xref:System.Net.Sockets.TcpClient> provides you with simple methods for sending and receiving data over a network in blocking synchronous mode.      > [!NOTE] >  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"AcceptSocket is a blocking method that returns a &lt;xref:System.Net.Sockets.Socket&gt; that you can use to send and receive data.","pos":[0,124],"source":"AcceptSocket is a blocking method that returns a <xref:System.Net.Sockets.Socket> that you can use to send and receive data."},{"content":"If you want to avoid blocking, use the &lt;xref:System.Net.Sockets.TcpListener.Pending%2A&gt; method to determine if connection requests are available in the incoming connection queue.","pos":[125,303],"source":" If you want to avoid blocking, use the <xref:System.Net.Sockets.TcpListener.Pending%2A> method to determine if connection requests are available in the incoming connection queue."},{"content":"The &lt;xref:System.Net.Sockets.Socket&gt; returned is initialized with the IP address and port number of the remote host.","pos":[310,426],"source":"       The <xref:System.Net.Sockets.Socket> returned is initialized with the IP address and port number of the remote host."},{"content":"You can use any of the &lt;xref:System.Net.Sockets.Socket.Send%2A&gt; and &lt;xref:System.Net.Sockets.Socket.Receive%2A&gt; methods available in the &lt;xref:System.Net.Sockets.Socket&gt; class to communicate with the remote host.","pos":[427,639],"source":" You can use any of the <xref:System.Net.Sockets.Socket.Send%2A> and <xref:System.Net.Sockets.Socket.Receive%2A> methods available in the <xref:System.Net.Sockets.Socket> class to communicate with the remote host."},{"content":"When you are finished using the &lt;xref:System.Net.Sockets.Socket&gt;, be sure to call its &lt;xref:System.Net.Sockets.Socket.Close%2A&gt; method.","pos":[640,775],"source":" When you are finished using the <xref:System.Net.Sockets.Socket>, be sure to call its <xref:System.Net.Sockets.Socket.Close%2A> method."},{"content":"If your application is relatively simple, consider using the &lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt; method rather than the AcceptSocket method.","pos":[776,937],"source":" If your application is relatively simple, consider using the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method rather than the AcceptSocket method."},{"content":"&lt;xref:System.Net.Sockets.TcpClient&gt; provides you with simple methods for sending and receiving data over a network in blocking synchronous mode.","pos":[938,1082],"source":" <xref:System.Net.Sockets.TcpClient> provides you with simple methods for sending and receiving data over a network in blocking synchronous mode."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  This member outputs trace information when you enable network tracing in your application.","pos":[1088,1191],"source":"      > [!NOTE] >  This member outputs trace information when you enable network tracing in your application."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1192,1297],"source":" For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[15346,15411],"content":"A <xref:System.Net.Sockets.Socket> used to send and receive data.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Net.Sockets.Socket&gt; used to send and receive data.","pos":[0,65],"source":"A <xref:System.Net.Sockets.Socket> used to send and receive data."}]},{"pos":[15593,15687],"content":"The listener has not been started with a call to <xref:System.Net.Sockets.TcpListener.Start*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The listener has not been started with a call to &lt;xref:System.Net.Sockets.TcpListener.Start*&gt;.","pos":[0,94],"source":"The listener has not been started with a call to <xref:System.Net.Sockets.TcpListener.Start*>."}]},{"pos":[16074,16140],"content":"Accepts a pending connection request as an asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Accepts a pending connection request as an asynchronous operation.","pos":[0,66]}]},{"pos":[16153,17349],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the socket connection has been accepted.       The <xref:System.Net.Sockets.Socket> returned in <xref:System.Threading.Tasks.Task%601> is initialized with the IP address and port number of the remote host. You can use any of the <xref:System.Net.Sockets.Socket.Send%2A> and <xref:System.Net.Sockets.Socket.Receive%2A> methods available in the <xref:System.Net.Sockets.Socket> class to communicate with the remote host. When you are finished using the <xref:System.Net.Sockets.Socket>, be sure to call its <xref:System.Net.Sockets.Socket.Close%2A> method. If your application is relatively simple, consider using the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method rather than the AcceptSocketAsync method. <xref:System.Net.Sockets.TcpClient> provides you with simple methods for sending and receiving data over a network in blocking synchronous mode.      > [!NOTE] >  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned &lt;xref:System.Threading.Tasks.Task%601&gt; object will complete after the socket connection has been accepted.","pos":[31,150],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete after the socket connection has been accepted."},{"content":"The &lt;xref:System.Net.Sockets.Socket&gt; returned in &lt;xref:System.Threading.Tasks.Task%601&gt; is initialized with the IP address and port number of the remote host.","pos":[157,315],"source":"       The <xref:System.Net.Sockets.Socket> returned in <xref:System.Threading.Tasks.Task%601> is initialized with the IP address and port number of the remote host."},{"content":"You can use any of the &lt;xref:System.Net.Sockets.Socket.Send%2A&gt; and &lt;xref:System.Net.Sockets.Socket.Receive%2A&gt; methods available in the &lt;xref:System.Net.Sockets.Socket&gt; class to communicate with the remote host.","pos":[316,528],"source":" You can use any of the <xref:System.Net.Sockets.Socket.Send%2A> and <xref:System.Net.Sockets.Socket.Receive%2A> methods available in the <xref:System.Net.Sockets.Socket> class to communicate with the remote host."},{"content":"When you are finished using the &lt;xref:System.Net.Sockets.Socket&gt;, be sure to call its &lt;xref:System.Net.Sockets.Socket.Close%2A&gt; method.","pos":[529,664],"source":" When you are finished using the <xref:System.Net.Sockets.Socket>, be sure to call its <xref:System.Net.Sockets.Socket.Close%2A> method."},{"content":"If your application is relatively simple, consider using the &lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt; method rather than the AcceptSocketAsync method.","pos":[665,831],"source":" If your application is relatively simple, consider using the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method rather than the AcceptSocketAsync method."},{"content":"&lt;xref:System.Net.Sockets.TcpClient&gt; provides you with simple methods for sending and receiving data over a network in blocking synchronous mode.","pos":[832,976],"source":" <xref:System.Net.Sockets.TcpClient> provides you with simple methods for sending and receiving data over a network in blocking synchronous mode."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  This member outputs trace information when you enable network tracing in your application.","pos":[982,1085],"source":"      > [!NOTE] >  This member outputs trace information when you enable network tracing in your application."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1086,1191],"source":" For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[17576,17854],"content":"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;       The task object representing the asynchronous operation. The &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; property on the task object returns a <xref:System.Net.Sockets.Socket> used to send and receive data.","needQuote":false,"needEscape":true,"nodes":[{"content":"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;       The task object representing the asynchronous operation. The &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; property on the task object returns a <xref:System.Net.Sockets.Socket> used to send and receive data.","pos":[0,276],"nodes":[{"content":"Returns <ph id=\"ph1\">&amp;lt;</ph>xref:System.Threading.Tasks.Task%601<ph id=\"ph2\">&amp;gt;</ph>       The task object representing the asynchronous operation.","pos":[0,115],"source":"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;       The task object representing the asynchronous operation."},{"content":"The <ph id=\"ph1\">&amp;lt;</ph>xref:System.Threading.Tasks.Task%601.Result%2A<ph id=\"ph2\">&amp;gt;</ph> property on the task object returns a &lt;xref:System.Net.Sockets.Socket&gt; used to send and receive data.","pos":[116,276],"source":" The &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; property on the task object returns a <xref:System.Net.Sockets.Socket> used to send and receive data."}]}]},{"pos":[18042,18136],"content":"The listener has not been started with a call to <xref:System.Net.Sockets.TcpListener.Start*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The listener has not been started with a call to &lt;xref:System.Net.Sockets.TcpListener.Start*&gt;.","pos":[0,94],"source":"The listener has not been started with a call to <xref:System.Net.Sockets.TcpListener.Start*>."}]},{"pos":[18513,18550],"content":"Accepts a pending connection request.","needQuote":true,"needEscape":true,"nodes":[{"content":"Accepts a pending connection request.","pos":[0,37]}]},{"pos":[18563,19719],"content":"AcceptTcpClient is a blocking method that returns a <xref:System.Net.Sockets.TcpClient> that you can use to send and receive data. Use the <xref:System.Net.Sockets.TcpListener.Pending%2A> method to determine if connection requests are available in the incoming connection queue if you want to avoid blocking.       Use the <xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=fullName> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream> of the returned <xref:System.Net.Sockets.TcpClient>. The <xref:System.Net.Sockets.NetworkStream> will provide you with methods for sending and receiving with the remote host. When you are through with the <xref:System.Net.Sockets.TcpClient>, be sure to call its <xref:System.Net.Sockets.TcpClient.Close%2A> method. If you want greater flexibility than a <xref:System.Net.Sockets.TcpClient> offers, consider using <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>.      > [!NOTE] >  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"AcceptTcpClient is a blocking method that returns a &lt;xref:System.Net.Sockets.TcpClient&gt; that you can use to send and receive data.","pos":[0,130],"source":"AcceptTcpClient is a blocking method that returns a <xref:System.Net.Sockets.TcpClient> that you can use to send and receive data."},{"content":"Use the &lt;xref:System.Net.Sockets.TcpListener.Pending%2A&gt; method to determine if connection requests are available in the incoming connection queue if you want to avoid blocking.","pos":[131,308],"source":" Use the <xref:System.Net.Sockets.TcpListener.Pending%2A> method to determine if connection requests are available in the incoming connection queue if you want to avoid blocking."},{"content":"Use the &lt;xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=fullName&gt; method to obtain the underlying &lt;xref:System.Net.Sockets.NetworkStream&gt; of the returned &lt;xref:System.Net.Sockets.TcpClient&gt;.","pos":[315,521],"source":"       Use the <xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=fullName> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream> of the returned <xref:System.Net.Sockets.TcpClient>."},{"content":"The &lt;xref:System.Net.Sockets.NetworkStream&gt; will provide you with methods for sending and receiving with the remote host.","pos":[522,643],"source":" The <xref:System.Net.Sockets.NetworkStream> will provide you with methods for sending and receiving with the remote host."},{"content":"When you are through with the &lt;xref:System.Net.Sockets.TcpClient&gt;, be sure to call its &lt;xref:System.Net.Sockets.TcpClient.Close%2A&gt; method.","pos":[644,783],"source":" When you are through with the <xref:System.Net.Sockets.TcpClient>, be sure to call its <xref:System.Net.Sockets.TcpClient.Close%2A> method."},{"content":"If you want greater flexibility than a &lt;xref:System.Net.Sockets.TcpClient&gt; offers, consider using &lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;.","pos":[784,936],"source":" If you want greater flexibility than a <xref:System.Net.Sockets.TcpClient> offers, consider using <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  This member outputs trace information when you enable network tracing in your application.","pos":[942,1045],"source":"      > [!NOTE] >  This member outputs trace information when you enable network tracing in your application."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1046,1151],"source":" For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[20436,20518],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.TcpClient\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> used to send and receive data.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Net.Sockets.TcpClient\"></xref> used to send and receive data."},{"pos":[20703,20797],"content":"The listener has not been started with a call to <xref:System.Net.Sockets.TcpListener.Start*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The listener has not been started with a call to &lt;xref:System.Net.Sockets.TcpListener.Start*&gt;.","pos":[0,94],"source":"The listener has not been started with a call to <xref:System.Net.Sockets.TcpListener.Start*>."}]},{"pos":[20912,21208],"content":"Use the &lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt; property to obtain the specific error code. When you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","needQuote":true,"needEscape":true,"nodes":[{"content":"Use the &lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt; property to obtain the specific error code. When you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[0,296],"nodes":[{"content":"Use the <ph id=\"ph1\">&amp;lt;</ph>xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph> property to obtain the specific error code.","pos":[0,137],"source":"Use the &lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt; property to obtain the specific error code."},{"content":"When you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[138,296]}]}]},{"pos":[21610,21676],"content":"Accepts a pending connection request as an asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Accepts a pending connection request as an asynchronous operation.","pos":[0,66]}]},{"pos":[21689,22792],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the TCP connection has been accepted.       Use the <xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=fullName> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream> of the returned <xref:System.Net.Sockets.TcpClient> in the <xref:System.Threading.Tasks.Task%601>. The <xref:System.Net.Sockets.NetworkStream> will provide you with methods for sending and receiving with the remote host. When you are through with the <xref:System.Net.Sockets.TcpClient>, be sure to call its <xref:System.Net.Sockets.TcpClient.Close%2A> method. If you want greater flexibility than a <xref:System.Net.Sockets.TcpClient> offers, consider using <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> or <xref:System.Net.Sockets.TcpListener.AcceptSocketAsync%2A>.      > [!NOTE] >  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned &lt;xref:System.Threading.Tasks.Task%601&gt; object will complete after the TCP connection has been accepted.","pos":[31,147],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete after the TCP connection has been accepted."},{"content":"Use the &lt;xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=fullName&gt; method to obtain the underlying &lt;xref:System.Net.Sockets.NetworkStream&gt; of the returned &lt;xref:System.Net.Sockets.TcpClient&gt; in the &lt;xref:System.Threading.Tasks.Task%601&gt;.","pos":[154,406],"source":"       Use the <xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=fullName> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream> of the returned <xref:System.Net.Sockets.TcpClient> in the <xref:System.Threading.Tasks.Task%601>."},{"content":"The &lt;xref:System.Net.Sockets.NetworkStream&gt; will provide you with methods for sending and receiving with the remote host.","pos":[407,528],"source":" The <xref:System.Net.Sockets.NetworkStream> will provide you with methods for sending and receiving with the remote host."},{"content":"When you are through with the &lt;xref:System.Net.Sockets.TcpClient&gt;, be sure to call its &lt;xref:System.Net.Sockets.TcpClient.Close%2A&gt; method.","pos":[529,668],"source":" When you are through with the <xref:System.Net.Sockets.TcpClient>, be sure to call its <xref:System.Net.Sockets.TcpClient.Close%2A> method."},{"content":"If you want greater flexibility than a &lt;xref:System.Net.Sockets.TcpClient&gt; offers, consider using &lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt; or &lt;xref:System.Net.Sockets.TcpListener.AcceptSocketAsync%2A&gt;.","pos":[669,883],"source":" If you want greater flexibility than a <xref:System.Net.Sockets.TcpClient> offers, consider using <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> or <xref:System.Net.Sockets.TcpListener.AcceptSocketAsync%2A>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  This member outputs trace information when you enable network tracing in your application.","pos":[889,992],"source":"      > [!NOTE] >  This member outputs trace information when you enable network tracing in your application."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[993,1098],"source":" For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[23028,23325],"content":"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;       The task object representing the asynchronous operation. The &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; property on the task object returns a <xref href=\"System.Net.Sockets.TcpClient\"></xref> used to send and receive data.","needQuote":false,"needEscape":true,"nodes":[{"content":"Returns <ph id=\"ph1\">&amp;lt;</ph>xref:System.Threading.Tasks.Task%601<ph id=\"ph2\">&amp;gt;</ph>       The task object representing the asynchronous operation.","pos":[0,115],"source":"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;       The task object representing the asynchronous operation."},{"content":"The <ph id=\"ph1\">&amp;lt;</ph>xref:System.Threading.Tasks.Task%601.Result%2A<ph id=\"ph2\">&amp;gt;</ph> property on the task object returns a <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.TcpClient\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> used to send and receive data.","pos":[116,293],"source":" The &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; property on the task object returns a <xref href=\"System.Net.Sockets.TcpClient\"></xref> used to send and receive data."}]},{"pos":[23516,23610],"content":"The listener has not been started with a call to <xref:System.Net.Sockets.TcpListener.Start*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The listener has not been started with a call to &lt;xref:System.Net.Sockets.TcpListener.Start*&gt;.","pos":[0,94],"source":"The listener has not been started with a call to <xref:System.Net.Sockets.TcpListener.Start*>."}]},{"pos":[23725,24021],"content":"Use the &lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt; property to obtain the specific error code. When you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","needQuote":true,"needEscape":true,"nodes":[{"content":"Use the &lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt; property to obtain the specific error code. When you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[0,296],"nodes":[{"content":"Use the <ph id=\"ph1\">&amp;lt;</ph>xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph> property to obtain the specific error code.","pos":[0,137],"source":"Use the &lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt; property to obtain the specific error code."},{"content":"When you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[138,296]}]}]},{"pos":[24349,24482],"content":"Gets a value that indicates whether <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.TcpListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is actively listening for client connections.","needQuote":true,"needEscape":true,"source":"Gets a value that indicates whether <xref href=\"System.Net.Sockets.TcpListener\"></xref> is actively listening for client connections."},{"pos":[24494,24832],"content":"Classes deriving from <xref:System.Net.Sockets.TcpListener> can use this property to determine if the <xref:System.Net.Sockets.Socket> is currently listening for incoming connection attempts. The <xref:System.Net.Sockets.TcpClient.Active%2A> property can be used to avoid redundant <xref:System.Net.Sockets.TcpListener.Start%2A> attempts.","needQuote":true,"needEscape":true,"nodes":[{"content":"Classes deriving from <xref:System.Net.Sockets.TcpListener> can use this property to determine if the <xref:System.Net.Sockets.Socket> is currently listening for incoming connection attempts. The <xref:System.Net.Sockets.TcpClient.Active%2A> property can be used to avoid redundant <xref:System.Net.Sockets.TcpListener.Start%2A> attempts.","pos":[0,338],"nodes":[{"content":"Classes deriving from &lt;xref:System.Net.Sockets.TcpListener&gt; can use this property to determine if the &lt;xref:System.Net.Sockets.Socket&gt; is currently listening for incoming connection attempts.","pos":[0,191],"source":"Classes deriving from <xref:System.Net.Sockets.TcpListener> can use this property to determine if the <xref:System.Net.Sockets.Socket> is currently listening for incoming connection attempts."},{"content":"The &lt;xref:System.Net.Sockets.TcpClient.Active%2A&gt; property can be used to avoid redundant &lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt; attempts.","pos":[192,338],"source":" The <xref:System.Net.Sockets.TcpClient.Active%2A> property can be used to avoid redundant <xref:System.Net.Sockets.TcpListener.Start%2A> attempts."}]}]},{"pos":[24945,25158],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if <bpt id=\"p2\">&lt;xref href=\"System.Net.Sockets.TcpListener\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> is actively listening; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <xref href=\"System.Net.Sockets.TcpListener\"></xref> is actively listening; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[25666,25796],"content":"Enables or disables Network Address Translation (NAT) traversal on a <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.TcpListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance.","needQuote":true,"needEscape":true,"source":"Enables or disables Network Address Translation (NAT) traversal on a <xref href=\"System.Net.Sockets.TcpListener\"></xref> instance."},{"pos":[25809,27167],"content":"The AllowNatTraversal method is used to enable or disable NAT traversal for a <xref:System.Net.Sockets.TcpListener> instance. NAT traversal may be provided using Teredo, 6to4, or an ISATAP tunnel.       When the `allowed` parameter is false, the <xref:System.Net.Sockets.SocketOptionName> option on the associated socket is set to <xref:System.Net.Sockets.IPProtectionLevel>. This explicitly disables NAT traversal for a <xref:System.Net.Sockets.TcpListener> instance.       When the `allowed` parameter is true, the <xref:System.Net.Sockets.SocketOptionName> option on the associated socket is set to <xref:System.Net.Sockets.IPProtectionLevel>. This may allow NAT traversal for a <xref:System.Net.Sockets.TcpListener> depending on firewall rules in place on the system.       The AllowNatTraversal method must be invoked prior to calling the <xref:System.Net.Sockets.TcpListener.Start%2A> method to begin listening for incoming connection requests (before the socket is bound). If AllowNatTraversal method is called after the <xref:System.Net.Sockets.TcpListener.Start%2A> method, then an <xref:System.InvalidOperationException> will be thrown.       A Teredo address is an IPv6 address with the prefix of 2001::/32. Teredo addresses can be returned through normal DNS name resolution or enumerated as an IPv6 address assigned to a local interface.","needQuote":false,"needEscape":true,"nodes":[{"content":"The AllowNatTraversal method is used to enable or disable NAT traversal for a &lt;xref:System.Net.Sockets.TcpListener&gt; instance.","pos":[0,125],"source":"The AllowNatTraversal method is used to enable or disable NAT traversal for a <xref:System.Net.Sockets.TcpListener> instance."},{"content":"NAT traversal may be provided using Teredo, 6to4, or an ISATAP tunnel.","pos":[126,196]},{"content":"When the <ph id=\"ph1\">`allowed`</ph> parameter is false, the &lt;xref:System.Net.Sockets.SocketOptionName&gt; option on the associated socket is set to &lt;xref:System.Net.Sockets.IPProtectionLevel&gt;.","pos":[203,375],"source":"       When the `allowed` parameter is false, the <xref:System.Net.Sockets.SocketOptionName> option on the associated socket is set to <xref:System.Net.Sockets.IPProtectionLevel>."},{"content":"This explicitly disables NAT traversal for a &lt;xref:System.Net.Sockets.TcpListener&gt; instance.","pos":[376,468],"source":" This explicitly disables NAT traversal for a <xref:System.Net.Sockets.TcpListener> instance."},{"content":"When the <ph id=\"ph1\">`allowed`</ph> parameter is true, the &lt;xref:System.Net.Sockets.SocketOptionName&gt; option on the associated socket is set to &lt;xref:System.Net.Sockets.IPProtectionLevel&gt;.","pos":[475,646],"source":"       When the `allowed` parameter is true, the <xref:System.Net.Sockets.SocketOptionName> option on the associated socket is set to <xref:System.Net.Sockets.IPProtectionLevel>."},{"content":"This may allow NAT traversal for a &lt;xref:System.Net.Sockets.TcpListener&gt; depending on firewall rules in place on the system.","pos":[647,771],"source":" This may allow NAT traversal for a <xref:System.Net.Sockets.TcpListener> depending on firewall rules in place on the system."},{"content":"The AllowNatTraversal method must be invoked prior to calling the &lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt; method to begin listening for incoming connection requests (before the socket is bound).","pos":[778,979],"source":"       The AllowNatTraversal method must be invoked prior to calling the <xref:System.Net.Sockets.TcpListener.Start%2A> method to begin listening for incoming connection requests (before the socket is bound)."},{"content":"If AllowNatTraversal method is called after the &lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt; method, then an &lt;xref:System.InvalidOperationException&gt; will be thrown.","pos":[980,1146],"source":" If AllowNatTraversal method is called after the <xref:System.Net.Sockets.TcpListener.Start%2A> method, then an <xref:System.InvalidOperationException> will be thrown."},{"content":"A Teredo address is an IPv6 address with the prefix of 2001::/32.","pos":[1153,1218]},{"content":"Teredo addresses can be returned through normal DNS name resolution or enumerated as an IPv6 address assigned to a local interface.","pos":[1219,1350]}]},{"pos":[27318,27392],"content":"A Boolean value that specifies whether to enable or disable NAT traversal.","needQuote":true,"needEscape":true,"nodes":[{"content":"A Boolean value that specifies whether to enable or disable NAT traversal.","pos":[0,74]}]},{"pos":[27579,27688],"content":"The AllowNatTraversal method was called after calling the <xref:System.Net.Sockets.TcpListener.Start*> method","needQuote":true,"needEscape":true,"nodes":[{"content":"The AllowNatTraversal method was called after calling the &lt;xref:System.Net.Sockets.TcpListener.Start*&gt; method","pos":[0,109],"source":"The AllowNatTraversal method was called after calling the <xref:System.Net.Sockets.TcpListener.Start*> method"}]},{"pos":[28207,28281],"content":"Begins an asynchronous operation to accept an incoming connection attempt.","needQuote":true,"needEscape":true,"nodes":[{"content":"Begins an asynchronous operation to accept an incoming connection attempt.","pos":[0,74]}]},{"pos":[28294,29692],"content":"The asynchronous BeginAcceptSocket operation must be completed by calling the <xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A> method. Typically, the method is invoked by the `callback` delegate.       This method does not block until the operation completes. To block until the operation completes, use the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method.       For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] >  You can call the <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> property of the returned <xref:System.Net.Sockets.Socket> to identify the remote host's network address and port number.      > [!NOTE] >  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library/](http://msdn.microsoft.com/library/) for a detailed description of the error.      > [!NOTE] >  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"The asynchronous BeginAcceptSocket operation must be completed by calling the &lt;xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A&gt; method.","pos":[0,142],"source":"The asynchronous BeginAcceptSocket operation must be completed by calling the <xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A> method."},{"content":"Typically, the method is invoked by the <ph id=\"ph1\">`callback`</ph> delegate.","pos":[143,203],"source":" Typically, the method is invoked by the `callback` delegate."},{"content":"This method does not block until the operation completes.","pos":[210,267]},{"content":"To block until the operation completes, use the &lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt; method.","pos":[268,377],"source":" To block until the operation completes, use the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method."},{"content":"For detailed information about using the asynchronous programming model, see <bpt id=\"p1\">[</bpt>Calling Synchronous Methods Asynchronously<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[384,545],"source":"       For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  You can call the &lt;xref:System.Net.Sockets.Socket.RemoteEndPoint%2A&gt; property of the returned &lt;xref:System.Net.Sockets.Socket&gt; to identify the remote host's network address and port number.","pos":[551,752],"source":"      > [!NOTE] >  You can call the <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> property of the returned <xref:System.Net.Sockets.Socket> to identify the remote host's network address and port number."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If you receive a &lt;xref:System.Net.Sockets.SocketException&gt;, use the &lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt; property to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at <bpt id=\"p1\">[</bpt>http://msdn.microsoft.com/library/<ept id=\"p1\">](http://msdn.microsoft.com/library/)</ept> for a detailed description of the error.","pos":[758,1170],"source":"      > [!NOTE] >  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library/](http://msdn.microsoft.com/library/) for a detailed description of the error."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  This member outputs trace information when you enable network tracing in your application.","pos":[1176,1279],"source":"      > [!NOTE] >  This member outputs trace information when you enable network tracing in your application."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1280,1385],"source":" For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[30462,30570],"content":"An <xref:System.AsyncCallback> delegate that references the method to invoke when the operation is complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.AsyncCallback&gt; delegate that references the method to invoke when the operation is complete.","pos":[0,108],"source":"An <xref:System.AsyncCallback> delegate that references the method to invoke when the operation is complete."}]},{"pos":[30632,30785],"content":"A user-defined object containing information about the accept operation. This object is passed to the `callback` delegate when the operation is complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"A user-defined object containing information about the accept operation.","pos":[0,72]},{"content":"This object is passed to the <ph id=\"ph1\">`callback`</ph> delegate when the operation is complete.","pos":[73,153],"source":" This object is passed to the `callback` delegate when the operation is complete."}]},{"pos":[30849,30961],"content":"An <xref:System.IAsyncResult> that references the asynchronous creation of the <xref:System.Net.Sockets.Socket>.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.IAsyncResult&gt; that references the asynchronous creation of the &lt;xref:System.Net.Sockets.Socket&gt;.","pos":[0,112],"source":"An <xref:System.IAsyncResult> that references the asynchronous creation of the <xref:System.Net.Sockets.Socket>."}]},{"pos":[31152,31254],"content":"An error occurred while attempting to access the socket. See the Remarks section for more information.","needQuote":true,"needEscape":true,"nodes":[{"content":"An error occurred while attempting to access the socket. See the Remarks section for more information.","pos":[0,102],"nodes":[{"content":"An error occurred while attempting to access the socket.","pos":[0,56]},{"content":"See the Remarks section for more information.","pos":[57,102]}]}]},{"pos":[31361,31414],"content":"The <xref:System.Net.Sockets.Socket> has been closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Net.Sockets.Socket&gt; has been closed.","pos":[0,53],"source":"The <xref:System.Net.Sockets.Socket> has been closed."}]},{"pos":[31948,32022],"content":"Begins an asynchronous operation to accept an incoming connection attempt.","needQuote":true,"needEscape":true,"nodes":[{"content":"Begins an asynchronous operation to accept an incoming connection attempt.","pos":[0,74]}]},{"pos":[32035,33232],"content":"The asynchronous BeginAcceptTcpClient operation must be completed by calling the <xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A> method. Typically, the method is invoked by the `callback` delegate.       This method does not block until the operation completes. To block until the operation completes, use the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method.       For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] >  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library/](http://msdn.microsoft.com/library/) for a detailed description of the error.      > [!NOTE] >  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"The asynchronous BeginAcceptTcpClient operation must be completed by calling the &lt;xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A&gt; method.","pos":[0,148],"source":"The asynchronous BeginAcceptTcpClient operation must be completed by calling the <xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A> method."},{"content":"Typically, the method is invoked by the <ph id=\"ph1\">`callback`</ph> delegate.","pos":[149,209],"source":" Typically, the method is invoked by the `callback` delegate."},{"content":"This method does not block until the operation completes.","pos":[216,273]},{"content":"To block until the operation completes, use the &lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt; method.","pos":[274,386],"source":" To block until the operation completes, use the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method."},{"content":"For detailed information about using the asynchronous programming model, see <bpt id=\"p1\">[</bpt>Calling Synchronous Methods Asynchronously<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[393,554],"source":"       For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If you receive a &lt;xref:System.Net.Sockets.SocketException&gt;, use the &lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt; property to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at <bpt id=\"p1\">[</bpt>http://msdn.microsoft.com/library/<ept id=\"p1\">](http://msdn.microsoft.com/library/)</ept> for a detailed description of the error.","pos":[560,972],"source":"      > [!NOTE] >  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library/](http://msdn.microsoft.com/library/) for a detailed description of the error."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  This member outputs trace information when you enable network tracing in your application.","pos":[978,1081],"source":"      > [!NOTE] >  This member outputs trace information when you enable network tracing in your application."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1082,1187],"source":" For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[34011,34119],"content":"An <xref:System.AsyncCallback> delegate that references the method to invoke when the operation is complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.AsyncCallback&gt; delegate that references the method to invoke when the operation is complete.","pos":[0,108],"source":"An <xref:System.AsyncCallback> delegate that references the method to invoke when the operation is complete."}]},{"pos":[34181,34334],"content":"A user-defined object containing information about the accept operation. This object is passed to the `callback` delegate when the operation is complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"A user-defined object containing information about the accept operation.","pos":[0,72]},{"content":"This object is passed to the <ph id=\"ph1\">`callback`</ph> delegate when the operation is complete.","pos":[73,153],"source":" This object is passed to the `callback` delegate when the operation is complete."}]},{"pos":[34398,34527],"content":"An &lt;xref:System.IAsyncResult&gt; that references the asynchronous creation of the <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.TcpClient\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An <xref:System.IAsyncResult> that references the asynchronous creation of the <xref href=\"System.Net.Sockets.TcpClient\"></xref>."},{"pos":[34721,34823],"content":"An error occurred while attempting to access the socket. See the Remarks section for more information.","needQuote":true,"needEscape":true,"nodes":[{"content":"An error occurred while attempting to access the socket. See the Remarks section for more information.","pos":[0,102],"nodes":[{"content":"An error occurred while attempting to access the socket.","pos":[0,56]},{"content":"See the Remarks section for more information.","pos":[57,102]}]}]},{"pos":[34930,34983],"content":"The <xref:System.Net.Sockets.Socket> has been closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Net.Sockets.Socket&gt; has been closed.","pos":[0,53],"source":"The <xref:System.Net.Sockets.Socket> has been closed."}]},{"pos":[35358,35465],"content":"Creates a new <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.TcpListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance to listen on the specified port.","needQuote":true,"needEscape":true,"source":"Creates a new <xref href=\"System.Net.Sockets.TcpListener\"></xref> instance to listen on the specified port."},{"pos":[35628,35689],"content":"The port on which to listen for incoming connection attempts.","needQuote":true,"needEscape":true,"nodes":[{"content":"The port on which to listen for incoming connection attempts.","pos":[0,61]}]},{"pos":[35765,35937],"content":"Returns <xref href=\"System.Net.Sockets.TcpListener\"></xref>.       A new <xref href=\"System.Net.Sockets.TcpListener\"></xref> instance to listen on the specified port.","needQuote":false,"needEscape":true,"nodes":[{"content":"Returns <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.TcpListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,60],"source":"Returns <xref href=\"System.Net.Sockets.TcpListener\"></xref>."},{"content":"A new <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.TcpListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance to listen on the specified port.","pos":[67,166],"source":"       A new <xref href=\"System.Net.Sockets.TcpListener\"></xref> instance to listen on the specified port."}]},{"pos":[36461,36602],"content":"Asynchronously accepts an incoming connection attempt and creates a new <xref:System.Net.Sockets.Socket> to handle remote host communication.","needQuote":true,"needEscape":true,"nodes":[{"content":"Asynchronously accepts an incoming connection attempt and creates a new &lt;xref:System.Net.Sockets.Socket&gt; to handle remote host communication.","pos":[0,141],"source":"Asynchronously accepts an incoming connection attempt and creates a new <xref:System.Net.Sockets.Socket> to handle remote host communication."}]},{"pos":[36615,37626],"content":"This method blocks until the operation is complete. To perform this operation synchronously, use the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method.      > [!NOTE] >  You can call the <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> property of the returned <xref:System.Net.Sockets.Socket> to identify the remote host's network address and port number.      > [!NOTE] >  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library/](http://msdn.microsoft.com/library/) for a detailed description of the error.      > [!NOTE] >  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"This method blocks until the operation is complete.","pos":[0,51]},{"content":"To perform this operation synchronously, use the &lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt; method.","pos":[52,162],"source":" To perform this operation synchronously, use the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  You can call the &lt;xref:System.Net.Sockets.Socket.RemoteEndPoint%2A&gt; property of the returned &lt;xref:System.Net.Sockets.Socket&gt; to identify the remote host's network address and port number.","pos":[168,369],"source":"      > [!NOTE] >  You can call the <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> property of the returned <xref:System.Net.Sockets.Socket> to identify the remote host's network address and port number."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If you receive a &lt;xref:System.Net.Sockets.SocketException&gt;, use the &lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt; property to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at <bpt id=\"p1\">[</bpt>http://msdn.microsoft.com/library/<ept id=\"p1\">](http://msdn.microsoft.com/library/)</ept> for a detailed description of the error.","pos":[375,787],"source":"      > [!NOTE] >  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library/](http://msdn.microsoft.com/library/) for a detailed description of the error."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  This member outputs trace information when you enable network tracing in your application.","pos":[793,896],"source":"      > [!NOTE] >  This member outputs trace information when you enable network tracing in your application."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[897,1002],"source":" For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[38406,38526],"content":"An <xref:System.IAsyncResult> returned by a call to the <xref:System.Net.Sockets.TcpListener.BeginAcceptSocket*> method.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.IAsyncResult&gt; returned by a call to the &lt;xref:System.Net.Sockets.TcpListener.BeginAcceptSocket*&gt; method.","pos":[0,120],"source":"An <xref:System.IAsyncResult> returned by a call to the <xref:System.Net.Sockets.TcpListener.BeginAcceptSocket*> method."}]},{"pos":[38597,38708],"content":"A <xref:System.Net.Sockets.Socket>.       The <xref:System.Net.Sockets.Socket> used to send and receive data.","needQuote":false,"needEscape":true,"nodes":[{"content":"A <xref:System.Net.Sockets.Socket>.       The <xref:System.Net.Sockets.Socket> used to send and receive data.","pos":[0,109],"nodes":[{"content":"A &lt;xref:System.Net.Sockets.Socket&gt;.","pos":[0,35],"source":"A <xref:System.Net.Sockets.Socket>."},{"content":"The &lt;xref:System.Net.Sockets.Socket&gt; used to send and receive data.","pos":[42,109],"source":"       The <xref:System.Net.Sockets.Socket> used to send and receive data."}]}]},{"pos":[38890,38954],"content":"The underlying <xref:System.Net.Sockets.Socket> has been closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The underlying &lt;xref:System.Net.Sockets.Socket&gt; has been closed.","pos":[0,64],"source":"The underlying <xref:System.Net.Sockets.Socket> has been closed."}]},{"pos":[39057,39160],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">asyncResult</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>asyncResult</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[39255,39391],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">asyncResult</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter was not created by a call to the &lt;xref:System.Net.Sockets.TcpListener.BeginAcceptSocket*&gt; method.","needQuote":true,"needEscape":true,"source":"The <code>asyncResult</code> parameter was not created by a call to the <xref:System.Net.Sockets.TcpListener.BeginAcceptSocket*> method."},{"pos":[39502,39551],"content":"The EndAcceptSocket method was previously called.","needQuote":true,"needEscape":true,"nodes":[{"content":"The EndAcceptSocket method was previously called.","pos":[0,49]}]},{"pos":[39666,39794],"content":"An error occurred while attempting to access the <xref:System.Net.Sockets.Socket>. See the Remarks section for more information.","needQuote":true,"needEscape":true,"nodes":[{"content":"An error occurred while attempting to access the <xref:System.Net.Sockets.Socket>. See the Remarks section for more information.","pos":[0,128],"nodes":[{"content":"An error occurred while attempting to access the &lt;xref:System.Net.Sockets.Socket&gt;.","pos":[0,82],"source":"An error occurred while attempting to access the <xref:System.Net.Sockets.Socket>."},{"content":"See the Remarks section for more information.","pos":[83,128]}]}]},{"pos":[40264,40422],"content":"Asynchronously accepts an incoming connection attempt and creates a new <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.TcpClient\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to handle remote host communication.","needQuote":true,"needEscape":true,"source":"Asynchronously accepts an incoming connection attempt and creates a new <xref href=\"System.Net.Sockets.TcpClient\"></xref> to handle remote host communication."},{"pos":[40435,41473],"content":"This method blocks until the operation is complete. To perform this operation synchronously, use the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method.      > [!NOTE] >  You can call the <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> property of the underlying socket (<xref:System.Net.Sockets.TcpClient.Client%2A>) to identify the remote host's network address and port number.      > [!NOTE] >  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library/](http://msdn.microsoft.com/library/) for a detailed description of the error.      > [!NOTE] >  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"This method blocks until the operation is complete.","pos":[0,51]},{"content":"To perform this operation synchronously, use the &lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt; method.","pos":[52,165],"source":" To perform this operation synchronously, use the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  You can call the &lt;xref:System.Net.Sockets.Socket.RemoteEndPoint%2A&gt; property of the underlying socket (&lt;xref:System.Net.Sockets.TcpClient.Client%2A&gt;) to identify the remote host's network address and port number.","pos":[171,396],"source":"      > [!NOTE] >  You can call the <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> property of the underlying socket (<xref:System.Net.Sockets.TcpClient.Client%2A>) to identify the remote host's network address and port number."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If you receive a &lt;xref:System.Net.Sockets.SocketException&gt;, use the &lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt; property to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at <bpt id=\"p1\">[</bpt>http://msdn.microsoft.com/library/<ept id=\"p1\">](http://msdn.microsoft.com/library/)</ept> for a detailed description of the error.","pos":[402,814],"source":"      > [!NOTE] >  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library/](http://msdn.microsoft.com/library/) for a detailed description of the error."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  This member outputs trace information when you enable network tracing in your application.","pos":[820,923],"source":"      > [!NOTE] >  This member outputs trace information when you enable network tracing in your application."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[924,1029],"source":" For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[42262,42385],"content":"An <xref:System.IAsyncResult> returned by a call to the <xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient*> method.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.IAsyncResult&gt; returned by a call to the &lt;xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient*&gt; method.","pos":[0,123],"source":"An <xref:System.IAsyncResult> returned by a call to the <xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient*> method."}]},{"pos":[42459,42608],"content":"A <xref href=\"System.Net.Sockets.TcpClient\"></xref>.       The <xref href=\"System.Net.Sockets.TcpClient\"></xref> used to send and receive data.","needQuote":false,"needEscape":true,"nodes":[{"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.TcpClient\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,52],"source":"A <xref href=\"System.Net.Sockets.TcpClient\"></xref>."},{"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.TcpClient\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> used to send and receive data.","pos":[59,143],"source":"       The <xref href=\"System.Net.Sockets.TcpClient\"></xref> used to send and receive data."}]},{"pos":[43082,43267],"content":"Gets or sets a &lt;xref:System.Boolean&gt; value that specifies whether the <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.TcpListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> allows only one underlying socket to listen to a specific port.","needQuote":true,"needEscape":true,"source":"Gets or sets a <xref:System.Boolean> value that specifies whether the <xref href=\"System.Net.Sockets.TcpListener\"></xref> allows only one underlying socket to listen to a specific port."},{"pos":[43280,43927],"content":"By default, multiple listeners can listen to a specific port. However, only one of the listeners can perform operations on the network traffic sent to the port. If more than one listener attempts to bind to a particular port, then the one with the more specific IP address handles the network traffic sent to that port. You can use the <xref:System.Net.Sockets.Socket.ExclusiveAddressUse%2A> property to prevent multiple listeners from listening to a specific port.       Set this property before calling <xref:System.Net.Sockets.TcpListener.Start%2A>, or call the <xref:System.Net.Sockets.TcpListener.Stop%2A> method and then set this property.","needQuote":false,"needEscape":true,"nodes":[{"content":"By default, multiple listeners can listen to a specific port. However, only one of the listeners can perform operations on the network traffic sent to the port. If more than one listener attempts to bind to a particular port, then the one with the more specific IP address handles the network traffic sent to that port. You can use the <xref:System.Net.Sockets.Socket.ExclusiveAddressUse%2A> property to prevent multiple listeners from listening to a specific port.       Set this property before calling <xref:System.Net.Sockets.TcpListener.Start%2A>, or call the <xref:System.Net.Sockets.TcpListener.Stop%2A> method and then set this property.","pos":[0,645],"nodes":[{"content":"By default, multiple listeners can listen to a specific port.","pos":[0,61]},{"content":"However, only one of the listeners can perform operations on the network traffic sent to the port.","pos":[62,160]},{"content":"If more than one listener attempts to bind to a particular port, then the one with the more specific IP address handles the network traffic sent to that port.","pos":[161,319]},{"content":"You can use the &lt;xref:System.Net.Sockets.Socket.ExclusiveAddressUse%2A&gt; property to prevent multiple listeners from listening to a specific port.","pos":[320,465],"source":" You can use the <xref:System.Net.Sockets.Socket.ExclusiveAddressUse%2A> property to prevent multiple listeners from listening to a specific port."},{"content":"Set this property before calling &lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;, or call the &lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt; method and then set this property.","pos":[472,645],"source":"       Set this property before calling <xref:System.Net.Sockets.TcpListener.Start%2A>, or call the <xref:System.Net.Sockets.TcpListener.Stop%2A> method and then set this property."}]}]},{"pos":[44476,45002],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Net.Sockets.TcpListener\"></xref> allows only one <xref href=\"System.Net.Sockets.TcpListener\"></xref> to listen to a specific port; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. . The default is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> for Windows Server 2003 and Windows XP Service Pack 2 and later, and <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> for all other versions.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the <bpt id=\"p2\">&lt;xref href=\"System.Net.Sockets.TcpListener\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> allows only one <bpt id=\"p3\">&lt;xref href=\"System.Net.Sockets.TcpListener\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> to listen to a specific port; otherwise, <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","pos":[0,292],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Net.Sockets.TcpListener\"></xref> allows only one <xref href=\"System.Net.Sockets.TcpListener\"></xref> to listen to a specific port; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":".","pos":[293,294]},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for Windows Server 2003 and Windows XP Service Pack 2 and later, and <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> for all other versions.","pos":[295,526],"source":" The default is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> for Windows Server 2003 and Windows XP Service Pack 2 and later, and <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> for all other versions."}]},{"pos":[45191,45418],"content":"The <xref href=\"System.Net.Sockets.TcpListener\"></xref> has been started. Call the <xref href=\"System.Net.Sockets.TcpListener.Stop\"></xref> method and then set the <xref:System.Net.Sockets.Socket.ExclusiveAddressUse*> property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.TcpListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> has been started.","pos":[0,73],"source":"The <xref href=\"System.Net.Sockets.TcpListener\"></xref> has been started."},{"content":"Call the <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.TcpListener.Stop\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> method and then set the &lt;xref:System.Net.Sockets.Socket.ExclusiveAddressUse*&gt; property.","pos":[74,227],"source":" Call the <xref href=\"System.Net.Sockets.TcpListener.Stop\"></xref> method and then set the <xref:System.Net.Sockets.Socket.ExclusiveAddressUse*> property."}]},{"pos":[45533,45599],"content":"An error occurred when attempting to access the underlying socket.","needQuote":true,"needEscape":true,"nodes":[{"content":"An error occurred when attempting to access the underlying socket.","pos":[0,66]}]},{"pos":[45706,45770],"content":"The underlying <xref:System.Net.Sockets.Socket> has been closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The underlying &lt;xref:System.Net.Sockets.Socket&gt; has been closed.","pos":[0,64],"source":"The underlying <xref:System.Net.Sockets.Socket> has been closed."}]},{"pos":[46133,46247],"content":"Gets the underlying &lt;xref:System.Net.EndPoint&gt; of the current <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.TcpListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets the underlying <xref:System.Net.EndPoint> of the current <xref href=\"System.Net.Sockets.TcpListener\"></xref>."},{"pos":[46259,46788],"content":"You can use the LocalEndpoint property to identify the local network interface and port number being used to listen for incoming client connection requests, after a socket connection has been made. You must first cast this <xref:System.Net.EndPoint> to an <xref:System.Net.IPEndPoint>. You can then call the <xref:System.Net.IPEndPoint.Address%2A?displayProperty=fullName> property to retrieve the local IP address, and the <xref:System.Net.IPEndPoint.Port%2A?displayProperty=fullName> property to retrieve the local port number.","needQuote":true,"needEscape":true,"nodes":[{"content":"You can use the LocalEndpoint property to identify the local network interface and port number being used to listen for incoming client connection requests, after a socket connection has been made. You must first cast this <xref:System.Net.EndPoint> to an <xref:System.Net.IPEndPoint>. You can then call the <xref:System.Net.IPEndPoint.Address%2A?displayProperty=fullName> property to retrieve the local IP address, and the <xref:System.Net.IPEndPoint.Port%2A?displayProperty=fullName> property to retrieve the local port number.","pos":[0,529],"nodes":[{"content":"You can use the LocalEndpoint property to identify the local network interface and port number being used to listen for incoming client connection requests, after a socket connection has been made.","pos":[0,197]},{"content":"You must first cast this &lt;xref:System.Net.EndPoint&gt; to an &lt;xref:System.Net.IPEndPoint&gt;.","pos":[198,285],"source":" You must first cast this <xref:System.Net.EndPoint> to an <xref:System.Net.IPEndPoint>."},{"content":"You can then call the &lt;xref:System.Net.IPEndPoint.Address%2A?displayProperty=fullName&gt; property to retrieve the local IP address, and the &lt;xref:System.Net.IPEndPoint.Port%2A?displayProperty=fullName&gt; property to retrieve the local port number.","pos":[286,529],"source":" You can then call the <xref:System.Net.IPEndPoint.Address%2A?displayProperty=fullName> property to retrieve the local IP address, and the <xref:System.Net.IPEndPoint.Port%2A?displayProperty=fullName> property to retrieve the local port number."}]}]},{"pos":[47447,47533],"content":"The <xref:System.Net.EndPoint> to which the <xref:System.Net.Sockets.Socket> is bound.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Net.EndPoint&gt; to which the &lt;xref:System.Net.Sockets.Socket&gt; is bound.","pos":[0,86],"source":"The <xref:System.Net.EndPoint> to which the <xref:System.Net.Sockets.Socket> is bound."}]},{"pos":[47945,47997],"content":"Determines if there are pending connection requests.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines if there are pending connection requests.","pos":[0,52]}]},{"pos":[48009,48455],"content":"This non-blocking method determines if there are any pending connection requests. Because the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> and <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> methods block execution until the <xref:System.Net.Sockets.TcpListener.Start%2A> method has queued an incoming connection request, the Pending method can be used to determine if connections are available before attempting to accept them.","needQuote":true,"needEscape":true,"nodes":[{"content":"This non-blocking method determines if there are any pending connection requests. Because the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> and <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> methods block execution until the <xref:System.Net.Sockets.TcpListener.Start%2A> method has queued an incoming connection request, the Pending method can be used to determine if connections are available before attempting to accept them.","pos":[0,446],"nodes":[{"content":"This non-blocking method determines if there are any pending connection requests.","pos":[0,81]},{"content":"Because the &lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt; and &lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt; methods block execution until the &lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt; method has queued an incoming connection request, the Pending method can be used to determine if connections are available before attempting to accept them.","pos":[82,446],"source":" Because the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> and <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> methods block execution until the <xref:System.Net.Sockets.TcpListener.Start%2A> method has queued an incoming connection request, the Pending method can be used to determine if connections are available before attempting to accept them."}]}]},{"pos":[49128,49291],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if connections are pending; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if connections are pending; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[49468,49562],"content":"The listener has not been started with a call to <xref:System.Net.Sockets.TcpListener.Start*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The listener has not been started with a call to &lt;xref:System.Net.Sockets.TcpListener.Start*&gt;.","pos":[0,94],"source":"The listener has not been started with a call to <xref:System.Net.Sockets.TcpListener.Start*>."}]},{"pos":[49890,49951],"content":"Gets the underlying network <xref:System.Net.Sockets.Socket>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the underlying network &lt;xref:System.Net.Sockets.Socket&gt;.","pos":[0,61],"source":"Gets the underlying network <xref:System.Net.Sockets.Socket>."}]},{"pos":[49964,50933],"content":"<xref:System.Net.Sockets.TcpListener> creates a <xref:System.Net.Sockets.Socket> to listen for incoming client connection requests. Classes deriving from <xref:System.Net.Sockets.TcpListener> can use this property to get this <xref:System.Net.Sockets.Socket>. Use the underlying <xref:System.Net.Sockets.Socket> returned by the Server property if you require access beyond that which <xref:System.Net.Sockets.TcpListener> provides.      > [!NOTE] >  The Server property only returns the <xref:System.Net.Sockets.Socket> used to listen for incoming client connection requests. Use the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method to accept a pending connection request and obtain a <xref:System.Net.Sockets.Socket> for sending and receiving data. You can also use the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method to accept a pending connection request and obtain a <xref:System.Net.Sockets.TcpClient> for sending and receiving data.","needQuote":false,"needEscape":true,"nodes":[{"content":"&lt;xref:System.Net.Sockets.TcpListener&gt; creates a &lt;xref:System.Net.Sockets.Socket&gt; to listen for incoming client connection requests.","pos":[0,131],"source":"<xref:System.Net.Sockets.TcpListener> creates a <xref:System.Net.Sockets.Socket> to listen for incoming client connection requests."},{"content":"Classes deriving from &lt;xref:System.Net.Sockets.TcpListener&gt; can use this property to get this &lt;xref:System.Net.Sockets.Socket&gt;.","pos":[132,259],"source":" Classes deriving from <xref:System.Net.Sockets.TcpListener> can use this property to get this <xref:System.Net.Sockets.Socket>."},{"content":"Use the underlying &lt;xref:System.Net.Sockets.Socket&gt; returned by the Server property if you require access beyond that which &lt;xref:System.Net.Sockets.TcpListener&gt; provides.","pos":[260,431],"source":" Use the underlying <xref:System.Net.Sockets.Socket> returned by the Server property if you require access beyond that which <xref:System.Net.Sockets.TcpListener> provides."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The Server property only returns the &lt;xref:System.Net.Sockets.Socket&gt; used to listen for incoming client connection requests.","pos":[437,575],"source":"      > [!NOTE] >  The Server property only returns the <xref:System.Net.Sockets.Socket> used to listen for incoming client connection requests."},{"content":"Use the &lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt; method to accept a pending connection request and obtain a &lt;xref:System.Net.Sockets.Socket&gt; for sending and receiving data.","pos":[576,761],"source":" Use the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method to accept a pending connection request and obtain a <xref:System.Net.Sockets.Socket> for sending and receiving data."},{"content":"You can also use the &lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt; method to accept a pending connection request and obtain a &lt;xref:System.Net.Sockets.TcpClient&gt; for sending and receiving data.","pos":[762,966],"source":" You can also use the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method to accept a pending connection request and obtain a <xref:System.Net.Sockets.TcpClient> for sending and receiving data."}]},{"pos":[51654,51702],"content":"The underlying <xref:System.Net.Sockets.Socket>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The underlying &lt;xref:System.Net.Sockets.Socket&gt;.","pos":[0,48],"source":"The underlying <xref:System.Net.Sockets.Socket>."}]},{"pos":[52097,52147],"content":"Starts listening for incoming connection requests.","needQuote":true,"needEscape":true,"nodes":[{"content":"Starts listening for incoming connection requests.","pos":[0,50]}]},{"pos":[52160,53997],"content":"The Start method initializes the underlying <xref:System.Net.Sockets.Socket>, binds it to a local endpoint, and listens for incoming connection attempts. If a connection request is received, the Start method will queue the request and continue listening for additional requests until you call the <xref:System.Net.Sockets.TcpListener.Stop%2A> method. If <xref:System.Net.Sockets.TcpListener> receives a connection request after it has already queued the maximum number of connections, it will throw a <xref:System.Net.Sockets.SocketException> on the client.       To remove a connection from the incoming connection queue, use either the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method or the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method. The <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method will remove a connection from the queue and return a <xref:System.Net.Sockets.TcpClient> that you can use to send and receive data. The <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method will return a <xref:System.Net.Sockets.Socket> that you can use to do the same. If your application only requires synchronous I/O, use <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>. For more detailed behavioral control, use <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>. Both of these methods block until a connection request is available in the queue.       Use the <xref:System.Net.Sockets.TcpListener.Stop%2A> method to close the <xref:System.Net.Sockets.TcpListener> and stop listening. You are responsible for closing your accepted connections separately.      > [!NOTE] >  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"The Start method initializes the underlying &lt;xref:System.Net.Sockets.Socket&gt;, binds it to a local endpoint, and listens for incoming connection attempts.","pos":[0,153],"source":"The Start method initializes the underlying <xref:System.Net.Sockets.Socket>, binds it to a local endpoint, and listens for incoming connection attempts."},{"content":"If a connection request is received, the Start method will queue the request and continue listening for additional requests until you call the &lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt; method.","pos":[154,350],"source":" If a connection request is received, the Start method will queue the request and continue listening for additional requests until you call the <xref:System.Net.Sockets.TcpListener.Stop%2A> method."},{"content":"If &lt;xref:System.Net.Sockets.TcpListener&gt; receives a connection request after it has already queued the maximum number of connections, it will throw a &lt;xref:System.Net.Sockets.SocketException&gt; on the client.","pos":[351,557],"source":" If <xref:System.Net.Sockets.TcpListener> receives a connection request after it has already queued the maximum number of connections, it will throw a <xref:System.Net.Sockets.SocketException> on the client."},{"content":"To remove a connection from the incoming connection queue, use either the &lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt; method or the &lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt; method.","pos":[564,770],"source":"       To remove a connection from the incoming connection queue, use either the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method or the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method."},{"content":"The &lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt; method will remove a connection from the queue and return a &lt;xref:System.Net.Sockets.TcpClient&gt; that you can use to send and receive data.","pos":[771,970],"source":" The <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method will remove a connection from the queue and return a <xref:System.Net.Sockets.TcpClient> that you can use to send and receive data."},{"content":"The &lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt; method will return a &lt;xref:System.Net.Sockets.Socket&gt; that you can use to do the same.","pos":[971,1115],"source":" The <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method will return a <xref:System.Net.Sockets.Socket> that you can use to do the same."},{"content":"If your application only requires synchronous I/O, use &lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;.","pos":[1116,1228],"source":" If your application only requires synchronous I/O, use <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>."},{"content":"For more detailed behavioral control, use &lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;.","pos":[1229,1325],"source":" For more detailed behavioral control, use <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>."},{"content":"Both of these methods block until a connection request is available in the queue.","pos":[1326,1407]},{"content":"Use the &lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt; method to close the &lt;xref:System.Net.Sockets.TcpListener&gt; and stop listening.","pos":[1414,1545],"source":"       Use the <xref:System.Net.Sockets.TcpListener.Stop%2A> method to close the <xref:System.Net.Sockets.TcpListener> and stop listening."},{"content":"You are responsible for closing your accepted connections separately.","pos":[1546,1615]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  This member outputs trace information when you enable network tracing in your application.","pos":[1621,1724],"source":"      > [!NOTE] >  This member outputs trace information when you enable network tracing in your application."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1725,1830],"source":" For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[54695,54991],"content":"Use the &lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt; property to obtain the specific error code. When you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","needQuote":true,"needEscape":true,"nodes":[{"content":"Use the &lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt; property to obtain the specific error code. When you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[0,296],"nodes":[{"content":"Use the <ph id=\"ph1\">&amp;lt;</ph>xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph> property to obtain the specific error code.","pos":[0,137],"source":"Use the &lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt; property to obtain the specific error code."},{"content":"When you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[138,296]}]}]},{"pos":[55361,55455],"content":"Starts listening for incoming connection requests with a maximum number of pending connection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Starts listening for incoming connection requests with a maximum number of pending connection.","pos":[0,94]}]},{"pos":[55468,57747],"content":"The <xref:System.Net.Sockets.TcpListener.Start%2A> method initializes the underlying <xref:System.Net.Sockets.Socket>, binds it to a local endpoint, and listens for incoming connection attempts. If a connection request is received, <xref:System.Net.Sockets.TcpListener.Start%2A> will queue the request and continue listening for additional requests until you call the <xref:System.Net.Sockets.TcpListener.Stop%2A> method. If <xref:System.Net.Sockets.TcpListener> receives a connection request after it has already queued the maximum number of connections it will throw a <xref:System.Net.Sockets.SocketException> on the client.       To remove a connection from the incoming connection queue, use either the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method or the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method. The <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method will remove a connection from the queue and return a <xref:System.Net.Sockets.TcpClient> that you can use to send and receive data. The <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method will return a <xref:System.Net.Sockets.Socket> that you can use to do the same. If your application only requires synchronous I/O, use the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>. For more detailed behavioral control, use <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method. Both of these methods block until a connection request is available in the queue.       Use the <xref:System.Net.Sockets.TcpListener.Stop%2A> method to close the <xref:System.Net.Sockets.TcpListener> and stop listening. You are responsible for closing your accepted connections separately.      > [!NOTE] >  Use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library/](http://msdn.microsoft.com/library/) for a detailed description of the error.      > [!NOTE] >  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt; method initializes the underlying &lt;xref:System.Net.Sockets.Socket&gt;, binds it to a local endpoint, and listens for incoming connection attempts.","pos":[0,194],"source":"The <xref:System.Net.Sockets.TcpListener.Start%2A> method initializes the underlying <xref:System.Net.Sockets.Socket>, binds it to a local endpoint, and listens for incoming connection attempts."},{"content":"If a connection request is received, &lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt; will queue the request and continue listening for additional requests until you call the &lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt; method.","pos":[195,421],"source":" If a connection request is received, <xref:System.Net.Sockets.TcpListener.Start%2A> will queue the request and continue listening for additional requests until you call the <xref:System.Net.Sockets.TcpListener.Stop%2A> method."},{"content":"If &lt;xref:System.Net.Sockets.TcpListener&gt; receives a connection request after it has already queued the maximum number of connections it will throw a &lt;xref:System.Net.Sockets.SocketException&gt; on the client.","pos":[422,627],"source":" If <xref:System.Net.Sockets.TcpListener> receives a connection request after it has already queued the maximum number of connections it will throw a <xref:System.Net.Sockets.SocketException> on the client."},{"content":"To remove a connection from the incoming connection queue, use either the &lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt; method or the &lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt; method.","pos":[634,840],"source":"       To remove a connection from the incoming connection queue, use either the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method or the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method."},{"content":"The &lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt; method will remove a connection from the queue and return a &lt;xref:System.Net.Sockets.TcpClient&gt; that you can use to send and receive data.","pos":[841,1040],"source":" The <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method will remove a connection from the queue and return a <xref:System.Net.Sockets.TcpClient> that you can use to send and receive data."},{"content":"The &lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt; method will return a &lt;xref:System.Net.Sockets.Socket&gt; that you can use to do the same.","pos":[1041,1185],"source":" The <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method will return a <xref:System.Net.Sockets.Socket> that you can use to do the same."},{"content":"If your application only requires synchronous I/O, use the &lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;.","pos":[1186,1302],"source":" If your application only requires synchronous I/O, use the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>."},{"content":"For more detailed behavioral control, use &lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt; method.","pos":[1303,1406],"source":" For more detailed behavioral control, use <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method."},{"content":"Both of these methods block until a connection request is available in the queue.","pos":[1407,1488]},{"content":"Use the &lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt; method to close the &lt;xref:System.Net.Sockets.TcpListener&gt; and stop listening.","pos":[1495,1626],"source":"       Use the <xref:System.Net.Sockets.TcpListener.Stop%2A> method to close the <xref:System.Net.Sockets.TcpListener> and stop listening."},{"content":"You are responsible for closing your accepted connections separately.","pos":[1627,1696]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Use the &lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt; property to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at <bpt id=\"p1\">[</bpt>http://msdn.microsoft.com/library/<ept id=\"p1\">](http://msdn.microsoft.com/library/)</ept> for a detailed description of the error.","pos":[1702,2054],"source":"      > [!NOTE] >  Use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library/](http://msdn.microsoft.com/library/) for a detailed description of the error."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  This member outputs trace information when you enable network tracing in your application.","pos":[2060,2163],"source":"      > [!NOTE] >  This member outputs trace information when you enable network tracing in your application."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[2164,2269],"source":" For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[58381,58433],"content":"The maximum length of the pending connections queue.","needQuote":true,"needEscape":true,"nodes":[{"content":"The maximum length of the pending connections queue.","pos":[0,52]}]},{"pos":[58612,58703],"content":"An error occurred while accessing the socket. See the Remarks section for more information.","needQuote":true,"needEscape":true,"nodes":[{"content":"An error occurred while accessing the socket. See the Remarks section for more information.","pos":[0,91],"nodes":[{"content":"An error occurred while accessing the socket.","pos":[0,45]},{"content":"See the Remarks section for more information.","pos":[46,91]}]}]},{"pos":[58818,58926],"content":"The<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\"> backlog</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is less than zero or exceeds the maximum number of permitted connections.","needQuote":true,"needEscape":true,"source":"The<code> backlog</code> parameter is less than zero or exceeds the maximum number of permitted connections."},{"pos":[59037,59093],"content":"The underlying <xref:System.Net.Sockets.Socket> is null.","needQuote":true,"needEscape":true,"nodes":[{"content":"The underlying &lt;xref:System.Net.Sockets.Socket&gt; is null.","pos":[0,56],"source":"The underlying <xref:System.Net.Sockets.Socket> is null."}]},{"pos":[59415,59435],"content":"Closes the listener.","needQuote":true,"needEscape":true,"nodes":[{"content":"Closes the listener.","pos":[0,20]}]},{"pos":[59448,59932],"content":"Stop closes the listener. Any unaccepted connection requests in the queue will be lost. Remote hosts waiting for a connection to be accepted will throw a <xref:System.Net.Sockets.SocketException>. You are responsible for closing your accepted connections separately.      > [!NOTE] >  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"Stop closes the listener.","pos":[0,25]},{"content":"Any unaccepted connection requests in the queue will be lost.","pos":[26,87]},{"content":"Remote hosts waiting for a connection to be accepted will throw a &lt;xref:System.Net.Sockets.SocketException&gt;.","pos":[88,196],"source":" Remote hosts waiting for a connection to be accepted will throw a <xref:System.Net.Sockets.SocketException>."},{"content":"You are responsible for closing your accepted connections separately.","pos":[197,266]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  This member outputs trace information when you enable network tracing in your application.","pos":[272,375],"source":"      > [!NOTE] >  This member outputs trace information when you enable network tracing in your application."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[376,481],"source":" For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[60636,60932],"content":"Use the &lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt; property to obtain the specific error code. When you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","needQuote":true,"needEscape":true,"nodes":[{"content":"Use the &lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt; property to obtain the specific error code. When you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[0,296],"nodes":[{"content":"Use the <ph id=\"ph1\">&amp;lt;</ph>xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph> property to obtain the specific error code.","pos":[0,137],"source":"Use the &lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt; property to obtain the specific error code."},{"content":"When you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[138,296]}]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Net.Sockets.TcpListener\n  id: TcpListener\n  children:\n  - System.Net.Sockets.TcpListener.#ctor(System.Int32)\n  - System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)\n  - System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)\n  - System.Net.Sockets.TcpListener.AcceptSocket\n  - System.Net.Sockets.TcpListener.AcceptSocketAsync\n  - System.Net.Sockets.TcpListener.AcceptTcpClient\n  - System.Net.Sockets.TcpListener.AcceptTcpClientAsync\n  - System.Net.Sockets.TcpListener.Active\n  - System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)\n  - System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)\n  - System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)\n  - System.Net.Sockets.TcpListener.Create(System.Int32)\n  - System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)\n  - System.Net.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)\n  - System.Net.Sockets.TcpListener.ExclusiveAddressUse\n  - System.Net.Sockets.TcpListener.LocalEndpoint\n  - System.Net.Sockets.TcpListener.Pending\n  - System.Net.Sockets.TcpListener.Server\n  - System.Net.Sockets.TcpListener.Start\n  - System.Net.Sockets.TcpListener.Start(System.Int32)\n  - System.Net.Sockets.TcpListener.Stop\n  langs:\n  - csharp\n  name: TcpListener\n  nameWithType: TcpListener\n  fullName: System.Net.Sockets.TcpListener\n  type: Class\n  summary: Listens for connections from TCP network clients.\n  remarks: \"The TcpListener class provides simple methods that listen for and accept incoming connection requests in blocking synchronous mode. You can use either a <xref:System.Net.Sockets.TcpClient> or a <xref:System.Net.Sockets.Socket> to connect with a TcpListener. Create a TcpListener using an <xref:System.Net.IPEndPoint>, a Local IP address and port number, or just a port number. Specify <xref:System.Net.IPAddress.Any> for the local IP address and 0 for the local port number if you want the underlying service provider to assign those values for you. If you choose to do this, you can use the <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> property to identify the assigned information, after the socket has connected.  \\n  \\n Use the <xref:System.Net.Sockets.TcpListener.Start%2A> method to begin listening for incoming connection requests. <xref:System.Net.Sockets.TcpListener.Start%2A> will queue incoming connections until you either call the <xref:System.Net.Sockets.TcpListener.Stop%2A> method or it has queued <xref:System.Net.Sockets.SocketOptionName>. Use either <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> or <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> to pull a connection from the incoming connection request queue. These two methods will block. If you want to avoid blocking, you can use the <xref:System.Net.Sockets.TcpListener.Pending%2A> method first to determine if connection requests are available in the queue.  \\n  \\n Call the <xref:System.Net.Sockets.TcpListener.Stop%2A> method to close the TcpListener.  \\n  \\n> [!NOTE]\\n>  The <xref:System.Net.Sockets.TcpListener.Stop%2A> method does not close any accepted connections. You are responsible for closing these separately.\"\n  example:\n  - \"The following code example creates a TcpListener.  \\n  \\n [!code-cpp[System.Net.Sockets.TcpListener#1](~/add/codesnippet/cpp/t-system.net.sockets.tcp_0_1.cpp)]\\n [!code-cs[System.Net.Sockets.TcpListener#1](~/add/codesnippet/csharp/t-system.net.sockets.tcp_0_1.cs)]\\n [!code-vb[System.Net.Sockets.TcpListener#1](~/add/codesnippet/visualbasic/t-system.net.sockets.tcp_0_1.vb)]  \\n  \\n See <xref:System.Net.Sockets.TcpClient> for a client example.\"\n  syntax:\n    content: public class TcpListener\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Net.Sockets.TcpListener.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Net.Sockets.TcpListener\n  langs:\n  - csharp\n  name: TcpListener(Int32)\n  nameWithType: TcpListener.TcpListener(Int32)\n  fullName: System.Net.Sockets.TcpListener.TcpListener(Int32)\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Initializes a new instance of the <xref href=\"System.Net.Sockets.TcpListener\"></xref> class that listens on the specified port.\n  remarks: \"This constructor is obsolete. Use the <xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPAddress%2CSystem.Int32%29?displayProperty=fullName> or <xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPEndPoint%29?displayProperty=fullName> constructors.  \\n  \\n This constructor allows you to specify the port number on which to listen for incoming connection attempts. With this constructor, the underlying service provider assigns the most appropriate network address. If you do not care which local port is used, you can specify 0 for the port number. In this case, the service provider will assign an available port number between 1024 and 5000. If you use this approach, you can discover what local network address and port number has been assigned by using the <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> property.  \\n  \\n Call the <xref:System.Net.Sockets.TcpListener.Start%2A> method to begin listening for incoming connection attempts.\"\n  example:\n  - \"The following code example creates a <xref:System.Net.Sockets.TcpListener> using a local port number.  \\n  \\n [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample#3](~/add/codesnippet/cpp/m-system.net.sockets.tcp_18_1.cpp)]\\n [!code-cs[Classic TcpListener.PublicMethodsAndPropertiesExample#3](~/add/codesnippet/csharp/m-system.net.sockets.tcp_18_1.cs)]\\n [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample#3](~/add/codesnippet/visualbasic/m-system.net.sockets.tcp_18_1.vb)]\"\n  syntax:\n    content: public TcpListener (int port);\n    parameters:\n    - id: port\n      type: System.Int32\n      description: The port on which to listen for incoming connection attempts.\n  overload: System.Net.Sockets.TcpListener.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>port</code> is not between <xref:System.Net.IPEndPoint.MinPort> and <xref:System.Net.IPEndPoint.MaxPort>.\n  platform:\n  - net462\n- uid: System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)\n  id: '#ctor(System.Net.IPEndPoint)'\n  parent: System.Net.Sockets.TcpListener\n  langs:\n  - csharp\n  name: TcpListener(IPEndPoint)\n  nameWithType: TcpListener.TcpListener(IPEndPoint)\n  fullName: System.Net.Sockets.TcpListener.TcpListener(IPEndPoint)\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Initializes a new instance of the <xref href=\"System.Net.Sockets.TcpListener\"></xref> class with the specified local endpoint.\n  remarks: \"This constructor allows you to specify the local IP address and port number on which to listen for incoming connection attempts. Before using this constructor, you must create an <xref:System.Net.IPEndPoint> using the desired local IP address and port number. Pass this <xref:System.Net.IPEndPoint> to the constructor as the `localEP` parameter.  \\n  \\n If you do not care which local address is assigned, you can create an <xref:System.Net.IPEndPoint> using <xref:System.Net.IPAddress.Any?displayProperty=fullName> as the address parameter, and the underlying service provider will assign the most appropriate network address. This might help simplify your application if you have multiple network interfaces. If you do not care which local port is used, you can create an <xref:System.Net.IPEndPoint> using 0 for the port number. In this case, the service provider will assign an available port number between 1024 and 5000. If you use this approach, you can discover what local network address and port number has been assigned by using the <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> property.  \\n  \\n Call the <xref:System.Net.Sockets.TcpListener.Start%2A> method to begin listening for incoming connection attempts.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"The following code example creates an instance of the <xref:System.Net.Sockets.TcpListener> class using the local endpoint.  \\n  \\n [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample#1](~/add/codesnippet/cpp/m-system.net.sockets.tcp_20_1.cpp)]\\n [!code-cs[Classic TcpListener.PublicMethodsAndPropertiesExample#1](~/add/codesnippet/csharp/m-system.net.sockets.tcp_20_1.cs)]\\n [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample#1](~/add/codesnippet/visualbasic/m-system.net.sockets.tcp_20_1.vb)]\"\n  syntax:\n    content: public TcpListener (System.Net.IPEndPoint localEP);\n    parameters:\n    - id: localEP\n      type: System.Net.IPEndPoint\n      description: An <xref:System.Net.IPEndPoint> that represents the local endpoint to which to bind the listener <xref:System.Net.Sockets.Socket>.\n  overload: System.Net.Sockets.TcpListener.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>localEP</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)\n  id: '#ctor(System.Net.IPAddress,System.Int32)'\n  parent: System.Net.Sockets.TcpListener\n  langs:\n  - csharp\n  name: TcpListener(IPAddress,Int32)\n  nameWithType: TcpListener.TcpListener(IPAddress,Int32)\n  fullName: System.Net.Sockets.TcpListener.TcpListener(IPAddress,Int32)\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Initializes a new instance of the <xref href=\"System.Net.Sockets.TcpListener\"></xref> class that listens for incoming connection attempts on the specified local IP address and port number.\n  remarks: \"This constructor allows you to specify the local IP address and port number on which to listen for incoming connection attempts. Before calling this constructor you must first create an <xref:System.Net.IPAddress> using the desired local address. Pass this <xref:System.Net.IPAddress> to the constructor as the `localaddr` parameter. If you do not care which local address is assigned, specify <xref:System.Net.IPAddress.Any?displayProperty=fullName> for the `localaddr` parameter, and the underlying service provider will assign the most appropriate network address. This might help simplify your application if you have multiple network interfaces. If you do not care which local port is used, you can specify 0 for the port number. In this case, the service provider will assign an available port number between 1024 and 5000. If you use this approach, you can discover what local network address and port number has been assigned by using the <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> property.  \\n  \\n Call the <xref:System.Net.Sockets.TcpListener.Start%2A> method to begin listening for incoming connection attempts.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"The following code example creates an instance of the <xref:System.Net.Sockets.TcpListener> class using a local IP address and port number.  \\n  \\n [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample#2](~/add/codesnippet/cpp/m-system.net.sockets.tcp_19_1.cpp)]\\n [!code-cs[Classic TcpListener.PublicMethodsAndPropertiesExample#2](~/add/codesnippet/csharp/m-system.net.sockets.tcp_19_1.cs)]\\n [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample#2](~/add/codesnippet/visualbasic/m-system.net.sockets.tcp_19_1.vb)]\"\n  syntax:\n    content: public TcpListener (System.Net.IPAddress localaddr, int port);\n    parameters:\n    - id: localaddr\n      type: System.Net.IPAddress\n      description: An <xref:System.Net.IPAddress> that represents the local IP address.\n    - id: port\n      type: System.Int32\n      description: The port on which to listen for incoming connection attempts.\n  overload: System.Net.Sockets.TcpListener.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>localaddr</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>port</code> is not between <xref:System.Net.IPEndPoint.MinPort> and <xref:System.Net.IPEndPoint.MaxPort>.\n  platform:\n  - net462\n- uid: System.Net.Sockets.TcpListener.AcceptSocket\n  id: AcceptSocket\n  parent: System.Net.Sockets.TcpListener\n  langs:\n  - csharp\n  name: AcceptSocket()\n  nameWithType: TcpListener.AcceptSocket()\n  fullName: System.Net.Sockets.TcpListener.AcceptSocket()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Accepts a pending connection request.\n  remarks: \"AcceptSocket is a blocking method that returns a <xref:System.Net.Sockets.Socket> that you can use to send and receive data. If you want to avoid blocking, use the <xref:System.Net.Sockets.TcpListener.Pending%2A> method to determine if connection requests are available in the incoming connection queue.  \\n  \\n The <xref:System.Net.Sockets.Socket> returned is initialized with the IP address and port number of the remote host. You can use any of the <xref:System.Net.Sockets.Socket.Send%2A> and <xref:System.Net.Sockets.Socket.Receive%2A> methods available in the <xref:System.Net.Sockets.Socket> class to communicate with the remote host. When you are finished using the <xref:System.Net.Sockets.Socket>, be sure to call its <xref:System.Net.Sockets.Socket.Close%2A> method. If your application is relatively simple, consider using the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method rather than the AcceptSocket method. <xref:System.Net.Sockets.TcpClient> provides you with simple methods for sending and receiving data over a network in blocking synchronous mode.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"In the following code example, the AcceptSocket method is used to return a <xref:System.Net.Sockets.Socket>. This <xref:System.Net.Sockets.Socket> is used to communicate with the newly connected client.  \\n  \\n [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample#4](~/add/codesnippet/cpp/m-system.net.sockets.tcp_7_1.cpp)]\\n [!code-cs[Classic TcpListener.PublicMethodsAndPropertiesExample#4](~/add/codesnippet/csharp/m-system.net.sockets.tcp_7_1.cs)]\\n [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample#4](~/add/codesnippet/visualbasic/m-system.net.sockets.tcp_7_1.vb)]\"\n  syntax:\n    content: public System.Net.Sockets.Socket AcceptSocket ();\n    parameters: []\n    return:\n      type: System.Net.Sockets.Socket\n      description: A <xref:System.Net.Sockets.Socket> used to send and receive data.\n  overload: System.Net.Sockets.TcpListener.AcceptSocket*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The listener has not been started with a call to <xref:System.Net.Sockets.TcpListener.Start*>.\n  platform:\n  - net462\n- uid: System.Net.Sockets.TcpListener.AcceptSocketAsync\n  id: AcceptSocketAsync\n  parent: System.Net.Sockets.TcpListener\n  langs:\n  - csharp\n  name: AcceptSocketAsync()\n  nameWithType: TcpListener.AcceptSocketAsync()\n  fullName: System.Net.Sockets.TcpListener.AcceptSocketAsync()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Accepts a pending connection request as an asynchronous operation.\n  remarks: \"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the socket connection has been accepted.  \\n  \\n The <xref:System.Net.Sockets.Socket> returned in <xref:System.Threading.Tasks.Task%601> is initialized with the IP address and port number of the remote host. You can use any of the <xref:System.Net.Sockets.Socket.Send%2A> and <xref:System.Net.Sockets.Socket.Receive%2A> methods available in the <xref:System.Net.Sockets.Socket> class to communicate with the remote host. When you are finished using the <xref:System.Net.Sockets.Socket>, be sure to call its <xref:System.Net.Sockets.Socket.Close%2A> method. If your application is relatively simple, consider using the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method rather than the AcceptSocketAsync method. <xref:System.Net.Sockets.TcpClient> provides you with simple methods for sending and receiving data over a network in blocking synchronous mode.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public System.Threading.Tasks.Task<System.Net.Sockets.Socket> AcceptSocketAsync ();\n    parameters: []\n    return:\n      type: System.Threading.Tasks.Task{System.Net.Sockets.Socket}\n      description: \"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;  \\n  \\n The task object representing the asynchronous operation. The &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; property on the task object returns a <xref:System.Net.Sockets.Socket> used to send and receive data.\"\n  overload: System.Net.Sockets.TcpListener.AcceptSocketAsync*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The listener has not been started with a call to <xref:System.Net.Sockets.TcpListener.Start*>.\n  platform:\n  - net462\n- uid: System.Net.Sockets.TcpListener.AcceptTcpClient\n  id: AcceptTcpClient\n  parent: System.Net.Sockets.TcpListener\n  langs:\n  - csharp\n  name: AcceptTcpClient()\n  nameWithType: TcpListener.AcceptTcpClient()\n  fullName: System.Net.Sockets.TcpListener.AcceptTcpClient()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Accepts a pending connection request.\n  remarks: \"AcceptTcpClient is a blocking method that returns a <xref:System.Net.Sockets.TcpClient> that you can use to send and receive data. Use the <xref:System.Net.Sockets.TcpListener.Pending%2A> method to determine if connection requests are available in the incoming connection queue if you want to avoid blocking.  \\n  \\n Use the <xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=fullName> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream> of the returned <xref:System.Net.Sockets.TcpClient>. The <xref:System.Net.Sockets.NetworkStream> will provide you with methods for sending and receiving with the remote host. When you are through with the <xref:System.Net.Sockets.TcpClient>, be sure to call its <xref:System.Net.Sockets.TcpClient.Close%2A> method. If you want greater flexibility than a <xref:System.Net.Sockets.TcpClient> offers, consider using <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"In the following code example, the AcceptTcpClient method is used to return a <xref:System.Net.Sockets.TcpClient>. This <xref:System.Net.Sockets.TcpClient> is used to communicate with the newly connected client.  \\n  \\n [!code-cs[Classic TcpListenerExample#1](~/add/codesnippet/csharp/m-system.net.sockets.tcp_15_1.cs)]\\n [!code-cpp[Classic TcpListenerExample#1](~/add/codesnippet/cpp/m-system.net.sockets.tcp_15_1.cpp)]\\n [!code-vb[Classic TcpListenerExample#1](~/add/codesnippet/visualbasic/m-system.net.sockets.tcp_15_1.vb)]\"\n  syntax:\n    content: public System.Net.Sockets.TcpClient AcceptTcpClient ();\n    parameters: []\n    return:\n      type: System.Net.Sockets.TcpClient\n      description: A <xref href=\"System.Net.Sockets.TcpClient\"></xref> used to send and receive data.\n  overload: System.Net.Sockets.TcpListener.AcceptTcpClient*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The listener has not been started with a call to <xref:System.Net.Sockets.TcpListener.Start*>.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: Use the &lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt; property to obtain the specific error code. When you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.\n  platform:\n  - net462\n- uid: System.Net.Sockets.TcpListener.AcceptTcpClientAsync\n  id: AcceptTcpClientAsync\n  parent: System.Net.Sockets.TcpListener\n  langs:\n  - csharp\n  name: AcceptTcpClientAsync()\n  nameWithType: TcpListener.AcceptTcpClientAsync()\n  fullName: System.Net.Sockets.TcpListener.AcceptTcpClientAsync()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Accepts a pending connection request as an asynchronous operation.\n  remarks: \"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the TCP connection has been accepted.  \\n  \\n Use the <xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=fullName> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream> of the returned <xref:System.Net.Sockets.TcpClient> in the <xref:System.Threading.Tasks.Task%601>. The <xref:System.Net.Sockets.NetworkStream> will provide you with methods for sending and receiving with the remote host. When you are through with the <xref:System.Net.Sockets.TcpClient>, be sure to call its <xref:System.Net.Sockets.TcpClient.Close%2A> method. If you want greater flexibility than a <xref:System.Net.Sockets.TcpClient> offers, consider using <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> or <xref:System.Net.Sockets.TcpListener.AcceptSocketAsync%2A>.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public System.Threading.Tasks.Task<System.Net.Sockets.TcpClient> AcceptTcpClientAsync ();\n    parameters: []\n    return:\n      type: System.Threading.Tasks.Task{System.Net.Sockets.TcpClient}\n      description: \"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;  \\n  \\n The task object representing the asynchronous operation. The &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; property on the task object returns a <xref href=\\\"System.Net.Sockets.TcpClient\\\"></xref> used to send and receive data.\"\n  overload: System.Net.Sockets.TcpListener.AcceptTcpClientAsync*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The listener has not been started with a call to <xref:System.Net.Sockets.TcpListener.Start*>.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: Use the &lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt; property to obtain the specific error code. When you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.\n  platform:\n  - net462\n- uid: System.Net.Sockets.TcpListener.Active\n  id: Active\n  parent: System.Net.Sockets.TcpListener\n  langs:\n  - csharp\n  name: Active\n  nameWithType: TcpListener.Active\n  fullName: System.Net.Sockets.TcpListener.Active\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Gets a value that indicates whether <xref href=\"System.Net.Sockets.TcpListener\"></xref> is actively listening for client connections.\n  remarks: Classes deriving from <xref:System.Net.Sockets.TcpListener> can use this property to determine if the <xref:System.Net.Sockets.Socket> is currently listening for incoming connection attempts. The <xref:System.Net.Sockets.TcpClient.Active%2A> property can be used to avoid redundant <xref:System.Net.Sockets.TcpListener.Start%2A> attempts.\n  syntax:\n    content: protected bool Active { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <xref href=\"System.Net.Sockets.TcpListener\"></xref> is actively listening; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Net.Sockets.TcpListener.Active*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)\n  id: AllowNatTraversal(System.Boolean)\n  parent: System.Net.Sockets.TcpListener\n  langs:\n  - csharp\n  name: AllowNatTraversal(Boolean)\n  nameWithType: TcpListener.AllowNatTraversal(Boolean)\n  fullName: System.Net.Sockets.TcpListener.AllowNatTraversal(Boolean)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Enables or disables Network Address Translation (NAT) traversal on a <xref href=\"System.Net.Sockets.TcpListener\"></xref> instance.\n  remarks: \"The AllowNatTraversal method is used to enable or disable NAT traversal for a <xref:System.Net.Sockets.TcpListener> instance. NAT traversal may be provided using Teredo, 6to4, or an ISATAP tunnel.  \\n  \\n When the `allowed` parameter is false, the <xref:System.Net.Sockets.SocketOptionName> option on the associated socket is set to <xref:System.Net.Sockets.IPProtectionLevel>. This explicitly disables NAT traversal for a <xref:System.Net.Sockets.TcpListener> instance.  \\n  \\n When the `allowed` parameter is true, the <xref:System.Net.Sockets.SocketOptionName> option on the associated socket is set to <xref:System.Net.Sockets.IPProtectionLevel>. This may allow NAT traversal for a <xref:System.Net.Sockets.TcpListener> depending on firewall rules in place on the system.  \\n  \\n The AllowNatTraversal method must be invoked prior to calling the <xref:System.Net.Sockets.TcpListener.Start%2A> method to begin listening for incoming connection requests (before the socket is bound). If AllowNatTraversal method is called after the <xref:System.Net.Sockets.TcpListener.Start%2A> method, then an <xref:System.InvalidOperationException> will be thrown.  \\n  \\n A Teredo address is an IPv6 address with the prefix of 2001::/32. Teredo addresses can be returned through normal DNS name resolution or enumerated as an IPv6 address assigned to a local interface.\"\n  syntax:\n    content: public void AllowNatTraversal (bool allowed);\n    parameters:\n    - id: allowed\n      type: System.Boolean\n      description: A Boolean value that specifies whether to enable or disable NAT traversal.\n  overload: System.Net.Sockets.TcpListener.AllowNatTraversal*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The AllowNatTraversal method was called after calling the <xref:System.Net.Sockets.TcpListener.Start*> method\n  platform:\n  - net462\n- uid: System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)\n  id: BeginAcceptSocket(System.AsyncCallback,System.Object)\n  parent: System.Net.Sockets.TcpListener\n  langs:\n  - csharp\n  name: BeginAcceptSocket(AsyncCallback,Object)\n  nameWithType: TcpListener.BeginAcceptSocket(AsyncCallback,Object)\n  fullName: System.Net.Sockets.TcpListener.BeginAcceptSocket(AsyncCallback,Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Begins an asynchronous operation to accept an incoming connection attempt.\n  remarks: \"The asynchronous BeginAcceptSocket operation must be completed by calling the <xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A> method. Typically, the method is invoked by the `callback` delegate.  \\n  \\n This method does not block until the operation completes. To block until the operation completes, use the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method.  \\n  \\n For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md).  \\n  \\n> [!NOTE]\\n>  You can call the <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> property of the returned <xref:System.Net.Sockets.Socket> to identify the remote host's network address and port number.  \\n  \\n> [!NOTE]\\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library/](http://msdn.microsoft.com/library/) for a detailed description of the error.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"The following code example demonstrates the use of the BeginAcceptSocket method to create and connect a socket. The callback delegate calls the <xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A> method to end the asynchronous request.  \\n  \\n [!code-cpp[System.Net.Sockets.TcpListener1#4](~/add/codesnippet/cpp/1d0c3046-b366-41a2-aab6-_1.cpp)]\\n [!code-cs[System.Net.Sockets.TcpListener1#4](~/add/codesnippet/csharp/1d0c3046-b366-41a2-aab6-_1.cs)]\\n [!code-vb[System.Net.Sockets.TcpListener1#4](~/add/codesnippet/visualbasic/1d0c3046-b366-41a2-aab6-_1.vb)]\"\n  syntax:\n    content: public IAsyncResult BeginAcceptSocket (AsyncCallback callback, object state);\n    parameters:\n    - id: callback\n      type: System.AsyncCallback\n      description: An <xref:System.AsyncCallback> delegate that references the method to invoke when the operation is complete.\n    - id: state\n      type: System.Object\n      description: A user-defined object containing information about the accept operation. This object is passed to the `callback` delegate when the operation is complete.\n    return:\n      type: System.IAsyncResult\n      description: An <xref:System.IAsyncResult> that references the asynchronous creation of the <xref:System.Net.Sockets.Socket>.\n  overload: System.Net.Sockets.TcpListener.BeginAcceptSocket*\n  exceptions:\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred while attempting to access the socket. See the Remarks section for more information.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref:System.Net.Sockets.Socket> has been closed.\n  platform:\n  - net462\n- uid: System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)\n  id: BeginAcceptTcpClient(System.AsyncCallback,System.Object)\n  parent: System.Net.Sockets.TcpListener\n  langs:\n  - csharp\n  name: BeginAcceptTcpClient(AsyncCallback,Object)\n  nameWithType: TcpListener.BeginAcceptTcpClient(AsyncCallback,Object)\n  fullName: System.Net.Sockets.TcpListener.BeginAcceptTcpClient(AsyncCallback,Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Begins an asynchronous operation to accept an incoming connection attempt.\n  remarks: \"The asynchronous BeginAcceptTcpClient operation must be completed by calling the <xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A> method. Typically, the method is invoked by the `callback` delegate.  \\n  \\n This method does not block until the operation completes. To block until the operation completes, use the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method.  \\n  \\n For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md).  \\n  \\n> [!NOTE]\\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library/](http://msdn.microsoft.com/library/) for a detailed description of the error.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"The following code example demonstrates the use of the BeginAcceptTcpClient method to create and connect a socket. The callback delegate calls the <xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A> method to end the asynchronous request.  \\n  \\n [!code-cpp[System.Net.Sockets.TcpListener1#5](~/add/codesnippet/cpp/5290dfb8-7e8f-4cf6-b64e-_1.cpp)]\\n [!code-cs[System.Net.Sockets.TcpListener1#5](~/add/codesnippet/csharp/5290dfb8-7e8f-4cf6-b64e-_1.cs)]\\n [!code-vb[System.Net.Sockets.TcpListener1#5](~/add/codesnippet/visualbasic/5290dfb8-7e8f-4cf6-b64e-_1.vb)]\"\n  syntax:\n    content: public IAsyncResult BeginAcceptTcpClient (AsyncCallback callback, object state);\n    parameters:\n    - id: callback\n      type: System.AsyncCallback\n      description: An <xref:System.AsyncCallback> delegate that references the method to invoke when the operation is complete.\n    - id: state\n      type: System.Object\n      description: A user-defined object containing information about the accept operation. This object is passed to the `callback` delegate when the operation is complete.\n    return:\n      type: System.IAsyncResult\n      description: An <xref:System.IAsyncResult> that references the asynchronous creation of the <xref href=\"System.Net.Sockets.TcpClient\"></xref>.\n  overload: System.Net.Sockets.TcpListener.BeginAcceptTcpClient*\n  exceptions:\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred while attempting to access the socket. See the Remarks section for more information.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref:System.Net.Sockets.Socket> has been closed.\n  platform:\n  - net462\n- uid: System.Net.Sockets.TcpListener.Create(System.Int32)\n  id: Create(System.Int32)\n  parent: System.Net.Sockets.TcpListener\n  langs:\n  - csharp\n  name: Create(Int32)\n  nameWithType: TcpListener.Create(Int32)\n  fullName: System.Net.Sockets.TcpListener.Create(Int32)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Creates a new <xref href=\"System.Net.Sockets.TcpListener\"></xref> instance to listen on the specified port.\n  syntax:\n    content: public static System.Net.Sockets.TcpListener Create (int port);\n    parameters:\n    - id: port\n      type: System.Int32\n      description: The port on which to listen for incoming connection attempts.\n    return:\n      type: System.Net.Sockets.TcpListener\n      description: \"Returns <xref href=\\\"System.Net.Sockets.TcpListener\\\"></xref>.  \\n  \\n A new <xref href=\\\"System.Net.Sockets.TcpListener\\\"></xref> instance to listen on the specified port.\"\n  overload: System.Net.Sockets.TcpListener.Create*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)\n  id: EndAcceptSocket(System.IAsyncResult)\n  parent: System.Net.Sockets.TcpListener\n  langs:\n  - csharp\n  name: EndAcceptSocket(IAsyncResult)\n  nameWithType: TcpListener.EndAcceptSocket(IAsyncResult)\n  fullName: System.Net.Sockets.TcpListener.EndAcceptSocket(IAsyncResult)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Asynchronously accepts an incoming connection attempt and creates a new <xref:System.Net.Sockets.Socket> to handle remote host communication.\n  remarks: \"This method blocks until the operation is complete. To perform this operation synchronously, use the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method.  \\n  \\n> [!NOTE]\\n>  You can call the <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> property of the returned <xref:System.Net.Sockets.Socket> to identify the remote host's network address and port number.  \\n  \\n> [!NOTE]\\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library/](http://msdn.microsoft.com/library/) for a detailed description of the error.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"The following code example demonstrates the use of the <xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A> method to create and connect a socket. The callback delegate calls the EndAcceptSocket method to end the asynchronous request.  \\n  \\n [!code-cpp[System.Net.Sockets.TcpListener1#4](~/add/codesnippet/cpp/m-system.net.sockets.tcp_14_1.cpp)]\\n [!code-cs[System.Net.Sockets.TcpListener1#4](~/add/codesnippet/csharp/m-system.net.sockets.tcp_14_1.cs)]\\n [!code-vb[System.Net.Sockets.TcpListener1#4](~/add/codesnippet/visualbasic/m-system.net.sockets.tcp_14_1.vb)]\"\n  syntax:\n    content: public System.Net.Sockets.Socket EndAcceptSocket (IAsyncResult asyncResult);\n    parameters:\n    - id: asyncResult\n      type: System.IAsyncResult\n      description: An <xref:System.IAsyncResult> returned by a call to the <xref:System.Net.Sockets.TcpListener.BeginAcceptSocket*> method.\n    return:\n      type: System.Net.Sockets.Socket\n      description: \"A <xref:System.Net.Sockets.Socket>.  \\n  \\n The <xref:System.Net.Sockets.Socket> used to send and receive data.\"\n  overload: System.Net.Sockets.TcpListener.EndAcceptSocket*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The underlying <xref:System.Net.Sockets.Socket> has been closed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>asyncResult</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>asyncResult</code> parameter was not created by a call to the <xref:System.Net.Sockets.TcpListener.BeginAcceptSocket*> method.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The EndAcceptSocket method was previously called.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred while attempting to access the <xref:System.Net.Sockets.Socket>. See the Remarks section for more information.\n  platform:\n  - net462\n- uid: System.Net.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)\n  id: EndAcceptTcpClient(System.IAsyncResult)\n  parent: System.Net.Sockets.TcpListener\n  langs:\n  - csharp\n  name: EndAcceptTcpClient(IAsyncResult)\n  nameWithType: TcpListener.EndAcceptTcpClient(IAsyncResult)\n  fullName: System.Net.Sockets.TcpListener.EndAcceptTcpClient(IAsyncResult)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Asynchronously accepts an incoming connection attempt and creates a new <xref href=\"System.Net.Sockets.TcpClient\"></xref> to handle remote host communication.\n  remarks: \"This method blocks until the operation is complete. To perform this operation synchronously, use the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method.  \\n  \\n> [!NOTE]\\n>  You can call the <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> property of the underlying socket (<xref:System.Net.Sockets.TcpClient.Client%2A>) to identify the remote host's network address and port number.  \\n  \\n> [!NOTE]\\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library/](http://msdn.microsoft.com/library/) for a detailed description of the error.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"The following code example demonstrates the use of the <xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A> method to create and connect a socket. The callback delegate calls the EndAcceptTcpClient method to end the asynchronous request.  \\n  \\n [!code-cpp[System.Net.Sockets.TcpListener1#5](~/add/codesnippet/cpp/m-system.net.sockets.tcp_8_1.cpp)]\\n [!code-cs[System.Net.Sockets.TcpListener1#5](~/add/codesnippet/csharp/m-system.net.sockets.tcp_8_1.cs)]\\n [!code-vb[System.Net.Sockets.TcpListener1#5](~/add/codesnippet/visualbasic/m-system.net.sockets.tcp_8_1.vb)]\"\n  syntax:\n    content: public System.Net.Sockets.TcpClient EndAcceptTcpClient (IAsyncResult asyncResult);\n    parameters:\n    - id: asyncResult\n      type: System.IAsyncResult\n      description: An <xref:System.IAsyncResult> returned by a call to the <xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient*> method.\n    return:\n      type: System.Net.Sockets.TcpClient\n      description: \"A <xref href=\\\"System.Net.Sockets.TcpClient\\\"></xref>.  \\n  \\n The <xref href=\\\"System.Net.Sockets.TcpClient\\\"></xref> used to send and receive data.\"\n  overload: System.Net.Sockets.TcpListener.EndAcceptTcpClient*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Sockets.TcpListener.ExclusiveAddressUse\n  id: ExclusiveAddressUse\n  parent: System.Net.Sockets.TcpListener\n  langs:\n  - csharp\n  name: ExclusiveAddressUse\n  nameWithType: TcpListener.ExclusiveAddressUse\n  fullName: System.Net.Sockets.TcpListener.ExclusiveAddressUse\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Gets or sets a <xref:System.Boolean> value that specifies whether the <xref href=\"System.Net.Sockets.TcpListener\"></xref> allows only one underlying socket to listen to a specific port.\n  remarks: \"By default, multiple listeners can listen to a specific port. However, only one of the listeners can perform operations on the network traffic sent to the port. If more than one listener attempts to bind to a particular port, then the one with the more specific IP address handles the network traffic sent to that port. You can use the <xref:System.Net.Sockets.Socket.ExclusiveAddressUse%2A> property to prevent multiple listeners from listening to a specific port.  \\n  \\n Set this property before calling <xref:System.Net.Sockets.TcpListener.Start%2A>, or call the <xref:System.Net.Sockets.TcpListener.Stop%2A> method and then set this property.\"\n  example:\n  - \"The following code example gets and sets the ExclusiveAddressUse property.  \\n  \\n [!code-cpp[System.Net.Sockets.TcpListener1#2](~/add/codesnippet/cpp/p-system.net.sockets.tcp_9_1.cpp)]\\n [!code-cs[System.Net.Sockets.TcpListener1#2](~/add/codesnippet/csharp/p-system.net.sockets.tcp_9_1.cs)]\\n [!code-vb[System.Net.Sockets.TcpListener1#2](~/add/codesnippet/visualbasic/p-system.net.sockets.tcp_9_1.vb)]\"\n  syntax:\n    content: public bool ExclusiveAddressUse { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Net.Sockets.TcpListener\"></xref> allows only one <xref href=\"System.Net.Sockets.TcpListener\"></xref> to listen to a specific port; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. . The default is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> for Windows Server 2003 and Windows XP Service Pack 2 and later, and <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> for all other versions.\n  overload: System.Net.Sockets.TcpListener.ExclusiveAddressUse*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The <xref href=\"System.Net.Sockets.TcpListener\"></xref> has been started. Call the <xref href=\"System.Net.Sockets.TcpListener.Stop\"></xref> method and then set the <xref:System.Net.Sockets.Socket.ExclusiveAddressUse*> property.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when attempting to access the underlying socket.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The underlying <xref:System.Net.Sockets.Socket> has been closed.\n  platform:\n  - net462\n- uid: System.Net.Sockets.TcpListener.LocalEndpoint\n  id: LocalEndpoint\n  parent: System.Net.Sockets.TcpListener\n  langs:\n  - csharp\n  name: LocalEndpoint\n  nameWithType: TcpListener.LocalEndpoint\n  fullName: System.Net.Sockets.TcpListener.LocalEndpoint\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Gets the underlying <xref:System.Net.EndPoint> of the current <xref href=\"System.Net.Sockets.TcpListener\"></xref>.\n  remarks: You can use the LocalEndpoint property to identify the local network interface and port number being used to listen for incoming client connection requests, after a socket connection has been made. You must first cast this <xref:System.Net.EndPoint> to an <xref:System.Net.IPEndPoint>. You can then call the <xref:System.Net.IPEndPoint.Address%2A?displayProperty=fullName> property to retrieve the local IP address, and the <xref:System.Net.IPEndPoint.Port%2A?displayProperty=fullName> property to retrieve the local port number.\n  example:\n  - \"The following code example displays the local IP address and port number on which the <xref:System.Net.Sockets.TcpListener> is listening for incoming connection requests.  \\n  \\n [!code-cpp[TcpListener_Pending_LocalEndPoint#1](~/add/codesnippet/cpp/p-system.net.sockets.tcp_5_1.cpp)]\\n [!code-cs[TcpListener_Pending_LocalEndPoint#1](~/add/codesnippet/csharp/p-system.net.sockets.tcp_5_1.cs)]\\n [!code-vb[TcpListener_Pending_LocalEndPoint#1](~/add/codesnippet/visualbasic/p-system.net.sockets.tcp_5_1.vb)]\"\n  syntax:\n    content: public System.Net.EndPoint LocalEndpoint { get; }\n    return:\n      type: System.Net.EndPoint\n      description: The <xref:System.Net.EndPoint> to which the <xref:System.Net.Sockets.Socket> is bound.\n  overload: System.Net.Sockets.TcpListener.LocalEndpoint*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Sockets.TcpListener.Pending\n  id: Pending\n  parent: System.Net.Sockets.TcpListener\n  langs:\n  - csharp\n  name: Pending()\n  nameWithType: TcpListener.Pending()\n  fullName: System.Net.Sockets.TcpListener.Pending()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Determines if there are pending connection requests.\n  remarks: This non-blocking method determines if there are any pending connection requests. Because the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> and <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> methods block execution until the <xref:System.Net.Sockets.TcpListener.Start%2A> method has queued an incoming connection request, the Pending method can be used to determine if connections are available before attempting to accept them.\n  example:\n  - \"The following code example checks the Pending method. If a connection request is waiting to be accepted, then a call to the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method is made.  \\n  \\n [!code-cpp[TcpListener_Pending_LocalEndPoint#1](~/add/codesnippet/cpp/m-system.net.sockets.tcp_5_1.cpp)]\\n [!code-cs[TcpListener_Pending_LocalEndPoint#1](~/add/codesnippet/csharp/m-system.net.sockets.tcp_5_1.cs)]\\n [!code-vb[TcpListener_Pending_LocalEndPoint#1](~/add/codesnippet/visualbasic/m-system.net.sockets.tcp_5_1.vb)]\"\n  syntax:\n    content: public bool Pending ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if connections are pending; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Net.Sockets.TcpListener.Pending*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The listener has not been started with a call to <xref:System.Net.Sockets.TcpListener.Start*>.\n  platform:\n  - net462\n- uid: System.Net.Sockets.TcpListener.Server\n  id: Server\n  parent: System.Net.Sockets.TcpListener\n  langs:\n  - csharp\n  name: Server\n  nameWithType: TcpListener.Server\n  fullName: System.Net.Sockets.TcpListener.Server\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Gets the underlying network <xref:System.Net.Sockets.Socket>.\n  remarks: \"<xref:System.Net.Sockets.TcpListener> creates a <xref:System.Net.Sockets.Socket> to listen for incoming client connection requests. Classes deriving from <xref:System.Net.Sockets.TcpListener> can use this property to get this <xref:System.Net.Sockets.Socket>. Use the underlying <xref:System.Net.Sockets.Socket> returned by the Server property if you require access beyond that which <xref:System.Net.Sockets.TcpListener> provides.  \\n  \\n> [!NOTE]\\n>  The Server property only returns the <xref:System.Net.Sockets.Socket> used to listen for incoming client connection requests. Use the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method to accept a pending connection request and obtain a <xref:System.Net.Sockets.Socket> for sending and receiving data. You can also use the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method to accept a pending connection request and obtain a <xref:System.Net.Sockets.TcpClient> for sending and receiving data.\"\n  example:\n  - \"The following code example demonstrates the use of the Server property. The underlying <xref:System.Net.Sockets.Socket> is retrieved and the <xref:System.Net.Sockets.SocketOptionName><xref:System.Net.Sockets.Socket> option is configured to time out after 10 seconds if data still remains in the network buffer after the connection is closed.  \\n  \\n [!code-vb[TcpListenerProtectedMembers1#1](~/add/codesnippet/visualbasic/p-system.net.sockets.tcp_10_1.vb)]\\n [!code-cs[TcpListenerProtectedMembers1#1](~/add/codesnippet/csharp/p-system.net.sockets.tcp_10_1.cs)]\"\n  syntax:\n    content: public System.Net.Sockets.Socket Server { get; }\n    return:\n      type: System.Net.Sockets.Socket\n      description: The underlying <xref:System.Net.Sockets.Socket>.\n  overload: System.Net.Sockets.TcpListener.Server*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Sockets.TcpListener.Start\n  id: Start\n  parent: System.Net.Sockets.TcpListener\n  langs:\n  - csharp\n  name: Start()\n  nameWithType: TcpListener.Start()\n  fullName: System.Net.Sockets.TcpListener.Start()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Starts listening for incoming connection requests.\n  remarks: \"The Start method initializes the underlying <xref:System.Net.Sockets.Socket>, binds it to a local endpoint, and listens for incoming connection attempts. If a connection request is received, the Start method will queue the request and continue listening for additional requests until you call the <xref:System.Net.Sockets.TcpListener.Stop%2A> method. If <xref:System.Net.Sockets.TcpListener> receives a connection request after it has already queued the maximum number of connections, it will throw a <xref:System.Net.Sockets.SocketException> on the client.  \\n  \\n To remove a connection from the incoming connection queue, use either the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method or the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method. The <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method will remove a connection from the queue and return a <xref:System.Net.Sockets.TcpClient> that you can use to send and receive data. The <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method will return a <xref:System.Net.Sockets.Socket> that you can use to do the same. If your application only requires synchronous I/O, use <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>. For more detailed behavioral control, use <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>. Both of these methods block until a connection request is available in the queue.  \\n  \\n Use the <xref:System.Net.Sockets.TcpListener.Stop%2A> method to close the <xref:System.Net.Sockets.TcpListener> and stop listening. You are responsible for closing your accepted connections separately.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"The following code example demonstrates how Start is used to listen for incoming client connection attempts.  \\n  \\n [!code-cpp[System.Net.Sockets.TcpListener1#3](~/add/codesnippet/cpp/m-system.net.sockets.tcp_6_1.cpp)]\\n [!code-cs[System.Net.Sockets.TcpListener1#3](~/add/codesnippet/csharp/m-system.net.sockets.tcp_6_1.cs)]\\n [!code-vb[System.Net.Sockets.TcpListener1#3](~/add/codesnippet/visualbasic/m-system.net.sockets.tcp_6_1.vb)]\"\n  syntax:\n    content: public void Start ();\n    parameters: []\n  overload: System.Net.Sockets.TcpListener.Start*\n  exceptions:\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: Use the &lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt; property to obtain the specific error code. When you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.\n  platform:\n  - net462\n- uid: System.Net.Sockets.TcpListener.Start(System.Int32)\n  id: Start(System.Int32)\n  parent: System.Net.Sockets.TcpListener\n  langs:\n  - csharp\n  name: Start(Int32)\n  nameWithType: TcpListener.Start(Int32)\n  fullName: System.Net.Sockets.TcpListener.Start(Int32)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Starts listening for incoming connection requests with a maximum number of pending connection.\n  remarks: \"The <xref:System.Net.Sockets.TcpListener.Start%2A> method initializes the underlying <xref:System.Net.Sockets.Socket>, binds it to a local endpoint, and listens for incoming connection attempts. If a connection request is received, <xref:System.Net.Sockets.TcpListener.Start%2A> will queue the request and continue listening for additional requests until you call the <xref:System.Net.Sockets.TcpListener.Stop%2A> method. If <xref:System.Net.Sockets.TcpListener> receives a connection request after it has already queued the maximum number of connections it will throw a <xref:System.Net.Sockets.SocketException> on the client.  \\n  \\n To remove a connection from the incoming connection queue, use either the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method or the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method. The <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method will remove a connection from the queue and return a <xref:System.Net.Sockets.TcpClient> that you can use to send and receive data. The <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method will return a <xref:System.Net.Sockets.Socket> that you can use to do the same. If your application only requires synchronous I/O, use the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>. For more detailed behavioral control, use <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method. Both of these methods block until a connection request is available in the queue.  \\n  \\n Use the <xref:System.Net.Sockets.TcpListener.Stop%2A> method to close the <xref:System.Net.Sockets.TcpListener> and stop listening. You are responsible for closing your accepted connections separately.  \\n  \\n> [!NOTE]\\n>  Use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library/](http://msdn.microsoft.com/library/) for a detailed description of the error.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"The following code example demonstrates how <xref:System.Net.Sockets.TcpListener.Start%2A> is used to listen for incoming client connection attempts.  \\n  \\n [!code-cpp[System.Net.Sockets.TcpListener1#3](~/add/codesnippet/cpp/m-system.net.sockets.tcp_17_1.cpp)]\\n [!code-cs[System.Net.Sockets.TcpListener1#3](~/add/codesnippet/csharp/m-system.net.sockets.tcp_17_1.cs)]\\n [!code-vb[System.Net.Sockets.TcpListener1#3](~/add/codesnippet/visualbasic/m-system.net.sockets.tcp_17_1.vb)]\"\n  syntax:\n    content: public void Start (int backlog);\n    parameters:\n    - id: backlog\n      type: System.Int32\n      description: The maximum length of the pending connections queue.\n  overload: System.Net.Sockets.TcpListener.Start*\n  exceptions:\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred while accessing the socket. See the Remarks section for more information.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The<code> backlog</code> parameter is less than zero or exceeds the maximum number of permitted connections.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The underlying <xref:System.Net.Sockets.Socket> is null.\n  platform:\n  - net462\n- uid: System.Net.Sockets.TcpListener.Stop\n  id: Stop\n  parent: System.Net.Sockets.TcpListener\n  langs:\n  - csharp\n  name: Stop()\n  nameWithType: TcpListener.Stop()\n  fullName: System.Net.Sockets.TcpListener.Stop()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Closes the listener.\n  remarks: \"Stop closes the listener. Any unaccepted connection requests in the queue will be lost. Remote hosts waiting for a connection to be accepted will throw a <xref:System.Net.Sockets.SocketException>. You are responsible for closing your accepted connections separately.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"The following code example demonstrates using the Stop method to close the underlying <xref:System.Net.Sockets.Socket>.  \\n  \\n [!code-cpp[System.Net.Sockets.TcpListener#1](~/add/codesnippet/cpp/m-system.net.sockets.tcp_9_1.cpp)]\\n [!code-cs[System.Net.Sockets.TcpListener#1](~/add/codesnippet/csharp/m-system.net.sockets.tcp_9_1.cs)]\\n [!code-vb[System.Net.Sockets.TcpListener#1](~/add/codesnippet/visualbasic/m-system.net.sockets.tcp_9_1.vb)]\"\n  syntax:\n    content: public void Stop ();\n    parameters: []\n  overload: System.Net.Sockets.TcpListener.Stop*\n  exceptions:\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: Use the &lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt; property to obtain the specific error code. When you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.Net.Sockets.SocketException\n  isExternal: true\n  name: System.Net.Sockets.SocketException\n- uid: System.ObjectDisposedException\n  isExternal: true\n  name: System.ObjectDisposedException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.Net.Sockets.TcpListener.#ctor(System.Int32)\n  parent: System.Net.Sockets.TcpListener\n  isExternal: false\n  name: TcpListener(Int32)\n  nameWithType: TcpListener.TcpListener(Int32)\n  fullName: System.Net.Sockets.TcpListener.TcpListener(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)\n  parent: System.Net.Sockets.TcpListener\n  isExternal: false\n  name: TcpListener(IPEndPoint)\n  nameWithType: TcpListener.TcpListener(IPEndPoint)\n  fullName: System.Net.Sockets.TcpListener.TcpListener(IPEndPoint)\n- uid: System.Net.IPEndPoint\n  parent: System.Net\n  isExternal: true\n  name: IPEndPoint\n  nameWithType: IPEndPoint\n  fullName: System.Net.IPEndPoint\n- uid: System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)\n  parent: System.Net.Sockets.TcpListener\n  isExternal: false\n  name: TcpListener(IPAddress,Int32)\n  nameWithType: TcpListener.TcpListener(IPAddress,Int32)\n  fullName: System.Net.Sockets.TcpListener.TcpListener(IPAddress,Int32)\n- uid: System.Net.IPAddress\n  parent: System.Net\n  isExternal: true\n  name: IPAddress\n  nameWithType: IPAddress\n  fullName: System.Net.IPAddress\n- uid: System.Net.Sockets.TcpListener.AcceptSocket\n  parent: System.Net.Sockets.TcpListener\n  isExternal: false\n  name: AcceptSocket()\n  nameWithType: TcpListener.AcceptSocket()\n  fullName: System.Net.Sockets.TcpListener.AcceptSocket()\n- uid: System.Net.Sockets.Socket\n  parent: System.Net.Sockets\n  isExternal: true\n  name: Socket\n  nameWithType: Socket\n  fullName: System.Net.Sockets.Socket\n- uid: System.Net.Sockets.TcpListener.AcceptSocketAsync\n  parent: System.Net.Sockets.TcpListener\n  isExternal: false\n  name: AcceptSocketAsync()\n  nameWithType: TcpListener.AcceptSocketAsync()\n  fullName: System.Net.Sockets.TcpListener.AcceptSocketAsync()\n- uid: System.Threading.Tasks.Task{System.Net.Sockets.Socket}\n  parent: System.Threading.Tasks\n  isExternal: true\n  name: Task<Socket>\n  nameWithType: Task<Socket>\n  fullName: System.Threading.Tasks.Task<System.Net.Sockets.Socket>\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: Task<System.Net.Sockets.Socket>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Net.Sockets.Socket\n    name: Socket\n    nameWithType: Socket\n    fullName: Socket\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Net.Sockets.TcpListener.AcceptTcpClient\n  parent: System.Net.Sockets.TcpListener\n  isExternal: false\n  name: AcceptTcpClient()\n  nameWithType: TcpListener.AcceptTcpClient()\n  fullName: System.Net.Sockets.TcpListener.AcceptTcpClient()\n- uid: System.Net.Sockets.TcpClient\n  parent: System.Net.Sockets\n  isExternal: false\n  name: TcpClient\n  nameWithType: TcpClient\n  fullName: System.Net.Sockets.TcpClient\n- uid: System.Net.Sockets.TcpListener.AcceptTcpClientAsync\n  parent: System.Net.Sockets.TcpListener\n  isExternal: false\n  name: AcceptTcpClientAsync()\n  nameWithType: TcpListener.AcceptTcpClientAsync()\n  fullName: System.Net.Sockets.TcpListener.AcceptTcpClientAsync()\n- uid: System.Threading.Tasks.Task{System.Net.Sockets.TcpClient}\n  parent: System.Threading.Tasks\n  isExternal: true\n  name: Task<TcpClient>\n  nameWithType: Task<TcpClient>\n  fullName: System.Threading.Tasks.Task<System.Net.Sockets.TcpClient>\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: Task<System.Net.Sockets.TcpClient>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Net.Sockets.TcpClient\n    name: TcpClient\n    nameWithType: TcpClient\n    fullName: TcpClient\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Net.Sockets.TcpListener.Active\n  parent: System.Net.Sockets.TcpListener\n  isExternal: false\n  name: Active\n  nameWithType: TcpListener.Active\n  fullName: System.Net.Sockets.TcpListener.Active\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)\n  parent: System.Net.Sockets.TcpListener\n  isExternal: false\n  name: AllowNatTraversal(Boolean)\n  nameWithType: TcpListener.AllowNatTraversal(Boolean)\n  fullName: System.Net.Sockets.TcpListener.AllowNatTraversal(Boolean)\n- uid: System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)\n  parent: System.Net.Sockets.TcpListener\n  isExternal: false\n  name: BeginAcceptSocket(AsyncCallback,Object)\n  nameWithType: TcpListener.BeginAcceptSocket(AsyncCallback,Object)\n  fullName: System.Net.Sockets.TcpListener.BeginAcceptSocket(AsyncCallback,Object)\n- uid: System.IAsyncResult\n  parent: System\n  isExternal: true\n  name: IAsyncResult\n  nameWithType: IAsyncResult\n  fullName: System.IAsyncResult\n- uid: System.AsyncCallback\n  parent: System\n  isExternal: true\n  name: AsyncCallback\n  nameWithType: AsyncCallback\n  fullName: System.AsyncCallback\n- uid: System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)\n  parent: System.Net.Sockets.TcpListener\n  isExternal: false\n  name: BeginAcceptTcpClient(AsyncCallback,Object)\n  nameWithType: TcpListener.BeginAcceptTcpClient(AsyncCallback,Object)\n  fullName: System.Net.Sockets.TcpListener.BeginAcceptTcpClient(AsyncCallback,Object)\n- uid: System.Net.Sockets.TcpListener.Create(System.Int32)\n  parent: System.Net.Sockets.TcpListener\n  isExternal: false\n  name: Create(Int32)\n  nameWithType: TcpListener.Create(Int32)\n  fullName: System.Net.Sockets.TcpListener.Create(Int32)\n- uid: System.Net.Sockets.TcpListener\n  parent: System.Net.Sockets\n  isExternal: false\n  name: TcpListener\n  nameWithType: TcpListener\n  fullName: System.Net.Sockets.TcpListener\n- uid: System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)\n  parent: System.Net.Sockets.TcpListener\n  isExternal: false\n  name: EndAcceptSocket(IAsyncResult)\n  nameWithType: TcpListener.EndAcceptSocket(IAsyncResult)\n  fullName: System.Net.Sockets.TcpListener.EndAcceptSocket(IAsyncResult)\n- uid: System.Net.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)\n  parent: System.Net.Sockets.TcpListener\n  isExternal: false\n  name: EndAcceptTcpClient(IAsyncResult)\n  nameWithType: TcpListener.EndAcceptTcpClient(IAsyncResult)\n  fullName: System.Net.Sockets.TcpListener.EndAcceptTcpClient(IAsyncResult)\n- uid: System.Net.Sockets.TcpListener.ExclusiveAddressUse\n  parent: System.Net.Sockets.TcpListener\n  isExternal: false\n  name: ExclusiveAddressUse\n  nameWithType: TcpListener.ExclusiveAddressUse\n  fullName: System.Net.Sockets.TcpListener.ExclusiveAddressUse\n- uid: System.Net.Sockets.TcpListener.LocalEndpoint\n  parent: System.Net.Sockets.TcpListener\n  isExternal: false\n  name: LocalEndpoint\n  nameWithType: TcpListener.LocalEndpoint\n  fullName: System.Net.Sockets.TcpListener.LocalEndpoint\n- uid: System.Net.EndPoint\n  parent: System.Net\n  isExternal: true\n  name: EndPoint\n  nameWithType: EndPoint\n  fullName: System.Net.EndPoint\n- uid: System.Net.Sockets.TcpListener.Pending\n  parent: System.Net.Sockets.TcpListener\n  isExternal: false\n  name: Pending()\n  nameWithType: TcpListener.Pending()\n  fullName: System.Net.Sockets.TcpListener.Pending()\n- uid: System.Net.Sockets.TcpListener.Server\n  parent: System.Net.Sockets.TcpListener\n  isExternal: false\n  name: Server\n  nameWithType: TcpListener.Server\n  fullName: System.Net.Sockets.TcpListener.Server\n- uid: System.Net.Sockets.TcpListener.Start\n  parent: System.Net.Sockets.TcpListener\n  isExternal: false\n  name: Start()\n  nameWithType: TcpListener.Start()\n  fullName: System.Net.Sockets.TcpListener.Start()\n- uid: System.Net.Sockets.TcpListener.Start(System.Int32)\n  parent: System.Net.Sockets.TcpListener\n  isExternal: false\n  name: Start(Int32)\n  nameWithType: TcpListener.Start(Int32)\n  fullName: System.Net.Sockets.TcpListener.Start(Int32)\n- uid: System.Net.Sockets.TcpListener.Stop\n  parent: System.Net.Sockets.TcpListener\n  isExternal: false\n  name: Stop()\n  nameWithType: TcpListener.Stop()\n  fullName: System.Net.Sockets.TcpListener.Stop()\n- uid: System.Net.Sockets.TcpListener.#ctor*\n  parent: System.Net.Sockets.TcpListener\n  isExternal: false\n  name: TcpListener\n  nameWithType: TcpListener.TcpListener\n- uid: System.Net.Sockets.TcpListener.AcceptSocket*\n  parent: System.Net.Sockets.TcpListener\n  isExternal: false\n  name: AcceptSocket\n  nameWithType: TcpListener.AcceptSocket\n- uid: System.Net.Sockets.TcpListener.AcceptSocketAsync*\n  parent: System.Net.Sockets.TcpListener\n  isExternal: false\n  name: AcceptSocketAsync\n  nameWithType: TcpListener.AcceptSocketAsync\n- uid: System.Net.Sockets.TcpListener.AcceptTcpClient*\n  parent: System.Net.Sockets.TcpListener\n  isExternal: false\n  name: AcceptTcpClient\n  nameWithType: TcpListener.AcceptTcpClient\n- uid: System.Net.Sockets.TcpListener.AcceptTcpClientAsync*\n  parent: System.Net.Sockets.TcpListener\n  isExternal: false\n  name: AcceptTcpClientAsync\n  nameWithType: TcpListener.AcceptTcpClientAsync\n- uid: System.Net.Sockets.TcpListener.Active*\n  parent: System.Net.Sockets.TcpListener\n  isExternal: false\n  name: Active\n  nameWithType: TcpListener.Active\n- uid: System.Net.Sockets.TcpListener.AllowNatTraversal*\n  parent: System.Net.Sockets.TcpListener\n  isExternal: false\n  name: AllowNatTraversal\n  nameWithType: TcpListener.AllowNatTraversal\n- uid: System.Net.Sockets.TcpListener.BeginAcceptSocket*\n  parent: System.Net.Sockets.TcpListener\n  isExternal: false\n  name: BeginAcceptSocket\n  nameWithType: TcpListener.BeginAcceptSocket\n- uid: System.Net.Sockets.TcpListener.BeginAcceptTcpClient*\n  parent: System.Net.Sockets.TcpListener\n  isExternal: false\n  name: BeginAcceptTcpClient\n  nameWithType: TcpListener.BeginAcceptTcpClient\n- uid: System.Net.Sockets.TcpListener.Create*\n  parent: System.Net.Sockets.TcpListener\n  isExternal: false\n  name: Create\n  nameWithType: TcpListener.Create\n- uid: System.Net.Sockets.TcpListener.EndAcceptSocket*\n  parent: System.Net.Sockets.TcpListener\n  isExternal: false\n  name: EndAcceptSocket\n  nameWithType: TcpListener.EndAcceptSocket\n- uid: System.Net.Sockets.TcpListener.EndAcceptTcpClient*\n  parent: System.Net.Sockets.TcpListener\n  isExternal: false\n  name: EndAcceptTcpClient\n  nameWithType: TcpListener.EndAcceptTcpClient\n- uid: System.Net.Sockets.TcpListener.ExclusiveAddressUse*\n  parent: System.Net.Sockets.TcpListener\n  isExternal: false\n  name: ExclusiveAddressUse\n  nameWithType: TcpListener.ExclusiveAddressUse\n- uid: System.Net.Sockets.TcpListener.LocalEndpoint*\n  parent: System.Net.Sockets.TcpListener\n  isExternal: false\n  name: LocalEndpoint\n  nameWithType: TcpListener.LocalEndpoint\n- uid: System.Net.Sockets.TcpListener.Pending*\n  parent: System.Net.Sockets.TcpListener\n  isExternal: false\n  name: Pending\n  nameWithType: TcpListener.Pending\n- uid: System.Net.Sockets.TcpListener.Server*\n  parent: System.Net.Sockets.TcpListener\n  isExternal: false\n  name: Server\n  nameWithType: TcpListener.Server\n- uid: System.Net.Sockets.TcpListener.Start*\n  parent: System.Net.Sockets.TcpListener\n  isExternal: false\n  name: Start\n  nameWithType: TcpListener.Start\n- uid: System.Net.Sockets.TcpListener.Stop*\n  parent: System.Net.Sockets.TcpListener\n  isExternal: false\n  name: Stop\n  nameWithType: TcpListener.Stop\n"}