{"nodes":[{"pos":[505,577],"content":"Serves as the base class for all ASP.NET health-monitoring audit events.","needQuote":true,"needEscape":true,"nodes":[{"content":"Serves as the base class for all ASP.NET health-monitoring audit events.","pos":[0,72]}]},{"pos":[590,2940],"content":"ASP.NET health monitoring allows production and operations staff to manage deployed Web applications. The <xref:System.Web.Management> namespace contains the health-event types responsible for packaging application health-status data and the provider types responsible for processing this data. It also contains supporting types that help during the management of health events.       The WebAuditEvent class is the base class from which the ASP.NET health-monitoring audit-event classes derive. The audit events generate information about security-related operations in a Web application and provide both a success and failure event for each audited operation.       The health-monitoring system can audit both successful and unsuccessful events, which means an application can be monitored for both normal and malfunctioning conditions. By default, only the failure audit events are recorded.       The following operations are audited by ASP.NET, and may generate success-or-failure health-monitoring audit events:      -   Login attempts made by users of an ASP.NET application. For more details about this auditing, see <xref:System.Web.Management.WebAuthenticationSuccessAuditEvent> and <xref:System.Web.Management.WebSuccessAuditEvent>.      -   Security-related events, such as authentication failures, failed resource access attempts, and other security-related events. The log of these events can be useful when investigating an intrusion or attack on the application. By default, no auditing support is provided for authorization failures of anonymous users. For more details about failure event audits, see <xref:System.Web.Management.WebAuthenticationFailureAuditEvent> and <xref:System.Web.Management.WebFailureAuditEvent>.      -   Custom events raised by an ASP.NET application. You can audit custom events by extending the functionality provided by the WebAuditEvent class and derived classes      > [!NOTE] >  In most cases you will be able to use the ASP.NET health-monitoring types as implemented, and you will control the health-monitoring system by specifying values in the `healthMonitoring` configuration section. You can also derive from the health-monitoring types to create your own custom events and providers. For an example of deriving from the WebAuditEvent class, see the example provided in this topic.","needQuote":false,"needEscape":true,"nodes":[{"content":"ASP.NET health monitoring allows production and operations staff to manage deployed Web applications.","pos":[0,101]},{"content":"The &lt;xref:System.Web.Management&gt; namespace contains the health-event types responsible for packaging application health-status data and the provider types responsible for processing this data.","pos":[102,294],"source":" The <xref:System.Web.Management> namespace contains the health-event types responsible for packaging application health-status data and the provider types responsible for processing this data."},{"content":"It also contains supporting types that help during the management of health events.","pos":[295,378]},{"content":"The WebAuditEvent class is the base class from which the ASP.NET health-monitoring audit-event classes derive.","pos":[385,495]},{"content":"The audit events generate information about security-related operations in a Web application and provide both a success and failure event for each audited operation.","pos":[496,661]},{"content":"The health-monitoring system can audit both successful and unsuccessful events, which means an application can be monitored for both normal and malfunctioning conditions.","pos":[668,838]},{"content":"By default, only the failure audit events are recorded.","pos":[839,894]},{"content":"The following operations are audited by ASP.NET, and may generate success-or-failure health-monitoring audit events:      -   Login attempts made by users of an ASP.NET application.","pos":[901,1082]},{"content":"For more details about this auditing, see &lt;xref:System.Web.Management.WebAuthenticationSuccessAuditEvent&gt; and &lt;xref:System.Web.Management.WebSuccessAuditEvent&gt;.","pos":[1083,1243],"source":" For more details about this auditing, see <xref:System.Web.Management.WebAuthenticationSuccessAuditEvent> and <xref:System.Web.Management.WebSuccessAuditEvent>."},{"content":"-   Security-related events, such as authentication failures, failed resource access attempts, and other security-related events.","pos":[1249,1378]},{"content":"The log of these events can be useful when investigating an intrusion or attack on the application.","pos":[1379,1478]},{"content":"By default, no auditing support is provided for authorization failures of anonymous users.","pos":[1479,1569]},{"content":"For more details about failure event audits, see &lt;xref:System.Web.Management.WebAuthenticationFailureAuditEvent&gt; and &lt;xref:System.Web.Management.WebFailureAuditEvent&gt;.","pos":[1570,1737],"source":" For more details about failure event audits, see <xref:System.Web.Management.WebAuthenticationFailureAuditEvent> and <xref:System.Web.Management.WebFailureAuditEvent>."},{"content":"-   Custom events raised by an ASP.NET application.","pos":[1743,1794]},{"content":"You can audit custom events by extending the functionality provided by the WebAuditEvent class and derived classes      &gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  In most cases you will be able to use the ASP.NET health-monitoring types as implemented, and you will control the health-monitoring system by specifying values in the <ph id=\"ph2\">`healthMonitoring`</ph> configuration section.","pos":[1795,2137],"source":" You can audit custom events by extending the functionality provided by the WebAuditEvent class and derived classes      > [!NOTE] >  In most cases you will be able to use the ASP.NET health-monitoring types as implemented, and you will control the health-monitoring system by specifying values in the `healthMonitoring` configuration section."},{"content":"You can also derive from the health-monitoring types to create your own custom events and providers.","pos":[2138,2238]},{"content":"For an example of deriving from the WebAuditEvent class, see the example provided in this topic.","pos":[2239,2335]}]},{"pos":[6023,6150],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Web.Management.WebAuditEvent\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class using the supplied parameters.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Web.Management.WebAuditEvent\"></xref> class using the supplied parameters."},{"pos":[6162,6431],"content":"This constructor is used internally by the ASP.NET health-monitoring system. You will never use it to instantiate a <xref:System.Web.Management.WebAuditEvent> object, but you can call this constructor when implementing your own event type that inherits from this class.","needQuote":true,"needEscape":true,"nodes":[{"content":"This constructor is used internally by the ASP.NET health-monitoring system. You will never use it to instantiate a <xref:System.Web.Management.WebAuditEvent> object, but you can call this constructor when implementing your own event type that inherits from this class.","pos":[0,269],"nodes":[{"content":"This constructor is used internally by the ASP.NET health-monitoring system.","pos":[0,76]},{"content":"You will never use it to instantiate a &lt;xref:System.Web.Management.WebAuditEvent&gt; object, but you can call this constructor when implementing your own event type that inherits from this class.","pos":[77,269],"source":" You will never use it to instantiate a <xref:System.Web.Management.WebAuditEvent> object, but you can call this constructor when implementing your own event type that inherits from this class."}]}]},{"pos":[7031,7053],"content":"The event description.","needQuote":true,"needEscape":true,"nodes":[{"content":"The event description.","pos":[0,22]}]},{"pos":[7121,7164],"content":"The object that is the source of the event.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object that is the source of the event.","pos":[0,43]}]},{"pos":[7229,7409],"content":"The code associated with the event. When you implement a custom event, the event code must be greater than <xref href=\"System.Web.Management.WebEventCodes.WebExtendedBase\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The code associated with the event.","pos":[0,35]},{"content":"When you implement a custom event, the event code must be greater than <bpt id=\"p1\">&lt;xref href=\"System.Web.Management.WebEventCodes.WebExtendedBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[36,180],"source":" When you implement a custom event, the event code must be greater than <xref href=\"System.Web.Management.WebEventCodes.WebExtendedBase\"></xref>."}]},{"pos":[8048,8177],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Web.Management.WebAuditEvent\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with specified event parameters.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Web.Management.WebAuditEvent\"></xref> class with specified event parameters."},{"pos":[8189,8458],"content":"This constructor is used internally by the ASP.NET health-monitoring system. You will never use it to instantiate a <xref:System.Web.Management.WebAuditEvent> object, but you can call this constructor when implementing your own event type that inherits from this class.","needQuote":true,"needEscape":true,"nodes":[{"content":"This constructor is used internally by the ASP.NET health-monitoring system. You will never use it to instantiate a <xref:System.Web.Management.WebAuditEvent> object, but you can call this constructor when implementing your own event type that inherits from this class.","pos":[0,269],"nodes":[{"content":"This constructor is used internally by the ASP.NET health-monitoring system.","pos":[0,76]},{"content":"You will never use it to instantiate a &lt;xref:System.Web.Management.WebAuditEvent&gt; object, but you can call this constructor when implementing your own event type that inherits from this class.","pos":[77,269],"source":" You will never use it to instantiate a <xref:System.Web.Management.WebAuditEvent> object, but you can call this constructor when implementing your own event type that inherits from this class."}]}]},{"pos":[9079,9101],"content":"The event description.","needQuote":true,"needEscape":true,"nodes":[{"content":"The event description.","pos":[0,22]}]},{"pos":[9169,9212],"content":"The object that is the source of the event.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object that is the source of the event.","pos":[0,43]}]},{"pos":[9277,9457],"content":"The code associated with the event. When you implement a custom event, the event code must be greater than <xref href=\"System.Web.Management.WebEventCodes.WebExtendedBase\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The code associated with the event.","pos":[0,35]},{"content":"When you implement a custom event, the event code must be greater than <bpt id=\"p1\">&lt;xref href=\"System.Web.Management.WebEventCodes.WebExtendedBase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[36,180],"source":" When you implement a custom event, the event code must be greater than <xref href=\"System.Web.Management.WebEventCodes.WebExtendedBase\"></xref>."}]},{"pos":[9528,9648],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Web.Management.WebEventCodes\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value that specifies the detailed identifier for the event.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Web.Management.WebEventCodes\"></xref> value that specifies the detailed identifier for the event."},{"pos":[10132,10184],"content":"Get the information associated with the Web request.","needQuote":true,"needEscape":true,"nodes":[{"content":"Get the information associated with the Web request.","pos":[0,52]}]},{"pos":[10196,10316],"content":"Use the information provided by the RequestInformation property to help in the discovery of the causes of a malfunction.","needQuote":true,"needEscape":true,"nodes":[{"content":"Use the information provided by the RequestInformation property to help in the discovery of the causes of a malfunction.","pos":[0,120]}]},{"pos":[10896,11025],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Web.Management.WebRequestInformation\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains the information associated with the Web request.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Web.Management.WebRequestInformation\"></xref> that contains the information associated with the Web request."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.Management.WebAuditEvent\n  id: WebAuditEvent\n  children:\n  - System.Web.Management.WebAuditEvent.#ctor(System.String,System.Object,System.Int32)\n  - System.Web.Management.WebAuditEvent.#ctor(System.String,System.Object,System.Int32,System.Int32)\n  - System.Web.Management.WebAuditEvent.RequestInformation\n  langs:\n  - csharp\n  name: WebAuditEvent\n  nameWithType: WebAuditEvent\n  fullName: System.Web.Management.WebAuditEvent\n  type: Class\n  summary: Serves as the base class for all ASP.NET health-monitoring audit events.\n  remarks: \"ASP.NET health monitoring allows production and operations staff to manage deployed Web applications. The <xref:System.Web.Management> namespace contains the health-event types responsible for packaging application health-status data and the provider types responsible for processing this data. It also contains supporting types that help during the management of health events.  \\n  \\n The WebAuditEvent class is the base class from which the ASP.NET health-monitoring audit-event classes derive. The audit events generate information about security-related operations in a Web application and provide both a success and failure event for each audited operation.  \\n  \\n The health-monitoring system can audit both successful and unsuccessful events, which means an application can be monitored for both normal and malfunctioning conditions. By default, only the failure audit events are recorded.  \\n  \\n The following operations are audited by ASP.NET, and may generate success-or-failure health-monitoring audit events:  \\n  \\n-   Login attempts made by users of an ASP.NET application. For more details about this auditing, see <xref:System.Web.Management.WebAuthenticationSuccessAuditEvent> and <xref:System.Web.Management.WebSuccessAuditEvent>.  \\n  \\n-   Security-related events, such as authentication failures, failed resource access attempts, and other security-related events. The log of these events can be useful when investigating an intrusion or attack on the application. By default, no auditing support is provided for authorization failures of anonymous users. For more details about failure event audits, see <xref:System.Web.Management.WebAuthenticationFailureAuditEvent> and <xref:System.Web.Management.WebFailureAuditEvent>.  \\n  \\n-   Custom events raised by an ASP.NET application. You can audit custom events by extending the functionality provided by the WebAuditEvent class and derived classes  \\n  \\n> [!NOTE]\\n>  In most cases you will be able to use the ASP.NET health-monitoring types as implemented, and you will control the health-monitoring system by specifying values in the `healthMonitoring` configuration section. You can also derive from the health-monitoring types to create your own custom events and providers. For an example of deriving from the WebAuditEvent class, see the example provided in this topic.\"\n  example:\n  - \"The following code example shows how to derive from the WebAuditEvent class to create a custom audit event.  \\n  \\n [!code-cs[System.Web.Management.WebAuditEvent#1](~/add/codesnippet/csharp/t-system.web.management._1_1.cs)]\\n [!code-vb[System.Web.Management.WebAuditEvent#1](~/add/codesnippet/visualbasic/t-system.web.management._1_1.vb)]  \\n  \\n The following is an excerpt of the configuration file that enables ASP.NET to use the event.  \\n  \\n```  \\n<healthMonitoring   \\n  enabled=\\\"true\\\"  \\n  heartBeatInterval=\\\"0\\\">   \\n  \\n  <providers>  \\n    <add name=\\\"EventLogProvider\\\"   \\n      type=\\\"System.Web.Management.EventLogWebEventProvider,  \\n      System.Web,Version=2.0.3600.0,Culture=neutral,  \\n      PublicKeyToken=b03f5f7f11d50a3a\\\"/>  \\n  </providers>  \\n  \\n  <eventMappings>  \\n    <add  name=\\\"SampleWebAuditEvent\\\"   \\n      type=\\\"SamplesAspNet.SampleWebAuditEvent,  \\n      webauditevent,Version=1.0.1663.31140,   \\n      Culture=neutral,   \\n      PublicKeyToken=0d1fa0f69d94de96,   \\n      processorArchitecture=MSIL\\\"/>  \\n  </eventMappings>  \\n  \\n  <rules>  \\n    <add name=\\\"Custom Audit Default\\\"  \\n      eventName=\\\"SampleWebAuditEvent\\\"  \\n      provider=\\\"EventLogProvider\\\"  \\n      profile=\\\"Default\\\"/>    \\n  </rules>  \\n  \\n</healthMonitoring>  \\n```\"\n  syntax:\n    content: 'public class WebAuditEvent : System.Web.Management.WebManagementEvent'\n  inheritance:\n  - System.Object\n  - System.Web.Management.WebBaseEvent\n  - System.Web.Management.WebManagementEvent\n  implements: []\n  inheritedMembers:\n  - System.Web.Management.WebBaseEvent.ApplicationInformation\n  - System.Web.Management.WebBaseEvent.EventCode\n  - System.Web.Management.WebBaseEvent.EventDetailCode\n  - System.Web.Management.WebBaseEvent.EventID\n  - System.Web.Management.WebBaseEvent.EventOccurrence\n  - System.Web.Management.WebBaseEvent.EventSequence\n  - System.Web.Management.WebBaseEvent.EventSource\n  - System.Web.Management.WebBaseEvent.EventTime\n  - System.Web.Management.WebBaseEvent.EventTimeUtc\n  - System.Web.Management.WebBaseEvent.FormatCustomEventDetails(System.Web.Management.WebEventFormatter)\n  - System.Web.Management.WebBaseEvent.IncrementPerfCounters\n  - System.Web.Management.WebBaseEvent.Message\n  - System.Web.Management.WebBaseEvent.Raise\n  - System.Web.Management.WebBaseEvent.Raise(System.Web.Management.WebBaseEvent)\n  - System.Web.Management.WebBaseEvent.ToString\n  - System.Web.Management.WebBaseEvent.ToString(System.Boolean,System.Boolean)\n  - System.Web.Management.WebManagementEvent.ProcessInformation\n  platform:\n  - net462\n- uid: System.Web.Management.WebAuditEvent.#ctor(System.String,System.Object,System.Int32)\n  id: '#ctor(System.String,System.Object,System.Int32)'\n  parent: System.Web.Management.WebAuditEvent\n  langs:\n  - csharp\n  name: WebAuditEvent(String,Object,Int32)\n  nameWithType: WebAuditEvent.WebAuditEvent(String,Object,Int32)\n  fullName: System.Web.Management.WebAuditEvent.WebAuditEvent(String,Object,Int32)\n  type: Constructor\n  assemblies:\n  - System.Web\n  namespace: System.Web.Management\n  summary: Initializes a new instance of the <xref href=\"System.Web.Management.WebAuditEvent\"></xref> class using the supplied parameters.\n  remarks: This constructor is used internally by the ASP.NET health-monitoring system. You will never use it to instantiate a <xref:System.Web.Management.WebAuditEvent> object, but you can call this constructor when implementing your own event type that inherits from this class.\n  example:\n  - \"The following code example shows how to call this constructor. This code example is part of a larger example provided for the <xref:System.Web.Management.WebAuditEvent> class.  \\n  \\n [!code-cs[System.Web.Management.WebAuditEvent#2](~/add/codesnippet/csharp/52e543aa-2080-4fab-ac1a-_1.cs)]\\n [!code-vb[System.Web.Management.WebAuditEvent#2](~/add/codesnippet/visualbasic/52e543aa-2080-4fab-ac1a-_1.vb)]\"\n  syntax:\n    content: protected WebAuditEvent (string message, object eventSource, int eventCode);\n    parameters:\n    - id: message\n      type: System.String\n      description: The event description.\n    - id: eventSource\n      type: System.Object\n      description: The object that is the source of the event.\n    - id: eventCode\n      type: System.Int32\n      description: The code associated with the event. When you implement a custom event, the event code must be greater than <xref href=\"System.Web.Management.WebEventCodes.WebExtendedBase\"></xref>.\n  overload: System.Web.Management.WebAuditEvent.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Management.WebAuditEvent.#ctor(System.String,System.Object,System.Int32,System.Int32)\n  id: '#ctor(System.String,System.Object,System.Int32,System.Int32)'\n  parent: System.Web.Management.WebAuditEvent\n  langs:\n  - csharp\n  name: WebAuditEvent(String,Object,Int32,Int32)\n  nameWithType: WebAuditEvent.WebAuditEvent(String,Object,Int32,Int32)\n  fullName: System.Web.Management.WebAuditEvent.WebAuditEvent(String,Object,Int32,Int32)\n  type: Constructor\n  assemblies:\n  - System.Web\n  namespace: System.Web.Management\n  summary: Initializes a new instance of the <xref href=\"System.Web.Management.WebAuditEvent\"></xref> class with specified event parameters.\n  remarks: This constructor is used internally by the ASP.NET health-monitoring system. You will never use it to instantiate a <xref:System.Web.Management.WebAuditEvent> object, but you can call this constructor when implementing your own event type that inherits from this class.\n  example:\n  - \"The following code example shows how to call this constructor. This code example is part of a larger example provided for the <xref:System.Web.Management.WebAuditEvent> class.  \\n  \\n [!code-cs[System.Web.Management.WebAuditEvent#3](~/add/codesnippet/csharp/2ea9ddd5-d72f-4e91-92b6-_1.cs)]\\n [!code-vb[System.Web.Management.WebAuditEvent#3](~/add/codesnippet/visualbasic/2ea9ddd5-d72f-4e91-92b6-_1.vb)]\"\n  syntax:\n    content: protected WebAuditEvent (string message, object eventSource, int eventCode, int eventDetailCode);\n    parameters:\n    - id: message\n      type: System.String\n      description: The event description.\n    - id: eventSource\n      type: System.Object\n      description: The object that is the source of the event.\n    - id: eventCode\n      type: System.Int32\n      description: The code associated with the event. When you implement a custom event, the event code must be greater than <xref href=\"System.Web.Management.WebEventCodes.WebExtendedBase\"></xref>.\n    - id: eventDetailCode\n      type: System.Int32\n      description: The <xref href=\"System.Web.Management.WebEventCodes\"></xref> value that specifies the detailed identifier for the event.\n  overload: System.Web.Management.WebAuditEvent.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Management.WebAuditEvent.RequestInformation\n  id: RequestInformation\n  parent: System.Web.Management.WebAuditEvent\n  langs:\n  - csharp\n  name: RequestInformation\n  nameWithType: WebAuditEvent.RequestInformation\n  fullName: System.Web.Management.WebAuditEvent.RequestInformation\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Management\n  summary: Get the information associated with the Web request.\n  remarks: Use the information provided by the RequestInformation property to help in the discovery of the causes of a malfunction.\n  example:\n  - \"The following code example shows how to obtain request information through the <xref:System.Web.Management.WebRequestInformation> property.  \\n  \\n [!code-cs[System.Web.Management.WebAuditEvent#5](~/add/codesnippet/csharp/p-system.web.management._14_1.cs)]\\n [!code-vb[System.Web.Management.WebAuditEvent#5](~/add/codesnippet/visualbasic/p-system.web.management._14_1.vb)]\"\n  syntax:\n    content: public System.Web.Management.WebRequestInformation RequestInformation { get; }\n    return:\n      type: System.Web.Management.WebRequestInformation\n      description: A <xref href=\"System.Web.Management.WebRequestInformation\"></xref> that contains the information associated with the Web request.\n  overload: System.Web.Management.WebAuditEvent.RequestInformation*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Web.Management.WebManagementEvent\n  isExternal: false\n  name: System.Web.Management.WebManagementEvent\n- uid: System.Web.Management.WebAuditEvent.#ctor(System.String,System.Object,System.Int32)\n  parent: System.Web.Management.WebAuditEvent\n  isExternal: false\n  name: WebAuditEvent(String,Object,Int32)\n  nameWithType: WebAuditEvent.WebAuditEvent(String,Object,Int32)\n  fullName: System.Web.Management.WebAuditEvent.WebAuditEvent(String,Object,Int32)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Web.Management.WebAuditEvent.#ctor(System.String,System.Object,System.Int32,System.Int32)\n  parent: System.Web.Management.WebAuditEvent\n  isExternal: false\n  name: WebAuditEvent(String,Object,Int32,Int32)\n  nameWithType: WebAuditEvent.WebAuditEvent(String,Object,Int32,Int32)\n  fullName: System.Web.Management.WebAuditEvent.WebAuditEvent(String,Object,Int32,Int32)\n- uid: System.Web.Management.WebAuditEvent.RequestInformation\n  parent: System.Web.Management.WebAuditEvent\n  isExternal: false\n  name: RequestInformation\n  nameWithType: WebAuditEvent.RequestInformation\n  fullName: System.Web.Management.WebAuditEvent.RequestInformation\n- uid: System.Web.Management.WebRequestInformation\n  parent: System.Web.Management\n  isExternal: false\n  name: WebRequestInformation\n  nameWithType: WebRequestInformation\n  fullName: System.Web.Management.WebRequestInformation\n- uid: System.Web.Management.WebAuditEvent.#ctor*\n  parent: System.Web.Management.WebAuditEvent\n  isExternal: false\n  name: WebAuditEvent\n  nameWithType: WebAuditEvent.WebAuditEvent\n- uid: System.Web.Management.WebAuditEvent.RequestInformation*\n  parent: System.Web.Management.WebAuditEvent\n  isExternal: false\n  name: RequestInformation\n  nameWithType: WebAuditEvent.RequestInformation\n"}