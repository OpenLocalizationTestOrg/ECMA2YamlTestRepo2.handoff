{"nodes":[{"pos":[439,487],"content":"Provides a managed wrapper for a process handle.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides a managed wrapper for a process handle.","pos":[0,48]}]},{"pos":[1448,1653],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"Microsoft.Win32.SafeHandles.SafeProcessHandle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class from the specified handle, indicating whether to release the handle during the finalization phase.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"Microsoft.Win32.SafeHandles.SafeProcessHandle\"></xref> class from the specified handle, indicating whether to release the handle during the finalization phase."},{"pos":[2382,2407],"content":"The handle to be wrapped.","needQuote":true,"needEscape":true,"nodes":[{"content":"The handle to be wrapped.","pos":[0,25]}]},{"pos":[2475,2743],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to reliably let <bpt id=\"p2\">&lt;xref href=\"Microsoft.Win32.SafeHandles.SafeProcessHandle\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> release the handle during the finalization phase; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to reliably let <xref href=\"Microsoft.Win32.SafeHandles.SafeProcessHandle\"></xref> release the handle during the finalization phase; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[3383,3395],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: Microsoft.Win32.SafeHandles.SafeProcessHandle\n  id: SafeProcessHandle\n  children:\n  - Microsoft.Win32.SafeHandles.SafeProcessHandle.#ctor(System.IntPtr,System.Boolean)\n  - Microsoft.Win32.SafeHandles.SafeProcessHandle.ReleaseHandle\n  langs:\n  - csharp\n  name: SafeProcessHandle\n  nameWithType: SafeProcessHandle\n  fullName: Microsoft.Win32.SafeHandles.SafeProcessHandle\n  type: Class\n  summary: Provides a managed wrapper for a process handle.\n  syntax:\n    content: >-\n      [System.Security.SuppressUnmanagedCodeSecurity]\n\n      public sealed class SafeProcessHandle : Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid\n  inheritance:\n  - System.Runtime.InteropServices.SafeHandle\n  - Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid\n  implements: []\n  inheritedMembers:\n  - Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.IsInvalid\n  platform:\n  - net462\n- uid: Microsoft.Win32.SafeHandles.SafeProcessHandle.#ctor(System.IntPtr,System.Boolean)\n  id: '#ctor(System.IntPtr,System.Boolean)'\n  parent: Microsoft.Win32.SafeHandles.SafeProcessHandle\n  langs:\n  - csharp\n  name: SafeProcessHandle(IntPtr,Boolean)\n  nameWithType: SafeProcessHandle.SafeProcessHandle(IntPtr,Boolean)\n  fullName: Microsoft.Win32.SafeHandles.SafeProcessHandle.SafeProcessHandle(IntPtr,Boolean)\n  type: Constructor\n  assemblies:\n  - System\n  namespace: Microsoft.Win32.SafeHandles\n  summary: Initializes a new instance of the <xref href=\"Microsoft.Win32.SafeHandles.SafeProcessHandle\"></xref> class from the specified handle, indicating whether to release the handle during the finalization phase.\n  remarks: >-\n    > [!IMPORTANT]\n\n    >  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref:System.IDisposable> interface topic.\n  syntax:\n    content: public SafeProcessHandle (IntPtr existingHandle, bool ownsHandle);\n    parameters:\n    - id: existingHandle\n      type: System.IntPtr\n      description: The handle to be wrapped.\n    - id: ownsHandle\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to reliably let <xref href=\"Microsoft.Win32.SafeHandles.SafeProcessHandle\"></xref> release the handle during the finalization phase; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: Microsoft.Win32.SafeHandles.SafeProcessHandle.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Win32.SafeHandles.SafeProcessHandle.ReleaseHandle\n  id: ReleaseHandle\n  parent: Microsoft.Win32.SafeHandles.SafeProcessHandle\n  langs:\n  - csharp\n  name: ReleaseHandle()\n  nameWithType: SafeProcessHandle.ReleaseHandle()\n  fullName: Microsoft.Win32.SafeHandles.SafeProcessHandle.ReleaseHandle()\n  type: Method\n  assemblies:\n  - System\n  namespace: Microsoft.Win32.SafeHandles\n  syntax:\n    content: protected override bool ReleaseHandle ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: Microsoft.Win32.SafeHandles.SafeProcessHandle.ReleaseHandle*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid\n  isExternal: false\n  name: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid\n- uid: Microsoft.Win32.SafeHandles.SafeProcessHandle.#ctor(System.IntPtr,System.Boolean)\n  parent: Microsoft.Win32.SafeHandles.SafeProcessHandle\n  isExternal: false\n  name: SafeProcessHandle(IntPtr,Boolean)\n  nameWithType: SafeProcessHandle.SafeProcessHandle(IntPtr,Boolean)\n  fullName: Microsoft.Win32.SafeHandles.SafeProcessHandle.SafeProcessHandle(IntPtr,Boolean)\n- uid: System.IntPtr\n  parent: System\n  isExternal: true\n  name: IntPtr\n  nameWithType: IntPtr\n  fullName: System.IntPtr\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: Microsoft.Win32.SafeHandles.SafeProcessHandle.ReleaseHandle\n  parent: Microsoft.Win32.SafeHandles.SafeProcessHandle\n  isExternal: false\n  name: ReleaseHandle()\n  nameWithType: SafeProcessHandle.ReleaseHandle()\n  fullName: Microsoft.Win32.SafeHandles.SafeProcessHandle.ReleaseHandle()\n- uid: Microsoft.Win32.SafeHandles.SafeProcessHandle.#ctor*\n  parent: Microsoft.Win32.SafeHandles.SafeProcessHandle\n  isExternal: false\n  name: SafeProcessHandle\n  nameWithType: SafeProcessHandle.SafeProcessHandle\n- uid: Microsoft.Win32.SafeHandles.SafeProcessHandle.ReleaseHandle*\n  parent: Microsoft.Win32.SafeHandles.SafeProcessHandle\n  isExternal: false\n  name: ReleaseHandle\n  nameWithType: SafeProcessHandle.ReleaseHandle\n"}