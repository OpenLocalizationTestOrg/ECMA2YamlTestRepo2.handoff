{"nodes":[{"pos":[938,1037],"content":"Supports the use of non-ASCII characters for Internet domain names. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Supports the use of non-ASCII characters for Internet domain names. This class cannot be inherited.","pos":[0,99],"nodes":[{"content":"Supports the use of non-ASCII characters for Internet domain names.","pos":[0,67]},{"content":"This class cannot be inherited.","pos":[68,99]}]}]},{"pos":[1050,4041],"content":"An Internet domain name consists of one or more parts, called domain name labels, separated by label separators. For example, the domain name \"www.proseware.com\" consists of the labels, \"www\", \"proseware\", and \"com\", separated by periods. Standard domain names consist of designated characters in the US-ASCII (or Basic Latin) character range, from U+0021 to U+007E. To facilitate Internet usage in cultures that do not use the US-ASCII character set, the Internationalizing Domain Names in Applications (IDNA) standard was adopted in 2003 to support the inclusion of Unicode characters outside the US-ASCII character range. However, name servers and domain name resolution continue to rely on characters within the US-ASCII character range.       The IDNA mechanism uses Punycode to map an internationalized domain name that contains Unicode characters outside the US-ASCII character range to the US-ASCII character range supported by the domain name system. The IDNA mechanism is used to convert only domain names, not data transmitted over the Internet.      > [!IMPORTANT] >  In the [!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)], the IdnMapping class supports different versions of the IDNA standard, depending on the operating system in use:   >    >  -   When run on [!INCLUDE[win8](~/add/includes/ajax-current-ext-md.md)], it supports the 2008 version of the IDNA standard outlined by [RFC 5891: Internationalized Domain Names in Applications (IDNA): Protocol](http://go.microsoft.com/fwlink/?LinkId=231875).   > -   When run on earlier versions of the Windows operating system, it supports the 2003 version of the standard outlined by [RFC 3490: Internationalizing Domain Names in Applications (IDNA)](http://go.microsoft.com/fwlink/?LinkId=158110).   >    >  See [Unicode Technical Standard #46: IDNA Compatibility Processing](http://go.microsoft.com/fwlink/?LinkId=232459) for the differences in the way these standards handle particular sets of characters.       The <xref:System.Globalization.IdnMapping.GetAscii%2A?displayProperty=fullName> method normalizes a domain name, converts the normalized name to a representation that consists of displayable Unicode characters in the US-ASCII code point range (U+0020 to U+007E), and prepends an ASCII-compatible encoding (ACE) prefix (\"xn--\") to each label. The <xref:System.Globalization.IdnMapping.GetUnicode%2A?displayProperty=fullName> method restores the domain name labels converted by the <xref:System.Globalization.IdnMapping.GetAscii%2A> method.       If the string to be converted includes the label separator characters IDEOGRAPHIC FULL STOP (U+3002), FULLWIDTH FULL STOP (U+FF0E), and HALFWIDTH IDEOGRAPHIC FULL STOP (U+FF61), the <xref:System.Globalization.IdnMapping.GetAscii%2A> method converts them to the label separator FULL STOP (period, U+002E). The <xref:System.Globalization.IdnMapping.GetUnicode%2A> method, however, does not restore the original label separator character.","needQuote":false,"needEscape":true,"nodes":[{"content":"An Internet domain name consists of one or more parts, called domain name labels, separated by label separators.","pos":[0,112]},{"content":"For example, the domain name \"www.proseware.com\" consists of the labels, \"www\", \"proseware\", and \"com\", separated by periods.","pos":[113,238]},{"content":"Standard domain names consist of designated characters in the US-ASCII (or Basic Latin) character range, from U+0021 to U+007E.","pos":[239,366]},{"content":"To facilitate Internet usage in cultures that do not use the US-ASCII character set, the Internationalizing Domain Names in Applications (IDNA) standard was adopted in 2003 to support the inclusion of Unicode characters outside the US-ASCII character range.","pos":[367,624]},{"content":"However, name servers and domain name resolution continue to rely on characters within the US-ASCII character range.","pos":[625,741]},{"content":"The IDNA mechanism uses Punycode to map an internationalized domain name that contains Unicode characters outside the US-ASCII character range to the US-ASCII character range supported by the domain name system.","pos":[748,959]},{"content":"The IDNA mechanism is used to convert only domain names, not data transmitted over the Internet.","pos":[960,1056]},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  In the <ph id=\"ph2\">[!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)]</ph>, the IdnMapping class supports different versions of the IDNA standard, depending on the operating system in use:   &gt;    &gt;  -   When run on <ph id=\"ph3\">[!INCLUDE[win8](~/add/includes/ajax-current-ext-md.md)]</ph>, it supports the 2008 version of the IDNA standard outlined by <bpt id=\"p1\">[</bpt>RFC 5891: Internationalized Domain Names in Applications (IDNA): Protocol<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=231875)</ept>.","pos":[1062,1528],"source":"      > [!IMPORTANT] >  In the [!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)], the IdnMapping class supports different versions of the IDNA standard, depending on the operating system in use:   >    >  -   When run on [!INCLUDE[win8](~/add/includes/ajax-current-ext-md.md)], it supports the 2008 version of the IDNA standard outlined by [RFC 5891: Internationalized Domain Names in Applications (IDNA): Protocol](http://go.microsoft.com/fwlink/?LinkId=231875)."},{"content":"&gt; -   When run on earlier versions of the Windows operating system, it supports the 2003 version of the standard outlined by <bpt id=\"p1\">[</bpt>RFC 3490: Internationalizing Domain Names in Applications (IDNA)<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=158110)</ept>.","pos":[1531,1770],"source":"   > -   When run on earlier versions of the Windows operating system, it supports the 2003 version of the standard outlined by [RFC 3490: Internationalizing Domain Names in Applications (IDNA)](http://go.microsoft.com/fwlink/?LinkId=158110)."},{"content":"&gt;    &gt;  See <bpt id=\"p1\">[</bpt>Unicode Technical Standard #46: IDNA Compatibility Processing<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=232459)</ept> for the differences in the way these standards handle particular sets of characters.","pos":[1773,1980],"source":"   >    >  See [Unicode Technical Standard #46: IDNA Compatibility Processing](http://go.microsoft.com/fwlink/?LinkId=232459) for the differences in the way these standards handle particular sets of characters."},{"content":"The &lt;xref:System.Globalization.IdnMapping.GetAscii%2A?displayProperty=fullName&gt; method normalizes a domain name, converts the normalized name to a representation that consists of displayable Unicode characters in the US-ASCII code point range (U+0020 to U+007E), and prepends an ASCII-compatible encoding (ACE) prefix (\"xn--\") to each label.","pos":[1987,2328],"source":"       The <xref:System.Globalization.IdnMapping.GetAscii%2A?displayProperty=fullName> method normalizes a domain name, converts the normalized name to a representation that consists of displayable Unicode characters in the US-ASCII code point range (U+0020 to U+007E), and prepends an ASCII-compatible encoding (ACE) prefix (\"xn--\") to each label."},{"content":"The &lt;xref:System.Globalization.IdnMapping.GetUnicode%2A?displayProperty=fullName&gt; method restores the domain name labels converted by the &lt;xref:System.Globalization.IdnMapping.GetAscii%2A&gt; method.","pos":[2329,2525],"source":" The <xref:System.Globalization.IdnMapping.GetUnicode%2A?displayProperty=fullName> method restores the domain name labels converted by the <xref:System.Globalization.IdnMapping.GetAscii%2A> method."},{"content":"If the string to be converted includes the label separator characters IDEOGRAPHIC FULL STOP (U+3002), FULLWIDTH FULL STOP (U+FF0E), and HALFWIDTH IDEOGRAPHIC FULL STOP (U+FF61), the &lt;xref:System.Globalization.IdnMapping.GetAscii%2A&gt; method converts them to the label separator FULL STOP (period, U+002E).","pos":[2532,2836],"source":"       If the string to be converted includes the label separator characters IDEOGRAPHIC FULL STOP (U+3002), FULLWIDTH FULL STOP (U+FF0E), and HALFWIDTH IDEOGRAPHIC FULL STOP (U+FF61), the <xref:System.Globalization.IdnMapping.GetAscii%2A> method converts them to the label separator FULL STOP (period, U+002E)."},{"content":"The &lt;xref:System.Globalization.IdnMapping.GetUnicode%2A&gt; method, however, does not restore the original label separator character.","pos":[2837,2967],"source":" The <xref:System.Globalization.IdnMapping.GetUnicode%2A> method, however, does not restore the original label separator character."}]},{"pos":[5189,5282],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Globalization.IdnMapping\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Globalization.IdnMapping\"></xref> class."},{"pos":[5294,5703],"content":"The <xref:System.Globalization.IdnMapping.AllowUnassigned%2A?displayProperty=fullName> and <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A?displayProperty=fullName> properties are initialized to `false`. A small subset of ASCII characters other than A-Z, 0-9, the hyphen (-) character (U+002D), and the period (.) character are permitted in domain names, but unassigned Unicode code points are not.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Globalization.IdnMapping.AllowUnassigned%2A?displayProperty=fullName&gt; and &lt;xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A?displayProperty=fullName&gt; properties are initialized to <ph id=\"ph1\">`false`</ph>.","pos":[0,214],"source":"The <xref:System.Globalization.IdnMapping.AllowUnassigned%2A?displayProperty=fullName> and <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A?displayProperty=fullName> properties are initialized to `false`."},{"content":"A small subset of ASCII characters other than A-Z, 0-9, the hyphen (-) character (U+002D), and the period (.) character are permitted in domain names, but unassigned Unicode code points are not.","pos":[215,409]}]},{"pos":[6214,6408],"content":"Gets or sets a value that indicates whether unassigned Unicode code points are used in operations performed by members of the current <bpt id=\"p1\">&lt;xref href=\"System.Globalization.IdnMapping\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Gets or sets a value that indicates whether unassigned Unicode code points are used in operations performed by members of the current <xref href=\"System.Globalization.IdnMapping\"></xref> object."},{"pos":[6421,7827],"content":"A registered domain name cannot contain unassigned code points. Consequently, the default value of the AllowUnassigned property is `false`. The IDNA specification permits unassigned code points only in queries for matching strings (that is, in domain name lookup). For more information about the use of unassigned code points in domain names, see [RFC 3454, \"Preparation of Internationalized Strings (stringprep)\"](http://go.microsoft.com/fwlink/?LinkId=231873) and [RFC 5891, \"Internationalized Domain Names in Applications (IDNA): Protocol\"](http://go.microsoft.com/fwlink/?LinkId=231875).      > [!IMPORTANT] >  If theAllowUnassigned property is `false`, the behavior associated with the property depends on the underlying operating system. On [!INCLUDE[win8](~/add/includes/ajax-current-ext-md.md)], the <xref:System.Globalization.IdnMapping> class conforms to IDNA 2008, which is based on the Unicode 6.0 standard. On previous versions of Windows, the <xref:System.Globalization.IdnMapping> class is based on IDNA 2003, which is based on Unicode 3.*x*. Some code points that were unassigned in IDNA 2003 have been assigned characters and are supported in IDNA 2008. For example, U+0221 was introduced in Unicode 4.0. On [!INCLUDE[win8](~/add/includes/ajax-current-ext-md.md)], it is encoded as \"xn—6la\". On previous versions of Windows, it throws an <xref:System.ArgumentException> exception.","needQuote":false,"needEscape":true,"nodes":[{"content":"A registered domain name cannot contain unassigned code points.","pos":[0,63]},{"content":"Consequently, the default value of the AllowUnassigned property is <ph id=\"ph1\">`false`</ph>.","pos":[64,139],"source":" Consequently, the default value of the AllowUnassigned property is `false`."},{"content":"The IDNA specification permits unassigned code points only in queries for matching strings (that is, in domain name lookup).","pos":[140,264]},{"content":"For more information about the use of unassigned code points in domain names, see <bpt id=\"p1\">[</bpt>RFC 3454, \"Preparation of Internationalized Strings (stringprep)\"<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=231873)</ept> and <bpt id=\"p2\">[</bpt>RFC 5891, \"Internationalized Domain Names in Applications (IDNA): Protocol\"<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkId=231875)</ept>.","pos":[265,591],"source":" For more information about the use of unassigned code points in domain names, see [RFC 3454, \"Preparation of Internationalized Strings (stringprep)\"](http://go.microsoft.com/fwlink/?LinkId=231873) and [RFC 5891, \"Internationalized Domain Names in Applications (IDNA): Protocol\"](http://go.microsoft.com/fwlink/?LinkId=231875)."},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  If theAllowUnassigned property is <ph id=\"ph2\">`false`</ph>, the behavior associated with the property depends on the underlying operating system.","pos":[597,743],"source":"      > [!IMPORTANT] >  If theAllowUnassigned property is `false`, the behavior associated with the property depends on the underlying operating system."},{"content":"On <ph id=\"ph1\">[!INCLUDE[win8](~/add/includes/ajax-current-ext-md.md)]</ph>, the &lt;xref:System.Globalization.IdnMapping&gt; class conforms to IDNA 2008, which is based on the Unicode 6.0 standard.","pos":[744,919],"source":" On [!INCLUDE[win8](~/add/includes/ajax-current-ext-md.md)], the <xref:System.Globalization.IdnMapping> class conforms to IDNA 2008, which is based on the Unicode 6.0 standard."},{"content":"On previous versions of Windows, the &lt;xref:System.Globalization.IdnMapping&gt; class is based on IDNA 2003, which is based on Unicode 3.<bpt id=\"p1\">*</bpt>x<ept id=\"p1\">*</ept>.","pos":[920,1057],"source":" On previous versions of Windows, the <xref:System.Globalization.IdnMapping> class is based on IDNA 2003, which is based on Unicode 3.*x*."},{"content":"Some code points that were unassigned in IDNA 2003 have been assigned characters and are supported in IDNA 2008.","pos":[1058,1170]},{"content":"For example, U+0221 was introduced in Unicode 4.0.","pos":[1171,1221]},{"content":"On <ph id=\"ph1\">[!INCLUDE[win8](~/add/includes/ajax-current-ext-md.md)]</ph>, it is encoded as \"xn—6la\".","pos":[1222,1308],"source":" On [!INCLUDE[win8](~/add/includes/ajax-current-ext-md.md)], it is encoded as \"xn—6la\"."},{"content":"On previous versions of Windows, it throws an &lt;xref:System.ArgumentException&gt; exception.","pos":[1309,1397],"source":" On previous versions of Windows, it throws an <xref:System.ArgumentException> exception."}]},{"pos":[7952,8137],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if unassigned code points are used in operations; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if unassigned code points are used in operations; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[8601,8724],"content":"Indicates whether a specified object and the current <bpt id=\"p1\">&lt;xref href=\"System.Globalization.IdnMapping\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object are equal.","needQuote":true,"needEscape":true,"source":"Indicates whether a specified object and the current <xref href=\"System.Globalization.IdnMapping\"></xref> object are equal."},{"pos":[8865,8909],"content":"The object to compare to the current object.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object to compare to the current object.","pos":[0,44]}]},{"pos":[8968,9378],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the object specified by the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">obj</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter is derived from <bpt id=\"p3\">&lt;xref href=\"System.Globalization.IdnMapping\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> and its &lt;xref:System.Globalization.IdnMapping.AllowUnassigned<bpt id=\"p4\">*</bpt>&gt; and &lt;xref:System.Globalization.IdnMapping.UseStd3AsciiRules<ept id=\"p4\">*</ept>&gt; properties are equal; otherwise, <bpt id=\"p5\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p5\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the object specified by the <code>obj</code> parameter is derived from <xref href=\"System.Globalization.IdnMapping\"></xref> and its <xref:System.Globalization.IdnMapping.AllowUnassigned*> and <xref:System.Globalization.IdnMapping.UseStd3AsciiRules*> properties are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[9843,10051],"content":"Encodes a string of domain name labels that consist of Unicode characters to a string of displayable Unicode characters in the US-ASCII character range. The string is formatted according to the IDNA standard.","needQuote":true,"needEscape":true,"nodes":[{"content":"Encodes a string of domain name labels that consist of Unicode characters to a string of displayable Unicode characters in the US-ASCII character range. The string is formatted according to the IDNA standard.","pos":[0,208],"nodes":[{"content":"Encodes a string of domain name labels that consist of Unicode characters to a string of displayable Unicode characters in the US-ASCII character range.","pos":[0,152]},{"content":"The string is formatted according to the IDNA standard.","pos":[153,208]}]}]},{"pos":[10064,11910],"content":"The `unicode` parameter specifies a string of one or more labels that consist of valid Unicode characters. The labels are separated by label separators. The `unicode` parameter cannot begin with a label separator, but it can include and optionally end with a separator. The label separators are FULL STOP (period, U+002E), IDEOGRAPHIC FULL STOP (U+3002), FULLWIDTH FULL STOP (U+FF0E), and HALFWIDTH IDEOGRAPHIC FULL STOP (U+FF61). For example, the domain name \"www.adatum.com\" consists of the labels, \"www\", \"adatum\", and \"com\", separated by periods.       A label cannot contain any of the following characters:      -   Unicode control characters from U+0001 through U+001F, and U+007F.      -   Unassigned Unicode characters, if the value of the <xref:System.Globalization.IdnMapping.AllowUnassigned%2A> property is `false`.      -   Non-standard characters in the US-ASCII character range, such as the SPACE (U+0020), EXCLAMATION MARK (U+0021), and LOW LINE (U+005F) characters, if the value of the <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> property is `true`.      -   Characters that are prohibited by a specific version of the IDNA standard. For more information about prohibited characters, see [RFC 3454: Preparation of Internationalized Strings (\"stringprep\")](http://go.microsoft.com/fwlink/?LinkId=231873) for IDNA 2003, and [RFC 5982: The Unicode Code Points and Internationalized Domain Names for Applications](http://go.microsoft.com/fwlink/?LinkId=231877) for IDNA 2008.       The <xref:System.Globalization.IdnMapping.GetAscii%2A> method converts all label separators to FULL STOP (period, U+002E).       If `unicode` contains no characters outside the US-ASCII character range and no characters within the US-ASCII character range are prohibited, the method returns `unicode` unchanged.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`unicode`</ph> parameter specifies a string of one or more labels that consist of valid Unicode characters.","pos":[0,106],"source":"The `unicode` parameter specifies a string of one or more labels that consist of valid Unicode characters."},{"content":"The labels are separated by label separators.","pos":[107,152]},{"content":"The <ph id=\"ph1\">`unicode`</ph> parameter cannot begin with a label separator, but it can include and optionally end with a separator.","pos":[153,269],"source":" The `unicode` parameter cannot begin with a label separator, but it can include and optionally end with a separator."},{"content":"The label separators are FULL STOP (period, U+002E), IDEOGRAPHIC FULL STOP (U+3002), FULLWIDTH FULL STOP (U+FF0E), and HALFWIDTH IDEOGRAPHIC FULL STOP (U+FF61).","pos":[270,430]},{"content":"For example, the domain name \"www.adatum.com\" consists of the labels, \"www\", \"adatum\", and \"com\", separated by periods.","pos":[431,550]},{"content":"A label cannot contain any of the following characters:      -   Unicode control characters from U+0001 through U+001F, and U+007F.","pos":[557,688]},{"content":"-   Unassigned Unicode characters, if the value of the &lt;xref:System.Globalization.IdnMapping.AllowUnassigned%2A&gt; property is <ph id=\"ph1\">`false`</ph>.","pos":[694,827],"source":"      -   Unassigned Unicode characters, if the value of the <xref:System.Globalization.IdnMapping.AllowUnassigned%2A> property is `false`."},{"content":"-   Non-standard characters in the US-ASCII character range, such as the SPACE (U+0020), EXCLAMATION MARK (U+0021), and LOW LINE (U+005F) characters, if the value of the &lt;xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A&gt; property is <ph id=\"ph1\">`true`</ph>.","pos":[833,1082],"source":"      -   Non-standard characters in the US-ASCII character range, such as the SPACE (U+0020), EXCLAMATION MARK (U+0021), and LOW LINE (U+005F) characters, if the value of the <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> property is `true`."},{"content":"-   Characters that are prohibited by a specific version of the IDNA standard.","pos":[1088,1166]},{"content":"For more information about prohibited characters, see <bpt id=\"p1\">[</bpt>RFC 3454: Preparation of Internationalized Strings (\"stringprep\")<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=231873)</ept> for IDNA 2003, and <bpt id=\"p2\">[</bpt>RFC 5982: The Unicode Code Points and Internationalized Domain Names for Applications<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkId=231877)</ept> for IDNA 2008.","pos":[1167,1504],"source":" For more information about prohibited characters, see [RFC 3454: Preparation of Internationalized Strings (\"stringprep\")](http://go.microsoft.com/fwlink/?LinkId=231873) for IDNA 2003, and [RFC 5982: The Unicode Code Points and Internationalized Domain Names for Applications](http://go.microsoft.com/fwlink/?LinkId=231877) for IDNA 2008."},{"content":"The &lt;xref:System.Globalization.IdnMapping.GetAscii%2A&gt; method converts all label separators to FULL STOP (period, U+002E).","pos":[1511,1633],"source":"       The <xref:System.Globalization.IdnMapping.GetAscii%2A> method converts all label separators to FULL STOP (period, U+002E)."},{"content":"If <ph id=\"ph1\">`unicode`</ph> contains no characters outside the US-ASCII character range and no characters within the US-ASCII character range are prohibited, the method returns <ph id=\"ph2\">`unicode`</ph> unchanged.","pos":[1640,1822],"source":"       If `unicode` contains no characters outside the US-ASCII character range and no characters within the US-ASCII character range are prohibited, the method returns `unicode` unchanged."}]},{"pos":[12746,12850],"content":"The string to convert, which consists of one or more domain name labels delimited with label separators.","needQuote":true,"needEscape":true,"nodes":[{"content":"The string to convert, which consists of one or more domain name labels delimited with label separators.","pos":[0,104]}]},{"pos":[12908,13127],"content":"The equivalent of the string specified by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">unicode</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter, consisting of displayable Unicode characters in the US-ASCII character range (U+0020 to U+007E) and formatted according to the IDNA standard.","needQuote":true,"needEscape":true,"source":"The equivalent of the string specified by the <code>unicode</code> parameter, consisting of displayable Unicode characters in the US-ASCII character range (U+0020 to U+007E) and formatted according to the IDNA standard."},{"pos":[13298,13383],"content":"<ph id=\"ph1\">&lt;code&gt;unicode&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>unicode</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[13478,13675],"content":"<ph id=\"ph1\">&lt;code&gt;unicode&lt;/code&gt;</ph> is invalid based on the <ph id=\"ph2\">&lt;xref:System.Globalization.IdnMapping.AllowUnassigned*&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Globalization.IdnMapping.UseStd3AsciiRules*&gt;</ph> properties, and the IDNA standard.","needQuote":true,"needEscape":true,"source":"<code>unicode</code> is invalid based on the <xref:System.Globalization.IdnMapping.AllowUnassigned*> and <xref:System.Globalization.IdnMapping.UseStd3AsciiRules*> properties, and the IDNA standard."},{"pos":[14115,14380],"content":"Encodes a substring of domain name labels that include Unicode characters outside the US-ASCII character range. The substring is converted to a string of displayable Unicode characters in the US-ASCII character range and is formatted according to the IDNA standard.","needQuote":true,"needEscape":true,"nodes":[{"content":"Encodes a substring of domain name labels that include Unicode characters outside the US-ASCII character range. The substring is converted to a string of displayable Unicode characters in the US-ASCII character range and is formatted according to the IDNA standard.","pos":[0,265],"nodes":[{"content":"Encodes a substring of domain name labels that include Unicode characters outside the US-ASCII character range.","pos":[0,111]},{"content":"The substring is converted to a string of displayable Unicode characters in the US-ASCII character range and is formatted according to the IDNA standard.","pos":[112,265]}]}]},{"pos":[14393,16266],"content":"The `unicode` and `index` parameters define a substring with one or more labels that consist of valid Unicode characters. The labels are separated by label separators. The first character of the substring cannot begin with a label separator, but it can include and optionally end with a separator. The label separators are FULL STOP (period, U+002E), IDEOGRAPHIC FULL STOP (U+3002), FULLWIDTH FULL STOP (U+FF0E), and HALFWIDTH IDEOGRAPHIC FULL STOP (U+FF61). For example, the domain name \"www.adatum.com\" consists of the labels, \"www\", \"adatum\", and \"com\", separated by periods.       A label cannot contain any of the following characters:      -   Unicode control characters from U+0001 through U+001F, and U+007F.      -   Unassigned Unicode characters, depending on the value of the <xref:System.Globalization.IdnMapping.AllowUnassigned%2A> property.      -   Non-standard characters in the US-ASCII character range, such as the SPACE (U+0020), EXCLAMATION MARK (U+0021), and LOW LINE (U+005F) characters, depending on the value of the <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> property.      -   Characters that are prohibited by a specific version of the IDNA standard. For more information about prohibited characters, see [RFC 3454: Preparation of Internationalized Strings (\"stringprep\")](http://go.microsoft.com/fwlink/?LinkId=231873) for IDNA 2003, and [RFC 5982: The Unicode Code Points and Internationalized Domain Names for Applications](http://go.microsoft.com/fwlink/?LinkId=231877) for IDNA 2008.       The <xref:System.Globalization.IdnMapping.GetAscii%2A> method converts all label separators to FULL STOP (period, U+002E).       If `unicode` contains no characters outside the US-ASCII character range and no characters within the US-ASCII character range are prohibited, the method returns `unicode` unchanged.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`unicode`</ph> and <ph id=\"ph2\">`index`</ph> parameters define a substring with one or more labels that consist of valid Unicode characters.","pos":[0,121],"source":"The `unicode` and `index` parameters define a substring with one or more labels that consist of valid Unicode characters."},{"content":"The labels are separated by label separators.","pos":[122,167]},{"content":"The first character of the substring cannot begin with a label separator, but it can include and optionally end with a separator.","pos":[168,297]},{"content":"The label separators are FULL STOP (period, U+002E), IDEOGRAPHIC FULL STOP (U+3002), FULLWIDTH FULL STOP (U+FF0E), and HALFWIDTH IDEOGRAPHIC FULL STOP (U+FF61).","pos":[298,458]},{"content":"For example, the domain name \"www.adatum.com\" consists of the labels, \"www\", \"adatum\", and \"com\", separated by periods.","pos":[459,578]},{"content":"A label cannot contain any of the following characters:      -   Unicode control characters from U+0001 through U+001F, and U+007F.","pos":[585,716]},{"content":"-   Unassigned Unicode characters, depending on the value of the &lt;xref:System.Globalization.IdnMapping.AllowUnassigned%2A&gt; property.","pos":[722,854],"source":"      -   Unassigned Unicode characters, depending on the value of the <xref:System.Globalization.IdnMapping.AllowUnassigned%2A> property."},{"content":"-   Non-standard characters in the US-ASCII character range, such as the SPACE (U+0020), EXCLAMATION MARK (U+0021), and LOW LINE (U+005F) characters, depending on the value of the &lt;xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A&gt; property.","pos":[860,1109],"source":"      -   Non-standard characters in the US-ASCII character range, such as the SPACE (U+0020), EXCLAMATION MARK (U+0021), and LOW LINE (U+005F) characters, depending on the value of the <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> property."},{"content":"-   Characters that are prohibited by a specific version of the IDNA standard.","pos":[1115,1193]},{"content":"For more information about prohibited characters, see <bpt id=\"p1\">[</bpt>RFC 3454: Preparation of Internationalized Strings (\"stringprep\")<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=231873)</ept> for IDNA 2003, and <bpt id=\"p2\">[</bpt>RFC 5982: The Unicode Code Points and Internationalized Domain Names for Applications<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkId=231877)</ept> for IDNA 2008.","pos":[1194,1531],"source":" For more information about prohibited characters, see [RFC 3454: Preparation of Internationalized Strings (\"stringprep\")](http://go.microsoft.com/fwlink/?LinkId=231873) for IDNA 2003, and [RFC 5982: The Unicode Code Points and Internationalized Domain Names for Applications](http://go.microsoft.com/fwlink/?LinkId=231877) for IDNA 2008."},{"content":"The &lt;xref:System.Globalization.IdnMapping.GetAscii%2A&gt; method converts all label separators to FULL STOP (period, U+002E).","pos":[1538,1660],"source":"       The <xref:System.Globalization.IdnMapping.GetAscii%2A> method converts all label separators to FULL STOP (period, U+002E)."},{"content":"If <ph id=\"ph1\">`unicode`</ph> contains no characters outside the US-ASCII character range and no characters within the US-ASCII character range are prohibited, the method returns <ph id=\"ph2\">`unicode`</ph> unchanged.","pos":[1667,1849],"source":"       If `unicode` contains no characters outside the US-ASCII character range and no characters within the US-ASCII character range are prohibited, the method returns `unicode` unchanged."}]},{"pos":[17217,17321],"content":"The string to convert, which consists of one or more domain name labels delimited with label separators.","needQuote":true,"needEscape":true,"nodes":[{"content":"The string to convert, which consists of one or more domain name labels delimited with label separators.","pos":[0,104]}]},{"pos":[17382,17541],"content":"A zero-based offset into `unicode` that specifies the start of the substring to convert. The conversion operation continues to the end of the `unicode` string.","needQuote":true,"needEscape":true,"nodes":[{"content":"A zero-based offset into <ph id=\"ph1\">`unicode`</ph> that specifies the start of the substring to convert.","pos":[0,88],"source":"A zero-based offset into `unicode` that specifies the start of the substring to convert."},{"content":"The conversion operation continues to the end of the <ph id=\"ph1\">`unicode`</ph> string.","pos":[89,159],"source":" The conversion operation continues to the end of the `unicode` string."}]},{"pos":[17599,17845],"content":"The equivalent of the substring specified by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">unicode</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">index</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameters, consisting of displayable Unicode characters in the US-ASCII character range (U+0020 to U+007E) and formatted according to the IDNA standard.","needQuote":true,"needEscape":true,"source":"The equivalent of the substring specified by the <code>unicode</code> and <code>index</code> parameters, consisting of displayable Unicode characters in the US-ASCII character range (U+0020 to U+007E) and formatted according to the IDNA standard."},{"pos":[18016,18101],"content":"<ph id=\"ph1\">&lt;code&gt;unicode&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>unicode</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[18217,18346],"content":"<code>index</code> is less than zero.       -or-       <code>index</code> is greater than the length of <code>unicode</code>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.","pos":[0,37],"source":"<code>index</code> is less than zero."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is greater than the length of <ph id=\"ph2\">&lt;code&gt;unicode&lt;/code&gt;</ph>.","pos":[44,125],"source":"       -or-       <code>index</code> is greater than the length of <code>unicode</code>."}]},{"pos":[18442,18639],"content":"<ph id=\"ph1\">&lt;code&gt;unicode&lt;/code&gt;</ph> is invalid based on the <ph id=\"ph2\">&lt;xref:System.Globalization.IdnMapping.AllowUnassigned*&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Globalization.IdnMapping.UseStd3AsciiRules*&gt;</ph> properties, and the IDNA standard.","needQuote":true,"needEscape":true,"source":"<code>unicode</code> is invalid based on the <xref:System.Globalization.IdnMapping.AllowUnassigned*> and <xref:System.Globalization.IdnMapping.UseStd3AsciiRules*> properties, and the IDNA standard."},{"pos":[19123,19427],"content":"Encodes the specified number of characters in a  substring of domain name labels that include Unicode characters outside the US-ASCII character range. The substring is converted to a string of displayable Unicode characters in the US-ASCII character range and is formatted according to the IDNA standard.","needQuote":true,"needEscape":true,"nodes":[{"content":"Encodes the specified number of characters in a  substring of domain name labels that include Unicode characters outside the US-ASCII character range. The substring is converted to a string of displayable Unicode characters in the US-ASCII character range and is formatted according to the IDNA standard.","pos":[0,304],"nodes":[{"content":"Encodes the specified number of characters in a  substring of domain name labels that include Unicode characters outside the US-ASCII character range.","pos":[0,150]},{"content":"The substring is converted to a string of displayable Unicode characters in the US-ASCII character range and is formatted according to the IDNA standard.","pos":[151,304]}]}]},{"pos":[19440,21324],"content":"The `Unicode`, `index`, and `count` parameters define a substring with one or more labels that consist of valid Unicode characters. The labels are separated by label separators. The first character of the substring cannot begin with a label separator, but it can include and optionally end with a separator. The label separators are FULL STOP (period, U+002E), IDEOGRAPHIC FULL STOP (U+3002), FULLWIDTH FULL STOP (U+FF0E), and HALFWIDTH IDEOGRAPHIC FULL STOP (U+FF61). For example, the domain name \"www.adatum.com\" consists of the labels, \"www\", \"adatum\", and \"com\", separated by periods.       A label cannot contain any of the following characters:      -   Unicode control characters from U+0001 through U+001F, and U+007F.      -   Unassigned Unicode characters, depending on the value of the <xref:System.Globalization.IdnMapping.AllowUnassigned%2A> property.      -   Non-standard characters in the US-ASCII character range, such as the SPACE (U+0020), EXCLAMATION MARK (U+0021), and LOW LINE (U+005F) characters, depending on the value of the <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> property.      -   Characters that are prohibited by a specific version of the IDNA standard. For more information about prohibited characters, see [RFC 3454: Preparation of Internationalized Strings (\"stringprep\")](http://go.microsoft.com/fwlink/?LinkId=231873) for IDNA 2003, and [RFC 5982: The Unicode Code Points and Internationalized Domain Names for Applications](http://go.microsoft.com/fwlink/?LinkId=231877) for IDNA 2008.       The <xref:System.Globalization.IdnMapping.GetAscii%2A> method converts all label separators to FULL STOP (period, U+002E). If the substring contains no characters outside the US-ASCII character range, and no characters within the US-ASCII character range are prohibited, the method returns the substring unchanged.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`Unicode`</ph>, <ph id=\"ph2\">`index`</ph>, and <ph id=\"ph3\">`count`</ph> parameters define a substring with one or more labels that consist of valid Unicode characters.","pos":[0,131],"source":"The `Unicode`, `index`, and `count` parameters define a substring with one or more labels that consist of valid Unicode characters."},{"content":"The labels are separated by label separators.","pos":[132,177]},{"content":"The first character of the substring cannot begin with a label separator, but it can include and optionally end with a separator.","pos":[178,307]},{"content":"The label separators are FULL STOP (period, U+002E), IDEOGRAPHIC FULL STOP (U+3002), FULLWIDTH FULL STOP (U+FF0E), and HALFWIDTH IDEOGRAPHIC FULL STOP (U+FF61).","pos":[308,468]},{"content":"For example, the domain name \"www.adatum.com\" consists of the labels, \"www\", \"adatum\", and \"com\", separated by periods.","pos":[469,588]},{"content":"A label cannot contain any of the following characters:      -   Unicode control characters from U+0001 through U+001F, and U+007F.","pos":[595,726]},{"content":"-   Unassigned Unicode characters, depending on the value of the &lt;xref:System.Globalization.IdnMapping.AllowUnassigned%2A&gt; property.","pos":[732,864],"source":"      -   Unassigned Unicode characters, depending on the value of the <xref:System.Globalization.IdnMapping.AllowUnassigned%2A> property."},{"content":"-   Non-standard characters in the US-ASCII character range, such as the SPACE (U+0020), EXCLAMATION MARK (U+0021), and LOW LINE (U+005F) characters, depending on the value of the &lt;xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A&gt; property.","pos":[870,1119],"source":"      -   Non-standard characters in the US-ASCII character range, such as the SPACE (U+0020), EXCLAMATION MARK (U+0021), and LOW LINE (U+005F) characters, depending on the value of the <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> property."},{"content":"-   Characters that are prohibited by a specific version of the IDNA standard.","pos":[1125,1203]},{"content":"For more information about prohibited characters, see <bpt id=\"p1\">[</bpt>RFC 3454: Preparation of Internationalized Strings (\"stringprep\")<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=231873)</ept> for IDNA 2003, and <bpt id=\"p2\">[</bpt>RFC 5982: The Unicode Code Points and Internationalized Domain Names for Applications<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkId=231877)</ept> for IDNA 2008.","pos":[1204,1541],"source":" For more information about prohibited characters, see [RFC 3454: Preparation of Internationalized Strings (\"stringprep\")](http://go.microsoft.com/fwlink/?LinkId=231873) for IDNA 2003, and [RFC 5982: The Unicode Code Points and Internationalized Domain Names for Applications](http://go.microsoft.com/fwlink/?LinkId=231877) for IDNA 2008."},{"content":"The &lt;xref:System.Globalization.IdnMapping.GetAscii%2A&gt; method converts all label separators to FULL STOP (period, U+002E).","pos":[1548,1670],"source":"       The <xref:System.Globalization.IdnMapping.GetAscii%2A> method converts all label separators to FULL STOP (period, U+002E)."},{"content":"If the substring contains no characters outside the US-ASCII character range, and no characters within the US-ASCII character range are prohibited, the method returns the substring unchanged.","pos":[1671,1862]}]},{"pos":[22108,22212],"content":"The string to convert, which consists of one or more domain name labels delimited with label separators.","needQuote":true,"needEscape":true,"nodes":[{"content":"The string to convert, which consists of one or more domain name labels delimited with label separators.","pos":[0,104]}]},{"pos":[22273,22350],"content":"A zero-based offset into <ph id=\"ph1\">`unicode`</ph> that specifies the start of the substring.","needQuote":true,"needEscape":true,"source":"A zero-based offset into `unicode` that specifies the start of the substring."},{"pos":[22411,22538],"content":"The number of characters to convert in the substring that starts at the position specified by  <ph id=\"ph1\">`index`</ph> in the <ph id=\"ph2\">`unicode`</ph> string.","needQuote":true,"needEscape":true,"source":"The number of characters to convert in the substring that starts at the position specified by  `index` in the `unicode` string."},{"pos":[22596,22863],"content":"The equivalent of the substring specified by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">unicode</ph><ept id=\"p1\">&lt;/code&gt;</ept>, <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">index</ph><ept id=\"p2\">&lt;/code&gt;</ept>, and <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">count</ph><ept id=\"p3\">&lt;/code&gt;</ept> parameters, consisting of displayable Unicode characters in the US-ASCII character range (U+0020 to U+007E) and formatted according to the IDNA standard.","needQuote":true,"needEscape":true,"source":"The equivalent of the substring specified by the <code>unicode</code>, <code>index</code>, and <code>count</code> parameters, consisting of displayable Unicode characters in the US-ASCII character range (U+0020 to U+007E) and formatted according to the IDNA standard."},{"pos":[23034,23119],"content":"<ph id=\"ph1\">&lt;code&gt;unicode&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>unicode</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[23235,23503],"content":"<code>index</code> or <code>count</code> is less than zero.       -or-       <code>index</code> is greater than the length of <code>unicode</code>.       -or-       <code>index</code> is greater than the length of <code>unicode</code> minus <code>count</code>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.","pos":[0,59],"source":"<code>index</code> or <code>count</code> is less than zero."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is greater than the length of <ph id=\"ph2\">&lt;code&gt;unicode&lt;/code&gt;</ph>.","pos":[66,147],"source":"       -or-       <code>index</code> is greater than the length of <code>unicode</code>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is greater than the length of <ph id=\"ph2\">&lt;code&gt;unicode&lt;/code&gt;</ph> minus <ph id=\"ph3\">&lt;code&gt;count&lt;/code&gt;</ph>.","pos":[154,260],"source":"       -or-       <code>index</code> is greater than the length of <code>unicode</code> minus <code>count</code>."}]},{"pos":[23599,23796],"content":"<ph id=\"ph1\">&lt;code&gt;unicode&lt;/code&gt;</ph> is invalid based on the <ph id=\"ph2\">&lt;xref:System.Globalization.IdnMapping.AllowUnassigned*&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Globalization.IdnMapping.UseStd3AsciiRules*&gt;</ph> properties, and the IDNA standard.","needQuote":true,"needEscape":true,"source":"<code>unicode</code> is invalid based on the <xref:System.Globalization.IdnMapping.AllowUnassigned*> and <xref:System.Globalization.IdnMapping.UseStd3AsciiRules*> properties, and the IDNA standard."},{"pos":[24159,24248],"content":"Returns a hash code for this <bpt id=\"p1\">&lt;xref href=\"System.Globalization.IdnMapping\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Returns a hash code for this <xref href=\"System.Globalization.IdnMapping\"></xref> object."},{"pos":[24260,24364],"content":"Override the GetHashCode method if your application needs to implement a meaningful hash code algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"Override the GetHashCode method if your application needs to implement a meaningful hash code algorithm.","pos":[0,104]}]},{"pos":[25389,25614],"content":"One of four 32-bit signed constants derived from the properties of an <xref href=\"System.Globalization.IdnMapping\"></xref> object.  The return value has no special meaning and is not suitable for use in a hash code algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of four 32-bit signed constants derived from the properties of an <bpt id=\"p1\">&lt;xref href=\"System.Globalization.IdnMapping\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","pos":[0,130],"source":"One of four 32-bit signed constants derived from the properties of an <xref href=\"System.Globalization.IdnMapping\"></xref> object."},{"content":"The return value has no special meaning and is not suitable for use in a hash code algorithm.","pos":[132,225]}]},{"pos":[26094,26220],"content":"Decodes a string of one or more domain name labels, encoded according to the IDNA standard, to a string of Unicode characters.","needQuote":true,"needEscape":true,"nodes":[{"content":"Decodes a string of one or more domain name labels, encoded according to the IDNA standard, to a string of Unicode characters.","pos":[0,126]}]},{"pos":[26232,26456],"content":"For more information about domain names, labels, and label separators, see the remarks for the <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=fullName> method.","needQuote":true,"needEscape":true,"nodes":[{"content":"For more information about domain names, labels, and label separators, see the remarks for the &lt;xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=fullName&gt; method.","pos":[0,224],"source":"For more information about domain names, labels, and label separators, see the remarks for the <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=fullName> method."}]},{"pos":[27197,27346],"content":"The string to decode, which consists of one or more labels in the US-ASCII character range (U+0020 to U+007E) encoded according to the IDNA standard.","needQuote":true,"needEscape":true,"nodes":[{"content":"The string to decode, which consists of one or more labels in the US-ASCII character range (U+0020 to U+007E) encoded according to the IDNA standard.","pos":[0,149]}]},{"pos":[27404,27495],"content":"The Unicode equivalent of the IDNA substring specified by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">ascii</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","needQuote":true,"needEscape":true,"source":"The Unicode equivalent of the IDNA substring specified by the <code>ascii</code> parameter."},{"pos":[27668,27751],"content":"<ph id=\"ph1\">&lt;code&gt;ascii&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>ascii</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[27846,28041],"content":"<ph id=\"ph1\">&lt;code&gt;ascii&lt;/code&gt;</ph> is invalid based on the <ph id=\"ph2\">&lt;xref:System.Globalization.IdnMapping.AllowUnassigned*&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Globalization.IdnMapping.UseStd3AsciiRules*&gt;</ph> properties, and the IDNA standard.","needQuote":true,"needEscape":true,"source":"<code>ascii</code> is invalid based on the <xref:System.Globalization.IdnMapping.AllowUnassigned*> and <xref:System.Globalization.IdnMapping.UseStd3AsciiRules*> properties, and the IDNA standard."},{"pos":[28491,28620],"content":"Decodes a substring of one or more domain name labels, encoded according to the IDNA standard, to a string of Unicode characters.","needQuote":true,"needEscape":true,"nodes":[{"content":"Decodes a substring of one or more domain name labels, encoded according to the IDNA standard, to a string of Unicode characters.","pos":[0,129]}]},{"pos":[28632,28856],"content":"For more information about domain names, labels, and label separators, see the remarks for the <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=fullName> method.","needQuote":true,"needEscape":true,"nodes":[{"content":"For more information about domain names, labels, and label separators, see the remarks for the &lt;xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=fullName&gt; method.","pos":[0,224],"source":"For more information about domain names, labels, and label separators, see the remarks for the <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=fullName> method."}]},{"pos":[29009,29158],"content":"The string to decode, which consists of one or more labels in the US-ASCII character range (U+0020 to U+007E) encoded according to the IDNA standard.","needQuote":true,"needEscape":true,"nodes":[{"content":"The string to decode, which consists of one or more labels in the US-ASCII character range (U+0020 to U+007E) encoded according to the IDNA standard.","pos":[0,149]}]},{"pos":[29219,29371],"content":"A zero-based offset into `ascii` that specifies the start of the substring to decode. The decoding operation continues to the end of the `ascii` string.","needQuote":true,"needEscape":true,"nodes":[{"content":"A zero-based offset into <ph id=\"ph1\">`ascii`</ph> that specifies the start of the substring to decode.","pos":[0,85],"source":"A zero-based offset into `ascii` that specifies the start of the substring to decode."},{"content":"The decoding operation continues to the end of the <ph id=\"ph1\">`ascii`</ph> string.","pos":[86,152],"source":" The decoding operation continues to the end of the `ascii` string."}]},{"pos":[29429,29544],"content":"The Unicode equivalent of the IDNA substring specified by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">ascii</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">index</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameters.","needQuote":true,"needEscape":true,"source":"The Unicode equivalent of the IDNA substring specified by the <code>ascii</code> and <code>index</code> parameters."},{"pos":[29717,29800],"content":"<ph id=\"ph1\">&lt;code&gt;ascii&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>ascii</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[29916,30043],"content":"<code>index</code> is less than zero.       -or-       <code>index</code> is greater than the length of <code>ascii</code>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.","pos":[0,37],"source":"<code>index</code> is less than zero."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is greater than the length of <ph id=\"ph2\">&lt;code&gt;ascii&lt;/code&gt;</ph>.","pos":[44,123],"source":"       -or-       <code>index</code> is greater than the length of <code>ascii</code>."}]},{"pos":[30139,30334],"content":"<ph id=\"ph1\">&lt;code&gt;ascii&lt;/code&gt;</ph> is invalid based on the <ph id=\"ph2\">&lt;xref:System.Globalization.IdnMapping.AllowUnassigned*&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Globalization.IdnMapping.UseStd3AsciiRules*&gt;</ph> properties, and the IDNA standard.","needQuote":true,"needEscape":true,"source":"<code>ascii</code> is invalid based on the <xref:System.Globalization.IdnMapping.AllowUnassigned*> and <xref:System.Globalization.IdnMapping.UseStd3AsciiRules*> properties, and the IDNA standard."},{"pos":[30828,30990],"content":"Decodes a substring of a specified length that contains one or more domain name labels, encoded according to the IDNA standard, to a string of Unicode characters.","needQuote":true,"needEscape":true,"nodes":[{"content":"Decodes a substring of a specified length that contains one or more domain name labels, encoded according to the IDNA standard, to a string of Unicode characters.","pos":[0,162]}]},{"pos":[31002,31226],"content":"For more information about domain names, labels, and label separators, see the remarks for the <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=fullName> method.","needQuote":true,"needEscape":true,"nodes":[{"content":"For more information about domain names, labels, and label separators, see the remarks for the &lt;xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=fullName&gt; method.","pos":[0,224],"source":"For more information about domain names, labels, and label separators, see the remarks for the <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=fullName> method."}]},{"pos":[31390,31539],"content":"The string to decode, which consists of one or more labels in the US-ASCII character range (U+0020 to U+007E) encoded according to the IDNA standard.","needQuote":true,"needEscape":true,"nodes":[{"content":"The string to decode, which consists of one or more labels in the US-ASCII character range (U+0020 to U+007E) encoded according to the IDNA standard.","pos":[0,149]}]},{"pos":[31600,31675],"content":"A zero-based offset into <ph id=\"ph1\">`ascii`</ph> that specifies the start of the substring.","needQuote":true,"needEscape":true,"source":"A zero-based offset into `ascii` that specifies the start of the substring."},{"pos":[31736,31860],"content":"The number of characters to convert in the substring that starts at the position specified by <ph id=\"ph1\">`index`</ph> in the <ph id=\"ph2\">`ascii`</ph> string.","needQuote":true,"needEscape":true,"source":"The number of characters to convert in the substring that starts at the position specified by `index` in the `ascii` string."},{"pos":[31918,32054],"content":"The Unicode equivalent of the IDNA substring specified by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">ascii</ph><ept id=\"p1\">&lt;/code&gt;</ept>, <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">index</ph><ept id=\"p2\">&lt;/code&gt;</ept>, and <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">count</ph><ept id=\"p3\">&lt;/code&gt;</ept> parameters.","needQuote":true,"needEscape":true,"source":"The Unicode equivalent of the IDNA substring specified by the <code>ascii</code>, <code>index</code>, and <code>count</code> parameters."},{"pos":[32227,32310],"content":"<ph id=\"ph1\">&lt;code&gt;ascii&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>ascii</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[32426,32690],"content":"<code>index</code> or <code>count</code> is less than zero.       -or-       <code>index</code> is greater than the length of <code>ascii</code>.       -or-       <code>index</code> is greater than the length of <code>ascii</code> minus <code>count</code>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.","pos":[0,59],"source":"<code>index</code> or <code>count</code> is less than zero."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is greater than the length of <ph id=\"ph2\">&lt;code&gt;ascii&lt;/code&gt;</ph>.","pos":[66,145],"source":"       -or-       <code>index</code> is greater than the length of <code>ascii</code>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is greater than the length of <ph id=\"ph2\">&lt;code&gt;ascii&lt;/code&gt;</ph> minus <ph id=\"ph3\">&lt;code&gt;count&lt;/code&gt;</ph>.","pos":[152,256],"source":"       -or-       <code>index</code> is greater than the length of <code>ascii</code> minus <code>count</code>."}]},{"pos":[32786,32981],"content":"<ph id=\"ph1\">&lt;code&gt;ascii&lt;/code&gt;</ph> is invalid based on the <ph id=\"ph2\">&lt;xref:System.Globalization.IdnMapping.AllowUnassigned*&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Globalization.IdnMapping.UseStd3AsciiRules*&gt;</ph> properties, and the IDNA standard.","needQuote":true,"needEscape":true,"source":"<code>ascii</code> is invalid based on the <xref:System.Globalization.IdnMapping.AllowUnassigned*> and <xref:System.Globalization.IdnMapping.UseStd3AsciiRules*> properties, and the IDNA standard."},{"pos":[33370,33572],"content":"Gets or sets a value that indicates whether standard or relaxed naming conventions are used in operations performed by members of the current <bpt id=\"p1\">&lt;xref href=\"System.Globalization.IdnMapping\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Gets or sets a value that indicates whether standard or relaxed naming conventions are used in operations performed by members of the current <xref href=\"System.Globalization.IdnMapping\"></xref> object."},{"pos":[33585,34700],"content":"Domain names that follow standard naming rules consist of a specific subset of characters in the US-ASCII character range. The characters are the letters A through Z, the digits 0 through 9, the hyphen (-) character (U+002D), and the period (.) character. The case of the characters is not significant. Relaxed naming conventions allow the use of a broader range of ASCII characters, including the space character (U+0020), the exclamation point character (U+0021), and the underbar character (U+005F). If UseStd3AsciiRules is `true`, only standard characters can appear in a label returned by the <xref:System.Globalization.IdnMapping.GetAscii%2A> method.       By default, the value of the UseStd3AsciiRules property is `false`, and an expanded subset of ASCII characters is permitted in a label.      > [!NOTE] >  The <xref:System.Globalization.IdnMapping> class prohibits the use of the nondisplayable characters U+0000 through U+001F, and U+007F in domain name labels regardless of the setting of the UseStd3AsciiRules property. This prohibition reduces the risk of security attacks such as name spoofing.","needQuote":false,"needEscape":true,"nodes":[{"content":"Domain names that follow standard naming rules consist of a specific subset of characters in the US-ASCII character range.","pos":[0,122]},{"content":"The characters are the letters A through Z, the digits 0 through 9, the hyphen (-) character (U+002D), and the period (.) character.","pos":[123,255]},{"content":"The case of the characters is not significant.","pos":[256,302]},{"content":"Relaxed naming conventions allow the use of a broader range of ASCII characters, including the space character (U+0020), the exclamation point character (U+0021), and the underbar character (U+005F).","pos":[303,502]},{"content":"If UseStd3AsciiRules is <ph id=\"ph1\">`true`</ph>, only standard characters can appear in a label returned by the &lt;xref:System.Globalization.IdnMapping.GetAscii%2A&gt; method.","pos":[503,656],"source":" If UseStd3AsciiRules is `true`, only standard characters can appear in a label returned by the <xref:System.Globalization.IdnMapping.GetAscii%2A> method."},{"content":"By default, the value of the UseStd3AsciiRules property is <ph id=\"ph1\">`false`</ph>, and an expanded subset of ASCII characters is permitted in a label.","pos":[663,798],"source":"       By default, the value of the UseStd3AsciiRules property is `false`, and an expanded subset of ASCII characters is permitted in a label."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The &lt;xref:System.Globalization.IdnMapping&gt; class prohibits the use of the nondisplayable characters U+0000 through U+001F, and U+007F in domain name labels regardless of the setting of the UseStd3AsciiRules property.","pos":[804,1033],"source":"      > [!NOTE] >  The <xref:System.Globalization.IdnMapping> class prohibits the use of the nondisplayable characters U+0000 through U+001F, and U+007F in domain name labels regardless of the setting of the UseStd3AsciiRules property."},{"content":"This prohibition reduces the risk of security attacks such as name spoofing.","pos":[1034,1110]}]},{"pos":[35586,35776],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if standard naming conventions are used in operations; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if standard naming conventions are used in operations; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Globalization.IdnMapping\n  id: IdnMapping\n  children:\n  - System.Globalization.IdnMapping.#ctor\n  - System.Globalization.IdnMapping.AllowUnassigned\n  - System.Globalization.IdnMapping.Equals(System.Object)\n  - System.Globalization.IdnMapping.GetAscii(System.String)\n  - System.Globalization.IdnMapping.GetAscii(System.String,System.Int32)\n  - System.Globalization.IdnMapping.GetAscii(System.String,System.Int32,System.Int32)\n  - System.Globalization.IdnMapping.GetHashCode\n  - System.Globalization.IdnMapping.GetUnicode(System.String)\n  - System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32)\n  - System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32,System.Int32)\n  - System.Globalization.IdnMapping.UseStd3AsciiRules\n  langs:\n  - csharp\n  name: IdnMapping\n  nameWithType: IdnMapping\n  fullName: System.Globalization.IdnMapping\n  type: Class\n  summary: Supports the use of non-ASCII characters for Internet domain names. This class cannot be inherited.\n  remarks: \"An Internet domain name consists of one or more parts, called domain name labels, separated by label separators. For example, the domain name \\\"www.proseware.com\\\" consists of the labels, \\\"www\\\", \\\"proseware\\\", and \\\"com\\\", separated by periods. Standard domain names consist of designated characters in the US-ASCII (or Basic Latin) character range, from U+0021 to U+007E. To facilitate Internet usage in cultures that do not use the US-ASCII character set, the Internationalizing Domain Names in Applications (IDNA) standard was adopted in 2003 to support the inclusion of Unicode characters outside the US-ASCII character range. However, name servers and domain name resolution continue to rely on characters within the US-ASCII character range.  \\n  \\n The IDNA mechanism uses Punycode to map an internationalized domain name that contains Unicode characters outside the US-ASCII character range to the US-ASCII character range supported by the domain name system. The IDNA mechanism is used to convert only domain names, not data transmitted over the Internet.  \\n  \\n> [!IMPORTANT]\\n>  In the [!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)], the IdnMapping class supports different versions of the IDNA standard, depending on the operating system in use:  \\n>   \\n>  -   When run on [!INCLUDE[win8](~/add/includes/ajax-current-ext-md.md)], it supports the 2008 version of the IDNA standard outlined by [RFC 5891: Internationalized Domain Names in Applications (IDNA): Protocol](http://go.microsoft.com/fwlink/?LinkId=231875).  \\n> -   When run on earlier versions of the Windows operating system, it supports the 2003 version of the standard outlined by [RFC 3490: Internationalizing Domain Names in Applications (IDNA)](http://go.microsoft.com/fwlink/?LinkId=158110).  \\n>   \\n>  See [Unicode Technical Standard #46: IDNA Compatibility Processing](http://go.microsoft.com/fwlink/?LinkId=232459) for the differences in the way these standards handle particular sets of characters.  \\n  \\n The <xref:System.Globalization.IdnMapping.GetAscii%2A?displayProperty=fullName> method normalizes a domain name, converts the normalized name to a representation that consists of displayable Unicode characters in the US-ASCII code point range (U+0020 to U+007E), and prepends an ASCII-compatible encoding (ACE) prefix (\\\"xn--\\\") to each label. The <xref:System.Globalization.IdnMapping.GetUnicode%2A?displayProperty=fullName> method restores the domain name labels converted by the <xref:System.Globalization.IdnMapping.GetAscii%2A> method.  \\n  \\n If the string to be converted includes the label separator characters IDEOGRAPHIC FULL STOP (U+3002), FULLWIDTH FULL STOP (U+FF0E), and HALFWIDTH IDEOGRAPHIC FULL STOP (U+FF61), the <xref:System.Globalization.IdnMapping.GetAscii%2A> method converts them to the label separator FULL STOP (period, U+002E). The <xref:System.Globalization.IdnMapping.GetUnicode%2A> method, however, does not restore the original label separator character.\"\n  example:\n  - \"The following example uses the <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29> method to convert an array of internationalized domain names to Punycode. The <xref:System.Globalization.IdnMapping.GetUnicode%2A> method then converts the Punycode domain name back to the original domain name, but replaces the original label separators with the standard label separator.  \\n  \\n [!code-vb[System.Globalization.IdnMapping.Class#1](~/add/codesnippet/visualbasic/t-system.globalization.i_1.vb)]\\n [!code-cs[System.Globalization.IdnMapping.Class#1](~/add/codesnippet/csharp/t-system.globalization.i_1.cs)]\"\n  syntax:\n    content: public sealed class IdnMapping\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Globalization.IdnMapping.#ctor\n  id: '#ctor'\n  parent: System.Globalization.IdnMapping\n  langs:\n  - csharp\n  name: IdnMapping()\n  nameWithType: IdnMapping.IdnMapping()\n  fullName: System.Globalization.IdnMapping.IdnMapping()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Initializes a new instance of the <xref href=\"System.Globalization.IdnMapping\"></xref> class.\n  remarks: The <xref:System.Globalization.IdnMapping.AllowUnassigned%2A?displayProperty=fullName> and <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A?displayProperty=fullName> properties are initialized to `false`. A small subset of ASCII characters other than A-Z, 0-9, the hyphen (-) character (U+002D), and the period (.) character are permitted in domain names, but unassigned Unicode code points are not.\n  syntax:\n    content: public IdnMapping ();\n    parameters: []\n  overload: System.Globalization.IdnMapping.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Globalization.IdnMapping.AllowUnassigned\n  id: AllowUnassigned\n  parent: System.Globalization.IdnMapping\n  langs:\n  - csharp\n  name: AllowUnassigned\n  nameWithType: IdnMapping.AllowUnassigned\n  fullName: System.Globalization.IdnMapping.AllowUnassigned\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Gets or sets a value that indicates whether unassigned Unicode code points are used in operations performed by members of the current <xref href=\"System.Globalization.IdnMapping\"></xref> object.\n  remarks: \"A registered domain name cannot contain unassigned code points. Consequently, the default value of the AllowUnassigned property is `false`. The IDNA specification permits unassigned code points only in queries for matching strings (that is, in domain name lookup). For more information about the use of unassigned code points in domain names, see [RFC 3454, \\\"Preparation of Internationalized Strings (stringprep)\\\"](http://go.microsoft.com/fwlink/?LinkId=231873) and [RFC 5891, \\\"Internationalized Domain Names in Applications (IDNA): Protocol\\\"](http://go.microsoft.com/fwlink/?LinkId=231875).  \\n  \\n> [!IMPORTANT]\\n>  If theAllowUnassigned property is `false`, the behavior associated with the property depends on the underlying operating system. On [!INCLUDE[win8](~/add/includes/ajax-current-ext-md.md)], the <xref:System.Globalization.IdnMapping> class conforms to IDNA 2008, which is based on the Unicode 6.0 standard. On previous versions of Windows, the <xref:System.Globalization.IdnMapping> class is based on IDNA 2003, which is based on Unicode 3.*x*. Some code points that were unassigned in IDNA 2003 have been assigned characters and are supported in IDNA 2008. For example, U+0221 was introduced in Unicode 4.0. On [!INCLUDE[win8](~/add/includes/ajax-current-ext-md.md)], it is encoded as \\\"xn—6la\\\". On previous versions of Windows, it throws an <xref:System.ArgumentException> exception.\"\n  syntax:\n    content: public bool AllowUnassigned { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if unassigned code points are used in operations; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Globalization.IdnMapping.AllowUnassigned*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Globalization.IdnMapping.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Globalization.IdnMapping\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: IdnMapping.Equals(Object)\n  fullName: System.Globalization.IdnMapping.Equals(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Indicates whether a specified object and the current <xref href=\"System.Globalization.IdnMapping\"></xref> object are equal.\n  syntax:\n    content: public override bool Equals (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The object to compare to the current object.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the object specified by the <code>obj</code> parameter is derived from <xref href=\"System.Globalization.IdnMapping\"></xref> and its <xref:System.Globalization.IdnMapping.AllowUnassigned*> and <xref:System.Globalization.IdnMapping.UseStd3AsciiRules*> properties are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Globalization.IdnMapping.Equals*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Globalization.IdnMapping.GetAscii(System.String)\n  id: GetAscii(System.String)\n  parent: System.Globalization.IdnMapping\n  langs:\n  - csharp\n  name: GetAscii(String)\n  nameWithType: IdnMapping.GetAscii(String)\n  fullName: System.Globalization.IdnMapping.GetAscii(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Encodes a string of domain name labels that consist of Unicode characters to a string of displayable Unicode characters in the US-ASCII character range. The string is formatted according to the IDNA standard.\n  remarks: \"The `unicode` parameter specifies a string of one or more labels that consist of valid Unicode characters. The labels are separated by label separators. The `unicode` parameter cannot begin with a label separator, but it can include and optionally end with a separator. The label separators are FULL STOP (period, U+002E), IDEOGRAPHIC FULL STOP (U+3002), FULLWIDTH FULL STOP (U+FF0E), and HALFWIDTH IDEOGRAPHIC FULL STOP (U+FF61). For example, the domain name \\\"www.adatum.com\\\" consists of the labels, \\\"www\\\", \\\"adatum\\\", and \\\"com\\\", separated by periods.  \\n  \\n A label cannot contain any of the following characters:  \\n  \\n-   Unicode control characters from U+0001 through U+001F, and U+007F.  \\n  \\n-   Unassigned Unicode characters, if the value of the <xref:System.Globalization.IdnMapping.AllowUnassigned%2A> property is `false`.  \\n  \\n-   Non-standard characters in the US-ASCII character range, such as the SPACE (U+0020), EXCLAMATION MARK (U+0021), and LOW LINE (U+005F) characters, if the value of the <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> property is `true`.  \\n  \\n-   Characters that are prohibited by a specific version of the IDNA standard. For more information about prohibited characters, see [RFC 3454: Preparation of Internationalized Strings (\\\"stringprep\\\")](http://go.microsoft.com/fwlink/?LinkId=231873) for IDNA 2003, and [RFC 5982: The Unicode Code Points and Internationalized Domain Names for Applications](http://go.microsoft.com/fwlink/?LinkId=231877) for IDNA 2008.  \\n  \\n The <xref:System.Globalization.IdnMapping.GetAscii%2A> method converts all label separators to FULL STOP (period, U+002E).  \\n  \\n If `unicode` contains no characters outside the US-ASCII character range and no characters within the US-ASCII character range are prohibited, the method returns `unicode` unchanged.\"\n  example:\n  - \"The following example uses the GetAscii method to convert an array of internationalized domain names to Punycode, which is an encoded equivalent that consists of characters in the US-ASCII character range. The <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%29> method then converts the Punycode domain name back into the original domain name, but replaces the original label separators with the standard label separator.  \\n  \\n [!code-vb[System.Globalization.IdnMapping.Class#1](~/add/codesnippet/visualbasic/m-system.globalization.i_0_1.vb)]\\n [!code-cs[System.Globalization.IdnMapping.Class#1](~/add/codesnippet/csharp/m-system.globalization.i_0_1.cs)]\"\n  syntax:\n    content: public string GetAscii (string unicode);\n    parameters:\n    - id: unicode\n      type: System.String\n      description: The string to convert, which consists of one or more domain name labels delimited with label separators.\n    return:\n      type: System.String\n      description: The equivalent of the string specified by the <code>unicode</code> parameter, consisting of displayable Unicode characters in the US-ASCII character range (U+0020 to U+007E) and formatted according to the IDNA standard.\n  overload: System.Globalization.IdnMapping.GetAscii*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>unicode</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>unicode</code> is invalid based on the <xref:System.Globalization.IdnMapping.AllowUnassigned*> and <xref:System.Globalization.IdnMapping.UseStd3AsciiRules*> properties, and the IDNA standard.\n  platform:\n  - net462\n- uid: System.Globalization.IdnMapping.GetAscii(System.String,System.Int32)\n  id: GetAscii(System.String,System.Int32)\n  parent: System.Globalization.IdnMapping\n  langs:\n  - csharp\n  name: GetAscii(String,Int32)\n  nameWithType: IdnMapping.GetAscii(String,Int32)\n  fullName: System.Globalization.IdnMapping.GetAscii(String,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Encodes a substring of domain name labels that include Unicode characters outside the US-ASCII character range. The substring is converted to a string of displayable Unicode characters in the US-ASCII character range and is formatted according to the IDNA standard.\n  remarks: \"The `unicode` and `index` parameters define a substring with one or more labels that consist of valid Unicode characters. The labels are separated by label separators. The first character of the substring cannot begin with a label separator, but it can include and optionally end with a separator. The label separators are FULL STOP (period, U+002E), IDEOGRAPHIC FULL STOP (U+3002), FULLWIDTH FULL STOP (U+FF0E), and HALFWIDTH IDEOGRAPHIC FULL STOP (U+FF61). For example, the domain name \\\"www.adatum.com\\\" consists of the labels, \\\"www\\\", \\\"adatum\\\", and \\\"com\\\", separated by periods.  \\n  \\n A label cannot contain any of the following characters:  \\n  \\n-   Unicode control characters from U+0001 through U+001F, and U+007F.  \\n  \\n-   Unassigned Unicode characters, depending on the value of the <xref:System.Globalization.IdnMapping.AllowUnassigned%2A> property.  \\n  \\n-   Non-standard characters in the US-ASCII character range, such as the SPACE (U+0020), EXCLAMATION MARK (U+0021), and LOW LINE (U+005F) characters, depending on the value of the <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> property.  \\n  \\n-   Characters that are prohibited by a specific version of the IDNA standard. For more information about prohibited characters, see [RFC 3454: Preparation of Internationalized Strings (\\\"stringprep\\\")](http://go.microsoft.com/fwlink/?LinkId=231873) for IDNA 2003, and [RFC 5982: The Unicode Code Points and Internationalized Domain Names for Applications](http://go.microsoft.com/fwlink/?LinkId=231877) for IDNA 2008.  \\n  \\n The <xref:System.Globalization.IdnMapping.GetAscii%2A> method converts all label separators to FULL STOP (period, U+002E).  \\n  \\n If `unicode` contains no characters outside the US-ASCII character range and no characters within the US-ASCII character range are prohibited, the method returns `unicode` unchanged.\"\n  example:\n  - \"The following example removes the local part and the @ character from an email address, and passes the resulting domain name to the GetAscii method to create a Punycode domain name, which is an encoded equivalent that consists of characters in the US-ASCII character range. The <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%2CSystem.Int32%2CSystem.Int32%29> method then converts the Punycode domain name back into the original domain name, but replaces the original label separators with the standard label separator.  \\n  \\n [!code-cs[System.Globalization.IdnMapping.GetAscii#2](~/add/codesnippet/csharp/m-system.globalization.i_3_1.cs)]\\n [!code-vb[System.Globalization.IdnMapping.GetAscii#2](~/add/codesnippet/visualbasic/m-system.globalization.i_3_1.vb)]\"\n  syntax:\n    content: public string GetAscii (string unicode, int index);\n    parameters:\n    - id: unicode\n      type: System.String\n      description: The string to convert, which consists of one or more domain name labels delimited with label separators.\n    - id: index\n      type: System.Int32\n      description: A zero-based offset into `unicode` that specifies the start of the substring to convert. The conversion operation continues to the end of the `unicode` string.\n    return:\n      type: System.String\n      description: The equivalent of the substring specified by the <code>unicode</code> and <code>index</code> parameters, consisting of displayable Unicode characters in the US-ASCII character range (U+0020 to U+007E) and formatted according to the IDNA standard.\n  overload: System.Globalization.IdnMapping.GetAscii*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>unicode</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>index</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>index</code> is greater than the length of <code>unicode</code>.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>unicode</code> is invalid based on the <xref:System.Globalization.IdnMapping.AllowUnassigned*> and <xref:System.Globalization.IdnMapping.UseStd3AsciiRules*> properties, and the IDNA standard.\n  platform:\n  - net462\n- uid: System.Globalization.IdnMapping.GetAscii(System.String,System.Int32,System.Int32)\n  id: GetAscii(System.String,System.Int32,System.Int32)\n  parent: System.Globalization.IdnMapping\n  langs:\n  - csharp\n  name: GetAscii(String,Int32,Int32)\n  nameWithType: IdnMapping.GetAscii(String,Int32,Int32)\n  fullName: System.Globalization.IdnMapping.GetAscii(String,Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Encodes the specified number of characters in a  substring of domain name labels that include Unicode characters outside the US-ASCII character range. The substring is converted to a string of displayable Unicode characters in the US-ASCII character range and is formatted according to the IDNA standard.\n  remarks: \"The `Unicode`, `index`, and `count` parameters define a substring with one or more labels that consist of valid Unicode characters. The labels are separated by label separators. The first character of the substring cannot begin with a label separator, but it can include and optionally end with a separator. The label separators are FULL STOP (period, U+002E), IDEOGRAPHIC FULL STOP (U+3002), FULLWIDTH FULL STOP (U+FF0E), and HALFWIDTH IDEOGRAPHIC FULL STOP (U+FF61). For example, the domain name \\\"www.adatum.com\\\" consists of the labels, \\\"www\\\", \\\"adatum\\\", and \\\"com\\\", separated by periods.  \\n  \\n A label cannot contain any of the following characters:  \\n  \\n-   Unicode control characters from U+0001 through U+001F, and U+007F.  \\n  \\n-   Unassigned Unicode characters, depending on the value of the <xref:System.Globalization.IdnMapping.AllowUnassigned%2A> property.  \\n  \\n-   Non-standard characters in the US-ASCII character range, such as the SPACE (U+0020), EXCLAMATION MARK (U+0021), and LOW LINE (U+005F) characters, depending on the value of the <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> property.  \\n  \\n-   Characters that are prohibited by a specific version of the IDNA standard. For more information about prohibited characters, see [RFC 3454: Preparation of Internationalized Strings (\\\"stringprep\\\")](http://go.microsoft.com/fwlink/?LinkId=231873) for IDNA 2003, and [RFC 5982: The Unicode Code Points and Internationalized Domain Names for Applications](http://go.microsoft.com/fwlink/?LinkId=231877) for IDNA 2008.  \\n  \\n The <xref:System.Globalization.IdnMapping.GetAscii%2A> method converts all label separators to FULL STOP (period, U+002E). If the substring contains no characters outside the US-ASCII character range, and no characters within the US-ASCII character range are prohibited, the method returns the substring unchanged.\"\n  example:\n  - \"The following example uses the GetAscii method to convert an internationalized domain name to a domain name that complies with the IDNA standard. The <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%2CSystem.Int32%2CSystem.Int32%29> method then converts the standardized domain name back into the original domain name, but replaces the original label separators with the standard label separator.  \\n  \\n [!code-vb[IdnMapping.GetX#1](~/add/codesnippet/visualbasic/9eb31a8b-c677-4c73-81bb-_1.vb)]\\n [!code-cs[IdnMapping.GetX#1](~/add/codesnippet/csharp/9eb31a8b-c677-4c73-81bb-_1.cs)]\"\n  syntax:\n    content: public string GetAscii (string unicode, int index, int count);\n    parameters:\n    - id: unicode\n      type: System.String\n      description: The string to convert, which consists of one or more domain name labels delimited with label separators.\n    - id: index\n      type: System.Int32\n      description: A zero-based offset into `unicode` that specifies the start of the substring.\n    - id: count\n      type: System.Int32\n      description: The number of characters to convert in the substring that starts at the position specified by  `index` in the `unicode` string.\n    return:\n      type: System.String\n      description: The equivalent of the substring specified by the <code>unicode</code>, <code>index</code>, and <code>count</code> parameters, consisting of displayable Unicode characters in the US-ASCII character range (U+0020 to U+007E) and formatted according to the IDNA standard.\n  overload: System.Globalization.IdnMapping.GetAscii*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>unicode</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>index</code> or <code>count</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>index</code> is greater than the length of <code>unicode</code>.  \\n  \\n -or-  \\n  \\n <code>index</code> is greater than the length of <code>unicode</code> minus <code>count</code>.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>unicode</code> is invalid based on the <xref:System.Globalization.IdnMapping.AllowUnassigned*> and <xref:System.Globalization.IdnMapping.UseStd3AsciiRules*> properties, and the IDNA standard.\n  platform:\n  - net462\n- uid: System.Globalization.IdnMapping.GetHashCode\n  id: GetHashCode\n  parent: System.Globalization.IdnMapping\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: IdnMapping.GetHashCode()\n  fullName: System.Globalization.IdnMapping.GetHashCode()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Returns a hash code for this <xref href=\"System.Globalization.IdnMapping\"></xref> object.\n  remarks: Override the GetHashCode method if your application needs to implement a meaningful hash code algorithm.\n  example:\n  - \"The following example assumes that a single string can contain multiple email addresses separated by spaces. It removes the local part and the @ character from each email address, and passes the resulting domain name to the <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%29> or <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29> method to create a Punycode domain name. The <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%2CSystem.Int32%2CSystem.Int32%29> method then converts the Punycode domain name back into the original domain name.  \\n  \\n [!code-cs[System.Globalization.IdnMapping.GetAscii#3](~/add/codesnippet/csharp/m-system.globalization.i_2_1.cs)]\\n [!code-vb[System.Globalization.IdnMapping.GetAscii#3](~/add/codesnippet/visualbasic/m-system.globalization.i_2_1.vb)]\"\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: One of four 32-bit signed constants derived from the properties of an <xref href=\"System.Globalization.IdnMapping\"></xref> object.  The return value has no special meaning and is not suitable for use in a hash code algorithm.\n  overload: System.Globalization.IdnMapping.GetHashCode*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Globalization.IdnMapping.GetUnicode(System.String)\n  id: GetUnicode(System.String)\n  parent: System.Globalization.IdnMapping\n  langs:\n  - csharp\n  name: GetUnicode(String)\n  nameWithType: IdnMapping.GetUnicode(String)\n  fullName: System.Globalization.IdnMapping.GetUnicode(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Decodes a string of one or more domain name labels, encoded according to the IDNA standard, to a string of Unicode characters.\n  remarks: For more information about domain names, labels, and label separators, see the remarks for the <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=fullName> method.\n  example:\n  - \"The following example uses the <xref:System.Globalization.IdnMapping.GetAscii%28System.String%29> method to convert an array of internationalized domain names to Punycode. The GetUnicode method then converts the Punycode domain name back into the original domain name, but replaces the original label separators with the standard label separator.  \\n  \\n [!code-vb[System.Globalization.IdnMapping.Class#1](~/add/codesnippet/visualbasic/m-system.globalization.i_1_1.vb)]\\n [!code-cs[System.Globalization.IdnMapping.Class#1](~/add/codesnippet/csharp/m-system.globalization.i_1_1.cs)]\"\n  syntax:\n    content: public string GetUnicode (string ascii);\n    parameters:\n    - id: ascii\n      type: System.String\n      description: The string to decode, which consists of one or more labels in the US-ASCII character range (U+0020 to U+007E) encoded according to the IDNA standard.\n    return:\n      type: System.String\n      description: The Unicode equivalent of the IDNA substring specified by the <code>ascii</code> parameter.\n  overload: System.Globalization.IdnMapping.GetUnicode*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>ascii</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>ascii</code> is invalid based on the <xref:System.Globalization.IdnMapping.AllowUnassigned*> and <xref:System.Globalization.IdnMapping.UseStd3AsciiRules*> properties, and the IDNA standard.\n  platform:\n  - net462\n- uid: System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32)\n  id: GetUnicode(System.String,System.Int32)\n  parent: System.Globalization.IdnMapping\n  langs:\n  - csharp\n  name: GetUnicode(String,Int32)\n  nameWithType: IdnMapping.GetUnicode(String,Int32)\n  fullName: System.Globalization.IdnMapping.GetUnicode(String,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Decodes a substring of one or more domain name labels, encoded according to the IDNA standard, to a string of Unicode characters.\n  remarks: For more information about domain names, labels, and label separators, see the remarks for the <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=fullName> method.\n  syntax:\n    content: public string GetUnicode (string ascii, int index);\n    parameters:\n    - id: ascii\n      type: System.String\n      description: The string to decode, which consists of one or more labels in the US-ASCII character range (U+0020 to U+007E) encoded according to the IDNA standard.\n    - id: index\n      type: System.Int32\n      description: A zero-based offset into `ascii` that specifies the start of the substring to decode. The decoding operation continues to the end of the `ascii` string.\n    return:\n      type: System.String\n      description: The Unicode equivalent of the IDNA substring specified by the <code>ascii</code> and <code>index</code> parameters.\n  overload: System.Globalization.IdnMapping.GetUnicode*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>ascii</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>index</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>index</code> is greater than the length of <code>ascii</code>.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>ascii</code> is invalid based on the <xref:System.Globalization.IdnMapping.AllowUnassigned*> and <xref:System.Globalization.IdnMapping.UseStd3AsciiRules*> properties, and the IDNA standard.\n  platform:\n  - net462\n- uid: System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32,System.Int32)\n  id: GetUnicode(System.String,System.Int32,System.Int32)\n  parent: System.Globalization.IdnMapping\n  langs:\n  - csharp\n  name: GetUnicode(String,Int32,Int32)\n  nameWithType: IdnMapping.GetUnicode(String,Int32,Int32)\n  fullName: System.Globalization.IdnMapping.GetUnicode(String,Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Decodes a substring of a specified length that contains one or more domain name labels, encoded according to the IDNA standard, to a string of Unicode characters.\n  remarks: For more information about domain names, labels, and label separators, see the remarks for the <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=fullName> method.\n  syntax:\n    content: public string GetUnicode (string ascii, int index, int count);\n    parameters:\n    - id: ascii\n      type: System.String\n      description: The string to decode, which consists of one or more labels in the US-ASCII character range (U+0020 to U+007E) encoded according to the IDNA standard.\n    - id: index\n      type: System.Int32\n      description: A zero-based offset into `ascii` that specifies the start of the substring.\n    - id: count\n      type: System.Int32\n      description: The number of characters to convert in the substring that starts at the position specified by `index` in the `ascii` string.\n    return:\n      type: System.String\n      description: The Unicode equivalent of the IDNA substring specified by the <code>ascii</code>, <code>index</code>, and <code>count</code> parameters.\n  overload: System.Globalization.IdnMapping.GetUnicode*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>ascii</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>index</code> or <code>count</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>index</code> is greater than the length of <code>ascii</code>.  \\n  \\n -or-  \\n  \\n <code>index</code> is greater than the length of <code>ascii</code> minus <code>count</code>.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>ascii</code> is invalid based on the <xref:System.Globalization.IdnMapping.AllowUnassigned*> and <xref:System.Globalization.IdnMapping.UseStd3AsciiRules*> properties, and the IDNA standard.\n  platform:\n  - net462\n- uid: System.Globalization.IdnMapping.UseStd3AsciiRules\n  id: UseStd3AsciiRules\n  parent: System.Globalization.IdnMapping\n  langs:\n  - csharp\n  name: UseStd3AsciiRules\n  nameWithType: IdnMapping.UseStd3AsciiRules\n  fullName: System.Globalization.IdnMapping.UseStd3AsciiRules\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Globalization\n  summary: Gets or sets a value that indicates whether standard or relaxed naming conventions are used in operations performed by members of the current <xref href=\"System.Globalization.IdnMapping\"></xref> object.\n  remarks: \"Domain names that follow standard naming rules consist of a specific subset of characters in the US-ASCII character range. The characters are the letters A through Z, the digits 0 through 9, the hyphen (-) character (U+002D), and the period (.) character. The case of the characters is not significant. Relaxed naming conventions allow the use of a broader range of ASCII characters, including the space character (U+0020), the exclamation point character (U+0021), and the underbar character (U+005F). If UseStd3AsciiRules is `true`, only standard characters can appear in a label returned by the <xref:System.Globalization.IdnMapping.GetAscii%2A> method.  \\n  \\n By default, the value of the UseStd3AsciiRules property is `false`, and an expanded subset of ASCII characters is permitted in a label.  \\n  \\n> [!NOTE]\\n>  The <xref:System.Globalization.IdnMapping> class prohibits the use of the nondisplayable characters U+0000 through U+001F, and U+007F in domain name labels regardless of the setting of the UseStd3AsciiRules property. This prohibition reduces the risk of security attacks such as name spoofing.\"\n  example:\n  - \"The following example generates URLs that contain characters in the ASCII range from U+0000 to U+007F and passes them to the <xref:System.Globalization.IdnMapping.GetAscii%28System.String%29> method of two <xref:System.Globalization.IdnMapping> objects. One object has its UseStd3AsciiRules property set to `true`, and the other object has it set to `false`. The output displays the characters that are invalid when the UseStd3AsciiRules property is `true` but valid when it is `false`.  \\n  \\n [!code-cs[System.Globalization.IdnMapping.UseStd3AsciiRules#1](~/add/codesnippet/csharp/p-system.globalization.i_1.cs)]\\n [!code-vb[System.Globalization.IdnMapping.UseStd3AsciiRules#1](~/add/codesnippet/visualbasic/p-system.globalization.i_1.vb)]\"\n  syntax:\n    content: public bool UseStd3AsciiRules { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if standard naming conventions are used in operations; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Globalization.IdnMapping.UseStd3AsciiRules*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.Globalization.IdnMapping.#ctor\n  parent: System.Globalization.IdnMapping\n  isExternal: false\n  name: IdnMapping()\n  nameWithType: IdnMapping.IdnMapping()\n  fullName: System.Globalization.IdnMapping.IdnMapping()\n- uid: System.Globalization.IdnMapping.AllowUnassigned\n  parent: System.Globalization.IdnMapping\n  isExternal: false\n  name: AllowUnassigned\n  nameWithType: IdnMapping.AllowUnassigned\n  fullName: System.Globalization.IdnMapping.AllowUnassigned\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Globalization.IdnMapping.Equals(System.Object)\n  parent: System.Globalization.IdnMapping\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: IdnMapping.Equals(Object)\n  fullName: System.Globalization.IdnMapping.Equals(Object)\n- uid: System.Globalization.IdnMapping.GetAscii(System.String)\n  parent: System.Globalization.IdnMapping\n  isExternal: false\n  name: GetAscii(String)\n  nameWithType: IdnMapping.GetAscii(String)\n  fullName: System.Globalization.IdnMapping.GetAscii(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Globalization.IdnMapping.GetAscii(System.String,System.Int32)\n  parent: System.Globalization.IdnMapping\n  isExternal: false\n  name: GetAscii(String,Int32)\n  nameWithType: IdnMapping.GetAscii(String,Int32)\n  fullName: System.Globalization.IdnMapping.GetAscii(String,Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Globalization.IdnMapping.GetAscii(System.String,System.Int32,System.Int32)\n  parent: System.Globalization.IdnMapping\n  isExternal: false\n  name: GetAscii(String,Int32,Int32)\n  nameWithType: IdnMapping.GetAscii(String,Int32,Int32)\n  fullName: System.Globalization.IdnMapping.GetAscii(String,Int32,Int32)\n- uid: System.Globalization.IdnMapping.GetHashCode\n  parent: System.Globalization.IdnMapping\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: IdnMapping.GetHashCode()\n  fullName: System.Globalization.IdnMapping.GetHashCode()\n- uid: System.Globalization.IdnMapping.GetUnicode(System.String)\n  parent: System.Globalization.IdnMapping\n  isExternal: false\n  name: GetUnicode(String)\n  nameWithType: IdnMapping.GetUnicode(String)\n  fullName: System.Globalization.IdnMapping.GetUnicode(String)\n- uid: System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32)\n  parent: System.Globalization.IdnMapping\n  isExternal: false\n  name: GetUnicode(String,Int32)\n  nameWithType: IdnMapping.GetUnicode(String,Int32)\n  fullName: System.Globalization.IdnMapping.GetUnicode(String,Int32)\n- uid: System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32,System.Int32)\n  parent: System.Globalization.IdnMapping\n  isExternal: false\n  name: GetUnicode(String,Int32,Int32)\n  nameWithType: IdnMapping.GetUnicode(String,Int32,Int32)\n  fullName: System.Globalization.IdnMapping.GetUnicode(String,Int32,Int32)\n- uid: System.Globalization.IdnMapping.UseStd3AsciiRules\n  parent: System.Globalization.IdnMapping\n  isExternal: false\n  name: UseStd3AsciiRules\n  nameWithType: IdnMapping.UseStd3AsciiRules\n  fullName: System.Globalization.IdnMapping.UseStd3AsciiRules\n- uid: System.Globalization.IdnMapping.#ctor*\n  parent: System.Globalization.IdnMapping\n  isExternal: false\n  name: IdnMapping\n  nameWithType: IdnMapping.IdnMapping\n- uid: System.Globalization.IdnMapping.AllowUnassigned*\n  parent: System.Globalization.IdnMapping\n  isExternal: false\n  name: AllowUnassigned\n  nameWithType: IdnMapping.AllowUnassigned\n- uid: System.Globalization.IdnMapping.Equals*\n  parent: System.Globalization.IdnMapping\n  isExternal: false\n  name: Equals\n  nameWithType: IdnMapping.Equals\n- uid: System.Globalization.IdnMapping.GetAscii*\n  parent: System.Globalization.IdnMapping\n  isExternal: false\n  name: GetAscii\n  nameWithType: IdnMapping.GetAscii\n- uid: System.Globalization.IdnMapping.GetHashCode*\n  parent: System.Globalization.IdnMapping\n  isExternal: false\n  name: GetHashCode\n  nameWithType: IdnMapping.GetHashCode\n- uid: System.Globalization.IdnMapping.GetUnicode*\n  parent: System.Globalization.IdnMapping\n  isExternal: false\n  name: GetUnicode\n  nameWithType: IdnMapping.GetUnicode\n- uid: System.Globalization.IdnMapping.UseStd3AsciiRules*\n  parent: System.Globalization.IdnMapping\n  isExternal: false\n  name: UseStd3AsciiRules\n  nameWithType: IdnMapping.UseStd3AsciiRules\n"}