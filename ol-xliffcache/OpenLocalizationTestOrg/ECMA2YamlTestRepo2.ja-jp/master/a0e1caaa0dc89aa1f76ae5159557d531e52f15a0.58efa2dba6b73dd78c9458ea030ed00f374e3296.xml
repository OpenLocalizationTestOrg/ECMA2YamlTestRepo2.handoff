{"nodes":[{"pos":[697,855],"content":"Implements a timer that raises an event at user-defined intervals. This timer is optimized for use in Windows Forms applications and must be used in a window.","needQuote":true,"needEscape":true,"nodes":[{"content":"Implements a timer that raises an event at user-defined intervals. This timer is optimized for use in Windows Forms applications and must be used in a window.","pos":[0,158],"nodes":[{"content":"Implements a timer that raises an event at user-defined intervals.","pos":[0,66]},{"content":"This timer is optimized for use in Windows Forms applications and must be used in a window.","pos":[67,158]}]}]},{"pos":[868,2040],"content":"A Timer is used to raise an event at user-defined intervals. This Windows timer is designed for a single-threaded environment where UI threads are used to perform processing. It requires that the user code have a UI message pump available and always operate from the same thread, or marshal the call onto another thread.       When you use this timer, use the <xref:System.Windows.Forms.Timer.Tick> event to perform a polling operation or to display a splash screen for a specified period of time. Whenever the <xref:System.Windows.Forms.Timer.Enabled%2A> property is set to `true` and the <xref:System.Windows.Forms.Timer.Interval%2A> property is greater than zero, the <xref:System.Windows.Forms.Timer.Tick> event is raised at intervals based on the <xref:System.Windows.Forms.Timer.Interval%2A> property setting.       This class provides methods to set the interval, and to start and stop the timer.      > [!NOTE] >  The Windows Forms Timer component is single-threaded, and is limited to an accuracy of 55 milliseconds. If you require a multithreaded timer with greater accuracy, use the <xref:System.Timers.Timer> class in the <xref:System.Timers> namespace.","needQuote":false,"needEscape":true,"nodes":[{"content":"A Timer is used to raise an event at user-defined intervals.","pos":[0,60]},{"content":"This Windows timer is designed for a single-threaded environment where UI threads are used to perform processing.","pos":[61,174]},{"content":"It requires that the user code have a UI message pump available and always operate from the same thread, or marshal the call onto another thread.","pos":[175,320]},{"content":"When you use this timer, use the &lt;xref:System.Windows.Forms.Timer.Tick&gt; event to perform a polling operation or to display a splash screen for a specified period of time.","pos":[327,497],"source":"       When you use this timer, use the <xref:System.Windows.Forms.Timer.Tick> event to perform a polling operation or to display a splash screen for a specified period of time."},{"content":"Whenever the &lt;xref:System.Windows.Forms.Timer.Enabled%2A&gt; property is set to <ph id=\"ph1\">`true`</ph> and the &lt;xref:System.Windows.Forms.Timer.Interval%2A&gt; property is greater than zero, the &lt;xref:System.Windows.Forms.Timer.Tick&gt; event is raised at intervals based on the &lt;xref:System.Windows.Forms.Timer.Interval%2A&gt; property setting.","pos":[498,815],"source":" Whenever the <xref:System.Windows.Forms.Timer.Enabled%2A> property is set to `true` and the <xref:System.Windows.Forms.Timer.Interval%2A> property is greater than zero, the <xref:System.Windows.Forms.Timer.Tick> event is raised at intervals based on the <xref:System.Windows.Forms.Timer.Interval%2A> property setting."},{"content":"This class provides methods to set the interval, and to start and stop the timer.","pos":[822,903]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The Windows Forms Timer component is single-threaded, and is limited to an accuracy of 55 milliseconds.","pos":[909,1025],"source":"      > [!NOTE] >  The Windows Forms Timer component is single-threaded, and is limited to an accuracy of 55 milliseconds."},{"content":"If you require a multithreaded timer with greater accuracy, use the &lt;xref:System.Timers.Timer&gt; class in the &lt;xref:System.Timers&gt; namespace.","pos":[1026,1165],"source":" If you require a multithreaded timer with greater accuracy, use the <xref:System.Timers.Timer> class in the <xref:System.Timers> namespace."}]},{"pos":[3996,4084],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Forms.Timer\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Windows.Forms.Timer\"></xref> class."},{"pos":[4097,4574],"content":"When a new timer is created, it is disabled; that is, <xref:System.Windows.Forms.Timer.Enabled%2A> is set to `false`. To enable the timer, call the <xref:System.Windows.Forms.Timer.Start%2A> method or set <xref:System.Windows.Forms.Timer.Enabled%2A> to `true`.       If the timer is disabled and the timer is out of scope, the timer will be disposed when garbage collection occurs. If the timer is enabled, even if it is out of scope, it is not subject to garbage collection.","needQuote":false,"needEscape":true,"nodes":[{"content":"When a new timer is created, it is disabled; that is, &lt;xref:System.Windows.Forms.Timer.Enabled%2A&gt; is set to <ph id=\"ph1\">`false`</ph>.","pos":[0,117],"source":"When a new timer is created, it is disabled; that is, <xref:System.Windows.Forms.Timer.Enabled%2A> is set to `false`."},{"content":"To enable the timer, call the &lt;xref:System.Windows.Forms.Timer.Start%2A&gt; method or set &lt;xref:System.Windows.Forms.Timer.Enabled%2A&gt; to <ph id=\"ph1\">`true`</ph>.","pos":[118,260],"source":" To enable the timer, call the <xref:System.Windows.Forms.Timer.Start%2A> method or set <xref:System.Windows.Forms.Timer.Enabled%2A> to `true`."},{"content":"If the timer is disabled and the timer is out of scope, the timer will be disposed when garbage collection occurs.","pos":[267,381]},{"content":"If the timer is enabled, even if it is out of scope, it is not subject to garbage collection.","pos":[382,475]}]},{"pos":[5127,5253],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Forms.Timer\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class together with the specified container.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Windows.Forms.Timer\"></xref> class together with the specified container."},{"pos":[5266,6461],"content":"The <xref:System.Windows.Forms.Timer> constructor enables you to associate a <xref:System.Windows.Forms.Timer> with any <xref:System.ComponentModel.Container> object. By associating the <xref:System.Windows.Forms.Timer> like this, you hand over control of the lifetime of the <xref:System.Windows.Forms.Timer> to the <xref:System.ComponentModel.Container>. This can be useful if you use a number of components in your application and want to dispose of all of them simultaneously. For example, if you associate a <xref:System.Windows.Forms.ToolTip>, an <xref:System.Windows.Forms.ImageList>, and a <xref:System.Windows.Forms.Timer> with a <xref:System.ComponentModel.Container>, calling <xref:System.ComponentModel.Container.Dispose%2A> on the <xref:System.ComponentModel.Container> will force disposal of all of these components as well.       When a new timer is created, it is disabled; that is, <xref:System.Windows.Forms.Timer.Enabled%2A> is set to `false`. To enable the timer, call the <xref:System.Windows.Forms.Timer.Start%2A> method or set <xref:System.Windows.Forms.Timer.Enabled%2A> to `true`.       This instance will exist until its container releases it to garbage collection.","needQuote":false,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Windows.Forms.Timer&gt; constructor enables you to associate a &lt;xref:System.Windows.Forms.Timer&gt; with any &lt;xref:System.ComponentModel.Container&gt; object.","pos":[0,166],"source":"The <xref:System.Windows.Forms.Timer> constructor enables you to associate a <xref:System.Windows.Forms.Timer> with any <xref:System.ComponentModel.Container> object."},{"content":"By associating the &lt;xref:System.Windows.Forms.Timer&gt; like this, you hand over control of the lifetime of the &lt;xref:System.Windows.Forms.Timer&gt; to the &lt;xref:System.ComponentModel.Container&gt;.","pos":[167,356],"source":" By associating the <xref:System.Windows.Forms.Timer> like this, you hand over control of the lifetime of the <xref:System.Windows.Forms.Timer> to the <xref:System.ComponentModel.Container>."},{"content":"This can be useful if you use a number of components in your application and want to dispose of all of them simultaneously.","pos":[357,480]},{"content":"For example, if you associate a &lt;xref:System.Windows.Forms.ToolTip&gt;, an &lt;xref:System.Windows.Forms.ImageList&gt;, and a &lt;xref:System.Windows.Forms.Timer&gt; with a &lt;xref:System.ComponentModel.Container&gt;, calling &lt;xref:System.ComponentModel.Container.Dispose%2A&gt; on the &lt;xref:System.ComponentModel.Container&gt; will force disposal of all of these components as well.","pos":[481,838],"source":" For example, if you associate a <xref:System.Windows.Forms.ToolTip>, an <xref:System.Windows.Forms.ImageList>, and a <xref:System.Windows.Forms.Timer> with a <xref:System.ComponentModel.Container>, calling <xref:System.ComponentModel.Container.Dispose%2A> on the <xref:System.ComponentModel.Container> will force disposal of all of these components as well."},{"content":"When a new timer is created, it is disabled; that is, &lt;xref:System.Windows.Forms.Timer.Enabled%2A&gt; is set to <ph id=\"ph1\">`false`</ph>.","pos":[845,962],"source":"       When a new timer is created, it is disabled; that is, <xref:System.Windows.Forms.Timer.Enabled%2A> is set to `false`."},{"content":"To enable the timer, call the &lt;xref:System.Windows.Forms.Timer.Start%2A&gt; method or set &lt;xref:System.Windows.Forms.Timer.Enabled%2A&gt; to <ph id=\"ph1\">`true`</ph>.","pos":[963,1105],"source":" To enable the timer, call the <xref:System.Windows.Forms.Timer.Start%2A> method or set <xref:System.Windows.Forms.Timer.Enabled%2A> to `true`."},{"content":"This instance will exist until its container releases it to garbage collection.","pos":[1112,1191]}]},{"pos":[6645,6746],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.IContainer\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the container for the timer.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.ComponentModel.IContainer\"></xref> that represents the container for the timer."},{"pos":[7197,7261],"content":"Disposes of the resources, other than memory, used by the timer.","needQuote":true,"needEscape":true,"nodes":[{"content":"Disposes of the resources, other than memory, used by the timer.","pos":[0,64]}]},{"pos":[7274,7746],"content":"Call Dispose when you are finished using the timer. The Dispose method leaves the timer in an unusable state. After you call Dispose, you must release all references to the timer so the memory it was occupying can be reclaimed by garbage collection.      > [!NOTE] >  Always call Dispose before you release your last reference to the timer. Otherwise, the resources the timer is using will not be freed until garbage collection calls the destructor of the timer object.","needQuote":false,"needEscape":true,"nodes":[{"content":"Call Dispose when you are finished using the timer.","pos":[0,51]},{"content":"The Dispose method leaves the timer in an unusable state.","pos":[52,109]},{"content":"After you call Dispose, you must release all references to the timer so the memory it was occupying can be reclaimed by garbage collection.","pos":[110,249]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Always call Dispose before you release your last reference to the timer.","pos":[255,340],"source":"      > [!NOTE] >  Always call Dispose before you release your last reference to the timer."},{"content":"Otherwise, the resources the timer is using will not be freed until garbage collection calls the destructor of the timer object.","pos":[341,469]}]},{"pos":[7903,8116],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources. <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only the unmanaged resources.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to release both managed and unmanaged resources.","pos":[0,109],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources."},{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to release only the unmanaged resources.","pos":[110,213],"source":"<xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only the unmanaged resources."}]},{"pos":[8512,8554],"content":"Gets or sets whether the timer is running.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets whether the timer is running.","pos":[0,42]}]},{"pos":[8567,8865],"content":"The timer is not subject to garbage collection when the value is `true`.       Calling the <xref:System.Windows.Forms.Timer.Start%2A> method is the same as setting Enabled to `true`. Likewise, calling the <xref:System.Windows.Forms.Timer.Stop%2A> method is the same as setting Enabled to `false`.","needQuote":false,"needEscape":true,"nodes":[{"content":"The timer is not subject to garbage collection when the value is <ph id=\"ph1\">`true`</ph>.","pos":[0,72],"source":"The timer is not subject to garbage collection when the value is `true`."},{"content":"Calling the &lt;xref:System.Windows.Forms.Timer.Start%2A&gt; method is the same as setting Enabled to <ph id=\"ph1\">`true`</ph>.","pos":[79,182],"source":"       Calling the <xref:System.Windows.Forms.Timer.Start%2A> method is the same as setting Enabled to `true`."},{"content":"Likewise, calling the &lt;xref:System.Windows.Forms.Timer.Stop%2A&gt; method is the same as setting Enabled to <ph id=\"ph1\">`false`</ph>.","pos":[183,296],"source":" Likewise, calling the <xref:System.Windows.Forms.Timer.Stop%2A> method is the same as setting Enabled to `false`."}]},{"pos":[9608,9857],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the timer is currently enabled; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the timer is currently enabled; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,170],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the timer is currently enabled; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[171,249],"source":" The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[10258,10476],"content":"Gets or sets the time, in milliseconds, before the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Forms.Timer.Tick\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event is raised relative to the last occurrence of the <bpt id=\"p2\">&lt;xref href=\"System.Windows.Forms.Timer.Tick\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> event.","needQuote":true,"needEscape":true,"source":"Gets or sets the time, in milliseconds, before the <xref href=\"System.Windows.Forms.Timer.Tick\"></xref> event is raised relative to the last occurrence of the <xref href=\"System.Windows.Forms.Timer.Tick\"></xref> event."},{"pos":[10488,10562],"content":"To get the number of seconds in the interval, divide this number by 1,000.","needQuote":true,"needEscape":true,"nodes":[{"content":"To get the number of seconds in the interval, divide this number by 1,000.","pos":[0,74]}]},{"pos":[11296,11570],"content":"An <xref:System.Int32> specifying the number of milliseconds before the <xref href=\"System.Windows.Forms.Timer.Tick\"></xref> event is raised relative to the last occurrence of the <xref href=\"System.Windows.Forms.Timer.Tick\"></xref> event. The value cannot be less than one.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Int32&gt; specifying the number of milliseconds before the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Forms.Timer.Tick\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event is raised relative to the last occurrence of the <bpt id=\"p2\">&lt;xref href=\"System.Windows.Forms.Timer.Tick\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> event.","pos":[0,239],"source":"An <xref:System.Int32> specifying the number of milliseconds before the <xref href=\"System.Windows.Forms.Timer.Tick\"></xref> event is raised relative to the last occurrence of the <xref href=\"System.Windows.Forms.Timer.Tick\"></xref> event."},{"content":"The value cannot be less than one.","pos":[240,274]}]},{"pos":[12029,12099],"content":"Raises the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Forms.Timer.Tick\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event.","needQuote":true,"needEscape":true,"source":"Raises the <xref href=\"System.Windows.Forms.Timer.Tick\"></xref> event."},{"pos":[12112,12497],"content":"This method is called for each timer tick. It calls any methods that are added through <xref:System.Windows.Forms.Timer.Tick>. If you are inheriting from <xref:System.Windows.Forms.Timer>, you can override this method.       Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"This method is called for each timer tick.","pos":[0,42]},{"content":"It calls any methods that are added through &lt;xref:System.Windows.Forms.Timer.Tick&gt;.","pos":[43,126],"source":" It calls any methods that are added through <xref:System.Windows.Forms.Timer.Tick>."},{"content":"If you are inheriting from &lt;xref:System.Windows.Forms.Timer&gt;, you can override this method.","pos":[127,218],"source":" If you are inheriting from <xref:System.Windows.Forms.Timer>, you can override this method."},{"content":"Raising an event invokes the event handler through a delegate.","pos":[225,287]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Handling and Raising Events<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[288,383],"source":" For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[12643,12739],"content":"An <xref:System.EventArgs> that contains the event data. This is always <xref:System.EventArgs>.","needQuote":true,"needEscape":true,"nodes":[{"content":"An <xref:System.EventArgs> that contains the event data. This is always <xref:System.EventArgs>.","pos":[0,96],"nodes":[{"content":"An &lt;xref:System.EventArgs&gt; that contains the event data.","pos":[0,56],"source":"An <xref:System.EventArgs> that contains the event data."},{"content":"This is always &lt;xref:System.EventArgs&gt;.","pos":[57,96],"source":" This is always <xref:System.EventArgs>."}]}]},{"pos":[13128,13145],"content":"Starts the timer.","needQuote":true,"needEscape":true,"nodes":[{"content":"Starts the timer.","pos":[0,17]}]},{"pos":[13157,13265],"content":"You can also start the timer by setting the &lt;xref:System.Windows.Forms.Timer.Enabled%2A&gt; property to <ph id=\"ph1\">`true`</ph>.","needQuote":true,"needEscape":true,"source":"You can also start the timer by setting the <xref:System.Windows.Forms.Timer.Enabled%2A> property to `true`."},{"pos":[14329,14345],"content":"Stops the timer.","needQuote":true,"needEscape":true,"nodes":[{"content":"Stops the timer.","pos":[0,16]}]},{"pos":[14358,15861],"content":"You can also stop the timer by setting the <xref:System.Windows.Forms.Timer.Enabled%2A> property to `false`. A <xref:System.Windows.Forms.Timer> object may be enabled and disabled multiple times within the same application session.       Calling <xref:System.Windows.Forms.Timer.Start%2A> after you have disabled a <xref:System.Windows.Forms.Timer> by calling Stop will cause the <xref:System.Windows.Forms.Timer> to restart the interrupted interval. If your <xref:System.Windows.Forms.Timer> is set for a 5000-millisecond interval, and you call Stop at around 3000 milliseconds, calling <xref:System.Windows.Forms.Timer.Start%2A> will cause the <xref:System.Windows.Forms.Timer> to wait 5000 milliseconds before raising the <xref:System.Windows.Forms.Timer.Tick> event.      > [!NOTE] >  Calling Stop on any <xref:System.Windows.Forms.Timer> within a Windows Forms application can cause messages from other <xref:System.Windows.Forms.Timer> components in the application to be processed immediately, because all <xref:System.Windows.Forms.Timer> components operate on the main application thread. If you have two <xref:System.Windows.Forms.Timer> components, one set to 700 milliseconds and one set to 500 milliseconds, and you call Stop on the first <xref:System.Windows.Forms.Timer>, your application may receive an event callback for the second component first. If this proves problematic, consider using the <xref:System.Threading.Timer> class in the <xref:System.Threading> namespace instead.","needQuote":false,"needEscape":true,"nodes":[{"content":"You can also stop the timer by setting the &lt;xref:System.Windows.Forms.Timer.Enabled%2A&gt; property to <ph id=\"ph1\">`false`</ph>.","pos":[0,108],"source":"You can also stop the timer by setting the <xref:System.Windows.Forms.Timer.Enabled%2A> property to `false`."},{"content":"A &lt;xref:System.Windows.Forms.Timer&gt; object may be enabled and disabled multiple times within the same application session.","pos":[109,231],"source":" A <xref:System.Windows.Forms.Timer> object may be enabled and disabled multiple times within the same application session."},{"content":"Calling &lt;xref:System.Windows.Forms.Timer.Start%2A&gt; after you have disabled a &lt;xref:System.Windows.Forms.Timer&gt; by calling Stop will cause the &lt;xref:System.Windows.Forms.Timer&gt; to restart the interrupted interval.","pos":[238,450],"source":"       Calling <xref:System.Windows.Forms.Timer.Start%2A> after you have disabled a <xref:System.Windows.Forms.Timer> by calling Stop will cause the <xref:System.Windows.Forms.Timer> to restart the interrupted interval."},{"content":"If your &lt;xref:System.Windows.Forms.Timer&gt; is set for a 5000-millisecond interval, and you call Stop at around 3000 milliseconds, calling &lt;xref:System.Windows.Forms.Timer.Start%2A&gt; will cause the &lt;xref:System.Windows.Forms.Timer&gt; to wait 5000 milliseconds before raising the &lt;xref:System.Windows.Forms.Timer.Tick&gt; event.","pos":[451,770],"source":" If your <xref:System.Windows.Forms.Timer> is set for a 5000-millisecond interval, and you call Stop at around 3000 milliseconds, calling <xref:System.Windows.Forms.Timer.Start%2A> will cause the <xref:System.Windows.Forms.Timer> to wait 5000 milliseconds before raising the <xref:System.Windows.Forms.Timer.Tick> event."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Calling Stop on any &lt;xref:System.Windows.Forms.Timer&gt; within a Windows Forms application can cause messages from other &lt;xref:System.Windows.Forms.Timer&gt; components in the application to be processed immediately, because all &lt;xref:System.Windows.Forms.Timer&gt; components operate on the main application thread.","pos":[776,1097],"source":"      > [!NOTE] >  Calling Stop on any <xref:System.Windows.Forms.Timer> within a Windows Forms application can cause messages from other <xref:System.Windows.Forms.Timer> components in the application to be processed immediately, because all <xref:System.Windows.Forms.Timer> components operate on the main application thread."},{"content":"If you have two &lt;xref:System.Windows.Forms.Timer&gt; components, one set to 700 milliseconds and one set to 500 milliseconds, and you call Stop on the first &lt;xref:System.Windows.Forms.Timer&gt;, your application may receive an event callback for the second component first.","pos":[1098,1365],"source":" If you have two <xref:System.Windows.Forms.Timer> components, one set to 700 milliseconds and one set to 500 milliseconds, and you call Stop on the first <xref:System.Windows.Forms.Timer>, your application may receive an event callback for the second component first."},{"content":"If this proves problematic, consider using the &lt;xref:System.Threading.Timer&gt; class in the &lt;xref:System.Threading&gt; namespace instead.","pos":[1366,1498],"source":" If this proves problematic, consider using the <xref:System.Threading.Timer> class in the <xref:System.Threading> namespace instead."}]},{"pos":[16918,16988],"content":"Gets or sets an arbitrary string representing some type of user state.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets an arbitrary string representing some type of user state.","pos":[0,70]}]},{"pos":[17101,17158],"content":"An arbitrary string representing some type of user state.","needQuote":true,"needEscape":true,"nodes":[{"content":"An arbitrary string representing some type of user state.","pos":[0,57]}]},{"pos":[17532,17610],"content":"Occurs when the specified timer interval has elapsed and the timer is enabled.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs when the specified timer interval has elapsed and the timer is enabled.","pos":[0,78]}]},{"pos":[17623,18286],"content":"Calling the <xref:System.Diagnostics.Debug.Assert%2A> method on the <xref:System.Diagnostics.Debug> class from within the Tick event may not behave as expected, as displaying the assertion dialog box may cause Windows to raise the Tick event repeatedly. We recommend that you refrain from testing assertions within this event, and use the <xref:System.Diagnostics.Debug.Write%2A>, <xref:System.Diagnostics.Debug.WriteIf%2A>, <xref:System.Diagnostics.Debug.WriteLine%2A>, or <xref:System.Diagnostics.Debug.WriteLineIf%2A> methods instead.       For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"Calling the &lt;xref:System.Diagnostics.Debug.Assert%2A&gt; method on the &lt;xref:System.Diagnostics.Debug&gt; class from within the Tick event may not behave as expected, as displaying the assertion dialog box may cause Windows to raise the Tick event repeatedly.","pos":[0,253],"source":"Calling the <xref:System.Diagnostics.Debug.Assert%2A> method on the <xref:System.Diagnostics.Debug> class from within the Tick event may not behave as expected, as displaying the assertion dialog box may cause Windows to raise the Tick event repeatedly."},{"content":"We recommend that you refrain from testing assertions within this event, and use the &lt;xref:System.Diagnostics.Debug.Write%2A&gt;, &lt;xref:System.Diagnostics.Debug.WriteIf%2A&gt;, &lt;xref:System.Diagnostics.Debug.WriteLine%2A&gt;, or &lt;xref:System.Diagnostics.Debug.WriteLineIf%2A&gt; methods instead.","pos":[254,537],"source":" We recommend that you refrain from testing assertions within this event, and use the <xref:System.Diagnostics.Debug.Write%2A>, <xref:System.Diagnostics.Debug.WriteIf%2A>, <xref:System.Diagnostics.Debug.WriteLine%2A>, or <xref:System.Diagnostics.Debug.WriteLineIf%2A> methods instead."},{"content":"For more information about handling events, see <bpt id=\"p1\">[</bpt>Handling and Raising Events<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[544,661],"source":"       For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[19026,19038],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[19395,19480],"content":"Returns a string that represents the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Forms.Timer\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns a string that represents the <xref href=\"System.Windows.Forms.Timer\"></xref>."},{"pos":[19492,19615],"content":"The ToString method returns a string that includes the value of the <xref:System.Windows.Forms.Timer.Interval%2A> property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The ToString method returns a string that includes the value of the &lt;xref:System.Windows.Forms.Timer.Interval%2A&gt; property.","pos":[0,123],"source":"The ToString method returns a string that includes the value of the <xref:System.Windows.Forms.Timer.Interval%2A> property."}]},{"pos":[19751,19836],"content":"A string that represents the current <bpt id=\"p1\">&lt;xref href=\"System.Windows.Forms.Timer\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A string that represents the current <xref href=\"System.Windows.Forms.Timer\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Forms.Timer\n  id: Timer\n  children:\n  - System.Windows.Forms.Timer.#ctor\n  - System.Windows.Forms.Timer.#ctor(System.ComponentModel.IContainer)\n  - System.Windows.Forms.Timer.Dispose(System.Boolean)\n  - System.Windows.Forms.Timer.Enabled\n  - System.Windows.Forms.Timer.Interval\n  - System.Windows.Forms.Timer.OnTick(System.EventArgs)\n  - System.Windows.Forms.Timer.Start\n  - System.Windows.Forms.Timer.Stop\n  - System.Windows.Forms.Timer.Tag\n  - System.Windows.Forms.Timer.Tick\n  - System.Windows.Forms.Timer.ToString\n  langs:\n  - csharp\n  name: Timer\n  nameWithType: Timer\n  fullName: System.Windows.Forms.Timer\n  type: Class\n  summary: Implements a timer that raises an event at user-defined intervals. This timer is optimized for use in Windows Forms applications and must be used in a window.\n  remarks: \"A Timer is used to raise an event at user-defined intervals. This Windows timer is designed for a single-threaded environment where UI threads are used to perform processing. It requires that the user code have a UI message pump available and always operate from the same thread, or marshal the call onto another thread.  \\n  \\n When you use this timer, use the <xref:System.Windows.Forms.Timer.Tick> event to perform a polling operation or to display a splash screen for a specified period of time. Whenever the <xref:System.Windows.Forms.Timer.Enabled%2A> property is set to `true` and the <xref:System.Windows.Forms.Timer.Interval%2A> property is greater than zero, the <xref:System.Windows.Forms.Timer.Tick> event is raised at intervals based on the <xref:System.Windows.Forms.Timer.Interval%2A> property setting.  \\n  \\n This class provides methods to set the interval, and to start and stop the timer.  \\n  \\n> [!NOTE]\\n>  The Windows Forms Timer component is single-threaded, and is limited to an accuracy of 55 milliseconds. If you require a multithreaded timer with greater accuracy, use the <xref:System.Timers.Timer> class in the <xref:System.Timers> namespace.\"\n  example:\n  - \"The following example implements a simple interval timer, which sets off an alarm every five seconds. When the alarm occurs, a <xref:System.Windows.Forms.MessageBox> displays a count of the number of times the alarm has started and prompts the user as to whether the timer should continue to run.  \\n  \\n [!code-cpp[Classic Timer Example 2#1](~/add/codesnippet/cpp/t-system.windows.forms.t_2_1.cpp)]\\n [!code-vb[Classic Timer Example 2#1](~/add/codesnippet/visualbasic/t-system.windows.forms.t_2_1.vb)]\\n [!code-cs[Classic Timer Example 2#1](~/add/codesnippet/csharp/t-system.windows.forms.t_2_1.cs)]\"\n  syntax:\n    content: >-\n      [System.ComponentModel.DefaultEvent(\"Tick\")]\n\n      [System.ComponentModel.DefaultProperty(\"Interval\")]\n\n      [System.ComponentModel.ToolboxItemFilter(\"System.Windows.Forms\")]\n\n      public class Timer : System.ComponentModel.Component\n  inheritance:\n  - System.Object\n  - System.MarshalByRefObject\n  - System.ComponentModel.Component\n  implements: []\n  inheritedMembers:\n  - System.ComponentModel.Component.CanRaiseEvents\n  - System.ComponentModel.Component.Container\n  - System.ComponentModel.Component.DesignMode\n  - System.ComponentModel.Component.Dispose\n  - System.ComponentModel.Component.Disposed\n  - System.ComponentModel.Component.Events\n  - System.ComponentModel.Component.GetService(System.Type)\n  - System.ComponentModel.Component.Site\n  - System.MarshalByRefObject.CreateObjRef(System.Type)\n  - System.MarshalByRefObject.GetLifetimeService\n  - System.MarshalByRefObject.InitializeLifetimeService\n  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  platform:\n  - net462\n- uid: System.Windows.Forms.Timer.#ctor\n  id: '#ctor'\n  parent: System.Windows.Forms.Timer\n  langs:\n  - csharp\n  name: Timer()\n  nameWithType: Timer.Timer()\n  fullName: System.Windows.Forms.Timer.Timer()\n  type: Constructor\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Forms.Timer\"></xref> class.\n  remarks: \"When a new timer is created, it is disabled; that is, <xref:System.Windows.Forms.Timer.Enabled%2A> is set to `false`. To enable the timer, call the <xref:System.Windows.Forms.Timer.Start%2A> method or set <xref:System.Windows.Forms.Timer.Enabled%2A> to `true`.  \\n  \\n If the timer is disabled and the timer is out of scope, the timer will be disposed when garbage collection occurs. If the timer is enabled, even if it is out of scope, it is not subject to garbage collection.\"\n  syntax:\n    content: public Timer ();\n    parameters: []\n  overload: System.Windows.Forms.Timer.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.Timer.#ctor(System.ComponentModel.IContainer)\n  id: '#ctor(System.ComponentModel.IContainer)'\n  parent: System.Windows.Forms.Timer\n  langs:\n  - csharp\n  name: Timer(IContainer)\n  nameWithType: Timer.Timer(IContainer)\n  fullName: System.Windows.Forms.Timer.Timer(IContainer)\n  type: Constructor\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Forms.Timer\"></xref> class together with the specified container.\n  remarks: \"The <xref:System.Windows.Forms.Timer> constructor enables you to associate a <xref:System.Windows.Forms.Timer> with any <xref:System.ComponentModel.Container> object. By associating the <xref:System.Windows.Forms.Timer> like this, you hand over control of the lifetime of the <xref:System.Windows.Forms.Timer> to the <xref:System.ComponentModel.Container>. This can be useful if you use a number of components in your application and want to dispose of all of them simultaneously. For example, if you associate a <xref:System.Windows.Forms.ToolTip>, an <xref:System.Windows.Forms.ImageList>, and a <xref:System.Windows.Forms.Timer> with a <xref:System.ComponentModel.Container>, calling <xref:System.ComponentModel.Container.Dispose%2A> on the <xref:System.ComponentModel.Container> will force disposal of all of these components as well.  \\n  \\n When a new timer is created, it is disabled; that is, <xref:System.Windows.Forms.Timer.Enabled%2A> is set to `false`. To enable the timer, call the <xref:System.Windows.Forms.Timer.Start%2A> method or set <xref:System.Windows.Forms.Timer.Enabled%2A> to `true`.  \\n  \\n This instance will exist until its container releases it to garbage collection.\"\n  syntax:\n    content: public Timer (System.ComponentModel.IContainer container);\n    parameters:\n    - id: container\n      type: System.ComponentModel.IContainer\n      description: An <xref href=\"System.ComponentModel.IContainer\"></xref> that represents the container for the timer.\n  overload: System.Windows.Forms.Timer.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.Timer.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Windows.Forms.Timer\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: Timer.Dispose(Boolean)\n  fullName: System.Windows.Forms.Timer.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Disposes of the resources, other than memory, used by the timer.\n  remarks: \"Call Dispose when you are finished using the timer. The Dispose method leaves the timer in an unusable state. After you call Dispose, you must release all references to the timer so the memory it was occupying can be reclaimed by garbage collection.  \\n  \\n> [!NOTE]\\n>  Always call Dispose before you release your last reference to the timer. Otherwise, the resources the timer is using will not be freed until garbage collection calls the destructor of the timer object.\"\n  syntax:\n    content: protected override void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources. <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only the unmanaged resources.\n  overload: System.Windows.Forms.Timer.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.Timer.Enabled\n  id: Enabled\n  parent: System.Windows.Forms.Timer\n  langs:\n  - csharp\n  name: Enabled\n  nameWithType: Timer.Enabled\n  fullName: System.Windows.Forms.Timer.Enabled\n  type: Property\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Gets or sets whether the timer is running.\n  remarks: \"The timer is not subject to garbage collection when the value is `true`.  \\n  \\n Calling the <xref:System.Windows.Forms.Timer.Start%2A> method is the same as setting Enabled to `true`. Likewise, calling the <xref:System.Windows.Forms.Timer.Stop%2A> method is the same as setting Enabled to `false`.\"\n  example:\n  - \"The following example implements a simple interval timer, which sets off an alarm every five seconds. When the alarm occurs, a <xref:System.Windows.Forms.MessageBox> displays a count of the number of times the alarm has started and prompts the user whether the timer should continue to run.  \\n  \\n [!code-cpp[Classic Timer Example 2#1](~/add/codesnippet/cpp/p-system.windows.forms.t_233_1.cpp)]\\n [!code-vb[Classic Timer Example 2#1](~/add/codesnippet/visualbasic/p-system.windows.forms.t_233_1.vb)]\\n [!code-cs[Classic Timer Example 2#1](~/add/codesnippet/csharp/p-system.windows.forms.t_233_1.cs)]\"\n  syntax:\n    content: public virtual bool Enabled { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the timer is currently enabled; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.Forms.Timer.Enabled*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.Timer.Interval\n  id: Interval\n  parent: System.Windows.Forms.Timer\n  langs:\n  - csharp\n  name: Interval\n  nameWithType: Timer.Interval\n  fullName: System.Windows.Forms.Timer.Interval\n  type: Property\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Gets or sets the time, in milliseconds, before the <xref href=\"System.Windows.Forms.Timer.Tick\"></xref> event is raised relative to the last occurrence of the <xref href=\"System.Windows.Forms.Timer.Tick\"></xref> event.\n  remarks: To get the number of seconds in the interval, divide this number by 1,000.\n  example:\n  - \"The following code example implements a simple interval timer, which sets off an alarm every five seconds. When the alarm occurs, a <xref:System.Windows.Forms.MessageBox> displays a count of the number of times the alarm has started and prompts the user whether the timer should continue to run.  \\n  \\n [!code-cpp[Classic Timer Example 2#1](~/add/codesnippet/cpp/p-system.windows.forms.t_13_1.cpp)]\\n [!code-vb[Classic Timer Example 2#1](~/add/codesnippet/visualbasic/p-system.windows.forms.t_13_1.vb)]\\n [!code-cs[Classic Timer Example 2#1](~/add/codesnippet/csharp/p-system.windows.forms.t_13_1.cs)]\"\n  syntax:\n    content: public int Interval { get; set; }\n    return:\n      type: System.Int32\n      description: An <xref:System.Int32> specifying the number of milliseconds before the <xref href=\"System.Windows.Forms.Timer.Tick\"></xref> event is raised relative to the last occurrence of the <xref href=\"System.Windows.Forms.Timer.Tick\"></xref> event. The value cannot be less than one.\n  overload: System.Windows.Forms.Timer.Interval*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.Timer.OnTick(System.EventArgs)\n  id: OnTick(System.EventArgs)\n  parent: System.Windows.Forms.Timer\n  langs:\n  - csharp\n  name: OnTick(EventArgs)\n  nameWithType: Timer.OnTick(EventArgs)\n  fullName: System.Windows.Forms.Timer.OnTick(EventArgs)\n  type: Method\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Raises the <xref href=\"System.Windows.Forms.Timer.Tick\"></xref> event.\n  remarks: \"This method is called for each timer tick. It calls any methods that are added through <xref:System.Windows.Forms.Timer.Tick>. If you are inheriting from <xref:System.Windows.Forms.Timer>, you can override this method.  \\n  \\n Raising an event invokes the event handler through a delegate. For more information, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: protected virtual void OnTick (EventArgs e);\n    parameters:\n    - id: e\n      type: System.EventArgs\n      description: An <xref:System.EventArgs> that contains the event data. This is always <xref:System.EventArgs>.\n  overload: System.Windows.Forms.Timer.OnTick*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.Timer.Start\n  id: Start\n  parent: System.Windows.Forms.Timer\n  langs:\n  - csharp\n  name: Start()\n  nameWithType: Timer.Start()\n  fullName: System.Windows.Forms.Timer.Start()\n  type: Method\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Starts the timer.\n  remarks: You can also start the timer by setting the <xref:System.Windows.Forms.Timer.Enabled%2A> property to `true`.\n  example:\n  - \"The following code example implements a simple interval timer, which sets off an alarm every five seconds. When the alarm occurs, a <xref:System.Windows.Forms.MessageBox> displays a count of the number of times the alarm has started and prompts the user whether the timer should continue to run.  \\n  \\n [!code-cpp[Classic Timer Example 2#1](~/add/codesnippet/cpp/m-system.windows.forms.t_9_1.cpp)]\\n [!code-vb[Classic Timer Example 2#1](~/add/codesnippet/visualbasic/m-system.windows.forms.t_9_1.vb)]\\n [!code-cs[Classic Timer Example 2#1](~/add/codesnippet/csharp/m-system.windows.forms.t_9_1.cs)]\"\n  syntax:\n    content: public void Start ();\n    parameters: []\n  overload: System.Windows.Forms.Timer.Start*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.Timer.Stop\n  id: Stop\n  parent: System.Windows.Forms.Timer\n  langs:\n  - csharp\n  name: Stop()\n  nameWithType: Timer.Stop()\n  fullName: System.Windows.Forms.Timer.Stop()\n  type: Method\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Stops the timer.\n  remarks: \"You can also stop the timer by setting the <xref:System.Windows.Forms.Timer.Enabled%2A> property to `false`. A <xref:System.Windows.Forms.Timer> object may be enabled and disabled multiple times within the same application session.  \\n  \\n Calling <xref:System.Windows.Forms.Timer.Start%2A> after you have disabled a <xref:System.Windows.Forms.Timer> by calling Stop will cause the <xref:System.Windows.Forms.Timer> to restart the interrupted interval. If your <xref:System.Windows.Forms.Timer> is set for a 5000-millisecond interval, and you call Stop at around 3000 milliseconds, calling <xref:System.Windows.Forms.Timer.Start%2A> will cause the <xref:System.Windows.Forms.Timer> to wait 5000 milliseconds before raising the <xref:System.Windows.Forms.Timer.Tick> event.  \\n  \\n> [!NOTE]\\n>  Calling Stop on any <xref:System.Windows.Forms.Timer> within a Windows Forms application can cause messages from other <xref:System.Windows.Forms.Timer> components in the application to be processed immediately, because all <xref:System.Windows.Forms.Timer> components operate on the main application thread. If you have two <xref:System.Windows.Forms.Timer> components, one set to 700 milliseconds and one set to 500 milliseconds, and you call Stop on the first <xref:System.Windows.Forms.Timer>, your application may receive an event callback for the second component first. If this proves problematic, consider using the <xref:System.Threading.Timer> class in the <xref:System.Threading> namespace instead.\"\n  example:\n  - \"The following code example implements a simple interval timer, which sets off an alarm every five seconds. When the alarm occurs, a <xref:System.Windows.Forms.MessageBox> displays a count of the number of times the alarm has started and prompts the user whether the timer should continue to run.  \\n  \\n [!code-cpp[Classic Timer Example 2#1](~/add/codesnippet/cpp/m-system.windows.forms.t_32_1.cpp)]\\n [!code-vb[Classic Timer Example 2#1](~/add/codesnippet/visualbasic/m-system.windows.forms.t_32_1.vb)]\\n [!code-cs[Classic Timer Example 2#1](~/add/codesnippet/csharp/m-system.windows.forms.t_32_1.cs)]\"\n  syntax:\n    content: public void Stop ();\n    parameters: []\n  overload: System.Windows.Forms.Timer.Stop*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.Timer.Tag\n  id: Tag\n  parent: System.Windows.Forms.Timer\n  langs:\n  - csharp\n  name: Tag\n  nameWithType: Timer.Tag\n  fullName: System.Windows.Forms.Timer.Tag\n  type: Property\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Gets or sets an arbitrary string representing some type of user state.\n  syntax:\n    content: public object Tag { get; set; }\n    return:\n      type: System.Object\n      description: An arbitrary string representing some type of user state.\n  overload: System.Windows.Forms.Timer.Tag*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.Timer.Tick\n  id: Tick\n  parent: System.Windows.Forms.Timer\n  langs:\n  - csharp\n  name: Tick\n  nameWithType: Timer.Tick\n  fullName: System.Windows.Forms.Timer.Tick\n  type: Event\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Occurs when the specified timer interval has elapsed and the timer is enabled.\n  remarks: \"Calling the <xref:System.Diagnostics.Debug.Assert%2A> method on the <xref:System.Diagnostics.Debug> class from within the Tick event may not behave as expected, as displaying the assertion dialog box may cause Windows to raise the Tick event repeatedly. We recommend that you refrain from testing assertions within this event, and use the <xref:System.Diagnostics.Debug.Write%2A>, <xref:System.Diagnostics.Debug.WriteIf%2A>, <xref:System.Diagnostics.Debug.WriteLine%2A>, or <xref:System.Diagnostics.Debug.WriteLineIf%2A> methods instead.  \\n  \\n For more information about handling events, see [Handling and Raising Events](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"The following code example implements a simple interval timer, which sets off an alarm every five seconds. When the alarm occurs, a <xref:System.Windows.Forms.MessageBox> displays a count of the number of times the alarm has started and prompts the user whether the timer should continue to run.  \\n  \\n [!code-cpp[Classic Timer Example 2#1](~/add/codesnippet/cpp/e-system.windows.forms.t_22_1.cpp)]\\n [!code-vb[Classic Timer Example 2#1](~/add/codesnippet/visualbasic/e-system.windows.forms.t_22_1.vb)]\\n [!code-cs[Classic Timer Example 2#1](~/add/codesnippet/csharp/e-system.windows.forms.t_22_1.cs)]\"\n  syntax:\n    content: public event EventHandler Tick;\n    return:\n      type: System.EventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.Timer.ToString\n  id: ToString\n  parent: System.Windows.Forms.Timer\n  langs:\n  - csharp\n  name: ToString()\n  nameWithType: Timer.ToString()\n  fullName: System.Windows.Forms.Timer.ToString()\n  type: Method\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Returns a string that represents the <xref href=\"System.Windows.Forms.Timer\"></xref>.\n  remarks: The ToString method returns a string that includes the value of the <xref:System.Windows.Forms.Timer.Interval%2A> property.\n  syntax:\n    content: public override string ToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: A string that represents the current <xref href=\"System.Windows.Forms.Timer\"></xref>.\n  overload: System.Windows.Forms.Timer.ToString*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.ComponentModel.Component\n  isExternal: false\n  name: System.ComponentModel.Component\n- uid: System.Windows.Forms.Timer.#ctor\n  parent: System.Windows.Forms.Timer\n  isExternal: false\n  name: Timer()\n  nameWithType: Timer.Timer()\n  fullName: System.Windows.Forms.Timer.Timer()\n- uid: System.Windows.Forms.Timer.#ctor(System.ComponentModel.IContainer)\n  parent: System.Windows.Forms.Timer\n  isExternal: false\n  name: Timer(IContainer)\n  nameWithType: Timer.Timer(IContainer)\n  fullName: System.Windows.Forms.Timer.Timer(IContainer)\n- uid: System.ComponentModel.IContainer\n  parent: System.ComponentModel\n  isExternal: false\n  name: IContainer\n  nameWithType: IContainer\n  fullName: System.ComponentModel.IContainer\n- uid: System.Windows.Forms.Timer.Dispose(System.Boolean)\n  parent: System.Windows.Forms.Timer\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: Timer.Dispose(Boolean)\n  fullName: System.Windows.Forms.Timer.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Windows.Forms.Timer.Enabled\n  parent: System.Windows.Forms.Timer\n  isExternal: false\n  name: Enabled\n  nameWithType: Timer.Enabled\n  fullName: System.Windows.Forms.Timer.Enabled\n- uid: System.Windows.Forms.Timer.Interval\n  parent: System.Windows.Forms.Timer\n  isExternal: false\n  name: Interval\n  nameWithType: Timer.Interval\n  fullName: System.Windows.Forms.Timer.Interval\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Windows.Forms.Timer.OnTick(System.EventArgs)\n  parent: System.Windows.Forms.Timer\n  isExternal: false\n  name: OnTick(EventArgs)\n  nameWithType: Timer.OnTick(EventArgs)\n  fullName: System.Windows.Forms.Timer.OnTick(EventArgs)\n- uid: System.EventArgs\n  parent: System\n  isExternal: true\n  name: EventArgs\n  nameWithType: EventArgs\n  fullName: System.EventArgs\n- uid: System.Windows.Forms.Timer.Start\n  parent: System.Windows.Forms.Timer\n  isExternal: false\n  name: Start()\n  nameWithType: Timer.Start()\n  fullName: System.Windows.Forms.Timer.Start()\n- uid: System.Windows.Forms.Timer.Stop\n  parent: System.Windows.Forms.Timer\n  isExternal: false\n  name: Stop()\n  nameWithType: Timer.Stop()\n  fullName: System.Windows.Forms.Timer.Stop()\n- uid: System.Windows.Forms.Timer.Tag\n  parent: System.Windows.Forms.Timer\n  isExternal: false\n  name: Tag\n  nameWithType: Timer.Tag\n  fullName: System.Windows.Forms.Timer.Tag\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Windows.Forms.Timer.Tick\n  parent: System.Windows.Forms.Timer\n  isExternal: false\n  name: Tick\n  nameWithType: Timer.Tick\n  fullName: System.Windows.Forms.Timer.Tick\n- uid: System.EventHandler\n  parent: System\n  isExternal: true\n  name: EventHandler\n  nameWithType: EventHandler\n  fullName: System.EventHandler\n- uid: System.Windows.Forms.Timer.ToString\n  parent: System.Windows.Forms.Timer\n  isExternal: false\n  name: ToString()\n  nameWithType: Timer.ToString()\n  fullName: System.Windows.Forms.Timer.ToString()\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Windows.Forms.Timer.#ctor*\n  parent: System.Windows.Forms.Timer\n  isExternal: false\n  name: Timer\n  nameWithType: Timer.Timer\n- uid: System.Windows.Forms.Timer.Dispose*\n  parent: System.Windows.Forms.Timer\n  isExternal: false\n  name: Dispose\n  nameWithType: Timer.Dispose\n- uid: System.Windows.Forms.Timer.Enabled*\n  parent: System.Windows.Forms.Timer\n  isExternal: false\n  name: Enabled\n  nameWithType: Timer.Enabled\n- uid: System.Windows.Forms.Timer.Interval*\n  parent: System.Windows.Forms.Timer\n  isExternal: false\n  name: Interval\n  nameWithType: Timer.Interval\n- uid: System.Windows.Forms.Timer.OnTick*\n  parent: System.Windows.Forms.Timer\n  isExternal: false\n  name: OnTick\n  nameWithType: Timer.OnTick\n- uid: System.Windows.Forms.Timer.Start*\n  parent: System.Windows.Forms.Timer\n  isExternal: false\n  name: Start\n  nameWithType: Timer.Start\n- uid: System.Windows.Forms.Timer.Stop*\n  parent: System.Windows.Forms.Timer\n  isExternal: false\n  name: Stop\n  nameWithType: Timer.Stop\n- uid: System.Windows.Forms.Timer.Tag*\n  parent: System.Windows.Forms.Timer\n  isExternal: false\n  name: Tag\n  nameWithType: Timer.Tag\n- uid: System.Windows.Forms.Timer.ToString*\n  parent: System.Windows.Forms.Timer\n  isExternal: false\n  name: ToString\n  nameWithType: Timer.ToString\n"}