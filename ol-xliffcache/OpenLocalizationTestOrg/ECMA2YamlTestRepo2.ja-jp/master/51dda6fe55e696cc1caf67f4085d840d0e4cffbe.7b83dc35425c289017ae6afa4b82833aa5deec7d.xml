{"nodes":[{"pos":[459,531],"content":"Provides access to individual files that have been uploaded by a client.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides access to individual files that have been uploaded by a client.","pos":[0,72]}]},{"pos":[544,2662],"content":"The <xref:System.Web.HttpFileCollection> class provides access to all the files that are uploaded from a client as a file collection. The HttpPostedFile class provides properties and methods to get information about an individual file and to read and save the file.       The <xref:System.Web.UI.HtmlControls.HtmlInputFile> control can be used to select and upload files from a client.       Files are uploaded in MIME multipart/form-data format. By default, all requests, including form fields and uploaded files, larger than 256 KB are buffered to disk, rather than held in server memory.       You can specify the maximum allowable request size by accessing the <xref:System.Web.Configuration.HttpRuntimeSection.MaxRequestLength%2A> property or by setting the `maxRequestLength` attribute of the [httpRuntime Element (ASP.NET Settings Schema)](http://msdn.microsoft.com/en-us/e9b81350-8aaf-47cc-9843-5f7d0c59f369) element within the Machine.config or Web.config file. The default is 4 MB.       The amount of data that is buffered in server memory for a request, which includes file uploads, can be specified by accessing the <xref:System.Web.Configuration.HttpRuntimeSection.RequestLengthDiskThreshold%2A> property or by setting the `requestLengthDiskThreshold` attribute of the [httpRuntime Element (ASP.NET Settings Schema)](http://msdn.microsoft.com/en-us/e9b81350-8aaf-47cc-9843-5f7d0c59f369) element within the Machine.config or Web.config file.       By adjusting the <xref:System.Web.Configuration.HttpRuntimeSection.MaxRequestLength%2A> and <xref:System.Web.Configuration.HttpRuntimeSection.RequestLengthDiskThreshold%2A> properties, you can fine tune the performance of your server. Additionally, you should consider setting the <xref:System.Web.Configuration.HttpRuntimeSection.MaxRequestLength%2A> to prevent denial of service attacks caused by users posting large files to the server.       Server resources that are allocated to buffer the uploaded file will be destroyed when the request ends. To save a durable copy of the file, use the <xref:System.Web.HttpPostedFile.SaveAs%2A> method.","needQuote":false,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Web.HttpFileCollection&gt; class provides access to all the files that are uploaded from a client as a file collection.","pos":[0,133],"source":"The <xref:System.Web.HttpFileCollection> class provides access to all the files that are uploaded from a client as a file collection."},{"content":"The HttpPostedFile class provides properties and methods to get information about an individual file and to read and save the file.","pos":[134,265]},{"content":"The &lt;xref:System.Web.UI.HtmlControls.HtmlInputFile&gt; control can be used to select and upload files from a client.","pos":[272,385],"source":"       The <xref:System.Web.UI.HtmlControls.HtmlInputFile> control can be used to select and upload files from a client."},{"content":"Files are uploaded in MIME multipart/form-data format.","pos":[392,446]},{"content":"By default, all requests, including form fields and uploaded files, larger than 256 KB are buffered to disk, rather than held in server memory.","pos":[447,590]},{"content":"You can specify the maximum allowable request size by accessing the &lt;xref:System.Web.Configuration.HttpRuntimeSection.MaxRequestLength%2A&gt; property or by setting the <ph id=\"ph1\">`maxRequestLength`</ph> attribute of the <bpt id=\"p1\">[</bpt>httpRuntime Element (ASP.NET Settings Schema)<ept id=\"p1\">](http://msdn.microsoft.com/en-us/e9b81350-8aaf-47cc-9843-5f7d0c59f369)</ept> element within the Machine.config or Web.config file.","pos":[597,970],"source":"       You can specify the maximum allowable request size by accessing the <xref:System.Web.Configuration.HttpRuntimeSection.MaxRequestLength%2A> property or by setting the `maxRequestLength` attribute of the [httpRuntime Element (ASP.NET Settings Schema)](http://msdn.microsoft.com/en-us/e9b81350-8aaf-47cc-9843-5f7d0c59f369) element within the Machine.config or Web.config file."},{"content":"The default is 4 MB.","pos":[971,991]},{"content":"The amount of data that is buffered in server memory for a request, which includes file uploads, can be specified by accessing the &lt;xref:System.Web.Configuration.HttpRuntimeSection.RequestLengthDiskThreshold%2A&gt; property or by setting the <ph id=\"ph1\">`requestLengthDiskThreshold`</ph> attribute of the <bpt id=\"p1\">[</bpt>httpRuntime Element (ASP.NET Settings Schema)<ept id=\"p1\">](http://msdn.microsoft.com/en-us/e9b81350-8aaf-47cc-9843-5f7d0c59f369)</ept> element within the Machine.config or Web.config file.","pos":[998,1454],"source":"       The amount of data that is buffered in server memory for a request, which includes file uploads, can be specified by accessing the <xref:System.Web.Configuration.HttpRuntimeSection.RequestLengthDiskThreshold%2A> property or by setting the `requestLengthDiskThreshold` attribute of the [httpRuntime Element (ASP.NET Settings Schema)](http://msdn.microsoft.com/en-us/e9b81350-8aaf-47cc-9843-5f7d0c59f369) element within the Machine.config or Web.config file."},{"content":"By adjusting the &lt;xref:System.Web.Configuration.HttpRuntimeSection.MaxRequestLength%2A&gt; and &lt;xref:System.Web.Configuration.HttpRuntimeSection.RequestLengthDiskThreshold%2A&gt; properties, you can fine tune the performance of your server.","pos":[1461,1695],"source":"       By adjusting the <xref:System.Web.Configuration.HttpRuntimeSection.MaxRequestLength%2A> and <xref:System.Web.Configuration.HttpRuntimeSection.RequestLengthDiskThreshold%2A> properties, you can fine tune the performance of your server."},{"content":"Additionally, you should consider setting the &lt;xref:System.Web.Configuration.HttpRuntimeSection.MaxRequestLength%2A&gt; to prevent denial of service attacks caused by users posting large files to the server.","pos":[1696,1900],"source":" Additionally, you should consider setting the <xref:System.Web.Configuration.HttpRuntimeSection.MaxRequestLength%2A> to prevent denial of service attacks caused by users posting large files to the server."},{"content":"Server resources that are allocated to buffer the uploaded file will be destroyed when the request ends.","pos":[1907,2011]},{"content":"To save a durable copy of the file, use the &lt;xref:System.Web.HttpPostedFile.SaveAs%2A&gt; method.","pos":[2012,2106],"source":" To save a durable copy of the file, use the <xref:System.Web.HttpPostedFile.SaveAs%2A> method."}]},{"pos":[3141,3185],"content":"Gets the size of an uploaded file, in bytes.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the size of an uploaded file, in bytes.","pos":[0,44]}]},{"pos":[3299,3325],"content":"The file length, in bytes.","needQuote":true,"needEscape":true,"nodes":[{"content":"The file length, in bytes.","pos":[0,26]}]},{"pos":[3732,3786],"content":"Gets the MIME content type of a file sent by a client.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the MIME content type of a file sent by a client.","pos":[0,54]}]},{"pos":[4337,4380],"content":"The MIME content type of the uploaded file.","needQuote":true,"needEscape":true,"nodes":[{"content":"The MIME content type of the uploaded file.","pos":[0,43]}]},{"pos":[4770,4826],"content":"Gets the fully qualified name of the file on the client.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the fully qualified name of the file on the client.","pos":[0,56]}]},{"pos":[5354,5414],"content":"The name of the client's file, including the directory path.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the client's file, including the directory path.","pos":[0,60]}]},{"pos":[5816,5934],"content":"Gets a <xref:System.IO.Stream> object that points to an uploaded file to prepare for reading the contents of the file.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a &lt;xref:System.IO.Stream&gt; object that points to an uploaded file to prepare for reading the contents of the file.","pos":[0,118],"source":"Gets a <xref:System.IO.Stream> object that points to an uploaded file to prepare for reading the contents of the file."}]},{"pos":[6508,6553],"content":"A <xref:System.IO.Stream> pointing to a file.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.IO.Stream&gt; pointing to a file.","pos":[0,45],"source":"A <xref:System.IO.Stream> pointing to a file."}]},{"pos":[6985,7024],"content":"Saves the contents of an uploaded file.","needQuote":true,"needEscape":true,"nodes":[{"content":"Saves the contents of an uploaded file.","pos":[0,39]}]},{"pos":[7036,7593],"content":"The maximum size allowed for a request, which includes uploaded files, is 4 MB, by default. Maximum request size can be specified in the Machine.config or Web.config file in the `maxRequestLength` attribute of the [httpRuntime Element (ASP.NET Settings Schema)](http://msdn.microsoft.com/en-us/e9b81350-8aaf-47cc-9843-5f7d0c59f369) element. The maximum request size for a specific page can be specified using the [location Element (ASP.NET Settings Schema)](http://msdn.microsoft.com/en-us/922ef7d5-da38-4661-b1c6-5b9e5ceda1d5) element in a Web.config file.","needQuote":true,"needEscape":true,"nodes":[{"content":"The maximum size allowed for a request, which includes uploaded files, is 4 MB, by default.","pos":[0,91]},{"content":"Maximum request size can be specified in the Machine.config or Web.config file in the <ph id=\"ph1\">`maxRequestLength`</ph> attribute of the <bpt id=\"p1\">[</bpt>httpRuntime Element (ASP.NET Settings Schema)<ept id=\"p1\">](http://msdn.microsoft.com/en-us/e9b81350-8aaf-47cc-9843-5f7d0c59f369)</ept> element.","pos":[92,340],"source":" Maximum request size can be specified in the Machine.config or Web.config file in the `maxRequestLength` attribute of the [httpRuntime Element (ASP.NET Settings Schema)](http://msdn.microsoft.com/en-us/e9b81350-8aaf-47cc-9843-5f7d0c59f369) element."},{"content":"The maximum request size for a specific page can be specified using the <bpt id=\"p1\">[</bpt>location Element (ASP.NET Settings Schema)<ept id=\"p1\">](http://msdn.microsoft.com/en-us/922ef7d5-da38-4661-b1c6-5b9e5ceda1d5)</ept> element in a Web.config file.","pos":[341,557],"source":" The maximum request size for a specific page can be specified using the [location Element (ASP.NET Settings Schema)](http://msdn.microsoft.com/en-us/922ef7d5-da38-4661-b1c6-5b9e5ceda1d5) element in a Web.config file."}]},{"pos":[8141,8168],"content":"The name of the saved file.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the saved file.","pos":[0,27]}]},{"pos":[8323,8613],"content":"The &lt;xref:System.Web.Configuration.HttpRuntimeSection.RequireRootedSaveAsPath*&gt; property of the <bpt id=\"p1\">&lt;xref href=\"System.Web.Configuration.HttpRuntimeSection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object is set to <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, but <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph1\">filename</ph><ept id=\"p3\">&lt;/code&gt;</ept> is not an absolute path.","needQuote":true,"needEscape":true,"source":"The <xref:System.Web.Configuration.HttpRuntimeSection.RequireRootedSaveAsPath*> property of the <xref href=\"System.Web.Configuration.HttpRuntimeSection\"></xref> object is set to <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, but <code>filename</code> is not an absolute path."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.HttpPostedFile\n  id: HttpPostedFile\n  children:\n  - System.Web.HttpPostedFile.ContentLength\n  - System.Web.HttpPostedFile.ContentType\n  - System.Web.HttpPostedFile.FileName\n  - System.Web.HttpPostedFile.InputStream\n  - System.Web.HttpPostedFile.SaveAs(System.String)\n  langs:\n  - csharp\n  name: HttpPostedFile\n  nameWithType: HttpPostedFile\n  fullName: System.Web.HttpPostedFile\n  type: Class\n  summary: Provides access to individual files that have been uploaded by a client.\n  remarks: \"The <xref:System.Web.HttpFileCollection> class provides access to all the files that are uploaded from a client as a file collection. The HttpPostedFile class provides properties and methods to get information about an individual file and to read and save the file.  \\n  \\n The <xref:System.Web.UI.HtmlControls.HtmlInputFile> control can be used to select and upload files from a client.  \\n  \\n Files are uploaded in MIME multipart/form-data format. By default, all requests, including form fields and uploaded files, larger than 256 KB are buffered to disk, rather than held in server memory.  \\n  \\n You can specify the maximum allowable request size by accessing the <xref:System.Web.Configuration.HttpRuntimeSection.MaxRequestLength%2A> property or by setting the `maxRequestLength` attribute of the [httpRuntime Element (ASP.NET Settings Schema)](http://msdn.microsoft.com/en-us/e9b81350-8aaf-47cc-9843-5f7d0c59f369) element within the Machine.config or Web.config file. The default is 4 MB.  \\n  \\n The amount of data that is buffered in server memory for a request, which includes file uploads, can be specified by accessing the <xref:System.Web.Configuration.HttpRuntimeSection.RequestLengthDiskThreshold%2A> property or by setting the `requestLengthDiskThreshold` attribute of the [httpRuntime Element (ASP.NET Settings Schema)](http://msdn.microsoft.com/en-us/e9b81350-8aaf-47cc-9843-5f7d0c59f369) element within the Machine.config or Web.config file.  \\n  \\n By adjusting the <xref:System.Web.Configuration.HttpRuntimeSection.MaxRequestLength%2A> and <xref:System.Web.Configuration.HttpRuntimeSection.RequestLengthDiskThreshold%2A> properties, you can fine tune the performance of your server. Additionally, you should consider setting the <xref:System.Web.Configuration.HttpRuntimeSection.MaxRequestLength%2A> to prevent denial of service attacks caused by users posting large files to the server.  \\n  \\n Server resources that are allocated to buffer the uploaded file will be destroyed when the request ends. To save a durable copy of the file, use the <xref:System.Web.HttpPostedFile.SaveAs%2A> method.\"\n  syntax:\n    content: public sealed class HttpPostedFile\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Web.HttpPostedFile.ContentLength\n  id: ContentLength\n  parent: System.Web.HttpPostedFile\n  langs:\n  - csharp\n  name: ContentLength\n  nameWithType: HttpPostedFile.ContentLength\n  fullName: System.Web.HttpPostedFile.ContentLength\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Gets the size of an uploaded file, in bytes.\n  syntax:\n    content: public int ContentLength { get; }\n    return:\n      type: System.Int32\n      description: The file length, in bytes.\n  overload: System.Web.HttpPostedFile.ContentLength*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.HttpPostedFile.ContentType\n  id: ContentType\n  parent: System.Web.HttpPostedFile\n  langs:\n  - csharp\n  name: ContentType\n  nameWithType: HttpPostedFile.ContentType\n  fullName: System.Web.HttpPostedFile.ContentType\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Gets the MIME content type of a file sent by a client.\n  remarks: ''\n  example:\n  - \"The following code example shows how to loop through all the files in the uploaded file collection and take action when the MIME type of a file is `US-ASCII`.  \\n  \\n [!code-cs[Classic HttpPostedFile.ContentType Example#1](~/add/codesnippet/csharp/p-system.web.httppostedf_1_1.cs)]\\n [!code-vb[Classic HttpPostedFile.ContentType Example#1](~/add/codesnippet/visualbasic/p-system.web.httppostedf_1_1.vb)]\"\n  syntax:\n    content: public string ContentType { get; }\n    return:\n      type: System.String\n      description: The MIME content type of the uploaded file.\n  overload: System.Web.HttpPostedFile.ContentType*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.HttpPostedFile.FileName\n  id: FileName\n  parent: System.Web.HttpPostedFile\n  langs:\n  - csharp\n  name: FileName\n  nameWithType: HttpPostedFile.FileName\n  fullName: System.Web.HttpPostedFile.FileName\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Gets the fully qualified name of the file on the client.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates how to assign the name of an uploaded file (the first file in the file collection) to a string variable.  \\n  \\n [!code-cs[Classic HttpPostedFile.FileName Example#1](~/add/codesnippet/csharp/p-system.web.httppostedf_2_1.cs)]\\n [!code-vb[Classic HttpPostedFile.FileName Example#1](~/add/codesnippet/visualbasic/p-system.web.httppostedf_2_1.vb)]\"\n  syntax:\n    content: public string FileName { get; }\n    return:\n      type: System.String\n      description: The name of the client's file, including the directory path.\n  overload: System.Web.HttpPostedFile.FileName*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.HttpPostedFile.InputStream\n  id: InputStream\n  parent: System.Web.HttpPostedFile\n  langs:\n  - csharp\n  name: InputStream\n  nameWithType: HttpPostedFile.InputStream\n  fullName: System.Web.HttpPostedFile.InputStream\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Gets a <xref:System.IO.Stream> object that points to an uploaded file to prepare for reading the contents of the file.\n  remarks: ''\n  example:\n  - \"The following code example shows how to read the contents of the first file in the client's file collection into a byte array, and then copy the byte array to a string.  \\n  \\n [!code-vb[Classic HttpPostedFile.InputStream Example#1](~/add/codesnippet/visualbasic/p-system.web.httppostedf_0_1.vb)]\\n [!code-cs[Classic HttpPostedFile.InputStream Example#1](~/add/codesnippet/csharp/p-system.web.httppostedf_0_1.cs)]\"\n  syntax:\n    content: public System.IO.Stream InputStream { get; }\n    return:\n      type: System.IO.Stream\n      description: A <xref:System.IO.Stream> pointing to a file.\n  overload: System.Web.HttpPostedFile.InputStream*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.HttpPostedFile.SaveAs(System.String)\n  id: SaveAs(System.String)\n  parent: System.Web.HttpPostedFile\n  langs:\n  - csharp\n  name: SaveAs(String)\n  nameWithType: HttpPostedFile.SaveAs(String)\n  fullName: System.Web.HttpPostedFile.SaveAs(String)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Saves the contents of an uploaded file.\n  remarks: The maximum size allowed for a request, which includes uploaded files, is 4 MB, by default. Maximum request size can be specified in the Machine.config or Web.config file in the `maxRequestLength` attribute of the [httpRuntime Element (ASP.NET Settings Schema)](http://msdn.microsoft.com/en-us/e9b81350-8aaf-47cc-9843-5f7d0c59f369) element. The maximum request size for a specific page can be specified using the [location Element (ASP.NET Settings Schema)](http://msdn.microsoft.com/en-us/922ef7d5-da38-4661-b1c6-5b9e5ceda1d5) element in a Web.config file.\n  example:\n  - \"The following code example demonstrates how to save all the files that are uploaded by the client to the C:\\\\TempFiles folder on the Web server's local disk.  \\n  \\n [!code-vb[Classic HttpPostedFile.SaveAs Example#1](~/add/codesnippet/visualbasic/m-system.web.httppostedf_1.vb)]\\n [!code-cs[Classic HttpPostedFile.SaveAs Example#1](~/add/codesnippet/csharp/m-system.web.httppostedf_1.cs)]\"\n  syntax:\n    content: public void SaveAs (string filename);\n    parameters:\n    - id: filename\n      type: System.String\n      description: The name of the saved file.\n  overload: System.Web.HttpPostedFile.SaveAs*\n  exceptions:\n  - type: System.Web.HttpException\n    commentId: T:System.Web.HttpException\n    description: The <xref:System.Web.Configuration.HttpRuntimeSection.RequireRootedSaveAsPath*> property of the <xref href=\"System.Web.Configuration.HttpRuntimeSection\"></xref> object is set to <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, but <code>filename</code> is not an absolute path.\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Web.HttpException\n  parent: System.Web\n  isExternal: false\n  name: HttpException\n  nameWithType: HttpException\n  fullName: System.Web.HttpException\n- uid: System.Web.HttpPostedFile.ContentLength\n  parent: System.Web.HttpPostedFile\n  isExternal: false\n  name: ContentLength\n  nameWithType: HttpPostedFile.ContentLength\n  fullName: System.Web.HttpPostedFile.ContentLength\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Web.HttpPostedFile.ContentType\n  parent: System.Web.HttpPostedFile\n  isExternal: false\n  name: ContentType\n  nameWithType: HttpPostedFile.ContentType\n  fullName: System.Web.HttpPostedFile.ContentType\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Web.HttpPostedFile.FileName\n  parent: System.Web.HttpPostedFile\n  isExternal: false\n  name: FileName\n  nameWithType: HttpPostedFile.FileName\n  fullName: System.Web.HttpPostedFile.FileName\n- uid: System.Web.HttpPostedFile.InputStream\n  parent: System.Web.HttpPostedFile\n  isExternal: false\n  name: InputStream\n  nameWithType: HttpPostedFile.InputStream\n  fullName: System.Web.HttpPostedFile.InputStream\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: true\n  name: Stream\n  nameWithType: Stream\n  fullName: System.IO.Stream\n- uid: System.Web.HttpPostedFile.SaveAs(System.String)\n  parent: System.Web.HttpPostedFile\n  isExternal: false\n  name: SaveAs(String)\n  nameWithType: HttpPostedFile.SaveAs(String)\n  fullName: System.Web.HttpPostedFile.SaveAs(String)\n- uid: System.Web.HttpPostedFile.ContentLength*\n  parent: System.Web.HttpPostedFile\n  isExternal: false\n  name: ContentLength\n  nameWithType: HttpPostedFile.ContentLength\n- uid: System.Web.HttpPostedFile.ContentType*\n  parent: System.Web.HttpPostedFile\n  isExternal: false\n  name: ContentType\n  nameWithType: HttpPostedFile.ContentType\n- uid: System.Web.HttpPostedFile.FileName*\n  parent: System.Web.HttpPostedFile\n  isExternal: false\n  name: FileName\n  nameWithType: HttpPostedFile.FileName\n- uid: System.Web.HttpPostedFile.InputStream*\n  parent: System.Web.HttpPostedFile\n  isExternal: false\n  name: InputStream\n  nameWithType: HttpPostedFile.InputStream\n- uid: System.Web.HttpPostedFile.SaveAs*\n  parent: System.Web.HttpPostedFile\n  isExternal: false\n  name: SaveAs\n  nameWithType: HttpPostedFile.SaveAs\n"}