{"nodes":[{"pos":[874,1036],"content":"Allows security actions for a <xref href=\"System.Security.PermissionSet\"></xref> to be applied to code using declarative security. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Allows security actions for a <bpt id=\"p1\">&lt;xref href=\"System.Security.PermissionSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to be applied to code using declarative security.","pos":[0,130],"source":"Allows security actions for a <xref href=\"System.Security.PermissionSet\"></xref> to be applied to code using declarative security."},{"content":"This class cannot be inherited.","pos":[131,162]}]},{"pos":[1049,2151],"content":"The PermissionSetAttribute properties <xref:System.Security.Permissions.PermissionSetAttribute.Name%2A>, <xref:System.Security.Permissions.PermissionSetAttribute.File%2A>, and <xref:System.Security.Permissions.PermissionSetAttribute.XML%2A> are mutually exclusive, meaning that a permission set can have as its source only one of the following: a named permission set, a file containing an XML representation of a permission set, or a string containing an XML representation of a permission set.       The scope of the declaration that is allowed depends on the <xref:System.Security.Permissions.SecurityAction> that is used. A <xref:System.Security.Permissions.SecurityAction> performed on a <xref:System.Security.PermissionSet> is the equivalent of performing that action on each of the permissions within the set.       The security information declared by a security attribute is stored in the metadata of the attribute target and is accessed by the system at run time. Security attributes are used only for declarative security. For imperative security, use the corresponding permission class.","needQuote":false,"needEscape":true,"nodes":[{"content":"The PermissionSetAttribute properties <xref:System.Security.Permissions.PermissionSetAttribute.Name%2A>, <xref:System.Security.Permissions.PermissionSetAttribute.File%2A>, and <xref:System.Security.Permissions.PermissionSetAttribute.XML%2A> are mutually exclusive, meaning that a permission set can have as its source only one of the following: a named permission set, a file containing an XML representation of a permission set, or a string containing an XML representation of a permission set.       The scope of the declaration that is allowed depends on the <xref:System.Security.Permissions.SecurityAction> that is used. A <xref:System.Security.Permissions.SecurityAction> performed on a <xref:System.Security.PermissionSet> is the equivalent of performing that action on each of the permissions within the set.       The security information declared by a security attribute is stored in the metadata of the attribute target and is accessed by the system at run time. Security attributes are used only for declarative security. For imperative security, use the corresponding permission class.","pos":[0,1098],"nodes":[{"content":"The PermissionSetAttribute properties &lt;xref:System.Security.Permissions.PermissionSetAttribute.Name%2A&gt;, &lt;xref:System.Security.Permissions.PermissionSetAttribute.File%2A&gt;, and &lt;xref:System.Security.Permissions.PermissionSetAttribute.XML%2A&gt; are mutually exclusive, meaning that a permission set can have as its source only one of the following: a named permission set, a file containing an XML representation of a permission set, or a string containing an XML representation of a permission set.","pos":[0,495],"source":"The PermissionSetAttribute properties <xref:System.Security.Permissions.PermissionSetAttribute.Name%2A>, <xref:System.Security.Permissions.PermissionSetAttribute.File%2A>, and <xref:System.Security.Permissions.PermissionSetAttribute.XML%2A> are mutually exclusive, meaning that a permission set can have as its source only one of the following: a named permission set, a file containing an XML representation of a permission set, or a string containing an XML representation of a permission set."},{"content":"The scope of the declaration that is allowed depends on the &lt;xref:System.Security.Permissions.SecurityAction&gt; that is used.","pos":[502,625],"source":"       The scope of the declaration that is allowed depends on the <xref:System.Security.Permissions.SecurityAction> that is used."},{"content":"A &lt;xref:System.Security.Permissions.SecurityAction&gt; performed on a &lt;xref:System.Security.PermissionSet&gt; is the equivalent of performing that action on each of the permissions within the set.","pos":[626,816],"source":" A <xref:System.Security.Permissions.SecurityAction> performed on a <xref:System.Security.PermissionSet> is the equivalent of performing that action on each of the permissions within the set."},{"content":"The security information declared by a security attribute is stored in the metadata of the attribute target and is accessed by the system at run time.","pos":[823,973]},{"content":"Security attributes are used only for declarative security.","pos":[974,1033]},{"content":"For imperative security, use the corresponding permission class.","pos":[1034,1098]}]}]},{"pos":[3831,3978],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.PermissionSetAttribute\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified security action.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Permissions.PermissionSetAttribute\"></xref> class with the specified security action."},{"pos":[4192,4255],"content":"One of the enumeration values that specifies a security action.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the enumeration values that specifies a security action.","pos":[0,63]}]},{"pos":[4806,4830],"content":"This method is not used.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method is not used.","pos":[0,24]}]},{"pos":[4842,4968],"content":"This method is not used; it is included only to support inheritance from <xref:System.Security.Permissions.SecurityAttribute>.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method is not used; it is included only to support inheritance from &lt;xref:System.Security.Permissions.SecurityAttribute&gt;.","pos":[0,126],"source":"This method is not used; it is included only to support inheritance from <xref:System.Security.Permissions.SecurityAttribute>."}]},{"pos":[5147,5262],"content":"A null reference (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_nothing\" name=\"nothing\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> in Visual Basic) in all cases.","needQuote":true,"needEscape":true,"source":"A null reference (<xref uid=\"langword_csharp_nothing\" name=\"nothing\" href=\"\"></xref> in Visual Basic) in all cases."},{"pos":[5839,5926],"content":"Creates and returns a new permission set based on this permission set attribute object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates and returns a new permission set based on this permission set attribute object.","pos":[0,87]}]},{"pos":[5939,6282],"content":"This method should be called only by the security system, never by application code.       Attributes are used at compile time to convert security declarations to a serialized form in metadata. Declarative security data in metadata is created from the permission object that this method returns, which corresponds to this attribute instance.","needQuote":false,"needEscape":true,"nodes":[{"content":"This method should be called only by the security system, never by application code.       Attributes are used at compile time to convert security declarations to a serialized form in metadata. Declarative security data in metadata is created from the permission object that this method returns, which corresponds to this attribute instance.","pos":[0,341],"nodes":[{"content":"This method should be called only by the security system, never by application code.","pos":[0,84]},{"content":"Attributes are used at compile time to convert security declarations to a serialized form in metadata.","pos":[91,193]},{"content":"Declarative security data in metadata is created from the permission object that this method returns, which corresponds to this attribute instance.","pos":[194,341]}]}]},{"pos":[6460,6481],"content":"A new permission set.","needQuote":true,"needEscape":true,"nodes":[{"content":"A new permission set.","pos":[0,21]}]},{"pos":[6982,7078],"content":"Gets or sets a file containing the XML representation of a custom permission set to be declared.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a file containing the XML representation of a custom permission set to be declared.","pos":[0,96]}]},{"pos":[7090,7227],"content":"If the file specified is Unicode, set the &lt;xref:System.Security.Permissions.PermissionSetAttribute.UnicodeEncoded%2A&gt; property to <ph id=\"ph1\">`true`</ph>.","needQuote":true,"needEscape":true,"source":"If the file specified is Unicode, set the <xref:System.Security.Permissions.PermissionSetAttribute.UnicodeEncoded%2A> property to `true`."},{"pos":[7804,7890],"content":"The physical path to the file containing the XML representation of the permission set.","needQuote":true,"needEscape":true,"nodes":[{"content":"The physical path to the file containing the XML representation of the permission set.","pos":[0,86]}]},{"pos":[8371,8449],"content":"Gets or sets the hexadecimal representation of the XML encoded permission set.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the hexadecimal representation of the XML encoded permission set.","pos":[0,78]}]},{"pos":[8562,8627],"content":"The hexadecimal representation of the XML encoded permission set.","needQuote":true,"needEscape":true,"nodes":[{"content":"The hexadecimal representation of the XML encoded permission set.","pos":[0,65]}]},{"pos":[9112,9156],"content":"Gets or sets the name of the permission set.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the name of the permission set.","pos":[0,44]}]},{"pos":[9168,9595],"content":"Because named permission sets can vary from computer to computer, the use of named permission sets for declarative security is restricted to the immutable named permission sets included as part of the default policy. This ensures that the permissions contained in the permission set referenced will be the same wherever the code is run. A compiler error will be thrown if a mutable or unrecognized named permission set is used.","needQuote":true,"needEscape":true,"nodes":[{"content":"Because named permission sets can vary from computer to computer, the use of named permission sets for declarative security is restricted to the immutable named permission sets included as part of the default policy. This ensures that the permissions contained in the permission set referenced will be the same wherever the code is run. A compiler error will be thrown if a mutable or unrecognized named permission set is used.","pos":[0,427],"nodes":[{"content":"Because named permission sets can vary from computer to computer, the use of named permission sets for declarative security is restricted to the immutable named permission sets included as part of the default policy.","pos":[0,216]},{"content":"This ensures that the permissions contained in the permission set referenced will be the same wherever the code is run.","pos":[217,336]},{"content":"A compiler error will be thrown if a mutable or unrecognized named permission set is used.","pos":[337,427]}]}]},{"pos":[10172,10349],"content":"The name of an immutable <bpt id=\"p1\">&lt;xref href=\"System.Security.NamedPermissionSet\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> (one of several permission sets that are contained in the default policy and cannot be altered).","needQuote":true,"needEscape":true,"source":"The name of an immutable <xref href=\"System.Security.NamedPermissionSet\"></xref> (one of several permission sets that are contained in the default policy and cannot be altered)."},{"pos":[10885,11039],"content":"Gets or sets a value indicating whether the file specified by <xref:System.Security.Permissions.PermissionSetAttribute.File*> is Unicode or ASCII encoded.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating whether the file specified by &lt;xref:System.Security.Permissions.PermissionSetAttribute.File*&gt; is Unicode or ASCII encoded.","pos":[0,154],"source":"Gets or sets a value indicating whether the file specified by <xref:System.Security.Permissions.PermissionSetAttribute.File*> is Unicode or ASCII encoded."}]},{"pos":[11052,11227],"content":"If this property is not set, the file is assumed to be ASCII.       If <xref:System.Security.Permissions.PermissionSetAttribute.File%2A> is `null` this property is not used.","needQuote":false,"needEscape":true,"nodes":[{"content":"If this property is not set, the file is assumed to be ASCII.","pos":[0,61]},{"content":"If &lt;xref:System.Security.Permissions.PermissionSetAttribute.File%2A&gt; is <ph id=\"ph1\">`null`</ph> this property is not used.","pos":[68,173],"source":"       If <xref:System.Security.Permissions.PermissionSetAttribute.File%2A> is `null` this property is not used."}]},{"pos":[11351,11518],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the file is Unicode encoded; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the file is Unicode encoded; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[12009,12065],"content":"Gets or sets the XML representation of a permission set.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the XML representation of a permission set.","pos":[0,56]}]},{"pos":[12178,12221],"content":"The XML representation of a permission set.","needQuote":true,"needEscape":true,"nodes":[{"content":"The XML representation of a permission set.","pos":[0,43]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Permissions.PermissionSetAttribute\n  id: PermissionSetAttribute\n  children:\n  - System.Security.Permissions.PermissionSetAttribute.#ctor(System.Security.Permissions.SecurityAction)\n  - System.Security.Permissions.PermissionSetAttribute.CreatePermission\n  - System.Security.Permissions.PermissionSetAttribute.CreatePermissionSet\n  - System.Security.Permissions.PermissionSetAttribute.File\n  - System.Security.Permissions.PermissionSetAttribute.Hex\n  - System.Security.Permissions.PermissionSetAttribute.Name\n  - System.Security.Permissions.PermissionSetAttribute.UnicodeEncoded\n  - System.Security.Permissions.PermissionSetAttribute.XML\n  langs:\n  - csharp\n  name: PermissionSetAttribute\n  nameWithType: PermissionSetAttribute\n  fullName: System.Security.Permissions.PermissionSetAttribute\n  type: Class\n  summary: Allows security actions for a <xref href=\"System.Security.PermissionSet\"></xref> to be applied to code using declarative security. This class cannot be inherited.\n  remarks: \"The PermissionSetAttribute properties <xref:System.Security.Permissions.PermissionSetAttribute.Name%2A>, <xref:System.Security.Permissions.PermissionSetAttribute.File%2A>, and <xref:System.Security.Permissions.PermissionSetAttribute.XML%2A> are mutually exclusive, meaning that a permission set can have as its source only one of the following: a named permission set, a file containing an XML representation of a permission set, or a string containing an XML representation of a permission set.  \\n  \\n The scope of the declaration that is allowed depends on the <xref:System.Security.Permissions.SecurityAction> that is used. A <xref:System.Security.Permissions.SecurityAction> performed on a <xref:System.Security.PermissionSet> is the equivalent of performing that action on each of the permissions within the set.  \\n  \\n The security information declared by a security attribute is stored in the metadata of the attribute target and is accessed by the system at run time. Security attributes are used only for declarative security. For imperative security, use the corresponding permission class.\"\n  example:\n  - \"The following example shows the use of the PermissionSetAttribute Class.  \\n  \\n [!code-vb[System.Security.Permissions.PermissionSetAttribute#1](~/add/codesnippet/visualbasic/t-system.security.permis_5_1.vb)]\\n [!code-cs[System.Security.Permissions.PermissionSetAttribute#1](~/add/codesnippet/csharp/t-system.security.permis_5_1.cs)]\"\n  syntax:\n    content: >-\n      [System.AttributeUsage(System.AttributeTargets.Assembly | System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Constructor | System.AttributeTargets.Method, AllowMultiple=true, Inherited=false)]\n\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class PermissionSetAttribute : System.Security.Permissions.CodeAccessSecurityAttribute\n  inheritance:\n  - System.Attribute\n  - System.Security.Permissions.SecurityAttribute\n  - System.Security.Permissions.CodeAccessSecurityAttribute\n  implements: []\n  inheritedMembers:\n  - System.Security.Permissions.SecurityAttribute.Action\n  - System.Security.Permissions.SecurityAttribute.Unrestricted\n  platform:\n  - net462\n- uid: System.Security.Permissions.PermissionSetAttribute.#ctor(System.Security.Permissions.SecurityAction)\n  id: '#ctor(System.Security.Permissions.SecurityAction)'\n  parent: System.Security.Permissions.PermissionSetAttribute\n  langs:\n  - csharp\n  name: PermissionSetAttribute(SecurityAction)\n  nameWithType: PermissionSetAttribute.PermissionSetAttribute(SecurityAction)\n  fullName: System.Security.Permissions.PermissionSetAttribute.PermissionSetAttribute(SecurityAction)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Initializes a new instance of the <xref href=\"System.Security.Permissions.PermissionSetAttribute\"></xref> class with the specified security action.\n  syntax:\n    content: public PermissionSetAttribute (System.Security.Permissions.SecurityAction action);\n    parameters:\n    - id: action\n      type: System.Security.Permissions.SecurityAction\n      description: One of the enumeration values that specifies a security action.\n  overload: System.Security.Permissions.PermissionSetAttribute.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Permissions.PermissionSetAttribute.CreatePermission\n  id: CreatePermission\n  parent: System.Security.Permissions.PermissionSetAttribute\n  langs:\n  - csharp\n  name: CreatePermission()\n  nameWithType: PermissionSetAttribute.CreatePermission()\n  fullName: System.Security.Permissions.PermissionSetAttribute.CreatePermission()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: This method is not used.\n  remarks: This method is not used; it is included only to support inheritance from <xref:System.Security.Permissions.SecurityAttribute>.\n  syntax:\n    content: public override System.Security.IPermission CreatePermission ();\n    parameters: []\n    return:\n      type: System.Security.IPermission\n      description: A null reference (<xref uid=\"langword_csharp_nothing\" name=\"nothing\" href=\"\"></xref> in Visual Basic) in all cases.\n  overload: System.Security.Permissions.PermissionSetAttribute.CreatePermission*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Permissions.PermissionSetAttribute.CreatePermissionSet\n  id: CreatePermissionSet\n  parent: System.Security.Permissions.PermissionSetAttribute\n  langs:\n  - csharp\n  name: CreatePermissionSet()\n  nameWithType: PermissionSetAttribute.CreatePermissionSet()\n  fullName: System.Security.Permissions.PermissionSetAttribute.CreatePermissionSet()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Creates and returns a new permission set based on this permission set attribute object.\n  remarks: \"This method should be called only by the security system, never by application code.  \\n  \\n Attributes are used at compile time to convert security declarations to a serialized form in metadata. Declarative security data in metadata is created from the permission object that this method returns, which corresponds to this attribute instance.\"\n  syntax:\n    content: public System.Security.PermissionSet CreatePermissionSet ();\n    parameters: []\n    return:\n      type: System.Security.PermissionSet\n      description: A new permission set.\n  overload: System.Security.Permissions.PermissionSetAttribute.CreatePermissionSet*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Permissions.PermissionSetAttribute.File\n  id: File\n  parent: System.Security.Permissions.PermissionSetAttribute\n  langs:\n  - csharp\n  name: File\n  nameWithType: PermissionSetAttribute.File\n  fullName: System.Security.Permissions.PermissionSetAttribute.File\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Gets or sets a file containing the XML representation of a custom permission set to be declared.\n  remarks: If the file specified is Unicode, set the <xref:System.Security.Permissions.PermissionSetAttribute.UnicodeEncoded%2A> property to `true`.\n  example:\n  - \"The following code shows the use of the File property. This code example is part of a larger example provided for the <xref:System.Security.Permissions.PermissionSetAttribute> class.  \\n  \\n [!code-vb[System.Security.Permissions.PermissionSetAttribute#2](~/add/codesnippet/visualbasic/p-system.security.permis_27_1.vb)]\\n [!code-cs[System.Security.Permissions.PermissionSetAttribute#2](~/add/codesnippet/csharp/p-system.security.permis_27_1.cs)]\"\n  syntax:\n    content: public string File { get; set; }\n    return:\n      type: System.String\n      description: The physical path to the file containing the XML representation of the permission set.\n  overload: System.Security.Permissions.PermissionSetAttribute.File*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Permissions.PermissionSetAttribute.Hex\n  id: Hex\n  parent: System.Security.Permissions.PermissionSetAttribute\n  langs:\n  - csharp\n  name: Hex\n  nameWithType: PermissionSetAttribute.Hex\n  fullName: System.Security.Permissions.PermissionSetAttribute.Hex\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Gets or sets the hexadecimal representation of the XML encoded permission set.\n  syntax:\n    content: public string Hex { get; set; }\n    return:\n      type: System.String\n      description: The hexadecimal representation of the XML encoded permission set.\n  overload: System.Security.Permissions.PermissionSetAttribute.Hex*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Permissions.PermissionSetAttribute.Name\n  id: Name\n  parent: System.Security.Permissions.PermissionSetAttribute\n  langs:\n  - csharp\n  name: Name\n  nameWithType: PermissionSetAttribute.Name\n  fullName: System.Security.Permissions.PermissionSetAttribute.Name\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Gets or sets the name of the permission set.\n  remarks: Because named permission sets can vary from computer to computer, the use of named permission sets for declarative security is restricted to the immutable named permission sets included as part of the default policy. This ensures that the permissions contained in the permission set referenced will be the same wherever the code is run. A compiler error will be thrown if a mutable or unrecognized named permission set is used.\n  example:\n  - \"The following code shows the use of the Name property. This code example is part of a larger example provided for the <xref:System.Security.Permissions.PermissionSetAttribute> class.  \\n  \\n [!code-vb[System.Security.Permissions.PermissionSetAttribute#3](~/add/codesnippet/visualbasic/p-system.security.permis_28_1.vb)]\\n [!code-cs[System.Security.Permissions.PermissionSetAttribute#3](~/add/codesnippet/csharp/p-system.security.permis_28_1.cs)]\"\n  syntax:\n    content: public string Name { get; set; }\n    return:\n      type: System.String\n      description: The name of an immutable <xref href=\"System.Security.NamedPermissionSet\"></xref> (one of several permission sets that are contained in the default policy and cannot be altered).\n  overload: System.Security.Permissions.PermissionSetAttribute.Name*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Permissions.PermissionSetAttribute.UnicodeEncoded\n  id: UnicodeEncoded\n  parent: System.Security.Permissions.PermissionSetAttribute\n  langs:\n  - csharp\n  name: UnicodeEncoded\n  nameWithType: PermissionSetAttribute.UnicodeEncoded\n  fullName: System.Security.Permissions.PermissionSetAttribute.UnicodeEncoded\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Gets or sets a value indicating whether the file specified by <xref:System.Security.Permissions.PermissionSetAttribute.File*> is Unicode or ASCII encoded.\n  remarks: \"If this property is not set, the file is assumed to be ASCII.  \\n  \\n If <xref:System.Security.Permissions.PermissionSetAttribute.File%2A> is `null` this property is not used.\"\n  syntax:\n    content: public bool UnicodeEncoded { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the file is Unicode encoded; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Permissions.PermissionSetAttribute.UnicodeEncoded*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Permissions.PermissionSetAttribute.XML\n  id: XML\n  parent: System.Security.Permissions.PermissionSetAttribute\n  langs:\n  - csharp\n  name: XML\n  nameWithType: PermissionSetAttribute.XML\n  fullName: System.Security.Permissions.PermissionSetAttribute.XML\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Gets or sets the XML representation of a permission set.\n  syntax:\n    content: public string XML { get; set; }\n    return:\n      type: System.String\n      description: The XML representation of a permission set.\n  overload: System.Security.Permissions.PermissionSetAttribute.XML*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Security.Permissions.CodeAccessSecurityAttribute\n  isExternal: false\n  name: System.Security.Permissions.CodeAccessSecurityAttribute\n- uid: System.Security.Permissions.PermissionSetAttribute.#ctor(System.Security.Permissions.SecurityAction)\n  parent: System.Security.Permissions.PermissionSetAttribute\n  isExternal: false\n  name: PermissionSetAttribute(SecurityAction)\n  nameWithType: PermissionSetAttribute.PermissionSetAttribute(SecurityAction)\n  fullName: System.Security.Permissions.PermissionSetAttribute.PermissionSetAttribute(SecurityAction)\n- uid: System.Security.Permissions.SecurityAction\n  parent: System.Security.Permissions\n  isExternal: false\n  name: SecurityAction\n  nameWithType: SecurityAction\n  fullName: System.Security.Permissions.SecurityAction\n- uid: System.Security.Permissions.PermissionSetAttribute.CreatePermission\n  parent: System.Security.Permissions.PermissionSetAttribute\n  isExternal: false\n  name: CreatePermission()\n  nameWithType: PermissionSetAttribute.CreatePermission()\n  fullName: System.Security.Permissions.PermissionSetAttribute.CreatePermission()\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n- uid: System.Security.Permissions.PermissionSetAttribute.CreatePermissionSet\n  parent: System.Security.Permissions.PermissionSetAttribute\n  isExternal: false\n  name: CreatePermissionSet()\n  nameWithType: PermissionSetAttribute.CreatePermissionSet()\n  fullName: System.Security.Permissions.PermissionSetAttribute.CreatePermissionSet()\n- uid: System.Security.PermissionSet\n  parent: System.Security\n  isExternal: false\n  name: PermissionSet\n  nameWithType: PermissionSet\n  fullName: System.Security.PermissionSet\n- uid: System.Security.Permissions.PermissionSetAttribute.File\n  parent: System.Security.Permissions.PermissionSetAttribute\n  isExternal: false\n  name: File\n  nameWithType: PermissionSetAttribute.File\n  fullName: System.Security.Permissions.PermissionSetAttribute.File\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Permissions.PermissionSetAttribute.Hex\n  parent: System.Security.Permissions.PermissionSetAttribute\n  isExternal: false\n  name: Hex\n  nameWithType: PermissionSetAttribute.Hex\n  fullName: System.Security.Permissions.PermissionSetAttribute.Hex\n- uid: System.Security.Permissions.PermissionSetAttribute.Name\n  parent: System.Security.Permissions.PermissionSetAttribute\n  isExternal: false\n  name: Name\n  nameWithType: PermissionSetAttribute.Name\n  fullName: System.Security.Permissions.PermissionSetAttribute.Name\n- uid: System.Security.Permissions.PermissionSetAttribute.UnicodeEncoded\n  parent: System.Security.Permissions.PermissionSetAttribute\n  isExternal: false\n  name: UnicodeEncoded\n  nameWithType: PermissionSetAttribute.UnicodeEncoded\n  fullName: System.Security.Permissions.PermissionSetAttribute.UnicodeEncoded\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Permissions.PermissionSetAttribute.XML\n  parent: System.Security.Permissions.PermissionSetAttribute\n  isExternal: false\n  name: XML\n  nameWithType: PermissionSetAttribute.XML\n  fullName: System.Security.Permissions.PermissionSetAttribute.XML\n- uid: System.Security.Permissions.PermissionSetAttribute.#ctor*\n  parent: System.Security.Permissions.PermissionSetAttribute\n  isExternal: false\n  name: PermissionSetAttribute\n  nameWithType: PermissionSetAttribute.PermissionSetAttribute\n- uid: System.Security.Permissions.PermissionSetAttribute.CreatePermission*\n  parent: System.Security.Permissions.PermissionSetAttribute\n  isExternal: false\n  name: CreatePermission\n  nameWithType: PermissionSetAttribute.CreatePermission\n- uid: System.Security.Permissions.PermissionSetAttribute.CreatePermissionSet*\n  parent: System.Security.Permissions.PermissionSetAttribute\n  isExternal: false\n  name: CreatePermissionSet\n  nameWithType: PermissionSetAttribute.CreatePermissionSet\n- uid: System.Security.Permissions.PermissionSetAttribute.File*\n  parent: System.Security.Permissions.PermissionSetAttribute\n  isExternal: false\n  name: File\n  nameWithType: PermissionSetAttribute.File\n- uid: System.Security.Permissions.PermissionSetAttribute.Hex*\n  parent: System.Security.Permissions.PermissionSetAttribute\n  isExternal: false\n  name: Hex\n  nameWithType: PermissionSetAttribute.Hex\n- uid: System.Security.Permissions.PermissionSetAttribute.Name*\n  parent: System.Security.Permissions.PermissionSetAttribute\n  isExternal: false\n  name: Name\n  nameWithType: PermissionSetAttribute.Name\n- uid: System.Security.Permissions.PermissionSetAttribute.UnicodeEncoded*\n  parent: System.Security.Permissions.PermissionSetAttribute\n  isExternal: false\n  name: UnicodeEncoded\n  nameWithType: PermissionSetAttribute.UnicodeEncoded\n- uid: System.Security.Permissions.PermissionSetAttribute.XML*\n  parent: System.Security.Permissions.PermissionSetAttribute\n  isExternal: false\n  name: XML\n  nameWithType: PermissionSetAttribute.XML\n"}