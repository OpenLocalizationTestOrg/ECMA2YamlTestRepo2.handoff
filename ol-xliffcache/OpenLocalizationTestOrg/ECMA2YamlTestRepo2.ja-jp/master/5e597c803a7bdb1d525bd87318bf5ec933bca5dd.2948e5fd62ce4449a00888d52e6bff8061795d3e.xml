{"nodes":[{"pos":[940,967],"content":"Specifies a range of pages.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies a range of pages.","pos":[0,27]}]},{"pos":[979,1073],"content":"PageRange defines a range of pages that should be processed in an operation such as  printing.","needQuote":true,"needEscape":true,"nodes":[{"content":"PageRange defines a range of pages that should be processed in an operation such as  printing.","pos":[0,94]}]},{"pos":[1589,1729],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Controls.PageRange\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class that includes only the single specified page.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Windows.Controls.PageRange\"></xref> class that includes only the single specified page."},{"pos":[1741,1812],"content":"The <ph id=\"ph1\">`page`</ph> parameter value is 1-based; page number 1 is the first page.","needQuote":true,"needEscape":true,"source":"The `page` parameter value is 1-based; page number 1 is the first page."},{"pos":[1940,1978],"content":"The page that is printed or processed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The page that is printed or processed.","pos":[0,38]}]},{"pos":[2508,2643],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Controls.PageRange\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified first and last pages.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Windows.Controls.PageRange\"></xref> class with the specified first and last pages."},{"pos":[2656,2959],"content":"The `pageFrom` and `PageTo` parameter values are 1-based; page number 1 is the first page.       Since the range includes both the \"from\" and \"to\" pages, the total number of pages is \"<xref:System.Windows.Controls.PageRange.PageTo%2A> - <xref:System.Windows.Controls.PageRange.PageFrom%2A> + 1\".","needQuote":false,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`pageFrom`</ph> and <ph id=\"ph2\">`PageTo`</ph> parameter values are 1-based; page number 1 is the first page.","pos":[0,90],"source":"The `pageFrom` and `PageTo` parameter values are 1-based; page number 1 is the first page."},{"content":"Since the range includes both the \"from\" and \"to\" pages, the total number of pages is \"&lt;xref:System.Windows.Controls.PageRange.PageTo%2A&gt; - &lt;xref:System.Windows.Controls.PageRange.PageFrom%2A&gt; + 1\".","pos":[97,295],"source":"       Since the range includes both the \"from\" and \"to\" pages, the total number of pages is \"<xref:System.Windows.Controls.PageRange.PageTo%2A> - <xref:System.Windows.Controls.PageRange.PageFrom%2A> + 1\"."}]},{"pos":[3108,3136],"content":"The first page of the range.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first page of the range.","pos":[0,28]}]},{"pos":[3198,3225],"content":"The last page of the range.","needQuote":true,"needEscape":true,"nodes":[{"content":"The last page of the range.","pos":[0,27]}]},{"pos":[3702,3814],"content":"Tests whether an object of unknown type is equal to this <bpt id=\"p1\">&lt;xref href=\"System.Windows.Controls.PageRange\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Tests whether an object of unknown type is equal to this <xref href=\"System.Windows.Controls.PageRange\"></xref>."},{"pos":[3955,3973],"content":"The object tested.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object tested.","pos":[0,18]}]},{"pos":[4032,4324],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the object is of type <bpt id=\"p2\">&lt;xref href=\"System.Windows.Controls.PageRange\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> and is equal to this <bpt id=\"p3\">&lt;xref href=\"System.Windows.Controls.PageRange\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>; otherwise, <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the object is of type <xref href=\"System.Windows.Controls.PageRange\"></xref> and is equal to this <xref href=\"System.Windows.Controls.PageRange\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[4851,4994],"content":"Tests whether a <bpt id=\"p1\">&lt;xref href=\"System.Windows.Controls.PageRange\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is equal to this <bpt id=\"p2\">&lt;xref href=\"System.Windows.Controls.PageRange\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Tests whether a <xref href=\"System.Windows.Controls.PageRange\"></xref> is equal to this <xref href=\"System.Windows.Controls.PageRange\"></xref>."},{"pos":[5185,5251],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Windows.Controls.PageRange\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> tested.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Windows.Controls.PageRange\"></xref> tested."},{"pos":[5310,5530],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the two <bpt id=\"p2\">&lt;xref href=\"System.Windows.Controls.PageRange\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> objects are equal; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the two <xref href=\"System.Windows.Controls.PageRange\"></xref> objects are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[5985,6073],"content":"Gets the hash code value for the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Controls.PageRange\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets the hash code value for the <xref href=\"System.Windows.Controls.PageRange\"></xref>."},{"pos":[6208,6291],"content":"The hash code value for the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Controls.PageRange\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The hash code value for the <xref href=\"System.Windows.Controls.PageRange\"></xref>."},{"pos":[6948,7081],"content":"Defines the \"==\" operator for testing whether two specified <bpt id=\"p1\">&lt;xref href=\"System.Windows.Controls.PageRange\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects are equal.","needQuote":true,"needEscape":true,"source":"Defines the \"==\" operator for testing whether two specified <xref href=\"System.Windows.Controls.PageRange\"></xref> objects are equal."},{"pos":[7311,7376],"content":"The first <bpt id=\"p1\">&lt;xref href=\"System.Windows.Controls.PageRange\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The first <xref href=\"System.Windows.Controls.PageRange\"></xref>."},{"pos":[7456,7522],"content":"The second <bpt id=\"p1\">&lt;xref href=\"System.Windows.Controls.PageRange\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The second <xref href=\"System.Windows.Controls.PageRange\"></xref>."},{"pos":[7581,7801],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the two <bpt id=\"p2\">&lt;xref href=\"System.Windows.Controls.PageRange\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> objects are equal; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the two <xref href=\"System.Windows.Controls.PageRange\"></xref> objects are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[8468,8607],"content":"Defines the \"!=\" operator for testing whether two specified <bpt id=\"p1\">&lt;xref href=\"System.Windows.Controls.PageRange\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects are <bpt id=\"p2\">*</bpt>not<ept id=\"p2\">*</ept> equal.","needQuote":true,"needEscape":true,"source":"Defines the \"!=\" operator for testing whether two specified <xref href=\"System.Windows.Controls.PageRange\"></xref> objects are *not* equal."},{"pos":[8839,8904],"content":"The first <bpt id=\"p1\">&lt;xref href=\"System.Windows.Controls.PageRange\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The first <xref href=\"System.Windows.Controls.PageRange\"></xref>."},{"pos":[8984,9050],"content":"The second <bpt id=\"p1\">&lt;xref href=\"System.Windows.Controls.PageRange\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The second <xref href=\"System.Windows.Controls.PageRange\"></xref>."},{"pos":[9109,9335],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the two <bpt id=\"p2\">&lt;xref href=\"System.Windows.Controls.PageRange\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> objects are <bpt id=\"p3\">*</bpt>not<ept id=\"p3\">*</ept> equal; otherwise, <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the two <xref href=\"System.Windows.Controls.PageRange\"></xref> objects are *not* equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[9778,9838],"content":"Gets or sets the page number of the first page in the range.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the page number of the first page in the range.","pos":[0,60]}]},{"pos":[9850,9916],"content":"The PageFrom property is 1-based; page number 1 is the first page.","needQuote":true,"needEscape":true,"nodes":[{"content":"The PageFrom property is 1-based; page number 1 is the first page.","pos":[0,66]}]},{"pos":[10030,10085],"content":"The 1-based page number of the first page in the range.","needQuote":true,"needEscape":true,"nodes":[{"content":"The 1-based page number of the first page in the range.","pos":[0,55]}]},{"pos":[10513,10572],"content":"Gets or sets the page number of the last page in the range.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the page number of the last page in the range.","pos":[0,59]}]},{"pos":[10584,10648],"content":"The PageTo property is 1-based; page number 1 is the first page.","needQuote":true,"needEscape":true,"nodes":[{"content":"The PageTo property is 1-based; page number 1 is the first page.","pos":[0,64]}]},{"pos":[10760,10814],"content":"The 1-based page number of the last page in the range.","needQuote":true,"needEscape":true,"nodes":[{"content":"The 1-based page number of the last page in the range.","pos":[0,54]}]},{"pos":[11254,11296],"content":"Gets a string representation of the range.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a string representation of the range.","pos":[0,42]}]},{"pos":[11432,11594],"content":"A string that represents the range of pages in the format \"&lt;xref:System.Windows.Controls.PageRange.PageFrom<bpt id=\"p1\">*</bpt><ph id=\"ph1\">&gt;</ph><ph id=\"ph2\">`-`</ph>&lt;xref:System.Windows.Controls.PageRange.PageTo<ept id=\"p1\">*</ept>&gt;\".","needQuote":true,"needEscape":true,"source":"A string that represents the range of pages in the format \"<xref:System.Windows.Controls.PageRange.PageFrom*>`-`<xref:System.Windows.Controls.PageRange.PageTo*>\"."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Controls.PageRange\n  id: PageRange\n  children:\n  - System.Windows.Controls.PageRange.#ctor(System.Int32)\n  - System.Windows.Controls.PageRange.#ctor(System.Int32,System.Int32)\n  - System.Windows.Controls.PageRange.Equals(System.Object)\n  - System.Windows.Controls.PageRange.Equals(System.Windows.Controls.PageRange)\n  - System.Windows.Controls.PageRange.GetHashCode\n  - System.Windows.Controls.PageRange.op_Equality(System.Windows.Controls.PageRange,System.Windows.Controls.PageRange)\n  - System.Windows.Controls.PageRange.op_Inequality(System.Windows.Controls.PageRange,System.Windows.Controls.PageRange)\n  - System.Windows.Controls.PageRange.PageFrom\n  - System.Windows.Controls.PageRange.PageTo\n  - System.Windows.Controls.PageRange.ToString\n  langs:\n  - csharp\n  name: PageRange\n  nameWithType: PageRange\n  fullName: System.Windows.Controls.PageRange\n  type: Struct\n  summary: Specifies a range of pages.\n  remarks: PageRange defines a range of pages that should be processed in an operation such as  printing.\n  syntax:\n    content: public struct PageRange\n  inheritance:\n  - System.ValueType\n  implements: []\n  platform:\n  - net462\n- uid: System.Windows.Controls.PageRange.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Windows.Controls.PageRange\n  langs:\n  - csharp\n  name: PageRange(Int32)\n  nameWithType: PageRange.PageRange(Int32)\n  fullName: System.Windows.Controls.PageRange.PageRange(Int32)\n  type: Constructor\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Controls\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Controls.PageRange\"></xref> class that includes only the single specified page.\n  remarks: The `page` parameter value is 1-based; page number 1 is the first page.\n  syntax:\n    content: public PageRange (int page);\n    parameters:\n    - id: page\n      type: System.Int32\n      description: The page that is printed or processed.\n  overload: System.Windows.Controls.PageRange.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Controls.PageRange.#ctor(System.Int32,System.Int32)\n  id: '#ctor(System.Int32,System.Int32)'\n  parent: System.Windows.Controls.PageRange\n  langs:\n  - csharp\n  name: PageRange(Int32,Int32)\n  nameWithType: PageRange.PageRange(Int32,Int32)\n  fullName: System.Windows.Controls.PageRange.PageRange(Int32,Int32)\n  type: Constructor\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Controls\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Controls.PageRange\"></xref> class with the specified first and last pages.\n  remarks: \"The `pageFrom` and `PageTo` parameter values are 1-based; page number 1 is the first page.  \\n  \\n Since the range includes both the \\\"from\\\" and \\\"to\\\" pages, the total number of pages is \\\"<xref:System.Windows.Controls.PageRange.PageTo%2A> - <xref:System.Windows.Controls.PageRange.PageFrom%2A> + 1\\\".\"\n  syntax:\n    content: public PageRange (int pageFrom, int pageTo);\n    parameters:\n    - id: pageFrom\n      type: System.Int32\n      description: The first page of the range.\n    - id: pageTo\n      type: System.Int32\n      description: The last page of the range.\n  overload: System.Windows.Controls.PageRange.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Controls.PageRange.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Windows.Controls.PageRange\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: PageRange.Equals(Object)\n  fullName: System.Windows.Controls.PageRange.Equals(Object)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Controls\n  summary: Tests whether an object of unknown type is equal to this <xref href=\"System.Windows.Controls.PageRange\"></xref>.\n  syntax:\n    content: public override bool Equals (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The object tested.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the object is of type <xref href=\"System.Windows.Controls.PageRange\"></xref> and is equal to this <xref href=\"System.Windows.Controls.PageRange\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.Controls.PageRange.Equals*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Controls.PageRange.Equals(System.Windows.Controls.PageRange)\n  id: Equals(System.Windows.Controls.PageRange)\n  parent: System.Windows.Controls.PageRange\n  langs:\n  - csharp\n  name: Equals(PageRange)\n  nameWithType: PageRange.Equals(PageRange)\n  fullName: System.Windows.Controls.PageRange.Equals(PageRange)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Controls\n  summary: Tests whether a <xref href=\"System.Windows.Controls.PageRange\"></xref> is equal to this <xref href=\"System.Windows.Controls.PageRange\"></xref>.\n  syntax:\n    content: public bool Equals (System.Windows.Controls.PageRange pageRange);\n    parameters:\n    - id: pageRange\n      type: System.Windows.Controls.PageRange\n      description: The <xref href=\"System.Windows.Controls.PageRange\"></xref> tested.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the two <xref href=\"System.Windows.Controls.PageRange\"></xref> objects are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.Controls.PageRange.Equals*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Controls.PageRange.GetHashCode\n  id: GetHashCode\n  parent: System.Windows.Controls.PageRange\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: PageRange.GetHashCode()\n  fullName: System.Windows.Controls.PageRange.GetHashCode()\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Controls\n  summary: Gets the hash code value for the <xref href=\"System.Windows.Controls.PageRange\"></xref>.\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: The hash code value for the <xref href=\"System.Windows.Controls.PageRange\"></xref>.\n  overload: System.Windows.Controls.PageRange.GetHashCode*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Controls.PageRange.op_Equality(System.Windows.Controls.PageRange,System.Windows.Controls.PageRange)\n  id: op_Equality(System.Windows.Controls.PageRange,System.Windows.Controls.PageRange)\n  parent: System.Windows.Controls.PageRange\n  langs:\n  - csharp\n  name: op_Equality(PageRange,PageRange)\n  nameWithType: PageRange.op_Equality(PageRange,PageRange)\n  fullName: System.Windows.Controls.PageRange.op_Equality(PageRange,PageRange)\n  type: Operator\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Controls\n  summary: Defines the \"==\" operator for testing whether two specified <xref href=\"System.Windows.Controls.PageRange\"></xref> objects are equal.\n  syntax:\n    content: public static bool op_Equality (System.Windows.Controls.PageRange pr1, System.Windows.Controls.PageRange pr2);\n    parameters:\n    - id: pr1\n      type: System.Windows.Controls.PageRange\n      description: The first <xref href=\"System.Windows.Controls.PageRange\"></xref>.\n    - id: pr2\n      type: System.Windows.Controls.PageRange\n      description: The second <xref href=\"System.Windows.Controls.PageRange\"></xref>.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the two <xref href=\"System.Windows.Controls.PageRange\"></xref> objects are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.Controls.PageRange.op_Equality*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Controls.PageRange.op_Inequality(System.Windows.Controls.PageRange,System.Windows.Controls.PageRange)\n  id: op_Inequality(System.Windows.Controls.PageRange,System.Windows.Controls.PageRange)\n  parent: System.Windows.Controls.PageRange\n  langs:\n  - csharp\n  name: op_Inequality(PageRange,PageRange)\n  nameWithType: PageRange.op_Inequality(PageRange,PageRange)\n  fullName: System.Windows.Controls.PageRange.op_Inequality(PageRange,PageRange)\n  type: Operator\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Controls\n  summary: Defines the \"!=\" operator for testing whether two specified <xref href=\"System.Windows.Controls.PageRange\"></xref> objects are *not* equal.\n  syntax:\n    content: public static bool op_Inequality (System.Windows.Controls.PageRange pr1, System.Windows.Controls.PageRange pr2);\n    parameters:\n    - id: pr1\n      type: System.Windows.Controls.PageRange\n      description: The first <xref href=\"System.Windows.Controls.PageRange\"></xref>.\n    - id: pr2\n      type: System.Windows.Controls.PageRange\n      description: The second <xref href=\"System.Windows.Controls.PageRange\"></xref>.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the two <xref href=\"System.Windows.Controls.PageRange\"></xref> objects are *not* equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.Controls.PageRange.op_Inequality*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Controls.PageRange.PageFrom\n  id: PageFrom\n  parent: System.Windows.Controls.PageRange\n  langs:\n  - csharp\n  name: PageFrom\n  nameWithType: PageRange.PageFrom\n  fullName: System.Windows.Controls.PageRange.PageFrom\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Controls\n  summary: Gets or sets the page number of the first page in the range.\n  remarks: The PageFrom property is 1-based; page number 1 is the first page.\n  syntax:\n    content: public int PageFrom { get; set; }\n    return:\n      type: System.Int32\n      description: The 1-based page number of the first page in the range.\n  overload: System.Windows.Controls.PageRange.PageFrom*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Controls.PageRange.PageTo\n  id: PageTo\n  parent: System.Windows.Controls.PageRange\n  langs:\n  - csharp\n  name: PageTo\n  nameWithType: PageRange.PageTo\n  fullName: System.Windows.Controls.PageRange.PageTo\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Controls\n  summary: Gets or sets the page number of the last page in the range.\n  remarks: The PageTo property is 1-based; page number 1 is the first page.\n  syntax:\n    content: public int PageTo { get; set; }\n    return:\n      type: System.Int32\n      description: The 1-based page number of the last page in the range.\n  overload: System.Windows.Controls.PageRange.PageTo*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Controls.PageRange.ToString\n  id: ToString\n  parent: System.Windows.Controls.PageRange\n  langs:\n  - csharp\n  name: ToString()\n  nameWithType: PageRange.ToString()\n  fullName: System.Windows.Controls.PageRange.ToString()\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Controls\n  summary: Gets a string representation of the range.\n  syntax:\n    content: public override string ToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: A string that represents the range of pages in the format \"<xref:System.Windows.Controls.PageRange.PageFrom*>`-`<xref:System.Windows.Controls.PageRange.PageTo*>\".\n  overload: System.Windows.Controls.PageRange.ToString*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.ValueType\n  isExternal: false\n  name: System.ValueType\n- uid: System.Windows.Controls.PageRange.#ctor(System.Int32)\n  parent: System.Windows.Controls.PageRange\n  isExternal: false\n  name: PageRange(Int32)\n  nameWithType: PageRange.PageRange(Int32)\n  fullName: System.Windows.Controls.PageRange.PageRange(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Windows.Controls.PageRange.#ctor(System.Int32,System.Int32)\n  parent: System.Windows.Controls.PageRange\n  isExternal: false\n  name: PageRange(Int32,Int32)\n  nameWithType: PageRange.PageRange(Int32,Int32)\n  fullName: System.Windows.Controls.PageRange.PageRange(Int32,Int32)\n- uid: System.Windows.Controls.PageRange.Equals(System.Object)\n  parent: System.Windows.Controls.PageRange\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: PageRange.Equals(Object)\n  fullName: System.Windows.Controls.PageRange.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Windows.Controls.PageRange.Equals(System.Windows.Controls.PageRange)\n  parent: System.Windows.Controls.PageRange\n  isExternal: false\n  name: Equals(PageRange)\n  nameWithType: PageRange.Equals(PageRange)\n  fullName: System.Windows.Controls.PageRange.Equals(PageRange)\n- uid: System.Windows.Controls.PageRange\n  parent: System.Windows.Controls\n  isExternal: false\n  name: PageRange\n  nameWithType: PageRange\n  fullName: System.Windows.Controls.PageRange\n- uid: System.Windows.Controls.PageRange.GetHashCode\n  parent: System.Windows.Controls.PageRange\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: PageRange.GetHashCode()\n  fullName: System.Windows.Controls.PageRange.GetHashCode()\n- uid: System.Windows.Controls.PageRange.op_Equality(System.Windows.Controls.PageRange,System.Windows.Controls.PageRange)\n  parent: System.Windows.Controls.PageRange\n  isExternal: false\n  name: op_Equality(PageRange,PageRange)\n  nameWithType: PageRange.op_Equality(PageRange,PageRange)\n  fullName: System.Windows.Controls.PageRange.op_Equality(PageRange,PageRange)\n- uid: System.Windows.Controls.PageRange.op_Inequality(System.Windows.Controls.PageRange,System.Windows.Controls.PageRange)\n  parent: System.Windows.Controls.PageRange\n  isExternal: false\n  name: op_Inequality(PageRange,PageRange)\n  nameWithType: PageRange.op_Inequality(PageRange,PageRange)\n  fullName: System.Windows.Controls.PageRange.op_Inequality(PageRange,PageRange)\n- uid: System.Windows.Controls.PageRange.PageFrom\n  parent: System.Windows.Controls.PageRange\n  isExternal: false\n  name: PageFrom\n  nameWithType: PageRange.PageFrom\n  fullName: System.Windows.Controls.PageRange.PageFrom\n- uid: System.Windows.Controls.PageRange.PageTo\n  parent: System.Windows.Controls.PageRange\n  isExternal: false\n  name: PageTo\n  nameWithType: PageRange.PageTo\n  fullName: System.Windows.Controls.PageRange.PageTo\n- uid: System.Windows.Controls.PageRange.ToString\n  parent: System.Windows.Controls.PageRange\n  isExternal: false\n  name: ToString()\n  nameWithType: PageRange.ToString()\n  fullName: System.Windows.Controls.PageRange.ToString()\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Windows.Controls.PageRange.#ctor*\n  parent: System.Windows.Controls.PageRange\n  isExternal: false\n  name: PageRange\n  nameWithType: PageRange.PageRange\n- uid: System.Windows.Controls.PageRange.Equals*\n  parent: System.Windows.Controls.PageRange\n  isExternal: false\n  name: Equals\n  nameWithType: PageRange.Equals\n- uid: System.Windows.Controls.PageRange.GetHashCode*\n  parent: System.Windows.Controls.PageRange\n  isExternal: false\n  name: GetHashCode\n  nameWithType: PageRange.GetHashCode\n- uid: System.Windows.Controls.PageRange.op_Equality*\n  parent: System.Windows.Controls.PageRange\n  isExternal: false\n  name: op_Equality\n  nameWithType: PageRange.op_Equality\n- uid: System.Windows.Controls.PageRange.op_Inequality*\n  parent: System.Windows.Controls.PageRange\n  isExternal: false\n  name: op_Inequality\n  nameWithType: PageRange.op_Inequality\n- uid: System.Windows.Controls.PageRange.PageFrom*\n  parent: System.Windows.Controls.PageRange\n  isExternal: false\n  name: PageFrom\n  nameWithType: PageRange.PageFrom\n- uid: System.Windows.Controls.PageRange.PageTo*\n  parent: System.Windows.Controls.PageRange\n  isExternal: false\n  name: PageTo\n  nameWithType: PageRange.PageTo\n- uid: System.Windows.Controls.PageRange.ToString*\n  parent: System.Windows.Controls.PageRange\n  isExternal: false\n  name: ToString\n  nameWithType: PageRange.ToString\n"}