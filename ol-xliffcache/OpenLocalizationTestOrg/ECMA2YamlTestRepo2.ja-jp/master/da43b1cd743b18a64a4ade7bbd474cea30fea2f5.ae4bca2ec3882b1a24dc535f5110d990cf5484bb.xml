{"nodes":[{"pos":[682,847],"content":"Provides the base implementation for the <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.INestedContainer\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> interface, which enables containers to have an owning component.","needQuote":true,"needEscape":true,"source":"Provides the base implementation for the <xref href=\"System.ComponentModel.INestedContainer\"></xref> interface, which enables containers to have an owning component."},{"pos":[860,3200],"content":"The NestedContainer class is a simple implementation of the <xref:System.ComponentModel.INestedContainer> interface, which defines a component that logically contains zero or more other components and is owned by a parent component. The behavior of nested containers differs from a standard <xref:System.ComponentModel.Container> in a number of ways, including the following:      -   Site characteristics such as <xref:System.ComponentModel.Component.DesignMode%2A> and <xref:System.ComponentModel.Component.GetService%2A> are routed through the owning component’s site.      -   The site’s <xref:System.ComponentModel.ISite.Name%2A> property is a qualified name that includes the owning component’s name followed by a period (.) and the child component’s name.      -   <xref:System.ComponentModel.NestedContainer.GetService%2A> provides support for the <xref:System.ComponentModel.INestedContainer> as a service.      -   When the owning component is disposed, the container is disposed as well.       In addition, designers treat nested containers differently. A designer host is only interested in one container—the one associated with the host. Therefore, component add and remove events are not raised when a component is added to or removed from a nested container. However, because services flow through to the nested container, component change events are raised when a component in a nested container is changed.       This disparity in event tracking also impacts undo functionality, which is closely tied to serialization. The standard undo engine uses <xref:System.ComponentModel.Design.IReferenceService> to track changes made to components. If the undo engine cannot identify a name for a component through the reference service, the engine will ignore any changes for that component. This service automatically recognizes changes to contained components only if they are exposed as public read-only properties of the same name in their owners. Otherwise, the developer must pass component change events up to the owner. For example, if a nested component’s `Text` property is resurfaced on its owning component as an `Address` property, when the `Text` property is changed, a property change must be programmatically made for the corresponding `Address` property or else that change will not be tracked by undo.","needQuote":false,"needEscape":true,"nodes":[{"content":"The NestedContainer class is a simple implementation of the &lt;xref:System.ComponentModel.INestedContainer&gt; interface, which defines a component that logically contains zero or more other components and is owned by a parent component.","pos":[0,232],"source":"The NestedContainer class is a simple implementation of the <xref:System.ComponentModel.INestedContainer> interface, which defines a component that logically contains zero or more other components and is owned by a parent component."},{"content":"The behavior of nested containers differs from a standard &lt;xref:System.ComponentModel.Container&gt; in a number of ways, including the following:      -   Site characteristics such as &lt;xref:System.ComponentModel.Component.DesignMode%2A&gt; and &lt;xref:System.ComponentModel.Component.GetService%2A&gt; are routed through the owning component’s site.","pos":[233,571],"source":" The behavior of nested containers differs from a standard <xref:System.ComponentModel.Container> in a number of ways, including the following:      -   Site characteristics such as <xref:System.ComponentModel.Component.DesignMode%2A> and <xref:System.ComponentModel.Component.GetService%2A> are routed through the owning component’s site."},{"content":"-   The site’s &lt;xref:System.ComponentModel.ISite.Name%2A&gt; property is a qualified name that includes the owning component’s name followed by a period (.) and the child component’s name.","pos":[577,762],"source":"      -   The site’s <xref:System.ComponentModel.ISite.Name%2A> property is a qualified name that includes the owning component’s name followed by a period (.) and the child component’s name."},{"content":"-   &lt;xref:System.ComponentModel.NestedContainer.GetService%2A&gt; provides support for the &lt;xref:System.ComponentModel.INestedContainer&gt; as a service.","pos":[768,915],"source":"      -   <xref:System.ComponentModel.NestedContainer.GetService%2A> provides support for the <xref:System.ComponentModel.INestedContainer> as a service."},{"content":"-   When the owning component is disposed, the container is disposed as well.","pos":[921,998]},{"content":"In addition, designers treat nested containers differently.","pos":[1005,1064]},{"content":"A designer host is only interested in one container—the one associated with the host.","pos":[1065,1150]},{"content":"Therefore, component add and remove events are not raised when a component is added to or removed from a nested container.","pos":[1151,1273]},{"content":"However, because services flow through to the nested container, component change events are raised when a component in a nested container is changed.","pos":[1274,1423]},{"content":"This disparity in event tracking also impacts undo functionality, which is closely tied to serialization.","pos":[1430,1535]},{"content":"The standard undo engine uses &lt;xref:System.ComponentModel.Design.IReferenceService&gt; to track changes made to components.","pos":[1536,1656],"source":" The standard undo engine uses <xref:System.ComponentModel.Design.IReferenceService> to track changes made to components."},{"content":"If the undo engine cannot identify a name for a component through the reference service, the engine will ignore any changes for that component.","pos":[1657,1800]},{"content":"This service automatically recognizes changes to contained components only if they are exposed as public read-only properties of the same name in their owners.","pos":[1801,1960]},{"content":"Otherwise, the developer must pass component change events up to the owner.","pos":[1961,2036]},{"content":"For example, if a nested component’s <ph id=\"ph1\">`Text`</ph> property is resurfaced on its owning component as an <ph id=\"ph2\">`Address`</ph> property, when the <ph id=\"ph3\">`Text`</ph> property is changed, a property change must be programmatically made for the corresponding <ph id=\"ph4\">`Address`</ph> property or else that change will not be tracked by undo.","pos":[2037,2328],"source":" For example, if a nested component’s `Text` property is resurfaced on its owning component as an `Address` property, when the `Text` property is changed, a property change must be programmatically made for the corresponding `Address` property or else that change will not be tracked by undo."}]},{"pos":[4520,4619],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.NestedContainer\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.ComponentModel.NestedContainer\"></xref> class."},{"pos":[4631,4849],"content":"This constructor enlists in its owner's <xref:System.ComponentModel.IComponent.Disposed> event so that the nested container's <xref:System.ComponentModel.NestedContainer.Dispose%2A> method will automatically be called.","needQuote":true,"needEscape":true,"nodes":[{"content":"This constructor enlists in its owner's &lt;xref:System.ComponentModel.IComponent.Disposed&gt; event so that the nested container's &lt;xref:System.ComponentModel.NestedContainer.Dispose%2A&gt; method will automatically be called.","pos":[0,218],"source":"This constructor enlists in its owner's <xref:System.ComponentModel.IComponent.Disposed> event so that the nested container's <xref:System.ComponentModel.NestedContainer.Dispose%2A> method will automatically be called."}]},{"pos":[5034,5124],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.IComponent\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that owns this nested container.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.ComponentModel.IComponent\"></xref> that owns this nested container."},{"pos":[5298,5381],"content":"<ph id=\"ph1\">&lt;code&gt;owner&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>owner</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[5908,5962],"content":"Creates a site for the component within the container.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a site for the component within the container.","pos":[0,54]}]},{"pos":[5974,6114],"content":"If the <ph id=\"ph1\">`name`</ph> parameter is <ph id=\"ph2\">`null`</ph>, the &lt;xref:System.ComponentModel.IComponent&gt; is added to the nested container without an identifying name.","needQuote":true,"needEscape":true,"source":"If the `name` parameter is `null`, the <xref:System.ComponentModel.IComponent> is added to the nested container without an identifying name."},{"pos":[6355,6434],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.IComponent\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to create a site for.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.ComponentModel.IComponent\"></xref> to create a site for."},{"pos":[6495,6622],"content":"The name to assign to <ph id=\"ph1\">`component`</ph>, or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to skip the name assignment.","needQuote":true,"needEscape":true,"source":"The name to assign to `component`, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> to skip the name assignment."},{"pos":[6694,6761],"content":"The newly created <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.ISite\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The newly created <xref href=\"System.ComponentModel.ISite\"></xref>."},{"pos":[6940,7027],"content":"<ph id=\"ph1\">&lt;code&gt;component&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>component</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[7445,7497],"content":"Releases the resources used by the nested container.","needQuote":true,"needEscape":true,"nodes":[{"content":"Releases the resources used by the nested container.","pos":[0,52]}]},{"pos":[7510,8051],"content":"This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.       When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.ComponentModel.NestedContainer> references. This method invokes the `Dispose()` method of each referenced object.","needQuote":false,"needEscape":true,"nodes":[{"content":"This method is called by the public <ph id=\"ph1\">`Dispose()`</ph> method and the &lt;xref:System.Object.Finalize%2A&gt; method.","pos":[0,103],"source":"This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method."},{"content":"<ph id=\"ph1\">`Dispose()`</ph> invokes the protected <ph id=\"ph2\">`Dispose(Boolean)`</ph> method with the <ph id=\"ph3\">`disposing`</ph> parameter set to <ph id=\"ph4\">`true`</ph>.","pos":[104,209],"source":"`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`."},{"content":"&lt;xref:System.Object.Finalize%2A&gt; invokes <ph id=\"ph1\">`Dispose`</ph> with <ph id=\"ph2\">`disposing`</ph> set to <ph id=\"ph3\">`false`</ph>.","pos":[210,293],"source":" <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`."},{"content":"When the <ph id=\"ph1\">`disposing`</ph> parameter is true, this method releases all resources held by any managed objects that this &lt;xref:System.ComponentModel.NestedContainer&gt; references.","pos":[300,469],"source":"       When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.ComponentModel.NestedContainer> references."},{"content":"This method invokes the <ph id=\"ph1\">`Dispose()`</ph> method of each referenced object.","pos":[470,539],"source":" This method invokes the `Dispose()` method of each referenced object."}]},{"pos":[8208,8417],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to release both managed and unmanaged resources; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> to release only unmanaged resources.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only unmanaged resources."},{"pos":[8911,8977],"content":"Gets the service object of the specified type, if it is available.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the service object of the specified type, if it is available.","pos":[0,66]}]},{"pos":[8989,9251],"content":"This method overrides the <xref:System.ComponentModel.Container.GetService%2A?displayProperty=fullName> method. This implementation only resolves requests for the <xref:System.ComponentModel.INestedContainer> and <xref:System.ComponentModel.IContainer> services.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method overrides the <xref:System.ComponentModel.Container.GetService%2A?displayProperty=fullName> method. This implementation only resolves requests for the <xref:System.ComponentModel.INestedContainer> and <xref:System.ComponentModel.IContainer> services.","pos":[0,262],"nodes":[{"content":"This method overrides the &lt;xref:System.ComponentModel.Container.GetService%2A?displayProperty=fullName&gt; method.","pos":[0,111],"source":"This method overrides the <xref:System.ComponentModel.Container.GetService%2A?displayProperty=fullName> method."},{"content":"This implementation only resolves requests for the &lt;xref:System.ComponentModel.INestedContainer&gt; and &lt;xref:System.ComponentModel.IContainer&gt; services.","pos":[112,262],"source":" This implementation only resolves requests for the <xref:System.ComponentModel.INestedContainer> and <xref:System.ComponentModel.IContainer> services."}]}]},{"pos":[9405,9455],"content":"The <xref:System.Type> of the service to retrieve.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Type&gt; of the service to retrieve.","pos":[0,50],"source":"The <xref:System.Type> of the service to retrieve."}]},{"pos":[9513,9674],"content":"An &lt;xref:System.Object&gt; that implements the requested service, or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the service cannot be resolved.","needQuote":true,"needEscape":true,"source":"An <xref:System.Object> that implements the requested service, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the service cannot be resolved."},{"pos":[10104,10156],"content":"Gets the owning component for this nested container.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the owning component for this nested container.","pos":[0,52]}]},{"pos":[10168,10274],"content":"The owning component is the characteristic that differentiates nested containers from ordinary containers.","needQuote":true,"needEscape":true,"nodes":[{"content":"The owning component is the characteristic that differentiates nested containers from ordinary containers.","pos":[0,106]}]},{"pos":[10429,10519],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.IComponent\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that owns this nested container.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.ComponentModel.IComponent\"></xref> that owns this nested container."},{"pos":[10964,11002],"content":"Gets the name of the owning component.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the name of the owning component.","pos":[0,38]}]},{"pos":[11014,11368],"content":"This property may be overridden to provide a custom owner name. The default implementation searches the owner's site for <xref:System.ComponentModel.INestedSite> and calls <xref:System.ComponentModel.INestedSite.FullName%2A>, or <xref:System.ComponentModel.ISite.Name%2A> if there is no nested site. If neither is available, this property returns `null`.","needQuote":true,"needEscape":true,"nodes":[{"content":"This property may be overridden to provide a custom owner name.","pos":[0,63]},{"content":"The default implementation searches the owner's site for &lt;xref:System.ComponentModel.INestedSite&gt; and calls &lt;xref:System.ComponentModel.INestedSite.FullName%2A&gt;, or &lt;xref:System.ComponentModel.ISite.Name%2A&gt; if there is no nested site.","pos":[64,299],"source":" The default implementation searches the owner's site for <xref:System.ComponentModel.INestedSite> and calls <xref:System.ComponentModel.INestedSite.FullName%2A>, or <xref:System.ComponentModel.ISite.Name%2A> if there is no nested site."},{"content":"If neither is available, this property returns <ph id=\"ph1\">`null`</ph>.","pos":[300,354],"source":" If neither is available, this property returns `null`."}]},{"pos":[11493,11526],"content":"The name of the owning component.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the owning component.","pos":[0,33]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ComponentModel.NestedContainer\n  id: NestedContainer\n  children:\n  - System.ComponentModel.NestedContainer.#ctor(System.ComponentModel.IComponent)\n  - System.ComponentModel.NestedContainer.CreateSite(System.ComponentModel.IComponent,System.String)\n  - System.ComponentModel.NestedContainer.Dispose(System.Boolean)\n  - System.ComponentModel.NestedContainer.GetService(System.Type)\n  - System.ComponentModel.NestedContainer.Owner\n  - System.ComponentModel.NestedContainer.OwnerName\n  langs:\n  - csharp\n  name: NestedContainer\n  nameWithType: NestedContainer\n  fullName: System.ComponentModel.NestedContainer\n  type: Class\n  summary: Provides the base implementation for the <xref href=\"System.ComponentModel.INestedContainer\"></xref> interface, which enables containers to have an owning component.\n  remarks: \"The NestedContainer class is a simple implementation of the <xref:System.ComponentModel.INestedContainer> interface, which defines a component that logically contains zero or more other components and is owned by a parent component. The behavior of nested containers differs from a standard <xref:System.ComponentModel.Container> in a number of ways, including the following:  \\n  \\n-   Site characteristics such as <xref:System.ComponentModel.Component.DesignMode%2A> and <xref:System.ComponentModel.Component.GetService%2A> are routed through the owning component’s site.  \\n  \\n-   The site’s <xref:System.ComponentModel.ISite.Name%2A> property is a qualified name that includes the owning component’s name followed by a period (.) and the child component’s name.  \\n  \\n-   <xref:System.ComponentModel.NestedContainer.GetService%2A> provides support for the <xref:System.ComponentModel.INestedContainer> as a service.  \\n  \\n-   When the owning component is disposed, the container is disposed as well.  \\n  \\n In addition, designers treat nested containers differently. A designer host is only interested in one container—the one associated with the host. Therefore, component add and remove events are not raised when a component is added to or removed from a nested container. However, because services flow through to the nested container, component change events are raised when a component in a nested container is changed.  \\n  \\n This disparity in event tracking also impacts undo functionality, which is closely tied to serialization. The standard undo engine uses <xref:System.ComponentModel.Design.IReferenceService> to track changes made to components. If the undo engine cannot identify a name for a component through the reference service, the engine will ignore any changes for that component. This service automatically recognizes changes to contained components only if they are exposed as public read-only properties of the same name in their owners. Otherwise, the developer must pass component change events up to the owner. For example, if a nested component’s `Text` property is resurfaced on its owning component as an `Address` property, when the `Text` property is changed, a property change must be programmatically made for the corresponding `Address` property or else that change will not be tracked by undo.\"\n  syntax:\n    content: 'public class NestedContainer : System.ComponentModel.Container, IDisposable, System.ComponentModel.INestedContainer'\n  inheritance:\n  - System.Object\n  - System.ComponentModel.Container\n  implements:\n  - System.ComponentModel.INestedContainer\n  - System.IDisposable\n  inheritedMembers:\n  - System.ComponentModel.Container.Add(System.ComponentModel.IComponent)\n  - System.ComponentModel.Container.Add(System.ComponentModel.IComponent,System.String)\n  - System.ComponentModel.Container.Components\n  - System.ComponentModel.Container.Dispose\n  - System.ComponentModel.Container.Remove(System.ComponentModel.IComponent)\n  - System.ComponentModel.Container.RemoveWithoutUnsiting(System.ComponentModel.IComponent)\n  - System.ComponentModel.Container.ValidateName(System.ComponentModel.IComponent,System.String)\n  platform:\n  - net462\n- uid: System.ComponentModel.NestedContainer.#ctor(System.ComponentModel.IComponent)\n  id: '#ctor(System.ComponentModel.IComponent)'\n  parent: System.ComponentModel.NestedContainer\n  langs:\n  - csharp\n  name: NestedContainer(IComponent)\n  nameWithType: NestedContainer.NestedContainer(IComponent)\n  fullName: System.ComponentModel.NestedContainer.NestedContainer(IComponent)\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Initializes a new instance of the <xref href=\"System.ComponentModel.NestedContainer\"></xref> class.\n  remarks: This constructor enlists in its owner's <xref:System.ComponentModel.IComponent.Disposed> event so that the nested container's <xref:System.ComponentModel.NestedContainer.Dispose%2A> method will automatically be called.\n  syntax:\n    content: public NestedContainer (System.ComponentModel.IComponent owner);\n    parameters:\n    - id: owner\n      type: System.ComponentModel.IComponent\n      description: The <xref href=\"System.ComponentModel.IComponent\"></xref> that owns this nested container.\n  overload: System.ComponentModel.NestedContainer.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>owner</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.ComponentModel.NestedContainer.CreateSite(System.ComponentModel.IComponent,System.String)\n  id: CreateSite(System.ComponentModel.IComponent,System.String)\n  parent: System.ComponentModel.NestedContainer\n  langs:\n  - csharp\n  name: CreateSite(IComponent,String)\n  nameWithType: NestedContainer.CreateSite(IComponent,String)\n  fullName: System.ComponentModel.NestedContainer.CreateSite(IComponent,String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Creates a site for the component within the container.\n  remarks: If the `name` parameter is `null`, the <xref:System.ComponentModel.IComponent> is added to the nested container without an identifying name.\n  syntax:\n    content: protected override System.ComponentModel.ISite CreateSite (System.ComponentModel.IComponent component, string name);\n    parameters:\n    - id: component\n      type: System.ComponentModel.IComponent\n      description: The <xref href=\"System.ComponentModel.IComponent\"></xref> to create a site for.\n    - id: name\n      type: System.String\n      description: The name to assign to `component`, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> to skip the name assignment.\n    return:\n      type: System.ComponentModel.ISite\n      description: The newly created <xref href=\"System.ComponentModel.ISite\"></xref>.\n  overload: System.ComponentModel.NestedContainer.CreateSite*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>component</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.ComponentModel.NestedContainer.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.ComponentModel.NestedContainer\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: NestedContainer.Dispose(Boolean)\n  fullName: System.ComponentModel.NestedContainer.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Releases the resources used by the nested container.\n  remarks: \"This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.  \\n  \\n When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.ComponentModel.NestedContainer> references. This method invokes the `Dispose()` method of each referenced object.\"\n  syntax:\n    content: protected override void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only unmanaged resources.\n  overload: System.ComponentModel.NestedContainer.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.NestedContainer.GetService(System.Type)\n  id: GetService(System.Type)\n  parent: System.ComponentModel.NestedContainer\n  langs:\n  - csharp\n  name: GetService(Type)\n  nameWithType: NestedContainer.GetService(Type)\n  fullName: System.ComponentModel.NestedContainer.GetService(Type)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Gets the service object of the specified type, if it is available.\n  remarks: This method overrides the <xref:System.ComponentModel.Container.GetService%2A?displayProperty=fullName> method. This implementation only resolves requests for the <xref:System.ComponentModel.INestedContainer> and <xref:System.ComponentModel.IContainer> services.\n  syntax:\n    content: protected override object GetService (Type service);\n    parameters:\n    - id: service\n      type: System.Type\n      description: The <xref:System.Type> of the service to retrieve.\n    return:\n      type: System.Object\n      description: An <xref:System.Object> that implements the requested service, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the service cannot be resolved.\n  overload: System.ComponentModel.NestedContainer.GetService*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.NestedContainer.Owner\n  id: Owner\n  parent: System.ComponentModel.NestedContainer\n  langs:\n  - csharp\n  name: Owner\n  nameWithType: NestedContainer.Owner\n  fullName: System.ComponentModel.NestedContainer.Owner\n  type: Property\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Gets the owning component for this nested container.\n  remarks: The owning component is the characteristic that differentiates nested containers from ordinary containers.\n  syntax:\n    content: public System.ComponentModel.IComponent Owner { get; }\n    return:\n      type: System.ComponentModel.IComponent\n      description: The <xref href=\"System.ComponentModel.IComponent\"></xref> that owns this nested container.\n  overload: System.ComponentModel.NestedContainer.Owner*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.NestedContainer.OwnerName\n  id: OwnerName\n  parent: System.ComponentModel.NestedContainer\n  langs:\n  - csharp\n  name: OwnerName\n  nameWithType: NestedContainer.OwnerName\n  fullName: System.ComponentModel.NestedContainer.OwnerName\n  type: Property\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Gets the name of the owning component.\n  remarks: This property may be overridden to provide a custom owner name. The default implementation searches the owner's site for <xref:System.ComponentModel.INestedSite> and calls <xref:System.ComponentModel.INestedSite.FullName%2A>, or <xref:System.ComponentModel.ISite.Name%2A> if there is no nested site. If neither is available, this property returns `null`.\n  syntax:\n    content: protected virtual string OwnerName { get; }\n    return:\n      type: System.String\n      description: The name of the owning component.\n  overload: System.ComponentModel.NestedContainer.OwnerName*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.ComponentModel.Container\n  isExternal: false\n  name: System.ComponentModel.Container\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ComponentModel.NestedContainer.#ctor(System.ComponentModel.IComponent)\n  parent: System.ComponentModel.NestedContainer\n  isExternal: false\n  name: NestedContainer(IComponent)\n  nameWithType: NestedContainer.NestedContainer(IComponent)\n  fullName: System.ComponentModel.NestedContainer.NestedContainer(IComponent)\n- uid: System.ComponentModel.IComponent\n  parent: System.ComponentModel\n  isExternal: false\n  name: IComponent\n  nameWithType: IComponent\n  fullName: System.ComponentModel.IComponent\n- uid: System.ComponentModel.NestedContainer.CreateSite(System.ComponentModel.IComponent,System.String)\n  parent: System.ComponentModel.NestedContainer\n  isExternal: false\n  name: CreateSite(IComponent,String)\n  nameWithType: NestedContainer.CreateSite(IComponent,String)\n  fullName: System.ComponentModel.NestedContainer.CreateSite(IComponent,String)\n- uid: System.ComponentModel.ISite\n  parent: System.ComponentModel\n  isExternal: false\n  name: ISite\n  nameWithType: ISite\n  fullName: System.ComponentModel.ISite\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.ComponentModel.NestedContainer.Dispose(System.Boolean)\n  parent: System.ComponentModel.NestedContainer\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: NestedContainer.Dispose(Boolean)\n  fullName: System.ComponentModel.NestedContainer.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.ComponentModel.NestedContainer.GetService(System.Type)\n  parent: System.ComponentModel.NestedContainer\n  isExternal: false\n  name: GetService(Type)\n  nameWithType: NestedContainer.GetService(Type)\n  fullName: System.ComponentModel.NestedContainer.GetService(Type)\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Type\n  parent: System\n  isExternal: true\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.ComponentModel.NestedContainer.Owner\n  parent: System.ComponentModel.NestedContainer\n  isExternal: false\n  name: Owner\n  nameWithType: NestedContainer.Owner\n  fullName: System.ComponentModel.NestedContainer.Owner\n- uid: System.ComponentModel.NestedContainer.OwnerName\n  parent: System.ComponentModel.NestedContainer\n  isExternal: false\n  name: OwnerName\n  nameWithType: NestedContainer.OwnerName\n  fullName: System.ComponentModel.NestedContainer.OwnerName\n- uid: System.ComponentModel.NestedContainer.#ctor*\n  parent: System.ComponentModel.NestedContainer\n  isExternal: false\n  name: NestedContainer\n  nameWithType: NestedContainer.NestedContainer\n- uid: System.ComponentModel.NestedContainer.CreateSite*\n  parent: System.ComponentModel.NestedContainer\n  isExternal: false\n  name: CreateSite\n  nameWithType: NestedContainer.CreateSite\n- uid: System.ComponentModel.NestedContainer.Dispose*\n  parent: System.ComponentModel.NestedContainer\n  isExternal: false\n  name: Dispose\n  nameWithType: NestedContainer.Dispose\n- uid: System.ComponentModel.NestedContainer.GetService*\n  parent: System.ComponentModel.NestedContainer\n  isExternal: false\n  name: GetService\n  nameWithType: NestedContainer.GetService\n- uid: System.ComponentModel.NestedContainer.Owner*\n  parent: System.ComponentModel.NestedContainer\n  isExternal: false\n  name: Owner\n  nameWithType: NestedContainer.Owner\n- uid: System.ComponentModel.NestedContainer.OwnerName*\n  parent: System.ComponentModel.NestedContainer\n  isExternal: false\n  name: OwnerName\n  nameWithType: NestedContainer.OwnerName\n"}