{"nodes":[{"pos":[644,787],"content":"Defines the methods that enable a client application to display a user interface to collect identity information prior to creating the channel.","needQuote":true,"needEscape":true,"nodes":[{"content":"Defines the methods that enable a client application to display a user interface to collect identity information prior to creating the channel.","pos":[0,143]}]},{"pos":[800,4323],"content":"Implement the IInteractiveChannelInitializer interface to enable a client application to display a user interface that enables the user of the application to create or select the credentials prior to opening a channel.       To implement IInteractiveChannelInitializer, perform the following steps in <xref:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer.BeginDisplayInitializationUI%2A?displayProperty=fullName>:      1.  Prompt the user and obtain an appropriate <xref:System.Net.NetworkCredential?displayProperty=fullName>.      2.  Add a custom channel parameter object to the collection returned by the <xref:System.ServiceModel.Channels.IChannel.GetProperty%2A?displayProperty=fullName> method on the <xref:System.ServiceModel.IClientChannel> object with a type parameter of <xref:System.ServiceModel.Channels.ChannelParameterCollection?displayProperty=fullName>. This channel parameter object is used by the custom <xref:System.ServiceModel.ClientCredentialsSecurityTokenManager?displayProperty=fullName> to establish the security tokens for the channel.      3.  Return.       To insert IInteractiveChannelInitializer:      1.  Override the <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A?displayProperty=fullName> method on the <xref:System.ServiceModel.Description.ClientCredentials?displayProperty=fullName> class.      2.  In that method, determine whether the endpoint requires an IInteractiveChannelInitializer and if so, add the IInteractiveChannelInitializer to the <xref:System.ServiceModel.Dispatcher.ClientRuntime.InteractiveChannelInitializers%2A?displayProperty=fullName> collection.       There are two ways application developers can make use of an inserted IInteractiveChannelInitializer. The client application can call either <xref:System.ServiceModel.ClientBase%601.DisplayInitializationUI%2A?displayProperty=fullName> or <xref:System.ServiceModel.IClientChannel.DisplayInitializationUI%2A?displayProperty=fullName> (or an asynchronous version) prior to opening the channel (the *explicit* approach) or simply call the first operation (the *implicit* approach).       If using the implicit approach, the application must call the first operation on an <xref:System.ServiceModel.ClientBase%601> or <xref:System.ServiceModel.IClientChannel> extension. If it calls anything other than the first operation, an exception is thrown.       If using the explicit approach, the application must perform the following steps in order:      1.  Call either <xref:System.ServiceModel.ClientBase%601.DisplayInitializationUI%2A?displayProperty=fullName> or <xref:System.ServiceModel.IClientChannel.DisplayInitializationUI%2A?displayProperty=fullName> (or an asynchronous version).      2.  When the initializers have returned, call either the <xref:System.ServiceModel.ICommunicationObject.Open%2A> method on the <xref:System.ServiceModel.IClientChannel> object or on the <xref:System.ServiceModel.IClientChannel> object returned from the <xref:System.ServiceModel.ClientBase%601.InnerChannel%2A?displayProperty=fullName> property.      3.  Call operations.       It is recommended that production-quality applications control of the user-interface process by adopting the explicit approach.       Applications that use the implicit approach invoke the user-interface initializers, but if the user of the application fails to respond within the send timeout period of the binding, an exception is thrown when the user interface returns.","needQuote":false,"needEscape":true,"nodes":[{"content":"Implement the IInteractiveChannelInitializer interface to enable a client application to display a user interface that enables the user of the application to create or select the credentials prior to opening a channel.","pos":[0,218]},{"content":"To implement IInteractiveChannelInitializer, perform the following steps in &lt;xref:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer.BeginDisplayInitializationUI%2A?displayProperty=fullName&gt;:      1.","pos":[225,435],"source":"       To implement IInteractiveChannelInitializer, perform the following steps in <xref:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer.BeginDisplayInitializationUI%2A?displayProperty=fullName>:      1."},{"content":"Prompt the user and obtain an appropriate &lt;xref:System.Net.NetworkCredential?displayProperty=fullName&gt;.","pos":[437,540],"source":"  Prompt the user and obtain an appropriate <xref:System.Net.NetworkCredential?displayProperty=fullName>."},{"content":"2.","pos":[546,548]},{"content":"Add a custom channel parameter object to the collection returned by the &lt;xref:System.ServiceModel.Channels.IChannel.GetProperty%2A?displayProperty=fullName&gt; method on the &lt;xref:System.ServiceModel.IClientChannel&gt; object with a type parameter of &lt;xref:System.ServiceModel.Channels.ChannelParameterCollection?displayProperty=fullName&gt;.","pos":[550,883],"source":"  Add a custom channel parameter object to the collection returned by the <xref:System.ServiceModel.Channels.IChannel.GetProperty%2A?displayProperty=fullName> method on the <xref:System.ServiceModel.IClientChannel> object with a type parameter of <xref:System.ServiceModel.Channels.ChannelParameterCollection?displayProperty=fullName>."},{"content":"This channel parameter object is used by the custom &lt;xref:System.ServiceModel.ClientCredentialsSecurityTokenManager?displayProperty=fullName&gt; to establish the security tokens for the channel.","pos":[884,1075],"source":" This channel parameter object is used by the custom <xref:System.ServiceModel.ClientCredentialsSecurityTokenManager?displayProperty=fullName> to establish the security tokens for the channel."},{"content":"3.","pos":[1081,1083]},{"content":"Return.","pos":[1085,1092]},{"content":"To insert IInteractiveChannelInitializer:      1.","pos":[1099,1148]},{"content":"Override the &lt;xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A?displayProperty=fullName&gt; method on the &lt;xref:System.ServiceModel.Description.ClientCredentials?displayProperty=fullName&gt; class.","pos":[1150,1370],"source":"  Override the <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A?displayProperty=fullName> method on the <xref:System.ServiceModel.Description.ClientCredentials?displayProperty=fullName> class."},{"content":"2.","pos":[1376,1378]},{"content":"In that method, determine whether the endpoint requires an IInteractiveChannelInitializer and if so, add the IInteractiveChannelInitializer to the &lt;xref:System.ServiceModel.Dispatcher.ClientRuntime.InteractiveChannelInitializers%2A?displayProperty=fullName&gt; collection.","pos":[1380,1649],"source":"  In that method, determine whether the endpoint requires an IInteractiveChannelInitializer and if so, add the IInteractiveChannelInitializer to the <xref:System.ServiceModel.Dispatcher.ClientRuntime.InteractiveChannelInitializers%2A?displayProperty=fullName> collection."},{"content":"There are two ways application developers can make use of an inserted IInteractiveChannelInitializer.","pos":[1656,1757]},{"content":"The client application can call either &lt;xref:System.ServiceModel.ClientBase%601.DisplayInitializationUI%2A?displayProperty=fullName&gt; or &lt;xref:System.ServiceModel.IClientChannel.DisplayInitializationUI%2A?displayProperty=fullName&gt; (or an asynchronous version) prior to opening the channel (the <bpt id=\"p1\">*</bpt>explicit<ept id=\"p1\">*</ept> approach) or simply call the first operation (the <bpt id=\"p2\">*</bpt>implicit<ept id=\"p2\">*</ept> approach).","pos":[1758,2133],"source":" The client application can call either <xref:System.ServiceModel.ClientBase%601.DisplayInitializationUI%2A?displayProperty=fullName> or <xref:System.ServiceModel.IClientChannel.DisplayInitializationUI%2A?displayProperty=fullName> (or an asynchronous version) prior to opening the channel (the *explicit* approach) or simply call the first operation (the *implicit* approach)."},{"content":"If using the implicit approach, the application must call the first operation on an &lt;xref:System.ServiceModel.ClientBase%601&gt; or &lt;xref:System.ServiceModel.IClientChannel&gt; extension.","pos":[2140,2321],"source":"       If using the implicit approach, the application must call the first operation on an <xref:System.ServiceModel.ClientBase%601> or <xref:System.ServiceModel.IClientChannel> extension."},{"content":"If it calls anything other than the first operation, an exception is thrown.","pos":[2322,2398]},{"content":"If using the explicit approach, the application must perform the following steps in order:      1.","pos":[2405,2503]},{"content":"Call either &lt;xref:System.ServiceModel.ClientBase%601.DisplayInitializationUI%2A?displayProperty=fullName&gt; or &lt;xref:System.ServiceModel.IClientChannel.DisplayInitializationUI%2A?displayProperty=fullName&gt; (or an asynchronous version).","pos":[2505,2737],"source":"  Call either <xref:System.ServiceModel.ClientBase%601.DisplayInitializationUI%2A?displayProperty=fullName> or <xref:System.ServiceModel.IClientChannel.DisplayInitializationUI%2A?displayProperty=fullName> (or an asynchronous version)."},{"content":"2.","pos":[2743,2745]},{"content":"When the initializers have returned, call either the &lt;xref:System.ServiceModel.ICommunicationObject.Open%2A&gt; method on the &lt;xref:System.ServiceModel.IClientChannel&gt; object or on the &lt;xref:System.ServiceModel.IClientChannel&gt; object returned from the &lt;xref:System.ServiceModel.ClientBase%601.InnerChannel%2A?displayProperty=fullName&gt; property.","pos":[2747,3088],"source":"  When the initializers have returned, call either the <xref:System.ServiceModel.ICommunicationObject.Open%2A> method on the <xref:System.ServiceModel.IClientChannel> object or on the <xref:System.ServiceModel.IClientChannel> object returned from the <xref:System.ServiceModel.ClientBase%601.InnerChannel%2A?displayProperty=fullName> property."},{"content":"3.","pos":[3094,3096]},{"content":"Call operations.","pos":[3098,3114]},{"content":"It is recommended that production-quality applications control of the user-interface process by adopting the explicit approach.","pos":[3121,3248]},{"content":"Applications that use the implicit approach invoke the user-interface initializers, but if the user of the application fails to respond within the send timeout period of the binding, an exception is thrown when the user interface returns.","pos":[3255,3493]}]},{"pos":[5238,5324],"content":"An asynchronous call to begin using a user interface to obtain credential information.","needQuote":true,"needEscape":true,"nodes":[{"content":"An asynchronous call to begin using a user interface to obtain credential information.","pos":[0,86]}]},{"pos":[5337,6175],"content":"To implement <xref:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer>, perform the following steps in BeginDisplayInitializationUI:      1.  Prompt the user in what way you see fit and obtain an appropriate <xref:System.Net.NetworkCredential?displayProperty=fullName>.      2.  Add a custom channel parameter object to the collection returned by the <xref:System.ServiceModel.Channels.IChannel.GetProperty%2A?displayProperty=fullName> method on the <xref:System.ServiceModel.IClientChannel> object with a type parameter of <xref:System.ServiceModel.Channels.ChannelParameterCollection?displayProperty=fullName>. This channel parameter object is used by the custom <xref:System.ServiceModel.ClientCredentialsSecurityTokenManager?displayProperty=fullName> to establish the security tokens for the channel.      3.  Return.","needQuote":false,"needEscape":true,"nodes":[{"content":"To implement <xref:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer>, perform the following steps in BeginDisplayInitializationUI:      1.  Prompt the user in what way you see fit and obtain an appropriate <xref:System.Net.NetworkCredential?displayProperty=fullName>.      2.  Add a custom channel parameter object to the collection returned by the <xref:System.ServiceModel.Channels.IChannel.GetProperty%2A?displayProperty=fullName> method on the <xref:System.ServiceModel.IClientChannel> object with a type parameter of <xref:System.ServiceModel.Channels.ChannelParameterCollection?displayProperty=fullName>. This channel parameter object is used by the custom <xref:System.ServiceModel.ClientCredentialsSecurityTokenManager?displayProperty=fullName> to establish the security tokens for the channel.      3.  Return.","pos":[0,832],"nodes":[{"content":"To implement &lt;xref:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer&gt;, perform the following steps in BeginDisplayInitializationUI:      1.","pos":[0,151],"source":"To implement <xref:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer>, perform the following steps in BeginDisplayInitializationUI:      1."},{"content":"Prompt the user in what way you see fit and obtain an appropriate &lt;xref:System.Net.NetworkCredential?displayProperty=fullName&gt;.","pos":[153,280],"source":"  Prompt the user in what way you see fit and obtain an appropriate <xref:System.Net.NetworkCredential?displayProperty=fullName>."},{"content":"2.","pos":[286,288]},{"content":"Add a custom channel parameter object to the collection returned by the &lt;xref:System.ServiceModel.Channels.IChannel.GetProperty%2A?displayProperty=fullName&gt; method on the &lt;xref:System.ServiceModel.IClientChannel&gt; object with a type parameter of &lt;xref:System.ServiceModel.Channels.ChannelParameterCollection?displayProperty=fullName&gt;.","pos":[290,623],"source":"  Add a custom channel parameter object to the collection returned by the <xref:System.ServiceModel.Channels.IChannel.GetProperty%2A?displayProperty=fullName> method on the <xref:System.ServiceModel.IClientChannel> object with a type parameter of <xref:System.ServiceModel.Channels.ChannelParameterCollection?displayProperty=fullName>."},{"content":"This channel parameter object is used by the custom &lt;xref:System.ServiceModel.ClientCredentialsSecurityTokenManager?displayProperty=fullName&gt; to establish the security tokens for the channel.","pos":[624,815],"source":" This channel parameter object is used by the custom <xref:System.ServiceModel.ClientCredentialsSecurityTokenManager?displayProperty=fullName> to establish the security tokens for the channel."},{"content":"3.","pos":[821,823]},{"content":"Return.","pos":[825,832]}]}]},{"pos":[6433,6452],"content":"The client channel.","needQuote":true,"needEscape":true,"nodes":[{"content":"The client channel.","pos":[0,19]}]},{"pos":[6524,6544],"content":"The callback object.","needQuote":true,"needEscape":true,"nodes":[{"content":"The callback object.","pos":[0,20]}]},{"pos":[6606,6621],"content":"Any state data.","needQuote":true,"needEscape":true,"nodes":[{"content":"Any state data.","pos":[0,15]}]},{"pos":[6685,6797],"content":"The &lt;xref:System.IAsyncResult?displayProperty=fullName&gt; to use to call back when processing has completed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">&amp;lt;</ph>xref:System.IAsyncResult?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph> to use to call back when processing has completed.","pos":[0,112],"source":"The &lt;xref:System.IAsyncResult?displayProperty=fullName&gt; to use to call back when processing has completed."}]},{"pos":[7565,7693],"content":"Called when the <xref:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer.BeginDisplayInitializationUI*> has finished.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called when the &lt;xref:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer.BeginDisplayInitializationUI*&gt; has finished.","pos":[0,128],"source":"Called when the <xref:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer.BeginDisplayInitializationUI*> has finished."}]},{"pos":[7863,7925],"content":"The &lt;xref:System.IAsyncResult?displayProperty=fullName&gt;.","needQuote":true,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">&amp;lt;</ph>xref:System.IAsyncResult?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>.","pos":[0,62],"source":"The &lt;xref:System.IAsyncResult?displayProperty=fullName&gt;."}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ServiceModel.Dispatcher.IInteractiveChannelInitializer\n  id: IInteractiveChannelInitializer\n  children:\n  - System.ServiceModel.Dispatcher.IInteractiveChannelInitializer.BeginDisplayInitializationUI(System.ServiceModel.IClientChannel,System.AsyncCallback,System.Object)\n  - System.ServiceModel.Dispatcher.IInteractiveChannelInitializer.EndDisplayInitializationUI(System.IAsyncResult)\n  langs:\n  - csharp\n  name: IInteractiveChannelInitializer\n  nameWithType: IInteractiveChannelInitializer\n  fullName: System.ServiceModel.Dispatcher.IInteractiveChannelInitializer\n  type: Interface\n  summary: Defines the methods that enable a client application to display a user interface to collect identity information prior to creating the channel.\n  remarks: \"Implement the IInteractiveChannelInitializer interface to enable a client application to display a user interface that enables the user of the application to create or select the credentials prior to opening a channel.  \\n  \\n To implement IInteractiveChannelInitializer, perform the following steps in <xref:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer.BeginDisplayInitializationUI%2A?displayProperty=fullName>:  \\n  \\n1.  Prompt the user and obtain an appropriate <xref:System.Net.NetworkCredential?displayProperty=fullName>.  \\n  \\n2.  Add a custom channel parameter object to the collection returned by the <xref:System.ServiceModel.Channels.IChannel.GetProperty%2A?displayProperty=fullName> method on the <xref:System.ServiceModel.IClientChannel> object with a type parameter of <xref:System.ServiceModel.Channels.ChannelParameterCollection?displayProperty=fullName>. This channel parameter object is used by the custom <xref:System.ServiceModel.ClientCredentialsSecurityTokenManager?displayProperty=fullName> to establish the security tokens for the channel.  \\n  \\n3.  Return.  \\n  \\n To insert IInteractiveChannelInitializer:  \\n  \\n1.  Override the <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A?displayProperty=fullName> method on the <xref:System.ServiceModel.Description.ClientCredentials?displayProperty=fullName> class.  \\n  \\n2.  In that method, determine whether the endpoint requires an IInteractiveChannelInitializer and if so, add the IInteractiveChannelInitializer to the <xref:System.ServiceModel.Dispatcher.ClientRuntime.InteractiveChannelInitializers%2A?displayProperty=fullName> collection.  \\n  \\n There are two ways application developers can make use of an inserted IInteractiveChannelInitializer. The client application can call either <xref:System.ServiceModel.ClientBase%601.DisplayInitializationUI%2A?displayProperty=fullName> or <xref:System.ServiceModel.IClientChannel.DisplayInitializationUI%2A?displayProperty=fullName> (or an asynchronous version) prior to opening the channel (the *explicit* approach) or simply call the first operation (the *implicit* approach).  \\n  \\n If using the implicit approach, the application must call the first operation on an <xref:System.ServiceModel.ClientBase%601> or <xref:System.ServiceModel.IClientChannel> extension. If it calls anything other than the first operation, an exception is thrown.  \\n  \\n If using the explicit approach, the application must perform the following steps in order:  \\n  \\n1.  Call either <xref:System.ServiceModel.ClientBase%601.DisplayInitializationUI%2A?displayProperty=fullName> or <xref:System.ServiceModel.IClientChannel.DisplayInitializationUI%2A?displayProperty=fullName> (or an asynchronous version).  \\n  \\n2.  When the initializers have returned, call either the <xref:System.ServiceModel.ICommunicationObject.Open%2A> method on the <xref:System.ServiceModel.IClientChannel> object or on the <xref:System.ServiceModel.IClientChannel> object returned from the <xref:System.ServiceModel.ClientBase%601.InnerChannel%2A?displayProperty=fullName> property.  \\n  \\n3.  Call operations.  \\n  \\n It is recommended that production-quality applications control of the user-interface process by adopting the explicit approach.  \\n  \\n Applications that use the implicit approach invoke the user-interface initializers, but if the user of the application fails to respond within the send timeout period of the binding, an exception is thrown when the user interface returns.\"\n  syntax:\n    content: public interface IInteractiveChannelInitializer\n  implements: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Dispatcher.IInteractiveChannelInitializer.BeginDisplayInitializationUI(System.ServiceModel.IClientChannel,System.AsyncCallback,System.Object)\n  id: BeginDisplayInitializationUI(System.ServiceModel.IClientChannel,System.AsyncCallback,System.Object)\n  parent: System.ServiceModel.Dispatcher.IInteractiveChannelInitializer\n  langs:\n  - csharp\n  name: BeginDisplayInitializationUI(IClientChannel,AsyncCallback,Object)\n  nameWithType: IInteractiveChannelInitializer.BeginDisplayInitializationUI(IClientChannel,AsyncCallback,Object)\n  fullName: System.ServiceModel.Dispatcher.IInteractiveChannelInitializer.BeginDisplayInitializationUI(IClientChannel,AsyncCallback,Object)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Dispatcher\n  summary: An asynchronous call to begin using a user interface to obtain credential information.\n  remarks: \"To implement <xref:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer>, perform the following steps in BeginDisplayInitializationUI:  \\n  \\n1.  Prompt the user in what way you see fit and obtain an appropriate <xref:System.Net.NetworkCredential?displayProperty=fullName>.  \\n  \\n2.  Add a custom channel parameter object to the collection returned by the <xref:System.ServiceModel.Channels.IChannel.GetProperty%2A?displayProperty=fullName> method on the <xref:System.ServiceModel.IClientChannel> object with a type parameter of <xref:System.ServiceModel.Channels.ChannelParameterCollection?displayProperty=fullName>. This channel parameter object is used by the custom <xref:System.ServiceModel.ClientCredentialsSecurityTokenManager?displayProperty=fullName> to establish the security tokens for the channel.  \\n  \\n3.  Return.\"\n  syntax:\n    content: public IAsyncResult BeginDisplayInitializationUI (System.ServiceModel.IClientChannel channel, AsyncCallback callback, object state);\n    parameters:\n    - id: channel\n      type: System.ServiceModel.IClientChannel\n      description: The client channel.\n    - id: callback\n      type: System.AsyncCallback\n      description: The callback object.\n    - id: state\n      type: System.Object\n      description: Any state data.\n    return:\n      type: System.IAsyncResult\n      description: The &lt;xref:System.IAsyncResult?displayProperty=fullName&gt; to use to call back when processing has completed.\n  overload: System.ServiceModel.Dispatcher.IInteractiveChannelInitializer.BeginDisplayInitializationUI*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Dispatcher.IInteractiveChannelInitializer.EndDisplayInitializationUI(System.IAsyncResult)\n  id: EndDisplayInitializationUI(System.IAsyncResult)\n  parent: System.ServiceModel.Dispatcher.IInteractiveChannelInitializer\n  langs:\n  - csharp\n  name: EndDisplayInitializationUI(IAsyncResult)\n  nameWithType: IInteractiveChannelInitializer.EndDisplayInitializationUI(IAsyncResult)\n  fullName: System.ServiceModel.Dispatcher.IInteractiveChannelInitializer.EndDisplayInitializationUI(IAsyncResult)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Dispatcher\n  summary: Called when the <xref:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer.BeginDisplayInitializationUI*> has finished.\n  syntax:\n    content: public void EndDisplayInitializationUI (IAsyncResult result);\n    parameters:\n    - id: result\n      type: System.IAsyncResult\n      description: The &lt;xref:System.IAsyncResult?displayProperty=fullName&gt;.\n  overload: System.ServiceModel.Dispatcher.IInteractiveChannelInitializer.EndDisplayInitializationUI*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.ServiceModel.Dispatcher.IInteractiveChannelInitializer.BeginDisplayInitializationUI(System.ServiceModel.IClientChannel,System.AsyncCallback,System.Object)\n  parent: System.ServiceModel.Dispatcher.IInteractiveChannelInitializer\n  isExternal: false\n  name: BeginDisplayInitializationUI(IClientChannel,AsyncCallback,Object)\n  nameWithType: IInteractiveChannelInitializer.BeginDisplayInitializationUI(IClientChannel,AsyncCallback,Object)\n  fullName: System.ServiceModel.Dispatcher.IInteractiveChannelInitializer.BeginDisplayInitializationUI(IClientChannel,AsyncCallback,Object)\n- uid: System.IAsyncResult\n  parent: System\n  isExternal: true\n  name: IAsyncResult\n  nameWithType: IAsyncResult\n  fullName: System.IAsyncResult\n- uid: System.ServiceModel.IClientChannel\n  parent: System.ServiceModel\n  isExternal: true\n  name: IClientChannel\n  nameWithType: IClientChannel\n  fullName: System.ServiceModel.IClientChannel\n- uid: System.AsyncCallback\n  parent: System\n  isExternal: true\n  name: AsyncCallback\n  nameWithType: AsyncCallback\n  fullName: System.AsyncCallback\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ServiceModel.Dispatcher.IInteractiveChannelInitializer.EndDisplayInitializationUI(System.IAsyncResult)\n  parent: System.ServiceModel.Dispatcher.IInteractiveChannelInitializer\n  isExternal: false\n  name: EndDisplayInitializationUI(IAsyncResult)\n  nameWithType: IInteractiveChannelInitializer.EndDisplayInitializationUI(IAsyncResult)\n  fullName: System.ServiceModel.Dispatcher.IInteractiveChannelInitializer.EndDisplayInitializationUI(IAsyncResult)\n- uid: System.ServiceModel.Dispatcher.IInteractiveChannelInitializer.BeginDisplayInitializationUI*\n  parent: System.ServiceModel.Dispatcher.IInteractiveChannelInitializer\n  isExternal: false\n  name: BeginDisplayInitializationUI\n  nameWithType: IInteractiveChannelInitializer.BeginDisplayInitializationUI\n- uid: System.ServiceModel.Dispatcher.IInteractiveChannelInitializer.EndDisplayInitializationUI*\n  parent: System.ServiceModel.Dispatcher.IInteractiveChannelInitializer\n  isExternal: false\n  name: EndDisplayInitializationUI\n  nameWithType: IInteractiveChannelInitializer.EndDisplayInitializationUI\n"}