{"nodes":[{"pos":[1296,1402],"content":"Provides the features required to support both complex and simple scenarios when binding to a data source.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides the features required to support both complex and simple scenarios when binding to a data source.","pos":[0,106]}]},{"pos":[1415,2910],"content":"This interface is implemented by the <xref:System.Data.DataView> class. Implementation of a method should exhibit the same behavior as the implementation of that method in the <xref:System.Data.DataView> class.       When you call the <xref:System.ComponentModel.IBindingList.ApplySort%2A> or <xref:System.ComponentModel.IBindingList.RemoveSort%2A> methods, you should raise a <xref:System.ComponentModel.IBindingList.ListChanged> event with the <xref:System.ComponentModel.ListChangedType> enumeration.       When you call the <xref:System.ComponentModel.IBindingList.AddNew%2A> method, you should raise a <xref:System.ComponentModel.IBindingList.ListChanged> event with the <xref:System.ComponentModel.ListChangedType> enumeration carrying the appropriate index. The added row is in a state where pressing the ESC on a <xref:System.Windows.Forms.DataGridView> control can remove the new row. Raising the <xref:System.ComponentModel.IBindingList.ListChanged> event with the <xref:System.ComponentModel.ListChangedType> enumeration a second time on this row indicates that the item is now a row not in the \"new\" state.       When you remove an item or call the <xref:System.ComponentModel.IEditableObject.CancelEdit%2A> method on a new row (if that row implements <xref:System.ComponentModel.IEditableObject>), you should raise a <xref:System.ComponentModel.IBindingList.ListChanged> event with the <xref:System.ComponentModel.ListChangedType> enumeration carrying the appropriate index.","needQuote":false,"needEscape":true,"nodes":[{"content":"This interface is implemented by the <xref:System.Data.DataView> class. Implementation of a method should exhibit the same behavior as the implementation of that method in the <xref:System.Data.DataView> class.       When you call the <xref:System.ComponentModel.IBindingList.ApplySort%2A> or <xref:System.ComponentModel.IBindingList.RemoveSort%2A> methods, you should raise a <xref:System.ComponentModel.IBindingList.ListChanged> event with the <xref:System.ComponentModel.ListChangedType> enumeration.       When you call the <xref:System.ComponentModel.IBindingList.AddNew%2A> method, you should raise a <xref:System.ComponentModel.IBindingList.ListChanged> event with the <xref:System.ComponentModel.ListChangedType> enumeration carrying the appropriate index. The added row is in a state where pressing the ESC on a <xref:System.Windows.Forms.DataGridView> control can remove the new row. Raising the <xref:System.ComponentModel.IBindingList.ListChanged> event with the <xref:System.ComponentModel.ListChangedType> enumeration a second time on this row indicates that the item is now a row not in the \"new\" state.       When you remove an item or call the <xref:System.ComponentModel.IEditableObject.CancelEdit%2A> method on a new row (if that row implements <xref:System.ComponentModel.IEditableObject>), you should raise a <xref:System.ComponentModel.IBindingList.ListChanged> event with the <xref:System.ComponentModel.ListChangedType> enumeration carrying the appropriate index.","pos":[0,1487],"nodes":[{"content":"This interface is implemented by the &lt;xref:System.Data.DataView&gt; class.","pos":[0,71],"source":"This interface is implemented by the <xref:System.Data.DataView> class."},{"content":"Implementation of a method should exhibit the same behavior as the implementation of that method in the &lt;xref:System.Data.DataView&gt; class.","pos":[72,210],"source":" Implementation of a method should exhibit the same behavior as the implementation of that method in the <xref:System.Data.DataView> class."},{"content":"When you call the &lt;xref:System.ComponentModel.IBindingList.ApplySort%2A&gt; or &lt;xref:System.ComponentModel.IBindingList.RemoveSort%2A&gt; methods, you should raise a &lt;xref:System.ComponentModel.IBindingList.ListChanged&gt; event with the &lt;xref:System.ComponentModel.ListChangedType&gt; enumeration.","pos":[217,503],"source":"       When you call the <xref:System.ComponentModel.IBindingList.ApplySort%2A> or <xref:System.ComponentModel.IBindingList.RemoveSort%2A> methods, you should raise a <xref:System.ComponentModel.IBindingList.ListChanged> event with the <xref:System.ComponentModel.ListChangedType> enumeration."},{"content":"When you call the &lt;xref:System.ComponentModel.IBindingList.AddNew%2A&gt; method, you should raise a &lt;xref:System.ComponentModel.IBindingList.ListChanged&gt; event with the &lt;xref:System.ComponentModel.ListChangedType&gt; enumeration carrying the appropriate index.","pos":[510,764],"source":"       When you call the <xref:System.ComponentModel.IBindingList.AddNew%2A> method, you should raise a <xref:System.ComponentModel.IBindingList.ListChanged> event with the <xref:System.ComponentModel.ListChangedType> enumeration carrying the appropriate index."},{"content":"The added row is in a state where pressing the ESC on a &lt;xref:System.Windows.Forms.DataGridView&gt; control can remove the new row.","pos":[765,893],"source":" The added row is in a state where pressing the ESC on a <xref:System.Windows.Forms.DataGridView> control can remove the new row."},{"content":"Raising the &lt;xref:System.ComponentModel.IBindingList.ListChanged&gt; event with the &lt;xref:System.ComponentModel.ListChangedType&gt; enumeration a second time on this row indicates that the item is now a row not in the \"new\" state.","pos":[894,1118],"source":" Raising the <xref:System.ComponentModel.IBindingList.ListChanged> event with the <xref:System.ComponentModel.ListChangedType> enumeration a second time on this row indicates that the item is now a row not in the \"new\" state."},{"content":"When you remove an item or call the &lt;xref:System.ComponentModel.IEditableObject.CancelEdit%2A&gt; method on a new row (if that row implements &lt;xref:System.ComponentModel.IEditableObject&gt;), you should raise a &lt;xref:System.ComponentModel.IBindingList.ListChanged&gt; event with the &lt;xref:System.ComponentModel.ListChangedType&gt; enumeration carrying the appropriate index.","pos":[1125,1487],"source":"       When you remove an item or call the <xref:System.ComponentModel.IEditableObject.CancelEdit%2A> method on a new row (if that row implements <xref:System.ComponentModel.IEditableObject>), you should raise a <xref:System.ComponentModel.IBindingList.ListChanged> event with the <xref:System.ComponentModel.ListChangedType> enumeration carrying the appropriate index."}]}]},{"pos":[4138,4243],"content":"Adds the <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.PropertyDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to the indexes used for searching.","needQuote":true,"needEscape":true,"source":"Adds the <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> to the indexes used for searching."},{"pos":[4255,4345],"content":"The list must support this method. However, support for this method can be a nonoperation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The list must support this method. However, support for this method can be a nonoperation.","pos":[0,90],"nodes":[{"content":"The list must support this method.","pos":[0,34]},{"content":"However, support for this method can be a nonoperation.","pos":[35,90]}]}]},{"pos":[4550,4657],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.PropertyDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to add to the indexes used for searching.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> to add to the indexes used for searching."},{"pos":[5079,5107],"content":"Adds a new item to the list.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds a new item to the list.","pos":[0,28]}]},{"pos":[5120,6704],"content":"This method is supported only if <xref:System.ComponentModel.IBindingList.AllowNew%2A> is `true`; otherwise, a <xref:System.NotSupportedException> is thrown.       Implementing this method means that the <xref:System.ComponentModel.IBindingList> list must understand the type of objects to add to the list and must understand how to create a new instance of that type. For example, if you have a collection of `myCustomer` objects, the AddNew method should add a new `myCustomer` object to the list.      > [!NOTE] >  If the objects in this list implement the <xref:System.ComponentModel.IEditableObject> interface, calling the <xref:System.ComponentModel.IEditableObject.CancelEdit%2A> method should discard an object, not add it to the list, when the object was created using the AddNew method. The object should only be added to the list when the <xref:System.ComponentModel.IEditableObject.EndEdit%2A?displayProperty=fullName> method is called. Therefore, you must sychronize the object and the list carefully.       When this method is called, you should raise a <xref:System.ComponentModel.IBindingList.ListChanged> event with the <xref:System.ComponentModel.ListChangedType> enumeration carrying the appropriate index. The added row is in a state where hitting Esc on a <xref:System.Windows.Forms.DataGridView> control can remove the new row. Raising the <xref:System.ComponentModel.IBindingList.ListChanged> event with the <xref:System.ComponentModel.ListChangedType> enumeration a second time on this row indicates that the item is now a normal row (not in new state).","needQuote":false,"needEscape":true,"nodes":[{"content":"This method is supported only if &lt;xref:System.ComponentModel.IBindingList.AllowNew%2A&gt; is <ph id=\"ph1\">`true`</ph>; otherwise, a &lt;xref:System.NotSupportedException&gt; is thrown.","pos":[0,157],"source":"This method is supported only if <xref:System.ComponentModel.IBindingList.AllowNew%2A> is `true`; otherwise, a <xref:System.NotSupportedException> is thrown."},{"content":"Implementing this method means that the &lt;xref:System.ComponentModel.IBindingList&gt; list must understand the type of objects to add to the list and must understand how to create a new instance of that type.","pos":[164,368],"source":"       Implementing this method means that the <xref:System.ComponentModel.IBindingList> list must understand the type of objects to add to the list and must understand how to create a new instance of that type."},{"content":"For example, if you have a collection of <ph id=\"ph1\">`myCustomer`</ph> objects, the AddNew method should add a new <ph id=\"ph2\">`myCustomer`</ph> object to the list.","pos":[369,499],"source":" For example, if you have a collection of `myCustomer` objects, the AddNew method should add a new `myCustomer` object to the list."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If the objects in this list implement the &lt;xref:System.ComponentModel.IEditableObject&gt; interface, calling the &lt;xref:System.ComponentModel.IEditableObject.CancelEdit%2A&gt; method should discard an object, not add it to the list, when the object was created using the AddNew method.","pos":[505,796],"source":"      > [!NOTE] >  If the objects in this list implement the <xref:System.ComponentModel.IEditableObject> interface, calling the <xref:System.ComponentModel.IEditableObject.CancelEdit%2A> method should discard an object, not add it to the list, when the object was created using the AddNew method."},{"content":"The object should only be added to the list when the &lt;xref:System.ComponentModel.IEditableObject.EndEdit%2A?displayProperty=fullName&gt; method is called.","pos":[797,948],"source":" The object should only be added to the list when the <xref:System.ComponentModel.IEditableObject.EndEdit%2A?displayProperty=fullName> method is called."},{"content":"Therefore, you must sychronize the object and the list carefully.","pos":[949,1014]},{"content":"When this method is called, you should raise a &lt;xref:System.ComponentModel.IBindingList.ListChanged&gt; event with the &lt;xref:System.ComponentModel.ListChangedType&gt; enumeration carrying the appropriate index.","pos":[1021,1225],"source":"       When this method is called, you should raise a <xref:System.ComponentModel.IBindingList.ListChanged> event with the <xref:System.ComponentModel.ListChangedType> enumeration carrying the appropriate index."},{"content":"The added row is in a state where hitting Esc on a &lt;xref:System.Windows.Forms.DataGridView&gt; control can remove the new row.","pos":[1226,1349],"source":" The added row is in a state where hitting Esc on a <xref:System.Windows.Forms.DataGridView> control can remove the new row."},{"content":"Raising the &lt;xref:System.ComponentModel.IBindingList.ListChanged&gt; event with the &lt;xref:System.ComponentModel.ListChangedType&gt; enumeration a second time on this row indicates that the item is now a normal row (not in new state).","pos":[1350,1577],"source":" Raising the <xref:System.ComponentModel.IBindingList.ListChanged> event with the <xref:System.ComponentModel.ListChangedType> enumeration a second time on this row indicates that the item is now a normal row (not in new state)."}]},{"pos":[6830,6857],"content":"The item added to the list.","needQuote":true,"needEscape":true,"nodes":[{"content":"The item added to the list.","pos":[0,27]}]},{"pos":[7029,7147],"content":"&lt;xref:System.ComponentModel.IBindingList.AllowNew*&gt; is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref:System.ComponentModel.IBindingList.AllowNew*> is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[7506,7552],"content":"Gets whether you can update items in the list.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets whether you can update items in the list.","pos":[0,46]}]},{"pos":[7665,7841],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if you can update the items in the list; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if you can update the items in the list; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[8270,8369],"content":"Gets whether you can add items to the list using <xref:System.ComponentModel.IBindingList.AddNew*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets whether you can add items to the list using &lt;xref:System.ComponentModel.IBindingList.AddNew*&gt;.","pos":[0,99],"source":"Gets whether you can add items to the list using <xref:System.ComponentModel.IBindingList.AddNew*>."}]},{"pos":[8381,8571],"content":"If &lt;xref:System.Collections.IList.IsFixedSize%2A?displayProperty=fullName&gt; or &lt;xref:System.Collections.IList.IsReadOnly%2A?displayProperty=fullName&gt; is <ph id=\"ph1\">`true`</ph>, this property returns <ph id=\"ph2\">`false`</ph>.","needQuote":true,"needEscape":true,"source":"If <xref:System.Collections.IList.IsFixedSize%2A?displayProperty=fullName> or <xref:System.Collections.IList.IsReadOnly%2A?displayProperty=fullName> is `true`, this property returns `false`."},{"pos":[8683,8908],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if you can add items to the list using &lt;xref:System.ComponentModel.IBindingList.AddNew*&gt;; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if you can add items to the list using <xref:System.ComponentModel.IBindingList.AddNew*>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[9351,9491],"content":"Gets whether you can remove items from the list, using &lt;xref:System.Collections.IList.Remove<bpt id=\"p1\">*</bpt>&gt; or &lt;xref:System.Collections.IList.RemoveAt<ept id=\"p1\">*</ept>&gt;.","needQuote":true,"needEscape":true,"source":"Gets whether you can remove items from the list, using <xref:System.Collections.IList.Remove*> or <xref:System.Collections.IList.RemoveAt*>."},{"pos":[9504,9932],"content":"If <xref:System.Collections.IList.IsFixedSize%2A?displayProperty=fullName> or <xref:System.Collections.IList.IsReadOnly%2A?displayProperty=fullName> is `true`, this property returns `false`.      > [!NOTE] >  If AllowRemove returns `false`, <xref:System.Collections.IList.Remove%2A?displayProperty=fullName> and <xref:System.Collections.IList.RemoveAt%2A?displayProperty=fullName> throw a <xref:System.NotSupportedException>.","needQuote":false,"needEscape":true,"nodes":[{"content":"If &lt;xref:System.Collections.IList.IsFixedSize%2A?displayProperty=fullName&gt; or &lt;xref:System.Collections.IList.IsReadOnly%2A?displayProperty=fullName&gt; is <ph id=\"ph1\">`true`</ph>, this property returns <ph id=\"ph2\">`false`</ph>.","pos":[0,190],"source":"If <xref:System.Collections.IList.IsFixedSize%2A?displayProperty=fullName> or <xref:System.Collections.IList.IsReadOnly%2A?displayProperty=fullName> is `true`, this property returns `false`."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If AllowRemove returns <ph id=\"ph2\">`false`</ph>, &lt;xref:System.Collections.IList.Remove%2A?displayProperty=fullName&gt; and &lt;xref:System.Collections.IList.RemoveAt%2A?displayProperty=fullName&gt; throw a &lt;xref:System.NotSupportedException&gt;.","pos":[196,425],"source":"      > [!NOTE] >  If AllowRemove returns `false`, <xref:System.Collections.IList.Remove%2A?displayProperty=fullName> and <xref:System.Collections.IList.RemoveAt%2A?displayProperty=fullName> throw a <xref:System.NotSupportedException>."}]},{"pos":[10048,10222],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if you can remove items from the list; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if you can remove items from the list; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[10934,11089],"content":"Sorts the list based on a <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.PropertyDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and a <bpt id=\"p2\">&lt;xref href=\"System.ComponentModel.ListSortDirection\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Sorts the list based on a <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> and a <xref href=\"System.ComponentModel.ListSortDirection\"></xref>."},{"pos":[11102,11358],"content":"If items are added or removed, these items are placed in the order of the sort.       This method is supported if <xref:System.ComponentModel.IBindingList.SupportsSorting%2A> is `true`; otherwise, this method throws a <xref:System.NotSupportedException>.","needQuote":false,"needEscape":true,"nodes":[{"content":"If items are added or removed, these items are placed in the order of the sort.","pos":[0,79]},{"content":"This method is supported if &lt;xref:System.ComponentModel.IBindingList.SupportsSorting%2A&gt; is <ph id=\"ph1\">`true`</ph>; otherwise, this method throws a &lt;xref:System.NotSupportedException&gt;.","pos":[86,254],"source":"       This method is supported if <xref:System.ComponentModel.IBindingList.SupportsSorting%2A> is `true`; otherwise, this method throws a <xref:System.NotSupportedException>."}]},{"pos":[11616,11693],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.PropertyDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to sort by.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> to sort by."},{"pos":[11785,11864],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.ListSortDirection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.ComponentModel.ListSortDirection\"></xref> values."},{"pos":[12039,12164],"content":"&lt;xref:System.ComponentModel.IBindingList.SupportsSorting*&gt; is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref:System.ComponentModel.IBindingList.SupportsSorting*> is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[12689,12799],"content":"Returns the index of the row that has the given <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.PropertyDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns the index of the row that has the given <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref>."},{"pos":[12812,13112],"content":"This method will select the first row where the value of the `property` parameter equals the value of the `key` parameter.       This method is supported if <xref:System.ComponentModel.IBindingList.SupportsSearching%2A> is `true`, otherwise this method throws a <xref:System.NotSupportedException>.","needQuote":false,"needEscape":true,"nodes":[{"content":"This method will select the first row where the value of the <ph id=\"ph1\">`property`</ph> parameter equals the value of the <ph id=\"ph2\">`key`</ph> parameter.","pos":[0,122],"source":"This method will select the first row where the value of the `property` parameter equals the value of the `key` parameter."},{"content":"This method is supported if &lt;xref:System.ComponentModel.IBindingList.SupportsSearching%2A&gt; is <ph id=\"ph1\">`true`</ph>, otherwise this method throws a &lt;xref:System.NotSupportedException&gt;.","pos":[129,298],"source":"       This method is supported if <xref:System.ComponentModel.IBindingList.SupportsSearching%2A> is `true`, otherwise this method throws a <xref:System.NotSupportedException>."}]},{"pos":[13675,13754],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.PropertyDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to search on.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> to search on."},{"pos":[13814,13866],"content":"The value of the <ph id=\"ph1\">`property`</ph> parameter to search for.","needQuote":true,"needEscape":true,"source":"The value of the `property` parameter to search for."},{"pos":[13923,14025],"content":"The index of the row that has the given <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.PropertyDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The index of the row that has the given <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref>."},{"pos":[14195,14322],"content":"&lt;xref:System.ComponentModel.IBindingList.SupportsSearching*&gt; is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref:System.ComponentModel.IBindingList.SupportsSearching*> is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[14676,14722],"content":"Gets whether the items in the list are sorted.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets whether the items in the list are sorted.","pos":[0,46]}]},{"pos":[14735,14996],"content":"This property is supported if <xref:System.ComponentModel.IBindingList.SupportsSorting%2A> is `true`; otherwise, this property throws a <xref:System.NotSupportedException>.       If IsSorted returns `true`, items are added or removed in the order of the sort.","needQuote":false,"needEscape":true,"nodes":[{"content":"This property is supported if &lt;xref:System.ComponentModel.IBindingList.SupportsSorting%2A&gt; is <ph id=\"ph1\">`true`</ph>; otherwise, this property throws a &lt;xref:System.NotSupportedException&gt;.","pos":[0,172],"source":"This property is supported if <xref:System.ComponentModel.IBindingList.SupportsSorting%2A> is `true`; otherwise, this property throws a <xref:System.NotSupportedException>."},{"content":"If IsSorted returns <ph id=\"ph1\">`true`</ph>, items are added or removed in the order of the sort.","pos":[179,259],"source":"       If IsSorted returns `true`, items are added or removed in the order of the sort."}]},{"pos":[15109,15395],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if &lt;xref:System.ComponentModel.IBindingList.ApplySort<bpt id=\"p2\">*</bpt>&gt; has been called and &lt;xref:System.ComponentModel.IBindingList.RemoveSort<ept id=\"p2\">*</ept>&gt; has not been called; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <xref:System.ComponentModel.IBindingList.ApplySort*> has been called and <xref:System.ComponentModel.IBindingList.RemoveSort*> has not been called; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[15569,15694],"content":"&lt;xref:System.ComponentModel.IBindingList.SupportsSorting*&gt; is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref:System.ComponentModel.IBindingList.SupportsSorting*> is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[16060,16120],"content":"Occurs when the list changes or an item in the list changes.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs when the list changes or an item in the list changes.","pos":[0,60]}]},{"pos":[16132,16256],"content":"This event is raised only if the &lt;xref:System.ComponentModel.IBindingList.SupportsChangeNotification%2A&gt; property is <ph id=\"ph1\">`true`</ph>.","needQuote":true,"needEscape":true,"source":"This event is raised only if the <xref:System.ComponentModel.IBindingList.SupportsChangeNotification%2A> property is `true`."},{"pos":[16441,16453],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[16981,17091],"content":"Removes the <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.PropertyDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> from the indexes used for searching.","needQuote":true,"needEscape":true,"source":"Removes the <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> from the indexes used for searching."},{"pos":[17103,17193],"content":"The list must support this method. However, support for this method can be a nonoperation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The list must support this method. However, support for this method can be a nonoperation.","pos":[0,90],"nodes":[{"content":"The list must support this method.","pos":[0,34]},{"content":"However, support for this method can be a nonoperation.","pos":[35,90]}]}]},{"pos":[17401,17513],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.PropertyDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to remove from the indexes used for searching.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> to remove from the indexes used for searching."},{"pos":[17958,18042],"content":"Removes any sort applied using <xref:System.ComponentModel.IBindingList.ApplySort*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Removes any sort applied using &lt;xref:System.ComponentModel.IBindingList.ApplySort*&gt;.","pos":[0,84],"source":"Removes any sort applied using <xref:System.ComponentModel.IBindingList.ApplySort*>."}]},{"pos":[18055,18408],"content":"This property is supported if <xref:System.ComponentModel.IBindingList.SupportsSorting%2A> is `true`; otherwise, this property throws a <xref:System.NotSupportedException>.       When you call this method, you should raise a <xref:System.ComponentModel.IBindingList.ListChanged> event with the <xref:System.ComponentModel.ListChangedType> enumeration.","needQuote":false,"needEscape":true,"nodes":[{"content":"This property is supported if &lt;xref:System.ComponentModel.IBindingList.SupportsSorting%2A&gt; is <ph id=\"ph1\">`true`</ph>; otherwise, this property throws a &lt;xref:System.NotSupportedException&gt;.","pos":[0,172],"source":"This property is supported if <xref:System.ComponentModel.IBindingList.SupportsSorting%2A> is `true`; otherwise, this property throws a <xref:System.NotSupportedException>."},{"content":"When you call this method, you should raise a &lt;xref:System.ComponentModel.IBindingList.ListChanged&gt; event with the &lt;xref:System.ComponentModel.ListChangedType&gt; enumeration.","pos":[179,351],"source":"       When you call this method, you should raise a <xref:System.ComponentModel.IBindingList.ListChanged> event with the <xref:System.ComponentModel.ListChangedType> enumeration."}]},{"pos":[18654,18779],"content":"&lt;xref:System.ComponentModel.IBindingList.SupportsSorting*&gt; is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref:System.ComponentModel.IBindingList.SupportsSorting*> is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[19158,19189],"content":"Gets the direction of the sort.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the direction of the sort.","pos":[0,31]}]},{"pos":[19201,19373],"content":"This property is supported if &lt;xref:System.ComponentModel.IBindingList.SupportsSorting%2A&gt; is <ph id=\"ph1\">`true`</ph>; otherwise, this property throws a &lt;xref:System.NotSupportedException&gt;.","needQuote":true,"needEscape":true,"source":"This property is supported if <xref:System.ComponentModel.IBindingList.SupportsSorting%2A> is `true`; otherwise, this property throws a <xref:System.NotSupportedException>."},{"pos":[19550,19629],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.ListSortDirection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.ComponentModel.ListSortDirection\"></xref> values."},{"pos":[19808,19933],"content":"&lt;xref:System.ComponentModel.IBindingList.SupportsSorting*&gt; is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref:System.ComponentModel.IBindingList.SupportsSorting*> is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[20307,20409],"content":"Gets the <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.PropertyDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that is being used for sorting.","needQuote":true,"needEscape":true,"source":"Gets the <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> that is being used for sorting."},{"pos":[20421,20593],"content":"This property is supported if &lt;xref:System.ComponentModel.IBindingList.SupportsSorting%2A&gt; is <ph id=\"ph1\">`true`</ph>; otherwise, this property throws a &lt;xref:System.NotSupportedException&gt;.","needQuote":true,"needEscape":true,"source":"This property is supported if <xref:System.ComponentModel.IBindingList.SupportsSorting%2A> is `true`; otherwise, this property throws a <xref:System.NotSupportedException>."},{"pos":[20771,20868],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.PropertyDescriptor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that is being used for sorting.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> that is being used for sorting."},{"pos":[21046,21171],"content":"&lt;xref:System.ComponentModel.IBindingList.SupportsSorting*&gt; is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref:System.ComponentModel.IBindingList.SupportsSorting*> is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[21615,21767],"content":"Gets whether a <bpt id=\"p1\">&lt;xref href=\"System.ComponentModel.IBindingList.ListChanged\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event is raised when the list changes or an item in the list changes.","needQuote":true,"needEscape":true,"source":"Gets whether a <xref href=\"System.ComponentModel.IBindingList.ListChanged\"></xref> event is raised when the list changes or an item in the list changes."},{"pos":[21779,21922],"content":"Objects in the list must notify the list when they change, so the list can raise a <xref:System.ComponentModel.IBindingList.ListChanged> event.","needQuote":true,"needEscape":true,"nodes":[{"content":"Objects in the list must notify the list when they change, so the list can raise a &lt;xref:System.ComponentModel.IBindingList.ListChanged&gt; event.","pos":[0,143],"source":"Objects in the list must notify the list when they change, so the list can raise a <xref:System.ComponentModel.IBindingList.ListChanged> event."}]},{"pos":[22052,22323],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if a <bpt id=\"p2\">&lt;xref href=\"System.ComponentModel.IBindingList.ListChanged\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> event is raised when the list changes or when an item changes; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if a <xref href=\"System.ComponentModel.IBindingList.ListChanged\"></xref> event is raised when the list changes or when an item changes; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[22814,22920],"content":"Gets whether the list supports searching using the <xref:System.ComponentModel.IBindingList.Find*> method.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets whether the list supports searching using the &lt;xref:System.ComponentModel.IBindingList.Find*&gt; method.","pos":[0,106],"source":"Gets whether the list supports searching using the <xref:System.ComponentModel.IBindingList.Find*> method."}]},{"pos":[23424,23656],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the list supports searching using the &lt;xref:System.ComponentModel.IBindingList.Find*&gt; method; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the list supports searching using the <xref:System.ComponentModel.IBindingList.Find*> method; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[24128,24167],"content":"Gets whether the list supports sorting.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets whether the list supports sorting.","pos":[0,39]}]},{"pos":[24179,24516],"content":"If this property is <ph id=\"ph1\">`true`</ph>, then &lt;xref:System.ComponentModel.IBindingList.IsSorted%2A&gt;, &lt;xref:System.ComponentModel.IBindingList.SortProperty%2A&gt;, &lt;xref:System.ComponentModel.IBindingList.SortDirection%2A&gt;, &lt;xref:System.ComponentModel.IBindingList.ApplySort%2A&gt;, and &lt;xref:System.ComponentModel.IBindingList.RemoveSort%2A&gt; are supported.","needQuote":true,"needEscape":true,"source":"If this property is `true`, then <xref:System.ComponentModel.IBindingList.IsSorted%2A>, <xref:System.ComponentModel.IBindingList.SortProperty%2A>, <xref:System.ComponentModel.IBindingList.SortDirection%2A>, <xref:System.ComponentModel.IBindingList.ApplySort%2A>, and <xref:System.ComponentModel.IBindingList.RemoveSort%2A> are supported."},{"pos":[24635,24800],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the list supports sorting; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the list supports sorting; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ComponentModel.IBindingList\n  id: IBindingList\n  children:\n  - System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)\n  - System.ComponentModel.IBindingList.AddNew\n  - System.ComponentModel.IBindingList.AllowEdit\n  - System.ComponentModel.IBindingList.AllowNew\n  - System.ComponentModel.IBindingList.AllowRemove\n  - System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)\n  - System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)\n  - System.ComponentModel.IBindingList.IsSorted\n  - System.ComponentModel.IBindingList.ListChanged\n  - System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)\n  - System.ComponentModel.IBindingList.RemoveSort\n  - System.ComponentModel.IBindingList.SortDirection\n  - System.ComponentModel.IBindingList.SortProperty\n  - System.ComponentModel.IBindingList.SupportsChangeNotification\n  - System.ComponentModel.IBindingList.SupportsSearching\n  - System.ComponentModel.IBindingList.SupportsSorting\n  langs:\n  - csharp\n  name: IBindingList\n  nameWithType: IBindingList\n  fullName: System.ComponentModel.IBindingList\n  type: Interface\n  summary: Provides the features required to support both complex and simple scenarios when binding to a data source.\n  remarks: \"This interface is implemented by the <xref:System.Data.DataView> class. Implementation of a method should exhibit the same behavior as the implementation of that method in the <xref:System.Data.DataView> class.  \\n  \\n When you call the <xref:System.ComponentModel.IBindingList.ApplySort%2A> or <xref:System.ComponentModel.IBindingList.RemoveSort%2A> methods, you should raise a <xref:System.ComponentModel.IBindingList.ListChanged> event with the <xref:System.ComponentModel.ListChangedType> enumeration.  \\n  \\n When you call the <xref:System.ComponentModel.IBindingList.AddNew%2A> method, you should raise a <xref:System.ComponentModel.IBindingList.ListChanged> event with the <xref:System.ComponentModel.ListChangedType> enumeration carrying the appropriate index. The added row is in a state where pressing the ESC on a <xref:System.Windows.Forms.DataGridView> control can remove the new row. Raising the <xref:System.ComponentModel.IBindingList.ListChanged> event with the <xref:System.ComponentModel.ListChangedType> enumeration a second time on this row indicates that the item is now a row not in the \\\"new\\\" state.  \\n  \\n When you remove an item or call the <xref:System.ComponentModel.IEditableObject.CancelEdit%2A> method on a new row (if that row implements <xref:System.ComponentModel.IEditableObject>), you should raise a <xref:System.ComponentModel.IBindingList.ListChanged> event with the <xref:System.ComponentModel.ListChangedType> enumeration carrying the appropriate index.\"\n  example:\n  - \"The following example provides a simple implementation of the IBindingList interface. The `CustomerList` class stores customer information in a list. This example assumes that you have used the `Customer` class that can be found in the example in the <xref:System.ComponentModel.IEditableObject> class.  \\n  \\n [!code-cs[Binding_Editable#2](~/add/codesnippet/csharp/t-system.componentmodel._23_1.cs)]\\n [!code-cpp[Binding_Editable#2](~/add/codesnippet/cpp/t-system.componentmodel._23_1.cpp)]\\n [!code-vb[Binding_Editable#2](~/add/codesnippet/visualbasic/t-system.componentmodel._23_1.vb)]\"\n  syntax:\n    content: 'public interface IBindingList : System.Collections.IList'\n  implements:\n  - System.Collections.IList\n  platform:\n  - net462\n- uid: System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)\n  id: AddIndex(System.ComponentModel.PropertyDescriptor)\n  parent: System.ComponentModel.IBindingList\n  langs:\n  - csharp\n  name: AddIndex(PropertyDescriptor)\n  nameWithType: IBindingList.AddIndex(PropertyDescriptor)\n  fullName: System.ComponentModel.IBindingList.AddIndex(PropertyDescriptor)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Adds the <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> to the indexes used for searching.\n  remarks: The list must support this method. However, support for this method can be a nonoperation.\n  syntax:\n    content: public void AddIndex (System.ComponentModel.PropertyDescriptor property);\n    parameters:\n    - id: property\n      type: System.ComponentModel.PropertyDescriptor\n      description: The <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> to add to the indexes used for searching.\n  overload: System.ComponentModel.IBindingList.AddIndex*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.IBindingList.AddNew\n  id: AddNew\n  parent: System.ComponentModel.IBindingList\n  langs:\n  - csharp\n  name: AddNew()\n  nameWithType: IBindingList.AddNew()\n  fullName: System.ComponentModel.IBindingList.AddNew()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Adds a new item to the list.\n  remarks: \"This method is supported only if <xref:System.ComponentModel.IBindingList.AllowNew%2A> is `true`; otherwise, a <xref:System.NotSupportedException> is thrown.  \\n  \\n Implementing this method means that the <xref:System.ComponentModel.IBindingList> list must understand the type of objects to add to the list and must understand how to create a new instance of that type. For example, if you have a collection of `myCustomer` objects, the AddNew method should add a new `myCustomer` object to the list.  \\n  \\n> [!NOTE]\\n>  If the objects in this list implement the <xref:System.ComponentModel.IEditableObject> interface, calling the <xref:System.ComponentModel.IEditableObject.CancelEdit%2A> method should discard an object, not add it to the list, when the object was created using the AddNew method. The object should only be added to the list when the <xref:System.ComponentModel.IEditableObject.EndEdit%2A?displayProperty=fullName> method is called. Therefore, you must sychronize the object and the list carefully.  \\n  \\n When this method is called, you should raise a <xref:System.ComponentModel.IBindingList.ListChanged> event with the <xref:System.ComponentModel.ListChangedType> enumeration carrying the appropriate index. The added row is in a state where hitting Esc on a <xref:System.Windows.Forms.DataGridView> control can remove the new row. Raising the <xref:System.ComponentModel.IBindingList.ListChanged> event with the <xref:System.ComponentModel.ListChangedType> enumeration a second time on this row indicates that the item is now a normal row (not in new state).\"\n  syntax:\n    content: public object AddNew ();\n    parameters: []\n    return:\n      type: System.Object\n      description: The item added to the list.\n  overload: System.ComponentModel.IBindingList.AddNew*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <xref:System.ComponentModel.IBindingList.AllowNew*> is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.ComponentModel.IBindingList.AllowEdit\n  id: AllowEdit\n  parent: System.ComponentModel.IBindingList\n  langs:\n  - csharp\n  name: AllowEdit\n  nameWithType: IBindingList.AllowEdit\n  fullName: System.ComponentModel.IBindingList.AllowEdit\n  type: Property\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Gets whether you can update items in the list.\n  syntax:\n    content: public bool AllowEdit { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if you can update the items in the list; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ComponentModel.IBindingList.AllowEdit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.IBindingList.AllowNew\n  id: AllowNew\n  parent: System.ComponentModel.IBindingList\n  langs:\n  - csharp\n  name: AllowNew\n  nameWithType: IBindingList.AllowNew\n  fullName: System.ComponentModel.IBindingList.AllowNew\n  type: Property\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Gets whether you can add items to the list using <xref:System.ComponentModel.IBindingList.AddNew*>.\n  remarks: If <xref:System.Collections.IList.IsFixedSize%2A?displayProperty=fullName> or <xref:System.Collections.IList.IsReadOnly%2A?displayProperty=fullName> is `true`, this property returns `false`.\n  syntax:\n    content: public bool AllowNew { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if you can add items to the list using <xref:System.ComponentModel.IBindingList.AddNew*>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ComponentModel.IBindingList.AllowNew*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.IBindingList.AllowRemove\n  id: AllowRemove\n  parent: System.ComponentModel.IBindingList\n  langs:\n  - csharp\n  name: AllowRemove\n  nameWithType: IBindingList.AllowRemove\n  fullName: System.ComponentModel.IBindingList.AllowRemove\n  type: Property\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Gets whether you can remove items from the list, using <xref:System.Collections.IList.Remove*> or <xref:System.Collections.IList.RemoveAt*>.\n  remarks: \"If <xref:System.Collections.IList.IsFixedSize%2A?displayProperty=fullName> or <xref:System.Collections.IList.IsReadOnly%2A?displayProperty=fullName> is `true`, this property returns `false`.  \\n  \\n> [!NOTE]\\n>  If AllowRemove returns `false`, <xref:System.Collections.IList.Remove%2A?displayProperty=fullName> and <xref:System.Collections.IList.RemoveAt%2A?displayProperty=fullName> throw a <xref:System.NotSupportedException>.\"\n  syntax:\n    content: public bool AllowRemove { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if you can remove items from the list; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ComponentModel.IBindingList.AllowRemove*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)\n  id: ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)\n  parent: System.ComponentModel.IBindingList\n  langs:\n  - csharp\n  name: ApplySort(PropertyDescriptor,ListSortDirection)\n  nameWithType: IBindingList.ApplySort(PropertyDescriptor,ListSortDirection)\n  fullName: System.ComponentModel.IBindingList.ApplySort(PropertyDescriptor,ListSortDirection)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Sorts the list based on a <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> and a <xref href=\"System.ComponentModel.ListSortDirection\"></xref>.\n  remarks: \"If items are added or removed, these items are placed in the order of the sort.  \\n  \\n This method is supported if <xref:System.ComponentModel.IBindingList.SupportsSorting%2A> is `true`; otherwise, this method throws a <xref:System.NotSupportedException>.\"\n  syntax:\n    content: public void ApplySort (System.ComponentModel.PropertyDescriptor property, System.ComponentModel.ListSortDirection direction);\n    parameters:\n    - id: property\n      type: System.ComponentModel.PropertyDescriptor\n      description: The <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> to sort by.\n    - id: direction\n      type: System.ComponentModel.ListSortDirection\n      description: One of the <xref href=\"System.ComponentModel.ListSortDirection\"></xref> values.\n  overload: System.ComponentModel.IBindingList.ApplySort*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <xref:System.ComponentModel.IBindingList.SupportsSorting*> is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)\n  id: Find(System.ComponentModel.PropertyDescriptor,System.Object)\n  parent: System.ComponentModel.IBindingList\n  langs:\n  - csharp\n  name: Find(PropertyDescriptor,Object)\n  nameWithType: IBindingList.Find(PropertyDescriptor,Object)\n  fullName: System.ComponentModel.IBindingList.Find(PropertyDescriptor,Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Returns the index of the row that has the given <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref>.\n  remarks: \"This method will select the first row where the value of the `property` parameter equals the value of the `key` parameter.  \\n  \\n This method is supported if <xref:System.ComponentModel.IBindingList.SupportsSearching%2A> is `true`, otherwise this method throws a <xref:System.NotSupportedException>.\"\n  example:\n  - \"The following code example demonstrates how to implement the Find method.  \\n  \\n [!code-cs[System.Windows.Forms.BindingSourceAndBindingListOfT#3](~/add/codesnippet/csharp/03c83841-f554-4f60-86f9-_1.cs)]\\n [!code-vb[System.Windows.Forms.BindingSourceAndBindingListOfT#3](~/add/codesnippet/visualbasic/03c83841-f554-4f60-86f9-_1.vb)]\"\n  syntax:\n    content: public int Find (System.ComponentModel.PropertyDescriptor property, object key);\n    parameters:\n    - id: property\n      type: System.ComponentModel.PropertyDescriptor\n      description: The <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> to search on.\n    - id: key\n      type: System.Object\n      description: The value of the `property` parameter to search for.\n    return:\n      type: System.Int32\n      description: The index of the row that has the given <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref>.\n  overload: System.ComponentModel.IBindingList.Find*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <xref:System.ComponentModel.IBindingList.SupportsSearching*> is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.ComponentModel.IBindingList.IsSorted\n  id: IsSorted\n  parent: System.ComponentModel.IBindingList\n  langs:\n  - csharp\n  name: IsSorted\n  nameWithType: IBindingList.IsSorted\n  fullName: System.ComponentModel.IBindingList.IsSorted\n  type: Property\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Gets whether the items in the list are sorted.\n  remarks: \"This property is supported if <xref:System.ComponentModel.IBindingList.SupportsSorting%2A> is `true`; otherwise, this property throws a <xref:System.NotSupportedException>.  \\n  \\n If IsSorted returns `true`, items are added or removed in the order of the sort.\"\n  syntax:\n    content: public bool IsSorted { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <xref:System.ComponentModel.IBindingList.ApplySort*> has been called and <xref:System.ComponentModel.IBindingList.RemoveSort*> has not been called; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ComponentModel.IBindingList.IsSorted*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <xref:System.ComponentModel.IBindingList.SupportsSorting*> is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.ComponentModel.IBindingList.ListChanged\n  id: ListChanged\n  parent: System.ComponentModel.IBindingList\n  langs:\n  - csharp\n  name: ListChanged\n  nameWithType: IBindingList.ListChanged\n  fullName: System.ComponentModel.IBindingList.ListChanged\n  type: Event\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Occurs when the list changes or an item in the list changes.\n  remarks: This event is raised only if the <xref:System.ComponentModel.IBindingList.SupportsChangeNotification%2A> property is `true`.\n  syntax:\n    content: public event System.ComponentModel.ListChangedEventHandler ListChanged;\n    return:\n      type: System.ComponentModel.ListChangedEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)\n  id: RemoveIndex(System.ComponentModel.PropertyDescriptor)\n  parent: System.ComponentModel.IBindingList\n  langs:\n  - csharp\n  name: RemoveIndex(PropertyDescriptor)\n  nameWithType: IBindingList.RemoveIndex(PropertyDescriptor)\n  fullName: System.ComponentModel.IBindingList.RemoveIndex(PropertyDescriptor)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Removes the <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> from the indexes used for searching.\n  remarks: The list must support this method. However, support for this method can be a nonoperation.\n  syntax:\n    content: public void RemoveIndex (System.ComponentModel.PropertyDescriptor property);\n    parameters:\n    - id: property\n      type: System.ComponentModel.PropertyDescriptor\n      description: The <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> to remove from the indexes used for searching.\n  overload: System.ComponentModel.IBindingList.RemoveIndex*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.IBindingList.RemoveSort\n  id: RemoveSort\n  parent: System.ComponentModel.IBindingList\n  langs:\n  - csharp\n  name: RemoveSort()\n  nameWithType: IBindingList.RemoveSort()\n  fullName: System.ComponentModel.IBindingList.RemoveSort()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Removes any sort applied using <xref:System.ComponentModel.IBindingList.ApplySort*>.\n  remarks: \"This property is supported if <xref:System.ComponentModel.IBindingList.SupportsSorting%2A> is `true`; otherwise, this property throws a <xref:System.NotSupportedException>.  \\n  \\n When you call this method, you should raise a <xref:System.ComponentModel.IBindingList.ListChanged> event with the <xref:System.ComponentModel.ListChangedType> enumeration.\"\n  syntax:\n    content: public void RemoveSort ();\n    parameters: []\n  overload: System.ComponentModel.IBindingList.RemoveSort*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <xref:System.ComponentModel.IBindingList.SupportsSorting*> is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.ComponentModel.IBindingList.SortDirection\n  id: SortDirection\n  parent: System.ComponentModel.IBindingList\n  langs:\n  - csharp\n  name: SortDirection\n  nameWithType: IBindingList.SortDirection\n  fullName: System.ComponentModel.IBindingList.SortDirection\n  type: Property\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Gets the direction of the sort.\n  remarks: This property is supported if <xref:System.ComponentModel.IBindingList.SupportsSorting%2A> is `true`; otherwise, this property throws a <xref:System.NotSupportedException>.\n  syntax:\n    content: public System.ComponentModel.ListSortDirection SortDirection { get; }\n    return:\n      type: System.ComponentModel.ListSortDirection\n      description: One of the <xref href=\"System.ComponentModel.ListSortDirection\"></xref> values.\n  overload: System.ComponentModel.IBindingList.SortDirection*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <xref:System.ComponentModel.IBindingList.SupportsSorting*> is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.ComponentModel.IBindingList.SortProperty\n  id: SortProperty\n  parent: System.ComponentModel.IBindingList\n  langs:\n  - csharp\n  name: SortProperty\n  nameWithType: IBindingList.SortProperty\n  fullName: System.ComponentModel.IBindingList.SortProperty\n  type: Property\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Gets the <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> that is being used for sorting.\n  remarks: This property is supported if <xref:System.ComponentModel.IBindingList.SupportsSorting%2A> is `true`; otherwise, this property throws a <xref:System.NotSupportedException>.\n  syntax:\n    content: public System.ComponentModel.PropertyDescriptor SortProperty { get; }\n    return:\n      type: System.ComponentModel.PropertyDescriptor\n      description: The <xref href=\"System.ComponentModel.PropertyDescriptor\"></xref> that is being used for sorting.\n  overload: System.ComponentModel.IBindingList.SortProperty*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <xref:System.ComponentModel.IBindingList.SupportsSorting*> is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.ComponentModel.IBindingList.SupportsChangeNotification\n  id: SupportsChangeNotification\n  parent: System.ComponentModel.IBindingList\n  langs:\n  - csharp\n  name: SupportsChangeNotification\n  nameWithType: IBindingList.SupportsChangeNotification\n  fullName: System.ComponentModel.IBindingList.SupportsChangeNotification\n  type: Property\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Gets whether a <xref href=\"System.ComponentModel.IBindingList.ListChanged\"></xref> event is raised when the list changes or an item in the list changes.\n  remarks: Objects in the list must notify the list when they change, so the list can raise a <xref:System.ComponentModel.IBindingList.ListChanged> event.\n  syntax:\n    content: public bool SupportsChangeNotification { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if a <xref href=\"System.ComponentModel.IBindingList.ListChanged\"></xref> event is raised when the list changes or when an item changes; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ComponentModel.IBindingList.SupportsChangeNotification*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.IBindingList.SupportsSearching\n  id: SupportsSearching\n  parent: System.ComponentModel.IBindingList\n  langs:\n  - csharp\n  name: SupportsSearching\n  nameWithType: IBindingList.SupportsSearching\n  fullName: System.ComponentModel.IBindingList.SupportsSearching\n  type: Property\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Gets whether the list supports searching using the <xref:System.ComponentModel.IBindingList.Find*> method.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates how to implement the SupportsSearching property.  \\n  \\n [!code-cs[System.Windows.Forms.BindingSourceAndBindingListOfT#3](~/add/codesnippet/csharp/p-system.componentmodel._7_1.cs)]\\n [!code-vb[System.Windows.Forms.BindingSourceAndBindingListOfT#3](~/add/codesnippet/visualbasic/p-system.componentmodel._7_1.vb)]\"\n  syntax:\n    content: public bool SupportsSearching { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the list supports searching using the <xref:System.ComponentModel.IBindingList.Find*> method; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ComponentModel.IBindingList.SupportsSearching*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ComponentModel.IBindingList.SupportsSorting\n  id: SupportsSorting\n  parent: System.ComponentModel.IBindingList\n  langs:\n  - csharp\n  name: SupportsSorting\n  nameWithType: IBindingList.SupportsSorting\n  fullName: System.ComponentModel.IBindingList.SupportsSorting\n  type: Property\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Gets whether the list supports sorting.\n  remarks: If this property is `true`, then <xref:System.ComponentModel.IBindingList.IsSorted%2A>, <xref:System.ComponentModel.IBindingList.SortProperty%2A>, <xref:System.ComponentModel.IBindingList.SortDirection%2A>, <xref:System.ComponentModel.IBindingList.ApplySort%2A>, and <xref:System.ComponentModel.IBindingList.RemoveSort%2A> are supported.\n  syntax:\n    content: public bool SupportsSorting { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the list supports sorting; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ComponentModel.IBindingList.SupportsSorting*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.NotSupportedException\n  isExternal: true\n  name: System.NotSupportedException\n- uid: System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)\n  parent: System.ComponentModel.IBindingList\n  isExternal: false\n  name: AddIndex(PropertyDescriptor)\n  nameWithType: IBindingList.AddIndex(PropertyDescriptor)\n  fullName: System.ComponentModel.IBindingList.AddIndex(PropertyDescriptor)\n- uid: System.ComponentModel.PropertyDescriptor\n  parent: System.ComponentModel\n  isExternal: false\n  name: PropertyDescriptor\n  nameWithType: PropertyDescriptor\n  fullName: System.ComponentModel.PropertyDescriptor\n- uid: System.ComponentModel.IBindingList.AddNew\n  parent: System.ComponentModel.IBindingList\n  isExternal: false\n  name: AddNew()\n  nameWithType: IBindingList.AddNew()\n  fullName: System.ComponentModel.IBindingList.AddNew()\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ComponentModel.IBindingList.AllowEdit\n  parent: System.ComponentModel.IBindingList\n  isExternal: false\n  name: AllowEdit\n  nameWithType: IBindingList.AllowEdit\n  fullName: System.ComponentModel.IBindingList.AllowEdit\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.ComponentModel.IBindingList.AllowNew\n  parent: System.ComponentModel.IBindingList\n  isExternal: false\n  name: AllowNew\n  nameWithType: IBindingList.AllowNew\n  fullName: System.ComponentModel.IBindingList.AllowNew\n- uid: System.ComponentModel.IBindingList.AllowRemove\n  parent: System.ComponentModel.IBindingList\n  isExternal: false\n  name: AllowRemove\n  nameWithType: IBindingList.AllowRemove\n  fullName: System.ComponentModel.IBindingList.AllowRemove\n- uid: System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)\n  parent: System.ComponentModel.IBindingList\n  isExternal: false\n  name: ApplySort(PropertyDescriptor,ListSortDirection)\n  nameWithType: IBindingList.ApplySort(PropertyDescriptor,ListSortDirection)\n  fullName: System.ComponentModel.IBindingList.ApplySort(PropertyDescriptor,ListSortDirection)\n- uid: System.ComponentModel.ListSortDirection\n  parent: System.ComponentModel\n  isExternal: false\n  name: ListSortDirection\n  nameWithType: ListSortDirection\n  fullName: System.ComponentModel.ListSortDirection\n- uid: System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)\n  parent: System.ComponentModel.IBindingList\n  isExternal: false\n  name: Find(PropertyDescriptor,Object)\n  nameWithType: IBindingList.Find(PropertyDescriptor,Object)\n  fullName: System.ComponentModel.IBindingList.Find(PropertyDescriptor,Object)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.ComponentModel.IBindingList.IsSorted\n  parent: System.ComponentModel.IBindingList\n  isExternal: false\n  name: IsSorted\n  nameWithType: IBindingList.IsSorted\n  fullName: System.ComponentModel.IBindingList.IsSorted\n- uid: System.ComponentModel.IBindingList.ListChanged\n  parent: System.ComponentModel.IBindingList\n  isExternal: false\n  name: ListChanged\n  nameWithType: IBindingList.ListChanged\n  fullName: System.ComponentModel.IBindingList.ListChanged\n- uid: System.ComponentModel.ListChangedEventHandler\n  parent: System.ComponentModel\n  isExternal: false\n  name: ListChangedEventHandler\n  nameWithType: ListChangedEventHandler\n  fullName: System.ComponentModel.ListChangedEventHandler\n- uid: System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)\n  parent: System.ComponentModel.IBindingList\n  isExternal: false\n  name: RemoveIndex(PropertyDescriptor)\n  nameWithType: IBindingList.RemoveIndex(PropertyDescriptor)\n  fullName: System.ComponentModel.IBindingList.RemoveIndex(PropertyDescriptor)\n- uid: System.ComponentModel.IBindingList.RemoveSort\n  parent: System.ComponentModel.IBindingList\n  isExternal: false\n  name: RemoveSort()\n  nameWithType: IBindingList.RemoveSort()\n  fullName: System.ComponentModel.IBindingList.RemoveSort()\n- uid: System.ComponentModel.IBindingList.SortDirection\n  parent: System.ComponentModel.IBindingList\n  isExternal: false\n  name: SortDirection\n  nameWithType: IBindingList.SortDirection\n  fullName: System.ComponentModel.IBindingList.SortDirection\n- uid: System.ComponentModel.IBindingList.SortProperty\n  parent: System.ComponentModel.IBindingList\n  isExternal: false\n  name: SortProperty\n  nameWithType: IBindingList.SortProperty\n  fullName: System.ComponentModel.IBindingList.SortProperty\n- uid: System.ComponentModel.IBindingList.SupportsChangeNotification\n  parent: System.ComponentModel.IBindingList\n  isExternal: false\n  name: SupportsChangeNotification\n  nameWithType: IBindingList.SupportsChangeNotification\n  fullName: System.ComponentModel.IBindingList.SupportsChangeNotification\n- uid: System.ComponentModel.IBindingList.SupportsSearching\n  parent: System.ComponentModel.IBindingList\n  isExternal: false\n  name: SupportsSearching\n  nameWithType: IBindingList.SupportsSearching\n  fullName: System.ComponentModel.IBindingList.SupportsSearching\n- uid: System.ComponentModel.IBindingList.SupportsSorting\n  parent: System.ComponentModel.IBindingList\n  isExternal: false\n  name: SupportsSorting\n  nameWithType: IBindingList.SupportsSorting\n  fullName: System.ComponentModel.IBindingList.SupportsSorting\n- uid: System.ComponentModel.IBindingList.AddIndex*\n  parent: System.ComponentModel.IBindingList\n  isExternal: false\n  name: AddIndex\n  nameWithType: IBindingList.AddIndex\n- uid: System.ComponentModel.IBindingList.AddNew*\n  parent: System.ComponentModel.IBindingList\n  isExternal: false\n  name: AddNew\n  nameWithType: IBindingList.AddNew\n- uid: System.ComponentModel.IBindingList.AllowEdit*\n  parent: System.ComponentModel.IBindingList\n  isExternal: false\n  name: AllowEdit\n  nameWithType: IBindingList.AllowEdit\n- uid: System.ComponentModel.IBindingList.AllowNew*\n  parent: System.ComponentModel.IBindingList\n  isExternal: false\n  name: AllowNew\n  nameWithType: IBindingList.AllowNew\n- uid: System.ComponentModel.IBindingList.AllowRemove*\n  parent: System.ComponentModel.IBindingList\n  isExternal: false\n  name: AllowRemove\n  nameWithType: IBindingList.AllowRemove\n- uid: System.ComponentModel.IBindingList.ApplySort*\n  parent: System.ComponentModel.IBindingList\n  isExternal: false\n  name: ApplySort\n  nameWithType: IBindingList.ApplySort\n- uid: System.ComponentModel.IBindingList.Find*\n  parent: System.ComponentModel.IBindingList\n  isExternal: false\n  name: Find\n  nameWithType: IBindingList.Find\n- uid: System.ComponentModel.IBindingList.IsSorted*\n  parent: System.ComponentModel.IBindingList\n  isExternal: false\n  name: IsSorted\n  nameWithType: IBindingList.IsSorted\n- uid: System.ComponentModel.IBindingList.RemoveIndex*\n  parent: System.ComponentModel.IBindingList\n  isExternal: false\n  name: RemoveIndex\n  nameWithType: IBindingList.RemoveIndex\n- uid: System.ComponentModel.IBindingList.RemoveSort*\n  parent: System.ComponentModel.IBindingList\n  isExternal: false\n  name: RemoveSort\n  nameWithType: IBindingList.RemoveSort\n- uid: System.ComponentModel.IBindingList.SortDirection*\n  parent: System.ComponentModel.IBindingList\n  isExternal: false\n  name: SortDirection\n  nameWithType: IBindingList.SortDirection\n- uid: System.ComponentModel.IBindingList.SortProperty*\n  parent: System.ComponentModel.IBindingList\n  isExternal: false\n  name: SortProperty\n  nameWithType: IBindingList.SortProperty\n- uid: System.ComponentModel.IBindingList.SupportsChangeNotification*\n  parent: System.ComponentModel.IBindingList\n  isExternal: false\n  name: SupportsChangeNotification\n  nameWithType: IBindingList.SupportsChangeNotification\n- uid: System.ComponentModel.IBindingList.SupportsSearching*\n  parent: System.ComponentModel.IBindingList\n  isExternal: false\n  name: SupportsSearching\n  nameWithType: IBindingList.SupportsSearching\n- uid: System.ComponentModel.IBindingList.SupportsSorting*\n  parent: System.ComponentModel.IBindingList\n  isExternal: false\n  name: SupportsSorting\n  nameWithType: IBindingList.SupportsSorting\n"}