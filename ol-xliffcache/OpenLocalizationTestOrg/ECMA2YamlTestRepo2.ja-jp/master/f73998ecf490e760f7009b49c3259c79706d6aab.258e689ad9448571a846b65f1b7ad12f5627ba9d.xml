{"nodes":[{"pos":[649,849],"content":"Defines the interface implemented by the environment hosting the workflow designer and compiler to provide environment-specific compilation information during the validation and compilation processes.","needQuote":true,"needEscape":true,"nodes":[{"content":"Defines the interface implemented by the environment hosting the workflow designer and compiler to provide environment-specific compilation information during the validation and compilation processes.","pos":[0,200]}]},{"pos":[1725,1779],"content":"Gets a value that indicates whether types are checked.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that indicates whether types are checked.","pos":[0,54]}]},{"pos":[1792,2686],"content":"During the validation phase of workflow compilation, a workflow source document is rejected if the CheckTypes property is `true` and the workflow or the companion rules file directly references any .NET Framework types not present on a list of authorized types. The list of authorized types is an XML document where each entry indicates an `Assembly`, a `Namespace`, a `TypeName`, and an `Authorized` {`true` or `false`} indicator. This class corresponds to an entry on the list. Also note that wildcard character designations are allowed, to include or exclude complete namespaces. For example, using `Type=”System.*”` includes all types in <xref:System>, including types contained in child namespaces.       The use of a list of authorized types is controlled by the <xref:System.Workflow.ComponentModel.Compiler.WorkflowCompiler> option **/checktypes** or by using the CheckTypes property.","needQuote":false,"needEscape":true,"nodes":[{"content":"During the validation phase of workflow compilation, a workflow source document is rejected if the CheckTypes property is <ph id=\"ph1\">`true`</ph> and the workflow or the companion rules file directly references any .NET Framework types not present on a list of authorized types.","pos":[0,261],"source":"During the validation phase of workflow compilation, a workflow source document is rejected if the CheckTypes property is `true` and the workflow or the companion rules file directly references any .NET Framework types not present on a list of authorized types."},{"content":"The list of authorized types is an XML document where each entry indicates an <ph id=\"ph1\">`Assembly`</ph>, a <ph id=\"ph2\">`Namespace`</ph>, a <ph id=\"ph3\">`TypeName`</ph>, and an <ph id=\"ph4\">`Authorized`</ph> {<ph id=\"ph5\">`true`</ph> or <ph id=\"ph6\">`false`</ph>} indicator.","pos":[262,431],"source":" The list of authorized types is an XML document where each entry indicates an `Assembly`, a `Namespace`, a `TypeName`, and an `Authorized` {`true` or `false`} indicator."},{"content":"This class corresponds to an entry on the list.","pos":[432,479]},{"content":"Also note that wildcard character designations are allowed, to include or exclude complete namespaces.","pos":[480,582]},{"content":"For example, using <ph id=\"ph1\">`Type=”System.*”`</ph> includes all types in &lt;xref:System&gt;, including types contained in child namespaces.","pos":[583,703],"source":" For example, using `Type=”System.*”` includes all types in <xref:System>, including types contained in child namespaces."},{"content":"The use of a list of authorized types is controlled by the &lt;xref:System.Workflow.ComponentModel.Compiler.WorkflowCompiler&gt; option <bpt id=\"p1\">**</bpt>/checktypes<ept id=\"p1\">**</ept> or by using the CheckTypes property.","pos":[710,892],"source":"       The use of a list of authorized types is controlled by the <xref:System.Workflow.ComponentModel.Compiler.WorkflowCompiler> option **/checktypes** or by using the CheckTypes property."}]},{"pos":[2801,2957],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if types are checked, otherwise <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if types are checked, otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[3596,3702],"content":"Gets the programming language used by the environment, such as Visual Studio, when compiling the workflow.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the programming language used by the environment, such as Visual Studio, when compiling the workflow.","pos":[0,106]}]},{"pos":[4328,4401],"content":"The name of the programming language used by the development environment.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the programming language used by the development environment.","pos":[0,73]}]},{"pos":[5063,5107],"content":"Gets the root namespace set for the project.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the root namespace set for the project.","pos":[0,44]}]},{"pos":[5119,5239],"content":"This property is used in Visual Basic compilation environment to pass the root namespace of the project to the compiler.","needQuote":true,"needEscape":true,"nodes":[{"content":"This property is used in Visual Basic compilation environment to pass the root namespace of the project to the compiler.","pos":[0,120]}]},{"pos":[5861,5892],"content":"The name of the root namespace.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the root namespace.","pos":[0,31]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService\n  id: IWorkflowCompilerOptionsService\n  children:\n  - System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService.CheckTypes\n  - System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService.Language\n  - System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService.RootNamespace\n  langs:\n  - csharp\n  name: IWorkflowCompilerOptionsService\n  nameWithType: IWorkflowCompilerOptionsService\n  fullName: System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService\n  type: Interface\n  summary: Defines the interface implemented by the environment hosting the workflow designer and compiler to provide environment-specific compilation information during the validation and compilation processes.\n  remarks: >-\n    > [!IMPORTANT]\n\n    >  [!INCLUDE[DeprecatedContent](~/add/includes/ajax-current-ext-md.md)]\n  syntax:\n    content: >-\n      [System.Obsolete(\"The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*\")]\n\n      public interface IWorkflowCompilerOptionsService\n  implements: []\n  platform:\n  - net462\n- uid: System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService.CheckTypes\n  id: CheckTypes\n  parent: System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService\n  langs:\n  - csharp\n  name: CheckTypes\n  nameWithType: IWorkflowCompilerOptionsService.CheckTypes\n  fullName: System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService.CheckTypes\n  type: Property\n  assemblies:\n  - System.Workflow.ComponentModel\n  namespace: System.Workflow.ComponentModel.Compiler\n  summary: Gets a value that indicates whether types are checked.\n  remarks: \"During the validation phase of workflow compilation, a workflow source document is rejected if the CheckTypes property is `true` and the workflow or the companion rules file directly references any .NET Framework types not present on a list of authorized types. The list of authorized types is an XML document where each entry indicates an `Assembly`, a `Namespace`, a `TypeName`, and an `Authorized` {`true` or `false`} indicator. This class corresponds to an entry on the list. Also note that wildcard character designations are allowed, to include or exclude complete namespaces. For example, using `Type=”System.*”` includes all types in <xref:System>, including types contained in child namespaces.  \\n  \\n The use of a list of authorized types is controlled by the <xref:System.Workflow.ComponentModel.Compiler.WorkflowCompiler> option **/checktypes** or by using the CheckTypes property.\"\n  syntax:\n    content: public bool CheckTypes { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if types are checked, otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService.CheckTypes*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService.Language\n  id: Language\n  parent: System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService\n  langs:\n  - csharp\n  name: Language\n  nameWithType: IWorkflowCompilerOptionsService.Language\n  fullName: System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService.Language\n  type: Property\n  assemblies:\n  - System.Workflow.ComponentModel\n  namespace: System.Workflow.ComponentModel.Compiler\n  summary: Gets the programming language used by the environment, such as Visual Studio, when compiling the workflow.\n  remarks: ''\n  example:\n  - \"The following example shows an implementation of the `Language` property. This example is from the Tracking Profile Designer SDK sample. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Tracking Profile Designer Sample](http://msdn.microsoft.com/en-us/a280199c-3000-4148-ac63-cb5aaeac07c8).  \\n  \\n [!code-cs[WF_Samples#123](~/add/codesnippet/csharp/wf_snippets/snippets1.cs#123)]\\n [!code-vb[WF_Samples#123](~/add/codesnippet/visualbasic/wf_snippets/snippets1.vb#123)]\"\n  syntax:\n    content: public string Language { get; }\n    return:\n      type: System.String\n      description: The name of the programming language used by the development environment.\n  overload: System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService.Language*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService.RootNamespace\n  id: RootNamespace\n  parent: System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService\n  langs:\n  - csharp\n  name: RootNamespace\n  nameWithType: IWorkflowCompilerOptionsService.RootNamespace\n  fullName: System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService.RootNamespace\n  type: Property\n  assemblies:\n  - System.Workflow.ComponentModel\n  namespace: System.Workflow.ComponentModel.Compiler\n  summary: Gets the root namespace set for the project.\n  remarks: This property is used in Visual Basic compilation environment to pass the root namespace of the project to the compiler.\n  example:\n  - \"The following example shows an implementation of the `RootNamespace` property. This example is from the Tracking Profile Designer SDK sample. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Tracking Profile Designer Sample](http://msdn.microsoft.com/en-us/a280199c-3000-4148-ac63-cb5aaeac07c8).  \\n  \\n [!code-cs[Wf_samples#122](~/add/codesnippet/csharp/wf_snippets/snippets1.cs#122)]\\n [!code-vb[Wf_samples#122](~/add/codesnippet/visualbasic/wf_snippets/snippets1.vb#122)]\"\n  syntax:\n    content: public string RootNamespace { get; }\n    return:\n      type: System.String\n      description: The name of the root namespace.\n  overload: System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService.RootNamespace*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService.CheckTypes\n  parent: System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService\n  isExternal: false\n  name: CheckTypes\n  nameWithType: IWorkflowCompilerOptionsService.CheckTypes\n  fullName: System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService.CheckTypes\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService.Language\n  parent: System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService\n  isExternal: false\n  name: Language\n  nameWithType: IWorkflowCompilerOptionsService.Language\n  fullName: System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService.Language\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService.RootNamespace\n  parent: System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService\n  isExternal: false\n  name: RootNamespace\n  nameWithType: IWorkflowCompilerOptionsService.RootNamespace\n  fullName: System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService.RootNamespace\n- uid: System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService.CheckTypes*\n  parent: System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService\n  isExternal: false\n  name: CheckTypes\n  nameWithType: IWorkflowCompilerOptionsService.CheckTypes\n- uid: System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService.Language*\n  parent: System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService\n  isExternal: false\n  name: Language\n  nameWithType: IWorkflowCompilerOptionsService.Language\n- uid: System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService.RootNamespace*\n  parent: System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService\n  isExternal: false\n  name: RootNamespace\n  nameWithType: IWorkflowCompilerOptionsService.RootNamespace\n"}