{"nodes":[{"pos":[938,1008],"content":"Represents a database field that indicates a one-to-many relationship.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents a database field that indicates a one-to-many relationship.","pos":[0,70]}]},{"pos":[1021,1590],"content":"In ASP.NET Dynamic Data applications, the MetaChildrenColumn class represents a database field that indicates a one-to-many relationship or a parent-child relationship.       The MetaChildrenColumn class represents the field in the parent table of the one-to-many relationship. However, you can access the child table object by using the <xref:System.Web.DynamicData.MetaChildrenColumn.ChildTable%2A> property. You can also retrieve the foreign-key field in the child table by using the <xref:System.Web.DynamicData.MetaChildrenColumn.ColumnInOtherTable%2A> property.","needQuote":false,"needEscape":true,"nodes":[{"content":"In ASP.NET Dynamic Data applications, the MetaChildrenColumn class represents a database field that indicates a one-to-many relationship or a parent-child relationship.       The MetaChildrenColumn class represents the field in the parent table of the one-to-many relationship. However, you can access the child table object by using the <xref:System.Web.DynamicData.MetaChildrenColumn.ChildTable%2A> property. You can also retrieve the foreign-key field in the child table by using the <xref:System.Web.DynamicData.MetaChildrenColumn.ColumnInOtherTable%2A> property.","pos":[0,567],"nodes":[{"content":"In ASP.NET Dynamic Data applications, the MetaChildrenColumn class represents a database field that indicates a one-to-many relationship or a parent-child relationship.","pos":[0,168]},{"content":"The MetaChildrenColumn class represents the field in the parent table of the one-to-many relationship.","pos":[175,277]},{"content":"However, you can access the child table object by using the &lt;xref:System.Web.DynamicData.MetaChildrenColumn.ChildTable%2A&gt; property.","pos":[278,410],"source":" However, you can access the child table object by using the <xref:System.Web.DynamicData.MetaChildrenColumn.ChildTable%2A> property."},{"content":"You can also retrieve the foreign-key field in the child table by using the &lt;xref:System.Web.DynamicData.MetaChildrenColumn.ColumnInOtherTable%2A&gt; property.","pos":[411,567],"source":" You can also retrieve the foreign-key field in the child table by using the <xref:System.Web.DynamicData.MetaChildrenColumn.ColumnInOtherTable%2A> property."}]}]},{"pos":[4525,4628],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Web.DynamicData.MetaChildrenColumn\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Web.DynamicData.MetaChildrenColumn\"></xref> class."},{"pos":[4883,4898],"content":"The meta table.","needQuote":true,"needEscape":true,"nodes":[{"content":"The meta table.","pos":[0,15]}]},{"pos":[5006,5026],"content":"The column provider.","needQuote":true,"needEscape":true,"nodes":[{"content":"The column provider.","pos":[0,20]}]},{"pos":[5512,5591],"content":"Gets an object that represents the child table of the one-to-many relationship.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets an object that represents the child table of the one-to-many relationship.","pos":[0,79]}]},{"pos":[5603,5817],"content":"Use the ChildTable property to get an object that represents the child table of the one-to-many relationship. You can access the parent table by using the <xref:System.Web.DynamicData.MetaColumn.Table%2A> property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Use the ChildTable property to get an object that represents the child table of the one-to-many relationship. You can access the parent table by using the <xref:System.Web.DynamicData.MetaColumn.Table%2A> property.","pos":[0,214],"nodes":[{"content":"Use the ChildTable property to get an object that represents the child table of the one-to-many relationship.","pos":[0,109]},{"content":"You can access the parent table by using the &lt;xref:System.Web.DynamicData.MetaColumn.Table%2A&gt; property.","pos":[110,214],"source":" You can access the parent table by using the <xref:System.Web.DynamicData.MetaColumn.Table%2A> property."}]}]},{"pos":[5977,6051],"content":"An object that represents the child table of the one-to-many relationship.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that represents the child table of the one-to-many relationship.","pos":[0,74]}]},{"pos":[6582,6654],"content":"Gets an object that represents the foreign-key field in the child table.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets an object that represents the foreign-key field in the child table.","pos":[0,72]}]},{"pos":[6666,6761],"content":"The ColumnInOtherTable property enables you to get a reference to the field in the child table.","needQuote":true,"needEscape":true,"nodes":[{"content":"The ColumnInOtherTable property enables you to get a reference to the field in the child table.","pos":[0,95]}]},{"pos":[6931,6998],"content":"An object that represents the foreign-key field in the child table.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that represents the foreign-key field in the child table.","pos":[0,67]}]},{"pos":[7594,7652],"content":"Gets the path of the list-action page for the child table.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the path of the list-action page for the child table.","pos":[0,58]}]},{"pos":[7665,8221],"content":"Use the GetChildrenListPath method when you want to retrieve the list-action page for the child table using the specified row as a parent. The path is obtained by appending a query-string value to the URL that contains the foreign-key field value specified in the `row` parameter.       Using the GetChildrenListPath method is the same as invoking the <xref:System.Web.DynamicData.MetaChildrenColumn.GetChildrenPath%28System.String%2CSystem.Object%29> method and passing the <xref:System.Web.DynamicData.PageAction.List%2A> action as the first parameter.","needQuote":false,"needEscape":true,"nodes":[{"content":"Use the GetChildrenListPath method when you want to retrieve the list-action page for the child table using the specified row as a parent.","pos":[0,138]},{"content":"The path is obtained by appending a query-string value to the URL that contains the foreign-key field value specified in the <ph id=\"ph1\">`row`</ph> parameter.","pos":[139,280],"source":" The path is obtained by appending a query-string value to the URL that contains the foreign-key field value specified in the `row` parameter."},{"content":"Using the GetChildrenListPath method is the same as invoking the &lt;xref:System.Web.DynamicData.MetaChildrenColumn.GetChildrenPath%28System.String%2CSystem.Object%29&gt; method and passing the &lt;xref:System.Web.DynamicData.PageAction.List%2A&gt; action as the first parameter.","pos":[287,554],"source":"       Using the GetChildrenListPath method is the same as invoking the <xref:System.Web.DynamicData.MetaChildrenColumn.GetChildrenPath%28System.String%2CSystem.Object%29> method and passing the <xref:System.Web.DynamicData.PageAction.List%2A> action as the first parameter."}]},{"pos":[8369,8413],"content":"The row that contains the foreign-key field.","needQuote":true,"needEscape":true,"nodes":[{"content":"The row that contains the foreign-key field.","pos":[0,44]}]},{"pos":[8471,8524],"content":"The path of the list-action page for the child table.","needQuote":true,"needEscape":true,"nodes":[{"content":"The path of the list-action page for the child table.","pos":[0,53]}]},{"pos":[9150,9212],"content":"Gets the path of the specified action page of the child table.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the path of the specified action page of the child table.","pos":[0,62]}]},{"pos":[9225,9783],"content":"The GetChildrenPath method returns the path of the specified action page for the child table. The path returned is based on the routes that are defined for the ASP.NET Dynamic Data application and has the specified row as a parent. The path is obtained by appending a query-string value to the URL that contains the foreign-key field value specified in the `row` parameter.       If `row` is `null`, his method returns an empty string.       You can use the values defined in the <xref:System.Web.DynamicData.PageAction> class for the `action` parameter.","needQuote":false,"needEscape":true,"nodes":[{"content":"The GetChildrenPath method returns the path of the specified action page for the child table.","pos":[0,93]},{"content":"The path returned is based on the routes that are defined for the ASP.NET Dynamic Data application and has the specified row as a parent.","pos":[94,231]},{"content":"The path is obtained by appending a query-string value to the URL that contains the foreign-key field value specified in the <ph id=\"ph1\">`row`</ph> parameter.","pos":[232,373],"source":" The path is obtained by appending a query-string value to the URL that contains the foreign-key field value specified in the `row` parameter."},{"content":"If <ph id=\"ph1\">`row`</ph> is <ph id=\"ph2\">`null`</ph>, his method returns an empty string.","pos":[380,435],"source":"       If `row` is `null`, his method returns an empty string."},{"content":"You can use the values defined in the &lt;xref:System.Web.DynamicData.PageAction&gt; class for the <ph id=\"ph1\">`action`</ph> parameter.","pos":[442,554],"source":"       You can use the values defined in the <xref:System.Web.DynamicData.PageAction> class for the `action` parameter."}]},{"pos":[9945,9963],"content":"The target action.","needQuote":true,"needEscape":true,"nodes":[{"content":"The target action.","pos":[0,18]}]},{"pos":[10023,10067],"content":"The row that contains the foreign-key field.","needQuote":true,"needEscape":true,"nodes":[{"content":"The row that contains the foreign-key field.","pos":[0,44]}]},{"pos":[10125,10182],"content":"The path of the specified action page of the child table.","needQuote":true,"needEscape":true,"nodes":[{"content":"The path of the specified action page of the child table.","pos":[0,57]}]},{"pos":[10853,10916],"content":"Gets the path for the specified action page of the child table.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the path for the specified action page of the child table.","pos":[0,63]}]},{"pos":[10929,11561],"content":"The GetChildrenPath method returns the path of the specified action page for the child table. The path is based on the specified path with the specified row as a parent. The path is obtained by appending a query-string value to the URL that contains the foreign-key field value specified in the `row` parameter.       If `row` is `null`, this method returns an empty string. If `path` is `null`, the GetChildrenPath method returns the path based on the routes defined for the ASP.NET Dynamic Data application.       You can use the values defined in the <xref:System.Web.DynamicData.PageAction> class for the `action` parameter.","needQuote":false,"needEscape":true,"nodes":[{"content":"The GetChildrenPath method returns the path of the specified action page for the child table.","pos":[0,93]},{"content":"The path is based on the specified path with the specified row as a parent.","pos":[94,169]},{"content":"The path is obtained by appending a query-string value to the URL that contains the foreign-key field value specified in the <ph id=\"ph1\">`row`</ph> parameter.","pos":[170,311],"source":" The path is obtained by appending a query-string value to the URL that contains the foreign-key field value specified in the `row` parameter."},{"content":"If <ph id=\"ph1\">`row`</ph> is <ph id=\"ph2\">`null`</ph>, this method returns an empty string.","pos":[318,374],"source":"       If `row` is `null`, this method returns an empty string."},{"content":"If <ph id=\"ph1\">`path`</ph> is <ph id=\"ph2\">`null`</ph>, the GetChildrenPath method returns the path based on the routes defined for the ASP.NET Dynamic Data application.","pos":[375,509],"source":" If `path` is `null`, the GetChildrenPath method returns the path based on the routes defined for the ASP.NET Dynamic Data application."},{"content":"You can use the values defined in the &lt;xref:System.Web.DynamicData.PageAction&gt; class for the <ph id=\"ph1\">`action`</ph> parameter.","pos":[516,628],"source":"       You can use the values defined in the <xref:System.Web.DynamicData.PageAction> class for the `action` parameter."}]},{"pos":[11736,11754],"content":"The target action.","needQuote":true,"needEscape":true,"nodes":[{"content":"The target action.","pos":[0,18]}]},{"pos":[11814,11858],"content":"The row that contains the foreign-key field.","needQuote":true,"needEscape":true,"nodes":[{"content":"The row that contains the foreign-key field.","pos":[0,44]}]},{"pos":[11919,11935],"content":"The target page.","needQuote":true,"needEscape":true,"nodes":[{"content":"The target page.","pos":[0,16]}]},{"pos":[11993,12050],"content":"The path of the specified action page of the child table.","needQuote":true,"needEscape":true,"nodes":[{"content":"The path of the specified action page of the child table.","pos":[0,57]}]},{"pos":[12550,12626],"content":"Initializes data that might not be available when the constructor is called.","needQuote":true,"needEscape":true,"nodes":[{"content":"Initializes data that might not be available when the constructor is called.","pos":[0,76]}]},{"pos":[12638,12848],"content":"This method cannot be called directly. To customize initialization, you can derive from this class and override the `Initialize` method. If you override this method, call the base control's `Initialize` method.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method cannot be called directly.","pos":[0,38]},{"content":"To customize initialization, you can derive from this class and override the <ph id=\"ph1\">`Initialize`</ph> method.","pos":[39,136],"source":" To customize initialization, you can derive from this class and override the `Initialize` method."},{"content":"If you override this method, call the base control's <ph id=\"ph1\">`Initialize`</ph> method.","pos":[137,210],"source":" If you override this method, call the base control's `Initialize` method."}]},{"pos":[13430,13509],"content":"Gets a value that indicates the many-to-many relationship status of the column.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that indicates the many-to-many relationship status of the column.","pos":[0,79]}]},{"pos":[13625,13804],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the column relationship is many-to-many; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the column relationship is many-to-many; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.DynamicData.MetaChildrenColumn\n  id: MetaChildrenColumn\n  children:\n  - System.Web.DynamicData.MetaChildrenColumn.#ctor(System.Web.DynamicData.MetaTable,System.Web.DynamicData.ModelProviders.ColumnProvider)\n  - System.Web.DynamicData.MetaChildrenColumn.ChildTable\n  - System.Web.DynamicData.MetaChildrenColumn.ColumnInOtherTable\n  - System.Web.DynamicData.MetaChildrenColumn.GetChildrenListPath(System.Object)\n  - System.Web.DynamicData.MetaChildrenColumn.GetChildrenPath(System.String,System.Object)\n  - System.Web.DynamicData.MetaChildrenColumn.GetChildrenPath(System.String,System.Object,System.String)\n  - System.Web.DynamicData.MetaChildrenColumn.Initialize\n  - System.Web.DynamicData.MetaChildrenColumn.IsManyToMany\n  langs:\n  - csharp\n  name: MetaChildrenColumn\n  nameWithType: MetaChildrenColumn\n  fullName: System.Web.DynamicData.MetaChildrenColumn\n  type: Class\n  summary: Represents a database field that indicates a one-to-many relationship.\n  remarks: \"In ASP.NET Dynamic Data applications, the MetaChildrenColumn class represents a database field that indicates a one-to-many relationship or a parent-child relationship.  \\n  \\n The MetaChildrenColumn class represents the field in the parent table of the one-to-many relationship. However, you can access the child table object by using the <xref:System.Web.DynamicData.MetaChildrenColumn.ChildTable%2A> property. You can also retrieve the foreign-key field in the child table by using the <xref:System.Web.DynamicData.MetaChildrenColumn.ColumnInOtherTable%2A> property.\"\n  syntax:\n    content: 'public class MetaChildrenColumn : System.Web.DynamicData.MetaColumn'\n  inheritance:\n  - System.Object\n  - System.Web.DynamicData.MetaColumn\n  implements: []\n  inheritedMembers:\n  - System.Web.DynamicData.MetaColumn.AllowInitialValue\n  - System.Web.DynamicData.MetaColumn.ApplyFormatInEditMode\n  - System.Web.DynamicData.MetaColumn.Attributes\n  - System.Web.DynamicData.MetaColumn.BuildAttributeCollection\n  - System.Web.DynamicData.MetaColumn.ColumnType\n  - System.Web.DynamicData.MetaColumn.ConvertEmptyStringToNull\n  - System.Web.DynamicData.MetaColumn.DataFormatString\n  - System.Web.DynamicData.MetaColumn.DataTypeAttribute\n  - System.Web.DynamicData.MetaColumn.DefaultValue\n  - System.Web.DynamicData.MetaColumn.Description\n  - System.Web.DynamicData.MetaColumn.DisplayName\n  - System.Web.DynamicData.MetaColumn.EntityTypeProperty\n  - System.Web.DynamicData.MetaColumn.FilterUIHint\n  - System.Web.DynamicData.MetaColumn.HtmlEncode\n  - System.Web.DynamicData.MetaColumn.IsBinaryData\n  - System.Web.DynamicData.MetaColumn.IsCustomProperty\n  - System.Web.DynamicData.MetaColumn.IsFloatingPoint\n  - System.Web.DynamicData.MetaColumn.IsForeignKeyComponent\n  - System.Web.DynamicData.MetaColumn.IsGenerated\n  - System.Web.DynamicData.MetaColumn.IsInteger\n  - System.Web.DynamicData.MetaColumn.IsLongString\n  - System.Web.DynamicData.MetaColumn.IsPrimaryKey\n  - System.Web.DynamicData.MetaColumn.IsReadOnly\n  - System.Web.DynamicData.MetaColumn.IsRequired\n  - System.Web.DynamicData.MetaColumn.IsString\n  - System.Web.DynamicData.MetaColumn.MaxLength\n  - System.Web.DynamicData.MetaColumn.Model\n  - System.Web.DynamicData.MetaColumn.Name\n  - System.Web.DynamicData.MetaColumn.NullDisplayText\n  - System.Web.DynamicData.MetaColumn.Prompt\n  - System.Web.DynamicData.MetaColumn.Provider\n  - System.Web.DynamicData.MetaColumn.RequiredErrorMessage\n  - System.Web.DynamicData.MetaColumn.ResetMetadata\n  - System.Web.DynamicData.MetaColumn.Scaffold\n  - System.Web.DynamicData.MetaColumn.ShortDisplayName\n  - System.Web.DynamicData.MetaColumn.SortExpression\n  - System.Web.DynamicData.MetaColumn.Table\n  - System.Web.DynamicData.MetaColumn.ToString\n  - System.Web.DynamicData.MetaColumn.TypeCode\n  - System.Web.DynamicData.MetaColumn.UIHint\n  platform:\n  - net462\n- uid: System.Web.DynamicData.MetaChildrenColumn.#ctor(System.Web.DynamicData.MetaTable,System.Web.DynamicData.ModelProviders.ColumnProvider)\n  id: '#ctor(System.Web.DynamicData.MetaTable,System.Web.DynamicData.ModelProviders.ColumnProvider)'\n  parent: System.Web.DynamicData.MetaChildrenColumn\n  langs:\n  - csharp\n  name: MetaChildrenColumn(MetaTable,ColumnProvider)\n  nameWithType: MetaChildrenColumn.MetaChildrenColumn(MetaTable,ColumnProvider)\n  fullName: System.Web.DynamicData.MetaChildrenColumn.MetaChildrenColumn(MetaTable,ColumnProvider)\n  type: Constructor\n  assemblies:\n  - System.Web.DynamicData\n  namespace: System.Web.DynamicData\n  summary: Initializes a new instance of the <xref href=\"System.Web.DynamicData.MetaChildrenColumn\"></xref> class.\n  syntax:\n    content: public MetaChildrenColumn (System.Web.DynamicData.MetaTable table, System.Web.DynamicData.ModelProviders.ColumnProvider entityMember);\n    parameters:\n    - id: table\n      type: System.Web.DynamicData.MetaTable\n      description: The meta table.\n    - id: entityMember\n      type: System.Web.DynamicData.ModelProviders.ColumnProvider\n      description: The column provider.\n  overload: System.Web.DynamicData.MetaChildrenColumn.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.DynamicData.MetaChildrenColumn.ChildTable\n  id: ChildTable\n  parent: System.Web.DynamicData.MetaChildrenColumn\n  langs:\n  - csharp\n  name: ChildTable\n  nameWithType: MetaChildrenColumn.ChildTable\n  fullName: System.Web.DynamicData.MetaChildrenColumn.ChildTable\n  type: Property\n  assemblies:\n  - System.Web.DynamicData\n  namespace: System.Web.DynamicData\n  summary: Gets an object that represents the child table of the one-to-many relationship.\n  remarks: Use the ChildTable property to get an object that represents the child table of the one-to-many relationship. You can access the parent table by using the <xref:System.Web.DynamicData.MetaColumn.Table%2A> property.\n  syntax:\n    content: public System.Web.DynamicData.MetaTable ChildTable { get; }\n    return:\n      type: System.Web.DynamicData.MetaTable\n      description: An object that represents the child table of the one-to-many relationship.\n  overload: System.Web.DynamicData.MetaChildrenColumn.ChildTable*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.DynamicData.MetaChildrenColumn.ColumnInOtherTable\n  id: ColumnInOtherTable\n  parent: System.Web.DynamicData.MetaChildrenColumn\n  langs:\n  - csharp\n  name: ColumnInOtherTable\n  nameWithType: MetaChildrenColumn.ColumnInOtherTable\n  fullName: System.Web.DynamicData.MetaChildrenColumn.ColumnInOtherTable\n  type: Property\n  assemblies:\n  - System.Web.DynamicData\n  namespace: System.Web.DynamicData\n  summary: Gets an object that represents the foreign-key field in the child table.\n  remarks: The ColumnInOtherTable property enables you to get a reference to the field in the child table.\n  syntax:\n    content: public System.Web.DynamicData.MetaColumn ColumnInOtherTable { get; }\n    return:\n      type: System.Web.DynamicData.MetaColumn\n      description: An object that represents the foreign-key field in the child table.\n  overload: System.Web.DynamicData.MetaChildrenColumn.ColumnInOtherTable*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.DynamicData.MetaChildrenColumn.GetChildrenListPath(System.Object)\n  id: GetChildrenListPath(System.Object)\n  parent: System.Web.DynamicData.MetaChildrenColumn\n  langs:\n  - csharp\n  name: GetChildrenListPath(Object)\n  nameWithType: MetaChildrenColumn.GetChildrenListPath(Object)\n  fullName: System.Web.DynamicData.MetaChildrenColumn.GetChildrenListPath(Object)\n  type: Method\n  assemblies:\n  - System.Web.DynamicData\n  namespace: System.Web.DynamicData\n  summary: Gets the path of the list-action page for the child table.\n  remarks: \"Use the GetChildrenListPath method when you want to retrieve the list-action page for the child table using the specified row as a parent. The path is obtained by appending a query-string value to the URL that contains the foreign-key field value specified in the `row` parameter.  \\n  \\n Using the GetChildrenListPath method is the same as invoking the <xref:System.Web.DynamicData.MetaChildrenColumn.GetChildrenPath%28System.String%2CSystem.Object%29> method and passing the <xref:System.Web.DynamicData.PageAction.List%2A> action as the first parameter.\"\n  syntax:\n    content: public string GetChildrenListPath (object row);\n    parameters:\n    - id: row\n      type: System.Object\n      description: The row that contains the foreign-key field.\n    return:\n      type: System.String\n      description: The path of the list-action page for the child table.\n  overload: System.Web.DynamicData.MetaChildrenColumn.GetChildrenListPath*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.DynamicData.MetaChildrenColumn.GetChildrenPath(System.String,System.Object)\n  id: GetChildrenPath(System.String,System.Object)\n  parent: System.Web.DynamicData.MetaChildrenColumn\n  langs:\n  - csharp\n  name: GetChildrenPath(String,Object)\n  nameWithType: MetaChildrenColumn.GetChildrenPath(String,Object)\n  fullName: System.Web.DynamicData.MetaChildrenColumn.GetChildrenPath(String,Object)\n  type: Method\n  assemblies:\n  - System.Web.DynamicData\n  namespace: System.Web.DynamicData\n  summary: Gets the path of the specified action page of the child table.\n  remarks: \"The GetChildrenPath method returns the path of the specified action page for the child table. The path returned is based on the routes that are defined for the ASP.NET Dynamic Data application and has the specified row as a parent. The path is obtained by appending a query-string value to the URL that contains the foreign-key field value specified in the `row` parameter.  \\n  \\n If `row` is `null`, his method returns an empty string.  \\n  \\n You can use the values defined in the <xref:System.Web.DynamicData.PageAction> class for the `action` parameter.\"\n  syntax:\n    content: public string GetChildrenPath (string action, object row);\n    parameters:\n    - id: action\n      type: System.String\n      description: The target action.\n    - id: row\n      type: System.Object\n      description: The row that contains the foreign-key field.\n    return:\n      type: System.String\n      description: The path of the specified action page of the child table.\n  overload: System.Web.DynamicData.MetaChildrenColumn.GetChildrenPath*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.DynamicData.MetaChildrenColumn.GetChildrenPath(System.String,System.Object,System.String)\n  id: GetChildrenPath(System.String,System.Object,System.String)\n  parent: System.Web.DynamicData.MetaChildrenColumn\n  langs:\n  - csharp\n  name: GetChildrenPath(String,Object,String)\n  nameWithType: MetaChildrenColumn.GetChildrenPath(String,Object,String)\n  fullName: System.Web.DynamicData.MetaChildrenColumn.GetChildrenPath(String,Object,String)\n  type: Method\n  assemblies:\n  - System.Web.DynamicData\n  namespace: System.Web.DynamicData\n  summary: Gets the path for the specified action page of the child table.\n  remarks: \"The GetChildrenPath method returns the path of the specified action page for the child table. The path is based on the specified path with the specified row as a parent. The path is obtained by appending a query-string value to the URL that contains the foreign-key field value specified in the `row` parameter.  \\n  \\n If `row` is `null`, this method returns an empty string. If `path` is `null`, the GetChildrenPath method returns the path based on the routes defined for the ASP.NET Dynamic Data application.  \\n  \\n You can use the values defined in the <xref:System.Web.DynamicData.PageAction> class for the `action` parameter.\"\n  syntax:\n    content: public string GetChildrenPath (string action, object row, string path);\n    parameters:\n    - id: action\n      type: System.String\n      description: The target action.\n    - id: row\n      type: System.Object\n      description: The row that contains the foreign-key field.\n    - id: path\n      type: System.String\n      description: The target page.\n    return:\n      type: System.String\n      description: The path of the specified action page of the child table.\n  overload: System.Web.DynamicData.MetaChildrenColumn.GetChildrenPath*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.DynamicData.MetaChildrenColumn.Initialize\n  id: Initialize\n  parent: System.Web.DynamicData.MetaChildrenColumn\n  langs:\n  - csharp\n  name: Initialize()\n  nameWithType: MetaChildrenColumn.Initialize()\n  fullName: System.Web.DynamicData.MetaChildrenColumn.Initialize()\n  type: Method\n  assemblies:\n  - System.Web.DynamicData\n  namespace: System.Web.DynamicData\n  summary: Initializes data that might not be available when the constructor is called.\n  remarks: This method cannot be called directly. To customize initialization, you can derive from this class and override the `Initialize` method. If you override this method, call the base control's `Initialize` method.\n  syntax:\n    content: protected override void Initialize ();\n    parameters: []\n  overload: System.Web.DynamicData.MetaChildrenColumn.Initialize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.DynamicData.MetaChildrenColumn.IsManyToMany\n  id: IsManyToMany\n  parent: System.Web.DynamicData.MetaChildrenColumn\n  langs:\n  - csharp\n  name: IsManyToMany\n  nameWithType: MetaChildrenColumn.IsManyToMany\n  fullName: System.Web.DynamicData.MetaChildrenColumn.IsManyToMany\n  type: Property\n  assemblies:\n  - System.Web.DynamicData\n  namespace: System.Web.DynamicData\n  summary: Gets a value that indicates the many-to-many relationship status of the column.\n  syntax:\n    content: public bool IsManyToMany { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the column relationship is many-to-many; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Web.DynamicData.MetaChildrenColumn.IsManyToMany*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Web.DynamicData.MetaColumn\n  isExternal: false\n  name: System.Web.DynamicData.MetaColumn\n- uid: System.Web.DynamicData.MetaChildrenColumn.#ctor(System.Web.DynamicData.MetaTable,System.Web.DynamicData.ModelProviders.ColumnProvider)\n  parent: System.Web.DynamicData.MetaChildrenColumn\n  isExternal: false\n  name: MetaChildrenColumn(MetaTable,ColumnProvider)\n  nameWithType: MetaChildrenColumn.MetaChildrenColumn(MetaTable,ColumnProvider)\n  fullName: System.Web.DynamicData.MetaChildrenColumn.MetaChildrenColumn(MetaTable,ColumnProvider)\n- uid: System.Web.DynamicData.MetaTable\n  parent: System.Web.DynamicData\n  isExternal: false\n  name: MetaTable\n  nameWithType: MetaTable\n  fullName: System.Web.DynamicData.MetaTable\n- uid: System.Web.DynamicData.ModelProviders.ColumnProvider\n  parent: System.Web.DynamicData.ModelProviders\n  isExternal: false\n  name: ColumnProvider\n  nameWithType: ColumnProvider\n  fullName: System.Web.DynamicData.ModelProviders.ColumnProvider\n- uid: System.Web.DynamicData.MetaChildrenColumn.ChildTable\n  parent: System.Web.DynamicData.MetaChildrenColumn\n  isExternal: false\n  name: ChildTable\n  nameWithType: MetaChildrenColumn.ChildTable\n  fullName: System.Web.DynamicData.MetaChildrenColumn.ChildTable\n- uid: System.Web.DynamicData.MetaChildrenColumn.ColumnInOtherTable\n  parent: System.Web.DynamicData.MetaChildrenColumn\n  isExternal: false\n  name: ColumnInOtherTable\n  nameWithType: MetaChildrenColumn.ColumnInOtherTable\n  fullName: System.Web.DynamicData.MetaChildrenColumn.ColumnInOtherTable\n- uid: System.Web.DynamicData.MetaChildrenColumn.GetChildrenListPath(System.Object)\n  parent: System.Web.DynamicData.MetaChildrenColumn\n  isExternal: false\n  name: GetChildrenListPath(Object)\n  nameWithType: MetaChildrenColumn.GetChildrenListPath(Object)\n  fullName: System.Web.DynamicData.MetaChildrenColumn.GetChildrenListPath(Object)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Web.DynamicData.MetaChildrenColumn.GetChildrenPath(System.String,System.Object)\n  parent: System.Web.DynamicData.MetaChildrenColumn\n  isExternal: false\n  name: GetChildrenPath(String,Object)\n  nameWithType: MetaChildrenColumn.GetChildrenPath(String,Object)\n  fullName: System.Web.DynamicData.MetaChildrenColumn.GetChildrenPath(String,Object)\n- uid: System.Web.DynamicData.MetaChildrenColumn.GetChildrenPath(System.String,System.Object,System.String)\n  parent: System.Web.DynamicData.MetaChildrenColumn\n  isExternal: false\n  name: GetChildrenPath(String,Object,String)\n  nameWithType: MetaChildrenColumn.GetChildrenPath(String,Object,String)\n  fullName: System.Web.DynamicData.MetaChildrenColumn.GetChildrenPath(String,Object,String)\n- uid: System.Web.DynamicData.MetaChildrenColumn.Initialize\n  parent: System.Web.DynamicData.MetaChildrenColumn\n  isExternal: false\n  name: Initialize()\n  nameWithType: MetaChildrenColumn.Initialize()\n  fullName: System.Web.DynamicData.MetaChildrenColumn.Initialize()\n- uid: System.Web.DynamicData.MetaChildrenColumn.IsManyToMany\n  parent: System.Web.DynamicData.MetaChildrenColumn\n  isExternal: false\n  name: IsManyToMany\n  nameWithType: MetaChildrenColumn.IsManyToMany\n  fullName: System.Web.DynamicData.MetaChildrenColumn.IsManyToMany\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Web.DynamicData.MetaChildrenColumn.#ctor*\n  parent: System.Web.DynamicData.MetaChildrenColumn\n  isExternal: false\n  name: MetaChildrenColumn\n  nameWithType: MetaChildrenColumn.MetaChildrenColumn\n- uid: System.Web.DynamicData.MetaChildrenColumn.ChildTable*\n  parent: System.Web.DynamicData.MetaChildrenColumn\n  isExternal: false\n  name: ChildTable\n  nameWithType: MetaChildrenColumn.ChildTable\n- uid: System.Web.DynamicData.MetaChildrenColumn.ColumnInOtherTable*\n  parent: System.Web.DynamicData.MetaChildrenColumn\n  isExternal: false\n  name: ColumnInOtherTable\n  nameWithType: MetaChildrenColumn.ColumnInOtherTable\n- uid: System.Web.DynamicData.MetaChildrenColumn.GetChildrenListPath*\n  parent: System.Web.DynamicData.MetaChildrenColumn\n  isExternal: false\n  name: GetChildrenListPath\n  nameWithType: MetaChildrenColumn.GetChildrenListPath\n- uid: System.Web.DynamicData.MetaChildrenColumn.GetChildrenPath*\n  parent: System.Web.DynamicData.MetaChildrenColumn\n  isExternal: false\n  name: GetChildrenPath\n  nameWithType: MetaChildrenColumn.GetChildrenPath\n- uid: System.Web.DynamicData.MetaChildrenColumn.Initialize*\n  parent: System.Web.DynamicData.MetaChildrenColumn\n  isExternal: false\n  name: Initialize\n  nameWithType: MetaChildrenColumn.Initialize\n- uid: System.Web.DynamicData.MetaChildrenColumn.IsManyToMany*\n  parent: System.Web.DynamicData.MetaChildrenColumn\n  isExternal: false\n  name: IsManyToMany\n  nameWithType: MetaChildrenColumn.IsManyToMany\n"}