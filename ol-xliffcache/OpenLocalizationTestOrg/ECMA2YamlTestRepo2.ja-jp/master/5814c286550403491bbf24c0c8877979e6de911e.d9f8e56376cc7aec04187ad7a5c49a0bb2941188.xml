{"nodes":[{"pos":[1110,1191],"content":"Provides a fast way to swap method body implementation given a method of a class.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides a fast way to swap method body implementation given a method of a class.","pos":[0,81]}]},{"pos":[2081,2157],"content":"Specifies that the method should be just-in-time (JIT) compiled immediately.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies that the method should be just-in-time (JIT) compiled immediately.","pos":[0,76]}]},{"pos":[2272,2284],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[2673,2749],"content":"Specifies that the method should be just-in-time (JIT) compiled when needed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies that the method should be just-in-time (JIT) compiled when needed.","pos":[0,76]}]},{"pos":[2863,2875],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[3505,3532],"content":"Swaps the body of a method.","needQuote":true,"needEscape":true,"nodes":[{"content":"Swaps the body of a method.","pos":[0,27]}]},{"pos":[3545,3753],"content":"You cannot use this method to swap the body of a global method.       The method can only be called by the client that created the dynamic module that contains the type whose method's body is being swapped.","needQuote":false,"needEscape":true,"nodes":[{"content":"You cannot use this method to swap the body of a global method.       The method can only be called by the client that created the dynamic module that contains the type whose method's body is being swapped.","pos":[0,206],"nodes":[{"content":"You cannot use this method to swap the body of a global method.","pos":[0,63]},{"content":"The method can only be called by the client that created the dynamic module that contains the type whose method's body is being swapped.","pos":[70,206]}]}]},{"pos":[4609,4641],"content":"The class containing the method.","needQuote":true,"needEscape":true,"nodes":[{"content":"The class containing the method.","pos":[0,32]}]},{"pos":[4708,4733],"content":"The token for the method.","needQuote":true,"needEscape":true,"nodes":[{"content":"The token for the method.","pos":[0,25]}]},{"pos":[4794,4857],"content":"A pointer to the method. This should include the method header.","needQuote":true,"needEscape":true,"nodes":[{"content":"A pointer to the method. This should include the method header.","pos":[0,63],"nodes":[{"content":"A pointer to the method.","pos":[0,24]},{"content":"This should include the method header.","pos":[25,63]}]}]},{"pos":[4923,4964],"content":"The size of the new method body in bytes.","needQuote":true,"needEscape":true,"nodes":[{"content":"The size of the new method body in bytes.","pos":[0,41]}]},{"pos":[5025,5095],"content":"Flags that control the swapping. See the definitions of the constants.","needQuote":true,"needEscape":true,"nodes":[{"content":"Flags that control the swapping. See the definitions of the constants.","pos":[0,70],"nodes":[{"content":"Flags that control the swapping.","pos":[0,32]},{"content":"See the definitions of the constants.","pos":[33,70]}]}]},{"pos":[5276,5357],"content":"<ph id=\"ph1\">&lt;code&gt;cls&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>cls</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[5460,5502],"content":"The type <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">cls</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not complete.","needQuote":true,"needEscape":true,"source":"The type <code>cls</code> is not complete."},{"pos":[5597,5675],"content":"<ph id=\"ph1\">&lt;code&gt;methodSize&lt;/code&gt;</ph> is less than one or greater than 4128767 (3effff hex).","needQuote":true,"needEscape":true,"source":"<code>methodSize</code> is less than one or greater than 4128767 (3effff hex)."},{"pos":[6539,6606],"content":"Maps a set of names to a corresponding set of dispatch identifiers.","needQuote":true,"needEscape":true,"nodes":[{"content":"Maps a set of names to a corresponding set of dispatch identifiers.","pos":[0,67]}]},{"pos":[6618,6804],"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code.","pos":[0,109]},{"content":"For more information about <ph id=\"ph1\">`IDispatch::GetIDsOfNames`</ph>, see the MSDN Library.","pos":[110,186],"source":" For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library."}]},{"pos":[7011,7053],"content":"Reserved for future use. Must be IID_NULL.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reserved for future use. Must be IID_NULL.","pos":[0,42],"nodes":[{"content":"Reserved for future use.","pos":[0,24]},{"content":"Must be IID_NULL.","pos":[25,42]}]}]},{"pos":[7119,7157],"content":"Passed-in array of names to be mapped.","needQuote":true,"needEscape":true,"nodes":[{"content":"Passed-in array of names to be mapped.","pos":[0,38]}]},{"pos":[7220,7252],"content":"Count of the names to be mapped.","needQuote":true,"needEscape":true,"nodes":[{"content":"Count of the names to be mapped.","pos":[0,32]}]},{"pos":[7313,7364],"content":"The locale context in which to interpret the names.","needQuote":true,"needEscape":true,"nodes":[{"content":"The locale context in which to interpret the names.","pos":[0,51]}]},{"pos":[7429,7502],"content":"Caller-allocated array which receives the IDs corresponding to the names.","needQuote":true,"needEscape":true,"nodes":[{"content":"Caller-allocated array which receives the IDs corresponding to the names.","pos":[0,73]}]},{"pos":[7731,7799],"content":"The method is called late-bound using the COM <ph id=\"ph1\">`IDispatch`</ph> interface.","needQuote":true,"needEscape":true,"source":"The method is called late-bound using the COM `IDispatch` interface."},{"pos":[8563,8677],"content":"Retrieves the type information for an object, which can then be used to get the type information for an interface.","needQuote":true,"needEscape":true,"nodes":[{"content":"Retrieves the type information for an object, which can then be used to get the type information for an interface.","pos":[0,114]}]},{"pos":[8689,8873],"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code.","pos":[0,109]},{"content":"For more information about <ph id=\"ph1\">`IDispatch::GetTypeInfo`</ph>, see the MSDN Library.","pos":[110,184],"source":" For more information about `IDispatch::GetTypeInfo`, see the MSDN Library."}]},{"pos":[9048,9079],"content":"The type information to return.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type information to return.","pos":[0,31]}]},{"pos":[9140,9187],"content":"The locale identifier for the type information.","needQuote":true,"needEscape":true,"nodes":[{"content":"The locale identifier for the type information.","pos":[0,47]}]},{"pos":[9251,9311],"content":"Receives a pointer to the requested type information object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Receives a pointer to the requested type information object.","pos":[0,60]}]},{"pos":[9538,9606],"content":"The method is called late-bound using the COM <ph id=\"ph1\">`IDispatch`</ph> interface.","needQuote":true,"needEscape":true,"source":"The method is called late-bound using the COM `IDispatch` interface."},{"pos":[10299,10391],"content":"Retrieves the number of type information interfaces that an object provides (either 0 or 1).","needQuote":true,"needEscape":true,"nodes":[{"content":"Retrieves the number of type information interfaces that an object provides (either 0 or 1).","pos":[0,92]}]},{"pos":[10403,10592],"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code.","pos":[0,109]},{"content":"For more information about <ph id=\"ph1\">`IDispatch::GetTypeInfoCount`</ph>, see the MSDN Library.","pos":[110,189],"source":" For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library."}]},{"pos":[10751,10851],"content":"Points to a location that receives the number of type information interfaces provided by the object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Points to a location that receives the number of type information interfaces provided by the object.","pos":[0,100]}]},{"pos":[11083,11151],"content":"The method is called late-bound using the COM <ph id=\"ph1\">`IDispatch`</ph> interface.","needQuote":true,"needEscape":true,"source":"The method is called late-bound using the COM `IDispatch` interface."},{"pos":[12122,12185],"content":"Provides access to properties and methods exposed by an object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides access to properties and methods exposed by an object.","pos":[0,63]}]},{"pos":[12197,12376],"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::Invoke`, see the MSDN Library.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code.","pos":[0,109]},{"content":"For more information about <ph id=\"ph1\">`IDispatch::Invoke`</ph>, see the MSDN Library.","pos":[110,179],"source":" For more information about `IDispatch::Invoke`, see the MSDN Library."}]},{"pos":[12646,12668],"content":"Identifies the member.","needQuote":true,"needEscape":true,"nodes":[{"content":"Identifies the member.","pos":[0,22]}]},{"pos":[12727,12769],"content":"Reserved for future use. Must be IID_NULL.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reserved for future use. Must be IID_NULL.","pos":[0,42],"nodes":[{"content":"Reserved for future use.","pos":[0,24]},{"content":"Must be IID_NULL.","pos":[25,42]}]}]},{"pos":[12830,12881],"content":"The locale context in which to interpret arguments.","needQuote":true,"needEscape":true,"nodes":[{"content":"The locale context in which to interpret arguments.","pos":[0,51]}]},{"pos":[12943,12984],"content":"Flags describing the context of the call.","needQuote":true,"needEscape":true,"nodes":[{"content":"Flags describing the context of the call.","pos":[0,41]}]},{"pos":[13052,13211],"content":"Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.","needQuote":true,"needEscape":true,"nodes":[{"content":"Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.","pos":[0,159]}]},{"pos":[13278,13335],"content":"Pointer to the location where the result is to be stored.","needQuote":true,"needEscape":true,"nodes":[{"content":"Pointer to the location where the result is to be stored.","pos":[0,57]}]},{"pos":[13402,13461],"content":"Pointer to a structure that contains exception information.","needQuote":true,"needEscape":true,"nodes":[{"content":"Pointer to a structure that contains exception information.","pos":[0,59]}]},{"pos":[13526,13576],"content":"The index of the first argument that has an error.","needQuote":true,"needEscape":true,"nodes":[{"content":"The index of the first argument that has an error.","pos":[0,50]}]},{"pos":[13798,13866],"content":"The method is called late-bound using the COM <ph id=\"ph1\">`IDispatch`</ph> interface.","needQuote":true,"needEscape":true,"source":"The method is called late-bound using the COM `IDispatch` interface."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Reflection.Emit.MethodRental\n  id: MethodRental\n  children:\n  - System.Reflection.Emit.MethodRental.JitImmediate\n  - System.Reflection.Emit.MethodRental.JitOnDemand\n  - System.Reflection.Emit.MethodRental.SwapMethodBody(System.Type,System.Int32,System.IntPtr,System.Int32,System.Int32)\n  - System.Reflection.Emit.MethodRental.System#Runtime#InteropServices#_MethodRental#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  - System.Reflection.Emit.MethodRental.System#Runtime#InteropServices#_MethodRental#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  - System.Reflection.Emit.MethodRental.System#Runtime#InteropServices#_MethodRental#GetTypeInfoCount(System.UInt32@)\n  - System.Reflection.Emit.MethodRental.System#Runtime#InteropServices#_MethodRental#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  langs:\n  - csharp\n  name: MethodRental\n  nameWithType: MethodRental\n  fullName: System.Reflection.Emit.MethodRental\n  type: Class\n  summary: Provides a fast way to swap method body implementation given a method of a class.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]\n\n      [System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._MethodRental))]\n\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class MethodRental : System.Runtime.InteropServices._MethodRental\n  inheritance:\n  - System.Object\n  implements:\n  - System.Runtime.InteropServices._MethodRental\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Reflection.Emit.MethodRental.JitImmediate\n  id: JitImmediate\n  parent: System.Reflection.Emit.MethodRental\n  langs:\n  - csharp\n  name: JitImmediate\n  nameWithType: MethodRental.JitImmediate\n  fullName: System.Reflection.Emit.MethodRental.JitImmediate\n  type: Field\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Specifies that the method should be just-in-time (JIT) compiled immediately.\n  syntax:\n    content: public const int JitImmediate = 1;\n    return:\n      type: System.Int32\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Reflection.Emit.MethodRental.JitOnDemand\n  id: JitOnDemand\n  parent: System.Reflection.Emit.MethodRental\n  langs:\n  - csharp\n  name: JitOnDemand\n  nameWithType: MethodRental.JitOnDemand\n  fullName: System.Reflection.Emit.MethodRental.JitOnDemand\n  type: Field\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Specifies that the method should be just-in-time (JIT) compiled when needed.\n  syntax:\n    content: public const int JitOnDemand = 0;\n    return:\n      type: System.Int32\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Reflection.Emit.MethodRental.SwapMethodBody(System.Type,System.Int32,System.IntPtr,System.Int32,System.Int32)\n  id: SwapMethodBody(System.Type,System.Int32,System.IntPtr,System.Int32,System.Int32)\n  parent: System.Reflection.Emit.MethodRental\n  langs:\n  - csharp\n  name: SwapMethodBody(Type,Int32,IntPtr,Int32,Int32)\n  nameWithType: MethodRental.SwapMethodBody(Type,Int32,IntPtr,Int32,Int32)\n  fullName: System.Reflection.Emit.MethodRental.SwapMethodBody(Type,Int32,IntPtr,Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Swaps the body of a method.\n  remarks: \"You cannot use this method to swap the body of a global method.  \\n  \\n The method can only be called by the client that created the dynamic module that contains the type whose method's body is being swapped.\"\n  example:\n  - \"The following example illustrates how to swap a method body for a new body. It also illustrates how to obtain a method token for an existing method and how to construct a blob of bytes representing the Microsoft Intermediate Language (MSIL) code to be passed to `SwapMethodBody`.  \\n  \\n [!code-cpp[Classic MethodRental.SwapMethodBody Example#1](~/add/codesnippet/cpp/cc436dde-ab12-4c7e-9169-_1.cpp)]\\n [!code-cs[Classic MethodRental.SwapMethodBody Example#1](~/add/codesnippet/csharp/cc436dde-ab12-4c7e-9169-_1.cs)]\\n [!code-vb[Classic MethodRental.SwapMethodBody Example#1](~/add/codesnippet/visualbasic/cc436dde-ab12-4c7e-9169-_1.vb)]\"\n  syntax:\n    content: public static void SwapMethodBody (Type cls, int methodtoken, IntPtr rgIL, int methodSize, int flags);\n    parameters:\n    - id: cls\n      type: System.Type\n      description: The class containing the method.\n    - id: methodtoken\n      type: System.Int32\n      description: The token for the method.\n    - id: rgIL\n      type: System.IntPtr\n      description: A pointer to the method. This should include the method header.\n    - id: methodSize\n      type: System.Int32\n      description: The size of the new method body in bytes.\n    - id: flags\n      type: System.Int32\n      description: Flags that control the swapping. See the definitions of the constants.\n  overload: System.Reflection.Emit.MethodRental.SwapMethodBody*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>cls</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The type <code>cls</code> is not complete.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>methodSize</code> is less than one or greater than 4128767 (3effff hex).\n  platform:\n  - net462\n- uid: System.Reflection.Emit.MethodRental.System#Runtime#InteropServices#_MethodRental#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  id: System#Runtime#InteropServices#_MethodRental#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  isEii: true\n  parent: System.Reflection.Emit.MethodRental\n  langs:\n  - csharp\n  name: System.Runtime.InteropServices._MethodRental.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)\n  nameWithType: MethodRental.System.Runtime.InteropServices._MethodRental.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)\n  fullName: System.Reflection.Emit.MethodRental.System.Runtime.InteropServices._MethodRental.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Maps a set of names to a corresponding set of dispatch identifiers.\n  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.\n  syntax:\n    content: void _MethodRental.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);\n    parameters:\n    - id: riid\n      type: System.Guid\n      description: Reserved for future use. Must be IID_NULL.\n    - id: rgszNames\n      type: System.IntPtr\n      description: Passed-in array of names to be mapped.\n    - id: cNames\n      type: System.UInt32\n      description: Count of the names to be mapped.\n    - id: lcid\n      type: System.UInt32\n      description: The locale context in which to interpret the names.\n    - id: rgDispId\n      type: System.IntPtr\n      description: Caller-allocated array which receives the IDs corresponding to the names.\n  overload: System.Reflection.Emit.MethodRental.System#Runtime#InteropServices#_MethodRental#GetIDsOfNames*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: The method is called late-bound using the COM `IDispatch` interface.\n  platform:\n  - net462\n- uid: System.Reflection.Emit.MethodRental.System#Runtime#InteropServices#_MethodRental#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  id: System#Runtime#InteropServices#_MethodRental#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  isEii: true\n  parent: System.Reflection.Emit.MethodRental\n  langs:\n  - csharp\n  name: System.Runtime.InteropServices._MethodRental.GetTypeInfo(UInt32,UInt32,IntPtr)\n  nameWithType: MethodRental.System.Runtime.InteropServices._MethodRental.GetTypeInfo(UInt32,UInt32,IntPtr)\n  fullName: System.Reflection.Emit.MethodRental.System.Runtime.InteropServices._MethodRental.GetTypeInfo(UInt32,UInt32,IntPtr)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Retrieves the type information for an object, which can then be used to get the type information for an interface.\n  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.\n  syntax:\n    content: void _MethodRental.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);\n    parameters:\n    - id: iTInfo\n      type: System.UInt32\n      description: The type information to return.\n    - id: lcid\n      type: System.UInt32\n      description: The locale identifier for the type information.\n    - id: ppTInfo\n      type: System.IntPtr\n      description: Receives a pointer to the requested type information object.\n  overload: System.Reflection.Emit.MethodRental.System#Runtime#InteropServices#_MethodRental#GetTypeInfo*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: The method is called late-bound using the COM `IDispatch` interface.\n  platform:\n  - net462\n- uid: System.Reflection.Emit.MethodRental.System#Runtime#InteropServices#_MethodRental#GetTypeInfoCount(System.UInt32@)\n  id: System#Runtime#InteropServices#_MethodRental#GetTypeInfoCount(System.UInt32@)\n  isEii: true\n  parent: System.Reflection.Emit.MethodRental\n  langs:\n  - csharp\n  name: System.Runtime.InteropServices._MethodRental.GetTypeInfoCount(UInt32)\n  nameWithType: MethodRental.System.Runtime.InteropServices._MethodRental.GetTypeInfoCount(UInt32)\n  fullName: System.Reflection.Emit.MethodRental.System.Runtime.InteropServices._MethodRental.GetTypeInfoCount(UInt32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Retrieves the number of type information interfaces that an object provides (either 0 or 1).\n  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.\n  syntax:\n    content: void _MethodRental.GetTypeInfoCount (out uint pcTInfo);\n    parameters:\n    - id: pcTInfo\n      type: System.UInt32\n      description: Points to a location that receives the number of type information interfaces provided by the object.\n  overload: System.Reflection.Emit.MethodRental.System#Runtime#InteropServices#_MethodRental#GetTypeInfoCount*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: The method is called late-bound using the COM `IDispatch` interface.\n  platform:\n  - net462\n- uid: System.Reflection.Emit.MethodRental.System#Runtime#InteropServices#_MethodRental#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  id: System#Runtime#InteropServices#_MethodRental#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  isEii: true\n  parent: System.Reflection.Emit.MethodRental\n  langs:\n  - csharp\n  name: System.Runtime.InteropServices._MethodRental.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)\n  nameWithType: MethodRental.System.Runtime.InteropServices._MethodRental.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)\n  fullName: System.Reflection.Emit.MethodRental.System.Runtime.InteropServices._MethodRental.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Provides access to properties and methods exposed by an object.\n  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::Invoke`, see the MSDN Library.\n  syntax:\n    content: void _MethodRental.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);\n    parameters:\n    - id: dispIdMember\n      type: System.UInt32\n      description: Identifies the member.\n    - id: riid\n      type: System.Guid\n      description: Reserved for future use. Must be IID_NULL.\n    - id: lcid\n      type: System.UInt32\n      description: The locale context in which to interpret arguments.\n    - id: wFlags\n      type: System.Int16\n      description: Flags describing the context of the call.\n    - id: pDispParams\n      type: System.IntPtr\n      description: Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.\n    - id: pVarResult\n      type: System.IntPtr\n      description: Pointer to the location where the result is to be stored.\n    - id: pExcepInfo\n      type: System.IntPtr\n      description: Pointer to a structure that contains exception information.\n    - id: puArgErr\n      type: System.IntPtr\n      description: The index of the first argument that has an error.\n  overload: System.Reflection.Emit.MethodRental.System#Runtime#InteropServices#_MethodRental#Invoke*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: The method is called late-bound using the COM `IDispatch` interface.\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.NotSupportedException\n  isExternal: true\n  name: System.NotSupportedException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.NotImplementedException\n  isExternal: true\n  name: System.NotImplementedException\n- uid: System.Reflection.Emit.MethodRental.JitImmediate\n  parent: System.Reflection.Emit.MethodRental\n  isExternal: false\n  name: JitImmediate\n  nameWithType: MethodRental.JitImmediate\n  fullName: System.Reflection.Emit.MethodRental.JitImmediate\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Reflection.Emit.MethodRental.JitOnDemand\n  parent: System.Reflection.Emit.MethodRental\n  isExternal: false\n  name: JitOnDemand\n  nameWithType: MethodRental.JitOnDemand\n  fullName: System.Reflection.Emit.MethodRental.JitOnDemand\n- uid: System.Reflection.Emit.MethodRental.SwapMethodBody(System.Type,System.Int32,System.IntPtr,System.Int32,System.Int32)\n  parent: System.Reflection.Emit.MethodRental\n  isExternal: false\n  name: SwapMethodBody(Type,Int32,IntPtr,Int32,Int32)\n  nameWithType: MethodRental.SwapMethodBody(Type,Int32,IntPtr,Int32,Int32)\n  fullName: System.Reflection.Emit.MethodRental.SwapMethodBody(Type,Int32,IntPtr,Int32,Int32)\n- uid: System.Type\n  parent: System\n  isExternal: true\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.IntPtr\n  parent: System\n  isExternal: true\n  name: IntPtr\n  nameWithType: IntPtr\n  fullName: System.IntPtr\n- uid: System.Reflection.Emit.MethodRental.System#Runtime#InteropServices#_MethodRental#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Reflection.Emit.MethodRental\n  isExternal: false\n  name: System.Runtime.InteropServices._MethodRental.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)\n  nameWithType: MethodRental.System.Runtime.InteropServices._MethodRental.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)\n  fullName: System.Reflection.Emit.MethodRental.System.Runtime.InteropServices._MethodRental.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)\n- uid: System.Guid\n  parent: System\n  isExternal: true\n  name: Guid\n  nameWithType: Guid\n  fullName: System.Guid\n- uid: System.UInt32\n  parent: System\n  isExternal: true\n  name: UInt32\n  nameWithType: UInt32\n  fullName: System.UInt32\n- uid: System.Reflection.Emit.MethodRental.System#Runtime#InteropServices#_MethodRental#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Reflection.Emit.MethodRental\n  isExternal: false\n  name: System.Runtime.InteropServices._MethodRental.GetTypeInfo(UInt32,UInt32,IntPtr)\n  nameWithType: MethodRental.System.Runtime.InteropServices._MethodRental.GetTypeInfo(UInt32,UInt32,IntPtr)\n  fullName: System.Reflection.Emit.MethodRental.System.Runtime.InteropServices._MethodRental.GetTypeInfo(UInt32,UInt32,IntPtr)\n- uid: System.Reflection.Emit.MethodRental.System#Runtime#InteropServices#_MethodRental#GetTypeInfoCount(System.UInt32@)\n  parent: System.Reflection.Emit.MethodRental\n  isExternal: false\n  name: System.Runtime.InteropServices._MethodRental.GetTypeInfoCount(UInt32)\n  nameWithType: MethodRental.System.Runtime.InteropServices._MethodRental.GetTypeInfoCount(UInt32)\n  fullName: System.Reflection.Emit.MethodRental.System.Runtime.InteropServices._MethodRental.GetTypeInfoCount(UInt32)\n- uid: System.Reflection.Emit.MethodRental.System#Runtime#InteropServices#_MethodRental#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  parent: System.Reflection.Emit.MethodRental\n  isExternal: false\n  name: System.Runtime.InteropServices._MethodRental.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)\n  nameWithType: MethodRental.System.Runtime.InteropServices._MethodRental.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)\n  fullName: System.Reflection.Emit.MethodRental.System.Runtime.InteropServices._MethodRental.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)\n- uid: System.Int16\n  parent: System\n  isExternal: true\n  name: Int16\n  nameWithType: Int16\n  fullName: System.Int16\n- uid: System.Reflection.Emit.MethodRental.SwapMethodBody*\n  parent: System.Reflection.Emit.MethodRental\n  isExternal: false\n  name: SwapMethodBody\n  nameWithType: MethodRental.SwapMethodBody\n- uid: System.Reflection.Emit.MethodRental.System#Runtime#InteropServices#_MethodRental#GetIDsOfNames*\n  parent: System.Reflection.Emit.MethodRental\n  isExternal: false\n  name: System.Runtime.InteropServices._MethodRental.GetIDsOfNames\n  nameWithType: MethodRental.System.Runtime.InteropServices._MethodRental.GetIDsOfNames\n- uid: System.Reflection.Emit.MethodRental.System#Runtime#InteropServices#_MethodRental#GetTypeInfo*\n  parent: System.Reflection.Emit.MethodRental\n  isExternal: false\n  name: System.Runtime.InteropServices._MethodRental.GetTypeInfo\n  nameWithType: MethodRental.System.Runtime.InteropServices._MethodRental.GetTypeInfo\n- uid: System.Reflection.Emit.MethodRental.System#Runtime#InteropServices#_MethodRental#GetTypeInfoCount*\n  parent: System.Reflection.Emit.MethodRental\n  isExternal: false\n  name: System.Runtime.InteropServices._MethodRental.GetTypeInfoCount\n  nameWithType: MethodRental.System.Runtime.InteropServices._MethodRental.GetTypeInfoCount\n- uid: System.Reflection.Emit.MethodRental.System#Runtime#InteropServices#_MethodRental#Invoke*\n  parent: System.Reflection.Emit.MethodRental\n  isExternal: false\n  name: System.Runtime.InteropServices._MethodRental.Invoke\n  nameWithType: MethodRental.System.Runtime.InteropServices._MethodRental.Invoke\n"}