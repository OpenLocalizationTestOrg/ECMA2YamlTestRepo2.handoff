{"nodes":[{"pos":[474,531],"content":"Describes the breaking condition around an inline object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Describes the breaking condition around an inline object.","pos":[0,57]}]},{"pos":[544,1263],"content":"This enumeration describes whether a break is permitted for an inline object. This break is affected by the LineBreakCondition of the inline object before it (if any). In the table below, the values across the top represent LineBreakCondition values for one inline object while the values on the left represent values of another inline object. A value of \"True\" or \"False\" is indicated depending on whether a line break is permitted between the two inline objects.      ||||||   |-|-|-|-|-|   ||BreakDesired|BreakPossible|BreakRestrained|BreakAlways|   |BreakDesired|True|True|False|True|   |BreakPossible|True|False|False|True|   |BreakRestrained|False|False|False|True|   |BreakAlways|True|True|True|True|","needQuote":false,"needEscape":true,"nodes":[{"content":"This enumeration describes whether a break is permitted for an inline object. This break is affected by the LineBreakCondition of the inline object before it (if any). In the table below, the values across the top represent LineBreakCondition values for one inline object while the values on the left represent values of another inline object. A value of \"True\" or \"False\" is indicated depending on whether a line break is permitted between the two inline objects.      ||||||   |-|-|-|-|-|   ||BreakDesired|BreakPossible|BreakRestrained|BreakAlways|   |BreakDesired|True|True|False|True|   |BreakPossible|True|False|False|True|   |BreakRestrained|False|False|False|True|   |BreakAlways|True|True|True|True|","pos":[0,707],"nodes":[{"content":"This enumeration describes whether a break is permitted for an inline object.","pos":[0,77]},{"content":"This break is affected by the LineBreakCondition of the inline object before it (if any).","pos":[78,167]},{"content":"In the table below, the values across the top represent LineBreakCondition values for one inline object while the values on the left represent values of another inline object.","pos":[168,343]},{"content":"A value of \"True\" or \"False\" is indicated depending on whether a line break is permitted between the two inline objects.","pos":[344,464]},{"content":"||||||   |-|-|-|-|-|   ||BreakDesired|BreakPossible|BreakRestrained|BreakAlways|   |BreakDesired|True|True|False|True|   |BreakPossible|True|False|False|True|   |BreakRestrained|False|False|False|True|   |BreakAlways|True|True|True|True|","pos":[470,707]}]}]},{"pos":[1721,1745],"content":"Break is always allowed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Break is always allowed.","pos":[0,24]}]},{"pos":[1858,1870],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[2264,2306],"content":"Break if not prohibited by another object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Break if not prohibited by another object.","pos":[0,42]}]},{"pos":[2420,2432],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[2831,2866],"content":"Break if allowed by another object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Break if allowed by another object.","pos":[0,35]}]},{"pos":[2981,2993],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[3402,3472],"content":"Break always prohibited unless the other object is set to BreakAlways.","needQuote":true,"needEscape":true,"nodes":[{"content":"Break always prohibited unless the other object is set to BreakAlways.","pos":[0,70]}]},{"pos":[3589,3601],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.LineBreakCondition\n  id: LineBreakCondition\n  children:\n  - System.Windows.LineBreakCondition.BreakAlways\n  - System.Windows.LineBreakCondition.BreakDesired\n  - System.Windows.LineBreakCondition.BreakPossible\n  - System.Windows.LineBreakCondition.BreakRestrained\n  langs:\n  - csharp\n  name: LineBreakCondition\n  nameWithType: LineBreakCondition\n  fullName: System.Windows.LineBreakCondition\n  type: Enum\n  summary: Describes the breaking condition around an inline object.\n  remarks: \"This enumeration describes whether a break is permitted for an inline object. This break is affected by the LineBreakCondition of the inline object before it (if any). In the table below, the values across the top represent LineBreakCondition values for one inline object while the values on the left represent values of another inline object. A value of \\\"True\\\" or \\\"False\\\" is indicated depending on whether a line break is permitted between the two inline objects.  \\n  \\n||||||  \\n|-|-|-|-|-|  \\n||BreakDesired|BreakPossible|BreakRestrained|BreakAlways|  \\n|BreakDesired|True|True|False|True|  \\n|BreakPossible|True|False|False|True|  \\n|BreakRestrained|False|False|False|True|  \\n|BreakAlways|True|True|True|True|\"\n  syntax:\n    content: public enum LineBreakCondition\n  inheritance:\n  - System.Enum\n  platform:\n  - net462\n- uid: System.Windows.LineBreakCondition.BreakAlways\n  id: BreakAlways\n  parent: System.Windows.LineBreakCondition\n  langs:\n  - csharp\n  name: BreakAlways\n  nameWithType: LineBreakCondition.BreakAlways\n  fullName: System.Windows.LineBreakCondition.BreakAlways\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Break is always allowed.\n  syntax:\n    content: BreakAlways\n    return:\n      type: System.Windows.LineBreakCondition\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.LineBreakCondition.BreakDesired\n  id: BreakDesired\n  parent: System.Windows.LineBreakCondition\n  langs:\n  - csharp\n  name: BreakDesired\n  nameWithType: LineBreakCondition.BreakDesired\n  fullName: System.Windows.LineBreakCondition.BreakDesired\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Break if not prohibited by another object.\n  syntax:\n    content: BreakDesired\n    return:\n      type: System.Windows.LineBreakCondition\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.LineBreakCondition.BreakPossible\n  id: BreakPossible\n  parent: System.Windows.LineBreakCondition\n  langs:\n  - csharp\n  name: BreakPossible\n  nameWithType: LineBreakCondition.BreakPossible\n  fullName: System.Windows.LineBreakCondition.BreakPossible\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Break if allowed by another object.\n  syntax:\n    content: BreakPossible\n    return:\n      type: System.Windows.LineBreakCondition\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.LineBreakCondition.BreakRestrained\n  id: BreakRestrained\n  parent: System.Windows.LineBreakCondition\n  langs:\n  - csharp\n  name: BreakRestrained\n  nameWithType: LineBreakCondition.BreakRestrained\n  fullName: System.Windows.LineBreakCondition.BreakRestrained\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Break always prohibited unless the other object is set to BreakAlways.\n  syntax:\n    content: BreakRestrained\n    return:\n      type: System.Windows.LineBreakCondition\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Enum\n  isExternal: false\n  name: System.Enum\n- uid: System.Windows.LineBreakCondition.BreakAlways\n  parent: System.Windows.LineBreakCondition\n  isExternal: false\n  name: BreakAlways\n  nameWithType: LineBreakCondition.BreakAlways\n  fullName: System.Windows.LineBreakCondition.BreakAlways\n- uid: System.Windows.LineBreakCondition\n  parent: System.Windows\n  isExternal: false\n  name: LineBreakCondition\n  nameWithType: LineBreakCondition\n  fullName: System.Windows.LineBreakCondition\n- uid: System.Windows.LineBreakCondition.BreakDesired\n  parent: System.Windows.LineBreakCondition\n  isExternal: false\n  name: BreakDesired\n  nameWithType: LineBreakCondition.BreakDesired\n  fullName: System.Windows.LineBreakCondition.BreakDesired\n- uid: System.Windows.LineBreakCondition.BreakPossible\n  parent: System.Windows.LineBreakCondition\n  isExternal: false\n  name: BreakPossible\n  nameWithType: LineBreakCondition.BreakPossible\n  fullName: System.Windows.LineBreakCondition.BreakPossible\n- uid: System.Windows.LineBreakCondition.BreakRestrained\n  parent: System.Windows.LineBreakCondition\n  isExternal: false\n  name: BreakRestrained\n  nameWithType: LineBreakCondition.BreakRestrained\n  fullName: System.Windows.LineBreakCondition.BreakRestrained\n"}