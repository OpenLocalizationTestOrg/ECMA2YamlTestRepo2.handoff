{"nodes":[{"pos":[629,753],"content":"Represents a variable-length argument list; that is, the parameters of a function that takes a variable number of arguments.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents a variable-length argument list; that is, the parameters of a function that takes a variable number of arguments.","pos":[0,124]}]},{"pos":[766,1417],"content":"Developers who write compilers use the ArgIterator structure to enumerate the mandatory and optional arguments in an argument list. The ArgIterator structure is not generally useful for applications other than compilers.       The functionality in the ArgIterator structure is typically hidden in the syntax of a specific programming language. For example, in the C++ programming language you declare a variable-length argument list by specifying an ellipsis (\"...\") at the end of the argument list. The ArgIterator structure is useful primarily when a development language does not provide direct support for accessing variable-length parameters.","needQuote":false,"needEscape":true,"nodes":[{"content":"Developers who write compilers use the ArgIterator structure to enumerate the mandatory and optional arguments in an argument list. The ArgIterator structure is not generally useful for applications other than compilers.       The functionality in the ArgIterator structure is typically hidden in the syntax of a specific programming language. For example, in the C++ programming language you declare a variable-length argument list by specifying an ellipsis (\"...\") at the end of the argument list. The ArgIterator structure is useful primarily when a development language does not provide direct support for accessing variable-length parameters.","pos":[0,647],"nodes":[{"content":"Developers who write compilers use the ArgIterator structure to enumerate the mandatory and optional arguments in an argument list.","pos":[0,131]},{"content":"The ArgIterator structure is not generally useful for applications other than compilers.","pos":[132,220]},{"content":"The functionality in the ArgIterator structure is typically hidden in the syntax of a specific programming language.","pos":[227,343]},{"content":"For example, in the C++ programming language you declare a variable-length argument list by specifying an ellipsis (\"...\") at the end of the argument list.","pos":[344,499]},{"content":"The ArgIterator structure is useful primarily when a development language does not provide direct support for accessing variable-length parameters.","pos":[500,647]}]}]},{"pos":[1949,2067],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.ArgIterator\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure using the specified argument list.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.ArgIterator\"></xref> structure using the specified argument list."},{"pos":[2079,2191],"content":"The new <xref:System.ArgIterator> object enumerates the argument list starting from the first optional argument.","needQuote":true,"needEscape":true,"nodes":[{"content":"The new &lt;xref:System.ArgIterator&gt; object enumerates the argument list starting from the first optional argument.","pos":[0,112],"source":"The new <xref:System.ArgIterator> object enumerates the argument list starting from the first optional argument."}]},{"pos":[2361,2425],"content":"An argument list consisting of mandatory and optional arguments.","needQuote":true,"needEscape":true,"nodes":[{"content":"An argument list consisting of mandatory and optional arguments.","pos":[0,64]}]},{"pos":[2953,3108],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.ArgIterator\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure using the specified argument list and a pointer to an item in the list.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.ArgIterator\"></xref> structure using the specified argument list and a pointer to an item in the list."},{"pos":[3120,3288],"content":"The new &lt;xref:System.ArgIterator&gt; object enumerates the argument list starting from the argument specified by <ph id=\"ph1\">`ptr`</ph>, or the first mandatory argument if <ph id=\"ph2\">`ptr`</ph> is <ph id=\"ph3\">`null`</ph>.","needQuote":true,"needEscape":true,"source":"The new <xref:System.ArgIterator> object enumerates the argument list starting from the argument specified by `ptr`, or the first mandatory argument if `ptr` is `null`."},{"pos":[3469,3533],"content":"An argument list consisting of mandatory and optional arguments.","needQuote":true,"needEscape":true,"nodes":[{"content":"An argument list consisting of mandatory and optional arguments.","pos":[0,64]}]},{"pos":[3592,3766],"content":"A pointer to the argument in <ph id=\"ph1\">`arglist`</ph> to access first, or the first mandatory argument in <ph id=\"ph2\">`arglist`</ph> if <ph id=\"ph3\">`ptr`</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A pointer to the argument in `arglist` to access first, or the first mandatory argument in `arglist` if `ptr` is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[4092,4179],"content":"Concludes processing of the variable-length argument list represented by this instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"Concludes processing of the variable-length argument list represented by this instance.","pos":[0,87]}]},{"pos":[4192,4560],"content":"Conceptually, End concludes the processing of a variable-length argument list. However, this method has no actual implementation; the End method body is empty. You can use this method in your code as a marker to indicate where variable-length argument list processing logically ends.       The End method corresponds to the `va_end` method in the C standard library.","needQuote":false,"needEscape":true,"nodes":[{"content":"Conceptually, End concludes the processing of a variable-length argument list.","pos":[0,78]},{"content":"However, this method has no actual implementation; the End method body is empty.","pos":[79,159]},{"content":"You can use this method in your code as a marker to indicate where variable-length argument list processing logically ends.","pos":[160,283]},{"content":"The End method corresponds to the <ph id=\"ph1\">`va_end`</ph> method in the C standard library.","pos":[290,366],"source":"       The End method corresponds to the `va_end` method in the C standard library."}]},{"pos":[5010,5094],"content":"This method is not supported, and always throws <xref:System.NotSupportedException>.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method is not supported, and always throws &lt;xref:System.NotSupportedException&gt;.","pos":[0,84],"source":"This method is not supported, and always throws <xref:System.NotSupportedException>."}]},{"pos":[5231,5273],"content":"An object to be compared to this instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object to be compared to this instance.","pos":[0,42]}]},{"pos":[5332,5387],"content":"This comparison is not supported. No value is returned.","needQuote":true,"needEscape":true,"nodes":[{"content":"This comparison is not supported. No value is returned.","pos":[0,55],"nodes":[{"content":"This comparison is not supported.","pos":[0,33]},{"content":"No value is returned.","pos":[34,55]}]}]},{"pos":[5543,5572],"content":"This method is not supported.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method is not supported.","pos":[0,29]}]},{"pos":[5883,5920],"content":"Returns the hash code of this object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the hash code of this object.","pos":[0,37]}]},{"pos":[6055,6089],"content":"A 32-bit signed integer hash code.","needQuote":true,"needEscape":true,"nodes":[{"content":"A 32-bit signed integer hash code.","pos":[0,34]}]},{"pos":[6456,6517],"content":"Returns the next argument in a variable-length argument list.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the next argument in a variable-length argument list.","pos":[0,61]}]},{"pos":[6529,6589],"content":"The iterator is automatically advanced to the next argument.","needQuote":true,"needEscape":true,"nodes":[{"content":"The iterator is automatically advanced to the next argument.","pos":[0,60]}]},{"pos":[6734,6807],"content":"The next argument as a <bpt id=\"p1\">&lt;xref href=\"System.TypedReference\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"The next argument as a <xref href=\"System.TypedReference\"></xref> object."},{"pos":[6975,7030],"content":"An attempt was made to read beyond the end of the list.","needQuote":true,"needEscape":true,"nodes":[{"content":"An attempt was made to read beyond the end of the list.","pos":[0,55]}]},{"pos":[7439,7526],"content":"Returns the next argument in a variable-length argument list that has a specified type.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the next argument in a variable-length argument list that has a specified type.","pos":[0,87]}]},{"pos":[7538,7598],"content":"The iterator is automatically advanced to the next argument.","needQuote":true,"needEscape":true,"nodes":[{"content":"The iterator is automatically advanced to the next argument.","pos":[0,60]}]},{"pos":[7766,7841],"content":"A runtime type handle that identifies the type of the argument to retrieve.","needQuote":true,"needEscape":true,"nodes":[{"content":"A runtime type handle that identifies the type of the argument to retrieve.","pos":[0,75]}]},{"pos":[7907,7980],"content":"The next argument as a <bpt id=\"p1\">&lt;xref href=\"System.TypedReference\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"The next argument as a <xref href=\"System.TypedReference\"></xref> object."},{"pos":[8148,8203],"content":"An attempt was made to read beyond the end of the list.","needQuote":true,"needEscape":true,"nodes":[{"content":"An attempt was made to read beyond the end of the list.","pos":[0,55]}]},{"pos":[8306,8353],"content":"The pointer to the remaining arguments is zero.","needQuote":true,"needEscape":true,"nodes":[{"content":"The pointer to the remaining arguments is zero.","pos":[0,47]}]},{"pos":[8679,8717],"content":"Returns the type of the next argument.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the type of the next argument.","pos":[0,38]}]},{"pos":[8730,9089],"content":"This method does not advance the iterator to the next argument.       GetNextArgType returns the type of the argument as specified in the calling function. For example, if an argument is type <xref:System.String>, but the calling function specifies the argument as type <xref:System.Object>, GetNextArgType reports the argument as type <xref:System.Object>.","needQuote":false,"needEscape":true,"nodes":[{"content":"This method does not advance the iterator to the next argument.       GetNextArgType returns the type of the argument as specified in the calling function. For example, if an argument is type <xref:System.String>, but the calling function specifies the argument as type <xref:System.Object>, GetNextArgType reports the argument as type <xref:System.Object>.","pos":[0,357],"nodes":[{"content":"This method does not advance the iterator to the next argument.","pos":[0,63]},{"content":"GetNextArgType returns the type of the argument as specified in the calling function.","pos":[70,155]},{"content":"For example, if an argument is type &lt;xref:System.String&gt;, but the calling function specifies the argument as type &lt;xref:System.Object&gt;, GetNextArgType reports the argument as type &lt;xref:System.Object&gt;.","pos":[156,357],"source":" For example, if an argument is type <xref:System.String>, but the calling function specifies the argument as type <xref:System.Object>, GetNextArgType reports the argument as type <xref:System.Object>."}]}]},{"pos":[9245,9275],"content":"The type of the next argument.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type of the next argument.","pos":[0,30]}]},{"pos":[9680,9743],"content":"Returns the number of arguments remaining in the argument list.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the number of arguments remaining in the argument list.","pos":[0,63]}]},{"pos":[9875,9909],"content":"The number of remaining arguments.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of remaining arguments.","pos":[0,34]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ArgIterator\n  id: ArgIterator\n  children:\n  - System.ArgIterator.#ctor(System.RuntimeArgumentHandle)\n  - System.ArgIterator.#ctor(System.RuntimeArgumentHandle,System.Void*)\n  - System.ArgIterator.End\n  - System.ArgIterator.Equals(System.Object)\n  - System.ArgIterator.GetHashCode\n  - System.ArgIterator.GetNextArg\n  - System.ArgIterator.GetNextArg(System.RuntimeTypeHandle)\n  - System.ArgIterator.GetNextArgType\n  - System.ArgIterator.GetRemainingCount\n  langs:\n  - csharp\n  name: ArgIterator\n  nameWithType: ArgIterator\n  fullName: System.ArgIterator\n  type: Struct\n  summary: Represents a variable-length argument list; that is, the parameters of a function that takes a variable number of arguments.\n  remarks: \"Developers who write compilers use the ArgIterator structure to enumerate the mandatory and optional arguments in an argument list. The ArgIterator structure is not generally useful for applications other than compilers.  \\n  \\n The functionality in the ArgIterator structure is typically hidden in the syntax of a specific programming language. For example, in the C++ programming language you declare a variable-length argument list by specifying an ellipsis (\\\"...\\\") at the end of the argument list. The ArgIterator structure is useful primarily when a development language does not provide direct support for accessing variable-length parameters.\"\n  syntax:\n    content: public struct ArgIterator\n  inheritance:\n  - System.ValueType\n  implements: []\n  platform:\n  - net462\n- uid: System.ArgIterator.#ctor(System.RuntimeArgumentHandle)\n  id: '#ctor(System.RuntimeArgumentHandle)'\n  parent: System.ArgIterator\n  langs:\n  - csharp\n  name: ArgIterator(RuntimeArgumentHandle)\n  nameWithType: ArgIterator.ArgIterator(RuntimeArgumentHandle)\n  fullName: System.ArgIterator.ArgIterator(RuntimeArgumentHandle)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Initializes a new instance of the <xref href=\"System.ArgIterator\"></xref> structure using the specified argument list.\n  remarks: The new <xref:System.ArgIterator> object enumerates the argument list starting from the first optional argument.\n  syntax:\n    content: public ArgIterator (RuntimeArgumentHandle arglist);\n    parameters:\n    - id: arglist\n      type: System.RuntimeArgumentHandle\n      description: An argument list consisting of mandatory and optional arguments.\n  overload: System.ArgIterator.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ArgIterator.#ctor(System.RuntimeArgumentHandle,System.Void*)\n  id: '#ctor(System.RuntimeArgumentHandle,System.Void*)'\n  parent: System.ArgIterator\n  langs:\n  - csharp\n  name: ArgIterator(RuntimeArgumentHandle,Void*)\n  nameWithType: ArgIterator.ArgIterator(RuntimeArgumentHandle,Void*)\n  fullName: System.ArgIterator.ArgIterator(RuntimeArgumentHandle,Void*)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Initializes a new instance of the <xref href=\"System.ArgIterator\"></xref> structure using the specified argument list and a pointer to an item in the list.\n  remarks: The new <xref:System.ArgIterator> object enumerates the argument list starting from the argument specified by `ptr`, or the first mandatory argument if `ptr` is `null`.\n  syntax:\n    content: public ArgIterator (RuntimeArgumentHandle arglist, void* ptr);\n    parameters:\n    - id: arglist\n      type: System.RuntimeArgumentHandle\n      description: An argument list consisting of mandatory and optional arguments.\n    - id: ptr\n      type: System.Void*\n      description: A pointer to the argument in `arglist` to access first, or the first mandatory argument in `arglist` if `ptr` is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.ArgIterator.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ArgIterator.End\n  id: End\n  parent: System.ArgIterator\n  langs:\n  - csharp\n  name: End()\n  nameWithType: ArgIterator.End()\n  fullName: System.ArgIterator.End()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Concludes processing of the variable-length argument list represented by this instance.\n  remarks: \"Conceptually, End concludes the processing of a variable-length argument list. However, this method has no actual implementation; the End method body is empty. You can use this method in your code as a marker to indicate where variable-length argument list processing logically ends.  \\n  \\n The End method corresponds to the `va_end` method in the C standard library.\"\n  syntax:\n    content: public void End ();\n    parameters: []\n  overload: System.ArgIterator.End*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ArgIterator.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.ArgIterator\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: ArgIterator.Equals(Object)\n  fullName: System.ArgIterator.Equals(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: This method is not supported, and always throws <xref:System.NotSupportedException>.\n  syntax:\n    content: public override bool Equals (object o);\n    parameters:\n    - id: o\n      type: System.Object\n      description: An object to be compared to this instance.\n    return:\n      type: System.Boolean\n      description: This comparison is not supported. No value is returned.\n  overload: System.ArgIterator.Equals*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This method is not supported.\n  platform:\n  - net462\n- uid: System.ArgIterator.GetHashCode\n  id: GetHashCode\n  parent: System.ArgIterator\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: ArgIterator.GetHashCode()\n  fullName: System.ArgIterator.GetHashCode()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Returns the hash code of this object.\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: A 32-bit signed integer hash code.\n  overload: System.ArgIterator.GetHashCode*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ArgIterator.GetNextArg\n  id: GetNextArg\n  parent: System.ArgIterator\n  langs:\n  - csharp\n  name: GetNextArg()\n  nameWithType: ArgIterator.GetNextArg()\n  fullName: System.ArgIterator.GetNextArg()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Returns the next argument in a variable-length argument list.\n  remarks: The iterator is automatically advanced to the next argument.\n  syntax:\n    content: public TypedReference GetNextArg ();\n    parameters: []\n    return:\n      type: System.TypedReference\n      description: The next argument as a <xref href=\"System.TypedReference\"></xref> object.\n  overload: System.ArgIterator.GetNextArg*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: An attempt was made to read beyond the end of the list.\n  platform:\n  - net462\n- uid: System.ArgIterator.GetNextArg(System.RuntimeTypeHandle)\n  id: GetNextArg(System.RuntimeTypeHandle)\n  parent: System.ArgIterator\n  langs:\n  - csharp\n  name: GetNextArg(RuntimeTypeHandle)\n  nameWithType: ArgIterator.GetNextArg(RuntimeTypeHandle)\n  fullName: System.ArgIterator.GetNextArg(RuntimeTypeHandle)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Returns the next argument in a variable-length argument list that has a specified type.\n  remarks: The iterator is automatically advanced to the next argument.\n  syntax:\n    content: public TypedReference GetNextArg (RuntimeTypeHandle rth);\n    parameters:\n    - id: rth\n      type: System.RuntimeTypeHandle\n      description: A runtime type handle that identifies the type of the argument to retrieve.\n    return:\n      type: System.TypedReference\n      description: The next argument as a <xref href=\"System.TypedReference\"></xref> object.\n  overload: System.ArgIterator.GetNextArg*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: An attempt was made to read beyond the end of the list.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The pointer to the remaining arguments is zero.\n  platform:\n  - net462\n- uid: System.ArgIterator.GetNextArgType\n  id: GetNextArgType\n  parent: System.ArgIterator\n  langs:\n  - csharp\n  name: GetNextArgType()\n  nameWithType: ArgIterator.GetNextArgType()\n  fullName: System.ArgIterator.GetNextArgType()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Returns the type of the next argument.\n  remarks: \"This method does not advance the iterator to the next argument.  \\n  \\n GetNextArgType returns the type of the argument as specified in the calling function. For example, if an argument is type <xref:System.String>, but the calling function specifies the argument as type <xref:System.Object>, GetNextArgType reports the argument as type <xref:System.Object>.\"\n  syntax:\n    content: public RuntimeTypeHandle GetNextArgType ();\n    parameters: []\n    return:\n      type: System.RuntimeTypeHandle\n      description: The type of the next argument.\n  overload: System.ArgIterator.GetNextArgType*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ArgIterator.GetRemainingCount\n  id: GetRemainingCount\n  parent: System.ArgIterator\n  langs:\n  - csharp\n  name: GetRemainingCount()\n  nameWithType: ArgIterator.GetRemainingCount()\n  fullName: System.ArgIterator.GetRemainingCount()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Returns the number of arguments remaining in the argument list.\n  syntax:\n    content: public int GetRemainingCount ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: The number of remaining arguments.\n  overload: System.ArgIterator.GetRemainingCount*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.ValueType\n  isExternal: false\n  name: System.ValueType\n- uid: System.NotSupportedException\n  isExternal: true\n  name: System.NotSupportedException\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ArgIterator.#ctor(System.RuntimeArgumentHandle)\n  parent: System.ArgIterator\n  isExternal: false\n  name: ArgIterator(RuntimeArgumentHandle)\n  nameWithType: ArgIterator.ArgIterator(RuntimeArgumentHandle)\n  fullName: System.ArgIterator.ArgIterator(RuntimeArgumentHandle)\n- uid: System.RuntimeArgumentHandle\n  parent: System\n  isExternal: false\n  name: RuntimeArgumentHandle\n  nameWithType: RuntimeArgumentHandle\n  fullName: System.RuntimeArgumentHandle\n- uid: System.ArgIterator.#ctor(System.RuntimeArgumentHandle,System.Void*)\n  parent: System.ArgIterator\n  isExternal: false\n  name: ArgIterator(RuntimeArgumentHandle,Void*)\n  nameWithType: ArgIterator.ArgIterator(RuntimeArgumentHandle,Void*)\n  fullName: System.ArgIterator.ArgIterator(RuntimeArgumentHandle,Void*)\n- uid: System.ArgIterator.End\n  parent: System.ArgIterator\n  isExternal: false\n  name: End()\n  nameWithType: ArgIterator.End()\n  fullName: System.ArgIterator.End()\n- uid: System.ArgIterator.Equals(System.Object)\n  parent: System.ArgIterator\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: ArgIterator.Equals(Object)\n  fullName: System.ArgIterator.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgIterator.GetHashCode\n  parent: System.ArgIterator\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: ArgIterator.GetHashCode()\n  fullName: System.ArgIterator.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.ArgIterator.GetNextArg\n  parent: System.ArgIterator\n  isExternal: false\n  name: GetNextArg()\n  nameWithType: ArgIterator.GetNextArg()\n  fullName: System.ArgIterator.GetNextArg()\n- uid: System.TypedReference\n  parent: System\n  isExternal: false\n  name: TypedReference\n  nameWithType: TypedReference\n  fullName: System.TypedReference\n- uid: System.ArgIterator.GetNextArg(System.RuntimeTypeHandle)\n  parent: System.ArgIterator\n  isExternal: false\n  name: GetNextArg(RuntimeTypeHandle)\n  nameWithType: ArgIterator.GetNextArg(RuntimeTypeHandle)\n  fullName: System.ArgIterator.GetNextArg(RuntimeTypeHandle)\n- uid: System.RuntimeTypeHandle\n  parent: System\n  isExternal: true\n  name: RuntimeTypeHandle\n  nameWithType: RuntimeTypeHandle\n  fullName: System.RuntimeTypeHandle\n- uid: System.ArgIterator.GetNextArgType\n  parent: System.ArgIterator\n  isExternal: false\n  name: GetNextArgType()\n  nameWithType: ArgIterator.GetNextArgType()\n  fullName: System.ArgIterator.GetNextArgType()\n- uid: System.ArgIterator.GetRemainingCount\n  parent: System.ArgIterator\n  isExternal: false\n  name: GetRemainingCount()\n  nameWithType: ArgIterator.GetRemainingCount()\n  fullName: System.ArgIterator.GetRemainingCount()\n- uid: System.ArgIterator.#ctor*\n  parent: System.ArgIterator\n  isExternal: false\n  name: ArgIterator\n  nameWithType: ArgIterator.ArgIterator\n- uid: System.ArgIterator.End*\n  parent: System.ArgIterator\n  isExternal: false\n  name: End\n  nameWithType: ArgIterator.End\n- uid: System.ArgIterator.Equals*\n  parent: System.ArgIterator\n  isExternal: false\n  name: Equals\n  nameWithType: ArgIterator.Equals\n- uid: System.ArgIterator.GetHashCode*\n  parent: System.ArgIterator\n  isExternal: false\n  name: GetHashCode\n  nameWithType: ArgIterator.GetHashCode\n- uid: System.ArgIterator.GetNextArg*\n  parent: System.ArgIterator\n  isExternal: false\n  name: GetNextArg\n  nameWithType: ArgIterator.GetNextArg\n- uid: System.ArgIterator.GetNextArgType*\n  parent: System.ArgIterator\n  isExternal: false\n  name: GetNextArgType\n  nameWithType: ArgIterator.GetNextArgType\n- uid: System.ArgIterator.GetRemainingCount*\n  parent: System.ArgIterator\n  isExternal: false\n  name: GetRemainingCount\n  nameWithType: ArgIterator.GetRemainingCount\n"}