{"nodes":[{"pos":[2426,2546],"content":"Provides a set of methods and properties that help you trace the execution of your code. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides a set of methods and properties that help you trace the execution of your code. This class cannot be inherited.","pos":[0,120],"nodes":[{"content":"Provides a set of methods and properties that help you trace the execution of your code.","pos":[0,88]},{"content":"This class cannot be inherited.","pos":[89,120]}]}]},{"pos":[2559,7242],"content":"You can use the properties and methods in the Trace class to instrument release builds. Instrumentation allows you to monitor the health of your application running in real-life settings. Tracing helps you isolate problems and fix them without disturbing a running system.       This class provides methods to display an <xref:System.Diagnostics.Trace.Assert%2A> dialog box, and to emit an assertion that will always <xref:System.Diagnostics.Trace.Fail%2A>. This class provides write methods in the following variations: <xref:System.Diagnostics.Trace.Write%2A>, <xref:System.Diagnostics.Trace.WriteLine%2A>, <xref:System.Diagnostics.Trace.WriteIf%2A>, and <xref:System.Diagnostics.Trace.WriteLineIf%2A>.       The <xref:System.Diagnostics.BooleanSwitch> and <xref:System.Diagnostics.TraceSwitch> classes provide means to dynamically control the tracing output. You can modify the values of these switches without recompiling your application. For information on using the configuration file to set a switch, see the <xref:System.Diagnostics.Switch> class and the [How to: Create, Initialize and Configure Trace Switches](~/add/includes/ajax-current-ext-md.md) topic.       You can customize the tracing output's target by adding <xref:System.Diagnostics.TraceListener> instances to or removing instances from the <xref:System.Diagnostics.Trace.Listeners%2A> collection. The <xref:System.Diagnostics.Trace.Listeners%2A> collection is shared by both the <xref:System.Diagnostics.Debug> and the Trace classes; adding a trace listener to either class adds the listener to both. By default, trace output is emitted using the <xref:System.Diagnostics.DefaultTraceListener> class.      > [!NOTE] >  Adding a trace listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection can cause an exception to be thrown while tracing, if a resource used by the trace listener is not available. The conditions and the exception thrown depend on the trace listener and cannot be enumerated in this topic. It may be useful to place calls to the Trace methods in `try`/`catch` blocks to detect and handle any exceptions from trace listeners.      > [!NOTE] >  If you add trace listeners to partially trusted code, you will get a <xref:System.Security.SecurityException> exception, because adding trace listeners requires <xref:System.Security.Permissions.SecurityPermissionFlag> permission. To trace partially trusted code that is running in a sandbox in Visual Studio, do not add trace listeners. Instead, view the Trace and <xref:System.Diagnostics.Debug> messages in the **Output** window.       The Trace class provides properties to get or set the level of <xref:System.Diagnostics.Trace.Indent%2A>, the <xref:System.Diagnostics.Trace.IndentSize%2A>, and whether to <xref:System.Diagnostics.Trace.AutoFlush%2A> after each write.       To set the <xref:System.Diagnostics.Trace.AutoFlush%2A> and <xref:System.Diagnostics.Trace.IndentSize%2A> for Trace, you can edit the configuration file that corresponds to the name of your application. The configuration file should be formatted like the following example:      ```   <configuration>     <system.diagnostics>       <trace autoflush=\"false\" indentsize=\"3\" />     </system.diagnostics>   </configuration>   ```       The <xref:System.Diagnostics.ConditionalAttribute> attribute is applied to the methods of Trace. Compilers that support <xref:System.Diagnostics.ConditionalAttribute> ignore calls to these methods unless \"TRACE\" is defined as a conditional compilation symbol. Refer to a compiler's documentation to determine whether <xref:System.Diagnostics.ConditionalAttribute> is supported and the syntax for defining a conditional compilation symbol.      > [!NOTE] >  In Visual Studio projects, by default, the \"DEBUG\" conditional compilation symbol is defined for debug builds, and the \"TRACE\" symbol is defined for both debug and release builds. For information about how to disable this behavior, see the Visual Studio documentation.       To define the \"TRACE\" conditional compilation symbol in C#, add the `/d:TRACE` option to the compiler command line when you compile your code using a command line, or add `#define TRACE` to the top of your file. In Visual Basic, add the `/d:TRACE=True` option to the compiler command line or add `#Const TRACE=True` to the file.       <xref:System.Diagnostics.ConditionalAttribute> is not supported by the C++ compiler. To provide equivalent functionality, you must enclose calls to the methods of Trace in an `#if defined(TRACE) ... #endif` block, and add the `/DTRACE` option to the compiler command line or add `#define TRACE` to the file.","needQuote":false,"needEscape":true,"nodes":[{"content":"You can use the properties and methods in the Trace class to instrument release builds.","pos":[0,87]},{"content":"Instrumentation allows you to monitor the health of your application running in real-life settings.","pos":[88,187]},{"content":"Tracing helps you isolate problems and fix them without disturbing a running system.","pos":[188,272]},{"content":"This class provides methods to display an &lt;xref:System.Diagnostics.Trace.Assert%2A&gt; dialog box, and to emit an assertion that will always &lt;xref:System.Diagnostics.Trace.Fail%2A&gt;.","pos":[279,457],"source":"       This class provides methods to display an <xref:System.Diagnostics.Trace.Assert%2A> dialog box, and to emit an assertion that will always <xref:System.Diagnostics.Trace.Fail%2A>."},{"content":"This class provides write methods in the following variations: &lt;xref:System.Diagnostics.Trace.Write%2A&gt;, &lt;xref:System.Diagnostics.Trace.WriteLine%2A&gt;, &lt;xref:System.Diagnostics.Trace.WriteIf%2A&gt;, and &lt;xref:System.Diagnostics.Trace.WriteLineIf%2A&gt;.","pos":[458,704],"source":" This class provides write methods in the following variations: <xref:System.Diagnostics.Trace.Write%2A>, <xref:System.Diagnostics.Trace.WriteLine%2A>, <xref:System.Diagnostics.Trace.WriteIf%2A>, and <xref:System.Diagnostics.Trace.WriteLineIf%2A>."},{"content":"The &lt;xref:System.Diagnostics.BooleanSwitch&gt; and &lt;xref:System.Diagnostics.TraceSwitch&gt; classes provide means to dynamically control the tracing output.","pos":[711,861],"source":"       The <xref:System.Diagnostics.BooleanSwitch> and <xref:System.Diagnostics.TraceSwitch> classes provide means to dynamically control the tracing output."},{"content":"You can modify the values of these switches without recompiling your application.","pos":[862,943]},{"content":"For information on using the configuration file to set a switch, see the &lt;xref:System.Diagnostics.Switch&gt; class and the <bpt id=\"p1\">[</bpt>How to: Create, Initialize and Configure Trace Switches<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> topic.","pos":[944,1167],"source":" For information on using the configuration file to set a switch, see the <xref:System.Diagnostics.Switch> class and the [How to: Create, Initialize and Configure Trace Switches](~/add/includes/ajax-current-ext-md.md) topic."},{"content":"You can customize the tracing output's target by adding &lt;xref:System.Diagnostics.TraceListener&gt; instances to or removing instances from the &lt;xref:System.Diagnostics.Trace.Listeners%2A&gt; collection.","pos":[1174,1370],"source":"       You can customize the tracing output's target by adding <xref:System.Diagnostics.TraceListener> instances to or removing instances from the <xref:System.Diagnostics.Trace.Listeners%2A> collection."},{"content":"The &lt;xref:System.Diagnostics.Trace.Listeners%2A&gt; collection is shared by both the &lt;xref:System.Diagnostics.Debug&gt; and the Trace classes; adding a trace listener to either class adds the listener to both.","pos":[1371,1574],"source":" The <xref:System.Diagnostics.Trace.Listeners%2A> collection is shared by both the <xref:System.Diagnostics.Debug> and the Trace classes; adding a trace listener to either class adds the listener to both."},{"content":"By default, trace output is emitted using the &lt;xref:System.Diagnostics.DefaultTraceListener&gt; class.","pos":[1575,1674],"source":" By default, trace output is emitted using the <xref:System.Diagnostics.DefaultTraceListener> class."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Adding a trace listener to the &lt;xref:System.Diagnostics.Trace.Listeners%2A&gt; collection can cause an exception to be thrown while tracing, if a resource used by the trace listener is not available.","pos":[1680,1889],"source":"      > [!NOTE] >  Adding a trace listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection can cause an exception to be thrown while tracing, if a resource used by the trace listener is not available."},{"content":"The conditions and the exception thrown depend on the trace listener and cannot be enumerated in this topic.","pos":[1890,1998]},{"content":"It may be useful to place calls to the Trace methods in <ph id=\"ph1\">`try`</ph><ph id=\"ph2\">/</ph><ph id=\"ph3\">`catch`</ph> blocks to detect and handle any exceptions from trace listeners.","pos":[1999,2133],"source":" It may be useful to place calls to the Trace methods in `try`/`catch` blocks to detect and handle any exceptions from trace listeners."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If you add trace listeners to partially trusted code, you will get a &lt;xref:System.Security.SecurityException&gt; exception, because adding trace listeners requires &lt;xref:System.Security.Permissions.SecurityPermissionFlag&gt; permission.","pos":[2139,2382],"source":"      > [!NOTE] >  If you add trace listeners to partially trusted code, you will get a <xref:System.Security.SecurityException> exception, because adding trace listeners requires <xref:System.Security.Permissions.SecurityPermissionFlag> permission."},{"content":"To trace partially trusted code that is running in a sandbox in Visual Studio, do not add trace listeners.","pos":[2383,2489]},{"content":"Instead, view the Trace and &lt;xref:System.Diagnostics.Debug&gt; messages in the <bpt id=\"p1\">**</bpt>Output<ept id=\"p1\">**</ept> window.","pos":[2490,2584],"source":" Instead, view the Trace and <xref:System.Diagnostics.Debug> messages in the **Output** window."},{"content":"The Trace class provides properties to get or set the level of &lt;xref:System.Diagnostics.Trace.Indent%2A&gt;, the &lt;xref:System.Diagnostics.Trace.IndentSize%2A&gt;, and whether to &lt;xref:System.Diagnostics.Trace.AutoFlush%2A&gt; after each write.","pos":[2591,2825],"source":"       The Trace class provides properties to get or set the level of <xref:System.Diagnostics.Trace.Indent%2A>, the <xref:System.Diagnostics.Trace.IndentSize%2A>, and whether to <xref:System.Diagnostics.Trace.AutoFlush%2A> after each write."},{"content":"To set the &lt;xref:System.Diagnostics.Trace.AutoFlush%2A&gt; and &lt;xref:System.Diagnostics.Trace.IndentSize%2A&gt; for Trace, you can edit the configuration file that corresponds to the name of your application.","pos":[2832,3034],"source":"       To set the <xref:System.Diagnostics.Trace.AutoFlush%2A> and <xref:System.Diagnostics.Trace.IndentSize%2A> for Trace, you can edit the configuration file that corresponds to the name of your application."},{"content":"The configuration file should be formatted like the following example:      <ph id=\"ph1\">```   &lt;configuration&gt;     &lt;system.diagnostics&gt;       &lt;trace autoflush=\"false\" indentsize=\"3\" /&gt;     &lt;/system.diagnostics&gt;   &lt;/configuration&gt;   ```</ph>       The &lt;xref:System.Diagnostics.ConditionalAttribute&gt; attribute is applied to the methods of Trace.","pos":[3035,3360],"source":" The configuration file should be formatted like the following example:      ```   <configuration>     <system.diagnostics>       <trace autoflush=\"false\" indentsize=\"3\" />     </system.diagnostics>   </configuration>   ```       The <xref:System.Diagnostics.ConditionalAttribute> attribute is applied to the methods of Trace."},{"content":"Compilers that support &lt;xref:System.Diagnostics.ConditionalAttribute&gt; ignore calls to these methods unless \"TRACE\" is defined as a conditional compilation symbol.","pos":[3361,3523],"source":" Compilers that support <xref:System.Diagnostics.ConditionalAttribute> ignore calls to these methods unless \"TRACE\" is defined as a conditional compilation symbol."},{"content":"Refer to a compiler's documentation to determine whether &lt;xref:System.Diagnostics.ConditionalAttribute&gt; is supported and the syntax for defining a conditional compilation symbol.","pos":[3524,3702],"source":" Refer to a compiler's documentation to determine whether <xref:System.Diagnostics.ConditionalAttribute> is supported and the syntax for defining a conditional compilation symbol."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  In Visual Studio projects, by default, the \"DEBUG\" conditional compilation symbol is defined for debug builds, and the \"TRACE\" symbol is defined for both debug and release builds.","pos":[3708,3900],"source":"      > [!NOTE] >  In Visual Studio projects, by default, the \"DEBUG\" conditional compilation symbol is defined for debug builds, and the \"TRACE\" symbol is defined for both debug and release builds."},{"content":"For information about how to disable this behavior, see the Visual Studio documentation.","pos":[3901,3989]},{"content":"To define the \"TRACE\" conditional compilation symbol in C#, add the <ph id=\"ph1\">`/d:TRACE`</ph> option to the compiler command line when you compile your code using a command line, or add <ph id=\"ph2\">`#define TRACE`</ph> to the top of your file.","pos":[3996,4207],"source":"       To define the \"TRACE\" conditional compilation symbol in C#, add the `/d:TRACE` option to the compiler command line when you compile your code using a command line, or add `#define TRACE` to the top of your file."},{"content":"In Visual Basic, add the <ph id=\"ph1\">`/d:TRACE=True`</ph> option to the compiler command line or add <ph id=\"ph2\">`#Const TRACE=True`</ph> to the file.","pos":[4208,4324],"source":" In Visual Basic, add the `/d:TRACE=True` option to the compiler command line or add `#Const TRACE=True` to the file."},{"content":"&lt;xref:System.Diagnostics.ConditionalAttribute&gt; is not supported by the C++ compiler.","pos":[4331,4415],"source":"       <xref:System.Diagnostics.ConditionalAttribute> is not supported by the C++ compiler."},{"content":"To provide equivalent functionality, you must enclose calls to the methods of Trace in an <ph id=\"ph1\">`#if defined(TRACE) ... #endif`</ph> block, and add the <ph id=\"ph2\">`/DTRACE`</ph> option to the compiler command line or add <ph id=\"ph3\">`#define TRACE`</ph> to the file.","pos":[4416,4638],"source":" To provide equivalent functionality, you must enclose calls to the methods of Trace in an `#if defined(TRACE) ... #endif` block, and add the `/DTRACE` option to the compiler command line or add `#define TRACE` to the file."}]},{"pos":[8491,8648],"content":"Checks for a condition; if the condition is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, displays a message box that shows the call stack.","needQuote":true,"needEscape":true,"source":"Checks for a condition; if the condition is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, displays a message box that shows the call stack."},{"pos":[12098,12287],"content":"The conditional expression to evaluate. If the condition is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, a failure message is not sent and the message box is not displayed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The conditional expression to evaluate.","pos":[0,39]},{"content":"If the condition is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, a failure message is not sent and the message box is not displayed.","pos":[40,189],"source":" If the condition is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, a failure message is not sent and the message box is not displayed."}]},{"pos":[12759,12948],"content":"Checks for a condition; if the condition is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, outputs a specified message and displays a message box that shows the call stack.","needQuote":true,"needEscape":true,"source":"Checks for a condition; if the condition is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, outputs a specified message and displays a message box that shows the call stack."},{"pos":[16369,16562],"content":"The conditional expression to evaluate. If the condition is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, the specified message is not sent and the message box is not displayed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The conditional expression to evaluate.","pos":[0,39]},{"content":"If the condition is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, the specified message is not sent and the message box is not displayed.","pos":[40,193],"source":" If the condition is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, the specified message is not sent and the message box is not displayed."}]},{"pos":[16626,16707],"content":"The message to send to the <xref:System.Diagnostics.Trace.Listeners*> collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"The message to send to the &lt;xref:System.Diagnostics.Trace.Listeners*&gt; collection.","pos":[0,81],"source":"The message to send to the <xref:System.Diagnostics.Trace.Listeners*> collection."}]},{"pos":[17228,17420],"content":"Checks for a condition; if the condition is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, outputs two specified messages and displays a message box that shows the call stack.","needQuote":true,"needEscape":true,"source":"Checks for a condition; if the condition is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, outputs two specified messages and displays a message box that shows the call stack."},{"pos":[20884,21079],"content":"The conditional expression to evaluate. If the condition is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, the specified messages are not sent and the message box is not displayed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The conditional expression to evaluate.","pos":[0,39]},{"content":"If the condition is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, the specified messages are not sent and the message box is not displayed.","pos":[40,195],"source":" If the condition is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, the specified messages are not sent and the message box is not displayed."}]},{"pos":[21143,21224],"content":"The message to send to the <xref:System.Diagnostics.Trace.Listeners*> collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"The message to send to the &lt;xref:System.Diagnostics.Trace.Listeners*&gt; collection.","pos":[0,81],"source":"The message to send to the <xref:System.Diagnostics.Trace.Listeners*> collection."}]},{"pos":[21294,21384],"content":"The detailed message to send to the <xref:System.Diagnostics.Trace.Listeners*> collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"The detailed message to send to the &lt;xref:System.Diagnostics.Trace.Listeners*&gt; collection.","pos":[0,90],"source":"The detailed message to send to the <xref:System.Diagnostics.Trace.Listeners*> collection."}]},{"pos":[21765,21910],"content":"Gets or sets whether &lt;xref:System.Diagnostics.Trace.Flush<bpt id=\"p1\">*</bpt>&gt; should be called on the &lt;xref:System.Diagnostics.Trace.Listeners<ept id=\"p1\">*</ept>&gt; after every write.","needQuote":true,"needEscape":true,"source":"Gets or sets whether <xref:System.Diagnostics.Trace.Flush*> should be called on the <xref:System.Diagnostics.Trace.Listeners*> after every write."},{"pos":[21923,22972],"content":"The default is `false`.       Flushing the stream will not flush its underlying encoder unless you explicitly call <xref:System.Diagnostics.Trace.Flush%2A> or <xref:System.Diagnostics.Trace.Close%2A>. Setting AutoFlush to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed. This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly. This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.       To set the AutoFlush and <xref:System.Diagnostics.Trace.IndentSize%2A> for <xref:System.Diagnostics.Trace>, you can also edit the configuration file that corresponds to the name of your application. The configuration file should be formatted like the following example:      ```   <configuration>     <system.diagnostics>       <trace autoflush=\"false\" indentsize=\"3\" />     </system.diagnostics>   </configuration>   ```","needQuote":false,"needEscape":true,"nodes":[{"content":"The default is <ph id=\"ph1\">`false`</ph>.","pos":[0,23],"source":"The default is `false`."},{"content":"Flushing the stream will not flush its underlying encoder unless you explicitly call &lt;xref:System.Diagnostics.Trace.Flush%2A&gt; or &lt;xref:System.Diagnostics.Trace.Close%2A&gt;.","pos":[30,200],"source":"       Flushing the stream will not flush its underlying encoder unless you explicitly call <xref:System.Diagnostics.Trace.Flush%2A> or <xref:System.Diagnostics.Trace.Close%2A>."},{"content":"Setting AutoFlush to <ph id=\"ph1\">`true`</ph> means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed.","pos":[201,334],"source":" Setting AutoFlush to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed."},{"content":"This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly.","pos":[335,459]},{"content":"This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.","pos":[460,605]},{"content":"To set the AutoFlush and &lt;xref:System.Diagnostics.Trace.IndentSize%2A&gt; for &lt;xref:System.Diagnostics.Trace&gt;, you can also edit the configuration file that corresponds to the name of your application.","pos":[612,810],"source":"       To set the AutoFlush and <xref:System.Diagnostics.Trace.IndentSize%2A> for <xref:System.Diagnostics.Trace>, you can also edit the configuration file that corresponds to the name of your application."},{"content":"The configuration file should be formatted like the following example:      <ph id=\"ph1\">```   &lt;configuration&gt;     &lt;system.diagnostics&gt;       &lt;trace autoflush=\"false\" indentsize=\"3\" /&gt;     &lt;/system.diagnostics&gt;   &lt;/configuration&gt;   ```</ph>","pos":[811,1033],"source":" The configuration file should be formatted like the following example:      ```   <configuration>     <system.diagnostics>       <trace autoflush=\"false\" indentsize=\"3\" />     </system.diagnostics>   </configuration>   ```"}]},{"pos":[23098,23354],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if &lt;xref:System.Diagnostics.Trace.Flush<bpt id=\"p2\">*</bpt>&gt; is called on the &lt;xref:System.Diagnostics.Trace.Listeners<ept id=\"p2\">*</ept>&gt; after every write; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <xref:System.Diagnostics.Trace.Flush*> is called on the <xref:System.Diagnostics.Trace.Listeners*> after every write; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[23722,23812],"content":"Flushes the output buffer, and then closes the <xref:System.Diagnostics.Trace.Listeners*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Flushes the output buffer, and then closes the &lt;xref:System.Diagnostics.Trace.Listeners*&gt;.","pos":[0,90],"source":"Flushes the output buffer, and then closes the <xref:System.Diagnostics.Trace.Listeners*>."}]},{"pos":[23825,24526],"content":"Use this method when the output is going to a file, such as to the <xref:System.Diagnostics.TextWriterTraceListener>.       Flushing the stream will not flush its underlying encoder unless you explicitly call <xref:System.Diagnostics.Trace.Flush%2A> or Close. Setting <xref:System.Diagnostics.Trace.AutoFlush%2A> to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed. This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly. This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.","needQuote":false,"needEscape":true,"nodes":[{"content":"Use this method when the output is going to a file, such as to the &lt;xref:System.Diagnostics.TextWriterTraceListener&gt;.","pos":[0,117],"source":"Use this method when the output is going to a file, such as to the <xref:System.Diagnostics.TextWriterTraceListener>."},{"content":"Flushing the stream will not flush its underlying encoder unless you explicitly call &lt;xref:System.Diagnostics.Trace.Flush%2A&gt; or Close.","pos":[124,259],"source":"       Flushing the stream will not flush its underlying encoder unless you explicitly call <xref:System.Diagnostics.Trace.Flush%2A> or Close."},{"content":"Setting &lt;xref:System.Diagnostics.Trace.AutoFlush%2A&gt; to <ph id=\"ph1\">`true`</ph> means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed.","pos":[260,428],"source":" Setting <xref:System.Diagnostics.Trace.AutoFlush%2A> to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed."},{"content":"This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly.","pos":[429,553]},{"content":"This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.","pos":[554,699]}]},{"pos":[25712,25771],"content":"Gets the correlation manager for the thread for this trace.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the correlation manager for the thread for this trace.","pos":[0,59]}]},{"pos":[25784,26120],"content":"> [!NOTE] >  This is an advanced property that most applications should not have occasion to use.       The <xref:System.Diagnostics.CorrelationManager> class provides methods used to store a logical operation identity in a thread-bound context and automatically tag each trace event generated by the thread with the stored identity.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&gt; [!NOTE]</ph> &gt;  This is an advanced property that most applications should not have occasion to use.","pos":[0,97],"source":"> [!NOTE] >  This is an advanced property that most applications should not have occasion to use."},{"content":"The &lt;xref:System.Diagnostics.CorrelationManager&gt; class provides methods used to store a logical operation identity in a thread-bound context and automatically tag each trace event generated by the thread with the stored identity.","pos":[104,333],"source":"       The <xref:System.Diagnostics.CorrelationManager> class provides methods used to store a logical operation identity in a thread-bound context and automatically tag each trace event generated by the thread with the stored identity."}]},{"pos":[26306,26418],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.CorrelationManager\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object associated with the thread for this trace.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Diagnostics.CorrelationManager\"></xref> object associated with the thread for this trace."},{"pos":[26838,26872],"content":"Emits the specified error message.","needQuote":true,"needEscape":true,"nodes":[{"content":"Emits the specified error message.","pos":[0,34]}]},{"pos":[29056,29074],"content":"A message to emit.","needQuote":true,"needEscape":true,"nodes":[{"content":"A message to emit.","pos":[0,18]}]},{"pos":[29529,29582],"content":"Emits an error message, and a detailed error message.","needQuote":true,"needEscape":true,"nodes":[{"content":"Emits an error message, and a detailed error message.","pos":[0,53]}]},{"pos":[31906,31924],"content":"A message to emit.","needQuote":true,"needEscape":true,"nodes":[{"content":"A message to emit.","pos":[0,18]}]},{"pos":[31994,32021],"content":"A detailed message to emit.","needQuote":true,"needEscape":true,"nodes":[{"content":"A detailed message to emit.","pos":[0,27]}]},{"pos":[32384,32500],"content":"Flushes the output buffer, and causes buffered data to be written to the <xref:System.Diagnostics.Trace.Listeners*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Flushes the output buffer, and causes buffered data to be written to the &lt;xref:System.Diagnostics.Trace.Listeners*&gt;.","pos":[0,116],"source":"Flushes the output buffer, and causes buffered data to be written to the <xref:System.Diagnostics.Trace.Listeners*>."}]},{"pos":[32512,33087],"content":"Flushing the stream will not flush its underlying encoder unless you explicitly call Flush or <xref:System.Diagnostics.Trace.Close%2A>. Setting <xref:System.Diagnostics.Trace.AutoFlush%2A> to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed. This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly. This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.","needQuote":true,"needEscape":true,"nodes":[{"content":"Flushing the stream will not flush its underlying encoder unless you explicitly call Flush or &lt;xref:System.Diagnostics.Trace.Close%2A&gt;.","pos":[0,135],"source":"Flushing the stream will not flush its underlying encoder unless you explicitly call Flush or <xref:System.Diagnostics.Trace.Close%2A>."},{"content":"Setting &lt;xref:System.Diagnostics.Trace.AutoFlush%2A&gt; to <ph id=\"ph1\">`true`</ph> means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed.","pos":[136,304],"source":" Setting <xref:System.Diagnostics.Trace.AutoFlush%2A> to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed."},{"content":"This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly.","pos":[305,429]},{"content":"This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.","pos":[430,575]}]},{"pos":[34219,34293],"content":"Increases the current <xref:System.Diagnostics.Trace.IndentLevel*> by one.","needQuote":true,"needEscape":true,"nodes":[{"content":"Increases the current &lt;xref:System.Diagnostics.Trace.IndentLevel*&gt; by one.","pos":[0,74],"source":"Increases the current <xref:System.Diagnostics.Trace.IndentLevel*> by one."}]},{"pos":[35397,35427],"content":"Gets or sets the indent level.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the indent level.","pos":[0,30]}]},{"pos":[35439,35628],"content":"The IndentLevel property represents the number of times the indent of size <xref:System.Diagnostics.Trace.IndentSize%2A> is applied. This property is stored on per-thread/per-request basis.","needQuote":true,"needEscape":true,"nodes":[{"content":"The IndentLevel property represents the number of times the indent of size <xref:System.Diagnostics.Trace.IndentSize%2A> is applied. This property is stored on per-thread/per-request basis.","pos":[0,189],"nodes":[{"content":"The IndentLevel property represents the number of times the indent of size &lt;xref:System.Diagnostics.Trace.IndentSize%2A&gt; is applied.","pos":[0,132],"source":"The IndentLevel property represents the number of times the indent of size <xref:System.Diagnostics.Trace.IndentSize%2A> is applied."},{"content":"This property is stored on per-thread/per-request basis.","pos":[133,189]}]}]},{"pos":[36390,36428],"content":"The indent level. The default is zero.","needQuote":true,"needEscape":true,"nodes":[{"content":"The indent level. The default is zero.","pos":[0,38],"nodes":[{"content":"The indent level.","pos":[0,17]},{"content":"The default is zero.","pos":[18,38]}]}]},{"pos":[36819,36866],"content":"Gets or sets the number of spaces in an indent.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the number of spaces in an indent.","pos":[0,47]}]},{"pos":[36879,37542],"content":"A <xref:System.Diagnostics.TextWriterTraceListener> interprets this number as spaces. An <xref:System.Diagnostics.EventLogTraceListener> ignores this value.       This property is stored on per-thread/per-request basis.       To set the <xref:System.Diagnostics.Trace.AutoFlush%2A> and IndentSize for <xref:System.Diagnostics.Trace>, you can also edit the configuration file that corresponds to the name of your application. The configuration file should be formatted like the following example:      ```   <configuration>     <system.diagnostics>       <trace autoflush=\"false\" indentsize=\"3\" />     </system.diagnostics>   </configuration>   ```","needQuote":false,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Diagnostics.TextWriterTraceListener&gt; interprets this number as spaces.","pos":[0,85],"source":"A <xref:System.Diagnostics.TextWriterTraceListener> interprets this number as spaces."},{"content":"An &lt;xref:System.Diagnostics.EventLogTraceListener&gt; ignores this value.","pos":[86,156],"source":" An <xref:System.Diagnostics.EventLogTraceListener> ignores this value."},{"content":"This property is stored on per-thread/per-request basis.","pos":[163,219]},{"content":"To set the &lt;xref:System.Diagnostics.Trace.AutoFlush%2A&gt; and IndentSize for &lt;xref:System.Diagnostics.Trace&gt;, you can also edit the configuration file that corresponds to the name of your application.","pos":[226,424],"source":"       To set the <xref:System.Diagnostics.Trace.AutoFlush%2A> and IndentSize for <xref:System.Diagnostics.Trace>, you can also edit the configuration file that corresponds to the name of your application."},{"content":"The configuration file should be formatted like the following example:      <ph id=\"ph1\">```   &lt;configuration&gt;     &lt;system.diagnostics&gt;       &lt;trace autoflush=\"false\" indentsize=\"3\" /&gt;     &lt;/system.diagnostics&gt;   &lt;/configuration&gt;   ```</ph>","pos":[425,647],"source":" The configuration file should be formatted like the following example:      ```   <configuration>     <system.diagnostics>       <trace autoflush=\"false\" indentsize=\"3\" />     </system.diagnostics>   </configuration>   ```"}]},{"pos":[37666,37721],"content":"The number of spaces in an indent. The default is four.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of spaces in an indent. The default is four.","pos":[0,55],"nodes":[{"content":"The number of spaces in an indent.","pos":[0,34]},{"content":"The default is four.","pos":[35,55]}]}]},{"pos":[38106,38175],"content":"Gets the collection of listeners that is monitoring the trace output.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the collection of listeners that is monitoring the trace output.","pos":[0,69]}]},{"pos":[38188,38894],"content":"The listeners produce formatted output from the trace output. By default, the collection contains an instance of the <xref:System.Diagnostics.DefaultTraceListener> class. If you want to remove the default listener, call the <xref:System.Diagnostics.TraceListenerCollection.Remove%2A> method, and pass it the instance of the <xref:System.Diagnostics.DefaultTraceListener>. To redirect output to the console window, add an instance of the <xref:System.Diagnostics.ConsoleTraceListener> class.      > [!NOTE] >  The Listeners collection is shared by both the <xref:System.Diagnostics.Debug> and the <xref:System.Diagnostics.Trace> classes; adding a trace listener to either class adds the listener to both.","needQuote":false,"needEscape":true,"nodes":[{"content":"The listeners produce formatted output from the trace output.","pos":[0,61]},{"content":"By default, the collection contains an instance of the &lt;xref:System.Diagnostics.DefaultTraceListener&gt; class.","pos":[62,170],"source":" By default, the collection contains an instance of the <xref:System.Diagnostics.DefaultTraceListener> class."},{"content":"If you want to remove the default listener, call the &lt;xref:System.Diagnostics.TraceListenerCollection.Remove%2A&gt; method, and pass it the instance of the &lt;xref:System.Diagnostics.DefaultTraceListener&gt;.","pos":[171,371],"source":" If you want to remove the default listener, call the <xref:System.Diagnostics.TraceListenerCollection.Remove%2A> method, and pass it the instance of the <xref:System.Diagnostics.DefaultTraceListener>."},{"content":"To redirect output to the console window, add an instance of the &lt;xref:System.Diagnostics.ConsoleTraceListener&gt; class.","pos":[372,490],"source":" To redirect output to the console window, add an instance of the <xref:System.Diagnostics.ConsoleTraceListener> class."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The Listeners collection is shared by both the &lt;xref:System.Diagnostics.Debug&gt; and the &lt;xref:System.Diagnostics.Trace&gt; classes; adding a trace listener to either class adds the listener to both.","pos":[496,703],"source":"      > [!NOTE] >  The Listeners collection is shared by both the <xref:System.Diagnostics.Debug> and the <xref:System.Diagnostics.Trace> classes; adding a trace listener to either class adds the listener to both."}]},{"pos":[39595,39780],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceListenerCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents a collection of type <bpt id=\"p2\">&lt;xref href=\"System.Diagnostics.TraceListener\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> monitoring the trace output.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Diagnostics.TraceListenerCollection\"></xref> that represents a collection of type <xref href=\"System.Diagnostics.TraceListener\"></xref> monitoring the trace output."},{"pos":[40158,40197],"content":"Refreshes the trace configuration data.","needQuote":true,"needEscape":true,"nodes":[{"content":"Refreshes the trace configuration data.","pos":[0,39]}]},{"pos":[40209,40413],"content":"Trace configuration data is captured when the application is started. If the configuration data is changed after the application is started, call the Refresh method to update the trace configuration data.","needQuote":true,"needEscape":true,"nodes":[{"content":"Trace configuration data is captured when the application is started. If the configuration data is changed after the application is started, call the Refresh method to update the trace configuration data.","pos":[0,204],"nodes":[{"content":"Trace configuration data is captured when the application is started.","pos":[0,69]},{"content":"If the configuration data is changed after the application is started, call the Refresh method to update the trace configuration data.","pos":[70,204]}]}]},{"pos":[40925,41061],"content":"Writes an error message to the trace listeners in the <xref:System.Diagnostics.Trace.Listeners*> collection using the specified message.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes an error message to the trace listeners in the &lt;xref:System.Diagnostics.Trace.Listeners*&gt; collection using the specified message.","pos":[0,136],"source":"Writes an error message to the trace listeners in the <xref:System.Diagnostics.Trace.Listeners*> collection using the specified message."}]},{"pos":[41073,41261],"content":"TraceError calls the <ph id=\"ph1\">`TraceEvent`</ph> method for each trace listener, with the trace event type &lt;xref:System.Diagnostics.TraceEventType&gt;, passing the informative message as the message string.","needQuote":true,"needEscape":true,"source":"TraceError calls the `TraceEvent` method for each trace listener, with the trace event type <xref:System.Diagnostics.TraceEventType>, passing the informative message as the message string."},{"pos":[41412,41445],"content":"The informative message to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The informative message to write.","pos":[0,33]}]},{"pos":[41946,42118],"content":"Writes an error message to the trace listeners in the <xref:System.Diagnostics.Trace.Listeners*> collection using the specified array of objects and formatting information.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes an error message to the trace listeners in the &lt;xref:System.Diagnostics.Trace.Listeners*&gt; collection using the specified array of objects and formatting information.","pos":[0,172],"source":"Writes an error message to the trace listeners in the <xref:System.Diagnostics.Trace.Listeners*> collection using the specified array of objects and formatting information."}]},{"pos":[42130,42447],"content":"TraceError calls the `TraceEvent` methods in the trace listeners with the trace event type <xref:System.Diagnostics.TraceEventType>, passing the message content as an object array with formatting information. See the <xref:System.String.Format%2A> method for more information about the `format` and `args` parameters.","needQuote":true,"needEscape":true,"nodes":[{"content":"TraceError calls the <ph id=\"ph1\">`TraceEvent`</ph> methods in the trace listeners with the trace event type &lt;xref:System.Diagnostics.TraceEventType&gt;, passing the message content as an object array with formatting information.","pos":[0,208],"source":"TraceError calls the `TraceEvent` methods in the trace listeners with the trace event type <xref:System.Diagnostics.TraceEventType>, passing the message content as an object array with formatting information."},{"content":"See the &lt;xref:System.String.Format%2A&gt; method for more information about the <ph id=\"ph1\">`format`</ph> and <ph id=\"ph2\">`args`</ph> parameters.","pos":[209,317],"source":" See the <xref:System.String.Format%2A> method for more information about the `format` and `args` parameters."}]},{"pos":[42611,42716],"content":"A format string that contains zero or more format items, which correspond to objects in the <ph id=\"ph1\">`args`</ph> array.","needQuote":true,"needEscape":true,"source":"A format string that contains zero or more format items, which correspond to objects in the `args` array."},{"pos":[42779,42895],"content":"An <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_object\" name=\"object\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> array containing zero or more objects to format.","needQuote":true,"needEscape":true,"source":"An <xref uid=\"langword_csharp_object\" name=\"object\" href=\"\"></xref> array containing zero or more objects to format."},{"pos":[43367,43511],"content":"Writes an informational message to the trace listeners in the <xref:System.Diagnostics.Trace.Listeners*> collection using the specified message.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes an informational message to the trace listeners in the &lt;xref:System.Diagnostics.Trace.Listeners*&gt; collection using the specified message.","pos":[0,144],"source":"Writes an informational message to the trace listeners in the <xref:System.Diagnostics.Trace.Listeners*> collection using the specified message."}]},{"pos":[43523,43717],"content":"TraceInformation calls the <ph id=\"ph1\">`TraceEvent`</ph> method for each trace listener, with the trace event type &lt;xref:System.Diagnostics.TraceEventType&gt;, passing the informative message as the message string.","needQuote":true,"needEscape":true,"source":"TraceInformation calls the `TraceEvent` method for each trace listener, with the trace event type <xref:System.Diagnostics.TraceEventType>, passing the informative message as the message string."},{"pos":[43874,43907],"content":"The informative message to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The informative message to write.","pos":[0,33]}]},{"pos":[44444,44624],"content":"Writes an informational message to the trace listeners in the <xref:System.Diagnostics.Trace.Listeners*> collection using the specified array of objects and formatting information.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes an informational message to the trace listeners in the &lt;xref:System.Diagnostics.Trace.Listeners*&gt; collection using the specified array of objects and formatting information.","pos":[0,180],"source":"Writes an informational message to the trace listeners in the <xref:System.Diagnostics.Trace.Listeners*> collection using the specified array of objects and formatting information."}]},{"pos":[44636,44959],"content":"TraceInformation calls the `TraceEvent` methods in the trace listeners with the trace event type <xref:System.Diagnostics.TraceEventType>, passing the message content as an object array with formatting information. See the <xref:System.String.Format%2A> method for more information about the `format` and `args` parameters.","needQuote":true,"needEscape":true,"nodes":[{"content":"TraceInformation calls the <ph id=\"ph1\">`TraceEvent`</ph> methods in the trace listeners with the trace event type &lt;xref:System.Diagnostics.TraceEventType&gt;, passing the message content as an object array with formatting information.","pos":[0,214],"source":"TraceInformation calls the `TraceEvent` methods in the trace listeners with the trace event type <xref:System.Diagnostics.TraceEventType>, passing the message content as an object array with formatting information."},{"content":"See the &lt;xref:System.String.Format%2A&gt; method for more information about the <ph id=\"ph1\">`format`</ph> and <ph id=\"ph2\">`args`</ph> parameters.","pos":[215,323],"source":" See the <xref:System.String.Format%2A> method for more information about the `format` and `args` parameters."}]},{"pos":[45129,45234],"content":"A format string that contains zero or more format items, which correspond to objects in the <ph id=\"ph1\">`args`</ph> array.","needQuote":true,"needEscape":true,"source":"A format string that contains zero or more format items, which correspond to objects in the `args` array."},{"pos":[45297,45413],"content":"An <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_object\" name=\"object\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> array containing zero or more objects to format.","needQuote":true,"needEscape":true,"source":"An <xref uid=\"langword_csharp_object\" name=\"object\" href=\"\"></xref> array containing zero or more objects to format."},{"pos":[45871,46008],"content":"Writes a warning message to the trace listeners in the <xref:System.Diagnostics.Trace.Listeners*> collection using the specified message.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes a warning message to the trace listeners in the &lt;xref:System.Diagnostics.Trace.Listeners*&gt; collection using the specified message.","pos":[0,137],"source":"Writes a warning message to the trace listeners in the <xref:System.Diagnostics.Trace.Listeners*> collection using the specified message."}]},{"pos":[46020,46209],"content":"TraceWarning calls the <ph id=\"ph1\">`TraceEvent`</ph> method for each trace listener with the trace event type &lt;xref:System.Diagnostics.TraceEventType&gt;, passing the informative message as the message string.","needQuote":true,"needEscape":true,"source":"TraceWarning calls the `TraceEvent` method for each trace listener with the trace event type <xref:System.Diagnostics.TraceEventType>, passing the informative message as the message string."},{"pos":[46362,46395],"content":"The informative message to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The informative message to write.","pos":[0,33]}]},{"pos":[46908,47081],"content":"Writes a warning message to the trace listeners in the <xref:System.Diagnostics.Trace.Listeners*> collection using the specified array of objects and formatting information.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes a warning message to the trace listeners in the &lt;xref:System.Diagnostics.Trace.Listeners*&gt; collection using the specified array of objects and formatting information.","pos":[0,173],"source":"Writes a warning message to the trace listeners in the <xref:System.Diagnostics.Trace.Listeners*> collection using the specified array of objects and formatting information."}]},{"pos":[47093,47412],"content":"TraceWarning calls the `TraceEvent` methods in the trace listeners with the trace event type <xref:System.Diagnostics.TraceEventType>, passing the message content as an object array with formatting information. See the <xref:System.String.Format%2A> method for more information about the `format` and `args` parameters.","needQuote":true,"needEscape":true,"nodes":[{"content":"TraceWarning calls the <ph id=\"ph1\">`TraceEvent`</ph> methods in the trace listeners with the trace event type &lt;xref:System.Diagnostics.TraceEventType&gt;, passing the message content as an object array with formatting information.","pos":[0,210],"source":"TraceWarning calls the `TraceEvent` methods in the trace listeners with the trace event type <xref:System.Diagnostics.TraceEventType>, passing the message content as an object array with formatting information."},{"content":"See the &lt;xref:System.String.Format%2A&gt; method for more information about the <ph id=\"ph1\">`format`</ph> and <ph id=\"ph2\">`args`</ph> parameters.","pos":[211,319],"source":" See the <xref:System.String.Format%2A> method for more information about the `format` and `args` parameters."}]},{"pos":[47578,47683],"content":"A format string that contains zero or more format items, which correspond to objects in the <ph id=\"ph1\">`args`</ph> array.","needQuote":true,"needEscape":true,"source":"A format string that contains zero or more format items, which correspond to objects in the `args` array."},{"pos":[47746,47862],"content":"An <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_object\" name=\"object\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> array containing zero or more objects to format.","needQuote":true,"needEscape":true,"source":"An <xref uid=\"langword_csharp_object\" name=\"object\" href=\"\"></xref> array containing zero or more objects to format."},{"pos":[48248,48322],"content":"Decreases the current <xref:System.Diagnostics.Trace.IndentLevel*> by one.","needQuote":true,"needEscape":true,"nodes":[{"content":"Decreases the current &lt;xref:System.Diagnostics.Trace.IndentLevel*&gt; by one.","pos":[0,74],"source":"Decreases the current <xref:System.Diagnostics.Trace.IndentLevel*> by one."}]},{"pos":[49451,49522],"content":"Gets or sets a value indicating whether the global lock should be used.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating whether the global lock should be used.","pos":[0,71]}]},{"pos":[49535,50360],"content":"The global lock is always used if the trace listener is not thread safe, regardless of the value of UseGlobalLock. The <xref:System.Diagnostics.TraceListener.IsThreadSafe%2A> property is used to determine if the listener is thread safe. The global lock is not used only if the value of UseGlobalLock is `false` and the value of <xref:System.Diagnostics.TraceListener.IsThreadSafe%2A> is `true`. The default behavior is to use the global lock.       To set the UseGlobalLock for <xref:System.Diagnostics.Trace>, you can also edit the configuration file that corresponds to the name of your application. The configuration file should be formatted like the following example:      ```   <configuration>     <system.diagnostics>       <trace useGlobalLock=\"false\" />     </system.diagnostics>   </configuration>   ```","needQuote":false,"needEscape":true,"nodes":[{"content":"The global lock is always used if the trace listener is not thread safe, regardless of the value of UseGlobalLock.","pos":[0,114]},{"content":"The &lt;xref:System.Diagnostics.TraceListener.IsThreadSafe%2A&gt; property is used to determine if the listener is thread safe.","pos":[115,236],"source":" The <xref:System.Diagnostics.TraceListener.IsThreadSafe%2A> property is used to determine if the listener is thread safe."},{"content":"The global lock is not used only if the value of UseGlobalLock is <ph id=\"ph1\">`false`</ph> and the value of &lt;xref:System.Diagnostics.TraceListener.IsThreadSafe%2A&gt; is <ph id=\"ph2\">`true`</ph>.","pos":[237,394],"source":" The global lock is not used only if the value of UseGlobalLock is `false` and the value of <xref:System.Diagnostics.TraceListener.IsThreadSafe%2A> is `true`."},{"content":"The default behavior is to use the global lock.","pos":[395,442]},{"content":"To set the UseGlobalLock for &lt;xref:System.Diagnostics.Trace&gt;, you can also edit the configuration file that corresponds to the name of your application.","pos":[449,601],"source":"       To set the UseGlobalLock for <xref:System.Diagnostics.Trace>, you can also edit the configuration file that corresponds to the name of your application."},{"content":"The configuration file should be formatted like the following example:      <ph id=\"ph1\">```   &lt;configuration&gt;     &lt;system.diagnostics&gt;       &lt;trace useGlobalLock=\"false\" /&gt;     &lt;/system.diagnostics&gt;   &lt;/configuration&gt;   ```</ph>","pos":[602,813],"source":" The configuration file should be formatted like the following example:      ```   <configuration>     <system.diagnostics>       <trace useGlobalLock=\"false\" />     </system.diagnostics>   </configuration>   ```"}]},{"pos":[50490,50736],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the global lock is to be used; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the global lock is to be used; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,169],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the global lock is to be used; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[170,246],"source":" The default is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>."}]},{"pos":[51156,51311],"content":"Writes the value of the object's &lt;xref:System.Object.ToString<bpt id=\"p1\">*</bpt>&gt; method to the trace listeners in the &lt;xref:System.Diagnostics.Trace.Listeners<ept id=\"p1\">*</ept>&gt; collection.","needQuote":true,"needEscape":true,"source":"Writes the value of the object's <xref:System.Object.ToString*> method to the trace listeners in the <xref:System.Diagnostics.Trace.Listeners*> collection."},{"pos":[51324,52155],"content":"By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.       This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener.      > [!NOTE] >  ASP.NET supplies tracing functionality tailored for Web pages. To write trace messages in ASP.NET pages, use the <xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName> property.       By default, in code associated with an ASP.NET Web page, the statement `Trace.Write(\"...\")` is a call to the <xref:System.Web.TraceContext.Write%2A> method of the <xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName> property. To use the <xref:System.Diagnostics.Trace?displayProperty=fullName> class in Web pages, you must include the namespace, for example, `System.Diagnostics.Trace.Write(\"...\")`.","needQuote":false,"needEscape":true,"nodes":[{"content":"By default, the output is written to an instance of &lt;xref:System.Diagnostics.DefaultTraceListener&gt;.","pos":[0,99],"source":"By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>."},{"content":"This method calls the &lt;xref:System.Diagnostics.TraceListener.Write%2A&gt; method of the trace listener.","pos":[106,206],"source":"       This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  ASP.NET supplies tracing functionality tailored for Web pages.","pos":[212,287],"source":"      > [!NOTE] >  ASP.NET supplies tracing functionality tailored for Web pages."},{"content":"To write trace messages in ASP.NET pages, use the &lt;xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName&gt; property.","pos":[288,407],"source":" To write trace messages in ASP.NET pages, use the <xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName> property."},{"content":"By default, in code associated with an ASP.NET Web page, the statement <ph id=\"ph1\">`Trace.Write(\"...\")`</ph> is a call to the &lt;xref:System.Web.TraceContext.Write%2A&gt; method of the &lt;xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName&gt; property.","pos":[414,646],"source":"       By default, in code associated with an ASP.NET Web page, the statement `Trace.Write(\"...\")` is a call to the <xref:System.Web.TraceContext.Write%2A> method of the <xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName> property."},{"content":"To use the &lt;xref:System.Diagnostics.Trace?displayProperty=fullName&gt; class in Web pages, you must include the namespace, for example, <ph id=\"ph1\">`System.Diagnostics.Trace.Write(\"...\")`</ph>.","pos":[647,820],"source":" To use the <xref:System.Diagnostics.Trace?displayProperty=fullName> class in Web pages, you must include the namespace, for example, `System.Diagnostics.Trace.Write(\"...\")`."}]},{"pos":[53345,53438],"content":"An <xref:System.Object> whose name is sent to the <xref:System.Diagnostics.Trace.Listeners*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Object&gt; whose name is sent to the &lt;xref:System.Diagnostics.Trace.Listeners*&gt;.","pos":[0,93],"source":"An <xref:System.Object> whose name is sent to the <xref:System.Diagnostics.Trace.Listeners*>."}]},{"pos":[53850,53951],"content":"Writes a message to the trace listeners in the <xref:System.Diagnostics.Trace.Listeners*> collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes a message to the trace listeners in the &lt;xref:System.Diagnostics.Trace.Listeners*&gt; collection.","pos":[0,101],"source":"Writes a message to the trace listeners in the <xref:System.Diagnostics.Trace.Listeners*> collection."}]},{"pos":[53964,54795],"content":"By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.       This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener.      > [!NOTE] >  ASP.NET supplies tracing functionality tailored for Web pages. To write trace messages in ASP.NET pages, use the <xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName> property.       By default, in code associated with an ASP.NET Web page, the statement `Trace.Write(\"...\")` is a call to the <xref:System.Web.TraceContext.Write%2A> method of the <xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName> property. To use the <xref:System.Diagnostics.Trace?displayProperty=fullName> class in Web pages, you must include the namespace, for example, `System.Diagnostics.Trace.Write(\"...\")`.","needQuote":false,"needEscape":true,"nodes":[{"content":"By default, the output is written to an instance of &lt;xref:System.Diagnostics.DefaultTraceListener&gt;.","pos":[0,99],"source":"By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>."},{"content":"This method calls the &lt;xref:System.Diagnostics.TraceListener.Write%2A&gt; method of the trace listener.","pos":[106,206],"source":"       This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  ASP.NET supplies tracing functionality tailored for Web pages.","pos":[212,287],"source":"      > [!NOTE] >  ASP.NET supplies tracing functionality tailored for Web pages."},{"content":"To write trace messages in ASP.NET pages, use the &lt;xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName&gt; property.","pos":[288,407],"source":" To write trace messages in ASP.NET pages, use the <xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName> property."},{"content":"By default, in code associated with an ASP.NET Web page, the statement <ph id=\"ph1\">`Trace.Write(\"...\")`</ph> is a call to the &lt;xref:System.Web.TraceContext.Write%2A&gt; method of the &lt;xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName&gt; property.","pos":[414,646],"source":"       By default, in code associated with an ASP.NET Web page, the statement `Trace.Write(\"...\")` is a call to the <xref:System.Web.TraceContext.Write%2A> method of the <xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName> property."},{"content":"To use the &lt;xref:System.Diagnostics.Trace?displayProperty=fullName&gt; class in Web pages, you must include the namespace, for example, <ph id=\"ph1\">`System.Diagnostics.Trace.Write(\"...\")`</ph>.","pos":[647,820],"source":" To use the <xref:System.Diagnostics.Trace?displayProperty=fullName> class in Web pages, you must include the namespace, for example, `System.Diagnostics.Trace.Write(\"...\")`."}]},{"pos":[55978,55997],"content":"A message to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"A message to write.","pos":[0,19]}]},{"pos":[56458,56633],"content":"Writes a category name and the value of the object's &lt;xref:System.Object.ToString<bpt id=\"p1\">*</bpt>&gt; method to the trace listeners in the &lt;xref:System.Diagnostics.Trace.Listeners<ept id=\"p1\">*</ept>&gt; collection.","needQuote":true,"needEscape":true,"source":"Writes a category name and the value of the object's <xref:System.Object.ToString*> method to the trace listeners in the <xref:System.Diagnostics.Trace.Listeners*> collection."},{"pos":[56646,57548],"content":"By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.       The `category` parameter can be used to group output messages.       This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener.      > [!NOTE] >  ASP.NET supplies tracing functionality tailored for Web pages. To write trace messages in ASP.NET pages, use the <xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName> property.       By default, in code associated with an ASP.NET Web page, the statement `Trace.Write(\"...\")` is a call to the <xref:System.Web.TraceContext.Write%2A> method of the <xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName> property. To use the <xref:System.Diagnostics.Trace?displayProperty=fullName> class in Web pages, you must include the namespace, for example, `System.Diagnostics.Trace.Write(\"...\")`.","needQuote":false,"needEscape":true,"nodes":[{"content":"By default, the output is written to an instance of &lt;xref:System.Diagnostics.DefaultTraceListener&gt;.","pos":[0,99],"source":"By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>."},{"content":"The <ph id=\"ph1\">`category`</ph> parameter can be used to group output messages.","pos":[106,168],"source":"       The `category` parameter can be used to group output messages."},{"content":"This method calls the &lt;xref:System.Diagnostics.TraceListener.Write%2A&gt; method of the trace listener.","pos":[175,275],"source":"       This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  ASP.NET supplies tracing functionality tailored for Web pages.","pos":[281,356],"source":"      > [!NOTE] >  ASP.NET supplies tracing functionality tailored for Web pages."},{"content":"To write trace messages in ASP.NET pages, use the &lt;xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName&gt; property.","pos":[357,476],"source":" To write trace messages in ASP.NET pages, use the <xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName> property."},{"content":"By default, in code associated with an ASP.NET Web page, the statement <ph id=\"ph1\">`Trace.Write(\"...\")`</ph> is a call to the &lt;xref:System.Web.TraceContext.Write%2A&gt; method of the &lt;xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName&gt; property.","pos":[483,715],"source":"       By default, in code associated with an ASP.NET Web page, the statement `Trace.Write(\"...\")` is a call to the <xref:System.Web.TraceContext.Write%2A> method of the <xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName> property."},{"content":"To use the &lt;xref:System.Diagnostics.Trace?displayProperty=fullName&gt; class in Web pages, you must include the namespace, for example, <ph id=\"ph1\">`System.Diagnostics.Trace.Write(\"...\")`</ph>.","pos":[716,889],"source":" To use the <xref:System.Diagnostics.Trace?displayProperty=fullName> class in Web pages, you must include the namespace, for example, `System.Diagnostics.Trace.Write(\"...\")`."}]},{"pos":[58776,58863],"content":"An <xref:System.Object> name is sent to the <xref:System.Diagnostics.Trace.Listeners*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Object&gt; name is sent to the &lt;xref:System.Diagnostics.Trace.Listeners*&gt;.","pos":[0,87],"source":"An <xref:System.Object> name is sent to the <xref:System.Diagnostics.Trace.Listeners*>."}]},{"pos":[58928,58972],"content":"A category name used to organize the output.","needQuote":true,"needEscape":true,"nodes":[{"content":"A category name used to organize the output.","pos":[0,44]}]},{"pos":[59433,59554],"content":"Writes a category name and a message to the trace listeners in the <xref:System.Diagnostics.Trace.Listeners*> collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes a category name and a message to the trace listeners in the &lt;xref:System.Diagnostics.Trace.Listeners*&gt; collection.","pos":[0,121],"source":"Writes a category name and a message to the trace listeners in the <xref:System.Diagnostics.Trace.Listeners*> collection."}]},{"pos":[59567,60469],"content":"By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.       The `category` parameter can be used to group output messages.       This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener.      > [!NOTE] >  ASP.NET supplies tracing functionality tailored for Web pages. To write trace messages in ASP.NET pages, use the <xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName> property.       By default, in code associated with an ASP.NET Web page, the statement `Trace.Write(\"...\")` is a call to the <xref:System.Web.TraceContext.Write%2A> method of the <xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName> property. To use the <xref:System.Diagnostics.Trace?displayProperty=fullName> class in Web pages, you must include the namespace, for example, `System.Diagnostics.Trace.Write(\"...\")`.","needQuote":false,"needEscape":true,"nodes":[{"content":"By default, the output is written to an instance of &lt;xref:System.Diagnostics.DefaultTraceListener&gt;.","pos":[0,99],"source":"By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>."},{"content":"The <ph id=\"ph1\">`category`</ph> parameter can be used to group output messages.","pos":[106,168],"source":"       The `category` parameter can be used to group output messages."},{"content":"This method calls the &lt;xref:System.Diagnostics.TraceListener.Write%2A&gt; method of the trace listener.","pos":[175,275],"source":"       This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  ASP.NET supplies tracing functionality tailored for Web pages.","pos":[281,356],"source":"      > [!NOTE] >  ASP.NET supplies tracing functionality tailored for Web pages."},{"content":"To write trace messages in ASP.NET pages, use the &lt;xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName&gt; property.","pos":[357,476],"source":" To write trace messages in ASP.NET pages, use the <xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName> property."},{"content":"By default, in code associated with an ASP.NET Web page, the statement <ph id=\"ph1\">`Trace.Write(\"...\")`</ph> is a call to the &lt;xref:System.Web.TraceContext.Write%2A&gt; method of the &lt;xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName&gt; property.","pos":[483,715],"source":"       By default, in code associated with an ASP.NET Web page, the statement `Trace.Write(\"...\")` is a call to the <xref:System.Web.TraceContext.Write%2A> method of the <xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName> property."},{"content":"To use the &lt;xref:System.Diagnostics.Trace?displayProperty=fullName&gt; class in Web pages, you must include the namespace, for example, <ph id=\"ph1\">`System.Diagnostics.Trace.Write(\"...\")`</ph>.","pos":[716,889],"source":" To use the <xref:System.Diagnostics.Trace?displayProperty=fullName> class in Web pages, you must include the namespace, for example, `System.Diagnostics.Trace.Write(\"...\")`."}]},{"pos":[61676,61695],"content":"A message to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"A message to write.","pos":[0,19]}]},{"pos":[61760,61804],"content":"A category name used to organize the output.","needQuote":true,"needEscape":true,"nodes":[{"content":"A category name used to organize the output.","pos":[0,44]}]},{"pos":[62280,62514],"content":"Writes the value of the object's &lt;xref:System.Object.ToString<bpt id=\"p1\">*</bpt>&gt; method to the trace listeners in the &lt;xref:System.Diagnostics.Trace.Listeners<ept id=\"p1\">*</ept>&gt; collection if a condition is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Writes the value of the object's <xref:System.Object.ToString*> method to the trace listeners in the <xref:System.Diagnostics.Trace.Listeners*> collection if a condition is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>."},{"pos":[62527,62735],"content":"By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.       This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener.","needQuote":false,"needEscape":true,"nodes":[{"content":"By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.       This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener.","pos":[0,206],"nodes":[{"content":"By default, the output is written to an instance of &lt;xref:System.Diagnostics.DefaultTraceListener&gt;.","pos":[0,99],"source":"By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>."},{"content":"This method calls the &lt;xref:System.Diagnostics.TraceListener.Write%2A&gt; method of the trace listener.","pos":[106,206],"source":"       This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener."}]}]},{"pos":[63949,64118],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to cause a message to be written; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to cause a message to be written; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[64180,64273],"content":"An <xref:System.Object> whose name is sent to the <xref:System.Diagnostics.Trace.Listeners*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Object&gt; whose name is sent to the &lt;xref:System.Diagnostics.Trace.Listeners*&gt;.","pos":[0,93],"source":"An <xref:System.Object> whose name is sent to the <xref:System.Diagnostics.Trace.Listeners*>."}]},{"pos":[64751,64931],"content":"Writes a message to the trace listeners in the &lt;xref:System.Diagnostics.Trace.Listeners*&gt; collection if a condition is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Writes a message to the trace listeners in the <xref:System.Diagnostics.Trace.Listeners*> collection if a condition is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>."},{"pos":[64944,65152],"content":"By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.       This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener.","needQuote":false,"needEscape":true,"nodes":[{"content":"By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.       This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener.","pos":[0,206],"nodes":[{"content":"By default, the output is written to an instance of &lt;xref:System.Diagnostics.DefaultTraceListener&gt;.","pos":[0,99],"source":"By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>."},{"content":"This method calls the &lt;xref:System.Diagnostics.TraceListener.Write%2A&gt; method of the trace listener.","pos":[106,206],"source":"       This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener."}]}]},{"pos":[66369,66538],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to cause a message to be written; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to cause a message to be written; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[66602,66621],"content":"A message to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"A message to write.","pos":[0,19]}]},{"pos":[67148,67402],"content":"Writes a category name and the value of the object's &lt;xref:System.Object.ToString<bpt id=\"p1\">*</bpt>&gt; method to the trace listeners in the &lt;xref:System.Diagnostics.Trace.Listeners<ept id=\"p1\">*</ept>&gt; collection if a condition is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Writes a category name and the value of the object's <xref:System.Object.ToString*> method to the trace listeners in the <xref:System.Diagnostics.Trace.Listeners*> collection if a condition is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>."},{"pos":[67415,67694],"content":"By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.       The `category` parameter can be used to group output messages.       This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener.","needQuote":false,"needEscape":true,"nodes":[{"content":"By default, the output is written to an instance of &lt;xref:System.Diagnostics.DefaultTraceListener&gt;.","pos":[0,99],"source":"By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>."},{"content":"The <ph id=\"ph1\">`category`</ph> parameter can be used to group output messages.","pos":[106,168],"source":"       The `category` parameter can be used to group output messages."},{"content":"This method calls the &lt;xref:System.Diagnostics.TraceListener.Write%2A&gt; method of the trace listener.","pos":[175,275],"source":"       This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener."}]},{"pos":[68948,69117],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to cause a message to be written; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to cause a message to be written; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[69179,69272],"content":"An <xref:System.Object> whose name is sent to the <xref:System.Diagnostics.Trace.Listeners*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Object&gt; whose name is sent to the &lt;xref:System.Diagnostics.Trace.Listeners*&gt;.","pos":[0,93],"source":"An <xref:System.Object> whose name is sent to the <xref:System.Diagnostics.Trace.Listeners*>."}]},{"pos":[69337,69381],"content":"A category name used to organize the output.","needQuote":true,"needEscape":true,"nodes":[{"content":"A category name used to organize the output.","pos":[0,44]}]},{"pos":[69908,70106],"content":"Writes a category name and message to the trace listeners in the &lt;xref:System.Diagnostics.Trace.Listeners*&gt; collection if a condition is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Writes a category name and message to the trace listeners in the <xref:System.Diagnostics.Trace.Listeners*> collection if a condition is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>."},{"pos":[70119,70398],"content":"By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.       The `category` parameter can be used to group output messages.       This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener.","needQuote":false,"needEscape":true,"nodes":[{"content":"By default, the output is written to an instance of &lt;xref:System.Diagnostics.DefaultTraceListener&gt;.","pos":[0,99],"source":"By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>."},{"content":"The <ph id=\"ph1\">`category`</ph> parameter can be used to group output messages.","pos":[106,168],"source":"       The `category` parameter can be used to group output messages."},{"content":"This method calls the &lt;xref:System.Diagnostics.TraceListener.Write%2A&gt; method of the trace listener.","pos":[175,275],"source":"       This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener."}]},{"pos":[71632,71801],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to cause a message to be written; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to cause a message to be written; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[71865,71884],"content":"A message to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"A message to write.","pos":[0,19]}]},{"pos":[71949,71993],"content":"A category name used to organize the output.","needQuote":true,"needEscape":true,"nodes":[{"content":"A category name used to organize the output.","pos":[0,44]}]},{"pos":[72427,72582],"content":"Writes the value of the object's &lt;xref:System.Object.ToString<bpt id=\"p1\">*</bpt>&gt; method to the trace listeners in the &lt;xref:System.Diagnostics.Trace.Listeners<ept id=\"p1\">*</ept>&gt; collection.","needQuote":true,"needEscape":true,"source":"Writes the value of the object's <xref:System.Object.ToString*> method to the trace listeners in the <xref:System.Diagnostics.Trace.Listeners*> collection."},{"pos":[72595,72807],"content":"By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.       This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener.","needQuote":false,"needEscape":true,"nodes":[{"content":"By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.       This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener.","pos":[0,210],"nodes":[{"content":"By default, the output is written to an instance of &lt;xref:System.Diagnostics.DefaultTraceListener&gt;.","pos":[0,99],"source":"By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>."},{"content":"This method calls the &lt;xref:System.Diagnostics.TraceListener.WriteLine%2A&gt; method of the trace listener.","pos":[106,210],"source":"       This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener."}]}]},{"pos":[74010,74103],"content":"An <xref:System.Object> whose name is sent to the <xref:System.Diagnostics.Trace.Listeners*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Object&gt; whose name is sent to the &lt;xref:System.Diagnostics.Trace.Listeners*&gt;.","pos":[0,93],"source":"An <xref:System.Object> whose name is sent to the <xref:System.Diagnostics.Trace.Listeners*>."}]},{"pos":[74539,74640],"content":"Writes a message to the trace listeners in the <xref:System.Diagnostics.Trace.Listeners*> collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes a message to the trace listeners in the &lt;xref:System.Diagnostics.Trace.Listeners*&gt; collection.","pos":[0,101],"source":"Writes a message to the trace listeners in the <xref:System.Diagnostics.Trace.Listeners*> collection."}]},{"pos":[74653,74865],"content":"By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.       This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener.","needQuote":false,"needEscape":true,"nodes":[{"content":"By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.       This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener.","pos":[0,210],"nodes":[{"content":"By default, the output is written to an instance of &lt;xref:System.Diagnostics.DefaultTraceListener&gt;.","pos":[0,99],"source":"By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>."},{"content":"This method calls the &lt;xref:System.Diagnostics.TraceListener.WriteLine%2A&gt; method of the trace listener.","pos":[106,210],"source":"       This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener."}]}]},{"pos":[76056,76075],"content":"A message to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"A message to write.","pos":[0,19]}]},{"pos":[76560,76735],"content":"Writes a category name and the value of the object's &lt;xref:System.Object.ToString<bpt id=\"p1\">*</bpt>&gt; method to the trace listeners in the &lt;xref:System.Diagnostics.Trace.Listeners<ept id=\"p1\">*</ept>&gt; collection.","needQuote":true,"needEscape":true,"source":"Writes a category name and the value of the object's <xref:System.Object.ToString*> method to the trace listeners in the <xref:System.Diagnostics.Trace.Listeners*> collection."},{"pos":[76748,77031],"content":"By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.       The `category` parameter can be used to group output messages.       This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener.","needQuote":false,"needEscape":true,"nodes":[{"content":"By default, the output is written to an instance of &lt;xref:System.Diagnostics.DefaultTraceListener&gt;.","pos":[0,99],"source":"By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>."},{"content":"The <ph id=\"ph1\">`category`</ph> parameter can be used to group output messages.","pos":[106,168],"source":"       The `category` parameter can be used to group output messages."},{"content":"This method calls the &lt;xref:System.Diagnostics.TraceListener.WriteLine%2A&gt; method of the trace listener.","pos":[175,279],"source":"       This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener."}]},{"pos":[78253,78346],"content":"An <xref:System.Object> whose name is sent to the <xref:System.Diagnostics.Trace.Listeners*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Object&gt; whose name is sent to the &lt;xref:System.Diagnostics.Trace.Listeners*&gt;.","pos":[0,93],"source":"An <xref:System.Object> whose name is sent to the <xref:System.Diagnostics.Trace.Listeners*>."}]},{"pos":[78411,78455],"content":"A category name used to organize the output.","needQuote":true,"needEscape":true,"nodes":[{"content":"A category name used to organize the output.","pos":[0,44]}]},{"pos":[78940,79059],"content":"Writes a category name and message to the trace listeners in the <xref:System.Diagnostics.Trace.Listeners*> collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes a category name and message to the trace listeners in the &lt;xref:System.Diagnostics.Trace.Listeners*&gt; collection.","pos":[0,119],"source":"Writes a category name and message to the trace listeners in the <xref:System.Diagnostics.Trace.Listeners*> collection."}]},{"pos":[79072,79355],"content":"By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.       The `category` parameter can be used to group output messages.       This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener.","needQuote":false,"needEscape":true,"nodes":[{"content":"By default, the output is written to an instance of &lt;xref:System.Diagnostics.DefaultTraceListener&gt;.","pos":[0,99],"source":"By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>."},{"content":"The <ph id=\"ph1\">`category`</ph> parameter can be used to group output messages.","pos":[106,168],"source":"       The `category` parameter can be used to group output messages."},{"content":"This method calls the &lt;xref:System.Diagnostics.TraceListener.WriteLine%2A&gt; method of the trace listener.","pos":[175,279],"source":"       This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener."}]},{"pos":[80600,80619],"content":"A message to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"A message to write.","pos":[0,19]}]},{"pos":[80684,80728],"content":"A category name used to organize the output.","needQuote":true,"needEscape":true,"nodes":[{"content":"A category name used to organize the output.","pos":[0,44]}]},{"pos":[81228,81462],"content":"Writes the value of the object's &lt;xref:System.Object.ToString<bpt id=\"p1\">*</bpt>&gt; method to the trace listeners in the &lt;xref:System.Diagnostics.Trace.Listeners<ept id=\"p1\">*</ept>&gt; collection if a condition is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Writes the value of the object's <xref:System.Object.ToString*> method to the trace listeners in the <xref:System.Diagnostics.Trace.Listeners*> collection if a condition is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>."},{"pos":[81475,81687],"content":"By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.       This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener.","needQuote":false,"needEscape":true,"nodes":[{"content":"By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.       This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener.","pos":[0,210],"nodes":[{"content":"By default, the output is written to an instance of &lt;xref:System.Diagnostics.DefaultTraceListener&gt;.","pos":[0,99],"source":"By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>."},{"content":"This method calls the &lt;xref:System.Diagnostics.TraceListener.WriteLine%2A&gt; method of the trace listener.","pos":[106,210],"source":"       This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener."}]}]},{"pos":[82916,83085],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to cause a message to be written; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to cause a message to be written; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[83147,83240],"content":"An <xref:System.Object> whose name is sent to the <xref:System.Diagnostics.Trace.Listeners*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Object&gt; whose name is sent to the &lt;xref:System.Diagnostics.Trace.Listeners*&gt;.","pos":[0,93],"source":"An <xref:System.Object> whose name is sent to the <xref:System.Diagnostics.Trace.Listeners*>."}]},{"pos":[83742,83922],"content":"Writes a message to the trace listeners in the &lt;xref:System.Diagnostics.Trace.Listeners*&gt; collection if a condition is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Writes a message to the trace listeners in the <xref:System.Diagnostics.Trace.Listeners*> collection if a condition is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>."},{"pos":[83935,84147],"content":"By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.       This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener.","needQuote":false,"needEscape":true,"nodes":[{"content":"By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.       This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener.","pos":[0,210],"nodes":[{"content":"By default, the output is written to an instance of &lt;xref:System.Diagnostics.DefaultTraceListener&gt;.","pos":[0,99],"source":"By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>."},{"content":"This method calls the &lt;xref:System.Diagnostics.TraceListener.WriteLine%2A&gt; method of the trace listener.","pos":[106,210],"source":"       This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener."}]}]},{"pos":[85368,85537],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to cause a message to be written; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to cause a message to be written; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[85601,85620],"content":"A message to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"A message to write.","pos":[0,19]}]},{"pos":[86171,86425],"content":"Writes a category name and the value of the object's &lt;xref:System.Object.ToString<bpt id=\"p1\">*</bpt>&gt; method to the trace listeners in the &lt;xref:System.Diagnostics.Trace.Listeners<ept id=\"p1\">*</ept>&gt; collection if a condition is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Writes a category name and the value of the object's <xref:System.Object.ToString*> method to the trace listeners in the <xref:System.Diagnostics.Trace.Listeners*> collection if a condition is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>."},{"pos":[86438,86721],"content":"By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.       The `category` parameter can be used to group output messages.       This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener.","needQuote":false,"needEscape":true,"nodes":[{"content":"By default, the output is written to an instance of &lt;xref:System.Diagnostics.DefaultTraceListener&gt;.","pos":[0,99],"source":"By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>."},{"content":"The <ph id=\"ph1\">`category`</ph> parameter can be used to group output messages.","pos":[106,168],"source":"       The `category` parameter can be used to group output messages."},{"content":"This method calls the &lt;xref:System.Diagnostics.TraceListener.WriteLine%2A&gt; method of the trace listener.","pos":[175,279],"source":"       This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener."}]},{"pos":[87963,88132],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to cause a message to be written; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to cause a message to be written; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[88194,88287],"content":"An <xref:System.Object> whose name is sent to the <xref:System.Diagnostics.Trace.Listeners*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Object&gt; whose name is sent to the &lt;xref:System.Diagnostics.Trace.Listeners*&gt;.","pos":[0,93],"source":"An <xref:System.Object> whose name is sent to the <xref:System.Diagnostics.Trace.Listeners*>."}]},{"pos":[88352,88396],"content":"A category name used to organize the output.","needQuote":true,"needEscape":true,"nodes":[{"content":"A category name used to organize the output.","pos":[0,44]}]},{"pos":[88947,89145],"content":"Writes a category name and message to the trace listeners in the &lt;xref:System.Diagnostics.Trace.Listeners*&gt; collection if a condition is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Writes a category name and message to the trace listeners in the <xref:System.Diagnostics.Trace.Listeners*> collection if a condition is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>."},{"pos":[89158,89441],"content":"By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.       The `category` parameter can be used to group output messages.       This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener.","needQuote":false,"needEscape":true,"nodes":[{"content":"By default, the output is written to an instance of &lt;xref:System.Diagnostics.DefaultTraceListener&gt;.","pos":[0,99],"source":"By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>."},{"content":"The <ph id=\"ph1\">`category`</ph> parameter can be used to group output messages.","pos":[106,168],"source":"       The `category` parameter can be used to group output messages."},{"content":"This method calls the &lt;xref:System.Diagnostics.TraceListener.WriteLine%2A&gt; method of the trace listener.","pos":[175,279],"source":"       This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener."}]},{"pos":[90704,90873],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to cause a message to be written; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to cause a message to be written; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[90937,90956],"content":"A message to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"A message to write.","pos":[0,19]}]},{"pos":[91021,91065],"content":"A category name used to organize the output.","needQuote":true,"needEscape":true,"nodes":[{"content":"A category name used to organize the output.","pos":[0,44]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Diagnostics.Trace\n  id: Trace\n  children:\n  - System.Diagnostics.Trace.Assert(System.Boolean)\n  - System.Diagnostics.Trace.Assert(System.Boolean,System.String)\n  - System.Diagnostics.Trace.Assert(System.Boolean,System.String,System.String)\n  - System.Diagnostics.Trace.AutoFlush\n  - System.Diagnostics.Trace.Close\n  - System.Diagnostics.Trace.CorrelationManager\n  - System.Diagnostics.Trace.Fail(System.String)\n  - System.Diagnostics.Trace.Fail(System.String,System.String)\n  - System.Diagnostics.Trace.Flush\n  - System.Diagnostics.Trace.Indent\n  - System.Diagnostics.Trace.IndentLevel\n  - System.Diagnostics.Trace.IndentSize\n  - System.Diagnostics.Trace.Listeners\n  - System.Diagnostics.Trace.Refresh\n  - System.Diagnostics.Trace.TraceError(System.String)\n  - System.Diagnostics.Trace.TraceError(System.String,System.Object[])\n  - System.Diagnostics.Trace.TraceInformation(System.String)\n  - System.Diagnostics.Trace.TraceInformation(System.String,System.Object[])\n  - System.Diagnostics.Trace.TraceWarning(System.String)\n  - System.Diagnostics.Trace.TraceWarning(System.String,System.Object[])\n  - System.Diagnostics.Trace.Unindent\n  - System.Diagnostics.Trace.UseGlobalLock\n  - System.Diagnostics.Trace.Write(System.Object)\n  - System.Diagnostics.Trace.Write(System.String)\n  - System.Diagnostics.Trace.Write(System.Object,System.String)\n  - System.Diagnostics.Trace.Write(System.String,System.String)\n  - System.Diagnostics.Trace.WriteIf(System.Boolean,System.Object)\n  - System.Diagnostics.Trace.WriteIf(System.Boolean,System.String)\n  - System.Diagnostics.Trace.WriteIf(System.Boolean,System.Object,System.String)\n  - System.Diagnostics.Trace.WriteIf(System.Boolean,System.String,System.String)\n  - System.Diagnostics.Trace.WriteLine(System.Object)\n  - System.Diagnostics.Trace.WriteLine(System.String)\n  - System.Diagnostics.Trace.WriteLine(System.Object,System.String)\n  - System.Diagnostics.Trace.WriteLine(System.String,System.String)\n  - System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.Object)\n  - System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String)\n  - System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.Object,System.String)\n  - System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String,System.String)\n  langs:\n  - csharp\n  name: Trace\n  nameWithType: Trace\n  fullName: System.Diagnostics.Trace\n  type: Class\n  summary: Provides a set of methods and properties that help you trace the execution of your code. This class cannot be inherited.\n  remarks: \"You can use the properties and methods in the Trace class to instrument release builds. Instrumentation allows you to monitor the health of your application running in real-life settings. Tracing helps you isolate problems and fix them without disturbing a running system.  \\n  \\n This class provides methods to display an <xref:System.Diagnostics.Trace.Assert%2A> dialog box, and to emit an assertion that will always <xref:System.Diagnostics.Trace.Fail%2A>. This class provides write methods in the following variations: <xref:System.Diagnostics.Trace.Write%2A>, <xref:System.Diagnostics.Trace.WriteLine%2A>, <xref:System.Diagnostics.Trace.WriteIf%2A>, and <xref:System.Diagnostics.Trace.WriteLineIf%2A>.  \\n  \\n The <xref:System.Diagnostics.BooleanSwitch> and <xref:System.Diagnostics.TraceSwitch> classes provide means to dynamically control the tracing output. You can modify the values of these switches without recompiling your application. For information on using the configuration file to set a switch, see the <xref:System.Diagnostics.Switch> class and the [How to: Create, Initialize and Configure Trace Switches](~/add/includes/ajax-current-ext-md.md) topic.  \\n  \\n You can customize the tracing output's target by adding <xref:System.Diagnostics.TraceListener> instances to or removing instances from the <xref:System.Diagnostics.Trace.Listeners%2A> collection. The <xref:System.Diagnostics.Trace.Listeners%2A> collection is shared by both the <xref:System.Diagnostics.Debug> and the Trace classes; adding a trace listener to either class adds the listener to both. By default, trace output is emitted using the <xref:System.Diagnostics.DefaultTraceListener> class.  \\n  \\n> [!NOTE]\\n>  Adding a trace listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection can cause an exception to be thrown while tracing, if a resource used by the trace listener is not available. The conditions and the exception thrown depend on the trace listener and cannot be enumerated in this topic. It may be useful to place calls to the Trace methods in `try`/`catch` blocks to detect and handle any exceptions from trace listeners.  \\n  \\n> [!NOTE]\\n>  If you add trace listeners to partially trusted code, you will get a <xref:System.Security.SecurityException> exception, because adding trace listeners requires <xref:System.Security.Permissions.SecurityPermissionFlag> permission. To trace partially trusted code that is running in a sandbox in Visual Studio, do not add trace listeners. Instead, view the Trace and <xref:System.Diagnostics.Debug> messages in the **Output** window.  \\n  \\n The Trace class provides properties to get or set the level of <xref:System.Diagnostics.Trace.Indent%2A>, the <xref:System.Diagnostics.Trace.IndentSize%2A>, and whether to <xref:System.Diagnostics.Trace.AutoFlush%2A> after each write.  \\n  \\n To set the <xref:System.Diagnostics.Trace.AutoFlush%2A> and <xref:System.Diagnostics.Trace.IndentSize%2A> for Trace, you can edit the configuration file that corresponds to the name of your application. The configuration file should be formatted like the following example:  \\n  \\n```  \\n<configuration>  \\n  <system.diagnostics>  \\n    <trace autoflush=\\\"false\\\" indentsize=\\\"3\\\" />  \\n  </system.diagnostics>  \\n</configuration>  \\n```  \\n  \\n The <xref:System.Diagnostics.ConditionalAttribute> attribute is applied to the methods of Trace. Compilers that support <xref:System.Diagnostics.ConditionalAttribute> ignore calls to these methods unless \\\"TRACE\\\" is defined as a conditional compilation symbol. Refer to a compiler's documentation to determine whether <xref:System.Diagnostics.ConditionalAttribute> is supported and the syntax for defining a conditional compilation symbol.  \\n  \\n> [!NOTE]\\n>  In Visual Studio projects, by default, the \\\"DEBUG\\\" conditional compilation symbol is defined for debug builds, and the \\\"TRACE\\\" symbol is defined for both debug and release builds. For information about how to disable this behavior, see the Visual Studio documentation.  \\n  \\n To define the \\\"TRACE\\\" conditional compilation symbol in C#, add the `/d:TRACE` option to the compiler command line when you compile your code using a command line, or add `#define TRACE` to the top of your file. In Visual Basic, add the `/d:TRACE=True` option to the compiler command line or add `#Const TRACE=True` to the file.  \\n  \\n <xref:System.Diagnostics.ConditionalAttribute> is not supported by the C++ compiler. To provide equivalent functionality, you must enclose calls to the methods of Trace in an `#if defined(TRACE) ... #endif` block, and add the `/DTRACE` option to the compiler command line or add `#define TRACE` to the file.\"\n  example:\n  - \"The following example uses Trace to indicate the beginning and the end of a program's execution. The example also uses the <xref:System.Diagnostics.Trace.Indent%2A?displayProperty=fullName> and <xref:System.Diagnostics.Trace.Unindent%2A?displayProperty=fullName> methods to distinguish the tracing output. For a more complete example of the use of Trace, see [How to: Add Trace Statements to Application Code](~/add/includes/ajax-current-ext-md.md).  \\n  \\n [!code-cpp[Classic Trace Example#1](~/add/codesnippet/cpp/t-system.diagnostics.trace_1.cpp)]\\n [!code-cs[Classic Trace Example#1](~/add/codesnippet/csharp/t-system.diagnostics.trace_1.cs)]\\n [!code-vb[Classic Trace Example#1](~/add/codesnippet/visualbasic/t-system.diagnostics.trace_1.vb)]\"\n  syntax:\n    content: public sealed class Trace\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Trace.Assert(System.Boolean)\n  id: Assert(System.Boolean)\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  name: Assert(Boolean)\n  nameWithType: Trace.Assert(Boolean)\n  fullName: System.Diagnostics.Trace.Assert(Boolean)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Checks for a condition; if the condition is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, displays a message box that shows the call stack.\n  remarks: \"Use the <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=fullName> method if you want to do assertions in release builds. The <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=fullName> method works only in debug builds. For more information, see [Assertions in Managed Code](~/add/includes/ajax-current-ext-md.md).  \\n  \\n Typically, the Assert method is used to identify logic errors during program development. Assert evaluates the condition. If the result is `false`, it sends a failure message to the <xref:System.Diagnostics.Trace.Listeners%2A> collection. You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to, or removing one from, the <xref:System.Diagnostics.Trace.Listeners%2A> collection.  \\n  \\n When the application runs in user-interface mode, it displays a message box that shows the call stack with file and line numbers. The message box contains three buttons: **Abort**, **Retry**, and **Ignore**. Clicking the **Abort** button terminates the application. Clicking **Retry** sends you to the code in the debugger if your application is running in a debugger, or offers to open a debugger if it is not. Clicking **Ignore** continues with the next instruction in the code.  \\n  \\n> [!NOTE]\\n>  The display of the message box depends on the presence of the <xref:System.Diagnostics.DefaultTraceListener>. If the <xref:System.Diagnostics.DefaultTraceListener> is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed. The <xref:System.Diagnostics.DefaultTraceListener> can be removed by the [\\\\&lt;clear\\\\&gt;](../Topic/%3Cclear%3E%20Element%20for%20%3Clisteners%3E%20for%20%3Ctrace%3E.md), the [\\\\&lt;remove\\\\&gt;](../Topic/%3Cremove%3E%20Element%20for%20%3Clisteners%3E%20for%20%3Ctrace%3E.md), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).  \\n  \\n You can change the behavior of the <xref:System.Diagnostics.DefaultTraceListener> in the configuration file that corresponds to the name of your application. In this file, you can enable and disable the assert message box or set the <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=fullName> property. The configuration file should be formatted as follows:  \\n  \\n```  \\n<configuration>  \\n  <system.diagnostics>  \\n    <switches>  \\n      <add name=\\\"mySwitch\\\" value=\\\"4\\\"/>  \\n    </switches>  \\n    <trace autoflush=\\\"false\\\" indentsize=\\\"4\\\"/>  \\n    <assert assertuienabled=\\\"true\\\" logfilename=\\\".\\\\TraceLog.txt\\\"/>  \\n  </system.diagnostics>  \\n</configuration>  \\n```\"\n  example:\n  - \"The following example creates an index for an array. Then some action is performed that sets the value of the index. Next the code calls Assert to verify the index value is valid. If it is not valid, the Assert outputs the call stack.  \\n  \\n [!code-cs[Classic Trace.Assert Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_23_1.cs)]\\n [!code-cpp[Classic Trace.Assert Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_23_1.cpp)]\\n [!code-vb[Classic Trace.Assert Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_23_1.vb)]\"\n  syntax:\n    content: public static void Assert (bool condition);\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: The conditional expression to evaluate. If the condition is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, a failure message is not sent and the message box is not displayed.\n  overload: System.Diagnostics.Trace.Assert*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Trace.Assert(System.Boolean,System.String)\n  id: Assert(System.Boolean,System.String)\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  name: Assert(Boolean,String)\n  nameWithType: Trace.Assert(Boolean,String)\n  fullName: System.Diagnostics.Trace.Assert(Boolean,String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Checks for a condition; if the condition is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, outputs a specified message and displays a message box that shows the call stack.\n  remarks: \"Use the <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=fullName> method if you want to do assertions in release builds. The <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=fullName> method works only in debug builds. For more information, see [Assertions in Managed Code](~/add/includes/ajax-current-ext-md.md).  \\n  \\n Typically, the Assert method is used to identify logic errors during program development. Assert evaluates the condition. If the result is `false`, it sends the specified diagnostic message to the <xref:System.Diagnostics.Trace.Listeners%2A> collection. You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to, or removing one from, the <xref:System.Diagnostics.Trace.Listeners%2A> collection.  \\n  \\n When the application runs in user-interface mode, it displays a message box that shows the call stack with file and line numbers. The message box contains three buttons: **Abort**, **Retry**, and **Ignore**. Clicking the **Abort** button terminates the application. Clicking **Retry** sends you to the code in the debugger if your application is running in a debugger, or offers to open a debugger if it is not. Clicking **Ignore** continues with the next instruction in the code.  \\n  \\n> [!NOTE]\\n>  The display of the message box depends on the presence of the <xref:System.Diagnostics.DefaultTraceListener>. If the <xref:System.Diagnostics.DefaultTraceListener> is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed. The <xref:System.Diagnostics.DefaultTraceListener> can be removed by the [\\\\&lt;clear\\\\&gt;](../Topic/%3Cclear%3E%20Element%20for%20%3Clisteners%3E%20for%20%3Ctrace%3E.md), the [\\\\&lt;remove\\\\&gt;](../Topic/%3Cremove%3E%20Element%20for%20%3Clisteners%3E%20for%20%3Ctrace%3E.md), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).  \\n  \\n You can change the behavior of the <xref:System.Diagnostics.DefaultTraceListener> in the configuration file that corresponds to the name of your application. In this file, you can enable and disable the assert message box or set the <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=fullName> property. The configuration file should be formatted as follows:  \\n  \\n```  \\n<configuration>  \\n  <system.diagnostics>  \\n    <switches>  \\n      <add name=\\\"mySwitch\\\" value=\\\"4\\\"/>  \\n    </switches>  \\n    <trace autoflush=\\\"false\\\" indentsize=\\\"4\\\"/>  \\n    <assert assertuienabled=\\\"true\\\" logfilename=\\\".\\\\TraceLog.txt\\\"/>  \\n  </system.diagnostics>  \\n</configuration>  \\n```\"\n  example:\n  - \"The following example checks to see that the `type` parameter is valid. If the `type` passed in is `null`, the <xref:System.Diagnostics.Trace.Assert%2A> outputs a message.  \\n  \\n [!code-cs[Classic Trace.Assert1 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_20_1.cs)]\\n [!code-cpp[Classic Trace.Assert1 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_20_1.cpp)]\\n [!code-vb[Classic Trace.Assert1 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_20_1.vb)]\"\n  syntax:\n    content: public static void Assert (bool condition, string message);\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: The conditional expression to evaluate. If the condition is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, the specified message is not sent and the message box is not displayed.\n    - id: message\n      type: System.String\n      description: The message to send to the <xref:System.Diagnostics.Trace.Listeners*> collection.\n  overload: System.Diagnostics.Trace.Assert*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Trace.Assert(System.Boolean,System.String,System.String)\n  id: Assert(System.Boolean,System.String,System.String)\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  name: Assert(Boolean,String,String)\n  nameWithType: Trace.Assert(Boolean,String,String)\n  fullName: System.Diagnostics.Trace.Assert(Boolean,String,String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Checks for a condition; if the condition is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, outputs two specified messages and displays a message box that shows the call stack.\n  remarks: \"Use the <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=fullName> method if you want to do assertions in release builds. The <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=fullName> method works only in debug builds. For more information, see [Assertions in Managed Code](~/add/includes/ajax-current-ext-md.md).  \\n  \\n Typically, the Assert method is used to identify logic errors during program development. Assert evaluates the condition. If the result is `false`, it sends the specified diagnostic message and detailed message to the <xref:System.Diagnostics.Trace.Listeners%2A> collection. You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to, or removing one from, the <xref:System.Diagnostics.Trace.Listeners%2A> collection.  \\n  \\n When the application runs in user-interface mode, it displays a message box that shows the call stack with file and line numbers. The message box contains three buttons: **Abort**, **Retry**, and **Ignore**. Clicking the **Abort** button terminates the application. Clicking **Retry** sends you to the code in the debugger if your application is running in a debugger, or offers to open a debugger if it is not. Clicking **Ignore** continues with the next instruction in the code.  \\n  \\n> [!NOTE]\\n>  The display of the message box depends on the presence of the <xref:System.Diagnostics.DefaultTraceListener>. If the <xref:System.Diagnostics.DefaultTraceListener> is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed. The <xref:System.Diagnostics.DefaultTraceListener> can be removed by the [\\\\&lt;clear\\\\&gt;](../Topic/%3Cclear%3E%20Element%20for%20%3Clisteners%3E%20for%20%3Ctrace%3E.md), the [\\\\&lt;remove\\\\&gt;](../Topic/%3Cremove%3E%20Element%20for%20%3Clisteners%3E%20for%20%3Ctrace%3E.md), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).  \\n  \\n You can change the behavior of the <xref:System.Diagnostics.DefaultTraceListener> in the configuration file that corresponds to the name of your application. In this file, you can enable and disable the assert message box or set the <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=fullName> property. The configuration file should be formatted as follows:  \\n  \\n```  \\n<configuration>  \\n  <system.diagnostics>  \\n    <switches>  \\n      <add name=\\\"mySwitch\\\" value=\\\"4\\\"/>  \\n    </switches>  \\n    <trace autoflush=\\\"false\\\" indentsize=\\\"4\\\"/>  \\n    <assert assertuienabled=\\\"true\\\" logfilename=\\\".\\\\TraceLog.txt\\\"/>  \\n  </system.diagnostics>  \\n</configuration>  \\n```\"\n  example:\n  - \"The following example checks to see that the `type` parameter is valid. If the `type` passed in is `null`, the <xref:System.Diagnostics.Trace.Assert%2A> outputs a message.  \\n  \\n [!code-cs[Classic Trace.Assert2 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_24_1.cs)]\\n [!code-vb[Classic Trace.Assert2 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_24_1.vb)]\\n [!code-cpp[Classic Trace.Assert2 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_24_1.cpp)]\"\n  syntax:\n    content: public static void Assert (bool condition, string message, string detailMessage);\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: The conditional expression to evaluate. If the condition is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, the specified messages are not sent and the message box is not displayed.\n    - id: message\n      type: System.String\n      description: The message to send to the <xref:System.Diagnostics.Trace.Listeners*> collection.\n    - id: detailMessage\n      type: System.String\n      description: The detailed message to send to the <xref:System.Diagnostics.Trace.Listeners*> collection.\n  overload: System.Diagnostics.Trace.Assert*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Trace.AutoFlush\n  id: AutoFlush\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  name: AutoFlush\n  nameWithType: Trace.AutoFlush\n  fullName: System.Diagnostics.Trace.AutoFlush\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Gets or sets whether <xref:System.Diagnostics.Trace.Flush*> should be called on the <xref:System.Diagnostics.Trace.Listeners*> after every write.\n  remarks: \"The default is `false`.  \\n  \\n Flushing the stream will not flush its underlying encoder unless you explicitly call <xref:System.Diagnostics.Trace.Flush%2A> or <xref:System.Diagnostics.Trace.Close%2A>. Setting AutoFlush to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed. This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly. This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.  \\n  \\n To set the AutoFlush and <xref:System.Diagnostics.Trace.IndentSize%2A> for <xref:System.Diagnostics.Trace>, you can also edit the configuration file that corresponds to the name of your application. The configuration file should be formatted like the following example:  \\n  \\n```  \\n<configuration>  \\n  <system.diagnostics>  \\n    <trace autoflush=\\\"false\\\" indentsize=\\\"3\\\" />  \\n  </system.diagnostics>  \\n</configuration>  \\n```\"\n  syntax:\n    content: public static bool AutoFlush { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <xref:System.Diagnostics.Trace.Flush*> is called on the <xref:System.Diagnostics.Trace.Listeners*> after every write; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Diagnostics.Trace.AutoFlush*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Trace.Close\n  id: Close\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  name: Close()\n  nameWithType: Trace.Close()\n  fullName: System.Diagnostics.Trace.Close()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Flushes the output buffer, and then closes the <xref:System.Diagnostics.Trace.Listeners*>.\n  remarks: \"Use this method when the output is going to a file, such as to the <xref:System.Diagnostics.TextWriterTraceListener>.  \\n  \\n Flushing the stream will not flush its underlying encoder unless you explicitly call <xref:System.Diagnostics.Trace.Flush%2A> or Close. Setting <xref:System.Diagnostics.Trace.AutoFlush%2A> to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed. This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly. This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.\"\n  example:\n  - \"The following example creates a <xref:System.Diagnostics.TextWriterTraceListener> named `myTextListener`. `myTextListener` uses a <xref:System.IO.StreamWriter> called `myOutputWriter` to write to a file named `TestFile.txt`. The example creates the file, stream and text writer, writes one line of text to the file, and then flushes and closes the output.  \\n  \\n [!code-cs[Classic Trace.Flush Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_9_1.cs)]\\n [!code-cpp[Classic Trace.Flush Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_9_1.cpp)]\\n [!code-vb[Classic Trace.Flush Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_9_1.vb)]\"\n  syntax:\n    content: public static void Close ();\n    parameters: []\n  overload: System.Diagnostics.Trace.Close*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Trace.CorrelationManager\n  id: CorrelationManager\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  name: CorrelationManager\n  nameWithType: Trace.CorrelationManager\n  fullName: System.Diagnostics.Trace.CorrelationManager\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Gets the correlation manager for the thread for this trace.\n  remarks: \"> [!NOTE]\\n>  This is an advanced property that most applications should not have occasion to use.  \\n  \\n The <xref:System.Diagnostics.CorrelationManager> class provides methods used to store a logical operation identity in a thread-bound context and automatically tag each trace event generated by the thread with the stored identity.\"\n  syntax:\n    content: public static System.Diagnostics.CorrelationManager CorrelationManager { get; }\n    return:\n      type: System.Diagnostics.CorrelationManager\n      description: The <xref href=\"System.Diagnostics.CorrelationManager\"></xref> object associated with the thread for this trace.\n  overload: System.Diagnostics.Trace.CorrelationManager*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Trace.Fail(System.String)\n  id: Fail(System.String)\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  name: Fail(String)\n  nameWithType: Trace.Fail(String)\n  fullName: System.Diagnostics.Trace.Fail(String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Emits the specified error message.\n  remarks: \"The default behavior for the default trace listener is to output the `message` parameter to a message box when the application runs in user-interface mode, and to the <xref:System.Diagnostics.TraceListener> instances in the <xref:System.Diagnostics.Trace.Listeners%2A> collection.  \\n  \\n> [!NOTE]\\n>  The display of the message box is dependent on the presence of the <xref:System.Diagnostics.DefaultTraceListener>. If the <xref:System.Diagnostics.DefaultTraceListener> is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed. The <xref:System.Diagnostics.DefaultTraceListener> can be removed by the [\\\\&lt;clear\\\\&gt;](../Topic/%3Cclear%3E%20Element%20for%20%3Clisteners%3E%20for%20%3Ctrace%3E.md), the [\\\\&lt;remove\\\\&gt;](../Topic/%3Cremove%3E%20Element%20for%20%3Clisteners%3E%20for%20%3Ctrace%3E.md), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).  \\n  \\n You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to, or by removing one from, the <xref:System.Diagnostics.Trace.Listeners%2A> collection.\"\n  example:\n  - \"The following example uses the Fail method to print a message during exception handling.  \\n  \\n [!code-cs[Classic Trace.Fail Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_1_1.cs)]\\n [!code-cpp[Classic Trace.Fail Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_1_1.cpp)]\\n [!code-vb[Classic Trace.Fail Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_1_1.vb)]  \\n  \\n You can also use the Fail method in a switch statement.  \\n  \\n [!code-cs[Classic Trace.Fail Example#2](~/add/codesnippet/csharp/m-system.diagnostics.tra_1_2.cs)]\\n [!code-cpp[Classic Trace.Fail Example#2](~/add/codesnippet/cpp/m-system.diagnostics.tra_1_2.cpp)]\\n [!code-vb[Classic Trace.Fail Example#2](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_1_2.vb)]\"\n  syntax:\n    content: public static void Fail (string message);\n    parameters:\n    - id: message\n      type: System.String\n      description: A message to emit.\n  overload: System.Diagnostics.Trace.Fail*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Trace.Fail(System.String,System.String)\n  id: Fail(System.String,System.String)\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  name: Fail(String,String)\n  nameWithType: Trace.Fail(String,String)\n  fullName: System.Diagnostics.Trace.Fail(String,String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Emits an error message, and a detailed error message.\n  remarks: \"The default behavior is for the default trace listener to output the `message` parameter and the `detailedMessage` parameter to a message box when the application runs in user-interface mode, and to the <xref:System.Diagnostics.TraceListener> instances in the <xref:System.Diagnostics.Trace.Listeners%2A> collection.  \\n  \\n> [!NOTE]\\n>  The display of the message box is dependent on the presence of the <xref:System.Diagnostics.DefaultTraceListener>. If the <xref:System.Diagnostics.DefaultTraceListener> is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed. The <xref:System.Diagnostics.DefaultTraceListener> can be removed by the [\\\\&lt;clear\\\\&gt;](../Topic/%3Cclear%3E%20Element%20for%20%3Clisteners%3E%20for%20%3Ctrace%3E.md), the [\\\\&lt;remove\\\\&gt;](../Topic/%3Cremove%3E%20Element%20for%20%3Clisteners%3E%20for%20%3Ctrace%3E.md), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).  \\n  \\n You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to, or by removing one from, the <xref:System.Diagnostics.Trace.Listeners%2A> collection.\"\n  example:\n  - \"The following example uses the <xref:System.Diagnostics.Trace.Fail%2A> method to print a message during exception handling.  \\n  \\n [!code-cs[Classic Trace.Fail1 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_13_1.cs)]\\n [!code-cpp[Classic Trace.Fail1 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_13_1.cpp)]\\n [!code-vb[Classic Trace.Fail1 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_13_1.vb)]  \\n  \\n You can also use the <xref:System.Diagnostics.Trace.Fail%2A> method in a switch statement.  \\n  \\n [!code-cs[Classic Trace.Fail1 Example#2](~/add/codesnippet/csharp/m-system.diagnostics.tra_13_2.cs)]\\n [!code-cpp[Classic Trace.Fail1 Example#2](~/add/codesnippet/cpp/m-system.diagnostics.tra_13_2.cpp)]\\n [!code-vb[Classic Trace.Fail1 Example#2](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_13_2.vb)]\"\n  syntax:\n    content: public static void Fail (string message, string detailMessage);\n    parameters:\n    - id: message\n      type: System.String\n      description: A message to emit.\n    - id: detailMessage\n      type: System.String\n      description: A detailed message to emit.\n  overload: System.Diagnostics.Trace.Fail*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Trace.Flush\n  id: Flush\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  name: Flush()\n  nameWithType: Trace.Flush()\n  fullName: System.Diagnostics.Trace.Flush()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Flushes the output buffer, and causes buffered data to be written to the <xref:System.Diagnostics.Trace.Listeners*>.\n  remarks: Flushing the stream will not flush its underlying encoder unless you explicitly call Flush or <xref:System.Diagnostics.Trace.Close%2A>. Setting <xref:System.Diagnostics.Trace.AutoFlush%2A> to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed. This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly. This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.\n  example:\n  - \"The following example creates a <xref:System.Diagnostics.TextWriterTraceListener> named `myTextListener`. `myTextListener` uses a <xref:System.IO.StreamWriter> called `myOutputWriter` to write to a file named `TestFile.txt`. The example creates the file, stream and text writer, writes one line of text to the file, and then flushes and closes the output.  \\n  \\n [!code-cs[Classic Trace.Flush Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_17_1.cs)]\\n [!code-cpp[Classic Trace.Flush Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_17_1.cpp)]\\n [!code-vb[Classic Trace.Flush Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_17_1.vb)]\"\n  syntax:\n    content: public static void Flush ();\n    parameters: []\n  overload: System.Diagnostics.Trace.Flush*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Trace.Indent\n  id: Indent\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  name: Indent()\n  nameWithType: Trace.Indent()\n  fullName: System.Diagnostics.Trace.Indent()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Increases the current <xref:System.Diagnostics.Trace.IndentLevel*> by one.\n  remarks: ''\n  example:\n  - \"The following example increments and decrements the indent level and emits tracing messages.  \\n  \\n [!code-cpp[Classic Trace.IndentLevel Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_6_1.cpp)]\\n [!code-cs[Classic Trace.IndentLevel Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_6_1.cs)]\\n [!code-vb[Classic Trace.IndentLevel Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_6_1.vb)]  \\n  \\n This example produces the following output:  \\n  \\n```  \\nList of errors:  \\n     Error 1: File not found  \\n     Error 2: Directory not found  \\nEnd of list of errors  \\n```\"\n  syntax:\n    content: public static void Indent ();\n    parameters: []\n  overload: System.Diagnostics.Trace.Indent*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Trace.IndentLevel\n  id: IndentLevel\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  name: IndentLevel\n  nameWithType: Trace.IndentLevel\n  fullName: System.Diagnostics.Trace.IndentLevel\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Gets or sets the indent level.\n  remarks: The IndentLevel property represents the number of times the indent of size <xref:System.Diagnostics.Trace.IndentSize%2A> is applied. This property is stored on per-thread/per-request basis.\n  example:\n  - \"The following example increments and decrements the indent level and emits tracing messages.  \\n  \\n [!code-cpp[Classic Trace.IndentLevel Example#1](~/add/codesnippet/cpp/p-system.diagnostics.tra_10_1.cpp)]\\n [!code-cs[Classic Trace.IndentLevel Example#1](~/add/codesnippet/csharp/p-system.diagnostics.tra_10_1.cs)]\\n [!code-vb[Classic Trace.IndentLevel Example#1](~/add/codesnippet/visualbasic/p-system.diagnostics.tra_10_1.vb)]  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\nList of errors:  \\n     Error 1: File not found  \\n     Error 2: Directory not found  \\nEnd of list of errors  \\n  \\n```\"\n  syntax:\n    content: public static int IndentLevel { get; set; }\n    return:\n      type: System.Int32\n      description: The indent level. The default is zero.\n  overload: System.Diagnostics.Trace.IndentLevel*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Trace.IndentSize\n  id: IndentSize\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  name: IndentSize\n  nameWithType: Trace.IndentSize\n  fullName: System.Diagnostics.Trace.IndentSize\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Gets or sets the number of spaces in an indent.\n  remarks: \"A <xref:System.Diagnostics.TextWriterTraceListener> interprets this number as spaces. An <xref:System.Diagnostics.EventLogTraceListener> ignores this value.  \\n  \\n This property is stored on per-thread/per-request basis.  \\n  \\n To set the <xref:System.Diagnostics.Trace.AutoFlush%2A> and IndentSize for <xref:System.Diagnostics.Trace>, you can also edit the configuration file that corresponds to the name of your application. The configuration file should be formatted like the following example:  \\n  \\n```  \\n<configuration>  \\n  <system.diagnostics>  \\n    <trace autoflush=\\\"false\\\" indentsize=\\\"3\\\" />  \\n  </system.diagnostics>  \\n</configuration>  \\n```\"\n  syntax:\n    content: public static int IndentSize { get; set; }\n    return:\n      type: System.Int32\n      description: The number of spaces in an indent. The default is four.\n  overload: System.Diagnostics.Trace.IndentSize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Trace.Listeners\n  id: Listeners\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  name: Listeners\n  nameWithType: Trace.Listeners\n  fullName: System.Diagnostics.Trace.Listeners\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Gets the collection of listeners that is monitoring the trace output.\n  remarks: \"The listeners produce formatted output from the trace output. By default, the collection contains an instance of the <xref:System.Diagnostics.DefaultTraceListener> class. If you want to remove the default listener, call the <xref:System.Diagnostics.TraceListenerCollection.Remove%2A> method, and pass it the instance of the <xref:System.Diagnostics.DefaultTraceListener>. To redirect output to the console window, add an instance of the <xref:System.Diagnostics.ConsoleTraceListener> class.  \\n  \\n> [!NOTE]\\n>  The Listeners collection is shared by both the <xref:System.Diagnostics.Debug> and the <xref:System.Diagnostics.Trace> classes; adding a trace listener to either class adds the listener to both.\"\n  example:\n  - \"The following example creates a <xref:System.Diagnostics.ConsoleTraceListener> that outputs to the console screen. The code then adds the new listener to the Listeners.  \\n  \\n [!code-cs[Classic Trace.Listeners Example#1](~/add/codesnippet/csharp/p-system.diagnostics.tra_2_1.cs)]\\n [!code-vb[Classic Trace.Listeners Example#1](~/add/codesnippet/visualbasic/p-system.diagnostics.tra_2_1.vb)]\\n [!code-cpp[Classic Trace.Listeners Example#1](~/add/codesnippet/cpp/p-system.diagnostics.tra_2_1.cpp)]\"\n  syntax:\n    content: public static System.Diagnostics.TraceListenerCollection Listeners { get; }\n    return:\n      type: System.Diagnostics.TraceListenerCollection\n      description: A <xref href=\"System.Diagnostics.TraceListenerCollection\"></xref> that represents a collection of type <xref href=\"System.Diagnostics.TraceListener\"></xref> monitoring the trace output.\n  overload: System.Diagnostics.Trace.Listeners*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Trace.Refresh\n  id: Refresh\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  name: Refresh()\n  nameWithType: Trace.Refresh()\n  fullName: System.Diagnostics.Trace.Refresh()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Refreshes the trace configuration data.\n  remarks: Trace configuration data is captured when the application is started. If the configuration data is changed after the application is started, call the Refresh method to update the trace configuration data.\n  syntax:\n    content: public static void Refresh ();\n    parameters: []\n  overload: System.Diagnostics.Trace.Refresh*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Trace.TraceError(System.String)\n  id: TraceError(System.String)\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  name: TraceError(String)\n  nameWithType: Trace.TraceError(String)\n  fullName: System.Diagnostics.Trace.TraceError(String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Writes an error message to the trace listeners in the <xref:System.Diagnostics.Trace.Listeners*> collection using the specified message.\n  remarks: TraceError calls the `TraceEvent` method for each trace listener, with the trace event type <xref:System.Diagnostics.TraceEventType>, passing the informative message as the message string.\n  syntax:\n    content: public static void TraceError (string message);\n    parameters:\n    - id: message\n      type: System.String\n      description: The informative message to write.\n  overload: System.Diagnostics.Trace.TraceError*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Trace.TraceError(System.String,System.Object[])\n  id: TraceError(System.String,System.Object[])\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  name: TraceError(String,Object[])\n  nameWithType: Trace.TraceError(String,Object[])\n  fullName: System.Diagnostics.Trace.TraceError(String,Object[])\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Writes an error message to the trace listeners in the <xref:System.Diagnostics.Trace.Listeners*> collection using the specified array of objects and formatting information.\n  remarks: TraceError calls the `TraceEvent` methods in the trace listeners with the trace event type <xref:System.Diagnostics.TraceEventType>, passing the message content as an object array with formatting information. See the <xref:System.String.Format%2A> method for more information about the `format` and `args` parameters.\n  syntax:\n    content: public static void TraceError (string format, object[] args);\n    parameters:\n    - id: format\n      type: System.String\n      description: A format string that contains zero or more format items, which correspond to objects in the `args` array.\n    - id: args\n      type: System.Object[]\n      description: An <xref uid=\"langword_csharp_object\" name=\"object\" href=\"\"></xref> array containing zero or more objects to format.\n  overload: System.Diagnostics.Trace.TraceError*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Trace.TraceInformation(System.String)\n  id: TraceInformation(System.String)\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  name: TraceInformation(String)\n  nameWithType: Trace.TraceInformation(String)\n  fullName: System.Diagnostics.Trace.TraceInformation(String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Writes an informational message to the trace listeners in the <xref:System.Diagnostics.Trace.Listeners*> collection using the specified message.\n  remarks: TraceInformation calls the `TraceEvent` method for each trace listener, with the trace event type <xref:System.Diagnostics.TraceEventType>, passing the informative message as the message string.\n  syntax:\n    content: public static void TraceInformation (string message);\n    parameters:\n    - id: message\n      type: System.String\n      description: The informative message to write.\n  overload: System.Diagnostics.Trace.TraceInformation*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Trace.TraceInformation(System.String,System.Object[])\n  id: TraceInformation(System.String,System.Object[])\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  name: TraceInformation(String,Object[])\n  nameWithType: Trace.TraceInformation(String,Object[])\n  fullName: System.Diagnostics.Trace.TraceInformation(String,Object[])\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Writes an informational message to the trace listeners in the <xref:System.Diagnostics.Trace.Listeners*> collection using the specified array of objects and formatting information.\n  remarks: TraceInformation calls the `TraceEvent` methods in the trace listeners with the trace event type <xref:System.Diagnostics.TraceEventType>, passing the message content as an object array with formatting information. See the <xref:System.String.Format%2A> method for more information about the `format` and `args` parameters.\n  syntax:\n    content: public static void TraceInformation (string format, object[] args);\n    parameters:\n    - id: format\n      type: System.String\n      description: A format string that contains zero or more format items, which correspond to objects in the `args` array.\n    - id: args\n      type: System.Object[]\n      description: An <xref uid=\"langword_csharp_object\" name=\"object\" href=\"\"></xref> array containing zero or more objects to format.\n  overload: System.Diagnostics.Trace.TraceInformation*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Trace.TraceWarning(System.String)\n  id: TraceWarning(System.String)\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  name: TraceWarning(String)\n  nameWithType: Trace.TraceWarning(String)\n  fullName: System.Diagnostics.Trace.TraceWarning(String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Writes a warning message to the trace listeners in the <xref:System.Diagnostics.Trace.Listeners*> collection using the specified message.\n  remarks: TraceWarning calls the `TraceEvent` method for each trace listener with the trace event type <xref:System.Diagnostics.TraceEventType>, passing the informative message as the message string.\n  syntax:\n    content: public static void TraceWarning (string message);\n    parameters:\n    - id: message\n      type: System.String\n      description: The informative message to write.\n  overload: System.Diagnostics.Trace.TraceWarning*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Trace.TraceWarning(System.String,System.Object[])\n  id: TraceWarning(System.String,System.Object[])\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  name: TraceWarning(String,Object[])\n  nameWithType: Trace.TraceWarning(String,Object[])\n  fullName: System.Diagnostics.Trace.TraceWarning(String,Object[])\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Writes a warning message to the trace listeners in the <xref:System.Diagnostics.Trace.Listeners*> collection using the specified array of objects and formatting information.\n  remarks: TraceWarning calls the `TraceEvent` methods in the trace listeners with the trace event type <xref:System.Diagnostics.TraceEventType>, passing the message content as an object array with formatting information. See the <xref:System.String.Format%2A> method for more information about the `format` and `args` parameters.\n  syntax:\n    content: public static void TraceWarning (string format, object[] args);\n    parameters:\n    - id: format\n      type: System.String\n      description: A format string that contains zero or more format items, which correspond to objects in the `args` array.\n    - id: args\n      type: System.Object[]\n      description: An <xref uid=\"langword_csharp_object\" name=\"object\" href=\"\"></xref> array containing zero or more objects to format.\n  overload: System.Diagnostics.Trace.TraceWarning*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Trace.Unindent\n  id: Unindent\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  name: Unindent()\n  nameWithType: Trace.Unindent()\n  fullName: System.Diagnostics.Trace.Unindent()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Decreases the current <xref:System.Diagnostics.Trace.IndentLevel*> by one.\n  remarks: ''\n  example:\n  - \"The following example increments and decrements the indent level and emits tracing messages.  \\n  \\n [!code-cpp[Classic Trace.IndentLevel Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_14_1.cpp)]\\n [!code-cs[Classic Trace.IndentLevel Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_14_1.cs)]\\n [!code-vb[Classic Trace.IndentLevel Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_14_1.vb)]  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\nList of errors:  \\n     Error 1: File not found  \\n     Error 2: Directory not found  \\nEnd of list of errors  \\n  \\n```\"\n  syntax:\n    content: public static void Unindent ();\n    parameters: []\n  overload: System.Diagnostics.Trace.Unindent*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Trace.UseGlobalLock\n  id: UseGlobalLock\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  name: UseGlobalLock\n  nameWithType: Trace.UseGlobalLock\n  fullName: System.Diagnostics.Trace.UseGlobalLock\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Gets or sets a value indicating whether the global lock should be used.\n  remarks: \"The global lock is always used if the trace listener is not thread safe, regardless of the value of UseGlobalLock. The <xref:System.Diagnostics.TraceListener.IsThreadSafe%2A> property is used to determine if the listener is thread safe. The global lock is not used only if the value of UseGlobalLock is `false` and the value of <xref:System.Diagnostics.TraceListener.IsThreadSafe%2A> is `true`. The default behavior is to use the global lock.  \\n  \\n To set the UseGlobalLock for <xref:System.Diagnostics.Trace>, you can also edit the configuration file that corresponds to the name of your application. The configuration file should be formatted like the following example:  \\n  \\n```  \\n<configuration>  \\n  <system.diagnostics>  \\n    <trace useGlobalLock=\\\"false\\\" />  \\n  </system.diagnostics>  \\n</configuration>  \\n```\"\n  syntax:\n    content: public static bool UseGlobalLock { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the global lock is to be used; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.\n  overload: System.Diagnostics.Trace.UseGlobalLock*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Trace.Write(System.Object)\n  id: Write(System.Object)\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  name: Write(Object)\n  nameWithType: Trace.Write(Object)\n  fullName: System.Diagnostics.Trace.Write(Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Writes the value of the object's <xref:System.Object.ToString*> method to the trace listeners in the <xref:System.Diagnostics.Trace.Listeners*> collection.\n  remarks: \"By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.  \\n  \\n This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener.  \\n  \\n> [!NOTE]\\n>  ASP.NET supplies tracing functionality tailored for Web pages. To write trace messages in ASP.NET pages, use the <xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName> property.  \\n  \\n By default, in code associated with an ASP.NET Web page, the statement `Trace.Write(\\\"...\\\")` is a call to the <xref:System.Web.TraceContext.Write%2A> method of the <xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName> property. To use the <xref:System.Diagnostics.Trace?displayProperty=fullName> class in Web pages, you must include the namespace, for example, `System.Diagnostics.Trace.Write(\\\"...\\\")`.\"\n  example:\n  - \"The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \\n  \\n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first name of the `value` parameter to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \\n  \\n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs a message on the same line as the first message. The second message is followed by a line terminator.  \\n  \\n [!code-cpp[Classic Trace.Write1 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_26_1.cpp)]\\n [!code-vb[Classic Trace.Write1 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_26_1.vb)]\\n [!code-cs[Classic Trace.Write1 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_26_1.cs)]\"\n  syntax:\n    content: public static void Write (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: An <xref:System.Object> whose name is sent to the <xref:System.Diagnostics.Trace.Listeners*>.\n  overload: System.Diagnostics.Trace.Write*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Trace.Write(System.String)\n  id: Write(System.String)\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  name: Write(String)\n  nameWithType: Trace.Write(String)\n  fullName: System.Diagnostics.Trace.Write(String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Writes a message to the trace listeners in the <xref:System.Diagnostics.Trace.Listeners*> collection.\n  remarks: \"By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.  \\n  \\n This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener.  \\n  \\n> [!NOTE]\\n>  ASP.NET supplies tracing functionality tailored for Web pages. To write trace messages in ASP.NET pages, use the <xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName> property.  \\n  \\n By default, in code associated with an ASP.NET Web page, the statement `Trace.Write(\\\"...\\\")` is a call to the <xref:System.Web.TraceContext.Write%2A> method of the <xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName> property. To use the <xref:System.Diagnostics.Trace?displayProperty=fullName> class in Web pages, you must include the namespace, for example, `System.Diagnostics.Trace.Write(\\\"...\\\")`.\"\n  example:\n  - \"The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \\n  \\n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \\n  \\n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message. A line terminator follows the second message.  \\n  \\n [!code-cpp[Classic Trace.Write Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_12_1.cpp)]\\n [!code-cs[Classic Trace.Write Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_12_1.cs)]\\n [!code-vb[Classic Trace.Write Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_12_1.vb)]\"\n  syntax:\n    content: public static void Write (string message);\n    parameters:\n    - id: message\n      type: System.String\n      description: A message to write.\n  overload: System.Diagnostics.Trace.Write*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Trace.Write(System.Object,System.String)\n  id: Write(System.Object,System.String)\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  name: Write(Object,String)\n  nameWithType: Trace.Write(Object,String)\n  fullName: System.Diagnostics.Trace.Write(Object,String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Writes a category name and the value of the object's <xref:System.Object.ToString*> method to the trace listeners in the <xref:System.Diagnostics.Trace.Listeners*> collection.\n  remarks: \"By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.  \\n  \\n The `category` parameter can be used to group output messages.  \\n  \\n This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener.  \\n  \\n> [!NOTE]\\n>  ASP.NET supplies tracing functionality tailored for Web pages. To write trace messages in ASP.NET pages, use the <xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName> property.  \\n  \\n By default, in code associated with an ASP.NET Web page, the statement `Trace.Write(\\\"...\\\")` is a call to the <xref:System.Web.TraceContext.Write%2A> method of the <xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName> property. To use the <xref:System.Diagnostics.Trace?displayProperty=fullName> class in Web pages, you must include the namespace, for example, `System.Diagnostics.Trace.Write(\\\"...\\\")`.\"\n  example:\n  - \"The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \\n  \\n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Verbose`, the example outputs the name of the `myObject` and the `category` to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \\n  \\n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Error` or higher, the example outputs the second error message on the same line as the first message. The second message is followed by a line terminator.  \\n  \\n [!code-cpp[Classic Trace.Write3 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_16_1.cpp)]\\n [!code-cs[Classic Trace.Write3 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_16_1.cs)]\\n [!code-vb[Classic Trace.Write3 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_16_1.vb)]\"\n  syntax:\n    content: public static void Write (object value, string category);\n    parameters:\n    - id: value\n      type: System.Object\n      description: An <xref:System.Object> name is sent to the <xref:System.Diagnostics.Trace.Listeners*>.\n    - id: category\n      type: System.String\n      description: A category name used to organize the output.\n  overload: System.Diagnostics.Trace.Write*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Trace.Write(System.String,System.String)\n  id: Write(System.String,System.String)\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  name: Write(String,String)\n  nameWithType: Trace.Write(String,String)\n  fullName: System.Diagnostics.Trace.Write(String,String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Writes a category name and a message to the trace listeners in the <xref:System.Diagnostics.Trace.Listeners*> collection.\n  remarks: \"By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.  \\n  \\n The `category` parameter can be used to group output messages.  \\n  \\n This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener.  \\n  \\n> [!NOTE]\\n>  ASP.NET supplies tracing functionality tailored for Web pages. To write trace messages in ASP.NET pages, use the <xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName> property.  \\n  \\n By default, in code associated with an ASP.NET Web page, the statement `Trace.Write(\\\"...\\\")` is a call to the <xref:System.Web.TraceContext.Write%2A> method of the <xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName> property. To use the <xref:System.Diagnostics.Trace?displayProperty=fullName> class in Web pages, you must include the namespace, for example, `System.Diagnostics.Trace.Write(\\\"...\\\")`.\"\n  example:\n  - \"The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \\n  \\n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Verbose`, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \\n  \\n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Error` or higher, the example outputs the second error message on the same line as the first message. The second message is followed by a line terminator.  \\n  \\n [!code-cpp[Classic Trace.Write2 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_4_1.cpp)]\\n [!code-vb[Classic Trace.Write2 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_4_1.vb)]\\n [!code-cs[Classic Trace.Write2 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_4_1.cs)]\"\n  syntax:\n    content: public static void Write (string message, string category);\n    parameters:\n    - id: message\n      type: System.String\n      description: A message to write.\n    - id: category\n      type: System.String\n      description: A category name used to organize the output.\n  overload: System.Diagnostics.Trace.Write*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Trace.WriteIf(System.Boolean,System.Object)\n  id: WriteIf(System.Boolean,System.Object)\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  name: WriteIf(Boolean,Object)\n  nameWithType: Trace.WriteIf(Boolean,Object)\n  fullName: System.Diagnostics.Trace.WriteIf(Boolean,Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Writes the value of the object's <xref:System.Object.ToString*> method to the trace listeners in the <xref:System.Diagnostics.Trace.Listeners*> collection if a condition is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.\n  remarks: \"By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.  \\n  \\n This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener.\"\n  example:\n  - \"The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \\n  \\n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first name of the value parameter to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \\n  \\n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs a message on the same line as the first message. The second message is followed by a line terminator.  \\n  \\n [!code-cpp[Classic Trace.WriteIf1 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_2_1.cpp)]\\n [!code-vb[Classic Trace.WriteIf1 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_2_1.vb)]\\n [!code-cs[Classic Trace.WriteIf1 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_2_1.cs)]\"\n  syntax:\n    content: public static void WriteIf (bool condition, object value);\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to cause a message to be written; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n    - id: value\n      type: System.Object\n      description: An <xref:System.Object> whose name is sent to the <xref:System.Diagnostics.Trace.Listeners*>.\n  overload: System.Diagnostics.Trace.WriteIf*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Trace.WriteIf(System.Boolean,System.String)\n  id: WriteIf(System.Boolean,System.String)\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  name: WriteIf(Boolean,String)\n  nameWithType: Trace.WriteIf(Boolean,String)\n  fullName: System.Diagnostics.Trace.WriteIf(Boolean,String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Writes a message to the trace listeners in the <xref:System.Diagnostics.Trace.Listeners*> collection if a condition is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.\n  remarks: \"By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.  \\n  \\n This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener.\"\n  example:\n  - \"The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \\n  \\n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \\n  \\n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message. The second message is followed by a line terminator.  \\n  \\n [!code-cs[Classic Trace.WriteIf Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_10_1.cs)]\\n [!code-cpp[Classic Trace.WriteIf Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_10_1.cpp)]\\n [!code-vb[Classic Trace.WriteIf Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_10_1.vb)]\"\n  syntax:\n    content: public static void WriteIf (bool condition, string message);\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to cause a message to be written; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n    - id: message\n      type: System.String\n      description: A message to write.\n  overload: System.Diagnostics.Trace.WriteIf*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Trace.WriteIf(System.Boolean,System.Object,System.String)\n  id: WriteIf(System.Boolean,System.Object,System.String)\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  name: WriteIf(Boolean,Object,String)\n  nameWithType: Trace.WriteIf(Boolean,Object,String)\n  fullName: System.Diagnostics.Trace.WriteIf(Boolean,Object,String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Writes a category name and the value of the object's <xref:System.Object.ToString*> method to the trace listeners in the <xref:System.Diagnostics.Trace.Listeners*> collection if a condition is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.\n  remarks: \"By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.  \\n  \\n The `category` parameter can be used to group output messages.  \\n  \\n This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener.\"\n  example:\n  - \"The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \\n  \\n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Verbose`, the example outputs the name of the `myObject` and the `category` to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \\n  \\n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Error` or higher, the example outputs the second error message on the same line as the first message. The second message is followed by a line terminator.  \\n  \\n [!code-cs[Classic Trace.WriteIf3 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_8_1.cs)]\\n [!code-vb[Classic Trace.WriteIf3 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_8_1.vb)]\\n [!code-cpp[Classic Trace.WriteIf3 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_8_1.cpp)]\"\n  syntax:\n    content: public static void WriteIf (bool condition, object value, string category);\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to cause a message to be written; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n    - id: value\n      type: System.Object\n      description: An <xref:System.Object> whose name is sent to the <xref:System.Diagnostics.Trace.Listeners*>.\n    - id: category\n      type: System.String\n      description: A category name used to organize the output.\n  overload: System.Diagnostics.Trace.WriteIf*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Trace.WriteIf(System.Boolean,System.String,System.String)\n  id: WriteIf(System.Boolean,System.String,System.String)\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  name: WriteIf(Boolean,String,String)\n  nameWithType: Trace.WriteIf(Boolean,String,String)\n  fullName: System.Diagnostics.Trace.WriteIf(Boolean,String,String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Writes a category name and message to the trace listeners in the <xref:System.Diagnostics.Trace.Listeners*> collection if a condition is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.\n  remarks: \"By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.  \\n  \\n The `category` parameter can be used to group output messages.  \\n  \\n This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener.\"\n  example:\n  - \"The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \\n  \\n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Verbose`, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \\n  \\n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Error` or higher, the example outputs the second error message on the same line as the first message. The second message is followed by a line terminator.  \\n  \\n [!code-cs[Classic Trace.WriteIf2 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_7_1.cs)]\\n [!code-cpp[Classic Trace.WriteIf2 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_7_1.cpp)]\\n [!code-vb[Classic Trace.WriteIf2 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_7_1.vb)]\"\n  syntax:\n    content: public static void WriteIf (bool condition, string message, string category);\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to cause a message to be written; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n    - id: message\n      type: System.String\n      description: A message to write.\n    - id: category\n      type: System.String\n      description: A category name used to organize the output.\n  overload: System.Diagnostics.Trace.WriteIf*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Trace.WriteLine(System.Object)\n  id: WriteLine(System.Object)\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  name: WriteLine(Object)\n  nameWithType: Trace.WriteLine(Object)\n  fullName: System.Diagnostics.Trace.WriteLine(Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Writes the value of the object's <xref:System.Object.ToString*> method to the trace listeners in the <xref:System.Diagnostics.Trace.Listeners*> collection.\n  remarks: \"By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.  \\n  \\n This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener.\"\n  example:\n  - \"The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \\n  \\n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \\n  \\n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the name of the object on the same line as the first message. The second message is followed by a line terminator.  \\n  \\n [!code-cpp[Classic Trace.WriteLine1 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_18_1.cpp)]\\n [!code-cs[Classic Trace.WriteLine1 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_18_1.cs)]\\n [!code-vb[Classic Trace.WriteLine1 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_18_1.vb)]\"\n  syntax:\n    content: public static void WriteLine (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: An <xref:System.Object> whose name is sent to the <xref:System.Diagnostics.Trace.Listeners*>.\n  overload: System.Diagnostics.Trace.WriteLine*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Trace.WriteLine(System.String)\n  id: WriteLine(System.String)\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  name: WriteLine(String)\n  nameWithType: Trace.WriteLine(String)\n  fullName: System.Diagnostics.Trace.WriteLine(String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Writes a message to the trace listeners in the <xref:System.Diagnostics.Trace.Listeners*> collection.\n  remarks: \"By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.  \\n  \\n This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener.\"\n  example:\n  - \"The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \\n  \\n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \\n  \\n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message. The second message is followed by a line terminator.  \\n  \\n [!code-cpp[Classic Trace.Write Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_3_1.cpp)]\\n [!code-cs[Classic Trace.Write Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_3_1.cs)]\\n [!code-vb[Classic Trace.Write Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_3_1.vb)]\"\n  syntax:\n    content: public static void WriteLine (string message);\n    parameters:\n    - id: message\n      type: System.String\n      description: A message to write.\n  overload: System.Diagnostics.Trace.WriteLine*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Trace.WriteLine(System.Object,System.String)\n  id: WriteLine(System.Object,System.String)\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  name: WriteLine(Object,String)\n  nameWithType: Trace.WriteLine(Object,String)\n  fullName: System.Diagnostics.Trace.WriteLine(Object,String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Writes a category name and the value of the object's <xref:System.Object.ToString*> method to the trace listeners in the <xref:System.Diagnostics.Trace.Listeners*> collection.\n  remarks: \"By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.  \\n  \\n The `category` parameter can be used to group output messages.  \\n  \\n This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener.\"\n  example:\n  - \"The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \\n  \\n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \\n  \\n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message. The second message is followed by a line terminator.  \\n  \\n [!code-cpp[Classic Trace.WriteLine3 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_19_1.cpp)]\\n [!code-vb[Classic Trace.WriteLine3 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_19_1.vb)]\\n [!code-cs[Classic Trace.WriteLine3 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_19_1.cs)]\"\n  syntax:\n    content: public static void WriteLine (object value, string category);\n    parameters:\n    - id: value\n      type: System.Object\n      description: An <xref:System.Object> whose name is sent to the <xref:System.Diagnostics.Trace.Listeners*>.\n    - id: category\n      type: System.String\n      description: A category name used to organize the output.\n  overload: System.Diagnostics.Trace.WriteLine*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Trace.WriteLine(System.String,System.String)\n  id: WriteLine(System.String,System.String)\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  name: WriteLine(String,String)\n  nameWithType: Trace.WriteLine(String,String)\n  fullName: System.Diagnostics.Trace.WriteLine(String,String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Writes a category name and message to the trace listeners in the <xref:System.Diagnostics.Trace.Listeners*> collection.\n  remarks: \"By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.  \\n  \\n The `category` parameter can be used to group output messages.  \\n  \\n This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener.\"\n  example:\n  - \"The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \\n  \\n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \\n  \\n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message and the `category` on the same line as the first message. The second message is followed by a line terminator.  \\n  \\n [!code-cpp[Classic Trace.WriteLine2 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_25_1.cpp)]\\n [!code-vb[Classic Trace.WriteLine2 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_25_1.vb)]\\n [!code-cs[Classic Trace.WriteLine2 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_25_1.cs)]\"\n  syntax:\n    content: public static void WriteLine (string message, string category);\n    parameters:\n    - id: message\n      type: System.String\n      description: A message to write.\n    - id: category\n      type: System.String\n      description: A category name used to organize the output.\n  overload: System.Diagnostics.Trace.WriteLine*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.Object)\n  id: WriteLineIf(System.Boolean,System.Object)\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  name: WriteLineIf(Boolean,Object)\n  nameWithType: Trace.WriteLineIf(Boolean,Object)\n  fullName: System.Diagnostics.Trace.WriteLineIf(Boolean,Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Writes the value of the object's <xref:System.Object.ToString*> method to the trace listeners in the <xref:System.Diagnostics.Trace.Listeners*> collection if a condition is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.\n  remarks: \"By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.  \\n  \\n This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener.\"\n  example:\n  - \"The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \\n  \\n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \\n  \\n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the name of the object on the same line as the first message. The second message is followed by a line terminator.  \\n  \\n [!code-cpp[Classic Trace.WriteLineIf1 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_5_1.cpp)]\\n [!code-vb[Classic Trace.WriteLineIf1 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_5_1.vb)]\\n [!code-cs[Classic Trace.WriteLineIf1 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_5_1.cs)]\"\n  syntax:\n    content: public static void WriteLineIf (bool condition, object value);\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to cause a message to be written; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n    - id: value\n      type: System.Object\n      description: An <xref:System.Object> whose name is sent to the <xref:System.Diagnostics.Trace.Listeners*>.\n  overload: System.Diagnostics.Trace.WriteLineIf*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String)\n  id: WriteLineIf(System.Boolean,System.String)\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  name: WriteLineIf(Boolean,String)\n  nameWithType: Trace.WriteLineIf(Boolean,String)\n  fullName: System.Diagnostics.Trace.WriteLineIf(Boolean,String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Writes a message to the trace listeners in the <xref:System.Diagnostics.Trace.Listeners*> collection if a condition is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.\n  remarks: \"By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.  \\n  \\n This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener.\"\n  example:\n  - \"The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \\n  \\n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \\n  \\n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message. The second message is followed by a line terminator.  \\n  \\n [!code-cs[Classic Trace.WriteIf Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_11_1.cs)]\\n [!code-cpp[Classic Trace.WriteIf Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_11_1.cpp)]\\n [!code-vb[Classic Trace.WriteIf Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_11_1.vb)]\"\n  syntax:\n    content: public static void WriteLineIf (bool condition, string message);\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to cause a message to be written; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n    - id: message\n      type: System.String\n      description: A message to write.\n  overload: System.Diagnostics.Trace.WriteLineIf*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.Object,System.String)\n  id: WriteLineIf(System.Boolean,System.Object,System.String)\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  name: WriteLineIf(Boolean,Object,String)\n  nameWithType: Trace.WriteLineIf(Boolean,Object,String)\n  fullName: System.Diagnostics.Trace.WriteLineIf(Boolean,Object,String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Writes a category name and the value of the object's <xref:System.Object.ToString*> method to the trace listeners in the <xref:System.Diagnostics.Trace.Listeners*> collection if a condition is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.\n  remarks: \"By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.  \\n  \\n The `category` parameter can be used to group output messages.  \\n  \\n This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener.\"\n  example:\n  - \"The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \\n  \\n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \\n  \\n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message. The second message is followed by a line terminator.  \\n  \\n [!code-cs[Classic Trace.WriteLineIf3 Example#1](~/add/codesnippet/csharp/96a954ed-2f0b-4ec7-91f9-_1.cs)]\\n [!code-vb[Classic Trace.WriteLineIf3 Example#1](~/add/codesnippet/visualbasic/96a954ed-2f0b-4ec7-91f9-_1.vb)]\\n [!code-cpp[Classic Trace.WriteLineIf3 Example#1](~/add/codesnippet/cpp/96a954ed-2f0b-4ec7-91f9-_1.cpp)]\"\n  syntax:\n    content: public static void WriteLineIf (bool condition, object value, string category);\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to cause a message to be written; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n    - id: value\n      type: System.Object\n      description: An <xref:System.Object> whose name is sent to the <xref:System.Diagnostics.Trace.Listeners*>.\n    - id: category\n      type: System.String\n      description: A category name used to organize the output.\n  overload: System.Diagnostics.Trace.WriteLineIf*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String,System.String)\n  id: WriteLineIf(System.Boolean,System.String,System.String)\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  name: WriteLineIf(Boolean,String,String)\n  nameWithType: Trace.WriteLineIf(Boolean,String,String)\n  fullName: System.Diagnostics.Trace.WriteLineIf(Boolean,String,String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Writes a category name and message to the trace listeners in the <xref:System.Diagnostics.Trace.Listeners*> collection if a condition is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.\n  remarks: \"By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.  \\n  \\n The `category` parameter can be used to group output messages.  \\n  \\n This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener.\"\n  example:\n  - \"The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \\n  \\n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \\n  \\n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message and the `category` on the same line as the first message. The second message is followed by a line terminator.  \\n  \\n [!code-vb[Classic Trace.WriteLineIf2 Example#1](~/add/codesnippet/visualbasic/7f54460b-5f74-4be1-a3dd-_1.vb)]\\n [!code-cs[Classic Trace.WriteLineIf2 Example#1](~/add/codesnippet/csharp/7f54460b-5f74-4be1-a3dd-_1.cs)]\\n [!code-cpp[Classic Trace.WriteLineIf2 Example#1](~/add/codesnippet/cpp/7f54460b-5f74-4be1-a3dd-_1.cpp)]\"\n  syntax:\n    content: public static void WriteLineIf (bool condition, string message, string category);\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to cause a message to be written; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n    - id: message\n      type: System.String\n      description: A message to write.\n    - id: category\n      type: System.String\n      description: A category name used to organize the output.\n  overload: System.Diagnostics.Trace.WriteLineIf*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Diagnostics.Trace.Assert(System.Boolean)\n  parent: System.Diagnostics.Trace\n  isExternal: false\n  name: Assert(Boolean)\n  nameWithType: Trace.Assert(Boolean)\n  fullName: System.Diagnostics.Trace.Assert(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Diagnostics.Trace.Assert(System.Boolean,System.String)\n  parent: System.Diagnostics.Trace\n  isExternal: false\n  name: Assert(Boolean,String)\n  nameWithType: Trace.Assert(Boolean,String)\n  fullName: System.Diagnostics.Trace.Assert(Boolean,String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Diagnostics.Trace.Assert(System.Boolean,System.String,System.String)\n  parent: System.Diagnostics.Trace\n  isExternal: false\n  name: Assert(Boolean,String,String)\n  nameWithType: Trace.Assert(Boolean,String,String)\n  fullName: System.Diagnostics.Trace.Assert(Boolean,String,String)\n- uid: System.Diagnostics.Trace.AutoFlush\n  parent: System.Diagnostics.Trace\n  isExternal: false\n  name: AutoFlush\n  nameWithType: Trace.AutoFlush\n  fullName: System.Diagnostics.Trace.AutoFlush\n- uid: System.Diagnostics.Trace.Close\n  parent: System.Diagnostics.Trace\n  isExternal: false\n  name: Close()\n  nameWithType: Trace.Close()\n  fullName: System.Diagnostics.Trace.Close()\n- uid: System.Diagnostics.Trace.CorrelationManager\n  parent: System.Diagnostics.Trace\n  isExternal: false\n  name: CorrelationManager\n  nameWithType: Trace.CorrelationManager\n  fullName: System.Diagnostics.Trace.CorrelationManager\n- uid: System.Diagnostics.CorrelationManager\n  parent: System.Diagnostics\n  isExternal: false\n  name: CorrelationManager\n  nameWithType: CorrelationManager\n  fullName: System.Diagnostics.CorrelationManager\n- uid: System.Diagnostics.Trace.Fail(System.String)\n  parent: System.Diagnostics.Trace\n  isExternal: false\n  name: Fail(String)\n  nameWithType: Trace.Fail(String)\n  fullName: System.Diagnostics.Trace.Fail(String)\n- uid: System.Diagnostics.Trace.Fail(System.String,System.String)\n  parent: System.Diagnostics.Trace\n  isExternal: false\n  name: Fail(String,String)\n  nameWithType: Trace.Fail(String,String)\n  fullName: System.Diagnostics.Trace.Fail(String,String)\n- uid: System.Diagnostics.Trace.Flush\n  parent: System.Diagnostics.Trace\n  isExternal: false\n  name: Flush()\n  nameWithType: Trace.Flush()\n  fullName: System.Diagnostics.Trace.Flush()\n- uid: System.Diagnostics.Trace.Indent\n  parent: System.Diagnostics.Trace\n  isExternal: false\n  name: Indent()\n  nameWithType: Trace.Indent()\n  fullName: System.Diagnostics.Trace.Indent()\n- uid: System.Diagnostics.Trace.IndentLevel\n  parent: System.Diagnostics.Trace\n  isExternal: false\n  name: IndentLevel\n  nameWithType: Trace.IndentLevel\n  fullName: System.Diagnostics.Trace.IndentLevel\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Diagnostics.Trace.IndentSize\n  parent: System.Diagnostics.Trace\n  isExternal: false\n  name: IndentSize\n  nameWithType: Trace.IndentSize\n  fullName: System.Diagnostics.Trace.IndentSize\n- uid: System.Diagnostics.Trace.Listeners\n  parent: System.Diagnostics.Trace\n  isExternal: false\n  name: Listeners\n  nameWithType: Trace.Listeners\n  fullName: System.Diagnostics.Trace.Listeners\n- uid: System.Diagnostics.TraceListenerCollection\n  parent: System.Diagnostics\n  isExternal: false\n  name: TraceListenerCollection\n  nameWithType: TraceListenerCollection\n  fullName: System.Diagnostics.TraceListenerCollection\n- uid: System.Diagnostics.Trace.Refresh\n  parent: System.Diagnostics.Trace\n  isExternal: false\n  name: Refresh()\n  nameWithType: Trace.Refresh()\n  fullName: System.Diagnostics.Trace.Refresh()\n- uid: System.Diagnostics.Trace.TraceError(System.String)\n  parent: System.Diagnostics.Trace\n  isExternal: false\n  name: TraceError(String)\n  nameWithType: Trace.TraceError(String)\n  fullName: System.Diagnostics.Trace.TraceError(String)\n- uid: System.Diagnostics.Trace.TraceError(System.String,System.Object[])\n  parent: System.Diagnostics.Trace\n  isExternal: false\n  name: TraceError(String,Object[])\n  nameWithType: Trace.TraceError(String,Object[])\n  fullName: System.Diagnostics.Trace.TraceError(String,Object[])\n- uid: System.Object[]\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object[]\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: Object[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Diagnostics.Trace.TraceInformation(System.String)\n  parent: System.Diagnostics.Trace\n  isExternal: false\n  name: TraceInformation(String)\n  nameWithType: Trace.TraceInformation(String)\n  fullName: System.Diagnostics.Trace.TraceInformation(String)\n- uid: System.Diagnostics.Trace.TraceInformation(System.String,System.Object[])\n  parent: System.Diagnostics.Trace\n  isExternal: false\n  name: TraceInformation(String,Object[])\n  nameWithType: Trace.TraceInformation(String,Object[])\n  fullName: System.Diagnostics.Trace.TraceInformation(String,Object[])\n- uid: System.Diagnostics.Trace.TraceWarning(System.String)\n  parent: System.Diagnostics.Trace\n  isExternal: false\n  name: TraceWarning(String)\n  nameWithType: Trace.TraceWarning(String)\n  fullName: System.Diagnostics.Trace.TraceWarning(String)\n- uid: System.Diagnostics.Trace.TraceWarning(System.String,System.Object[])\n  parent: System.Diagnostics.Trace\n  isExternal: false\n  name: TraceWarning(String,Object[])\n  nameWithType: Trace.TraceWarning(String,Object[])\n  fullName: System.Diagnostics.Trace.TraceWarning(String,Object[])\n- uid: System.Diagnostics.Trace.Unindent\n  parent: System.Diagnostics.Trace\n  isExternal: false\n  name: Unindent()\n  nameWithType: Trace.Unindent()\n  fullName: System.Diagnostics.Trace.Unindent()\n- uid: System.Diagnostics.Trace.UseGlobalLock\n  parent: System.Diagnostics.Trace\n  isExternal: false\n  name: UseGlobalLock\n  nameWithType: Trace.UseGlobalLock\n  fullName: System.Diagnostics.Trace.UseGlobalLock\n- uid: System.Diagnostics.Trace.Write(System.Object)\n  parent: System.Diagnostics.Trace\n  isExternal: false\n  name: Write(Object)\n  nameWithType: Trace.Write(Object)\n  fullName: System.Diagnostics.Trace.Write(Object)\n- uid: System.Diagnostics.Trace.Write(System.String)\n  parent: System.Diagnostics.Trace\n  isExternal: false\n  name: Write(String)\n  nameWithType: Trace.Write(String)\n  fullName: System.Diagnostics.Trace.Write(String)\n- uid: System.Diagnostics.Trace.Write(System.Object,System.String)\n  parent: System.Diagnostics.Trace\n  isExternal: false\n  name: Write(Object,String)\n  nameWithType: Trace.Write(Object,String)\n  fullName: System.Diagnostics.Trace.Write(Object,String)\n- uid: System.Diagnostics.Trace.Write(System.String,System.String)\n  parent: System.Diagnostics.Trace\n  isExternal: false\n  name: Write(String,String)\n  nameWithType: Trace.Write(String,String)\n  fullName: System.Diagnostics.Trace.Write(String,String)\n- uid: System.Diagnostics.Trace.WriteIf(System.Boolean,System.Object)\n  parent: System.Diagnostics.Trace\n  isExternal: false\n  name: WriteIf(Boolean,Object)\n  nameWithType: Trace.WriteIf(Boolean,Object)\n  fullName: System.Diagnostics.Trace.WriteIf(Boolean,Object)\n- uid: System.Diagnostics.Trace.WriteIf(System.Boolean,System.String)\n  parent: System.Diagnostics.Trace\n  isExternal: false\n  name: WriteIf(Boolean,String)\n  nameWithType: Trace.WriteIf(Boolean,String)\n  fullName: System.Diagnostics.Trace.WriteIf(Boolean,String)\n- uid: System.Diagnostics.Trace.WriteIf(System.Boolean,System.Object,System.String)\n  parent: System.Diagnostics.Trace\n  isExternal: false\n  name: WriteIf(Boolean,Object,String)\n  nameWithType: Trace.WriteIf(Boolean,Object,String)\n  fullName: System.Diagnostics.Trace.WriteIf(Boolean,Object,String)\n- uid: System.Diagnostics.Trace.WriteIf(System.Boolean,System.String,System.String)\n  parent: System.Diagnostics.Trace\n  isExternal: false\n  name: WriteIf(Boolean,String,String)\n  nameWithType: Trace.WriteIf(Boolean,String,String)\n  fullName: System.Diagnostics.Trace.WriteIf(Boolean,String,String)\n- uid: System.Diagnostics.Trace.WriteLine(System.Object)\n  parent: System.Diagnostics.Trace\n  isExternal: false\n  name: WriteLine(Object)\n  nameWithType: Trace.WriteLine(Object)\n  fullName: System.Diagnostics.Trace.WriteLine(Object)\n- uid: System.Diagnostics.Trace.WriteLine(System.String)\n  parent: System.Diagnostics.Trace\n  isExternal: false\n  name: WriteLine(String)\n  nameWithType: Trace.WriteLine(String)\n  fullName: System.Diagnostics.Trace.WriteLine(String)\n- uid: System.Diagnostics.Trace.WriteLine(System.Object,System.String)\n  parent: System.Diagnostics.Trace\n  isExternal: false\n  name: WriteLine(Object,String)\n  nameWithType: Trace.WriteLine(Object,String)\n  fullName: System.Diagnostics.Trace.WriteLine(Object,String)\n- uid: System.Diagnostics.Trace.WriteLine(System.String,System.String)\n  parent: System.Diagnostics.Trace\n  isExternal: false\n  name: WriteLine(String,String)\n  nameWithType: Trace.WriteLine(String,String)\n  fullName: System.Diagnostics.Trace.WriteLine(String,String)\n- uid: System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.Object)\n  parent: System.Diagnostics.Trace\n  isExternal: false\n  name: WriteLineIf(Boolean,Object)\n  nameWithType: Trace.WriteLineIf(Boolean,Object)\n  fullName: System.Diagnostics.Trace.WriteLineIf(Boolean,Object)\n- uid: System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String)\n  parent: System.Diagnostics.Trace\n  isExternal: false\n  name: WriteLineIf(Boolean,String)\n  nameWithType: Trace.WriteLineIf(Boolean,String)\n  fullName: System.Diagnostics.Trace.WriteLineIf(Boolean,String)\n- uid: System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.Object,System.String)\n  parent: System.Diagnostics.Trace\n  isExternal: false\n  name: WriteLineIf(Boolean,Object,String)\n  nameWithType: Trace.WriteLineIf(Boolean,Object,String)\n  fullName: System.Diagnostics.Trace.WriteLineIf(Boolean,Object,String)\n- uid: System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String,System.String)\n  parent: System.Diagnostics.Trace\n  isExternal: false\n  name: WriteLineIf(Boolean,String,String)\n  nameWithType: Trace.WriteLineIf(Boolean,String,String)\n  fullName: System.Diagnostics.Trace.WriteLineIf(Boolean,String,String)\n- uid: System.Diagnostics.Trace.Assert*\n  parent: System.Diagnostics.Trace\n  isExternal: false\n  name: Assert\n  nameWithType: Trace.Assert\n- uid: System.Diagnostics.Trace.AutoFlush*\n  parent: System.Diagnostics.Trace\n  isExternal: false\n  name: AutoFlush\n  nameWithType: Trace.AutoFlush\n- uid: System.Diagnostics.Trace.Close*\n  parent: System.Diagnostics.Trace\n  isExternal: false\n  name: Close\n  nameWithType: Trace.Close\n- uid: System.Diagnostics.Trace.CorrelationManager*\n  parent: System.Diagnostics.Trace\n  isExternal: false\n  name: CorrelationManager\n  nameWithType: Trace.CorrelationManager\n- uid: System.Diagnostics.Trace.Fail*\n  parent: System.Diagnostics.Trace\n  isExternal: false\n  name: Fail\n  nameWithType: Trace.Fail\n- uid: System.Diagnostics.Trace.Flush*\n  parent: System.Diagnostics.Trace\n  isExternal: false\n  name: Flush\n  nameWithType: Trace.Flush\n- uid: System.Diagnostics.Trace.Indent*\n  parent: System.Diagnostics.Trace\n  isExternal: false\n  name: Indent\n  nameWithType: Trace.Indent\n- uid: System.Diagnostics.Trace.IndentLevel*\n  parent: System.Diagnostics.Trace\n  isExternal: false\n  name: IndentLevel\n  nameWithType: Trace.IndentLevel\n- uid: System.Diagnostics.Trace.IndentSize*\n  parent: System.Diagnostics.Trace\n  isExternal: false\n  name: IndentSize\n  nameWithType: Trace.IndentSize\n- uid: System.Diagnostics.Trace.Listeners*\n  parent: System.Diagnostics.Trace\n  isExternal: false\n  name: Listeners\n  nameWithType: Trace.Listeners\n- uid: System.Diagnostics.Trace.Refresh*\n  parent: System.Diagnostics.Trace\n  isExternal: false\n  name: Refresh\n  nameWithType: Trace.Refresh\n- uid: System.Diagnostics.Trace.TraceError*\n  parent: System.Diagnostics.Trace\n  isExternal: false\n  name: TraceError\n  nameWithType: Trace.TraceError\n- uid: System.Diagnostics.Trace.TraceInformation*\n  parent: System.Diagnostics.Trace\n  isExternal: false\n  name: TraceInformation\n  nameWithType: Trace.TraceInformation\n- uid: System.Diagnostics.Trace.TraceWarning*\n  parent: System.Diagnostics.Trace\n  isExternal: false\n  name: TraceWarning\n  nameWithType: Trace.TraceWarning\n- uid: System.Diagnostics.Trace.Unindent*\n  parent: System.Diagnostics.Trace\n  isExternal: false\n  name: Unindent\n  nameWithType: Trace.Unindent\n- uid: System.Diagnostics.Trace.UseGlobalLock*\n  parent: System.Diagnostics.Trace\n  isExternal: false\n  name: UseGlobalLock\n  nameWithType: Trace.UseGlobalLock\n- uid: System.Diagnostics.Trace.Write*\n  parent: System.Diagnostics.Trace\n  isExternal: false\n  name: Write\n  nameWithType: Trace.Write\n- uid: System.Diagnostics.Trace.WriteIf*\n  parent: System.Diagnostics.Trace\n  isExternal: false\n  name: WriteIf\n  nameWithType: Trace.WriteIf\n- uid: System.Diagnostics.Trace.WriteLine*\n  parent: System.Diagnostics.Trace\n  isExternal: false\n  name: WriteLine\n  nameWithType: Trace.WriteLine\n- uid: System.Diagnostics.Trace.WriteLineIf*\n  parent: System.Diagnostics.Trace\n  isExternal: false\n  name: WriteLineIf\n  nameWithType: Trace.WriteLineIf\n"}