{"nodes":[{"pos":[2933,2945],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[3702,3714],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[4400,4412],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[5015,5027],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[5688,5700],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[6553,6565],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[7125,7137],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[7966,7978],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[8042,8054],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[8120,8132],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[8191,8203],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[8849,8861],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[9963,9975],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[10640,10652],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[10730,10742],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[11664,11676],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[11735,11747],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[12339,12351],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[13126,13138],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[13845,13857],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.WeakEventManager.ListenerList\n  id: WeakEventManager.ListenerList\n  children:\n  - System.Windows.WeakEventManager.ListenerList.#ctor\n  - System.Windows.WeakEventManager.ListenerList.#ctor(System.Int32)\n  - System.Windows.WeakEventManager.ListenerList.Add(System.Windows.IWeakEventListener)\n  - System.Windows.WeakEventManager.ListenerList.AddHandler(System.Delegate)\n  - System.Windows.WeakEventManager.ListenerList.BeginUse\n  - System.Windows.WeakEventManager.ListenerList.Clone\n  - System.Windows.WeakEventManager.ListenerList.CopyTo(System.Windows.WeakEventManager.ListenerList)\n  - System.Windows.WeakEventManager.ListenerList.Count\n  - System.Windows.WeakEventManager.ListenerList.DeliverEvent(System.Object,System.EventArgs,System.Type)\n  - System.Windows.WeakEventManager.ListenerList.Empty\n  - System.Windows.WeakEventManager.ListenerList.EndUse\n  - System.Windows.WeakEventManager.ListenerList.IsEmpty\n  - System.Windows.WeakEventManager.ListenerList.Item(System.Int32)\n  - System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)\n  - System.Windows.WeakEventManager.ListenerList.Purge\n  - System.Windows.WeakEventManager.ListenerList.Remove(System.Windows.IWeakEventListener)\n  - System.Windows.WeakEventManager.ListenerList.RemoveHandler(System.Delegate)\n  langs:\n  - csharp\n  name: WeakEventManager+ListenerList\n  nameWithType: WeakEventManager+ListenerList\n  fullName: System.Windows.WeakEventManager+ListenerList\n  type: Class\n  syntax:\n    content: protected class WeakEventManager.ListenerList\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Windows.WeakEventManager.ListenerList.#ctor\n  id: '#ctor'\n  parent: System.Windows.WeakEventManager.ListenerList\n  langs:\n  - csharp\n  name: WeakEventManager+ListenerList()\n  nameWithType: WeakEventManager+ListenerList.WeakEventManager+ListenerList()\n  fullName: System.Windows.WeakEventManager+ListenerList.WeakEventManager+ListenerList()\n  type: Constructor\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  syntax:\n    content: public ListenerList ();\n    parameters: []\n  overload: System.Windows.WeakEventManager.ListenerList.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.WeakEventManager.ListenerList.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Windows.WeakEventManager.ListenerList\n  langs:\n  - csharp\n  name: WeakEventManager+ListenerList(Int32)\n  nameWithType: WeakEventManager+ListenerList.WeakEventManager+ListenerList(Int32)\n  fullName: System.Windows.WeakEventManager+ListenerList.WeakEventManager+ListenerList(Int32)\n  type: Constructor\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  syntax:\n    content: public ListenerList (int capacity);\n    parameters:\n    - id: capacity\n      type: System.Int32\n      description: To be added.\n  overload: System.Windows.WeakEventManager.ListenerList.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.WeakEventManager.ListenerList.Add(System.Windows.IWeakEventListener)\n  id: Add(System.Windows.IWeakEventListener)\n  parent: System.Windows.WeakEventManager.ListenerList\n  langs:\n  - csharp\n  name: Add(IWeakEventListener)\n  nameWithType: WeakEventManager+ListenerList.Add(IWeakEventListener)\n  fullName: System.Windows.WeakEventManager+ListenerList.Add(IWeakEventListener)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  syntax:\n    content: public void Add (System.Windows.IWeakEventListener listener);\n    parameters:\n    - id: listener\n      type: System.Windows.IWeakEventListener\n      description: To be added.\n  overload: System.Windows.WeakEventManager.ListenerList.Add*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.WeakEventManager.ListenerList.AddHandler(System.Delegate)\n  id: AddHandler(System.Delegate)\n  parent: System.Windows.WeakEventManager.ListenerList\n  langs:\n  - csharp\n  name: AddHandler(Delegate)\n  nameWithType: WeakEventManager+ListenerList.AddHandler(Delegate)\n  fullName: System.Windows.WeakEventManager+ListenerList.AddHandler(Delegate)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  syntax:\n    content: public void AddHandler (Delegate handler);\n    parameters:\n    - id: handler\n      type: System.Delegate\n      description: To be added.\n  overload: System.Windows.WeakEventManager.ListenerList.AddHandler*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.WeakEventManager.ListenerList.BeginUse\n  id: BeginUse\n  parent: System.Windows.WeakEventManager.ListenerList\n  langs:\n  - csharp\n  name: BeginUse()\n  nameWithType: WeakEventManager+ListenerList.BeginUse()\n  fullName: System.Windows.WeakEventManager+ListenerList.BeginUse()\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  syntax:\n    content: public bool BeginUse ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Windows.WeakEventManager.ListenerList.BeginUse*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.WeakEventManager.ListenerList.Clone\n  id: Clone\n  parent: System.Windows.WeakEventManager.ListenerList\n  langs:\n  - csharp\n  name: Clone()\n  nameWithType: WeakEventManager+ListenerList.Clone()\n  fullName: System.Windows.WeakEventManager+ListenerList.Clone()\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  syntax:\n    content: public virtual System.Windows.WeakEventManager.ListenerList Clone ();\n    parameters: []\n    return:\n      type: System.Windows.WeakEventManager.ListenerList\n      description: To be added.\n  overload: System.Windows.WeakEventManager.ListenerList.Clone*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.WeakEventManager.ListenerList.CopyTo(System.Windows.WeakEventManager.ListenerList)\n  id: CopyTo(System.Windows.WeakEventManager.ListenerList)\n  parent: System.Windows.WeakEventManager.ListenerList\n  langs:\n  - csharp\n  name: CopyTo(WeakEventManager+ListenerList)\n  nameWithType: WeakEventManager+ListenerList.CopyTo(WeakEventManager+ListenerList)\n  fullName: System.Windows.WeakEventManager+ListenerList.CopyTo(WeakEventManager+ListenerList)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  syntax:\n    content: protected void CopyTo (System.Windows.WeakEventManager.ListenerList newList);\n    parameters:\n    - id: newList\n      type: System.Windows.WeakEventManager.ListenerList\n      description: To be added.\n  overload: System.Windows.WeakEventManager.ListenerList.CopyTo*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.WeakEventManager.ListenerList.Count\n  id: Count\n  parent: System.Windows.WeakEventManager.ListenerList\n  langs:\n  - csharp\n  name: Count\n  nameWithType: WeakEventManager+ListenerList.Count\n  fullName: System.Windows.WeakEventManager+ListenerList.Count\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  syntax:\n    content: public int Count { get; }\n    return:\n      type: System.Int32\n      description: To be added.\n  overload: System.Windows.WeakEventManager.ListenerList.Count*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.WeakEventManager.ListenerList.DeliverEvent(System.Object,System.EventArgs,System.Type)\n  id: DeliverEvent(System.Object,System.EventArgs,System.Type)\n  parent: System.Windows.WeakEventManager.ListenerList\n  langs:\n  - csharp\n  name: DeliverEvent(Object,EventArgs,Type)\n  nameWithType: WeakEventManager+ListenerList.DeliverEvent(Object,EventArgs,Type)\n  fullName: System.Windows.WeakEventManager+ListenerList.DeliverEvent(Object,EventArgs,Type)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  syntax:\n    content: public virtual bool DeliverEvent (object sender, EventArgs args, Type managerType);\n    parameters:\n    - id: sender\n      type: System.Object\n      description: To be added.\n    - id: args\n      type: System.EventArgs\n      description: To be added.\n    - id: managerType\n      type: System.Type\n      description: To be added.\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Windows.WeakEventManager.ListenerList.DeliverEvent*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.WeakEventManager.ListenerList.Empty\n  id: Empty\n  parent: System.Windows.WeakEventManager.ListenerList\n  langs:\n  - csharp\n  name: Empty\n  nameWithType: WeakEventManager+ListenerList.Empty\n  fullName: System.Windows.WeakEventManager+ListenerList.Empty\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  syntax:\n    content: public static System.Windows.WeakEventManager.ListenerList Empty { get; }\n    return:\n      type: System.Windows.WeakEventManager.ListenerList\n      description: To be added.\n  overload: System.Windows.WeakEventManager.ListenerList.Empty*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.WeakEventManager.ListenerList.EndUse\n  id: EndUse\n  parent: System.Windows.WeakEventManager.ListenerList\n  langs:\n  - csharp\n  name: EndUse()\n  nameWithType: WeakEventManager+ListenerList.EndUse()\n  fullName: System.Windows.WeakEventManager+ListenerList.EndUse()\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  syntax:\n    content: public void EndUse ();\n    parameters: []\n  overload: System.Windows.WeakEventManager.ListenerList.EndUse*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.WeakEventManager.ListenerList.IsEmpty\n  id: IsEmpty\n  parent: System.Windows.WeakEventManager.ListenerList\n  langs:\n  - csharp\n  name: IsEmpty\n  nameWithType: WeakEventManager+ListenerList.IsEmpty\n  fullName: System.Windows.WeakEventManager+ListenerList.IsEmpty\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  syntax:\n    content: public bool IsEmpty { get; }\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Windows.WeakEventManager.ListenerList.IsEmpty*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.WeakEventManager.ListenerList.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: System.Windows.WeakEventManager.ListenerList\n  langs:\n  - csharp\n  name: Item(Int32)\n  nameWithType: WeakEventManager+ListenerList.Item(Int32)\n  fullName: System.Windows.WeakEventManager+ListenerList.Item(Int32)\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  syntax:\n    content: public System.Windows.IWeakEventListener this[int index] { get; }\n    parameters:\n    - id: index\n      type: System.Int32\n      description: To be added.\n    return:\n      type: System.Windows.IWeakEventListener\n      description: To be added.\n  overload: System.Windows.WeakEventManager.ListenerList.Item*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)\n  id: PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)\n  parent: System.Windows.WeakEventManager.ListenerList\n  langs:\n  - csharp\n  name: PrepareForWriting(WeakEventManager+ListenerList)\n  nameWithType: WeakEventManager+ListenerList.PrepareForWriting(WeakEventManager+ListenerList)\n  fullName: System.Windows.WeakEventManager+ListenerList.PrepareForWriting(WeakEventManager+ListenerList)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  syntax:\n    content: public static bool PrepareForWriting (ref System.Windows.WeakEventManager.ListenerList list);\n    parameters:\n    - id: list\n      type: System.Windows.WeakEventManager.ListenerList\n      description: To be added.\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Windows.WeakEventManager.ListenerList.PrepareForWriting*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.WeakEventManager.ListenerList.Purge\n  id: Purge\n  parent: System.Windows.WeakEventManager.ListenerList\n  langs:\n  - csharp\n  name: Purge()\n  nameWithType: WeakEventManager+ListenerList.Purge()\n  fullName: System.Windows.WeakEventManager+ListenerList.Purge()\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  syntax:\n    content: public bool Purge ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Windows.WeakEventManager.ListenerList.Purge*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.WeakEventManager.ListenerList.Remove(System.Windows.IWeakEventListener)\n  id: Remove(System.Windows.IWeakEventListener)\n  parent: System.Windows.WeakEventManager.ListenerList\n  langs:\n  - csharp\n  name: Remove(IWeakEventListener)\n  nameWithType: WeakEventManager+ListenerList.Remove(IWeakEventListener)\n  fullName: System.Windows.WeakEventManager+ListenerList.Remove(IWeakEventListener)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  syntax:\n    content: public void Remove (System.Windows.IWeakEventListener listener);\n    parameters:\n    - id: listener\n      type: System.Windows.IWeakEventListener\n      description: To be added.\n  overload: System.Windows.WeakEventManager.ListenerList.Remove*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.WeakEventManager.ListenerList.RemoveHandler(System.Delegate)\n  id: RemoveHandler(System.Delegate)\n  parent: System.Windows.WeakEventManager.ListenerList\n  langs:\n  - csharp\n  name: RemoveHandler(Delegate)\n  nameWithType: WeakEventManager+ListenerList.RemoveHandler(Delegate)\n  fullName: System.Windows.WeakEventManager+ListenerList.RemoveHandler(Delegate)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  syntax:\n    content: public void RemoveHandler (Delegate handler);\n    parameters:\n    - id: handler\n      type: System.Delegate\n      description: To be added.\n  overload: System.Windows.WeakEventManager.ListenerList.RemoveHandler*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Windows.WeakEventManager.ListenerList.#ctor\n  parent: System.Windows.WeakEventManager.ListenerList\n  isExternal: false\n  name: WeakEventManager+ListenerList()\n  nameWithType: WeakEventManager+ListenerList.WeakEventManager+ListenerList()\n  fullName: System.Windows.WeakEventManager+ListenerList.WeakEventManager+ListenerList()\n- uid: System.Windows.WeakEventManager.ListenerList.#ctor(System.Int32)\n  parent: System.Windows.WeakEventManager.ListenerList\n  isExternal: false\n  name: WeakEventManager+ListenerList(Int32)\n  nameWithType: WeakEventManager+ListenerList.WeakEventManager+ListenerList(Int32)\n  fullName: System.Windows.WeakEventManager+ListenerList.WeakEventManager+ListenerList(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Windows.WeakEventManager.ListenerList.Add(System.Windows.IWeakEventListener)\n  parent: System.Windows.WeakEventManager.ListenerList\n  isExternal: false\n  name: Add(IWeakEventListener)\n  nameWithType: WeakEventManager+ListenerList.Add(IWeakEventListener)\n  fullName: System.Windows.WeakEventManager+ListenerList.Add(IWeakEventListener)\n- uid: System.Windows.IWeakEventListener\n  parent: System.Windows\n  isExternal: false\n  name: IWeakEventListener\n  nameWithType: IWeakEventListener\n  fullName: System.Windows.IWeakEventListener\n- uid: System.Windows.WeakEventManager.ListenerList.AddHandler(System.Delegate)\n  parent: System.Windows.WeakEventManager.ListenerList\n  isExternal: false\n  name: AddHandler(Delegate)\n  nameWithType: WeakEventManager+ListenerList.AddHandler(Delegate)\n  fullName: System.Windows.WeakEventManager+ListenerList.AddHandler(Delegate)\n- uid: System.Delegate\n  parent: System\n  isExternal: true\n  name: Delegate\n  nameWithType: Delegate\n  fullName: System.Delegate\n- uid: System.Windows.WeakEventManager.ListenerList.BeginUse\n  parent: System.Windows.WeakEventManager.ListenerList\n  isExternal: false\n  name: BeginUse()\n  nameWithType: WeakEventManager+ListenerList.BeginUse()\n  fullName: System.Windows.WeakEventManager+ListenerList.BeginUse()\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Windows.WeakEventManager.ListenerList.Clone\n  parent: System.Windows.WeakEventManager.ListenerList\n  isExternal: false\n  name: Clone()\n  nameWithType: WeakEventManager+ListenerList.Clone()\n  fullName: System.Windows.WeakEventManager+ListenerList.Clone()\n- uid: System.Windows.WeakEventManager.ListenerList\n  parent: System.Windows\n  isExternal: false\n  name: WeakEventManager+ListenerList\n  nameWithType: WeakEventManager+ListenerList\n  fullName: System.Windows.WeakEventManager+ListenerList\n- uid: System.Windows.WeakEventManager.ListenerList.CopyTo(System.Windows.WeakEventManager.ListenerList)\n  parent: System.Windows.WeakEventManager.ListenerList\n  isExternal: false\n  name: CopyTo(WeakEventManager+ListenerList)\n  nameWithType: WeakEventManager+ListenerList.CopyTo(WeakEventManager+ListenerList)\n  fullName: System.Windows.WeakEventManager+ListenerList.CopyTo(WeakEventManager+ListenerList)\n- uid: System.Windows.WeakEventManager.ListenerList.Count\n  parent: System.Windows.WeakEventManager.ListenerList\n  isExternal: false\n  name: Count\n  nameWithType: WeakEventManager+ListenerList.Count\n  fullName: System.Windows.WeakEventManager+ListenerList.Count\n- uid: System.Windows.WeakEventManager.ListenerList.DeliverEvent(System.Object,System.EventArgs,System.Type)\n  parent: System.Windows.WeakEventManager.ListenerList\n  isExternal: false\n  name: DeliverEvent(Object,EventArgs,Type)\n  nameWithType: WeakEventManager+ListenerList.DeliverEvent(Object,EventArgs,Type)\n  fullName: System.Windows.WeakEventManager+ListenerList.DeliverEvent(Object,EventArgs,Type)\n- uid: System.EventArgs\n  parent: System\n  isExternal: true\n  name: EventArgs\n  nameWithType: EventArgs\n  fullName: System.EventArgs\n- uid: System.Type\n  parent: System\n  isExternal: true\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Windows.WeakEventManager.ListenerList.Empty\n  parent: System.Windows.WeakEventManager.ListenerList\n  isExternal: false\n  name: Empty\n  nameWithType: WeakEventManager+ListenerList.Empty\n  fullName: System.Windows.WeakEventManager+ListenerList.Empty\n- uid: System.Windows.WeakEventManager.ListenerList.EndUse\n  parent: System.Windows.WeakEventManager.ListenerList\n  isExternal: false\n  name: EndUse()\n  nameWithType: WeakEventManager+ListenerList.EndUse()\n  fullName: System.Windows.WeakEventManager+ListenerList.EndUse()\n- uid: System.Windows.WeakEventManager.ListenerList.IsEmpty\n  parent: System.Windows.WeakEventManager.ListenerList\n  isExternal: false\n  name: IsEmpty\n  nameWithType: WeakEventManager+ListenerList.IsEmpty\n  fullName: System.Windows.WeakEventManager+ListenerList.IsEmpty\n- uid: System.Windows.WeakEventManager.ListenerList.Item(System.Int32)\n  parent: System.Windows.WeakEventManager.ListenerList\n  isExternal: false\n  name: Item(Int32)\n  nameWithType: WeakEventManager+ListenerList.Item(Int32)\n  fullName: System.Windows.WeakEventManager+ListenerList.Item(Int32)\n- uid: System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)\n  parent: System.Windows.WeakEventManager.ListenerList\n  isExternal: false\n  name: PrepareForWriting(WeakEventManager+ListenerList)\n  nameWithType: WeakEventManager+ListenerList.PrepareForWriting(WeakEventManager+ListenerList)\n  fullName: System.Windows.WeakEventManager+ListenerList.PrepareForWriting(WeakEventManager+ListenerList)\n- uid: System.Windows.WeakEventManager.ListenerList.Purge\n  parent: System.Windows.WeakEventManager.ListenerList\n  isExternal: false\n  name: Purge()\n  nameWithType: WeakEventManager+ListenerList.Purge()\n  fullName: System.Windows.WeakEventManager+ListenerList.Purge()\n- uid: System.Windows.WeakEventManager.ListenerList.Remove(System.Windows.IWeakEventListener)\n  parent: System.Windows.WeakEventManager.ListenerList\n  isExternal: false\n  name: Remove(IWeakEventListener)\n  nameWithType: WeakEventManager+ListenerList.Remove(IWeakEventListener)\n  fullName: System.Windows.WeakEventManager+ListenerList.Remove(IWeakEventListener)\n- uid: System.Windows.WeakEventManager.ListenerList.RemoveHandler(System.Delegate)\n  parent: System.Windows.WeakEventManager.ListenerList\n  isExternal: false\n  name: RemoveHandler(Delegate)\n  nameWithType: WeakEventManager+ListenerList.RemoveHandler(Delegate)\n  fullName: System.Windows.WeakEventManager+ListenerList.RemoveHandler(Delegate)\n- uid: System.Windows.WeakEventManager.ListenerList.#ctor*\n  parent: System.Windows.WeakEventManager.ListenerList\n  isExternal: false\n  name: WeakEventManager+ListenerList\n  nameWithType: WeakEventManager+ListenerList.WeakEventManager+ListenerList\n- uid: System.Windows.WeakEventManager.ListenerList.Add*\n  parent: System.Windows.WeakEventManager.ListenerList\n  isExternal: false\n  name: Add\n  nameWithType: WeakEventManager+ListenerList.Add\n- uid: System.Windows.WeakEventManager.ListenerList.AddHandler*\n  parent: System.Windows.WeakEventManager.ListenerList\n  isExternal: false\n  name: AddHandler\n  nameWithType: WeakEventManager+ListenerList.AddHandler\n- uid: System.Windows.WeakEventManager.ListenerList.BeginUse*\n  parent: System.Windows.WeakEventManager.ListenerList\n  isExternal: false\n  name: BeginUse\n  nameWithType: WeakEventManager+ListenerList.BeginUse\n- uid: System.Windows.WeakEventManager.ListenerList.Clone*\n  parent: System.Windows.WeakEventManager.ListenerList\n  isExternal: false\n  name: Clone\n  nameWithType: WeakEventManager+ListenerList.Clone\n- uid: System.Windows.WeakEventManager.ListenerList.CopyTo*\n  parent: System.Windows.WeakEventManager.ListenerList\n  isExternal: false\n  name: CopyTo\n  nameWithType: WeakEventManager+ListenerList.CopyTo\n- uid: System.Windows.WeakEventManager.ListenerList.Count*\n  parent: System.Windows.WeakEventManager.ListenerList\n  isExternal: false\n  name: Count\n  nameWithType: WeakEventManager+ListenerList.Count\n- uid: System.Windows.WeakEventManager.ListenerList.DeliverEvent*\n  parent: System.Windows.WeakEventManager.ListenerList\n  isExternal: false\n  name: DeliverEvent\n  nameWithType: WeakEventManager+ListenerList.DeliverEvent\n- uid: System.Windows.WeakEventManager.ListenerList.Empty*\n  parent: System.Windows.WeakEventManager.ListenerList\n  isExternal: false\n  name: Empty\n  nameWithType: WeakEventManager+ListenerList.Empty\n- uid: System.Windows.WeakEventManager.ListenerList.EndUse*\n  parent: System.Windows.WeakEventManager.ListenerList\n  isExternal: false\n  name: EndUse\n  nameWithType: WeakEventManager+ListenerList.EndUse\n- uid: System.Windows.WeakEventManager.ListenerList.IsEmpty*\n  parent: System.Windows.WeakEventManager.ListenerList\n  isExternal: false\n  name: IsEmpty\n  nameWithType: WeakEventManager+ListenerList.IsEmpty\n- uid: System.Windows.WeakEventManager.ListenerList.Item*\n  parent: System.Windows.WeakEventManager.ListenerList\n  isExternal: false\n  name: Item\n  nameWithType: WeakEventManager+ListenerList.Item\n- uid: System.Windows.WeakEventManager.ListenerList.PrepareForWriting*\n  parent: System.Windows.WeakEventManager.ListenerList\n  isExternal: false\n  name: PrepareForWriting\n  nameWithType: WeakEventManager+ListenerList.PrepareForWriting\n- uid: System.Windows.WeakEventManager.ListenerList.Purge*\n  parent: System.Windows.WeakEventManager.ListenerList\n  isExternal: false\n  name: Purge\n  nameWithType: WeakEventManager+ListenerList.Purge\n- uid: System.Windows.WeakEventManager.ListenerList.Remove*\n  parent: System.Windows.WeakEventManager.ListenerList\n  isExternal: false\n  name: Remove\n  nameWithType: WeakEventManager+ListenerList.Remove\n- uid: System.Windows.WeakEventManager.ListenerList.RemoveHandler*\n  parent: System.Windows.WeakEventManager.ListenerList\n  isExternal: false\n  name: RemoveHandler\n  nameWithType: WeakEventManager+ListenerList.RemoveHandler\n"}