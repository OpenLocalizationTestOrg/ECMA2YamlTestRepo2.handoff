{"nodes":[{"pos":[854,922],"content":"Defines a keyboard combination that can be used to invoke a command.","needQuote":true,"needEscape":true,"nodes":[{"content":"Defines a keyboard combination that can be used to invoke a command.","pos":[0,68]}]},{"pos":[935,2937],"content":"In most cases, a KeyGesture must be associated with one or more <xref:System.Windows.Input.ModifierKeys>. The exceptions to this rule are the function keys and the numeric keypad keys, which can be a valid KeyGesture by themselves. For example, you can create a KeyGesture by using only the F12 key, but to use the X key in a KeyGesture it must be paired with a modifier key.       In general, you can       You can use a <xref:System.Windows.Input.KeyBinding> to bind a KeyGesture to an <xref:System.Windows.Input.ICommand>, so that the command is invoked when the KeyGesture occurs.       For KeyGesture [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usages, the property that is generally set in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] is <xref:System.Windows.Input.KeyBinding.Gesture%2A>, in cases where the gesture represents both a standard key and a modifier key. You can also set the <xref:System.Windows.Input.KeyBinding.Gesture%2A> property to be just a function key, or just a modifier key combination. However, it is more common to set the <xref:System.Windows.Input.KeyBinding.Key%2A> property if the intended command binding is a function key with no modifiers, or <xref:System.Windows.Input.KeyBinding.Modifiers%2A> if the intended command binding is for modifier keys only.      <a name=\"xamlAttributeUsage_KeyGesture\"></a>    ## XAML Attribute Usage      ```   <object property=\"oneOrMoreModifierKeys+key\"/>   - or -   <object property=\"functionKey\"/>   ```      <a name=\"xamlValues_KeyGesture\"></a>    ## XAML Values    `functionKey`    <xref:System.Windows.Input.Key>       A single key value, which must be one of the function keys (F1-12) or numeric keypad keys.       `oneOrMoreModifierKeys`    One or more modifier keys, defined by the <xref:System.Windows.Input.ModifierKeys> enumeration, delimited with a \"+\" character.       `key`    <xref:System.Windows.Input.Key>       A single key value.","needQuote":false,"needEscape":true,"nodes":[{"content":"In most cases, a KeyGesture must be associated with one or more &lt;xref:System.Windows.Input.ModifierKeys&gt;.","pos":[0,105],"source":"In most cases, a KeyGesture must be associated with one or more <xref:System.Windows.Input.ModifierKeys>."},{"content":"The exceptions to this rule are the function keys and the numeric keypad keys, which can be a valid KeyGesture by themselves.","pos":[106,231]},{"content":"For example, you can create a KeyGesture by using only the F12 key, but to use the X key in a KeyGesture it must be paired with a modifier key.","pos":[232,375]},{"content":"In general, you can       You can use a &lt;xref:System.Windows.Input.KeyBinding&gt; to bind a KeyGesture to an &lt;xref:System.Windows.Input.ICommand&gt;, so that the command is invoked when the KeyGesture occurs.","pos":[382,584],"source":"       In general, you can       You can use a <xref:System.Windows.Input.KeyBinding> to bind a KeyGesture to an <xref:System.Windows.Input.ICommand>, so that the command is invoked when the KeyGesture occurs."},{"content":"For KeyGesture <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> usages, the property that is generally set in <ph id=\"ph2\">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> is &lt;xref:System.Windows.Input.KeyBinding.Gesture%2A&gt;, in cases where the gesture represents both a standard key and a modifier key.","pos":[591,915],"source":"       For KeyGesture [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usages, the property that is generally set in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] is <xref:System.Windows.Input.KeyBinding.Gesture%2A>, in cases where the gesture represents both a standard key and a modifier key."},{"content":"You can also set the &lt;xref:System.Windows.Input.KeyBinding.Gesture%2A&gt; property to be just a function key, or just a modifier key combination.","pos":[916,1058],"source":" You can also set the <xref:System.Windows.Input.KeyBinding.Gesture%2A> property to be just a function key, or just a modifier key combination."},{"content":"However, it is more common to set the &lt;xref:System.Windows.Input.KeyBinding.Key%2A&gt; property if the intended command binding is a function key with no modifiers, or &lt;xref:System.Windows.Input.KeyBinding.Modifiers%2A&gt; if the intended command binding is for modifier keys only.","pos":[1059,1334],"source":" However, it is more common to set the <xref:System.Windows.Input.KeyBinding.Key%2A> property if the intended command binding is a function key with no modifiers, or <xref:System.Windows.Input.KeyBinding.Modifiers%2A> if the intended command binding is for modifier keys only."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlAttributeUsage_KeyGesture\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object property=\"oneOrMoreModifierKeys+key\"/&gt;   - or -   &lt;object property=\"functionKey\"/&gt;   ```</ph>      <bpt id=\"p2\">&lt;a name=\"xamlValues_KeyGesture\"&gt;</bpt><ept id=\"p2\">&lt;/a&gt;</ept>    ## XAML Values    <ph id=\"ph2\">`functionKey`</ph>    &lt;xref:System.Windows.Input.Key&gt;       A single key value, which must be one of the function keys (F1-12) or numeric keypad keys.","pos":[1340,1728],"source":"<a name=\"xamlAttributeUsage_KeyGesture\"></a>    ## XAML Attribute Usage      ```   <object property=\"oneOrMoreModifierKeys+key\"/>   - or -   <object property=\"functionKey\"/>   ```      <a name=\"xamlValues_KeyGesture\"></a>    ## XAML Values    `functionKey`    <xref:System.Windows.Input.Key>       A single key value, which must be one of the function keys (F1-12) or numeric keypad keys."},{"content":"<ph id=\"ph1\">`oneOrMoreModifierKeys`</ph>    One or more modifier keys, defined by the &lt;xref:System.Windows.Input.ModifierKeys&gt; enumeration, delimited with a \"+\" character.","pos":[1735,1889],"source":"`oneOrMoreModifierKeys`    One or more modifier keys, defined by the <xref:System.Windows.Input.ModifierKeys> enumeration, delimited with a \"+\" character."},{"content":"<ph id=\"ph1\">`key`</ph>    &lt;xref:System.Windows.Input.Key&gt;       A single key value.","pos":[1896,1962],"source":"`key`    <xref:System.Windows.Input.Key>       A single key value."}]},{"pos":[4995,5153],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.KeyGesture\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified <bpt id=\"p2\">&lt;xref href=\"System.Windows.Input.Key\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Windows.Input.KeyGesture\"></xref> class with the specified <xref href=\"System.Windows.Input.Key\"></xref>."},{"pos":[5165,5453],"content":"In most cases, a <xref:System.Windows.Input.KeyGesture> must be associated with one or more <xref:System.Windows.Input.ModifierKeys>.  The exceptions to this rule are the function keys and the numeric keypad keys, which can be a valid <xref:System.Windows.Input.KeyGesture> by themselves.","needQuote":true,"needEscape":true,"nodes":[{"content":"In most cases, a <xref:System.Windows.Input.KeyGesture> must be associated with one or more <xref:System.Windows.Input.ModifierKeys>.  The exceptions to this rule are the function keys and the numeric keypad keys, which can be a valid <xref:System.Windows.Input.KeyGesture> by themselves.","pos":[0,288],"nodes":[{"content":"In most cases, a &lt;xref:System.Windows.Input.KeyGesture&gt; must be associated with one or more &lt;xref:System.Windows.Input.ModifierKeys&gt;.","pos":[0,133],"source":"In most cases, a <xref:System.Windows.Input.KeyGesture> must be associated with one or more <xref:System.Windows.Input.ModifierKeys>."},{"content":"The exceptions to this rule are the function keys and the numeric keypad keys, which can be a valid &lt;xref:System.Windows.Input.KeyGesture&gt; by themselves.","pos":[135,288],"source":"  The exceptions to this rule are the function keys and the numeric keypad keys, which can be a valid <xref:System.Windows.Input.KeyGesture> by themselves."}]}]},{"pos":[6265,6302],"content":"The key associated with this gesture.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key associated with this gesture.","pos":[0,37]}]},{"pos":[6514,6592],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is not a valid <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.Key\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>key</code> is not a valid <xref href=\"System.Windows.Input.Key\"></xref>."},{"pos":[6695,6780],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is not a valid <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.KeyGesture\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>key</code> is not a valid <xref href=\"System.Windows.Input.KeyGesture\"></xref>."},{"pos":[7311,7528],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.KeyGesture\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified <bpt id=\"p2\">&lt;xref href=\"System.Windows.Input.Key\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> and <bpt id=\"p3\">&lt;xref href=\"System.Windows.Input.ModifierKeys\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Windows.Input.KeyGesture\"></xref> class with the specified <xref href=\"System.Windows.Input.Key\"></xref> and <xref href=\"System.Windows.Input.ModifierKeys\"></xref>."},{"pos":[7540,7827],"content":"In most cases, a <xref:System.Windows.Input.KeyGesture> must be associated with one or more <xref:System.Windows.Input.ModifierKeys>. The exceptions to this rule are the function keys and the numeric keypad keys, which can be a valid <xref:System.Windows.Input.KeyGesture> by themselves.","needQuote":true,"needEscape":true,"nodes":[{"content":"In most cases, a <xref:System.Windows.Input.KeyGesture> must be associated with one or more <xref:System.Windows.Input.ModifierKeys>. The exceptions to this rule are the function keys and the numeric keypad keys, which can be a valid <xref:System.Windows.Input.KeyGesture> by themselves.","pos":[0,287],"nodes":[{"content":"In most cases, a &lt;xref:System.Windows.Input.KeyGesture&gt; must be associated with one or more &lt;xref:System.Windows.Input.ModifierKeys&gt;.","pos":[0,133],"source":"In most cases, a <xref:System.Windows.Input.KeyGesture> must be associated with one or more <xref:System.Windows.Input.ModifierKeys>."},{"content":"The exceptions to this rule are the function keys and the numeric keypad keys, which can be a valid &lt;xref:System.Windows.Input.KeyGesture&gt; by themselves.","pos":[134,287],"source":" The exceptions to this rule are the function keys and the numeric keypad keys, which can be a valid <xref:System.Windows.Input.KeyGesture> by themselves."}]}]},{"pos":[8703,8739],"content":"The key associated with the gesture.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key associated with the gesture.","pos":[0,36]}]},{"pos":[8825,8871],"content":"The modifier keys associated with the gesture.","needQuote":true,"needEscape":true,"nodes":[{"content":"The modifier keys associated with the gesture.","pos":[0,46]}]},{"pos":[9084,9280],"content":"<ph id=\"ph1\">&lt;code&gt;modifiers&lt;/code&gt;</ph> is not a valid <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.ModifierKeys\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>       -or-       <ph id=\"ph2\">&lt;code&gt;key&lt;/code&gt;</ph> is not a valid <bpt id=\"p2\">&lt;xref href=\"System.Windows.Input.Key\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":false,"needEscape":true,"source":"<code>modifiers</code> is not a valid <xref href=\"System.Windows.Input.ModifierKeys\"></xref>       -or-       <code>key</code> is not a valid <xref href=\"System.Windows.Input.Key\"></xref>."},{"pos":[9384,9501],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;modifiers&lt;/code&gt;</ph> do not form a valid <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.KeyGesture\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>key</code> and <code>modifiers</code> do not form a valid <xref href=\"System.Windows.Input.KeyGesture\"></xref>."},{"pos":[10081,10315],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.KeyGesture\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified <bpt id=\"p2\">&lt;xref href=\"System.Windows.Input.Key\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, <bpt id=\"p3\">&lt;xref href=\"System.Windows.Input.ModifierKeys\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>, and display string.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Windows.Input.KeyGesture\"></xref> class with the specified <xref href=\"System.Windows.Input.Key\"></xref>, <xref href=\"System.Windows.Input.ModifierKeys\"></xref>, and display string."},{"pos":[10327,10436],"content":"The &lt;xref:System.Windows.Input.KeyGesture.DisplayString%2A&gt; property is set to the <ph id=\"ph1\">`displayString`</ph> parameter.","needQuote":true,"needEscape":true,"source":"The <xref:System.Windows.Input.KeyGesture.DisplayString%2A> property is set to the `displayString` parameter."},{"pos":[10663,10699],"content":"The key associated with the gesture.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key associated with the gesture.","pos":[0,36]}]},{"pos":[10785,10831],"content":"The modifier keys associated with the gesture.","needQuote":true,"needEscape":true,"nodes":[{"content":"The modifier keys associated with the gesture.","pos":[0,46]}]},{"pos":[10901,10985],"content":"A string representation of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.KeyGesture\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A string representation of the <xref href=\"System.Windows.Input.KeyGesture\"></xref>."},{"pos":[11198,11394],"content":"<ph id=\"ph1\">&lt;code&gt;modifiers&lt;/code&gt;</ph> is not a valid <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.ModifierKeys\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>       -or-       <ph id=\"ph2\">&lt;code&gt;key&lt;/code&gt;</ph> is not a valid <bpt id=\"p2\">&lt;xref href=\"System.Windows.Input.Key\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":false,"needEscape":true,"source":"<code>modifiers</code> is not a valid <xref href=\"System.Windows.Input.ModifierKeys\"></xref>       -or-       <code>key</code> is not a valid <xref href=\"System.Windows.Input.Key\"></xref>."},{"pos":[11498,11589],"content":"<ph id=\"ph1\">&lt;code&gt;displayString&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>displayString</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[11692,11809],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;modifiers&lt;/code&gt;</ph> do not form a valid <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.KeyGesture\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>key</code> and <code>modifiers</code> do not form a valid <xref href=\"System.Windows.Input.KeyGesture\"></xref>."},{"pos":[12186,12276],"content":"Gets a string representation of this <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.KeyGesture\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets a string representation of this <xref href=\"System.Windows.Input.KeyGesture\"></xref>."},{"pos":[12289,12621],"content":"If a display string was not set in the constructor, an empty string is returned.       If this property is empty, the <xref:System.Windows.Input.KeyGesture.GetDisplayStringForCulture%2A> method returns a string created from the <xref:System.Windows.Input.KeyGesture.Key%2A> and <xref:System.Windows.Input.KeyGesture.Modifiers%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"If a display string was not set in the constructor, an empty string is returned.       If this property is empty, the <xref:System.Windows.Input.KeyGesture.GetDisplayStringForCulture%2A> method returns a string created from the <xref:System.Windows.Input.KeyGesture.Key%2A> and <xref:System.Windows.Input.KeyGesture.Modifiers%2A>.","pos":[0,330],"nodes":[{"content":"If a display string was not set in the constructor, an empty string is returned.","pos":[0,80]},{"content":"If this property is empty, the &lt;xref:System.Windows.Input.KeyGesture.GetDisplayStringForCulture%2A&gt; method returns a string created from the &lt;xref:System.Windows.Input.KeyGesture.Key%2A&gt; and &lt;xref:System.Windows.Input.KeyGesture.Modifiers%2A&gt;.","pos":[87,330],"source":"       If this property is empty, the <xref:System.Windows.Input.KeyGesture.GetDisplayStringForCulture%2A> method returns a string created from the <xref:System.Windows.Input.KeyGesture.Key%2A> and <xref:System.Windows.Input.KeyGesture.Modifiers%2A>."}]}]},{"pos":[12740,12870],"content":"The display string for this <xref href=\"System.Windows.Input.KeyGesture\"></xref>. The default value is <xref:System.String.Empty>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The display string for this <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.KeyGesture\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,81],"source":"The display string for this <xref href=\"System.Windows.Input.KeyGesture\"></xref>."},{"content":"The default value is &lt;xref:System.String.Empty&gt;.","pos":[82,130],"source":" The default value is <xref:System.String.Empty>."}]},{"pos":[13493,13595],"content":"Returns a string that can be used to display the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.KeyGesture\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns a string that can be used to display the <xref href=\"System.Windows.Input.KeyGesture\"></xref>."},{"pos":[13607,13934],"content":"If the display string was set by the constructor, that string is returned; otherwise, a string is created from the <xref:System.Windows.Input.KeyGesture.Key%2A> and <xref:System.Windows.Input.KeyGesture.Modifiers%2A> with any necessary conversions being governed by the specified <xref:System.Globalization.CultureInfo> object.","needQuote":true,"needEscape":true,"nodes":[{"content":"If the display string was set by the constructor, that string is returned; otherwise, a string is created from the &lt;xref:System.Windows.Input.KeyGesture.Key%2A&gt; and &lt;xref:System.Windows.Input.KeyGesture.Modifiers%2A&gt; with any necessary conversions being governed by the specified &lt;xref:System.Globalization.CultureInfo&gt; object.","pos":[0,327],"source":"If the display string was set by the constructor, that string is returned; otherwise, a string is created from the <xref:System.Windows.Input.KeyGesture.Key%2A> and <xref:System.Windows.Input.KeyGesture.Modifiers%2A> with any necessary conversions being governed by the specified <xref:System.Globalization.CultureInfo> object."}]},{"pos":[14141,14174],"content":"The culture specific information.","needQuote":true,"needEscape":true,"nodes":[{"content":"The culture specific information.","pos":[0,33]}]},{"pos":[14232,14253],"content":"The string to display","needQuote":true,"needEscape":true,"nodes":[{"content":"The string to display","pos":[0,21]}]},{"pos":[14669,14756],"content":"Gets the key associated with this <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.KeyGesture\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets the key associated with this <xref href=\"System.Windows.Input.KeyGesture\"></xref>."},{"pos":[14768,15056],"content":"In most cases, a <xref:System.Windows.Input.KeyGesture> must be associated with one or more <xref:System.Windows.Input.ModifierKeys>.  The exceptions to this rule are the function keys and the numeric keypad keys, which can be a valid <xref:System.Windows.Input.KeyGesture> by themselves.","needQuote":true,"needEscape":true,"nodes":[{"content":"In most cases, a <xref:System.Windows.Input.KeyGesture> must be associated with one or more <xref:System.Windows.Input.ModifierKeys>.  The exceptions to this rule are the function keys and the numeric keypad keys, which can be a valid <xref:System.Windows.Input.KeyGesture> by themselves.","pos":[0,288],"nodes":[{"content":"In most cases, a &lt;xref:System.Windows.Input.KeyGesture&gt; must be associated with one or more &lt;xref:System.Windows.Input.ModifierKeys&gt;.","pos":[0,133],"source":"In most cases, a <xref:System.Windows.Input.KeyGesture> must be associated with one or more <xref:System.Windows.Input.ModifierKeys>."},{"content":"The exceptions to this rule are the function keys and the numeric keypad keys, which can be a valid &lt;xref:System.Windows.Input.KeyGesture&gt; by themselves.","pos":[135,288],"source":"  The exceptions to this rule are the function keys and the numeric keypad keys, which can be a valid <xref:System.Windows.Input.KeyGesture> by themselves."}]}]},{"pos":[15193,15298],"content":"The key associated with the gesture.  The default value is <xref href=\"System.Windows.Input.Key\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key associated with the gesture.","pos":[0,36]},{"content":"The default value is <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.Key\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[38,105],"source":"  The default value is <xref href=\"System.Windows.Input.Key\"></xref>."}]},{"pos":[15880,16069],"content":"Determines whether this <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.KeyGesture\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> matches the input associated with the specified <bpt id=\"p2\">&lt;xref href=\"System.Windows.Input.InputEventArgs\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Determines whether this <xref href=\"System.Windows.Input.KeyGesture\"></xref> matches the input associated with the specified <xref href=\"System.Windows.Input.InputEventArgs\"></xref> object."},{"pos":[16082,16204],"content":"<ph id=\"ph1\">`targetElement`</ph> can be used to make a more specific decision on whether a command should be invoked on a specific element.","needQuote":false,"needEscape":true,"source":"`targetElement` can be used to make a more specific decision on whether a command should be invoked on a specific element."},{"pos":[17135,17146],"content":"The target.","needQuote":true,"needEscape":true,"nodes":[{"content":"The target.","pos":[0,11]}]},{"pos":[17239,17287],"content":"The input event data to compare this gesture to.","needQuote":true,"needEscape":true,"nodes":[{"content":"The input event data to compare this gesture to.","pos":[0,48]}]},{"pos":[17346,17566],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the event data matches this <bpt id=\"p2\">&lt;xref href=\"System.Windows.Input.KeyGesture\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the event data matches this <xref href=\"System.Windows.Input.KeyGesture\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[17993,18090],"content":"Gets the modifier keys associated with this <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.KeyGesture\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets the modifier keys associated with this <xref href=\"System.Windows.Input.KeyGesture\"></xref>."},{"pos":[18102,18589],"content":"In most cases, a <xref:System.Windows.Input.KeyGesture> must be associated with one or more <xref:System.Windows.Input.ModifierKeys>. The exceptions to this rule are the function keys and the numeric keypad keys, which can be a valid <xref:System.Windows.Input.KeyGesture> by themselves. For example, you can create a <xref:System.Windows.Input.KeyGesture> by using only the F12 key, but to use the X key in a <xref:System.Windows.Input.KeyGesture> it must be paired with a modifier key.","needQuote":true,"needEscape":true,"nodes":[{"content":"In most cases, a <xref:System.Windows.Input.KeyGesture> must be associated with one or more <xref:System.Windows.Input.ModifierKeys>. The exceptions to this rule are the function keys and the numeric keypad keys, which can be a valid <xref:System.Windows.Input.KeyGesture> by themselves. For example, you can create a <xref:System.Windows.Input.KeyGesture> by using only the F12 key, but to use the X key in a <xref:System.Windows.Input.KeyGesture> it must be paired with a modifier key.","pos":[0,487],"nodes":[{"content":"In most cases, a &lt;xref:System.Windows.Input.KeyGesture&gt; must be associated with one or more &lt;xref:System.Windows.Input.ModifierKeys&gt;.","pos":[0,133],"source":"In most cases, a <xref:System.Windows.Input.KeyGesture> must be associated with one or more <xref:System.Windows.Input.ModifierKeys>."},{"content":"The exceptions to this rule are the function keys and the numeric keypad keys, which can be a valid &lt;xref:System.Windows.Input.KeyGesture&gt; by themselves.","pos":[134,287],"source":" The exceptions to this rule are the function keys and the numeric keypad keys, which can be a valid <xref:System.Windows.Input.KeyGesture> by themselves."},{"content":"For example, you can create a &lt;xref:System.Windows.Input.KeyGesture&gt; by using only the F12 key, but to use the X key in a &lt;xref:System.Windows.Input.KeyGesture&gt; it must be paired with a modifier key.","pos":[288,487],"source":" For example, you can create a <xref:System.Windows.Input.KeyGesture> by using only the F12 key, but to use the X key in a <xref:System.Windows.Input.KeyGesture> it must be paired with a modifier key."}]}]},{"pos":[18750,18873],"content":"The modifier keys associated with the gesture. The default value is <xref href=\"System.Windows.Input.ModifierKeys\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The modifier keys associated with the gesture.","pos":[0,46]},{"content":"The default value is <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.ModifierKeys\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[47,123],"source":" The default value is <xref href=\"System.Windows.Input.ModifierKeys\"></xref>."}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Input.KeyGesture\n  id: KeyGesture\n  children:\n  - System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key)\n  - System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys)\n  - System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys,System.String)\n  - System.Windows.Input.KeyGesture.DisplayString\n  - System.Windows.Input.KeyGesture.GetDisplayStringForCulture(System.Globalization.CultureInfo)\n  - System.Windows.Input.KeyGesture.Key\n  - System.Windows.Input.KeyGesture.Matches(System.Object,System.Windows.Input.InputEventArgs)\n  - System.Windows.Input.KeyGesture.Modifiers\n  langs:\n  - csharp\n  name: KeyGesture\n  nameWithType: KeyGesture\n  fullName: System.Windows.Input.KeyGesture\n  type: Class\n  summary: Defines a keyboard combination that can be used to invoke a command.\n  remarks: \"In most cases, a KeyGesture must be associated with one or more <xref:System.Windows.Input.ModifierKeys>. The exceptions to this rule are the function keys and the numeric keypad keys, which can be a valid KeyGesture by themselves. For example, you can create a KeyGesture by using only the F12 key, but to use the X key in a KeyGesture it must be paired with a modifier key.  \\n  \\n In general, you can  \\n  \\n You can use a <xref:System.Windows.Input.KeyBinding> to bind a KeyGesture to an <xref:System.Windows.Input.ICommand>, so that the command is invoked when the KeyGesture occurs.  \\n  \\n For KeyGesture [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usages, the property that is generally set in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] is <xref:System.Windows.Input.KeyBinding.Gesture%2A>, in cases where the gesture represents both a standard key and a modifier key. You can also set the <xref:System.Windows.Input.KeyBinding.Gesture%2A> property to be just a function key, or just a modifier key combination. However, it is more common to set the <xref:System.Windows.Input.KeyBinding.Key%2A> property if the intended command binding is a function key with no modifiers, or <xref:System.Windows.Input.KeyBinding.Modifiers%2A> if the intended command binding is for modifier keys only.  \\n  \\n<a name=\\\"xamlAttributeUsage_KeyGesture\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object property=\\\"oneOrMoreModifierKeys+key\\\"/>  \\n- or -  \\n<object property=\\\"functionKey\\\"/>  \\n```  \\n  \\n<a name=\\\"xamlValues_KeyGesture\\\"></a>   \\n## XAML Values  \\n `functionKey`  \\n <xref:System.Windows.Input.Key>  \\n  \\n A single key value, which must be one of the function keys (F1-12) or numeric keypad keys.  \\n  \\n `oneOrMoreModifierKeys`  \\n One or more modifier keys, defined by the <xref:System.Windows.Input.ModifierKeys> enumeration, delimited with a \\\"+\\\" character.  \\n  \\n `key`  \\n <xref:System.Windows.Input.Key>  \\n  \\n A single key value.\"\n  example:\n  - \"The following example shows how to bind the <xref:System.Windows.Input.ApplicationCommands.Close%2A> command to a KeyGesture using a <xref:System.Windows.Input.KeyBinding>.  \\n  \\n [!code-cs[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/add/codesnippet/csharp/CommandLibarySnippets/Window1.xaml.cs#keybindingwithkeyandmodifiers)]\\n [!code-vb[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/add/codesnippet/visualbasic/commandlibarysnippets/window1.xaml.vb#keybindingwithkeyandmodifiers)]  \\n  \\n The following example shows how to use KeyGesture in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]. Note that the [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usage does not directly declare a `<KeyGesture>` element. That object element usage is not possible because KeyGesture does not expose a public default constructor. Instead, the [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usage uses the typeconverter behavior to declare an entire KeyGesture inline as the `Gesture` attribute value.  \\n  \\n [!code-xml[commandWithHandler#CommandHandlerKeyBinding](~/add/codesnippet/xaml/commandWithHandler/Window1.xaml#commandhandlerkeybinding)]\"\n  syntax:\n    content: >-\n      [System.ComponentModel.TypeConverter(typeof(System.Windows.Input.KeyGestureConverter))]\n\n      [System.Windows.Markup.ValueSerializer(typeof(System.Windows.Input.KeyGestureValueSerializer))]\n\n      public class KeyGesture : System.Windows.Input.InputGesture\n  inheritance:\n  - System.Object\n  - System.Windows.Input.InputGesture\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key)\n  id: '#ctor(System.Windows.Input.Key)'\n  parent: System.Windows.Input.KeyGesture\n  langs:\n  - csharp\n  name: KeyGesture(Key)\n  nameWithType: KeyGesture.KeyGesture(Key)\n  fullName: System.Windows.Input.KeyGesture.KeyGesture(Key)\n  type: Constructor\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Input.KeyGesture\"></xref> class with the specified <xref href=\"System.Windows.Input.Key\"></xref>.\n  remarks: In most cases, a <xref:System.Windows.Input.KeyGesture> must be associated with one or more <xref:System.Windows.Input.ModifierKeys>.  The exceptions to this rule are the function keys and the numeric keypad keys, which can be a valid <xref:System.Windows.Input.KeyGesture> by themselves.\n  example:\n  - \"The following example shows how to use this constructor to create a <xref:System.Windows.Input.KeyGesture> and associate it with a <xref:System.Windows.Input.KeyBinding>.  The <xref:System.Windows.Input.KeyBinding> is then added to the <xref:System.Windows.Input.InputBindingCollection> of a <xref:System.Windows.Window>.  \\n  \\n [!code-cs[commandlibrarysnippets#KeyBindingWithNoModifier](~/add/codesnippet/csharp/CommandLibarySnippets/Window1.xaml.cs#keybindingwithnomodifier)]\\n [!code-vb[commandlibrarysnippets#KeyBindingWithNoModifier](~/add/codesnippet/visualbasic/commandlibarysnippets/window1.xaml.vb#keybindingwithnomodifier)]\"\n  syntax:\n    content: public KeyGesture (System.Windows.Input.Key key);\n    parameters:\n    - id: key\n      type: System.Windows.Input.Key\n      description: The key associated with this gesture.\n  overload: System.Windows.Input.KeyGesture.#ctor*\n  exceptions:\n  - type: System.ComponentModel.InvalidEnumArgumentException\n    commentId: T:System.ComponentModel.InvalidEnumArgumentException\n    description: <code>key</code> is not a valid <xref href=\"System.Windows.Input.Key\"></xref>.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>key</code> is not a valid <xref href=\"System.Windows.Input.KeyGesture\"></xref>.\n  platform:\n  - net462\n- uid: System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys)\n  id: '#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys)'\n  parent: System.Windows.Input.KeyGesture\n  langs:\n  - csharp\n  name: KeyGesture(Key,ModifierKeys)\n  nameWithType: KeyGesture.KeyGesture(Key,ModifierKeys)\n  fullName: System.Windows.Input.KeyGesture.KeyGesture(Key,ModifierKeys)\n  type: Constructor\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Input.KeyGesture\"></xref> class with the specified <xref href=\"System.Windows.Input.Key\"></xref> and <xref href=\"System.Windows.Input.ModifierKeys\"></xref>.\n  remarks: In most cases, a <xref:System.Windows.Input.KeyGesture> must be associated with one or more <xref:System.Windows.Input.ModifierKeys>. The exceptions to this rule are the function keys and the numeric keypad keys, which can be a valid <xref:System.Windows.Input.KeyGesture> by themselves.\n  example:\n  - \"The following example shows how to use this constructor to create a <xref:System.Windows.Input.KeyGesture> and associate it with a <xref:System.Windows.Input.KeyBinding>. The <xref:System.Windows.Input.KeyBinding> is then added to the <xref:System.Windows.Input.InputBindingCollection> of a <xref:System.Windows.Window>.  \\n  \\n [!code-cs[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/add/codesnippet/csharp/CommandLibarySnippets/Window1.xaml.cs#keybindingwithkeyandmodifiers)]\\n [!code-vb[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/add/codesnippet/visualbasic/commandlibarysnippets/window1.xaml.vb#keybindingwithkeyandmodifiers)]\"\n  syntax:\n    content: public KeyGesture (System.Windows.Input.Key key, System.Windows.Input.ModifierKeys modifiers);\n    parameters:\n    - id: key\n      type: System.Windows.Input.Key\n      description: The key associated with the gesture.\n    - id: modifiers\n      type: System.Windows.Input.ModifierKeys\n      description: The modifier keys associated with the gesture.\n  overload: System.Windows.Input.KeyGesture.#ctor*\n  exceptions:\n  - type: System.ComponentModel.InvalidEnumArgumentException\n    commentId: T:System.ComponentModel.InvalidEnumArgumentException\n    description: \"<code>modifiers</code> is not a valid <xref href=\\\"System.Windows.Input.ModifierKeys\\\"></xref>  \\n  \\n -or-  \\n  \\n <code>key</code> is not a valid <xref href=\\\"System.Windows.Input.Key\\\"></xref>.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>key</code> and <code>modifiers</code> do not form a valid <xref href=\"System.Windows.Input.KeyGesture\"></xref>.\n  platform:\n  - net462\n- uid: System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys,System.String)\n  id: '#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys,System.String)'\n  parent: System.Windows.Input.KeyGesture\n  langs:\n  - csharp\n  name: KeyGesture(Key,ModifierKeys,String)\n  nameWithType: KeyGesture.KeyGesture(Key,ModifierKeys,String)\n  fullName: System.Windows.Input.KeyGesture.KeyGesture(Key,ModifierKeys,String)\n  type: Constructor\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Input.KeyGesture\"></xref> class with the specified <xref href=\"System.Windows.Input.Key\"></xref>, <xref href=\"System.Windows.Input.ModifierKeys\"></xref>, and display string.\n  remarks: The <xref:System.Windows.Input.KeyGesture.DisplayString%2A> property is set to the `displayString` parameter.\n  syntax:\n    content: public KeyGesture (System.Windows.Input.Key key, System.Windows.Input.ModifierKeys modifiers, string displayString);\n    parameters:\n    - id: key\n      type: System.Windows.Input.Key\n      description: The key associated with the gesture.\n    - id: modifiers\n      type: System.Windows.Input.ModifierKeys\n      description: The modifier keys associated with the gesture.\n    - id: displayString\n      type: System.String\n      description: A string representation of the <xref href=\"System.Windows.Input.KeyGesture\"></xref>.\n  overload: System.Windows.Input.KeyGesture.#ctor*\n  exceptions:\n  - type: System.ComponentModel.InvalidEnumArgumentException\n    commentId: T:System.ComponentModel.InvalidEnumArgumentException\n    description: \"<code>modifiers</code> is not a valid <xref href=\\\"System.Windows.Input.ModifierKeys\\\"></xref>  \\n  \\n -or-  \\n  \\n <code>key</code> is not a valid <xref href=\\\"System.Windows.Input.Key\\\"></xref>.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>displayString</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>key</code> and <code>modifiers</code> do not form a valid <xref href=\"System.Windows.Input.KeyGesture\"></xref>.\n  platform:\n  - net462\n- uid: System.Windows.Input.KeyGesture.DisplayString\n  id: DisplayString\n  parent: System.Windows.Input.KeyGesture\n  langs:\n  - csharp\n  name: DisplayString\n  nameWithType: KeyGesture.DisplayString\n  fullName: System.Windows.Input.KeyGesture.DisplayString\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets a string representation of this <xref href=\"System.Windows.Input.KeyGesture\"></xref>.\n  remarks: \"If a display string was not set in the constructor, an empty string is returned.  \\n  \\n If this property is empty, the <xref:System.Windows.Input.KeyGesture.GetDisplayStringForCulture%2A> method returns a string created from the <xref:System.Windows.Input.KeyGesture.Key%2A> and <xref:System.Windows.Input.KeyGesture.Modifiers%2A>.\"\n  syntax:\n    content: public string DisplayString { get; }\n    return:\n      type: System.String\n      description: The display string for this <xref href=\"System.Windows.Input.KeyGesture\"></xref>. The default value is <xref:System.String.Empty>.\n  overload: System.Windows.Input.KeyGesture.DisplayString*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.KeyGesture.GetDisplayStringForCulture(System.Globalization.CultureInfo)\n  id: GetDisplayStringForCulture(System.Globalization.CultureInfo)\n  parent: System.Windows.Input.KeyGesture\n  langs:\n  - csharp\n  name: GetDisplayStringForCulture(CultureInfo)\n  nameWithType: KeyGesture.GetDisplayStringForCulture(CultureInfo)\n  fullName: System.Windows.Input.KeyGesture.GetDisplayStringForCulture(CultureInfo)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Returns a string that can be used to display the <xref href=\"System.Windows.Input.KeyGesture\"></xref>.\n  remarks: If the display string was set by the constructor, that string is returned; otherwise, a string is created from the <xref:System.Windows.Input.KeyGesture.Key%2A> and <xref:System.Windows.Input.KeyGesture.Modifiers%2A> with any necessary conversions being governed by the specified <xref:System.Globalization.CultureInfo> object.\n  syntax:\n    content: public string GetDisplayStringForCulture (System.Globalization.CultureInfo culture);\n    parameters:\n    - id: culture\n      type: System.Globalization.CultureInfo\n      description: The culture specific information.\n    return:\n      type: System.String\n      description: The string to display\n  overload: System.Windows.Input.KeyGesture.GetDisplayStringForCulture*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.KeyGesture.Key\n  id: Key\n  parent: System.Windows.Input.KeyGesture\n  langs:\n  - csharp\n  name: Key\n  nameWithType: KeyGesture.Key\n  fullName: System.Windows.Input.KeyGesture.Key\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets the key associated with this <xref href=\"System.Windows.Input.KeyGesture\"></xref>.\n  remarks: In most cases, a <xref:System.Windows.Input.KeyGesture> must be associated with one or more <xref:System.Windows.Input.ModifierKeys>.  The exceptions to this rule are the function keys and the numeric keypad keys, which can be a valid <xref:System.Windows.Input.KeyGesture> by themselves.\n  syntax:\n    content: public System.Windows.Input.Key Key { get; }\n    return:\n      type: System.Windows.Input.Key\n      description: The key associated with the gesture.  The default value is <xref href=\"System.Windows.Input.Key\"></xref>.\n  overload: System.Windows.Input.KeyGesture.Key*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.KeyGesture.Matches(System.Object,System.Windows.Input.InputEventArgs)\n  id: Matches(System.Object,System.Windows.Input.InputEventArgs)\n  parent: System.Windows.Input.KeyGesture\n  langs:\n  - csharp\n  name: Matches(Object,InputEventArgs)\n  nameWithType: KeyGesture.Matches(Object,InputEventArgs)\n  fullName: System.Windows.Input.KeyGesture.Matches(Object,InputEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Determines whether this <xref href=\"System.Windows.Input.KeyGesture\"></xref> matches the input associated with the specified <xref href=\"System.Windows.Input.InputEventArgs\"></xref> object.\n  remarks: '`targetElement` can be used to make a more specific decision on whether a command should be invoked on a specific element.'\n  example:\n  - \"The following example shows how to test whether a <xref:System.Windows.Input.KeyGesture> matches the input associated with an instance of an <xref:System.Windows.Input.InputEventArgs>. A <xref:System.Windows.UIElement.KeyDown> event handler is created that compares the event data with the <xref:System.Windows.Input.KeyGesture> by using the Matches method.  \\n  \\n [!code-cs[commandlibrarysnippets#KeyDownHandlerKeyGestureMatches](~/add/codesnippet/csharp/CommandLibarySnippets/Window1.xaml.cs#keydownhandlerkeygesturematches)]\\n [!code-vb[commandlibrarysnippets#KeyDownHandlerKeyGestureMatches](~/add/codesnippet/visualbasic/commandlibarysnippets/window1.xaml.vb#keydownhandlerkeygesturematches)]\"\n  syntax:\n    content: public override bool Matches (object targetElement, System.Windows.Input.InputEventArgs inputEventArgs);\n    parameters:\n    - id: targetElement\n      type: System.Object\n      description: The target.\n    - id: inputEventArgs\n      type: System.Windows.Input.InputEventArgs\n      description: The input event data to compare this gesture to.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the event data matches this <xref href=\"System.Windows.Input.KeyGesture\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.Input.KeyGesture.Matches*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.KeyGesture.Modifiers\n  id: Modifiers\n  parent: System.Windows.Input.KeyGesture\n  langs:\n  - csharp\n  name: Modifiers\n  nameWithType: KeyGesture.Modifiers\n  fullName: System.Windows.Input.KeyGesture.Modifiers\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets the modifier keys associated with this <xref href=\"System.Windows.Input.KeyGesture\"></xref>.\n  remarks: In most cases, a <xref:System.Windows.Input.KeyGesture> must be associated with one or more <xref:System.Windows.Input.ModifierKeys>. The exceptions to this rule are the function keys and the numeric keypad keys, which can be a valid <xref:System.Windows.Input.KeyGesture> by themselves. For example, you can create a <xref:System.Windows.Input.KeyGesture> by using only the F12 key, but to use the X key in a <xref:System.Windows.Input.KeyGesture> it must be paired with a modifier key.\n  syntax:\n    content: public System.Windows.Input.ModifierKeys Modifiers { get; }\n    return:\n      type: System.Windows.Input.ModifierKeys\n      description: The modifier keys associated with the gesture. The default value is <xref href=\"System.Windows.Input.ModifierKeys\"></xref>.\n  overload: System.Windows.Input.KeyGesture.Modifiers*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Windows.Input.InputGesture\n  isExternal: false\n  name: System.Windows.Input.InputGesture\n- uid: System.ComponentModel.InvalidEnumArgumentException\n  parent: System.ComponentModel\n  isExternal: false\n  name: InvalidEnumArgumentException\n  nameWithType: InvalidEnumArgumentException\n  fullName: System.ComponentModel.InvalidEnumArgumentException\n- uid: System.NotSupportedException\n  isExternal: true\n  name: System.NotSupportedException\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key)\n  parent: System.Windows.Input.KeyGesture\n  isExternal: false\n  name: KeyGesture(Key)\n  nameWithType: KeyGesture.KeyGesture(Key)\n  fullName: System.Windows.Input.KeyGesture.KeyGesture(Key)\n- uid: System.Windows.Input.Key\n  parent: System.Windows.Input\n  isExternal: false\n  name: Key\n  nameWithType: Key\n  fullName: System.Windows.Input.Key\n- uid: System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys)\n  parent: System.Windows.Input.KeyGesture\n  isExternal: false\n  name: KeyGesture(Key,ModifierKeys)\n  nameWithType: KeyGesture.KeyGesture(Key,ModifierKeys)\n  fullName: System.Windows.Input.KeyGesture.KeyGesture(Key,ModifierKeys)\n- uid: System.Windows.Input.ModifierKeys\n  parent: System.Windows.Input\n  isExternal: false\n  name: ModifierKeys\n  nameWithType: ModifierKeys\n  fullName: System.Windows.Input.ModifierKeys\n- uid: System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys,System.String)\n  parent: System.Windows.Input.KeyGesture\n  isExternal: false\n  name: KeyGesture(Key,ModifierKeys,String)\n  nameWithType: KeyGesture.KeyGesture(Key,ModifierKeys,String)\n  fullName: System.Windows.Input.KeyGesture.KeyGesture(Key,ModifierKeys,String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Windows.Input.KeyGesture.DisplayString\n  parent: System.Windows.Input.KeyGesture\n  isExternal: false\n  name: DisplayString\n  nameWithType: KeyGesture.DisplayString\n  fullName: System.Windows.Input.KeyGesture.DisplayString\n- uid: System.Windows.Input.KeyGesture.GetDisplayStringForCulture(System.Globalization.CultureInfo)\n  parent: System.Windows.Input.KeyGesture\n  isExternal: false\n  name: GetDisplayStringForCulture(CultureInfo)\n  nameWithType: KeyGesture.GetDisplayStringForCulture(CultureInfo)\n  fullName: System.Windows.Input.KeyGesture.GetDisplayStringForCulture(CultureInfo)\n- uid: System.Globalization.CultureInfo\n  parent: System.Globalization\n  isExternal: true\n  name: CultureInfo\n  nameWithType: CultureInfo\n  fullName: System.Globalization.CultureInfo\n- uid: System.Windows.Input.KeyGesture.Key\n  parent: System.Windows.Input.KeyGesture\n  isExternal: false\n  name: Key\n  nameWithType: KeyGesture.Key\n  fullName: System.Windows.Input.KeyGesture.Key\n- uid: System.Windows.Input.KeyGesture.Matches(System.Object,System.Windows.Input.InputEventArgs)\n  parent: System.Windows.Input.KeyGesture\n  isExternal: false\n  name: Matches(Object,InputEventArgs)\n  nameWithType: KeyGesture.Matches(Object,InputEventArgs)\n  fullName: System.Windows.Input.KeyGesture.Matches(Object,InputEventArgs)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Windows.Input.InputEventArgs\n  parent: System.Windows.Input\n  isExternal: false\n  name: InputEventArgs\n  nameWithType: InputEventArgs\n  fullName: System.Windows.Input.InputEventArgs\n- uid: System.Windows.Input.KeyGesture.Modifiers\n  parent: System.Windows.Input.KeyGesture\n  isExternal: false\n  name: Modifiers\n  nameWithType: KeyGesture.Modifiers\n  fullName: System.Windows.Input.KeyGesture.Modifiers\n- uid: System.Windows.Input.KeyGesture.#ctor*\n  parent: System.Windows.Input.KeyGesture\n  isExternal: false\n  name: KeyGesture\n  nameWithType: KeyGesture.KeyGesture\n- uid: System.Windows.Input.KeyGesture.DisplayString*\n  parent: System.Windows.Input.KeyGesture\n  isExternal: false\n  name: DisplayString\n  nameWithType: KeyGesture.DisplayString\n- uid: System.Windows.Input.KeyGesture.GetDisplayStringForCulture*\n  parent: System.Windows.Input.KeyGesture\n  isExternal: false\n  name: GetDisplayStringForCulture\n  nameWithType: KeyGesture.GetDisplayStringForCulture\n- uid: System.Windows.Input.KeyGesture.Key*\n  parent: System.Windows.Input.KeyGesture\n  isExternal: false\n  name: Key\n  nameWithType: KeyGesture.Key\n- uid: System.Windows.Input.KeyGesture.Matches*\n  parent: System.Windows.Input.KeyGesture\n  isExternal: false\n  name: Matches\n  nameWithType: KeyGesture.Matches\n- uid: System.Windows.Input.KeyGesture.Modifiers*\n  parent: System.Windows.Input.KeyGesture\n  isExternal: false\n  name: Modifiers\n  nameWithType: KeyGesture.Modifiers\n"}