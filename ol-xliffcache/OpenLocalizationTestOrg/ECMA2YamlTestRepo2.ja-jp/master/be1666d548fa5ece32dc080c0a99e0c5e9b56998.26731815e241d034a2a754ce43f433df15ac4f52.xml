{"nodes":[{"pos":[768,896],"content":"Exposes the client side of an anonymous pipe stream, which supports both synchronous and asynchronous read and write operations.","needQuote":true,"needEscape":true,"nodes":[{"content":"Exposes the client side of an anonymous pipe stream, which supports both synchronous and asynchronous read and write operations.","pos":[0,128]}]},{"pos":[909,2183],"content":"Anonymous pipes help provide safe and secure interprocess communication between child and parent processes. The AnonymousPipeClientStream class enables a child process to connect to and exchange information with a parent process.       Anonymous pipes are unnamed, one-way pipes that typically transfer data between parent and child processes. Anonymous pipes are always local; they cannot be used over a network. A <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection> is not supported because anonymous pipes are defined to be one-way.       Anonymous pipes do not support <xref:System.IO.Pipes.PipeTransmissionMode> read modes.       The client side of an anonymous pipe must be created from a pipe handle provided by the server side by calling the <xref:System.IO.Pipes.AnonymousPipeServerStream.GetClientHandleAsString%2A> method. The string is then passed as a parameter when creating the client process. From the client process, it is passed to the AnonymousPipeClientStream constructor as the `pipeHandleAsString` parameter.      > [!NOTE] >  For [!INCLUDE[winxppro](~/add/includes/winxppro-md.md)] and [!INCLUDE[win2kserver](~/add/includes/win2kserver-md.md)], a maximum of 10 pipes can simultaneously connect over the network.","needQuote":false,"needEscape":true,"nodes":[{"content":"Anonymous pipes help provide safe and secure interprocess communication between child and parent processes.","pos":[0,107]},{"content":"The AnonymousPipeClientStream class enables a child process to connect to and exchange information with a parent process.","pos":[108,229]},{"content":"Anonymous pipes are unnamed, one-way pipes that typically transfer data between parent and child processes.","pos":[236,343]},{"content":"Anonymous pipes are always local; they cannot be used over a network.","pos":[344,413]},{"content":"A &lt;xref:System.IO.Pipes.PipeDirection&gt; value of &lt;xref:System.IO.Pipes.PipeDirection&gt; is not supported because anonymous pipes are defined to be one-way.","pos":[414,566],"source":" A <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection> is not supported because anonymous pipes are defined to be one-way."},{"content":"Anonymous pipes do not support &lt;xref:System.IO.Pipes.PipeTransmissionMode&gt; read modes.","pos":[573,659],"source":"       Anonymous pipes do not support <xref:System.IO.Pipes.PipeTransmissionMode> read modes."},{"content":"The client side of an anonymous pipe must be created from a pipe handle provided by the server side by calling the &lt;xref:System.IO.Pipes.AnonymousPipeServerStream.GetClientHandleAsString%2A&gt; method.","pos":[666,864],"source":"       The client side of an anonymous pipe must be created from a pipe handle provided by the server side by calling the <xref:System.IO.Pipes.AnonymousPipeServerStream.GetClientHandleAsString%2A> method."},{"content":"The string is then passed as a parameter when creating the client process.","pos":[865,939]},{"content":"From the client process, it is passed to the AnonymousPipeClientStream constructor as the <ph id=\"ph1\">`pipeHandleAsString`</ph> parameter.","pos":[940,1061],"source":" From the client process, it is passed to the AnonymousPipeClientStream constructor as the `pipeHandleAsString` parameter."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  For <ph id=\"ph2\">[!INCLUDE[winxppro](~/add/includes/winxppro-md.md)]</ph> and <ph id=\"ph3\">[!INCLUDE[win2kserver](~/add/includes/win2kserver-md.md)]</ph>, a maximum of 10 pipes can simultaneously connect over the network.","pos":[1067,1265],"source":"      > [!NOTE] >  For [!INCLUDE[winxppro](~/add/includes/winxppro-md.md)] and [!INCLUDE[win2kserver](~/add/includes/win2kserver-md.md)], a maximum of 10 pipes can simultaneously connect over the network."}]},{"pos":[6099,6262],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.IO.Pipes.AnonymousPipeClientStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified string representation of the pipe handle.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.IO.Pipes.AnonymousPipeClientStream\"></xref> class with the specified string representation of the pipe handle."},{"pos":[6274,6411],"content":"For constructors without a <xref:System.IO.Pipes.PipeDirection> parameter, the default direction is <xref:System.IO.Pipes.PipeDirection>.","needQuote":true,"needEscape":true,"nodes":[{"content":"For constructors without a &lt;xref:System.IO.Pipes.PipeDirection&gt; parameter, the default direction is &lt;xref:System.IO.Pipes.PipeDirection&gt;.","pos":[0,137],"source":"For constructors without a <xref:System.IO.Pipes.PipeDirection> parameter, the default direction is <xref:System.IO.Pipes.PipeDirection>."}]},{"pos":[7105,7146],"content":"A string that represents the pipe handle.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string that represents the pipe handle.","pos":[0,41]}]},{"pos":[7310,7369],"content":"<ph id=\"ph1\">&lt;code&gt;pipeHandleAsString&lt;/code&gt;</ph> is not a valid pipe handle.","needQuote":true,"needEscape":true,"source":"<code>pipeHandleAsString</code> is not a valid pipe handle."},{"pos":[8044,8173],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.IO.Pipes.AnonymousPipeClientStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class from the specified handle.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.IO.Pipes.AnonymousPipeClientStream\"></xref> class from the specified handle."},{"pos":[8185,8337],"content":"A <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection> is not supported because anonymous pipes are defined to be one-way.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.IO.Pipes.PipeDirection&gt; value of &lt;xref:System.IO.Pipes.PipeDirection&gt; is not supported because anonymous pipes are defined to be one-way.","pos":[0,152],"source":"A <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection> is not supported because anonymous pipes are defined to be one-way."}]},{"pos":[9198,9410],"content":"One of the enumeration values that determines the direction of the pipe.       Anonymous pipes can only be in one direction, so `direction` cannot be set to <xref href=\"System.IO.Pipes.PipeDirection\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"One of the enumeration values that determines the direction of the pipe.","pos":[0,72]},{"content":"Anonymous pipes can only be in one direction, so <ph id=\"ph1\">`direction`</ph> cannot be set to <bpt id=\"p1\">&lt;xref href=\"System.IO.Pipes.PipeDirection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[79,208],"source":"       Anonymous pipes can only be in one direction, so `direction` cannot be set to <xref href=\"System.IO.Pipes.PipeDirection\"></xref>."}]},{"pos":[9511,9635],"content":"A safe handle for the pipe that this <bpt id=\"p1\">&lt;xref href=\"System.IO.Pipes.AnonymousPipeClientStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object will encapsulate.","needQuote":true,"needEscape":true,"source":"A safe handle for the pipe that this <xref href=\"System.IO.Pipes.AnonymousPipeClientStream\"></xref> object will encapsulate."},{"pos":[9805,9855],"content":"<ph id=\"ph1\">&lt;code&gt;safePipeHandle &lt;/code&gt;</ph>is not a valid handle.","needQuote":true,"needEscape":true,"source":"<code>safePipeHandle </code>is not a valid handle."},{"pos":[9958,10050],"content":"<ph id=\"ph1\">&lt;code&gt;safePipeHandle&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>safePipeHandle</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[10153,10237],"content":"<ph id=\"ph1\">&lt;code&gt;direction&lt;/code&gt;</ph> is set to <bpt id=\"p1\">&lt;xref href=\"System.IO.Pipes.PipeDirection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>direction</code> is set to <xref href=\"System.IO.Pipes.PipeDirection\"></xref>."},{"pos":[10327,10425],"content":"An I/O error, such as a disk error, has occurred.       -or-       The stream has been closed.","needQuote":false,"needEscape":true,"nodes":[{"content":"An I/O error, such as a disk error, has occurred.       -or-       The stream has been closed.","pos":[0,94],"nodes":[{"content":"An I/O error, such as a disk error, has occurred.","pos":[0,49]},{"content":"-or-       The stream has been closed.","pos":[56,94]}]}]},{"pos":[11019,11203],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.IO.Pipes.AnonymousPipeClientStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified pipe direction and a string representation of the pipe handle.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.IO.Pipes.AnonymousPipeClientStream\"></xref> class with the specified pipe direction and a string representation of the pipe handle."},{"pos":[11215,11367],"content":"A <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection> is not supported because anonymous pipes are defined to be one-way.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.IO.Pipes.PipeDirection&gt; value of &lt;xref:System.IO.Pipes.PipeDirection&gt; is not supported because anonymous pipes are defined to be one-way.","pos":[0,152],"source":"A <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection> is not supported because anonymous pipes are defined to be one-way."}]},{"pos":[12307,12519],"content":"One of the enumeration values that determines the direction of the pipe.       Anonymous pipes can only be in one direction, so `direction` cannot be set to <xref href=\"System.IO.Pipes.PipeDirection\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"One of the enumeration values that determines the direction of the pipe.","pos":[0,72]},{"content":"Anonymous pipes can only be in one direction, so <ph id=\"ph1\">`direction`</ph> cannot be set to <bpt id=\"p1\">&lt;xref href=\"System.IO.Pipes.PipeDirection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[79,208],"source":"       Anonymous pipes can only be in one direction, so `direction` cannot be set to <xref href=\"System.IO.Pipes.PipeDirection\"></xref>."}]},{"pos":[12595,12636],"content":"A string that represents the pipe handle.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string that represents the pipe handle.","pos":[0,41]}]},{"pos":[12806,12859],"content":"<ph id=\"ph1\">&lt;code&gt;pipeHandleAsString&lt;/code&gt;</ph> is an invalid handle.","needQuote":true,"needEscape":true,"source":"<code>pipeHandleAsString</code> is an invalid handle."},{"pos":[12962,13058],"content":"<ph id=\"ph1\">&lt;code&gt;pipeHandleAsString&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>pipeHandleAsString</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[13161,13245],"content":"<ph id=\"ph1\">&lt;code&gt;direction&lt;/code&gt;</ph> is set to <bpt id=\"p1\">&lt;xref href=\"System.IO.Pipes.PipeDirection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>direction</code> is set to <xref href=\"System.IO.Pipes.PipeDirection\"></xref>."},{"pos":[13636,13821],"content":"Releases unmanaged resources and performs other cleanup operations before the <bpt id=\"p1\">&lt;xref href=\"System.IO.Pipes.AnonymousPipeClientStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance is reclaimed by garbage collection.","needQuote":true,"needEscape":true,"source":"Releases unmanaged resources and performs other cleanup operations before the <xref href=\"System.IO.Pipes.AnonymousPipeClientStream\"></xref> instance is reclaimed by garbage collection."},{"pos":[14362,14462],"content":"Sets the reading mode for the <bpt id=\"p1\">&lt;xref href=\"System.IO.Pipes.AnonymousPipeClientStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Sets the reading mode for the <xref href=\"System.IO.Pipes.AnonymousPipeClientStream\"></xref> object."},{"pos":[14474,14559],"content":"Anonymous pipes do not support <xref:System.IO.Pipes.PipeTransmissionMode> read mode.","needQuote":true,"needEscape":true,"nodes":[{"content":"Anonymous pipes do not support &lt;xref:System.IO.Pipes.PipeTransmissionMode&gt; read mode.","pos":[0,85],"source":"Anonymous pipes do not support <xref:System.IO.Pipes.PipeTransmissionMode> read mode."}]},{"pos":[15497,15637],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.IO.Pipes.PipeTransmissionMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for the <bpt id=\"p2\">&lt;xref href=\"System.IO.Pipes.AnonymousPipeClientStream\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.IO.Pipes.PipeTransmissionMode\"></xref> for the <xref href=\"System.IO.Pipes.AnonymousPipeClientStream\"></xref> object."},{"pos":[15830,15963],"content":"The transmission mode is not valid. For anonymous pipes, only <xref href=\"System.IO.Pipes.PipeTransmissionMode\"></xref> is supported.","needQuote":true,"needEscape":true,"nodes":[{"content":"The transmission mode is not valid.","pos":[0,35]},{"content":"For anonymous pipes, only <bpt id=\"p1\">&lt;xref href=\"System.IO.Pipes.PipeTransmissionMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is supported.","pos":[36,133],"source":" For anonymous pipes, only <xref href=\"System.IO.Pipes.PipeTransmissionMode\"></xref> is supported."}]},{"pos":[16066,16149],"content":"The transmission mode is <bpt id=\"p1\">&lt;xref href=\"System.IO.Pipes.PipeTransmissionMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The transmission mode is <xref href=\"System.IO.Pipes.PipeTransmissionMode\"></xref>."},{"pos":[16238,16291],"content":"The connection is broken or another I/O error occurs.","needQuote":true,"needEscape":true,"nodes":[{"content":"The connection is broken or another I/O error occurs.","pos":[0,53]}]},{"pos":[16398,16417],"content":"The pipe is closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The pipe is closed.","pos":[0,19]}]},{"pos":[16844,16906],"content":"Gets the pipe transmission mode supported by the current pipe.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the pipe transmission mode supported by the current pipe.","pos":[0,62]}]},{"pos":[16918,17003],"content":"Anonymous pipes do not support <xref:System.IO.Pipes.PipeTransmissionMode> read mode.","needQuote":true,"needEscape":true,"nodes":[{"content":"Anonymous pipes do not support &lt;xref:System.IO.Pipes.PipeTransmissionMode&gt; read mode.","pos":[0,85],"source":"Anonymous pipes do not support <xref:System.IO.Pipes.PipeTransmissionMode> read mode."}]},{"pos":[17870,17962],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.IO.Pipes.PipeTransmissionMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> supported by the current pipe.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.IO.Pipes.PipeTransmissionMode\"></xref> supported by the current pipe."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.IO.Pipes.AnonymousPipeClientStream\n  id: AnonymousPipeClientStream\n  children:\n  - System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.String)\n  - System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.IO.Pipes.PipeDirection,Microsoft.Win32.SafeHandles.SafePipeHandle)\n  - System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.IO.Pipes.PipeDirection,System.String)\n  - System.IO.Pipes.AnonymousPipeClientStream.Finalize\n  - System.IO.Pipes.AnonymousPipeClientStream.ReadMode\n  - System.IO.Pipes.AnonymousPipeClientStream.TransmissionMode\n  langs:\n  - csharp\n  name: AnonymousPipeClientStream\n  nameWithType: AnonymousPipeClientStream\n  fullName: System.IO.Pipes.AnonymousPipeClientStream\n  type: Class\n  summary: Exposes the client side of an anonymous pipe stream, which supports both synchronous and asynchronous read and write operations.\n  remarks: \"Anonymous pipes help provide safe and secure interprocess communication between child and parent processes. The AnonymousPipeClientStream class enables a child process to connect to and exchange information with a parent process.  \\n  \\n Anonymous pipes are unnamed, one-way pipes that typically transfer data between parent and child processes. Anonymous pipes are always local; they cannot be used over a network. A <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection> is not supported because anonymous pipes are defined to be one-way.  \\n  \\n Anonymous pipes do not support <xref:System.IO.Pipes.PipeTransmissionMode> read modes.  \\n  \\n The client side of an anonymous pipe must be created from a pipe handle provided by the server side by calling the <xref:System.IO.Pipes.AnonymousPipeServerStream.GetClientHandleAsString%2A> method. The string is then passed as a parameter when creating the client process. From the client process, it is passed to the AnonymousPipeClientStream constructor as the `pipeHandleAsString` parameter.  \\n  \\n> [!NOTE]\\n>  For [!INCLUDE[winxppro](~/add/includes/winxppro-md.md)] and [!INCLUDE[win2kserver](~/add/includes/win2kserver-md.md)], a maximum of 10 pipes can simultaneously connect over the network.\"\n  example:\n  - \"The following example demonstrates a way to send a string from a parent process to a child process by using anonymous pipes. This example creates an <xref:System.IO.Pipes.AnonymousPipeServerStream> object in a parent process with a <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection>. It also creates an AnonymousPipeClientStream object in a child process with a <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection>. The parent process then sends a user-supplied string to the child process. The string is displayed to the console.  \\n  \\n This example is for the client process, which is started by the server process. Name the resulting executable from the client code `pipeClient.exe` and copy it to the same directory as the server executable when you run this example. For the entire code example, including the code for both the pipe client and server, see [How to: Use Anonymous Pipes for Local Interprocess Communication](~/add/includes/ajax-current-ext-md.md).  \\n  \\n [!code-cs[System.IO.Pipes.AnonymousPipeClientStream_Sample#01](~/add/codesnippet/csharp/t-system.io.pipes.anonym_0_1.cs)]\\n [!code-cpp[System.IO.Pipes.AnonymousPipeClientStream_Sample#01](~/add/codesnippet/cpp/t-system.io.pipes.anonym_0_1.cpp)]\\n [!code-vb[System.IO.Pipes.AnonymousPipeClientStream_Sample#01](~/add/codesnippet/visualbasic/t-system.io.pipes.anonym_0_1.vb)]\"\n  syntax:\n    content: 'public sealed class AnonymousPipeClientStream : System.IO.Pipes.PipeStream'\n  inheritance:\n  - System.IO.Stream\n  - System.IO.Pipes.PipeStream\n  implements: []\n  inheritedMembers:\n  - System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  - System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  - System.IO.Pipes.PipeStream.CanRead\n  - System.IO.Pipes.PipeStream.CanSeek\n  - System.IO.Pipes.PipeStream.CanWrite\n  - System.IO.Pipes.PipeStream.CheckPipePropertyOperations\n  - System.IO.Pipes.PipeStream.CheckReadOperations\n  - System.IO.Pipes.PipeStream.CheckWriteOperations\n  - System.IO.Pipes.PipeStream.Dispose(System.Boolean)\n  - System.IO.Pipes.PipeStream.EndRead(System.IAsyncResult)\n  - System.IO.Pipes.PipeStream.EndWrite(System.IAsyncResult)\n  - System.IO.Pipes.PipeStream.Flush\n  - System.IO.Pipes.PipeStream.GetAccessControl\n  - System.IO.Pipes.PipeStream.InBufferSize\n  - System.IO.Pipes.PipeStream.InitializeHandle(Microsoft.Win32.SafeHandles.SafePipeHandle,System.Boolean,System.Boolean)\n  - System.IO.Pipes.PipeStream.IsAsync\n  - System.IO.Pipes.PipeStream.IsConnected\n  - System.IO.Pipes.PipeStream.IsHandleExposed\n  - System.IO.Pipes.PipeStream.IsMessageComplete\n  - System.IO.Pipes.PipeStream.Length\n  - System.IO.Pipes.PipeStream.OutBufferSize\n  - System.IO.Pipes.PipeStream.Position\n  - System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)\n  - System.IO.Pipes.PipeStream.ReadByte\n  - System.IO.Pipes.PipeStream.SafePipeHandle\n  - System.IO.Pipes.PipeStream.Seek(System.Int64,System.IO.SeekOrigin)\n  - System.IO.Pipes.PipeStream.SetAccessControl(System.IO.Pipes.PipeSecurity)\n  - System.IO.Pipes.PipeStream.SetLength(System.Int64)\n  - System.IO.Pipes.PipeStream.WaitForPipeDrain\n  - System.IO.Pipes.PipeStream.Write(System.Byte[],System.Int32,System.Int32)\n  - System.IO.Pipes.PipeStream.WriteByte(System.Byte)\n  platform:\n  - net462\n- uid: System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.IO.Pipes.AnonymousPipeClientStream\n  langs:\n  - csharp\n  name: AnonymousPipeClientStream(String)\n  nameWithType: AnonymousPipeClientStream.AnonymousPipeClientStream(String)\n  fullName: System.IO.Pipes.AnonymousPipeClientStream.AnonymousPipeClientStream(String)\n  type: Constructor\n  assemblies:\n  - System.Core\n  namespace: System.IO.Pipes\n  summary: Initializes a new instance of the <xref href=\"System.IO.Pipes.AnonymousPipeClientStream\"></xref> class with the specified string representation of the pipe handle.\n  remarks: For constructors without a <xref:System.IO.Pipes.PipeDirection> parameter, the default direction is <xref:System.IO.Pipes.PipeDirection>.\n  example:\n  - \"The following example demonstrates a way to send a string from a parent process to a child process by using anonymous pipes. In this example, an <xref:System.IO.Pipes.AnonymousPipeClientStream> object is created in a child process.  \\n  \\n [!code-vb[System.IO.Pipes.AnonymousPipeClientStream_ctorSample1#01](~/add/codesnippet/visualbasic/m-system.io.pipes.anonym_0_1.vb)]\\n [!code-cs[System.IO.Pipes.AnonymousPipeClientStream_ctorSample1#01](~/add/codesnippet/csharp/m-system.io.pipes.anonym_0_1.cs)]\"\n  syntax:\n    content: public AnonymousPipeClientStream (string pipeHandleAsString);\n    parameters:\n    - id: pipeHandleAsString\n      type: System.String\n      description: A string that represents the pipe handle.\n  overload: System.IO.Pipes.AnonymousPipeClientStream.#ctor*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: <code>pipeHandleAsString</code> is not a valid pipe handle.\n  platform:\n  - net462\n- uid: System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.IO.Pipes.PipeDirection,Microsoft.Win32.SafeHandles.SafePipeHandle)\n  id: '#ctor(System.IO.Pipes.PipeDirection,Microsoft.Win32.SafeHandles.SafePipeHandle)'\n  parent: System.IO.Pipes.AnonymousPipeClientStream\n  langs:\n  - csharp\n  name: AnonymousPipeClientStream(PipeDirection,SafePipeHandle)\n  nameWithType: AnonymousPipeClientStream.AnonymousPipeClientStream(PipeDirection,SafePipeHandle)\n  fullName: System.IO.Pipes.AnonymousPipeClientStream.AnonymousPipeClientStream(PipeDirection,SafePipeHandle)\n  type: Constructor\n  assemblies:\n  - System.Core\n  namespace: System.IO.Pipes\n  summary: Initializes a new instance of the <xref href=\"System.IO.Pipes.AnonymousPipeClientStream\"></xref> class from the specified handle.\n  remarks: A <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection> is not supported because anonymous pipes are defined to be one-way.\n  example:\n  - \"The following example demonstrates a way to send a string from a parent process to a child process by using anonymous pipes. In this example, an <xref:System.IO.Pipes.AnonymousPipeClientStream> object is created in a child process with a <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection>.  \\n  \\n [!code-vb[System.IO.Pipes.AnonymousPipeClientStream_ctorSample1#01](~/add/codesnippet/visualbasic/9fcf339c-5c1c-4422-821c-_1.vb)]\\n [!code-cs[System.IO.Pipes.AnonymousPipeClientStream_ctorSample1#01](~/add/codesnippet/csharp/9fcf339c-5c1c-4422-821c-_1.cs)]\"\n  syntax:\n    content: public AnonymousPipeClientStream (System.IO.Pipes.PipeDirection direction, Microsoft.Win32.SafeHandles.SafePipeHandle safePipeHandle);\n    parameters:\n    - id: direction\n      type: System.IO.Pipes.PipeDirection\n      description: \"One of the enumeration values that determines the direction of the pipe.  \\n  \\n Anonymous pipes can only be in one direction, so `direction` cannot be set to <xref href=\\\"System.IO.Pipes.PipeDirection\\\"></xref>.\"\n    - id: safePipeHandle\n      type: Microsoft.Win32.SafeHandles.SafePipeHandle\n      description: A safe handle for the pipe that this <xref href=\"System.IO.Pipes.AnonymousPipeClientStream\"></xref> object will encapsulate.\n  overload: System.IO.Pipes.AnonymousPipeClientStream.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>safePipeHandle </code>is not a valid handle.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>safePipeHandle</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>direction</code> is set to <xref href=\"System.IO.Pipes.PipeDirection\"></xref>.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"An I/O error, such as a disk error, has occurred.  \\n  \\n -or-  \\n  \\n The stream has been closed.\"\n  platform:\n  - net462\n- uid: System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.IO.Pipes.PipeDirection,System.String)\n  id: '#ctor(System.IO.Pipes.PipeDirection,System.String)'\n  parent: System.IO.Pipes.AnonymousPipeClientStream\n  langs:\n  - csharp\n  name: AnonymousPipeClientStream(PipeDirection,String)\n  nameWithType: AnonymousPipeClientStream.AnonymousPipeClientStream(PipeDirection,String)\n  fullName: System.IO.Pipes.AnonymousPipeClientStream.AnonymousPipeClientStream(PipeDirection,String)\n  type: Constructor\n  assemblies:\n  - System.Core\n  namespace: System.IO.Pipes\n  summary: Initializes a new instance of the <xref href=\"System.IO.Pipes.AnonymousPipeClientStream\"></xref> class with the specified pipe direction and a string representation of the pipe handle.\n  remarks: A <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection> is not supported because anonymous pipes are defined to be one-way.\n  example:\n  - \"The following example demonstrates a way to send a string from a parent process to a child process by using anonymous pipes. In this example, an <xref:System.IO.Pipes.AnonymousPipeClientStream> object is created in a child process with a <xref:System.IO.Pipes.PipeDirection> value of <xref:System.IO.Pipes.PipeDirection>.  \\n  \\n [!code-cs[System.IO.Pipes.AnonymousPipeClientStream_Sample#01](~/add/codesnippet/csharp/9b07c766-36fc-4774-abaa-_1.cs)]\\n [!code-cpp[System.IO.Pipes.AnonymousPipeClientStream_Sample#01](~/add/codesnippet/cpp/9b07c766-36fc-4774-abaa-_1.cpp)]\\n [!code-vb[System.IO.Pipes.AnonymousPipeClientStream_Sample#01](~/add/codesnippet/visualbasic/9b07c766-36fc-4774-abaa-_1.vb)]\"\n  syntax:\n    content: public AnonymousPipeClientStream (System.IO.Pipes.PipeDirection direction, string pipeHandleAsString);\n    parameters:\n    - id: direction\n      type: System.IO.Pipes.PipeDirection\n      description: \"One of the enumeration values that determines the direction of the pipe.  \\n  \\n Anonymous pipes can only be in one direction, so `direction` cannot be set to <xref href=\\\"System.IO.Pipes.PipeDirection\\\"></xref>.\"\n    - id: pipeHandleAsString\n      type: System.String\n      description: A string that represents the pipe handle.\n  overload: System.IO.Pipes.AnonymousPipeClientStream.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>pipeHandleAsString</code> is an invalid handle.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>pipeHandleAsString</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>direction</code> is set to <xref href=\"System.IO.Pipes.PipeDirection\"></xref>.\n  platform:\n  - net462\n- uid: System.IO.Pipes.AnonymousPipeClientStream.Finalize\n  id: Finalize\n  parent: System.IO.Pipes.AnonymousPipeClientStream\n  langs:\n  - csharp\n  name: Finalize()\n  nameWithType: AnonymousPipeClientStream.Finalize()\n  fullName: System.IO.Pipes.AnonymousPipeClientStream.Finalize()\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.IO.Pipes\n  summary: Releases unmanaged resources and performs other cleanup operations before the <xref href=\"System.IO.Pipes.AnonymousPipeClientStream\"></xref> instance is reclaimed by garbage collection.\n  syntax:\n    content: ~AnonymousPipeClientStream ();\n    parameters: []\n  overload: System.IO.Pipes.AnonymousPipeClientStream.Finalize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IO.Pipes.AnonymousPipeClientStream.ReadMode\n  id: ReadMode\n  parent: System.IO.Pipes.AnonymousPipeClientStream\n  langs:\n  - csharp\n  name: ReadMode\n  nameWithType: AnonymousPipeClientStream.ReadMode\n  fullName: System.IO.Pipes.AnonymousPipeClientStream.ReadMode\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.IO.Pipes\n  summary: Sets the reading mode for the <xref href=\"System.IO.Pipes.AnonymousPipeClientStream\"></xref> object.\n  remarks: Anonymous pipes do not support <xref:System.IO.Pipes.PipeTransmissionMode> read mode.\n  example:\n  - \"The following example demonstrates a way to send a string from a parent process to a child process by using anonymous pipes. In this example, an <xref:System.IO.Pipes.AnonymousPipeClientStream> object is created in a child process. The <xref:System.NotSupportedException> is caught when the ReadMode property is set to <xref:System.IO.Pipes.PipeTransmissionMode>.  \\n  \\n [!code-cs[System.IO.Pipes.AnonymousPipeClientStream_Sample#01](~/add/codesnippet/csharp/p-system.io.pipes.anonym_2_1.cs)]\\n [!code-cpp[System.IO.Pipes.AnonymousPipeClientStream_Sample#01](~/add/codesnippet/cpp/p-system.io.pipes.anonym_2_1.cpp)]\\n [!code-vb[System.IO.Pipes.AnonymousPipeClientStream_Sample#01](~/add/codesnippet/visualbasic/p-system.io.pipes.anonym_2_1.vb)]\"\n  syntax:\n    content: public override System.IO.Pipes.PipeTransmissionMode ReadMode { set; }\n    return:\n      type: System.IO.Pipes.PipeTransmissionMode\n      description: The <xref href=\"System.IO.Pipes.PipeTransmissionMode\"></xref> for the <xref href=\"System.IO.Pipes.AnonymousPipeClientStream\"></xref> object.\n  overload: System.IO.Pipes.AnonymousPipeClientStream.ReadMode*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The transmission mode is not valid. For anonymous pipes, only <xref href=\"System.IO.Pipes.PipeTransmissionMode\"></xref> is supported.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The transmission mode is <xref href=\"System.IO.Pipes.PipeTransmissionMode\"></xref>.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: The connection is broken or another I/O error occurs.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The pipe is closed.\n  platform:\n  - net462\n- uid: System.IO.Pipes.AnonymousPipeClientStream.TransmissionMode\n  id: TransmissionMode\n  parent: System.IO.Pipes.AnonymousPipeClientStream\n  langs:\n  - csharp\n  name: TransmissionMode\n  nameWithType: AnonymousPipeClientStream.TransmissionMode\n  fullName: System.IO.Pipes.AnonymousPipeClientStream.TransmissionMode\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.IO.Pipes\n  summary: Gets the pipe transmission mode supported by the current pipe.\n  remarks: Anonymous pipes do not support <xref:System.IO.Pipes.PipeTransmissionMode> read mode.\n  example:\n  - \"The following example demonstrates a way to send a string from a parent process to a child process by using anonymous pipes. In this example, an <xref:System.IO.Pipes.AnonymousPipeClientStream> object is created in a child process and the TransmissionMode is displayed to the console.  \\n  \\n [!code-cs[System.IO.Pipes.AnonymousPipeClientStream_Sample#01](~/add/codesnippet/csharp/p-system.io.pipes.anonym_3_1.cs)]\\n [!code-cpp[System.IO.Pipes.AnonymousPipeClientStream_Sample#01](~/add/codesnippet/cpp/p-system.io.pipes.anonym_3_1.cpp)]\\n [!code-vb[System.IO.Pipes.AnonymousPipeClientStream_Sample#01](~/add/codesnippet/visualbasic/p-system.io.pipes.anonym_3_1.vb)]\"\n  syntax:\n    content: public override System.IO.Pipes.PipeTransmissionMode TransmissionMode { get; }\n    return:\n      type: System.IO.Pipes.PipeTransmissionMode\n      description: The <xref href=\"System.IO.Pipes.PipeTransmissionMode\"></xref> supported by the current pipe.\n  overload: System.IO.Pipes.AnonymousPipeClientStream.TransmissionMode*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.IO.Pipes.PipeStream\n  isExternal: false\n  name: System.IO.Pipes.PipeStream\n- uid: System.IO.IOException\n  isExternal: true\n  name: System.IO.IOException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.NotSupportedException\n  isExternal: true\n  name: System.NotSupportedException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.ObjectDisposedException\n  isExternal: true\n  name: System.ObjectDisposedException\n- uid: System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.String)\n  parent: System.IO.Pipes.AnonymousPipeClientStream\n  isExternal: false\n  name: AnonymousPipeClientStream(String)\n  nameWithType: AnonymousPipeClientStream.AnonymousPipeClientStream(String)\n  fullName: System.IO.Pipes.AnonymousPipeClientStream.AnonymousPipeClientStream(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.IO.Pipes.PipeDirection,Microsoft.Win32.SafeHandles.SafePipeHandle)\n  parent: System.IO.Pipes.AnonymousPipeClientStream\n  isExternal: false\n  name: AnonymousPipeClientStream(PipeDirection,SafePipeHandle)\n  nameWithType: AnonymousPipeClientStream.AnonymousPipeClientStream(PipeDirection,SafePipeHandle)\n  fullName: System.IO.Pipes.AnonymousPipeClientStream.AnonymousPipeClientStream(PipeDirection,SafePipeHandle)\n- uid: System.IO.Pipes.PipeDirection\n  parent: System.IO.Pipes\n  isExternal: false\n  name: PipeDirection\n  nameWithType: PipeDirection\n  fullName: System.IO.Pipes.PipeDirection\n- uid: Microsoft.Win32.SafeHandles.SafePipeHandle\n  parent: Microsoft.Win32.SafeHandles\n  isExternal: false\n  name: SafePipeHandle\n  nameWithType: SafePipeHandle\n  fullName: Microsoft.Win32.SafeHandles.SafePipeHandle\n- uid: System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.IO.Pipes.PipeDirection,System.String)\n  parent: System.IO.Pipes.AnonymousPipeClientStream\n  isExternal: false\n  name: AnonymousPipeClientStream(PipeDirection,String)\n  nameWithType: AnonymousPipeClientStream.AnonymousPipeClientStream(PipeDirection,String)\n  fullName: System.IO.Pipes.AnonymousPipeClientStream.AnonymousPipeClientStream(PipeDirection,String)\n- uid: System.IO.Pipes.AnonymousPipeClientStream.Finalize\n  parent: System.IO.Pipes.AnonymousPipeClientStream\n  isExternal: false\n  name: Finalize()\n  nameWithType: AnonymousPipeClientStream.Finalize()\n  fullName: System.IO.Pipes.AnonymousPipeClientStream.Finalize()\n- uid: System.IO.Pipes.AnonymousPipeClientStream.ReadMode\n  parent: System.IO.Pipes.AnonymousPipeClientStream\n  isExternal: false\n  name: ReadMode\n  nameWithType: AnonymousPipeClientStream.ReadMode\n  fullName: System.IO.Pipes.AnonymousPipeClientStream.ReadMode\n- uid: System.IO.Pipes.PipeTransmissionMode\n  parent: System.IO.Pipes\n  isExternal: false\n  name: PipeTransmissionMode\n  nameWithType: PipeTransmissionMode\n  fullName: System.IO.Pipes.PipeTransmissionMode\n- uid: System.IO.Pipes.AnonymousPipeClientStream.TransmissionMode\n  parent: System.IO.Pipes.AnonymousPipeClientStream\n  isExternal: false\n  name: TransmissionMode\n  nameWithType: AnonymousPipeClientStream.TransmissionMode\n  fullName: System.IO.Pipes.AnonymousPipeClientStream.TransmissionMode\n- uid: System.IO.Pipes.AnonymousPipeClientStream.#ctor*\n  parent: System.IO.Pipes.AnonymousPipeClientStream\n  isExternal: false\n  name: AnonymousPipeClientStream\n  nameWithType: AnonymousPipeClientStream.AnonymousPipeClientStream\n- uid: System.IO.Pipes.AnonymousPipeClientStream.Finalize*\n  parent: System.IO.Pipes.AnonymousPipeClientStream\n  isExternal: false\n  name: Finalize\n  nameWithType: AnonymousPipeClientStream.Finalize\n- uid: System.IO.Pipes.AnonymousPipeClientStream.ReadMode*\n  parent: System.IO.Pipes.AnonymousPipeClientStream\n  isExternal: false\n  name: ReadMode\n  nameWithType: AnonymousPipeClientStream.ReadMode\n- uid: System.IO.Pipes.AnonymousPipeClientStream.TransmissionMode*\n  parent: System.IO.Pipes.AnonymousPipeClientStream\n  isExternal: false\n  name: TransmissionMode\n  nameWithType: AnonymousPipeClientStream.TransmissionMode\n"}