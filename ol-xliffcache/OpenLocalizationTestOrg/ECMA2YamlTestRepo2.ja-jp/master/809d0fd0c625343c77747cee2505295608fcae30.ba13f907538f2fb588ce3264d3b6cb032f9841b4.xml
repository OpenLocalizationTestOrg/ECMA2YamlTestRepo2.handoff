{"nodes":[{"pos":[751,906],"content":"Describes the console key that was pressed, including the character represented by the console key and the state of the SHIFT, ALT, and CTRL modifier keys.","needQuote":true,"needEscape":true,"nodes":[{"content":"Describes the console key that was pressed, including the character represented by the console key and the state of the SHIFT, ALT, and CTRL modifier keys.","pos":[0,155]}]},{"pos":[919,1480],"content":"The ConsoleKeyInfo type is not intended to be created by users. Instead, it is returned to the user in response to calling the <xref:System.Console.ReadKey%2A?displayProperty=fullName> method.       The ConsoleKeyInfo object describes the <xref:System.ConsoleKey> constant and Unicode character, if any, that correspond to the pressed console key. The ConsoleKeyInfo object also describes, in a bitwise combination of <xref:System.ConsoleModifiers> values, whether one or more SHIFT, ALT, or CTRL modifier keys was pressed simultaneously with the console key.","needQuote":false,"needEscape":true,"nodes":[{"content":"The ConsoleKeyInfo type is not intended to be created by users. Instead, it is returned to the user in response to calling the <xref:System.Console.ReadKey%2A?displayProperty=fullName> method.       The ConsoleKeyInfo object describes the <xref:System.ConsoleKey> constant and Unicode character, if any, that correspond to the pressed console key. The ConsoleKeyInfo object also describes, in a bitwise combination of <xref:System.ConsoleModifiers> values, whether one or more SHIFT, ALT, or CTRL modifier keys was pressed simultaneously with the console key.","pos":[0,559],"nodes":[{"content":"The ConsoleKeyInfo type is not intended to be created by users.","pos":[0,63]},{"content":"Instead, it is returned to the user in response to calling the &lt;xref:System.Console.ReadKey%2A?displayProperty=fullName&gt; method.","pos":[64,192],"source":" Instead, it is returned to the user in response to calling the <xref:System.Console.ReadKey%2A?displayProperty=fullName> method."},{"content":"The ConsoleKeyInfo object describes the &lt;xref:System.ConsoleKey&gt; constant and Unicode character, if any, that correspond to the pressed console key.","pos":[199,347],"source":"       The ConsoleKeyInfo object describes the <xref:System.ConsoleKey> constant and Unicode character, if any, that correspond to the pressed console key."},{"content":"The ConsoleKeyInfo object also describes, in a bitwise combination of &lt;xref:System.ConsoleModifiers&gt; values, whether one or more SHIFT, ALT, or CTRL modifier keys was pressed simultaneously with the console key.","pos":[348,559],"source":" The ConsoleKeyInfo object also describes, in a bitwise combination of <xref:System.ConsoleModifiers> values, whether one or more SHIFT, ALT, or CTRL modifier keys was pressed simultaneously with the console key."}]}]},{"pos":[2559,2708],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.ConsoleKeyInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure using the specified character, console key, and modifier keys.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.ConsoleKeyInfo\"></xref> structure using the specified character, console key, and modifier keys."},{"pos":[2721,3034],"content":"This type is not intended to be created by users. Instead, it is returned to the user in response to calling the <xref:System.Console.ReadKey%2A?displayProperty=fullName> method.       The <xref:System.ConsoleKeyInfo> type does not specify whether the left or right SHIFT, ALT, or CTRL modifier key was pressed.","needQuote":false,"needEscape":true,"nodes":[{"content":"This type is not intended to be created by users. Instead, it is returned to the user in response to calling the <xref:System.Console.ReadKey%2A?displayProperty=fullName> method.       The <xref:System.ConsoleKeyInfo> type does not specify whether the left or right SHIFT, ALT, or CTRL modifier key was pressed.","pos":[0,311],"nodes":[{"content":"This type is not intended to be created by users.","pos":[0,49]},{"content":"Instead, it is returned to the user in response to calling the &lt;xref:System.Console.ReadKey%2A?displayProperty=fullName&gt; method.","pos":[50,178],"source":" Instead, it is returned to the user in response to calling the <xref:System.Console.ReadKey%2A?displayProperty=fullName> method."},{"content":"The &lt;xref:System.ConsoleKeyInfo&gt; type does not specify whether the left or right SHIFT, ALT, or CTRL modifier key was pressed.","pos":[185,311],"source":"       The <xref:System.ConsoleKeyInfo> type does not specify whether the left or right SHIFT, ALT, or CTRL modifier key was pressed."}]}]},{"pos":[3226,3288],"content":"The Unicode character that corresponds to the <ph id=\"ph1\">`key`</ph> parameter.","needQuote":true,"needEscape":true,"source":"The Unicode character that corresponds to the `key` parameter."},{"pos":[3352,3412],"content":"The console key that corresponds to the <ph id=\"ph1\">`keyChar`</ph> parameter.","needQuote":true,"needEscape":true,"source":"The console key that corresponds to the `keyChar` parameter."},{"pos":[3475,3652],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to indicate that a SHIFT key was pressed; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to indicate that a SHIFT key was pressed; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[3713,3889],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to indicate that an ALT key was pressed; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to indicate that an ALT key was pressed; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[3954,4130],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to indicate that a CTRL key was pressed; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to indicate that a CTRL key was pressed; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[4300,4387],"content":"The numeric value of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">key</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is less than 0 or greater than 255.","needQuote":true,"needEscape":true,"source":"The numeric value of the <code>key</code> parameter is less than 0 or greater than 255."},{"pos":[4773,4943],"content":"Gets a value indicating whether the specified <bpt id=\"p1\">&lt;xref href=\"System.ConsoleKeyInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object is equal to the current <bpt id=\"p2\">&lt;xref href=\"System.ConsoleKeyInfo\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Gets a value indicating whether the specified <xref href=\"System.ConsoleKeyInfo\"></xref> object is equal to the current <xref href=\"System.ConsoleKeyInfo\"></xref> object."},{"pos":[4956,5378],"content":"Two <xref:System.ConsoleKeyInfo> objects are equal if their corresponding <xref:System.ConsoleKeyInfo.KeyChar%2A>, <xref:System.ConsoleKeyInfo.Key%2A>, and <xref:System.ConsoleKeyInfo.Modifiers%2A> properties are equal.       The Equals method performs slightly better than the <xref:System.ConsoleKeyInfo.Equals%28System.Object%29?displayProperty=fullName> method because it does not have to convert `obj` to an object.","needQuote":false,"needEscape":true,"nodes":[{"content":"Two &lt;xref:System.ConsoleKeyInfo&gt; objects are equal if their corresponding &lt;xref:System.ConsoleKeyInfo.KeyChar%2A&gt;, &lt;xref:System.ConsoleKeyInfo.Key%2A&gt;, and &lt;xref:System.ConsoleKeyInfo.Modifiers%2A&gt; properties are equal.","pos":[0,219],"source":"Two <xref:System.ConsoleKeyInfo> objects are equal if their corresponding <xref:System.ConsoleKeyInfo.KeyChar%2A>, <xref:System.ConsoleKeyInfo.Key%2A>, and <xref:System.ConsoleKeyInfo.Modifiers%2A> properties are equal."},{"content":"The Equals method performs slightly better than the &lt;xref:System.ConsoleKeyInfo.Equals%28System.Object%29?displayProperty=fullName&gt; method because it does not have to convert <ph id=\"ph1\">`obj`</ph> to an object.","pos":[226,420],"source":"       The Equals method performs slightly better than the <xref:System.ConsoleKeyInfo.Equals%28System.Object%29?displayProperty=fullName> method because it does not have to convert `obj` to an object."}]},{"pos":[5527,5613],"content":"An object to compare to the current <bpt id=\"p1\">&lt;xref href=\"System.ConsoleKeyInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"An object to compare to the current <xref href=\"System.ConsoleKeyInfo\"></xref> object."},{"pos":[5672,5902],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">obj</ph><ept id=\"p2\">&lt;/code&gt;</ept> is equal to the current <bpt id=\"p3\">&lt;xref href=\"System.ConsoleKeyInfo\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> object; otherwise, <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>obj</code> is equal to the current <xref href=\"System.ConsoleKeyInfo\"></xref> object; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[6307,6434],"content":"Gets a value indicating whether the specified object is equal to the current <bpt id=\"p1\">&lt;xref href=\"System.ConsoleKeyInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Gets a value indicating whether the specified object is equal to the current <xref href=\"System.ConsoleKeyInfo\"></xref> object."},{"pos":[6446,6665],"content":"Two <xref:System.ConsoleKeyInfo> objects are equal if their corresponding <xref:System.ConsoleKeyInfo.KeyChar%2A>, <xref:System.ConsoleKeyInfo.Key%2A>, and <xref:System.ConsoleKeyInfo.Modifiers%2A> properties are equal.","needQuote":true,"needEscape":true,"nodes":[{"content":"Two &lt;xref:System.ConsoleKeyInfo&gt; objects are equal if their corresponding &lt;xref:System.ConsoleKeyInfo.KeyChar%2A&gt;, &lt;xref:System.ConsoleKeyInfo.Key%2A&gt;, and &lt;xref:System.ConsoleKeyInfo.Modifiers%2A&gt; properties are equal.","pos":[0,219],"source":"Two <xref:System.ConsoleKeyInfo> objects are equal if their corresponding <xref:System.ConsoleKeyInfo.KeyChar%2A>, <xref:System.ConsoleKeyInfo.Key%2A>, and <xref:System.ConsoleKeyInfo.Modifiers%2A> properties are equal."}]},{"pos":[7200,7286],"content":"An object to compare to the current <bpt id=\"p1\">&lt;xref href=\"System.ConsoleKeyInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"An object to compare to the current <xref href=\"System.ConsoleKeyInfo\"></xref> object."},{"pos":[7345,7636],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is a <bpt id=\"p3\">&lt;xref href=\"System.ConsoleKeyInfo\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> object and is equal to the current <bpt id=\"p4\">&lt;xref href=\"System.ConsoleKeyInfo\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept> object; otherwise, <bpt id=\"p5\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p5\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>value</code> is a <xref href=\"System.ConsoleKeyInfo\"></xref> object and is equal to the current <xref href=\"System.ConsoleKeyInfo\"></xref> object; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[8018,8106],"content":"Returns the hash code for the current <bpt id=\"p1\">&lt;xref href=\"System.ConsoleKeyInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Returns the hash code for the current <xref href=\"System.ConsoleKeyInfo\"></xref> object."},{"pos":[8118,8351],"content":"The value returned by the GetHashCode method is not suitable for distinguishing one <xref:System.ConsoleKeyInfo> object from another. If your application needs a unique hash code, override the GetHashCode method with your own method.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value returned by the GetHashCode method is not suitable for distinguishing one <xref:System.ConsoleKeyInfo> object from another. If your application needs a unique hash code, override the GetHashCode method with your own method.","pos":[0,233],"nodes":[{"content":"The value returned by the GetHashCode method is not suitable for distinguishing one &lt;xref:System.ConsoleKeyInfo&gt; object from another.","pos":[0,133],"source":"The value returned by the GetHashCode method is not suitable for distinguishing one <xref:System.ConsoleKeyInfo> object from another."},{"content":"If your application needs a unique hash code, override the GetHashCode method with your own method.","pos":[134,233]}]}]},{"pos":[8896,8930],"content":"A 32-bit signed integer hash code.","needQuote":true,"needEscape":true,"nodes":[{"content":"A 32-bit signed integer hash code.","pos":[0,34]}]},{"pos":[9273,9371],"content":"Gets the console key represented by the current <bpt id=\"p1\">&lt;xref href=\"System.ConsoleKeyInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Gets the console key represented by the current <xref href=\"System.ConsoleKeyInfo\"></xref> object."},{"pos":[9878,9935],"content":"A value that identifies the console key that was pressed.","needQuote":true,"needEscape":true,"nodes":[{"content":"A value that identifies the console key that was pressed.","pos":[0,57]}]},{"pos":[10290,10394],"content":"Gets the Unicode character represented by the current <bpt id=\"p1\">&lt;xref href=\"System.ConsoleKeyInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Gets the Unicode character represented by the current <xref href=\"System.ConsoleKeyInfo\"></xref> object."},{"pos":[10406,10576],"content":"If the key pressed does not map to a Unicode character (for example, if the user presses the <bpt id=\"p1\">**</bpt>F1<ept id=\"p1\">**</ept> key or the <bpt id=\"p2\">**</bpt>Home<ept id=\"p2\">**</ept> key), the value of the KeyChar property is \\U0000.","needQuote":true,"needEscape":true,"source":"If the key pressed does not map to a Unicode character (for example, if the user presses the **F1** key or the **Home** key), the value of the KeyChar property is \\U0000."},{"pos":[11106,11229],"content":"An object that corresponds to the console key represented by the current <bpt id=\"p1\">&lt;xref href=\"System.ConsoleKeyInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"An object that corresponds to the console key represented by the current <xref href=\"System.ConsoleKeyInfo\"></xref> object."},{"pos":[11598,11765],"content":"Gets a bitwise combination of <bpt id=\"p1\">&lt;xref href=\"System.ConsoleModifiers\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values that specifies one or more modifier keys pressed simultaneously with the console key.","needQuote":true,"needEscape":true,"source":"Gets a bitwise combination of <xref href=\"System.ConsoleModifiers\"></xref> values that specifies one or more modifier keys pressed simultaneously with the console key."},{"pos":[12296,12371],"content":"A bitwise combination of the enumeration values. There is no default value.","needQuote":true,"needEscape":true,"nodes":[{"content":"A bitwise combination of the enumeration values. There is no default value.","pos":[0,75],"nodes":[{"content":"A bitwise combination of the enumeration values.","pos":[0,48]},{"content":"There is no default value.","pos":[49,75]}]}]},{"pos":[12935,13028],"content":"Indicates whether the specified <bpt id=\"p1\">&lt;xref href=\"System.ConsoleKeyInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects are equal.","needQuote":true,"needEscape":true,"source":"Indicates whether the specified <xref href=\"System.ConsoleKeyInfo\"></xref> objects are equal."},{"pos":[13040,13259],"content":"Two <xref:System.ConsoleKeyInfo> objects are equal if their corresponding <xref:System.ConsoleKeyInfo.KeyChar%2A>, <xref:System.ConsoleKeyInfo.Key%2A>, and <xref:System.ConsoleKeyInfo.Modifiers%2A> properties are equal.","needQuote":true,"needEscape":true,"nodes":[{"content":"Two &lt;xref:System.ConsoleKeyInfo&gt; objects are equal if their corresponding &lt;xref:System.ConsoleKeyInfo.KeyChar%2A&gt;, &lt;xref:System.ConsoleKeyInfo.Key%2A&gt;, and &lt;xref:System.ConsoleKeyInfo.Modifiers%2A&gt; properties are equal.","pos":[0,219],"source":"Two <xref:System.ConsoleKeyInfo> objects are equal if their corresponding <xref:System.ConsoleKeyInfo.KeyChar%2A>, <xref:System.ConsoleKeyInfo.Key%2A>, and <xref:System.ConsoleKeyInfo.Modifiers%2A> properties are equal."}]},{"pos":[13433,13461],"content":"The first object to compare.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first object to compare.","pos":[0,28]}]},{"pos":[13527,13556],"content":"The second object to compare.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second object to compare.","pos":[0,29]}]},{"pos":[13615,13796],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">a</ph><ept id=\"p2\">&lt;/code&gt;</ept> is equal to <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph2\">b</ph><ept id=\"p3\">&lt;/code&gt;</ept>; otherwise, <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>a</code> is equal to <code>b</code>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[14372,14469],"content":"Indicates whether the specified <bpt id=\"p1\">&lt;xref href=\"System.ConsoleKeyInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects are not equal.","needQuote":true,"needEscape":true,"source":"Indicates whether the specified <xref href=\"System.ConsoleKeyInfo\"></xref> objects are not equal."},{"pos":[14481,14700],"content":"Two <xref:System.ConsoleKeyInfo> objects are equal if their corresponding <xref:System.ConsoleKeyInfo.KeyChar%2A>, <xref:System.ConsoleKeyInfo.Key%2A>, and <xref:System.ConsoleKeyInfo.Modifiers%2A> properties are equal.","needQuote":true,"needEscape":true,"nodes":[{"content":"Two &lt;xref:System.ConsoleKeyInfo&gt; objects are equal if their corresponding &lt;xref:System.ConsoleKeyInfo.KeyChar%2A&gt;, &lt;xref:System.ConsoleKeyInfo.Key%2A&gt;, and &lt;xref:System.ConsoleKeyInfo.Modifiers%2A&gt; properties are equal.","pos":[0,219],"source":"Two <xref:System.ConsoleKeyInfo> objects are equal if their corresponding <xref:System.ConsoleKeyInfo.KeyChar%2A>, <xref:System.ConsoleKeyInfo.Key%2A>, and <xref:System.ConsoleKeyInfo.Modifiers%2A> properties are equal."}]},{"pos":[14876,14904],"content":"The first object to compare.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first object to compare.","pos":[0,28]}]},{"pos":[14970,14999],"content":"The second object to compare.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second object to compare.","pos":[0,29]}]},{"pos":[15058,15243],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">a</ph><ept id=\"p2\">&lt;/code&gt;</ept> is not equal to <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph2\">b</ph><ept id=\"p3\">&lt;/code&gt;</ept>; otherwise, <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>a</code> is not equal to <code>b</code>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ConsoleKeyInfo\n  id: ConsoleKeyInfo\n  children:\n  - System.ConsoleKeyInfo.#ctor(System.Char,System.ConsoleKey,System.Boolean,System.Boolean,System.Boolean)\n  - System.ConsoleKeyInfo.Equals(System.ConsoleKeyInfo)\n  - System.ConsoleKeyInfo.Equals(System.Object)\n  - System.ConsoleKeyInfo.GetHashCode\n  - System.ConsoleKeyInfo.Key\n  - System.ConsoleKeyInfo.KeyChar\n  - System.ConsoleKeyInfo.Modifiers\n  - System.ConsoleKeyInfo.op_Equality(System.ConsoleKeyInfo,System.ConsoleKeyInfo)\n  - System.ConsoleKeyInfo.op_Inequality(System.ConsoleKeyInfo,System.ConsoleKeyInfo)\n  langs:\n  - csharp\n  name: ConsoleKeyInfo\n  nameWithType: ConsoleKeyInfo\n  fullName: System.ConsoleKeyInfo\n  type: Struct\n  summary: Describes the console key that was pressed, including the character represented by the console key and the state of the SHIFT, ALT, and CTRL modifier keys.\n  remarks: \"The ConsoleKeyInfo type is not intended to be created by users. Instead, it is returned to the user in response to calling the <xref:System.Console.ReadKey%2A?displayProperty=fullName> method.  \\n  \\n The ConsoleKeyInfo object describes the <xref:System.ConsoleKey> constant and Unicode character, if any, that correspond to the pressed console key. The ConsoleKeyInfo object also describes, in a bitwise combination of <xref:System.ConsoleModifiers> values, whether one or more SHIFT, ALT, or CTRL modifier keys was pressed simultaneously with the console key.\"\n  example:\n  - \"The following example demonstrates using a ConsoleKeyInfo object in a read operation.  \\n  \\n [!code-cs[console.readkey1#1](~/add/codesnippet/csharp/t-system.consolekeyinfo_1.cs)]\\n [!code-cpp[console.readkey1#1](~/add/codesnippet/cpp/t-system.consolekeyinfo_1.cpp)]\\n [!code-vb[console.readkey1#1](~/add/codesnippet/visualbasic/t-system.consolekeyinfo_1.vb)]\"\n  syntax:\n    content: public struct ConsoleKeyInfo\n  inheritance:\n  - System.ValueType\n  implements: []\n  platform:\n  - net462\n- uid: System.ConsoleKeyInfo.#ctor(System.Char,System.ConsoleKey,System.Boolean,System.Boolean,System.Boolean)\n  id: '#ctor(System.Char,System.ConsoleKey,System.Boolean,System.Boolean,System.Boolean)'\n  parent: System.ConsoleKeyInfo\n  langs:\n  - csharp\n  name: ConsoleKeyInfo(Char,ConsoleKey,Boolean,Boolean,Boolean)\n  nameWithType: ConsoleKeyInfo.ConsoleKeyInfo(Char,ConsoleKey,Boolean,Boolean,Boolean)\n  fullName: System.ConsoleKeyInfo.ConsoleKeyInfo(Char,ConsoleKey,Boolean,Boolean,Boolean)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Initializes a new instance of the <xref href=\"System.ConsoleKeyInfo\"></xref> structure using the specified character, console key, and modifier keys.\n  remarks: \"This type is not intended to be created by users. Instead, it is returned to the user in response to calling the <xref:System.Console.ReadKey%2A?displayProperty=fullName> method.  \\n  \\n The <xref:System.ConsoleKeyInfo> type does not specify whether the left or right SHIFT, ALT, or CTRL modifier key was pressed.\"\n  syntax:\n    content: public ConsoleKeyInfo (char keyChar, ConsoleKey key, bool shift, bool alt, bool control);\n    parameters:\n    - id: keyChar\n      type: System.Char\n      description: The Unicode character that corresponds to the `key` parameter.\n    - id: key\n      type: System.ConsoleKey\n      description: The console key that corresponds to the `keyChar` parameter.\n    - id: shift\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to indicate that a SHIFT key was pressed; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n    - id: alt\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to indicate that an ALT key was pressed; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n    - id: control\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to indicate that a CTRL key was pressed; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ConsoleKeyInfo.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The numeric value of the <code>key</code> parameter is less than 0 or greater than 255.\n  platform:\n  - net462\n- uid: System.ConsoleKeyInfo.Equals(System.ConsoleKeyInfo)\n  id: Equals(System.ConsoleKeyInfo)\n  parent: System.ConsoleKeyInfo\n  langs:\n  - csharp\n  name: Equals(ConsoleKeyInfo)\n  nameWithType: ConsoleKeyInfo.Equals(ConsoleKeyInfo)\n  fullName: System.ConsoleKeyInfo.Equals(ConsoleKeyInfo)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Gets a value indicating whether the specified <xref href=\"System.ConsoleKeyInfo\"></xref> object is equal to the current <xref href=\"System.ConsoleKeyInfo\"></xref> object.\n  remarks: \"Two <xref:System.ConsoleKeyInfo> objects are equal if their corresponding <xref:System.ConsoleKeyInfo.KeyChar%2A>, <xref:System.ConsoleKeyInfo.Key%2A>, and <xref:System.ConsoleKeyInfo.Modifiers%2A> properties are equal.  \\n  \\n The Equals method performs slightly better than the <xref:System.ConsoleKeyInfo.Equals%28System.Object%29?displayProperty=fullName> method because it does not have to convert `obj` to an object.\"\n  syntax:\n    content: public bool Equals (ConsoleKeyInfo obj);\n    parameters:\n    - id: obj\n      type: System.ConsoleKeyInfo\n      description: An object to compare to the current <xref href=\"System.ConsoleKeyInfo\"></xref> object.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>obj</code> is equal to the current <xref href=\"System.ConsoleKeyInfo\"></xref> object; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ConsoleKeyInfo.Equals*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ConsoleKeyInfo.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.ConsoleKeyInfo\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: ConsoleKeyInfo.Equals(Object)\n  fullName: System.ConsoleKeyInfo.Equals(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Gets a value indicating whether the specified object is equal to the current <xref href=\"System.ConsoleKeyInfo\"></xref> object.\n  remarks: Two <xref:System.ConsoleKeyInfo> objects are equal if their corresponding <xref:System.ConsoleKeyInfo.KeyChar%2A>, <xref:System.ConsoleKeyInfo.Key%2A>, and <xref:System.ConsoleKeyInfo.Modifiers%2A> properties are equal.\n  example:\n  - \"The following example demonstrates the Equals method.  \\n  \\n [!code-cpp[system.ConsoleKeyInfo.Equals#1](~/add/codesnippet/cpp/m-system.consolekeyinfo._0_1.cpp)]\\n [!code-cs[system.ConsoleKeyInfo.Equals#1](~/add/codesnippet/csharp/m-system.consolekeyinfo._0_1.cs)]\\n [!code-vb[system.ConsoleKeyInfo.Equals#1](~/add/codesnippet/visualbasic/m-system.consolekeyinfo._0_1.vb)]\"\n  syntax:\n    content: public override bool Equals (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: An object to compare to the current <xref href=\"System.ConsoleKeyInfo\"></xref> object.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>value</code> is a <xref href=\"System.ConsoleKeyInfo\"></xref> object and is equal to the current <xref href=\"System.ConsoleKeyInfo\"></xref> object; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ConsoleKeyInfo.Equals*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ConsoleKeyInfo.GetHashCode\n  id: GetHashCode\n  parent: System.ConsoleKeyInfo\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: ConsoleKeyInfo.GetHashCode()\n  fullName: System.ConsoleKeyInfo.GetHashCode()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Returns the hash code for the current <xref href=\"System.ConsoleKeyInfo\"></xref> object.\n  remarks: The value returned by the GetHashCode method is not suitable for distinguishing one <xref:System.ConsoleKeyInfo> object from another. If your application needs a unique hash code, override the GetHashCode method with your own method.\n  example:\n  - \"The following example demonstrates the GetHashCode method.  \\n  \\n [!code-cpp[System.ConsoleKeyInfo.GetHashCode#1](~/add/codesnippet/cpp/m-system.consolekeyinfo._1_1.cpp)]\\n [!code-vb[System.ConsoleKeyInfo.GetHashCode#1](~/add/codesnippet/visualbasic/m-system.consolekeyinfo._1_1.vb)]\\n [!code-cs[System.ConsoleKeyInfo.GetHashCode#1](~/add/codesnippet/csharp/m-system.consolekeyinfo._1_1.cs)]\"\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: A 32-bit signed integer hash code.\n  overload: System.ConsoleKeyInfo.GetHashCode*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ConsoleKeyInfo.Key\n  id: Key\n  parent: System.ConsoleKeyInfo\n  langs:\n  - csharp\n  name: Key\n  nameWithType: ConsoleKeyInfo.Key\n  fullName: System.ConsoleKeyInfo.Key\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Gets the console key represented by the current <xref href=\"System.ConsoleKeyInfo\"></xref> object.\n  remarks: ''\n  example:\n  - \"The following example demonstrates using a Key property in a read operation.  \\n  \\n [!code-cs[console.readkey1#1](~/add/codesnippet/csharp/p-system.consolekeyinfo._0_1.cs)]\\n [!code-cpp[console.readkey1#1](~/add/codesnippet/cpp/p-system.consolekeyinfo._0_1.cpp)]\\n [!code-vb[console.readkey1#1](~/add/codesnippet/visualbasic/p-system.consolekeyinfo._0_1.vb)]\"\n  syntax:\n    content: public ConsoleKey Key { get; }\n    return:\n      type: System.ConsoleKey\n      description: A value that identifies the console key that was pressed.\n  overload: System.ConsoleKeyInfo.Key*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ConsoleKeyInfo.KeyChar\n  id: KeyChar\n  parent: System.ConsoleKeyInfo\n  langs:\n  - csharp\n  name: KeyChar\n  nameWithType: ConsoleKeyInfo.KeyChar\n  fullName: System.ConsoleKeyInfo.KeyChar\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Gets the Unicode character represented by the current <xref href=\"System.ConsoleKeyInfo\"></xref> object.\n  remarks: If the key pressed does not map to a Unicode character (for example, if the user presses the **F1** key or the **Home** key), the value of the KeyChar property is \\U0000.\n  example:\n  - \"The following example uses the KeyChar property to add the characters input by the user into a string. The example ignores special keys other than **ENTER**, **ESC**, and **BACKSPACE**.  \\n  \\n [!code-cs[System.ConsoleKeyInfo.KeyChar#1](~/add/codesnippet/csharp/p-system.consolekeyinfo._2_1.cs)]\\n [!code-vb[System.ConsoleKeyInfo.KeyChar#1](~/add/codesnippet/visualbasic/p-system.consolekeyinfo._2_1.vb)]\"\n  syntax:\n    content: public char KeyChar { get; }\n    return:\n      type: System.Char\n      description: An object that corresponds to the console key represented by the current <xref href=\"System.ConsoleKeyInfo\"></xref> object.\n  overload: System.ConsoleKeyInfo.KeyChar*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ConsoleKeyInfo.Modifiers\n  id: Modifiers\n  parent: System.ConsoleKeyInfo\n  langs:\n  - csharp\n  name: Modifiers\n  nameWithType: ConsoleKeyInfo.Modifiers\n  fullName: System.ConsoleKeyInfo.Modifiers\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Gets a bitwise combination of <xref href=\"System.ConsoleModifiers\"></xref> values that specifies one or more modifier keys pressed simultaneously with the console key.\n  remarks: ''\n  example:\n  - \"The following example demonstrates using a Modifiers property in a read operation.  \\n  \\n [!code-cs[console.readkey1#1](~/add/codesnippet/csharp/p-system.consolekeyinfo._1_1.cs)]\\n [!code-cpp[console.readkey1#1](~/add/codesnippet/cpp/p-system.consolekeyinfo._1_1.cpp)]\\n [!code-vb[console.readkey1#1](~/add/codesnippet/visualbasic/p-system.consolekeyinfo._1_1.vb)]\"\n  syntax:\n    content: public ConsoleModifiers Modifiers { get; }\n    return:\n      type: System.ConsoleModifiers\n      description: A bitwise combination of the enumeration values. There is no default value.\n  overload: System.ConsoleKeyInfo.Modifiers*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ConsoleKeyInfo.op_Equality(System.ConsoleKeyInfo,System.ConsoleKeyInfo)\n  id: op_Equality(System.ConsoleKeyInfo,System.ConsoleKeyInfo)\n  parent: System.ConsoleKeyInfo\n  langs:\n  - csharp\n  name: op_Equality(ConsoleKeyInfo,ConsoleKeyInfo)\n  nameWithType: ConsoleKeyInfo.op_Equality(ConsoleKeyInfo,ConsoleKeyInfo)\n  fullName: System.ConsoleKeyInfo.op_Equality(ConsoleKeyInfo,ConsoleKeyInfo)\n  type: Operator\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Indicates whether the specified <xref href=\"System.ConsoleKeyInfo\"></xref> objects are equal.\n  remarks: Two <xref:System.ConsoleKeyInfo> objects are equal if their corresponding <xref:System.ConsoleKeyInfo.KeyChar%2A>, <xref:System.ConsoleKeyInfo.Key%2A>, and <xref:System.ConsoleKeyInfo.Modifiers%2A> properties are equal.\n  syntax:\n    content: public static bool op_Equality (ConsoleKeyInfo a, ConsoleKeyInfo b);\n    parameters:\n    - id: a\n      type: System.ConsoleKeyInfo\n      description: The first object to compare.\n    - id: b\n      type: System.ConsoleKeyInfo\n      description: The second object to compare.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>a</code> is equal to <code>b</code>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ConsoleKeyInfo.op_Equality*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ConsoleKeyInfo.op_Inequality(System.ConsoleKeyInfo,System.ConsoleKeyInfo)\n  id: op_Inequality(System.ConsoleKeyInfo,System.ConsoleKeyInfo)\n  parent: System.ConsoleKeyInfo\n  langs:\n  - csharp\n  name: op_Inequality(ConsoleKeyInfo,ConsoleKeyInfo)\n  nameWithType: ConsoleKeyInfo.op_Inequality(ConsoleKeyInfo,ConsoleKeyInfo)\n  fullName: System.ConsoleKeyInfo.op_Inequality(ConsoleKeyInfo,ConsoleKeyInfo)\n  type: Operator\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Indicates whether the specified <xref href=\"System.ConsoleKeyInfo\"></xref> objects are not equal.\n  remarks: Two <xref:System.ConsoleKeyInfo> objects are equal if their corresponding <xref:System.ConsoleKeyInfo.KeyChar%2A>, <xref:System.ConsoleKeyInfo.Key%2A>, and <xref:System.ConsoleKeyInfo.Modifiers%2A> properties are equal.\n  syntax:\n    content: public static bool op_Inequality (ConsoleKeyInfo a, ConsoleKeyInfo b);\n    parameters:\n    - id: a\n      type: System.ConsoleKeyInfo\n      description: The first object to compare.\n    - id: b\n      type: System.ConsoleKeyInfo\n      description: The second object to compare.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>a</code> is not equal to <code>b</code>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ConsoleKeyInfo.op_Inequality*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.ValueType\n  isExternal: false\n  name: System.ValueType\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.ConsoleKeyInfo.#ctor(System.Char,System.ConsoleKey,System.Boolean,System.Boolean,System.Boolean)\n  parent: System.ConsoleKeyInfo\n  isExternal: false\n  name: ConsoleKeyInfo(Char,ConsoleKey,Boolean,Boolean,Boolean)\n  nameWithType: ConsoleKeyInfo.ConsoleKeyInfo(Char,ConsoleKey,Boolean,Boolean,Boolean)\n  fullName: System.ConsoleKeyInfo.ConsoleKeyInfo(Char,ConsoleKey,Boolean,Boolean,Boolean)\n- uid: System.Char\n  parent: System\n  isExternal: true\n  name: Char\n  nameWithType: Char\n  fullName: System.Char\n- uid: System.ConsoleKey\n  parent: System\n  isExternal: false\n  name: ConsoleKey\n  nameWithType: ConsoleKey\n  fullName: System.ConsoleKey\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.ConsoleKeyInfo.Equals(System.ConsoleKeyInfo)\n  parent: System.ConsoleKeyInfo\n  isExternal: false\n  name: Equals(ConsoleKeyInfo)\n  nameWithType: ConsoleKeyInfo.Equals(ConsoleKeyInfo)\n  fullName: System.ConsoleKeyInfo.Equals(ConsoleKeyInfo)\n- uid: System.ConsoleKeyInfo\n  parent: System\n  isExternal: false\n  name: ConsoleKeyInfo\n  nameWithType: ConsoleKeyInfo\n  fullName: System.ConsoleKeyInfo\n- uid: System.ConsoleKeyInfo.Equals(System.Object)\n  parent: System.ConsoleKeyInfo\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: ConsoleKeyInfo.Equals(Object)\n  fullName: System.ConsoleKeyInfo.Equals(Object)\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ConsoleKeyInfo.GetHashCode\n  parent: System.ConsoleKeyInfo\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: ConsoleKeyInfo.GetHashCode()\n  fullName: System.ConsoleKeyInfo.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.ConsoleKeyInfo.Key\n  parent: System.ConsoleKeyInfo\n  isExternal: false\n  name: Key\n  nameWithType: ConsoleKeyInfo.Key\n  fullName: System.ConsoleKeyInfo.Key\n- uid: System.ConsoleKeyInfo.KeyChar\n  parent: System.ConsoleKeyInfo\n  isExternal: false\n  name: KeyChar\n  nameWithType: ConsoleKeyInfo.KeyChar\n  fullName: System.ConsoleKeyInfo.KeyChar\n- uid: System.ConsoleKeyInfo.Modifiers\n  parent: System.ConsoleKeyInfo\n  isExternal: false\n  name: Modifiers\n  nameWithType: ConsoleKeyInfo.Modifiers\n  fullName: System.ConsoleKeyInfo.Modifiers\n- uid: System.ConsoleModifiers\n  parent: System\n  isExternal: false\n  name: ConsoleModifiers\n  nameWithType: ConsoleModifiers\n  fullName: System.ConsoleModifiers\n- uid: System.ConsoleKeyInfo.op_Equality(System.ConsoleKeyInfo,System.ConsoleKeyInfo)\n  parent: System.ConsoleKeyInfo\n  isExternal: false\n  name: op_Equality(ConsoleKeyInfo,ConsoleKeyInfo)\n  nameWithType: ConsoleKeyInfo.op_Equality(ConsoleKeyInfo,ConsoleKeyInfo)\n  fullName: System.ConsoleKeyInfo.op_Equality(ConsoleKeyInfo,ConsoleKeyInfo)\n- uid: System.ConsoleKeyInfo.op_Inequality(System.ConsoleKeyInfo,System.ConsoleKeyInfo)\n  parent: System.ConsoleKeyInfo\n  isExternal: false\n  name: op_Inequality(ConsoleKeyInfo,ConsoleKeyInfo)\n  nameWithType: ConsoleKeyInfo.op_Inequality(ConsoleKeyInfo,ConsoleKeyInfo)\n  fullName: System.ConsoleKeyInfo.op_Inequality(ConsoleKeyInfo,ConsoleKeyInfo)\n- uid: System.ConsoleKeyInfo.#ctor*\n  parent: System.ConsoleKeyInfo\n  isExternal: false\n  name: ConsoleKeyInfo\n  nameWithType: ConsoleKeyInfo.ConsoleKeyInfo\n- uid: System.ConsoleKeyInfo.Equals*\n  parent: System.ConsoleKeyInfo\n  isExternal: false\n  name: Equals\n  nameWithType: ConsoleKeyInfo.Equals\n- uid: System.ConsoleKeyInfo.GetHashCode*\n  parent: System.ConsoleKeyInfo\n  isExternal: false\n  name: GetHashCode\n  nameWithType: ConsoleKeyInfo.GetHashCode\n- uid: System.ConsoleKeyInfo.Key*\n  parent: System.ConsoleKeyInfo\n  isExternal: false\n  name: Key\n  nameWithType: ConsoleKeyInfo.Key\n- uid: System.ConsoleKeyInfo.KeyChar*\n  parent: System.ConsoleKeyInfo\n  isExternal: false\n  name: KeyChar\n  nameWithType: ConsoleKeyInfo.KeyChar\n- uid: System.ConsoleKeyInfo.Modifiers*\n  parent: System.ConsoleKeyInfo\n  isExternal: false\n  name: Modifiers\n  nameWithType: ConsoleKeyInfo.Modifiers\n- uid: System.ConsoleKeyInfo.op_Equality*\n  parent: System.ConsoleKeyInfo\n  isExternal: false\n  name: op_Equality\n  nameWithType: ConsoleKeyInfo.op_Equality\n- uid: System.ConsoleKeyInfo.op_Inequality*\n  parent: System.ConsoleKeyInfo\n  isExternal: false\n  name: op_Inequality\n  nameWithType: ConsoleKeyInfo.op_Inequality\n"}