{"nodes":[{"pos":[1843,2149],"content":"SymbolResolver is an extension for providing a host <xref href=\"System.Activities.LocationReferenceEnvironment\"></xref> containing objects that can be dereferenced by a string name.  Values provided through a SymbolResolver are not persisted.  Persistence of SymbolResolver values is a host responsibility.","needQuote":true,"needEscape":true,"nodes":[{"content":"SymbolResolver is an extension for providing a host <bpt id=\"p1\">&lt;xref href=\"System.Activities.LocationReferenceEnvironment\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> containing objects that can be dereferenced by a string name.","pos":[0,181],"source":"SymbolResolver is an extension for providing a host <xref href=\"System.Activities.LocationReferenceEnvironment\"></xref> containing objects that can be dereferenced by a string name."},{"content":"Values provided through a SymbolResolver are not persisted.","pos":[183,242]},{"content":"Persistence of SymbolResolver values is a host responsibility.","pos":[244,306]}]},{"pos":[3237,3339],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Activities.Hosting.SymbolResolver\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Activities.Hosting.SymbolResolver\"></xref> class."},{"pos":[4073,4122],"content":"Adds a symbol using the specified key/value pair.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds a symbol using the specified key/value pair.","pos":[0,49]}]},{"pos":[4356,4374],"content":"The symbol to add.","needQuote":true,"needEscape":true,"nodes":[{"content":"The symbol to add.","pos":[0,18]}]},{"pos":[4914,4970],"content":"Adds a symbol using the specified symbol name and value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds a symbol using the specified symbol name and value.","pos":[0,56]}]},{"pos":[5113,5136],"content":"The name of the symbol.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the symbol.","pos":[0,23]}]},{"pos":[5198,5235],"content":"The value of the symbol to reference.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value of the symbol to reference.","pos":[0,37]}]},{"pos":[5765,5820],"content":"Adds a symbol using the specified symbol name and type.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds a symbol using the specified symbol name and type.","pos":[0,55]}]},{"pos":[5832,5898],"content":"The symbol is added with the default value for the specified type.","needQuote":true,"needEscape":true,"nodes":[{"content":"The symbol is added with the default value for the specified type.","pos":[0,66]}]},{"pos":[6038,6061],"content":"The name of the symbol.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the symbol.","pos":[0,23]}]},{"pos":[6120,6149],"content":"The type of the symbol value.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type of the symbol value.","pos":[0,29]}]},{"pos":[6728,6791],"content":"Adds a symbol using the specified symbol name, value, and type.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds a symbol using the specified symbol name, value, and type.","pos":[0,63]}]},{"pos":[6945,6968],"content":"The name of the symbol.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the symbol.","pos":[0,23]}]},{"pos":[7030,7067],"content":"The value of the symbol to reference.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value of the symbol to reference.","pos":[0,37]}]},{"pos":[7126,7155],"content":"The type of the symbol value.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type of the symbol value.","pos":[0,29]}]},{"pos":[7733,8016],"content":"Returns a <bpt id=\"p1\">&lt;xref href=\"System.Activities.LocationReferenceEnvironment\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance that enables access to references of symbol values in <bpt id=\"p2\">&lt;xref href=\"System.Activities.Hosting.SymbolResolver\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> represented as <bpt id=\"p3\">&lt;xref href=\"System.Activities.LocationReference\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> objects.","needQuote":true,"needEscape":true,"source":"Returns a <xref href=\"System.Activities.LocationReferenceEnvironment\"></xref> instance that enables access to references of symbol values in <xref href=\"System.Activities.Hosting.SymbolResolver\"></xref> represented as <xref href=\"System.Activities.LocationReference\"></xref> objects."},{"pos":[8238,8455],"content":"A location reference that enables access to references to symbol values in <bpt id=\"p1\">&lt;xref href=\"System.Activities.Hosting.SymbolResolver\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> represented as <bpt id=\"p2\">&lt;xref href=\"System.Activities.LocationReference\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> objects.","needQuote":true,"needEscape":true,"source":"A location reference that enables access to references to symbol values in <xref href=\"System.Activities.Hosting.SymbolResolver\"></xref> represented as <xref href=\"System.Activities.LocationReference\"></xref> objects."},{"pos":[8935,9026],"content":"Removes all symbols from the <bpt id=\"p1\">&lt;xref href=\"System.Activities.Hosting.SymbolResolver\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Removes all symbols from the <xref href=\"System.Activities.Hosting.SymbolResolver\"></xref>."},{"pos":[9781,9916],"content":"Returns a value that indicates whether the <bpt id=\"p1\">&lt;xref href=\"System.Activities.Hosting.SymbolResolver\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> contains the specified symbol.","needQuote":true,"needEscape":true,"source":"Returns a value that indicates whether the <xref href=\"System.Activities.Hosting.SymbolResolver\"></xref> contains the specified symbol."},{"pos":[10155,10265],"content":"The symbol as a key/value pair to locate in the <bpt id=\"p1\">&lt;xref href=\"System.Activities.Hosting.SymbolResolver\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The symbol as a key/value pair to locate in the <xref href=\"System.Activities.Hosting.SymbolResolver\"></xref>."},{"pos":[10324,10559],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the <bpt id=\"p2\">&lt;xref href=\"System.Activities.Hosting.SymbolResolver\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> contains the specified symbol; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Activities.Hosting.SymbolResolver\"></xref> contains the specified symbol; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[11095,11241],"content":"Returns a value that indicates whether the <bpt id=\"p1\">&lt;xref href=\"System.Activities.Hosting.SymbolResolver\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> contains a symbol with the specified key.","needQuote":true,"needEscape":true,"source":"Returns a value that indicates whether the <xref href=\"System.Activities.Hosting.SymbolResolver\"></xref> contains a symbol with the specified key."},{"pos":[11378,11410],"content":"The key of the symbol to locate.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key of the symbol to locate.","pos":[0,32]}]},{"pos":[11469,11715],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the <bpt id=\"p2\">&lt;xref href=\"System.Activities.Hosting.SymbolResolver\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> contains a symbol with the specified key; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Activities.Hosting.SymbolResolver\"></xref> contains a symbol with the specified key; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[12450,12633],"content":"Copies the symbols in the <bpt id=\"p1\">&lt;xref href=\"System.Activities.Hosting.SymbolResolver\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to an existing one-dimensional array of key/value pairs, starting at the specified array index.","needQuote":true,"needEscape":true,"source":"Copies the symbols in the <xref href=\"System.Activities.Hosting.SymbolResolver\"></xref> to an existing one-dimensional array of key/value pairs, starting at the specified array index."},{"pos":[12892,13001],"content":"The one-dimensional array of key/value pairs to copy the symbols to. The array must have zero-based indexing.","needQuote":true,"needEscape":true,"nodes":[{"content":"The one-dimensional array of key/value pairs to copy the symbols to. The array must have zero-based indexing.","pos":[0,109],"nodes":[{"content":"The one-dimensional array of key/value pairs to copy the symbols to.","pos":[0,68]},{"content":"The array must have zero-based indexing.","pos":[69,109]}]}]},{"pos":[13067,13137],"content":"The zero-based index in the destination array at which copying begins.","needQuote":true,"needEscape":true,"nodes":[{"content":"The zero-based index in the destination array at which copying begins.","pos":[0,70]}]},{"pos":[13589,13695],"content":"Gets the number of symbols contained in the <bpt id=\"p1\">&lt;xref href=\"System.Activities.Hosting.SymbolResolver\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets the number of symbols contained in the <xref href=\"System.Activities.Hosting.SymbolResolver\"></xref>."},{"pos":[13801,13902],"content":"The number of symbols contained in the <bpt id=\"p1\">&lt;xref href=\"System.Activities.Hosting.SymbolResolver\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The number of symbols contained in the <xref href=\"System.Activities.Hosting.SymbolResolver\"></xref>."},{"pos":[14397,14538],"content":"Returns an enumerator that iterates through a collection of key/value pairs where the keys are the symbol names and values the symbol values.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an enumerator that iterates through a collection of key/value pairs where the keys are the symbol names and values the symbol values.","pos":[0,141]}]},{"pos":[14853,14921],"content":"An enumerator that iterates through a collection of key/value pairs.","needQuote":true,"needEscape":true,"nodes":[{"content":"An enumerator that iterates through a collection of key/value pairs.","pos":[0,68]}]},{"pos":[15405,15549],"content":"Gets a value that indicates whether the dictionary of symbols in the <bpt id=\"p1\">&lt;xref href=\"System.Activities.Hosting.SymbolResolver\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is read-only.","needQuote":true,"needEscape":true,"source":"Gets a value that indicates whether the dictionary of symbols in the <xref href=\"System.Activities.Hosting.SymbolResolver\"></xref> is read-only."},{"pos":[15561,15598],"content":"This property always returns <ph id=\"ph1\">`false`</ph>.","needQuote":true,"needEscape":true,"source":"This property always returns `false`."},{"pos":[15712,15775],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[16280,16349],"content":"Gets or sets the value of the item associated with the specified key.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the value of the item associated with the specified key.","pos":[0,69]}]},{"pos":[16493,16513],"content":"The key of the item.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key of the item.","pos":[0,20]}]},{"pos":[16571,16627],"content":"The value of the item associated with the specified key.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value of the item associated with the specified key.","pos":[0,56]}]},{"pos":[17072,17171],"content":"Gets a collection of all keys in the <bpt id=\"p1\">&lt;xref href=\"System.Activities.Hosting.SymbolResolver\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets a collection of all keys in the <xref href=\"System.Activities.Hosting.SymbolResolver\"></xref>."},{"pos":[17360,17454],"content":"A collection of all keys in the <bpt id=\"p1\">&lt;xref href=\"System.Activities.Hosting.SymbolResolver\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A collection of all keys in the <xref href=\"System.Activities.Hosting.SymbolResolver\"></xref>."},{"pos":[18134,18234],"content":"Removes the specified symbol from the <bpt id=\"p1\">&lt;xref href=\"System.Activities.Hosting.SymbolResolver\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Removes the specified symbol from the <xref href=\"System.Activities.Hosting.SymbolResolver\"></xref>."},{"pos":[18471,18492],"content":"The symbol to remove.","needQuote":true,"needEscape":true,"nodes":[{"content":"The symbol to remove.","pos":[0,21]}]},{"pos":[18551,18848],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the symbol is successfully found and removed; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. This method returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if the symbol is not present.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the symbol is successfully found and removed; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,184],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the symbol is successfully found and removed; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"This method returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the symbol is not present.","pos":[185,297],"source":" This method returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if the symbol is not present."}]},{"pos":[19357,19467],"content":"Removes a symbol from the <bpt id=\"p1\">&lt;xref href=\"System.Activities.Hosting.SymbolResolver\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> using a specified key.","needQuote":true,"needEscape":true,"source":"Removes a symbol from the <xref href=\"System.Activities.Hosting.SymbolResolver\"></xref> using a specified key."},{"pos":[19599,19631],"content":"The key of the symbol to remove.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key of the symbol to remove.","pos":[0,32]}]},{"pos":[19690,19987],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the symbol is successfully found and removed; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. This method returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if the symbol is not present.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the symbol is successfully found and removed; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,184],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the symbol is successfully found and removed; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"This method returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the symbol is not present.","pos":[185,297],"source":" This method returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if the symbol is not present."}]},{"pos":[20652,20793],"content":"Returns an enumerator that iterates through a collection of key/value pairs where the keys are the symbol names and values the symbol values.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an enumerator that iterates through a collection of key/value pairs where the keys are the symbol names and values the symbol values.","pos":[0,141]}]},{"pos":[20805,21013],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Activities.Hosting.SymbolResolver> instance is cast to an <xref:System.Collections.IEnumerator> interface.","needQuote":true,"needEscape":true,"nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Activities.Hosting.SymbolResolver> instance is cast to an <xref:System.Collections.IEnumerator> interface.","pos":[0,208],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the &lt;xref:System.Activities.Hosting.SymbolResolver&gt; instance is cast to an &lt;xref:System.Collections.IEnumerator&gt; interface.","pos":[60,208],"source":" It can be used only when the <xref:System.Activities.Hosting.SymbolResolver> instance is cast to an <xref:System.Collections.IEnumerator> interface."}]}]},{"pos":[21191,21259],"content":"An enumerator that iterates through a collection of key/value pairs.","needQuote":true,"needEscape":true,"nodes":[{"content":"An enumerator that iterates through a collection of key/value pairs.","pos":[0,68]}]},{"pos":[21882,21931],"content":"Gets the value associated with the specified key.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the value associated with the specified key.","pos":[0,49]}]},{"pos":[22086,22114],"content":"The key of the value to get.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key of the value to get.","pos":[0,28]}]},{"pos":[22176,22382],"content":"When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.","needQuote":true,"needEscape":true,"nodes":[{"content":"When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.","pos":[0,206],"nodes":[{"content":"When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter.","pos":[0,166]},{"content":"This parameter is passed uninitialized.","pos":[167,206]}]}]},{"pos":[22441,22689],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the <bpt id=\"p2\">&lt;xref href=\"System.Activities.Hosting.SymbolResolver\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> contains an element with the specified key; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Activities.Hosting.SymbolResolver\"></xref> contains an element with the specified key; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[23151,23252],"content":"Gets a collection of all values in the <bpt id=\"p1\">&lt;xref href=\"System.Activities.Hosting.SymbolResolver\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets a collection of all values in the <xref href=\"System.Activities.Hosting.SymbolResolver\"></xref>."},{"pos":[23443,23539],"content":"A collection of all values in the <bpt id=\"p1\">&lt;xref href=\"System.Activities.Hosting.SymbolResolver\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A collection of all values in the <xref href=\"System.Activities.Hosting.SymbolResolver\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Activities.Hosting.SymbolResolver\n  id: SymbolResolver\n  children:\n  - System.Activities.Hosting.SymbolResolver.#ctor\n  - System.Activities.Hosting.SymbolResolver.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})\n  - System.Activities.Hosting.SymbolResolver.Add(System.String,System.Object)\n  - System.Activities.Hosting.SymbolResolver.Add(System.String,System.Type)\n  - System.Activities.Hosting.SymbolResolver.Add(System.String,System.Object,System.Type)\n  - System.Activities.Hosting.SymbolResolver.AsLocationReferenceEnvironment\n  - System.Activities.Hosting.SymbolResolver.Clear\n  - System.Activities.Hosting.SymbolResolver.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})\n  - System.Activities.Hosting.SymbolResolver.ContainsKey(System.String)\n  - System.Activities.Hosting.SymbolResolver.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)\n  - System.Activities.Hosting.SymbolResolver.Count\n  - System.Activities.Hosting.SymbolResolver.GetEnumerator\n  - System.Activities.Hosting.SymbolResolver.IsReadOnly\n  - System.Activities.Hosting.SymbolResolver.Item(System.String)\n  - System.Activities.Hosting.SymbolResolver.Keys\n  - System.Activities.Hosting.SymbolResolver.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})\n  - System.Activities.Hosting.SymbolResolver.Remove(System.String)\n  - System.Activities.Hosting.SymbolResolver.System#Collections#IEnumerable#GetEnumerator\n  - System.Activities.Hosting.SymbolResolver.TryGetValue(System.String,System.Object@)\n  - System.Activities.Hosting.SymbolResolver.Values\n  langs:\n  - csharp\n  name: SymbolResolver\n  nameWithType: SymbolResolver\n  fullName: System.Activities.Hosting.SymbolResolver\n  type: Class\n  summary: SymbolResolver is an extension for providing a host <xref href=\"System.Activities.LocationReferenceEnvironment\"></xref> containing objects that can be dereferenced by a string name.  Values provided through a SymbolResolver are not persisted.  Persistence of SymbolResolver values is a host responsibility.\n  syntax:\n    content: 'public sealed class SymbolResolver : System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<string,object>>, System.Collections.Generic.IDictionary<string,object>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string,object>>'\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>\n  - System.Collections.Generic.IDictionary<System.String,System.Object>\n  - System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.SymbolResolver.#ctor\n  id: '#ctor'\n  parent: System.Activities.Hosting.SymbolResolver\n  langs:\n  - csharp\n  name: SymbolResolver()\n  nameWithType: SymbolResolver.SymbolResolver()\n  fullName: System.Activities.Hosting.SymbolResolver.SymbolResolver()\n  type: Constructor\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  summary: Initializes a new instance of the <xref href=\"System.Activities.Hosting.SymbolResolver\"></xref> class.\n  syntax:\n    content: public SymbolResolver ();\n    parameters: []\n  overload: System.Activities.Hosting.SymbolResolver.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.SymbolResolver.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})\n  id: Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})\n  parent: System.Activities.Hosting.SymbolResolver\n  langs:\n  - csharp\n  name: Add(KeyValuePair<String,Object>)\n  nameWithType: SymbolResolver.Add(KeyValuePair<String,Object>)\n  fullName: System.Activities.Hosting.SymbolResolver.Add(KeyValuePair<String,Object>)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  summary: Adds a symbol using the specified key/value pair.\n  syntax:\n    content: public void Add (System.Collections.Generic.KeyValuePair<string,object> item);\n    parameters:\n    - id: item\n      type: System.Collections.Generic.KeyValuePair{System.String,System.Object}\n      description: The symbol to add.\n  overload: System.Activities.Hosting.SymbolResolver.Add*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.SymbolResolver.Add(System.String,System.Object)\n  id: Add(System.String,System.Object)\n  parent: System.Activities.Hosting.SymbolResolver\n  langs:\n  - csharp\n  name: Add(String,Object)\n  nameWithType: SymbolResolver.Add(String,Object)\n  fullName: System.Activities.Hosting.SymbolResolver.Add(String,Object)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  summary: Adds a symbol using the specified symbol name and value.\n  syntax:\n    content: public void Add (string key, object value);\n    parameters:\n    - id: key\n      type: System.String\n      description: The name of the symbol.\n    - id: value\n      type: System.Object\n      description: The value of the symbol to reference.\n  overload: System.Activities.Hosting.SymbolResolver.Add*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.SymbolResolver.Add(System.String,System.Type)\n  id: Add(System.String,System.Type)\n  parent: System.Activities.Hosting.SymbolResolver\n  langs:\n  - csharp\n  name: Add(String,Type)\n  nameWithType: SymbolResolver.Add(String,Type)\n  fullName: System.Activities.Hosting.SymbolResolver.Add(String,Type)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  summary: Adds a symbol using the specified symbol name and type.\n  remarks: The symbol is added with the default value for the specified type.\n  syntax:\n    content: public void Add (string key, Type type);\n    parameters:\n    - id: key\n      type: System.String\n      description: The name of the symbol.\n    - id: type\n      type: System.Type\n      description: The type of the symbol value.\n  overload: System.Activities.Hosting.SymbolResolver.Add*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.SymbolResolver.Add(System.String,System.Object,System.Type)\n  id: Add(System.String,System.Object,System.Type)\n  parent: System.Activities.Hosting.SymbolResolver\n  langs:\n  - csharp\n  name: Add(String,Object,Type)\n  nameWithType: SymbolResolver.Add(String,Object,Type)\n  fullName: System.Activities.Hosting.SymbolResolver.Add(String,Object,Type)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  summary: Adds a symbol using the specified symbol name, value, and type.\n  syntax:\n    content: public void Add (string key, object value, Type type);\n    parameters:\n    - id: key\n      type: System.String\n      description: The name of the symbol.\n    - id: value\n      type: System.Object\n      description: The value of the symbol to reference.\n    - id: type\n      type: System.Type\n      description: The type of the symbol value.\n  overload: System.Activities.Hosting.SymbolResolver.Add*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.SymbolResolver.AsLocationReferenceEnvironment\n  id: AsLocationReferenceEnvironment\n  parent: System.Activities.Hosting.SymbolResolver\n  langs:\n  - csharp\n  name: AsLocationReferenceEnvironment()\n  nameWithType: SymbolResolver.AsLocationReferenceEnvironment()\n  fullName: System.Activities.Hosting.SymbolResolver.AsLocationReferenceEnvironment()\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  summary: Returns a <xref href=\"System.Activities.LocationReferenceEnvironment\"></xref> instance that enables access to references of symbol values in <xref href=\"System.Activities.Hosting.SymbolResolver\"></xref> represented as <xref href=\"System.Activities.LocationReference\"></xref> objects.\n  syntax:\n    content: public System.Activities.LocationReferenceEnvironment AsLocationReferenceEnvironment ();\n    parameters: []\n    return:\n      type: System.Activities.LocationReferenceEnvironment\n      description: A location reference that enables access to references to symbol values in <xref href=\"System.Activities.Hosting.SymbolResolver\"></xref> represented as <xref href=\"System.Activities.LocationReference\"></xref> objects.\n  overload: System.Activities.Hosting.SymbolResolver.AsLocationReferenceEnvironment*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.SymbolResolver.Clear\n  id: Clear\n  parent: System.Activities.Hosting.SymbolResolver\n  langs:\n  - csharp\n  name: Clear()\n  nameWithType: SymbolResolver.Clear()\n  fullName: System.Activities.Hosting.SymbolResolver.Clear()\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  summary: Removes all symbols from the <xref href=\"System.Activities.Hosting.SymbolResolver\"></xref>.\n  syntax:\n    content: public void Clear ();\n    parameters: []\n  overload: System.Activities.Hosting.SymbolResolver.Clear*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.SymbolResolver.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})\n  id: Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})\n  parent: System.Activities.Hosting.SymbolResolver\n  langs:\n  - csharp\n  name: Contains(KeyValuePair<String,Object>)\n  nameWithType: SymbolResolver.Contains(KeyValuePair<String,Object>)\n  fullName: System.Activities.Hosting.SymbolResolver.Contains(KeyValuePair<String,Object>)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  summary: Returns a value that indicates whether the <xref href=\"System.Activities.Hosting.SymbolResolver\"></xref> contains the specified symbol.\n  syntax:\n    content: public bool Contains (System.Collections.Generic.KeyValuePair<string,object> item);\n    parameters:\n    - id: item\n      type: System.Collections.Generic.KeyValuePair{System.String,System.Object}\n      description: The symbol as a key/value pair to locate in the <xref href=\"System.Activities.Hosting.SymbolResolver\"></xref>.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Activities.Hosting.SymbolResolver\"></xref> contains the specified symbol; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Activities.Hosting.SymbolResolver.Contains*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.SymbolResolver.ContainsKey(System.String)\n  id: ContainsKey(System.String)\n  parent: System.Activities.Hosting.SymbolResolver\n  langs:\n  - csharp\n  name: ContainsKey(String)\n  nameWithType: SymbolResolver.ContainsKey(String)\n  fullName: System.Activities.Hosting.SymbolResolver.ContainsKey(String)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  summary: Returns a value that indicates whether the <xref href=\"System.Activities.Hosting.SymbolResolver\"></xref> contains a symbol with the specified key.\n  syntax:\n    content: public bool ContainsKey (string key);\n    parameters:\n    - id: key\n      type: System.String\n      description: The key of the symbol to locate.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Activities.Hosting.SymbolResolver\"></xref> contains a symbol with the specified key; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Activities.Hosting.SymbolResolver.ContainsKey*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.SymbolResolver.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)\n  id: CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)\n  parent: System.Activities.Hosting.SymbolResolver\n  langs:\n  - csharp\n  name: CopyTo(KeyValuePair<String,Object>,Int32)\n  nameWithType: SymbolResolver.CopyTo(KeyValuePair<String,Object>,Int32)\n  fullName: System.Activities.Hosting.SymbolResolver.CopyTo(KeyValuePair<String,Object>,Int32)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  summary: Copies the symbols in the <xref href=\"System.Activities.Hosting.SymbolResolver\"></xref> to an existing one-dimensional array of key/value pairs, starting at the specified array index.\n  syntax:\n    content: public void CopyTo (System.Collections.Generic.KeyValuePair<string,object>[] array, int arrayIndex);\n    parameters:\n    - id: array\n      type: System.Collections.Generic.KeyValuePair{System.String,System.Object}[]\n      description: The one-dimensional array of key/value pairs to copy the symbols to. The array must have zero-based indexing.\n    - id: arrayIndex\n      type: System.Int32\n      description: The zero-based index in the destination array at which copying begins.\n  overload: System.Activities.Hosting.SymbolResolver.CopyTo*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.SymbolResolver.Count\n  id: Count\n  parent: System.Activities.Hosting.SymbolResolver\n  langs:\n  - csharp\n  name: Count\n  nameWithType: SymbolResolver.Count\n  fullName: System.Activities.Hosting.SymbolResolver.Count\n  type: Property\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  summary: Gets the number of symbols contained in the <xref href=\"System.Activities.Hosting.SymbolResolver\"></xref>.\n  syntax:\n    content: public int Count { get; }\n    return:\n      type: System.Int32\n      description: The number of symbols contained in the <xref href=\"System.Activities.Hosting.SymbolResolver\"></xref>.\n  overload: System.Activities.Hosting.SymbolResolver.Count*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.SymbolResolver.GetEnumerator\n  id: GetEnumerator\n  parent: System.Activities.Hosting.SymbolResolver\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: SymbolResolver.GetEnumerator()\n  fullName: System.Activities.Hosting.SymbolResolver.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  summary: Returns an enumerator that iterates through a collection of key/value pairs where the keys are the symbol names and values the symbol values.\n  syntax:\n    content: public System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<string,object>> GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.String,System.Object}}\n      description: An enumerator that iterates through a collection of key/value pairs.\n  overload: System.Activities.Hosting.SymbolResolver.GetEnumerator*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.SymbolResolver.IsReadOnly\n  id: IsReadOnly\n  parent: System.Activities.Hosting.SymbolResolver\n  langs:\n  - csharp\n  name: IsReadOnly\n  nameWithType: SymbolResolver.IsReadOnly\n  fullName: System.Activities.Hosting.SymbolResolver.IsReadOnly\n  type: Property\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  summary: Gets a value that indicates whether the dictionary of symbols in the <xref href=\"System.Activities.Hosting.SymbolResolver\"></xref> is read-only.\n  remarks: This property always returns `false`.\n  syntax:\n    content: public bool IsReadOnly { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Activities.Hosting.SymbolResolver.IsReadOnly*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.SymbolResolver.Item(System.String)\n  id: Item(System.String)\n  parent: System.Activities.Hosting.SymbolResolver\n  langs:\n  - csharp\n  name: Item(String)\n  nameWithType: SymbolResolver.Item(String)\n  fullName: System.Activities.Hosting.SymbolResolver.Item(String)\n  type: Property\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  summary: Gets or sets the value of the item associated with the specified key.\n  syntax:\n    content: public object this[string key] { get; set; }\n    parameters:\n    - id: key\n      type: System.String\n      description: The key of the item.\n    return:\n      type: System.Object\n      description: The value of the item associated with the specified key.\n  overload: System.Activities.Hosting.SymbolResolver.Item*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.SymbolResolver.Keys\n  id: Keys\n  parent: System.Activities.Hosting.SymbolResolver\n  langs:\n  - csharp\n  name: Keys\n  nameWithType: SymbolResolver.Keys\n  fullName: System.Activities.Hosting.SymbolResolver.Keys\n  type: Property\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  summary: Gets a collection of all keys in the <xref href=\"System.Activities.Hosting.SymbolResolver\"></xref>.\n  syntax:\n    content: public System.Collections.Generic.ICollection<string> Keys { get; }\n    return:\n      type: System.Collections.Generic.ICollection{System.String}\n      description: A collection of all keys in the <xref href=\"System.Activities.Hosting.SymbolResolver\"></xref>.\n  overload: System.Activities.Hosting.SymbolResolver.Keys*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.SymbolResolver.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})\n  id: Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})\n  parent: System.Activities.Hosting.SymbolResolver\n  langs:\n  - csharp\n  name: Remove(KeyValuePair<String,Object>)\n  nameWithType: SymbolResolver.Remove(KeyValuePair<String,Object>)\n  fullName: System.Activities.Hosting.SymbolResolver.Remove(KeyValuePair<String,Object>)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  summary: Removes the specified symbol from the <xref href=\"System.Activities.Hosting.SymbolResolver\"></xref>.\n  syntax:\n    content: public bool Remove (System.Collections.Generic.KeyValuePair<string,object> item);\n    parameters:\n    - id: item\n      type: System.Collections.Generic.KeyValuePair{System.String,System.Object}\n      description: The symbol to remove.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the symbol is successfully found and removed; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. This method returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if the symbol is not present.\n  overload: System.Activities.Hosting.SymbolResolver.Remove*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.SymbolResolver.Remove(System.String)\n  id: Remove(System.String)\n  parent: System.Activities.Hosting.SymbolResolver\n  langs:\n  - csharp\n  name: Remove(String)\n  nameWithType: SymbolResolver.Remove(String)\n  fullName: System.Activities.Hosting.SymbolResolver.Remove(String)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  summary: Removes a symbol from the <xref href=\"System.Activities.Hosting.SymbolResolver\"></xref> using a specified key.\n  syntax:\n    content: public bool Remove (string key);\n    parameters:\n    - id: key\n      type: System.String\n      description: The key of the symbol to remove.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the symbol is successfully found and removed; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. This method returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if the symbol is not present.\n  overload: System.Activities.Hosting.SymbolResolver.Remove*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.SymbolResolver.System#Collections#IEnumerable#GetEnumerator\n  id: System#Collections#IEnumerable#GetEnumerator\n  isEii: true\n  parent: System.Activities.Hosting.SymbolResolver\n  langs:\n  - csharp\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: SymbolResolver.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.Activities.Hosting.SymbolResolver.System.Collections.IEnumerable.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  summary: Returns an enumerator that iterates through a collection of key/value pairs where the keys are the symbol names and values the symbol values.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Activities.Hosting.SymbolResolver> instance is cast to an <xref:System.Collections.IEnumerator> interface.\n  syntax:\n    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: An enumerator that iterates through a collection of key/value pairs.\n  overload: System.Activities.Hosting.SymbolResolver.System#Collections#IEnumerable#GetEnumerator*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.SymbolResolver.TryGetValue(System.String,System.Object@)\n  id: TryGetValue(System.String,System.Object@)\n  parent: System.Activities.Hosting.SymbolResolver\n  langs:\n  - csharp\n  name: TryGetValue(String,Object)\n  nameWithType: SymbolResolver.TryGetValue(String,Object)\n  fullName: System.Activities.Hosting.SymbolResolver.TryGetValue(String,Object)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  summary: Gets the value associated with the specified key.\n  syntax:\n    content: public bool TryGetValue (string key, out object value);\n    parameters:\n    - id: key\n      type: System.String\n      description: The key of the value to get.\n    - id: value\n      type: System.Object\n      description: When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Activities.Hosting.SymbolResolver\"></xref> contains an element with the specified key; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Activities.Hosting.SymbolResolver.TryGetValue*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.Hosting.SymbolResolver.Values\n  id: Values\n  parent: System.Activities.Hosting.SymbolResolver\n  langs:\n  - csharp\n  name: Values\n  nameWithType: SymbolResolver.Values\n  fullName: System.Activities.Hosting.SymbolResolver.Values\n  type: Property\n  assemblies:\n  - System.Activities\n  namespace: System.Activities.Hosting\n  summary: Gets a collection of all values in the <xref href=\"System.Activities.Hosting.SymbolResolver\"></xref>.\n  syntax:\n    content: public System.Collections.Generic.ICollection<object> Values { get; }\n    return:\n      type: System.Collections.Generic.ICollection{System.Object}\n      description: A collection of all values in the <xref href=\"System.Activities.Hosting.SymbolResolver\"></xref>.\n  overload: System.Activities.Hosting.SymbolResolver.Values*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Activities.Hosting.SymbolResolver.#ctor\n  parent: System.Activities.Hosting.SymbolResolver\n  isExternal: false\n  name: SymbolResolver()\n  nameWithType: SymbolResolver.SymbolResolver()\n  fullName: System.Activities.Hosting.SymbolResolver.SymbolResolver()\n- uid: System.Activities.Hosting.SymbolResolver.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})\n  parent: System.Activities.Hosting.SymbolResolver\n  isExternal: false\n  name: Add(KeyValuePair<String,Object>)\n  nameWithType: SymbolResolver.Add(KeyValuePair<String,Object>)\n  fullName: System.Activities.Hosting.SymbolResolver.Add(KeyValuePair<String,Object>)\n- uid: System.Collections.Generic.KeyValuePair{System.String,System.Object}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: KeyValuePair<String,Object>\n  nameWithType: KeyValuePair<String,Object>\n  fullName: System.Collections.Generic.KeyValuePair<System.String,System.Object>\n  spec.csharp:\n  - uid: System.Collections.Generic.KeyValuePair`2\n    name: KeyValuePair\n    nameWithType: KeyValuePair\n    fullName: KeyValuePair<System.String,System.Object>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: String\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: Object\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Activities.Hosting.SymbolResolver.Add(System.String,System.Object)\n  parent: System.Activities.Hosting.SymbolResolver\n  isExternal: false\n  name: Add(String,Object)\n  nameWithType: SymbolResolver.Add(String,Object)\n  fullName: System.Activities.Hosting.SymbolResolver.Add(String,Object)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Activities.Hosting.SymbolResolver.Add(System.String,System.Type)\n  parent: System.Activities.Hosting.SymbolResolver\n  isExternal: false\n  name: Add(String,Type)\n  nameWithType: SymbolResolver.Add(String,Type)\n  fullName: System.Activities.Hosting.SymbolResolver.Add(String,Type)\n- uid: System.Type\n  parent: System\n  isExternal: true\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Activities.Hosting.SymbolResolver.Add(System.String,System.Object,System.Type)\n  parent: System.Activities.Hosting.SymbolResolver\n  isExternal: false\n  name: Add(String,Object,Type)\n  nameWithType: SymbolResolver.Add(String,Object,Type)\n  fullName: System.Activities.Hosting.SymbolResolver.Add(String,Object,Type)\n- uid: System.Activities.Hosting.SymbolResolver.AsLocationReferenceEnvironment\n  parent: System.Activities.Hosting.SymbolResolver\n  isExternal: false\n  name: AsLocationReferenceEnvironment()\n  nameWithType: SymbolResolver.AsLocationReferenceEnvironment()\n  fullName: System.Activities.Hosting.SymbolResolver.AsLocationReferenceEnvironment()\n- uid: System.Activities.LocationReferenceEnvironment\n  parent: System.Activities\n  isExternal: false\n  name: LocationReferenceEnvironment\n  nameWithType: LocationReferenceEnvironment\n  fullName: System.Activities.LocationReferenceEnvironment\n- uid: System.Activities.Hosting.SymbolResolver.Clear\n  parent: System.Activities.Hosting.SymbolResolver\n  isExternal: false\n  name: Clear()\n  nameWithType: SymbolResolver.Clear()\n  fullName: System.Activities.Hosting.SymbolResolver.Clear()\n- uid: System.Activities.Hosting.SymbolResolver.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})\n  parent: System.Activities.Hosting.SymbolResolver\n  isExternal: false\n  name: Contains(KeyValuePair<String,Object>)\n  nameWithType: SymbolResolver.Contains(KeyValuePair<String,Object>)\n  fullName: System.Activities.Hosting.SymbolResolver.Contains(KeyValuePair<String,Object>)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Activities.Hosting.SymbolResolver.ContainsKey(System.String)\n  parent: System.Activities.Hosting.SymbolResolver\n  isExternal: false\n  name: ContainsKey(String)\n  nameWithType: SymbolResolver.ContainsKey(String)\n  fullName: System.Activities.Hosting.SymbolResolver.ContainsKey(String)\n- uid: System.Activities.Hosting.SymbolResolver.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)\n  parent: System.Activities.Hosting.SymbolResolver\n  isExternal: false\n  name: CopyTo(KeyValuePair<String,Object>,Int32)\n  nameWithType: SymbolResolver.CopyTo(KeyValuePair<String,Object>,Int32)\n  fullName: System.Activities.Hosting.SymbolResolver.CopyTo(KeyValuePair<String,Object>,Int32)\n- uid: System.Collections.Generic.KeyValuePair{System.String,System.Object}[]\n  parent: System.Collections.Generic\n  isExternal: true\n  name: KeyValuePair<String,Object>\n  nameWithType: KeyValuePair<String,Object>\n  fullName: System.Collections.Generic.KeyValuePair<System.String,System.Object>[]\n  spec.csharp:\n  - uid: System.Collections.Generic.KeyValuePair`2\n    name: KeyValuePair\n    nameWithType: KeyValuePair\n    fullName: KeyValuePair<System.String,System.Object>[]\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: String\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: Object\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Activities.Hosting.SymbolResolver.Count\n  parent: System.Activities.Hosting.SymbolResolver\n  isExternal: false\n  name: Count\n  nameWithType: SymbolResolver.Count\n  fullName: System.Activities.Hosting.SymbolResolver.Count\n- uid: System.Activities.Hosting.SymbolResolver.GetEnumerator\n  parent: System.Activities.Hosting.SymbolResolver\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: SymbolResolver.GetEnumerator()\n  fullName: System.Activities.Hosting.SymbolResolver.GetEnumerator()\n- uid: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.String,System.Object}}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IEnumerator<KeyValuePair<String,Object>>\n  nameWithType: IEnumerator<KeyValuePair<String,Object>>\n  fullName: System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<System.String,System.Object>>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerator`1\n    name: IEnumerator\n    nameWithType: IEnumerator\n    fullName: IEnumerator<System.Collections.Generic.KeyValuePair<System.String,System.Object>>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Collections.Generic.KeyValuePair`2\n    name: KeyValuePair\n    nameWithType: KeyValuePair\n    fullName: KeyValuePair<System.String,System.Object>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: String\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: Object\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Activities.Hosting.SymbolResolver.IsReadOnly\n  parent: System.Activities.Hosting.SymbolResolver\n  isExternal: false\n  name: IsReadOnly\n  nameWithType: SymbolResolver.IsReadOnly\n  fullName: System.Activities.Hosting.SymbolResolver.IsReadOnly\n- uid: System.Activities.Hosting.SymbolResolver.Item(System.String)\n  parent: System.Activities.Hosting.SymbolResolver\n  isExternal: false\n  name: Item(String)\n  nameWithType: SymbolResolver.Item(String)\n  fullName: System.Activities.Hosting.SymbolResolver.Item(String)\n- uid: System.Activities.Hosting.SymbolResolver.Keys\n  parent: System.Activities.Hosting.SymbolResolver\n  isExternal: false\n  name: Keys\n  nameWithType: SymbolResolver.Keys\n  fullName: System.Activities.Hosting.SymbolResolver.Keys\n- uid: System.Collections.Generic.ICollection{System.String}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: ICollection<String>\n  nameWithType: ICollection<String>\n  fullName: System.Collections.Generic.ICollection<System.String>\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1\n    name: ICollection\n    nameWithType: ICollection\n    fullName: ICollection<System.String>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: String\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Activities.Hosting.SymbolResolver.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})\n  parent: System.Activities.Hosting.SymbolResolver\n  isExternal: false\n  name: Remove(KeyValuePair<String,Object>)\n  nameWithType: SymbolResolver.Remove(KeyValuePair<String,Object>)\n  fullName: System.Activities.Hosting.SymbolResolver.Remove(KeyValuePair<String,Object>)\n- uid: System.Activities.Hosting.SymbolResolver.Remove(System.String)\n  parent: System.Activities.Hosting.SymbolResolver\n  isExternal: false\n  name: Remove(String)\n  nameWithType: SymbolResolver.Remove(String)\n  fullName: System.Activities.Hosting.SymbolResolver.Remove(String)\n- uid: System.Activities.Hosting.SymbolResolver.System#Collections#IEnumerable#GetEnumerator\n  parent: System.Activities.Hosting.SymbolResolver\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: SymbolResolver.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.Activities.Hosting.SymbolResolver.System.Collections.IEnumerable.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: true\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.Activities.Hosting.SymbolResolver.TryGetValue(System.String,System.Object@)\n  parent: System.Activities.Hosting.SymbolResolver\n  isExternal: false\n  name: TryGetValue(String,Object)\n  nameWithType: SymbolResolver.TryGetValue(String,Object)\n  fullName: System.Activities.Hosting.SymbolResolver.TryGetValue(String,Object)\n- uid: System.Activities.Hosting.SymbolResolver.Values\n  parent: System.Activities.Hosting.SymbolResolver\n  isExternal: false\n  name: Values\n  nameWithType: SymbolResolver.Values\n  fullName: System.Activities.Hosting.SymbolResolver.Values\n- uid: System.Collections.Generic.ICollection{System.Object}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: ICollection<Object>\n  nameWithType: ICollection<Object>\n  fullName: System.Collections.Generic.ICollection<System.Object>\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1\n    name: ICollection\n    nameWithType: ICollection\n    fullName: ICollection<System.Object>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: Object\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Activities.Hosting.SymbolResolver.#ctor*\n  parent: System.Activities.Hosting.SymbolResolver\n  isExternal: false\n  name: SymbolResolver\n  nameWithType: SymbolResolver.SymbolResolver\n- uid: System.Activities.Hosting.SymbolResolver.Add*\n  parent: System.Activities.Hosting.SymbolResolver\n  isExternal: false\n  name: Add\n  nameWithType: SymbolResolver.Add\n- uid: System.Activities.Hosting.SymbolResolver.AsLocationReferenceEnvironment*\n  parent: System.Activities.Hosting.SymbolResolver\n  isExternal: false\n  name: AsLocationReferenceEnvironment\n  nameWithType: SymbolResolver.AsLocationReferenceEnvironment\n- uid: System.Activities.Hosting.SymbolResolver.Clear*\n  parent: System.Activities.Hosting.SymbolResolver\n  isExternal: false\n  name: Clear\n  nameWithType: SymbolResolver.Clear\n- uid: System.Activities.Hosting.SymbolResolver.Contains*\n  parent: System.Activities.Hosting.SymbolResolver\n  isExternal: false\n  name: Contains\n  nameWithType: SymbolResolver.Contains\n- uid: System.Activities.Hosting.SymbolResolver.ContainsKey*\n  parent: System.Activities.Hosting.SymbolResolver\n  isExternal: false\n  name: ContainsKey\n  nameWithType: SymbolResolver.ContainsKey\n- uid: System.Activities.Hosting.SymbolResolver.CopyTo*\n  parent: System.Activities.Hosting.SymbolResolver\n  isExternal: false\n  name: CopyTo\n  nameWithType: SymbolResolver.CopyTo\n- uid: System.Activities.Hosting.SymbolResolver.Count*\n  parent: System.Activities.Hosting.SymbolResolver\n  isExternal: false\n  name: Count\n  nameWithType: SymbolResolver.Count\n- uid: System.Activities.Hosting.SymbolResolver.GetEnumerator*\n  parent: System.Activities.Hosting.SymbolResolver\n  isExternal: false\n  name: GetEnumerator\n  nameWithType: SymbolResolver.GetEnumerator\n- uid: System.Activities.Hosting.SymbolResolver.IsReadOnly*\n  parent: System.Activities.Hosting.SymbolResolver\n  isExternal: false\n  name: IsReadOnly\n  nameWithType: SymbolResolver.IsReadOnly\n- uid: System.Activities.Hosting.SymbolResolver.Item*\n  parent: System.Activities.Hosting.SymbolResolver\n  isExternal: false\n  name: Item\n  nameWithType: SymbolResolver.Item\n- uid: System.Activities.Hosting.SymbolResolver.Keys*\n  parent: System.Activities.Hosting.SymbolResolver\n  isExternal: false\n  name: Keys\n  nameWithType: SymbolResolver.Keys\n- uid: System.Activities.Hosting.SymbolResolver.Remove*\n  parent: System.Activities.Hosting.SymbolResolver\n  isExternal: false\n  name: Remove\n  nameWithType: SymbolResolver.Remove\n- uid: System.Activities.Hosting.SymbolResolver.System#Collections#IEnumerable#GetEnumerator*\n  parent: System.Activities.Hosting.SymbolResolver\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator\n  nameWithType: SymbolResolver.System.Collections.IEnumerable.GetEnumerator\n- uid: System.Activities.Hosting.SymbolResolver.TryGetValue*\n  parent: System.Activities.Hosting.SymbolResolver\n  isExternal: false\n  name: TryGetValue\n  nameWithType: SymbolResolver.TryGetValue\n- uid: System.Activities.Hosting.SymbolResolver.Values*\n  parent: System.Activities.Hosting.SymbolResolver\n  isExternal: false\n  name: Values\n  nameWithType: SymbolResolver.Values\n"}