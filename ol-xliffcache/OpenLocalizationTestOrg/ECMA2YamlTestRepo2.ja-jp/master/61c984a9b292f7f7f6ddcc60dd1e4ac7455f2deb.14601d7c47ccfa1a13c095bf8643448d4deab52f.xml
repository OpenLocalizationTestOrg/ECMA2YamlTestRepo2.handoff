{"nodes":[{"pos":[1584,1699],"content":"Defines the set of information that constitutes input to security policy decisions. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Defines the set of information that constitutes input to security policy decisions. This class cannot be inherited.","pos":[0,115],"nodes":[{"content":"Defines the set of information that constitutes input to security policy decisions.","pos":[0,83]},{"content":"This class cannot be inherited.","pos":[84,115]}]}]},{"pos":[1712,3846],"content":"Common forms of evidence include signatures and location of origin of code, but can potentially be anything. Objects of any type that are recognized by security policy represent evidence.       Security policy is composed of code groups; a particular assembly (the basic unit of code for granting security permissions) is a member of a code group if it satisfies the code group's membership condition. Evidence is the set of inputs to policy that membership conditions use to determine to which code groups an assembly belongs.       The Evidence class is a collection (see <xref:System.Collections.ICollection>) that holds a set of objects that represent evidence. This class holds two sets that correspond to the source of the evidence: host evidence and assembly evidence.       Policy can get evidence from two different sources when evaluating permissions for code.      -   `Host evidence` is provided by the host, and can only be provided by hosts that have been granted the <xref:System.Security.Permissions.SecurityPermissionFlag> permission. Typically, this is evidence of the origin of the code and digital signatures on the assembly. Evidence about origin typically includes <xref:System.Security.Policy.Url>, <xref:System.Security.Policy.Site>, and <xref:System.Security.Policy.Zone> evidence. Signatures refer to software publisher (AuthentiCode X.509v3 signature) and strong name identities. Both kinds of digital signature-based identity are built into the assembly, but must be validated and passed to policy by the host; when loaded, the security system verifies the signature. The system then creates the appropriate evidence and passes it to policy only if the corresponding signature is valid.      -   `Assembly evidence` is part of the assembly itself. Developers or administrators can attach custom evidence to the assembly to extend the set of evidence for policy. Assembly evidence can only be added at the time of assembly generation, which occurs before the assembly is signed. The default policy of the security system ignores assembly-provided evidence, but policy can be extended to accept it.","needQuote":false,"needEscape":true,"nodes":[{"content":"Common forms of evidence include signatures and location of origin of code, but can potentially be anything.","pos":[0,108]},{"content":"Objects of any type that are recognized by security policy represent evidence.","pos":[109,187]},{"content":"Security policy is composed of code groups; a particular assembly (the basic unit of code for granting security permissions) is a member of a code group if it satisfies the code group's membership condition.","pos":[194,401]},{"content":"Evidence is the set of inputs to policy that membership conditions use to determine to which code groups an assembly belongs.","pos":[402,527]},{"content":"The Evidence class is a collection (see &lt;xref:System.Collections.ICollection&gt;) that holds a set of objects that represent evidence.","pos":[534,665],"source":"       The Evidence class is a collection (see <xref:System.Collections.ICollection>) that holds a set of objects that represent evidence."},{"content":"This class holds two sets that correspond to the source of the evidence: host evidence and assembly evidence.","pos":[666,775]},{"content":"Policy can get evidence from two different sources when evaluating permissions for code.","pos":[782,870]},{"content":"-   <ph id=\"ph1\">`Host evidence`</ph> is provided by the host, and can only be provided by hosts that have been granted the &lt;xref:System.Security.Permissions.SecurityPermissionFlag&gt; permission.","pos":[876,1051],"source":"      -   `Host evidence` is provided by the host, and can only be provided by hosts that have been granted the <xref:System.Security.Permissions.SecurityPermissionFlag> permission."},{"content":"Typically, this is evidence of the origin of the code and digital signatures on the assembly.","pos":[1052,1145]},{"content":"Evidence about origin typically includes &lt;xref:System.Security.Policy.Url&gt;, &lt;xref:System.Security.Policy.Site&gt;, and &lt;xref:System.Security.Policy.Zone&gt; evidence.","pos":[1146,1306],"source":" Evidence about origin typically includes <xref:System.Security.Policy.Url>, <xref:System.Security.Policy.Site>, and <xref:System.Security.Policy.Zone> evidence."},{"content":"Signatures refer to software publisher (AuthentiCode X.509v3 signature) and strong name identities.","pos":[1307,1406]},{"content":"Both kinds of digital signature-based identity are built into the assembly, but must be validated and passed to policy by the host; when loaded, the security system verifies the signature.","pos":[1407,1595]},{"content":"The system then creates the appropriate evidence and passes it to policy only if the corresponding signature is valid.","pos":[1596,1714]},{"content":"-   <ph id=\"ph1\">`Assembly evidence`</ph> is part of the assembly itself.","pos":[1720,1775],"source":"      -   `Assembly evidence` is part of the assembly itself."},{"content":"Developers or administrators can attach custom evidence to the assembly to extend the set of evidence for policy.","pos":[1776,1889]},{"content":"Assembly evidence can only be added at the time of assembly generation, which occurs before the assembly is signed.","pos":[1890,2005]},{"content":"The default policy of the security system ignores assembly-provided evidence, but policy can be extended to accept it.","pos":[2006,2124]}]},{"pos":[4919,5018],"content":"Initializes a new empty instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Policy.Evidence\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new empty instance of the <xref href=\"System.Security.Policy.Evidence\"></xref> class."},{"pos":[6126,6258],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Policy.Evidence\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class from a shallow copy of an existing one.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Policy.Evidence\"></xref> class from a shallow copy of an existing one."},{"pos":[6979,7117],"content":"The <xref href=\"System.Security.Policy.Evidence\"></xref> instance from which to create the new instance. This instance is not deep-copied.","needQuote":true,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Security.Policy.Evidence\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance from which to create the new instance.","pos":[0,104],"source":"The <xref href=\"System.Security.Policy.Evidence\"></xref> instance from which to create the new instance."},{"content":"This instance is not deep-copied.","pos":[105,138]}]},{"pos":[7277,7393],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">evidence</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not a valid instance of <bpt id=\"p2\">&lt;xref href=\"System.Security.Policy.Evidence\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>evidence</code> parameter is not a valid instance of <xref href=\"System.Security.Policy.Evidence\"></xref>."},{"pos":[7859,8001],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Policy.Evidence\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class from multiple sets of host and assembly evidence.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Policy.Evidence\"></xref> class from multiple sets of host and assembly evidence."},{"pos":[8712,8768],"content":"The host evidence from which to create the new instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"The host evidence from which to create the new instance.","pos":[0,56]}]},{"pos":[8843,8903],"content":"The assembly evidence from which to create the new instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"The assembly evidence from which to create the new instance.","pos":[0,60]}]},{"pos":[9561,9703],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Policy.Evidence\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class from multiple sets of host and assembly evidence.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Policy.Evidence\"></xref> class from multiple sets of host and assembly evidence."},{"pos":[9715,9865],"content":"This constructor creates a new instance of the class by using evidence objects that inherit from the <xref:System.Security.Policy.EvidenceBase> class.","needQuote":true,"needEscape":true,"nodes":[{"content":"This constructor creates a new instance of the class by using evidence objects that inherit from the &lt;xref:System.Security.Policy.EvidenceBase&gt; class.","pos":[0,150],"source":"This constructor creates a new instance of the class by using evidence objects that inherit from the <xref:System.Security.Policy.EvidenceBase> class."}]},{"pos":[10123,10179],"content":"The host evidence from which to create the new instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"The host evidence from which to create the new instance.","pos":[0,56]}]},{"pos":[10276,10336],"content":"The assembly evidence from which to create the new instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"The assembly evidence from which to create the new instance.","pos":[0,60]}]},{"pos":[10815,10872],"content":"Adds the specified assembly evidence to the evidence set.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds the specified assembly evidence to the evidence set.","pos":[0,57]}]},{"pos":[10885,11104],"content":"Use this method for evidence derived from the assembly.      > [!NOTE] >  This method does not perform a check to prevent adding duplicate types of evidence. Many assembly evidence objects can exist at the same time.","needQuote":false,"needEscape":true,"nodes":[{"content":"Use this method for evidence derived from the assembly.","pos":[0,55]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  This method does not perform a check to prevent adding duplicate types of evidence.","pos":[61,157],"source":"      > [!NOTE] >  This method does not perform a check to prevent adding duplicate types of evidence."},{"content":"Many assembly evidence objects can exist at the same time.","pos":[158,216]}]},{"pos":[11760,11780],"content":"Any evidence object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Any evidence object.","pos":[0,20]}]},{"pos":[11954,11978],"content":"<ph id=\"ph1\">&lt;code&gt;id&lt;/code&gt;</ph> is null.","needQuote":true,"needEscape":true,"source":"<code>id</code> is null."},{"pos":[12073,12109],"content":"<ph id=\"ph1\">&lt;code&gt;id&lt;/code&gt;</ph> is not serializable.","needQuote":true,"needEscape":true,"source":"<code>id</code> is not serializable."},{"pos":[12708,12720],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[13196,13265],"content":"Adds the specified evidence supplied by the host to the evidence set.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds the specified evidence supplied by the host to the evidence set.","pos":[0,69]}]},{"pos":[13278,13488],"content":"Use this method for evidence supplied by the host.      > [!NOTE] >  This method does not perform a check to prevent adding duplicate types of evidence. Many host evidence objects can exist at the same time.","needQuote":false,"needEscape":true,"nodes":[{"content":"Use this method for evidence supplied by the host.","pos":[0,50]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  This method does not perform a check to prevent adding duplicate types of evidence.","pos":[56,152],"source":"      > [!NOTE] >  This method does not perform a check to prevent adding duplicate types of evidence."},{"content":"Many host evidence objects can exist at the same time.","pos":[153,207]}]},{"pos":[14136,14156],"content":"Any evidence object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Any evidence object.","pos":[0,20]}]},{"pos":[14326,14350],"content":"<ph id=\"ph1\">&lt;code&gt;id&lt;/code&gt;</ph> is null.","needQuote":true,"needEscape":true,"source":"<code>id</code> is null."},{"pos":[14445,14481],"content":"<ph id=\"ph1\">&lt;code&gt;id&lt;/code&gt;</ph> is not serializable.","needQuote":true,"needEscape":true,"source":"<code>id</code> is not serializable."},{"pos":[15056,15068],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[15482,15543],"content":"Removes the host and assembly evidence from the evidence set.","needQuote":true,"needEscape":true,"nodes":[{"content":"Removes the host and assembly evidence from the evidence set.","pos":[0,61]}]},{"pos":[15555,15644],"content":"Clear removes the evidence in the host and assembly enumerations, setting both to <ph id=\"ph1\">`null`</ph>.","needQuote":true,"needEscape":true,"source":"Clear removes the evidence in the host and assembly enumerations, setting both to `null`."},{"pos":[16626,16675],"content":"Returns a duplicate copy of this evidence object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a duplicate copy of this evidence object.","pos":[0,49]}]},{"pos":[16687,16782],"content":"The duplicate copy is a complete copy that includes all the evidence objects in the collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"The duplicate copy is a complete copy that includes all the evidence objects in the collection.","pos":[0,95]}]},{"pos":[16949,16990],"content":"A duplicate copy of this evidence object.","needQuote":true,"needEscape":true,"nodes":[{"content":"A duplicate copy of this evidence object.","pos":[0,41]}]},{"pos":[17483,17533],"content":"Copies evidence objects to an <xref:System.Array>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Copies evidence objects to an &lt;xref:System.Array&gt;.","pos":[0,50],"source":"Copies evidence objects to an <xref:System.Array>."}]},{"pos":[18204,18255],"content":"The target array to which to copy evidence objects.","needQuote":true,"needEscape":true,"nodes":[{"content":"The target array to which to copy evidence objects.","pos":[0,51]}]},{"pos":[18316,18396],"content":"The zero-based position in the array to which to begin copying evidence objects.","needQuote":true,"needEscape":true,"nodes":[{"content":"The zero-based position in the array to which to begin copying evidence objects.","pos":[0,80]}]},{"pos":[18565,18592],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is null.","needQuote":true,"needEscape":true,"source":"<code>array</code> is null."},{"pos":[18707,18780],"content":"<ph id=\"ph1\">&lt;code&gt;index &lt;/code&gt;</ph>is outside the range of the target array<ph id=\"ph2\">&lt;code&gt;.&lt;/code&gt;</ph>","needQuote":true,"needEscape":true,"source":"<code>index </code>is outside the range of the target array<code>.</code>"},{"pos":[19109,19165],"content":"Gets the number of evidence objects in the evidence set.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the number of evidence objects in the evidence set.","pos":[0,56]}]},{"pos":[19804,19855],"content":"The number of evidence objects in the evidence set.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of evidence objects in the evidence set.","pos":[0,51]}]},{"pos":[20336,20381],"content":"Enumerates evidence provided by the assembly.","needQuote":true,"needEscape":true,"nodes":[{"content":"Enumerates evidence provided by the assembly.","pos":[0,45]}]},{"pos":[21101,21200],"content":"An enumerator for evidence added by the <xref:System.Security.Policy.Evidence.AddAssembly*> method.","needQuote":true,"needEscape":true,"nodes":[{"content":"An enumerator for evidence added by the &lt;xref:System.Security.Policy.Evidence.AddAssembly*&gt; method.","pos":[0,99],"source":"An enumerator for evidence added by the <xref:System.Security.Policy.Evidence.AddAssembly*> method."}]},{"pos":[21853,21865],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[22323,22424],"content":"Enumerates all evidence in the set, both that provided by the host and that provided by the assembly.","needQuote":true,"needEscape":true,"nodes":[{"content":"Enumerates all evidence in the set, both that provided by the host and that provided by the assembly.","pos":[0,101]}]},{"pos":[23133,23300],"content":"An enumerator for evidence added by both the &lt;xref:System.Security.Policy.Evidence.AddHost<bpt id=\"p1\">*</bpt>&gt; method and the &lt;xref:System.Security.Policy.Evidence.AddAssembly<ept id=\"p1\">*</ept>&gt; method.","needQuote":true,"needEscape":true,"source":"An enumerator for evidence added by both the <xref:System.Security.Policy.Evidence.AddHost*> method and the <xref:System.Security.Policy.Evidence.AddAssembly*> method."},{"pos":[23769,23810],"content":"Enumerates evidence supplied by the host.","needQuote":true,"needEscape":true,"nodes":[{"content":"Enumerates evidence supplied by the host.","pos":[0,41]}]},{"pos":[24522,24617],"content":"An enumerator for evidence added by the <xref:System.Security.Policy.Evidence.AddHost*> method.","needQuote":true,"needEscape":true,"nodes":[{"content":"An enumerator for evidence added by the &lt;xref:System.Security.Policy.Evidence.AddHost*&gt; method.","pos":[0,95],"source":"An enumerator for evidence added by the <xref:System.Security.Policy.Evidence.AddHost*> method."}]},{"pos":[25242,25254],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[25689,25751],"content":"Gets a value indicating whether the evidence set is read-only.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value indicating whether the evidence set is read-only.","pos":[0,62]}]},{"pos":[25763,25816],"content":"Application code does not normally use this property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Application code does not normally use this property.","pos":[0,53]}]},{"pos":[25930,26051],"content":"Always <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, because read-only evidence sets are not supported.","needQuote":true,"needEscape":true,"source":"Always <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, because read-only evidence sets are not supported."},{"pos":[26498,26562],"content":"Gets a value indicating whether the evidence set is thread-safe.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value indicating whether the evidence set is thread-safe.","pos":[0,64]}]},{"pos":[26574,26627],"content":"Application code does not normally use this property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Application code does not normally use this property.","pos":[0,53]}]},{"pos":[26745,26867],"content":"Always <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> because thread-safe evidence sets are not supported.","needQuote":true,"needEscape":true,"source":"Always <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> because thread-safe evidence sets are not supported."},{"pos":[27278,27341],"content":"Gets or sets a value indicating whether the evidence is locked.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating whether the evidence is locked.","pos":[0,63]}]},{"pos":[27984,28225],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the evidence is locked; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the evidence is locked; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,162],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the evidence is locked; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[163,241],"source":" The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[28717,28781],"content":"Merges the specified evidence set into the current evidence set.","needQuote":true,"needEscape":true,"nodes":[{"content":"Merges the specified evidence set into the current evidence set.","pos":[0,64]}]},{"pos":[28794,29127],"content":"Each evidence object in the specified evidence set is added to the assembly and host sets of the current evidence set, according to the sets from which it came.      > [!NOTE] >  This method does not perform a check to prevent adding duplicate types of evidence. Many assembly and host evidence objects can exist at the same time.","needQuote":false,"needEscape":true,"nodes":[{"content":"Each evidence object in the specified evidence set is added to the assembly and host sets of the current evidence set, according to the sets from which it came.","pos":[0,160]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  This method does not perform a check to prevent adding duplicate types of evidence.","pos":[166,262],"source":"      > [!NOTE] >  This method does not perform a check to prevent adding duplicate types of evidence."},{"content":"Many assembly and host evidence objects can exist at the same time.","pos":[263,330]}]},{"pos":[29826,29886],"content":"The evidence set to be merged into the current evidence set.","needQuote":true,"needEscape":true,"nodes":[{"content":"The evidence set to be merged into the current evidence set.","pos":[0,60]}]},{"pos":[30046,30162],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">evidence</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not a valid instance of <bpt id=\"p2\">&lt;xref href=\"System.Security.Policy.Evidence\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>evidence</code> parameter is not a valid instance of <xref href=\"System.Security.Policy.Evidence\"></xref>."},{"pos":[30275,30580],"content":"&lt;xref:System.Security.Policy.Evidence.Locked*&gt; is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, the code that calls this method does not have <bpt id=\"p2\">&lt;xref href=\"System.Security.Permissions.SecurityPermissionFlag\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, and the <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph1\">evidence</ph><ept id=\"p3\">&lt;/code&gt;</ept> parameter has a host list that is not empty.","needQuote":true,"needEscape":true,"source":"<xref:System.Security.Policy.Evidence.Locked*> is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, the code that calls this method does not have <xref href=\"System.Security.Permissions.SecurityPermissionFlag\"></xref>, and the <code>evidence</code> parameter has a host list that is not empty."},{"pos":[30976,31054],"content":"Removes the evidence for a given type from the host and assembly enumerations.","needQuote":true,"needEscape":true,"nodes":[{"content":"Removes the evidence for a given type from the host and assembly enumerations.","pos":[0,78]}]},{"pos":[31066,31286],"content":"The results of executing the RemoveType method can be confirmed using the <xref:System.Security.Policy.Evidence.GetAssemblyEnumerator%2A> method and the <xref:System.Security.Policy.Evidence.GetHostEnumerator%2A> method.","needQuote":true,"needEscape":true,"nodes":[{"content":"The results of executing the RemoveType method can be confirmed using the &lt;xref:System.Security.Policy.Evidence.GetAssemblyEnumerator%2A&gt; method and the &lt;xref:System.Security.Policy.Evidence.GetHostEnumerator%2A&gt; method.","pos":[0,220],"source":"The results of executing the RemoveType method can be confirmed using the <xref:System.Security.Policy.Evidence.GetAssemblyEnumerator%2A> method and the <xref:System.Security.Policy.Evidence.GetHostEnumerator%2A> method."}]},{"pos":[31936,31975],"content":"The type of the evidence to be removed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type of the evidence to be removed.","pos":[0,39]}]},{"pos":[32148,32171],"content":"<ph id=\"ph1\">&lt;code&gt;t&lt;/code&gt;</ph> is null.","needQuote":true,"needEscape":true,"source":"<code>t</code> is null."},{"pos":[32515,32545],"content":"Gets the synchronization root.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the synchronization root.","pos":[0,30]}]},{"pos":[32557,32612],"content":"This property is not normally used by application code.","needQuote":true,"needEscape":true,"nodes":[{"content":"This property is not normally used by application code.","pos":[0,55]}]},{"pos":[32725,32927],"content":"Always <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_this\" name=\"this\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> (<bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Me\" name=\"Me\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> in Visual Basic), because synchronization of evidence sets is not supported.","needQuote":true,"needEscape":true,"source":"Always <xref uid=\"langword_csharp_this\" name=\"this\" href=\"\"></xref> (<xref uid=\"langword_csharp_Me\" name=\"Me\" href=\"\"></xref> in Visual Basic), because synchronization of evidence sets is not supported."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Policy.Evidence\n  id: Evidence\n  children:\n  - System.Security.Policy.Evidence.#ctor\n  - System.Security.Policy.Evidence.#ctor(System.Security.Policy.Evidence)\n  - System.Security.Policy.Evidence.#ctor(System.Object[],System.Object[])\n  - System.Security.Policy.Evidence.#ctor(System.Security.Policy.EvidenceBase[],System.Security.Policy.EvidenceBase[])\n  - System.Security.Policy.Evidence.AddAssembly(System.Object)\n  - System.Security.Policy.Evidence.AddAssemblyEvidence``1(``0)\n  - System.Security.Policy.Evidence.AddHost(System.Object)\n  - System.Security.Policy.Evidence.AddHostEvidence``1(``0)\n  - System.Security.Policy.Evidence.Clear\n  - System.Security.Policy.Evidence.Clone\n  - System.Security.Policy.Evidence.CopyTo(System.Array,System.Int32)\n  - System.Security.Policy.Evidence.Count\n  - System.Security.Policy.Evidence.GetAssemblyEnumerator\n  - System.Security.Policy.Evidence.GetAssemblyEvidence``1\n  - System.Security.Policy.Evidence.GetEnumerator\n  - System.Security.Policy.Evidence.GetHostEnumerator\n  - System.Security.Policy.Evidence.GetHostEvidence``1\n  - System.Security.Policy.Evidence.IsReadOnly\n  - System.Security.Policy.Evidence.IsSynchronized\n  - System.Security.Policy.Evidence.Locked\n  - System.Security.Policy.Evidence.Merge(System.Security.Policy.Evidence)\n  - System.Security.Policy.Evidence.RemoveType(System.Type)\n  - System.Security.Policy.Evidence.SyncRoot\n  langs:\n  - csharp\n  name: Evidence\n  nameWithType: Evidence\n  fullName: System.Security.Policy.Evidence\n  type: Class\n  summary: Defines the set of information that constitutes input to security policy decisions. This class cannot be inherited.\n  remarks: \"Common forms of evidence include signatures and location of origin of code, but can potentially be anything. Objects of any type that are recognized by security policy represent evidence.  \\n  \\n Security policy is composed of code groups; a particular assembly (the basic unit of code for granting security permissions) is a member of a code group if it satisfies the code group's membership condition. Evidence is the set of inputs to policy that membership conditions use to determine to which code groups an assembly belongs.  \\n  \\n The Evidence class is a collection (see <xref:System.Collections.ICollection>) that holds a set of objects that represent evidence. This class holds two sets that correspond to the source of the evidence: host evidence and assembly evidence.  \\n  \\n Policy can get evidence from two different sources when evaluating permissions for code.  \\n  \\n-   `Host evidence` is provided by the host, and can only be provided by hosts that have been granted the <xref:System.Security.Permissions.SecurityPermissionFlag> permission. Typically, this is evidence of the origin of the code and digital signatures on the assembly. Evidence about origin typically includes <xref:System.Security.Policy.Url>, <xref:System.Security.Policy.Site>, and <xref:System.Security.Policy.Zone> evidence. Signatures refer to software publisher (AuthentiCode X.509v3 signature) and strong name identities. Both kinds of digital signature-based identity are built into the assembly, but must be validated and passed to policy by the host; when loaded, the security system verifies the signature. The system then creates the appropriate evidence and passes it to policy only if the corresponding signature is valid.  \\n  \\n-   `Assembly evidence` is part of the assembly itself. Developers or administrators can attach custom evidence to the assembly to extend the set of evidence for policy. Assembly evidence can only be added at the time of assembly generation, which occurs before the assembly is signed. The default policy of the security system ignores assembly-provided evidence, but policy can be extended to accept it.\"\n  example:\n  - \"The following code example demonstrates how to create new Evidence classes with both host evidence and assembly evidence.  \\n  \\n [!code-vb[System.Security.Policy.Evidence#1](~/add/codesnippet/visualbasic/t-system.security.policy_1_1.vb)]\\n [!code-cpp[System.Security.Policy.Evidence#1](~/add/codesnippet/cpp/t-system.security.policy_1_1.cpp)]\\n [!code-cs[System.Security.Policy.Evidence#1](~/add/codesnippet/csharp/t-system.security.policy_1_1.cs)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class Evidence : System.Collections.ICollection\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.ICollection\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Security.Policy.Evidence.#ctor\n  id: '#ctor'\n  parent: System.Security.Policy.Evidence\n  langs:\n  - csharp\n  name: Evidence()\n  nameWithType: Evidence.Evidence()\n  fullName: System.Security.Policy.Evidence.Evidence()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Policy\n  summary: Initializes a new empty instance of the <xref href=\"System.Security.Policy.Evidence\"></xref> class.\n  remarks: ''\n  example:\n  - \"The following code example shows the use of the Evidence constructor. This example is part of a larger example provided for the <xref:System.Security.Policy.Evidence> class.  \\n  \\n [!code-vb[System.Security.Policy.Evidence#15](~/add/codesnippet/visualbasic/m-system.security.policy_14_1.vb)]\\n [!code-cpp[System.Security.Policy.Evidence#15](~/add/codesnippet/cpp/m-system.security.policy_14_1.cpp)]\\n [!code-cs[System.Security.Policy.Evidence#15](~/add/codesnippet/csharp/m-system.security.policy_14_1.cs)]\"\n  syntax:\n    content: public Evidence ();\n    parameters: []\n  overload: System.Security.Policy.Evidence.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Policy.Evidence.#ctor(System.Security.Policy.Evidence)\n  id: '#ctor(System.Security.Policy.Evidence)'\n  parent: System.Security.Policy.Evidence\n  langs:\n  - csharp\n  name: Evidence(Evidence)\n  nameWithType: Evidence.Evidence(Evidence)\n  fullName: System.Security.Policy.Evidence.Evidence(Evidence)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Policy\n  summary: Initializes a new instance of the <xref href=\"System.Security.Policy.Evidence\"></xref> class from a shallow copy of an existing one.\n  remarks: ''\n  example:\n  - \"The following code example shows the use of the Evidence constructor. This example is part of a larger example provided for the <xref:System.Security.Policy.Evidence> class.  \\n  \\n [!code-vb[System.Security.Policy.Evidence#12](~/add/codesnippet/visualbasic/m-system.security.policy_31_1.vb)]\\n [!code-cpp[System.Security.Policy.Evidence#12](~/add/codesnippet/cpp/m-system.security.policy_31_1.cpp)]\\n [!code-cs[System.Security.Policy.Evidence#12](~/add/codesnippet/csharp/m-system.security.policy_31_1.cs)]\"\n  syntax:\n    content: public Evidence (System.Security.Policy.Evidence evidence);\n    parameters:\n    - id: evidence\n      type: System.Security.Policy.Evidence\n      description: The <xref href=\"System.Security.Policy.Evidence\"></xref> instance from which to create the new instance. This instance is not deep-copied.\n  overload: System.Security.Policy.Evidence.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>evidence</code> parameter is not a valid instance of <xref href=\"System.Security.Policy.Evidence\"></xref>.\n  platform:\n  - net462\n- uid: System.Security.Policy.Evidence.#ctor(System.Object[],System.Object[])\n  id: '#ctor(System.Object[],System.Object[])'\n  parent: System.Security.Policy.Evidence\n  langs:\n  - csharp\n  name: Evidence(Object[],Object[])\n  nameWithType: Evidence.Evidence(Object[],Object[])\n  fullName: System.Security.Policy.Evidence.Evidence(Object[],Object[])\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Policy\n  summary: Initializes a new instance of the <xref href=\"System.Security.Policy.Evidence\"></xref> class from multiple sets of host and assembly evidence.\n  remarks: ''\n  example:\n  - \"The following code example shows the use of the Evidence constructor. This example is part of a larger example provided for the <xref:System.Security.Policy.Evidence> class.  \\n  \\n [!code-vb[System.Security.Policy.Evidence#3](~/add/codesnippet/visualbasic/m-system.security.policy_2_1.vb)]\\n [!code-cpp[System.Security.Policy.Evidence#3](~/add/codesnippet/cpp/m-system.security.policy_2_1.cpp)]\\n [!code-cs[System.Security.Policy.Evidence#3](~/add/codesnippet/csharp/m-system.security.policy_2_1.cs)]\"\n  syntax:\n    content: public Evidence (object[] hostEvidence, object[] assemblyEvidence);\n    parameters:\n    - id: hostEvidence\n      type: System.Object[]\n      description: The host evidence from which to create the new instance.\n    - id: assemblyEvidence\n      type: System.Object[]\n      description: The assembly evidence from which to create the new instance.\n  overload: System.Security.Policy.Evidence.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Policy.Evidence.#ctor(System.Security.Policy.EvidenceBase[],System.Security.Policy.EvidenceBase[])\n  id: '#ctor(System.Security.Policy.EvidenceBase[],System.Security.Policy.EvidenceBase[])'\n  parent: System.Security.Policy.Evidence\n  langs:\n  - csharp\n  name: Evidence(EvidenceBase[],EvidenceBase[])\n  nameWithType: Evidence.Evidence(EvidenceBase[],EvidenceBase[])\n  fullName: System.Security.Policy.Evidence.Evidence(EvidenceBase[],EvidenceBase[])\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Policy\n  summary: Initializes a new instance of the <xref href=\"System.Security.Policy.Evidence\"></xref> class from multiple sets of host and assembly evidence.\n  remarks: This constructor creates a new instance of the class by using evidence objects that inherit from the <xref:System.Security.Policy.EvidenceBase> class.\n  syntax:\n    content: public Evidence (System.Security.Policy.EvidenceBase[] hostEvidence, System.Security.Policy.EvidenceBase[] assemblyEvidence);\n    parameters:\n    - id: hostEvidence\n      type: System.Security.Policy.EvidenceBase[]\n      description: The host evidence from which to create the new instance.\n    - id: assemblyEvidence\n      type: System.Security.Policy.EvidenceBase[]\n      description: The assembly evidence from which to create the new instance.\n  overload: System.Security.Policy.Evidence.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Policy.Evidence.AddAssembly(System.Object)\n  id: AddAssembly(System.Object)\n  parent: System.Security.Policy.Evidence\n  langs:\n  - csharp\n  name: AddAssembly(Object)\n  nameWithType: Evidence.AddAssembly(Object)\n  fullName: System.Security.Policy.Evidence.AddAssembly(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Policy\n  summary: Adds the specified assembly evidence to the evidence set.\n  remarks: \"Use this method for evidence derived from the assembly.  \\n  \\n> [!NOTE]\\n>  This method does not perform a check to prevent adding duplicate types of evidence. Many assembly evidence objects can exist at the same time.\"\n  example:\n  - \"The following code example shows the use of the AddAssembly method. This example is part of a larger example provided for the <xref:System.Security.Policy.Evidence> class.  \\n  \\n [!code-vb[System.Security.Policy.Evidence#4](~/add/codesnippet/visualbasic/m-system.security.policy_12_1.vb)]\\n [!code-cpp[System.Security.Policy.Evidence#4](~/add/codesnippet/cpp/m-system.security.policy_12_1.cpp)]\\n [!code-cs[System.Security.Policy.Evidence#4](~/add/codesnippet/csharp/m-system.security.policy_12_1.cs)]\"\n  syntax:\n    content: public void AddAssembly (object id);\n    parameters:\n    - id: id\n      type: System.Object\n      description: Any evidence object.\n  overload: System.Security.Policy.Evidence.AddAssembly*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>id</code> is null.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>id</code> is not serializable.\n  platform:\n  - net462\n- uid: System.Security.Policy.Evidence.AddAssemblyEvidence``1(``0)\n  id: AddAssemblyEvidence``1(``0)\n  parent: System.Security.Policy.Evidence\n  langs:\n  - csharp\n  name: AddAssemblyEvidence(T)\n  nameWithType: Evidence.AddAssemblyEvidence(T)\n  fullName: System.Security.Policy.Evidence.AddAssemblyEvidence(T)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Policy\n  syntax:\n    content: 'public void AddAssemblyEvidence<T> (T evidence) where T : System.Security.Policy.EvidenceBase;'\n    parameters:\n    - id: evidence\n      type: T\n      description: To be added.\n  overload: System.Security.Policy.Evidence.AddAssemblyEvidence<T>*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Policy.Evidence.AddHost(System.Object)\n  id: AddHost(System.Object)\n  parent: System.Security.Policy.Evidence\n  langs:\n  - csharp\n  name: AddHost(Object)\n  nameWithType: Evidence.AddHost(Object)\n  fullName: System.Security.Policy.Evidence.AddHost(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Policy\n  summary: Adds the specified evidence supplied by the host to the evidence set.\n  remarks: \"Use this method for evidence supplied by the host.  \\n  \\n> [!NOTE]\\n>  This method does not perform a check to prevent adding duplicate types of evidence. Many host evidence objects can exist at the same time.\"\n  example:\n  - \"The following code example shows the use of the AddHost method. This example is part of a larger example provided for the <xref:System.Security.Policy.Evidence> class.  \\n  \\n [!code-vb[System.Security.Policy.Evidence#2](~/add/codesnippet/visualbasic/m-system.security.policy_20_1.vb)]\\n [!code-cpp[System.Security.Policy.Evidence#2](~/add/codesnippet/cpp/m-system.security.policy_20_1.cpp)]\\n [!code-cs[System.Security.Policy.Evidence#2](~/add/codesnippet/csharp/m-system.security.policy_20_1.cs)]\"\n  syntax:\n    content: public void AddHost (object id);\n    parameters:\n    - id: id\n      type: System.Object\n      description: Any evidence object.\n  overload: System.Security.Policy.Evidence.AddHost*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>id</code> is null.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>id</code> is not serializable.\n  platform:\n  - net462\n- uid: System.Security.Policy.Evidence.AddHostEvidence``1(``0)\n  id: AddHostEvidence``1(``0)\n  parent: System.Security.Policy.Evidence\n  langs:\n  - csharp\n  name: AddHostEvidence(T)\n  nameWithType: Evidence.AddHostEvidence(T)\n  fullName: System.Security.Policy.Evidence.AddHostEvidence(T)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Policy\n  syntax:\n    content: 'public void AddHostEvidence<T> (T evidence) where T : System.Security.Policy.EvidenceBase;'\n    parameters:\n    - id: evidence\n      type: T\n      description: To be added.\n  overload: System.Security.Policy.Evidence.AddHostEvidence<T>*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Policy.Evidence.Clear\n  id: Clear\n  parent: System.Security.Policy.Evidence\n  langs:\n  - csharp\n  name: Clear()\n  nameWithType: Evidence.Clear()\n  fullName: System.Security.Policy.Evidence.Clear()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Policy\n  summary: Removes the host and assembly evidence from the evidence set.\n  remarks: Clear removes the evidence in the host and assembly enumerations, setting both to `null`.\n  example:\n  - \"The following code example shows the use of the Clear method. This example is part of a larger example provided for the <xref:System.Security.Policy.Evidence> class.  \\n  \\n [!code-vb[System.Security.Policy.Evidence#13](~/add/codesnippet/visualbasic/m-system.security.policy_16_1.vb)]\\n [!code-cpp[System.Security.Policy.Evidence#13](~/add/codesnippet/cpp/m-system.security.policy_16_1.cpp)]\\n [!code-cs[System.Security.Policy.Evidence#13](~/add/codesnippet/csharp/m-system.security.policy_16_1.cs)]\"\n  syntax:\n    content: public void Clear ();\n    parameters: []\n  overload: System.Security.Policy.Evidence.Clear*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Policy.Evidence.Clone\n  id: Clone\n  parent: System.Security.Policy.Evidence\n  langs:\n  - csharp\n  name: Clone()\n  nameWithType: Evidence.Clone()\n  fullName: System.Security.Policy.Evidence.Clone()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Policy\n  summary: Returns a duplicate copy of this evidence object.\n  remarks: The duplicate copy is a complete copy that includes all the evidence objects in the collection.\n  syntax:\n    content: public System.Security.Policy.Evidence Clone ();\n    parameters: []\n    return:\n      type: System.Security.Policy.Evidence\n      description: A duplicate copy of this evidence object.\n  overload: System.Security.Policy.Evidence.Clone*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Policy.Evidence.CopyTo(System.Array,System.Int32)\n  id: CopyTo(System.Array,System.Int32)\n  parent: System.Security.Policy.Evidence\n  langs:\n  - csharp\n  name: CopyTo(Array,Int32)\n  nameWithType: Evidence.CopyTo(Array,Int32)\n  fullName: System.Security.Policy.Evidence.CopyTo(Array,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Policy\n  summary: Copies evidence objects to an <xref:System.Array>.\n  remarks: ''\n  example:\n  - \"The following code example shows the use of the CopyTo method. This example is part of a larger example provided for the <xref:System.Security.Policy.Evidence> class.  \\n  \\n [!code-vb[System.Security.Policy.Evidence#6](~/add/codesnippet/visualbasic/m-system.security.policy_0_1.vb)]\\n [!code-cpp[System.Security.Policy.Evidence#6](~/add/codesnippet/cpp/m-system.security.policy_0_1.cpp)]\\n [!code-cs[System.Security.Policy.Evidence#6](~/add/codesnippet/csharp/m-system.security.policy_0_1.cs)]\"\n  syntax:\n    content: public void CopyTo (Array array, int index);\n    parameters:\n    - id: array\n      type: System.Array\n      description: The target array to which to copy evidence objects.\n    - id: index\n      type: System.Int32\n      description: The zero-based position in the array to which to begin copying evidence objects.\n  overload: System.Security.Policy.Evidence.CopyTo*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>array</code> is null.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index </code>is outside the range of the target array<code>.</code>\n  platform:\n  - net462\n- uid: System.Security.Policy.Evidence.Count\n  id: Count\n  parent: System.Security.Policy.Evidence\n  langs:\n  - csharp\n  name: Count\n  nameWithType: Evidence.Count\n  fullName: System.Security.Policy.Evidence.Count\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Policy\n  summary: Gets the number of evidence objects in the evidence set.\n  remarks: ''\n  example:\n  - \"The following code example shows the use of the Count property. This example is part of a larger example provided for the <xref:System.Security.Policy.Evidence> class.  \\n  \\n [!code-vb[System.Security.Policy.Evidence#12](~/add/codesnippet/visualbasic/p-system.security.policy_13_1.vb)]\\n [!code-cpp[System.Security.Policy.Evidence#12](~/add/codesnippet/cpp/p-system.security.policy_13_1.cpp)]\\n [!code-cs[System.Security.Policy.Evidence#12](~/add/codesnippet/csharp/p-system.security.policy_13_1.cs)]\"\n  syntax:\n    content: public int Count { get; }\n    return:\n      type: System.Int32\n      description: The number of evidence objects in the evidence set.\n  overload: System.Security.Policy.Evidence.Count*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Policy.Evidence.GetAssemblyEnumerator\n  id: GetAssemblyEnumerator\n  parent: System.Security.Policy.Evidence\n  langs:\n  - csharp\n  name: GetAssemblyEnumerator()\n  nameWithType: Evidence.GetAssemblyEnumerator()\n  fullName: System.Security.Policy.Evidence.GetAssemblyEnumerator()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Policy\n  summary: Enumerates evidence provided by the assembly.\n  remarks: ''\n  example:\n  - \"The following example shows the use of the GetAssemblyEnumerator method. This example is part of a larger example provided for the <xref:System.Security.Policy.Evidence> class.  \\n  \\n [!code-vb[System.Security.Policy.Evidence#3](~/add/codesnippet/visualbasic/m-system.security.policy_22_1.vb)]\\n [!code-cpp[System.Security.Policy.Evidence#3](~/add/codesnippet/cpp/m-system.security.policy_22_1.cpp)]\\n [!code-cs[System.Security.Policy.Evidence#3](~/add/codesnippet/csharp/m-system.security.policy_22_1.cs)]\"\n  syntax:\n    content: public System.Collections.IEnumerator GetAssemblyEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: An enumerator for evidence added by the <xref:System.Security.Policy.Evidence.AddAssembly*> method.\n  overload: System.Security.Policy.Evidence.GetAssemblyEnumerator*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Policy.Evidence.GetAssemblyEvidence``1\n  id: GetAssemblyEvidence``1\n  parent: System.Security.Policy.Evidence\n  langs:\n  - csharp\n  name: GetAssemblyEvidence()\n  nameWithType: Evidence.GetAssemblyEvidence()\n  fullName: System.Security.Policy.Evidence.GetAssemblyEvidence()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Policy\n  syntax:\n    content: 'public T GetAssemblyEvidence<T> () where T : System.Security.Policy.EvidenceBase;'\n    parameters: []\n    return:\n      type: T\n      description: To be added.\n  overload: System.Security.Policy.Evidence.GetAssemblyEvidence<T>*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Policy.Evidence.GetEnumerator\n  id: GetEnumerator\n  parent: System.Security.Policy.Evidence\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: Evidence.GetEnumerator()\n  fullName: System.Security.Policy.Evidence.GetEnumerator()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Policy\n  summary: Enumerates all evidence in the set, both that provided by the host and that provided by the assembly.\n  remarks: ''\n  example:\n  - \"The following code example shows the use of the GetEnumerator method. This example is part of a larger example provided for the <xref:System.Security.Policy.Evidence> class.  \\n  \\n [!code-vb[System.Security.Policy.Evidence#14](~/add/codesnippet/visualbasic/m-system.security.policy_5_1.vb)]\\n [!code-cpp[System.Security.Policy.Evidence#14](~/add/codesnippet/cpp/m-system.security.policy_5_1.cpp)]\\n [!code-cs[System.Security.Policy.Evidence#14](~/add/codesnippet/csharp/m-system.security.policy_5_1.cs)]\"\n  syntax:\n    content: public System.Collections.IEnumerator GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: An enumerator for evidence added by both the <xref:System.Security.Policy.Evidence.AddHost*> method and the <xref:System.Security.Policy.Evidence.AddAssembly*> method.\n  overload: System.Security.Policy.Evidence.GetEnumerator*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Policy.Evidence.GetHostEnumerator\n  id: GetHostEnumerator\n  parent: System.Security.Policy.Evidence\n  langs:\n  - csharp\n  name: GetHostEnumerator()\n  nameWithType: Evidence.GetHostEnumerator()\n  fullName: System.Security.Policy.Evidence.GetHostEnumerator()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Policy\n  summary: Enumerates evidence supplied by the host.\n  remarks: ''\n  example:\n  - \"The following example shows the use of the GetHostEnumerator method. This example is part of a larger example provided for the <xref:System.Security.Policy.Evidence> class.  \\n  \\n [!code-vb[System.Security.Policy.Evidence#2](~/add/codesnippet/visualbasic/m-system.security.policy_35_1.vb)]\\n [!code-cpp[System.Security.Policy.Evidence#2](~/add/codesnippet/cpp/m-system.security.policy_35_1.cpp)]\\n [!code-cs[System.Security.Policy.Evidence#2](~/add/codesnippet/csharp/m-system.security.policy_35_1.cs)]\"\n  syntax:\n    content: public System.Collections.IEnumerator GetHostEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: An enumerator for evidence added by the <xref:System.Security.Policy.Evidence.AddHost*> method.\n  overload: System.Security.Policy.Evidence.GetHostEnumerator*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Policy.Evidence.GetHostEvidence``1\n  id: GetHostEvidence``1\n  parent: System.Security.Policy.Evidence\n  langs:\n  - csharp\n  name: GetHostEvidence()\n  nameWithType: Evidence.GetHostEvidence()\n  fullName: System.Security.Policy.Evidence.GetHostEvidence()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Policy\n  syntax:\n    content: 'public T GetHostEvidence<T> () where T : System.Security.Policy.EvidenceBase;'\n    parameters: []\n    return:\n      type: T\n      description: To be added.\n  overload: System.Security.Policy.Evidence.GetHostEvidence<T>*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Policy.Evidence.IsReadOnly\n  id: IsReadOnly\n  parent: System.Security.Policy.Evidence\n  langs:\n  - csharp\n  name: IsReadOnly\n  nameWithType: Evidence.IsReadOnly\n  fullName: System.Security.Policy.Evidence.IsReadOnly\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Policy\n  summary: Gets a value indicating whether the evidence set is read-only.\n  remarks: Application code does not normally use this property.\n  syntax:\n    content: public bool IsReadOnly { get; }\n    return:\n      type: System.Boolean\n      description: Always <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, because read-only evidence sets are not supported.\n  overload: System.Security.Policy.Evidence.IsReadOnly*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Policy.Evidence.IsSynchronized\n  id: IsSynchronized\n  parent: System.Security.Policy.Evidence\n  langs:\n  - csharp\n  name: IsSynchronized\n  nameWithType: Evidence.IsSynchronized\n  fullName: System.Security.Policy.Evidence.IsSynchronized\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Policy\n  summary: Gets a value indicating whether the evidence set is thread-safe.\n  remarks: Application code does not normally use this property.\n  syntax:\n    content: public bool IsSynchronized { get; }\n    return:\n      type: System.Boolean\n      description: Always <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> because thread-safe evidence sets are not supported.\n  overload: System.Security.Policy.Evidence.IsSynchronized*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Policy.Evidence.Locked\n  id: Locked\n  parent: System.Security.Policy.Evidence\n  langs:\n  - csharp\n  name: Locked\n  nameWithType: Evidence.Locked\n  fullName: System.Security.Policy.Evidence.Locked\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Policy\n  summary: Gets or sets a value indicating whether the evidence is locked.\n  remarks: ''\n  example:\n  - \"The following code example shows the use of the Locked property. This example is part of a larger example provided for the <xref:System.Security.Policy.Evidence> class.  \\n  \\n [!code-vb[System.Security.Policy.Evidence#7](~/add/codesnippet/visualbasic/p-system.security.policy_2_1.vb)]\\n [!code-cpp[System.Security.Policy.Evidence#7](~/add/codesnippet/cpp/p-system.security.policy_2_1.cpp)]\\n [!code-cs[System.Security.Policy.Evidence#7](~/add/codesnippet/csharp/p-system.security.policy_2_1.cs)]\"\n  syntax:\n    content: public bool Locked { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the evidence is locked; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Policy.Evidence.Locked*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Policy.Evidence.Merge(System.Security.Policy.Evidence)\n  id: Merge(System.Security.Policy.Evidence)\n  parent: System.Security.Policy.Evidence\n  langs:\n  - csharp\n  name: Merge(Evidence)\n  nameWithType: Evidence.Merge(Evidence)\n  fullName: System.Security.Policy.Evidence.Merge(Evidence)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Policy\n  summary: Merges the specified evidence set into the current evidence set.\n  remarks: \"Each evidence object in the specified evidence set is added to the assembly and host sets of the current evidence set, according to the sets from which it came.  \\n  \\n> [!NOTE]\\n>  This method does not perform a check to prevent adding duplicate types of evidence. Many assembly and host evidence objects can exist at the same time.\"\n  example:\n  - \"The following code example shows the use of the Merge method. This example is part of a larger example provided for the <xref:System.Security.Policy.Evidence> class.  \\n  \\n [!code-vb[System.Security.Policy.Evidence#10](~/add/codesnippet/visualbasic/m-system.security.policy_9_1.vb)]\\n [!code-cpp[System.Security.Policy.Evidence#10](~/add/codesnippet/cpp/m-system.security.policy_9_1.cpp)]\\n [!code-cs[System.Security.Policy.Evidence#10](~/add/codesnippet/csharp/m-system.security.policy_9_1.cs)]\"\n  syntax:\n    content: public void Merge (System.Security.Policy.Evidence evidence);\n    parameters:\n    - id: evidence\n      type: System.Security.Policy.Evidence\n      description: The evidence set to be merged into the current evidence set.\n  overload: System.Security.Policy.Evidence.Merge*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>evidence</code> parameter is not a valid instance of <xref href=\"System.Security.Policy.Evidence\"></xref>.\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: <xref:System.Security.Policy.Evidence.Locked*> is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, the code that calls this method does not have <xref href=\"System.Security.Permissions.SecurityPermissionFlag\"></xref>, and the <code>evidence</code> parameter has a host list that is not empty.\n  platform:\n  - net462\n- uid: System.Security.Policy.Evidence.RemoveType(System.Type)\n  id: RemoveType(System.Type)\n  parent: System.Security.Policy.Evidence\n  langs:\n  - csharp\n  name: RemoveType(Type)\n  nameWithType: Evidence.RemoveType(Type)\n  fullName: System.Security.Policy.Evidence.RemoveType(Type)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Policy\n  summary: Removes the evidence for a given type from the host and assembly enumerations.\n  remarks: The results of executing the RemoveType method can be confirmed using the <xref:System.Security.Policy.Evidence.GetAssemblyEnumerator%2A> method and the <xref:System.Security.Policy.Evidence.GetHostEnumerator%2A> method.\n  example:\n  - \"The following code example shows the use of the RemoveType method. This example is part of a larger example provided for the <xref:System.Security.Policy.Evidence> class.  \\n  \\n [!code-vb[System.Security.Policy.Evidence#11](~/add/codesnippet/visualbasic/m-system.security.policy_36_1.vb)]\\n [!code-cpp[System.Security.Policy.Evidence#11](~/add/codesnippet/cpp/m-system.security.policy_36_1.cpp)]\\n [!code-cs[System.Security.Policy.Evidence#11](~/add/codesnippet/csharp/m-system.security.policy_36_1.cs)]\"\n  syntax:\n    content: public void RemoveType (Type t);\n    parameters:\n    - id: t\n      type: System.Type\n      description: The type of the evidence to be removed.\n  overload: System.Security.Policy.Evidence.RemoveType*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>t</code> is null.\n  platform:\n  - net462\n- uid: System.Security.Policy.Evidence.SyncRoot\n  id: SyncRoot\n  parent: System.Security.Policy.Evidence\n  langs:\n  - csharp\n  name: SyncRoot\n  nameWithType: Evidence.SyncRoot\n  fullName: System.Security.Policy.Evidence.SyncRoot\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Policy\n  summary: Gets the synchronization root.\n  remarks: This property is not normally used by application code.\n  syntax:\n    content: public object SyncRoot { get; }\n    return:\n      type: System.Object\n      description: Always <xref uid=\"langword_csharp_this\" name=\"this\" href=\"\"></xref> (<xref uid=\"langword_csharp_Me\" name=\"Me\" href=\"\"></xref> in Visual Basic), because synchronization of evidence sets is not supported.\n  overload: System.Security.Policy.Evidence.SyncRoot*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.Security.SecurityException\n  isExternal: true\n  name: System.Security.SecurityException\n- uid: System.Security.Policy.Evidence.#ctor\n  parent: System.Security.Policy.Evidence\n  isExternal: false\n  name: Evidence()\n  nameWithType: Evidence.Evidence()\n  fullName: System.Security.Policy.Evidence.Evidence()\n- uid: System.Security.Policy.Evidence.#ctor(System.Security.Policy.Evidence)\n  parent: System.Security.Policy.Evidence\n  isExternal: false\n  name: Evidence(Evidence)\n  nameWithType: Evidence.Evidence(Evidence)\n  fullName: System.Security.Policy.Evidence.Evidence(Evidence)\n- uid: System.Security.Policy.Evidence\n  parent: System.Security.Policy\n  isExternal: false\n  name: Evidence\n  nameWithType: Evidence\n  fullName: System.Security.Policy.Evidence\n- uid: System.Security.Policy.Evidence.#ctor(System.Object[],System.Object[])\n  parent: System.Security.Policy.Evidence\n  isExternal: false\n  name: Evidence(Object[],Object[])\n  nameWithType: Evidence.Evidence(Object[],Object[])\n  fullName: System.Security.Policy.Evidence.Evidence(Object[],Object[])\n- uid: System.Object[]\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object[]\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: Object[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Security.Policy.Evidence.#ctor(System.Security.Policy.EvidenceBase[],System.Security.Policy.EvidenceBase[])\n  parent: System.Security.Policy.Evidence\n  isExternal: false\n  name: Evidence(EvidenceBase[],EvidenceBase[])\n  nameWithType: Evidence.Evidence(EvidenceBase[],EvidenceBase[])\n  fullName: System.Security.Policy.Evidence.Evidence(EvidenceBase[],EvidenceBase[])\n- uid: System.Security.Policy.EvidenceBase[]\n  parent: System.Security.Policy\n  isExternal: false\n  name: EvidenceBase\n  nameWithType: EvidenceBase\n  fullName: System.Security.Policy.EvidenceBase[]\n  spec.csharp:\n  - uid: System.Security.Policy.EvidenceBase\n    name: EvidenceBase\n    nameWithType: EvidenceBase\n    fullName: EvidenceBase[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Security.Policy.Evidence.AddAssembly(System.Object)\n  parent: System.Security.Policy.Evidence\n  isExternal: false\n  name: AddAssembly(Object)\n  nameWithType: Evidence.AddAssembly(Object)\n  fullName: System.Security.Policy.Evidence.AddAssembly(Object)\n- uid: System.Security.Policy.Evidence.AddAssemblyEvidence``1(``0)\n  parent: System.Security.Policy.Evidence\n  isExternal: false\n  name: AddAssemblyEvidence(T)\n  nameWithType: Evidence.AddAssemblyEvidence(T)\n  fullName: System.Security.Policy.Evidence.AddAssemblyEvidence(T)\n- uid: T\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.Security.Policy.Evidence.AddHost(System.Object)\n  parent: System.Security.Policy.Evidence\n  isExternal: false\n  name: AddHost(Object)\n  nameWithType: Evidence.AddHost(Object)\n  fullName: System.Security.Policy.Evidence.AddHost(Object)\n- uid: System.Security.Policy.Evidence.AddHostEvidence``1(``0)\n  parent: System.Security.Policy.Evidence\n  isExternal: false\n  name: AddHostEvidence(T)\n  nameWithType: Evidence.AddHostEvidence(T)\n  fullName: System.Security.Policy.Evidence.AddHostEvidence(T)\n- uid: System.Security.Policy.Evidence.Clear\n  parent: System.Security.Policy.Evidence\n  isExternal: false\n  name: Clear()\n  nameWithType: Evidence.Clear()\n  fullName: System.Security.Policy.Evidence.Clear()\n- uid: System.Security.Policy.Evidence.Clone\n  parent: System.Security.Policy.Evidence\n  isExternal: false\n  name: Clone()\n  nameWithType: Evidence.Clone()\n  fullName: System.Security.Policy.Evidence.Clone()\n- uid: System.Security.Policy.Evidence.CopyTo(System.Array,System.Int32)\n  parent: System.Security.Policy.Evidence\n  isExternal: false\n  name: CopyTo(Array,Int32)\n  nameWithType: Evidence.CopyTo(Array,Int32)\n  fullName: System.Security.Policy.Evidence.CopyTo(Array,Int32)\n- uid: System.Array\n  parent: System\n  isExternal: true\n  name: Array\n  nameWithType: Array\n  fullName: System.Array\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Policy.Evidence.Count\n  parent: System.Security.Policy.Evidence\n  isExternal: false\n  name: Count\n  nameWithType: Evidence.Count\n  fullName: System.Security.Policy.Evidence.Count\n- uid: System.Security.Policy.Evidence.GetAssemblyEnumerator\n  parent: System.Security.Policy.Evidence\n  isExternal: false\n  name: GetAssemblyEnumerator()\n  nameWithType: Evidence.GetAssemblyEnumerator()\n  fullName: System.Security.Policy.Evidence.GetAssemblyEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: true\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.Security.Policy.Evidence.GetAssemblyEvidence``1\n  parent: System.Security.Policy.Evidence\n  isExternal: false\n  name: GetAssemblyEvidence()\n  nameWithType: Evidence.GetAssemblyEvidence()\n  fullName: System.Security.Policy.Evidence.GetAssemblyEvidence()\n- uid: System.Security.Policy.Evidence.GetEnumerator\n  parent: System.Security.Policy.Evidence\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: Evidence.GetEnumerator()\n  fullName: System.Security.Policy.Evidence.GetEnumerator()\n- uid: System.Security.Policy.Evidence.GetHostEnumerator\n  parent: System.Security.Policy.Evidence\n  isExternal: false\n  name: GetHostEnumerator()\n  nameWithType: Evidence.GetHostEnumerator()\n  fullName: System.Security.Policy.Evidence.GetHostEnumerator()\n- uid: System.Security.Policy.Evidence.GetHostEvidence``1\n  parent: System.Security.Policy.Evidence\n  isExternal: false\n  name: GetHostEvidence()\n  nameWithType: Evidence.GetHostEvidence()\n  fullName: System.Security.Policy.Evidence.GetHostEvidence()\n- uid: System.Security.Policy.Evidence.IsReadOnly\n  parent: System.Security.Policy.Evidence\n  isExternal: false\n  name: IsReadOnly\n  nameWithType: Evidence.IsReadOnly\n  fullName: System.Security.Policy.Evidence.IsReadOnly\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Policy.Evidence.IsSynchronized\n  parent: System.Security.Policy.Evidence\n  isExternal: false\n  name: IsSynchronized\n  nameWithType: Evidence.IsSynchronized\n  fullName: System.Security.Policy.Evidence.IsSynchronized\n- uid: System.Security.Policy.Evidence.Locked\n  parent: System.Security.Policy.Evidence\n  isExternal: false\n  name: Locked\n  nameWithType: Evidence.Locked\n  fullName: System.Security.Policy.Evidence.Locked\n- uid: System.Security.Policy.Evidence.Merge(System.Security.Policy.Evidence)\n  parent: System.Security.Policy.Evidence\n  isExternal: false\n  name: Merge(Evidence)\n  nameWithType: Evidence.Merge(Evidence)\n  fullName: System.Security.Policy.Evidence.Merge(Evidence)\n- uid: System.Security.Policy.Evidence.RemoveType(System.Type)\n  parent: System.Security.Policy.Evidence\n  isExternal: false\n  name: RemoveType(Type)\n  nameWithType: Evidence.RemoveType(Type)\n  fullName: System.Security.Policy.Evidence.RemoveType(Type)\n- uid: System.Type\n  parent: System\n  isExternal: true\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Security.Policy.Evidence.SyncRoot\n  parent: System.Security.Policy.Evidence\n  isExternal: false\n  name: SyncRoot\n  nameWithType: Evidence.SyncRoot\n  fullName: System.Security.Policy.Evidence.SyncRoot\n- uid: System.Security.Policy.Evidence.#ctor*\n  parent: System.Security.Policy.Evidence\n  isExternal: false\n  name: Evidence\n  nameWithType: Evidence.Evidence\n- uid: System.Security.Policy.Evidence.AddAssembly*\n  parent: System.Security.Policy.Evidence\n  isExternal: false\n  name: AddAssembly\n  nameWithType: Evidence.AddAssembly\n- uid: System.Security.Policy.Evidence.AddAssemblyEvidence<T>*\n  parent: System.Security.Policy.Evidence\n  isExternal: false\n  name: AddAssemblyEvidence<T>\n  nameWithType: Evidence.AddAssemblyEvidence<T>\n- uid: System.Security.Policy.Evidence.AddHost*\n  parent: System.Security.Policy.Evidence\n  isExternal: false\n  name: AddHost\n  nameWithType: Evidence.AddHost\n- uid: System.Security.Policy.Evidence.AddHostEvidence<T>*\n  parent: System.Security.Policy.Evidence\n  isExternal: false\n  name: AddHostEvidence<T>\n  nameWithType: Evidence.AddHostEvidence<T>\n- uid: System.Security.Policy.Evidence.Clear*\n  parent: System.Security.Policy.Evidence\n  isExternal: false\n  name: Clear\n  nameWithType: Evidence.Clear\n- uid: System.Security.Policy.Evidence.Clone*\n  parent: System.Security.Policy.Evidence\n  isExternal: false\n  name: Clone\n  nameWithType: Evidence.Clone\n- uid: System.Security.Policy.Evidence.CopyTo*\n  parent: System.Security.Policy.Evidence\n  isExternal: false\n  name: CopyTo\n  nameWithType: Evidence.CopyTo\n- uid: System.Security.Policy.Evidence.Count*\n  parent: System.Security.Policy.Evidence\n  isExternal: false\n  name: Count\n  nameWithType: Evidence.Count\n- uid: System.Security.Policy.Evidence.GetAssemblyEnumerator*\n  parent: System.Security.Policy.Evidence\n  isExternal: false\n  name: GetAssemblyEnumerator\n  nameWithType: Evidence.GetAssemblyEnumerator\n- uid: System.Security.Policy.Evidence.GetAssemblyEvidence<T>*\n  parent: System.Security.Policy.Evidence\n  isExternal: false\n  name: GetAssemblyEvidence<T>\n  nameWithType: Evidence.GetAssemblyEvidence<T>\n- uid: System.Security.Policy.Evidence.GetEnumerator*\n  parent: System.Security.Policy.Evidence\n  isExternal: false\n  name: GetEnumerator\n  nameWithType: Evidence.GetEnumerator\n- uid: System.Security.Policy.Evidence.GetHostEnumerator*\n  parent: System.Security.Policy.Evidence\n  isExternal: false\n  name: GetHostEnumerator\n  nameWithType: Evidence.GetHostEnumerator\n- uid: System.Security.Policy.Evidence.GetHostEvidence<T>*\n  parent: System.Security.Policy.Evidence\n  isExternal: false\n  name: GetHostEvidence<T>\n  nameWithType: Evidence.GetHostEvidence<T>\n- uid: System.Security.Policy.Evidence.IsReadOnly*\n  parent: System.Security.Policy.Evidence\n  isExternal: false\n  name: IsReadOnly\n  nameWithType: Evidence.IsReadOnly\n- uid: System.Security.Policy.Evidence.IsSynchronized*\n  parent: System.Security.Policy.Evidence\n  isExternal: false\n  name: IsSynchronized\n  nameWithType: Evidence.IsSynchronized\n- uid: System.Security.Policy.Evidence.Locked*\n  parent: System.Security.Policy.Evidence\n  isExternal: false\n  name: Locked\n  nameWithType: Evidence.Locked\n- uid: System.Security.Policy.Evidence.Merge*\n  parent: System.Security.Policy.Evidence\n  isExternal: false\n  name: Merge\n  nameWithType: Evidence.Merge\n- uid: System.Security.Policy.Evidence.RemoveType*\n  parent: System.Security.Policy.Evidence\n  isExternal: false\n  name: RemoveType\n  nameWithType: Evidence.RemoveType\n- uid: System.Security.Policy.Evidence.SyncRoot*\n  parent: System.Security.Policy.Evidence\n  isExternal: false\n  name: SyncRoot\n  nameWithType: Evidence.SyncRoot\n"}