{"nodes":[{"pos":[1051,1182],"content":"Creates Optimal Asymmetric Encryption Padding (OAEP) key exchange data using <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.RSA\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Creates Optimal Asymmetric Encryption Padding (OAEP) key exchange data using <xref href=\"System.Security.Cryptography.RSA\"></xref>."},{"pos":[1195,1810],"content":"Key exchange allows a sender to create secret information, for example, random data that can be used as a key in a symmetric encryption algorithm, and use encryption to send it to the intended recipient.       Use <xref:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter> to receive the key exchange and extract the secret information from it.      > [!CAUTION] >  It is highly recommended that you not attempt to create your own key exchange method from the basic functionality provided, because many details of the operation must be performed carefully in order for the key exchange to be successful.","needQuote":false,"needEscape":true,"nodes":[{"content":"Key exchange allows a sender to create secret information, for example, random data that can be used as a key in a symmetric encryption algorithm, and use encryption to send it to the intended recipient.","pos":[0,203]},{"content":"Use &lt;xref:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter&gt; to receive the key exchange and extract the secret information from it.","pos":[210,351],"source":"       Use <xref:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter> to receive the key exchange and extract the secret information from it."},{"content":"&gt; <ph id=\"ph1\">[!CAUTION]</ph> &gt;  It is highly recommended that you not attempt to create your own key exchange method from the basic functionality provided, because many details of the operation must be performed carefully in order for the key exchange to be successful.","pos":[357,610],"source":"      > [!CAUTION] >  It is highly recommended that you not attempt to create your own key exchange method from the basic functionality provided, because many details of the operation must be performed carefully in order for the key exchange to be successful."}]},{"pos":[3070,3188],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.RSAOAEPKeyExchangeFormatter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.RSAOAEPKeyExchangeFormatter\"></xref> class."},{"pos":[3200,3393],"content":"Use <xref:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.SetKey%2A> to set the key before calling <xref:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange%2A>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Use &lt;xref:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.SetKey%2A&gt; to set the key before calling &lt;xref:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange%2A&gt;.","pos":[0,193],"source":"Use <xref:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.SetKey%2A> to set the key before calling <xref:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange%2A>."}]},{"pos":[4230,4371],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.RSAOAEPKeyExchangeFormatter\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified key.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.RSAOAEPKeyExchangeFormatter\"></xref> class with the specified key."},{"pos":[4596,4706],"content":"The instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.RSA\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> algorithm that holds the public key.","needQuote":true,"needEscape":true,"source":"The instance of the <xref href=\"System.Security.Cryptography.RSA\"></xref> algorithm that holds the public key."},{"pos":[4899,4980],"content":"<ph id=\"ph1\">&lt;code&gt;key &lt;/code&gt;</ph>is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>key </code>is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[5521,5591],"content":"Creates the encrypted key exchange data from the specified input data.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates the encrypted key exchange data from the specified input data.","pos":[0,70]}]},{"pos":[5603,5816],"content":"This data can be interpreted only by the holder of the private key corresponding to the public key used to encrypt the data. This helps to ensure that only the intended recipient can access the secret information.","needQuote":true,"needEscape":true,"nodes":[{"content":"This data can be interpreted only by the holder of the private key corresponding to the public key used to encrypt the data. This helps to ensure that only the intended recipient can access the secret information.","pos":[0,213],"nodes":[{"content":"This data can be interpreted only by the holder of the private key corresponding to the public key used to encrypt the data.","pos":[0,124]},{"content":"This helps to ensure that only the intended recipient can access the secret information.","pos":[125,213]}]}]},{"pos":[5978,6034],"content":"The secret information to be passed in the key exchange.","needQuote":true,"needEscape":true,"nodes":[{"content":"The secret information to be passed in the key exchange.","pos":[0,56]}]},{"pos":[6092,6161],"content":"The encrypted key exchange data to be sent to the intended recipient.","needQuote":true,"needEscape":true,"nodes":[{"content":"The encrypted key exchange data to be sent to the intended recipient.","pos":[0,69]}]},{"pos":[6450,6469],"content":"The key is missing.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key is missing.","pos":[0,19]}]},{"pos":[7049,7119],"content":"Creates the encrypted key exchange data from the specified input data.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates the encrypted key exchange data from the specified input data.","pos":[0,70]}]},{"pos":[7131,7344],"content":"This data can be interpreted only by the holder of the private key corresponding to the public key used to encrypt the data. This helps to ensure that only the intended recipient can access the secret information.","needQuote":true,"needEscape":true,"nodes":[{"content":"This data can be interpreted only by the holder of the private key corresponding to the public key used to encrypt the data. This helps to ensure that only the intended recipient can access the secret information.","pos":[0,213],"nodes":[{"content":"This data can be interpreted only by the holder of the private key corresponding to the public key used to encrypt the data.","pos":[0,124]},{"content":"This helps to ensure that only the intended recipient can access the secret information.","pos":[125,213]}]}]},{"pos":[8065,8121],"content":"The secret information to be passed in the key exchange.","needQuote":true,"needEscape":true,"nodes":[{"content":"The secret information to be passed in the key exchange.","pos":[0,56]}]},{"pos":[8186,8236],"content":"This parameter is not used in the current version.","needQuote":true,"needEscape":true,"nodes":[{"content":"This parameter is not used in the current version.","pos":[0,50]}]},{"pos":[8294,8363],"content":"The encrypted key exchange data to be sent to the intended recipient.","needQuote":true,"needEscape":true,"nodes":[{"content":"The encrypted key exchange data to be sent to the intended recipient.","pos":[0,69]}]},{"pos":[8917,9004],"content":"Gets or sets the parameter used to create padding in the key exchange creation process.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the parameter used to create padding in the key exchange creation process.","pos":[0,87]}]},{"pos":[9846,9866],"content":"The parameter value.","needQuote":true,"needEscape":true,"nodes":[{"content":"The parameter value.","pos":[0,20]}]},{"pos":[10417,10503],"content":"Gets the parameters for the Optimal Asymmetric Encryption Padding (OAEP) key exchange.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the parameters for the Optimal Asymmetric Encryption Padding (OAEP) key exchange.","pos":[0,86]}]},{"pos":[11336,11411],"content":"An XML string containing the parameters of the OAEP key exchange operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"An XML string containing the parameters of the OAEP key exchange operation.","pos":[0,75]}]},{"pos":[11928,12022],"content":"Gets or sets the random number generator algorithm to use in the creation of the key exchange.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the random number generator algorithm to use in the creation of the key exchange.","pos":[0,94]}]},{"pos":[12034,12116],"content":"If this property is <ph id=\"ph1\">`null`</ph>, the default random number generator algorithm is used.","needQuote":true,"needEscape":true,"source":"If this property is `null`, the default random number generator algorithm is used."},{"pos":[12961,13020],"content":"The instance of a random number generator algorithm to use.","needQuote":true,"needEscape":true,"nodes":[{"content":"The instance of a random number generator algorithm to use.","pos":[0,59]}]},{"pos":[13706,13770],"content":"Sets the public key to use for encrypting the key exchange data.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sets the public key to use for encrypting the key exchange data.","pos":[0,64]}]},{"pos":[13782,13903],"content":"You must set the key before calling <xref:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange%2A>.","needQuote":true,"needEscape":true,"nodes":[{"content":"You must set the key before calling &lt;xref:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange%2A&gt;.","pos":[0,121],"source":"You must set the key before calling <xref:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange%2A>."}]},{"pos":[14814,14924],"content":"The instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.RSA\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> algorithm that holds the public key.","needQuote":true,"needEscape":true,"source":"The instance of the <xref href=\"System.Security.Cryptography.RSA\"></xref> algorithm that holds the public key."},{"pos":[15118,15199],"content":"<ph id=\"ph1\">&lt;code&gt;key &lt;/code&gt;</ph>is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>key </code>is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter\n  id: RSAOAEPKeyExchangeFormatter\n  children:\n  - System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.#ctor\n  - System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)\n  - System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange(System.Byte[])\n  - System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange(System.Byte[],System.Type)\n  - System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Parameter\n  - System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Parameters\n  - System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Rng\n  - System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)\n  langs:\n  - csharp\n  name: RSAOAEPKeyExchangeFormatter\n  nameWithType: RSAOAEPKeyExchangeFormatter\n  fullName: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter\n  type: Class\n  summary: Creates Optimal Asymmetric Encryption Padding (OAEP) key exchange data using <xref href=\"System.Security.Cryptography.RSA\"></xref>.\n  remarks: \"Key exchange allows a sender to create secret information, for example, random data that can be used as a key in a symmetric encryption algorithm, and use encryption to send it to the intended recipient.  \\n  \\n Use <xref:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter> to receive the key exchange and extract the secret information from it.  \\n  \\n> [!CAUTION]\\n>  It is highly recommended that you not attempt to create your own key exchange method from the basic functionality provided, because many details of the operation must be performed carefully in order for the key exchange to be successful.\"\n  example:\n  - \"The following example shows how to use the RSAOAEPKeyExchangeFormatter class to create an exchange key for a message recipient.  \\n  \\n [!code-vb[System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter2#1](~/add/codesnippet/visualbasic/t-system.security.crypto_2_1.vb)]\\n [!code-cs[System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter2#1](~/add/codesnippet/csharp/t-system.security.crypto_2_1.cs)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class RSAOAEPKeyExchangeFormatter : System.Security.Cryptography.AsymmetricKeyExchangeFormatter\n  inheritance:\n  - System.Object\n  - System.Security.Cryptography.AsymmetricKeyExchangeFormatter\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter\n  langs:\n  - csharp\n  name: RSAOAEPKeyExchangeFormatter()\n  nameWithType: RSAOAEPKeyExchangeFormatter.RSAOAEPKeyExchangeFormatter()\n  fullName: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.RSAOAEPKeyExchangeFormatter()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.RSAOAEPKeyExchangeFormatter\"></xref> class.\n  remarks: Use <xref:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.SetKey%2A> to set the key before calling <xref:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange%2A>.\n  syntax:\n    content: public RSAOAEPKeyExchangeFormatter ();\n    parameters: []\n  overload: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)\n  id: '#ctor(System.Security.Cryptography.AsymmetricAlgorithm)'\n  parent: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter\n  langs:\n  - csharp\n  name: RSAOAEPKeyExchangeFormatter(AsymmetricAlgorithm)\n  nameWithType: RSAOAEPKeyExchangeFormatter.RSAOAEPKeyExchangeFormatter(AsymmetricAlgorithm)\n  fullName: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.RSAOAEPKeyExchangeFormatter(AsymmetricAlgorithm)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.RSAOAEPKeyExchangeFormatter\"></xref> class with the specified key.\n  syntax:\n    content: public RSAOAEPKeyExchangeFormatter (System.Security.Cryptography.AsymmetricAlgorithm key);\n    parameters:\n    - id: key\n      type: System.Security.Cryptography.AsymmetricAlgorithm\n      description: The instance of the <xref href=\"System.Security.Cryptography.RSA\"></xref> algorithm that holds the public key.\n  overload: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key </code>is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange(System.Byte[])\n  id: CreateKeyExchange(System.Byte[])\n  parent: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter\n  langs:\n  - csharp\n  name: CreateKeyExchange(Byte[])\n  nameWithType: RSAOAEPKeyExchangeFormatter.CreateKeyExchange(Byte[])\n  fullName: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange(Byte[])\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Creates the encrypted key exchange data from the specified input data.\n  remarks: This data can be interpreted only by the holder of the private key corresponding to the public key used to encrypt the data. This helps to ensure that only the intended recipient can access the secret information.\n  syntax:\n    content: public override byte[] CreateKeyExchange (byte[] rgbData);\n    parameters:\n    - id: rgbData\n      type: System.Byte[]\n      description: The secret information to be passed in the key exchange.\n    return:\n      type: System.Byte[]\n      description: The encrypted key exchange data to be sent to the intended recipient.\n  overload: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicUnexpectedOperationException\n    commentId: T:System.Security.Cryptography.CryptographicUnexpectedOperationException\n    description: The key is missing.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange(System.Byte[],System.Type)\n  id: CreateKeyExchange(System.Byte[],System.Type)\n  parent: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter\n  langs:\n  - csharp\n  name: CreateKeyExchange(Byte[],Type)\n  nameWithType: RSAOAEPKeyExchangeFormatter.CreateKeyExchange(Byte[],Type)\n  fullName: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange(Byte[],Type)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Creates the encrypted key exchange data from the specified input data.\n  remarks: This data can be interpreted only by the holder of the private key corresponding to the public key used to encrypt the data. This helps to ensure that only the intended recipient can access the secret information.\n  example:\n  - \"The following example shows how to use the CreateKeyExchange method to create an exchange key for a message recipient. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter> class  \\n  \\n [!code-vb[System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter2#2](~/add/codesnippet/visualbasic/e7a8d1c6-9b0b-4f61-908b-_1.vb)]\\n [!code-cs[System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter2#2](~/add/codesnippet/csharp/e7a8d1c6-9b0b-4f61-908b-_1.cs)]\"\n  syntax:\n    content: public override byte[] CreateKeyExchange (byte[] rgbData, Type symAlgType);\n    parameters:\n    - id: rgbData\n      type: System.Byte[]\n      description: The secret information to be passed in the key exchange.\n    - id: symAlgType\n      type: System.Type\n      description: This parameter is not used in the current version.\n    return:\n      type: System.Byte[]\n      description: The encrypted key exchange data to be sent to the intended recipient.\n  overload: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Parameter\n  id: Parameter\n  parent: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter\n  langs:\n  - csharp\n  name: Parameter\n  nameWithType: RSAOAEPKeyExchangeFormatter.Parameter\n  fullName: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Parameter\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Gets or sets the parameter used to create padding in the key exchange creation process.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates how to set the Parameter property to an <xref:System.Security.Cryptography.RSAParameters.InverseQ> field. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter> class.  \\n  \\n [!code-cpp[System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter#7](~/add/codesnippet/cpp/p-system.security.crypto_13_1.cpp)]\\n [!code-cs[System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter#7](~/add/codesnippet/csharp/p-system.security.crypto_13_1.cs)]\\n [!code-vb[System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter#7](~/add/codesnippet/visualbasic/p-system.security.crypto_13_1.vb)]\"\n  syntax:\n    content: public byte[] Parameter { get; set; }\n    return:\n      type: System.Byte[]\n      description: The parameter value.\n  overload: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Parameter*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Parameters\n  id: Parameters\n  parent: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter\n  langs:\n  - csharp\n  name: Parameters\n  nameWithType: RSAOAEPKeyExchangeFormatter.Parameters\n  fullName: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Parameters\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Gets the parameters for the Optimal Asymmetric Encryption Padding (OAEP) key exchange.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates how to call the Parameters property to retrieve an XML representation of the parameters. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter> class.  \\n  \\n [!code-cpp[System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter#13](~/add/codesnippet/cpp/p-system.security.crypto_32_1.cpp)]\\n [!code-cs[System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter#13](~/add/codesnippet/csharp/p-system.security.crypto_32_1.cs)]\\n [!code-vb[System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter#13](~/add/codesnippet/visualbasic/p-system.security.crypto_32_1.vb)]\"\n  syntax:\n    content: public override string Parameters { get; }\n    return:\n      type: System.String\n      description: An XML string containing the parameters of the OAEP key exchange operation.\n  overload: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Parameters*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Rng\n  id: Rng\n  parent: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter\n  langs:\n  - csharp\n  name: Rng\n  nameWithType: RSAOAEPKeyExchangeFormatter.Rng\n  fullName: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Rng\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Gets or sets the random number generator algorithm to use in the creation of the key exchange.\n  remarks: If this property is `null`, the default random number generator algorithm is used.\n  example:\n  - \"The following code example demonstrates how to set the Rng property to a random number. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter> class.  \\n  \\n [!code-cpp[System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter#6](~/add/codesnippet/cpp/p-system.security.crypto_66_1.cpp)]\\n [!code-cs[System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter#6](~/add/codesnippet/csharp/p-system.security.crypto_66_1.cs)]\\n [!code-vb[System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter#6](~/add/codesnippet/visualbasic/p-system.security.crypto_66_1.vb)]\"\n  syntax:\n    content: public System.Security.Cryptography.RandomNumberGenerator Rng { get; set; }\n    return:\n      type: System.Security.Cryptography.RandomNumberGenerator\n      description: The instance of a random number generator algorithm to use.\n  overload: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Rng*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)\n  id: SetKey(System.Security.Cryptography.AsymmetricAlgorithm)\n  parent: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter\n  langs:\n  - csharp\n  name: SetKey(AsymmetricAlgorithm)\n  nameWithType: RSAOAEPKeyExchangeFormatter.SetKey(AsymmetricAlgorithm)\n  fullName: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.SetKey(AsymmetricAlgorithm)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Sets the public key to use for encrypting the key exchange data.\n  remarks: You must set the key before calling <xref:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange%2A>.\n  example:\n  - \"The following code example demonstrates how to use the SetKey method to set an <xref:System.Security.Cryptography.RSA> key for decryption. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter> class.  \\n  \\n [!code-cpp[System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter#5](~/add/codesnippet/cpp/dd00e0f5-dd0a-425b-b20a-_1.cpp)]\\n [!code-cs[System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter#5](~/add/codesnippet/csharp/dd00e0f5-dd0a-425b-b20a-_1.cs)]\\n [!code-vb[System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter#5](~/add/codesnippet/visualbasic/dd00e0f5-dd0a-425b-b20a-_1.vb)]\"\n  syntax:\n    content: public override void SetKey (System.Security.Cryptography.AsymmetricAlgorithm key);\n    parameters:\n    - id: key\n      type: System.Security.Cryptography.AsymmetricAlgorithm\n      description: The instance of the <xref href=\"System.Security.Cryptography.RSA\"></xref> algorithm that holds the public key.\n  overload: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.SetKey*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key </code>is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\nreferences:\n- uid: System.Security.Cryptography.AsymmetricKeyExchangeFormatter\n  isExternal: false\n  name: System.Security.Cryptography.AsymmetricKeyExchangeFormatter\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.Security.Cryptography.CryptographicUnexpectedOperationException\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CryptographicUnexpectedOperationException\n  nameWithType: CryptographicUnexpectedOperationException\n  fullName: System.Security.Cryptography.CryptographicUnexpectedOperationException\n- uid: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.#ctor\n  parent: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter\n  isExternal: false\n  name: RSAOAEPKeyExchangeFormatter()\n  nameWithType: RSAOAEPKeyExchangeFormatter.RSAOAEPKeyExchangeFormatter()\n  fullName: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.RSAOAEPKeyExchangeFormatter()\n- uid: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)\n  parent: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter\n  isExternal: false\n  name: RSAOAEPKeyExchangeFormatter(AsymmetricAlgorithm)\n  nameWithType: RSAOAEPKeyExchangeFormatter.RSAOAEPKeyExchangeFormatter(AsymmetricAlgorithm)\n  fullName: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.RSAOAEPKeyExchangeFormatter(AsymmetricAlgorithm)\n- uid: System.Security.Cryptography.AsymmetricAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: AsymmetricAlgorithm\n  nameWithType: AsymmetricAlgorithm\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm\n- uid: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange(System.Byte[])\n  parent: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter\n  isExternal: false\n  name: CreateKeyExchange(Byte[])\n  nameWithType: RSAOAEPKeyExchangeFormatter.CreateKeyExchange(Byte[])\n  fullName: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange(Byte[])\n- uid: System.Byte[]\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: Byte[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange(System.Byte[],System.Type)\n  parent: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter\n  isExternal: false\n  name: CreateKeyExchange(Byte[],Type)\n  nameWithType: RSAOAEPKeyExchangeFormatter.CreateKeyExchange(Byte[],Type)\n  fullName: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange(Byte[],Type)\n- uid: System.Type\n  parent: System\n  isExternal: true\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Parameter\n  parent: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter\n  isExternal: false\n  name: Parameter\n  nameWithType: RSAOAEPKeyExchangeFormatter.Parameter\n  fullName: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Parameter\n- uid: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Parameters\n  parent: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter\n  isExternal: false\n  name: Parameters\n  nameWithType: RSAOAEPKeyExchangeFormatter.Parameters\n  fullName: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Parameters\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Rng\n  parent: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter\n  isExternal: false\n  name: Rng\n  nameWithType: RSAOAEPKeyExchangeFormatter.Rng\n  fullName: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Rng\n- uid: System.Security.Cryptography.RandomNumberGenerator\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: RandomNumberGenerator\n  nameWithType: RandomNumberGenerator\n  fullName: System.Security.Cryptography.RandomNumberGenerator\n- uid: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)\n  parent: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter\n  isExternal: false\n  name: SetKey(AsymmetricAlgorithm)\n  nameWithType: RSAOAEPKeyExchangeFormatter.SetKey(AsymmetricAlgorithm)\n  fullName: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.SetKey(AsymmetricAlgorithm)\n- uid: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.#ctor*\n  parent: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter\n  isExternal: false\n  name: RSAOAEPKeyExchangeFormatter\n  nameWithType: RSAOAEPKeyExchangeFormatter.RSAOAEPKeyExchangeFormatter\n- uid: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange*\n  parent: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter\n  isExternal: false\n  name: CreateKeyExchange\n  nameWithType: RSAOAEPKeyExchangeFormatter.CreateKeyExchange\n- uid: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Parameter*\n  parent: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter\n  isExternal: false\n  name: Parameter\n  nameWithType: RSAOAEPKeyExchangeFormatter.Parameter\n- uid: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Parameters*\n  parent: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter\n  isExternal: false\n  name: Parameters\n  nameWithType: RSAOAEPKeyExchangeFormatter.Parameters\n- uid: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Rng*\n  parent: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter\n  isExternal: false\n  name: Rng\n  nameWithType: RSAOAEPKeyExchangeFormatter.Rng\n- uid: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.SetKey*\n  parent: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter\n  isExternal: false\n  name: SetKey\n  nameWithType: RSAOAEPKeyExchangeFormatter.SetKey\n"}