{"nodes":[{"pos":[1177,1227],"content":"Controls rights to access HTTP Internet resources.","needQuote":true,"needEscape":true,"nodes":[{"content":"Controls rights to access HTTP Internet resources.","pos":[0,50]}]},{"pos":[1240,4101],"content":"WebPermission provides a set of methods and properties to control access to Internet resources. You can use a WebPermission to provide either restricted or unrestricted access to your resource, based on the <xref:System.Security.Permissions.PermissionState> that is set when the WebPermission is created.       Create a WebPermission instance by calling its constructor using one of the following sets of parameters:      -   No parameters. The default <xref:System.Security.Permissions.PermissionState> is <xref:System.Security.Permissions.PermissionState>.      -   A <xref:System.Security.Permissions.PermissionState>. Specify either <xref:System.Security.Permissions.PermissionState> to allow any URI to be used in the target class, or <xref:System.Security.Permissions.PermissionState> to allow access only to URIs that you specify through the use of the <xref:System.Net.WebPermission.AddPermission%2A> method.      -   A <xref:System.Net.NetworkAccess> value and a URI string. The specified URI has permissions granted by the <xref:System.Net.NetworkAccess> value.      -   A <xref:System.Net.NetworkAccess> specifier and URI regular expression.       The <xref:System.Net.WebPermission.ConnectList%2A> and <xref:System.Net.WebPermission.AcceptList%2A> hold the URIs to which you have granted access permission. To add a URI to either of these lists, use <xref:System.Net.WebPermission.AddPermission%2A>. If you pass <xref:System.Net.NetworkAccess> as the <xref:System.Net.NetworkAccess> parameter, the URI will be added to the <xref:System.Net.WebPermission.AcceptList%2A>. WebPermission will allow connections to your target class with URIs matching the <xref:System.Net.WebPermission.AcceptList%2A>.      > [!CAUTION] >  To deny access to an Internet resource, you must deny access to all the possible paths to that resource. This requires calling <xref:System.Net.WebPermission.%23ctor%2A?displayProperty=fullName> with state parameter set to <xref:System.Security.CodeAccessPermission.Deny%2A>. A better approach is to allow access to the specific resource only. For more information about this subject, refer to the [NIB: Using the Deny Method](http://msdn.microsoft.com/en-us/6b4d2e01-c504-4ac3-b50e-d6f5e7f5df25) topic.      > [!NOTE] >  You need to deny access using only the resource canonical path. There is no need to use all the path's syntactical variations.      > [!NOTE] >  User name and default port information is stripped from the <xref:System.Uri> before the comparison with the regular expression argument that is supplied to the <xref:System.Net.WebPermission.%23ctor%28System.Net.NetworkAccess%2CSystem.Text.RegularExpressions.Regex%29> constructor. If the regular expression contains user information or the default port number, then all incoming <xref:System.Uri>s will fail to match the regular expression.","needQuote":false,"needEscape":true,"nodes":[{"content":"WebPermission provides a set of methods and properties to control access to Internet resources.","pos":[0,95]},{"content":"You can use a WebPermission to provide either restricted or unrestricted access to your resource, based on the &lt;xref:System.Security.Permissions.PermissionState&gt; that is set when the WebPermission is created.","pos":[96,304],"source":" You can use a WebPermission to provide either restricted or unrestricted access to your resource, based on the <xref:System.Security.Permissions.PermissionState> that is set when the WebPermission is created."},{"content":"Create a WebPermission instance by calling its constructor using one of the following sets of parameters:      -   No parameters.","pos":[311,440]},{"content":"The default &lt;xref:System.Security.Permissions.PermissionState&gt; is &lt;xref:System.Security.Permissions.PermissionState&gt;.","pos":[441,558],"source":" The default <xref:System.Security.Permissions.PermissionState> is <xref:System.Security.Permissions.PermissionState>."},{"content":"-   A &lt;xref:System.Security.Permissions.PermissionState&gt;.","pos":[564,621],"source":"      -   A <xref:System.Security.Permissions.PermissionState>."},{"content":"Specify either &lt;xref:System.Security.Permissions.PermissionState&gt; to allow any URI to be used in the target class, or &lt;xref:System.Security.Permissions.PermissionState&gt; to allow access only to URIs that you specify through the use of the &lt;xref:System.Net.WebPermission.AddPermission%2A&gt; method.","pos":[622,916],"source":" Specify either <xref:System.Security.Permissions.PermissionState> to allow any URI to be used in the target class, or <xref:System.Security.Permissions.PermissionState> to allow access only to URIs that you specify through the use of the <xref:System.Net.WebPermission.AddPermission%2A> method."},{"content":"-   A &lt;xref:System.Net.NetworkAccess&gt; value and a URI string.","pos":[922,983],"source":"      -   A <xref:System.Net.NetworkAccess> value and a URI string."},{"content":"The specified URI has permissions granted by the &lt;xref:System.Net.NetworkAccess&gt; value.","pos":[984,1071],"source":" The specified URI has permissions granted by the <xref:System.Net.NetworkAccess> value."},{"content":"-   A &lt;xref:System.Net.NetworkAccess&gt; specifier and URI regular expression.","pos":[1077,1152],"source":"      -   A <xref:System.Net.NetworkAccess> specifier and URI regular expression."},{"content":"The &lt;xref:System.Net.WebPermission.ConnectList%2A&gt; and &lt;xref:System.Net.WebPermission.AcceptList%2A&gt; hold the URIs to which you have granted access permission.","pos":[1159,1318],"source":"       The <xref:System.Net.WebPermission.ConnectList%2A> and <xref:System.Net.WebPermission.AcceptList%2A> hold the URIs to which you have granted access permission."},{"content":"To add a URI to either of these lists, use &lt;xref:System.Net.WebPermission.AddPermission%2A&gt;.","pos":[1319,1411],"source":" To add a URI to either of these lists, use <xref:System.Net.WebPermission.AddPermission%2A>."},{"content":"If you pass &lt;xref:System.Net.NetworkAccess&gt; as the &lt;xref:System.Net.NetworkAccess&gt; parameter, the URI will be added to the &lt;xref:System.Net.WebPermission.AcceptList%2A&gt;.","pos":[1412,1581],"source":" If you pass <xref:System.Net.NetworkAccess> as the <xref:System.Net.NetworkAccess> parameter, the URI will be added to the <xref:System.Net.WebPermission.AcceptList%2A>."},{"content":"WebPermission will allow connections to your target class with URIs matching the &lt;xref:System.Net.WebPermission.AcceptList%2A&gt;.","pos":[1582,1709],"source":" WebPermission will allow connections to your target class with URIs matching the <xref:System.Net.WebPermission.AcceptList%2A>."},{"content":"&gt; <ph id=\"ph1\">[!CAUTION]</ph> &gt;  To deny access to an Internet resource, you must deny access to all the possible paths to that resource.","pos":[1715,1835],"source":"      > [!CAUTION] >  To deny access to an Internet resource, you must deny access to all the possible paths to that resource."},{"content":"This requires calling &lt;xref:System.Net.WebPermission.%23ctor%2A?displayProperty=fullName&gt; with state parameter set to &lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;.","pos":[1836,2006],"source":" This requires calling <xref:System.Net.WebPermission.%23ctor%2A?displayProperty=fullName> with state parameter set to <xref:System.Security.CodeAccessPermission.Deny%2A>."},{"content":"A better approach is to allow access to the specific resource only.","pos":[2007,2074]},{"content":"For more information about this subject, refer to the <bpt id=\"p1\">[</bpt>NIB: Using the Deny Method<ept id=\"p1\">](http://msdn.microsoft.com/en-us/6b4d2e01-c504-4ac3-b50e-d6f5e7f5df25)</ept> topic.","pos":[2075,2234],"source":" For more information about this subject, refer to the [NIB: Using the Deny Method](http://msdn.microsoft.com/en-us/6b4d2e01-c504-4ac3-b50e-d6f5e7f5df25) topic."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  You need to deny access using only the resource canonical path.","pos":[2240,2316],"source":"      > [!NOTE] >  You need to deny access using only the resource canonical path."},{"content":"There is no need to use all the path's syntactical variations.","pos":[2317,2379]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  User name and default port information is stripped from the &lt;xref:System.Uri&gt; before the comparison with the regular expression argument that is supplied to the &lt;xref:System.Net.WebPermission.%23ctor%28System.Net.NetworkAccess%2CSystem.Text.RegularExpressions.Regex%29&gt; constructor.","pos":[2385,2680],"source":"      > [!NOTE] >  User name and default port information is stripped from the <xref:System.Uri> before the comparison with the regular expression argument that is supplied to the <xref:System.Net.WebPermission.%23ctor%28System.Net.NetworkAccess%2CSystem.Text.RegularExpressions.Regex%29> constructor."},{"content":"If the regular expression contains user information or the default port number, then all incoming &lt;xref:System.Uri&gt;s will fail to match the regular expression.","pos":[2681,2840],"source":" If the regular expression contains user information or the default port number, then all incoming <xref:System.Uri>s will fail to match the regular expression."}]},{"pos":[5912,5994],"content":"Creates a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Net.WebPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Creates a new instance of the <xref href=\"System.Net.WebPermission\"></xref> class."},{"pos":[6006,6151],"content":"Creates a new instance of the <xref:System.Net.WebPermission> class. This constructor creates an empty permission that does not grant any rights.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a new instance of the <xref:System.Net.WebPermission> class. This constructor creates an empty permission that does not grant any rights.","pos":[0,145],"nodes":[{"content":"Creates a new instance of the &lt;xref:System.Net.WebPermission&gt; class.","pos":[0,68],"source":"Creates a new instance of the <xref:System.Net.WebPermission> class."},{"content":"This constructor creates an empty permission that does not grant any rights.","pos":[69,145]}]}]},{"pos":[6748,6875],"content":"Creates a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Net.WebPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class that passes all demands or fails all demands.","needQuote":true,"needEscape":true,"source":"Creates a new instance of the <xref href=\"System.Net.WebPermission\"></xref> class that passes all demands or fails all demands."},{"pos":[6887,7374],"content":"The value of the `state` parameter is either <xref:System.Security.Permissions.PermissionState?displayProperty=fullName> or <xref:System.Security.Permissions.PermissionState?displayProperty=fullName>, respectively yielding fully restricted or fully unrestricted access to all security variables. If you specify <xref:System.Security.Permissions.PermissionState?displayProperty=fullName>, then you can give access to individual URIs using <xref:System.Net.WebPermission.AddPermission%2A>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value of the <ph id=\"ph1\">`state`</ph> parameter is either &lt;xref:System.Security.Permissions.PermissionState?displayProperty=fullName&gt; or &lt;xref:System.Security.Permissions.PermissionState?displayProperty=fullName&gt;, respectively yielding fully restricted or fully unrestricted access to all security variables.","pos":[0,295],"source":"The value of the `state` parameter is either <xref:System.Security.Permissions.PermissionState?displayProperty=fullName> or <xref:System.Security.Permissions.PermissionState?displayProperty=fullName>, respectively yielding fully restricted or fully unrestricted access to all security variables."},{"content":"If you specify &lt;xref:System.Security.Permissions.PermissionState?displayProperty=fullName&gt;, then you can give access to individual URIs using &lt;xref:System.Net.WebPermission.AddPermission%2A&gt;.","pos":[296,487],"source":" If you specify <xref:System.Security.Permissions.PermissionState?displayProperty=fullName>, then you can give access to individual URIs using <xref:System.Net.WebPermission.AddPermission%2A>."}]},{"pos":[7998,8071],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.PermissionState\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Security.Permissions.PermissionState\"></xref> value."},{"pos":[8606,8747],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Net.WebPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified access rights for the specified URI.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Net.WebPermission\"></xref> class with the specified access rights for the specified URI."},{"pos":[8759,8983],"content":"This constructor initializes a &lt;xref:System.Net.WebPermission&gt; and grants its target permission to either make a remote host connection or accept a remote host connection using the URI described by the <ph id=\"ph1\">`uriString`</ph> parameter.","needQuote":true,"needEscape":true,"source":"This constructor initializes a <xref:System.Net.WebPermission> and grants its target permission to either make a remote host connection or accept a remote host connection using the URI described by the `uriString` parameter."},{"pos":[9602,9969],"content":"A NetworkAccess value that indicates what kind of access to grant to the specified URI. <xref href=\"System.Net.NetworkAccess\"></xref> indicates that the application is allowed to accept connections from the Internet on a local resource. <xref href=\"System.Net.NetworkAccess\"></xref> indicates that the application is allowed to connect to specific Internet resources.","needQuote":true,"needEscape":true,"nodes":[{"content":"A NetworkAccess value that indicates what kind of access to grant to the specified URI.","pos":[0,87]},{"content":"<bpt id=\"p1\">&lt;xref href=\"System.Net.NetworkAccess\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> indicates that the application is allowed to accept connections from the Internet on a local resource.","pos":[88,236],"source":"<xref href=\"System.Net.NetworkAccess\"></xref> indicates that the application is allowed to accept connections from the Internet on a local resource."},{"content":"<bpt id=\"p1\">&lt;xref href=\"System.Net.NetworkAccess\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> indicates that the application is allowed to connect to specific Internet resources.","pos":[237,367],"source":"<xref href=\"System.Net.NetworkAccess\"></xref> indicates that the application is allowed to connect to specific Internet resources."}]},{"pos":[10035,10083],"content":"A URI string to which access rights are granted.","needQuote":true,"needEscape":true,"nodes":[{"content":"A URI string to which access rights are granted.","pos":[0,48]}]},{"pos":[10244,10331],"content":"<ph id=\"ph1\">&lt;code&gt;uriString&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>uriString</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[10848,11008],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Net.WebPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified access rights for the specified URI regular expression.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Net.WebPermission\"></xref> class with the specified access rights for the specified URI regular expression."},{"pos":[11021,11981],"content":"This constructor initializes a <xref:System.Net.WebPermission> and grants its target permission to either make a remote host connection or accept a remote host connection using the URI described by the `uriRegex`parameter.      > [!NOTE] >  It is recommended that you create `uriRegex` using the <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName>, <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName>, and <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName> flags.      > [!NOTE] >  A candidate URI string is checked against the list of relevant regular expressions (<xref:System.Net.WebPermission.AcceptList%2A> or <xref:System.Net.WebPermission.ConnectList%2A>) in two ways. First, the candidate URI string is checked against the appropriate list; then, if there is no match, the candidate URI string is converted into a <xref:System.Uri> and checked against the appropriate list.","needQuote":false,"needEscape":true,"nodes":[{"content":"This constructor initializes a &lt;xref:System.Net.WebPermission&gt; and grants its target permission to either make a remote host connection or accept a remote host connection using the URI described by the <ph id=\"ph1\">`uriRegex`</ph>parameter.","pos":[0,222],"source":"This constructor initializes a <xref:System.Net.WebPermission> and grants its target permission to either make a remote host connection or accept a remote host connection using the URI described by the `uriRegex`parameter."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  It is recommended that you create <ph id=\"ph2\">`uriRegex`</ph> using the &lt;xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName&gt;, &lt;xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName&gt;, and &lt;xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName&gt; flags.","pos":[228,536],"source":"      > [!NOTE] >  It is recommended that you create `uriRegex` using the <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName>, <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName>, and <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName> flags."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  A candidate URI string is checked against the list of relevant regular expressions (&lt;xref:System.Net.WebPermission.AcceptList%2A&gt; or &lt;xref:System.Net.WebPermission.ConnectList%2A&gt;) in two ways.","pos":[542,748],"source":"      > [!NOTE] >  A candidate URI string is checked against the list of relevant regular expressions (<xref:System.Net.WebPermission.AcceptList%2A> or <xref:System.Net.WebPermission.ConnectList%2A>) in two ways."},{"content":"First, the candidate URI string is checked against the appropriate list; then, if there is no match, the candidate URI string is converted into a &lt;xref:System.Uri&gt; and checked against the appropriate list.","pos":[749,954],"source":" First, the candidate URI string is checked against the appropriate list; then, if there is no match, the candidate URI string is converted into a <xref:System.Uri> and checked against the appropriate list."}]},{"pos":[12710,13109],"content":"A <xref href=\"System.Net.NetworkAccess\"></xref> value that indicates what kind of access to grant to the specified URI. <xref href=\"System.Net.NetworkAccess\"></xref> indicates that the application is allowed to accept connections from the Internet on a local resource. <xref href=\"System.Net.NetworkAccess\"></xref> indicates that the application is allowed to connect to specific Internet resources.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Net.NetworkAccess\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value that indicates what kind of access to grant to the specified URI.","pos":[0,119],"source":"A <xref href=\"System.Net.NetworkAccess\"></xref> value that indicates what kind of access to grant to the specified URI."},{"content":"<bpt id=\"p1\">&lt;xref href=\"System.Net.NetworkAccess\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> indicates that the application is allowed to accept connections from the Internet on a local resource.","pos":[120,268],"source":"<xref href=\"System.Net.NetworkAccess\"></xref> indicates that the application is allowed to accept connections from the Internet on a local resource."},{"content":"<bpt id=\"p1\">&lt;xref href=\"System.Net.NetworkAccess\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> indicates that the application is allowed to connect to specific Internet resources.","pos":[269,399],"source":"<xref href=\"System.Net.NetworkAccess\"></xref> indicates that the application is allowed to connect to specific Internet resources."}]},{"pos":[13197,13274],"content":"A regular expression that describes the URI to which access is to be granted.","needQuote":true,"needEscape":true,"nodes":[{"content":"A regular expression that describes the URI to which access is to be granted.","pos":[0,77]}]},{"pos":[13659,13956],"content":"This property returns an enumeration of a single accept permissions held by this <xref href=\"System.Net.WebPermission\"></xref>. The possible objects types contained in the returned enumeration are <xref:System.String> and &lt;xref:System.Text.RegularExpressions.Regex?displayProperty=fullName&gt;.","needQuote":true,"needEscape":true,"nodes":[{"content":"This property returns an enumeration of a single accept permissions held by this <bpt id=\"p1\">&lt;xref href=\"System.Net.WebPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,127],"source":"This property returns an enumeration of a single accept permissions held by this <xref href=\"System.Net.WebPermission\"></xref>."},{"content":"The possible objects types contained in the returned enumeration are &lt;xref:System.String&gt; and <ph id=\"ph1\">&amp;lt;</ph>xref:System.Text.RegularExpressions.Regex?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>.","pos":[128,297],"source":" The possible objects types contained in the returned enumeration are <xref:System.String> and &lt;xref:System.Text.RegularExpressions.Regex?displayProperty=fullName&gt;."}]},{"pos":[13969,14718],"content":"This property gets a list of local resources permitted by this <xref:System.Net.WebPermission>. The class to which you have applied <xref:System.Net.WebPermission> only has permission to receive an incoming connection to local resources found in this list.      > [!NOTE] >  You can add URIs to this list using <xref:System.Net.WebPermission.AddPermission%2A>.      > [!NOTE] >  A candidate URI string is checked against the list of relevant regular expressions (AcceptList or <xref:System.Net.WebPermission.ConnectList%2A>) in two ways. First, the candidate URI string is checked against the appropriate list; then, if there is no match, the candidate URI string is converted into a <xref:System.Uri> and checked against the appropriate list.","needQuote":false,"needEscape":true,"nodes":[{"content":"This property gets a list of local resources permitted by this &lt;xref:System.Net.WebPermission&gt;.","pos":[0,95],"source":"This property gets a list of local resources permitted by this <xref:System.Net.WebPermission>."},{"content":"The class to which you have applied &lt;xref:System.Net.WebPermission&gt; only has permission to receive an incoming connection to local resources found in this list.","pos":[96,256],"source":" The class to which you have applied <xref:System.Net.WebPermission> only has permission to receive an incoming connection to local resources found in this list."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  You can add URIs to this list using &lt;xref:System.Net.WebPermission.AddPermission%2A&gt;.","pos":[262,360],"source":"      > [!NOTE] >  You can add URIs to this list using <xref:System.Net.WebPermission.AddPermission%2A>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  A candidate URI string is checked against the list of relevant regular expressions (AcceptList or &lt;xref:System.Net.WebPermission.ConnectList%2A&gt;) in two ways.","pos":[366,537],"source":"      > [!NOTE] >  A candidate URI string is checked against the list of relevant regular expressions (AcceptList or <xref:System.Net.WebPermission.ConnectList%2A>) in two ways."},{"content":"First, the candidate URI string is checked against the appropriate list; then, if there is no match, the candidate URI string is converted into a &lt;xref:System.Uri&gt; and checked against the appropriate list.","pos":[538,743],"source":" First, the candidate URI string is checked against the appropriate list; then, if there is no match, the candidate URI string is converted into a <xref:System.Uri> and checked against the appropriate list."}]},{"pos":[15292,15377],"content":"The <xref:System.Collections.IEnumerator> interface that contains accept permissions.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Collections.IEnumerator&gt; interface that contains accept permissions.","pos":[0,85],"source":"The <xref:System.Collections.IEnumerator> interface that contains accept permissions."}]},{"pos":[15926,16050],"content":"Adds the specified URI string with the specified access rights to the current <bpt id=\"p1\">&lt;xref href=\"System.Net.WebPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Adds the specified URI string with the specified access rights to the current <xref href=\"System.Net.WebPermission\"></xref>."},{"pos":[16063,17233],"content":"If you have specified <xref:System.Security.Permissions.PermissionState> as the <xref:System.Security.Permissions.PermissionState>, use AddPermission to permit the use of `uriString` in the target class. The way that `uriString` can be used by the target class is specified by `access`. Specify <xref:System.Net.NetworkAccess> as the access parameter to add the URI specified by the `uriString` parameter to the list of URI accept strings, or specify <xref:System.Net.NetworkAccess> as the access parameter to add the URI to the list of URI connect strings.      > [!NOTE] >  Calling AddPermission on <xref:System.Security.Permissions.PermissionState><xref:System.Net.WebPermission> will have no effect, because permission is granted to all URIs.      > [!NOTE] >  A candidate URI string is checked against the list of relevant regular expressions (<xref:System.Net.WebPermission.AcceptList%2A> or <xref:System.Net.WebPermission.ConnectList%2A>) in two ways. First, the candidate URI string is checked against the appropriate list; then, if there is no match, the candidate URI string is converted into a <xref:System.Uri> and checked against the appropriate list.","needQuote":false,"needEscape":true,"nodes":[{"content":"If you have specified &lt;xref:System.Security.Permissions.PermissionState&gt; as the &lt;xref:System.Security.Permissions.PermissionState&gt;, use AddPermission to permit the use of <ph id=\"ph1\">`uriString`</ph> in the target class.","pos":[0,203],"source":"If you have specified <xref:System.Security.Permissions.PermissionState> as the <xref:System.Security.Permissions.PermissionState>, use AddPermission to permit the use of `uriString` in the target class."},{"content":"The way that <ph id=\"ph1\">`uriString`</ph> can be used by the target class is specified by <ph id=\"ph2\">`access`</ph>.","pos":[204,286],"source":" The way that `uriString` can be used by the target class is specified by `access`."},{"content":"Specify &lt;xref:System.Net.NetworkAccess&gt; as the access parameter to add the URI specified by the <ph id=\"ph1\">`uriString`</ph> parameter to the list of URI accept strings, or specify &lt;xref:System.Net.NetworkAccess&gt; as the access parameter to add the URI to the list of URI connect strings.","pos":[287,557],"source":" Specify <xref:System.Net.NetworkAccess> as the access parameter to add the URI specified by the `uriString` parameter to the list of URI accept strings, or specify <xref:System.Net.NetworkAccess> as the access parameter to add the URI to the list of URI connect strings."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Calling AddPermission on &lt;xref:System.Security.Permissions.PermissionState&gt;&lt;xref:System.Net.WebPermission&gt; will have no effect, because permission is granted to all URIs.","pos":[563,746],"source":"      > [!NOTE] >  Calling AddPermission on <xref:System.Security.Permissions.PermissionState><xref:System.Net.WebPermission> will have no effect, because permission is granted to all URIs."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  A candidate URI string is checked against the list of relevant regular expressions (&lt;xref:System.Net.WebPermission.AcceptList%2A&gt; or &lt;xref:System.Net.WebPermission.ConnectList%2A&gt;) in two ways.","pos":[752,958],"source":"      > [!NOTE] >  A candidate URI string is checked against the list of relevant regular expressions (<xref:System.Net.WebPermission.AcceptList%2A> or <xref:System.Net.WebPermission.ConnectList%2A>) in two ways."},{"content":"First, the candidate URI string is checked against the appropriate list; then, if there is no match, the candidate URI string is converted into a &lt;xref:System.Uri&gt; and checked against the appropriate list.","pos":[959,1164],"source":" First, the candidate URI string is checked against the appropriate list; then, if there is no match, the candidate URI string is converted into a <xref:System.Uri> and checked against the appropriate list."}]},{"pos":[17834,17943],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Net.NetworkAccess\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that specifies the access rights that are granted to the URI.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Net.NetworkAccess\"></xref> that specifies the access rights that are granted to the URI."},{"pos":[18009,18076],"content":"A string that describes the URI to which access rights are granted.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string that describes the URI to which access rights are granted.","pos":[0,67]}]},{"pos":[18245,18332],"content":"<ph id=\"ph1\">&lt;code&gt;uriString&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>uriString</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[18858,18975],"content":"Adds the specified URI with the specified access rights to the current <bpt id=\"p1\">&lt;xref href=\"System.Net.WebPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Adds the specified URI with the specified access rights to the current <xref href=\"System.Net.WebPermission\"></xref>."},{"pos":[18988,20467],"content":"If you have specified <xref:System.Security.Permissions.PermissionState> as the <xref:System.Security.Permissions.PermissionState>, use <xref:System.Net.WebPermission.AddPermission%2A> to allow the use of `uriRegex` in the target class. Specify <xref:System.Net.NetworkAccess> as the `access` parameter to add the URI specified by the `uriRegex` parameter to the list of URI accept strings, or specify <xref:System.Net.NetworkAccess> as the access parameter to add the URI to the list of URI connect strings.      > [!NOTE] >  Calling <xref:System.Net.WebPermission.AddPermission%2A> on an <xref:System.Security.Permissions.PermissionState><xref:System.Net.WebPermission> instance will have no effect as permission is granted to all URIs.      > [!NOTE] >  It is recommended that you create `uriRegex` using the <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName>, <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName>, and <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName> flags.      > [!NOTE] >  A candidate URI string is checked against the list of relevant regular expressions (<xref:System.Net.WebPermission.AcceptList%2A> or <xref:System.Net.WebPermission.ConnectList%2A>) in two ways. First, the candidate URI string is checked against the appropriate list; then, if there is no match, the candidate URI string is converted into a <xref:System.Uri> and checked against the appropriate list.","needQuote":false,"needEscape":true,"nodes":[{"content":"If you have specified &lt;xref:System.Security.Permissions.PermissionState&gt; as the &lt;xref:System.Security.Permissions.PermissionState&gt;, use &lt;xref:System.Net.WebPermission.AddPermission%2A&gt; to allow the use of <ph id=\"ph1\">`uriRegex`</ph> in the target class.","pos":[0,236],"source":"If you have specified <xref:System.Security.Permissions.PermissionState> as the <xref:System.Security.Permissions.PermissionState>, use <xref:System.Net.WebPermission.AddPermission%2A> to allow the use of `uriRegex` in the target class."},{"content":"Specify &lt;xref:System.Net.NetworkAccess&gt; as the <ph id=\"ph1\">`access`</ph> parameter to add the URI specified by the <ph id=\"ph2\">`uriRegex`</ph> parameter to the list of URI accept strings, or specify &lt;xref:System.Net.NetworkAccess&gt; as the access parameter to add the URI to the list of URI connect strings.","pos":[237,508],"source":" Specify <xref:System.Net.NetworkAccess> as the `access` parameter to add the URI specified by the `uriRegex` parameter to the list of URI accept strings, or specify <xref:System.Net.NetworkAccess> as the access parameter to add the URI to the list of URI connect strings."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Calling &lt;xref:System.Net.WebPermission.AddPermission%2A&gt; on an &lt;xref:System.Security.Permissions.PermissionState&gt;&lt;xref:System.Net.WebPermission&gt; instance will have no effect as permission is granted to all URIs.","pos":[514,738],"source":"      > [!NOTE] >  Calling <xref:System.Net.WebPermission.AddPermission%2A> on an <xref:System.Security.Permissions.PermissionState><xref:System.Net.WebPermission> instance will have no effect as permission is granted to all URIs."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  It is recommended that you create <ph id=\"ph2\">`uriRegex`</ph> using the &lt;xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName&gt;, &lt;xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName&gt;, and &lt;xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName&gt; flags.","pos":[744,1052],"source":"      > [!NOTE] >  It is recommended that you create `uriRegex` using the <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName>, <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName>, and <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName> flags."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  A candidate URI string is checked against the list of relevant regular expressions (&lt;xref:System.Net.WebPermission.AcceptList%2A&gt; or &lt;xref:System.Net.WebPermission.ConnectList%2A&gt;) in two ways.","pos":[1058,1264],"source":"      > [!NOTE] >  A candidate URI string is checked against the list of relevant regular expressions (<xref:System.Net.WebPermission.AcceptList%2A> or <xref:System.Net.WebPermission.ConnectList%2A>) in two ways."},{"content":"First, the candidate URI string is checked against the appropriate list; then, if there is no match, the candidate URI string is converted into a &lt;xref:System.Uri&gt; and checked against the appropriate list.","pos":[1265,1470],"source":" First, the candidate URI string is checked against the appropriate list; then, if there is no match, the candidate URI string is converted into a <xref:System.Uri> and checked against the appropriate list."}]},{"pos":[21122,21199],"content":"A NetworkAccess that specifies the access rights that are granted to the URI.","needQuote":true,"needEscape":true,"nodes":[{"content":"A NetworkAccess that specifies the access rights that are granted to the URI.","pos":[0,77]}]},{"pos":[21287,21374],"content":"A regular expression that describes the set of URIs to which access rights are granted.","needQuote":true,"needEscape":true,"nodes":[{"content":"A regular expression that describes the set of URIs to which access rights are granted.","pos":[0,87]}]},{"pos":[21543,21643],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">uriRegex</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>uriRegex</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[21972,22270],"content":"This property returns an enumeration of a single connect permissions held by this <xref href=\"System.Net.WebPermission\"></xref>. The possible objects types contained in the returned enumeration are <xref:System.String> and &lt;xref:System.Text.RegularExpressions.Regex?displayProperty=fullName&gt;.","needQuote":true,"needEscape":true,"nodes":[{"content":"This property returns an enumeration of a single connect permissions held by this <bpt id=\"p1\">&lt;xref href=\"System.Net.WebPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,128],"source":"This property returns an enumeration of a single connect permissions held by this <xref href=\"System.Net.WebPermission\"></xref>."},{"content":"The possible objects types contained in the returned enumeration are &lt;xref:System.String&gt; and <ph id=\"ph1\">&amp;lt;</ph>xref:System.Text.RegularExpressions.Regex?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph>.","pos":[129,298],"source":" The possible objects types contained in the returned enumeration are <xref:System.String> and &lt;xref:System.Text.RegularExpressions.Regex?displayProperty=fullName&gt;."}]},{"pos":[22283,23015],"content":"This property gets a list of remote resources that are permitted by this <xref:System.Net.WebPermission>. The class to which you have applied <xref:System.Net.WebPermission> only has permission to connect with resources found in this list.      > [!NOTE] >  You can add URIs to this list using <xref:System.Net.WebPermission.AddPermission%2A>.      > [!NOTE] >  A candidate URI string is checked against the list of relevant regular expressions (<xref:System.Net.WebPermission.AcceptList%2A> or ConnectList) in two ways. First, the candidate URI string is checked against the appropriate list; then, if there is no match, the candidate URI string is converted into a <xref:System.Uri> and checked against the appropriate list.","needQuote":false,"needEscape":true,"nodes":[{"content":"This property gets a list of remote resources that are permitted by this &lt;xref:System.Net.WebPermission&gt;.","pos":[0,105],"source":"This property gets a list of remote resources that are permitted by this <xref:System.Net.WebPermission>."},{"content":"The class to which you have applied &lt;xref:System.Net.WebPermission&gt; only has permission to connect with resources found in this list.","pos":[106,239],"source":" The class to which you have applied <xref:System.Net.WebPermission> only has permission to connect with resources found in this list."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  You can add URIs to this list using &lt;xref:System.Net.WebPermission.AddPermission%2A&gt;.","pos":[245,343],"source":"      > [!NOTE] >  You can add URIs to this list using <xref:System.Net.WebPermission.AddPermission%2A>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  A candidate URI string is checked against the list of relevant regular expressions (&lt;xref:System.Net.WebPermission.AcceptList%2A&gt; or ConnectList) in two ways.","pos":[349,520],"source":"      > [!NOTE] >  A candidate URI string is checked against the list of relevant regular expressions (<xref:System.Net.WebPermission.AcceptList%2A> or ConnectList) in two ways."},{"content":"First, the candidate URI string is checked against the appropriate list; then, if there is no match, the candidate URI string is converted into a &lt;xref:System.Uri&gt; and checked against the appropriate list.","pos":[521,726],"source":" First, the candidate URI string is checked against the appropriate list; then, if there is no match, the candidate URI string is converted into a <xref:System.Uri> and checked against the appropriate list."}]},{"pos":[23591,23677],"content":"The <xref:System.Collections.IEnumerator> interface that contains connect permissions.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Collections.IEnumerator&gt; interface that contains connect permissions.","pos":[0,86],"source":"The <xref:System.Collections.IEnumerator> interface that contains connect permissions."}]},{"pos":[24042,24108],"content":"Creates a copy of a <bpt id=\"p1\">&lt;xref href=\"System.Net.WebPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Creates a copy of a <xref href=\"System.Net.WebPermission\"></xref>."},{"pos":[24120,24425],"content":"The <xref:System.Security.IPermission> returned by this method represents the same access to resources as the original <xref:System.Net.WebPermission>. This method overrides <xref:System.Security.CodeAccessPermission.Copy%2A> and is implemented to support the <xref:System.Security.IPermission> interface.","needQuote":true,"needEscape":true,"nodes":[{"content":"The <xref:System.Security.IPermission> returned by this method represents the same access to resources as the original <xref:System.Net.WebPermission>. This method overrides <xref:System.Security.CodeAccessPermission.Copy%2A> and is implemented to support the <xref:System.Security.IPermission> interface.","pos":[0,305],"nodes":[{"content":"The &lt;xref:System.Security.IPermission&gt; returned by this method represents the same access to resources as the original &lt;xref:System.Net.WebPermission&gt;.","pos":[0,151],"source":"The <xref:System.Security.IPermission> returned by this method represents the same access to resources as the original <xref:System.Net.WebPermission>."},{"content":"This method overrides &lt;xref:System.Security.CodeAccessPermission.Copy%2A&gt; and is implemented to support the &lt;xref:System.Security.IPermission&gt; interface.","pos":[152,305],"source":" This method overrides <xref:System.Security.CodeAccessPermission.Copy%2A> and is implemented to support the <xref:System.Security.IPermission> interface."}]}]},{"pos":[25060,25175],"content":"A new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Net.WebPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class that has the same values as the original.","needQuote":true,"needEscape":true,"source":"A new instance of the <xref href=\"System.Net.WebPermission\"></xref> class that has the same values as the original."},{"pos":[25659,25741],"content":"Reconstructs a <bpt id=\"p1\">&lt;xref href=\"System.Net.WebPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> from an XML encoding.","needQuote":true,"needEscape":true,"source":"Reconstructs a <xref href=\"System.Net.WebPermission\"></xref> from an XML encoding."},{"pos":[25754,26053],"content":"The FromXml method reconstructs a <xref:System.Net.WebPermission> from an XML encoding that is defined by the <xref:System.Security.SecurityElement> class.       Use the <xref:System.Net.WebPermission.ToXml%2A> method to XML-encode the <xref:System.Net.WebPermission>, including state information.","needQuote":false,"needEscape":true,"nodes":[{"content":"The FromXml method reconstructs a <xref:System.Net.WebPermission> from an XML encoding that is defined by the <xref:System.Security.SecurityElement> class.       Use the <xref:System.Net.WebPermission.ToXml%2A> method to XML-encode the <xref:System.Net.WebPermission>, including state information.","pos":[0,297],"nodes":[{"content":"The FromXml method reconstructs a &lt;xref:System.Net.WebPermission&gt; from an XML encoding that is defined by the &lt;xref:System.Security.SecurityElement&gt; class.","pos":[0,155],"source":"The FromXml method reconstructs a <xref:System.Net.WebPermission> from an XML encoding that is defined by the <xref:System.Security.SecurityElement> class."},{"content":"Use the &lt;xref:System.Net.WebPermission.ToXml%2A&gt; method to XML-encode the &lt;xref:System.Net.WebPermission&gt;, including state information.","pos":[162,297],"source":"       Use the <xref:System.Net.WebPermission.ToXml%2A> method to XML-encode the <xref:System.Net.WebPermission>, including state information."}]}]},{"pos":[26804,26897],"content":"The XML encoding from which to reconstruct the <bpt id=\"p1\">&lt;xref href=\"System.Net.WebPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The XML encoding from which to reconstruct the <xref href=\"System.Net.WebPermission\"></xref>."},{"pos":[27060,27168],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">securityElement</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null.\" name=\"null.\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>","needQuote":true,"needEscape":true,"source":"The <code>securityElement</code> parameter is <xref uid=\"langword_csharp_null.\" name=\"null.\" href=\"\"></xref>"},{"pos":[27263,27334],"content":"<ph id=\"ph1\">&lt;code&gt;securityElement&lt;/code&gt;</ph> is not a permission element for this type.","needQuote":true,"needEscape":true,"source":"<code>securityElement</code> is not a permission element for this type."},{"pos":[27748,27844],"content":"Returns the logical intersection of two <bpt id=\"p1\">&lt;xref href=\"System.Net.WebPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instances.","needQuote":true,"needEscape":true,"source":"Returns the logical intersection of two <xref href=\"System.Net.WebPermission\"></xref> instances."},{"pos":[27857,28166],"content":"Intersect returns a <xref:System.Net.WebPermission> that contains those permissions that are common in both `target` and the current instance.       This method overrides <xref:System.Security.CodeAccessPermission.Intersect%2A> and is implemented to support the <xref:System.Security.IPermission> interface.","needQuote":false,"needEscape":true,"nodes":[{"content":"Intersect returns a &lt;xref:System.Net.WebPermission&gt; that contains those permissions that are common in both <ph id=\"ph1\">`target`</ph> and the current instance.","pos":[0,142],"source":"Intersect returns a <xref:System.Net.WebPermission> that contains those permissions that are common in both `target` and the current instance."},{"content":"This method overrides &lt;xref:System.Security.CodeAccessPermission.Intersect%2A&gt; and is implemented to support the &lt;xref:System.Security.IPermission&gt; interface.","pos":[149,307],"source":"       This method overrides <xref:System.Security.CodeAccessPermission.Intersect%2A> and is implemented to support the <xref:System.Security.IPermission> interface."}]},{"pos":[28875,28962],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Net.WebPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to compare with the current instance.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Net.WebPermission\"></xref> to compare with the current instance."},{"pos":[29034,29292],"content":"A new <xref href=\"System.Net.WebPermission\"></xref> that represents the intersection of the current instance and the <code>target</code> parameter. If the intersection is empty, the method returns <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"A new <bpt id=\"p1\">&lt;xref href=\"System.Net.WebPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the intersection of the current instance and the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">target</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter.","pos":[0,147],"source":"A new <xref href=\"System.Net.WebPermission\"></xref> that represents the intersection of the current instance and the <code>target</code> parameter."},{"content":"If the intersection is empty, the method returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[148,258],"source":" If the intersection is empty, the method returns <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[29449,29593],"content":"<ph id=\"ph1\">&lt;code&gt;target&lt;/code&gt;</ph> is not <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or of type <bpt id=\"p2\">&lt;xref href=\"System.Net.WebPermission\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>","needQuote":true,"needEscape":true,"source":"<code>target</code> is not <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or of type <xref href=\"System.Net.WebPermission\"></xref>"},{"pos":[30012,30125],"content":"Determines whether the current <bpt id=\"p1\">&lt;xref href=\"System.Net.WebPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is a subset of the specified object.","needQuote":true,"needEscape":true,"source":"Determines whether the current <xref href=\"System.Net.WebPermission\"></xref> is a subset of the specified object."},{"pos":[30137,30462],"content":"If the current <xref:System.Net.WebPermission> specifies a set of associated resources that is wholly contained by the `target` parameter, then the current <xref:System.Net.WebPermission> is a subset of `target`. This method overrides IsSubsetOf and is implemented to support the <xref:System.Security.IPermission> interface.","needQuote":true,"needEscape":true,"nodes":[{"content":"If the current &lt;xref:System.Net.WebPermission&gt; specifies a set of associated resources that is wholly contained by the <ph id=\"ph1\">`target`</ph> parameter, then the current &lt;xref:System.Net.WebPermission&gt; is a subset of <ph id=\"ph2\">`target`</ph>.","pos":[0,212],"source":"If the current <xref:System.Net.WebPermission> specifies a set of associated resources that is wholly contained by the `target` parameter, then the current <xref:System.Net.WebPermission> is a subset of `target`."},{"content":"This method overrides IsSubsetOf and is implemented to support the &lt;xref:System.Security.IPermission&gt; interface.","pos":[213,325],"source":" This method overrides IsSubsetOf and is implemented to support the <xref:System.Security.IPermission> interface."}]},{"pos":[31169,31291],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Net.WebPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to compare to the current <bpt id=\"p2\">&lt;xref href=\"System.Net.WebPermission\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Net.WebPermission\"></xref> to compare to the current <xref href=\"System.Net.WebPermission\"></xref>."},{"pos":[31350,31853],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current instance is a subset of the <code>target</code> parameter; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. If the target is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, the method returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> for an empty current permission that is not unrestricted and <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> otherwise.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the current instance is a subset of the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">target</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","pos":[0,209],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current instance is a subset of the <code>target</code> parameter; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"If the target is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, the method returns <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> for an empty current permission that is not unrestricted and <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> otherwise.","pos":[210,503],"source":" If the target is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, the method returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> for an empty current permission that is not unrestricted and <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> otherwise."}]},{"pos":[32011,32100],"content":"The target parameter is not an instance of <bpt id=\"p1\">&lt;xref href=\"System.Net.WebPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The target parameter is not an instance of <xref href=\"System.Net.WebPermission\"></xref>."},{"pos":[32203,32324],"content":"The current instance contains a Regex-encoded right and there is not exactly the same right found in the target instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"The current instance contains a Regex-encoded right and there is not exactly the same right found in the target instance.","pos":[0,121]}]},{"pos":[32672,32761],"content":"Checks the overall permission state of the <bpt id=\"p1\">&lt;xref href=\"System.Net.WebPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Checks the overall permission state of the <xref href=\"System.Net.WebPermission\"></xref>."},{"pos":[32774,33115],"content":"If <xref:System.Net.WebPermission> is <xref:System.Security.Permissions.PermissionState>, then the target class can use all URIs. Otherwise, specific permission must be given for any URI you want to use with the target class.      > [!NOTE] >  Use <xref:System.Net.WebPermission.AddPermission%2A> to add a URI and specify its permissions.","needQuote":false,"needEscape":true,"nodes":[{"content":"If &lt;xref:System.Net.WebPermission&gt; is &lt;xref:System.Security.Permissions.PermissionState&gt;, then the target class can use all URIs.","pos":[0,129],"source":"If <xref:System.Net.WebPermission> is <xref:System.Security.Permissions.PermissionState>, then the target class can use all URIs."},{"content":"Otherwise, specific permission must be given for any URI you want to use with the target class.","pos":[130,225]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Use &lt;xref:System.Net.WebPermission.AddPermission%2A&gt; to add a URI and specify its permissions.","pos":[231,338],"source":"      > [!NOTE] >  Use <xref:System.Net.WebPermission.AddPermission%2A> to add a URI and specify its permissions."}]},{"pos":[33248,33587],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the <bpt id=\"p2\">&lt;xref href=\"System.Net.WebPermission\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> was created with the <bpt id=\"p3\">&lt;xref href=\"System.Security.Permissions.PermissionState\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept><bpt id=\"p4\">&lt;xref href=\"System.Security.Permissions.PermissionState\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>; otherwise, <bpt id=\"p5\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p5\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Net.WebPermission\"></xref> was created with the <xref href=\"System.Security.Permissions.PermissionState\"></xref><xref href=\"System.Security.Permissions.PermissionState\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[33960,34057],"content":"Creates an XML encoding of a <bpt id=\"p1\">&lt;xref href=\"System.Net.WebPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and its current state.","needQuote":true,"needEscape":true,"source":"Creates an XML encoding of a <xref href=\"System.Net.WebPermission\"></xref> and its current state."},{"pos":[34069,34206],"content":"Use the <xref:System.Net.WebPermission.FromXml%2A> method to restore the state information from a <xref:System.Security.SecurityElement>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Use the &lt;xref:System.Net.WebPermission.FromXml%2A&gt; method to restore the state information from a &lt;xref:System.Security.SecurityElement&gt;.","pos":[0,137],"source":"Use the <xref:System.Net.WebPermission.FromXml%2A> method to restore the state information from a <xref:System.Security.SecurityElement>."}]},{"pos":[34872,35053],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Security.SecurityElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains an XML-encoded representation of the <bpt id=\"p2\">&lt;xref href=\"System.Net.WebPermission\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, including state information.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Security.SecurityElement\"></xref> that contains an XML-encoded representation of the <xref href=\"System.Net.WebPermission\"></xref>, including state information."},{"pos":[35508,35615],"content":"Returns the logical union between two instances of the <bpt id=\"p1\">&lt;xref href=\"System.Net.WebPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Returns the logical union between two instances of the <xref href=\"System.Net.WebPermission\"></xref> class."},{"pos":[35627,35751],"content":"Union returns a &lt;xref:System.Net.WebPermission&gt; that contains all the permissions in both <ph id=\"ph1\">`target`</ph> and the current instance.","needQuote":true,"needEscape":true,"source":"Union returns a <xref:System.Net.WebPermission> that contains all the permissions in both `target` and the current instance."},{"pos":[36422,36546],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Net.WebPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to combine with the current <bpt id=\"p2\">&lt;xref href=\"System.Net.WebPermission\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Net.WebPermission\"></xref> to combine with the current <xref href=\"System.Net.WebPermission\"></xref>."},{"pos":[36618,37220],"content":"A <xref href=\"System.Net.WebPermission\"></xref> that represents the union of the current instance and the <code>target</code> parameter. If either <xref uid=\"langword_csharp_WebPermission\" name=\"WebPermission\" href=\"\"></xref> is <xref href=\"System.Security.Permissions.PermissionState\"></xref>, the method returns a <xref href=\"System.Net.WebPermission\"></xref> that is <xref href=\"System.Security.Permissions.PermissionState\"></xref>. If the target is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, the method returns a copy of the current <xref href=\"System.Net.WebPermission\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Net.WebPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the union of the current instance and the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">target</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter.","pos":[0,136],"source":"A <xref href=\"System.Net.WebPermission\"></xref> that represents the union of the current instance and the <code>target</code> parameter."},{"content":"If either <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_WebPermission\" name=\"WebPermission\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is <bpt id=\"p2\">&lt;xref href=\"System.Security.Permissions.PermissionState\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, the method returns a <bpt id=\"p3\">&lt;xref href=\"System.Net.WebPermission\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> that is <bpt id=\"p4\">&lt;xref href=\"System.Security.Permissions.PermissionState\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","pos":[137,435],"source":" If either <xref uid=\"langword_csharp_WebPermission\" name=\"WebPermission\" href=\"\"></xref> is <xref href=\"System.Security.Permissions.PermissionState\"></xref>, the method returns a <xref href=\"System.Net.WebPermission\"></xref> that is <xref href=\"System.Security.Permissions.PermissionState\"></xref>."},{"content":"If the target is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, the method returns a copy of the current <bpt id=\"p2\">&lt;xref href=\"System.Net.WebPermission\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[436,602],"source":" If the target is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, the method returns a copy of the current <xref href=\"System.Net.WebPermission\"></xref>."}]},{"pos":[37373,37505],"content":"target is not <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or of type <bpt id=\"p2\">&lt;xref href=\"System.Net.WebPermission\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"target is not <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or of type <xref href=\"System.Net.WebPermission\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Net.WebPermission\n  id: WebPermission\n  children:\n  - System.Net.WebPermission.#ctor\n  - System.Net.WebPermission.#ctor(System.Security.Permissions.PermissionState)\n  - System.Net.WebPermission.#ctor(System.Net.NetworkAccess,System.String)\n  - System.Net.WebPermission.#ctor(System.Net.NetworkAccess,System.Text.RegularExpressions.Regex)\n  - System.Net.WebPermission.AcceptList\n  - System.Net.WebPermission.AddPermission(System.Net.NetworkAccess,System.String)\n  - System.Net.WebPermission.AddPermission(System.Net.NetworkAccess,System.Text.RegularExpressions.Regex)\n  - System.Net.WebPermission.ConnectList\n  - System.Net.WebPermission.Copy\n  - System.Net.WebPermission.FromXml(System.Security.SecurityElement)\n  - System.Net.WebPermission.Intersect(System.Security.IPermission)\n  - System.Net.WebPermission.IsSubsetOf(System.Security.IPermission)\n  - System.Net.WebPermission.IsUnrestricted\n  - System.Net.WebPermission.ToXml\n  - System.Net.WebPermission.Union(System.Security.IPermission)\n  langs:\n  - csharp\n  name: WebPermission\n  nameWithType: WebPermission\n  fullName: System.Net.WebPermission\n  type: Class\n  summary: Controls rights to access HTTP Internet resources.\n  remarks: \"WebPermission provides a set of methods and properties to control access to Internet resources. You can use a WebPermission to provide either restricted or unrestricted access to your resource, based on the <xref:System.Security.Permissions.PermissionState> that is set when the WebPermission is created.  \\n  \\n Create a WebPermission instance by calling its constructor using one of the following sets of parameters:  \\n  \\n-   No parameters. The default <xref:System.Security.Permissions.PermissionState> is <xref:System.Security.Permissions.PermissionState>.  \\n  \\n-   A <xref:System.Security.Permissions.PermissionState>. Specify either <xref:System.Security.Permissions.PermissionState> to allow any URI to be used in the target class, or <xref:System.Security.Permissions.PermissionState> to allow access only to URIs that you specify through the use of the <xref:System.Net.WebPermission.AddPermission%2A> method.  \\n  \\n-   A <xref:System.Net.NetworkAccess> value and a URI string. The specified URI has permissions granted by the <xref:System.Net.NetworkAccess> value.  \\n  \\n-   A <xref:System.Net.NetworkAccess> specifier and URI regular expression.  \\n  \\n The <xref:System.Net.WebPermission.ConnectList%2A> and <xref:System.Net.WebPermission.AcceptList%2A> hold the URIs to which you have granted access permission. To add a URI to either of these lists, use <xref:System.Net.WebPermission.AddPermission%2A>. If you pass <xref:System.Net.NetworkAccess> as the <xref:System.Net.NetworkAccess> parameter, the URI will be added to the <xref:System.Net.WebPermission.AcceptList%2A>. WebPermission will allow connections to your target class with URIs matching the <xref:System.Net.WebPermission.AcceptList%2A>.  \\n  \\n> [!CAUTION]\\n>  To deny access to an Internet resource, you must deny access to all the possible paths to that resource. This requires calling <xref:System.Net.WebPermission.%23ctor%2A?displayProperty=fullName> with state parameter set to <xref:System.Security.CodeAccessPermission.Deny%2A>. A better approach is to allow access to the specific resource only. For more information about this subject, refer to the [NIB: Using the Deny Method](http://msdn.microsoft.com/en-us/6b4d2e01-c504-4ac3-b50e-d6f5e7f5df25) topic.  \\n  \\n> [!NOTE]\\n>  You need to deny access using only the resource canonical path. There is no need to use all the path's syntactical variations.  \\n  \\n> [!NOTE]\\n>  User name and default port information is stripped from the <xref:System.Uri> before the comparison with the regular expression argument that is supplied to the <xref:System.Net.WebPermission.%23ctor%28System.Net.NetworkAccess%2CSystem.Text.RegularExpressions.Regex%29> constructor. If the regular expression contains user information or the default port number, then all incoming <xref:System.Uri>s will fail to match the regular expression.\"\n  example:\n  - \"The following example demonstrates how to create a new instance of WebPermission using a <xref:System.Text.RegularExpressions.Regex>. Additional hosts are added to the connect and accept list of WebPermission. Finally, the connect and accept list are displayed to the console.  \\n  \\n [!code-cpp[WebPermission_Regex#1](~/add/codesnippet/cpp/t-system.net.webpermission_1.cpp)]\\n [!code-vb[WebPermission_Regex#1](~/add/codesnippet/visualbasic/t-system.net.webpermission_1.vb)]\\n [!code-cs[WebPermission_Regex#1](~/add/codesnippet/csharp/t-system.net.webpermission_1.cs)]\"\n  syntax:\n    content: 'public sealed class WebPermission : System.Security.CodeAccessPermission, System.Security.Permissions.IUnrestrictedPermission'\n  inheritance:\n  - System.Object\n  - System.Security.CodeAccessPermission\n  implements:\n  - System.Security.Permissions.IUnrestrictedPermission\n  inheritedMembers:\n  - System.Security.CodeAccessPermission.Assert\n  - System.Security.CodeAccessPermission.Demand\n  - System.Security.CodeAccessPermission.Deny\n  - System.Security.CodeAccessPermission.Equals(System.Object)\n  - System.Security.CodeAccessPermission.GetHashCode\n  - System.Security.CodeAccessPermission.PermitOnly\n  - System.Security.CodeAccessPermission.RevertAll\n  - System.Security.CodeAccessPermission.RevertAssert\n  - System.Security.CodeAccessPermission.RevertDeny\n  - System.Security.CodeAccessPermission.RevertPermitOnly\n  - System.Security.CodeAccessPermission.ToString\n  platform:\n  - net462\n- uid: System.Net.WebPermission.#ctor\n  id: '#ctor'\n  parent: System.Net.WebPermission\n  langs:\n  - csharp\n  name: WebPermission()\n  nameWithType: WebPermission.WebPermission()\n  fullName: System.Net.WebPermission.WebPermission()\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Creates a new instance of the <xref href=\"System.Net.WebPermission\"></xref> class.\n  remarks: Creates a new instance of the <xref:System.Net.WebPermission> class. This constructor creates an empty permission that does not grant any rights.\n  syntax:\n    content: public WebPermission ();\n    parameters: []\n  overload: System.Net.WebPermission.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.WebPermission.#ctor(System.Security.Permissions.PermissionState)\n  id: '#ctor(System.Security.Permissions.PermissionState)'\n  parent: System.Net.WebPermission\n  langs:\n  - csharp\n  name: WebPermission(PermissionState)\n  nameWithType: WebPermission.WebPermission(PermissionState)\n  fullName: System.Net.WebPermission.WebPermission(PermissionState)\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Creates a new instance of the <xref href=\"System.Net.WebPermission\"></xref> class that passes all demands or fails all demands.\n  remarks: The value of the `state` parameter is either <xref:System.Security.Permissions.PermissionState?displayProperty=fullName> or <xref:System.Security.Permissions.PermissionState?displayProperty=fullName>, respectively yielding fully restricted or fully unrestricted access to all security variables. If you specify <xref:System.Security.Permissions.PermissionState?displayProperty=fullName>, then you can give access to individual URIs using <xref:System.Net.WebPermission.AddPermission%2A>.\n  example:\n  - \"The following example creates an instance of <xref:System.Net.WebPermission> and gives access rights to specific URLs.  \\n  \\n [!code-vb[WebPermission_Copy#1](~/add/codesnippet/visualbasic/88c33480-1361-4059-add6-_1.vb)]\\n [!code-cpp[WebPermission_Copy#1](~/add/codesnippet/cpp/88c33480-1361-4059-add6-_1.cpp)]\\n [!code-cs[WebPermission_Copy#1](~/add/codesnippet/csharp/88c33480-1361-4059-add6-_1.cs)]\"\n  syntax:\n    content: public WebPermission (System.Security.Permissions.PermissionState state);\n    parameters:\n    - id: state\n      type: System.Security.Permissions.PermissionState\n      description: A <xref href=\"System.Security.Permissions.PermissionState\"></xref> value.\n  overload: System.Net.WebPermission.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.WebPermission.#ctor(System.Net.NetworkAccess,System.String)\n  id: '#ctor(System.Net.NetworkAccess,System.String)'\n  parent: System.Net.WebPermission\n  langs:\n  - csharp\n  name: WebPermission(NetworkAccess,String)\n  nameWithType: WebPermission.WebPermission(NetworkAccess,String)\n  fullName: System.Net.WebPermission.WebPermission(NetworkAccess,String)\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Initializes a new instance of the <xref href=\"System.Net.WebPermission\"></xref> class with the specified access rights for the specified URI.\n  remarks: This constructor initializes a <xref:System.Net.WebPermission> and grants its target permission to either make a remote host connection or accept a remote host connection using the URI described by the `uriString` parameter.\n  example:\n  - \"The following example creates a new instance of <xref:System.Net.WebPermission> with connect rights for the specified URI.  \\n  \\n [!code-cpp[WebPermission_Union#1](~/add/codesnippet/cpp/m-system.net.webpermissi_3_1.cpp)]\\n [!code-vb[WebPermission_Union#1](~/add/codesnippet/visualbasic/m-system.net.webpermissi_3_1.vb)]\\n [!code-cs[WebPermission_Union#1](~/add/codesnippet/csharp/m-system.net.webpermissi_3_1.cs)]\"\n  syntax:\n    content: public WebPermission (System.Net.NetworkAccess access, string uriString);\n    parameters:\n    - id: access\n      type: System.Net.NetworkAccess\n      description: A NetworkAccess value that indicates what kind of access to grant to the specified URI. <xref href=\"System.Net.NetworkAccess\"></xref> indicates that the application is allowed to accept connections from the Internet on a local resource. <xref href=\"System.Net.NetworkAccess\"></xref> indicates that the application is allowed to connect to specific Internet resources.\n    - id: uriString\n      type: System.String\n      description: A URI string to which access rights are granted.\n  overload: System.Net.WebPermission.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>uriString</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Net.WebPermission.#ctor(System.Net.NetworkAccess,System.Text.RegularExpressions.Regex)\n  id: '#ctor(System.Net.NetworkAccess,System.Text.RegularExpressions.Regex)'\n  parent: System.Net.WebPermission\n  langs:\n  - csharp\n  name: WebPermission(NetworkAccess,Regex)\n  nameWithType: WebPermission.WebPermission(NetworkAccess,Regex)\n  fullName: System.Net.WebPermission.WebPermission(NetworkAccess,Regex)\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Initializes a new instance of the <xref href=\"System.Net.WebPermission\"></xref> class with the specified access rights for the specified URI regular expression.\n  remarks: \"This constructor initializes a <xref:System.Net.WebPermission> and grants its target permission to either make a remote host connection or accept a remote host connection using the URI described by the `uriRegex`parameter.  \\n  \\n> [!NOTE]\\n>  It is recommended that you create `uriRegex` using the <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName>, <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName>, and <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName> flags.  \\n  \\n> [!NOTE]\\n>  A candidate URI string is checked against the list of relevant regular expressions (<xref:System.Net.WebPermission.AcceptList%2A> or <xref:System.Net.WebPermission.ConnectList%2A>) in two ways. First, the candidate URI string is checked against the appropriate list; then, if there is no match, the candidate URI string is converted into a <xref:System.Uri> and checked against the appropriate list.\"\n  example:\n  - \"The following example creates a new instance of <xref:System.Net.WebPermission> with connect rights for the specified <xref:System.Text.RegularExpressions.Regex?displayProperty=fullName>.  \\n  \\n [!code-vb[WebPermission_Constructor4#1](~/add/codesnippet/visualbasic/c1b4c805-3099-4a42-8ab3-_1.vb)]\\n [!code-cpp[WebPermission_Constructor4#1](~/add/codesnippet/cpp/c1b4c805-3099-4a42-8ab3-_1.cpp)]\\n [!code-cs[WebPermission_Constructor4#1](~/add/codesnippet/csharp/c1b4c805-3099-4a42-8ab3-_1.cs)]\"\n  syntax:\n    content: public WebPermission (System.Net.NetworkAccess access, System.Text.RegularExpressions.Regex uriRegex);\n    parameters:\n    - id: access\n      type: System.Net.NetworkAccess\n      description: A <xref href=\"System.Net.NetworkAccess\"></xref> value that indicates what kind of access to grant to the specified URI. <xref href=\"System.Net.NetworkAccess\"></xref> indicates that the application is allowed to accept connections from the Internet on a local resource. <xref href=\"System.Net.NetworkAccess\"></xref> indicates that the application is allowed to connect to specific Internet resources.\n    - id: uriRegex\n      type: System.Text.RegularExpressions.Regex\n      description: A regular expression that describes the URI to which access is to be granted.\n  overload: System.Net.WebPermission.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.WebPermission.AcceptList\n  id: AcceptList\n  parent: System.Net.WebPermission\n  langs:\n  - csharp\n  name: AcceptList\n  nameWithType: WebPermission.AcceptList\n  fullName: System.Net.WebPermission.AcceptList\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: This property returns an enumeration of a single accept permissions held by this <xref href=\"System.Net.WebPermission\"></xref>. The possible objects types contained in the returned enumeration are <xref:System.String> and &lt;xref:System.Text.RegularExpressions.Regex?displayProperty=fullName&gt;.\n  remarks: \"This property gets a list of local resources permitted by this <xref:System.Net.WebPermission>. The class to which you have applied <xref:System.Net.WebPermission> only has permission to receive an incoming connection to local resources found in this list.  \\n  \\n> [!NOTE]\\n>  You can add URIs to this list using <xref:System.Net.WebPermission.AddPermission%2A>.  \\n  \\n> [!NOTE]\\n>  A candidate URI string is checked against the list of relevant regular expressions (AcceptList or <xref:System.Net.WebPermission.ConnectList%2A>) in two ways. First, the candidate URI string is checked against the appropriate list; then, if there is no match, the candidate URI string is converted into a <xref:System.Uri> and checked against the appropriate list.\"\n  example:\n  - \"The following example prints the URLs in the AcceptList to the console.  \\n  \\n [!code-vb[WebPermission_AcceptConnectList#2](~/add/codesnippet/visualbasic/p-system.net.webpermissi_5_1.vb)]\\n [!code-cs[WebPermission_AcceptConnectList#2](~/add/codesnippet/csharp/p-system.net.webpermissi_5_1.cs)]\\n [!code-cpp[WebPermission_AcceptConnectList#2](~/add/codesnippet/cpp/p-system.net.webpermissi_5_1.cpp)]\"\n  syntax:\n    content: public System.Collections.IEnumerator AcceptList { get; }\n    return:\n      type: System.Collections.IEnumerator\n      description: The <xref:System.Collections.IEnumerator> interface that contains accept permissions.\n  overload: System.Net.WebPermission.AcceptList*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.WebPermission.AddPermission(System.Net.NetworkAccess,System.String)\n  id: AddPermission(System.Net.NetworkAccess,System.String)\n  parent: System.Net.WebPermission\n  langs:\n  - csharp\n  name: AddPermission(NetworkAccess,String)\n  nameWithType: WebPermission.AddPermission(NetworkAccess,String)\n  fullName: System.Net.WebPermission.AddPermission(NetworkAccess,String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Adds the specified URI string with the specified access rights to the current <xref href=\"System.Net.WebPermission\"></xref>.\n  remarks: \"If you have specified <xref:System.Security.Permissions.PermissionState> as the <xref:System.Security.Permissions.PermissionState>, use AddPermission to permit the use of `uriString` in the target class. The way that `uriString` can be used by the target class is specified by `access`. Specify <xref:System.Net.NetworkAccess> as the access parameter to add the URI specified by the `uriString` parameter to the list of URI accept strings, or specify <xref:System.Net.NetworkAccess> as the access parameter to add the URI to the list of URI connect strings.  \\n  \\n> [!NOTE]\\n>  Calling AddPermission on <xref:System.Security.Permissions.PermissionState><xref:System.Net.WebPermission> will have no effect, because permission is granted to all URIs.  \\n  \\n> [!NOTE]\\n>  A candidate URI string is checked against the list of relevant regular expressions (<xref:System.Net.WebPermission.AcceptList%2A> or <xref:System.Net.WebPermission.ConnectList%2A>) in two ways. First, the candidate URI string is checked against the appropriate list; then, if there is no match, the candidate URI string is converted into a <xref:System.Uri> and checked against the appropriate list.\"\n  example:\n  - \"The following example demonstrates how to add access rights to particular URL strings.  \\n  \\n [!code-cs[WebPermission_Intersect#2](~/add/codesnippet/csharp/m-system.net.webpermissi_2_1.cs)]\\n [!code-cpp[WebPermission_Intersect#2](~/add/codesnippet/cpp/m-system.net.webpermissi_2_1.cpp)]\\n [!code-vb[WebPermission_Intersect#2](~/add/codesnippet/visualbasic/m-system.net.webpermissi_2_1.vb)]\"\n  syntax:\n    content: public void AddPermission (System.Net.NetworkAccess access, string uriString);\n    parameters:\n    - id: access\n      type: System.Net.NetworkAccess\n      description: A <xref href=\"System.Net.NetworkAccess\"></xref> that specifies the access rights that are granted to the URI.\n    - id: uriString\n      type: System.String\n      description: A string that describes the URI to which access rights are granted.\n  overload: System.Net.WebPermission.AddPermission*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>uriString</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Net.WebPermission.AddPermission(System.Net.NetworkAccess,System.Text.RegularExpressions.Regex)\n  id: AddPermission(System.Net.NetworkAccess,System.Text.RegularExpressions.Regex)\n  parent: System.Net.WebPermission\n  langs:\n  - csharp\n  name: AddPermission(NetworkAccess,Regex)\n  nameWithType: WebPermission.AddPermission(NetworkAccess,Regex)\n  fullName: System.Net.WebPermission.AddPermission(NetworkAccess,Regex)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Adds the specified URI with the specified access rights to the current <xref href=\"System.Net.WebPermission\"></xref>.\n  remarks: \"If you have specified <xref:System.Security.Permissions.PermissionState> as the <xref:System.Security.Permissions.PermissionState>, use <xref:System.Net.WebPermission.AddPermission%2A> to allow the use of `uriRegex` in the target class. Specify <xref:System.Net.NetworkAccess> as the `access` parameter to add the URI specified by the `uriRegex` parameter to the list of URI accept strings, or specify <xref:System.Net.NetworkAccess> as the access parameter to add the URI to the list of URI connect strings.  \\n  \\n> [!NOTE]\\n>  Calling <xref:System.Net.WebPermission.AddPermission%2A> on an <xref:System.Security.Permissions.PermissionState><xref:System.Net.WebPermission> instance will have no effect as permission is granted to all URIs.  \\n  \\n> [!NOTE]\\n>  It is recommended that you create `uriRegex` using the <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName>, <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName>, and <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName> flags.  \\n  \\n> [!NOTE]\\n>  A candidate URI string is checked against the list of relevant regular expressions (<xref:System.Net.WebPermission.AcceptList%2A> or <xref:System.Net.WebPermission.ConnectList%2A>) in two ways. First, the candidate URI string is checked against the appropriate list; then, if there is no match, the candidate URI string is converted into a <xref:System.Uri> and checked against the appropriate list.\"\n  example:\n  - \"The following example uses <xref:System.Net.WebPermission.AddPermission%2A> to give access rights for the specified URI.  \\n  \\n [!code-vb[WebPermission_IsSubset#1](~/add/codesnippet/visualbasic/38330477-33f7-43a1-bcd6-_1.vb)]\\n [!code-cs[WebPermission_IsSubset#1](~/add/codesnippet/csharp/38330477-33f7-43a1-bcd6-_1.cs)]\\n [!code-cpp[WebPermission_IsSubset#1](~/add/codesnippet/cpp/38330477-33f7-43a1-bcd6-_1.cpp)]\"\n  syntax:\n    content: public void AddPermission (System.Net.NetworkAccess access, System.Text.RegularExpressions.Regex uriRegex);\n    parameters:\n    - id: access\n      type: System.Net.NetworkAccess\n      description: A NetworkAccess that specifies the access rights that are granted to the URI.\n    - id: uriRegex\n      type: System.Text.RegularExpressions.Regex\n      description: A regular expression that describes the set of URIs to which access rights are granted.\n  overload: System.Net.WebPermission.AddPermission*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>uriRegex</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Net.WebPermission.ConnectList\n  id: ConnectList\n  parent: System.Net.WebPermission\n  langs:\n  - csharp\n  name: ConnectList\n  nameWithType: WebPermission.ConnectList\n  fullName: System.Net.WebPermission.ConnectList\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: This property returns an enumeration of a single connect permissions held by this <xref href=\"System.Net.WebPermission\"></xref>. The possible objects types contained in the returned enumeration are <xref:System.String> and &lt;xref:System.Text.RegularExpressions.Regex?displayProperty=fullName&gt;.\n  remarks: \"This property gets a list of remote resources that are permitted by this <xref:System.Net.WebPermission>. The class to which you have applied <xref:System.Net.WebPermission> only has permission to connect with resources found in this list.  \\n  \\n> [!NOTE]\\n>  You can add URIs to this list using <xref:System.Net.WebPermission.AddPermission%2A>.  \\n  \\n> [!NOTE]\\n>  A candidate URI string is checked against the list of relevant regular expressions (<xref:System.Net.WebPermission.AcceptList%2A> or ConnectList) in two ways. First, the candidate URI string is checked against the appropriate list; then, if there is no match, the candidate URI string is converted into a <xref:System.Uri> and checked against the appropriate list.\"\n  example:\n  - \"The following example prints the URLs in the ConnectList to the console.  \\n  \\n [!code-vb[WebPermission_AcceptConnectList#1](~/add/codesnippet/visualbasic/p-system.net.webpermissi_2_1.vb)]\\n [!code-cs[WebPermission_AcceptConnectList#1](~/add/codesnippet/csharp/p-system.net.webpermissi_2_1.cs)]\\n [!code-cpp[WebPermission_AcceptConnectList#1](~/add/codesnippet/cpp/p-system.net.webpermissi_2_1.cpp)]\"\n  syntax:\n    content: public System.Collections.IEnumerator ConnectList { get; }\n    return:\n      type: System.Collections.IEnumerator\n      description: The <xref:System.Collections.IEnumerator> interface that contains connect permissions.\n  overload: System.Net.WebPermission.ConnectList*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.WebPermission.Copy\n  id: Copy\n  parent: System.Net.WebPermission\n  langs:\n  - csharp\n  name: Copy()\n  nameWithType: WebPermission.Copy()\n  fullName: System.Net.WebPermission.Copy()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Creates a copy of a <xref href=\"System.Net.WebPermission\"></xref>.\n  remarks: The <xref:System.Security.IPermission> returned by this method represents the same access to resources as the original <xref:System.Net.WebPermission>. This method overrides <xref:System.Security.CodeAccessPermission.Copy%2A> and is implemented to support the <xref:System.Security.IPermission> interface.\n  example:\n  - \"The following example demonstrates how to create a second instance of <xref:System.Net.WebPermission> using Copy. This second instance is identical to the first.  \\n  \\n [!code-vb[WebPermission_Copy#2](~/add/codesnippet/visualbasic/m-system.net.webpermissi_6_1.vb)]\\n [!code-cpp[WebPermission_Copy#2](~/add/codesnippet/cpp/m-system.net.webpermissi_6_1.cpp)]\\n [!code-cs[WebPermission_Copy#2](~/add/codesnippet/csharp/m-system.net.webpermissi_6_1.cs)]\"\n  syntax:\n    content: public override System.Security.IPermission Copy ();\n    parameters: []\n    return:\n      type: System.Security.IPermission\n      description: A new instance of the <xref href=\"System.Net.WebPermission\"></xref> class that has the same values as the original.\n  overload: System.Net.WebPermission.Copy*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.WebPermission.FromXml(System.Security.SecurityElement)\n  id: FromXml(System.Security.SecurityElement)\n  parent: System.Net.WebPermission\n  langs:\n  - csharp\n  name: FromXml(SecurityElement)\n  nameWithType: WebPermission.FromXml(SecurityElement)\n  fullName: System.Net.WebPermission.FromXml(SecurityElement)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Reconstructs a <xref href=\"System.Net.WebPermission\"></xref> from an XML encoding.\n  remarks: \"The FromXml method reconstructs a <xref:System.Net.WebPermission> from an XML encoding that is defined by the <xref:System.Security.SecurityElement> class.  \\n  \\n Use the <xref:System.Net.WebPermission.ToXml%2A> method to XML-encode the <xref:System.Net.WebPermission>, including state information.\"\n  example:\n  - \"The following example creates a <xref:System.Security.SecurityElement?displayProperty=fullName>, populates its attributes, and uses FromXml to transfer this information to an instance of <xref:System.Net.WebPermission>.  \\n  \\n [!code-vb[WebPermission_FromToXml#1](~/add/codesnippet/visualbasic/m-system.net.webpermissi_7_1.vb)]\\n [!code-cpp[WebPermission_FromToXml#1](~/add/codesnippet/cpp/m-system.net.webpermissi_7_1.cpp)]\\n [!code-cs[WebPermission_FromToXml#1](~/add/codesnippet/csharp/m-system.net.webpermissi_7_1.cs)]\"\n  syntax:\n    content: public override void FromXml (System.Security.SecurityElement securityElement);\n    parameters:\n    - id: securityElement\n      type: System.Security.SecurityElement\n      description: The XML encoding from which to reconstruct the <xref href=\"System.Net.WebPermission\"></xref>.\n  overload: System.Net.WebPermission.FromXml*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>securityElement</code> parameter is <xref uid=\"langword_csharp_null.\" name=\"null.\" href=\"\"></xref>\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>securityElement</code> is not a permission element for this type.\n  platform:\n  - net462\n- uid: System.Net.WebPermission.Intersect(System.Security.IPermission)\n  id: Intersect(System.Security.IPermission)\n  parent: System.Net.WebPermission\n  langs:\n  - csharp\n  name: Intersect(IPermission)\n  nameWithType: WebPermission.Intersect(IPermission)\n  fullName: System.Net.WebPermission.Intersect(IPermission)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Returns the logical intersection of two <xref href=\"System.Net.WebPermission\"></xref> instances.\n  remarks: \"Intersect returns a <xref:System.Net.WebPermission> that contains those permissions that are common in both `target` and the current instance.  \\n  \\n This method overrides <xref:System.Security.CodeAccessPermission.Intersect%2A> and is implemented to support the <xref:System.Security.IPermission> interface.\"\n  example:\n  - \"The following example shows how to create an instance of <xref:System.Net.WebPermission> using the logical intersection of two existing <xref:System.Net.WebPermission> instances.  \\n  \\n [!code-cs[WebPermission_Intersect#3](~/add/codesnippet/csharp/m-system.net.webpermissi_5_1.cs)]\\n [!code-cpp[WebPermission_Intersect#3](~/add/codesnippet/cpp/m-system.net.webpermissi_5_1.cpp)]\\n [!code-vb[WebPermission_Intersect#3](~/add/codesnippet/visualbasic/m-system.net.webpermissi_5_1.vb)]\"\n  syntax:\n    content: public override System.Security.IPermission Intersect (System.Security.IPermission target);\n    parameters:\n    - id: target\n      type: System.Security.IPermission\n      description: The <xref href=\"System.Net.WebPermission\"></xref> to compare with the current instance.\n    return:\n      type: System.Security.IPermission\n      description: A new <xref href=\"System.Net.WebPermission\"></xref> that represents the intersection of the current instance and the <code>target</code> parameter. If the intersection is empty, the method returns <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Net.WebPermission.Intersect*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>target</code> is not <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or of type <xref href=\"System.Net.WebPermission\"></xref>\n  platform:\n  - net462\n- uid: System.Net.WebPermission.IsSubsetOf(System.Security.IPermission)\n  id: IsSubsetOf(System.Security.IPermission)\n  parent: System.Net.WebPermission\n  langs:\n  - csharp\n  name: IsSubsetOf(IPermission)\n  nameWithType: WebPermission.IsSubsetOf(IPermission)\n  fullName: System.Net.WebPermission.IsSubsetOf(IPermission)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Determines whether the current <xref href=\"System.Net.WebPermission\"></xref> is a subset of the specified object.\n  remarks: If the current <xref:System.Net.WebPermission> specifies a set of associated resources that is wholly contained by the `target` parameter, then the current <xref:System.Net.WebPermission> is a subset of `target`. This method overrides IsSubsetOf and is implemented to support the <xref:System.Security.IPermission> interface.\n  example:\n  - \"The following example uses IsSubsetOf to determine whether the access rights found in one instance of <xref:System.Net.WebPermission> are found in another instance of <xref:System.Net.WebPermission>.  \\n  \\n [!code-cs[WebPermission_IsSubset2#1](~/add/codesnippet/csharp/m-system.net.webpermissi_1_1.cs)]\\n [!code-vb[WebPermission_IsSubset2#1](~/add/codesnippet/visualbasic/m-system.net.webpermissi_1_1.vb)]\\n [!code-cpp[WebPermission_IsSubset2#1](~/add/codesnippet/cpp/m-system.net.webpermissi_1_1.cpp)]\"\n  syntax:\n    content: public override bool IsSubsetOf (System.Security.IPermission target);\n    parameters:\n    - id: target\n      type: System.Security.IPermission\n      description: The <xref href=\"System.Net.WebPermission\"></xref> to compare to the current <xref href=\"System.Net.WebPermission\"></xref>.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current instance is a subset of the <code>target</code> parameter; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. If the target is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, the method returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> for an empty current permission that is not unrestricted and <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> otherwise.\n  overload: System.Net.WebPermission.IsSubsetOf*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The target parameter is not an instance of <xref href=\"System.Net.WebPermission\"></xref>.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The current instance contains a Regex-encoded right and there is not exactly the same right found in the target instance.\n  platform:\n  - net462\n- uid: System.Net.WebPermission.IsUnrestricted\n  id: IsUnrestricted\n  parent: System.Net.WebPermission\n  langs:\n  - csharp\n  name: IsUnrestricted()\n  nameWithType: WebPermission.IsUnrestricted()\n  fullName: System.Net.WebPermission.IsUnrestricted()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Checks the overall permission state of the <xref href=\"System.Net.WebPermission\"></xref>.\n  remarks: \"If <xref:System.Net.WebPermission> is <xref:System.Security.Permissions.PermissionState>, then the target class can use all URIs. Otherwise, specific permission must be given for any URI you want to use with the target class.  \\n  \\n> [!NOTE]\\n>  Use <xref:System.Net.WebPermission.AddPermission%2A> to add a URI and specify its permissions.\"\n  syntax:\n    content: public bool IsUnrestricted ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Net.WebPermission\"></xref> was created with the <xref href=\"System.Security.Permissions.PermissionState\"></xref><xref href=\"System.Security.Permissions.PermissionState\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Net.WebPermission.IsUnrestricted*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.WebPermission.ToXml\n  id: ToXml\n  parent: System.Net.WebPermission\n  langs:\n  - csharp\n  name: ToXml()\n  nameWithType: WebPermission.ToXml()\n  fullName: System.Net.WebPermission.ToXml()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Creates an XML encoding of a <xref href=\"System.Net.WebPermission\"></xref> and its current state.\n  remarks: Use the <xref:System.Net.WebPermission.FromXml%2A> method to restore the state information from a <xref:System.Security.SecurityElement>.\n  example:\n  - \"The following example demonstrates how to use ToXml to create a <xref:System.Security.SecurityElement?displayProperty=fullName> and print its attributes to the console.  \\n  \\n [!code-vb[WebPermission_FromToXml#1](~/add/codesnippet/visualbasic/m-system.net.webpermissi_4_1.vb)]\\n [!code-cpp[WebPermission_FromToXml#1](~/add/codesnippet/cpp/m-system.net.webpermissi_4_1.cpp)]\\n [!code-cs[WebPermission_FromToXml#1](~/add/codesnippet/csharp/m-system.net.webpermissi_4_1.cs)]\"\n  syntax:\n    content: public override System.Security.SecurityElement ToXml ();\n    parameters: []\n    return:\n      type: System.Security.SecurityElement\n      description: A <xref href=\"System.Security.SecurityElement\"></xref> that contains an XML-encoded representation of the <xref href=\"System.Net.WebPermission\"></xref>, including state information.\n  overload: System.Net.WebPermission.ToXml*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.WebPermission.Union(System.Security.IPermission)\n  id: Union(System.Security.IPermission)\n  parent: System.Net.WebPermission\n  langs:\n  - csharp\n  name: Union(IPermission)\n  nameWithType: WebPermission.Union(IPermission)\n  fullName: System.Net.WebPermission.Union(IPermission)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net\n  summary: Returns the logical union between two instances of the <xref href=\"System.Net.WebPermission\"></xref> class.\n  remarks: Union returns a <xref:System.Net.WebPermission> that contains all the permissions in both `target` and the current instance.\n  example:\n  - \"The following example takes the logical union of two <xref:System.Net.WebPermission> instances to create a third instance of <xref:System.Net.WebPermission>.  \\n  \\n [!code-cpp[WebPermission_Union#2](~/add/codesnippet/cpp/m-system.net.webpermissi_0_1.cpp)]\\n [!code-vb[WebPermission_Union#2](~/add/codesnippet/visualbasic/m-system.net.webpermissi_0_1.vb)]\\n [!code-cs[WebPermission_Union#2](~/add/codesnippet/csharp/m-system.net.webpermissi_0_1.cs)]\"\n  syntax:\n    content: public override System.Security.IPermission Union (System.Security.IPermission target);\n    parameters:\n    - id: target\n      type: System.Security.IPermission\n      description: The <xref href=\"System.Net.WebPermission\"></xref> to combine with the current <xref href=\"System.Net.WebPermission\"></xref>.\n    return:\n      type: System.Security.IPermission\n      description: A <xref href=\"System.Net.WebPermission\"></xref> that represents the union of the current instance and the <code>target</code> parameter. If either <xref uid=\"langword_csharp_WebPermission\" name=\"WebPermission\" href=\"\"></xref> is <xref href=\"System.Security.Permissions.PermissionState\"></xref>, the method returns a <xref href=\"System.Net.WebPermission\"></xref> that is <xref href=\"System.Security.Permissions.PermissionState\"></xref>. If the target is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, the method returns a copy of the current <xref href=\"System.Net.WebPermission\"></xref>.\n  overload: System.Net.WebPermission.Union*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: target is not <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or of type <xref href=\"System.Net.WebPermission\"></xref>.\n  platform:\n  - net462\nreferences:\n- uid: System.Security.CodeAccessPermission\n  isExternal: false\n  name: System.Security.CodeAccessPermission\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.NotSupportedException\n  isExternal: true\n  name: System.NotSupportedException\n- uid: System.Net.WebPermission.#ctor\n  parent: System.Net.WebPermission\n  isExternal: false\n  name: WebPermission()\n  nameWithType: WebPermission.WebPermission()\n  fullName: System.Net.WebPermission.WebPermission()\n- uid: System.Net.WebPermission.#ctor(System.Security.Permissions.PermissionState)\n  parent: System.Net.WebPermission\n  isExternal: false\n  name: WebPermission(PermissionState)\n  nameWithType: WebPermission.WebPermission(PermissionState)\n  fullName: System.Net.WebPermission.WebPermission(PermissionState)\n- uid: System.Security.Permissions.PermissionState\n  parent: System.Security.Permissions\n  isExternal: false\n  name: PermissionState\n  nameWithType: PermissionState\n  fullName: System.Security.Permissions.PermissionState\n- uid: System.Net.WebPermission.#ctor(System.Net.NetworkAccess,System.String)\n  parent: System.Net.WebPermission\n  isExternal: false\n  name: WebPermission(NetworkAccess,String)\n  nameWithType: WebPermission.WebPermission(NetworkAccess,String)\n  fullName: System.Net.WebPermission.WebPermission(NetworkAccess,String)\n- uid: System.Net.NetworkAccess\n  parent: System.Net\n  isExternal: false\n  name: NetworkAccess\n  nameWithType: NetworkAccess\n  fullName: System.Net.NetworkAccess\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Net.WebPermission.#ctor(System.Net.NetworkAccess,System.Text.RegularExpressions.Regex)\n  parent: System.Net.WebPermission\n  isExternal: false\n  name: WebPermission(NetworkAccess,Regex)\n  nameWithType: WebPermission.WebPermission(NetworkAccess,Regex)\n  fullName: System.Net.WebPermission.WebPermission(NetworkAccess,Regex)\n- uid: System.Text.RegularExpressions.Regex\n  parent: System.Text.RegularExpressions\n  isExternal: true\n  name: Regex\n  nameWithType: Regex\n  fullName: System.Text.RegularExpressions.Regex\n- uid: System.Net.WebPermission.AcceptList\n  parent: System.Net.WebPermission\n  isExternal: false\n  name: AcceptList\n  nameWithType: WebPermission.AcceptList\n  fullName: System.Net.WebPermission.AcceptList\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: true\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.Net.WebPermission.AddPermission(System.Net.NetworkAccess,System.String)\n  parent: System.Net.WebPermission\n  isExternal: false\n  name: AddPermission(NetworkAccess,String)\n  nameWithType: WebPermission.AddPermission(NetworkAccess,String)\n  fullName: System.Net.WebPermission.AddPermission(NetworkAccess,String)\n- uid: System.Net.WebPermission.AddPermission(System.Net.NetworkAccess,System.Text.RegularExpressions.Regex)\n  parent: System.Net.WebPermission\n  isExternal: false\n  name: AddPermission(NetworkAccess,Regex)\n  nameWithType: WebPermission.AddPermission(NetworkAccess,Regex)\n  fullName: System.Net.WebPermission.AddPermission(NetworkAccess,Regex)\n- uid: System.Net.WebPermission.ConnectList\n  parent: System.Net.WebPermission\n  isExternal: false\n  name: ConnectList\n  nameWithType: WebPermission.ConnectList\n  fullName: System.Net.WebPermission.ConnectList\n- uid: System.Net.WebPermission.Copy\n  parent: System.Net.WebPermission\n  isExternal: false\n  name: Copy()\n  nameWithType: WebPermission.Copy()\n  fullName: System.Net.WebPermission.Copy()\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n- uid: System.Net.WebPermission.FromXml(System.Security.SecurityElement)\n  parent: System.Net.WebPermission\n  isExternal: false\n  name: FromXml(SecurityElement)\n  nameWithType: WebPermission.FromXml(SecurityElement)\n  fullName: System.Net.WebPermission.FromXml(SecurityElement)\n- uid: System.Security.SecurityElement\n  parent: System.Security\n  isExternal: false\n  name: SecurityElement\n  nameWithType: SecurityElement\n  fullName: System.Security.SecurityElement\n- uid: System.Net.WebPermission.Intersect(System.Security.IPermission)\n  parent: System.Net.WebPermission\n  isExternal: false\n  name: Intersect(IPermission)\n  nameWithType: WebPermission.Intersect(IPermission)\n  fullName: System.Net.WebPermission.Intersect(IPermission)\n- uid: System.Net.WebPermission.IsSubsetOf(System.Security.IPermission)\n  parent: System.Net.WebPermission\n  isExternal: false\n  name: IsSubsetOf(IPermission)\n  nameWithType: WebPermission.IsSubsetOf(IPermission)\n  fullName: System.Net.WebPermission.IsSubsetOf(IPermission)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Net.WebPermission.IsUnrestricted\n  parent: System.Net.WebPermission\n  isExternal: false\n  name: IsUnrestricted()\n  nameWithType: WebPermission.IsUnrestricted()\n  fullName: System.Net.WebPermission.IsUnrestricted()\n- uid: System.Net.WebPermission.ToXml\n  parent: System.Net.WebPermission\n  isExternal: false\n  name: ToXml()\n  nameWithType: WebPermission.ToXml()\n  fullName: System.Net.WebPermission.ToXml()\n- uid: System.Net.WebPermission.Union(System.Security.IPermission)\n  parent: System.Net.WebPermission\n  isExternal: false\n  name: Union(IPermission)\n  nameWithType: WebPermission.Union(IPermission)\n  fullName: System.Net.WebPermission.Union(IPermission)\n- uid: System.Net.WebPermission.#ctor*\n  parent: System.Net.WebPermission\n  isExternal: false\n  name: WebPermission\n  nameWithType: WebPermission.WebPermission\n- uid: System.Net.WebPermission.AcceptList*\n  parent: System.Net.WebPermission\n  isExternal: false\n  name: AcceptList\n  nameWithType: WebPermission.AcceptList\n- uid: System.Net.WebPermission.AddPermission*\n  parent: System.Net.WebPermission\n  isExternal: false\n  name: AddPermission\n  nameWithType: WebPermission.AddPermission\n- uid: System.Net.WebPermission.ConnectList*\n  parent: System.Net.WebPermission\n  isExternal: false\n  name: ConnectList\n  nameWithType: WebPermission.ConnectList\n- uid: System.Net.WebPermission.Copy*\n  parent: System.Net.WebPermission\n  isExternal: false\n  name: Copy\n  nameWithType: WebPermission.Copy\n- uid: System.Net.WebPermission.FromXml*\n  parent: System.Net.WebPermission\n  isExternal: false\n  name: FromXml\n  nameWithType: WebPermission.FromXml\n- uid: System.Net.WebPermission.Intersect*\n  parent: System.Net.WebPermission\n  isExternal: false\n  name: Intersect\n  nameWithType: WebPermission.Intersect\n- uid: System.Net.WebPermission.IsSubsetOf*\n  parent: System.Net.WebPermission\n  isExternal: false\n  name: IsSubsetOf\n  nameWithType: WebPermission.IsSubsetOf\n- uid: System.Net.WebPermission.IsUnrestricted*\n  parent: System.Net.WebPermission\n  isExternal: false\n  name: IsUnrestricted\n  nameWithType: WebPermission.IsUnrestricted\n- uid: System.Net.WebPermission.ToXml*\n  parent: System.Net.WebPermission\n  isExternal: false\n  name: ToXml\n  nameWithType: WebPermission.ToXml\n- uid: System.Net.WebPermission.Union*\n  parent: System.Net.WebPermission\n  isExternal: false\n  name: Union\n  nameWithType: WebPermission.Union\n"}