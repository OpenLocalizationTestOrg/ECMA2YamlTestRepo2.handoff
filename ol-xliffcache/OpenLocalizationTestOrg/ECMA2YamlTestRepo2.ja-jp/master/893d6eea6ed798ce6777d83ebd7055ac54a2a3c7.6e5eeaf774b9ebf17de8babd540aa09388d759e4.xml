{"nodes":[{"pos":[763,825],"content":"Represents the collection of properties at a particular scope.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the collection of properties at a particular scope.","pos":[0,62]}]},{"pos":[838,1777],"content":"Through thread local storage (TLS), the CLR maintains an execution context for each thread. This execution context governs well-known thread properties such as the thread identity, the ambient transaction, and the current permission set as well as user-defined thread properties like named slots.       Unlike programs directly targeting the CLR, workflow programs are hierarchically-scoped trees that execute in a thread-agnostic environment. This implies that the standard TLS mechanisms cannot directly be used to determine what context is in scope for a given work item. For example, two parallel branches of execution might use different identities yet the scheduler might interleave their execution on the same CLR thread.       Execution properties allow an activity to declare which properties are in scope for its sub-tree as well as provide hooks for setting up and tearing down TLS to properly interoperate with CLR objects.","needQuote":false,"needEscape":true,"nodes":[{"content":"Through thread local storage (TLS), the CLR maintains an execution context for each thread. This execution context governs well-known thread properties such as the thread identity, the ambient transaction, and the current permission set as well as user-defined thread properties like named slots.       Unlike programs directly targeting the CLR, workflow programs are hierarchically-scoped trees that execute in a thread-agnostic environment. This implies that the standard TLS mechanisms cannot directly be used to determine what context is in scope for a given work item. For example, two parallel branches of execution might use different identities yet the scheduler might interleave their execution on the same CLR thread.       Execution properties allow an activity to declare which properties are in scope for its sub-tree as well as provide hooks for setting up and tearing down TLS to properly interoperate with CLR objects.","pos":[0,935],"nodes":[{"content":"Through thread local storage (TLS), the CLR maintains an execution context for each thread.","pos":[0,91]},{"content":"This execution context governs well-known thread properties such as the thread identity, the ambient transaction, and the current permission set as well as user-defined thread properties like named slots.","pos":[92,296]},{"content":"Unlike programs directly targeting the CLR, workflow programs are hierarchically-scoped trees that execute in a thread-agnostic environment.","pos":[303,443]},{"content":"This implies that the standard TLS mechanisms cannot directly be used to determine what context is in scope for a given work item.","pos":[444,574]},{"content":"For example, two parallel branches of execution might use different identities yet the scheduler might interleave their execution on the same CLR thread.","pos":[575,728]},{"content":"Execution properties allow an activity to declare which properties are in scope for its sub-tree as well as provide hooks for setting up and tearing down TLS to properly interoperate with CLR objects.","pos":[735,935]}]}]},{"pos":[2576,2626],"content":"Registers a new property using the specified name.","needQuote":true,"needEscape":true,"nodes":[{"content":"Registers a new property using the specified name.","pos":[0,50]}]},{"pos":[2774,2799],"content":"The name of the property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the property.","pos":[0,25]}]},{"pos":[2864,2904],"content":"The object that represents the property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object that represents the property.","pos":[0,40]}]},{"pos":[3483,3550],"content":"Registers a property using the specified name and child visibility.","needQuote":true,"needEscape":true,"nodes":[{"content":"Registers a property using the specified name and child visibility.","pos":[0,67]}]},{"pos":[3732,3757],"content":"The name of the property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the property.","pos":[0,25]}]},{"pos":[3822,3862],"content":"The object that represents the property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object that represents the property.","pos":[0,40]}]},{"pos":[3947,4043],"content":"A value that determines whether this property is visible to the children of the owning activity.","needQuote":true,"needEscape":true,"nodes":[{"content":"A value that determines whether this property is visible to the children of the owning activity.","pos":[0,96]}]},{"pos":[4524,4571],"content":"Returns the nearest property of the given name.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the nearest property of the given name.","pos":[0,47]}]},{"pos":[4583,4742],"content":"Find finds the nearest visible property using hierarchical scoping. If two properties have the same name, the closest property at the parent scope is returned.","needQuote":true,"needEscape":true,"nodes":[{"content":"Find finds the nearest visible property using hierarchical scoping. If two properties have the same name, the closest property at the parent scope is returned.","pos":[0,159],"nodes":[{"content":"Find finds the nearest visible property using hierarchical scoping.","pos":[0,67]},{"content":"If two properties have the same name, the closest property at the parent scope is returned.","pos":[68,159]}]}]},{"pos":[4876,4901],"content":"The name of the property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the property.","pos":[0,25]}]},{"pos":[4959,4998],"content":"The nearest property of the given name.","needQuote":true,"needEscape":true,"nodes":[{"content":"The nearest property of the given name.","pos":[0,39]}]},{"pos":[5477,5550],"content":"Returns an enumerator that iterates through the collection of properties.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an enumerator that iterates through the collection of properties.","pos":[0,73]}]},{"pos":[5865,5930],"content":"An enumerator that iterates through the collection of properties.","needQuote":true,"needEscape":true,"nodes":[{"content":"An enumerator that iterates through the collection of properties.","pos":[0,65]}]},{"pos":[6384,6473],"content":"Gets a value that indicates whether there are properties registered at the current scope.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that indicates whether there are properties registered at the current scope.","pos":[0,89]}]},{"pos":[6584,6755],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if there are properties registered; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if there are properties registered; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[7250,7299],"content":"Unregisters the property with the specified name.","needQuote":true,"needEscape":true,"nodes":[{"content":"Unregisters the property with the specified name.","pos":[0,49]}]},{"pos":[7311,7461],"content":"Properties are automatically unregistered when the activity completes. This method can be used to unregister a property before the activity completes.","needQuote":true,"needEscape":true,"nodes":[{"content":"Properties are automatically unregistered when the activity completes. This method can be used to unregister a property before the activity completes.","pos":[0,150],"nodes":[{"content":"Properties are automatically unregistered when the activity completes.","pos":[0,70]},{"content":"This method can be used to unregister a property before the activity completes.","pos":[71,150]}]}]},{"pos":[7595,7634],"content":"The name of the property to unregister.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the property to unregister.","pos":[0,39]}]},{"pos":[7693,7862],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the property was unregistered; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the property was unregistered; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[8512,8585],"content":"Returns an enumerator that iterates through the collection of properties.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an enumerator that iterates through the collection of properties.","pos":[0,73]}]},{"pos":[8763,8828],"content":"An enumerator that iterates through the collection of properties.","needQuote":true,"needEscape":true,"nodes":[{"content":"An enumerator that iterates through the collection of properties.","pos":[0,65]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Activities.ExecutionProperties\n  id: ExecutionProperties\n  children:\n  - System.Activities.ExecutionProperties.Add(System.String,System.Object)\n  - System.Activities.ExecutionProperties.Add(System.String,System.Object,System.Boolean)\n  - System.Activities.ExecutionProperties.Find(System.String)\n  - System.Activities.ExecutionProperties.GetEnumerator\n  - System.Activities.ExecutionProperties.IsEmpty\n  - System.Activities.ExecutionProperties.Remove(System.String)\n  - System.Activities.ExecutionProperties.System#Collections#IEnumerable#GetEnumerator\n  langs:\n  - csharp\n  name: ExecutionProperties\n  nameWithType: ExecutionProperties\n  fullName: System.Activities.ExecutionProperties\n  type: Class\n  summary: Represents the collection of properties at a particular scope.\n  remarks: \"Through thread local storage (TLS), the CLR maintains an execution context for each thread. This execution context governs well-known thread properties such as the thread identity, the ambient transaction, and the current permission set as well as user-defined thread properties like named slots.  \\n  \\n Unlike programs directly targeting the CLR, workflow programs are hierarchically-scoped trees that execute in a thread-agnostic environment. This implies that the standard TLS mechanisms cannot directly be used to determine what context is in scope for a given work item. For example, two parallel branches of execution might use different identities yet the scheduler might interleave their execution on the same CLR thread.  \\n  \\n Execution properties allow an activity to declare which properties are in scope for its sub-tree as well as provide hooks for setting up and tearing down TLS to properly interoperate with CLR objects.\"\n  syntax:\n    content: 'public sealed class ExecutionProperties : System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string,object>>'\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Activities.ExecutionProperties.Add(System.String,System.Object)\n  id: Add(System.String,System.Object)\n  parent: System.Activities.ExecutionProperties\n  langs:\n  - csharp\n  name: Add(String,Object)\n  nameWithType: ExecutionProperties.Add(String,Object)\n  fullName: System.Activities.ExecutionProperties.Add(String,Object)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Registers a new property using the specified name.\n  syntax:\n    content: public void Add (string name, object property);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the property.\n    - id: property\n      type: System.Object\n      description: The object that represents the property.\n  overload: System.Activities.ExecutionProperties.Add*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.ExecutionProperties.Add(System.String,System.Object,System.Boolean)\n  id: Add(System.String,System.Object,System.Boolean)\n  parent: System.Activities.ExecutionProperties\n  langs:\n  - csharp\n  name: Add(String,Object,Boolean)\n  nameWithType: ExecutionProperties.Add(String,Object,Boolean)\n  fullName: System.Activities.ExecutionProperties.Add(String,Object,Boolean)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Registers a property using the specified name and child visibility.\n  syntax:\n    content: public void Add (string name, object property, bool onlyVisibleToPublicChildren);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the property.\n    - id: property\n      type: System.Object\n      description: The object that represents the property.\n    - id: onlyVisibleToPublicChildren\n      type: System.Boolean\n      description: A value that determines whether this property is visible to the children of the owning activity.\n  overload: System.Activities.ExecutionProperties.Add*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.ExecutionProperties.Find(System.String)\n  id: Find(System.String)\n  parent: System.Activities.ExecutionProperties\n  langs:\n  - csharp\n  name: Find(String)\n  nameWithType: ExecutionProperties.Find(String)\n  fullName: System.Activities.ExecutionProperties.Find(String)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Returns the nearest property of the given name.\n  remarks: Find finds the nearest visible property using hierarchical scoping. If two properties have the same name, the closest property at the parent scope is returned.\n  syntax:\n    content: public object Find (string name);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the property.\n    return:\n      type: System.Object\n      description: The nearest property of the given name.\n  overload: System.Activities.ExecutionProperties.Find*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.ExecutionProperties.GetEnumerator\n  id: GetEnumerator\n  parent: System.Activities.ExecutionProperties\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: ExecutionProperties.GetEnumerator()\n  fullName: System.Activities.ExecutionProperties.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Returns an enumerator that iterates through the collection of properties.\n  syntax:\n    content: public System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<string,object>> GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.String,System.Object}}\n      description: An enumerator that iterates through the collection of properties.\n  overload: System.Activities.ExecutionProperties.GetEnumerator*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.ExecutionProperties.IsEmpty\n  id: IsEmpty\n  parent: System.Activities.ExecutionProperties\n  langs:\n  - csharp\n  name: IsEmpty\n  nameWithType: ExecutionProperties.IsEmpty\n  fullName: System.Activities.ExecutionProperties.IsEmpty\n  type: Property\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Gets a value that indicates whether there are properties registered at the current scope.\n  syntax:\n    content: public bool IsEmpty { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if there are properties registered; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Activities.ExecutionProperties.IsEmpty*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.ExecutionProperties.Remove(System.String)\n  id: Remove(System.String)\n  parent: System.Activities.ExecutionProperties\n  langs:\n  - csharp\n  name: Remove(String)\n  nameWithType: ExecutionProperties.Remove(String)\n  fullName: System.Activities.ExecutionProperties.Remove(String)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Unregisters the property with the specified name.\n  remarks: Properties are automatically unregistered when the activity completes. This method can be used to unregister a property before the activity completes.\n  syntax:\n    content: public bool Remove (string name);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the property to unregister.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the property was unregistered; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Activities.ExecutionProperties.Remove*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Activities.ExecutionProperties.System#Collections#IEnumerable#GetEnumerator\n  id: System#Collections#IEnumerable#GetEnumerator\n  isEii: true\n  parent: System.Activities.ExecutionProperties\n  langs:\n  - csharp\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: ExecutionProperties.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.Activities.ExecutionProperties.System.Collections.IEnumerable.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Returns an enumerator that iterates through the collection of properties.\n  syntax:\n    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: An enumerator that iterates through the collection of properties.\n  overload: System.Activities.ExecutionProperties.System#Collections#IEnumerable#GetEnumerator*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Activities.ExecutionProperties.Add(System.String,System.Object)\n  parent: System.Activities.ExecutionProperties\n  isExternal: false\n  name: Add(String,Object)\n  nameWithType: ExecutionProperties.Add(String,Object)\n  fullName: System.Activities.ExecutionProperties.Add(String,Object)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Activities.ExecutionProperties.Add(System.String,System.Object,System.Boolean)\n  parent: System.Activities.ExecutionProperties\n  isExternal: false\n  name: Add(String,Object,Boolean)\n  nameWithType: ExecutionProperties.Add(String,Object,Boolean)\n  fullName: System.Activities.ExecutionProperties.Add(String,Object,Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Activities.ExecutionProperties.Find(System.String)\n  parent: System.Activities.ExecutionProperties\n  isExternal: false\n  name: Find(String)\n  nameWithType: ExecutionProperties.Find(String)\n  fullName: System.Activities.ExecutionProperties.Find(String)\n- uid: System.Activities.ExecutionProperties.GetEnumerator\n  parent: System.Activities.ExecutionProperties\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: ExecutionProperties.GetEnumerator()\n  fullName: System.Activities.ExecutionProperties.GetEnumerator()\n- uid: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.String,System.Object}}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IEnumerator<KeyValuePair<String,Object>>\n  nameWithType: IEnumerator<KeyValuePair<String,Object>>\n  fullName: System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<System.String,System.Object>>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerator`1\n    name: IEnumerator\n    nameWithType: IEnumerator\n    fullName: IEnumerator<System.Collections.Generic.KeyValuePair<System.String,System.Object>>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Collections.Generic.KeyValuePair`2\n    name: KeyValuePair\n    nameWithType: KeyValuePair\n    fullName: KeyValuePair<System.String,System.Object>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: String\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: Object\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Activities.ExecutionProperties.IsEmpty\n  parent: System.Activities.ExecutionProperties\n  isExternal: false\n  name: IsEmpty\n  nameWithType: ExecutionProperties.IsEmpty\n  fullName: System.Activities.ExecutionProperties.IsEmpty\n- uid: System.Activities.ExecutionProperties.Remove(System.String)\n  parent: System.Activities.ExecutionProperties\n  isExternal: false\n  name: Remove(String)\n  nameWithType: ExecutionProperties.Remove(String)\n  fullName: System.Activities.ExecutionProperties.Remove(String)\n- uid: System.Activities.ExecutionProperties.System#Collections#IEnumerable#GetEnumerator\n  parent: System.Activities.ExecutionProperties\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: ExecutionProperties.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.Activities.ExecutionProperties.System.Collections.IEnumerable.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: true\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.Activities.ExecutionProperties.Add*\n  parent: System.Activities.ExecutionProperties\n  isExternal: false\n  name: Add\n  nameWithType: ExecutionProperties.Add\n- uid: System.Activities.ExecutionProperties.Find*\n  parent: System.Activities.ExecutionProperties\n  isExternal: false\n  name: Find\n  nameWithType: ExecutionProperties.Find\n- uid: System.Activities.ExecutionProperties.GetEnumerator*\n  parent: System.Activities.ExecutionProperties\n  isExternal: false\n  name: GetEnumerator\n  nameWithType: ExecutionProperties.GetEnumerator\n- uid: System.Activities.ExecutionProperties.IsEmpty*\n  parent: System.Activities.ExecutionProperties\n  isExternal: false\n  name: IsEmpty\n  nameWithType: ExecutionProperties.IsEmpty\n- uid: System.Activities.ExecutionProperties.Remove*\n  parent: System.Activities.ExecutionProperties\n  isExternal: false\n  name: Remove\n  nameWithType: ExecutionProperties.Remove\n- uid: System.Activities.ExecutionProperties.System#Collections#IEnumerable#GetEnumerator*\n  parent: System.Activities.ExecutionProperties\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator\n  nameWithType: ExecutionProperties.System.Collections.IEnumerable.GetEnumerator\n"}