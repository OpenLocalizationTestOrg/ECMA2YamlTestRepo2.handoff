{"nodes":[{"pos":[1687,1895],"content":"Provides an abstract base class that Elliptic Curve Diffie-Hellman (ECDH) algorithm implementations can derive from. This class provides the basic set of operations that all ECDH implementations must support.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides an abstract base class that Elliptic Curve Diffie-Hellman (ECDH) algorithm implementations can derive from. This class provides the basic set of operations that all ECDH implementations must support.","pos":[0,208],"nodes":[{"content":"Provides an abstract base class that Elliptic Curve Diffie-Hellman (ECDH) algorithm implementations can derive from.","pos":[0,116]},{"content":"This class provides the basic set of operations that all ECDH implementations must support.","pos":[117,208]}]}]},{"pos":[1907,1977],"content":"This class serves as the abstract base class for ECDH implementations.","needQuote":true,"needEscape":true,"nodes":[{"content":"This class serves as the abstract base class for ECDH implementations.","pos":[0,70]}]},{"pos":[3265,3371],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.ECDiffieHellman\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.ECDiffieHellman\"></xref> class."},{"pos":[3383,3875],"content":"This constructor is called by classes that derive from the <xref:System.Security.Cryptography.ECDiffieHellman> class. The <xref:System.Security.Cryptography.ECDiffieHellmanCng> class is the only implementation that is currently included in the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]. For information about how to create a new implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm, see the <xref:System.Security.Cryptography.ECDiffieHellman.Create%2A> method.","needQuote":true,"needEscape":true,"nodes":[{"content":"This constructor is called by classes that derive from the &lt;xref:System.Security.Cryptography.ECDiffieHellman&gt; class.","pos":[0,117],"source":"This constructor is called by classes that derive from the <xref:System.Security.Cryptography.ECDiffieHellman> class."},{"content":"The &lt;xref:System.Security.Cryptography.ECDiffieHellmanCng&gt; class is the only implementation that is currently included in the <ph id=\"ph1\">[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]</ph>.","pos":[118,302],"source":" The <xref:System.Security.Cryptography.ECDiffieHellmanCng> class is the only implementation that is currently included in the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]."},{"content":"For information about how to create a new implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm, see the &lt;xref:System.Security.Cryptography.ECDiffieHellman.Create%2A&gt; method.","pos":[303,492],"source":" For information about how to create a new implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm, see the <xref:System.Security.Cryptography.ECDiffieHellman.Create%2A> method."}]},{"pos":[4421,4528],"content":"Creates a new instance of the default implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a new instance of the default implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm.","pos":[0,107]}]},{"pos":[4729,4788],"content":"A new instance of the default implementation of this class.","needQuote":true,"needEscape":true,"nodes":[{"content":"A new instance of the default implementation of this class.","pos":[0,59]}]},{"pos":[5311,5420],"content":"Creates a new instance of the specified implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a new instance of the specified implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm.","pos":[0,109]}]},{"pos":[5433,6315],"content":"If you develop your own implementation of an <xref:System.Security.Cryptography.ECDiffieHellman> object, you can use the Create method overload to create a custom `algorithm` string that specifies your implementation.       The `algorithm` parameter specifies the name of an implementation of the ECDH algorithm. The following strings all refer to the same implementation, which is the only implementation currently supported in the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]:      -   \"ECDH\"      -   \"ECDiffieHellman\"      -   \"ECDiffieHellmanCng\"      -   \"System.Security.Cryptography.ECDiffieHellmanCng\"       You can also provide the name of a custom ECDH implementation for the `algorithm` parameter. If you do that, the <xref:System.Security.Cryptography.CryptoConfig> object will use it to determine whether an ECDH object can be created.","needQuote":false,"needEscape":true,"nodes":[{"content":"If you develop your own implementation of an &lt;xref:System.Security.Cryptography.ECDiffieHellman&gt; object, you can use the Create method overload to create a custom <ph id=\"ph1\">`algorithm`</ph> string that specifies your implementation.","pos":[0,217],"source":"If you develop your own implementation of an <xref:System.Security.Cryptography.ECDiffieHellman> object, you can use the Create method overload to create a custom `algorithm` string that specifies your implementation."},{"content":"The <ph id=\"ph1\">`algorithm`</ph> parameter specifies the name of an implementation of the ECDH algorithm.","pos":[224,312],"source":"       The `algorithm` parameter specifies the name of an implementation of the ECDH algorithm."},{"content":"The following strings all refer to the same implementation, which is the only implementation currently supported in the <ph id=\"ph1\">[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]</ph>:      -   \"ECDH\"      -   \"ECDiffieHellman\"      -   \"ECDiffieHellmanCng\"      -   \"System.Security.Cryptography.ECDiffieHellmanCng\"       You can also provide the name of a custom ECDH implementation for the <ph id=\"ph2\">`algorithm`</ph> parameter.","pos":[313,722],"source":" The following strings all refer to the same implementation, which is the only implementation currently supported in the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]:      -   \"ECDH\"      -   \"ECDiffieHellman\"      -   \"ECDiffieHellmanCng\"      -   \"System.Security.Cryptography.ECDiffieHellmanCng\"       You can also provide the name of a custom ECDH implementation for the `algorithm` parameter."},{"content":"If you do that, the &lt;xref:System.Security.Cryptography.CryptoConfig&gt; object will use it to determine whether an ECDH object can be created.","pos":[723,862],"source":" If you do that, the <xref:System.Security.Cryptography.CryptoConfig> object will use it to determine whether an ECDH object can be created."}]},{"pos":[6507,6559],"content":"The name of an implementation of the ECDH algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of an implementation of the ECDH algorithm.","pos":[0,52]}]},{"pos":[6648,6863],"content":"A new instance of the specified implementation of this class. If the specified algorithm name does not map to an ECDH implementation, this method returns <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"A new instance of the specified implementation of this class.","pos":[0,61]},{"content":"If the specified algorithm name does not map to an ECDH implementation, this method returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[62,215],"source":" If the specified algorithm name does not map to an ECDH implementation, this method returns <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[7045,7146],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">algorithm</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>algorithm</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[7924,8046],"content":"Derives bytes that can be used as a key using a hash function, given another party's public key and hash algorithm's name.","needQuote":true,"needEscape":true,"nodes":[{"content":"Derives bytes that can be used as a key using a hash function, given another party's public key and hash algorithm's name.","pos":[0,122]}]},{"pos":[8058,8210],"content":"This overload calls the &lt;xref:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash%2A&gt; method passing <ph id=\"ph1\">`null`</ph> as the prepend and append values.","needQuote":true,"needEscape":true,"source":"This overload calls the <xref:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash%2A> method passing `null` as the prepend and append values."},{"pos":[8536,8565],"content":"The other party's public key.","needQuote":true,"needEscape":true,"nodes":[{"content":"The other party's public key.","pos":[0,29]}]},{"pos":[8668,8722],"content":"The hash algorithm  to use to derive the key material.","needQuote":true,"needEscape":true,"nodes":[{"content":"The hash algorithm  to use to derive the key material.","pos":[0,54]}]},{"pos":[8780,8853],"content":"The key material from the key exchange with the other party’s public key.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key material from the key exchange with the other party’s public key.","pos":[0,73]}]},{"pos":[9822,10015],"content":"When implemented in a derived class, derives bytes that can be used as a key using a hash function, given another party's public key, hash algorithm's name, a prepend value and an append value.","needQuote":true,"needEscape":true,"nodes":[{"content":"When implemented in a derived class, derives bytes that can be used as a key using a hash function, given another party's public key, hash algorithm's name, a prepend value and an append value.","pos":[0,193]}]},{"pos":[10392,10421],"content":"The other party's public key.","needQuote":true,"needEscape":true,"nodes":[{"content":"The other party's public key.","pos":[0,29]}]},{"pos":[10524,10578],"content":"The hash algorithm  to use to derive the key material.","needQuote":true,"needEscape":true,"nodes":[{"content":"The hash algorithm  to use to derive the key material.","pos":[0,54]}]},{"pos":[10648,10704],"content":"A value to prepend to the derived secret before hashing.","needQuote":true,"needEscape":true,"nodes":[{"content":"A value to prepend to the derived secret before hashing.","pos":[0,56]}]},{"pos":[10773,10828],"content":"A value to append to the derived secret before hashing.","needQuote":true,"needEscape":true,"nodes":[{"content":"A value to append to the derived secret before hashing.","pos":[0,55]}]},{"pos":[10886,10959],"content":"The key material from the key exchange with the other party’s public key.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key material from the key exchange with the other party’s public key.","pos":[0,73]}]},{"pos":[11156,11198],"content":"A derived class must override this method.","needQuote":true,"needEscape":true,"nodes":[{"content":"A derived class must override this method.","pos":[0,42]}]},{"pos":[12025,12119],"content":"Derives bytes that can be used as a key using a Hash-based Message Authentication Code (HMAC).","needQuote":true,"needEscape":true,"nodes":[{"content":"Derives bytes that can be used as a key using a Hash-based Message Authentication Code (HMAC).","pos":[0,94]}]},{"pos":[12131,12283],"content":"This overload calls the &lt;xref:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac%2A&gt; method passing <ph id=\"ph1\">`null`</ph> as the prepend and append values.","needQuote":true,"needEscape":true,"source":"This overload calls the <xref:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac%2A> method passing `null` as the prepend and append values."},{"pos":[12625,12654],"content":"The other party's public key.","needQuote":true,"needEscape":true,"nodes":[{"content":"The other party's public key.","pos":[0,29]}]},{"pos":[12757,12810],"content":"The hash algorithm to use to derive the key material.","needQuote":true,"needEscape":true,"nodes":[{"content":"The hash algorithm to use to derive the key material.","pos":[0,53]}]},{"pos":[12874,12895],"content":"The key for the HMAC.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key for the HMAC.","pos":[0,21]}]},{"pos":[12953,13026],"content":"The key material from the key exchange with the other party’s public key.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key material from the key exchange with the other party’s public key.","pos":[0,73]}]},{"pos":[14044,14175],"content":"When implemented in a derived class, derives bytes that can be used as a key using a Hash-based Message Authentication Code (HMAC).","needQuote":true,"needEscape":true,"nodes":[{"content":"When implemented in a derived class, derives bytes that can be used as a key using a Hash-based Message Authentication Code (HMAC).","pos":[0,131]}]},{"pos":[14568,14597],"content":"The other party's public key.","needQuote":true,"needEscape":true,"nodes":[{"content":"The other party's public key.","pos":[0,29]}]},{"pos":[14700,14753],"content":"The hash algorithm to use to derive the key material.","needQuote":true,"needEscape":true,"nodes":[{"content":"The hash algorithm to use to derive the key material.","pos":[0,53]}]},{"pos":[14817,14838],"content":"The key for the HMAC.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key for the HMAC.","pos":[0,21]}]},{"pos":[14908,14964],"content":"A value to prepend to the derived secret before hashing.","needQuote":true,"needEscape":true,"nodes":[{"content":"A value to prepend to the derived secret before hashing.","pos":[0,56]}]},{"pos":[15033,15088],"content":"A value to append to the derived secret before hashing.","needQuote":true,"needEscape":true,"nodes":[{"content":"A value to append to the derived secret before hashing.","pos":[0,55]}]},{"pos":[15146,15219],"content":"The key material from the key exchange with the other party’s public key.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key material from the key exchange with the other party’s public key.","pos":[0,73]}]},{"pos":[15416,15458],"content":"A derived class must override this method.","needQuote":true,"needEscape":true,"nodes":[{"content":"A derived class must override this method.","pos":[0,42]}]},{"pos":[16088,16162],"content":"Derives bytes that can be used as a key, given another party's public key.","needQuote":true,"needEscape":true,"nodes":[{"content":"Derives bytes that can be used as a key, given another party's public key.","pos":[0,74]}]},{"pos":[16174,16289],"content":"For more information about public keys, see the <xref:System.Security.Cryptography.ECDiffieHellmanPublicKey> class.","needQuote":true,"needEscape":true,"nodes":[{"content":"For more information about public keys, see the &lt;xref:System.Security.Cryptography.ECDiffieHellmanPublicKey&gt; class.","pos":[0,115],"source":"For more information about public keys, see the <xref:System.Security.Cryptography.ECDiffieHellmanPublicKey> class."}]},{"pos":[16561,16590],"content":"The other party's public key.","needQuote":true,"needEscape":true,"nodes":[{"content":"The other party's public key.","pos":[0,29]}]},{"pos":[16648,16721],"content":"The key material from the key exchange with the other party’s public key.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key material from the key exchange with the other party’s public key.","pos":[0,73]}]},{"pos":[17517,17683],"content":"When implemented in a derived class, derives bytes that can be used as a key using a Transport Layer Security (TLS) Pseudo-Random Function (PRF) derivation algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"When implemented in a derived class, derives bytes that can be used as a key using a Transport Layer Security (TLS) Pseudo-Random Function (PRF) derivation algorithm.","pos":[0,166]}]},{"pos":[17983,18012],"content":"The other party's public key.","needQuote":true,"needEscape":true,"nodes":[{"content":"The other party's public key.","pos":[0,29]}]},{"pos":[18077,18105],"content":"The ASCII-encoded PRF label.","needQuote":true,"needEscape":true,"nodes":[{"content":"The ASCII-encoded PRF label.","pos":[0,28]}]},{"pos":[18169,18190],"content":"The 64-byte PRF seed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The 64-byte PRF seed.","pos":[0,21]}]},{"pos":[18248,18321],"content":"The key material from the key exchange with the other party’s public key.","needQuote":true,"needEscape":true,"nodes":[{"content":"The key material from the key exchange with the other party’s public key.","pos":[0,73]}]},{"pos":[18513,18555],"content":"A derived class must override this method.","needQuote":true,"needEscape":true,"nodes":[{"content":"A derived class must override this method.","pos":[0,42]}]},{"pos":[19014,19058],"content":"Gets the name of the key exchange algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the name of the key exchange algorithm.","pos":[0,44]}]},{"pos":[19071,19283],"content":"The default (non-overridden) implementation of this property returns the string \"ECDiffieHellman\".       This property is inherited from the <xref:System.Security.Cryptography.AsymmetricAlgorithm> base class.","needQuote":false,"needEscape":true,"nodes":[{"content":"The default (non-overridden) implementation of this property returns the string \"ECDiffieHellman\".       This property is inherited from the <xref:System.Security.Cryptography.AsymmetricAlgorithm> base class.","pos":[0,208],"nodes":[{"content":"The default (non-overridden) implementation of this property returns the string \"ECDiffieHellman\".","pos":[0,98]},{"content":"This property is inherited from the &lt;xref:System.Security.Cryptography.AsymmetricAlgorithm&gt; base class.","pos":[105,208],"source":"       This property is inherited from the <xref:System.Security.Cryptography.AsymmetricAlgorithm> base class."}]}]},{"pos":[19418,19457],"content":"The name of the key exchange algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the key exchange algorithm.","pos":[0,39]}]},{"pos":[19957,20057],"content":"Gets the public key that is being used by the current Elliptic Curve Diffie-Hellman (ECDH) instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the public key that is being used by the current Elliptic Curve Diffie-Hellman (ECDH) instance.","pos":[0,100]}]},{"pos":[20267,20406],"content":"The public part of the ECDH key pair that is being used by this <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.ECDiffieHellman\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance.","needQuote":true,"needEscape":true,"source":"The public part of the ECDH key pair that is being used by this <xref href=\"System.Security.Cryptography.ECDiffieHellman\"></xref> instance."},{"pos":[20940,20981],"content":"Gets the name of the signature algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the name of the signature algorithm.","pos":[0,41]}]},{"pos":[20994,21259],"content":"This property is inherited from the <xref:System.Security.Cryptography.AsymmetricAlgorithm> base class.       The Elliptic Curve Diffie-Hellman (ECDH) algorithm is used for key derivation, not digital signature generation. Therefore, this property returns `null`.","needQuote":false,"needEscape":true,"nodes":[{"content":"This property is inherited from the &lt;xref:System.Security.Cryptography.AsymmetricAlgorithm&gt; base class.","pos":[0,103],"source":"This property is inherited from the <xref:System.Security.Cryptography.AsymmetricAlgorithm> base class."},{"content":"The Elliptic Curve Diffie-Hellman (ECDH) algorithm is used for key derivation, not digital signature generation.","pos":[110,222]},{"content":"Therefore, this property returns <ph id=\"ph1\">`null`</ph>.","pos":[223,263],"source":" Therefore, this property returns `null`."}]},{"pos":[21392,21460],"content":"Always <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Always <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.ECDiffieHellman\n  id: ECDiffieHellman\n  children:\n  - System.Security.Cryptography.ECDiffieHellman.#ctor\n  - System.Security.Cryptography.ECDiffieHellman.Create\n  - System.Security.Cryptography.ECDiffieHellman.Create(System.String)\n  - System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])\n  - System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[])\n  - System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])\n  - System.Security.Cryptography.ECDiffieHellman.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)\n  - System.Security.Cryptography.ECDiffieHellman.DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])\n  - System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm\n  - System.Security.Cryptography.ECDiffieHellman.PublicKey\n  - System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm\n  langs:\n  - csharp\n  name: ECDiffieHellman\n  nameWithType: ECDiffieHellman\n  fullName: System.Security.Cryptography.ECDiffieHellman\n  type: Class\n  summary: Provides an abstract base class that Elliptic Curve Diffie-Hellman (ECDH) algorithm implementations can derive from. This class provides the basic set of operations that all ECDH implementations must support.\n  remarks: This class serves as the abstract base class for ECDH implementations.\n  syntax:\n    content: 'public abstract class ECDiffieHellman : System.Security.Cryptography.AsymmetricAlgorithm'\n  inheritance:\n  - System.Object\n  - System.Security.Cryptography.AsymmetricAlgorithm\n  implements: []\n  inheritedMembers:\n  - System.Security.Cryptography.AsymmetricAlgorithm.Clear\n  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)\n  - System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString(System.String)\n  - System.Security.Cryptography.AsymmetricAlgorithm.KeySize\n  - System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue\n  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes\n  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue\n  - System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString(System.Boolean)\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDiffieHellman.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.ECDiffieHellman\n  langs:\n  - csharp\n  name: ECDiffieHellman()\n  nameWithType: ECDiffieHellman.ECDiffieHellman()\n  fullName: System.Security.Cryptography.ECDiffieHellman.ECDiffieHellman()\n  type: Constructor\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.ECDiffieHellman\"></xref> class.\n  remarks: This constructor is called by classes that derive from the <xref:System.Security.Cryptography.ECDiffieHellman> class. The <xref:System.Security.Cryptography.ECDiffieHellmanCng> class is the only implementation that is currently included in the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]. For information about how to create a new implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm, see the <xref:System.Security.Cryptography.ECDiffieHellman.Create%2A> method.\n  syntax:\n    content: protected ECDiffieHellman ();\n    parameters: []\n  overload: System.Security.Cryptography.ECDiffieHellman.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDiffieHellman.Create\n  id: Create\n  parent: System.Security.Cryptography.ECDiffieHellman\n  langs:\n  - csharp\n  name: Create()\n  nameWithType: ECDiffieHellman.Create()\n  fullName: System.Security.Cryptography.ECDiffieHellman.Create()\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Creates a new instance of the default implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm.\n  syntax:\n    content: public static System.Security.Cryptography.ECDiffieHellman Create ();\n    parameters: []\n    return:\n      type: System.Security.Cryptography.ECDiffieHellman\n      description: A new instance of the default implementation of this class.\n  overload: System.Security.Cryptography.ECDiffieHellman.Create*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDiffieHellman.Create(System.String)\n  id: Create(System.String)\n  parent: System.Security.Cryptography.ECDiffieHellman\n  langs:\n  - csharp\n  name: Create(String)\n  nameWithType: ECDiffieHellman.Create(String)\n  fullName: System.Security.Cryptography.ECDiffieHellman.Create(String)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Creates a new instance of the specified implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm.\n  remarks: \"If you develop your own implementation of an <xref:System.Security.Cryptography.ECDiffieHellman> object, you can use the Create method overload to create a custom `algorithm` string that specifies your implementation.  \\n  \\n The `algorithm` parameter specifies the name of an implementation of the ECDH algorithm. The following strings all refer to the same implementation, which is the only implementation currently supported in the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]:  \\n  \\n-   \\\"ECDH\\\"  \\n  \\n-   \\\"ECDiffieHellman\\\"  \\n  \\n-   \\\"ECDiffieHellmanCng\\\"  \\n  \\n-   \\\"System.Security.Cryptography.ECDiffieHellmanCng\\\"  \\n  \\n You can also provide the name of a custom ECDH implementation for the `algorithm` parameter. If you do that, the <xref:System.Security.Cryptography.CryptoConfig> object will use it to determine whether an ECDH object can be created.\"\n  syntax:\n    content: public static System.Security.Cryptography.ECDiffieHellman Create (string algorithm);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: The name of an implementation of the ECDH algorithm.\n    return:\n      type: System.Security.Cryptography.ECDiffieHellman\n      description: A new instance of the specified implementation of this class. If the specified algorithm name does not map to an ECDH implementation, this method returns <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Security.Cryptography.ECDiffieHellman.Create*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>algorithm</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName)\n  id: DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDiffieHellman\n  langs:\n  - csharp\n  name: DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName)\n  nameWithType: ECDiffieHellman.DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName)\n  fullName: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Derives bytes that can be used as a key using a hash function, given another party's public key and hash algorithm's name.\n  remarks: This overload calls the <xref:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash%2A> method passing `null` as the prepend and append values.\n  syntax:\n    content: public byte[] DeriveKeyFromHash (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);\n    parameters:\n    - id: otherPartyPublicKey\n      type: System.Security.Cryptography.ECDiffieHellmanPublicKey\n      description: The other party's public key.\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: The hash algorithm  to use to derive the key material.\n    return:\n      type: System.Byte[]\n      description: The key material from the key exchange with the other party’s public key.\n  overload: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])\n  id: DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.ECDiffieHellman\n  langs:\n  - csharp\n  name: DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[])\n  nameWithType: ECDiffieHellman.DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[])\n  fullName: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: When implemented in a derived class, derives bytes that can be used as a key using a hash function, given another party's public key, hash algorithm's name, a prepend value and an append value.\n  syntax:\n    content: public virtual byte[] DeriveKeyFromHash (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, byte[] secretPrepend, byte[] secretAppend);\n    parameters:\n    - id: otherPartyPublicKey\n      type: System.Security.Cryptography.ECDiffieHellmanPublicKey\n      description: The other party's public key.\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: The hash algorithm  to use to derive the key material.\n    - id: secretPrepend\n      type: System.Byte[]\n      description: A value to prepend to the derived secret before hashing.\n    - id: secretAppend\n      type: System.Byte[]\n      description: A value to append to the derived secret before hashing.\n    return:\n      type: System.Byte[]\n      description: The key material from the key exchange with the other party’s public key.\n  overload: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: A derived class must override this method.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[])\n  id: DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[])\n  parent: System.Security.Cryptography.ECDiffieHellman\n  langs:\n  - csharp\n  name: DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[])\n  nameWithType: ECDiffieHellman.DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[])\n  fullName: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Derives bytes that can be used as a key using a Hash-based Message Authentication Code (HMAC).\n  remarks: This overload calls the <xref:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac%2A> method passing `null` as the prepend and append values.\n  syntax:\n    content: public byte[] DeriveKeyFromHmac (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, byte[] hmacKey);\n    parameters:\n    - id: otherPartyPublicKey\n      type: System.Security.Cryptography.ECDiffieHellmanPublicKey\n      description: The other party's public key.\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: The hash algorithm to use to derive the key material.\n    - id: hmacKey\n      type: System.Byte[]\n      description: The key for the HMAC.\n    return:\n      type: System.Byte[]\n      description: The key material from the key exchange with the other party’s public key.\n  overload: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])\n  id: DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.ECDiffieHellman\n  langs:\n  - csharp\n  name: DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[],Byte[])\n  nameWithType: ECDiffieHellman.DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[],Byte[])\n  fullName: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[],Byte[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: When implemented in a derived class, derives bytes that can be used as a key using a Hash-based Message Authentication Code (HMAC).\n  syntax:\n    content: public virtual byte[] DeriveKeyFromHmac (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, byte[] hmacKey, byte[] secretPrepend, byte[] secretAppend);\n    parameters:\n    - id: otherPartyPublicKey\n      type: System.Security.Cryptography.ECDiffieHellmanPublicKey\n      description: The other party's public key.\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: The hash algorithm to use to derive the key material.\n    - id: hmacKey\n      type: System.Byte[]\n      description: The key for the HMAC.\n    - id: secretPrepend\n      type: System.Byte[]\n      description: A value to prepend to the derived secret before hashing.\n    - id: secretAppend\n      type: System.Byte[]\n      description: A value to append to the derived secret before hashing.\n    return:\n      type: System.Byte[]\n      description: The key material from the key exchange with the other party’s public key.\n  overload: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: A derived class must override this method.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)\n  id: DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)\n  parent: System.Security.Cryptography.ECDiffieHellman\n  langs:\n  - csharp\n  name: DeriveKeyMaterial(ECDiffieHellmanPublicKey)\n  nameWithType: ECDiffieHellman.DeriveKeyMaterial(ECDiffieHellmanPublicKey)\n  fullName: System.Security.Cryptography.ECDiffieHellman.DeriveKeyMaterial(ECDiffieHellmanPublicKey)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Derives bytes that can be used as a key, given another party's public key.\n  remarks: For more information about public keys, see the <xref:System.Security.Cryptography.ECDiffieHellmanPublicKey> class.\n  syntax:\n    content: public virtual byte[] DeriveKeyMaterial (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey);\n    parameters:\n    - id: otherPartyPublicKey\n      type: System.Security.Cryptography.ECDiffieHellmanPublicKey\n      description: The other party's public key.\n    return:\n      type: System.Byte[]\n      description: The key material from the key exchange with the other party’s public key.\n  overload: System.Security.Cryptography.ECDiffieHellman.DeriveKeyMaterial*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])\n  id: DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.ECDiffieHellman\n  langs:\n  - csharp\n  name: DeriveKeyTls(ECDiffieHellmanPublicKey,Byte[],Byte[])\n  nameWithType: ECDiffieHellman.DeriveKeyTls(ECDiffieHellmanPublicKey,Byte[],Byte[])\n  fullName: System.Security.Cryptography.ECDiffieHellman.DeriveKeyTls(ECDiffieHellmanPublicKey,Byte[],Byte[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: When implemented in a derived class, derives bytes that can be used as a key using a Transport Layer Security (TLS) Pseudo-Random Function (PRF) derivation algorithm.\n  syntax:\n    content: public virtual byte[] DeriveKeyTls (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, byte[] prfLabel, byte[] prfSeed);\n    parameters:\n    - id: otherPartyPublicKey\n      type: System.Security.Cryptography.ECDiffieHellmanPublicKey\n      description: The other party's public key.\n    - id: prfLabel\n      type: System.Byte[]\n      description: The ASCII-encoded PRF label.\n    - id: prfSeed\n      type: System.Byte[]\n      description: The 64-byte PRF seed.\n    return:\n      type: System.Byte[]\n      description: The key material from the key exchange with the other party’s public key.\n  overload: System.Security.Cryptography.ECDiffieHellman.DeriveKeyTls*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: A derived class must override this method.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm\n  id: KeyExchangeAlgorithm\n  parent: System.Security.Cryptography.ECDiffieHellman\n  langs:\n  - csharp\n  name: KeyExchangeAlgorithm\n  nameWithType: ECDiffieHellman.KeyExchangeAlgorithm\n  fullName: System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Gets the name of the key exchange algorithm.\n  remarks: \"The default (non-overridden) implementation of this property returns the string \\\"ECDiffieHellman\\\".  \\n  \\n This property is inherited from the <xref:System.Security.Cryptography.AsymmetricAlgorithm> base class.\"\n  syntax:\n    content: public override string KeyExchangeAlgorithm { get; }\n    return:\n      type: System.String\n      description: The name of the key exchange algorithm.\n  overload: System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDiffieHellman.PublicKey\n  id: PublicKey\n  parent: System.Security.Cryptography.ECDiffieHellman\n  langs:\n  - csharp\n  name: PublicKey\n  nameWithType: ECDiffieHellman.PublicKey\n  fullName: System.Security.Cryptography.ECDiffieHellman.PublicKey\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Gets the public key that is being used by the current Elliptic Curve Diffie-Hellman (ECDH) instance.\n  syntax:\n    content: public abstract System.Security.Cryptography.ECDiffieHellmanPublicKey PublicKey { get; }\n    return:\n      type: System.Security.Cryptography.ECDiffieHellmanPublicKey\n      description: The public part of the ECDH key pair that is being used by this <xref href=\"System.Security.Cryptography.ECDiffieHellman\"></xref> instance.\n  overload: System.Security.Cryptography.ECDiffieHellman.PublicKey*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm\n  id: SignatureAlgorithm\n  parent: System.Security.Cryptography.ECDiffieHellman\n  langs:\n  - csharp\n  name: SignatureAlgorithm\n  nameWithType: ECDiffieHellman.SignatureAlgorithm\n  fullName: System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Gets the name of the signature algorithm.\n  remarks: \"This property is inherited from the <xref:System.Security.Cryptography.AsymmetricAlgorithm> base class.  \\n  \\n The Elliptic Curve Diffie-Hellman (ECDH) algorithm is used for key derivation, not digital signature generation. Therefore, this property returns `null`.\"\n  syntax:\n    content: public override string SignatureAlgorithm { get; }\n    return:\n      type: System.String\n      description: Always <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: System.Security.Cryptography.AsymmetricAlgorithm\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.NotImplementedException\n  isExternal: true\n  name: System.NotImplementedException\n- uid: System.Security.Cryptography.ECDiffieHellman.#ctor\n  parent: System.Security.Cryptography.ECDiffieHellman\n  isExternal: false\n  name: ECDiffieHellman()\n  nameWithType: ECDiffieHellman.ECDiffieHellman()\n  fullName: System.Security.Cryptography.ECDiffieHellman.ECDiffieHellman()\n- uid: System.Security.Cryptography.ECDiffieHellman.Create\n  parent: System.Security.Cryptography.ECDiffieHellman\n  isExternal: false\n  name: Create()\n  nameWithType: ECDiffieHellman.Create()\n  fullName: System.Security.Cryptography.ECDiffieHellman.Create()\n- uid: System.Security.Cryptography.ECDiffieHellman\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: ECDiffieHellman\n  nameWithType: ECDiffieHellman\n  fullName: System.Security.Cryptography.ECDiffieHellman\n- uid: System.Security.Cryptography.ECDiffieHellman.Create(System.String)\n  parent: System.Security.Cryptography.ECDiffieHellman\n  isExternal: false\n  name: Create(String)\n  nameWithType: ECDiffieHellman.Create(String)\n  fullName: System.Security.Cryptography.ECDiffieHellman.Create(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDiffieHellman\n  isExternal: false\n  name: DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName)\n  nameWithType: ECDiffieHellman.DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName)\n  fullName: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName)\n- uid: System.Byte[]\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: Byte[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Security.Cryptography.ECDiffieHellmanPublicKey\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: ECDiffieHellmanPublicKey\n  nameWithType: ECDiffieHellmanPublicKey\n  fullName: System.Security.Cryptography.ECDiffieHellmanPublicKey\n- uid: System.Security.Cryptography.HashAlgorithmName\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: HashAlgorithmName\n  nameWithType: HashAlgorithmName\n  fullName: System.Security.Cryptography.HashAlgorithmName\n- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.ECDiffieHellman\n  isExternal: false\n  name: DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[])\n  nameWithType: ECDiffieHellman.DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[])\n  fullName: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[])\n- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[])\n  parent: System.Security.Cryptography.ECDiffieHellman\n  isExternal: false\n  name: DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[])\n  nameWithType: ECDiffieHellman.DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[])\n  fullName: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[])\n- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.ECDiffieHellman\n  isExternal: false\n  name: DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[],Byte[])\n  nameWithType: ECDiffieHellman.DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[],Byte[])\n  fullName: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[],Byte[])\n- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)\n  parent: System.Security.Cryptography.ECDiffieHellman\n  isExternal: false\n  name: DeriveKeyMaterial(ECDiffieHellmanPublicKey)\n  nameWithType: ECDiffieHellman.DeriveKeyMaterial(ECDiffieHellmanPublicKey)\n  fullName: System.Security.Cryptography.ECDiffieHellman.DeriveKeyMaterial(ECDiffieHellmanPublicKey)\n- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.ECDiffieHellman\n  isExternal: false\n  name: DeriveKeyTls(ECDiffieHellmanPublicKey,Byte[],Byte[])\n  nameWithType: ECDiffieHellman.DeriveKeyTls(ECDiffieHellmanPublicKey,Byte[],Byte[])\n  fullName: System.Security.Cryptography.ECDiffieHellman.DeriveKeyTls(ECDiffieHellmanPublicKey,Byte[],Byte[])\n- uid: System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm\n  parent: System.Security.Cryptography.ECDiffieHellman\n  isExternal: false\n  name: KeyExchangeAlgorithm\n  nameWithType: ECDiffieHellman.KeyExchangeAlgorithm\n  fullName: System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm\n- uid: System.Security.Cryptography.ECDiffieHellman.PublicKey\n  parent: System.Security.Cryptography.ECDiffieHellman\n  isExternal: false\n  name: PublicKey\n  nameWithType: ECDiffieHellman.PublicKey\n  fullName: System.Security.Cryptography.ECDiffieHellman.PublicKey\n- uid: System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm\n  parent: System.Security.Cryptography.ECDiffieHellman\n  isExternal: false\n  name: SignatureAlgorithm\n  nameWithType: ECDiffieHellman.SignatureAlgorithm\n  fullName: System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm\n- uid: System.Security.Cryptography.ECDiffieHellman.#ctor*\n  parent: System.Security.Cryptography.ECDiffieHellman\n  isExternal: false\n  name: ECDiffieHellman\n  nameWithType: ECDiffieHellman.ECDiffieHellman\n- uid: System.Security.Cryptography.ECDiffieHellman.Create*\n  parent: System.Security.Cryptography.ECDiffieHellman\n  isExternal: false\n  name: Create\n  nameWithType: ECDiffieHellman.Create\n- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash*\n  parent: System.Security.Cryptography.ECDiffieHellman\n  isExternal: false\n  name: DeriveKeyFromHash\n  nameWithType: ECDiffieHellman.DeriveKeyFromHash\n- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac*\n  parent: System.Security.Cryptography.ECDiffieHellman\n  isExternal: false\n  name: DeriveKeyFromHmac\n  nameWithType: ECDiffieHellman.DeriveKeyFromHmac\n- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyMaterial*\n  parent: System.Security.Cryptography.ECDiffieHellman\n  isExternal: false\n  name: DeriveKeyMaterial\n  nameWithType: ECDiffieHellman.DeriveKeyMaterial\n- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyTls*\n  parent: System.Security.Cryptography.ECDiffieHellman\n  isExternal: false\n  name: DeriveKeyTls\n  nameWithType: ECDiffieHellman.DeriveKeyTls\n- uid: System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm*\n  parent: System.Security.Cryptography.ECDiffieHellman\n  isExternal: false\n  name: KeyExchangeAlgorithm\n  nameWithType: ECDiffieHellman.KeyExchangeAlgorithm\n- uid: System.Security.Cryptography.ECDiffieHellman.PublicKey*\n  parent: System.Security.Cryptography.ECDiffieHellman\n  isExternal: false\n  name: PublicKey\n  nameWithType: ECDiffieHellman.PublicKey\n- uid: System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm*\n  parent: System.Security.Cryptography.ECDiffieHellman\n  isExternal: false\n  name: SignatureAlgorithm\n  nameWithType: ECDiffieHellman.SignatureAlgorithm\n"}