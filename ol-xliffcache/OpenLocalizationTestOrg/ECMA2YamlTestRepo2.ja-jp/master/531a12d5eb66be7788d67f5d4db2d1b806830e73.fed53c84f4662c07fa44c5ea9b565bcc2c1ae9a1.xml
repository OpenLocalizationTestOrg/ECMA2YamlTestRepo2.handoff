{"nodes":[{"pos":[1324,1365],"content":"Represents a runtime handle for a module.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents a runtime handle for a module.","pos":[0,41]}]},{"pos":[1377,1662],"content":"The <xref:System.ModuleHandle.ResolveFieldHandle%2A>, <xref:System.ModuleHandle.ResolveMethodHandle%2A>, and <xref:System.ModuleHandle.ResolveTypeHandle%2A> methods provide efficient resolution of metadata tokens to runtime handles for fields, methods, and types in the current module.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.ModuleHandle.ResolveFieldHandle%2A&gt;, &lt;xref:System.ModuleHandle.ResolveMethodHandle%2A&gt;, and &lt;xref:System.ModuleHandle.ResolveTypeHandle%2A&gt; methods provide efficient resolution of metadata tokens to runtime handles for fields, methods, and types in the current module.","pos":[0,285],"source":"The <xref:System.ModuleHandle.ResolveFieldHandle%2A>, <xref:System.ModuleHandle.ResolveMethodHandle%2A>, and <xref:System.ModuleHandle.ResolveTypeHandle%2A> methods provide efficient resolution of metadata tokens to runtime handles for fields, methods, and types in the current module."}]},{"pos":[2139,2173],"content":"Represents an empty module handle.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents an empty module handle.","pos":[0,34]}]},{"pos":[2309,2321],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[2706,2893],"content":"Returns a &lt;xref:System.Boolean&gt; value indicating whether the specified <bpt id=\"p1\">&lt;xref href=\"System.ModuleHandle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure is equal to the current <bpt id=\"p2\">&lt;xref href=\"System.ModuleHandle\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns a <xref:System.Boolean> value indicating whether the specified <xref href=\"System.ModuleHandle\"></xref> structure is equal to the current <xref href=\"System.ModuleHandle\"></xref>."},{"pos":[3043,3171],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.ModuleHandle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure to be compared with the current <bpt id=\"p2\">&lt;xref href=\"System.ModuleHandle\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.ModuleHandle\"></xref> structure to be compared with the current <xref href=\"System.ModuleHandle\"></xref>."},{"pos":[3230,3463],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">handle</ph><ept id=\"p2\">&lt;/code&gt;</ept> is equal to the current <bpt id=\"p3\">&lt;xref href=\"System.ModuleHandle\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> structure; otherwise <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>handle</code> is equal to the current <xref href=\"System.ModuleHandle\"></xref> structure; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[3858,4059],"content":"Returns a &lt;xref:System.Boolean&gt; value indicating whether the specified object is a <bpt id=\"p1\">&lt;xref href=\"System.ModuleHandle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure, and equal to the current <bpt id=\"p2\">&lt;xref href=\"System.ModuleHandle\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns a <xref:System.Boolean> value indicating whether the specified object is a <xref href=\"System.ModuleHandle\"></xref> structure, and equal to the current <xref href=\"System.ModuleHandle\"></xref>."},{"pos":[4200,4294],"content":"The object to be compared with the current <bpt id=\"p1\">&lt;xref href=\"System.ModuleHandle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure.","needQuote":true,"needEscape":true,"source":"The object to be compared with the current <xref href=\"System.ModuleHandle\"></xref> structure."},{"pos":[4353,4645],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">obj</ph><ept id=\"p2\">&lt;/code&gt;</ept> is a <bpt id=\"p3\">&lt;xref href=\"System.ModuleHandle\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> structure, and is equal to the current <bpt id=\"p4\">&lt;xref href=\"System.ModuleHandle\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept> structure; otherwise, <bpt id=\"p5\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p5\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>obj</code> is a <xref href=\"System.ModuleHandle\"></xref> structure, and is equal to the current <xref href=\"System.ModuleHandle\"></xref> structure; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[5017,5057],"content":"Returns the hash code for this instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the hash code for this instance.","pos":[0,40]}]},{"pos":[5192,5256],"content":"A 32-bit signed integer that is the hash code for this instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"A 32-bit signed integer that is the hash code for this instance.","pos":[0,64]}]},{"pos":[5811,5893],"content":"Returns a runtime handle for the field identified by the specified metadata token.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a runtime handle for the field identified by the specified metadata token.","pos":[0,82]}]},{"pos":[6081,6136],"content":"A metadata token that identifies a field in the module.","needQuote":true,"needEscape":true,"nodes":[{"content":"A metadata token that identifies a field in the module.","pos":[0,55]}]},{"pos":[6206,6293],"content":"A &lt;xref:System.RuntimeFieldHandle&gt; for the field identified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">fieldToken</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref:System.RuntimeFieldHandle> for the field identified by <code>fieldToken</code>."},{"pos":[6880,6985],"content":"Returns a runtime method handle for the method or constructor identified by the specified metadata token.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a runtime method handle for the method or constructor identified by the specified metadata token.","pos":[0,105]}]},{"pos":[7177,7248],"content":"A metadata token that identifies a method or constructor in the module.","needQuote":true,"needEscape":true,"nodes":[{"content":"A metadata token that identifies a method or constructor in the module.","pos":[0,71]}]},{"pos":[7319,7424],"content":"A &lt;xref:System.RuntimeMethodHandle&gt; for the method or constructor identified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">methodToken</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref:System.RuntimeMethodHandle> for the method or constructor identified by <code>methodToken</code>."},{"pos":[8002,8088],"content":"Returns a runtime type handle for the type identified by the specified metadata token.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a runtime type handle for the type identified by the specified metadata token.","pos":[0,86]}]},{"pos":[8272,8326],"content":"A metadata token that identifies a type in the module.","needQuote":true,"needEscape":true,"nodes":[{"content":"A metadata token that identifies a type in the module.","pos":[0,54]}]},{"pos":[8395,8479],"content":"A &lt;xref:System.RuntimeTypeHandle&gt; for the type identified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">typeToken</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref:System.RuntimeTypeHandle> for the type identified by <code>typeToken</code>."},{"pos":[8898,8931],"content":"Gets the metadata stream version.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the metadata stream version.","pos":[0,33]}]},{"pos":[9496,9679],"content":"A 32-bit integer representing the metadata stream version. The high-order two bytes represent the major version number, and the low-order two bytes represent the minor version number.","needQuote":true,"needEscape":true,"nodes":[{"content":"A 32-bit integer representing the metadata stream version. The high-order two bytes represent the major version number, and the low-order two bytes represent the minor version number.","pos":[0,183],"nodes":[{"content":"A 32-bit integer representing the metadata stream version.","pos":[0,58]},{"content":"The high-order two bytes represent the major version number, and the low-order two bytes represent the minor version number.","pos":[59,183]}]}]},{"pos":[10219,10299],"content":"Tests whether two <bpt id=\"p1\">&lt;xref href=\"System.ModuleHandle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures are equal.","needQuote":true,"needEscape":true,"source":"Tests whether two <xref href=\"System.ModuleHandle\"></xref> structures are equal."},{"pos":[10477,10569],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.ModuleHandle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure to the left of the equality operator.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.ModuleHandle\"></xref> structure to the left of the equality operator."},{"pos":[10637,10730],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.ModuleHandle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure to the right of the equality operator.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.ModuleHandle\"></xref> structure to the right of the equality operator."},{"pos":[10789,10994],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the <bpt id=\"p2\">&lt;xref href=\"System.ModuleHandle\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> structures are equal; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.ModuleHandle\"></xref> structures are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[11540,11622],"content":"Tests whether two <bpt id=\"p1\">&lt;xref href=\"System.ModuleHandle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structures are unequal.","needQuote":true,"needEscape":true,"source":"Tests whether two <xref href=\"System.ModuleHandle\"></xref> structures are unequal."},{"pos":[11802,11896],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.ModuleHandle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure to the left of the inequality operator.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.ModuleHandle\"></xref> structure to the left of the inequality operator."},{"pos":[11964,12059],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.ModuleHandle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure to the right of the inequality operator.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.ModuleHandle\"></xref> structure to the right of the inequality operator."},{"pos":[12118,12325],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the <bpt id=\"p2\">&lt;xref href=\"System.ModuleHandle\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> structures are unequal; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.ModuleHandle\"></xref> structures are unequal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[12782,12864],"content":"Returns a runtime handle for the field identified by the specified metadata token.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a runtime handle for the field identified by the specified metadata token.","pos":[0,82]}]},{"pos":[13976,14031],"content":"A metadata token that identifies a field in the module.","needQuote":true,"needEscape":true,"nodes":[{"content":"A metadata token that identifies a field in the module.","pos":[0,55]}]},{"pos":[14101,14188],"content":"A &lt;xref:System.RuntimeFieldHandle&gt; for the field identified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">fieldToken</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref:System.RuntimeFieldHandle> for the field identified by <code>fieldToken</code>."},{"pos":[14362,14887],"content":"<code>metadataToken</code> is not a valid token in the scope of the current module.       -or-       <code>metadataToken</code> is not a token for a field in the scope of the current module.       -or-       <code>metadataToken</code> identifies a field whose parent <xref uid=\"langword_csharp_TypeSpec\" name=\"TypeSpec\" href=\"\"></xref> has a signature containing element type <xref uid=\"langword_csharp_var\" name=\"var\" href=\"\"></xref> or <xref uid=\"langword_csharp_mvar\" name=\"mvar\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;metadataToken&lt;/code&gt;</ph> is not a valid token in the scope of the current module.","pos":[0,83],"source":"<code>metadataToken</code> is not a valid token in the scope of the current module."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;metadataToken&lt;/code&gt;</ph> is not a token for a field in the scope of the current module.","pos":[90,190],"source":"       -or-       <code>metadataToken</code> is not a token for a field in the scope of the current module."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;metadataToken&lt;/code&gt;</ph> identifies a field whose parent <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_TypeSpec\" name=\"TypeSpec\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> has a signature containing element type <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_var\" name=\"var\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> or <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_mvar\" name=\"mvar\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","pos":[197,499],"source":"       -or-       <code>metadataToken</code> identifies a field whose parent <xref uid=\"langword_csharp_TypeSpec\" name=\"TypeSpec\" href=\"\"></xref> has a signature containing element type <xref uid=\"langword_csharp_var\" name=\"var\" href=\"\"></xref> or <xref uid=\"langword_csharp_mvar\" name=\"mvar\" href=\"\"></xref>."}]},{"pos":[14999,15045],"content":"The method is called on an empty field handle.","needQuote":true,"needEscape":true,"nodes":[{"content":"The method is called on an empty field handle.","pos":[0,46]}]},{"pos":[15666,15844],"content":"Returns a runtime field handle for the field identified by the specified metadata token, specifying the generic type arguments of the type and method where the token is in scope.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a runtime field handle for the field identified by the specified metadata token, specifying the generic type arguments of the type and method where the token is in scope.","pos":[0,178]}]},{"pos":[19423,19903],"content":"> [!NOTE] >  Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","needQuote":true,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&gt; [!NOTE]</ph> &gt;  Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\".","pos":[0,180],"source":"> [!NOTE] >  Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\"."},{"content":"The documentation is available online; see <bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id=\"p2\">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.","pos":[181,477],"source":" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."}]},{"pos":[22933,23161],"content":"An array of &lt;xref:System.RuntimeTypeHandle&gt; structures representing the generic type arguments of the type where the token is in scope, or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if that type is not generic.","needQuote":true,"needEscape":true,"source":"An array of <xref:System.RuntimeTypeHandle> structures representing the generic type arguments of the type where the token is in scope, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if that type is not generic."},{"pos":[23257,23489],"content":"An array of &lt;xref:System.RuntimeTypeHandle&gt; structures representing the generic type arguments of the method where the token is in scope, or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if that method is not generic.","needQuote":true,"needEscape":true,"source":"An array of <xref:System.RuntimeTypeHandle> structures representing the generic type arguments of the method where the token is in scope, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if that method is not generic."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ModuleHandle\n  id: ModuleHandle\n  children:\n  - System.ModuleHandle.EmptyHandle\n  - System.ModuleHandle.Equals(System.ModuleHandle)\n  - System.ModuleHandle.Equals(System.Object)\n  - System.ModuleHandle.GetHashCode\n  - System.ModuleHandle.GetRuntimeFieldHandleFromMetadataToken(System.Int32)\n  - System.ModuleHandle.GetRuntimeMethodHandleFromMetadataToken(System.Int32)\n  - System.ModuleHandle.GetRuntimeTypeHandleFromMetadataToken(System.Int32)\n  - System.ModuleHandle.MDStreamVersion\n  - System.ModuleHandle.op_Equality(System.ModuleHandle,System.ModuleHandle)\n  - System.ModuleHandle.op_Inequality(System.ModuleHandle,System.ModuleHandle)\n  - System.ModuleHandle.ResolveFieldHandle(System.Int32)\n  - System.ModuleHandle.ResolveFieldHandle(System.Int32,System.RuntimeTypeHandle[],System.RuntimeTypeHandle[])\n  - System.ModuleHandle.ResolveMethodHandle(System.Int32)\n  - System.ModuleHandle.ResolveMethodHandle(System.Int32,System.RuntimeTypeHandle[],System.RuntimeTypeHandle[])\n  - System.ModuleHandle.ResolveTypeHandle(System.Int32)\n  - System.ModuleHandle.ResolveTypeHandle(System.Int32,System.RuntimeTypeHandle[],System.RuntimeTypeHandle[])\n  langs:\n  - csharp\n  name: ModuleHandle\n  nameWithType: ModuleHandle\n  fullName: System.ModuleHandle\n  type: Struct\n  summary: Represents a runtime handle for a module.\n  remarks: The <xref:System.ModuleHandle.ResolveFieldHandle%2A>, <xref:System.ModuleHandle.ResolveMethodHandle%2A>, and <xref:System.ModuleHandle.ResolveTypeHandle%2A> methods provide efficient resolution of metadata tokens to runtime handles for fields, methods, and types in the current module.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public struct ModuleHandle\n  inheritance:\n  - System.ValueType\n  implements: []\n  platform:\n  - net462\n- uid: System.ModuleHandle.EmptyHandle\n  id: EmptyHandle\n  parent: System.ModuleHandle\n  langs:\n  - csharp\n  name: EmptyHandle\n  nameWithType: ModuleHandle.EmptyHandle\n  fullName: System.ModuleHandle.EmptyHandle\n  type: Field\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Represents an empty module handle.\n  syntax:\n    content: public static readonly ModuleHandle EmptyHandle;\n    return:\n      type: System.ModuleHandle\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ModuleHandle.Equals(System.ModuleHandle)\n  id: Equals(System.ModuleHandle)\n  parent: System.ModuleHandle\n  langs:\n  - csharp\n  name: Equals(ModuleHandle)\n  nameWithType: ModuleHandle.Equals(ModuleHandle)\n  fullName: System.ModuleHandle.Equals(ModuleHandle)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Returns a <xref:System.Boolean> value indicating whether the specified <xref href=\"System.ModuleHandle\"></xref> structure is equal to the current <xref href=\"System.ModuleHandle\"></xref>.\n  syntax:\n    content: public bool Equals (ModuleHandle handle);\n    parameters:\n    - id: handle\n      type: System.ModuleHandle\n      description: The <xref href=\"System.ModuleHandle\"></xref> structure to be compared with the current <xref href=\"System.ModuleHandle\"></xref>.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>handle</code> is equal to the current <xref href=\"System.ModuleHandle\"></xref> structure; otherwise <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ModuleHandle.Equals*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ModuleHandle.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.ModuleHandle\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: ModuleHandle.Equals(Object)\n  fullName: System.ModuleHandle.Equals(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Returns a <xref:System.Boolean> value indicating whether the specified object is a <xref href=\"System.ModuleHandle\"></xref> structure, and equal to the current <xref href=\"System.ModuleHandle\"></xref>.\n  syntax:\n    content: public override bool Equals (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The object to be compared with the current <xref href=\"System.ModuleHandle\"></xref> structure.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>obj</code> is a <xref href=\"System.ModuleHandle\"></xref> structure, and is equal to the current <xref href=\"System.ModuleHandle\"></xref> structure; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ModuleHandle.Equals*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ModuleHandle.GetHashCode\n  id: GetHashCode\n  parent: System.ModuleHandle\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: ModuleHandle.GetHashCode()\n  fullName: System.ModuleHandle.GetHashCode()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Returns the hash code for this instance.\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: A 32-bit signed integer that is the hash code for this instance.\n  overload: System.ModuleHandle.GetHashCode*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ModuleHandle.GetRuntimeFieldHandleFromMetadataToken(System.Int32)\n  id: GetRuntimeFieldHandleFromMetadataToken(System.Int32)\n  parent: System.ModuleHandle\n  langs:\n  - csharp\n  name: GetRuntimeFieldHandleFromMetadataToken(Int32)\n  nameWithType: ModuleHandle.GetRuntimeFieldHandleFromMetadataToken(Int32)\n  fullName: System.ModuleHandle.GetRuntimeFieldHandleFromMetadataToken(Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Returns a runtime handle for the field identified by the specified metadata token.\n  syntax:\n    content: public RuntimeFieldHandle GetRuntimeFieldHandleFromMetadataToken (int fieldToken);\n    parameters:\n    - id: fieldToken\n      type: System.Int32\n      description: A metadata token that identifies a field in the module.\n    return:\n      type: System.RuntimeFieldHandle\n      description: A <xref:System.RuntimeFieldHandle> for the field identified by <code>fieldToken</code>.\n  overload: System.ModuleHandle.GetRuntimeFieldHandleFromMetadataToken*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ModuleHandle.GetRuntimeMethodHandleFromMetadataToken(System.Int32)\n  id: GetRuntimeMethodHandleFromMetadataToken(System.Int32)\n  parent: System.ModuleHandle\n  langs:\n  - csharp\n  name: GetRuntimeMethodHandleFromMetadataToken(Int32)\n  nameWithType: ModuleHandle.GetRuntimeMethodHandleFromMetadataToken(Int32)\n  fullName: System.ModuleHandle.GetRuntimeMethodHandleFromMetadataToken(Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Returns a runtime method handle for the method or constructor identified by the specified metadata token.\n  syntax:\n    content: public RuntimeMethodHandle GetRuntimeMethodHandleFromMetadataToken (int methodToken);\n    parameters:\n    - id: methodToken\n      type: System.Int32\n      description: A metadata token that identifies a method or constructor in the module.\n    return:\n      type: System.RuntimeMethodHandle\n      description: A <xref:System.RuntimeMethodHandle> for the method or constructor identified by <code>methodToken</code>.\n  overload: System.ModuleHandle.GetRuntimeMethodHandleFromMetadataToken*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ModuleHandle.GetRuntimeTypeHandleFromMetadataToken(System.Int32)\n  id: GetRuntimeTypeHandleFromMetadataToken(System.Int32)\n  parent: System.ModuleHandle\n  langs:\n  - csharp\n  name: GetRuntimeTypeHandleFromMetadataToken(Int32)\n  nameWithType: ModuleHandle.GetRuntimeTypeHandleFromMetadataToken(Int32)\n  fullName: System.ModuleHandle.GetRuntimeTypeHandleFromMetadataToken(Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Returns a runtime type handle for the type identified by the specified metadata token.\n  syntax:\n    content: public RuntimeTypeHandle GetRuntimeTypeHandleFromMetadataToken (int typeToken);\n    parameters:\n    - id: typeToken\n      type: System.Int32\n      description: A metadata token that identifies a type in the module.\n    return:\n      type: System.RuntimeTypeHandle\n      description: A <xref:System.RuntimeTypeHandle> for the type identified by <code>typeToken</code>.\n  overload: System.ModuleHandle.GetRuntimeTypeHandleFromMetadataToken*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ModuleHandle.MDStreamVersion\n  id: MDStreamVersion\n  parent: System.ModuleHandle\n  langs:\n  - csharp\n  name: MDStreamVersion\n  nameWithType: ModuleHandle.MDStreamVersion\n  fullName: System.ModuleHandle.MDStreamVersion\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Gets the metadata stream version.\n  remarks: >-\n    > [!NOTE]\n\n    >  For more information on the metadata header, see the Partition II: Metadata Definition and Semantics documentation. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.\n  syntax:\n    content: public int MDStreamVersion { get; }\n    return:\n      type: System.Int32\n      description: A 32-bit integer representing the metadata stream version. The high-order two bytes represent the major version number, and the low-order two bytes represent the minor version number.\n  overload: System.ModuleHandle.MDStreamVersion*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ModuleHandle.op_Equality(System.ModuleHandle,System.ModuleHandle)\n  id: op_Equality(System.ModuleHandle,System.ModuleHandle)\n  parent: System.ModuleHandle\n  langs:\n  - csharp\n  name: op_Equality(ModuleHandle,ModuleHandle)\n  nameWithType: ModuleHandle.op_Equality(ModuleHandle,ModuleHandle)\n  fullName: System.ModuleHandle.op_Equality(ModuleHandle,ModuleHandle)\n  type: Operator\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Tests whether two <xref href=\"System.ModuleHandle\"></xref> structures are equal.\n  syntax:\n    content: public static bool op_Equality (ModuleHandle left, ModuleHandle right);\n    parameters:\n    - id: left\n      type: System.ModuleHandle\n      description: The <xref href=\"System.ModuleHandle\"></xref> structure to the left of the equality operator.\n    - id: right\n      type: System.ModuleHandle\n      description: The <xref href=\"System.ModuleHandle\"></xref> structure to the right of the equality operator.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.ModuleHandle\"></xref> structures are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ModuleHandle.op_Equality*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ModuleHandle.op_Inequality(System.ModuleHandle,System.ModuleHandle)\n  id: op_Inequality(System.ModuleHandle,System.ModuleHandle)\n  parent: System.ModuleHandle\n  langs:\n  - csharp\n  name: op_Inequality(ModuleHandle,ModuleHandle)\n  nameWithType: ModuleHandle.op_Inequality(ModuleHandle,ModuleHandle)\n  fullName: System.ModuleHandle.op_Inequality(ModuleHandle,ModuleHandle)\n  type: Operator\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Tests whether two <xref href=\"System.ModuleHandle\"></xref> structures are unequal.\n  syntax:\n    content: public static bool op_Inequality (ModuleHandle left, ModuleHandle right);\n    parameters:\n    - id: left\n      type: System.ModuleHandle\n      description: The <xref href=\"System.ModuleHandle\"></xref> structure to the left of the inequality operator.\n    - id: right\n      type: System.ModuleHandle\n      description: The <xref href=\"System.ModuleHandle\"></xref> structure to the right of the inequality operator.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.ModuleHandle\"></xref> structures are unequal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ModuleHandle.op_Inequality*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ModuleHandle.ResolveFieldHandle(System.Int32)\n  id: ResolveFieldHandle(System.Int32)\n  parent: System.ModuleHandle\n  langs:\n  - csharp\n  name: ResolveFieldHandle(Int32)\n  nameWithType: ModuleHandle.ResolveFieldHandle(Int32)\n  fullName: System.ModuleHandle.ResolveFieldHandle(Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Returns a runtime handle for the field identified by the specified metadata token.\n  remarks: \"To resolve a metadata token that identifies a field whose parent `TypeSpec` has a signature containing element type `var` or `mvar`, use the [ResolveFieldHandle(Int32, RuntimeTypeHandle\\\\[\\\\], RuntimeTypeHandle\\\\[\\\\])](assetId:///M:System.ModuleHandle.ResolveFieldHandle(System.Int32,System.RuntimeTypeHandle[],System.RuntimeTypeHandle[])?qualifyHint=False&autoUpgrade=False) method overload, which allows you to supply the necessary context.  \\n  \\n> [!NOTE]\\n>  Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \\\"Partition II: Metadata Definition and Semantics\\\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.\"\n  syntax:\n    content: public RuntimeFieldHandle ResolveFieldHandle (int fieldToken);\n    parameters:\n    - id: fieldToken\n      type: System.Int32\n      description: A metadata token that identifies a field in the module.\n    return:\n      type: System.RuntimeFieldHandle\n      description: A <xref:System.RuntimeFieldHandle> for the field identified by <code>fieldToken</code>.\n  overload: System.ModuleHandle.ResolveFieldHandle*\n  exceptions:\n  - type: System.BadImageFormatException\n    commentId: T:System.BadImageFormatException\n    description: \"<code>metadataToken</code> is not a valid token in the scope of the current module.  \\n  \\n -or-  \\n  \\n <code>metadataToken</code> is not a token for a field in the scope of the current module.  \\n  \\n -or-  \\n  \\n <code>metadataToken</code> identifies a field whose parent <xref uid=\\\"langword_csharp_TypeSpec\\\" name=\\\"TypeSpec\\\" href=\\\"\\\"></xref> has a signature containing element type <xref uid=\\\"langword_csharp_var\\\" name=\\\"var\\\" href=\\\"\\\"></xref> or <xref uid=\\\"langword_csharp_mvar\\\" name=\\\"mvar\\\" href=\\\"\\\"></xref>.\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The method is called on an empty field handle.\n  platform:\n  - net462\n- uid: System.ModuleHandle.ResolveFieldHandle(System.Int32,System.RuntimeTypeHandle[],System.RuntimeTypeHandle[])\n  id: ResolveFieldHandle(System.Int32,System.RuntimeTypeHandle[],System.RuntimeTypeHandle[])\n  parent: System.ModuleHandle\n  langs:\n  - csharp\n  name: ResolveFieldHandle(Int32,RuntimeTypeHandle[],RuntimeTypeHandle[])\n  nameWithType: ModuleHandle.ResolveFieldHandle(Int32,RuntimeTypeHandle[],RuntimeTypeHandle[])\n  fullName: System.ModuleHandle.ResolveFieldHandle(Int32,RuntimeTypeHandle[],RuntimeTypeHandle[])\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Returns a runtime field handle for the field identified by the specified metadata token, specifying the generic type arguments of the type and method where the token is in scope.\n  remarks: >-\n    > [!NOTE]\n\n    >  Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.\n  syntax:\n    content: public RuntimeFieldHandle ResolveFieldHandle (int fieldToken, RuntimeTypeHandle[] typeInstantiationContext, RuntimeTypeHandle[] methodInstantiationContext);\n    parameters:\n    - id: fieldToken\n      type: System.Int32\n      description: A metadata token that identifies a field in the module.\n    - id: typeInstantiationContext\n      type: System.RuntimeTypeHandle[]\n      description: An array of <xref:System.RuntimeTypeHandle> structures representing the generic type arguments of the type where the token is in scope, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if that type is not generic.\n    - id: methodInstantiationContext\n      type: System.RuntimeTypeHandle[]\n      description: An array of <xref:System.RuntimeTypeHandle> structures representing the generic type arguments of the method where the token is in scope, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if that method is not generic.\n    return:\n      type: System.RuntimeFieldHandle\n      description: A <xref:System.RuntimeFieldHandle> for the field identified by <code>fieldToken</code>.\n  overload: System.ModuleHandle.ResolveFieldHandle*\n  exceptions:\n  - type: System.BadImageFormatException\n    commentId: T:System.BadImageFormatException\n    description: \"<code>metadataToken</code> is not a valid token in the scope of the current module.  \\n  \\n -or-  \\n  \\n <code>metadataToken</code> is not a token for a field in the scope of the current module.  \\n  \\n -or-  \\n  \\n <code>metadataToken</code> identifies a field whose parent <xref uid=\\\"langword_csharp_TypeSpec\\\" name=\\\"TypeSpec\\\" href=\\\"\\\"></xref> has a signature containing element type <xref uid=\\\"langword_csharp_var\\\" name=\\\"var\\\" href=\\\"\\\"></xref> or <xref uid=\\\"langword_csharp_mvar\\\" name=\\\"mvar\\\" href=\\\"\\\"></xref>.\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The method is called on an empty field handle.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>fieldToken </code>is not a valid token.\n  platform:\n  - net462\n- uid: System.ModuleHandle.ResolveMethodHandle(System.Int32)\n  id: ResolveMethodHandle(System.Int32)\n  parent: System.ModuleHandle\n  langs:\n  - csharp\n  name: ResolveMethodHandle(Int32)\n  nameWithType: ModuleHandle.ResolveMethodHandle(Int32)\n  fullName: System.ModuleHandle.ResolveMethodHandle(Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Returns a runtime method handle for the method or constructor identified by the specified metadata token.\n  remarks: \"To resolve a metadata token for a `MethodSpec` whose signature contains element type `var` or `mvar`, use the [ResolveMethodHandle(Int32, RuntimeTypeHandle\\\\[\\\\], RuntimeTypeHandle\\\\[\\\\])](assetId:///M:System.ModuleHandle.ResolveMethodHandle(System.Int32,System.RuntimeTypeHandle[],System.RuntimeTypeHandle[])?qualifyHint=False&autoUpgrade=False) method overload, which allows you to supply the necessary context.  \\n  \\n> [!NOTE]\\n>  Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \\\"Partition II: Metadata Definition and Semantics\\\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.\"\n  syntax:\n    content: public RuntimeMethodHandle ResolveMethodHandle (int methodToken);\n    parameters:\n    - id: methodToken\n      type: System.Int32\n      description: A metadata token that identifies a method or constructor in the module.\n    return:\n      type: System.RuntimeMethodHandle\n      description: A <xref:System.RuntimeMethodHandle> for the method or constructor identified by <code>methodToken</code>.\n  overload: System.ModuleHandle.ResolveMethodHandle*\n  exceptions:\n  - type: System.BadImageFormatException\n    commentId: T:System.BadImageFormatException\n    description: \"<code>methodToken</code> is not a valid metadata token for a method in the current module.  \\n  \\n -or-  \\n  \\n <code>metadataToken</code> is not a token for a method or constructor in the scope of the current module.  \\n  \\n -or-  \\n  \\n <code>metadataToken</code> is a <xref uid=\\\"langword_csharp_MethodSpec\\\" name=\\\"MethodSpec\\\" href=\\\"\\\"></xref> whose signature contains element type <xref uid=\\\"langword_csharp_var\\\" name=\\\"var\\\" href=\\\"\\\"></xref> or <xref uid=\\\"langword_csharp_mvar\\\" name=\\\"mvar\\\" href=\\\"\\\"></xref>.\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The method is called on an empty method handle.\n  platform:\n  - net462\n- uid: System.ModuleHandle.ResolveMethodHandle(System.Int32,System.RuntimeTypeHandle[],System.RuntimeTypeHandle[])\n  id: ResolveMethodHandle(System.Int32,System.RuntimeTypeHandle[],System.RuntimeTypeHandle[])\n  parent: System.ModuleHandle\n  langs:\n  - csharp\n  name: ResolveMethodHandle(Int32,RuntimeTypeHandle[],RuntimeTypeHandle[])\n  nameWithType: ModuleHandle.ResolveMethodHandle(Int32,RuntimeTypeHandle[],RuntimeTypeHandle[])\n  fullName: System.ModuleHandle.ResolveMethodHandle(Int32,RuntimeTypeHandle[],RuntimeTypeHandle[])\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Returns a runtime method handle for the method or constructor identified by the specified metadata token, specifying the generic type arguments of the type and method where the token is in scope.\n  remarks: >-\n    > [!NOTE]\n\n    >  Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.\n  syntax:\n    content: public RuntimeMethodHandle ResolveMethodHandle (int methodToken, RuntimeTypeHandle[] typeInstantiationContext, RuntimeTypeHandle[] methodInstantiationContext);\n    parameters:\n    - id: methodToken\n      type: System.Int32\n      description: A metadata token that identifies a method or constructor in the module.\n    - id: typeInstantiationContext\n      type: System.RuntimeTypeHandle[]\n      description: An array of <xref:System.RuntimeTypeHandle> structures representing the generic type arguments of the type where the token is in scope, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if that type is not generic.\n    - id: methodInstantiationContext\n      type: System.RuntimeTypeHandle[]\n      description: An array of <xref:System.RuntimeTypeHandle> structures representing the generic type arguments of the method where the token is in scope, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if that method is not generic.\n    return:\n      type: System.RuntimeMethodHandle\n      description: A <xref:System.RuntimeMethodHandle> for the method or constructor identified by <code>methodToken</code>.\n  overload: System.ModuleHandle.ResolveMethodHandle*\n  exceptions:\n  - type: System.BadImageFormatException\n    commentId: T:System.BadImageFormatException\n    description: \"<code>methodToken</code> is not a valid metadata token for a method in the current module.  \\n  \\n -or-  \\n  \\n <code>metadataToken</code> is not a token for a method or constructor in the scope of the current module.  \\n  \\n -or-  \\n  \\n <code>metadataToken</code> is a <xref uid=\\\"langword_csharp_MethodSpec\\\" name=\\\"MethodSpec\\\" href=\\\"\\\"></xref> whose signature contains element type <xref uid=\\\"langword_csharp_var\\\" name=\\\"var\\\" href=\\\"\\\"></xref> or <xref uid=\\\"langword_csharp_mvar\\\" name=\\\"mvar\\\" href=\\\"\\\"></xref>.\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The method is called on an empty method handle.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>methodToken </code>is not a valid token.\n  platform:\n  - net462\n- uid: System.ModuleHandle.ResolveTypeHandle(System.Int32)\n  id: ResolveTypeHandle(System.Int32)\n  parent: System.ModuleHandle\n  langs:\n  - csharp\n  name: ResolveTypeHandle(Int32)\n  nameWithType: ModuleHandle.ResolveTypeHandle(Int32)\n  fullName: System.ModuleHandle.ResolveTypeHandle(Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Returns a runtime type handle for the type identified by the specified metadata token.\n  remarks: \"To resolve a metadata token for a `TypeSpec` whose signature contains element type `var` or `mvar`, use the [ResolveTypeHandle(Int32, RuntimeTypeHandle\\\\[\\\\], RuntimeTypeHandle\\\\[\\\\])](assetId:///M:System.ModuleHandle.ResolveTypeHandle(System.Int32,System.RuntimeTypeHandle[],System.RuntimeTypeHandle[])?qualifyHint=False&autoUpgrade=False) method overload, which allows you to supply the necessary context.  \\n  \\n> [!NOTE]\\n>  Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \\\"Partition II: Metadata Definition and Semantics\\\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.\"\n  syntax:\n    content: public RuntimeTypeHandle ResolveTypeHandle (int typeToken);\n    parameters:\n    - id: typeToken\n      type: System.Int32\n      description: A metadata token that identifies a type in the module.\n    return:\n      type: System.RuntimeTypeHandle\n      description: A <xref:System.RuntimeTypeHandle> for the type identified by <code>typeToken</code>.\n  overload: System.ModuleHandle.ResolveTypeHandle*\n  exceptions:\n  - type: System.BadImageFormatException\n    commentId: T:System.BadImageFormatException\n    description: \"<code>typeToken</code> is not a valid metadata token for a type in the current module.  \\n  \\n -or-  \\n  \\n <code>metadataToken</code> is not a token for a type in the scope of the current module.  \\n  \\n -or-  \\n  \\n <code>metadataToken</code> is a <xref uid=\\\"langword_csharp_TypeSpec\\\" name=\\\"TypeSpec\\\" href=\\\"\\\"></xref> whose signature contains element type <xref uid=\\\"langword_csharp_var\\\" name=\\\"var\\\" href=\\\"\\\"></xref> or <xref uid=\\\"langword_csharp_mvar\\\" name=\\\"mvar\\\" href=\\\"\\\"></xref>.\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The method is called on an empty type handle.\n  platform:\n  - net462\n- uid: System.ModuleHandle.ResolveTypeHandle(System.Int32,System.RuntimeTypeHandle[],System.RuntimeTypeHandle[])\n  id: ResolveTypeHandle(System.Int32,System.RuntimeTypeHandle[],System.RuntimeTypeHandle[])\n  parent: System.ModuleHandle\n  langs:\n  - csharp\n  name: ResolveTypeHandle(Int32,RuntimeTypeHandle[],RuntimeTypeHandle[])\n  nameWithType: ModuleHandle.ResolveTypeHandle(Int32,RuntimeTypeHandle[],RuntimeTypeHandle[])\n  fullName: System.ModuleHandle.ResolveTypeHandle(Int32,RuntimeTypeHandle[],RuntimeTypeHandle[])\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Returns a runtime type handle for the type identified by the specified metadata token, specifying the generic type arguments of the type and method where the token is in scope.\n  remarks: >-\n    > [!NOTE]\n\n    >  Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.\n  syntax:\n    content: public RuntimeTypeHandle ResolveTypeHandle (int typeToken, RuntimeTypeHandle[] typeInstantiationContext, RuntimeTypeHandle[] methodInstantiationContext);\n    parameters:\n    - id: typeToken\n      type: System.Int32\n      description: A metadata token that identifies a type in the module.\n    - id: typeInstantiationContext\n      type: System.RuntimeTypeHandle[]\n      description: An array of <xref:System.RuntimeTypeHandle> structures representing the generic type arguments of the type where the token is in scope, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if that type is not generic.\n    - id: methodInstantiationContext\n      type: System.RuntimeTypeHandle[]\n      description: An array of <xref:System.RuntimeTypeHandle> structures objects representing the generic type arguments of the method where the token is in scope, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if that method is not generic.\n    return:\n      type: System.RuntimeTypeHandle\n      description: A <xref:System.RuntimeTypeHandle> for the type identified by <code>typeToken</code>.\n  overload: System.ModuleHandle.ResolveTypeHandle*\n  exceptions:\n  - type: System.BadImageFormatException\n    commentId: T:System.BadImageFormatException\n    description: \"<code>typeToken</code> is not a valid metadata token for a type in the current module.  \\n  \\n -or-  \\n  \\n <code>metadataToken</code> is not a token for a type in the scope of the current module.  \\n  \\n -or-  \\n  \\n <code>metadataToken</code> is a <xref uid=\\\"langword_csharp_TypeSpec\\\" name=\\\"TypeSpec\\\" href=\\\"\\\"></xref> whose signature contains element type <xref uid=\\\"langword_csharp_var\\\" name=\\\"var\\\" href=\\\"\\\"></xref> or <xref uid=\\\"langword_csharp_mvar\\\" name=\\\"mvar\\\" href=\\\"\\\"></xref>.\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The method is called on an empty type handle.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>typeToken </code>is not a valid token.\n  platform:\n  - net462\nreferences:\n- uid: System.ValueType\n  isExternal: false\n  name: System.ValueType\n- uid: System.BadImageFormatException\n  isExternal: true\n  name: System.BadImageFormatException\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.ModuleHandle.EmptyHandle\n  parent: System.ModuleHandle\n  isExternal: false\n  name: EmptyHandle\n  nameWithType: ModuleHandle.EmptyHandle\n  fullName: System.ModuleHandle.EmptyHandle\n- uid: System.ModuleHandle\n  parent: System\n  isExternal: false\n  name: ModuleHandle\n  nameWithType: ModuleHandle\n  fullName: System.ModuleHandle\n- uid: System.ModuleHandle.Equals(System.ModuleHandle)\n  parent: System.ModuleHandle\n  isExternal: false\n  name: Equals(ModuleHandle)\n  nameWithType: ModuleHandle.Equals(ModuleHandle)\n  fullName: System.ModuleHandle.Equals(ModuleHandle)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.ModuleHandle.Equals(System.Object)\n  parent: System.ModuleHandle\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: ModuleHandle.Equals(Object)\n  fullName: System.ModuleHandle.Equals(Object)\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ModuleHandle.GetHashCode\n  parent: System.ModuleHandle\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: ModuleHandle.GetHashCode()\n  fullName: System.ModuleHandle.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.ModuleHandle.GetRuntimeFieldHandleFromMetadataToken(System.Int32)\n  parent: System.ModuleHandle\n  isExternal: false\n  name: GetRuntimeFieldHandleFromMetadataToken(Int32)\n  nameWithType: ModuleHandle.GetRuntimeFieldHandleFromMetadataToken(Int32)\n  fullName: System.ModuleHandle.GetRuntimeFieldHandleFromMetadataToken(Int32)\n- uid: System.RuntimeFieldHandle\n  parent: System\n  isExternal: true\n  name: RuntimeFieldHandle\n  nameWithType: RuntimeFieldHandle\n  fullName: System.RuntimeFieldHandle\n- uid: System.ModuleHandle.GetRuntimeMethodHandleFromMetadataToken(System.Int32)\n  parent: System.ModuleHandle\n  isExternal: false\n  name: GetRuntimeMethodHandleFromMetadataToken(Int32)\n  nameWithType: ModuleHandle.GetRuntimeMethodHandleFromMetadataToken(Int32)\n  fullName: System.ModuleHandle.GetRuntimeMethodHandleFromMetadataToken(Int32)\n- uid: System.RuntimeMethodHandle\n  parent: System\n  isExternal: true\n  name: RuntimeMethodHandle\n  nameWithType: RuntimeMethodHandle\n  fullName: System.RuntimeMethodHandle\n- uid: System.ModuleHandle.GetRuntimeTypeHandleFromMetadataToken(System.Int32)\n  parent: System.ModuleHandle\n  isExternal: false\n  name: GetRuntimeTypeHandleFromMetadataToken(Int32)\n  nameWithType: ModuleHandle.GetRuntimeTypeHandleFromMetadataToken(Int32)\n  fullName: System.ModuleHandle.GetRuntimeTypeHandleFromMetadataToken(Int32)\n- uid: System.RuntimeTypeHandle\n  parent: System\n  isExternal: true\n  name: RuntimeTypeHandle\n  nameWithType: RuntimeTypeHandle\n  fullName: System.RuntimeTypeHandle\n- uid: System.ModuleHandle.MDStreamVersion\n  parent: System.ModuleHandle\n  isExternal: false\n  name: MDStreamVersion\n  nameWithType: ModuleHandle.MDStreamVersion\n  fullName: System.ModuleHandle.MDStreamVersion\n- uid: System.ModuleHandle.op_Equality(System.ModuleHandle,System.ModuleHandle)\n  parent: System.ModuleHandle\n  isExternal: false\n  name: op_Equality(ModuleHandle,ModuleHandle)\n  nameWithType: ModuleHandle.op_Equality(ModuleHandle,ModuleHandle)\n  fullName: System.ModuleHandle.op_Equality(ModuleHandle,ModuleHandle)\n- uid: System.ModuleHandle.op_Inequality(System.ModuleHandle,System.ModuleHandle)\n  parent: System.ModuleHandle\n  isExternal: false\n  name: op_Inequality(ModuleHandle,ModuleHandle)\n  nameWithType: ModuleHandle.op_Inequality(ModuleHandle,ModuleHandle)\n  fullName: System.ModuleHandle.op_Inequality(ModuleHandle,ModuleHandle)\n- uid: System.ModuleHandle.ResolveFieldHandle(System.Int32)\n  parent: System.ModuleHandle\n  isExternal: false\n  name: ResolveFieldHandle(Int32)\n  nameWithType: ModuleHandle.ResolveFieldHandle(Int32)\n  fullName: System.ModuleHandle.ResolveFieldHandle(Int32)\n- uid: System.ModuleHandle.ResolveFieldHandle(System.Int32,System.RuntimeTypeHandle[],System.RuntimeTypeHandle[])\n  parent: System.ModuleHandle\n  isExternal: false\n  name: ResolveFieldHandle(Int32,RuntimeTypeHandle[],RuntimeTypeHandle[])\n  nameWithType: ModuleHandle.ResolveFieldHandle(Int32,RuntimeTypeHandle[],RuntimeTypeHandle[])\n  fullName: System.ModuleHandle.ResolveFieldHandle(Int32,RuntimeTypeHandle[],RuntimeTypeHandle[])\n- uid: System.RuntimeTypeHandle[]\n  parent: System\n  isExternal: true\n  name: RuntimeTypeHandle\n  nameWithType: RuntimeTypeHandle\n  fullName: System.RuntimeTypeHandle[]\n  spec.csharp:\n  - uid: System.RuntimeTypeHandle\n    name: RuntimeTypeHandle\n    nameWithType: RuntimeTypeHandle\n    fullName: RuntimeTypeHandle[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.ModuleHandle.ResolveMethodHandle(System.Int32)\n  parent: System.ModuleHandle\n  isExternal: false\n  name: ResolveMethodHandle(Int32)\n  nameWithType: ModuleHandle.ResolveMethodHandle(Int32)\n  fullName: System.ModuleHandle.ResolveMethodHandle(Int32)\n- uid: System.ModuleHandle.ResolveMethodHandle(System.Int32,System.RuntimeTypeHandle[],System.RuntimeTypeHandle[])\n  parent: System.ModuleHandle\n  isExternal: false\n  name: ResolveMethodHandle(Int32,RuntimeTypeHandle[],RuntimeTypeHandle[])\n  nameWithType: ModuleHandle.ResolveMethodHandle(Int32,RuntimeTypeHandle[],RuntimeTypeHandle[])\n  fullName: System.ModuleHandle.ResolveMethodHandle(Int32,RuntimeTypeHandle[],RuntimeTypeHandle[])\n- uid: System.ModuleHandle.ResolveTypeHandle(System.Int32)\n  parent: System.ModuleHandle\n  isExternal: false\n  name: ResolveTypeHandle(Int32)\n  nameWithType: ModuleHandle.ResolveTypeHandle(Int32)\n  fullName: System.ModuleHandle.ResolveTypeHandle(Int32)\n- uid: System.ModuleHandle.ResolveTypeHandle(System.Int32,System.RuntimeTypeHandle[],System.RuntimeTypeHandle[])\n  parent: System.ModuleHandle\n  isExternal: false\n  name: ResolveTypeHandle(Int32,RuntimeTypeHandle[],RuntimeTypeHandle[])\n  nameWithType: ModuleHandle.ResolveTypeHandle(Int32,RuntimeTypeHandle[],RuntimeTypeHandle[])\n  fullName: System.ModuleHandle.ResolveTypeHandle(Int32,RuntimeTypeHandle[],RuntimeTypeHandle[])\n- uid: System.ModuleHandle.Equals*\n  parent: System.ModuleHandle\n  isExternal: false\n  name: Equals\n  nameWithType: ModuleHandle.Equals\n- uid: System.ModuleHandle.GetHashCode*\n  parent: System.ModuleHandle\n  isExternal: false\n  name: GetHashCode\n  nameWithType: ModuleHandle.GetHashCode\n- uid: System.ModuleHandle.GetRuntimeFieldHandleFromMetadataToken*\n  parent: System.ModuleHandle\n  isExternal: false\n  name: GetRuntimeFieldHandleFromMetadataToken\n  nameWithType: ModuleHandle.GetRuntimeFieldHandleFromMetadataToken\n- uid: System.ModuleHandle.GetRuntimeMethodHandleFromMetadataToken*\n  parent: System.ModuleHandle\n  isExternal: false\n  name: GetRuntimeMethodHandleFromMetadataToken\n  nameWithType: ModuleHandle.GetRuntimeMethodHandleFromMetadataToken\n- uid: System.ModuleHandle.GetRuntimeTypeHandleFromMetadataToken*\n  parent: System.ModuleHandle\n  isExternal: false\n  name: GetRuntimeTypeHandleFromMetadataToken\n  nameWithType: ModuleHandle.GetRuntimeTypeHandleFromMetadataToken\n- uid: System.ModuleHandle.MDStreamVersion*\n  parent: System.ModuleHandle\n  isExternal: false\n  name: MDStreamVersion\n  nameWithType: ModuleHandle.MDStreamVersion\n- uid: System.ModuleHandle.op_Equality*\n  parent: System.ModuleHandle\n  isExternal: false\n  name: op_Equality\n  nameWithType: ModuleHandle.op_Equality\n- uid: System.ModuleHandle.op_Inequality*\n  parent: System.ModuleHandle\n  isExternal: false\n  name: op_Inequality\n  nameWithType: ModuleHandle.op_Inequality\n- uid: System.ModuleHandle.ResolveFieldHandle*\n  parent: System.ModuleHandle\n  isExternal: false\n  name: ResolveFieldHandle\n  nameWithType: ModuleHandle.ResolveFieldHandle\n- uid: System.ModuleHandle.ResolveMethodHandle*\n  parent: System.ModuleHandle\n  isExternal: false\n  name: ResolveMethodHandle\n  nameWithType: ModuleHandle.ResolveMethodHandle\n- uid: System.ModuleHandle.ResolveTypeHandle*\n  parent: System.ModuleHandle\n  isExternal: false\n  name: ResolveTypeHandle\n  nameWithType: ModuleHandle.ResolveTypeHandle\n"}