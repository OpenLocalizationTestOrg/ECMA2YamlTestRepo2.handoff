{"nodes":[{"pos":[6813,6959],"content":"Provides a stream that uses the Negotiate security protocol to authenticate the client, and optionally the server, in client-server communication.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides a stream that uses the Negotiate security protocol to authenticate the client, and optionally the server, in client-server communication.","pos":[0,146]}]},{"pos":[6972,10106],"content":"Use the NegotiateStream class for authentication and to help secure information transmitted between a client and a server. Using NegotiateStream, you can do the following.      -   Send the client's credentials to the server for Impersonation or Delegation.      -   Request server authentication.      -   Encrypt and/or sign data before transmitting it.       Authentication must be performed before transmitting information. Clients request authentication using the synchronous <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> methods, which block until the authentication completes, or the asynchronous <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> methods, which do not block while waiting for the authentication to complete. Servers request authentication using the synchronous <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> or asynchronous <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods. The client, and optionally the server, is authenticated using the Negotiate security protocol. On Windows 95/98 systems, Windows NT LAN Manager (NTLM) is the protocol used for authentication. On other platforms the Kerberos protocol is used for authentication if both client and server support it; otherwise NTLM is used. For detailed descriptions of these protocols, see the Platform SDK documentation on MSDN, at msdn.microsoft.com/library/. The NegotiateStream class performs the authentication using the Security Support Provider Interface (SSPI).       When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services will be used by the NegotiateStream to help secure your data during transmission. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred. You can get information about the remote client or server using the <xref:System.Net.Security.NegotiateStream.RemoteIdentity%2A> property.       If the authentication fails, you will receive an <xref:System.Security.Authentication.AuthenticationException> or a <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.       You send data using the synchronous <xref:System.Net.Security.NegotiateStream.Write%2A> or asynchronous <xref:System.Net.Security.NegotiateStream.BeginWrite%2A> methods. You receive data using the synchronous <xref:System.Net.Security.NegotiateStream.Read%2A> or asynchronous <xref:System.Net.Security.NegotiateStream.BeginRead%2A> methods. If security services such as encryption or signing are enabled, these are automatically applied to your data by the NegotiateStream.       The NegotiateStream transmits data using a stream that you supply when creating the NegotiateStream. When you supply this underlying stream, you have the option to specify whether closing the NegotiateStream also closes the underlying stream.","needQuote":false,"needEscape":true,"nodes":[{"content":"Use the NegotiateStream class for authentication and to help secure information transmitted between a client and a server. Using NegotiateStream, you can do the following.      -   Send the client's credentials to the server for Impersonation or Delegation.      -   Request server authentication.      -   Encrypt and/or sign data before transmitting it.       Authentication must be performed before transmitting information. Clients request authentication using the synchronous <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> methods, which block until the authentication completes, or the asynchronous <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> methods, which do not block while waiting for the authentication to complete. Servers request authentication using the synchronous <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> or asynchronous <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods. The client, and optionally the server, is authenticated using the Negotiate security protocol. On Windows 95/98 systems, Windows NT LAN Manager (NTLM) is the protocol used for authentication. On other platforms the Kerberos protocol is used for authentication if both client and server support it; otherwise NTLM is used. For detailed descriptions of these protocols, see the Platform SDK documentation on MSDN, at msdn.microsoft.com/library/. The NegotiateStream class performs the authentication using the Security Support Provider Interface (SSPI).       When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services will be used by the NegotiateStream to help secure your data during transmission. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred. You can get information about the remote client or server using the <xref:System.Net.Security.NegotiateStream.RemoteIdentity%2A> property.       If the authentication fails, you will receive an <xref:System.Security.Authentication.AuthenticationException> or a <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.       You send data using the synchronous <xref:System.Net.Security.NegotiateStream.Write%2A> or asynchronous <xref:System.Net.Security.NegotiateStream.BeginWrite%2A> methods. You receive data using the synchronous <xref:System.Net.Security.NegotiateStream.Read%2A> or asynchronous <xref:System.Net.Security.NegotiateStream.BeginRead%2A> methods. If security services such as encryption or signing are enabled, these are automatically applied to your data by the NegotiateStream.       The NegotiateStream transmits data using a stream that you supply when creating the NegotiateStream. When you supply this underlying stream, you have the option to specify whether closing the NegotiateStream also closes the underlying stream.","pos":[0,3118],"nodes":[{"content":"Use the NegotiateStream class for authentication and to help secure information transmitted between a client and a server.","pos":[0,122]},{"content":"Using NegotiateStream, you can do the following.","pos":[123,171]},{"content":"-   Send the client's credentials to the server for Impersonation or Delegation.","pos":[177,257]},{"content":"-   Request server authentication.","pos":[263,297]},{"content":"-   Encrypt and/or sign data before transmitting it.","pos":[303,355]},{"content":"Authentication must be performed before transmitting information.","pos":[362,427]},{"content":"Clients request authentication using the synchronous &lt;xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A&gt; methods, which block until the authentication completes, or the asynchronous &lt;xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A&gt; methods, which do not block while waiting for the authentication to complete.","pos":[428,774],"source":" Clients request authentication using the synchronous <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> methods, which block until the authentication completes, or the asynchronous <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> methods, which do not block while waiting for the authentication to complete."},{"content":"Servers request authentication using the synchronous &lt;xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A&gt; or asynchronous &lt;xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A&gt; methods.","pos":[775,991],"source":" Servers request authentication using the synchronous <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> or asynchronous <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods."},{"content":"The client, and optionally the server, is authenticated using the Negotiate security protocol.","pos":[992,1086]},{"content":"On Windows 95/98 systems, Windows NT LAN Manager (NTLM) is the protocol used for authentication.","pos":[1087,1183]},{"content":"On other platforms the Kerberos protocol is used for authentication if both client and server support it; otherwise NTLM is used.","pos":[1184,1313]},{"content":"For detailed descriptions of these protocols, see the Platform SDK documentation on MSDN, at msdn.microsoft.com/library/.","pos":[1314,1435]},{"content":"The NegotiateStream class performs the authentication using the Security Support Provider Interface (SSPI).","pos":[1436,1543]},{"content":"When authentication succeeds, you must check the &lt;xref:System.Net.Security.NegotiateStream.IsEncrypted%2A&gt; and &lt;xref:System.Net.Security.NegotiateStream.IsSigned%2A&gt; properties to determine what security services will be used by the NegotiateStream to help secure your data during transmission.","pos":[1550,1844],"source":"       When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services will be used by the NegotiateStream to help secure your data during transmission."},{"content":"Check the &lt;xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A&gt; property to determine whether mutual authentication occurred.","pos":[1845,1986],"source":" Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred."},{"content":"You can get information about the remote client or server using the &lt;xref:System.Net.Security.NegotiateStream.RemoteIdentity%2A&gt; property.","pos":[1987,2125],"source":" You can get information about the remote client or server using the <xref:System.Net.Security.NegotiateStream.RemoteIdentity%2A> property."},{"content":"If the authentication fails, you will receive an &lt;xref:System.Security.Authentication.AuthenticationException&gt; or a &lt;xref:System.Security.Authentication.InvalidCredentialException&gt;.","pos":[2132,2313],"source":"       If the authentication fails, you will receive an <xref:System.Security.Authentication.AuthenticationException> or a <xref:System.Security.Authentication.InvalidCredentialException>."},{"content":"In this case, you can retry the authentication with a different credential.","pos":[2314,2389]},{"content":"You send data using the synchronous &lt;xref:System.Net.Security.NegotiateStream.Write%2A&gt; or asynchronous &lt;xref:System.Net.Security.NegotiateStream.BeginWrite%2A&gt; methods.","pos":[2396,2565],"source":"       You send data using the synchronous <xref:System.Net.Security.NegotiateStream.Write%2A> or asynchronous <xref:System.Net.Security.NegotiateStream.BeginWrite%2A> methods."},{"content":"You receive data using the synchronous &lt;xref:System.Net.Security.NegotiateStream.Read%2A&gt; or asynchronous &lt;xref:System.Net.Security.NegotiateStream.BeginRead%2A&gt; methods.","pos":[2566,2736],"source":" You receive data using the synchronous <xref:System.Net.Security.NegotiateStream.Read%2A> or asynchronous <xref:System.Net.Security.NegotiateStream.BeginRead%2A> methods."},{"content":"If security services such as encryption or signing are enabled, these are automatically applied to your data by the NegotiateStream.","pos":[2737,2869]},{"content":"The NegotiateStream transmits data using a stream that you supply when creating the NegotiateStream.","pos":[2876,2976]},{"content":"When you supply this underlying stream, you have the option to specify whether closing the NegotiateStream also closes the underlying stream.","pos":[2977,3118]}]}]},{"pos":[11652,11793],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Net.Security.NegotiateStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class using the specified &lt;xref:System.IO.Stream&gt;.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Net.Security.NegotiateStream\"></xref> class using the specified <xref:System.IO.Stream>."},{"pos":[12244,12377],"content":"A &lt;xref:System.IO.Stream&gt; object used by the <bpt id=\"p1\">&lt;xref href=\"System.Net.Security.NegotiateStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for sending and receiving data.","needQuote":true,"needEscape":true,"source":"A <xref:System.IO.Stream> object used by the <xref href=\"System.Net.Security.NegotiateStream\"></xref> for sending and receiving data."},{"pos":[12941,13110],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Net.Security.NegotiateStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class using the specified &lt;xref:System.IO.Stream&gt; and stream closure behavior.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Net.Security.NegotiateStream\"></xref> class using the specified <xref:System.IO.Stream> and stream closure behavior."},{"pos":[13122,13348],"content":"When you specify <ph id=\"ph1\">`true`</ph> for the <ph id=\"ph2\">`leaveStreamOpen`</ph> parameter, closing the &lt;xref:System.Net.Security.NegotiateStream&gt; has no effect on the <ph id=\"ph3\">`innerStream`</ph> stream; you must explicitly close <ph id=\"ph4\">`innerStream`</ph> when you no longer need it.","needQuote":true,"needEscape":true,"source":"When you specify `true` for the `leaveStreamOpen` parameter, closing the <xref:System.Net.Security.NegotiateStream> has no effect on the `innerStream` stream; you must explicitly close `innerStream` when you no longer need it."},{"pos":[13927,14060],"content":"A &lt;xref:System.IO.Stream&gt; object used by the <bpt id=\"p1\">&lt;xref href=\"System.Net.Security.NegotiateStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for sending and receiving data.","needQuote":true,"needEscape":true,"source":"A <xref:System.IO.Stream> object used by the <xref href=\"System.Net.Security.NegotiateStream\"></xref> for sending and receiving data."},{"pos":[14138,14540],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to indicate that closing this <xref href=\"System.Net.Security.NegotiateStream\"></xref> has no effect on `innerstream`; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to indicate that closing this <xref href=\"System.Net.Security.NegotiateStream\"></xref> also closes `innerStream`. See the Remarks section for more information.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to indicate that closing this <bpt id=\"p2\">&lt;xref href=\"System.Net.Security.NegotiateStream\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> has no effect on <ph id=\"ph1\">`innerstream`</ph>; <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> to indicate that closing this <bpt id=\"p4\">&lt;xref href=\"System.Net.Security.NegotiateStream\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept> also closes <ph id=\"ph2\">`innerStream`</ph>.","pos":[0,356],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to indicate that closing this <xref href=\"System.Net.Security.NegotiateStream\"></xref> has no effect on `innerstream`; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to indicate that closing this <xref href=\"System.Net.Security.NegotiateStream\"></xref> also closes `innerStream`."},{"content":"See the Remarks section for more information.","pos":[357,402]}]},{"pos":[15323,15426],"content":"Called by clients to authenticate the client, and optionally the server, in a client-server connection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called by clients to authenticate the client, and optionally the server, in a client-server connection.","pos":[0,103]}]},{"pos":[15439,16577],"content":"The authentication uses the client's <xref:System.Net.CredentialCache.DefaultCredentials%2A>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel>, the security level is <xref:System.Net.Security.ProtectionLevel>, and mutual authentication is requested. The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.       When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.       If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","needQuote":false,"needEscape":true,"nodes":[{"content":"The authentication uses the client's <xref:System.Net.CredentialCache.DefaultCredentials%2A>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel>, the security level is <xref:System.Net.Security.ProtectionLevel>, and mutual authentication is requested. The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.       When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.       If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","pos":[0,1134],"nodes":[{"content":"The authentication uses the client's &lt;xref:System.Net.CredentialCache.DefaultCredentials%2A&gt;.","pos":[0,93],"source":"The authentication uses the client's <xref:System.Net.CredentialCache.DefaultCredentials%2A>."},{"content":"No Service Principal Name (SPN) is specified for the server.","pos":[94,154]},{"content":"The impersonation level is &lt;xref:System.Security.Principal.TokenImpersonationLevel&gt;, the security level is &lt;xref:System.Net.Security.ProtectionLevel&gt;, and mutual authentication is requested.","pos":[155,345],"source":" The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel>, the security level is <xref:System.Net.Security.ProtectionLevel>, and mutual authentication is requested."},{"content":"The &lt;xref:System.Net.Security.NegotiateStream&gt; class will construct the SPN used for mutual authentication.","pos":[346,453],"source":" The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication."},{"content":"When authentication succeeds, you must check the &lt;xref:System.Net.Security.NegotiateStream.IsEncrypted%2A&gt; and &lt;xref:System.Net.Security.NegotiateStream.IsSigned%2A&gt; properties to determine what security services are used by the &lt;xref:System.Net.Security.NegotiateStream&gt;.","pos":[460,732],"source":"       When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>."},{"content":"Check the &lt;xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A&gt; property to determine whether mutual authentication occurred.","pos":[733,874],"source":" Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred."},{"content":"If the authentication fails, you receive an &lt;xref:System.Security.Authentication.AuthenticationException&gt; or an &lt;xref:System.Security.Authentication.InvalidCredentialException&gt;.","pos":[881,1058],"source":"       If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>."},{"content":"In this case, you can retry the authentication with a different credential.","pos":[1059,1134]}]}]},{"pos":[16904,16983],"content":"The authentication failed. You can use this object to retry the authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]},{"pos":[17144,17223],"content":"The authentication failed. You can use this object to retry the authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]},{"pos":[17330,17358],"content":"This object has been closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been closed.","pos":[0,28]}]},{"pos":[18252,18420],"content":"Called by clients to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified client credential.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called by clients to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified client credential.","pos":[0,168],"nodes":[{"content":"Called by clients to authenticate the client, and optionally the server, in a client-server connection.","pos":[0,103]},{"content":"The authentication process uses the specified client credential.","pos":[104,168]}]}]},{"pos":[18433,19154],"content":"The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel>, the security level is <xref:System.Net.Security.ProtectionLevel>, and mutual authentication is requested. The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.       When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.","needQuote":false,"needEscape":true,"nodes":[{"content":"The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel>, the security level is <xref:System.Net.Security.ProtectionLevel>, and mutual authentication is requested. The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.       When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.","pos":[0,719],"nodes":[{"content":"The impersonation level is &lt;xref:System.Security.Principal.TokenImpersonationLevel&gt;, the security level is &lt;xref:System.Net.Security.ProtectionLevel&gt;, and mutual authentication is requested.","pos":[0,190],"source":"The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel>, the security level is <xref:System.Net.Security.ProtectionLevel>, and mutual authentication is requested."},{"content":"The &lt;xref:System.Net.Security.NegotiateStream&gt; class will construct the SPN used for mutual authentication.","pos":[191,298],"source":" The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication."},{"content":"When authentication succeeds, you must check the &lt;xref:System.Net.Security.NegotiateStream.IsEncrypted%2A&gt; and &lt;xref:System.Net.Security.NegotiateStream.IsSigned%2A&gt; properties to determine what security services are used by the &lt;xref:System.Net.Security.NegotiateStream&gt;.","pos":[305,577],"source":"       When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>."},{"content":"Check the &lt;xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A&gt; property to determine whether mutual authentication occurred.","pos":[578,719],"source":" Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred."}]}]},{"pos":[19379,19472],"content":"The <xref:System.Net.NetworkCredential> that is used to establish the identity of the client.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Net.NetworkCredential&gt; that is used to establish the identity of the client.","pos":[0,93],"source":"The <xref:System.Net.NetworkCredential> that is used to establish the identity of the client."}]},{"pos":[19539,19624],"content":"The Service Principal Name (SPN) that uniquely identifies the server to authenticate.","needQuote":true,"needEscape":true,"nodes":[{"content":"The Service Principal Name (SPN) that uniquely identifies the server to authenticate.","pos":[0,85]}]},{"pos":[19863,19942],"content":"The authentication failed. You can use this object to retry the authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]},{"pos":[20103,20182],"content":"The authentication failed. You can use this object to retry the authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]},{"pos":[20289,20317],"content":"This object has been closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been closed.","pos":[0,28]}]},{"pos":[20732,20820],"content":"<ph id=\"ph1\">&lt;code&gt;targetName&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>targetName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[21577,21769],"content":"Called by clients to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified client credential and the channel binding.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called by clients to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified client credential and the channel binding.","pos":[0,192],"nodes":[{"content":"Called by clients to authenticate the client, and optionally the server, in a client-server connection.","pos":[0,103]},{"content":"The authentication process uses the specified client credential and the channel binding.","pos":[104,192]}]}]},{"pos":[21782,22837],"content":"The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel>, the security level is <xref:System.Net.Security.ProtectionLevel>, and mutual authentication is requested. The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.       The <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> used for extended protection that is passed to this method in the `binding` parameter would be retrieved by an application from <xref:System.Net.Security.SslStream.TransportContext%2A> property on the associated <xref:System.Net.Security.SslStream>.       When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.","needQuote":false,"needEscape":true,"nodes":[{"content":"The impersonation level is &lt;xref:System.Security.Principal.TokenImpersonationLevel&gt;, the security level is &lt;xref:System.Net.Security.ProtectionLevel&gt;, and mutual authentication is requested.","pos":[0,190],"source":"The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel>, the security level is <xref:System.Net.Security.ProtectionLevel>, and mutual authentication is requested."},{"content":"The &lt;xref:System.Net.Security.NegotiateStream&gt; class will construct the SPN used for mutual authentication.","pos":[191,298],"source":" The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication."},{"content":"The &lt;xref:System.Security.Authentication.ExtendedProtection.ChannelBinding&gt; used for extended protection that is passed to this method in the <ph id=\"ph1\">`binding`</ph> parameter would be retrieved by an application from &lt;xref:System.Net.Security.SslStream.TransportContext%2A&gt; property on the associated &lt;xref:System.Net.Security.SslStream&gt;.","pos":[305,630],"source":"       The <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> used for extended protection that is passed to this method in the `binding` parameter would be retrieved by an application from <xref:System.Net.Security.SslStream.TransportContext%2A> property on the associated <xref:System.Net.Security.SslStream>."},{"content":"When authentication succeeds, you must check the &lt;xref:System.Net.Security.NegotiateStream.IsEncrypted%2A&gt; and &lt;xref:System.Net.Security.NegotiateStream.IsSigned%2A&gt; properties to determine what security services are used by the &lt;xref:System.Net.Security.NegotiateStream&gt;.","pos":[637,909],"source":"       When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>."},{"content":"Check the &lt;xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A&gt; property to determine whether mutual authentication occurred.","pos":[910,1051],"source":" Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred."}]},{"pos":[23136,23229],"content":"The <xref:System.Net.NetworkCredential> that is used to establish the identity of the client.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Net.NetworkCredential&gt; that is used to establish the identity of the client.","pos":[0,93],"source":"The <xref:System.Net.NetworkCredential> that is used to establish the identity of the client."}]},{"pos":[23344,23457],"content":"The <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> that is used for extended protection.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Security.Authentication.ExtendedProtection.ChannelBinding&gt; that is used for extended protection.","pos":[0,113],"source":"The <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> that is used for extended protection."}]},{"pos":[23524,23609],"content":"The Service Principal Name (SPN) that uniquely identifies the server to authenticate.","needQuote":true,"needEscape":true,"nodes":[{"content":"The Service Principal Name (SPN) that uniquely identifies the server to authenticate.","pos":[0,85]}]},{"pos":[24167,24246],"content":"The authentication failed. You can use this object to retry the authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]},{"pos":[24407,24486],"content":"The authentication failed. You can use this object to retry the authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]},{"pos":[24905,24933],"content":"This object has been closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been closed.","pos":[0,28]}]},{"pos":[25807,25996],"content":"Called by clients to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified credentials and authentication options.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called by clients to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified credentials and authentication options.","pos":[0,189],"nodes":[{"content":"Called by clients to authenticate the client, and optionally the server, in a client-server connection.","pos":[0,103]},{"content":"The authentication process uses the specified credentials and authentication options.","pos":[104,189]}]}]},{"pos":[26009,26878],"content":"Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream. For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel> value. Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted. You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.       If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","needQuote":false,"needEscape":true,"nodes":[{"content":"Use the <ph id=\"ph1\">`requiredProtectionLevel`</ph> parameter to request security services for data transmitted using the authenticated stream.","pos":[0,125],"source":"Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream."},{"content":"For example, to have the data encrypted and signed, specify the &lt;xref:System.Net.Security.ProtectionLevel&gt; value.","pos":[126,239],"source":" For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel> value."},{"content":"Successful authentication does not guarantee that the requested &lt;xref:System.Net.Security.ProtectionLevel&gt; has been granted.","pos":[240,364],"source":" Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted."},{"content":"You must check the &lt;xref:System.Net.Security.NegotiateStream.IsEncrypted%2A&gt; and &lt;xref:System.Net.Security.NegotiateStream.IsSigned%2A&gt; properties to determine what security services are used by the &lt;xref:System.Net.Security.NegotiateStream&gt;.","pos":[365,607],"source":" You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>."},{"content":"If the authentication fails, you receive an &lt;xref:System.Security.Authentication.AuthenticationException&gt; or an &lt;xref:System.Security.Authentication.InvalidCredentialException&gt;.","pos":[614,791],"source":"       If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>."},{"content":"In this case, you can retry the authentication with a different credential.","pos":[792,867]}]},{"pos":[27241,27334],"content":"The <xref:System.Net.NetworkCredential> that is used to establish the identity of the client.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Net.NetworkCredential&gt; that is used to establish the identity of the client.","pos":[0,93],"source":"The <xref:System.Net.NetworkCredential> that is used to establish the identity of the client."}]},{"pos":[27401,27486],"content":"The Service Principal Name (SPN) that uniquely identifies the server to authenticate.","needQuote":true,"needEscape":true,"nodes":[{"content":"The Service Principal Name (SPN) that uniquely identifies the server to authenticate.","pos":[0,85]}]},{"pos":[27588,27712],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Net.Security.ProtectionLevel\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values, indicating the security services for the stream.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Net.Security.ProtectionLevel\"></xref> values, indicating the security services for the stream."},{"pos":[27830,27985],"content":"One of the <xref:System.Security.Principal.TokenImpersonationLevel> values, indicating how the server can use the client's credentials to access resources.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the &lt;xref:System.Security.Principal.TokenImpersonationLevel&gt; values, indicating how the server can use the client's credentials to access resources.","pos":[0,155],"source":"One of the <xref:System.Security.Principal.TokenImpersonationLevel> values, indicating how the server can use the client's credentials to access resources."}]},{"pos":[28184,28244],"content":"<ph id=\"ph1\">&lt;code&gt;allowedImpersonationLevel&lt;/code&gt;</ph> is not a valid value.","needQuote":true,"needEscape":true,"source":"<code>allowedImpersonationLevel</code> is not a valid value."},{"pos":[28347,28379],"content":"<ph id=\"ph1\">&lt;code&gt;targetName&lt;/code&gt;</ph> is null.","needQuote":true,"needEscape":true,"source":"<code>targetName</code> is null."},{"pos":[28534,28613],"content":"The authentication failed. You can use this object to retry the authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]},{"pos":[28774,28853],"content":"The authentication failed. You can use this object to retry the authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]},{"pos":[28960,28988],"content":"This object has been closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been closed.","pos":[0,28]}]},{"pos":[30349,30555],"content":"Called by clients to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified credential, authentication options, and channel binding.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called by clients to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified credential, authentication options, and channel binding.","pos":[0,206],"nodes":[{"content":"Called by clients to authenticate the client, and optionally the server, in a client-server connection.","pos":[0,103]},{"content":"The authentication process uses the specified credential, authentication options, and channel binding.","pos":[104,206]}]}]},{"pos":[30568,31771],"content":"Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream. For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel> value. Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted. You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.       The <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> used for extended protection that is passed to this method in the `binding` parameter would be retrieved by an application from <xref:System.Net.Security.SslStream.TransportContext%2A> property on the associated <xref:System.Net.Security.SslStream>.       If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","needQuote":false,"needEscape":true,"nodes":[{"content":"Use the <ph id=\"ph1\">`requiredProtectionLevel`</ph> parameter to request security services for data transmitted using the authenticated stream.","pos":[0,125],"source":"Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream."},{"content":"For example, to have the data encrypted and signed, specify the &lt;xref:System.Net.Security.ProtectionLevel&gt; value.","pos":[126,239],"source":" For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel> value."},{"content":"Successful authentication does not guarantee that the requested &lt;xref:System.Net.Security.ProtectionLevel&gt; has been granted.","pos":[240,364],"source":" Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted."},{"content":"You must check the &lt;xref:System.Net.Security.NegotiateStream.IsEncrypted%2A&gt; and &lt;xref:System.Net.Security.NegotiateStream.IsSigned%2A&gt; properties to determine what security services are used by the &lt;xref:System.Net.Security.NegotiateStream&gt;.","pos":[365,607],"source":" You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>."},{"content":"The &lt;xref:System.Security.Authentication.ExtendedProtection.ChannelBinding&gt; used for extended protection that is passed to this method in the <ph id=\"ph1\">`binding`</ph> parameter would be retrieved by an application from &lt;xref:System.Net.Security.SslStream.TransportContext%2A&gt; property on the associated &lt;xref:System.Net.Security.SslStream&gt;.","pos":[614,939],"source":"       The <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> used for extended protection that is passed to this method in the `binding` parameter would be retrieved by an application from <xref:System.Net.Security.SslStream.TransportContext%2A> property on the associated <xref:System.Net.Security.SslStream>."},{"content":"If the authentication fails, you receive an &lt;xref:System.Security.Authentication.AuthenticationException&gt; or an &lt;xref:System.Security.Authentication.InvalidCredentialException&gt;.","pos":[946,1123],"source":"       If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>."},{"content":"In this case, you can retry the authentication with a different credential.","pos":[1124,1199]}]},{"pos":[32208,32301],"content":"The <xref:System.Net.NetworkCredential> that is used to establish the identity of the client.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Net.NetworkCredential&gt; that is used to establish the identity of the client.","pos":[0,93],"source":"The <xref:System.Net.NetworkCredential> that is used to establish the identity of the client."}]},{"pos":[32416,32529],"content":"The <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> that is used for extended protection.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Security.Authentication.ExtendedProtection.ChannelBinding&gt; that is used for extended protection.","pos":[0,113],"source":"The <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> that is used for extended protection."}]},{"pos":[32596,32681],"content":"The Service Principal Name (SPN) that uniquely identifies the server to authenticate.","needQuote":true,"needEscape":true,"nodes":[{"content":"The Service Principal Name (SPN) that uniquely identifies the server to authenticate.","pos":[0,85]}]},{"pos":[32783,32907],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Net.Security.ProtectionLevel\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values, indicating the security services for the stream.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Net.Security.ProtectionLevel\"></xref> values, indicating the security services for the stream."},{"pos":[33025,33180],"content":"One of the <xref:System.Security.Principal.TokenImpersonationLevel> values, indicating how the server can use the client's credentials to access resources.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the &lt;xref:System.Security.Principal.TokenImpersonationLevel&gt; values, indicating how the server can use the client's credentials to access resources.","pos":[0,155],"source":"One of the <xref:System.Security.Principal.TokenImpersonationLevel> values, indicating how the server can use the client's credentials to access resources."}]},{"pos":[33698,33758],"content":"<ph id=\"ph1\">&lt;code&gt;allowedImpersonationLevel&lt;/code&gt;</ph> is not a valid value.","needQuote":true,"needEscape":true,"source":"<code>allowedImpersonationLevel</code> is not a valid value."},{"pos":[33913,33992],"content":"The authentication failed. You can use this object to retry the authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]},{"pos":[34153,34232],"content":"The authentication failed. You can use this object to retry the authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]},{"pos":[34651,34679],"content":"This object has been closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been closed.","pos":[0,28]}]},{"pos":[35126,35258],"content":"Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.","pos":[0,132]}]},{"pos":[35271,36409],"content":"The authentication uses the client's <xref:System.Net.CredentialCache.DefaultCredentials%2A>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel>, the security level is <xref:System.Net.Security.ProtectionLevel>, and mutual authentication is requested. The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.       When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.       If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","needQuote":false,"needEscape":true,"nodes":[{"content":"The authentication uses the client's <xref:System.Net.CredentialCache.DefaultCredentials%2A>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel>, the security level is <xref:System.Net.Security.ProtectionLevel>, and mutual authentication is requested. The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.       When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.       If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","pos":[0,1134],"nodes":[{"content":"The authentication uses the client's &lt;xref:System.Net.CredentialCache.DefaultCredentials%2A&gt;.","pos":[0,93],"source":"The authentication uses the client's <xref:System.Net.CredentialCache.DefaultCredentials%2A>."},{"content":"No Service Principal Name (SPN) is specified for the server.","pos":[94,154]},{"content":"The impersonation level is &lt;xref:System.Security.Principal.TokenImpersonationLevel&gt;, the security level is &lt;xref:System.Net.Security.ProtectionLevel&gt;, and mutual authentication is requested.","pos":[155,345],"source":" The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel>, the security level is <xref:System.Net.Security.ProtectionLevel>, and mutual authentication is requested."},{"content":"The &lt;xref:System.Net.Security.NegotiateStream&gt; class will construct the SPN used for mutual authentication.","pos":[346,453],"source":" The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication."},{"content":"When authentication succeeds, you must check the &lt;xref:System.Net.Security.NegotiateStream.IsEncrypted%2A&gt; and &lt;xref:System.Net.Security.NegotiateStream.IsSigned%2A&gt; properties to determine what security services are used by the &lt;xref:System.Net.Security.NegotiateStream&gt;.","pos":[460,732],"source":"       When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>."},{"content":"Check the &lt;xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A&gt; property to determine whether mutual authentication occurred.","pos":[733,874],"source":" Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred."},{"content":"If the authentication fails, you receive an &lt;xref:System.Security.Authentication.AuthenticationException&gt; or an &lt;xref:System.Security.Authentication.InvalidCredentialException&gt;.","pos":[881,1058],"source":"       If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>."},{"content":"In this case, you can retry the authentication with a different credential.","pos":[1059,1134]}]}]},{"pos":[36598,36705],"content":"Returns <xref:System.Threading.Tasks.Task>       The task object representing the asynchronous operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"Returns &lt;xref:System.Threading.Tasks.Task&gt;       The task object representing the asynchronous operation.","pos":[0,105],"source":"Returns <xref:System.Threading.Tasks.Task>       The task object representing the asynchronous operation."}]},{"pos":[36950,37029],"content":"The authentication failed. You can use this object to retry the authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]},{"pos":[37190,37269],"content":"The authentication failed. You can use this object to retry the authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]},{"pos":[37376,37404],"content":"This object has been closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been closed.","pos":[0,28]}]},{"pos":[38323,38520],"content":"Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified client credential.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified client credential.","pos":[0,197],"nodes":[{"content":"Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.","pos":[0,132]},{"content":"The authentication process uses the specified client credential.","pos":[133,197]}]}]},{"pos":[38533,39254],"content":"The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel>, the security level is <xref:System.Net.Security.ProtectionLevel>, and mutual authentication is requested. The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.       When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.","needQuote":false,"needEscape":true,"nodes":[{"content":"The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel>, the security level is <xref:System.Net.Security.ProtectionLevel>, and mutual authentication is requested. The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.       When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.","pos":[0,719],"nodes":[{"content":"The impersonation level is &lt;xref:System.Security.Principal.TokenImpersonationLevel&gt;, the security level is &lt;xref:System.Net.Security.ProtectionLevel&gt;, and mutual authentication is requested.","pos":[0,190],"source":"The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel>, the security level is <xref:System.Net.Security.ProtectionLevel>, and mutual authentication is requested."},{"content":"The &lt;xref:System.Net.Security.NegotiateStream&gt; class will construct the SPN used for mutual authentication.","pos":[191,298],"source":" The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication."},{"content":"When authentication succeeds, you must check the &lt;xref:System.Net.Security.NegotiateStream.IsEncrypted%2A&gt; and &lt;xref:System.Net.Security.NegotiateStream.IsSigned%2A&gt; properties to determine what security services are used by the &lt;xref:System.Net.Security.NegotiateStream&gt;.","pos":[305,577],"source":"       When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>."},{"content":"Check the &lt;xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A&gt; property to determine whether mutual authentication occurred.","pos":[578,719],"source":" Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred."}]}]},{"pos":[39507,39600],"content":"The <xref:System.Net.NetworkCredential> that is used to establish the identity of the client.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Net.NetworkCredential&gt; that is used to establish the identity of the client.","pos":[0,93],"source":"The <xref:System.Net.NetworkCredential> that is used to establish the identity of the client."}]},{"pos":[39667,39752],"content":"The Service Principal Name (SPN) that uniquely identifies the server to authenticate.","needQuote":true,"needEscape":true,"nodes":[{"content":"The Service Principal Name (SPN) that uniquely identifies the server to authenticate.","pos":[0,85]}]},{"pos":[39825,39932],"content":"Returns <xref:System.Threading.Tasks.Task>       The task object representing the asynchronous operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"Returns &lt;xref:System.Threading.Tasks.Task&gt;       The task object representing the asynchronous operation.","pos":[0,105],"source":"Returns <xref:System.Threading.Tasks.Task>       The task object representing the asynchronous operation."}]},{"pos":[40177,40256],"content":"The authentication failed. You can use this object to retry the authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]},{"pos":[40417,40496],"content":"The authentication failed. You can use this object to retry the authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]},{"pos":[40603,40631],"content":"This object has been closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been closed.","pos":[0,28]}]},{"pos":[41046,41134],"content":"<ph id=\"ph1\">&lt;code&gt;targetName&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>targetName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[41916,42137],"content":"Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified client credential and the channel binding.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified client credential and the channel binding.","pos":[0,221],"nodes":[{"content":"Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.","pos":[0,132]},{"content":"The authentication process uses the specified client credential and the channel binding.","pos":[133,221]}]}]},{"pos":[42150,43205],"content":"The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel>, the security level is <xref:System.Net.Security.ProtectionLevel>, and mutual authentication is requested. The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.       The <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> used for extended protection that is passed to this method in the `binding` parameter would be retrieved by an application from <xref:System.Net.Security.SslStream.TransportContext%2A> property on the associated <xref:System.Net.Security.SslStream>.       When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.","needQuote":false,"needEscape":true,"nodes":[{"content":"The impersonation level is &lt;xref:System.Security.Principal.TokenImpersonationLevel&gt;, the security level is &lt;xref:System.Net.Security.ProtectionLevel&gt;, and mutual authentication is requested.","pos":[0,190],"source":"The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel>, the security level is <xref:System.Net.Security.ProtectionLevel>, and mutual authentication is requested."},{"content":"The &lt;xref:System.Net.Security.NegotiateStream&gt; class will construct the SPN used for mutual authentication.","pos":[191,298],"source":" The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication."},{"content":"The &lt;xref:System.Security.Authentication.ExtendedProtection.ChannelBinding&gt; used for extended protection that is passed to this method in the <ph id=\"ph1\">`binding`</ph> parameter would be retrieved by an application from &lt;xref:System.Net.Security.SslStream.TransportContext%2A&gt; property on the associated &lt;xref:System.Net.Security.SslStream&gt;.","pos":[305,630],"source":"       The <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> used for extended protection that is passed to this method in the `binding` parameter would be retrieved by an application from <xref:System.Net.Security.SslStream.TransportContext%2A> property on the associated <xref:System.Net.Security.SslStream>."},{"content":"When authentication succeeds, you must check the &lt;xref:System.Net.Security.NegotiateStream.IsEncrypted%2A&gt; and &lt;xref:System.Net.Security.NegotiateStream.IsSigned%2A&gt; properties to determine what security services are used by the &lt;xref:System.Net.Security.NegotiateStream&gt;.","pos":[637,909],"source":"       When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>."},{"content":"Check the &lt;xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A&gt; property to determine whether mutual authentication occurred.","pos":[910,1051],"source":" Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred."}]},{"pos":[43532,43625],"content":"The <xref:System.Net.NetworkCredential> that is used to establish the identity of the client.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Net.NetworkCredential&gt; that is used to establish the identity of the client.","pos":[0,93],"source":"The <xref:System.Net.NetworkCredential> that is used to establish the identity of the client."}]},{"pos":[43740,43853],"content":"The <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> that is used for extended protection.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Security.Authentication.ExtendedProtection.ChannelBinding&gt; that is used for extended protection.","pos":[0,113],"source":"The <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> that is used for extended protection."}]},{"pos":[43920,44005],"content":"The Service Principal Name (SPN) that uniquely identifies the server to authenticate.","needQuote":true,"needEscape":true,"nodes":[{"content":"The Service Principal Name (SPN) that uniquely identifies the server to authenticate.","pos":[0,85]}]},{"pos":[44078,44185],"content":"Returns <xref:System.Threading.Tasks.Task>       The task object representing the asynchronous operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"Returns &lt;xref:System.Threading.Tasks.Task&gt;       The task object representing the asynchronous operation.","pos":[0,105],"source":"Returns <xref:System.Threading.Tasks.Task>       The task object representing the asynchronous operation."}]},{"pos":[44749,44828],"content":"The authentication failed. You can use this object to retry the authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]},{"pos":[44989,45068],"content":"The authentication failed. You can use this object to retry the authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]},{"pos":[45487,45515],"content":"This object has been closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been closed.","pos":[0,28]}]},{"pos":[46414,46632],"content":"Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified credentials and authentication options.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified credentials and authentication options.","pos":[0,218],"nodes":[{"content":"Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.","pos":[0,132]},{"content":"The authentication process uses the specified credentials and authentication options.","pos":[133,218]}]}]},{"pos":[46645,47514],"content":"Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream. For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel> value. Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted. You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.       If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","needQuote":false,"needEscape":true,"nodes":[{"content":"Use the <ph id=\"ph1\">`requiredProtectionLevel`</ph> parameter to request security services for data transmitted using the authenticated stream.","pos":[0,125],"source":"Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream."},{"content":"For example, to have the data encrypted and signed, specify the &lt;xref:System.Net.Security.ProtectionLevel&gt; value.","pos":[126,239],"source":" For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel> value."},{"content":"Successful authentication does not guarantee that the requested &lt;xref:System.Net.Security.ProtectionLevel&gt; has been granted.","pos":[240,364],"source":" Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted."},{"content":"You must check the &lt;xref:System.Net.Security.NegotiateStream.IsEncrypted%2A&gt; and &lt;xref:System.Net.Security.NegotiateStream.IsSigned%2A&gt; properties to determine what security services are used by the &lt;xref:System.Net.Security.NegotiateStream&gt;.","pos":[365,607],"source":" You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>."},{"content":"If the authentication fails, you receive an &lt;xref:System.Security.Authentication.AuthenticationException&gt; or an &lt;xref:System.Security.Authentication.InvalidCredentialException&gt;.","pos":[614,791],"source":"       If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>."},{"content":"In this case, you can retry the authentication with a different credential.","pos":[792,867]}]},{"pos":[47905,47998],"content":"The <xref:System.Net.NetworkCredential> that is used to establish the identity of the client.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Net.NetworkCredential&gt; that is used to establish the identity of the client.","pos":[0,93],"source":"The <xref:System.Net.NetworkCredential> that is used to establish the identity of the client."}]},{"pos":[48065,48150],"content":"The Service Principal Name (SPN) that uniquely identifies the server to authenticate.","needQuote":true,"needEscape":true,"nodes":[{"content":"The Service Principal Name (SPN) that uniquely identifies the server to authenticate.","pos":[0,85]}]},{"pos":[48252,48376],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Net.Security.ProtectionLevel\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values, indicating the security services for the stream.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Net.Security.ProtectionLevel\"></xref> values, indicating the security services for the stream."},{"pos":[48494,48649],"content":"One of the <xref:System.Security.Principal.TokenImpersonationLevel> values, indicating how the server can use the client's credentials to access resources.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the &lt;xref:System.Security.Principal.TokenImpersonationLevel&gt; values, indicating how the server can use the client's credentials to access resources.","pos":[0,155],"source":"One of the <xref:System.Security.Principal.TokenImpersonationLevel> values, indicating how the server can use the client's credentials to access resources."}]},{"pos":[48722,48829],"content":"Returns <xref:System.Threading.Tasks.Task>       The task object representing the asynchronous operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"Returns &lt;xref:System.Threading.Tasks.Task&gt;       The task object representing the asynchronous operation.","pos":[0,105],"source":"Returns <xref:System.Threading.Tasks.Task>       The task object representing the asynchronous operation."}]},{"pos":[49034,49094],"content":"<ph id=\"ph1\">&lt;code&gt;allowedImpersonationLevel&lt;/code&gt;</ph> is not a valid value.","needQuote":true,"needEscape":true,"source":"<code>allowedImpersonationLevel</code> is not a valid value."},{"pos":[49197,49229],"content":"<ph id=\"ph1\">&lt;code&gt;targetName&lt;/code&gt;</ph> is null.","needQuote":true,"needEscape":true,"source":"<code>targetName</code> is null."},{"pos":[49384,49463],"content":"The authentication failed. You can use this object to retry the authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]},{"pos":[49624,49703],"content":"The authentication failed. You can use this object to retry the authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]},{"pos":[49810,49838],"content":"This object has been closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been closed.","pos":[0,28]}]},{"pos":[51224,51459],"content":"Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified credential, authentication options, and channel binding.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified credential, authentication options, and channel binding.","pos":[0,235],"nodes":[{"content":"Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.","pos":[0,132]},{"content":"The authentication process uses the specified credential, authentication options, and channel binding.","pos":[133,235]}]}]},{"pos":[51472,52675],"content":"Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream. For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel> value. Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted. You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.       The <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> used for extended protection that is passed to this method in the `binding` parameter would be retrieved by an application from <xref:System.Net.Security.SslStream.TransportContext%2A> property on the associated <xref:System.Net.Security.SslStream>.       If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","needQuote":false,"needEscape":true,"nodes":[{"content":"Use the <ph id=\"ph1\">`requiredProtectionLevel`</ph> parameter to request security services for data transmitted using the authenticated stream.","pos":[0,125],"source":"Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream."},{"content":"For example, to have the data encrypted and signed, specify the &lt;xref:System.Net.Security.ProtectionLevel&gt; value.","pos":[126,239],"source":" For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel> value."},{"content":"Successful authentication does not guarantee that the requested &lt;xref:System.Net.Security.ProtectionLevel&gt; has been granted.","pos":[240,364],"source":" Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted."},{"content":"You must check the &lt;xref:System.Net.Security.NegotiateStream.IsEncrypted%2A&gt; and &lt;xref:System.Net.Security.NegotiateStream.IsSigned%2A&gt; properties to determine what security services are used by the &lt;xref:System.Net.Security.NegotiateStream&gt;.","pos":[365,607],"source":" You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>."},{"content":"The &lt;xref:System.Security.Authentication.ExtendedProtection.ChannelBinding&gt; used for extended protection that is passed to this method in the <ph id=\"ph1\">`binding`</ph> parameter would be retrieved by an application from &lt;xref:System.Net.Security.SslStream.TransportContext%2A&gt; property on the associated &lt;xref:System.Net.Security.SslStream&gt;.","pos":[614,939],"source":"       The <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> used for extended protection that is passed to this method in the `binding` parameter would be retrieved by an application from <xref:System.Net.Security.SslStream.TransportContext%2A> property on the associated <xref:System.Net.Security.SslStream>."},{"content":"If the authentication fails, you receive an &lt;xref:System.Security.Authentication.AuthenticationException&gt; or an &lt;xref:System.Security.Authentication.InvalidCredentialException&gt;.","pos":[946,1123],"source":"       If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>."},{"content":"In this case, you can retry the authentication with a different credential.","pos":[1124,1199]}]},{"pos":[53140,53233],"content":"The <xref:System.Net.NetworkCredential> that is used to establish the identity of the client.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Net.NetworkCredential&gt; that is used to establish the identity of the client.","pos":[0,93],"source":"The <xref:System.Net.NetworkCredential> that is used to establish the identity of the client."}]},{"pos":[53348,53461],"content":"The <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> that is used for extended protection.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Security.Authentication.ExtendedProtection.ChannelBinding&gt; that is used for extended protection.","pos":[0,113],"source":"The <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> that is used for extended protection."}]},{"pos":[53528,53613],"content":"The Service Principal Name (SPN) that uniquely identifies the server to authenticate.","needQuote":true,"needEscape":true,"nodes":[{"content":"The Service Principal Name (SPN) that uniquely identifies the server to authenticate.","pos":[0,85]}]},{"pos":[53715,53839],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Net.Security.ProtectionLevel\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values, indicating the security services for the stream.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Net.Security.ProtectionLevel\"></xref> values, indicating the security services for the stream."},{"pos":[53957,54112],"content":"One of the <xref:System.Security.Principal.TokenImpersonationLevel> values, indicating how the server can use the client's credentials to access resources.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the &lt;xref:System.Security.Principal.TokenImpersonationLevel&gt; values, indicating how the server can use the client's credentials to access resources.","pos":[0,155],"source":"One of the <xref:System.Security.Principal.TokenImpersonationLevel> values, indicating how the server can use the client's credentials to access resources."}]},{"pos":[54185,54292],"content":"Returns <xref:System.Threading.Tasks.Task>       The task object representing the asynchronous operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"Returns &lt;xref:System.Threading.Tasks.Task&gt;       The task object representing the asynchronous operation.","pos":[0,105],"source":"Returns <xref:System.Threading.Tasks.Task>       The task object representing the asynchronous operation."}]},{"pos":[54816,54876],"content":"<ph id=\"ph1\">&lt;code&gt;allowedImpersonationLevel&lt;/code&gt;</ph> is not a valid value.","needQuote":true,"needEscape":true,"source":"<code>allowedImpersonationLevel</code> is not a valid value."},{"pos":[55031,55110],"content":"The authentication failed. You can use this object to retry the authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]},{"pos":[55271,55350],"content":"The authentication failed. You can use this object to retry the authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]},{"pos":[55769,55797],"content":"This object has been closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been closed.","pos":[0,28]}]},{"pos":[56219,56322],"content":"Called by servers to authenticate the client, and optionally the server, in a client-server connection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called by servers to authenticate the client, and optionally the server, in a client-server connection.","pos":[0,103]}]},{"pos":[56335,57543],"content":"The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel>, and the security level is <xref:System.Net.Security.ProtectionLevel>.       When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.       This method blocks until the operation completes. To prevent blocking until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> method overloads.       If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","needQuote":false,"needEscape":true,"nodes":[{"content":"The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel>, and the security level is <xref:System.Net.Security.ProtectionLevel>.       When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.       This method blocks until the operation completes. To prevent blocking until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> method overloads.       If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","pos":[0,1202],"nodes":[{"content":"The authentication uses the server's &lt;xref:System.Net.CredentialCache.DefaultCredentials%2A&gt;.","pos":[0,93],"source":"The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>."},{"content":"No Service Principal Name (SPN) is specified for the server.","pos":[94,154]},{"content":"The impersonation level is &lt;xref:System.Security.Principal.TokenImpersonationLevel&gt;, and the security level is &lt;xref:System.Net.Security.ProtectionLevel&gt;.","pos":[155,309],"source":" The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel>, and the security level is <xref:System.Net.Security.ProtectionLevel>."},{"content":"When authentication succeeds, you must check the &lt;xref:System.Net.Security.NegotiateStream.IsEncrypted%2A&gt; and &lt;xref:System.Net.Security.NegotiateStream.IsSigned%2A&gt; properties to determine what security services are used by the &lt;xref:System.Net.Security.NegotiateStream&gt;.","pos":[316,588],"source":"       When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>."},{"content":"Check the &lt;xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A&gt; property to determine whether mutual authentication occurred.","pos":[589,730],"source":" Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred."},{"content":"This method blocks until the operation completes.","pos":[737,786]},{"content":"To prevent blocking until the operation completes, use one of the &lt;xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A&gt; method overloads.","pos":[787,942],"source":" To prevent blocking until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> method overloads."},{"content":"If the authentication fails, you receive an &lt;xref:System.Security.Authentication.AuthenticationException&gt; or an &lt;xref:System.Security.Authentication.InvalidCredentialException&gt;.","pos":[949,1126],"source":"       If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>."},{"content":"In this case, you can retry the authentication with a different credential.","pos":[1127,1202]}]}]},{"pos":[57870,57949],"content":"The authentication failed. You can use this object to retry the authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]},{"pos":[58110,58189],"content":"The authentication failed. You can use this object to retry the authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]},{"pos":[58296,58324],"content":"This object has been closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been closed.","pos":[0,28]}]},{"pos":[58427,58471],"content":"Windows 95 and Windows 98 are not supported.","needQuote":true,"needEscape":true,"nodes":[{"content":"Windows 95 and Windows 98 are not supported.","pos":[0,44]}]},{"pos":[59117,59294],"content":"Called by servers to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified extended protection policy.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called by servers to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified extended protection policy.","pos":[0,177],"nodes":[{"content":"Called by servers to authenticate the client, and optionally the server, in a client-server connection.","pos":[0,103]},{"content":"The authentication process uses the specified extended protection policy.","pos":[104,177]}]}]},{"pos":[59307,60798],"content":"The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel>, and the security level is <xref:System.Net.Security.ProtectionLevel>.       If the `policy` parameter is `null`, then an extended protection policy is used that has <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement>.       When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.       This method blocks until the operation completes. To prevent blocking until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> method overloads.       If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","needQuote":false,"needEscape":true,"nodes":[{"content":"The authentication uses the server's &lt;xref:System.Net.CredentialCache.DefaultCredentials%2A&gt;.","pos":[0,93],"source":"The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>."},{"content":"No Service Principal Name (SPN) is specified for the server.","pos":[94,154]},{"content":"The impersonation level is &lt;xref:System.Security.Principal.TokenImpersonationLevel&gt;, and the security level is &lt;xref:System.Net.Security.ProtectionLevel&gt;.","pos":[155,309],"source":" The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel>, and the security level is <xref:System.Net.Security.ProtectionLevel>."},{"content":"If the <ph id=\"ph1\">`policy`</ph> parameter is <ph id=\"ph2\">`null`</ph>, then an extended protection policy is used that has &lt;xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A&gt; set to &lt;xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement&gt;.","pos":[316,590],"source":"       If the `policy` parameter is `null`, then an extended protection policy is used that has <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement>."},{"content":"When authentication succeeds, you must check the &lt;xref:System.Net.Security.NegotiateStream.IsEncrypted%2A&gt; and &lt;xref:System.Net.Security.NegotiateStream.IsSigned%2A&gt; properties to determine what security services are used by the &lt;xref:System.Net.Security.NegotiateStream&gt;.","pos":[597,869],"source":"       When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>."},{"content":"Check the &lt;xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A&gt; property to determine whether mutual authentication occurred.","pos":[870,1011],"source":" Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred."},{"content":"This method blocks until the operation completes.","pos":[1018,1067]},{"content":"To prevent blocking until the operation completes, use one of the &lt;xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A&gt; method overloads.","pos":[1068,1223],"source":" To prevent blocking until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> method overloads."},{"content":"If the authentication fails, you receive an &lt;xref:System.Security.Authentication.AuthenticationException&gt; or an &lt;xref:System.Security.Authentication.InvalidCredentialException&gt;.","pos":[1230,1407],"source":"       If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>."},{"content":"In this case, you can retry the authentication with a different credential.","pos":[1408,1483]}]},{"pos":[61088,61225],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that is used for extended protection.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\"></xref> that is used for extended protection."},{"pos":[61404,61766],"content":"The &lt;xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding<bpt id=\"p1\">*</bpt>&gt; and &lt;xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames<ept id=\"p1\">*</ept>&gt; on the extended protection policy passed in the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">policy</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter are both <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding*> and <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames*> on the extended protection policy passed in the <code>policy</code> parameter are both <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[61921,62000],"content":"The authentication failed. You can use this object to retry the authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]},{"pos":[62161,62240],"content":"The authentication failed. You can use this object to retry the authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]},{"pos":[62343,62387],"content":"Windows 95 and Windows 98 are not supported.","needQuote":true,"needEscape":true,"nodes":[{"content":"Windows 95 and Windows 98 are not supported.","pos":[0,44]}]},{"pos":[62494,62522],"content":"This object has been closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been closed.","pos":[0,28]}]},{"pos":[62641,62831],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">policy</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter was set to <bpt id=\"p2\">&lt;xref href=\"System.Security.Authentication.ExtendedProtection.PolicyEnforcement\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> on a platform that does not support extended protection.","needQuote":true,"needEscape":true,"source":"The <code>policy</code> parameter was set to <xref href=\"System.Security.Authentication.ExtendedProtection.PolicyEnforcement\"></xref> on a platform that does not support extended protection."},{"pos":[63656,63852],"content":"Called by servers to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified server credentials and authentication options.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called by servers to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified server credentials and authentication options.","pos":[0,196],"nodes":[{"content":"Called by servers to authenticate the client, and optionally the server, in a client-server connection.","pos":[0,103]},{"content":"The authentication process uses the specified server credentials and authentication options.","pos":[104,196]}]}]},{"pos":[63865,64755],"content":"When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.       This method blocks until the operation completes. To prevent blocking until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> method overloads.       If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","needQuote":false,"needEscape":true,"nodes":[{"content":"When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.       This method blocks until the operation completes. To prevent blocking until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> method overloads.       If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","pos":[0,886],"nodes":[{"content":"When authentication succeeds, you must check the &lt;xref:System.Net.Security.NegotiateStream.IsEncrypted%2A&gt; and &lt;xref:System.Net.Security.NegotiateStream.IsSigned%2A&gt; properties to determine what security services are used by the &lt;xref:System.Net.Security.NegotiateStream&gt;.","pos":[0,272],"source":"When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>."},{"content":"Check the &lt;xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A&gt; property to determine whether mutual authentication occurred.","pos":[273,414],"source":" Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred."},{"content":"This method blocks until the operation completes.","pos":[421,470]},{"content":"To prevent blocking until the operation completes, use one of the &lt;xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A&gt; method overloads.","pos":[471,626],"source":" To prevent blocking until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> method overloads."},{"content":"If the authentication fails, you receive an &lt;xref:System.Security.Authentication.AuthenticationException&gt; or an &lt;xref:System.Security.Authentication.InvalidCredentialException&gt;.","pos":[633,810],"source":"       If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>."},{"content":"In this case, you can retry the authentication with a different credential.","pos":[811,886]}]}]},{"pos":[65100,65193],"content":"The <xref:System.Net.NetworkCredential> that is used to establish the identity of the server.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Net.NetworkCredential&gt; that is used to establish the identity of the server.","pos":[0,93],"source":"The <xref:System.Net.NetworkCredential> that is used to establish the identity of the server."}]},{"pos":[65295,65419],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Net.Security.ProtectionLevel\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values, indicating the security services for the stream.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Net.Security.ProtectionLevel\"></xref> values, indicating the security services for the stream."},{"pos":[65538,65693],"content":"One of the <xref:System.Security.Principal.TokenImpersonationLevel> values, indicating how the server can use the client's credentials to access resources.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the &lt;xref:System.Security.Principal.TokenImpersonationLevel&gt; values, indicating how the server can use the client's credentials to access resources.","pos":[0,155],"source":"One of the <xref:System.Security.Principal.TokenImpersonationLevel> values, indicating how the server can use the client's credentials to access resources."}]},{"pos":[65880,65968],"content":"<ph id=\"ph1\">&lt;code&gt;credential &lt;/code&gt;</ph>is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>credential </code>is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[66083,66307],"content":"<ph id=\"ph1\">&lt;code&gt;requiredImpersonationLevel&lt;/code&gt;</ph> must be <ph id=\"ph2\">&lt;xref:System.Security.Principal.TokenImpersonationLevel&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Security.Principal.TokenImpersonationLevel&gt;</ph>, or <ph id=\"ph4\">&lt;xref:System.Security.Principal.TokenImpersonationLevel&gt;</ph>,","needQuote":true,"needEscape":true,"source":"<code>requiredImpersonationLevel</code> must be <xref:System.Security.Principal.TokenImpersonationLevel>, <xref:System.Security.Principal.TokenImpersonationLevel>, or <xref:System.Security.Principal.TokenImpersonationLevel>,"},{"pos":[66462,66538],"content":"The authentication failed. You can use this object to try to r-authenticate.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed. You can use this object to try to r-authenticate.","pos":[0,76],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to try to r-authenticate.","pos":[27,76]}]}]},{"pos":[66699,66778],"content":"The authentication failed. You can use this object to retry the authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]},{"pos":[66885,66913],"content":"This object has been closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been closed.","pos":[0,28]}]},{"pos":[67328,67372],"content":"Windows 95 and Windows 98 are not supported.","needQuote":true,"needEscape":true,"nodes":[{"content":"Windows 95 and Windows 98 are not supported.","pos":[0,44]}]},{"pos":[68422,68647],"content":"Called by servers to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified server credentials, authentication options, and extended protection policy.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called by servers to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified server credentials, authentication options, and extended protection policy.","pos":[0,225],"nodes":[{"content":"Called by servers to authenticate the client, and optionally the server, in a client-server connection.","pos":[0,103]},{"content":"The authentication process uses the specified server credentials, authentication options, and extended protection policy.","pos":[104,225]}]}]},{"pos":[68660,69833],"content":"If the `policy` parameter is `null`, then an extended protection policy is used that has <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement>.       When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.       This method blocks until the operation completes. To prevent blocking until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> method overloads.       If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","needQuote":false,"needEscape":true,"nodes":[{"content":"If the <ph id=\"ph1\">`policy`</ph> parameter is <ph id=\"ph2\">`null`</ph>, then an extended protection policy is used that has &lt;xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A&gt; set to &lt;xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement&gt;.","pos":[0,274],"source":"If the `policy` parameter is `null`, then an extended protection policy is used that has <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement>."},{"content":"When authentication succeeds, you must check the &lt;xref:System.Net.Security.NegotiateStream.IsEncrypted%2A&gt; and &lt;xref:System.Net.Security.NegotiateStream.IsSigned%2A&gt; properties to determine what security services are used by the &lt;xref:System.Net.Security.NegotiateStream&gt;.","pos":[281,553],"source":"       When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>."},{"content":"Check the &lt;xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A&gt; property to determine whether mutual authentication occurred.","pos":[554,695],"source":" Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred."},{"content":"This method blocks until the operation completes.","pos":[702,751]},{"content":"To prevent blocking until the operation completes, use one of the &lt;xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A&gt; method overloads.","pos":[752,907],"source":" To prevent blocking until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> method overloads."},{"content":"If the authentication fails, you receive an &lt;xref:System.Security.Authentication.AuthenticationException&gt; or an &lt;xref:System.Security.Authentication.InvalidCredentialException&gt;.","pos":[914,1091],"source":"       If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>."},{"content":"In this case, you can retry the authentication with a different credential.","pos":[1092,1167]}]},{"pos":[70261,70354],"content":"The <xref:System.Net.NetworkCredential> that is used to establish the identity of the client.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Net.NetworkCredential&gt; that is used to establish the identity of the client.","pos":[0,93],"source":"The <xref:System.Net.NetworkCredential> that is used to establish the identity of the client."}]},{"pos":[70478,70615],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that is used for extended protection.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\"></xref> that is used for extended protection."},{"pos":[70717,70841],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Net.Security.ProtectionLevel\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values, indicating the security services for the stream.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Net.Security.ProtectionLevel\"></xref> values, indicating the security services for the stream."},{"pos":[70960,71115],"content":"One of the <xref:System.Security.Principal.TokenImpersonationLevel> values, indicating how the server can use the client's credentials to access resources.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the &lt;xref:System.Security.Principal.TokenImpersonationLevel&gt; values, indicating how the server can use the client's credentials to access resources.","pos":[0,155],"source":"One of the <xref:System.Security.Principal.TokenImpersonationLevel> values, indicating how the server can use the client's credentials to access resources."}]},{"pos":[71294,71656],"content":"The &lt;xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding<bpt id=\"p1\">*</bpt>&gt; and &lt;xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames<ept id=\"p1\">*</ept>&gt; on the extended protection policy passed in the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">policy</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter are both <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding*> and <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames*> on the extended protection policy passed in the <code>policy</code> parameter are both <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[71759,71847],"content":"<ph id=\"ph1\">&lt;code&gt;credential &lt;/code&gt;</ph>is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>credential </code>is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[71962,72186],"content":"<ph id=\"ph1\">&lt;code&gt;requiredImpersonationLevel&lt;/code&gt;</ph> must be <ph id=\"ph2\">&lt;xref:System.Security.Principal.TokenImpersonationLevel&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Security.Principal.TokenImpersonationLevel&gt;</ph>, or <ph id=\"ph4\">&lt;xref:System.Security.Principal.TokenImpersonationLevel&gt;</ph>,","needQuote":true,"needEscape":true,"source":"<code>requiredImpersonationLevel</code> must be <xref:System.Security.Principal.TokenImpersonationLevel>, <xref:System.Security.Principal.TokenImpersonationLevel>, or <xref:System.Security.Principal.TokenImpersonationLevel>,"},{"pos":[72341,72417],"content":"The authentication failed. You can use this object to try to r-authenticate.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed. You can use this object to try to r-authenticate.","pos":[0,76],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to try to r-authenticate.","pos":[27,76]}]}]},{"pos":[72578,72657],"content":"The authentication failed. You can use this object to retry the authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]},{"pos":[73072,73116],"content":"Windows 95 and Windows 98 are not supported.","needQuote":true,"needEscape":true,"nodes":[{"content":"Windows 95 and Windows 98 are not supported.","pos":[0,44]}]},{"pos":[73223,73251],"content":"This object has been closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been closed.","pos":[0,28]}]},{"pos":[73370,73560],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">policy</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter was set to <bpt id=\"p2\">&lt;xref href=\"System.Security.Authentication.ExtendedProtection.PolicyEnforcement\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> on a platform that does not support extended protection.","needQuote":true,"needEscape":true,"source":"The <code>policy</code> parameter was set to <xref href=\"System.Security.Authentication.ExtendedProtection.PolicyEnforcement\"></xref> on a platform that does not support extended protection."},{"pos":[74007,74139],"content":"Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.","pos":[0,132]}]},{"pos":[74152,75146],"content":"The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel>, and the security level is <xref:System.Net.Security.ProtectionLevel>.       When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.       If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","needQuote":false,"needEscape":true,"nodes":[{"content":"The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel>, and the security level is <xref:System.Net.Security.ProtectionLevel>.       When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.       If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","pos":[0,990],"nodes":[{"content":"The authentication uses the server's &lt;xref:System.Net.CredentialCache.DefaultCredentials%2A&gt;.","pos":[0,93],"source":"The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>."},{"content":"No Service Principal Name (SPN) is specified for the server.","pos":[94,154]},{"content":"The impersonation level is &lt;xref:System.Security.Principal.TokenImpersonationLevel&gt;, and the security level is &lt;xref:System.Net.Security.ProtectionLevel&gt;.","pos":[155,309],"source":" The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel>, and the security level is <xref:System.Net.Security.ProtectionLevel>."},{"content":"When authentication succeeds, you must check the &lt;xref:System.Net.Security.NegotiateStream.IsEncrypted%2A&gt; and &lt;xref:System.Net.Security.NegotiateStream.IsSigned%2A&gt; properties to determine what security services are used by the &lt;xref:System.Net.Security.NegotiateStream&gt;.","pos":[316,588],"source":"       When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>."},{"content":"Check the &lt;xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A&gt; property to determine whether mutual authentication occurred.","pos":[589,730],"source":" Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred."},{"content":"If the authentication fails, you receive an &lt;xref:System.Security.Authentication.AuthenticationException&gt; or an &lt;xref:System.Security.Authentication.InvalidCredentialException&gt;.","pos":[737,914],"source":"       If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>."},{"content":"In this case, you can retry the authentication with a different credential.","pos":[915,990]}]}]},{"pos":[75335,75442],"content":"Returns <xref:System.Threading.Tasks.Task>       The task object representing the asynchronous operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"Returns &lt;xref:System.Threading.Tasks.Task&gt;       The task object representing the asynchronous operation.","pos":[0,105],"source":"Returns <xref:System.Threading.Tasks.Task>       The task object representing the asynchronous operation."}]},{"pos":[75687,75766],"content":"The authentication failed. You can use this object to retry the authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]},{"pos":[75927,76006],"content":"The authentication failed. You can use this object to retry the authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]},{"pos":[76113,76141],"content":"This object has been closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been closed.","pos":[0,28]}]},{"pos":[76244,76288],"content":"Windows 95 and Windows 98 are not supported.","needQuote":true,"needEscape":true,"nodes":[{"content":"Windows 95 and Windows 98 are not supported.","pos":[0,44]}]},{"pos":[76959,77165],"content":"Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified extended protection policy.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified extended protection policy.","pos":[0,206],"nodes":[{"content":"Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.","pos":[0,132]},{"content":"The authentication process uses the specified extended protection policy.","pos":[133,206]}]}]},{"pos":[77178,78455],"content":"The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel>, and the security level is <xref:System.Net.Security.ProtectionLevel>.       If the `policy` parameter is `null`, then an extended protection policy is used that has <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement>.       When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.       If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","needQuote":false,"needEscape":true,"nodes":[{"content":"The authentication uses the server's &lt;xref:System.Net.CredentialCache.DefaultCredentials%2A&gt;.","pos":[0,93],"source":"The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>."},{"content":"No Service Principal Name (SPN) is specified for the server.","pos":[94,154]},{"content":"The impersonation level is &lt;xref:System.Security.Principal.TokenImpersonationLevel&gt;, and the security level is &lt;xref:System.Net.Security.ProtectionLevel&gt;.","pos":[155,309],"source":" The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel>, and the security level is <xref:System.Net.Security.ProtectionLevel>."},{"content":"If the <ph id=\"ph1\">`policy`</ph> parameter is <ph id=\"ph2\">`null`</ph>, then an extended protection policy is used that has &lt;xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A&gt; set to &lt;xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement&gt;.","pos":[316,590],"source":"       If the `policy` parameter is `null`, then an extended protection policy is used that has <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement>."},{"content":"When authentication succeeds, you must check the &lt;xref:System.Net.Security.NegotiateStream.IsEncrypted%2A&gt; and &lt;xref:System.Net.Security.NegotiateStream.IsSigned%2A&gt; properties to determine what security services are used by the &lt;xref:System.Net.Security.NegotiateStream&gt;.","pos":[597,869],"source":"       When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>."},{"content":"Check the &lt;xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A&gt; property to determine whether mutual authentication occurred.","pos":[870,1011],"source":" Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred."},{"content":"If the authentication fails, you receive an &lt;xref:System.Security.Authentication.AuthenticationException&gt; or an &lt;xref:System.Security.Authentication.InvalidCredentialException&gt;.","pos":[1018,1195],"source":"       If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>."},{"content":"In this case, you can retry the authentication with a different credential.","pos":[1196,1271]}]},{"pos":[78773,78910],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that is used for extended protection.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\"></xref> that is used for extended protection."},{"pos":[78983,79090],"content":"Returns <xref:System.Threading.Tasks.Task>       The task object representing the asynchronous operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"Returns &lt;xref:System.Threading.Tasks.Task&gt;       The task object representing the asynchronous operation.","pos":[0,105],"source":"Returns <xref:System.Threading.Tasks.Task>       The task object representing the asynchronous operation."}]},{"pos":[79275,79637],"content":"The &lt;xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding<bpt id=\"p1\">*</bpt>&gt; and &lt;xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames<ept id=\"p1\">*</ept>&gt; on the extended protection policy passed in the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">policy</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter are both <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding*> and <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames*> on the extended protection policy passed in the <code>policy</code> parameter are both <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[79792,79871],"content":"The authentication failed. You can use this object to retry the authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]},{"pos":[80032,80111],"content":"The authentication failed. You can use this object to retry the authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]},{"pos":[80214,80258],"content":"Windows 95 and Windows 98 are not supported.","needQuote":true,"needEscape":true,"nodes":[{"content":"Windows 95 and Windows 98 are not supported.","pos":[0,44]}]},{"pos":[80365,80393],"content":"This object has been closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been closed.","pos":[0,28]}]},{"pos":[80512,80702],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">policy</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter was set to <bpt id=\"p2\">&lt;xref href=\"System.Security.Authentication.ExtendedProtection.PolicyEnforcement\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> on a platform that does not support extended protection.","needQuote":true,"needEscape":true,"source":"The <code>policy</code> parameter was set to <xref href=\"System.Security.Authentication.ExtendedProtection.PolicyEnforcement\"></xref> on a platform that does not support extended protection."},{"pos":[81552,81777],"content":"Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified server credentials and authentication options.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified server credentials and authentication options.","pos":[0,225],"nodes":[{"content":"Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.","pos":[0,132]},{"content":"The authentication process uses the specified server credentials and authentication options.","pos":[133,225]}]}]},{"pos":[81790,82466],"content":"When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.       If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","needQuote":false,"needEscape":true,"nodes":[{"content":"When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.       If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","pos":[0,674],"nodes":[{"content":"When authentication succeeds, you must check the &lt;xref:System.Net.Security.NegotiateStream.IsEncrypted%2A&gt; and &lt;xref:System.Net.Security.NegotiateStream.IsSigned%2A&gt; properties to determine what security services are used by the &lt;xref:System.Net.Security.NegotiateStream&gt;.","pos":[0,272],"source":"When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>."},{"content":"Check the &lt;xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A&gt; property to determine whether mutual authentication occurred.","pos":[273,414],"source":" Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred."},{"content":"If the authentication fails, you receive an &lt;xref:System.Security.Authentication.AuthenticationException&gt; or an &lt;xref:System.Security.Authentication.InvalidCredentialException&gt;.","pos":[421,598],"source":"       If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>."},{"content":"In this case, you can retry the authentication with a different credential.","pos":[599,674]}]}]},{"pos":[82839,82932],"content":"The <xref:System.Net.NetworkCredential> that is used to establish the identity of the server.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Net.NetworkCredential&gt; that is used to establish the identity of the server.","pos":[0,93],"source":"The <xref:System.Net.NetworkCredential> that is used to establish the identity of the server."}]},{"pos":[83034,83158],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Net.Security.ProtectionLevel\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values, indicating the security services for the stream.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Net.Security.ProtectionLevel\"></xref> values, indicating the security services for the stream."},{"pos":[83277,83432],"content":"One of the <xref:System.Security.Principal.TokenImpersonationLevel> values, indicating how the server can use the client's credentials to access resources.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the &lt;xref:System.Security.Principal.TokenImpersonationLevel&gt; values, indicating how the server can use the client's credentials to access resources.","pos":[0,155],"source":"One of the <xref:System.Security.Principal.TokenImpersonationLevel> values, indicating how the server can use the client's credentials to access resources."}]},{"pos":[83505,83612],"content":"Returns <xref:System.Threading.Tasks.Task>       The task object representing the asynchronous operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"Returns &lt;xref:System.Threading.Tasks.Task&gt;       The task object representing the asynchronous operation.","pos":[0,105],"source":"Returns <xref:System.Threading.Tasks.Task>       The task object representing the asynchronous operation."}]},{"pos":[83805,83893],"content":"<ph id=\"ph1\">&lt;code&gt;credential &lt;/code&gt;</ph>is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>credential </code>is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[84008,84232],"content":"<ph id=\"ph1\">&lt;code&gt;requiredImpersonationLevel&lt;/code&gt;</ph> must be <ph id=\"ph2\">&lt;xref:System.Security.Principal.TokenImpersonationLevel&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Security.Principal.TokenImpersonationLevel&gt;</ph>, or <ph id=\"ph4\">&lt;xref:System.Security.Principal.TokenImpersonationLevel&gt;</ph>,","needQuote":true,"needEscape":true,"source":"<code>requiredImpersonationLevel</code> must be <xref:System.Security.Principal.TokenImpersonationLevel>, <xref:System.Security.Principal.TokenImpersonationLevel>, or <xref:System.Security.Principal.TokenImpersonationLevel>,"},{"pos":[84387,84463],"content":"The authentication failed. You can use this object to try to r-authenticate.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed. You can use this object to try to r-authenticate.","pos":[0,76],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to try to r-authenticate.","pos":[27,76]}]}]},{"pos":[84624,84703],"content":"The authentication failed. You can use this object to retry the authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]},{"pos":[84810,84838],"content":"This object has been closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been closed.","pos":[0,28]}]},{"pos":[85253,85297],"content":"Windows 95 and Windows 98 are not supported.","needQuote":true,"needEscape":true,"nodes":[{"content":"Windows 95 and Windows 98 are not supported.","pos":[0,44]}]},{"pos":[86372,86626],"content":"Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified server credentials, authentication options, and extended protection policy.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified server credentials, authentication options, and extended protection policy.","pos":[0,254],"nodes":[{"content":"Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.","pos":[0,132]},{"content":"The authentication process uses the specified server credentials, authentication options, and extended protection policy.","pos":[133,254]}]}]},{"pos":[86639,87598],"content":"If the `policy` parameter is `null`, then an extended protection policy is used that has <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement>.       When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.       If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","needQuote":false,"needEscape":true,"nodes":[{"content":"If the <ph id=\"ph1\">`policy`</ph> parameter is <ph id=\"ph2\">`null`</ph>, then an extended protection policy is used that has &lt;xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A&gt; set to &lt;xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement&gt;.","pos":[0,274],"source":"If the `policy` parameter is `null`, then an extended protection policy is used that has <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement>."},{"content":"When authentication succeeds, you must check the &lt;xref:System.Net.Security.NegotiateStream.IsEncrypted%2A&gt; and &lt;xref:System.Net.Security.NegotiateStream.IsSigned%2A&gt; properties to determine what security services are used by the &lt;xref:System.Net.Security.NegotiateStream&gt;.","pos":[281,553],"source":"       When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>."},{"content":"Check the &lt;xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A&gt; property to determine whether mutual authentication occurred.","pos":[554,695],"source":" Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred."},{"content":"If the authentication fails, you receive an &lt;xref:System.Security.Authentication.AuthenticationException&gt; or an &lt;xref:System.Security.Authentication.InvalidCredentialException&gt;.","pos":[702,879],"source":"       If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>."},{"content":"In this case, you can retry the authentication with a different credential.","pos":[880,955]}]},{"pos":[88054,88147],"content":"The <xref:System.Net.NetworkCredential> that is used to establish the identity of the client.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Net.NetworkCredential&gt; that is used to establish the identity of the client.","pos":[0,93],"source":"The <xref:System.Net.NetworkCredential> that is used to establish the identity of the client."}]},{"pos":[88271,88408],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that is used for extended protection.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\"></xref> that is used for extended protection."},{"pos":[88510,88634],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Net.Security.ProtectionLevel\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values, indicating the security services for the stream.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Net.Security.ProtectionLevel\"></xref> values, indicating the security services for the stream."},{"pos":[88753,88908],"content":"One of the <xref:System.Security.Principal.TokenImpersonationLevel> values, indicating how the server can use the client's credentials to access resources.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the &lt;xref:System.Security.Principal.TokenImpersonationLevel&gt; values, indicating how the server can use the client's credentials to access resources.","pos":[0,155],"source":"One of the <xref:System.Security.Principal.TokenImpersonationLevel> values, indicating how the server can use the client's credentials to access resources."}]},{"pos":[88981,89088],"content":"Returns <xref:System.Threading.Tasks.Task>       The task object representing the asynchronous operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"Returns &lt;xref:System.Threading.Tasks.Task&gt;       The task object representing the asynchronous operation.","pos":[0,105],"source":"Returns <xref:System.Threading.Tasks.Task>       The task object representing the asynchronous operation."}]},{"pos":[89273,89635],"content":"The &lt;xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding<bpt id=\"p1\">*</bpt>&gt; and &lt;xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames<ept id=\"p1\">*</ept>&gt; on the extended protection policy passed in the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">policy</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter are both <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding*> and <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames*> on the extended protection policy passed in the <code>policy</code> parameter are both <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[89738,89826],"content":"<ph id=\"ph1\">&lt;code&gt;credential &lt;/code&gt;</ph>is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>credential </code>is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[89941,90165],"content":"<ph id=\"ph1\">&lt;code&gt;requiredImpersonationLevel&lt;/code&gt;</ph> must be <ph id=\"ph2\">&lt;xref:System.Security.Principal.TokenImpersonationLevel&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Security.Principal.TokenImpersonationLevel&gt;</ph>, or <ph id=\"ph4\">&lt;xref:System.Security.Principal.TokenImpersonationLevel&gt;</ph>,","needQuote":true,"needEscape":true,"source":"<code>requiredImpersonationLevel</code> must be <xref:System.Security.Principal.TokenImpersonationLevel>, <xref:System.Security.Principal.TokenImpersonationLevel>, or <xref:System.Security.Principal.TokenImpersonationLevel>,"},{"pos":[90320,90396],"content":"The authentication failed. You can use this object to try to r-authenticate.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed. You can use this object to try to r-authenticate.","pos":[0,76],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to try to r-authenticate.","pos":[27,76]}]}]},{"pos":[90557,90636],"content":"The authentication failed. You can use this object to retry the authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]},{"pos":[91051,91095],"content":"Windows 95 and Windows 98 are not supported.","needQuote":true,"needEscape":true,"nodes":[{"content":"Windows 95 and Windows 98 are not supported.","pos":[0,44]}]},{"pos":[91202,91230],"content":"This object has been closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been closed.","pos":[0,28]}]},{"pos":[91349,91539],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">policy</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter was set to <bpt id=\"p2\">&lt;xref href=\"System.Security.Authentication.ExtendedProtection.PolicyEnforcement\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> on a platform that does not support extended protection.","needQuote":true,"needEscape":true,"source":"The <code>policy</code> parameter was set to <xref href=\"System.Security.Authentication.ExtendedProtection.PolicyEnforcement\"></xref> on a platform that does not support extended protection."},{"pos":[92118,92284],"content":"Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. This method does not block.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. This method does not block.","pos":[0,166],"nodes":[{"content":"Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection.","pos":[0,138]},{"content":"This method does not block.","pos":[139,166]}]}]},{"pos":[92297,93590],"content":"The authentication uses the client's <xref:System.Net.CredentialCache.DefaultCredentials%2A>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel>, and the security level is <xref:System.Net.Security.ProtectionLevel>. The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.       This method is asynchronous and does not block while the operation completes. To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method overloads.       The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> method. Typically, the method is invoked by the `asyncCallback` delegate. For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)       If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","needQuote":false,"needEscape":true,"nodes":[{"content":"The authentication uses the client's &lt;xref:System.Net.CredentialCache.DefaultCredentials%2A&gt;.","pos":[0,93],"source":"The authentication uses the client's <xref:System.Net.CredentialCache.DefaultCredentials%2A>."},{"content":"No Service Principal Name (SPN) is specified for the server.","pos":[94,154]},{"content":"The impersonation level is &lt;xref:System.Security.Principal.TokenImpersonationLevel&gt;, and the security level is &lt;xref:System.Net.Security.ProtectionLevel&gt;.","pos":[155,309],"source":" The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel>, and the security level is <xref:System.Net.Security.ProtectionLevel>."},{"content":"The &lt;xref:System.Net.Security.NegotiateStream&gt; class will construct the SPN used for mutual authentication.","pos":[310,417],"source":" The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication."},{"content":"This method is asynchronous and does not block while the operation completes.","pos":[424,501]},{"content":"To block until the operation completes, use one of the &lt;xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A&gt; method overloads.","pos":[502,641],"source":" To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method overloads."},{"content":"The asynchronous authentication operation must be completed by calling the &lt;xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A&gt; method.","pos":[648,800],"source":"       The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> method."},{"content":"Typically, the method is invoked by the <ph id=\"ph1\">`asyncCallback`</ph> delegate.","pos":[801,866],"source":" Typically, the method is invoked by the `asyncCallback` delegate."},{"content":"For detailed information about using the asynchronous programming model, see <bpt id=\"p1\">[</bpt>Calling Synchronous Methods Asynchronously<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>       If the authentication fails, you receive an &lt;xref:System.Security.Authentication.AuthenticationException&gt; or an &lt;xref:System.Security.Authentication.InvalidCredentialException&gt;.","pos":[867,1211],"source":" For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)       If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>."},{"content":"In this case, you can retry the authentication with a different credential.","pos":[1212,1287]}]},{"pos":[94131,94244],"content":"An <xref:System.AsyncCallback> delegate that references the method to invoke when the authentication is complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.AsyncCallback&gt; delegate that references the method to invoke when the authentication is complete.","pos":[0,113],"source":"An <xref:System.AsyncCallback> delegate that references the method to invoke when the authentication is complete."}]},{"pos":[94311,94460],"content":"A user-defined object containing information about the operation. This object is passed to the `asyncCallback` delegate when the operation completes.","needQuote":true,"needEscape":true,"nodes":[{"content":"A user-defined object containing information about the operation.","pos":[0,65]},{"content":"This object is passed to the <ph id=\"ph1\">`asyncCallback`</ph> delegate when the operation completes.","pos":[66,149],"source":" This object is passed to the `asyncCallback` delegate when the operation completes."}]},{"pos":[94524,94613],"content":"An <xref:System.IAsyncResult> object indicating the status of the asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.IAsyncResult&gt; object indicating the status of the asynchronous operation.","pos":[0,89],"source":"An <xref:System.IAsyncResult> object indicating the status of the asynchronous operation."}]},{"pos":[94857,94936],"content":"The authentication failed. You can use this object to retry the authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]},{"pos":[95097,95176],"content":"The authentication failed. You can use this object to retry the authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]},{"pos":[95283,95311],"content":"This object has been closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been closed.","pos":[0,28]}]},{"pos":[96363,96588],"content":"Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified credentials. This method does not block.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified credentials. This method does not block.","pos":[0,225],"nodes":[{"content":"Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection.","pos":[0,138]},{"content":"The authentication process uses the specified credentials.","pos":[139,197]},{"content":"This method does not block.","pos":[198,225]}]}]},{"pos":[96601,97468],"content":"This method is asynchronous and does not block while the operation completes. To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method overloads.       The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> method. Typically, the method is invoked by the `asyncCallback` delegate. For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)       If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","needQuote":false,"needEscape":true,"nodes":[{"content":"This method is asynchronous and does not block while the operation completes.","pos":[0,77]},{"content":"To block until the operation completes, use one of the &lt;xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A&gt; method overloads.","pos":[78,217],"source":" To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method overloads."},{"content":"The asynchronous authentication operation must be completed by calling the &lt;xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A&gt; method.","pos":[224,376],"source":"       The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> method."},{"content":"Typically, the method is invoked by the <ph id=\"ph1\">`asyncCallback`</ph> delegate.","pos":[377,442],"source":" Typically, the method is invoked by the `asyncCallback` delegate."},{"content":"For detailed information about using the asynchronous programming model, see <bpt id=\"p1\">[</bpt>Calling Synchronous Methods Asynchronously<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>       If the authentication fails, you receive an &lt;xref:System.Security.Authentication.AuthenticationException&gt; or an &lt;xref:System.Security.Authentication.InvalidCredentialException&gt;.","pos":[443,787],"source":" For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)       If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>."},{"content":"In this case, you can retry the authentication with a different credential.","pos":[788,863]}]},{"pos":[97754,97847],"content":"The <xref:System.Net.NetworkCredential> that is used to establish the identity of the client.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Net.NetworkCredential&gt; that is used to establish the identity of the client.","pos":[0,93],"source":"The <xref:System.Net.NetworkCredential> that is used to establish the identity of the client."}]},{"pos":[97914,97999],"content":"The Service Principal Name (SPN) that uniquely identifies the server to authenticate.","needQuote":true,"needEscape":true,"nodes":[{"content":"The Service Principal Name (SPN) that uniquely identifies the server to authenticate.","pos":[0,85]}]},{"pos":[98076,98189],"content":"An <xref:System.AsyncCallback> delegate that references the method to invoke when the authentication is complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.AsyncCallback&gt; delegate that references the method to invoke when the authentication is complete.","pos":[0,113],"source":"An <xref:System.AsyncCallback> delegate that references the method to invoke when the authentication is complete."}]},{"pos":[98256,98411],"content":"A user-defined object containing information about the write operation. This object is passed to the `asyncCallback` delegate when the operation completes.","needQuote":true,"needEscape":true,"nodes":[{"content":"A user-defined object containing information about the write operation.","pos":[0,71]},{"content":"This object is passed to the <ph id=\"ph1\">`asyncCallback`</ph> delegate when the operation completes.","pos":[72,155],"source":" This object is passed to the `asyncCallback` delegate when the operation completes."}]},{"pos":[98475,98564],"content":"An <xref:System.IAsyncResult> object indicating the status of the asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.IAsyncResult&gt; object indicating the status of the asynchronous operation.","pos":[0,89],"source":"An <xref:System.IAsyncResult> object indicating the status of the asynchronous operation."}]},{"pos":[99127,99206],"content":"The authentication failed. You can use this object to retry the authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]},{"pos":[99367,99446],"content":"The authentication failed. You can use this object to retry the authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]},{"pos":[99553,99581],"content":"This object has been closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been closed.","pos":[0,28]}]},{"pos":[100808,101053],"content":"Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified credentials and channel binding. This method does not block.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified credentials and channel binding. This method does not block.","pos":[0,245],"nodes":[{"content":"Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection.","pos":[0,138]},{"content":"The authentication process uses the specified credentials and channel binding.","pos":[139,217]},{"content":"This method does not block.","pos":[218,245]}]}]},{"pos":[101066,101933],"content":"This method is asynchronous and does not block while the operation completes. To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method overloads.       The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> method. Typically, the method is invoked by the `asyncCallback` delegate. For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)       If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","needQuote":false,"needEscape":true,"nodes":[{"content":"This method is asynchronous and does not block while the operation completes.","pos":[0,77]},{"content":"To block until the operation completes, use one of the &lt;xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A&gt; method overloads.","pos":[78,217],"source":" To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method overloads."},{"content":"The asynchronous authentication operation must be completed by calling the &lt;xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A&gt; method.","pos":[224,376],"source":"       The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> method."},{"content":"Typically, the method is invoked by the <ph id=\"ph1\">`asyncCallback`</ph> delegate.","pos":[377,442],"source":" Typically, the method is invoked by the `asyncCallback` delegate."},{"content":"For detailed information about using the asynchronous programming model, see <bpt id=\"p1\">[</bpt>Calling Synchronous Methods Asynchronously<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>       If the authentication fails, you receive an &lt;xref:System.Security.Authentication.AuthenticationException&gt; or an &lt;xref:System.Security.Authentication.InvalidCredentialException&gt;.","pos":[443,787],"source":" For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)       If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>."},{"content":"In this case, you can retry the authentication with a different credential.","pos":[788,863]}]},{"pos":[102293,102386],"content":"The <xref:System.Net.NetworkCredential> that is used to establish the identity of the client.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Net.NetworkCredential&gt; that is used to establish the identity of the client.","pos":[0,93],"source":"The <xref:System.Net.NetworkCredential> that is used to establish the identity of the client."}]},{"pos":[102501,102614],"content":"The <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> that is used for extended protection.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Security.Authentication.ExtendedProtection.ChannelBinding&gt; that is used for extended protection.","pos":[0,113],"source":"The <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> that is used for extended protection."}]},{"pos":[102681,102766],"content":"The Service Principal Name (SPN) that uniquely identifies the server to authenticate.","needQuote":true,"needEscape":true,"nodes":[{"content":"The Service Principal Name (SPN) that uniquely identifies the server to authenticate.","pos":[0,85]}]},{"pos":[102843,102956],"content":"An <xref:System.AsyncCallback> delegate that references the method to invoke when the authentication is complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.AsyncCallback&gt; delegate that references the method to invoke when the authentication is complete.","pos":[0,113],"source":"An <xref:System.AsyncCallback> delegate that references the method to invoke when the authentication is complete."}]},{"pos":[103023,103178],"content":"A user-defined object containing information about the write operation. This object is passed to the `asyncCallback` delegate when the operation completes.","needQuote":true,"needEscape":true,"nodes":[{"content":"A user-defined object containing information about the write operation.","pos":[0,71]},{"content":"This object is passed to the <ph id=\"ph1\">`asyncCallback`</ph> delegate when the operation completes.","pos":[72,155],"source":" This object is passed to the `asyncCallback` delegate when the operation completes."}]},{"pos":[103242,103331],"content":"An <xref:System.IAsyncResult> object indicating the status of the asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.IAsyncResult&gt; object indicating the status of the asynchronous operation.","pos":[0,89],"source":"An <xref:System.IAsyncResult> object indicating the status of the asynchronous operation."}]},{"pos":[103894,103973],"content":"The authentication failed. You can use this object to retry the authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]},{"pos":[104134,104213],"content":"The authentication failed. You can use this object to retry the authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]},{"pos":[104632,104660],"content":"This object has been closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been closed.","pos":[0,28]}]},{"pos":[105692,105944],"content":"Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified credentials and authentication options. This method does not block.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified credentials and authentication options. This method does not block.","pos":[0,252],"nodes":[{"content":"Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection.","pos":[0,138]},{"content":"The authentication process uses the specified credentials and authentication options.","pos":[139,224]},{"content":"This method does not block.","pos":[225,252]}]}]},{"pos":[105957,107440],"content":"Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream. For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel> value. Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted. You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.       This method is asynchronous and does not block while the operation completes. To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method overloads.       The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> method. Typically, the method is invoked by the `asyncCallback` delegate. For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)       If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","needQuote":false,"needEscape":true,"nodes":[{"content":"Use the <ph id=\"ph1\">`requiredProtectionLevel`</ph> parameter to request security services for data transmitted using the authenticated stream.","pos":[0,125],"source":"Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream."},{"content":"For example, to have the data encrypted and signed, specify the &lt;xref:System.Net.Security.ProtectionLevel&gt; value.","pos":[126,239],"source":" For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel> value."},{"content":"Successful authentication does not guarantee that the requested &lt;xref:System.Net.Security.ProtectionLevel&gt; has been granted.","pos":[240,364],"source":" Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted."},{"content":"You must check the &lt;xref:System.Net.Security.NegotiateStream.IsEncrypted%2A&gt; and &lt;xref:System.Net.Security.NegotiateStream.IsSigned%2A&gt; properties to determine what security services are used by the &lt;xref:System.Net.Security.NegotiateStream&gt;.","pos":[365,607],"source":" You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>."},{"content":"This method is asynchronous and does not block while the operation completes.","pos":[614,691]},{"content":"To block until the operation completes, use one of the &lt;xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A&gt; method overloads.","pos":[692,831],"source":" To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method overloads."},{"content":"The asynchronous authentication operation must be completed by calling the &lt;xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A&gt; method.","pos":[838,990],"source":"       The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> method."},{"content":"Typically, the method is invoked by the <ph id=\"ph1\">`asyncCallback`</ph> delegate.","pos":[991,1056],"source":" Typically, the method is invoked by the `asyncCallback` delegate."},{"content":"For detailed information about using the asynchronous programming model, see <bpt id=\"p1\">[</bpt>Calling Synchronous Methods Asynchronously<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>       If the authentication fails, you receive an &lt;xref:System.Security.Authentication.AuthenticationException&gt; or an &lt;xref:System.Security.Authentication.InvalidCredentialException&gt;.","pos":[1057,1401],"source":" For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)       If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>."},{"content":"In this case, you can retry the authentication with a different credential.","pos":[1402,1477]}]},{"pos":[107864,107957],"content":"The <xref:System.Net.NetworkCredential> that is used to establish the identity of the client.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Net.NetworkCredential&gt; that is used to establish the identity of the client.","pos":[0,93],"source":"The <xref:System.Net.NetworkCredential> that is used to establish the identity of the client."}]},{"pos":[108024,108109],"content":"The Service Principal Name (SPN) that uniquely identifies the server to authenticate.","needQuote":true,"needEscape":true,"nodes":[{"content":"The Service Principal Name (SPN) that uniquely identifies the server to authenticate.","pos":[0,85]}]},{"pos":[108211,108335],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Net.Security.ProtectionLevel\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values, indicating the security services for the stream.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Net.Security.ProtectionLevel\"></xref> values, indicating the security services for the stream."},{"pos":[108453,108608],"content":"One of the <xref:System.Security.Principal.TokenImpersonationLevel> values, indicating how the server can use the client's credentials to access resources.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the &lt;xref:System.Security.Principal.TokenImpersonationLevel&gt; values, indicating how the server can use the client's credentials to access resources.","pos":[0,155],"source":"One of the <xref:System.Security.Principal.TokenImpersonationLevel> values, indicating how the server can use the client's credentials to access resources."}]},{"pos":[108685,108798],"content":"An <xref:System.AsyncCallback> delegate that references the method to invoke when the authentication is complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.AsyncCallback&gt; delegate that references the method to invoke when the authentication is complete.","pos":[0,113],"source":"An <xref:System.AsyncCallback> delegate that references the method to invoke when the authentication is complete."}]},{"pos":[108865,109020],"content":"A user-defined object containing information about the write operation. This object is passed to the `asyncCallback` delegate when the operation completes.","needQuote":true,"needEscape":true,"nodes":[{"content":"A user-defined object containing information about the write operation.","pos":[0,71]},{"content":"This object is passed to the <ph id=\"ph1\">`asyncCallback`</ph> delegate when the operation completes.","pos":[72,155],"source":" This object is passed to the `asyncCallback` delegate when the operation completes."}]},{"pos":[109084,109173],"content":"An <xref:System.IAsyncResult> object indicating the status of the asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.IAsyncResult&gt; object indicating the status of the asynchronous operation.","pos":[0,89],"source":"An <xref:System.IAsyncResult> object indicating the status of the asynchronous operation."}]},{"pos":[109736,109815],"content":"The authentication failed. You can use this object to retry the authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]},{"pos":[109976,110055],"content":"The authentication failed. You can use this object to retry the authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]},{"pos":[110162,110190],"content":"This object has been closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been closed.","pos":[0,28]}]},{"pos":[111709,111979],"content":"Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified credentials, authentication options, and channel binding. This method does not block.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified credentials, authentication options, and channel binding. This method does not block.","pos":[0,270],"nodes":[{"content":"Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection.","pos":[0,138]},{"content":"The authentication process uses the specified credentials, authentication options, and channel binding.","pos":[139,242]},{"content":"This method does not block.","pos":[243,270]}]}]},{"pos":[111992,113475],"content":"Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream. For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel> value. Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted. You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.       This method is asynchronous and does not block while the operation completes. To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method overloads.       The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> method. Typically, the method is invoked by the `asyncCallback` delegate. For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)       If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","needQuote":false,"needEscape":true,"nodes":[{"content":"Use the <ph id=\"ph1\">`requiredProtectionLevel`</ph> parameter to request security services for data transmitted using the authenticated stream.","pos":[0,125],"source":"Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream."},{"content":"For example, to have the data encrypted and signed, specify the &lt;xref:System.Net.Security.ProtectionLevel&gt; value.","pos":[126,239],"source":" For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel> value."},{"content":"Successful authentication does not guarantee that the requested &lt;xref:System.Net.Security.ProtectionLevel&gt; has been granted.","pos":[240,364],"source":" Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted."},{"content":"You must check the &lt;xref:System.Net.Security.NegotiateStream.IsEncrypted%2A&gt; and &lt;xref:System.Net.Security.NegotiateStream.IsSigned%2A&gt; properties to determine what security services are used by the &lt;xref:System.Net.Security.NegotiateStream&gt;.","pos":[365,607],"source":" You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>."},{"content":"This method is asynchronous and does not block while the operation completes.","pos":[614,691]},{"content":"To block until the operation completes, use one of the &lt;xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A&gt; method overloads.","pos":[692,831],"source":" To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method overloads."},{"content":"The asynchronous authentication operation must be completed by calling the &lt;xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A&gt; method.","pos":[838,990],"source":"       The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> method."},{"content":"Typically, the method is invoked by the <ph id=\"ph1\">`asyncCallback`</ph> delegate.","pos":[991,1056],"source":" Typically, the method is invoked by the `asyncCallback` delegate."},{"content":"For detailed information about using the asynchronous programming model, see <bpt id=\"p1\">[</bpt>Calling Synchronous Methods Asynchronously<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>       If the authentication fails, you receive an &lt;xref:System.Security.Authentication.AuthenticationException&gt; or an &lt;xref:System.Security.Authentication.InvalidCredentialException&gt;.","pos":[1057,1401],"source":" For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)       If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>."},{"content":"In this case, you can retry the authentication with a different credential.","pos":[1402,1477]}]},{"pos":[113973,114066],"content":"The <xref:System.Net.NetworkCredential> that is used to establish the identity of the client.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Net.NetworkCredential&gt; that is used to establish the identity of the client.","pos":[0,93],"source":"The <xref:System.Net.NetworkCredential> that is used to establish the identity of the client."}]},{"pos":[114181,114294],"content":"The <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> that is used for extended protection.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Security.Authentication.ExtendedProtection.ChannelBinding&gt; that is used for extended protection.","pos":[0,113],"source":"The <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> that is used for extended protection."}]},{"pos":[114361,114446],"content":"The Service Principal Name (SPN) that uniquely identifies the server to authenticate.","needQuote":true,"needEscape":true,"nodes":[{"content":"The Service Principal Name (SPN) that uniquely identifies the server to authenticate.","pos":[0,85]}]},{"pos":[114548,114672],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Net.Security.ProtectionLevel\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values, indicating the security services for the stream.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Net.Security.ProtectionLevel\"></xref> values, indicating the security services for the stream."},{"pos":[114790,114945],"content":"One of the <xref:System.Security.Principal.TokenImpersonationLevel> values, indicating how the server can use the client's credentials to access resources.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the &lt;xref:System.Security.Principal.TokenImpersonationLevel&gt; values, indicating how the server can use the client's credentials to access resources.","pos":[0,155],"source":"One of the <xref:System.Security.Principal.TokenImpersonationLevel> values, indicating how the server can use the client's credentials to access resources."}]},{"pos":[115022,115135],"content":"An <xref:System.AsyncCallback> delegate that references the method to invoke when the authentication is complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.AsyncCallback&gt; delegate that references the method to invoke when the authentication is complete.","pos":[0,113],"source":"An <xref:System.AsyncCallback> delegate that references the method to invoke when the authentication is complete."}]},{"pos":[115202,115357],"content":"A user-defined object containing information about the write operation. This object is passed to the `asyncCallback` delegate when the operation completes.","needQuote":true,"needEscape":true,"nodes":[{"content":"A user-defined object containing information about the write operation.","pos":[0,71]},{"content":"This object is passed to the <ph id=\"ph1\">`asyncCallback`</ph> delegate when the operation completes.","pos":[72,155],"source":" This object is passed to the `asyncCallback` delegate when the operation completes."}]},{"pos":[115421,115510],"content":"An <xref:System.IAsyncResult> object indicating the status of the asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.IAsyncResult&gt; object indicating the status of the asynchronous operation.","pos":[0,89],"source":"An <xref:System.IAsyncResult> object indicating the status of the asynchronous operation."}]},{"pos":[116073,116152],"content":"The authentication failed. You can use this object to retry the authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]},{"pos":[116313,116392],"content":"The authentication failed. You can use this object to retry the authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]},{"pos":[116811,116839],"content":"This object has been closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been closed.","pos":[0,28]}]},{"pos":[117418,117584],"content":"Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. This method does not block.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. This method does not block.","pos":[0,166],"nodes":[{"content":"Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection.","pos":[0,138]},{"content":"This method does not block.","pos":[139,166]}]}]},{"pos":[117597,118735],"content":"The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel>, the security level is <xref:System.Net.Security.ProtectionLevel>.       When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.       To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method overloads.       If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","needQuote":false,"needEscape":true,"nodes":[{"content":"The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel>, the security level is <xref:System.Net.Security.ProtectionLevel>.       When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.       To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method overloads.       If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","pos":[0,1132],"nodes":[{"content":"The authentication uses the server's &lt;xref:System.Net.CredentialCache.DefaultCredentials%2A&gt;.","pos":[0,93],"source":"The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>."},{"content":"No Service Principal Name (SPN) is specified for the server.","pos":[94,154]},{"content":"The impersonation level is &lt;xref:System.Security.Principal.TokenImpersonationLevel&gt;, the security level is &lt;xref:System.Net.Security.ProtectionLevel&gt;.","pos":[155,305],"source":" The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel>, the security level is <xref:System.Net.Security.ProtectionLevel>."},{"content":"When authentication succeeds, you must check the &lt;xref:System.Net.Security.NegotiateStream.IsEncrypted%2A&gt; and &lt;xref:System.Net.Security.NegotiateStream.IsSigned%2A&gt; properties to determine what security services are used by the &lt;xref:System.Net.Security.NegotiateStream&gt;.","pos":[312,584],"source":"       When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>."},{"content":"Check the &lt;xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A&gt; property to determine whether mutual authentication occurred.","pos":[585,726],"source":" Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred."},{"content":"To block until the operation completes, use one of the &lt;xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A&gt; method overloads.","pos":[733,872],"source":"       To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method overloads."},{"content":"If the authentication fails, you receive an &lt;xref:System.Security.Authentication.AuthenticationException&gt; or an &lt;xref:System.Security.Authentication.InvalidCredentialException&gt;.","pos":[879,1056],"source":"       If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>."},{"content":"In this case, you can retry the authentication with a different credential.","pos":[1057,1132]}]}]},{"pos":[118956,119069],"content":"An <xref:System.AsyncCallback> delegate that references the method to invoke when the authentication is complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.AsyncCallback&gt; delegate that references the method to invoke when the authentication is complete.","pos":[0,113],"source":"An <xref:System.AsyncCallback> delegate that references the method to invoke when the authentication is complete."}]},{"pos":[119136,119285],"content":"A user-defined object containing information about the operation. This object is passed to the `asyncCallback` delegate when the operation completes.","needQuote":true,"needEscape":true,"nodes":[{"content":"A user-defined object containing information about the operation.","pos":[0,65]},{"content":"This object is passed to the <ph id=\"ph1\">`asyncCallback`</ph> delegate when the operation completes.","pos":[66,149],"source":" This object is passed to the `asyncCallback` delegate when the operation completes."}]},{"pos":[119349,119438],"content":"An <xref:System.IAsyncResult> object indicating the status of the asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.IAsyncResult&gt; object indicating the status of the asynchronous operation.","pos":[0,89],"source":"An <xref:System.IAsyncResult> object indicating the status of the asynchronous operation."}]},{"pos":[119682,119761],"content":"The authentication failed. You can use this object to retry the authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]},{"pos":[119922,120001],"content":"The authentication failed. You can use this object to retry the authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]},{"pos":[120108,120136],"content":"This object has been closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been closed.","pos":[0,28]}]},{"pos":[120239,120283],"content":"Windows 95 and Windows 98 are not supported.","needQuote":true,"needEscape":true,"nodes":[{"content":"Windows 95 and Windows 98 are not supported.","pos":[0,44]}]},{"pos":[121087,121327],"content":"Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified extended protection policy. This method does not block.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified extended protection policy. This method does not block.","pos":[0,240],"nodes":[{"content":"Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection.","pos":[0,138]},{"content":"The authentication process uses the specified extended protection policy.","pos":[139,212]},{"content":"This method does not block.","pos":[213,240]}]}]},{"pos":[121340,122761],"content":"The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel>, the security level is <xref:System.Net.Security.ProtectionLevel>.       If the `policy` parameter is `null`, then an extended protection policy is used that has <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement>.       When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.       To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method overloads.       If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","needQuote":false,"needEscape":true,"nodes":[{"content":"The authentication uses the server's &lt;xref:System.Net.CredentialCache.DefaultCredentials%2A&gt;.","pos":[0,93],"source":"The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>."},{"content":"No Service Principal Name (SPN) is specified for the server.","pos":[94,154]},{"content":"The impersonation level is &lt;xref:System.Security.Principal.TokenImpersonationLevel&gt;, the security level is &lt;xref:System.Net.Security.ProtectionLevel&gt;.","pos":[155,305],"source":" The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel>, the security level is <xref:System.Net.Security.ProtectionLevel>."},{"content":"If the <ph id=\"ph1\">`policy`</ph> parameter is <ph id=\"ph2\">`null`</ph>, then an extended protection policy is used that has &lt;xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A&gt; set to &lt;xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement&gt;.","pos":[312,586],"source":"       If the `policy` parameter is `null`, then an extended protection policy is used that has <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement>."},{"content":"When authentication succeeds, you must check the &lt;xref:System.Net.Security.NegotiateStream.IsEncrypted%2A&gt; and &lt;xref:System.Net.Security.NegotiateStream.IsSigned%2A&gt; properties to determine what security services are used by the &lt;xref:System.Net.Security.NegotiateStream&gt;.","pos":[593,865],"source":"       When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>."},{"content":"Check the &lt;xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A&gt; property to determine whether mutual authentication occurred.","pos":[866,1007],"source":" Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred."},{"content":"To block until the operation completes, use one of the &lt;xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A&gt; method overloads.","pos":[1014,1153],"source":"       To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method overloads."},{"content":"If the authentication fails, you receive an &lt;xref:System.Security.Authentication.AuthenticationException&gt; or an &lt;xref:System.Security.Authentication.InvalidCredentialException&gt;.","pos":[1160,1337],"source":"       If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>."},{"content":"In this case, you can retry the authentication with a different credential.","pos":[1338,1413]}]},{"pos":[123112,123249],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that is used for extended protection.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\"></xref> that is used for extended protection."},{"pos":[123326,123439],"content":"An <xref:System.AsyncCallback> delegate that references the method to invoke when the authentication is complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.AsyncCallback&gt; delegate that references the method to invoke when the authentication is complete.","pos":[0,113],"source":"An <xref:System.AsyncCallback> delegate that references the method to invoke when the authentication is complete."}]},{"pos":[123506,123661],"content":"A user-defined object containing information about the write operation. This object is passed to the `asyncCallback` delegate when the operation completes.","needQuote":true,"needEscape":true,"nodes":[{"content":"A user-defined object containing information about the write operation.","pos":[0,71]},{"content":"This object is passed to the <ph id=\"ph1\">`asyncCallback`</ph> delegate when the operation completes.","pos":[72,155],"source":" This object is passed to the `asyncCallback` delegate when the operation completes."}]},{"pos":[123725,123814],"content":"An <xref:System.IAsyncResult> object indicating the status of the asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.IAsyncResult&gt; object indicating the status of the asynchronous operation.","pos":[0,89],"source":"An <xref:System.IAsyncResult> object indicating the status of the asynchronous operation."}]},{"pos":[123998,124360],"content":"The &lt;xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding<bpt id=\"p1\">*</bpt>&gt; and &lt;xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames<ept id=\"p1\">*</ept>&gt; on the extended protection policy passed in the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">policy</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter are both <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding*> and <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames*> on the extended protection policy passed in the <code>policy</code> parameter are both <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[124515,124594],"content":"The authentication failed. You can use this object to retry the authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]},{"pos":[124755,124834],"content":"The authentication failed. You can use this object to retry the authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]},{"pos":[124937,124981],"content":"Windows 95 and Windows 98 are not supported.","needQuote":true,"needEscape":true,"nodes":[{"content":"Windows 95 and Windows 98 are not supported.","pos":[0,44]}]},{"pos":[125088,125116],"content":"This object has been closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been closed.","pos":[0,28]}]},{"pos":[125235,125425],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">policy</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter was set to <bpt id=\"p2\">&lt;xref href=\"System.Security.Authentication.ExtendedProtection.PolicyEnforcement\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> on a platform that does not support extended protection.","needQuote":true,"needEscape":true,"source":"The <code>policy</code> parameter was set to <xref href=\"System.Security.Authentication.ExtendedProtection.PolicyEnforcement\"></xref> on a platform that does not support extended protection."},{"pos":[126408,126667],"content":"Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified server credentials and authentication options. This method does not block.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified server credentials and authentication options. This method does not block.","pos":[0,259],"nodes":[{"content":"Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection.","pos":[0,138]},{"content":"The authentication process uses the specified server credentials and authentication options.","pos":[139,231]},{"content":"This method does not block.","pos":[232,259]}]}]},{"pos":[126680,128164],"content":"Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream. For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel> value. Successful authentication does not guarantee that, the requested <xref:System.Net.Security.ProtectionLevel> has been granted. You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.       This method is asynchronous and does not block while the operation completes. To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method overloads.       The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A> method. Typically, the method is invoked by the `asyncCallback` delegate. For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)       If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","needQuote":false,"needEscape":true,"nodes":[{"content":"Use the <ph id=\"ph1\">`requiredProtectionLevel`</ph> parameter to request security services for data transmitted using the authenticated stream.","pos":[0,125],"source":"Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream."},{"content":"For example, to have the data encrypted and signed, specify the &lt;xref:System.Net.Security.ProtectionLevel&gt; value.","pos":[126,239],"source":" For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel> value."},{"content":"Successful authentication does not guarantee that, the requested &lt;xref:System.Net.Security.ProtectionLevel&gt; has been granted.","pos":[240,365],"source":" Successful authentication does not guarantee that, the requested <xref:System.Net.Security.ProtectionLevel> has been granted."},{"content":"You must check the &lt;xref:System.Net.Security.NegotiateStream.IsEncrypted%2A&gt; and &lt;xref:System.Net.Security.NegotiateStream.IsSigned%2A&gt; properties to determine what security services are used by the &lt;xref:System.Net.Security.NegotiateStream&gt;.","pos":[366,608],"source":" You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>."},{"content":"This method is asynchronous and does not block while the operation completes.","pos":[615,692]},{"content":"To block until the operation completes, use one of the &lt;xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A&gt; method overloads.","pos":[693,832],"source":" To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method overloads."},{"content":"The asynchronous authentication operation must be completed by calling the &lt;xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A&gt; method.","pos":[839,991],"source":"       The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A> method."},{"content":"Typically, the method is invoked by the <ph id=\"ph1\">`asyncCallback`</ph> delegate.","pos":[992,1057],"source":" Typically, the method is invoked by the `asyncCallback` delegate."},{"content":"For detailed information about using the asynchronous programming model, see <bpt id=\"p1\">[</bpt>Calling Synchronous Methods Asynchronously<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>       If the authentication fails, you receive an &lt;xref:System.Security.Authentication.AuthenticationException&gt; or an &lt;xref:System.Security.Authentication.InvalidCredentialException&gt;.","pos":[1058,1402],"source":" For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)       If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>."},{"content":"In this case, you can retry the authentication with a different credential.","pos":[1403,1478]}]},{"pos":[128570,128663],"content":"The <xref:System.Net.NetworkCredential> that is used to establish the identity of the client.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Net.NetworkCredential&gt; that is used to establish the identity of the client.","pos":[0,93],"source":"The <xref:System.Net.NetworkCredential> that is used to establish the identity of the client."}]},{"pos":[128765,128889],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Net.Security.ProtectionLevel\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values, indicating the security services for the stream.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Net.Security.ProtectionLevel\"></xref> values, indicating the security services for the stream."},{"pos":[129008,129163],"content":"One of the <xref:System.Security.Principal.TokenImpersonationLevel> values, indicating how the server can use the client's credentials to access resources.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the &lt;xref:System.Security.Principal.TokenImpersonationLevel&gt; values, indicating how the server can use the client's credentials to access resources.","pos":[0,155],"source":"One of the <xref:System.Security.Principal.TokenImpersonationLevel> values, indicating how the server can use the client's credentials to access resources."}]},{"pos":[129240,129353],"content":"An <xref:System.AsyncCallback> delegate that references the method to invoke when the authentication is complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.AsyncCallback&gt; delegate that references the method to invoke when the authentication is complete.","pos":[0,113],"source":"An <xref:System.AsyncCallback> delegate that references the method to invoke when the authentication is complete."}]},{"pos":[129420,129569],"content":"A user-defined object containing information about the operation. This object is passed to the `asyncCallback` delegate when the operation completes.","needQuote":true,"needEscape":true,"nodes":[{"content":"A user-defined object containing information about the operation.","pos":[0,65]},{"content":"This object is passed to the <ph id=\"ph1\">`asyncCallback`</ph> delegate when the operation completes.","pos":[66,149],"source":" This object is passed to the `asyncCallback` delegate when the operation completes."}]},{"pos":[129633,129722],"content":"An <xref:System.IAsyncResult> object indicating the status of the asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.IAsyncResult&gt; object indicating the status of the asynchronous operation.","pos":[0,89],"source":"An <xref:System.IAsyncResult> object indicating the status of the asynchronous operation."}]},{"pos":[129914,130002],"content":"<ph id=\"ph1\">&lt;code&gt;credential&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>credential</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[130117,130341],"content":"<ph id=\"ph1\">&lt;code&gt;requiredImpersonationLevel&lt;/code&gt;</ph> must be <ph id=\"ph2\">&lt;xref:System.Security.Principal.TokenImpersonationLevel&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Security.Principal.TokenImpersonationLevel&gt;</ph>, or <ph id=\"ph4\">&lt;xref:System.Security.Principal.TokenImpersonationLevel&gt;</ph>,","needQuote":true,"needEscape":true,"source":"<code>requiredImpersonationLevel</code> must be <xref:System.Security.Principal.TokenImpersonationLevel>, <xref:System.Security.Principal.TokenImpersonationLevel>, or <xref:System.Security.Principal.TokenImpersonationLevel>,"},{"pos":[130496,130575],"content":"The authentication failed. You can use this object to retry the authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]},{"pos":[130736,130815],"content":"The authentication failed. You can use this object to retry the authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]},{"pos":[130922,130950],"content":"This object has been closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been closed.","pos":[0,28]}]},{"pos":[131365,131409],"content":"Windows 95 and Windows 98 are not supported.","needQuote":true,"needEscape":true,"nodes":[{"content":"Windows 95 and Windows 98 are not supported.","pos":[0,44]}]},{"pos":[132617,132905],"content":"Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified server credentials, authentication options, and extended protection policy. This method does not block.","needQuote":true,"needEscape":true,"nodes":[{"content":"Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified server credentials, authentication options, and extended protection policy. This method does not block.","pos":[0,288],"nodes":[{"content":"Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection.","pos":[0,138]},{"content":"The authentication process uses the specified server credentials, authentication options, and extended protection policy.","pos":[139,260]},{"content":"This method does not block.","pos":[261,288]}]}]},{"pos":[132918,134685],"content":"Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream. For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel> value. Successful authentication does not guarantee that, the requested <xref:System.Net.Security.ProtectionLevel> has been granted. You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.       If the `policy` parameter is `null`, then an extended protection policy is used that has <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement>.       This method is asynchronous and does not block while the operation completes. To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method overloads.       The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A> method. Typically, the method is invoked by the `asyncCallback` delegate. For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)       If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.","needQuote":false,"needEscape":true,"nodes":[{"content":"Use the <ph id=\"ph1\">`requiredProtectionLevel`</ph> parameter to request security services for data transmitted using the authenticated stream.","pos":[0,125],"source":"Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream."},{"content":"For example, to have the data encrypted and signed, specify the &lt;xref:System.Net.Security.ProtectionLevel&gt; value.","pos":[126,239],"source":" For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel> value."},{"content":"Successful authentication does not guarantee that, the requested &lt;xref:System.Net.Security.ProtectionLevel&gt; has been granted.","pos":[240,365],"source":" Successful authentication does not guarantee that, the requested <xref:System.Net.Security.ProtectionLevel> has been granted."},{"content":"You must check the &lt;xref:System.Net.Security.NegotiateStream.IsEncrypted%2A&gt; and &lt;xref:System.Net.Security.NegotiateStream.IsSigned%2A&gt; properties to determine what security services are used by the &lt;xref:System.Net.Security.NegotiateStream&gt;.","pos":[366,608],"source":" You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>."},{"content":"If the <ph id=\"ph1\">`policy`</ph> parameter is <ph id=\"ph2\">`null`</ph>, then an extended protection policy is used that has &lt;xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A&gt; set to &lt;xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement&gt;.","pos":[615,889],"source":"       If the `policy` parameter is `null`, then an extended protection policy is used that has <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement>."},{"content":"This method is asynchronous and does not block while the operation completes.","pos":[896,973]},{"content":"To block until the operation completes, use one of the &lt;xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A&gt; method overloads.","pos":[974,1113],"source":" To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method overloads."},{"content":"The asynchronous authentication operation must be completed by calling the &lt;xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A&gt; method.","pos":[1120,1272],"source":"       The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A> method."},{"content":"Typically, the method is invoked by the <ph id=\"ph1\">`asyncCallback`</ph> delegate.","pos":[1273,1338],"source":" Typically, the method is invoked by the `asyncCallback` delegate."},{"content":"For detailed information about using the asynchronous programming model, see <bpt id=\"p1\">[</bpt>Calling Synchronous Methods Asynchronously<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>       If the authentication fails, you receive an &lt;xref:System.Security.Authentication.AuthenticationException&gt; or an &lt;xref:System.Security.Authentication.InvalidCredentialException&gt;.","pos":[1339,1683],"source":" For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)       If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>."},{"content":"In this case, you can retry the authentication with a different credential.","pos":[1684,1759]}]},{"pos":[135174,135267],"content":"The <xref:System.Net.NetworkCredential> that is used to establish the identity of the client.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Net.NetworkCredential&gt; that is used to establish the identity of the client.","pos":[0,93],"source":"The <xref:System.Net.NetworkCredential> that is used to establish the identity of the client."}]},{"pos":[135391,135528],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that is used for extended protection.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\"></xref> that is used for extended protection."},{"pos":[135630,135754],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Net.Security.ProtectionLevel\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values, indicating the security services for the stream.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Net.Security.ProtectionLevel\"></xref> values, indicating the security services for the stream."},{"pos":[135873,136028],"content":"One of the <xref:System.Security.Principal.TokenImpersonationLevel> values, indicating how the server can use the client's credentials to access resources.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the &lt;xref:System.Security.Principal.TokenImpersonationLevel&gt; values, indicating how the server can use the client's credentials to access resources.","pos":[0,155],"source":"One of the <xref:System.Security.Principal.TokenImpersonationLevel> values, indicating how the server can use the client's credentials to access resources."}]},{"pos":[136105,136218],"content":"An <xref:System.AsyncCallback> delegate that references the method to invoke when the authentication is complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.AsyncCallback&gt; delegate that references the method to invoke when the authentication is complete.","pos":[0,113],"source":"An <xref:System.AsyncCallback> delegate that references the method to invoke when the authentication is complete."}]},{"pos":[136285,136440],"content":"A user-defined object containing information about the write operation. This object is passed to the `asyncCallback` delegate when the operation completes.","needQuote":true,"needEscape":true,"nodes":[{"content":"A user-defined object containing information about the write operation.","pos":[0,71]},{"content":"This object is passed to the <ph id=\"ph1\">`asyncCallback`</ph> delegate when the operation completes.","pos":[72,155],"source":" This object is passed to the `asyncCallback` delegate when the operation completes."}]},{"pos":[136504,136593],"content":"An <xref:System.IAsyncResult> object indicating the status of the asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.IAsyncResult&gt; object indicating the status of the asynchronous operation.","pos":[0,89],"source":"An <xref:System.IAsyncResult> object indicating the status of the asynchronous operation."}]},{"pos":[136777,137139],"content":"The &lt;xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding<bpt id=\"p1\">*</bpt>&gt; and &lt;xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames<ept id=\"p1\">*</ept>&gt; on the extended protection policy passed in the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">policy</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter are both <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding*> and <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames*> on the extended protection policy passed in the <code>policy</code> parameter are both <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[137242,137330],"content":"<ph id=\"ph1\">&lt;code&gt;credential&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>credential</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[137445,137669],"content":"<ph id=\"ph1\">&lt;code&gt;requiredImpersonationLevel&lt;/code&gt;</ph> must be <ph id=\"ph2\">&lt;xref:System.Security.Principal.TokenImpersonationLevel&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Security.Principal.TokenImpersonationLevel&gt;</ph>, or <ph id=\"ph4\">&lt;xref:System.Security.Principal.TokenImpersonationLevel&gt;</ph>,","needQuote":true,"needEscape":true,"source":"<code>requiredImpersonationLevel</code> must be <xref:System.Security.Principal.TokenImpersonationLevel>, <xref:System.Security.Principal.TokenImpersonationLevel>, or <xref:System.Security.Principal.TokenImpersonationLevel>,"},{"pos":[137824,137903],"content":"The authentication failed. You can use this object to retry the authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]},{"pos":[138064,138143],"content":"The authentication failed. You can use this object to retry the authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]},{"pos":[138558,138602],"content":"Windows 95 and Windows 98 are not supported.","needQuote":true,"needEscape":true,"nodes":[{"content":"Windows 95 and Windows 98 are not supported.","pos":[0,44]}]},{"pos":[138709,138737],"content":"This object has been closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been closed.","pos":[0,28]}]},{"pos":[138856,139046],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">policy</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter was set to <bpt id=\"p2\">&lt;xref href=\"System.Security.Authentication.ExtendedProtection.PolicyEnforcement\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> on a platform that does not support extended protection.","needQuote":true,"needEscape":true,"source":"The <code>policy</code> parameter was set to <xref href=\"System.Security.Authentication.ExtendedProtection.PolicyEnforcement\"></xref> on a platform that does not support extended protection."},{"pos":[139682,139789],"content":"Begins an asynchronous read operation that reads data from the stream and stores it in the specified array.","needQuote":true,"needEscape":true,"nodes":[{"content":"Begins an asynchronous read operation that reads data from the stream and stores it in the specified array.","pos":[0,107]}]},{"pos":[139802,141376],"content":"If encryption, signing, or encryption and signing are enabled, the read operation reads the data from the underlying stream, checks the integrity of the data, and decrypts it. If no security services such as data encryption or signing are in use, this method starts an asynchronous read operation on the underlying stream.       This method is asynchronous and does not block while the operation completes. To block until the operation completes, use the <xref:System.Net.Security.NegotiateStream.Read%2A> method.       The asynchronous read operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndRead%2A> method. Typically, the method is invoked by the `asyncCallback` delegate. For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)       The <xref:System.Net.Security.NegotiateStream> class does not support multiple simultaneous read operations. If you attempt to start a read operation while another read operation is already executing on the same stream, a <xref:System.NotSupportedException> exception will be thrown.       You cannot call this method until you have successfully authenticated. To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.","needQuote":false,"needEscape":true,"nodes":[{"content":"If encryption, signing, or encryption and signing are enabled, the read operation reads the data from the underlying stream, checks the integrity of the data, and decrypts it.","pos":[0,175]},{"content":"If no security services such as data encryption or signing are in use, this method starts an asynchronous read operation on the underlying stream.","pos":[176,322]},{"content":"This method is asynchronous and does not block while the operation completes.","pos":[329,406]},{"content":"To block until the operation completes, use the &lt;xref:System.Net.Security.NegotiateStream.Read%2A&gt; method.","pos":[407,513],"source":" To block until the operation completes, use the <xref:System.Net.Security.NegotiateStream.Read%2A> method."},{"content":"The asynchronous read operation must be completed by calling the &lt;xref:System.Net.Security.NegotiateStream.EndRead%2A&gt; method.","pos":[520,646],"source":"       The asynchronous read operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndRead%2A> method."},{"content":"Typically, the method is invoked by the <ph id=\"ph1\">`asyncCallback`</ph> delegate.","pos":[647,712],"source":" Typically, the method is invoked by the `asyncCallback` delegate."},{"content":"For detailed information about using the asynchronous programming model, see <bpt id=\"p1\">[</bpt>Calling Synchronous Methods Asynchronously<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>       The &lt;xref:System.Net.Security.NegotiateStream&gt; class does not support multiple simultaneous read operations.","pos":[713,988],"source":" For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)       The <xref:System.Net.Security.NegotiateStream> class does not support multiple simultaneous read operations."},{"content":"If you attempt to start a read operation while another read operation is already executing on the same stream, a &lt;xref:System.NotSupportedException&gt; exception will be thrown.","pos":[989,1163],"source":" If you attempt to start a read operation while another read operation is already executing on the same stream, a <xref:System.NotSupportedException> exception will be thrown."},{"content":"You cannot call this method until you have successfully authenticated.","pos":[1170,1240]},{"content":"To authenticate, call one of the &lt;xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A&gt;, &lt;xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A&gt;, &lt;xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A&gt;, or &lt;xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A&gt; methods.","pos":[1241,1566],"source":" To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods."}]},{"pos":[142004,142076],"content":"A <xref:System.Byte> array that receives the bytes read from the stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Byte&gt; array that receives the bytes read from the stream.","pos":[0,72],"source":"A <xref:System.Byte> array that receives the bytes read from the stream."}]},{"pos":[142138,142231],"content":"The zero-based location in <ph id=\"ph1\">`buffer`</ph> at which to begin storing the data read from this stream.","needQuote":true,"needEscape":true,"source":"The zero-based location in `buffer` at which to begin storing the data read from this stream."},{"pos":[142292,142344],"content":"The maximum number of bytes to read from the stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"The maximum number of bytes to read from the stream.","pos":[0,52]}]},{"pos":[142421,142534],"content":"An <xref:System.AsyncCallback> delegate that references the method to invoke when the read operation is complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.AsyncCallback&gt; delegate that references the method to invoke when the read operation is complete.","pos":[0,113],"source":"An <xref:System.AsyncCallback> delegate that references the method to invoke when the read operation is complete."}]},{"pos":[142601,142755],"content":"A user-defined object containing information about the read operation. This object is passed to the `asyncCallback` delegate when the operation completes.","needQuote":true,"needEscape":true,"nodes":[{"content":"A user-defined object containing information about the read operation.","pos":[0,70]},{"content":"This object is passed to the <ph id=\"ph1\">`asyncCallback`</ph> delegate when the operation completes.","pos":[71,154],"source":" This object is passed to the `asyncCallback` delegate when the operation completes."}]},{"pos":[142819,142908],"content":"An <xref:System.IAsyncResult> object indicating the status of the asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.IAsyncResult&gt; object indicating the status of the asynchronous operation.","pos":[0,89],"source":"An <xref:System.IAsyncResult> object indicating the status of the asynchronous operation."}]},{"pos":[143084,143168],"content":"<ph id=\"ph1\">&lt;code&gt;buffer&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>buffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[143820,143866],"content":"There is already a read operation in progress.","needQuote":true,"needEscape":true,"nodes":[{"content":"There is already a read operation in progress.","pos":[0,46]}]},{"pos":[143973,144001],"content":"This object has been closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been closed.","pos":[0,28]}]},{"pos":[144112,144144],"content":"Authentication has not occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"Authentication has not occurred.","pos":[0,32]}]},{"pos":[144785,144896],"content":"Begins an asynchronous write operation that writes <xref:System.Byte>s from the specified buffer to the stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Begins an asynchronous write operation that writes &lt;xref:System.Byte&gt;s from the specified buffer to the stream.","pos":[0,111],"source":"Begins an asynchronous write operation that writes <xref:System.Byte>s from the specified buffer to the stream."}]},{"pos":[144909,146504],"content":"If encryption, signing, or encryption and signing are enabled, this method reads the data from buffer, encrypts, signs, or encrypts and signs it, and transmits it using the underlying stream. If no security services such as data encryption or signing are in use, this method starts an asynchronous write operation on the underlying stream.       This method is asynchronous and does not block while the operation completes. To block until the operation completes, use the <xref:System.Net.Security.NegotiateStream.Read%2A> method.       The asynchronous read operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndWrite%2A> method. Typically, the method is invoked by the `asyncCallback` delegate. For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)       The <xref:System.Net.Security.NegotiateStream> class does not support multiple simultaneous write operations. If you attempt to start a write operation while another write operation is already executing on the same stream, a <xref:System.NotSupportedException> exception will be thrown.       You cannot call this method until you have successfully authenticated. To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.","needQuote":false,"needEscape":true,"nodes":[{"content":"If encryption, signing, or encryption and signing are enabled, this method reads the data from buffer, encrypts, signs, or encrypts and signs it, and transmits it using the underlying stream.","pos":[0,191]},{"content":"If no security services such as data encryption or signing are in use, this method starts an asynchronous write operation on the underlying stream.","pos":[192,339]},{"content":"This method is asynchronous and does not block while the operation completes.","pos":[346,423]},{"content":"To block until the operation completes, use the &lt;xref:System.Net.Security.NegotiateStream.Read%2A&gt; method.","pos":[424,530],"source":" To block until the operation completes, use the <xref:System.Net.Security.NegotiateStream.Read%2A> method."},{"content":"The asynchronous read operation must be completed by calling the &lt;xref:System.Net.Security.NegotiateStream.EndWrite%2A&gt; method.","pos":[537,664],"source":"       The asynchronous read operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndWrite%2A> method."},{"content":"Typically, the method is invoked by the <ph id=\"ph1\">`asyncCallback`</ph> delegate.","pos":[665,730],"source":" Typically, the method is invoked by the `asyncCallback` delegate."},{"content":"For detailed information about using the asynchronous programming model, see <bpt id=\"p1\">[</bpt>Calling Synchronous Methods Asynchronously<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>       The &lt;xref:System.Net.Security.NegotiateStream&gt; class does not support multiple simultaneous write operations.","pos":[731,1007],"source":" For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)       The <xref:System.Net.Security.NegotiateStream> class does not support multiple simultaneous write operations."},{"content":"If you attempt to start a write operation while another write operation is already executing on the same stream, a &lt;xref:System.NotSupportedException&gt; exception will be thrown.","pos":[1008,1184],"source":" If you attempt to start a write operation while another write operation is already executing on the same stream, a <xref:System.NotSupportedException> exception will be thrown."},{"content":"You cannot call this method until you have successfully authenticated.","pos":[1191,1261]},{"content":"To authenticate, call one of the &lt;xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A&gt;, &lt;xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A&gt;, &lt;xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A&gt;, or &lt;xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A&gt; methods.","pos":[1262,1587],"source":" To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods."}]},{"pos":[147278,147357],"content":"A <xref:System.Byte> array that supplies the bytes to be written to the stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Byte&gt; array that supplies the bytes to be written to the stream.","pos":[0,79],"source":"A <xref:System.Byte> array that supplies the bytes to be written to the stream."}]},{"pos":[147419,147515],"content":"The zero-based location in <ph id=\"ph1\">`buffer`</ph> at which to begin reading bytes to be written to the stream.","needQuote":true,"needEscape":true,"source":"The zero-based location in `buffer` at which to begin reading bytes to be written to the stream."},{"pos":[147576,147662],"content":"An &lt;xref:System.Int32&gt; value that specifies the number of bytes to read from <ph id=\"ph1\">`buffer`</ph>.","needQuote":true,"needEscape":true,"source":"An <xref:System.Int32> value that specifies the number of bytes to read from `buffer`."},{"pos":[147739,147853],"content":"An <xref:System.AsyncCallback> delegate that references the method to invoke when the write operation is complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.AsyncCallback&gt; delegate that references the method to invoke when the write operation is complete.","pos":[0,114],"source":"An <xref:System.AsyncCallback> delegate that references the method to invoke when the write operation is complete."}]},{"pos":[147920,148075],"content":"A user-defined object containing information about the write operation. This object is passed to the `asyncCallback` delegate when the operation completes.","needQuote":true,"needEscape":true,"nodes":[{"content":"A user-defined object containing information about the write operation.","pos":[0,71]},{"content":"This object is passed to the <ph id=\"ph1\">`asyncCallback`</ph> delegate when the operation completes.","pos":[72,155],"source":" This object is passed to the `asyncCallback` delegate when the operation completes."}]},{"pos":[148139,148228],"content":"An <xref:System.IAsyncResult> object indicating the status of the asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.IAsyncResult&gt; object indicating the status of the asynchronous operation.","pos":[0,89],"source":"An <xref:System.IAsyncResult> object indicating the status of the asynchronous operation."}]},{"pos":[148405,148489],"content":"<ph id=\"ph1\">&lt;code&gt;buffer&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>buffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[149129,149176],"content":"There is already a write operation in progress.","needQuote":true,"needEscape":true,"nodes":[{"content":"There is already a write operation in progress.","pos":[0,47]}]},{"pos":[149283,149311],"content":"This object has been closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been closed.","pos":[0,28]}]},{"pos":[149422,149454],"content":"Authentication has not occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"Authentication has not occurred.","pos":[0,32]}]},{"pos":[149807,149899],"content":"Gets a <xref:System.Boolean> value that indicates whether the underlying stream is readable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a &lt;xref:System.Boolean&gt; value that indicates whether the underlying stream is readable.","pos":[0,92],"source":"Gets a <xref:System.Boolean> value that indicates whether the underlying stream is readable."}]},{"pos":[149911,150200],"content":"If successful authentication has occurred, this property returns the value returned by invoking the <xref:System.IO.Stream.CanRead%2A> property on the underlying stream. The underlying stream is specified when you create an instance of the <xref:System.Net.Security.NegotiateStream> class.","needQuote":true,"needEscape":true,"nodes":[{"content":"If successful authentication has occurred, this property returns the value returned by invoking the <xref:System.IO.Stream.CanRead%2A> property on the underlying stream. The underlying stream is specified when you create an instance of the <xref:System.Net.Security.NegotiateStream> class.","pos":[0,289],"nodes":[{"content":"If successful authentication has occurred, this property returns the value returned by invoking the &lt;xref:System.IO.Stream.CanRead%2A&gt; property on the underlying stream.","pos":[0,169],"source":"If successful authentication has occurred, this property returns the value returned by invoking the <xref:System.IO.Stream.CanRead%2A> property on the underlying stream."},{"content":"The underlying stream is specified when you create an instance of the &lt;xref:System.Net.Security.NegotiateStream&gt; class.","pos":[170,289],"source":" The underlying stream is specified when you create an instance of the <xref:System.Net.Security.NegotiateStream> class."}]}]},{"pos":[150605,150810],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if authentication has occurred and the underlying stream is readable; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if authentication has occurred and the underlying stream is readable; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[151237,151329],"content":"Gets a <xref:System.Boolean> value that indicates whether the underlying stream is seekable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a &lt;xref:System.Boolean&gt; value that indicates whether the underlying stream is seekable.","pos":[0,92],"source":"Gets a <xref:System.Boolean> value that indicates whether the underlying stream is seekable."}]},{"pos":[151341,151586],"content":"You should not attempt to set the position of the <xref:System.Net.Security.NegotiateStream> object or its underlying stream. The underlying stream is specified when you create an instance of the <xref:System.Net.Security.NegotiateStream> class.","needQuote":true,"needEscape":true,"nodes":[{"content":"You should not attempt to set the position of the <xref:System.Net.Security.NegotiateStream> object or its underlying stream. The underlying stream is specified when you create an instance of the <xref:System.Net.Security.NegotiateStream> class.","pos":[0,245],"nodes":[{"content":"You should not attempt to set the position of the &lt;xref:System.Net.Security.NegotiateStream&gt; object or its underlying stream.","pos":[0,125],"source":"You should not attempt to set the position of the <xref:System.Net.Security.NegotiateStream> object or its underlying stream."},{"content":"The underlying stream is specified when you create an instance of the &lt;xref:System.Net.Security.NegotiateStream&gt; class.","pos":[126,245],"source":" The underlying stream is specified when you create an instance of the <xref:System.Net.Security.NegotiateStream> class."}]}]},{"pos":[151991,152083],"content":"This property always returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"This property always returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[152525,152624],"content":"Gets a <xref:System.Boolean> value that indicates whether the underlying stream supports time-outs.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a &lt;xref:System.Boolean&gt; value that indicates whether the underlying stream supports time-outs.","pos":[0,99],"source":"Gets a <xref:System.Boolean> value that indicates whether the underlying stream supports time-outs."}]},{"pos":[152636,152885],"content":"This property returns the value returned by invoking the <xref:System.IO.Stream.CanTimeout%2A> property on the underlying stream. The underlying stream is specified when you create an instance of the <xref:System.Net.Security.NegotiateStream> class.","needQuote":true,"needEscape":true,"nodes":[{"content":"This property returns the value returned by invoking the <xref:System.IO.Stream.CanTimeout%2A> property on the underlying stream. The underlying stream is specified when you create an instance of the <xref:System.Net.Security.NegotiateStream> class.","pos":[0,249],"nodes":[{"content":"This property returns the value returned by invoking the &lt;xref:System.IO.Stream.CanTimeout%2A&gt; property on the underlying stream.","pos":[0,129],"source":"This property returns the value returned by invoking the <xref:System.IO.Stream.CanTimeout%2A> property on the underlying stream."},{"content":"The underlying stream is specified when you create an instance of the &lt;xref:System.Net.Security.NegotiateStream&gt; class.","pos":[130,249],"source":" The underlying stream is specified when you create an instance of the <xref:System.Net.Security.NegotiateStream> class."}]}]},{"pos":[153293,153473],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the underlying stream supports time-outs; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the underlying stream supports time-outs; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[153908,154000],"content":"Gets a <xref:System.Boolean> value that indicates whether the underlying stream is writable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a &lt;xref:System.Boolean&gt; value that indicates whether the underlying stream is writable.","pos":[0,92],"source":"Gets a <xref:System.Boolean> value that indicates whether the underlying stream is writable."}]},{"pos":[154012,154302],"content":"If successful authentication has occurred, this property returns the value returned by invoking the <xref:System.IO.Stream.CanWrite%2A> property on the underlying stream. The underlying stream is specified when you create an instance of the <xref:System.Net.Security.NegotiateStream> class.","needQuote":true,"needEscape":true,"nodes":[{"content":"If successful authentication has occurred, this property returns the value returned by invoking the <xref:System.IO.Stream.CanWrite%2A> property on the underlying stream. The underlying stream is specified when you create an instance of the <xref:System.Net.Security.NegotiateStream> class.","pos":[0,290],"nodes":[{"content":"If successful authentication has occurred, this property returns the value returned by invoking the &lt;xref:System.IO.Stream.CanWrite%2A&gt; property on the underlying stream.","pos":[0,170],"source":"If successful authentication has occurred, this property returns the value returned by invoking the <xref:System.IO.Stream.CanWrite%2A> property on the underlying stream."},{"content":"The underlying stream is specified when you create an instance of the &lt;xref:System.Net.Security.NegotiateStream&gt; class.","pos":[171,290],"source":" The underlying stream is specified when you create an instance of the <xref:System.Net.Security.NegotiateStream> class."}]}]},{"pos":[154708,154913],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if authentication has occurred and the underlying stream is writable; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if authentication has occurred and the underlying stream is writable; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[155398,155546],"content":"Releases the unmanaged resources used by the <bpt id=\"p1\">&lt;xref href=\"System.Net.Security.NegotiateStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and optionally releases the managed resources.","needQuote":true,"needEscape":true,"source":"Releases the unmanaged resources used by the <xref href=\"System.Net.Security.NegotiateStream\"></xref> and optionally releases the managed resources."},{"pos":[155559,156097],"content":"This method is called by the public `Dispose()`method and the <xref:System.Object.Finalize%2A> method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.       When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.Net.Security.NegotiateStream> references. This method invokes the `Dispose()` method of each referenced object.","needQuote":false,"needEscape":true,"nodes":[{"content":"This method is called by the public <ph id=\"ph1\">`Dispose()`</ph>method and the &lt;xref:System.Object.Finalize%2A&gt; method.","pos":[0,102],"source":"This method is called by the public `Dispose()`method and the <xref:System.Object.Finalize%2A> method."},{"content":"<ph id=\"ph1\">`Dispose()`</ph> invokes the protected <ph id=\"ph2\">`Dispose(Boolean)`</ph> method with the <ph id=\"ph3\">`disposing`</ph> parameter set to <ph id=\"ph4\">`true`</ph>.","pos":[103,208],"source":"`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`."},{"content":"&lt;xref:System.Object.Finalize%2A&gt; invokes <ph id=\"ph1\">`Dispose`</ph> with <ph id=\"ph2\">`disposing`</ph> set to <ph id=\"ph3\">`false`</ph>.","pos":[209,292],"source":" <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`."},{"content":"When the <ph id=\"ph1\">`disposing`</ph> parameter is true, this method releases all resources held by any managed objects that this &lt;xref:System.Net.Security.NegotiateStream&gt; references.","pos":[299,466],"source":"       When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.Net.Security.NegotiateStream> references."},{"content":"This method invokes the <ph id=\"ph1\">`Dispose()`</ph> method of each referenced object.","pos":[467,536],"source":" This method invokes the `Dispose()` method of each referenced object."}]},{"pos":[156254,156463],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to release both managed and unmanaged resources; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> to release only unmanaged resources.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only unmanaged resources."},{"pos":[157052,157214],"content":"Ends a pending asynchronous client authentication operation that was started with a call to <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Ends a pending asynchronous client authentication operation that was started with a call to &lt;xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*&gt;.","pos":[0,162],"source":"Ends a pending asynchronous client authentication operation that was started with a call to <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*>."}]},{"pos":[157227,158116],"content":"If the operation has not completed, this method blocks until it does. When the authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.       If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.       To perform this operation synchronously, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method.","needQuote":false,"needEscape":true,"nodes":[{"content":"If the operation has not completed, this method blocks until it does. When the authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.       If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.       To perform this operation synchronously, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method.","pos":[0,885],"nodes":[{"content":"If the operation has not completed, this method blocks until it does.","pos":[0,69]},{"content":"When the authentication succeeds, you must check the &lt;xref:System.Net.Security.NegotiateStream.IsEncrypted%2A&gt; and &lt;xref:System.Net.Security.NegotiateStream.IsSigned%2A&gt; properties to determine what security services are used by the &lt;xref:System.Net.Security.NegotiateStream&gt;.","pos":[70,346],"source":" When the authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>."},{"content":"Check the &lt;xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A&gt; property to determine whether mutual authentication occurred.","pos":[347,488],"source":" Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred."},{"content":"If the authentication fails, you receive an &lt;xref:System.Security.Authentication.AuthenticationException&gt; or an &lt;xref:System.Security.Authentication.InvalidCredentialException&gt;.","pos":[495,672],"source":"       If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>."},{"content":"In this case, you can retry the authentication with a different credential.","pos":[673,748]},{"content":"To perform this operation synchronously, use one of the &lt;xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A&gt; method.","pos":[755,885],"source":"       To perform this operation synchronously, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method."}]}]},{"pos":[158302,158433],"content":"An <xref:System.IAsyncResult> instance returned by a call to <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.IAsyncResult&gt; instance returned by a call to &lt;xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*&gt;.","pos":[0,131],"source":"An <xref:System.IAsyncResult> instance returned by a call to <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*>."}]},{"pos":[158623,158712],"content":"<ph id=\"ph1\">&lt;code&gt;asyncResult&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>asyncResult</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[158807,158931],"content":"<ph id=\"ph1\">&lt;code&gt;asyncResult&lt;/code&gt;</ph> was not created by a call to <ph id=\"ph2\">&lt;xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*&gt;</ph>.","needQuote":true,"needEscape":true,"source":"<code>asyncResult</code> was not created by a call to <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*>."},{"pos":[159086,159165],"content":"The authentication failed. You can use this object to retry the authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]},{"pos":[159326,159405],"content":"The authentication failed. You can use this object to retry the authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]},{"pos":[159516,159570],"content":"There is no pending client authentication to complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"There is no pending client authentication to complete.","pos":[0,54]}]},{"pos":[160085,160247],"content":"Ends a pending asynchronous client authentication operation that was started with a call to <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Ends a pending asynchronous client authentication operation that was started with a call to &lt;xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*&gt;.","pos":[0,162],"source":"Ends a pending asynchronous client authentication operation that was started with a call to <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*>."}]},{"pos":[160260,161146],"content":"If the operation has not completed, this method blocks until it does.       When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.       If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.       To perform this operation synchronously, use the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method.","needQuote":false,"needEscape":true,"nodes":[{"content":"If the operation has not completed, this method blocks until it does.       When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.       If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.       To perform this operation synchronously, use the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method.","pos":[0,880],"nodes":[{"content":"If the operation has not completed, this method blocks until it does.","pos":[0,69]},{"content":"When authentication succeeds, you must check the &lt;xref:System.Net.Security.NegotiateStream.IsEncrypted%2A&gt; and &lt;xref:System.Net.Security.NegotiateStream.IsSigned%2A&gt; properties to determine what security services are used by the &lt;xref:System.Net.Security.NegotiateStream&gt;.","pos":[76,348],"source":"       When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>."},{"content":"Check the &lt;xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A&gt; property to determine whether mutual authentication occurred.","pos":[349,490],"source":" Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred."},{"content":"If the authentication fails, you receive an &lt;xref:System.Security.Authentication.AuthenticationException&gt; or an &lt;xref:System.Security.Authentication.InvalidCredentialException&gt;.","pos":[497,674],"source":"       If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>."},{"content":"In this case, you can retry the authentication with a different credential.","pos":[675,750]},{"content":"To perform this operation synchronously, use the &lt;xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A&gt; method.","pos":[757,880],"source":"       To perform this operation synchronously, use the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method."}]}]},{"pos":[161332,161463],"content":"An <xref:System.IAsyncResult> instance returned by a call to <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.IAsyncResult&gt; instance returned by a call to &lt;xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*&gt;.","pos":[0,131],"source":"An <xref:System.IAsyncResult> instance returned by a call to <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*>."}]},{"pos":[161653,161742],"content":"<ph id=\"ph1\">&lt;code&gt;asyncResult&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>asyncResult</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[161837,161961],"content":"<ph id=\"ph1\">&lt;code&gt;asyncResult&lt;/code&gt;</ph> was not created by a call to <ph id=\"ph2\">&lt;xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*&gt;</ph>.","needQuote":true,"needEscape":true,"source":"<code>asyncResult</code> was not created by a call to <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*>."},{"pos":[162116,162195],"content":"The authentication failed. You can use this object to retry the authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]},{"pos":[162356,162435],"content":"The authentication failed. You can use this object to retry the authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"The authentication failed. You can use this object to retry the authentication.","pos":[0,79],"nodes":[{"content":"The authentication failed.","pos":[0,26]},{"content":"You can use this object to retry the authentication.","pos":[27,79]}]}]},{"pos":[162546,162593],"content":"There is no pending authentication to complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"There is no pending authentication to complete.","pos":[0,47]}]},{"pos":[163028,163150],"content":"Ends an asynchronous read operation that was started with a call to <xref:System.Net.Security.NegotiateStream.BeginRead*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Ends an asynchronous read operation that was started with a call to &lt;xref:System.Net.Security.NegotiateStream.BeginRead*&gt;.","pos":[0,122],"source":"Ends an asynchronous read operation that was started with a call to <xref:System.Net.Security.NegotiateStream.BeginRead*>."}]},{"pos":[163163,163753],"content":"If the operation has not completed, this method blocks until it does.       To perform this operation synchronously, use the <xref:System.Net.Security.NegotiateStream.Read%2A> method.       You cannot call this method until you have successfully authenticated. To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.","needQuote":false,"needEscape":true,"nodes":[{"content":"If the operation has not completed, this method blocks until it does.       To perform this operation synchronously, use the <xref:System.Net.Security.NegotiateStream.Read%2A> method.       You cannot call this method until you have successfully authenticated. To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.","pos":[0,586],"nodes":[{"content":"If the operation has not completed, this method blocks until it does.","pos":[0,69]},{"content":"To perform this operation synchronously, use the &lt;xref:System.Net.Security.NegotiateStream.Read%2A&gt; method.","pos":[76,183],"source":"       To perform this operation synchronously, use the <xref:System.Net.Security.NegotiateStream.Read%2A> method."},{"content":"You cannot call this method until you have successfully authenticated.","pos":[190,260]},{"content":"To authenticate, call one of the &lt;xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A&gt;, &lt;xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A&gt;, &lt;xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A&gt;, or &lt;xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A&gt; methods.","pos":[261,586],"source":" To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods."}]}]},{"pos":[164328,164442],"content":"An <xref:System.IAsyncResult> instance returned by a call to <xref:System.Net.Security.NegotiateStream.BeginRead*>","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.IAsyncResult&gt; instance returned by a call to &lt;xref:System.Net.Security.NegotiateStream.BeginRead*&gt;","pos":[0,114],"source":"An <xref:System.IAsyncResult> instance returned by a call to <xref:System.Net.Security.NegotiateStream.BeginRead*>"}]},{"pos":[164499,164594],"content":"A <xref:System.Int32> value that specifies the number of bytes read from the underlying stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Int32&gt; value that specifies the number of bytes read from the underlying stream.","pos":[0,95],"source":"A <xref:System.Int32> value that specifies the number of bytes read from the underlying stream."}]},{"pos":[164768,164857],"content":"<ph id=\"ph1\">&lt;code&gt;asyncResult&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>asyncResult</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[164952,165051],"content":"The asyncResult was not created by a call to <xref:System.Net.Security.NegotiateStream.BeginRead*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The asyncResult was not created by a call to &lt;xref:System.Net.Security.NegotiateStream.BeginRead*&gt;.","pos":[0,99],"source":"The asyncResult was not created by a call to <xref:System.Net.Security.NegotiateStream.BeginRead*>."}]},{"pos":[165162,165194],"content":"Authentication has not occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"Authentication has not occurred.","pos":[0,32]}]},{"pos":[165283,165309],"content":"The read operation failed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The read operation failed.","pos":[0,26]}]},{"pos":[165749,165873],"content":"Ends an asynchronous write operation that was started with a call to <xref:System.Net.Security.NegotiateStream.BeginWrite*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Ends an asynchronous write operation that was started with a call to &lt;xref:System.Net.Security.NegotiateStream.BeginWrite*&gt;.","pos":[0,124],"source":"Ends an asynchronous write operation that was started with a call to <xref:System.Net.Security.NegotiateStream.BeginWrite*>."}]},{"pos":[165886,166477],"content":"If the operation has not completed, this method blocks until it does.       You cannot call this method until you have successfully authenticated. To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.       To perform this operation synchronously, use the <xref:System.Net.Security.NegotiateStream.Write%2A> method.","needQuote":false,"needEscape":true,"nodes":[{"content":"If the operation has not completed, this method blocks until it does.       You cannot call this method until you have successfully authenticated. To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.       To perform this operation synchronously, use the <xref:System.Net.Security.NegotiateStream.Write%2A> method.","pos":[0,587],"nodes":[{"content":"If the operation has not completed, this method blocks until it does.","pos":[0,69]},{"content":"You cannot call this method until you have successfully authenticated.","pos":[76,146]},{"content":"To authenticate, call one of the &lt;xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A&gt;, &lt;xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A&gt;, &lt;xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A&gt;, or &lt;xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A&gt; methods.","pos":[147,472],"source":" To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods."},{"content":"To perform this operation synchronously, use the &lt;xref:System.Net.Security.NegotiateStream.Write%2A&gt; method.","pos":[479,587],"source":"       To perform this operation synchronously, use the <xref:System.Net.Security.NegotiateStream.Write%2A> method."}]}]},{"pos":[167086,167201],"content":"An <xref:System.IAsyncResult> instance returned by a call to <xref:System.Net.Security.NegotiateStream.BeginWrite*>","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.IAsyncResult&gt; instance returned by a call to &lt;xref:System.Net.Security.NegotiateStream.BeginWrite*&gt;","pos":[0,115],"source":"An <xref:System.IAsyncResult> instance returned by a call to <xref:System.Net.Security.NegotiateStream.BeginWrite*>"}]},{"pos":[167376,167465],"content":"<ph id=\"ph1\">&lt;code&gt;asyncResult&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>asyncResult</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[167560,167660],"content":"The asyncResult was not created by a call to <xref:System.Net.Security.NegotiateStream.BeginWrite*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The asyncResult was not created by a call to &lt;xref:System.Net.Security.NegotiateStream.BeginWrite*&gt;.","pos":[0,100],"source":"The asyncResult was not created by a call to <xref:System.Net.Security.NegotiateStream.BeginWrite*>."}]},{"pos":[167771,167803],"content":"Authentication has not occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"Authentication has not occurred.","pos":[0,32]}]},{"pos":[167892,167919],"content":"The write operation failed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The write operation failed.","pos":[0,27]}]},{"pos":[168266,168330],"content":"Causes any buffered data to be written to the underlying device.","needQuote":true,"needEscape":true,"nodes":[{"content":"Causes any buffered data to be written to the underlying device.","pos":[0,64]}]},{"pos":[168342,168420],"content":"This method invokes <xref:System.IO.Stream.Flush%2A> on the underlying stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method invokes &lt;xref:System.IO.Stream.Flush%2A&gt; on the underlying stream.","pos":[0,78],"source":"This method invokes <xref:System.IO.Stream.Flush%2A> on the underlying stream."}]},{"pos":[169240,169316],"content":"Gets a value that indicates how the server can use the client's credentials.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that indicates how the server can use the client's credentials.","pos":[0,76]}]},{"pos":[169328,169802],"content":"You must successfully authenticate before calling this method. Clients specify the impersonation level when they request authentication by calling one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> methods. If you authenticate without specifying a <xref:System.Security.Principal.TokenImpersonationLevel> , <xref:System.Security.Principal.TokenImpersonationLevel> is used.","needQuote":true,"needEscape":true,"nodes":[{"content":"You must successfully authenticate before calling this method. Clients specify the impersonation level when they request authentication by calling one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> methods. If you authenticate without specifying a <xref:System.Security.Principal.TokenImpersonationLevel> , <xref:System.Security.Principal.TokenImpersonationLevel> is used.","pos":[0,474],"nodes":[{"content":"You must successfully authenticate before calling this method.","pos":[0,62]},{"content":"Clients specify the impersonation level when they request authentication by calling one of the &lt;xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A&gt; or &lt;xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A&gt; methods.","pos":[63,308],"source":" Clients specify the impersonation level when they request authentication by calling one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> methods."},{"content":"If you authenticate without specifying a &lt;xref:System.Security.Principal.TokenImpersonationLevel&gt; , &lt;xref:System.Security.Principal.TokenImpersonationLevel&gt; is used.","pos":[309,474],"source":" If you authenticate without specifying a <xref:System.Security.Principal.TokenImpersonationLevel> , <xref:System.Security.Principal.TokenImpersonationLevel> is used."}]}]},{"pos":[170297,170372],"content":"One of the <xref:System.Security.Principal.TokenImpersonationLevel> values.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the &lt;xref:System.Security.Principal.TokenImpersonationLevel&gt; values.","pos":[0,75],"source":"One of the <xref:System.Security.Principal.TokenImpersonationLevel> values."}]},{"pos":[170565,170607],"content":"Authentication failed or has not occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"Authentication failed or has not occurred.","pos":[0,42]}]},{"pos":[171000,171088],"content":"Gets a <xref:System.Boolean> value that indicates whether authentication was successful.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a &lt;xref:System.Boolean&gt; value that indicates whether authentication was successful.","pos":[0,88],"source":"Gets a <xref:System.Boolean> value that indicates whether authentication was successful."}]},{"pos":[171100,171473],"content":"Clients authenticate by calling the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> methods. Servers authenticate by calling the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.","needQuote":true,"needEscape":true,"nodes":[{"content":"Clients authenticate by calling the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> methods. Servers authenticate by calling the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.","pos":[0,373],"nodes":[{"content":"Clients authenticate by calling the &lt;xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A&gt; or &lt;xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A&gt; methods.","pos":[0,186],"source":"Clients authenticate by calling the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> methods."},{"content":"Servers authenticate by calling the &lt;xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A&gt; or &lt;xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A&gt; methods.","pos":[187,373],"source":" Servers authenticate by calling the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods."}]}]},{"pos":[171888,172062],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if successful authentication occurred; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if successful authentication occurred; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[172517,172658],"content":"Gets a &lt;xref:System.Boolean&gt; value that indicates whether this <bpt id=\"p1\">&lt;xref href=\"System.Net.Security.NegotiateStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> uses data encryption.","needQuote":true,"needEscape":true,"source":"Gets a <xref:System.Boolean> value that indicates whether this <xref href=\"System.Net.Security.NegotiateStream\"></xref> uses data encryption."},{"pos":[172670,172821],"content":"Encryption helps to protect the privacy of the data; namely, it helps to ensure that while data is in transit it cannot be deciphered by third parties.","needQuote":true,"needEscape":true,"nodes":[{"content":"Encryption helps to protect the privacy of the data; namely, it helps to ensure that while data is in transit it cannot be deciphered by third parties.","pos":[0,151]}]},{"pos":[173230,173479],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if data is encrypted before being transmitted over the network and decrypted when it reaches the remote endpoint; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if data is encrypted before being transmitted over the network and decrypted when it reaches the remote endpoint; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[173990,174103],"content":"Gets a <xref:System.Boolean> value that indicates whether both the server and the client have been authenticated.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a &lt;xref:System.Boolean&gt; value that indicates whether both the server and the client have been authenticated.","pos":[0,113],"source":"Gets a <xref:System.Boolean> value that indicates whether both the server and the client have been authenticated."}]},{"pos":[174116,174471],"content":"Mutual authentication is specified by the client when the client wants the server to provide credentials for authentication. By default, clients request mutual authentication.       The Negotiate protocol selects either NTLM or Kerberos depending on the security protocols supported by the client and server. NTLM does not support mutual authentication.","needQuote":false,"needEscape":true,"nodes":[{"content":"Mutual authentication is specified by the client when the client wants the server to provide credentials for authentication. By default, clients request mutual authentication.       The Negotiate protocol selects either NTLM or Kerberos depending on the security protocols supported by the client and server. NTLM does not support mutual authentication.","pos":[0,353],"nodes":[{"content":"Mutual authentication is specified by the client when the client wants the server to provide credentials for authentication.","pos":[0,124]},{"content":"By default, clients request mutual authentication.","pos":[125,175]},{"content":"The Negotiate protocol selects either NTLM or Kerberos depending on the security protocols supported by the client and server.","pos":[182,308]},{"content":"NTLM does not support mutual authentication.","pos":[309,353]}]}]},{"pos":[174893,175066],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the server has been authenticated; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the server has been authenticated; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[175514,175707],"content":"Gets a &lt;xref:System.Boolean&gt; value that indicates whether the local side of the connection used by this <bpt id=\"p1\">&lt;xref href=\"System.Net.Security.NegotiateStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> was authenticated as the server.","needQuote":true,"needEscape":true,"source":"Gets a <xref:System.Boolean> value that indicates whether the local side of the connection used by this <xref href=\"System.Net.Security.NegotiateStream\"></xref> was authenticated as the server."},{"pos":[175720,175992],"content":"If authentication failed or did not occur, this property returns `false`.       To authenticate as the server, call the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.","needQuote":false,"needEscape":true,"nodes":[{"content":"If authentication failed or did not occur, this property returns <ph id=\"ph1\">`false`</ph>.","pos":[0,73],"source":"If authentication failed or did not occur, this property returns `false`."},{"content":"To authenticate as the server, call the &lt;xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A&gt; or &lt;xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A&gt; methods.","pos":[80,270],"source":"       To authenticate as the server, call the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods."}]},{"pos":[176399,176639],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the local endpoint was successfully authenticated as the server side of the authenticated connection; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the local endpoint was successfully authenticated as the server side of the authenticated connection; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[177072,177172],"content":"Gets a <xref:System.Boolean> value that indicates whether the data sent using this stream is signed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a &lt;xref:System.Boolean&gt; value that indicates whether the data sent using this stream is signed.","pos":[0,100],"source":"Gets a <xref:System.Boolean> value that indicates whether the data sent using this stream is signed."}]},{"pos":[177184,177339],"content":"Data signing helps to protect the integrity of the data; namely, it helps the recipient determine whether the data has been tampered with while in transit.","needQuote":true,"needEscape":true,"nodes":[{"content":"Data signing helps to protect the integrity of the data; namely, it helps the recipient determine whether the data has been tampered with while in transit.","pos":[0,155]}]},{"pos":[177747,177930],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the data is signed before being transmitted; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the data is signed before being transmitted; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[178353,178394],"content":"Gets the length of the underlying stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the length of the underlying stream.","pos":[0,41]}]},{"pos":[178406,178727],"content":"This property returns the value returned by invoking the <xref:System.IO.Stream.Length%2A> property on the underlying stream. If the underlying stream is not seekable, this property will typically throw an exception. The run-time type of the underlying stream determines the run-time type of the exception that is thrown.","needQuote":true,"needEscape":true,"nodes":[{"content":"This property returns the value returned by invoking the <xref:System.IO.Stream.Length%2A> property on the underlying stream. If the underlying stream is not seekable, this property will typically throw an exception. The run-time type of the underlying stream determines the run-time type of the exception that is thrown.","pos":[0,321],"nodes":[{"content":"This property returns the value returned by invoking the &lt;xref:System.IO.Stream.Length%2A&gt; property on the underlying stream.","pos":[0,125],"source":"This property returns the value returned by invoking the <xref:System.IO.Stream.Length%2A> property on the underlying stream."},{"content":"If the underlying stream is not seekable, this property will typically throw an exception.","pos":[126,216]},{"content":"The run-time type of the underlying stream determines the run-time type of the exception that is thrown.","pos":[217,321]}]}]},{"pos":[179129,179202],"content":"A <xref:System.Int64> that specifies the length of the underlying stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Int64&gt; that specifies the length of the underlying stream.","pos":[0,73],"source":"A <xref:System.Int64> that specifies the length of the underlying stream."}]},{"pos":[179375,179513],"content":"Getting the value of this property is not supported when the underlying stream is a <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.NetworkStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Getting the value of this property is not supported when the underlying stream is a <xref href=\"System.Net.Sockets.NetworkStream\"></xref>."},{"pos":[179871,179930],"content":"Gets or sets the current position in the underlying stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the current position in the underlying stream.","pos":[0,59]}]},{"pos":[179942,180265],"content":"This property returns the value returned by invoking the <xref:System.IO.Stream.Position%2A> property on the underlying stream. If the underlying stream is not seekable, this property will typically throw an exception. The run-time type of the underlying stream determines the run-time type of the exception that is thrown.","needQuote":true,"needEscape":true,"nodes":[{"content":"This property returns the value returned by invoking the <xref:System.IO.Stream.Position%2A> property on the underlying stream. If the underlying stream is not seekable, this property will typically throw an exception. The run-time type of the underlying stream determines the run-time type of the exception that is thrown.","pos":[0,323],"nodes":[{"content":"This property returns the value returned by invoking the &lt;xref:System.IO.Stream.Position%2A&gt; property on the underlying stream.","pos":[0,127],"source":"This property returns the value returned by invoking the <xref:System.IO.Stream.Position%2A> property on the underlying stream."},{"content":"If the underlying stream is not seekable, this property will typically throw an exception.","pos":[128,218]},{"content":"The run-time type of the underlying stream determines the run-time type of the exception that is thrown.","pos":[219,323]}]}]},{"pos":[180389,180472],"content":"A <xref:System.Int64> that specifies the current position in the underlying stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Int64&gt; that specifies the current position in the underlying stream.","pos":[0,83],"source":"A <xref:System.Int64> that specifies the current position in the underlying stream."}]},{"pos":[181332,181397],"content":"Reads data from this stream and stores it in the specified array.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reads data from this stream and stores it in the specified array.","pos":[0,65]}]},{"pos":[181410,182055],"content":"The method reads a maximum of `count` bytes from the current stream and stores them in `buffer` beginning at `offset`.       You cannot call this method until you have successfully authenticated. To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.       To perform this operation asynchronously, use the <xref:System.Net.Security.NegotiateStream.BeginRead%2A> method.","needQuote":false,"needEscape":true,"nodes":[{"content":"The method reads a maximum of <ph id=\"ph1\">`count`</ph> bytes from the current stream and stores them in <ph id=\"ph2\">`buffer`</ph> beginning at <ph id=\"ph3\">`offset`</ph>.","pos":[0,118],"source":"The method reads a maximum of `count` bytes from the current stream and stores them in `buffer` beginning at `offset`."},{"content":"You cannot call this method until you have successfully authenticated.","pos":[125,195]},{"content":"To authenticate, call one of the &lt;xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A&gt;, &lt;xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A&gt;, &lt;xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A&gt;, or &lt;xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A&gt; methods.","pos":[196,521],"source":" To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods."},{"content":"To perform this operation asynchronously, use the &lt;xref:System.Net.Security.NegotiateStream.BeginRead%2A&gt; method.","pos":[528,641],"source":"       To perform this operation asynchronously, use the <xref:System.Net.Security.NegotiateStream.BeginRead%2A> method."}]},{"pos":[182524,182596],"content":"A <xref:System.Byte> array that receives the bytes read from the stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Byte&gt; array that receives the bytes read from the stream.","pos":[0,72],"source":"A <xref:System.Byte> array that receives the bytes read from the stream."}]},{"pos":[182658,182784],"content":"A &lt;xref:System.Int32&gt; containing the zero-based location in <ph id=\"ph1\">`buffer`</ph> at which to begin storing the data read from this stream.","needQuote":true,"needEscape":true,"source":"A <xref:System.Int32> containing the zero-based location in `buffer` at which to begin storing the data read from this stream."},{"pos":[182845,182930],"content":"A <xref:System.Int32> containing the maximum number of bytes to read from the stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Int32&gt; containing the maximum number of bytes to read from the stream.","pos":[0,85],"source":"A <xref:System.Int32> containing the maximum number of bytes to read from the stream."}]},{"pos":[182987,183132],"content":"A <xref:System.Int32> value that specifies the number of bytes read from the underlying stream. When there is no more data to be read, returns 0.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <xref:System.Int32> value that specifies the number of bytes read from the underlying stream. When there is no more data to be read, returns 0.","pos":[0,145],"nodes":[{"content":"A &lt;xref:System.Int32&gt; value that specifies the number of bytes read from the underlying stream.","pos":[0,95],"source":"A <xref:System.Int32> value that specifies the number of bytes read from the underlying stream."},{"content":"When there is no more data to be read, returns 0.","pos":[96,145]}]}]},{"pos":[183289,183315],"content":"The read operation failed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The read operation failed.","pos":[0,26]}]},{"pos":[183426,183458],"content":"Authentication has not occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"Authentication has not occurred.","pos":[0,32]}]},{"pos":[183561,183601],"content":"A Read operation is already in progress.","needQuote":true,"needEscape":true,"nodes":[{"content":"A Read operation is already in progress.","pos":[0,40]}]},{"pos":[183974,184047],"content":"Gets or sets the amount of time a read operation blocks waiting for data.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the amount of time a read operation blocks waiting for data.","pos":[0,73]}]},{"pos":[184060,184540],"content":"This property returns the value returned by invoking the <xref:System.IO.Stream.ReadTimeout%2A> property on the underlying stream. When you set this property, the <xref:System.IO.Stream.ReadTimeout%2A> value on the underlying stream is set to the specified value.       If the underlying stream is a <xref:System.Net.Sockets.NetworkStream>, ReadTimeout is in milliseconds and is set to <xref:System.Threading.Timeout.Infinite> by default so that read operations do not time out.","needQuote":false,"needEscape":true,"nodes":[{"content":"This property returns the value returned by invoking the <xref:System.IO.Stream.ReadTimeout%2A> property on the underlying stream. When you set this property, the <xref:System.IO.Stream.ReadTimeout%2A> value on the underlying stream is set to the specified value.       If the underlying stream is a <xref:System.Net.Sockets.NetworkStream>, ReadTimeout is in milliseconds and is set to <xref:System.Threading.Timeout.Infinite> by default so that read operations do not time out.","pos":[0,478],"nodes":[{"content":"This property returns the value returned by invoking the &lt;xref:System.IO.Stream.ReadTimeout%2A&gt; property on the underlying stream.","pos":[0,130],"source":"This property returns the value returned by invoking the <xref:System.IO.Stream.ReadTimeout%2A> property on the underlying stream."},{"content":"When you set this property, the &lt;xref:System.IO.Stream.ReadTimeout%2A&gt; value on the underlying stream is set to the specified value.","pos":[131,263],"source":" When you set this property, the <xref:System.IO.Stream.ReadTimeout%2A> value on the underlying stream is set to the specified value."},{"content":"If the underlying stream is a &lt;xref:System.Net.Sockets.NetworkStream&gt;, ReadTimeout is in milliseconds and is set to &lt;xref:System.Threading.Timeout.Infinite&gt; by default so that read operations do not time out.","pos":[270,478],"source":"       If the underlying stream is a <xref:System.Net.Sockets.NetworkStream>, ReadTimeout is in milliseconds and is set to <xref:System.Threading.Timeout.Infinite> by default so that read operations do not time out."}]}]},{"pos":[184954,185057],"content":"A <xref:System.Int32> that specifies the amount of time that will elapse before a read operation fails.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Int32&gt; that specifies the amount of time that will elapse before a read operation fails.","pos":[0,103],"source":"A <xref:System.Int32> that specifies the amount of time that will elapse before a read operation fails."}]},{"pos":[185523,185613],"content":"Gets information about the identity of the remote party sharing this authenticated stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets information about the identity of the remote party sharing this authenticated stream.","pos":[0,90]}]},{"pos":[185625,186125],"content":"When accessed by the client, this property returns a <xref:System.Security.Principal.GenericIdentity> containing the Service Principal Name (SPN) of the server and the authentication protocol used. When accessed by the server, this property returns a <xref:System.Security.Principal.WindowsIdentity> that describes the client. If the <xref:System.Security.Principal.WindowsIdentity> is not available, client information is returned to the server in a <xref:System.Security.Principal.GenericIdentity>.","needQuote":true,"needEscape":true,"nodes":[{"content":"When accessed by the client, this property returns a <xref:System.Security.Principal.GenericIdentity> containing the Service Principal Name (SPN) of the server and the authentication protocol used. When accessed by the server, this property returns a <xref:System.Security.Principal.WindowsIdentity> that describes the client. If the <xref:System.Security.Principal.WindowsIdentity> is not available, client information is returned to the server in a <xref:System.Security.Principal.GenericIdentity>.","pos":[0,500],"nodes":[{"content":"When accessed by the client, this property returns a &lt;xref:System.Security.Principal.GenericIdentity&gt; containing the Service Principal Name (SPN) of the server and the authentication protocol used.","pos":[0,197],"source":"When accessed by the client, this property returns a <xref:System.Security.Principal.GenericIdentity> containing the Service Principal Name (SPN) of the server and the authentication protocol used."},{"content":"When accessed by the server, this property returns a &lt;xref:System.Security.Principal.WindowsIdentity&gt; that describes the client.","pos":[198,326],"source":" When accessed by the server, this property returns a <xref:System.Security.Principal.WindowsIdentity> that describes the client."},{"content":"If the &lt;xref:System.Security.Principal.WindowsIdentity&gt; is not available, client information is returned to the server in a &lt;xref:System.Security.Principal.GenericIdentity&gt;.","pos":[327,500],"source":" If the <xref:System.Security.Principal.WindowsIdentity> is not available, client information is returned to the server in a <xref:System.Security.Principal.GenericIdentity>."}]}]},{"pos":[186590,186694],"content":"An <xref:System.Security.Principal.IIdentity> object that describes the identity of the remote endpoint.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Security.Principal.IIdentity&gt; object that describes the identity of the remote endpoint.","pos":[0,104],"source":"An <xref:System.Security.Principal.IIdentity> object that describes the identity of the remote endpoint."}]},{"pos":[186883,186925],"content":"Authentication failed or has not occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"Authentication failed or has not occurred.","pos":[0,42]}]},{"pos":[187385,187428],"content":"Throws <xref:System.NotSupportedException>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Throws &lt;xref:System.NotSupportedException&gt;.","pos":[0,43],"source":"Throws <xref:System.NotSupportedException>."}]},{"pos":[187440,187549],"content":"Do not call this method. It is inherited, but is not supported by <xref:System.Net.Security.NegotiateStream>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Do not call this method. It is inherited, but is not supported by <xref:System.Net.Security.NegotiateStream>.","pos":[0,109],"nodes":[{"content":"Do not call this method.","pos":[0,24]},{"content":"It is inherited, but is not supported by &lt;xref:System.Net.Security.NegotiateStream&gt;.","pos":[25,109],"source":" It is inherited, but is not supported by <xref:System.Net.Security.NegotiateStream>."}]}]},{"pos":[187720,187742],"content":"This value is ignored.","needQuote":true,"needEscape":true,"nodes":[{"content":"This value is ignored.","pos":[0,22]}]},{"pos":[187812,187834],"content":"This value is ignored.","needQuote":true,"needEscape":true,"nodes":[{"content":"This value is ignored.","pos":[0,22]}]},{"pos":[187891,187943],"content":"Always throws a <xref:System.NotSupportedException>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Always throws a &lt;xref:System.NotSupportedException&gt;.","pos":[0,52],"source":"Always throws a <xref:System.NotSupportedException>."}]},{"pos":[188114,188199],"content":"Seeking is not supported on <bpt id=\"p1\">&lt;xref href=\"System.Net.Security.NegotiateStream\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Seeking is not supported on <xref href=\"System.Net.Security.NegotiateStream\"></xref>."},{"pos":[188609,188650],"content":"Sets the length of the underlying stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sets the length of the underlying stream.","pos":[0,41]}]},{"pos":[188795,188864],"content":"An <xref:System.Int64> value that specifies the length of the stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Int64&gt; value that specifies the length of the stream.","pos":[0,69],"source":"An <xref:System.Int64> value that specifies the length of the stream."}]},{"pos":[189423,189536],"content":"Write the specified number of <xref:System.Byte>s to the underlying stream using the specified buffer and offset.","needQuote":true,"needEscape":true,"nodes":[{"content":"Write the specified number of &lt;xref:System.Byte&gt;s to the underlying stream using the specified buffer and offset.","pos":[0,113],"source":"Write the specified number of <xref:System.Byte>s to the underlying stream using the specified buffer and offset."}]},{"pos":[189549,190727],"content":"If encryption, signing, or encryption and signing are enabled, this method reads the data from buffer, encrypts, signs, or encrypts and signs it, and transmits it using the underlying stream. If no security services such as data encryption or signing are in use, this method invokes <xref:System.IO.Stream.Write%2A> on the underlying stream.       This method blocks while the write operation completes. To prevent blocking while the operation completes, use the Write method.       You cannot call this method until you have successfully authenticated. To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.       The <xref:System.Net.Security.NegotiateStream> class does not support multiple simultaneous write operations. If you attempt to start a write operation while another write operation is already executing on the same stream, a <xref:System.NotSupportedException> exception will be thrown.","needQuote":false,"needEscape":true,"nodes":[{"content":"If encryption, signing, or encryption and signing are enabled, this method reads the data from buffer, encrypts, signs, or encrypts and signs it, and transmits it using the underlying stream. If no security services such as data encryption or signing are in use, this method invokes <xref:System.IO.Stream.Write%2A> on the underlying stream.       This method blocks while the write operation completes. To prevent blocking while the operation completes, use the Write method.       You cannot call this method until you have successfully authenticated. To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.       The <xref:System.Net.Security.NegotiateStream> class does not support multiple simultaneous write operations. If you attempt to start a write operation while another write operation is already executing on the same stream, a <xref:System.NotSupportedException> exception will be thrown.","pos":[0,1172],"nodes":[{"content":"If encryption, signing, or encryption and signing are enabled, this method reads the data from buffer, encrypts, signs, or encrypts and signs it, and transmits it using the underlying stream.","pos":[0,191]},{"content":"If no security services such as data encryption or signing are in use, this method invokes &lt;xref:System.IO.Stream.Write%2A&gt; on the underlying stream.","pos":[192,341],"source":" If no security services such as data encryption or signing are in use, this method invokes <xref:System.IO.Stream.Write%2A> on the underlying stream."},{"content":"This method blocks while the write operation completes.","pos":[348,403]},{"content":"To prevent blocking while the operation completes, use the Write method.","pos":[404,476]},{"content":"You cannot call this method until you have successfully authenticated.","pos":[483,553]},{"content":"To authenticate, call one of the &lt;xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A&gt;, &lt;xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A&gt;, &lt;xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A&gt;, or &lt;xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A&gt; methods.","pos":[554,879],"source":" To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods."},{"content":"The &lt;xref:System.Net.Security.NegotiateStream&gt; class does not support multiple simultaneous write operations.","pos":[886,995],"source":"       The <xref:System.Net.Security.NegotiateStream> class does not support multiple simultaneous write operations."},{"content":"If you attempt to start a write operation while another write operation is already executing on the same stream, a &lt;xref:System.NotSupportedException&gt; exception will be thrown.","pos":[996,1172],"source":" If you attempt to start a write operation while another write operation is already executing on the same stream, a <xref:System.NotSupportedException> exception will be thrown."}]}]},{"pos":[191196,191269],"content":"A <xref:System.Byte> array that supplies the bytes written to the stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Byte&gt; array that supplies the bytes written to the stream.","pos":[0,73],"source":"A <xref:System.Byte> array that supplies the bytes written to the stream."}]},{"pos":[191331,191461],"content":"An &lt;xref:System.Int32&gt; containing the zero-based location in <ph id=\"ph1\">`buffer`</ph> at which to begin reading bytes to be written to the stream.","needQuote":true,"needEscape":true,"source":"An <xref:System.Int32> containing the zero-based location in `buffer` at which to begin reading bytes to be written to the stream."},{"pos":[191522,191597],"content":"A &lt;xref:System.Int32&gt; containing the number of bytes to read from <ph id=\"ph1\">`buffer`</ph>.","needQuote":true,"needEscape":true,"source":"A <xref:System.Int32> containing the number of bytes to read from `buffer`."},{"pos":[191769,191853],"content":"<ph id=\"ph1\">&lt;code&gt;buffer&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>buffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[192493,192540],"content":"There is already a write operation in progress.","needQuote":true,"needEscape":true,"nodes":[{"content":"There is already a write operation in progress.","pos":[0,47]}]},{"pos":[192647,192675],"content":"This object has been closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This object has been closed.","pos":[0,28]}]},{"pos":[192786,192818],"content":"Authentication has not occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"Authentication has not occurred.","pos":[0,32]}]},{"pos":[193196,193270],"content":"Gets or sets the amount of time a write operation blocks waiting for data.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the amount of time a write operation blocks waiting for data.","pos":[0,74]}]},{"pos":[193283,193754],"content":"This property returns the value returned by invoking the <xref:System.IO.Stream.WriteTimeout%2A> property on the underlying stream. For set operations, the specified value sets the <xref:System.IO.Stream.WriteTimeout%2A> value on the underlying stream.       If the underlying stream is a <xref:System.Net.Sockets.NetworkStream>, WriteTimeout is in milliseconds and is set to <xref:System.Threading.Timeout.Infinite> by default so that write operations do not time out.","needQuote":false,"needEscape":true,"nodes":[{"content":"This property returns the value returned by invoking the <xref:System.IO.Stream.WriteTimeout%2A> property on the underlying stream. For set operations, the specified value sets the <xref:System.IO.Stream.WriteTimeout%2A> value on the underlying stream.       If the underlying stream is a <xref:System.Net.Sockets.NetworkStream>, WriteTimeout is in milliseconds and is set to <xref:System.Threading.Timeout.Infinite> by default so that write operations do not time out.","pos":[0,469],"nodes":[{"content":"This property returns the value returned by invoking the &lt;xref:System.IO.Stream.WriteTimeout%2A&gt; property on the underlying stream.","pos":[0,131],"source":"This property returns the value returned by invoking the <xref:System.IO.Stream.WriteTimeout%2A> property on the underlying stream."},{"content":"For set operations, the specified value sets the &lt;xref:System.IO.Stream.WriteTimeout%2A&gt; value on the underlying stream.","pos":[132,252],"source":" For set operations, the specified value sets the <xref:System.IO.Stream.WriteTimeout%2A> value on the underlying stream."},{"content":"If the underlying stream is a &lt;xref:System.Net.Sockets.NetworkStream&gt;, WriteTimeout is in milliseconds and is set to &lt;xref:System.Threading.Timeout.Infinite&gt; by default so that write operations do not time out.","pos":[259,469],"source":"       If the underlying stream is a <xref:System.Net.Sockets.NetworkStream>, WriteTimeout is in milliseconds and is set to <xref:System.Threading.Timeout.Infinite> by default so that write operations do not time out."}]}]},{"pos":[194169,194273],"content":"A <xref:System.Int32> that specifies the amount of time that will elapse before a write operation fails.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Int32&gt; that specifies the amount of time that will elapse before a write operation fails.","pos":[0,104],"source":"A <xref:System.Int32> that specifies the amount of time that will elapse before a write operation fails."}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Net.Security.NegotiateStream\n  id: NegotiateStream\n  children:\n  - System.Net.Security.NegotiateStream.#ctor(System.IO.Stream)\n  - System.Net.Security.NegotiateStream.#ctor(System.IO.Stream,System.Boolean)\n  - System.Net.Security.NegotiateStream.AuthenticateAsClient\n  - System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String)\n  - System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)\n  - System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  - System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  - System.Net.Security.NegotiateStream.AuthenticateAsClientAsync\n  - System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String)\n  - System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)\n  - System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  - System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  - System.Net.Security.NegotiateStream.AuthenticateAsServer\n  - System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)\n  - System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  - System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  - System.Net.Security.NegotiateStream.AuthenticateAsServerAsync\n  - System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)\n  - System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  - System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  - System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.AsyncCallback,System.Object)\n  - System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.AsyncCallback,System.Object)\n  - System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.AsyncCallback,System.Object)\n  - System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)\n  - System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)\n  - System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.AsyncCallback,System.Object)\n  - System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.AsyncCallback,System.Object)\n  - System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)\n  - System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)\n  - System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  - System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  - System.Net.Security.NegotiateStream.CanRead\n  - System.Net.Security.NegotiateStream.CanSeek\n  - System.Net.Security.NegotiateStream.CanTimeout\n  - System.Net.Security.NegotiateStream.CanWrite\n  - System.Net.Security.NegotiateStream.Dispose(System.Boolean)\n  - System.Net.Security.NegotiateStream.EndAuthenticateAsClient(System.IAsyncResult)\n  - System.Net.Security.NegotiateStream.EndAuthenticateAsServer(System.IAsyncResult)\n  - System.Net.Security.NegotiateStream.EndRead(System.IAsyncResult)\n  - System.Net.Security.NegotiateStream.EndWrite(System.IAsyncResult)\n  - System.Net.Security.NegotiateStream.Flush\n  - System.Net.Security.NegotiateStream.ImpersonationLevel\n  - System.Net.Security.NegotiateStream.IsAuthenticated\n  - System.Net.Security.NegotiateStream.IsEncrypted\n  - System.Net.Security.NegotiateStream.IsMutuallyAuthenticated\n  - System.Net.Security.NegotiateStream.IsServer\n  - System.Net.Security.NegotiateStream.IsSigned\n  - System.Net.Security.NegotiateStream.Length\n  - System.Net.Security.NegotiateStream.Position\n  - System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)\n  - System.Net.Security.NegotiateStream.ReadTimeout\n  - System.Net.Security.NegotiateStream.RemoteIdentity\n  - System.Net.Security.NegotiateStream.Seek(System.Int64,System.IO.SeekOrigin)\n  - System.Net.Security.NegotiateStream.SetLength(System.Int64)\n  - System.Net.Security.NegotiateStream.Write(System.Byte[],System.Int32,System.Int32)\n  - System.Net.Security.NegotiateStream.WriteTimeout\n  langs:\n  - csharp\n  name: NegotiateStream\n  nameWithType: NegotiateStream\n  fullName: System.Net.Security.NegotiateStream\n  type: Class\n  summary: Provides a stream that uses the Negotiate security protocol to authenticate the client, and optionally the server, in client-server communication.\n  remarks: \"Use the NegotiateStream class for authentication and to help secure information transmitted between a client and a server. Using NegotiateStream, you can do the following.  \\n  \\n-   Send the client's credentials to the server for Impersonation or Delegation.  \\n  \\n-   Request server authentication.  \\n  \\n-   Encrypt and/or sign data before transmitting it.  \\n  \\n Authentication must be performed before transmitting information. Clients request authentication using the synchronous <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> methods, which block until the authentication completes, or the asynchronous <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> methods, which do not block while waiting for the authentication to complete. Servers request authentication using the synchronous <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> or asynchronous <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods. The client, and optionally the server, is authenticated using the Negotiate security protocol. On Windows 95/98 systems, Windows NT LAN Manager (NTLM) is the protocol used for authentication. On other platforms the Kerberos protocol is used for authentication if both client and server support it; otherwise NTLM is used. For detailed descriptions of these protocols, see the Platform SDK documentation on MSDN, at msdn.microsoft.com/library/. The NegotiateStream class performs the authentication using the Security Support Provider Interface (SSPI).  \\n  \\n When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services will be used by the NegotiateStream to help secure your data during transmission. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred. You can get information about the remote client or server using the <xref:System.Net.Security.NegotiateStream.RemoteIdentity%2A> property.  \\n  \\n If the authentication fails, you will receive an <xref:System.Security.Authentication.AuthenticationException> or a <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.  \\n  \\n You send data using the synchronous <xref:System.Net.Security.NegotiateStream.Write%2A> or asynchronous <xref:System.Net.Security.NegotiateStream.BeginWrite%2A> methods. You receive data using the synchronous <xref:System.Net.Security.NegotiateStream.Read%2A> or asynchronous <xref:System.Net.Security.NegotiateStream.BeginRead%2A> methods. If security services such as encryption or signing are enabled, these are automatically applied to your data by the NegotiateStream.  \\n  \\n The NegotiateStream transmits data using a stream that you supply when creating the NegotiateStream. When you supply this underlying stream, you have the option to specify whether closing the NegotiateStream also closes the underlying stream.\"\n  example:\n  - \"The following code example demonstrates the client side of a client-server connection that uses the NegotiateStream. The client authenticates and sends a message to the server asynchronously.  \\n  \\n [!code-cpp[NclNegoAsyncClient#0](~/add/codesnippet/cpp/t-system.net.security.ne_1.cpp)]\\n [!code-cs[NclNegoAsyncClient#0](~/add/codesnippet/csharp/t-system.net.security.ne_1.cs)]  \\n  \\n The following code example demonstrates the server side of a client-server connection that uses the NegotiateStream to authenticate the client and read a message sent by the client.  \\n  \\n [!code-cs[NclNegoAsyncServer#0](~/add/codesnippet/csharp/t-system.net.security.ne_2.cs)]\\n [!code-cpp[NclNegoAsyncServer#0](~/add/codesnippet/cpp/t-system.net.security.ne_2.cpp)]\"\n  syntax:\n    content: 'public class NegotiateStream : System.Net.Security.AuthenticatedStream'\n  inheritance:\n  - System.IO.Stream\n  - System.Net.Security.AuthenticatedStream\n  implements: []\n  inheritedMembers:\n  - System.Net.Security.AuthenticatedStream.InnerStream\n  - System.Net.Security.AuthenticatedStream.LeaveInnerStreamOpen\n  platform:\n  - net462\n- uid: System.Net.Security.NegotiateStream.#ctor(System.IO.Stream)\n  id: '#ctor(System.IO.Stream)'\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: NegotiateStream(Stream)\n  nameWithType: NegotiateStream.NegotiateStream(Stream)\n  fullName: System.Net.Security.NegotiateStream.NegotiateStream(Stream)\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Initializes a new instance of the <xref href=\"System.Net.Security.NegotiateStream\"></xref> class using the specified <xref:System.IO.Stream>.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates calling this constructor.  \\n  \\n [!code-cs[NclNegoSyncClient#3](~/add/codesnippet/csharp/m-system.net.security.ne_1_1.cs)]\\n [!code-cpp[NclNegoSyncClient#3](~/add/codesnippet/cpp/m-system.net.security.ne_1_1.cpp)]\"\n  syntax:\n    content: public NegotiateStream (System.IO.Stream innerStream);\n    parameters:\n    - id: innerStream\n      type: System.IO.Stream\n      description: A <xref:System.IO.Stream> object used by the <xref href=\"System.Net.Security.NegotiateStream\"></xref> for sending and receiving data.\n  overload: System.Net.Security.NegotiateStream.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Security.NegotiateStream.#ctor(System.IO.Stream,System.Boolean)\n  id: '#ctor(System.IO.Stream,System.Boolean)'\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: NegotiateStream(Stream,Boolean)\n  nameWithType: NegotiateStream.NegotiateStream(Stream,Boolean)\n  fullName: System.Net.Security.NegotiateStream.NegotiateStream(Stream,Boolean)\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Initializes a new instance of the <xref href=\"System.Net.Security.NegotiateStream\"></xref> class using the specified <xref:System.IO.Stream> and stream closure behavior.\n  remarks: When you specify `true` for the `leaveStreamOpen` parameter, closing the <xref:System.Net.Security.NegotiateStream> has no effect on the `innerStream` stream; you must explicitly close `innerStream` when you no longer need it.\n  example:\n  - \"The following code example demonstrates calling this constructor. This code example is part of a larger example provided for the <xref:System.Net.Security.NegotiateStream> class.  \\n  \\n [!code-cpp[NclNegoAsyncClient#1](~/add/codesnippet/cpp/m-system.net.security.ne_4_1.cpp)]\\n [!code-cs[NclNegoAsyncClient#1](~/add/codesnippet/csharp/m-system.net.security.ne_4_1.cs)]\"\n  syntax:\n    content: public NegotiateStream (System.IO.Stream innerStream, bool leaveInnerStreamOpen);\n    parameters:\n    - id: innerStream\n      type: System.IO.Stream\n      description: A <xref:System.IO.Stream> object used by the <xref href=\"System.Net.Security.NegotiateStream\"></xref> for sending and receiving data.\n    - id: leaveInnerStreamOpen\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to indicate that closing this <xref href=\"System.Net.Security.NegotiateStream\"></xref> has no effect on `innerstream`; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to indicate that closing this <xref href=\"System.Net.Security.NegotiateStream\"></xref> also closes `innerStream`. See the Remarks section for more information.\n  overload: System.Net.Security.NegotiateStream.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>innerStream</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n \\\\- or -  \\n  \\n <code>innerStream</code> is equal to <xref:System.IO.Stream.Null>.\"\n  platform:\n  - net462\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient\n  id: AuthenticateAsClient\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: AuthenticateAsClient()\n  nameWithType: NegotiateStream.AuthenticateAsClient()\n  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Called by clients to authenticate the client, and optionally the server, in a client-server connection.\n  remarks: \"The authentication uses the client's <xref:System.Net.CredentialCache.DefaultCredentials%2A>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel>, the security level is <xref:System.Net.Security.ProtectionLevel>, and mutual authentication is requested. The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.  \\n  \\n When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.  \\n  \\n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.\"\n  syntax:\n    content: public virtual void AuthenticateAsClient ();\n    parameters: []\n  overload: System.Net.Security.NegotiateStream.AuthenticateAsClient*\n  exceptions:\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.Security.Authentication.InvalidCredentialException\n    commentId: T:System.Security.Authentication.InvalidCredentialException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"Authentication has already occurred.  \\n  \\n \\\\- or -  \\n  \\n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.\"\n  platform:\n  - net462\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String)\n  id: AuthenticateAsClient(System.Net.NetworkCredential,System.String)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: AuthenticateAsClient(NetworkCredential,String)\n  nameWithType: NegotiateStream.AuthenticateAsClient(NetworkCredential,String)\n  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient(NetworkCredential,String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Called by clients to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified client credential.\n  remarks: \"The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel>, the security level is <xref:System.Net.Security.ProtectionLevel>, and mutual authentication is requested. The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.  \\n  \\n When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.\"\n  syntax:\n    content: public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, string targetName);\n    parameters:\n    - id: credential\n      type: System.Net.NetworkCredential\n      description: The <xref:System.Net.NetworkCredential> that is used to establish the identity of the client.\n    - id: targetName\n      type: System.String\n      description: The Service Principal Name (SPN) that uniquely identifies the server to authenticate.\n  overload: System.Net.Security.NegotiateStream.AuthenticateAsClient*\n  exceptions:\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.Security.Authentication.InvalidCredentialException\n    commentId: T:System.Security.Authentication.InvalidCredentialException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"Authentication has already occurred.  \\n  \\n \\\\- or -  \\n  \\n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>targetName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)\n  id: AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: AuthenticateAsClient(NetworkCredential,ChannelBinding,String)\n  nameWithType: NegotiateStream.AuthenticateAsClient(NetworkCredential,ChannelBinding,String)\n  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient(NetworkCredential,ChannelBinding,String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Called by clients to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified client credential and the channel binding.\n  remarks: \"The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel>, the security level is <xref:System.Net.Security.ProtectionLevel>, and mutual authentication is requested. The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.  \\n  \\n The <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> used for extended protection that is passed to this method in the `binding` parameter would be retrieved by an application from <xref:System.Net.Security.SslStream.TransportContext%2A> property on the associated <xref:System.Net.Security.SslStream>.  \\n  \\n When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.\"\n  syntax:\n    content: public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName);\n    parameters:\n    - id: credential\n      type: System.Net.NetworkCredential\n      description: The <xref:System.Net.NetworkCredential> that is used to establish the identity of the client.\n    - id: binding\n      type: System.Security.Authentication.ExtendedProtection.ChannelBinding\n      description: The <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> that is used for extended protection.\n    - id: targetName\n      type: System.String\n      description: The Service Principal Name (SPN) that uniquely identifies the server to authenticate.\n  overload: System.Net.Security.NegotiateStream.AuthenticateAsClient*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>targetName</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n \\\\- or -  \\n  \\n <code>credential</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.Security.Authentication.InvalidCredentialException\n    commentId: T:System.Security.Authentication.InvalidCredentialException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"Authentication has already occurred.  \\n  \\n \\\\- or -  \\n  \\n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  platform:\n  - net462\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  id: AuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: AuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)\n  nameWithType: NegotiateStream.AuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)\n  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Called by clients to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified credentials and authentication options.\n  remarks: \"Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream. For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel> value. Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted. You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.  \\n  \\n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.\"\n  syntax:\n    content: public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);\n    parameters:\n    - id: credential\n      type: System.Net.NetworkCredential\n      description: The <xref:System.Net.NetworkCredential> that is used to establish the identity of the client.\n    - id: targetName\n      type: System.String\n      description: The Service Principal Name (SPN) that uniquely identifies the server to authenticate.\n    - id: requiredProtectionLevel\n      type: System.Net.Security.ProtectionLevel\n      description: One of the <xref href=\"System.Net.Security.ProtectionLevel\"></xref> values, indicating the security services for the stream.\n    - id: allowedImpersonationLevel\n      type: System.Security.Principal.TokenImpersonationLevel\n      description: One of the <xref:System.Security.Principal.TokenImpersonationLevel> values, indicating how the server can use the client's credentials to access resources.\n  overload: System.Net.Security.NegotiateStream.AuthenticateAsClient*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>allowedImpersonationLevel</code> is not a valid value.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>targetName</code> is null.\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.Security.Authentication.InvalidCredentialException\n    commentId: T:System.Security.Authentication.InvalidCredentialException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"Authentication has already occurred.  \\n  \\n \\\\- or -  \\n  \\n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.\"\n  platform:\n  - net462\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  id: AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: AuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)\n  nameWithType: NegotiateStream.AuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)\n  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Called by clients to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified credential, authentication options, and channel binding.\n  remarks: \"Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream. For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel> value. Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted. You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.  \\n  \\n The <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> used for extended protection that is passed to this method in the `binding` parameter would be retrieved by an application from <xref:System.Net.Security.SslStream.TransportContext%2A> property on the associated <xref:System.Net.Security.SslStream>.  \\n  \\n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.\"\n  syntax:\n    content: public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);\n    parameters:\n    - id: credential\n      type: System.Net.NetworkCredential\n      description: The <xref:System.Net.NetworkCredential> that is used to establish the identity of the client.\n    - id: binding\n      type: System.Security.Authentication.ExtendedProtection.ChannelBinding\n      description: The <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> that is used for extended protection.\n    - id: targetName\n      type: System.String\n      description: The Service Principal Name (SPN) that uniquely identifies the server to authenticate.\n    - id: requiredProtectionLevel\n      type: System.Net.Security.ProtectionLevel\n      description: One of the <xref href=\"System.Net.Security.ProtectionLevel\"></xref> values, indicating the security services for the stream.\n    - id: allowedImpersonationLevel\n      type: System.Security.Principal.TokenImpersonationLevel\n      description: One of the <xref:System.Security.Principal.TokenImpersonationLevel> values, indicating how the server can use the client's credentials to access resources.\n  overload: System.Net.Security.NegotiateStream.AuthenticateAsClient*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>targetName</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n \\\\- or -  \\n  \\n <code>credential</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>allowedImpersonationLevel</code> is not a valid value.\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.Security.Authentication.InvalidCredentialException\n    commentId: T:System.Security.Authentication.InvalidCredentialException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"Authentication has already occurred.  \\n  \\n \\\\- or -  \\n  \\n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  platform:\n  - net462\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync\n  id: AuthenticateAsClientAsync\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: AuthenticateAsClientAsync()\n  nameWithType: NegotiateStream.AuthenticateAsClientAsync()\n  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.\n  remarks: \"The authentication uses the client's <xref:System.Net.CredentialCache.DefaultCredentials%2A>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel>, the security level is <xref:System.Net.Security.ProtectionLevel>, and mutual authentication is requested. The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.  \\n  \\n When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.  \\n  \\n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.\"\n  syntax:\n    content: public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync ();\n    parameters: []\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"Returns <xref:System.Threading.Tasks.Task>  \\n  \\n The task object representing the asynchronous operation.\"\n  overload: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync*\n  exceptions:\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.Security.Authentication.InvalidCredentialException\n    commentId: T:System.Security.Authentication.InvalidCredentialException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"Authentication has already occurred.  \\n  \\n \\\\- or -  \\n  \\n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.\"\n  platform:\n  - net462\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String)\n  id: AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: AuthenticateAsClientAsync(NetworkCredential,String)\n  nameWithType: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,String)\n  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified client credential.\n  remarks: \"The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel>, the security level is <xref:System.Net.Security.ProtectionLevel>, and mutual authentication is requested. The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.  \\n  \\n When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.\"\n  syntax:\n    content: public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, string targetName);\n    parameters:\n    - id: credential\n      type: System.Net.NetworkCredential\n      description: The <xref:System.Net.NetworkCredential> that is used to establish the identity of the client.\n    - id: targetName\n      type: System.String\n      description: The Service Principal Name (SPN) that uniquely identifies the server to authenticate.\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"Returns <xref:System.Threading.Tasks.Task>  \\n  \\n The task object representing the asynchronous operation.\"\n  overload: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync*\n  exceptions:\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.Security.Authentication.InvalidCredentialException\n    commentId: T:System.Security.Authentication.InvalidCredentialException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"Authentication has already occurred.  \\n  \\n \\\\- or -  \\n  \\n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>targetName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)\n  id: AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String)\n  nameWithType: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String)\n  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified client credential and the channel binding.\n  remarks: \"The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel>, the security level is <xref:System.Net.Security.ProtectionLevel>, and mutual authentication is requested. The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.  \\n  \\n The <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> used for extended protection that is passed to this method in the `binding` parameter would be retrieved by an application from <xref:System.Net.Security.SslStream.TransportContext%2A> property on the associated <xref:System.Net.Security.SslStream>.  \\n  \\n When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.\"\n  syntax:\n    content: public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName);\n    parameters:\n    - id: credential\n      type: System.Net.NetworkCredential\n      description: The <xref:System.Net.NetworkCredential> that is used to establish the identity of the client.\n    - id: binding\n      type: System.Security.Authentication.ExtendedProtection.ChannelBinding\n      description: The <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> that is used for extended protection.\n    - id: targetName\n      type: System.String\n      description: The Service Principal Name (SPN) that uniquely identifies the server to authenticate.\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"Returns <xref:System.Threading.Tasks.Task>  \\n  \\n The task object representing the asynchronous operation.\"\n  overload: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>targetName</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n \\\\- or -  \\n  \\n <code>credential</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.Security.Authentication.InvalidCredentialException\n    commentId: T:System.Security.Authentication.InvalidCredentialException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"Authentication has already occurred.  \\n  \\n \\\\- or -  \\n  \\n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  platform:\n  - net462\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  id: AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: AuthenticateAsClientAsync(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)\n  nameWithType: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)\n  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified credentials and authentication options.\n  remarks: \"Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream. For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel> value. Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted. You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.  \\n  \\n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.\"\n  syntax:\n    content: public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);\n    parameters:\n    - id: credential\n      type: System.Net.NetworkCredential\n      description: The <xref:System.Net.NetworkCredential> that is used to establish the identity of the client.\n    - id: targetName\n      type: System.String\n      description: The Service Principal Name (SPN) that uniquely identifies the server to authenticate.\n    - id: requiredProtectionLevel\n      type: System.Net.Security.ProtectionLevel\n      description: One of the <xref href=\"System.Net.Security.ProtectionLevel\"></xref> values, indicating the security services for the stream.\n    - id: allowedImpersonationLevel\n      type: System.Security.Principal.TokenImpersonationLevel\n      description: One of the <xref:System.Security.Principal.TokenImpersonationLevel> values, indicating how the server can use the client's credentials to access resources.\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"Returns <xref:System.Threading.Tasks.Task>  \\n  \\n The task object representing the asynchronous operation.\"\n  overload: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>allowedImpersonationLevel</code> is not a valid value.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>targetName</code> is null.\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.Security.Authentication.InvalidCredentialException\n    commentId: T:System.Security.Authentication.InvalidCredentialException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"Authentication has already occurred.  \\n  \\n \\\\- or -  \\n  \\n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.\"\n  platform:\n  - net462\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  id: AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)\n  nameWithType: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)\n  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified credential, authentication options, and channel binding.\n  remarks: \"Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream. For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel> value. Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted. You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.  \\n  \\n The <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> used for extended protection that is passed to this method in the `binding` parameter would be retrieved by an application from <xref:System.Net.Security.SslStream.TransportContext%2A> property on the associated <xref:System.Net.Security.SslStream>.  \\n  \\n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.\"\n  syntax:\n    content: public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);\n    parameters:\n    - id: credential\n      type: System.Net.NetworkCredential\n      description: The <xref:System.Net.NetworkCredential> that is used to establish the identity of the client.\n    - id: binding\n      type: System.Security.Authentication.ExtendedProtection.ChannelBinding\n      description: The <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> that is used for extended protection.\n    - id: targetName\n      type: System.String\n      description: The Service Principal Name (SPN) that uniquely identifies the server to authenticate.\n    - id: requiredProtectionLevel\n      type: System.Net.Security.ProtectionLevel\n      description: One of the <xref href=\"System.Net.Security.ProtectionLevel\"></xref> values, indicating the security services for the stream.\n    - id: allowedImpersonationLevel\n      type: System.Security.Principal.TokenImpersonationLevel\n      description: One of the <xref:System.Security.Principal.TokenImpersonationLevel> values, indicating how the server can use the client's credentials to access resources.\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"Returns <xref:System.Threading.Tasks.Task>  \\n  \\n The task object representing the asynchronous operation.\"\n  overload: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>targetName</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n \\\\- or -  \\n  \\n <code>credential</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>allowedImpersonationLevel</code> is not a valid value.\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.Security.Authentication.InvalidCredentialException\n    commentId: T:System.Security.Authentication.InvalidCredentialException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"Authentication has already occurred.  \\n  \\n \\\\- or -  \\n  \\n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  platform:\n  - net462\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer\n  id: AuthenticateAsServer\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: AuthenticateAsServer()\n  nameWithType: NegotiateStream.AuthenticateAsServer()\n  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServer()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Called by servers to authenticate the client, and optionally the server, in a client-server connection.\n  remarks: \"The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel>, and the security level is <xref:System.Net.Security.ProtectionLevel>.  \\n  \\n When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.  \\n  \\n This method blocks until the operation completes. To prevent blocking until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> method overloads.  \\n  \\n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.\"\n  syntax:\n    content: public virtual void AuthenticateAsServer ();\n    parameters: []\n  overload: System.Net.Security.NegotiateStream.AuthenticateAsServer*\n  exceptions:\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.Security.Authentication.InvalidCredentialException\n    commentId: T:System.Security.Authentication.InvalidCredentialException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: Windows 95 and Windows 98 are not supported.\n  platform:\n  - net462\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)\n  id: AuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: AuthenticateAsServer(ExtendedProtectionPolicy)\n  nameWithType: NegotiateStream.AuthenticateAsServer(ExtendedProtectionPolicy)\n  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServer(ExtendedProtectionPolicy)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Called by servers to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified extended protection policy.\n  remarks: \"The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel>, and the security level is <xref:System.Net.Security.ProtectionLevel>.  \\n  \\n If the `policy` parameter is `null`, then an extended protection policy is used that has <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement>.  \\n  \\n When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.  \\n  \\n This method blocks until the operation completes. To prevent blocking until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> method overloads.  \\n  \\n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.\"\n  syntax:\n    content: public virtual void AuthenticateAsServer (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy);\n    parameters:\n    - id: policy\n      type: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\n      description: The <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\"></xref> that is used for extended protection.\n  overload: System.Net.Security.NegotiateStream.AuthenticateAsServer*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding*> and <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames*> on the extended protection policy passed in the <code>policy</code> parameter are both <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.Security.Authentication.InvalidCredentialException\n    commentId: T:System.Security.Authentication.InvalidCredentialException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: Windows 95 and Windows 98 are not supported.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: The <code>policy</code> parameter was set to <xref href=\"System.Security.Authentication.ExtendedProtection.PolicyEnforcement\"></xref> on a platform that does not support extended protection.\n  platform:\n  - net462\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  id: AuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: AuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)\n  nameWithType: NegotiateStream.AuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)\n  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Called by servers to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified server credentials and authentication options.\n  remarks: \"When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.  \\n  \\n This method blocks until the operation completes. To prevent blocking until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> method overloads.  \\n  \\n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.\"\n  syntax:\n    content: public virtual void AuthenticateAsServer (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);\n    parameters:\n    - id: credential\n      type: System.Net.NetworkCredential\n      description: The <xref:System.Net.NetworkCredential> that is used to establish the identity of the server.\n    - id: requiredProtectionLevel\n      type: System.Net.Security.ProtectionLevel\n      description: One of the <xref href=\"System.Net.Security.ProtectionLevel\"></xref> values, indicating the security services for the stream.\n    - id: requiredImpersonationLevel\n      type: System.Security.Principal.TokenImpersonationLevel\n      description: One of the <xref:System.Security.Principal.TokenImpersonationLevel> values, indicating how the server can use the client's credentials to access resources.\n  overload: System.Net.Security.NegotiateStream.AuthenticateAsServer*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>credential </code>is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>requiredImpersonationLevel</code> must be <xref:System.Security.Principal.TokenImpersonationLevel>, <xref:System.Security.Principal.TokenImpersonationLevel>, or <xref:System.Security.Principal.TokenImpersonationLevel>,\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed. You can use this object to try to r-authenticate.\n  - type: System.Security.Authentication.InvalidCredentialException\n    commentId: T:System.Security.Authentication.InvalidCredentialException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"Authentication has already occurred.  \\n  \\n \\\\- or -  \\n  \\n This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: Windows 95 and Windows 98 are not supported.\n  platform:\n  - net462\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  id: AuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: AuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)\n  nameWithType: NegotiateStream.AuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)\n  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Called by servers to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified server credentials, authentication options, and extended protection policy.\n  remarks: \"If the `policy` parameter is `null`, then an extended protection policy is used that has <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement>.  \\n  \\n When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.  \\n  \\n This method blocks until the operation completes. To prevent blocking until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> method overloads.  \\n  \\n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.\"\n  syntax:\n    content: public virtual void AuthenticateAsServer (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);\n    parameters:\n    - id: credential\n      type: System.Net.NetworkCredential\n      description: The <xref:System.Net.NetworkCredential> that is used to establish the identity of the client.\n    - id: policy\n      type: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\n      description: The <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\"></xref> that is used for extended protection.\n    - id: requiredProtectionLevel\n      type: System.Net.Security.ProtectionLevel\n      description: One of the <xref href=\"System.Net.Security.ProtectionLevel\"></xref> values, indicating the security services for the stream.\n    - id: requiredImpersonationLevel\n      type: System.Security.Principal.TokenImpersonationLevel\n      description: One of the <xref:System.Security.Principal.TokenImpersonationLevel> values, indicating how the server can use the client's credentials to access resources.\n  overload: System.Net.Security.NegotiateStream.AuthenticateAsServer*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding*> and <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames*> on the extended protection policy passed in the <code>policy</code> parameter are both <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>credential </code>is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>requiredImpersonationLevel</code> must be <xref:System.Security.Principal.TokenImpersonationLevel>, <xref:System.Security.Principal.TokenImpersonationLevel>, or <xref:System.Security.Principal.TokenImpersonationLevel>,\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed. You can use this object to try to r-authenticate.\n  - type: System.Security.Authentication.InvalidCredentialException\n    commentId: T:System.Security.Authentication.InvalidCredentialException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"Authentication has already occurred.  \\n  \\n \\\\- or -  \\n  \\n This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: Windows 95 and Windows 98 are not supported.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: The <code>policy</code> parameter was set to <xref href=\"System.Security.Authentication.ExtendedProtection.PolicyEnforcement\"></xref> on a platform that does not support extended protection.\n  platform:\n  - net462\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync\n  id: AuthenticateAsServerAsync\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: AuthenticateAsServerAsync()\n  nameWithType: NegotiateStream.AuthenticateAsServerAsync()\n  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.\n  remarks: \"The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel>, and the security level is <xref:System.Net.Security.ProtectionLevel>.  \\n  \\n When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.  \\n  \\n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.\"\n  syntax:\n    content: public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync ();\n    parameters: []\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"Returns <xref:System.Threading.Tasks.Task>  \\n  \\n The task object representing the asynchronous operation.\"\n  overload: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync*\n  exceptions:\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.Security.Authentication.InvalidCredentialException\n    commentId: T:System.Security.Authentication.InvalidCredentialException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: Windows 95 and Windows 98 are not supported.\n  platform:\n  - net462\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)\n  id: AuthenticateAsServerAsync(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: AuthenticateAsServerAsync(ExtendedProtectionPolicy)\n  nameWithType: NegotiateStream.AuthenticateAsServerAsync(ExtendedProtectionPolicy)\n  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(ExtendedProtectionPolicy)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified extended protection policy.\n  remarks: \"The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel>, and the security level is <xref:System.Net.Security.ProtectionLevel>.  \\n  \\n If the `policy` parameter is `null`, then an extended protection policy is used that has <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement>.  \\n  \\n When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.  \\n  \\n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.\"\n  syntax:\n    content: public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy);\n    parameters:\n    - id: policy\n      type: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\n      description: The <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\"></xref> that is used for extended protection.\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"Returns <xref:System.Threading.Tasks.Task>  \\n  \\n The task object representing the asynchronous operation.\"\n  overload: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding*> and <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames*> on the extended protection policy passed in the <code>policy</code> parameter are both <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.Security.Authentication.InvalidCredentialException\n    commentId: T:System.Security.Authentication.InvalidCredentialException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: Windows 95 and Windows 98 are not supported.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: The <code>policy</code> parameter was set to <xref href=\"System.Security.Authentication.ExtendedProtection.PolicyEnforcement\"></xref> on a platform that does not support extended protection.\n  platform:\n  - net462\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  id: AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: AuthenticateAsServerAsync(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)\n  nameWithType: NegotiateStream.AuthenticateAsServerAsync(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)\n  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified server credentials and authentication options.\n  remarks: \"When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.  \\n  \\n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.\"\n  syntax:\n    content: public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);\n    parameters:\n    - id: credential\n      type: System.Net.NetworkCredential\n      description: The <xref:System.Net.NetworkCredential> that is used to establish the identity of the server.\n    - id: requiredProtectionLevel\n      type: System.Net.Security.ProtectionLevel\n      description: One of the <xref href=\"System.Net.Security.ProtectionLevel\"></xref> values, indicating the security services for the stream.\n    - id: requiredImpersonationLevel\n      type: System.Security.Principal.TokenImpersonationLevel\n      description: One of the <xref:System.Security.Principal.TokenImpersonationLevel> values, indicating how the server can use the client's credentials to access resources.\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"Returns <xref:System.Threading.Tasks.Task>  \\n  \\n The task object representing the asynchronous operation.\"\n  overload: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>credential </code>is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>requiredImpersonationLevel</code> must be <xref:System.Security.Principal.TokenImpersonationLevel>, <xref:System.Security.Principal.TokenImpersonationLevel>, or <xref:System.Security.Principal.TokenImpersonationLevel>,\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed. You can use this object to try to r-authenticate.\n  - type: System.Security.Authentication.InvalidCredentialException\n    commentId: T:System.Security.Authentication.InvalidCredentialException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"Authentication has already occurred.  \\n  \\n \\\\- or -  \\n  \\n This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: Windows 95 and Windows 98 are not supported.\n  platform:\n  - net462\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  id: AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: AuthenticateAsServerAsync(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)\n  nameWithType: NegotiateStream.AuthenticateAsServerAsync(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)\n  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified server credentials, authentication options, and extended protection policy.\n  remarks: \"If the `policy` parameter is `null`, then an extended protection policy is used that has <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement>.  \\n  \\n When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.  \\n  \\n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.\"\n  syntax:\n    content: public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);\n    parameters:\n    - id: credential\n      type: System.Net.NetworkCredential\n      description: The <xref:System.Net.NetworkCredential> that is used to establish the identity of the client.\n    - id: policy\n      type: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\n      description: The <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\"></xref> that is used for extended protection.\n    - id: requiredProtectionLevel\n      type: System.Net.Security.ProtectionLevel\n      description: One of the <xref href=\"System.Net.Security.ProtectionLevel\"></xref> values, indicating the security services for the stream.\n    - id: requiredImpersonationLevel\n      type: System.Security.Principal.TokenImpersonationLevel\n      description: One of the <xref:System.Security.Principal.TokenImpersonationLevel> values, indicating how the server can use the client's credentials to access resources.\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"Returns <xref:System.Threading.Tasks.Task>  \\n  \\n The task object representing the asynchronous operation.\"\n  overload: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding*> and <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames*> on the extended protection policy passed in the <code>policy</code> parameter are both <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>credential </code>is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>requiredImpersonationLevel</code> must be <xref:System.Security.Principal.TokenImpersonationLevel>, <xref:System.Security.Principal.TokenImpersonationLevel>, or <xref:System.Security.Principal.TokenImpersonationLevel>,\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed. You can use this object to try to r-authenticate.\n  - type: System.Security.Authentication.InvalidCredentialException\n    commentId: T:System.Security.Authentication.InvalidCredentialException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"Authentication has already occurred.  \\n  \\n \\\\- or -  \\n  \\n This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: Windows 95 and Windows 98 are not supported.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: The <code>policy</code> parameter was set to <xref href=\"System.Security.Authentication.ExtendedProtection.PolicyEnforcement\"></xref> on a platform that does not support extended protection.\n  platform:\n  - net462\n- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.AsyncCallback,System.Object)\n  id: BeginAuthenticateAsClient(System.AsyncCallback,System.Object)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: BeginAuthenticateAsClient(AsyncCallback,Object)\n  nameWithType: NegotiateStream.BeginAuthenticateAsClient(AsyncCallback,Object)\n  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(AsyncCallback,Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. This method does not block.\n  remarks: \"The authentication uses the client's <xref:System.Net.CredentialCache.DefaultCredentials%2A>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel>, and the security level is <xref:System.Net.Security.ProtectionLevel>. The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.  \\n  \\n This method is asynchronous and does not block while the operation completes. To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method overloads.  \\n  \\n The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> method. Typically, the method is invoked by the `asyncCallback` delegate. For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)  \\n  \\n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.\"\n  example:\n  - \"The following code example demonstrates calling this method to begin an asynchronous authentication for the client.  \\n  \\n [!code-cpp[NclNegoAsyncClient#2](~/add/codesnippet/cpp/66fdfed9-ce77-41e0-af55-_1.cpp)]\\n [!code-cs[NclNegoAsyncClient#2](~/add/codesnippet/csharp/66fdfed9-ce77-41e0-af55-_1.cs)]\"\n  syntax:\n    content: public virtual IAsyncResult BeginAuthenticateAsClient (AsyncCallback asyncCallback, object asyncState);\n    parameters:\n    - id: asyncCallback\n      type: System.AsyncCallback\n      description: An <xref:System.AsyncCallback> delegate that references the method to invoke when the authentication is complete.\n    - id: asyncState\n      type: System.Object\n      description: A user-defined object containing information about the operation. This object is passed to the `asyncCallback` delegate when the operation completes.\n    return:\n      type: System.IAsyncResult\n      description: An <xref:System.IAsyncResult> object indicating the status of the asynchronous operation.\n  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*\n  exceptions:\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.Security.Authentication.InvalidCredentialException\n    commentId: T:System.Security.Authentication.InvalidCredentialException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"Authentication has already occurred.  \\n  \\n \\\\- or -  \\n  \\n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.\"\n  platform:\n  - net462\n- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.AsyncCallback,System.Object)\n  id: BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.AsyncCallback,System.Object)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: BeginAuthenticateAsClient(NetworkCredential,String,AsyncCallback,Object)\n  nameWithType: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,String,AsyncCallback,Object)\n  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,String,AsyncCallback,Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified credentials. This method does not block.\n  remarks: \"This method is asynchronous and does not block while the operation completes. To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method overloads.  \\n  \\n The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> method. Typically, the method is invoked by the `asyncCallback` delegate. For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)  \\n  \\n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.\"\n  syntax:\n    content: public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, AsyncCallback asyncCallback, object asyncState);\n    parameters:\n    - id: credential\n      type: System.Net.NetworkCredential\n      description: The <xref:System.Net.NetworkCredential> that is used to establish the identity of the client.\n    - id: targetName\n      type: System.String\n      description: The Service Principal Name (SPN) that uniquely identifies the server to authenticate.\n    - id: asyncCallback\n      type: System.AsyncCallback\n      description: An <xref:System.AsyncCallback> delegate that references the method to invoke when the authentication is complete.\n    - id: asyncState\n      type: System.Object\n      description: A user-defined object containing information about the write operation. This object is passed to the `asyncCallback` delegate when the operation completes.\n    return:\n      type: System.IAsyncResult\n      description: An <xref:System.IAsyncResult> object indicating the status of the asynchronous operation.\n  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>credential</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n \\\\- or -  \\n  \\n <code>targetName</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.Security.Authentication.InvalidCredentialException\n    commentId: T:System.Security.Authentication.InvalidCredentialException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"Authentication has already occurred.  \\n  \\n \\\\- or -  \\n  \\n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.\"\n  platform:\n  - net462\n- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.AsyncCallback,System.Object)\n  id: BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.AsyncCallback,System.Object)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,AsyncCallback,Object)\n  nameWithType: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,AsyncCallback,Object)\n  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,AsyncCallback,Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified credentials and channel binding. This method does not block.\n  remarks: \"This method is asynchronous and does not block while the operation completes. To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method overloads.  \\n  \\n The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> method. Typically, the method is invoked by the `asyncCallback` delegate. For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)  \\n  \\n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.\"\n  syntax:\n    content: public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, AsyncCallback asyncCallback, object asyncState);\n    parameters:\n    - id: credential\n      type: System.Net.NetworkCredential\n      description: The <xref:System.Net.NetworkCredential> that is used to establish the identity of the client.\n    - id: binding\n      type: System.Security.Authentication.ExtendedProtection.ChannelBinding\n      description: The <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> that is used for extended protection.\n    - id: targetName\n      type: System.String\n      description: The Service Principal Name (SPN) that uniquely identifies the server to authenticate.\n    - id: asyncCallback\n      type: System.AsyncCallback\n      description: An <xref:System.AsyncCallback> delegate that references the method to invoke when the authentication is complete.\n    - id: asyncState\n      type: System.Object\n      description: A user-defined object containing information about the write operation. This object is passed to the `asyncCallback` delegate when the operation completes.\n    return:\n      type: System.IAsyncResult\n      description: An <xref:System.IAsyncResult> object indicating the status of the asynchronous operation.\n  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>credential</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n \\\\- or -  \\n  \\n <code>targetName</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.Security.Authentication.InvalidCredentialException\n    commentId: T:System.Security.Authentication.InvalidCredentialException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"Authentication has already occurred.  \\n  \\n \\\\- or -  \\n  \\n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  platform:\n  - net462\n- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)\n  id: BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: BeginAuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)\n  nameWithType: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)\n  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified credentials and authentication options. This method does not block.\n  remarks: \"Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream. For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel> value. Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted. You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.  \\n  \\n This method is asynchronous and does not block while the operation completes. To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method overloads.  \\n  \\n The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> method. Typically, the method is invoked by the `asyncCallback` delegate. For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)  \\n  \\n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.\"\n  syntax:\n    content: public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback asyncCallback, object asyncState);\n    parameters:\n    - id: credential\n      type: System.Net.NetworkCredential\n      description: The <xref:System.Net.NetworkCredential> that is used to establish the identity of the client.\n    - id: targetName\n      type: System.String\n      description: The Service Principal Name (SPN) that uniquely identifies the server to authenticate.\n    - id: requiredProtectionLevel\n      type: System.Net.Security.ProtectionLevel\n      description: One of the <xref href=\"System.Net.Security.ProtectionLevel\"></xref> values, indicating the security services for the stream.\n    - id: allowedImpersonationLevel\n      type: System.Security.Principal.TokenImpersonationLevel\n      description: One of the <xref:System.Security.Principal.TokenImpersonationLevel> values, indicating how the server can use the client's credentials to access resources.\n    - id: asyncCallback\n      type: System.AsyncCallback\n      description: An <xref:System.AsyncCallback> delegate that references the method to invoke when the authentication is complete.\n    - id: asyncState\n      type: System.Object\n      description: A user-defined object containing information about the write operation. This object is passed to the `asyncCallback` delegate when the operation completes.\n    return:\n      type: System.IAsyncResult\n      description: An <xref:System.IAsyncResult> object indicating the status of the asynchronous operation.\n  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>credential</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n \\\\- or -  \\n  \\n <code>targetName</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.Security.Authentication.InvalidCredentialException\n    commentId: T:System.Security.Authentication.InvalidCredentialException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"Authentication has already occurred.  \\n  \\n \\\\- or -  \\n  \\n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.\"\n  platform:\n  - net462\n- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)\n  id: BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)\n  nameWithType: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)\n  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified credentials, authentication options, and channel binding. This method does not block.\n  remarks: \"Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream. For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel> value. Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted. You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.  \\n  \\n This method is asynchronous and does not block while the operation completes. To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method overloads.  \\n  \\n The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> method. Typically, the method is invoked by the `asyncCallback` delegate. For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)  \\n  \\n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.\"\n  syntax:\n    content: public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback asyncCallback, object asyncState);\n    parameters:\n    - id: credential\n      type: System.Net.NetworkCredential\n      description: The <xref:System.Net.NetworkCredential> that is used to establish the identity of the client.\n    - id: binding\n      type: System.Security.Authentication.ExtendedProtection.ChannelBinding\n      description: The <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> that is used for extended protection.\n    - id: targetName\n      type: System.String\n      description: The Service Principal Name (SPN) that uniquely identifies the server to authenticate.\n    - id: requiredProtectionLevel\n      type: System.Net.Security.ProtectionLevel\n      description: One of the <xref href=\"System.Net.Security.ProtectionLevel\"></xref> values, indicating the security services for the stream.\n    - id: allowedImpersonationLevel\n      type: System.Security.Principal.TokenImpersonationLevel\n      description: One of the <xref:System.Security.Principal.TokenImpersonationLevel> values, indicating how the server can use the client's credentials to access resources.\n    - id: asyncCallback\n      type: System.AsyncCallback\n      description: An <xref:System.AsyncCallback> delegate that references the method to invoke when the authentication is complete.\n    - id: asyncState\n      type: System.Object\n      description: A user-defined object containing information about the write operation. This object is passed to the `asyncCallback` delegate when the operation completes.\n    return:\n      type: System.IAsyncResult\n      description: An <xref:System.IAsyncResult> object indicating the status of the asynchronous operation.\n  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>credential</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n \\\\- or -  \\n  \\n <code>targetName</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.Security.Authentication.InvalidCredentialException\n    commentId: T:System.Security.Authentication.InvalidCredentialException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"Authentication has already occurred.  \\n  \\n \\\\- or -  \\n  \\n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  platform:\n  - net462\n- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.AsyncCallback,System.Object)\n  id: BeginAuthenticateAsServer(System.AsyncCallback,System.Object)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: BeginAuthenticateAsServer(AsyncCallback,Object)\n  nameWithType: NegotiateStream.BeginAuthenticateAsServer(AsyncCallback,Object)\n  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(AsyncCallback,Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. This method does not block.\n  remarks: \"The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel>, the security level is <xref:System.Net.Security.ProtectionLevel>.  \\n  \\n When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.  \\n  \\n To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method overloads.  \\n  \\n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.\"\n  syntax:\n    content: public virtual IAsyncResult BeginAuthenticateAsServer (AsyncCallback asyncCallback, object asyncState);\n    parameters:\n    - id: asyncCallback\n      type: System.AsyncCallback\n      description: An <xref:System.AsyncCallback> delegate that references the method to invoke when the authentication is complete.\n    - id: asyncState\n      type: System.Object\n      description: A user-defined object containing information about the operation. This object is passed to the `asyncCallback` delegate when the operation completes.\n    return:\n      type: System.IAsyncResult\n      description: An <xref:System.IAsyncResult> object indicating the status of the asynchronous operation.\n  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*\n  exceptions:\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.Security.Authentication.InvalidCredentialException\n    commentId: T:System.Security.Authentication.InvalidCredentialException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: Windows 95 and Windows 98 are not supported.\n  platform:\n  - net462\n- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.AsyncCallback,System.Object)\n  id: BeginAuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.AsyncCallback,System.Object)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: BeginAuthenticateAsServer(ExtendedProtectionPolicy,AsyncCallback,Object)\n  nameWithType: NegotiateStream.BeginAuthenticateAsServer(ExtendedProtectionPolicy,AsyncCallback,Object)\n  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(ExtendedProtectionPolicy,AsyncCallback,Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified extended protection policy. This method does not block.\n  remarks: \"The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel>, the security level is <xref:System.Net.Security.ProtectionLevel>.  \\n  \\n If the `policy` parameter is `null`, then an extended protection policy is used that has <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement>.  \\n  \\n When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.  \\n  \\n To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method overloads.  \\n  \\n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.\"\n  syntax:\n    content: public virtual IAsyncResult BeginAuthenticateAsServer (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, AsyncCallback asyncCallback, object asyncState);\n    parameters:\n    - id: policy\n      type: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\n      description: The <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\"></xref> that is used for extended protection.\n    - id: asyncCallback\n      type: System.AsyncCallback\n      description: An <xref:System.AsyncCallback> delegate that references the method to invoke when the authentication is complete.\n    - id: asyncState\n      type: System.Object\n      description: A user-defined object containing information about the write operation. This object is passed to the `asyncCallback` delegate when the operation completes.\n    return:\n      type: System.IAsyncResult\n      description: An <xref:System.IAsyncResult> object indicating the status of the asynchronous operation.\n  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding*> and <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames*> on the extended protection policy passed in the <code>policy</code> parameter are both <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.Security.Authentication.InvalidCredentialException\n    commentId: T:System.Security.Authentication.InvalidCredentialException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: Windows 95 and Windows 98 are not supported.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: The <code>policy</code> parameter was set to <xref href=\"System.Security.Authentication.ExtendedProtection.PolicyEnforcement\"></xref> on a platform that does not support extended protection.\n  platform:\n  - net462\n- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)\n  id: BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: BeginAuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)\n  nameWithType: NegotiateStream.BeginAuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)\n  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified server credentials and authentication options. This method does not block.\n  remarks: \"Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream. For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel> value. Successful authentication does not guarantee that, the requested <xref:System.Net.Security.ProtectionLevel> has been granted. You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.  \\n  \\n This method is asynchronous and does not block while the operation completes. To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method overloads.  \\n  \\n The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A> method. Typically, the method is invoked by the `asyncCallback` delegate. For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)  \\n  \\n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.\"\n  syntax:\n    content: public virtual IAsyncResult BeginAuthenticateAsServer (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback asyncCallback, object asyncState);\n    parameters:\n    - id: credential\n      type: System.Net.NetworkCredential\n      description: The <xref:System.Net.NetworkCredential> that is used to establish the identity of the client.\n    - id: requiredProtectionLevel\n      type: System.Net.Security.ProtectionLevel\n      description: One of the <xref href=\"System.Net.Security.ProtectionLevel\"></xref> values, indicating the security services for the stream.\n    - id: requiredImpersonationLevel\n      type: System.Security.Principal.TokenImpersonationLevel\n      description: One of the <xref:System.Security.Principal.TokenImpersonationLevel> values, indicating how the server can use the client's credentials to access resources.\n    - id: asyncCallback\n      type: System.AsyncCallback\n      description: An <xref:System.AsyncCallback> delegate that references the method to invoke when the authentication is complete.\n    - id: asyncState\n      type: System.Object\n      description: A user-defined object containing information about the operation. This object is passed to the `asyncCallback` delegate when the operation completes.\n    return:\n      type: System.IAsyncResult\n      description: An <xref:System.IAsyncResult> object indicating the status of the asynchronous operation.\n  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>credential</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>requiredImpersonationLevel</code> must be <xref:System.Security.Principal.TokenImpersonationLevel>, <xref:System.Security.Principal.TokenImpersonationLevel>, or <xref:System.Security.Principal.TokenImpersonationLevel>,\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.Security.Authentication.InvalidCredentialException\n    commentId: T:System.Security.Authentication.InvalidCredentialException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"Authentication has already occurred.  \\n  \\n \\\\- or -  \\n  \\n This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: Windows 95 and Windows 98 are not supported.\n  platform:\n  - net462\n- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)\n  id: BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: BeginAuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)\n  nameWithType: NegotiateStream.BeginAuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)\n  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified server credentials, authentication options, and extended protection policy. This method does not block.\n  remarks: \"Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream. For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel> value. Successful authentication does not guarantee that, the requested <xref:System.Net.Security.ProtectionLevel> has been granted. You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.  \\n  \\n If the `policy` parameter is `null`, then an extended protection policy is used that has <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement>.  \\n  \\n This method is asynchronous and does not block while the operation completes. To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method overloads.  \\n  \\n The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A> method. Typically, the method is invoked by the `asyncCallback` delegate. For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)  \\n  \\n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.\"\n  syntax:\n    content: public virtual IAsyncResult BeginAuthenticateAsServer (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback asyncCallback, object asyncState);\n    parameters:\n    - id: credential\n      type: System.Net.NetworkCredential\n      description: The <xref:System.Net.NetworkCredential> that is used to establish the identity of the client.\n    - id: policy\n      type: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\n      description: The <xref href=\"System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\"></xref> that is used for extended protection.\n    - id: requiredProtectionLevel\n      type: System.Net.Security.ProtectionLevel\n      description: One of the <xref href=\"System.Net.Security.ProtectionLevel\"></xref> values, indicating the security services for the stream.\n    - id: requiredImpersonationLevel\n      type: System.Security.Principal.TokenImpersonationLevel\n      description: One of the <xref:System.Security.Principal.TokenImpersonationLevel> values, indicating how the server can use the client's credentials to access resources.\n    - id: asyncCallback\n      type: System.AsyncCallback\n      description: An <xref:System.AsyncCallback> delegate that references the method to invoke when the authentication is complete.\n    - id: asyncState\n      type: System.Object\n      description: A user-defined object containing information about the write operation. This object is passed to the `asyncCallback` delegate when the operation completes.\n    return:\n      type: System.IAsyncResult\n      description: An <xref:System.IAsyncResult> object indicating the status of the asynchronous operation.\n  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding*> and <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames*> on the extended protection policy passed in the <code>policy</code> parameter are both <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>credential</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>requiredImpersonationLevel</code> must be <xref:System.Security.Principal.TokenImpersonationLevel>, <xref:System.Security.Principal.TokenImpersonationLevel>, or <xref:System.Security.Principal.TokenImpersonationLevel>,\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.Security.Authentication.InvalidCredentialException\n    commentId: T:System.Security.Authentication.InvalidCredentialException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"Authentication has already occurred.  \\n  \\n \\\\- or -  \\n  \\n This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: Windows 95 and Windows 98 are not supported.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: The <code>policy</code> parameter was set to <xref href=\"System.Security.Authentication.ExtendedProtection.PolicyEnforcement\"></xref> on a platform that does not support extended protection.\n  platform:\n  - net462\n- uid: System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  id: BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)\n  nameWithType: NegotiateStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)\n  fullName: System.Net.Security.NegotiateStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Begins an asynchronous read operation that reads data from the stream and stores it in the specified array.\n  remarks: \"If encryption, signing, or encryption and signing are enabled, the read operation reads the data from the underlying stream, checks the integrity of the data, and decrypts it. If no security services such as data encryption or signing are in use, this method starts an asynchronous read operation on the underlying stream.  \\n  \\n This method is asynchronous and does not block while the operation completes. To block until the operation completes, use the <xref:System.Net.Security.NegotiateStream.Read%2A> method.  \\n  \\n The asynchronous read operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndRead%2A> method. Typically, the method is invoked by the `asyncCallback` delegate. For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)  \\n  \\n The <xref:System.Net.Security.NegotiateStream> class does not support multiple simultaneous read operations. If you attempt to start a read operation while another read operation is already executing on the same stream, a <xref:System.NotSupportedException> exception will be thrown.  \\n  \\n You cannot call this method until you have successfully authenticated. To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.\"\n  example:\n  - \"The following code example demonstrates starting an asynchronous read operation. This code example is part of a larger example provided for the <xref:System.Net.Security.NegotiateStream> class.  \\n  \\n [!code-cs[NclNegoAsyncServer#1](~/add/codesnippet/csharp/45085c2d-bb14-48e7-a75f-_1.cs)]\\n [!code-cpp[NclNegoAsyncServer#1](~/add/codesnippet/cpp/45085c2d-bb14-48e7-a75f-_1.cpp)]\"\n  syntax:\n    content: public override IAsyncResult BeginRead (byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: A <xref:System.Byte> array that receives the bytes read from the stream.\n    - id: offset\n      type: System.Int32\n      description: The zero-based location in `buffer` at which to begin storing the data read from this stream.\n    - id: count\n      type: System.Int32\n      description: The maximum number of bytes to read from the stream.\n    - id: asyncCallback\n      type: System.AsyncCallback\n      description: An <xref:System.AsyncCallback> delegate that references the method to invoke when the read operation is complete.\n    - id: asyncState\n      type: System.Object\n      description: A user-defined object containing information about the read operation. This object is passed to the `asyncCallback` delegate when the operation completes.\n    return:\n      type: System.IAsyncResult\n      description: An <xref:System.IAsyncResult> object indicating the status of the asynchronous operation.\n  overload: System.Net.Security.NegotiateStream.BeginRead*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>buffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>offset</code> is less than 0.  \\n  \\n \\\\- or -  \\n  \\n <code>offset</code> is greater than the length of <code>buffer</code>.  \\n  \\n \\\\- or -  \\n  \\n <code>offset</code> plus <code>count</code> is greater than the length of <code>buffer</code>.\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"The read operation failed.  \\n  \\n \\\\- or -  \\n  \\n Encryption is in use, but the data could not be decrypted.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: There is already a read operation in progress.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: Authentication has not occurred.\n  platform:\n  - net462\n- uid: System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  id: BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)\n  nameWithType: NegotiateStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)\n  fullName: System.Net.Security.NegotiateStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Begins an asynchronous write operation that writes <xref:System.Byte>s from the specified buffer to the stream.\n  remarks: \"If encryption, signing, or encryption and signing are enabled, this method reads the data from buffer, encrypts, signs, or encrypts and signs it, and transmits it using the underlying stream. If no security services such as data encryption or signing are in use, this method starts an asynchronous write operation on the underlying stream.  \\n  \\n This method is asynchronous and does not block while the operation completes. To block until the operation completes, use the <xref:System.Net.Security.NegotiateStream.Read%2A> method.  \\n  \\n The asynchronous read operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndWrite%2A> method. Typically, the method is invoked by the `asyncCallback` delegate. For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)  \\n  \\n The <xref:System.Net.Security.NegotiateStream> class does not support multiple simultaneous write operations. If you attempt to start a write operation while another write operation is already executing on the same stream, a <xref:System.NotSupportedException> exception will be thrown.  \\n  \\n You cannot call this method until you have successfully authenticated. To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.\"\n  example:\n  - \"The following code example demonstrates beginning an asynchronous write operation.  \\n  \\n [!code-cpp[NclNegoAsyncClient#3](~/add/codesnippet/cpp/5748c807-4e74-4d4c-a4e4-_1.cpp)]\\n [!code-cs[NclNegoAsyncClient#3](~/add/codesnippet/csharp/5748c807-4e74-4d4c-a4e4-_1.cs)]  \\n  \\n The following method is called when the operation completes.  \\n  \\n [!code-cpp[NclNegoAsyncClient#4](~/add/codesnippet/cpp/5748c807-4e74-4d4c-a4e4-_2.cpp)]\\n [!code-cs[NclNegoAsyncClient#4](~/add/codesnippet/csharp/5748c807-4e74-4d4c-a4e4-_2.cs)]\"\n  syntax:\n    content: public override IAsyncResult BeginWrite (byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: A <xref:System.Byte> array that supplies the bytes to be written to the stream.\n    - id: offset\n      type: System.Int32\n      description: The zero-based location in `buffer` at which to begin reading bytes to be written to the stream.\n    - id: count\n      type: System.Int32\n      description: An <xref:System.Int32> value that specifies the number of bytes to read from `buffer`.\n    - id: asyncCallback\n      type: System.AsyncCallback\n      description: An <xref:System.AsyncCallback> delegate that references the method to invoke when the write operation is complete.\n    - id: asyncState\n      type: System.Object\n      description: A user-defined object containing information about the write operation. This object is passed to the `asyncCallback` delegate when the operation completes.\n    return:\n      type: System.IAsyncResult\n      description: An <xref:System.IAsyncResult> object indicating the status of the asynchronous operation.\n  overload: System.Net.Security.NegotiateStream.BeginWrite*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>buffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>offset is less than 0</code>.  \\n  \\n \\\\- or -  \\n  \\n <code>offset</code> is greater than the length of <code>buffer</code>.  \\n  \\n \\\\- or -  \\n  \\n <code>offset</code> plus count is greater than the length of <code>buffer</code>.\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"The write operation failed.  \\n  \\n \\\\- or -  \\n  \\n Encryption is in use, but the data could not be encrypted.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: There is already a write operation in progress.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: Authentication has not occurred.\n  platform:\n  - net462\n- uid: System.Net.Security.NegotiateStream.CanRead\n  id: CanRead\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: CanRead\n  nameWithType: NegotiateStream.CanRead\n  fullName: System.Net.Security.NegotiateStream.CanRead\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Gets a <xref:System.Boolean> value that indicates whether the underlying stream is readable.\n  remarks: If successful authentication has occurred, this property returns the value returned by invoking the <xref:System.IO.Stream.CanRead%2A> property on the underlying stream. The underlying stream is specified when you create an instance of the <xref:System.Net.Security.NegotiateStream> class.\n  example:\n  - \"The following code example demonstrates displaying the value of this property.  \\n  \\n [!code-cs[NclNegoSyncClient#2](~/add/codesnippet/csharp/p-system.net.security.ne_4_1.cs)]\\n [!code-cpp[NclNegoSyncClient#2](~/add/codesnippet/cpp/p-system.net.security.ne_4_1.cpp)]\"\n  syntax:\n    content: public override bool CanRead { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if authentication has occurred and the underlying stream is readable; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Net.Security.NegotiateStream.CanRead*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Security.NegotiateStream.CanSeek\n  id: CanSeek\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: CanSeek\n  nameWithType: NegotiateStream.CanSeek\n  fullName: System.Net.Security.NegotiateStream.CanSeek\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Gets a <xref:System.Boolean> value that indicates whether the underlying stream is seekable.\n  remarks: You should not attempt to set the position of the <xref:System.Net.Security.NegotiateStream> object or its underlying stream. The underlying stream is specified when you create an instance of the <xref:System.Net.Security.NegotiateStream> class.\n  example:\n  - \"The following code example demonstrates displaying the value of this property.  \\n  \\n [!code-cs[NclNegoSyncClient#2](~/add/codesnippet/csharp/p-system.net.security.ne_3_1.cs)]\\n [!code-cpp[NclNegoSyncClient#2](~/add/codesnippet/cpp/p-system.net.security.ne_3_1.cpp)]\"\n  syntax:\n    content: public override bool CanSeek { get; }\n    return:\n      type: System.Boolean\n      description: This property always returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Net.Security.NegotiateStream.CanSeek*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Security.NegotiateStream.CanTimeout\n  id: CanTimeout\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: CanTimeout\n  nameWithType: NegotiateStream.CanTimeout\n  fullName: System.Net.Security.NegotiateStream.CanTimeout\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Gets a <xref:System.Boolean> value that indicates whether the underlying stream supports time-outs.\n  remarks: This property returns the value returned by invoking the <xref:System.IO.Stream.CanTimeout%2A> property on the underlying stream. The underlying stream is specified when you create an instance of the <xref:System.Net.Security.NegotiateStream> class.\n  example:\n  - \"The following code example demonstrates displaying the value of this property.  \\n  \\n [!code-cs[NclNegoSyncClient#2](~/add/codesnippet/csharp/p-system.net.security.ne_2_1.cs)]\\n [!code-cpp[NclNegoSyncClient#2](~/add/codesnippet/cpp/p-system.net.security.ne_2_1.cpp)]\"\n  syntax:\n    content: public override bool CanTimeout { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the underlying stream supports time-outs; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Net.Security.NegotiateStream.CanTimeout*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Security.NegotiateStream.CanWrite\n  id: CanWrite\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: CanWrite\n  nameWithType: NegotiateStream.CanWrite\n  fullName: System.Net.Security.NegotiateStream.CanWrite\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Gets a <xref:System.Boolean> value that indicates whether the underlying stream is writable.\n  remarks: If successful authentication has occurred, this property returns the value returned by invoking the <xref:System.IO.Stream.CanWrite%2A> property on the underlying stream. The underlying stream is specified when you create an instance of the <xref:System.Net.Security.NegotiateStream> class.\n  example:\n  - \"The following code example demonstrates displaying the value of this property.  \\n  \\n [!code-cs[NclNegoSyncClient#2](~/add/codesnippet/csharp/p-system.net.security.ne_6_1.cs)]\\n [!code-cpp[NclNegoSyncClient#2](~/add/codesnippet/cpp/p-system.net.security.ne_6_1.cpp)]\"\n  syntax:\n    content: public override bool CanWrite { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if authentication has occurred and the underlying stream is writable; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Net.Security.NegotiateStream.CanWrite*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Security.NegotiateStream.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: NegotiateStream.Dispose(Boolean)\n  fullName: System.Net.Security.NegotiateStream.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Releases the unmanaged resources used by the <xref href=\"System.Net.Security.NegotiateStream\"></xref> and optionally releases the managed resources.\n  remarks: \"This method is called by the public `Dispose()`method and the <xref:System.Object.Finalize%2A> method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.  \\n  \\n When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.Net.Security.NegotiateStream> references. This method invokes the `Dispose()` method of each referenced object.\"\n  syntax:\n    content: protected override void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only unmanaged resources.\n  overload: System.Net.Security.NegotiateStream.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Security.NegotiateStream.EndAuthenticateAsClient(System.IAsyncResult)\n  id: EndAuthenticateAsClient(System.IAsyncResult)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: EndAuthenticateAsClient(IAsyncResult)\n  nameWithType: NegotiateStream.EndAuthenticateAsClient(IAsyncResult)\n  fullName: System.Net.Security.NegotiateStream.EndAuthenticateAsClient(IAsyncResult)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Ends a pending asynchronous client authentication operation that was started with a call to <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*>.\n  remarks: \"If the operation has not completed, this method blocks until it does. When the authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.  \\n  \\n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.  \\n  \\n To perform this operation synchronously, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method.\"\n  syntax:\n    content: public virtual void EndAuthenticateAsClient (IAsyncResult asyncResult);\n    parameters:\n    - id: asyncResult\n      type: System.IAsyncResult\n      description: An <xref:System.IAsyncResult> instance returned by a call to <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*>.\n  overload: System.Net.Security.NegotiateStream.EndAuthenticateAsClient*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>asyncResult</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>asyncResult</code> was not created by a call to <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*>.\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.Security.Authentication.InvalidCredentialException\n    commentId: T:System.Security.Authentication.InvalidCredentialException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: There is no pending client authentication to complete.\n  platform:\n  - net462\n- uid: System.Net.Security.NegotiateStream.EndAuthenticateAsServer(System.IAsyncResult)\n  id: EndAuthenticateAsServer(System.IAsyncResult)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: EndAuthenticateAsServer(IAsyncResult)\n  nameWithType: NegotiateStream.EndAuthenticateAsServer(IAsyncResult)\n  fullName: System.Net.Security.NegotiateStream.EndAuthenticateAsServer(IAsyncResult)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Ends a pending asynchronous client authentication operation that was started with a call to <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*>.\n  remarks: \"If the operation has not completed, this method blocks until it does.  \\n  \\n When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>. Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.  \\n  \\n If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>. In this case, you can retry the authentication with a different credential.  \\n  \\n To perform this operation synchronously, use the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method.\"\n  syntax:\n    content: public virtual void EndAuthenticateAsServer (IAsyncResult asyncResult);\n    parameters:\n    - id: asyncResult\n      type: System.IAsyncResult\n      description: An <xref:System.IAsyncResult> instance returned by a call to <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*>.\n  overload: System.Net.Security.NegotiateStream.EndAuthenticateAsServer*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>asyncResult</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>asyncResult</code> was not created by a call to <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*>.\n  - type: System.Security.Authentication.AuthenticationException\n    commentId: T:System.Security.Authentication.AuthenticationException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.Security.Authentication.InvalidCredentialException\n    commentId: T:System.Security.Authentication.InvalidCredentialException\n    description: The authentication failed. You can use this object to retry the authentication.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: There is no pending authentication to complete.\n  platform:\n  - net462\n- uid: System.Net.Security.NegotiateStream.EndRead(System.IAsyncResult)\n  id: EndRead(System.IAsyncResult)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: EndRead(IAsyncResult)\n  nameWithType: NegotiateStream.EndRead(IAsyncResult)\n  fullName: System.Net.Security.NegotiateStream.EndRead(IAsyncResult)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Ends an asynchronous read operation that was started with a call to <xref:System.Net.Security.NegotiateStream.BeginRead*>.\n  remarks: \"If the operation has not completed, this method blocks until it does.  \\n  \\n To perform this operation synchronously, use the <xref:System.Net.Security.NegotiateStream.Read%2A> method.  \\n  \\n You cannot call this method until you have successfully authenticated. To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.\"\n  example:\n  - \"The following code example demonstrates ending an asynchronous read operation. For an example that demonstrates starting the operation, see <xref:System.Net.Security.NegotiateStream.BeginRead%2A>.  \\n  \\n [!code-cs[NclNegoAsyncServer#3](~/add/codesnippet/csharp/m-system.net.security.ne_2_1.cs)]\\n [!code-cpp[NclNegoAsyncServer#3](~/add/codesnippet/cpp/m-system.net.security.ne_2_1.cpp)]\"\n  syntax:\n    content: public override int EndRead (IAsyncResult asyncResult);\n    parameters:\n    - id: asyncResult\n      type: System.IAsyncResult\n      description: An <xref:System.IAsyncResult> instance returned by a call to <xref:System.Net.Security.NegotiateStream.BeginRead*>\n    return:\n      type: System.Int32\n      description: A <xref:System.Int32> value that specifies the number of bytes read from the underlying stream.\n  overload: System.Net.Security.NegotiateStream.EndRead*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>asyncResult</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The asyncResult was not created by a call to <xref:System.Net.Security.NegotiateStream.BeginRead*>.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: Authentication has not occurred.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: The read operation failed.\n  platform:\n  - net462\n- uid: System.Net.Security.NegotiateStream.EndWrite(System.IAsyncResult)\n  id: EndWrite(System.IAsyncResult)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: EndWrite(IAsyncResult)\n  nameWithType: NegotiateStream.EndWrite(IAsyncResult)\n  fullName: System.Net.Security.NegotiateStream.EndWrite(IAsyncResult)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Ends an asynchronous write operation that was started with a call to <xref:System.Net.Security.NegotiateStream.BeginWrite*>.\n  remarks: \"If the operation has not completed, this method blocks until it does.  \\n  \\n You cannot call this method until you have successfully authenticated. To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.  \\n  \\n To perform this operation synchronously, use the <xref:System.Net.Security.NegotiateStream.Write%2A> method.\"\n  example:\n  - \"The following code example demonstrates a method that is called to complete the asynchronous write operation. For an example that demonstrates starting the operation, see <xref:System.Net.Security.NegotiateStream.BeginWrite%2A>.  \\n  \\n [!code-cpp[NclNegoAsyncClient#4](~/add/codesnippet/cpp/m-system.net.security.ne_0_1.cpp)]\\n [!code-cs[NclNegoAsyncClient#4](~/add/codesnippet/csharp/m-system.net.security.ne_0_1.cs)]\"\n  syntax:\n    content: public override void EndWrite (IAsyncResult asyncResult);\n    parameters:\n    - id: asyncResult\n      type: System.IAsyncResult\n      description: An <xref:System.IAsyncResult> instance returned by a call to <xref:System.Net.Security.NegotiateStream.BeginWrite*>\n  overload: System.Net.Security.NegotiateStream.EndWrite*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>asyncResult</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The asyncResult was not created by a call to <xref:System.Net.Security.NegotiateStream.BeginWrite*>.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: Authentication has not occurred.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: The write operation failed.\n  platform:\n  - net462\n- uid: System.Net.Security.NegotiateStream.Flush\n  id: Flush\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: Flush()\n  nameWithType: NegotiateStream.Flush()\n  fullName: System.Net.Security.NegotiateStream.Flush()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Causes any buffered data to be written to the underlying device.\n  remarks: This method invokes <xref:System.IO.Stream.Flush%2A> on the underlying stream.\n  example:\n  - \"The following code example demonstrates flushing the stream.  \\n  \\n [!code-cs[NclNegoSyncClient#4](~/add/codesnippet/csharp/m-system.net.security.ne_3_1.cs)]\\n [!code-cpp[NclNegoSyncClient#4](~/add/codesnippet/cpp/m-system.net.security.ne_3_1.cpp)]\"\n  syntax:\n    content: public override void Flush ();\n    parameters: []\n  overload: System.Net.Security.NegotiateStream.Flush*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Security.NegotiateStream.ImpersonationLevel\n  id: ImpersonationLevel\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: ImpersonationLevel\n  nameWithType: NegotiateStream.ImpersonationLevel\n  fullName: System.Net.Security.NegotiateStream.ImpersonationLevel\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Gets a value that indicates how the server can use the client's credentials.\n  remarks: You must successfully authenticate before calling this method. Clients specify the impersonation level when they request authentication by calling one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> methods. If you authenticate without specifying a <xref:System.Security.Principal.TokenImpersonationLevel> , <xref:System.Security.Principal.TokenImpersonationLevel> is used.\n  example:\n  - \"The following code example demonstrates displaying the value of this property.  \\n  \\n [!code-cs[NclNegoSyncClient#1](~/add/codesnippet/csharp/p-system.net.security.ne_5_1.cs)]\\n [!code-cpp[NclNegoSyncClient#1](~/add/codesnippet/cpp/p-system.net.security.ne_5_1.cpp)]\"\n  syntax:\n    content: public virtual System.Security.Principal.TokenImpersonationLevel ImpersonationLevel { get; }\n    return:\n      type: System.Security.Principal.TokenImpersonationLevel\n      description: One of the <xref:System.Security.Principal.TokenImpersonationLevel> values.\n  overload: System.Net.Security.NegotiateStream.ImpersonationLevel*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: Authentication failed or has not occurred.\n  platform:\n  - net462\n- uid: System.Net.Security.NegotiateStream.IsAuthenticated\n  id: IsAuthenticated\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: IsAuthenticated\n  nameWithType: NegotiateStream.IsAuthenticated\n  fullName: System.Net.Security.NegotiateStream.IsAuthenticated\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Gets a <xref:System.Boolean> value that indicates whether authentication was successful.\n  remarks: Clients authenticate by calling the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> methods. Servers authenticate by calling the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.\n  example:\n  - \"The following code example demonstrates displaying the value of this property.  \\n  \\n [!code-cs[NclNegoSyncClient#1](~/add/codesnippet/csharp/p-system.net.security.ne_10_1.cs)]\\n [!code-cpp[NclNegoSyncClient#1](~/add/codesnippet/cpp/p-system.net.security.ne_10_1.cpp)]\"\n  syntax:\n    content: public override bool IsAuthenticated { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if successful authentication occurred; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Net.Security.NegotiateStream.IsAuthenticated*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Security.NegotiateStream.IsEncrypted\n  id: IsEncrypted\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: IsEncrypted\n  nameWithType: NegotiateStream.IsEncrypted\n  fullName: System.Net.Security.NegotiateStream.IsEncrypted\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Gets a <xref:System.Boolean> value that indicates whether this <xref href=\"System.Net.Security.NegotiateStream\"></xref> uses data encryption.\n  remarks: Encryption helps to protect the privacy of the data; namely, it helps to ensure that while data is in transit it cannot be deciphered by third parties.\n  example:\n  - \"The following code example demonstrates displaying the value of this property.  \\n  \\n [!code-cs[NclNegoSyncClient#1](~/add/codesnippet/csharp/p-system.net.security.ne_8_1.cs)]\\n [!code-cpp[NclNegoSyncClient#1](~/add/codesnippet/cpp/p-system.net.security.ne_8_1.cpp)]\"\n  syntax:\n    content: public override bool IsEncrypted { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if data is encrypted before being transmitted over the network and decrypted when it reaches the remote endpoint; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Net.Security.NegotiateStream.IsEncrypted*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Security.NegotiateStream.IsMutuallyAuthenticated\n  id: IsMutuallyAuthenticated\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: IsMutuallyAuthenticated\n  nameWithType: NegotiateStream.IsMutuallyAuthenticated\n  fullName: System.Net.Security.NegotiateStream.IsMutuallyAuthenticated\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Gets a <xref:System.Boolean> value that indicates whether both the server and the client have been authenticated.\n  remarks: \"Mutual authentication is specified by the client when the client wants the server to provide credentials for authentication. By default, clients request mutual authentication.  \\n  \\n The Negotiate protocol selects either NTLM or Kerberos depending on the security protocols supported by the client and server. NTLM does not support mutual authentication.\"\n  example:\n  - \"The following code example demonstrates displaying the value of this property.  \\n  \\n [!code-cs[NclNegoSyncClient#1](~/add/codesnippet/csharp/p-system.net.security.ne_7_1.cs)]\\n [!code-cpp[NclNegoSyncClient#1](~/add/codesnippet/cpp/p-system.net.security.ne_7_1.cpp)]\"\n  syntax:\n    content: public override bool IsMutuallyAuthenticated { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the server has been authenticated; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Net.Security.NegotiateStream.IsMutuallyAuthenticated*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Security.NegotiateStream.IsServer\n  id: IsServer\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: IsServer\n  nameWithType: NegotiateStream.IsServer\n  fullName: System.Net.Security.NegotiateStream.IsServer\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Gets a <xref:System.Boolean> value that indicates whether the local side of the connection used by this <xref href=\"System.Net.Security.NegotiateStream\"></xref> was authenticated as the server.\n  remarks: \"If authentication failed or did not occur, this property returns `false`.  \\n  \\n To authenticate as the server, call the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.\"\n  example:\n  - \"The following code example demonstrates displaying the value of this property.  \\n  \\n [!code-cs[NclNegoSyncClient#1](~/add/codesnippet/csharp/p-system.net.security.ne_0_1.cs)]\\n [!code-cpp[NclNegoSyncClient#1](~/add/codesnippet/cpp/p-system.net.security.ne_0_1.cpp)]\"\n  syntax:\n    content: public override bool IsServer { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the local endpoint was successfully authenticated as the server side of the authenticated connection; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Net.Security.NegotiateStream.IsServer*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Security.NegotiateStream.IsSigned\n  id: IsSigned\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: IsSigned\n  nameWithType: NegotiateStream.IsSigned\n  fullName: System.Net.Security.NegotiateStream.IsSigned\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Gets a <xref:System.Boolean> value that indicates whether the data sent using this stream is signed.\n  remarks: Data signing helps to protect the integrity of the data; namely, it helps the recipient determine whether the data has been tampered with while in transit.\n  example:\n  - \"The following code example demonstrates displaying the value of this property.  \\n  \\n [!code-cs[NclNegoSyncClient#1](~/add/codesnippet/csharp/p-system.net.security.ne_13_1.cs)]\\n [!code-cpp[NclNegoSyncClient#1](~/add/codesnippet/cpp/p-system.net.security.ne_13_1.cpp)]\"\n  syntax:\n    content: public override bool IsSigned { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the data is signed before being transmitted; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Net.Security.NegotiateStream.IsSigned*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Security.NegotiateStream.Length\n  id: Length\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: Length\n  nameWithType: NegotiateStream.Length\n  fullName: System.Net.Security.NegotiateStream.Length\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Gets the length of the underlying stream.\n  remarks: This property returns the value returned by invoking the <xref:System.IO.Stream.Length%2A> property on the underlying stream. If the underlying stream is not seekable, this property will typically throw an exception. The run-time type of the underlying stream determines the run-time type of the exception that is thrown.\n  example:\n  - \"The following code example demonstrates displaying the value of this property.  \\n  \\n [!code-cs[NclNegoSyncClient#2](~/add/codesnippet/csharp/p-system.net.security.ne_9_1.cs)]\\n [!code-cpp[NclNegoSyncClient#2](~/add/codesnippet/cpp/p-system.net.security.ne_9_1.cpp)]\"\n  syntax:\n    content: public override long Length { get; }\n    return:\n      type: System.Int64\n      description: A <xref:System.Int64> that specifies the length of the underlying stream.\n  overload: System.Net.Security.NegotiateStream.Length*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: Getting the value of this property is not supported when the underlying stream is a <xref href=\"System.Net.Sockets.NetworkStream\"></xref>.\n  platform:\n  - net462\n- uid: System.Net.Security.NegotiateStream.Position\n  id: Position\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: Position\n  nameWithType: NegotiateStream.Position\n  fullName: System.Net.Security.NegotiateStream.Position\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Gets or sets the current position in the underlying stream.\n  remarks: This property returns the value returned by invoking the <xref:System.IO.Stream.Position%2A> property on the underlying stream. If the underlying stream is not seekable, this property will typically throw an exception. The run-time type of the underlying stream determines the run-time type of the exception that is thrown.\n  syntax:\n    content: public override long Position { get; set; }\n    return:\n      type: System.Int64\n      description: A <xref:System.Int64> that specifies the current position in the underlying stream.\n  overload: System.Net.Security.NegotiateStream.Position*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"Setting this property is not supported.  \\n  \\n \\\\- or -  \\n  \\n Getting the value of this property is not supported when the underlying stream is a <xref href=\\\"System.Net.Sockets.NetworkStream\\\"></xref>.\"\n  platform:\n  - net462\n- uid: System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)\n  id: Read(System.Byte[],System.Int32,System.Int32)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: Read(Byte[],Int32,Int32)\n  nameWithType: NegotiateStream.Read(Byte[],Int32,Int32)\n  fullName: System.Net.Security.NegotiateStream.Read(Byte[],Int32,Int32)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Reads data from this stream and stores it in the specified array.\n  remarks: \"The method reads a maximum of `count` bytes from the current stream and stores them in `buffer` beginning at `offset`.  \\n  \\n You cannot call this method until you have successfully authenticated. To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.  \\n  \\n To perform this operation asynchronously, use the <xref:System.Net.Security.NegotiateStream.BeginRead%2A> method.\"\n  example:\n  - \"The following code example demonstrates reading from a <xref:System.Net.Security.NegotiateStream>.  \\n  \\n [!code-cs[NclNegoSyncServer#1](~/add/codesnippet/csharp/e81792fe-7974-494d-8076-_1.cs)]\\n [!code-cpp[NclNegoSyncServer#1](~/add/codesnippet/cpp/e81792fe-7974-494d-8076-_1.cpp)]\"\n  syntax:\n    content: public override int Read (byte[] buffer, int offset, int count);\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: A <xref:System.Byte> array that receives the bytes read from the stream.\n    - id: offset\n      type: System.Int32\n      description: A <xref:System.Int32> containing the zero-based location in `buffer` at which to begin storing the data read from this stream.\n    - id: count\n      type: System.Int32\n      description: A <xref:System.Int32> containing the maximum number of bytes to read from the stream.\n    return:\n      type: System.Int32\n      description: A <xref:System.Int32> value that specifies the number of bytes read from the underlying stream. When there is no more data to be read, returns 0.\n  overload: System.Net.Security.NegotiateStream.Read*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: The read operation failed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: Authentication has not occurred.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: A Read operation is already in progress.\n  platform:\n  - net462\n- uid: System.Net.Security.NegotiateStream.ReadTimeout\n  id: ReadTimeout\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: ReadTimeout\n  nameWithType: NegotiateStream.ReadTimeout\n  fullName: System.Net.Security.NegotiateStream.ReadTimeout\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Gets or sets the amount of time a read operation blocks waiting for data.\n  remarks: \"This property returns the value returned by invoking the <xref:System.IO.Stream.ReadTimeout%2A> property on the underlying stream. When you set this property, the <xref:System.IO.Stream.ReadTimeout%2A> value on the underlying stream is set to the specified value.  \\n  \\n If the underlying stream is a <xref:System.Net.Sockets.NetworkStream>, ReadTimeout is in milliseconds and is set to <xref:System.Threading.Timeout.Infinite> by default so that read operations do not time out.\"\n  example:\n  - \"The following code example demonstrates displaying the value of this property.  \\n  \\n [!code-cs[NclNegoSyncClient#2](~/add/codesnippet/csharp/p-system.net.security.ne_12_1.cs)]\\n [!code-cpp[NclNegoSyncClient#2](~/add/codesnippet/cpp/p-system.net.security.ne_12_1.cpp)]\"\n  syntax:\n    content: public override int ReadTimeout { get; set; }\n    return:\n      type: System.Int32\n      description: A <xref:System.Int32> that specifies the amount of time that will elapse before a read operation fails.\n  overload: System.Net.Security.NegotiateStream.ReadTimeout*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Security.NegotiateStream.RemoteIdentity\n  id: RemoteIdentity\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: RemoteIdentity\n  nameWithType: NegotiateStream.RemoteIdentity\n  fullName: System.Net.Security.NegotiateStream.RemoteIdentity\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Gets information about the identity of the remote party sharing this authenticated stream.\n  remarks: When accessed by the client, this property returns a <xref:System.Security.Principal.GenericIdentity> containing the Service Principal Name (SPN) of the server and the authentication protocol used. When accessed by the server, this property returns a <xref:System.Security.Principal.WindowsIdentity> that describes the client. If the <xref:System.Security.Principal.WindowsIdentity> is not available, client information is returned to the server in a <xref:System.Security.Principal.GenericIdentity>.\n  example:\n  - \"The following code example demonstrates displaying the value of this property.  \\n  \\n [!code-cs[NclNegoAsyncServer#2](~/add/codesnippet/csharp/p-system.net.security.ne_1_1.cs)]\\n [!code-cpp[NclNegoAsyncServer#2](~/add/codesnippet/cpp/p-system.net.security.ne_1_1.cpp)]\"\n  syntax:\n    content: public virtual System.Security.Principal.IIdentity RemoteIdentity { get; }\n    return:\n      type: System.Security.Principal.IIdentity\n      description: An <xref:System.Security.Principal.IIdentity> object that describes the identity of the remote endpoint.\n  overload: System.Net.Security.NegotiateStream.RemoteIdentity*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: Authentication failed or has not occurred.\n  platform:\n  - net462\n- uid: System.Net.Security.NegotiateStream.Seek(System.Int64,System.IO.SeekOrigin)\n  id: Seek(System.Int64,System.IO.SeekOrigin)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: Seek(Int64,SeekOrigin)\n  nameWithType: NegotiateStream.Seek(Int64,SeekOrigin)\n  fullName: System.Net.Security.NegotiateStream.Seek(Int64,SeekOrigin)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Throws <xref:System.NotSupportedException>.\n  remarks: Do not call this method. It is inherited, but is not supported by <xref:System.Net.Security.NegotiateStream>.\n  syntax:\n    content: public override long Seek (long offset, System.IO.SeekOrigin origin);\n    parameters:\n    - id: offset\n      type: System.Int64\n      description: This value is ignored.\n    - id: origin\n      type: System.IO.SeekOrigin\n      description: This value is ignored.\n    return:\n      type: System.Int64\n      description: Always throws a <xref:System.NotSupportedException>.\n  overload: System.Net.Security.NegotiateStream.Seek*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: Seeking is not supported on <xref href=\"System.Net.Security.NegotiateStream\"></xref>.\n  platform:\n  - net462\n- uid: System.Net.Security.NegotiateStream.SetLength(System.Int64)\n  id: SetLength(System.Int64)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: SetLength(Int64)\n  nameWithType: NegotiateStream.SetLength(Int64)\n  fullName: System.Net.Security.NegotiateStream.SetLength(Int64)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Sets the length of the underlying stream.\n  syntax:\n    content: public override void SetLength (long value);\n    parameters:\n    - id: value\n      type: System.Int64\n      description: An <xref:System.Int64> value that specifies the length of the stream.\n  overload: System.Net.Security.NegotiateStream.SetLength*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Security.NegotiateStream.Write(System.Byte[],System.Int32,System.Int32)\n  id: Write(System.Byte[],System.Int32,System.Int32)\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: Write(Byte[],Int32,Int32)\n  nameWithType: NegotiateStream.Write(Byte[],Int32,Int32)\n  fullName: System.Net.Security.NegotiateStream.Write(Byte[],Int32,Int32)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Write the specified number of <xref:System.Byte>s to the underlying stream using the specified buffer and offset.\n  remarks: \"If encryption, signing, or encryption and signing are enabled, this method reads the data from buffer, encrypts, signs, or encrypts and signs it, and transmits it using the underlying stream. If no security services such as data encryption or signing are in use, this method invokes <xref:System.IO.Stream.Write%2A> on the underlying stream.  \\n  \\n This method blocks while the write operation completes. To prevent blocking while the operation completes, use the Write method.  \\n  \\n You cannot call this method until you have successfully authenticated. To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.  \\n  \\n The <xref:System.Net.Security.NegotiateStream> class does not support multiple simultaneous write operations. If you attempt to start a write operation while another write operation is already executing on the same stream, a <xref:System.NotSupportedException> exception will be thrown.\"\n  example:\n  - \"The following code example demonstrates writing to a <xref:System.Net.Security.NegotiateStream>.  \\n  \\n [!code-cs[NclNegoSyncClient#4](~/add/codesnippet/csharp/1536316b-fecf-4b4a-b33a-_1.cs)]\\n [!code-cpp[NclNegoSyncClient#4](~/add/codesnippet/cpp/1536316b-fecf-4b4a-b33a-_1.cpp)]\"\n  syntax:\n    content: public override void Write (byte[] buffer, int offset, int count);\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: A <xref:System.Byte> array that supplies the bytes written to the stream.\n    - id: offset\n      type: System.Int32\n      description: An <xref:System.Int32> containing the zero-based location in `buffer` at which to begin reading bytes to be written to the stream.\n    - id: count\n      type: System.Int32\n      description: A <xref:System.Int32> containing the number of bytes to read from `buffer`.\n  overload: System.Net.Security.NegotiateStream.Write*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>buffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>offset is less than 0</code>.  \\n  \\n \\\\- or -  \\n  \\n <code>offset</code> is greater than the length of <code>buffer</code>.  \\n  \\n \\\\- or -  \\n  \\n <code>offset</code> plus count is greater than the length of <code>buffer</code>.\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"The write operation failed.  \\n  \\n \\\\- or -  \\n  \\n Encryption is in use, but the data could not be encrypted.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: There is already a write operation in progress.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: This object has been closed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: Authentication has not occurred.\n  platform:\n  - net462\n- uid: System.Net.Security.NegotiateStream.WriteTimeout\n  id: WriteTimeout\n  parent: System.Net.Security.NegotiateStream\n  langs:\n  - csharp\n  name: WriteTimeout\n  nameWithType: NegotiateStream.WriteTimeout\n  fullName: System.Net.Security.NegotiateStream.WriteTimeout\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Security\n  summary: Gets or sets the amount of time a write operation blocks waiting for data.\n  remarks: \"This property returns the value returned by invoking the <xref:System.IO.Stream.WriteTimeout%2A> property on the underlying stream. For set operations, the specified value sets the <xref:System.IO.Stream.WriteTimeout%2A> value on the underlying stream.  \\n  \\n If the underlying stream is a <xref:System.Net.Sockets.NetworkStream>, WriteTimeout is in milliseconds and is set to <xref:System.Threading.Timeout.Infinite> by default so that write operations do not time out.\"\n  example:\n  - \"The following code example demonstrates displaying the value of this property.  \\n  \\n [!code-cs[NclNegoSyncClient#2](~/add/codesnippet/csharp/p-system.net.security.ne_11_1.cs)]\\n [!code-cpp[NclNegoSyncClient#2](~/add/codesnippet/cpp/p-system.net.security.ne_11_1.cpp)]\"\n  syntax:\n    content: public override int WriteTimeout { get; set; }\n    return:\n      type: System.Int32\n      description: A <xref:System.Int32> that specifies the amount of time that will elapse before a write operation fails.\n  overload: System.Net.Security.NegotiateStream.WriteTimeout*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Net.Security.AuthenticatedStream\n  isExternal: false\n  name: System.Net.Security.AuthenticatedStream\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.Security.Authentication.AuthenticationException\n  parent: System.Security.Authentication\n  isExternal: false\n  name: AuthenticationException\n  nameWithType: AuthenticationException\n  fullName: System.Security.Authentication.AuthenticationException\n- uid: System.Security.Authentication.InvalidCredentialException\n  parent: System.Security.Authentication\n  isExternal: false\n  name: InvalidCredentialException\n  nameWithType: InvalidCredentialException\n  fullName: System.Security.Authentication.InvalidCredentialException\n- uid: System.ObjectDisposedException\n  isExternal: true\n  name: System.ObjectDisposedException\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.NotSupportedException\n  isExternal: true\n  name: System.NotSupportedException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.PlatformNotSupportedException\n  isExternal: true\n  name: System.PlatformNotSupportedException\n- uid: System.IO.IOException\n  isExternal: true\n  name: System.IO.IOException\n- uid: System.Net.Security.NegotiateStream.#ctor(System.IO.Stream)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: NegotiateStream(Stream)\n  nameWithType: NegotiateStream.NegotiateStream(Stream)\n  fullName: System.Net.Security.NegotiateStream.NegotiateStream(Stream)\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: true\n  name: Stream\n  nameWithType: Stream\n  fullName: System.IO.Stream\n- uid: System.Net.Security.NegotiateStream.#ctor(System.IO.Stream,System.Boolean)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: NegotiateStream(Stream,Boolean)\n  nameWithType: NegotiateStream.NegotiateStream(Stream,Boolean)\n  fullName: System.Net.Security.NegotiateStream.NegotiateStream(Stream,Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: AuthenticateAsClient()\n  nameWithType: NegotiateStream.AuthenticateAsClient()\n  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient()\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: AuthenticateAsClient(NetworkCredential,String)\n  nameWithType: NegotiateStream.AuthenticateAsClient(NetworkCredential,String)\n  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient(NetworkCredential,String)\n- uid: System.Net.NetworkCredential\n  parent: System.Net\n  isExternal: true\n  name: NetworkCredential\n  nameWithType: NetworkCredential\n  fullName: System.Net.NetworkCredential\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: AuthenticateAsClient(NetworkCredential,ChannelBinding,String)\n  nameWithType: NegotiateStream.AuthenticateAsClient(NetworkCredential,ChannelBinding,String)\n  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient(NetworkCredential,ChannelBinding,String)\n- uid: System.Security.Authentication.ExtendedProtection.ChannelBinding\n  parent: System.Security.Authentication.ExtendedProtection\n  isExternal: true\n  name: ChannelBinding\n  nameWithType: ChannelBinding\n  fullName: System.Security.Authentication.ExtendedProtection.ChannelBinding\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: AuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)\n  nameWithType: NegotiateStream.AuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)\n  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)\n- uid: System.Net.Security.ProtectionLevel\n  parent: System.Net.Security\n  isExternal: false\n  name: ProtectionLevel\n  nameWithType: ProtectionLevel\n  fullName: System.Net.Security.ProtectionLevel\n- uid: System.Security.Principal.TokenImpersonationLevel\n  parent: System.Security.Principal\n  isExternal: true\n  name: TokenImpersonationLevel\n  nameWithType: TokenImpersonationLevel\n  fullName: System.Security.Principal.TokenImpersonationLevel\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: AuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)\n  nameWithType: NegotiateStream.AuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)\n  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: AuthenticateAsClientAsync()\n  nameWithType: NegotiateStream.AuthenticateAsClientAsync()\n  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync()\n- uid: System.Threading.Tasks.Task\n  parent: System.Threading.Tasks\n  isExternal: true\n  name: Task\n  nameWithType: Task\n  fullName: System.Threading.Tasks.Task\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: AuthenticateAsClientAsync(NetworkCredential,String)\n  nameWithType: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,String)\n  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,String)\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String)\n  nameWithType: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String)\n  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String)\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: AuthenticateAsClientAsync(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)\n  nameWithType: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)\n  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)\n  nameWithType: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)\n  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: AuthenticateAsServer()\n  nameWithType: NegotiateStream.AuthenticateAsServer()\n  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServer()\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: AuthenticateAsServer(ExtendedProtectionPolicy)\n  nameWithType: NegotiateStream.AuthenticateAsServer(ExtendedProtectionPolicy)\n  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServer(ExtendedProtectionPolicy)\n- uid: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\n  parent: System.Security.Authentication.ExtendedProtection\n  isExternal: false\n  name: ExtendedProtectionPolicy\n  nameWithType: ExtendedProtectionPolicy\n  fullName: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: AuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)\n  nameWithType: NegotiateStream.AuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)\n  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: AuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)\n  nameWithType: NegotiateStream.AuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)\n  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: AuthenticateAsServerAsync()\n  nameWithType: NegotiateStream.AuthenticateAsServerAsync()\n  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync()\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: AuthenticateAsServerAsync(ExtendedProtectionPolicy)\n  nameWithType: NegotiateStream.AuthenticateAsServerAsync(ExtendedProtectionPolicy)\n  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(ExtendedProtectionPolicy)\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: AuthenticateAsServerAsync(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)\n  nameWithType: NegotiateStream.AuthenticateAsServerAsync(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)\n  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: AuthenticateAsServerAsync(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)\n  nameWithType: NegotiateStream.AuthenticateAsServerAsync(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)\n  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)\n- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.AsyncCallback,System.Object)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: BeginAuthenticateAsClient(AsyncCallback,Object)\n  nameWithType: NegotiateStream.BeginAuthenticateAsClient(AsyncCallback,Object)\n  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(AsyncCallback,Object)\n- uid: System.IAsyncResult\n  parent: System\n  isExternal: true\n  name: IAsyncResult\n  nameWithType: IAsyncResult\n  fullName: System.IAsyncResult\n- uid: System.AsyncCallback\n  parent: System\n  isExternal: true\n  name: AsyncCallback\n  nameWithType: AsyncCallback\n  fullName: System.AsyncCallback\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.AsyncCallback,System.Object)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: BeginAuthenticateAsClient(NetworkCredential,String,AsyncCallback,Object)\n  nameWithType: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,String,AsyncCallback,Object)\n  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,String,AsyncCallback,Object)\n- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.AsyncCallback,System.Object)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,AsyncCallback,Object)\n  nameWithType: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,AsyncCallback,Object)\n  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,AsyncCallback,Object)\n- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: BeginAuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)\n  nameWithType: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)\n  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)\n- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)\n  nameWithType: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)\n  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)\n- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.AsyncCallback,System.Object)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: BeginAuthenticateAsServer(AsyncCallback,Object)\n  nameWithType: NegotiateStream.BeginAuthenticateAsServer(AsyncCallback,Object)\n  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(AsyncCallback,Object)\n- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.AsyncCallback,System.Object)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: BeginAuthenticateAsServer(ExtendedProtectionPolicy,AsyncCallback,Object)\n  nameWithType: NegotiateStream.BeginAuthenticateAsServer(ExtendedProtectionPolicy,AsyncCallback,Object)\n  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(ExtendedProtectionPolicy,AsyncCallback,Object)\n- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: BeginAuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)\n  nameWithType: NegotiateStream.BeginAuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)\n  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)\n- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: BeginAuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)\n  nameWithType: NegotiateStream.BeginAuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)\n  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)\n- uid: System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)\n  nameWithType: NegotiateStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)\n  fullName: System.Net.Security.NegotiateStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)\n- uid: System.Byte[]\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: Byte[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)\n  nameWithType: NegotiateStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)\n  fullName: System.Net.Security.NegotiateStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)\n- uid: System.Net.Security.NegotiateStream.CanRead\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: CanRead\n  nameWithType: NegotiateStream.CanRead\n  fullName: System.Net.Security.NegotiateStream.CanRead\n- uid: System.Net.Security.NegotiateStream.CanSeek\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: CanSeek\n  nameWithType: NegotiateStream.CanSeek\n  fullName: System.Net.Security.NegotiateStream.CanSeek\n- uid: System.Net.Security.NegotiateStream.CanTimeout\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: CanTimeout\n  nameWithType: NegotiateStream.CanTimeout\n  fullName: System.Net.Security.NegotiateStream.CanTimeout\n- uid: System.Net.Security.NegotiateStream.CanWrite\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: CanWrite\n  nameWithType: NegotiateStream.CanWrite\n  fullName: System.Net.Security.NegotiateStream.CanWrite\n- uid: System.Net.Security.NegotiateStream.Dispose(System.Boolean)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: NegotiateStream.Dispose(Boolean)\n  fullName: System.Net.Security.NegotiateStream.Dispose(Boolean)\n- uid: System.Net.Security.NegotiateStream.EndAuthenticateAsClient(System.IAsyncResult)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: EndAuthenticateAsClient(IAsyncResult)\n  nameWithType: NegotiateStream.EndAuthenticateAsClient(IAsyncResult)\n  fullName: System.Net.Security.NegotiateStream.EndAuthenticateAsClient(IAsyncResult)\n- uid: System.Net.Security.NegotiateStream.EndAuthenticateAsServer(System.IAsyncResult)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: EndAuthenticateAsServer(IAsyncResult)\n  nameWithType: NegotiateStream.EndAuthenticateAsServer(IAsyncResult)\n  fullName: System.Net.Security.NegotiateStream.EndAuthenticateAsServer(IAsyncResult)\n- uid: System.Net.Security.NegotiateStream.EndRead(System.IAsyncResult)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: EndRead(IAsyncResult)\n  nameWithType: NegotiateStream.EndRead(IAsyncResult)\n  fullName: System.Net.Security.NegotiateStream.EndRead(IAsyncResult)\n- uid: System.Net.Security.NegotiateStream.EndWrite(System.IAsyncResult)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: EndWrite(IAsyncResult)\n  nameWithType: NegotiateStream.EndWrite(IAsyncResult)\n  fullName: System.Net.Security.NegotiateStream.EndWrite(IAsyncResult)\n- uid: System.Net.Security.NegotiateStream.Flush\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: Flush()\n  nameWithType: NegotiateStream.Flush()\n  fullName: System.Net.Security.NegotiateStream.Flush()\n- uid: System.Net.Security.NegotiateStream.ImpersonationLevel\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: ImpersonationLevel\n  nameWithType: NegotiateStream.ImpersonationLevel\n  fullName: System.Net.Security.NegotiateStream.ImpersonationLevel\n- uid: System.Net.Security.NegotiateStream.IsAuthenticated\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: IsAuthenticated\n  nameWithType: NegotiateStream.IsAuthenticated\n  fullName: System.Net.Security.NegotiateStream.IsAuthenticated\n- uid: System.Net.Security.NegotiateStream.IsEncrypted\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: IsEncrypted\n  nameWithType: NegotiateStream.IsEncrypted\n  fullName: System.Net.Security.NegotiateStream.IsEncrypted\n- uid: System.Net.Security.NegotiateStream.IsMutuallyAuthenticated\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: IsMutuallyAuthenticated\n  nameWithType: NegotiateStream.IsMutuallyAuthenticated\n  fullName: System.Net.Security.NegotiateStream.IsMutuallyAuthenticated\n- uid: System.Net.Security.NegotiateStream.IsServer\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: IsServer\n  nameWithType: NegotiateStream.IsServer\n  fullName: System.Net.Security.NegotiateStream.IsServer\n- uid: System.Net.Security.NegotiateStream.IsSigned\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: IsSigned\n  nameWithType: NegotiateStream.IsSigned\n  fullName: System.Net.Security.NegotiateStream.IsSigned\n- uid: System.Net.Security.NegotiateStream.Length\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: Length\n  nameWithType: NegotiateStream.Length\n  fullName: System.Net.Security.NegotiateStream.Length\n- uid: System.Int64\n  parent: System\n  isExternal: true\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.Net.Security.NegotiateStream.Position\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: Position\n  nameWithType: NegotiateStream.Position\n  fullName: System.Net.Security.NegotiateStream.Position\n- uid: System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: Read(Byte[],Int32,Int32)\n  nameWithType: NegotiateStream.Read(Byte[],Int32,Int32)\n  fullName: System.Net.Security.NegotiateStream.Read(Byte[],Int32,Int32)\n- uid: System.Net.Security.NegotiateStream.ReadTimeout\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: ReadTimeout\n  nameWithType: NegotiateStream.ReadTimeout\n  fullName: System.Net.Security.NegotiateStream.ReadTimeout\n- uid: System.Net.Security.NegotiateStream.RemoteIdentity\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: RemoteIdentity\n  nameWithType: NegotiateStream.RemoteIdentity\n  fullName: System.Net.Security.NegotiateStream.RemoteIdentity\n- uid: System.Security.Principal.IIdentity\n  parent: System.Security.Principal\n  isExternal: true\n  name: IIdentity\n  nameWithType: IIdentity\n  fullName: System.Security.Principal.IIdentity\n- uid: System.Net.Security.NegotiateStream.Seek(System.Int64,System.IO.SeekOrigin)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: Seek(Int64,SeekOrigin)\n  nameWithType: NegotiateStream.Seek(Int64,SeekOrigin)\n  fullName: System.Net.Security.NegotiateStream.Seek(Int64,SeekOrigin)\n- uid: System.IO.SeekOrigin\n  parent: System.IO\n  isExternal: true\n  name: SeekOrigin\n  nameWithType: SeekOrigin\n  fullName: System.IO.SeekOrigin\n- uid: System.Net.Security.NegotiateStream.SetLength(System.Int64)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: SetLength(Int64)\n  nameWithType: NegotiateStream.SetLength(Int64)\n  fullName: System.Net.Security.NegotiateStream.SetLength(Int64)\n- uid: System.Net.Security.NegotiateStream.Write(System.Byte[],System.Int32,System.Int32)\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: Write(Byte[],Int32,Int32)\n  nameWithType: NegotiateStream.Write(Byte[],Int32,Int32)\n  fullName: System.Net.Security.NegotiateStream.Write(Byte[],Int32,Int32)\n- uid: System.Net.Security.NegotiateStream.WriteTimeout\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: WriteTimeout\n  nameWithType: NegotiateStream.WriteTimeout\n  fullName: System.Net.Security.NegotiateStream.WriteTimeout\n- uid: System.Net.Security.NegotiateStream.#ctor*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: NegotiateStream\n  nameWithType: NegotiateStream.NegotiateStream\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: AuthenticateAsClient\n  nameWithType: NegotiateStream.AuthenticateAsClient\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: AuthenticateAsClientAsync\n  nameWithType: NegotiateStream.AuthenticateAsClientAsync\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: AuthenticateAsServer\n  nameWithType: NegotiateStream.AuthenticateAsServer\n- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: AuthenticateAsServerAsync\n  nameWithType: NegotiateStream.AuthenticateAsServerAsync\n- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: BeginAuthenticateAsClient\n  nameWithType: NegotiateStream.BeginAuthenticateAsClient\n- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: BeginAuthenticateAsServer\n  nameWithType: NegotiateStream.BeginAuthenticateAsServer\n- uid: System.Net.Security.NegotiateStream.BeginRead*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: BeginRead\n  nameWithType: NegotiateStream.BeginRead\n- uid: System.Net.Security.NegotiateStream.BeginWrite*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: BeginWrite\n  nameWithType: NegotiateStream.BeginWrite\n- uid: System.Net.Security.NegotiateStream.CanRead*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: CanRead\n  nameWithType: NegotiateStream.CanRead\n- uid: System.Net.Security.NegotiateStream.CanSeek*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: CanSeek\n  nameWithType: NegotiateStream.CanSeek\n- uid: System.Net.Security.NegotiateStream.CanTimeout*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: CanTimeout\n  nameWithType: NegotiateStream.CanTimeout\n- uid: System.Net.Security.NegotiateStream.CanWrite*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: CanWrite\n  nameWithType: NegotiateStream.CanWrite\n- uid: System.Net.Security.NegotiateStream.Dispose*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: Dispose\n  nameWithType: NegotiateStream.Dispose\n- uid: System.Net.Security.NegotiateStream.EndAuthenticateAsClient*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: EndAuthenticateAsClient\n  nameWithType: NegotiateStream.EndAuthenticateAsClient\n- uid: System.Net.Security.NegotiateStream.EndAuthenticateAsServer*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: EndAuthenticateAsServer\n  nameWithType: NegotiateStream.EndAuthenticateAsServer\n- uid: System.Net.Security.NegotiateStream.EndRead*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: EndRead\n  nameWithType: NegotiateStream.EndRead\n- uid: System.Net.Security.NegotiateStream.EndWrite*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: EndWrite\n  nameWithType: NegotiateStream.EndWrite\n- uid: System.Net.Security.NegotiateStream.Flush*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: Flush\n  nameWithType: NegotiateStream.Flush\n- uid: System.Net.Security.NegotiateStream.ImpersonationLevel*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: ImpersonationLevel\n  nameWithType: NegotiateStream.ImpersonationLevel\n- uid: System.Net.Security.NegotiateStream.IsAuthenticated*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: IsAuthenticated\n  nameWithType: NegotiateStream.IsAuthenticated\n- uid: System.Net.Security.NegotiateStream.IsEncrypted*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: IsEncrypted\n  nameWithType: NegotiateStream.IsEncrypted\n- uid: System.Net.Security.NegotiateStream.IsMutuallyAuthenticated*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: IsMutuallyAuthenticated\n  nameWithType: NegotiateStream.IsMutuallyAuthenticated\n- uid: System.Net.Security.NegotiateStream.IsServer*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: IsServer\n  nameWithType: NegotiateStream.IsServer\n- uid: System.Net.Security.NegotiateStream.IsSigned*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: IsSigned\n  nameWithType: NegotiateStream.IsSigned\n- uid: System.Net.Security.NegotiateStream.Length*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: Length\n  nameWithType: NegotiateStream.Length\n- uid: System.Net.Security.NegotiateStream.Position*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: Position\n  nameWithType: NegotiateStream.Position\n- uid: System.Net.Security.NegotiateStream.Read*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: Read\n  nameWithType: NegotiateStream.Read\n- uid: System.Net.Security.NegotiateStream.ReadTimeout*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: ReadTimeout\n  nameWithType: NegotiateStream.ReadTimeout\n- uid: System.Net.Security.NegotiateStream.RemoteIdentity*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: RemoteIdentity\n  nameWithType: NegotiateStream.RemoteIdentity\n- uid: System.Net.Security.NegotiateStream.Seek*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: Seek\n  nameWithType: NegotiateStream.Seek\n- uid: System.Net.Security.NegotiateStream.SetLength*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: SetLength\n  nameWithType: NegotiateStream.SetLength\n- uid: System.Net.Security.NegotiateStream.Write*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: Write\n  nameWithType: NegotiateStream.Write\n- uid: System.Net.Security.NegotiateStream.WriteTimeout*\n  parent: System.Net.Security.NegotiateStream\n  isExternal: false\n  name: WriteTimeout\n  nameWithType: NegotiateStream.WriteTimeout\n"}