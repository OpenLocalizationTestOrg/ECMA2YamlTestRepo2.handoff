{"nodes":[{"pos":[1599,1651],"content":"Represents the parameters used to invoke a compiler.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the parameters used to invoke a compiler.","pos":[0,52]}]},{"pos":[1664,5717],"content":"A CompilerParameters object represents the settings and options for an <xref:System.CodeDom.Compiler.ICodeCompiler> interface.       If you are compiling an executable program, you must set the <xref:System.CodeDom.Compiler.CompilerParameters.GenerateExecutable%2A> property to `true`. When the <xref:System.CodeDom.Compiler.CompilerParameters.GenerateExecutable%2A> is set to `false`, the compiler will generate a class library. By default, a new CompilerParameters is initialized with its <xref:System.CodeDom.Compiler.CompilerParameters.GenerateExecutable%2A> property set to `false`. If you are compiling an executable from a CodeDOM graph, a <xref:System.CodeDom.CodeEntryPointMethod> must be defined in the graph. If there are multiple code entry points, you can indicate the class that defines the entry point to use by setting the name of the class to the <xref:System.CodeDom.Compiler.CompilerParameters.MainClass%2A> property.       You can specify a file name for the output assembly in the <xref:System.CodeDom.Compiler.CompilerParameters.OutputAssembly%2A> property. Otherwise, a default output file name will be used. To include debug information in a generated assembly, set the <xref:System.CodeDom.Compiler.CompilerParameters.IncludeDebugInformation%2A> property to `true`. If your project references any assemblies, you must specify the assembly names as items in a <xref:System.Collections.Specialized.StringCollection> set to the <xref:System.CodeDom.Compiler.CompilerParameters.ReferencedAssemblies%2A> property of the CompilerParameters used when invoking compilation.       You can compile an assembly that is written to memory rather than disk by setting the <xref:System.CodeDom.Compiler.CompilerParameters.GenerateInMemory%2A> property to `true`. When an assembly is generated in memory, your code can obtain a reference to the generated assembly from the <xref:System.CodeDom.Compiler.CompilerResults.CompiledAssembly%2A> property of a <xref:System.CodeDom.Compiler.CompilerResults>. If an assembly is written to disk, you can obtain the path to the generated assembly from the <xref:System.CodeDom.Compiler.CompilerResults.PathToAssembly%2A> property of a <xref:System.CodeDom.Compiler.CompilerResults>.       To specify a warning level at which to halt compilation, set the <xref:System.CodeDom.Compiler.CompilerParameters.WarningLevel%2A> property to an integer that represents the warning level at which to halt compilation. You can also configure the compiler to halt compilation if warnings are encountered by setting the <xref:System.CodeDom.Compiler.CompilerParameters.TreatWarningsAsErrors%2A> property to `true`.       To specify a custom command-line arguments string to use when invoking the compilation process, set the string in the <xref:System.CodeDom.Compiler.CompilerParameters.CompilerOptions%2A> property. If a Win32 security token is required to invoke the compiler process, specify the token in the <xref:System.CodeDom.Compiler.CompilerParameters.UserToken%2A> property. To include .NET Framework resource files in the compiled assembly, add the names of the resource files to the <xref:System.CodeDom.Compiler.CompilerParameters.EmbeddedResources%2A> property. To reference .NET Framework resources in another assembly, add the names of the resource files to the <xref:System.CodeDom.Compiler.CompilerParameters.LinkedResources%2A> property. To include a Win32 resource file in the compiled assembly, specify the name of the Win32 resource file in the <xref:System.CodeDom.Compiler.CompilerParameters.Win32Resource%2A> property.      > [!NOTE] >  This class contains a link demand and an inheritance demand at the class level that applies to all members. A <xref:System.Security.SecurityException> is thrown when either the immediate caller or the derived class does not have full-trust permission. For details about security demands, see [Link Demands](~/add/includes/ajax-current-ext-md.md) and [Inheritance Demands](http://msdn.microsoft.com/en-us/28b9adbb-8f08-4f10-b856-dbf59eb932d9).","needQuote":false,"needEscape":true,"nodes":[{"content":"A CompilerParameters object represents the settings and options for an &lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt; interface.","pos":[0,126],"source":"A CompilerParameters object represents the settings and options for an <xref:System.CodeDom.Compiler.ICodeCompiler> interface."},{"content":"If you are compiling an executable program, you must set the &lt;xref:System.CodeDom.Compiler.CompilerParameters.GenerateExecutable%2A&gt; property to <ph id=\"ph1\">`true`</ph>.","pos":[133,285],"source":"       If you are compiling an executable program, you must set the <xref:System.CodeDom.Compiler.CompilerParameters.GenerateExecutable%2A> property to `true`."},{"content":"When the &lt;xref:System.CodeDom.Compiler.CompilerParameters.GenerateExecutable%2A&gt; is set to <ph id=\"ph1\">`false`</ph>, the compiler will generate a class library.","pos":[286,429],"source":" When the <xref:System.CodeDom.Compiler.CompilerParameters.GenerateExecutable%2A> is set to `false`, the compiler will generate a class library."},{"content":"By default, a new CompilerParameters is initialized with its &lt;xref:System.CodeDom.Compiler.CompilerParameters.GenerateExecutable%2A&gt; property set to <ph id=\"ph1\">`false`</ph>.","pos":[430,587],"source":" By default, a new CompilerParameters is initialized with its <xref:System.CodeDom.Compiler.CompilerParameters.GenerateExecutable%2A> property set to `false`."},{"content":"If you are compiling an executable from a CodeDOM graph, a &lt;xref:System.CodeDom.CodeEntryPointMethod&gt; must be defined in the graph.","pos":[588,719],"source":" If you are compiling an executable from a CodeDOM graph, a <xref:System.CodeDom.CodeEntryPointMethod> must be defined in the graph."},{"content":"If there are multiple code entry points, you can indicate the class that defines the entry point to use by setting the name of the class to the &lt;xref:System.CodeDom.Compiler.CompilerParameters.MainClass%2A&gt; property.","pos":[720,936],"source":" If there are multiple code entry points, you can indicate the class that defines the entry point to use by setting the name of the class to the <xref:System.CodeDom.Compiler.CompilerParameters.MainClass%2A> property."},{"content":"You can specify a file name for the output assembly in the &lt;xref:System.CodeDom.Compiler.CompilerParameters.OutputAssembly%2A&gt; property.","pos":[943,1079],"source":"       You can specify a file name for the output assembly in the <xref:System.CodeDom.Compiler.CompilerParameters.OutputAssembly%2A> property."},{"content":"Otherwise, a default output file name will be used.","pos":[1080,1131]},{"content":"To include debug information in a generated assembly, set the &lt;xref:System.CodeDom.Compiler.CompilerParameters.IncludeDebugInformation%2A&gt; property to <ph id=\"ph1\">`true`</ph>.","pos":[1132,1290],"source":" To include debug information in a generated assembly, set the <xref:System.CodeDom.Compiler.CompilerParameters.IncludeDebugInformation%2A> property to `true`."},{"content":"If your project references any assemblies, you must specify the assembly names as items in a &lt;xref:System.Collections.Specialized.StringCollection&gt; set to the &lt;xref:System.CodeDom.Compiler.CompilerParameters.ReferencedAssemblies%2A&gt; property of the CompilerParameters used when invoking compilation.","pos":[1291,1590],"source":" If your project references any assemblies, you must specify the assembly names as items in a <xref:System.Collections.Specialized.StringCollection> set to the <xref:System.CodeDom.Compiler.CompilerParameters.ReferencedAssemblies%2A> property of the CompilerParameters used when invoking compilation."},{"content":"You can compile an assembly that is written to memory rather than disk by setting the &lt;xref:System.CodeDom.Compiler.CompilerParameters.GenerateInMemory%2A&gt; property to <ph id=\"ph1\">`true`</ph>.","pos":[1597,1772],"source":"       You can compile an assembly that is written to memory rather than disk by setting the <xref:System.CodeDom.Compiler.CompilerParameters.GenerateInMemory%2A> property to `true`."},{"content":"When an assembly is generated in memory, your code can obtain a reference to the generated assembly from the &lt;xref:System.CodeDom.Compiler.CompilerResults.CompiledAssembly%2A&gt; property of a &lt;xref:System.CodeDom.Compiler.CompilerResults&gt;.","pos":[1773,2010],"source":" When an assembly is generated in memory, your code can obtain a reference to the generated assembly from the <xref:System.CodeDom.Compiler.CompilerResults.CompiledAssembly%2A> property of a <xref:System.CodeDom.Compiler.CompilerResults>."},{"content":"If an assembly is written to disk, you can obtain the path to the generated assembly from the &lt;xref:System.CodeDom.Compiler.CompilerResults.PathToAssembly%2A&gt; property of a &lt;xref:System.CodeDom.Compiler.CompilerResults&gt;.","pos":[2011,2231],"source":" If an assembly is written to disk, you can obtain the path to the generated assembly from the <xref:System.CodeDom.Compiler.CompilerResults.PathToAssembly%2A> property of a <xref:System.CodeDom.Compiler.CompilerResults>."},{"content":"To specify a warning level at which to halt compilation, set the &lt;xref:System.CodeDom.Compiler.CompilerParameters.WarningLevel%2A&gt; property to an integer that represents the warning level at which to halt compilation.","pos":[2238,2455],"source":"       To specify a warning level at which to halt compilation, set the <xref:System.CodeDom.Compiler.CompilerParameters.WarningLevel%2A> property to an integer that represents the warning level at which to halt compilation."},{"content":"You can also configure the compiler to halt compilation if warnings are encountered by setting the &lt;xref:System.CodeDom.Compiler.CompilerParameters.TreatWarningsAsErrors%2A&gt; property to <ph id=\"ph1\">`true`</ph>.","pos":[2456,2649],"source":" You can also configure the compiler to halt compilation if warnings are encountered by setting the <xref:System.CodeDom.Compiler.CompilerParameters.TreatWarningsAsErrors%2A> property to `true`."},{"content":"To specify a custom command-line arguments string to use when invoking the compilation process, set the string in the &lt;xref:System.CodeDom.Compiler.CompilerParameters.CompilerOptions%2A&gt; property.","pos":[2656,2852],"source":"       To specify a custom command-line arguments string to use when invoking the compilation process, set the string in the <xref:System.CodeDom.Compiler.CompilerParameters.CompilerOptions%2A> property."},{"content":"If a Win32 security token is required to invoke the compiler process, specify the token in the &lt;xref:System.CodeDom.Compiler.CompilerParameters.UserToken%2A&gt; property.","pos":[2853,3020],"source":" If a Win32 security token is required to invoke the compiler process, specify the token in the <xref:System.CodeDom.Compiler.CompilerParameters.UserToken%2A> property."},{"content":"To include .NET Framework resource files in the compiled assembly, add the names of the resource files to the &lt;xref:System.CodeDom.Compiler.CompilerParameters.EmbeddedResources%2A&gt; property.","pos":[3021,3211],"source":" To include .NET Framework resource files in the compiled assembly, add the names of the resource files to the <xref:System.CodeDom.Compiler.CompilerParameters.EmbeddedResources%2A> property."},{"content":"To reference .NET Framework resources in another assembly, add the names of the resource files to the &lt;xref:System.CodeDom.Compiler.CompilerParameters.LinkedResources%2A&gt; property.","pos":[3212,3392],"source":" To reference .NET Framework resources in another assembly, add the names of the resource files to the <xref:System.CodeDom.Compiler.CompilerParameters.LinkedResources%2A> property."},{"content":"To include a Win32 resource file in the compiled assembly, specify the name of the Win32 resource file in the &lt;xref:System.CodeDom.Compiler.CompilerParameters.Win32Resource%2A&gt; property.","pos":[3393,3579],"source":" To include a Win32 resource file in the compiled assembly, specify the name of the Win32 resource file in the <xref:System.CodeDom.Compiler.CompilerParameters.Win32Resource%2A> property."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  This class contains a link demand and an inheritance demand at the class level that applies to all members.","pos":[3585,3705],"source":"      > [!NOTE] >  This class contains a link demand and an inheritance demand at the class level that applies to all members."},{"content":"A &lt;xref:System.Security.SecurityException&gt; is thrown when either the immediate caller or the derived class does not have full-trust permission.","pos":[3706,3849],"source":" A <xref:System.Security.SecurityException> is thrown when either the immediate caller or the derived class does not have full-trust permission."},{"content":"For details about security demands, see <bpt id=\"p1\">[</bpt>Link Demands<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id=\"p2\">[</bpt>Inheritance Demands<ept id=\"p2\">](http://msdn.microsoft.com/en-us/28b9adbb-8f08-4f10-b856-dbf59eb932d9)</ept>.","pos":[3850,4040],"source":" For details about security demands, see [Link Demands](~/add/includes/ajax-current-ext-md.md) and [Inheritance Demands](http://msdn.microsoft.com/en-us/28b9adbb-8f08-4f10-b856-dbf59eb932d9)."}]},{"pos":[6882,6986],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.CodeDom.Compiler.CompilerParameters\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.CodeDom.Compiler.CompilerParameters\"></xref> class."},{"pos":[8217,8356],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.CodeDom.Compiler.CompilerParameters\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class using the specified assembly names.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.CodeDom.Compiler.CompilerParameters\"></xref> class using the specified assembly names."},{"pos":[8519,8560],"content":"The names of the assemblies to reference.","needQuote":true,"needEscape":true,"nodes":[{"content":"The names of the assemblies to reference.","pos":[0,41]}]},{"pos":[9167,9327],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.CodeDom.Compiler.CompilerParameters\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class using the specified assembly names and output file name.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.CodeDom.Compiler.CompilerParameters\"></xref> class using the specified assembly names and output file name."},{"pos":[9509,9550],"content":"The names of the assemblies to reference.","needQuote":true,"needEscape":true,"nodes":[{"content":"The names of the assemblies to reference.","pos":[0,41]}]},{"pos":[9617,9638],"content":"The output file name.","needQuote":true,"needEscape":true,"nodes":[{"content":"The output file name.","pos":[0,21]}]},{"pos":[10299,10512],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.CodeDom.Compiler.CompilerParameters\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class using the specified assembly names, output name, and a value indicating whether to include debug information.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.CodeDom.Compiler.CompilerParameters\"></xref> class using the specified assembly names, output name, and a value indicating whether to include debug information."},{"pos":[10724,10765],"content":"The names of the assemblies to reference.","needQuote":true,"needEscape":true,"nodes":[{"content":"The names of the assemblies to reference.","pos":[0,41]}]},{"pos":[10832,10853],"content":"The output file name.","needQuote":true,"needEscape":true,"nodes":[{"content":"The output file name.","pos":[0,21]}]},{"pos":[10934,11117],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to include debug information; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> to exclude debug information.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to include debug information; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to exclude debug information."},{"pos":[11617,11696],"content":"Gets or sets optional command-line arguments to use when invoking the compiler.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets optional command-line arguments to use when invoking the compiler.","pos":[0,79]}]},{"pos":[11708,11897],"content":"An <xref:System.CodeDom.Compiler.ICodeCompiler> typically includes this string on the command line when invoking a command-line compiler. By default, this property contains an empty string.","needQuote":true,"needEscape":true,"nodes":[{"content":"An <xref:System.CodeDom.Compiler.ICodeCompiler> typically includes this string on the command line when invoking a command-line compiler. By default, this property contains an empty string.","pos":[0,189],"nodes":[{"content":"An &lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt; typically includes this string on the command line when invoking a command-line compiler.","pos":[0,137],"source":"An <xref:System.CodeDom.Compiler.ICodeCompiler> typically includes this string on the command line when invoking a command-line compiler."},{"content":"By default, this property contains an empty string.","pos":[138,189]}]}]},{"pos":[12612,12667],"content":"Any additional command-line arguments for the compiler.","needQuote":true,"needEscape":true,"nodes":[{"content":"Any additional command-line arguments for the compiler.","pos":[0,55]}]},{"pos":[13202,13358],"content":"Gets or sets the name of the core or standard assembly that contains basic types such as <xref:System.Object>, <xref:System.String>, or <xref:System.Int32>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the name of the core or standard assembly that contains basic types such as &lt;xref:System.Object&gt;, &lt;xref:System.String&gt;, or &lt;xref:System.Int32&gt;.","pos":[0,156],"source":"Gets or sets the name of the core or standard assembly that contains basic types such as <xref:System.Object>, <xref:System.String>, or <xref:System.Int32>."}]},{"pos":[13371,14448],"content":"If the value of this property is an empty string or `null`, the compiler uses the default core assembly. Depending on the compiler version, the default core assembly may be mscorlib.dll or System.Runtime.dll in a Framework directory or reference assembly directory. If the value of this property is not empty, the Code Document Object Model (CodeDOM) explicitly references the specified assembly and emits compiler options that cause the compiler to not reference any assemblies implicitly during compilation.. For compilers that reference the core or standard assembly only implicitly by default, this property can be used on its own. For compilers that implicitly reference assemblies in addition to the core or standard assembly, using this option may require specifying additional entries in the <xref:System.CodeDom.Compiler.CompilerParameters.ReferencedAssemblies%2A?displayProperty=fullName>property.      > [!NOTE] >  An <xref:System.CodeDom.Compiler.ICodeCompiler> or <xref:System.CodeDom.Compiler.CodeDomProvider> implementation may choose to ignore this property.","needQuote":false,"needEscape":true,"nodes":[{"content":"If the value of this property is an empty string or <ph id=\"ph1\">`null`</ph>, the compiler uses the default core assembly.","pos":[0,104],"source":"If the value of this property is an empty string or `null`, the compiler uses the default core assembly."},{"content":"Depending on the compiler version, the default core assembly may be mscorlib.dll or System.Runtime.dll in a Framework directory or reference assembly directory.","pos":[105,265]},{"content":"If the value of this property is not empty, the Code Document Object Model (CodeDOM) explicitly references the specified assembly and emits compiler options that cause the compiler to not reference any assemblies implicitly during compilation..","pos":[266,510]},{"content":"For compilers that reference the core or standard assembly only implicitly by default, this property can be used on its own.","pos":[511,635]},{"content":"For compilers that implicitly reference assemblies in addition to the core or standard assembly, using this option may require specifying additional entries in the &lt;xref:System.CodeDom.Compiler.CompilerParameters.ReferencedAssemblies%2A?displayProperty=fullName&gt;property.","pos":[636,907],"source":" For compilers that implicitly reference assemblies in addition to the core or standard assembly, using this option may require specifying additional entries in the <xref:System.CodeDom.Compiler.CompilerParameters.ReferencedAssemblies%2A?displayProperty=fullName>property."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  An &lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt; or &lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt; implementation may choose to ignore this property.","pos":[913,1074],"source":"      > [!NOTE] >  An <xref:System.CodeDom.Compiler.ICodeCompiler> or <xref:System.CodeDom.Compiler.CodeDomProvider> implementation may choose to ignore this property."}]},{"pos":[14579,14635],"content":"The name of the core assembly that contains basic types.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the core assembly that contains basic types.","pos":[0,56]}]},{"pos":[15160,15245],"content":"Gets the .NET Framework resource files to include when compiling the assembly output.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the .NET Framework resource files to include when compiling the assembly output.","pos":[0,85]}]},{"pos":[15258,16315],"content":"Embedded resources are built into the generated assembly output file. Including files through this property is similar to the `/resource` command-line argument supported by many of the .NET Framework compilers.       Not all compilers support .NET Framework resource files, so you should test for this support by calling the <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> method with the flag <xref:System.CodeDom.Compiler.GeneratorSupport>.       Add one or more .NET Framework resource file paths to the returned <xref:System.Collections.Specialized.StringCollection> to embed the file resources in the compiled assembly. Adding a duplicate or invalid file path results in compilation errors; ensure that each string specifies a unique path to a valid .NET Framework resource file.       Use EmbeddedResources to include default or neutral culture .NET Framework resources for an assembly; use the <xref:System.CodeDom.Compiler.CompilerParameters.LinkedResources%2A> property to reference .NET Framework resources in satellite assemblies.","needQuote":false,"needEscape":true,"nodes":[{"content":"Embedded resources are built into the generated assembly output file.","pos":[0,69]},{"content":"Including files through this property is similar to the <ph id=\"ph1\">`/resource`</ph> command-line argument supported by many of the .NET Framework compilers.","pos":[70,210],"source":" Including files through this property is similar to the `/resource` command-line argument supported by many of the .NET Framework compilers."},{"content":"Not all compilers support .NET Framework resource files, so you should test for this support by calling the &lt;xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt; method with the flag &lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt;.","pos":[217,452],"source":"       Not all compilers support .NET Framework resource files, so you should test for this support by calling the <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> method with the flag <xref:System.CodeDom.Compiler.GeneratorSupport>."},{"content":"Add one or more .NET Framework resource file paths to the returned &lt;xref:System.Collections.Specialized.StringCollection&gt; to embed the file resources in the compiled assembly.","pos":[459,634],"source":"       Add one or more .NET Framework resource file paths to the returned <xref:System.Collections.Specialized.StringCollection> to embed the file resources in the compiled assembly."},{"content":"Adding a duplicate or invalid file path results in compilation errors; ensure that each string specifies a unique path to a valid .NET Framework resource file.","pos":[635,794]},{"content":"Use EmbeddedResources to include default or neutral culture .NET Framework resources for an assembly; use the &lt;xref:System.CodeDom.Compiler.CompilerParameters.LinkedResources%2A&gt; property to reference .NET Framework resources in satellite assemblies.","pos":[801,1051],"source":"       Use EmbeddedResources to include default or neutral culture .NET Framework resources for an assembly; use the <xref:System.CodeDom.Compiler.CompilerParameters.LinkedResources%2A> property to reference .NET Framework resources in satellite assemblies."}]},{"pos":[17100,17207],"content":"A collection that contains the file paths of .NET Framework resources to include in the generated assembly.","needQuote":true,"needEscape":true,"nodes":[{"content":"A collection that contains the file paths of .NET Framework resources to include in the generated assembly.","pos":[0,107]}]},{"pos":[17684,17792],"content":"Specifies an evidence object that represents the security policy permissions to grant the compiled assembly.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies an evidence object that represents the security policy permissions to grant the compiled assembly.","pos":[0,108]}]},{"pos":[17953,18043],"content":"An  object that represents the security policy permissions to grant the compiled assembly.","needQuote":true,"needEscape":true,"nodes":[{"content":"An  object that represents the security policy permissions to grant the compiled assembly.","pos":[0,90]}]},{"pos":[18561,18627],"content":"Gets or sets a value indicating whether to generate an executable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating whether to generate an executable.","pos":[0,66]}]},{"pos":[18639,18756],"content":"If the value of this property is `false`, a DLL will be generated. By default, the value of this property is `false`.","needQuote":true,"needEscape":true,"nodes":[{"content":"If the value of this property is <ph id=\"ph1\">`false`</ph>, a DLL will be generated.","pos":[0,66],"source":"If the value of this property is `false`, a DLL will be generated."},{"content":"By default, the value of this property is <ph id=\"ph1\">`false`</ph>.","pos":[67,117],"source":" By default, the value of this property is `false`."}]},{"pos":[19470,19643],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if an executable should be generated; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if an executable should be generated; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[20161,20234],"content":"Gets or sets a value indicating whether to generate the output in memory.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating whether to generate the output in memory.","pos":[0,73]}]},{"pos":[20960,21149],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the compiler should generate the output in memory; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the compiler should generate the output in memory; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[21700,21796],"content":"Gets or sets a value indicating whether to include debug information in the compiled executable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating whether to include debug information in the compiled executable.","pos":[0,96]}]},{"pos":[21928,22105],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if debug information should be generated; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if debug information should be generated; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[22623,22704],"content":"Gets the .NET Framework resource files that are referenced in the current source.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the .NET Framework resource files that are referenced in the current source.","pos":[0,81]}]},{"pos":[22717,23859],"content":"Linked resource files allow your assembly to reference .NET Framework resources without embedding the actual resources in the assembly. Referencing files through this property is similar to the `/linkresource` command-line argument supported by many of the .NET Framework compilers.       Not all compilers support .NET Framework resource files, so you should test for this support by calling the <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> method with the flag <xref:System.CodeDom.Compiler.GeneratorSupport>.       Add one or more .NET Framework resource file paths to the returned <xref:System.Collections.Specialized.StringCollection> to create links for the resources in the compiled assembly. Adding a duplicate or invalid file path results in compilation errors; ensure that each string specifies a unique path to a valid .NET Framework resource file.       Use LinkedResources to reference .NET Framework resources in satellite assemblies, localized for a particular culture; use the <xref:System.CodeDom.Compiler.CompilerParameters.EmbeddedResources%2A> property to embed the resources into the compiled assembly.","needQuote":false,"needEscape":true,"nodes":[{"content":"Linked resource files allow your assembly to reference .NET Framework resources without embedding the actual resources in the assembly.","pos":[0,135]},{"content":"Referencing files through this property is similar to the <ph id=\"ph1\">`/linkresource`</ph> command-line argument supported by many of the .NET Framework compilers.","pos":[136,282],"source":" Referencing files through this property is similar to the `/linkresource` command-line argument supported by many of the .NET Framework compilers."},{"content":"Not all compilers support .NET Framework resource files, so you should test for this support by calling the &lt;xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt; method with the flag &lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt;.","pos":[289,524],"source":"       Not all compilers support .NET Framework resource files, so you should test for this support by calling the <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> method with the flag <xref:System.CodeDom.Compiler.GeneratorSupport>."},{"content":"Add one or more .NET Framework resource file paths to the returned &lt;xref:System.Collections.Specialized.StringCollection&gt; to create links for the resources in the compiled assembly.","pos":[531,712],"source":"       Add one or more .NET Framework resource file paths to the returned <xref:System.Collections.Specialized.StringCollection> to create links for the resources in the compiled assembly."},{"content":"Adding a duplicate or invalid file path results in compilation errors; ensure that each string specifies a unique path to a valid .NET Framework resource file.","pos":[713,872]},{"content":"Use LinkedResources to reference .NET Framework resources in satellite assemblies, localized for a particular culture; use the &lt;xref:System.CodeDom.Compiler.CompilerParameters.EmbeddedResources%2A&gt; property to embed the resources into the compiled assembly.","pos":[879,1136],"source":"       Use LinkedResources to reference .NET Framework resources in satellite assemblies, localized for a particular culture; use the <xref:System.CodeDom.Compiler.CompilerParameters.EmbeddedResources%2A> property to embed the resources into the compiled assembly."}]},{"pos":[24642,24746],"content":"A collection that contains the file paths of .NET Framework resources that are referenced by the source.","needQuote":true,"needEscape":true,"nodes":[{"content":"A collection that contains the file paths of .NET Framework resources that are referenced by the source.","pos":[0,104]}]},{"pos":[25226,25266],"content":"Gets or sets the name of the main class.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the name of the main class.","pos":[0,40]}]},{"pos":[25278,25334],"content":"The main class contains the entry point for the program.","needQuote":true,"needEscape":true,"nodes":[{"content":"The main class contains the entry point for the program.","pos":[0,56]}]},{"pos":[26043,26070],"content":"The name of the main class.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the main class.","pos":[0,27]}]},{"pos":[26569,26614],"content":"Gets or sets the name of the output assembly.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the name of the output assembly.","pos":[0,45]}]},{"pos":[27339,27371],"content":"The name of the output assembly.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the output assembly.","pos":[0,32]}]},{"pos":[27905,27959],"content":"Gets the assemblies referenced by the current project.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the assemblies referenced by the current project.","pos":[0,54]}]},{"pos":[27971,28268],"content":"The string collection should consist of, or include, the assemblies referenced by the current project. Add assembly file names to the returned <xref:System.Collections.Specialized.StringCollection> to import the assembly manifest and reference the assembly type information in the current project.","needQuote":true,"needEscape":true,"nodes":[{"content":"The string collection should consist of, or include, the assemblies referenced by the current project. Add assembly file names to the returned <xref:System.Collections.Specialized.StringCollection> to import the assembly manifest and reference the assembly type information in the current project.","pos":[0,297],"nodes":[{"content":"The string collection should consist of, or include, the assemblies referenced by the current project.","pos":[0,102]},{"content":"Add assembly file names to the returned &lt;xref:System.Collections.Specialized.StringCollection&gt; to import the assembly manifest and reference the assembly type information in the current project.","pos":[103,297],"source":" Add assembly file names to the returned <xref:System.Collections.Specialized.StringCollection> to import the assembly manifest and reference the assembly type information in the current project."}]}]},{"pos":[29055,29146],"content":"A collection that contains the assembly names that are referenced by the source to compile.","needQuote":true,"needEscape":true,"nodes":[{"content":"A collection that contains the assembly names that are referenced by the source to compile.","pos":[0,91]}]},{"pos":[29631,29693],"content":"Gets or sets the collection that contains the temporary files.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the collection that contains the temporary files.","pos":[0,62]}]},{"pos":[29706,30663],"content":"The temporary files in the collection are retained or deleted upon the completion of compiler activity based on the value of the <xref:System.CodeDom.Compiler.TempFileCollection.KeepFiles%2A> property in the collection. The <xref:System.CodeDom.Compiler.TempFileCollection.KeepFiles%2A> property is set if the collection is created using the <xref:System.CodeDom.Compiler.TempFileCollection.%23ctor%28System.String%2CSystem.Boolean%29> constructor with the `keepFiles` parameter set to `true`.      > [!NOTE] >  This class contains a link demand and an inheritance demand at the class level that applies to all members. A <xref:System.Security.SecurityException> is thrown when either the immediate caller or the derived class does not have full-trust permission. For details about security demands, see [Link Demands](~/add/includes/ajax-current-ext-md.md) and [Inheritance Demands](http://msdn.microsoft.com/en-us/28b9adbb-8f08-4f10-b856-dbf59eb932d9).","needQuote":false,"needEscape":true,"nodes":[{"content":"The temporary files in the collection are retained or deleted upon the completion of compiler activity based on the value of the &lt;xref:System.CodeDom.Compiler.TempFileCollection.KeepFiles%2A&gt; property in the collection.","pos":[0,219],"source":"The temporary files in the collection are retained or deleted upon the completion of compiler activity based on the value of the <xref:System.CodeDom.Compiler.TempFileCollection.KeepFiles%2A> property in the collection."},{"content":"The &lt;xref:System.CodeDom.Compiler.TempFileCollection.KeepFiles%2A&gt; property is set if the collection is created using the &lt;xref:System.CodeDom.Compiler.TempFileCollection.%23ctor%28System.String%2CSystem.Boolean%29&gt; constructor with the <ph id=\"ph1\">`keepFiles`</ph> parameter set to <ph id=\"ph2\">`true`</ph>.","pos":[220,493],"source":" The <xref:System.CodeDom.Compiler.TempFileCollection.KeepFiles%2A> property is set if the collection is created using the <xref:System.CodeDom.Compiler.TempFileCollection.%23ctor%28System.String%2CSystem.Boolean%29> constructor with the `keepFiles` parameter set to `true`."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  This class contains a link demand and an inheritance demand at the class level that applies to all members.","pos":[499,619],"source":"      > [!NOTE] >  This class contains a link demand and an inheritance demand at the class level that applies to all members."},{"content":"A &lt;xref:System.Security.SecurityException&gt; is thrown when either the immediate caller or the derived class does not have full-trust permission.","pos":[620,763],"source":" A <xref:System.Security.SecurityException> is thrown when either the immediate caller or the derived class does not have full-trust permission."},{"content":"For details about security demands, see <bpt id=\"p1\">[</bpt>Link Demands<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id=\"p2\">[</bpt>Inheritance Demands<ept id=\"p2\">](http://msdn.microsoft.com/en-us/28b9adbb-8f08-4f10-b856-dbf59eb932d9)</ept>.","pos":[764,954],"source":" For details about security demands, see [Link Demands](~/add/includes/ajax-current-ext-md.md) and [Inheritance Demands](http://msdn.microsoft.com/en-us/28b9adbb-8f08-4f10-b856-dbf59eb932d9)."}]},{"pos":[31435,31482],"content":"A collection that contains the temporary files.","needQuote":true,"needEscape":true,"nodes":[{"content":"A collection that contains the temporary files.","pos":[0,47]}]},{"pos":[32016,32084],"content":"Gets or sets a value indicating whether to treat warnings as errors.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating whether to treat warnings as errors.","pos":[0,68]}]},{"pos":[32815,32991],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if warnings should be treated as errors; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if warnings should be treated as errors; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[33477,33547],"content":"Gets or sets the user token to use when creating the compiler process.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the user token to use when creating the compiler process.","pos":[0,70]}]},{"pos":[33666,33688],"content":"The user token to use.","needQuote":true,"needEscape":true,"nodes":[{"content":"The user token to use.","pos":[0,22]}]},{"pos":[34177,34249],"content":"Gets or sets the warning level at which the compiler aborts compilation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the warning level at which the compiler aborts compilation.","pos":[0,72]}]},{"pos":[34971,35030],"content":"The warning level at which the compiler aborts compilation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The warning level at which the compiler aborts compilation.","pos":[0,59]}]},{"pos":[35527,35614],"content":"Gets or sets the file name of a Win32 resource file to link into the compiled assembly.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the file name of a Win32 resource file to link into the compiled assembly.","pos":[0,87]}]},{"pos":[35627,36338],"content":"Linking files through this property is similar to the `/winres` and `/winresource` command-line arguments supported by many of the .NET Framework compilers.       Use Win32Resource to compile a Win32 resource file into the assembly. Use <xref:System.CodeDom.Compiler.CompilerParameters.EmbeddedResources%2A> or <xref:System.CodeDom.Compiler.CompilerParameters.LinkedResources%2A> to compile with .NET Framework resource files.       Not all compilers support Win32 resource files, so you should test a code generator for this support before linking a resource file by calling the <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> method with the flag <xref:System.CodeDom.Compiler.GeneratorSupport>.","needQuote":false,"needEscape":true,"nodes":[{"content":"Linking files through this property is similar to the <ph id=\"ph1\">`/winres`</ph> and <ph id=\"ph2\">`/winresource`</ph> command-line arguments supported by many of the .NET Framework compilers.","pos":[0,156],"source":"Linking files through this property is similar to the `/winres` and `/winresource` command-line arguments supported by many of the .NET Framework compilers."},{"content":"Use Win32Resource to compile a Win32 resource file into the assembly.","pos":[163,232]},{"content":"Use &lt;xref:System.CodeDom.Compiler.CompilerParameters.EmbeddedResources%2A&gt; or &lt;xref:System.CodeDom.Compiler.CompilerParameters.LinkedResources%2A&gt; to compile with .NET Framework resource files.","pos":[233,426],"source":" Use <xref:System.CodeDom.Compiler.CompilerParameters.EmbeddedResources%2A> or <xref:System.CodeDom.Compiler.CompilerParameters.LinkedResources%2A> to compile with .NET Framework resource files."},{"content":"Not all compilers support Win32 resource files, so you should test a code generator for this support before linking a resource file by calling the &lt;xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt; method with the flag &lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt;.","pos":[433,707],"source":"       Not all compilers support Win32 resource files, so you should test a code generator for this support before linking a resource file by calling the <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> method with the flag <xref:System.CodeDom.Compiler.GeneratorSupport>."}]},{"pos":[36462,36531],"content":"A Win32 resource file that will be linked into the compiled assembly.","needQuote":true,"needEscape":true,"nodes":[{"content":"A Win32 resource file that will be linked into the compiled assembly.","pos":[0,69]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.CodeDom.Compiler.CompilerParameters\n  id: CompilerParameters\n  children:\n  - System.CodeDom.Compiler.CompilerParameters.#ctor\n  - System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[])\n  - System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[],System.String)\n  - System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[],System.String,System.Boolean)\n  - System.CodeDom.Compiler.CompilerParameters.CompilerOptions\n  - System.CodeDom.Compiler.CompilerParameters.CoreAssemblyFileName\n  - System.CodeDom.Compiler.CompilerParameters.EmbeddedResources\n  - System.CodeDom.Compiler.CompilerParameters.Evidence\n  - System.CodeDom.Compiler.CompilerParameters.GenerateExecutable\n  - System.CodeDom.Compiler.CompilerParameters.GenerateInMemory\n  - System.CodeDom.Compiler.CompilerParameters.IncludeDebugInformation\n  - System.CodeDom.Compiler.CompilerParameters.LinkedResources\n  - System.CodeDom.Compiler.CompilerParameters.MainClass\n  - System.CodeDom.Compiler.CompilerParameters.OutputAssembly\n  - System.CodeDom.Compiler.CompilerParameters.ReferencedAssemblies\n  - System.CodeDom.Compiler.CompilerParameters.TempFiles\n  - System.CodeDom.Compiler.CompilerParameters.TreatWarningsAsErrors\n  - System.CodeDom.Compiler.CompilerParameters.UserToken\n  - System.CodeDom.Compiler.CompilerParameters.WarningLevel\n  - System.CodeDom.Compiler.CompilerParameters.Win32Resource\n  langs:\n  - csharp\n  name: CompilerParameters\n  nameWithType: CompilerParameters\n  fullName: System.CodeDom.Compiler.CompilerParameters\n  type: Class\n  summary: Represents the parameters used to invoke a compiler.\n  remarks: \"A CompilerParameters object represents the settings and options for an <xref:System.CodeDom.Compiler.ICodeCompiler> interface.  \\n  \\n If you are compiling an executable program, you must set the <xref:System.CodeDom.Compiler.CompilerParameters.GenerateExecutable%2A> property to `true`. When the <xref:System.CodeDom.Compiler.CompilerParameters.GenerateExecutable%2A> is set to `false`, the compiler will generate a class library. By default, a new CompilerParameters is initialized with its <xref:System.CodeDom.Compiler.CompilerParameters.GenerateExecutable%2A> property set to `false`. If you are compiling an executable from a CodeDOM graph, a <xref:System.CodeDom.CodeEntryPointMethod> must be defined in the graph. If there are multiple code entry points, you can indicate the class that defines the entry point to use by setting the name of the class to the <xref:System.CodeDom.Compiler.CompilerParameters.MainClass%2A> property.  \\n  \\n You can specify a file name for the output assembly in the <xref:System.CodeDom.Compiler.CompilerParameters.OutputAssembly%2A> property. Otherwise, a default output file name will be used. To include debug information in a generated assembly, set the <xref:System.CodeDom.Compiler.CompilerParameters.IncludeDebugInformation%2A> property to `true`. If your project references any assemblies, you must specify the assembly names as items in a <xref:System.Collections.Specialized.StringCollection> set to the <xref:System.CodeDom.Compiler.CompilerParameters.ReferencedAssemblies%2A> property of the CompilerParameters used when invoking compilation.  \\n  \\n You can compile an assembly that is written to memory rather than disk by setting the <xref:System.CodeDom.Compiler.CompilerParameters.GenerateInMemory%2A> property to `true`. When an assembly is generated in memory, your code can obtain a reference to the generated assembly from the <xref:System.CodeDom.Compiler.CompilerResults.CompiledAssembly%2A> property of a <xref:System.CodeDom.Compiler.CompilerResults>. If an assembly is written to disk, you can obtain the path to the generated assembly from the <xref:System.CodeDom.Compiler.CompilerResults.PathToAssembly%2A> property of a <xref:System.CodeDom.Compiler.CompilerResults>.  \\n  \\n To specify a warning level at which to halt compilation, set the <xref:System.CodeDom.Compiler.CompilerParameters.WarningLevel%2A> property to an integer that represents the warning level at which to halt compilation. You can also configure the compiler to halt compilation if warnings are encountered by setting the <xref:System.CodeDom.Compiler.CompilerParameters.TreatWarningsAsErrors%2A> property to `true`.  \\n  \\n To specify a custom command-line arguments string to use when invoking the compilation process, set the string in the <xref:System.CodeDom.Compiler.CompilerParameters.CompilerOptions%2A> property. If a Win32 security token is required to invoke the compiler process, specify the token in the <xref:System.CodeDom.Compiler.CompilerParameters.UserToken%2A> property. To include .NET Framework resource files in the compiled assembly, add the names of the resource files to the <xref:System.CodeDom.Compiler.CompilerParameters.EmbeddedResources%2A> property. To reference .NET Framework resources in another assembly, add the names of the resource files to the <xref:System.CodeDom.Compiler.CompilerParameters.LinkedResources%2A> property. To include a Win32 resource file in the compiled assembly, specify the name of the Win32 resource file in the <xref:System.CodeDom.Compiler.CompilerParameters.Win32Resource%2A> property.  \\n  \\n> [!NOTE]\\n>  This class contains a link demand and an inheritance demand at the class level that applies to all members. A <xref:System.Security.SecurityException> is thrown when either the immediate caller or the derived class does not have full-trust permission. For details about security demands, see [Link Demands](~/add/includes/ajax-current-ext-md.md) and [Inheritance Demands](http://msdn.microsoft.com/en-us/28b9adbb-8f08-4f10-b856-dbf59eb932d9).\"\n  example:\n  - \"The following example builds a CodeDOM source graph for a simple Hello World program.  The source is then saved to a file, compiled into an executable, and run. The `CompileCode` method illustrates how to use the CompilerParameters class to specify various compiler settings and options.  \\n  \\n [!code-cpp[CompilerParametersExample#1](~/add/codesnippet/cpp/t-system.codedom.compile_3_1.cpp)]\\n [!code-cs[CompilerParametersExample#1](~/add/codesnippet/csharp/t-system.codedom.compile_3_1.cs)]\\n [!code-vb[CompilerParametersExample#1](~/add/codesnippet/visualbasic/t-system.codedom.compile_3_1.vb)]\"\n  syntax:\n    content: public class CompilerParameters\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.CompilerParameters.#ctor\n  id: '#ctor'\n  parent: System.CodeDom.Compiler.CompilerParameters\n  langs:\n  - csharp\n  name: CompilerParameters()\n  nameWithType: CompilerParameters.CompilerParameters()\n  fullName: System.CodeDom.Compiler.CompilerParameters.CompilerParameters()\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Initializes a new instance of the <xref href=\"System.CodeDom.Compiler.CompilerParameters\"></xref> class.\n  remarks: ''\n  example:\n  - \"The following example illustrates using <xref:System.CodeDom.Compiler.CompilerParameters> to specify various compiler settings and options. This code example is part of a larger example provided for the <xref:System.CodeDom.Compiler.CompilerParameters> class.  \\n  \\n [!code-cpp[CompilerParametersExample#2](~/add/codesnippet/cpp/m-system.codedom.compile_2_1.cpp)]\\n [!code-cs[CompilerParametersExample#2](~/add/codesnippet/csharp/m-system.codedom.compile_2_1.cs)]\\n [!code-vb[CompilerParametersExample#2](~/add/codesnippet/visualbasic/m-system.codedom.compile_2_1.vb)]\"\n  syntax:\n    content: public CompilerParameters ();\n    parameters: []\n  overload: System.CodeDom.Compiler.CompilerParameters.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[])\n  id: '#ctor(System.String[])'\n  parent: System.CodeDom.Compiler.CompilerParameters\n  langs:\n  - csharp\n  name: CompilerParameters(String[])\n  nameWithType: CompilerParameters.CompilerParameters(String[])\n  fullName: System.CodeDom.Compiler.CompilerParameters.CompilerParameters(String[])\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Initializes a new instance of the <xref href=\"System.CodeDom.Compiler.CompilerParameters\"></xref> class using the specified assembly names.\n  syntax:\n    content: public CompilerParameters (string[] assemblyNames);\n    parameters:\n    - id: assemblyNames\n      type: System.String[]\n      description: The names of the assemblies to reference.\n  overload: System.CodeDom.Compiler.CompilerParameters.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[],System.String)\n  id: '#ctor(System.String[],System.String)'\n  parent: System.CodeDom.Compiler.CompilerParameters\n  langs:\n  - csharp\n  name: CompilerParameters(String[],String)\n  nameWithType: CompilerParameters.CompilerParameters(String[],String)\n  fullName: System.CodeDom.Compiler.CompilerParameters.CompilerParameters(String[],String)\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Initializes a new instance of the <xref href=\"System.CodeDom.Compiler.CompilerParameters\"></xref> class using the specified assembly names and output file name.\n  syntax:\n    content: public CompilerParameters (string[] assemblyNames, string outputName);\n    parameters:\n    - id: assemblyNames\n      type: System.String[]\n      description: The names of the assemblies to reference.\n    - id: outputName\n      type: System.String\n      description: The output file name.\n  overload: System.CodeDom.Compiler.CompilerParameters.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[],System.String,System.Boolean)\n  id: '#ctor(System.String[],System.String,System.Boolean)'\n  parent: System.CodeDom.Compiler.CompilerParameters\n  langs:\n  - csharp\n  name: CompilerParameters(String[],String,Boolean)\n  nameWithType: CompilerParameters.CompilerParameters(String[],String,Boolean)\n  fullName: System.CodeDom.Compiler.CompilerParameters.CompilerParameters(String[],String,Boolean)\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Initializes a new instance of the <xref href=\"System.CodeDom.Compiler.CompilerParameters\"></xref> class using the specified assembly names, output name, and a value indicating whether to include debug information.\n  syntax:\n    content: public CompilerParameters (string[] assemblyNames, string outputName, bool includeDebugInformation);\n    parameters:\n    - id: assemblyNames\n      type: System.String[]\n      description: The names of the assemblies to reference.\n    - id: outputName\n      type: System.String\n      description: The output file name.\n    - id: includeDebugInformation\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to include debug information; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to exclude debug information.\n  overload: System.CodeDom.Compiler.CompilerParameters.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.CompilerParameters.CompilerOptions\n  id: CompilerOptions\n  parent: System.CodeDom.Compiler.CompilerParameters\n  langs:\n  - csharp\n  name: CompilerOptions\n  nameWithType: CompilerParameters.CompilerOptions\n  fullName: System.CodeDom.Compiler.CompilerParameters.CompilerOptions\n  type: Property\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Gets or sets optional command-line arguments to use when invoking the compiler.\n  remarks: An <xref:System.CodeDom.Compiler.ICodeCompiler> typically includes this string on the command line when invoking a command-line compiler. By default, this property contains an empty string.\n  example:\n  - \"The following example illustrates using <xref:System.CodeDom.Compiler.CompilerParameters> to specify various compiler settings and options. This code example is part of a larger example provided for the <xref:System.CodeDom.Compiler.CompilerParameters> class.  \\n  \\n [!code-cpp[CompilerParametersExample#2](~/add/codesnippet/cpp/p-system.codedom.compile_14_1.cpp)]\\n [!code-cs[CompilerParametersExample#2](~/add/codesnippet/csharp/p-system.codedom.compile_14_1.cs)]\\n [!code-vb[CompilerParametersExample#2](~/add/codesnippet/visualbasic/p-system.codedom.compile_14_1.vb)]\"\n  syntax:\n    content: public string CompilerOptions { get; set; }\n    return:\n      type: System.String\n      description: Any additional command-line arguments for the compiler.\n  overload: System.CodeDom.Compiler.CompilerParameters.CompilerOptions*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.CompilerParameters.CoreAssemblyFileName\n  id: CoreAssemblyFileName\n  parent: System.CodeDom.Compiler.CompilerParameters\n  langs:\n  - csharp\n  name: CoreAssemblyFileName\n  nameWithType: CompilerParameters.CoreAssemblyFileName\n  fullName: System.CodeDom.Compiler.CompilerParameters.CoreAssemblyFileName\n  type: Property\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Gets or sets the name of the core or standard assembly that contains basic types such as <xref:System.Object>, <xref:System.String>, or <xref:System.Int32>.\n  remarks: \"If the value of this property is an empty string or `null`, the compiler uses the default core assembly. Depending on the compiler version, the default core assembly may be mscorlib.dll or System.Runtime.dll in a Framework directory or reference assembly directory. If the value of this property is not empty, the Code Document Object Model (CodeDOM) explicitly references the specified assembly and emits compiler options that cause the compiler to not reference any assemblies implicitly during compilation.. For compilers that reference the core or standard assembly only implicitly by default, this property can be used on its own. For compilers that implicitly reference assemblies in addition to the core or standard assembly, using this option may require specifying additional entries in the <xref:System.CodeDom.Compiler.CompilerParameters.ReferencedAssemblies%2A?displayProperty=fullName>property.  \\n  \\n> [!NOTE]\\n>  An <xref:System.CodeDom.Compiler.ICodeCompiler> or <xref:System.CodeDom.Compiler.CodeDomProvider> implementation may choose to ignore this property.\"\n  syntax:\n    content: public string CoreAssemblyFileName { get; set; }\n    return:\n      type: System.String\n      description: The name of the core assembly that contains basic types.\n  overload: System.CodeDom.Compiler.CompilerParameters.CoreAssemblyFileName*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.CompilerParameters.EmbeddedResources\n  id: EmbeddedResources\n  parent: System.CodeDom.Compiler.CompilerParameters\n  langs:\n  - csharp\n  name: EmbeddedResources\n  nameWithType: CompilerParameters.EmbeddedResources\n  fullName: System.CodeDom.Compiler.CompilerParameters.EmbeddedResources\n  type: Property\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Gets the .NET Framework resource files to include when compiling the assembly output.\n  remarks: \"Embedded resources are built into the generated assembly output file. Including files through this property is similar to the `/resource` command-line argument supported by many of the .NET Framework compilers.  \\n  \\n Not all compilers support .NET Framework resource files, so you should test for this support by calling the <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> method with the flag <xref:System.CodeDom.Compiler.GeneratorSupport>.  \\n  \\n Add one or more .NET Framework resource file paths to the returned <xref:System.Collections.Specialized.StringCollection> to embed the file resources in the compiled assembly. Adding a duplicate or invalid file path results in compilation errors; ensure that each string specifies a unique path to a valid .NET Framework resource file.  \\n  \\n Use EmbeddedResources to include default or neutral culture .NET Framework resources for an assembly; use the <xref:System.CodeDom.Compiler.CompilerParameters.LinkedResources%2A> property to reference .NET Framework resources in satellite assemblies.\"\n  example:\n  - \"The following example illustrates using <xref:System.CodeDom.Compiler.CompilerParameters> to specify various compiler settings and options. This code example is part of a larger example provided for the <xref:System.CodeDom.Compiler.CompilerParameters> class.  \\n  \\n [!code-cpp[CompilerParametersExample#2](~/add/codesnippet/cpp/p-system.codedom.compile_7_1.cpp)]\\n [!code-cs[CompilerParametersExample#2](~/add/codesnippet/csharp/p-system.codedom.compile_7_1.cs)]\\n [!code-vb[CompilerParametersExample#2](~/add/codesnippet/visualbasic/p-system.codedom.compile_7_1.vb)]\"\n  syntax:\n    content: public System.Collections.Specialized.StringCollection EmbeddedResources { get; }\n    return:\n      type: System.Collections.Specialized.StringCollection\n      description: A collection that contains the file paths of .NET Framework resources to include in the generated assembly.\n  overload: System.CodeDom.Compiler.CompilerParameters.EmbeddedResources*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.CompilerParameters.Evidence\n  id: Evidence\n  parent: System.CodeDom.Compiler.CompilerParameters\n  langs:\n  - csharp\n  name: Evidence\n  nameWithType: CompilerParameters.Evidence\n  fullName: System.CodeDom.Compiler.CompilerParameters.Evidence\n  type: Property\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Specifies an evidence object that represents the security policy permissions to grant the compiled assembly.\n  syntax:\n    content: public System.Security.Policy.Evidence Evidence { get; set; }\n    return:\n      type: System.Security.Policy.Evidence\n      description: An  object that represents the security policy permissions to grant the compiled assembly.\n  overload: System.CodeDom.Compiler.CompilerParameters.Evidence*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.CompilerParameters.GenerateExecutable\n  id: GenerateExecutable\n  parent: System.CodeDom.Compiler.CompilerParameters\n  langs:\n  - csharp\n  name: GenerateExecutable\n  nameWithType: CompilerParameters.GenerateExecutable\n  fullName: System.CodeDom.Compiler.CompilerParameters.GenerateExecutable\n  type: Property\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Gets or sets a value indicating whether to generate an executable.\n  remarks: If the value of this property is `false`, a DLL will be generated. By default, the value of this property is `false`.\n  example:\n  - \"The following example illustrates using <xref:System.CodeDom.Compiler.CompilerParameters> to specify various compiler settings and options. This code example is part of a larger example provided for the <xref:System.CodeDom.Compiler.CompilerParameters> class.  \\n  \\n [!code-cpp[CompilerParametersExample#2](~/add/codesnippet/cpp/p-system.codedom.compile_8_1.cpp)]\\n [!code-cs[CompilerParametersExample#2](~/add/codesnippet/csharp/p-system.codedom.compile_8_1.cs)]\\n [!code-vb[CompilerParametersExample#2](~/add/codesnippet/visualbasic/p-system.codedom.compile_8_1.vb)]\"\n  syntax:\n    content: public bool GenerateExecutable { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if an executable should be generated; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.CodeDom.Compiler.CompilerParameters.GenerateExecutable*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.CompilerParameters.GenerateInMemory\n  id: GenerateInMemory\n  parent: System.CodeDom.Compiler.CompilerParameters\n  langs:\n  - csharp\n  name: GenerateInMemory\n  nameWithType: CompilerParameters.GenerateInMemory\n  fullName: System.CodeDom.Compiler.CompilerParameters.GenerateInMemory\n  type: Property\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Gets or sets a value indicating whether to generate the output in memory.\n  remarks: ''\n  example:\n  - \"The following example illustrates using <xref:System.CodeDom.Compiler.CompilerParameters> to specify various compiler settings and options. This code example is part of a larger example provided for the <xref:System.CodeDom.Compiler.CompilerParameters> class.  \\n  \\n [!code-cpp[CompilerParametersExample#2](~/add/codesnippet/cpp/p-system.codedom.compile_1_1.cpp)]\\n [!code-cs[CompilerParametersExample#2](~/add/codesnippet/csharp/p-system.codedom.compile_1_1.cs)]\\n [!code-vb[CompilerParametersExample#2](~/add/codesnippet/visualbasic/p-system.codedom.compile_1_1.vb)]\"\n  syntax:\n    content: public bool GenerateInMemory { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the compiler should generate the output in memory; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.CodeDom.Compiler.CompilerParameters.GenerateInMemory*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.CompilerParameters.IncludeDebugInformation\n  id: IncludeDebugInformation\n  parent: System.CodeDom.Compiler.CompilerParameters\n  langs:\n  - csharp\n  name: IncludeDebugInformation\n  nameWithType: CompilerParameters.IncludeDebugInformation\n  fullName: System.CodeDom.Compiler.CompilerParameters.IncludeDebugInformation\n  type: Property\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Gets or sets a value indicating whether to include debug information in the compiled executable.\n  syntax:\n    content: public bool IncludeDebugInformation { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if debug information should be generated; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.CodeDom.Compiler.CompilerParameters.IncludeDebugInformation*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.CompilerParameters.LinkedResources\n  id: LinkedResources\n  parent: System.CodeDom.Compiler.CompilerParameters\n  langs:\n  - csharp\n  name: LinkedResources\n  nameWithType: CompilerParameters.LinkedResources\n  fullName: System.CodeDom.Compiler.CompilerParameters.LinkedResources\n  type: Property\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Gets the .NET Framework resource files that are referenced in the current source.\n  remarks: \"Linked resource files allow your assembly to reference .NET Framework resources without embedding the actual resources in the assembly. Referencing files through this property is similar to the `/linkresource` command-line argument supported by many of the .NET Framework compilers.  \\n  \\n Not all compilers support .NET Framework resource files, so you should test for this support by calling the <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> method with the flag <xref:System.CodeDom.Compiler.GeneratorSupport>.  \\n  \\n Add one or more .NET Framework resource file paths to the returned <xref:System.Collections.Specialized.StringCollection> to create links for the resources in the compiled assembly. Adding a duplicate or invalid file path results in compilation errors; ensure that each string specifies a unique path to a valid .NET Framework resource file.  \\n  \\n Use LinkedResources to reference .NET Framework resources in satellite assemblies, localized for a particular culture; use the <xref:System.CodeDom.Compiler.CompilerParameters.EmbeddedResources%2A> property to embed the resources into the compiled assembly.\"\n  example:\n  - \"The following example illustrates using <xref:System.CodeDom.Compiler.CompilerParameters> to specify various compiler settings and options. This code example is part of a larger example provided for the <xref:System.CodeDom.Compiler.CompilerParameters> class.  \\n  \\n [!code-cpp[CompilerParametersExample#2](~/add/codesnippet/cpp/p-system.codedom.compile_2_1.cpp)]\\n [!code-cs[CompilerParametersExample#2](~/add/codesnippet/csharp/p-system.codedom.compile_2_1.cs)]\\n [!code-vb[CompilerParametersExample#2](~/add/codesnippet/visualbasic/p-system.codedom.compile_2_1.vb)]\"\n  syntax:\n    content: public System.Collections.Specialized.StringCollection LinkedResources { get; }\n    return:\n      type: System.Collections.Specialized.StringCollection\n      description: A collection that contains the file paths of .NET Framework resources that are referenced by the source.\n  overload: System.CodeDom.Compiler.CompilerParameters.LinkedResources*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.CompilerParameters.MainClass\n  id: MainClass\n  parent: System.CodeDom.Compiler.CompilerParameters\n  langs:\n  - csharp\n  name: MainClass\n  nameWithType: CompilerParameters.MainClass\n  fullName: System.CodeDom.Compiler.CompilerParameters.MainClass\n  type: Property\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Gets or sets the name of the main class.\n  remarks: The main class contains the entry point for the program.\n  example:\n  - \"The following example illustrates using <xref:System.CodeDom.Compiler.CompilerParameters> to specify various compiler settings and options. This code example is part of a larger example provided for the <xref:System.CodeDom.Compiler.CompilerParameters> class.  \\n  \\n [!code-cpp[CompilerParametersExample#2](~/add/codesnippet/cpp/p-system.codedom.compile_13_1.cpp)]\\n [!code-cs[CompilerParametersExample#2](~/add/codesnippet/csharp/p-system.codedom.compile_13_1.cs)]\\n [!code-vb[CompilerParametersExample#2](~/add/codesnippet/visualbasic/p-system.codedom.compile_13_1.vb)]\"\n  syntax:\n    content: public string MainClass { get; set; }\n    return:\n      type: System.String\n      description: The name of the main class.\n  overload: System.CodeDom.Compiler.CompilerParameters.MainClass*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.CompilerParameters.OutputAssembly\n  id: OutputAssembly\n  parent: System.CodeDom.Compiler.CompilerParameters\n  langs:\n  - csharp\n  name: OutputAssembly\n  nameWithType: CompilerParameters.OutputAssembly\n  fullName: System.CodeDom.Compiler.CompilerParameters.OutputAssembly\n  type: Property\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Gets or sets the name of the output assembly.\n  remarks: ''\n  example:\n  - \"The following example illustrates using <xref:System.CodeDom.Compiler.CompilerParameters> to specify various compiler settings and options. This code example is part of a larger example provided for the <xref:System.CodeDom.Compiler.CompilerParameters> class.  \\n  \\n [!code-cpp[CompilerParametersExample#2](~/add/codesnippet/cpp/p-system.codedom.compile_6_1.cpp)]\\n [!code-cs[CompilerParametersExample#2](~/add/codesnippet/csharp/p-system.codedom.compile_6_1.cs)]\\n [!code-vb[CompilerParametersExample#2](~/add/codesnippet/visualbasic/p-system.codedom.compile_6_1.vb)]\"\n  syntax:\n    content: public string OutputAssembly { get; set; }\n    return:\n      type: System.String\n      description: The name of the output assembly.\n  overload: System.CodeDom.Compiler.CompilerParameters.OutputAssembly*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.CompilerParameters.ReferencedAssemblies\n  id: ReferencedAssemblies\n  parent: System.CodeDom.Compiler.CompilerParameters\n  langs:\n  - csharp\n  name: ReferencedAssemblies\n  nameWithType: CompilerParameters.ReferencedAssemblies\n  fullName: System.CodeDom.Compiler.CompilerParameters.ReferencedAssemblies\n  type: Property\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Gets the assemblies referenced by the current project.\n  remarks: The string collection should consist of, or include, the assemblies referenced by the current project. Add assembly file names to the returned <xref:System.Collections.Specialized.StringCollection> to import the assembly manifest and reference the assembly type information in the current project.\n  example:\n  - \"The following example illustrates using <xref:System.CodeDom.Compiler.CompilerParameters> to specify various compiler settings and options. This code example is part of a larger example provided for the <xref:System.CodeDom.Compiler.CompilerParameters> class.  \\n  \\n [!code-cpp[CompilerParametersExample#2](~/add/codesnippet/cpp/p-system.codedom.compile_9_1.cpp)]\\n [!code-cs[CompilerParametersExample#2](~/add/codesnippet/csharp/p-system.codedom.compile_9_1.cs)]\\n [!code-vb[CompilerParametersExample#2](~/add/codesnippet/visualbasic/p-system.codedom.compile_9_1.vb)]\"\n  syntax:\n    content: public System.Collections.Specialized.StringCollection ReferencedAssemblies { get; }\n    return:\n      type: System.Collections.Specialized.StringCollection\n      description: A collection that contains the assembly names that are referenced by the source to compile.\n  overload: System.CodeDom.Compiler.CompilerParameters.ReferencedAssemblies*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.CompilerParameters.TempFiles\n  id: TempFiles\n  parent: System.CodeDom.Compiler.CompilerParameters\n  langs:\n  - csharp\n  name: TempFiles\n  nameWithType: CompilerParameters.TempFiles\n  fullName: System.CodeDom.Compiler.CompilerParameters.TempFiles\n  type: Property\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Gets or sets the collection that contains the temporary files.\n  remarks: \"The temporary files in the collection are retained or deleted upon the completion of compiler activity based on the value of the <xref:System.CodeDom.Compiler.TempFileCollection.KeepFiles%2A> property in the collection. The <xref:System.CodeDom.Compiler.TempFileCollection.KeepFiles%2A> property is set if the collection is created using the <xref:System.CodeDom.Compiler.TempFileCollection.%23ctor%28System.String%2CSystem.Boolean%29> constructor with the `keepFiles` parameter set to `true`.  \\n  \\n> [!NOTE]\\n>  This class contains a link demand and an inheritance demand at the class level that applies to all members. A <xref:System.Security.SecurityException> is thrown when either the immediate caller or the derived class does not have full-trust permission. For details about security demands, see [Link Demands](~/add/includes/ajax-current-ext-md.md) and [Inheritance Demands](http://msdn.microsoft.com/en-us/28b9adbb-8f08-4f10-b856-dbf59eb932d9).\"\n  example:\n  - \"The following example illustrates using <xref:System.CodeDom.Compiler.CompilerParameters> to specify various compiler settings and options. This code example is part of a larger example provided for the <xref:System.CodeDom.Compiler.CompilerParameters> class.  \\n  \\n [!code-cpp[CompilerParametersExample#2](~/add/codesnippet/cpp/p-system.codedom.compile_4_1.cpp)]\\n [!code-cs[CompilerParametersExample#2](~/add/codesnippet/csharp/p-system.codedom.compile_4_1.cs)]\\n [!code-vb[CompilerParametersExample#2](~/add/codesnippet/visualbasic/p-system.codedom.compile_4_1.vb)]\"\n  syntax:\n    content: public System.CodeDom.Compiler.TempFileCollection TempFiles { get; set; }\n    return:\n      type: System.CodeDom.Compiler.TempFileCollection\n      description: A collection that contains the temporary files.\n  overload: System.CodeDom.Compiler.CompilerParameters.TempFiles*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.CompilerParameters.TreatWarningsAsErrors\n  id: TreatWarningsAsErrors\n  parent: System.CodeDom.Compiler.CompilerParameters\n  langs:\n  - csharp\n  name: TreatWarningsAsErrors\n  nameWithType: CompilerParameters.TreatWarningsAsErrors\n  fullName: System.CodeDom.Compiler.CompilerParameters.TreatWarningsAsErrors\n  type: Property\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Gets or sets a value indicating whether to treat warnings as errors.\n  remarks: ''\n  example:\n  - \"The following example illustrates using <xref:System.CodeDom.Compiler.CompilerParameters> to specify various compiler settings and options. This code example is part of a larger example provided for the <xref:System.CodeDom.Compiler.CompilerParameters> class.  \\n  \\n [!code-cpp[CompilerParametersExample#2](~/add/codesnippet/cpp/p-system.codedom.compile_5_1.cpp)]\\n [!code-cs[CompilerParametersExample#2](~/add/codesnippet/csharp/p-system.codedom.compile_5_1.cs)]\\n [!code-vb[CompilerParametersExample#2](~/add/codesnippet/visualbasic/p-system.codedom.compile_5_1.vb)]\"\n  syntax:\n    content: public bool TreatWarningsAsErrors { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if warnings should be treated as errors; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.CodeDom.Compiler.CompilerParameters.TreatWarningsAsErrors*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.CompilerParameters.UserToken\n  id: UserToken\n  parent: System.CodeDom.Compiler.CompilerParameters\n  langs:\n  - csharp\n  name: UserToken\n  nameWithType: CompilerParameters.UserToken\n  fullName: System.CodeDom.Compiler.CompilerParameters.UserToken\n  type: Property\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Gets or sets the user token to use when creating the compiler process.\n  syntax:\n    content: public IntPtr UserToken { get; set; }\n    return:\n      type: System.IntPtr\n      description: The user token to use.\n  overload: System.CodeDom.Compiler.CompilerParameters.UserToken*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.CompilerParameters.WarningLevel\n  id: WarningLevel\n  parent: System.CodeDom.Compiler.CompilerParameters\n  langs:\n  - csharp\n  name: WarningLevel\n  nameWithType: CompilerParameters.WarningLevel\n  fullName: System.CodeDom.Compiler.CompilerParameters.WarningLevel\n  type: Property\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Gets or sets the warning level at which the compiler aborts compilation.\n  remarks: ''\n  example:\n  - \"The following example illustrates using <xref:System.CodeDom.Compiler.CompilerParameters> to specify various compiler settings and options. This code example is part of a larger example provided for the <xref:System.CodeDom.Compiler.CompilerParameters> class.  \\n  \\n [!code-cpp[CompilerParametersExample#2](~/add/codesnippet/cpp/p-system.codedom.compile_11_1.cpp)]\\n [!code-cs[CompilerParametersExample#2](~/add/codesnippet/csharp/p-system.codedom.compile_11_1.cs)]\\n [!code-vb[CompilerParametersExample#2](~/add/codesnippet/visualbasic/p-system.codedom.compile_11_1.vb)]\"\n  syntax:\n    content: public int WarningLevel { get; set; }\n    return:\n      type: System.Int32\n      description: The warning level at which the compiler aborts compilation.\n  overload: System.CodeDom.Compiler.CompilerParameters.WarningLevel*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.Compiler.CompilerParameters.Win32Resource\n  id: Win32Resource\n  parent: System.CodeDom.Compiler.CompilerParameters\n  langs:\n  - csharp\n  name: Win32Resource\n  nameWithType: CompilerParameters.Win32Resource\n  fullName: System.CodeDom.Compiler.CompilerParameters.Win32Resource\n  type: Property\n  assemblies:\n  - System\n  namespace: System.CodeDom.Compiler\n  summary: Gets or sets the file name of a Win32 resource file to link into the compiled assembly.\n  remarks: \"Linking files through this property is similar to the `/winres` and `/winresource` command-line arguments supported by many of the .NET Framework compilers.  \\n  \\n Use Win32Resource to compile a Win32 resource file into the assembly. Use <xref:System.CodeDom.Compiler.CompilerParameters.EmbeddedResources%2A> or <xref:System.CodeDom.Compiler.CompilerParameters.LinkedResources%2A> to compile with .NET Framework resource files.  \\n  \\n Not all compilers support Win32 resource files, so you should test a code generator for this support before linking a resource file by calling the <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> method with the flag <xref:System.CodeDom.Compiler.GeneratorSupport>.\"\n  syntax:\n    content: public string Win32Resource { get; set; }\n    return:\n      type: System.String\n      description: A Win32 resource file that will be linked into the compiled assembly.\n  overload: System.CodeDom.Compiler.CompilerParameters.Win32Resource*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.CodeDom.Compiler.CompilerParameters.#ctor\n  parent: System.CodeDom.Compiler.CompilerParameters\n  isExternal: false\n  name: CompilerParameters()\n  nameWithType: CompilerParameters.CompilerParameters()\n  fullName: System.CodeDom.Compiler.CompilerParameters.CompilerParameters()\n- uid: System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[])\n  parent: System.CodeDom.Compiler.CompilerParameters\n  isExternal: false\n  name: CompilerParameters(String[])\n  nameWithType: CompilerParameters.CompilerParameters(String[])\n  fullName: System.CodeDom.Compiler.CompilerParameters.CompilerParameters(String[])\n- uid: System.String[]\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String[]\n  spec.csharp:\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: String[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[],System.String)\n  parent: System.CodeDom.Compiler.CompilerParameters\n  isExternal: false\n  name: CompilerParameters(String[],String)\n  nameWithType: CompilerParameters.CompilerParameters(String[],String)\n  fullName: System.CodeDom.Compiler.CompilerParameters.CompilerParameters(String[],String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[],System.String,System.Boolean)\n  parent: System.CodeDom.Compiler.CompilerParameters\n  isExternal: false\n  name: CompilerParameters(String[],String,Boolean)\n  nameWithType: CompilerParameters.CompilerParameters(String[],String,Boolean)\n  fullName: System.CodeDom.Compiler.CompilerParameters.CompilerParameters(String[],String,Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.CodeDom.Compiler.CompilerParameters.CompilerOptions\n  parent: System.CodeDom.Compiler.CompilerParameters\n  isExternal: false\n  name: CompilerOptions\n  nameWithType: CompilerParameters.CompilerOptions\n  fullName: System.CodeDom.Compiler.CompilerParameters.CompilerOptions\n- uid: System.CodeDom.Compiler.CompilerParameters.CoreAssemblyFileName\n  parent: System.CodeDom.Compiler.CompilerParameters\n  isExternal: false\n  name: CoreAssemblyFileName\n  nameWithType: CompilerParameters.CoreAssemblyFileName\n  fullName: System.CodeDom.Compiler.CompilerParameters.CoreAssemblyFileName\n- uid: System.CodeDom.Compiler.CompilerParameters.EmbeddedResources\n  parent: System.CodeDom.Compiler.CompilerParameters\n  isExternal: false\n  name: EmbeddedResources\n  nameWithType: CompilerParameters.EmbeddedResources\n  fullName: System.CodeDom.Compiler.CompilerParameters.EmbeddedResources\n- uid: System.Collections.Specialized.StringCollection\n  parent: System.Collections.Specialized\n  isExternal: false\n  name: StringCollection\n  nameWithType: StringCollection\n  fullName: System.Collections.Specialized.StringCollection\n- uid: System.CodeDom.Compiler.CompilerParameters.Evidence\n  parent: System.CodeDom.Compiler.CompilerParameters\n  isExternal: false\n  name: Evidence\n  nameWithType: CompilerParameters.Evidence\n  fullName: System.CodeDom.Compiler.CompilerParameters.Evidence\n- uid: System.Security.Policy.Evidence\n  parent: System.Security.Policy\n  isExternal: false\n  name: Evidence\n  nameWithType: Evidence\n  fullName: System.Security.Policy.Evidence\n- uid: System.CodeDom.Compiler.CompilerParameters.GenerateExecutable\n  parent: System.CodeDom.Compiler.CompilerParameters\n  isExternal: false\n  name: GenerateExecutable\n  nameWithType: CompilerParameters.GenerateExecutable\n  fullName: System.CodeDom.Compiler.CompilerParameters.GenerateExecutable\n- uid: System.CodeDom.Compiler.CompilerParameters.GenerateInMemory\n  parent: System.CodeDom.Compiler.CompilerParameters\n  isExternal: false\n  name: GenerateInMemory\n  nameWithType: CompilerParameters.GenerateInMemory\n  fullName: System.CodeDom.Compiler.CompilerParameters.GenerateInMemory\n- uid: System.CodeDom.Compiler.CompilerParameters.IncludeDebugInformation\n  parent: System.CodeDom.Compiler.CompilerParameters\n  isExternal: false\n  name: IncludeDebugInformation\n  nameWithType: CompilerParameters.IncludeDebugInformation\n  fullName: System.CodeDom.Compiler.CompilerParameters.IncludeDebugInformation\n- uid: System.CodeDom.Compiler.CompilerParameters.LinkedResources\n  parent: System.CodeDom.Compiler.CompilerParameters\n  isExternal: false\n  name: LinkedResources\n  nameWithType: CompilerParameters.LinkedResources\n  fullName: System.CodeDom.Compiler.CompilerParameters.LinkedResources\n- uid: System.CodeDom.Compiler.CompilerParameters.MainClass\n  parent: System.CodeDom.Compiler.CompilerParameters\n  isExternal: false\n  name: MainClass\n  nameWithType: CompilerParameters.MainClass\n  fullName: System.CodeDom.Compiler.CompilerParameters.MainClass\n- uid: System.CodeDom.Compiler.CompilerParameters.OutputAssembly\n  parent: System.CodeDom.Compiler.CompilerParameters\n  isExternal: false\n  name: OutputAssembly\n  nameWithType: CompilerParameters.OutputAssembly\n  fullName: System.CodeDom.Compiler.CompilerParameters.OutputAssembly\n- uid: System.CodeDom.Compiler.CompilerParameters.ReferencedAssemblies\n  parent: System.CodeDom.Compiler.CompilerParameters\n  isExternal: false\n  name: ReferencedAssemblies\n  nameWithType: CompilerParameters.ReferencedAssemblies\n  fullName: System.CodeDom.Compiler.CompilerParameters.ReferencedAssemblies\n- uid: System.CodeDom.Compiler.CompilerParameters.TempFiles\n  parent: System.CodeDom.Compiler.CompilerParameters\n  isExternal: false\n  name: TempFiles\n  nameWithType: CompilerParameters.TempFiles\n  fullName: System.CodeDom.Compiler.CompilerParameters.TempFiles\n- uid: System.CodeDom.Compiler.TempFileCollection\n  parent: System.CodeDom.Compiler\n  isExternal: false\n  name: TempFileCollection\n  nameWithType: TempFileCollection\n  fullName: System.CodeDom.Compiler.TempFileCollection\n- uid: System.CodeDom.Compiler.CompilerParameters.TreatWarningsAsErrors\n  parent: System.CodeDom.Compiler.CompilerParameters\n  isExternal: false\n  name: TreatWarningsAsErrors\n  nameWithType: CompilerParameters.TreatWarningsAsErrors\n  fullName: System.CodeDom.Compiler.CompilerParameters.TreatWarningsAsErrors\n- uid: System.CodeDom.Compiler.CompilerParameters.UserToken\n  parent: System.CodeDom.Compiler.CompilerParameters\n  isExternal: false\n  name: UserToken\n  nameWithType: CompilerParameters.UserToken\n  fullName: System.CodeDom.Compiler.CompilerParameters.UserToken\n- uid: System.IntPtr\n  parent: System\n  isExternal: true\n  name: IntPtr\n  nameWithType: IntPtr\n  fullName: System.IntPtr\n- uid: System.CodeDom.Compiler.CompilerParameters.WarningLevel\n  parent: System.CodeDom.Compiler.CompilerParameters\n  isExternal: false\n  name: WarningLevel\n  nameWithType: CompilerParameters.WarningLevel\n  fullName: System.CodeDom.Compiler.CompilerParameters.WarningLevel\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.CodeDom.Compiler.CompilerParameters.Win32Resource\n  parent: System.CodeDom.Compiler.CompilerParameters\n  isExternal: false\n  name: Win32Resource\n  nameWithType: CompilerParameters.Win32Resource\n  fullName: System.CodeDom.Compiler.CompilerParameters.Win32Resource\n- uid: System.CodeDom.Compiler.CompilerParameters.#ctor*\n  parent: System.CodeDom.Compiler.CompilerParameters\n  isExternal: false\n  name: CompilerParameters\n  nameWithType: CompilerParameters.CompilerParameters\n- uid: System.CodeDom.Compiler.CompilerParameters.CompilerOptions*\n  parent: System.CodeDom.Compiler.CompilerParameters\n  isExternal: false\n  name: CompilerOptions\n  nameWithType: CompilerParameters.CompilerOptions\n- uid: System.CodeDom.Compiler.CompilerParameters.CoreAssemblyFileName*\n  parent: System.CodeDom.Compiler.CompilerParameters\n  isExternal: false\n  name: CoreAssemblyFileName\n  nameWithType: CompilerParameters.CoreAssemblyFileName\n- uid: System.CodeDom.Compiler.CompilerParameters.EmbeddedResources*\n  parent: System.CodeDom.Compiler.CompilerParameters\n  isExternal: false\n  name: EmbeddedResources\n  nameWithType: CompilerParameters.EmbeddedResources\n- uid: System.CodeDom.Compiler.CompilerParameters.Evidence*\n  parent: System.CodeDom.Compiler.CompilerParameters\n  isExternal: false\n  name: Evidence\n  nameWithType: CompilerParameters.Evidence\n- uid: System.CodeDom.Compiler.CompilerParameters.GenerateExecutable*\n  parent: System.CodeDom.Compiler.CompilerParameters\n  isExternal: false\n  name: GenerateExecutable\n  nameWithType: CompilerParameters.GenerateExecutable\n- uid: System.CodeDom.Compiler.CompilerParameters.GenerateInMemory*\n  parent: System.CodeDom.Compiler.CompilerParameters\n  isExternal: false\n  name: GenerateInMemory\n  nameWithType: CompilerParameters.GenerateInMemory\n- uid: System.CodeDom.Compiler.CompilerParameters.IncludeDebugInformation*\n  parent: System.CodeDom.Compiler.CompilerParameters\n  isExternal: false\n  name: IncludeDebugInformation\n  nameWithType: CompilerParameters.IncludeDebugInformation\n- uid: System.CodeDom.Compiler.CompilerParameters.LinkedResources*\n  parent: System.CodeDom.Compiler.CompilerParameters\n  isExternal: false\n  name: LinkedResources\n  nameWithType: CompilerParameters.LinkedResources\n- uid: System.CodeDom.Compiler.CompilerParameters.MainClass*\n  parent: System.CodeDom.Compiler.CompilerParameters\n  isExternal: false\n  name: MainClass\n  nameWithType: CompilerParameters.MainClass\n- uid: System.CodeDom.Compiler.CompilerParameters.OutputAssembly*\n  parent: System.CodeDom.Compiler.CompilerParameters\n  isExternal: false\n  name: OutputAssembly\n  nameWithType: CompilerParameters.OutputAssembly\n- uid: System.CodeDom.Compiler.CompilerParameters.ReferencedAssemblies*\n  parent: System.CodeDom.Compiler.CompilerParameters\n  isExternal: false\n  name: ReferencedAssemblies\n  nameWithType: CompilerParameters.ReferencedAssemblies\n- uid: System.CodeDom.Compiler.CompilerParameters.TempFiles*\n  parent: System.CodeDom.Compiler.CompilerParameters\n  isExternal: false\n  name: TempFiles\n  nameWithType: CompilerParameters.TempFiles\n- uid: System.CodeDom.Compiler.CompilerParameters.TreatWarningsAsErrors*\n  parent: System.CodeDom.Compiler.CompilerParameters\n  isExternal: false\n  name: TreatWarningsAsErrors\n  nameWithType: CompilerParameters.TreatWarningsAsErrors\n- uid: System.CodeDom.Compiler.CompilerParameters.UserToken*\n  parent: System.CodeDom.Compiler.CompilerParameters\n  isExternal: false\n  name: UserToken\n  nameWithType: CompilerParameters.UserToken\n- uid: System.CodeDom.Compiler.CompilerParameters.WarningLevel*\n  parent: System.CodeDom.Compiler.CompilerParameters\n  isExternal: false\n  name: WarningLevel\n  nameWithType: CompilerParameters.WarningLevel\n- uid: System.CodeDom.Compiler.CompilerParameters.Win32Resource*\n  parent: System.CodeDom.Compiler.CompilerParameters\n  isExternal: false\n  name: Win32Resource\n  nameWithType: CompilerParameters.Win32Resource\n"}