{"nodes":[{"pos":[676,821],"content":"Describes objects that contain both a managed pointer to a location and a runtime representation of the type that may be stored at that location.","needQuote":true,"needEscape":true,"nodes":[{"content":"Describes objects that contain both a managed pointer to a location and a runtime representation of the type that may be stored at that location.","pos":[0,145]}]},{"pos":[834,1405],"content":"A typed reference is a type/value combination used for varargs and other support. `TypedReference` is a built-in value type that can be used for parameters and local variables.       Arrays of `TypedReference` objects cannot be created. For example, the following call is invalid:       [!code-cs[System.TypedReference#1](~/add/codesnippet/csharp/t-system.typedreference_1.cs)]  [!code-cpp[System.TypedReference#1](~/add/codesnippet/cpp/t-system.typedreference_1.cpp)]  [!code-vb[System.TypedReference#1](~/add/codesnippet/visualbasic/t-system.typedreference_1.vb)]","needQuote":false,"needEscape":true,"nodes":[{"content":"A typed reference is a type/value combination used for varargs and other support.","pos":[0,81]},{"content":"<ph id=\"ph1\">`TypedReference`</ph> is a built-in value type that can be used for parameters and local variables.","pos":[82,176],"source":"`TypedReference` is a built-in value type that can be used for parameters and local variables."},{"content":"Arrays of <ph id=\"ph1\">`TypedReference`</ph> objects cannot be created.","pos":[183,236],"source":"       Arrays of `TypedReference` objects cannot be created."},{"content":"For example, the following call is invalid:       <bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>System.TypedReference#1<ept id=\"p2\">](~/add/codesnippet/csharp/t-system.typedreference_1.cs)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-cpp</bpt><bpt id=\"p4\">[</bpt>System.TypedReference#1<ept id=\"p4\">](~/add/codesnippet/cpp/t-system.typedreference_1.cpp)</ept><ept id=\"p3\">]</ept>  <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.TypedReference#1<ept id=\"p6\">](~/add/codesnippet/visualbasic/t-system.typedreference_1.vb)</ept><ept id=\"p5\">]</ept>","pos":[237,565],"source":" For example, the following call is invalid:       [!code-cs[System.TypedReference#1](~/add/codesnippet/csharp/t-system.typedreference_1.cs)]  [!code-cpp[System.TypedReference#1](~/add/codesnippet/cpp/t-system.typedreference_1.cpp)]  [!code-vb[System.TypedReference#1](~/add/codesnippet/visualbasic/t-system.typedreference_1.vb)]"}]},{"pos":[1959,2014],"content":"Checks if this object is equal to the specified object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Checks if this object is equal to the specified object.","pos":[0,55]}]},{"pos":[2151,2203],"content":"The object with which to compare the current object.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object with which to compare the current object.","pos":[0,52]}]},{"pos":[2262,2446],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if this object is equal to the specified object; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if this object is equal to the specified object; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[2605,2636],"content":"This method is not implemented.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method is not implemented.","pos":[0,31]}]},{"pos":[2959,2996],"content":"Returns the hash code of this object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the hash code of this object.","pos":[0,37]}]},{"pos":[3131,3160],"content":"The hash code of this object.","needQuote":true,"needEscape":true,"nodes":[{"content":"The hash code of this object.","pos":[0,29]}]},{"pos":[3645,3774],"content":"Returns the type of the target of the specified <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_TypedReference\" name=\"TypedReference\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns the type of the target of the specified <xref uid=\"langword_csharp_TypedReference\" name=\"TypedReference\" href=\"\"></xref>."},{"pos":[3940,3988],"content":"The value whose target's type is to be returned.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value whose target's type is to be returned.","pos":[0,48]}]},{"pos":[4044,4165],"content":"The type of the target of the specified <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_TypedReference\" name=\"TypedReference\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The type of the target of the specified <xref uid=\"langword_csharp_TypedReference\" name=\"TypedReference\" href=\"\"></xref>."},{"pos":[4733,4898],"content":"Makes a <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_TypedReference\" name=\"TypedReference\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for a field identified by a specified object and list of field descriptions.","needQuote":true,"needEscape":true,"source":"Makes a <xref uid=\"langword_csharp_TypedReference\" name=\"TypedReference\" href=\"\"></xref> for a field identified by a specified object and list of field descriptions."},{"pos":[4911,5929],"content":"The MakeTypedReference method returns a typed reference to some terminal field, where the `target` parameter contains the field described by the first element of `flds`, the field described by the first element of `flds` contains the field described by the second element of `flds`, and so on until the terminal field is reached.      > [!NOTE] >  Starting with the [!INCLUDE[net_v20sp1_long](~/add/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/add/includes/ajax-current-ext-md.md).)   >    >  To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/add/includes/ajax-current-ext-md.md)] or later.","needQuote":false,"needEscape":true,"nodes":[{"content":"The MakeTypedReference method returns a typed reference to some terminal field, where the <ph id=\"ph1\">`target`</ph> parameter contains the field described by the first element of <ph id=\"ph2\">`flds`</ph>, the field described by the first element of <ph id=\"ph3\">`flds`</ph> contains the field described by the second element of <ph id=\"ph4\">`flds`</ph>, and so on until the terminal field is reached.","pos":[0,329],"source":"The MakeTypedReference method returns a typed reference to some terminal field, where the `target` parameter contains the field described by the first element of `flds`, the field described by the first element of `flds` contains the field described by the second element of `flds`, and so on until the terminal field is reached."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Starting with the <ph id=\"ph2\">[!INCLUDE[net_v20sp1_long](~/add/includes/net-v20sp1-long-md.md)]</ph>, this method can be used to access non-public members if the caller has been granted &lt;xref:System.Security.Permissions.ReflectionPermission&gt; with the &lt;xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName&gt; flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.","pos":[335,780],"source":"      > [!NOTE] >  Starting with the [!INCLUDE[net_v20sp1_long](~/add/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof."},{"content":"(See <bpt id=\"p1\">[</bpt>Security Considerations for Reflection<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.)   &gt;    &gt;  To use this functionality, your application should target the <ph id=\"ph1\">[!INCLUDE[net_v35_long](~/add/includes/ajax-current-ext-md.md)]</ph> or later.","pos":[781,1013],"source":" (See [Security Considerations for Reflection](~/add/includes/ajax-current-ext-md.md).)   >    >  To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/add/includes/ajax-current-ext-md.md)] or later."}]},{"pos":[6133,6208],"content":"An object that contains the field described by the first element of <ph id=\"ph1\">`flds`</ph>.","needQuote":true,"needEscape":true,"source":"An object that contains the field described by the first element of `flds`."},{"pos":[6285,6607],"content":"A list of field descriptions where each element describes a field that contains the field described by the succeeding element. Each described field must be a value type. The field descriptions must be <xref uid=\"langword_csharp_RuntimeFieldInfo\" name=\"RuntimeFieldInfo\" href=\"\"></xref> objects supplied by the type system.","needQuote":true,"needEscape":true,"nodes":[{"content":"A list of field descriptions where each element describes a field that contains the field described by the succeeding element.","pos":[0,126]},{"content":"Each described field must be a value type.","pos":[127,169]},{"content":"The field descriptions must be <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_RuntimeFieldInfo\" name=\"RuntimeFieldInfo\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects supplied by the type system.","pos":[170,322],"source":" The field descriptions must be <xref uid=\"langword_csharp_RuntimeFieldInfo\" name=\"RuntimeFieldInfo\" href=\"\"></xref> objects supplied by the type system."}]},{"pos":[6673,6783],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.TypedReference\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for the field described by the last element of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">flds</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.TypedReference\"></xref> for the field described by the last element of <code>flds</code>."},{"pos":[6955,7190],"content":"<code>target</code> or <code>flds</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       An element of <code>flds</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;target&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;flds&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,105],"source":"<code>target</code> or <code>flds</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       An element of <ph id=\"ph1\">&lt;code&gt;flds&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[112,219],"source":"       -or-       An element of <code>flds</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[7287,7727],"content":"The <code>flds</code> array has no elements.       -or-       An element of <code>flds</code> is not a <xref uid=\"langword_csharp_RuntimeFieldInfo\" name=\"RuntimeFieldInfo\" href=\"\"></xref> object.       -or-       The <xref:System.Reflection.FieldInfo.IsInitOnly*> or <xref:System.Reflection.FieldInfo.IsStatic*> property of an element of <code>flds</code> is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">flds</ph><ept id=\"p1\">&lt;/code&gt;</ept> array has no elements.","pos":[0,44],"source":"The <code>flds</code> array has no elements."},{"content":"-or-       An element of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">flds</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not a <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_RuntimeFieldInfo\" name=\"RuntimeFieldInfo\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object.","pos":[51,195],"source":"       -or-       An element of <code>flds</code> is not a <xref uid=\"langword_csharp_RuntimeFieldInfo\" name=\"RuntimeFieldInfo\" href=\"\"></xref> object."},{"content":"-or-       The &lt;xref:System.Reflection.FieldInfo.IsInitOnly<bpt id=\"p1\">*</bpt>&gt; or &lt;xref:System.Reflection.FieldInfo.IsStatic<ept id=\"p1\">*</ept>&gt; property of an element of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">flds</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","pos":[202,420],"source":"       -or-       The <xref:System.Reflection.FieldInfo.IsInitOnly*> or <xref:System.Reflection.FieldInfo.IsStatic*> property of an element of <code>flds</code> is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>."}]},{"pos":[7834,8186],"content":"Parameter <code>target</code> does not contain the field described by the first element of <code>flds</code>, or an element of <code>flds</code> describes a field that is not contained in the field described by the succeeding element of <code>flds</code>.       -or-       The field described by an element of <code>flds</code> is not a value type.","needQuote":false,"needEscape":true,"nodes":[{"content":"Parameter <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">target</ph><ept id=\"p1\">&lt;/code&gt;</ept> does not contain the field described by the first element of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">flds</ph><ept id=\"p2\">&lt;/code&gt;</ept>, or an element of <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">flds</ph><ept id=\"p3\">&lt;/code&gt;</ept> describes a field that is not contained in the field described by the succeeding element of <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph4\">flds</ph><ept id=\"p4\">&lt;/code&gt;</ept>.","pos":[0,255],"source":"Parameter <code>target</code> does not contain the field described by the first element of <code>flds</code>, or an element of <code>flds</code> describes a field that is not contained in the field described by the succeeding element of <code>flds</code>."},{"content":"-or-       The field described by an element of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">flds</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not a value type.","pos":[262,348],"source":"       -or-       The field described by an element of <code>flds</code> is not a value type."}]},{"pos":[8677,8822],"content":"Converts the specified value to a <xref uid=\"langword_csharp_TypedReference\" name=\"TypedReference\" href=\"\"></xref>. This method is not supported.","needQuote":true,"needEscape":true,"nodes":[{"content":"Converts the specified value to a <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_TypedReference\" name=\"TypedReference\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,115],"source":"Converts the specified value to a <xref uid=\"langword_csharp_TypedReference\" name=\"TypedReference\" href=\"\"></xref>."},{"content":"This method is not supported.","pos":[116,145]}]},{"pos":[8834,8896],"content":"This method always throws <xref:System.NotSupportedException>.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method always throws &lt;xref:System.NotSupportedException&gt;.","pos":[0,62],"source":"This method always throws <xref:System.NotSupportedException>."}]},{"pos":[9082,9111],"content":"The target of the conversion.","needQuote":true,"needEscape":true,"nodes":[{"content":"The target of the conversion.","pos":[0,29]}]},{"pos":[9173,9199],"content":"The value to be converted.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value to be converted.","pos":[0,26]}]},{"pos":[9369,9382],"content":"In all cases.","needQuote":true,"needEscape":true,"nodes":[{"content":"In all cases.","pos":[0,13]}]},{"pos":[9813,9954],"content":"Returns the internal metadata type handle for the specified <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_TypedReference\" name=\"TypedReference\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns the internal metadata type handle for the specified <xref uid=\"langword_csharp_TypedReference\" name=\"TypedReference\" href=\"\"></xref>."},{"pos":[10135,10259],"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_TypedReference\" name=\"TypedReference\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for which the type handle is requested.","needQuote":true,"needEscape":true,"source":"The <xref uid=\"langword_csharp_TypedReference\" name=\"TypedReference\" href=\"\"></xref> for which the type handle is requested."},{"pos":[10328,10461],"content":"The internal metadata type handle for the specified <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_TypedReference\" name=\"TypedReference\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The internal metadata type handle for the specified <xref uid=\"langword_csharp_TypedReference\" name=\"TypedReference\" href=\"\"></xref>."},{"pos":[10925,11100],"content":"Converts the specified <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_TypedReference\" name=\"TypedReference\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to an <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Converts the specified <xref uid=\"langword_csharp_TypedReference\" name=\"TypedReference\" href=\"\"></xref> to an <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>."},{"pos":[11112,11145],"content":"This might be a boxing operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"This might be a boxing operation.","pos":[0,33]}]},{"pos":[11308,11409],"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_TypedReference\" name=\"TypedReference\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to be converted.","needQuote":true,"needEscape":true,"source":"The <xref uid=\"langword_csharp_TypedReference\" name=\"TypedReference\" href=\"\"></xref> to be converted."},{"pos":[11467,11589],"content":"An &lt;xref:System.Object&gt; converted from a <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_TypedReference\" name=\"TypedReference\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An <xref:System.Object> converted from a <xref uid=\"langword_csharp_TypedReference\" name=\"TypedReference\" href=\"\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.TypedReference\n  id: TypedReference\n  children:\n  - System.TypedReference.Equals(System.Object)\n  - System.TypedReference.GetHashCode\n  - System.TypedReference.GetTargetType(System.TypedReference)\n  - System.TypedReference.MakeTypedReference(System.Object,System.Reflection.FieldInfo[])\n  - System.TypedReference.SetTypedReference(System.TypedReference,System.Object)\n  - System.TypedReference.TargetTypeToken(System.TypedReference)\n  - System.TypedReference.ToObject(System.TypedReference)\n  langs:\n  - csharp\n  name: TypedReference\n  nameWithType: TypedReference\n  fullName: System.TypedReference\n  type: Struct\n  summary: Describes objects that contain both a managed pointer to a location and a runtime representation of the type that may be stored at that location.\n  remarks: \"A typed reference is a type/value combination used for varargs and other support. `TypedReference` is a built-in value type that can be used for parameters and local variables.  \\n  \\n Arrays of `TypedReference` objects cannot be created. For example, the following call is invalid:  \\n  \\n [!code-cs[System.TypedReference#1](~/add/codesnippet/csharp/t-system.typedreference_1.cs)]\\n [!code-cpp[System.TypedReference#1](~/add/codesnippet/cpp/t-system.typedreference_1.cpp)]\\n [!code-vb[System.TypedReference#1](~/add/codesnippet/visualbasic/t-system.typedreference_1.vb)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public struct TypedReference\n  inheritance:\n  - System.ValueType\n  implements: []\n  platform:\n  - net462\n- uid: System.TypedReference.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.TypedReference\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: TypedReference.Equals(Object)\n  fullName: System.TypedReference.Equals(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Checks if this object is equal to the specified object.\n  syntax:\n    content: public override bool Equals (object o);\n    parameters:\n    - id: o\n      type: System.Object\n      description: The object with which to compare the current object.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if this object is equal to the specified object; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.TypedReference.Equals*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This method is not implemented.\n  platform:\n  - net462\n- uid: System.TypedReference.GetHashCode\n  id: GetHashCode\n  parent: System.TypedReference\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: TypedReference.GetHashCode()\n  fullName: System.TypedReference.GetHashCode()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Returns the hash code of this object.\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: The hash code of this object.\n  overload: System.TypedReference.GetHashCode*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.TypedReference.GetTargetType(System.TypedReference)\n  id: GetTargetType(System.TypedReference)\n  parent: System.TypedReference\n  langs:\n  - csharp\n  name: GetTargetType(TypedReference)\n  nameWithType: TypedReference.GetTargetType(TypedReference)\n  fullName: System.TypedReference.GetTargetType(TypedReference)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Returns the type of the target of the specified <xref uid=\"langword_csharp_TypedReference\" name=\"TypedReference\" href=\"\"></xref>.\n  syntax:\n    content: public static Type GetTargetType (TypedReference value);\n    parameters:\n    - id: value\n      type: System.TypedReference\n      description: The value whose target's type is to be returned.\n    return:\n      type: System.Type\n      description: The type of the target of the specified <xref uid=\"langword_csharp_TypedReference\" name=\"TypedReference\" href=\"\"></xref>.\n  overload: System.TypedReference.GetTargetType*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.TypedReference.MakeTypedReference(System.Object,System.Reflection.FieldInfo[])\n  id: MakeTypedReference(System.Object,System.Reflection.FieldInfo[])\n  parent: System.TypedReference\n  langs:\n  - csharp\n  name: MakeTypedReference(Object,FieldInfo[])\n  nameWithType: TypedReference.MakeTypedReference(Object,FieldInfo[])\n  fullName: System.TypedReference.MakeTypedReference(Object,FieldInfo[])\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Makes a <xref uid=\"langword_csharp_TypedReference\" name=\"TypedReference\" href=\"\"></xref> for a field identified by a specified object and list of field descriptions.\n  remarks: \"The MakeTypedReference method returns a typed reference to some terminal field, where the `target` parameter contains the field described by the first element of `flds`, the field described by the first element of `flds` contains the field described by the second element of `flds`, and so on until the terminal field is reached.  \\n  \\n> [!NOTE]\\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/add/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/add/includes/ajax-current-ext-md.md).)  \\n>   \\n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/add/includes/ajax-current-ext-md.md)] or later.\"\n  syntax:\n    content: public static TypedReference MakeTypedReference (object target, System.Reflection.FieldInfo[] flds);\n    parameters:\n    - id: target\n      type: System.Object\n      description: An object that contains the field described by the first element of `flds`.\n    - id: flds\n      type: System.Reflection.FieldInfo[]\n      description: A list of field descriptions where each element describes a field that contains the field described by the succeeding element. Each described field must be a value type. The field descriptions must be <xref uid=\"langword_csharp_RuntimeFieldInfo\" name=\"RuntimeFieldInfo\" href=\"\"></xref> objects supplied by the type system.\n    return:\n      type: System.TypedReference\n      description: A <xref href=\"System.TypedReference\"></xref> for the field described by the last element of <code>flds</code>.\n  overload: System.TypedReference.MakeTypedReference*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>target</code> or <code>flds</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n An element of <code>flds</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>flds</code> array has no elements.  \\n  \\n -or-  \\n  \\n An element of <code>flds</code> is not a <xref uid=\\\"langword_csharp_RuntimeFieldInfo\\\" name=\\\"RuntimeFieldInfo\\\" href=\\\"\\\"></xref> object.  \\n  \\n -or-  \\n  \\n The <xref:System.Reflection.FieldInfo.IsInitOnly*> or <xref:System.Reflection.FieldInfo.IsStatic*> property of an element of <code>flds</code> is <xref uid=\\\"langword_csharp_true\\\" name=\\\"true\\\" href=\\\"\\\"></xref>.\"\n  - type: System.MissingMemberException\n    commentId: T:System.MissingMemberException\n    description: \"Parameter <code>target</code> does not contain the field described by the first element of <code>flds</code>, or an element of <code>flds</code> describes a field that is not contained in the field described by the succeeding element of <code>flds</code>.  \\n  \\n -or-  \\n  \\n The field described by an element of <code>flds</code> is not a value type.\"\n  platform:\n  - net462\n- uid: System.TypedReference.SetTypedReference(System.TypedReference,System.Object)\n  id: SetTypedReference(System.TypedReference,System.Object)\n  parent: System.TypedReference\n  langs:\n  - csharp\n  name: SetTypedReference(TypedReference,Object)\n  nameWithType: TypedReference.SetTypedReference(TypedReference,Object)\n  fullName: System.TypedReference.SetTypedReference(TypedReference,Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Converts the specified value to a <xref uid=\"langword_csharp_TypedReference\" name=\"TypedReference\" href=\"\"></xref>. This method is not supported.\n  remarks: This method always throws <xref:System.NotSupportedException>.\n  syntax:\n    content: public static void SetTypedReference (TypedReference target, object value);\n    parameters:\n    - id: target\n      type: System.TypedReference\n      description: The target of the conversion.\n    - id: value\n      type: System.Object\n      description: The value to be converted.\n  overload: System.TypedReference.SetTypedReference*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: In all cases.\n  platform:\n  - net462\n- uid: System.TypedReference.TargetTypeToken(System.TypedReference)\n  id: TargetTypeToken(System.TypedReference)\n  parent: System.TypedReference\n  langs:\n  - csharp\n  name: TargetTypeToken(TypedReference)\n  nameWithType: TypedReference.TargetTypeToken(TypedReference)\n  fullName: System.TypedReference.TargetTypeToken(TypedReference)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Returns the internal metadata type handle for the specified <xref uid=\"langword_csharp_TypedReference\" name=\"TypedReference\" href=\"\"></xref>.\n  syntax:\n    content: public static RuntimeTypeHandle TargetTypeToken (TypedReference value);\n    parameters:\n    - id: value\n      type: System.TypedReference\n      description: The <xref uid=\"langword_csharp_TypedReference\" name=\"TypedReference\" href=\"\"></xref> for which the type handle is requested.\n    return:\n      type: System.RuntimeTypeHandle\n      description: The internal metadata type handle for the specified <xref uid=\"langword_csharp_TypedReference\" name=\"TypedReference\" href=\"\"></xref>.\n  overload: System.TypedReference.TargetTypeToken*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.TypedReference.ToObject(System.TypedReference)\n  id: ToObject(System.TypedReference)\n  parent: System.TypedReference\n  langs:\n  - csharp\n  name: ToObject(TypedReference)\n  nameWithType: TypedReference.ToObject(TypedReference)\n  fullName: System.TypedReference.ToObject(TypedReference)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Converts the specified <xref uid=\"langword_csharp_TypedReference\" name=\"TypedReference\" href=\"\"></xref> to an <xref uid=\"langword_csharp_Object\" name=\"Object\" href=\"\"></xref>.\n  remarks: This might be a boxing operation.\n  syntax:\n    content: public static object ToObject (TypedReference value);\n    parameters:\n    - id: value\n      type: System.TypedReference\n      description: The <xref uid=\"langword_csharp_TypedReference\" name=\"TypedReference\" href=\"\"></xref> to be converted.\n    return:\n      type: System.Object\n      description: An <xref:System.Object> converted from a <xref uid=\"langword_csharp_TypedReference\" name=\"TypedReference\" href=\"\"></xref>.\n  overload: System.TypedReference.ToObject*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.ValueType\n  isExternal: false\n  name: System.ValueType\n- uid: System.NotSupportedException\n  isExternal: true\n  name: System.NotSupportedException\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.MissingMemberException\n  isExternal: true\n  name: System.MissingMemberException\n- uid: System.TypedReference.Equals(System.Object)\n  parent: System.TypedReference\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: TypedReference.Equals(Object)\n  fullName: System.TypedReference.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.TypedReference.GetHashCode\n  parent: System.TypedReference\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: TypedReference.GetHashCode()\n  fullName: System.TypedReference.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.TypedReference.GetTargetType(System.TypedReference)\n  parent: System.TypedReference\n  isExternal: false\n  name: GetTargetType(TypedReference)\n  nameWithType: TypedReference.GetTargetType(TypedReference)\n  fullName: System.TypedReference.GetTargetType(TypedReference)\n- uid: System.Type\n  parent: System\n  isExternal: true\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.TypedReference\n  parent: System\n  isExternal: false\n  name: TypedReference\n  nameWithType: TypedReference\n  fullName: System.TypedReference\n- uid: System.TypedReference.MakeTypedReference(System.Object,System.Reflection.FieldInfo[])\n  parent: System.TypedReference\n  isExternal: false\n  name: MakeTypedReference(Object,FieldInfo[])\n  nameWithType: TypedReference.MakeTypedReference(Object,FieldInfo[])\n  fullName: System.TypedReference.MakeTypedReference(Object,FieldInfo[])\n- uid: System.Reflection.FieldInfo[]\n  parent: System.Reflection\n  isExternal: true\n  name: FieldInfo\n  nameWithType: FieldInfo\n  fullName: System.Reflection.FieldInfo[]\n  spec.csharp:\n  - uid: System.Reflection.FieldInfo\n    name: FieldInfo\n    nameWithType: FieldInfo\n    fullName: FieldInfo[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.TypedReference.SetTypedReference(System.TypedReference,System.Object)\n  parent: System.TypedReference\n  isExternal: false\n  name: SetTypedReference(TypedReference,Object)\n  nameWithType: TypedReference.SetTypedReference(TypedReference,Object)\n  fullName: System.TypedReference.SetTypedReference(TypedReference,Object)\n- uid: System.TypedReference.TargetTypeToken(System.TypedReference)\n  parent: System.TypedReference\n  isExternal: false\n  name: TargetTypeToken(TypedReference)\n  nameWithType: TypedReference.TargetTypeToken(TypedReference)\n  fullName: System.TypedReference.TargetTypeToken(TypedReference)\n- uid: System.RuntimeTypeHandle\n  parent: System\n  isExternal: true\n  name: RuntimeTypeHandle\n  nameWithType: RuntimeTypeHandle\n  fullName: System.RuntimeTypeHandle\n- uid: System.TypedReference.ToObject(System.TypedReference)\n  parent: System.TypedReference\n  isExternal: false\n  name: ToObject(TypedReference)\n  nameWithType: TypedReference.ToObject(TypedReference)\n  fullName: System.TypedReference.ToObject(TypedReference)\n- uid: System.TypedReference.Equals*\n  parent: System.TypedReference\n  isExternal: false\n  name: Equals\n  nameWithType: TypedReference.Equals\n- uid: System.TypedReference.GetHashCode*\n  parent: System.TypedReference\n  isExternal: false\n  name: GetHashCode\n  nameWithType: TypedReference.GetHashCode\n- uid: System.TypedReference.GetTargetType*\n  parent: System.TypedReference\n  isExternal: false\n  name: GetTargetType\n  nameWithType: TypedReference.GetTargetType\n- uid: System.TypedReference.MakeTypedReference*\n  parent: System.TypedReference\n  isExternal: false\n  name: MakeTypedReference\n  nameWithType: TypedReference.MakeTypedReference\n- uid: System.TypedReference.SetTypedReference*\n  parent: System.TypedReference\n  isExternal: false\n  name: SetTypedReference\n  nameWithType: TypedReference.SetTypedReference\n- uid: System.TypedReference.TargetTypeToken*\n  parent: System.TypedReference\n  isExternal: false\n  name: TargetTypeToken\n  nameWithType: TypedReference.TargetTypeToken\n- uid: System.TypedReference.ToObject*\n  parent: System.TypedReference\n  isExternal: false\n  name: ToObject\n  nameWithType: TypedReference.ToObject\n"}