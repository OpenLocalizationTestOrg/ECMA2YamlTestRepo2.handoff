{"nodes":[{"pos":[944,1040],"content":"Provides data for the <bpt id=\"p1\">&lt;xref href=\"System.Windows.UIElement.ManipulationCompleted\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event.","needQuote":true,"needEscape":true,"source":"Provides data for the <xref href=\"System.Windows.UIElement.ManipulationCompleted\"></xref> event."},{"pos":[1053,1321],"content":"For more information about manipulations, see the [Input Overview](~/add/includes/ajax-current-ext-md.md). For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"For more information about manipulations, see the <bpt id=\"p1\">[</bpt>Input Overview<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[0,106],"source":"For more information about manipulations, see the [Input Overview](~/add/includes/ajax-current-ext-md.md)."},{"content":"For an example of an application that responds to manipulations, see <bpt id=\"p1\">[</bpt>Walkthrough: Creating Your First Touch Application<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[107,268],"source":" For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[2351,2376],"content":"Cancels the manipulation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Cancels the manipulation.","pos":[0,25]}]},{"pos":[2388,2684],"content":"If the method succeeds, the default <xref:System.Windows.Input.TouchDevice> sends previous touch events as mouse down, mouse move, or mouse up events to the element. Touch cannot be promoted to mouse events if the <xref:System.Windows.UIElement.ManipulationCompleted> event occurs during inertia.","needQuote":true,"needEscape":true,"nodes":[{"content":"If the method succeeds, the default <xref:System.Windows.Input.TouchDevice> sends previous touch events as mouse down, mouse move, or mouse up events to the element. Touch cannot be promoted to mouse events if the <xref:System.Windows.UIElement.ManipulationCompleted> event occurs during inertia.","pos":[0,296],"nodes":[{"content":"If the method succeeds, the default &lt;xref:System.Windows.Input.TouchDevice&gt; sends previous touch events as mouse down, mouse move, or mouse up events to the element.","pos":[0,165],"source":"If the method succeeds, the default <xref:System.Windows.Input.TouchDevice> sends previous touch events as mouse down, mouse move, or mouse up events to the element."},{"content":"Touch cannot be promoted to mouse events if the &lt;xref:System.Windows.UIElement.ManipulationCompleted&gt; event occurs during inertia.","pos":[166,296],"source":" Touch cannot be promoted to mouse events if the <xref:System.Windows.UIElement.ManipulationCompleted> event occurs during inertia."}]}]},{"pos":[2808,2990],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the manipulation was successfully canceled; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the manipulation was successfully canceled; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[3546,3601],"content":"Gets the velocities that are used for the manipulation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the velocities that are used for the manipulation.","pos":[0,55]}]},{"pos":[3788,3838],"content":"The velocities that are used for the manipulation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The velocities that are used for the manipulation.","pos":[0,50]}]},{"pos":[4721,4733],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[4803,4815],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[5358,5494],"content":"Gets a value that indicates whether the <bpt id=\"p1\">&lt;xref href=\"System.Windows.UIElement.ManipulationCompleted\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event occurs during inertia.","needQuote":true,"needEscape":true,"source":"Gets a value that indicates whether the <xref href=\"System.Windows.UIElement.ManipulationCompleted\"></xref> event occurs during inertia."},{"pos":[5608,5938],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the <bpt id=\"p2\">&lt;xref href=\"System.Windows.UIElement.ManipulationCompleted\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> event occurs during inertia; <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> if the event occurs while the user has contact with the <bpt id=\"p4\">&lt;xref href=\"System.Windows.UIElement\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Windows.UIElement.ManipulationCompleted\"></xref> event occurs during inertia; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if the event occurs while the user has contact with the <xref href=\"System.Windows.UIElement\"></xref>."},{"pos":[6528,6597],"content":"Gets the container that defines the coordinates for the manipulation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the container that defines the coordinates for the manipulation.","pos":[0,69]}]},{"pos":[6760,6824],"content":"The container that defines the coordinates for the manipulation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The container that defines the coordinates for the manipulation.","pos":[0,64]}]},{"pos":[7410,7464],"content":"Gets the point from which the manipulation originated.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the point from which the manipulation originated.","pos":[0,54]}]},{"pos":[7476,7608],"content":"If two points of contact initiated the manipulation, the ManipulationOrigin property is the point between the two points of contact.","needQuote":true,"needEscape":true,"nodes":[{"content":"If two points of contact initiated the manipulation, the ManipulationOrigin property is the point between the two points of contact.","pos":[0,132]}]},{"pos":[7752,7801],"content":"The point from which the manipulation originated.","needQuote":true,"needEscape":true,"nodes":[{"content":"The point from which the manipulation originated.","pos":[0,49]}]},{"pos":[8354,8439],"content":"Gets a collection of objects that represents the touch contacts for the manipulation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a collection of objects that represents the touch contacts for the manipulation.","pos":[0,85]}]},{"pos":[8683,8763],"content":"A collection of objects that represents the touch contacts for the manipulation.","needQuote":true,"needEscape":true,"nodes":[{"content":"A collection of objects that represents the touch contacts for the manipulation.","pos":[0,80]}]},{"pos":[9335,9409],"content":"Gets the total transformation that occurs during the current manipulation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the total transformation that occurs during the current manipulation.","pos":[0,74]}]},{"pos":[9588,9657],"content":"The total transformation that occurs during the current manipulation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The total transformation that occurs during the current manipulation.","pos":[0,69]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Input.ManipulationCompletedEventArgs\n  id: ManipulationCompletedEventArgs\n  children:\n  - System.Windows.Input.ManipulationCompletedEventArgs.Cancel\n  - System.Windows.Input.ManipulationCompletedEventArgs.FinalVelocities\n  - System.Windows.Input.ManipulationCompletedEventArgs.InvokeEventHandler(System.Delegate,System.Object)\n  - System.Windows.Input.ManipulationCompletedEventArgs.IsInertial\n  - System.Windows.Input.ManipulationCompletedEventArgs.ManipulationContainer\n  - System.Windows.Input.ManipulationCompletedEventArgs.ManipulationOrigin\n  - System.Windows.Input.ManipulationCompletedEventArgs.Manipulators\n  - System.Windows.Input.ManipulationCompletedEventArgs.TotalManipulation\n  langs:\n  - csharp\n  name: ManipulationCompletedEventArgs\n  nameWithType: ManipulationCompletedEventArgs\n  fullName: System.Windows.Input.ManipulationCompletedEventArgs\n  type: Class\n  summary: Provides data for the <xref href=\"System.Windows.UIElement.ManipulationCompleted\"></xref> event.\n  remarks: 'For more information about manipulations, see the [Input Overview](~/add/includes/ajax-current-ext-md.md). For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/add/includes/ajax-current-ext-md.md).'\n  syntax:\n    content: 'public sealed class ManipulationCompletedEventArgs : System.Windows.Input.InputEventArgs'\n  inheritance:\n  - System.EventArgs\n  - System.Windows.RoutedEventArgs\n  - System.Windows.Input.InputEventArgs\n  implements: []\n  inheritedMembers:\n  - System.Windows.Input.InputEventArgs.Device\n  - System.Windows.Input.InputEventArgs.Timestamp\n  - System.Windows.RoutedEventArgs.Handled\n  - System.Windows.RoutedEventArgs.OnSetSource(System.Object)\n  - System.Windows.RoutedEventArgs.OriginalSource\n  - System.Windows.RoutedEventArgs.RoutedEvent\n  - System.Windows.RoutedEventArgs.Source\n  platform:\n  - net462\n- uid: System.Windows.Input.ManipulationCompletedEventArgs.Cancel\n  id: Cancel\n  parent: System.Windows.Input.ManipulationCompletedEventArgs\n  langs:\n  - csharp\n  name: Cancel()\n  nameWithType: ManipulationCompletedEventArgs.Cancel()\n  fullName: System.Windows.Input.ManipulationCompletedEventArgs.Cancel()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Cancels the manipulation.\n  remarks: If the method succeeds, the default <xref:System.Windows.Input.TouchDevice> sends previous touch events as mouse down, mouse move, or mouse up events to the element. Touch cannot be promoted to mouse events if the <xref:System.Windows.UIElement.ManipulationCompleted> event occurs during inertia.\n  syntax:\n    content: public bool Cancel ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the manipulation was successfully canceled; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.Input.ManipulationCompletedEventArgs.Cancel*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.ManipulationCompletedEventArgs.FinalVelocities\n  id: FinalVelocities\n  parent: System.Windows.Input.ManipulationCompletedEventArgs\n  langs:\n  - csharp\n  name: FinalVelocities\n  nameWithType: ManipulationCompletedEventArgs.FinalVelocities\n  fullName: System.Windows.Input.ManipulationCompletedEventArgs.FinalVelocities\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets the velocities that are used for the manipulation.\n  syntax:\n    content: public System.Windows.Input.ManipulationVelocities FinalVelocities { get; }\n    return:\n      type: System.Windows.Input.ManipulationVelocities\n      description: The velocities that are used for the manipulation.\n  overload: System.Windows.Input.ManipulationCompletedEventArgs.FinalVelocities*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.ManipulationCompletedEventArgs.InvokeEventHandler(System.Delegate,System.Object)\n  id: InvokeEventHandler(System.Delegate,System.Object)\n  parent: System.Windows.Input.ManipulationCompletedEventArgs\n  langs:\n  - csharp\n  name: InvokeEventHandler(Delegate,Object)\n  nameWithType: ManipulationCompletedEventArgs.InvokeEventHandler(Delegate,Object)\n  fullName: System.Windows.Input.ManipulationCompletedEventArgs.InvokeEventHandler(Delegate,Object)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  syntax:\n    content: protected override void InvokeEventHandler (Delegate genericHandler, object genericTarget);\n    parameters:\n    - id: genericHandler\n      type: System.Delegate\n      description: To be added.\n    - id: genericTarget\n      type: System.Object\n      description: To be added.\n  overload: System.Windows.Input.ManipulationCompletedEventArgs.InvokeEventHandler*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.ManipulationCompletedEventArgs.IsInertial\n  id: IsInertial\n  parent: System.Windows.Input.ManipulationCompletedEventArgs\n  langs:\n  - csharp\n  name: IsInertial\n  nameWithType: ManipulationCompletedEventArgs.IsInertial\n  fullName: System.Windows.Input.ManipulationCompletedEventArgs.IsInertial\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets a value that indicates whether the <xref href=\"System.Windows.UIElement.ManipulationCompleted\"></xref> event occurs during inertia.\n  syntax:\n    content: public bool IsInertial { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Windows.UIElement.ManipulationCompleted\"></xref> event occurs during inertia; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if the event occurs while the user has contact with the <xref href=\"System.Windows.UIElement\"></xref>.\n  overload: System.Windows.Input.ManipulationCompletedEventArgs.IsInertial*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.ManipulationCompletedEventArgs.ManipulationContainer\n  id: ManipulationContainer\n  parent: System.Windows.Input.ManipulationCompletedEventArgs\n  langs:\n  - csharp\n  name: ManipulationContainer\n  nameWithType: ManipulationCompletedEventArgs.ManipulationContainer\n  fullName: System.Windows.Input.ManipulationCompletedEventArgs.ManipulationContainer\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets the container that defines the coordinates for the manipulation.\n  syntax:\n    content: public System.Windows.IInputElement ManipulationContainer { get; }\n    return:\n      type: System.Windows.IInputElement\n      description: The container that defines the coordinates for the manipulation.\n  overload: System.Windows.Input.ManipulationCompletedEventArgs.ManipulationContainer*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.ManipulationCompletedEventArgs.ManipulationOrigin\n  id: ManipulationOrigin\n  parent: System.Windows.Input.ManipulationCompletedEventArgs\n  langs:\n  - csharp\n  name: ManipulationOrigin\n  nameWithType: ManipulationCompletedEventArgs.ManipulationOrigin\n  fullName: System.Windows.Input.ManipulationCompletedEventArgs.ManipulationOrigin\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets the point from which the manipulation originated.\n  remarks: If two points of contact initiated the manipulation, the ManipulationOrigin property is the point between the two points of contact.\n  syntax:\n    content: public System.Windows.Point ManipulationOrigin { get; }\n    return:\n      type: System.Windows.Point\n      description: The point from which the manipulation originated.\n  overload: System.Windows.Input.ManipulationCompletedEventArgs.ManipulationOrigin*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.ManipulationCompletedEventArgs.Manipulators\n  id: Manipulators\n  parent: System.Windows.Input.ManipulationCompletedEventArgs\n  langs:\n  - csharp\n  name: Manipulators\n  nameWithType: ManipulationCompletedEventArgs.Manipulators\n  fullName: System.Windows.Input.ManipulationCompletedEventArgs.Manipulators\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets a collection of objects that represents the touch contacts for the manipulation.\n  syntax:\n    content: public System.Collections.Generic.IEnumerable<System.Windows.Input.IManipulator> Manipulators { get; }\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Windows.Input.IManipulator}\n      description: A collection of objects that represents the touch contacts for the manipulation.\n  overload: System.Windows.Input.ManipulationCompletedEventArgs.Manipulators*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.ManipulationCompletedEventArgs.TotalManipulation\n  id: TotalManipulation\n  parent: System.Windows.Input.ManipulationCompletedEventArgs\n  langs:\n  - csharp\n  name: TotalManipulation\n  nameWithType: ManipulationCompletedEventArgs.TotalManipulation\n  fullName: System.Windows.Input.ManipulationCompletedEventArgs.TotalManipulation\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets the total transformation that occurs during the current manipulation.\n  syntax:\n    content: public System.Windows.Input.ManipulationDelta TotalManipulation { get; }\n    return:\n      type: System.Windows.Input.ManipulationDelta\n      description: The total transformation that occurs during the current manipulation.\n  overload: System.Windows.Input.ManipulationCompletedEventArgs.TotalManipulation*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Windows.Input.InputEventArgs\n  isExternal: false\n  name: System.Windows.Input.InputEventArgs\n- uid: System.Windows.Input.ManipulationCompletedEventArgs.Cancel\n  parent: System.Windows.Input.ManipulationCompletedEventArgs\n  isExternal: false\n  name: Cancel()\n  nameWithType: ManipulationCompletedEventArgs.Cancel()\n  fullName: System.Windows.Input.ManipulationCompletedEventArgs.Cancel()\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Windows.Input.ManipulationCompletedEventArgs.FinalVelocities\n  parent: System.Windows.Input.ManipulationCompletedEventArgs\n  isExternal: false\n  name: FinalVelocities\n  nameWithType: ManipulationCompletedEventArgs.FinalVelocities\n  fullName: System.Windows.Input.ManipulationCompletedEventArgs.FinalVelocities\n- uid: System.Windows.Input.ManipulationVelocities\n  parent: System.Windows.Input\n  isExternal: false\n  name: ManipulationVelocities\n  nameWithType: ManipulationVelocities\n  fullName: System.Windows.Input.ManipulationVelocities\n- uid: System.Windows.Input.ManipulationCompletedEventArgs.InvokeEventHandler(System.Delegate,System.Object)\n  parent: System.Windows.Input.ManipulationCompletedEventArgs\n  isExternal: false\n  name: InvokeEventHandler(Delegate,Object)\n  nameWithType: ManipulationCompletedEventArgs.InvokeEventHandler(Delegate,Object)\n  fullName: System.Windows.Input.ManipulationCompletedEventArgs.InvokeEventHandler(Delegate,Object)\n- uid: System.Delegate\n  parent: System\n  isExternal: true\n  name: Delegate\n  nameWithType: Delegate\n  fullName: System.Delegate\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Windows.Input.ManipulationCompletedEventArgs.IsInertial\n  parent: System.Windows.Input.ManipulationCompletedEventArgs\n  isExternal: false\n  name: IsInertial\n  nameWithType: ManipulationCompletedEventArgs.IsInertial\n  fullName: System.Windows.Input.ManipulationCompletedEventArgs.IsInertial\n- uid: System.Windows.Input.ManipulationCompletedEventArgs.ManipulationContainer\n  parent: System.Windows.Input.ManipulationCompletedEventArgs\n  isExternal: false\n  name: ManipulationContainer\n  nameWithType: ManipulationCompletedEventArgs.ManipulationContainer\n  fullName: System.Windows.Input.ManipulationCompletedEventArgs.ManipulationContainer\n- uid: System.Windows.IInputElement\n  parent: System.Windows\n  isExternal: false\n  name: IInputElement\n  nameWithType: IInputElement\n  fullName: System.Windows.IInputElement\n- uid: System.Windows.Input.ManipulationCompletedEventArgs.ManipulationOrigin\n  parent: System.Windows.Input.ManipulationCompletedEventArgs\n  isExternal: false\n  name: ManipulationOrigin\n  nameWithType: ManipulationCompletedEventArgs.ManipulationOrigin\n  fullName: System.Windows.Input.ManipulationCompletedEventArgs.ManipulationOrigin\n- uid: System.Windows.Point\n  parent: System.Windows\n  isExternal: false\n  name: Point\n  nameWithType: Point\n  fullName: System.Windows.Point\n- uid: System.Windows.Input.ManipulationCompletedEventArgs.Manipulators\n  parent: System.Windows.Input.ManipulationCompletedEventArgs\n  isExternal: false\n  name: Manipulators\n  nameWithType: ManipulationCompletedEventArgs.Manipulators\n  fullName: System.Windows.Input.ManipulationCompletedEventArgs.Manipulators\n- uid: System.Collections.Generic.IEnumerable{System.Windows.Input.IManipulator}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IEnumerable<IManipulator>\n  nameWithType: IEnumerable<IManipulator>\n  fullName: System.Collections.Generic.IEnumerable<System.Windows.Input.IManipulator>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: IEnumerable<System.Windows.Input.IManipulator>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Windows.Input.IManipulator\n    name: IManipulator\n    nameWithType: IManipulator\n    fullName: IManipulator\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Windows.Input.ManipulationCompletedEventArgs.TotalManipulation\n  parent: System.Windows.Input.ManipulationCompletedEventArgs\n  isExternal: false\n  name: TotalManipulation\n  nameWithType: ManipulationCompletedEventArgs.TotalManipulation\n  fullName: System.Windows.Input.ManipulationCompletedEventArgs.TotalManipulation\n- uid: System.Windows.Input.ManipulationDelta\n  parent: System.Windows.Input\n  isExternal: false\n  name: ManipulationDelta\n  nameWithType: ManipulationDelta\n  fullName: System.Windows.Input.ManipulationDelta\n- uid: System.Windows.Input.ManipulationCompletedEventArgs.Cancel*\n  parent: System.Windows.Input.ManipulationCompletedEventArgs\n  isExternal: false\n  name: Cancel\n  nameWithType: ManipulationCompletedEventArgs.Cancel\n- uid: System.Windows.Input.ManipulationCompletedEventArgs.FinalVelocities*\n  parent: System.Windows.Input.ManipulationCompletedEventArgs\n  isExternal: false\n  name: FinalVelocities\n  nameWithType: ManipulationCompletedEventArgs.FinalVelocities\n- uid: System.Windows.Input.ManipulationCompletedEventArgs.InvokeEventHandler*\n  parent: System.Windows.Input.ManipulationCompletedEventArgs\n  isExternal: false\n  name: InvokeEventHandler\n  nameWithType: ManipulationCompletedEventArgs.InvokeEventHandler\n- uid: System.Windows.Input.ManipulationCompletedEventArgs.IsInertial*\n  parent: System.Windows.Input.ManipulationCompletedEventArgs\n  isExternal: false\n  name: IsInertial\n  nameWithType: ManipulationCompletedEventArgs.IsInertial\n- uid: System.Windows.Input.ManipulationCompletedEventArgs.ManipulationContainer*\n  parent: System.Windows.Input.ManipulationCompletedEventArgs\n  isExternal: false\n  name: ManipulationContainer\n  nameWithType: ManipulationCompletedEventArgs.ManipulationContainer\n- uid: System.Windows.Input.ManipulationCompletedEventArgs.ManipulationOrigin*\n  parent: System.Windows.Input.ManipulationCompletedEventArgs\n  isExternal: false\n  name: ManipulationOrigin\n  nameWithType: ManipulationCompletedEventArgs.ManipulationOrigin\n- uid: System.Windows.Input.ManipulationCompletedEventArgs.Manipulators*\n  parent: System.Windows.Input.ManipulationCompletedEventArgs\n  isExternal: false\n  name: Manipulators\n  nameWithType: ManipulationCompletedEventArgs.Manipulators\n- uid: System.Windows.Input.ManipulationCompletedEventArgs.TotalManipulation*\n  parent: System.Windows.Input.ManipulationCompletedEventArgs\n  isExternal: false\n  name: TotalManipulation\n  nameWithType: ManipulationCompletedEventArgs.TotalManipulation\n"}