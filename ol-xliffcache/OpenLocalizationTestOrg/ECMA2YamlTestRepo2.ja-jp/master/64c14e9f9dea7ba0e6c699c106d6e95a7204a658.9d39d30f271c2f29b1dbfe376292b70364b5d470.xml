{"nodes":[{"pos":[651,875],"content":"Implements the `AssignCulture` task. Use the `AssignCulture` element in your project file to create and execute this task. For usage and parameter information, see [AssignCulture Task](~/add/includes/ajax-current-ext-md.md).","needQuote":true,"needEscape":true,"nodes":[{"content":"Implements the <ph id=\"ph1\">`AssignCulture`</ph> task.","pos":[0,36],"source":"Implements the `AssignCulture` task."},{"content":"Use the <ph id=\"ph1\">`AssignCulture`</ph> element in your project file to create and execute this task.","pos":[37,122],"source":" Use the `AssignCulture` element in your project file to create and execute this task."},{"content":"For usage and parameter information, see <bpt id=\"p1\">[</bpt>AssignCulture Task<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[123,224],"source":" For usage and parameter information, see [AssignCulture Task](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[1891,1988],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"Microsoft.Build.Tasks.AssignCulture\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"Microsoft.Build.Tasks.AssignCulture\"></xref> class."},{"pos":[2530,2646],"content":"Gets a list of &lt;xref:Microsoft.Build.Tasks.AssignCulture.Files*&gt; with a <ph id=\"ph1\">`Culture`</ph> metadata entry added to each item.","needQuote":true,"needEscape":true,"source":"Gets a list of <xref:Microsoft.Build.Tasks.AssignCulture.Files*> with a `Culture` metadata entry added to each item."},{"pos":[2659,3016],"content":"If the incoming item from the <xref:Microsoft.Build.Tasks.AssignCulture.Files%2A> property already contains a `Culture` metadata entry, the original metadata entry is used.       The task only assigns a `Culture` metadata entry if the file name contains a valid culture identifier. The culture identifier must be between the last two dots in the filename.","needQuote":false,"needEscape":true,"nodes":[{"content":"If the incoming item from the &lt;xref:Microsoft.Build.Tasks.AssignCulture.Files%2A&gt; property already contains a <ph id=\"ph1\">`Culture`</ph> metadata entry, the original metadata entry is used.","pos":[0,172],"source":"If the incoming item from the <xref:Microsoft.Build.Tasks.AssignCulture.Files%2A> property already contains a `Culture` metadata entry, the original metadata entry is used."},{"content":"The task only assigns a <ph id=\"ph1\">`Culture`</ph> metadata entry if the file name contains a valid culture identifier.","pos":[179,281],"source":"       The task only assigns a `Culture` metadata entry if the file name contains a valid culture identifier."},{"content":"The culture identifier must be between the last two dots in the filename.","pos":[282,355]}]},{"pos":[3190,3304],"content":"The list of &lt;xref:Microsoft.Build.Tasks.AssignCulture.Files*&gt;, with a <ph id=\"ph1\">`Culture`</ph> metadata entry added to each item.","needQuote":true,"needEscape":true,"source":"The list of <xref:Microsoft.Build.Tasks.AssignCulture.Files*>, with a `Culture` metadata entry added to each item."},{"pos":[3842,3954],"content":"Gets a subset of &lt;xref:Microsoft.Build.Tasks.AssignCulture.AssignedFiles*&gt; that have a <ph id=\"ph1\">`Culture`</ph> metadata entry.","needQuote":true,"needEscape":true,"source":"Gets a subset of <xref:Microsoft.Build.Tasks.AssignCulture.AssignedFiles*> that have a `Culture` metadata entry."},{"pos":[4138,4245],"content":"A subset of &lt;xref:Microsoft.Build.Tasks.AssignCulture.AssignedFiles*&gt; that have a <ph id=\"ph1\">`Culture`</ph> metadata entry.","needQuote":true,"needEscape":true,"source":"A subset of <xref:Microsoft.Build.Tasks.AssignCulture.AssignedFiles*> that have a `Culture` metadata entry."},{"pos":[4804,4923],"content":"Gets a subset of &lt;xref:Microsoft.Build.Tasks.AssignCulture.AssignedFiles*&gt; that do not have a <ph id=\"ph1\">`Culture`</ph> metadata entry.","needQuote":true,"needEscape":true,"source":"Gets a subset of <xref:Microsoft.Build.Tasks.AssignCulture.AssignedFiles*> that do not have a `Culture` metadata entry."},{"pos":[5109,5223],"content":"A subset of &lt;xref:Microsoft.Build.Tasks.AssignCulture.AssignedFiles*&gt; that do not have a <ph id=\"ph1\">`Culture`</ph> metadata entry.","needQuote":true,"needEscape":true,"source":"A subset of <xref:Microsoft.Build.Tasks.AssignCulture.AssignedFiles*> that do not have a `Culture` metadata entry."},{"pos":[5789,5908],"content":"Gets a subset of &lt;xref:Microsoft.Build.Tasks.AssignCulture.AssignedFiles*&gt; that do not have a <ph id=\"ph1\">`Culture`</ph> metadata entry.","needQuote":true,"needEscape":true,"source":"Gets a subset of <xref:Microsoft.Build.Tasks.AssignCulture.AssignedFiles*> that do not have a `Culture` metadata entry."},{"pos":[6095,6209],"content":"A subset of &lt;xref:Microsoft.Build.Tasks.AssignCulture.AssignedFiles*&gt; that do not have a <ph id=\"ph1\">`Culture`</ph> metadata entry.","needQuote":true,"needEscape":true,"source":"A subset of <xref:Microsoft.Build.Tasks.AssignCulture.AssignedFiles*> that do not have a `Culture` metadata entry."},{"pos":[6680,6714],"content":"Executes the <ph id=\"ph1\">`AssignCulture`</ph> task.","needQuote":true,"needEscape":true,"source":"Executes the `AssignCulture` task."},{"pos":[6848,7012],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if task execution succeeded; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if task execution succeeded; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[7449,7529],"content":"Gets or sets a list of files with embedded culture names to assign a culture to.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a list of files with embedded culture names to assign a culture to.","pos":[0,80]}]},{"pos":[7699,7768],"content":"The list of files with embedded culture names to assign a culture to.","needQuote":true,"needEscape":true,"nodes":[{"content":"The list of files with embedded culture names to assign a culture to.","pos":[0,69]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: Microsoft.Build.Tasks.AssignCulture\n  id: AssignCulture\n  children:\n  - Microsoft.Build.Tasks.AssignCulture.#ctor\n  - Microsoft.Build.Tasks.AssignCulture.AssignedFiles\n  - Microsoft.Build.Tasks.AssignCulture.AssignedFilesWithCulture\n  - Microsoft.Build.Tasks.AssignCulture.AssignedFilesWithNoCulture\n  - Microsoft.Build.Tasks.AssignCulture.CultureNeutralAssignedFiles\n  - Microsoft.Build.Tasks.AssignCulture.Execute\n  - Microsoft.Build.Tasks.AssignCulture.Files\n  langs:\n  - csharp\n  name: AssignCulture\n  nameWithType: AssignCulture\n  fullName: Microsoft.Build.Tasks.AssignCulture\n  type: Class\n  summary: Implements the `AssignCulture` task. Use the `AssignCulture` element in your project file to create and execute this task. For usage and parameter information, see [AssignCulture Task](~/add/includes/ajax-current-ext-md.md).\n  syntax:\n    content: 'public class AssignCulture : Microsoft.Build.Tasks.TaskExtension'\n  inheritance:\n  - System.Object\n  - Microsoft.Build.Utilities.Task\n  - Microsoft.Build.Tasks.TaskExtension\n  implements: []\n  inheritedMembers:\n  - Microsoft.Build.Tasks.TaskExtension.Log\n  - Microsoft.Build.Utilities.Task.BuildEngine\n  - Microsoft.Build.Utilities.Task.BuildEngine2\n  - Microsoft.Build.Utilities.Task.BuildEngine3\n  - Microsoft.Build.Utilities.Task.BuildEngine4\n  - Microsoft.Build.Utilities.Task.HelpKeywordPrefix\n  - Microsoft.Build.Utilities.Task.HostObject\n  - Microsoft.Build.Utilities.Task.TaskResources\n  platform:\n  - net462\n- uid: Microsoft.Build.Tasks.AssignCulture.#ctor\n  id: '#ctor'\n  parent: Microsoft.Build.Tasks.AssignCulture\n  langs:\n  - csharp\n  name: AssignCulture()\n  nameWithType: AssignCulture.AssignCulture()\n  fullName: Microsoft.Build.Tasks.AssignCulture.AssignCulture()\n  type: Constructor\n  assemblies:\n  - Microsoft.Build.Tasks.v4.0\n  namespace: Microsoft.Build.Tasks\n  summary: Initializes a new instance of the <xref href=\"Microsoft.Build.Tasks.AssignCulture\"></xref> class.\n  syntax:\n    content: public AssignCulture ();\n    parameters: []\n  overload: Microsoft.Build.Tasks.AssignCulture.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Tasks.AssignCulture.AssignedFiles\n  id: AssignedFiles\n  parent: Microsoft.Build.Tasks.AssignCulture\n  langs:\n  - csharp\n  name: AssignedFiles\n  nameWithType: AssignCulture.AssignedFiles\n  fullName: Microsoft.Build.Tasks.AssignCulture.AssignedFiles\n  type: Property\n  assemblies:\n  - Microsoft.Build.Tasks.v4.0\n  namespace: Microsoft.Build.Tasks\n  summary: Gets a list of <xref:Microsoft.Build.Tasks.AssignCulture.Files*> with a `Culture` metadata entry added to each item.\n  remarks: \"If the incoming item from the <xref:Microsoft.Build.Tasks.AssignCulture.Files%2A> property already contains a `Culture` metadata entry, the original metadata entry is used.  \\n  \\n The task only assigns a `Culture` metadata entry if the file name contains a valid culture identifier. The culture identifier must be between the last two dots in the filename.\"\n  syntax:\n    content: public Microsoft.Build.Framework.ITaskItem[] AssignedFiles { get; }\n    return:\n      type: Microsoft.Build.Framework.ITaskItem[]\n      description: The list of <xref:Microsoft.Build.Tasks.AssignCulture.Files*>, with a `Culture` metadata entry added to each item.\n  overload: Microsoft.Build.Tasks.AssignCulture.AssignedFiles*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Tasks.AssignCulture.AssignedFilesWithCulture\n  id: AssignedFilesWithCulture\n  parent: Microsoft.Build.Tasks.AssignCulture\n  langs:\n  - csharp\n  name: AssignedFilesWithCulture\n  nameWithType: AssignCulture.AssignedFilesWithCulture\n  fullName: Microsoft.Build.Tasks.AssignCulture.AssignedFilesWithCulture\n  type: Property\n  assemblies:\n  - Microsoft.Build.Tasks.v4.0\n  namespace: Microsoft.Build.Tasks\n  summary: Gets a subset of <xref:Microsoft.Build.Tasks.AssignCulture.AssignedFiles*> that have a `Culture` metadata entry.\n  syntax:\n    content: public Microsoft.Build.Framework.ITaskItem[] AssignedFilesWithCulture { get; }\n    return:\n      type: Microsoft.Build.Framework.ITaskItem[]\n      description: A subset of <xref:Microsoft.Build.Tasks.AssignCulture.AssignedFiles*> that have a `Culture` metadata entry.\n  overload: Microsoft.Build.Tasks.AssignCulture.AssignedFilesWithCulture*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Tasks.AssignCulture.AssignedFilesWithNoCulture\n  id: AssignedFilesWithNoCulture\n  parent: Microsoft.Build.Tasks.AssignCulture\n  langs:\n  - csharp\n  name: AssignedFilesWithNoCulture\n  nameWithType: AssignCulture.AssignedFilesWithNoCulture\n  fullName: Microsoft.Build.Tasks.AssignCulture.AssignedFilesWithNoCulture\n  type: Property\n  assemblies:\n  - Microsoft.Build.Tasks.v4.0\n  namespace: Microsoft.Build.Tasks\n  summary: Gets a subset of <xref:Microsoft.Build.Tasks.AssignCulture.AssignedFiles*> that do not have a `Culture` metadata entry.\n  syntax:\n    content: public Microsoft.Build.Framework.ITaskItem[] AssignedFilesWithNoCulture { get; }\n    return:\n      type: Microsoft.Build.Framework.ITaskItem[]\n      description: A subset of <xref:Microsoft.Build.Tasks.AssignCulture.AssignedFiles*> that do not have a `Culture` metadata entry.\n  overload: Microsoft.Build.Tasks.AssignCulture.AssignedFilesWithNoCulture*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Tasks.AssignCulture.CultureNeutralAssignedFiles\n  id: CultureNeutralAssignedFiles\n  parent: Microsoft.Build.Tasks.AssignCulture\n  langs:\n  - csharp\n  name: CultureNeutralAssignedFiles\n  nameWithType: AssignCulture.CultureNeutralAssignedFiles\n  fullName: Microsoft.Build.Tasks.AssignCulture.CultureNeutralAssignedFiles\n  type: Property\n  assemblies:\n  - Microsoft.Build.Tasks.v4.0\n  namespace: Microsoft.Build.Tasks\n  summary: Gets a subset of <xref:Microsoft.Build.Tasks.AssignCulture.AssignedFiles*> that do not have a `Culture` metadata entry.\n  syntax:\n    content: public Microsoft.Build.Framework.ITaskItem[] CultureNeutralAssignedFiles { get; }\n    return:\n      type: Microsoft.Build.Framework.ITaskItem[]\n      description: A subset of <xref:Microsoft.Build.Tasks.AssignCulture.AssignedFiles*> that do not have a `Culture` metadata entry.\n  overload: Microsoft.Build.Tasks.AssignCulture.CultureNeutralAssignedFiles*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Tasks.AssignCulture.Execute\n  id: Execute\n  parent: Microsoft.Build.Tasks.AssignCulture\n  langs:\n  - csharp\n  name: Execute()\n  nameWithType: AssignCulture.Execute()\n  fullName: Microsoft.Build.Tasks.AssignCulture.Execute()\n  type: Method\n  assemblies:\n  - Microsoft.Build.Tasks.v4.0\n  namespace: Microsoft.Build.Tasks\n  summary: Executes the `AssignCulture` task.\n  syntax:\n    content: public override bool Execute ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if task execution succeeded; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: Microsoft.Build.Tasks.AssignCulture.Execute*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Tasks.AssignCulture.Files\n  id: Files\n  parent: Microsoft.Build.Tasks.AssignCulture\n  langs:\n  - csharp\n  name: Files\n  nameWithType: AssignCulture.Files\n  fullName: Microsoft.Build.Tasks.AssignCulture.Files\n  type: Property\n  assemblies:\n  - Microsoft.Build.Tasks.v4.0\n  namespace: Microsoft.Build.Tasks\n  summary: Gets or sets a list of files with embedded culture names to assign a culture to.\n  syntax:\n    content: public Microsoft.Build.Framework.ITaskItem[] Files { get; set; }\n    return:\n      type: Microsoft.Build.Framework.ITaskItem[]\n      description: The list of files with embedded culture names to assign a culture to.\n  overload: Microsoft.Build.Tasks.AssignCulture.Files*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: Microsoft.Build.Tasks.TaskExtension\n  isExternal: false\n  name: Microsoft.Build.Tasks.TaskExtension\n- uid: Microsoft.Build.Tasks.AssignCulture.#ctor\n  parent: Microsoft.Build.Tasks.AssignCulture\n  isExternal: false\n  name: AssignCulture()\n  nameWithType: AssignCulture.AssignCulture()\n  fullName: Microsoft.Build.Tasks.AssignCulture.AssignCulture()\n- uid: Microsoft.Build.Tasks.AssignCulture.AssignedFiles\n  parent: Microsoft.Build.Tasks.AssignCulture\n  isExternal: false\n  name: AssignedFiles\n  nameWithType: AssignCulture.AssignedFiles\n  fullName: Microsoft.Build.Tasks.AssignCulture.AssignedFiles\n- uid: Microsoft.Build.Framework.ITaskItem[]\n  parent: Microsoft.Build.Framework\n  isExternal: false\n  name: ITaskItem\n  nameWithType: ITaskItem\n  fullName: Microsoft.Build.Framework.ITaskItem[]\n  spec.csharp:\n  - uid: Microsoft.Build.Framework.ITaskItem\n    name: ITaskItem\n    nameWithType: ITaskItem\n    fullName: ITaskItem[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: Microsoft.Build.Tasks.AssignCulture.AssignedFilesWithCulture\n  parent: Microsoft.Build.Tasks.AssignCulture\n  isExternal: false\n  name: AssignedFilesWithCulture\n  nameWithType: AssignCulture.AssignedFilesWithCulture\n  fullName: Microsoft.Build.Tasks.AssignCulture.AssignedFilesWithCulture\n- uid: Microsoft.Build.Tasks.AssignCulture.AssignedFilesWithNoCulture\n  parent: Microsoft.Build.Tasks.AssignCulture\n  isExternal: false\n  name: AssignedFilesWithNoCulture\n  nameWithType: AssignCulture.AssignedFilesWithNoCulture\n  fullName: Microsoft.Build.Tasks.AssignCulture.AssignedFilesWithNoCulture\n- uid: Microsoft.Build.Tasks.AssignCulture.CultureNeutralAssignedFiles\n  parent: Microsoft.Build.Tasks.AssignCulture\n  isExternal: false\n  name: CultureNeutralAssignedFiles\n  nameWithType: AssignCulture.CultureNeutralAssignedFiles\n  fullName: Microsoft.Build.Tasks.AssignCulture.CultureNeutralAssignedFiles\n- uid: Microsoft.Build.Tasks.AssignCulture.Execute\n  parent: Microsoft.Build.Tasks.AssignCulture\n  isExternal: false\n  name: Execute()\n  nameWithType: AssignCulture.Execute()\n  fullName: Microsoft.Build.Tasks.AssignCulture.Execute()\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: Microsoft.Build.Tasks.AssignCulture.Files\n  parent: Microsoft.Build.Tasks.AssignCulture\n  isExternal: false\n  name: Files\n  nameWithType: AssignCulture.Files\n  fullName: Microsoft.Build.Tasks.AssignCulture.Files\n- uid: Microsoft.Build.Tasks.AssignCulture.#ctor*\n  parent: Microsoft.Build.Tasks.AssignCulture\n  isExternal: false\n  name: AssignCulture\n  nameWithType: AssignCulture.AssignCulture\n- uid: Microsoft.Build.Tasks.AssignCulture.AssignedFiles*\n  parent: Microsoft.Build.Tasks.AssignCulture\n  isExternal: false\n  name: AssignedFiles\n  nameWithType: AssignCulture.AssignedFiles\n- uid: Microsoft.Build.Tasks.AssignCulture.AssignedFilesWithCulture*\n  parent: Microsoft.Build.Tasks.AssignCulture\n  isExternal: false\n  name: AssignedFilesWithCulture\n  nameWithType: AssignCulture.AssignedFilesWithCulture\n- uid: Microsoft.Build.Tasks.AssignCulture.AssignedFilesWithNoCulture*\n  parent: Microsoft.Build.Tasks.AssignCulture\n  isExternal: false\n  name: AssignedFilesWithNoCulture\n  nameWithType: AssignCulture.AssignedFilesWithNoCulture\n- uid: Microsoft.Build.Tasks.AssignCulture.CultureNeutralAssignedFiles*\n  parent: Microsoft.Build.Tasks.AssignCulture\n  isExternal: false\n  name: CultureNeutralAssignedFiles\n  nameWithType: AssignCulture.CultureNeutralAssignedFiles\n- uid: Microsoft.Build.Tasks.AssignCulture.Execute*\n  parent: Microsoft.Build.Tasks.AssignCulture\n  isExternal: false\n  name: Execute\n  nameWithType: AssignCulture.Execute\n- uid: Microsoft.Build.Tasks.AssignCulture.Files*\n  parent: Microsoft.Build.Tasks.AssignCulture\n  isExternal: false\n  name: Files\n  nameWithType: AssignCulture.Files\n"}