{"nodes":[{"pos":[1253,1298],"content":"Represents information about an audio format.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents information about an audio format.","pos":[0,45]}]},{"pos":[2193,2384],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Speech.AudioFormat.SpeechAudioFormatInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class and specifies the samples per second, bits per sample, and the number of channels.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Speech.AudioFormat.SpeechAudioFormatInfo\"></xref> class and specifies the samples per second, bits per sample, and the number of channels."},{"pos":[4151,4188],"content":"The value for the samples per second.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value for the samples per second.","pos":[0,37]}]},{"pos":[4289,4323],"content":"The value for the bits per sample.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value for the bits per sample.","pos":[0,34]}]},{"pos":[4412,4532],"content":"A member of the <bpt id=\"p1\">&lt;xref href=\"System.Speech.AudioFormat.AudioChannel\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration (indicating <ph id=\"ph1\">`Mono`</ph> or <ph id=\"ph2\">`Stereo`</ph>).","needQuote":true,"needEscape":true,"source":"A member of the <xref href=\"System.Speech.AudioFormat.AudioChannel\"></xref> enumeration (indicating `Mono` or `Stereo`)."},{"pos":[5468,5763],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Speech.AudioFormat.SpeechAudioFormatInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class and specifies the encoding format, samples per second, bits per sample, number of channels, average bytes per second, block alignment value, and an array containing format-specific data.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Speech.AudioFormat.SpeechAudioFormatInfo\"></xref> class and specifies the encoding format, samples per second, bits per sample, number of channels, average bytes per second, block alignment value, and an array containing format-specific data."},{"pos":[6117,6137],"content":"The encoding format.","needQuote":true,"needEscape":true,"nodes":[{"content":"The encoding format.","pos":[0,20]}]},{"pos":[6209,6246],"content":"The value for the samples per second.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value for the samples per second.","pos":[0,37]}]},{"pos":[6315,6349],"content":"The value for the bits per sample.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value for the bits per sample.","pos":[0,34]}]},{"pos":[6417,6449],"content":"The value for the channel count.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value for the channel count.","pos":[0,32]}]},{"pos":[6526,6569],"content":"The value for the average bytes per second.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value for the average bytes per second.","pos":[0,43]}]},{"pos":[6635,6664],"content":"The value for the BlockAlign.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value for the BlockAlign.","pos":[0,29]}]},{"pos":[6739,6788],"content":"A byte array containing the format-specific data.","needQuote":true,"needEscape":true,"nodes":[{"content":"A byte array containing the format-specific data.","pos":[0,49]}]},{"pos":[7350,7397],"content":"Gets the average bytes per second of the audio.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the average bytes per second of the audio.","pos":[0,47]}]},{"pos":[7519,7562],"content":"The value for the average bytes per second.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value for the average bytes per second.","pos":[0,43]}]},{"pos":[8100,8138],"content":"Gets the bits per sample of the audio.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the bits per sample of the audio.","pos":[0,38]}]},{"pos":[8252,8286],"content":"The value for the bits per sample.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value for the bits per sample.","pos":[0,34]}]},{"pos":[8801,8844],"content":"Gets and sets the block alignment in bytes.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets and sets the block alignment in bytes.","pos":[0,43]}]},{"pos":[8857,9707],"content":"Software for playback and recording of audio handles audio data in blocks. The sizes of these blocks are multiples of the value of the BlockAlign property. Block alignment value is the number of bytes in an atomic unit (that is, a block) of audio for a particular format. For Pulse Code Modulation (PCM) formats, the formula for calculating block alignment is as follows:      -   Block Alignment = Bytes per Sample x Number of Channels       For example, the block alignment value for 16-bit PCM format mono audio is 2 (2 bytes per sample x 1 channel). For 16-bit PCM format stereo audio, the block alignment value is 4.       Data written and read from a device must always start at the beginning of a block. For example, it is illegal to start playback of PCM data in the middle of a sample (meaning on a boundary that is not block-aligned).","needQuote":false,"needEscape":true,"nodes":[{"content":"Software for playback and recording of audio handles audio data in blocks. The sizes of these blocks are multiples of the value of the BlockAlign property. Block alignment value is the number of bytes in an atomic unit (that is, a block) of audio for a particular format. For Pulse Code Modulation (PCM) formats, the formula for calculating block alignment is as follows:      -   Block Alignment = Bytes per Sample x Number of Channels       For example, the block alignment value for 16-bit PCM format mono audio is 2 (2 bytes per sample x 1 channel). For 16-bit PCM format stereo audio, the block alignment value is 4.       Data written and read from a device must always start at the beginning of a block. For example, it is illegal to start playback of PCM data in the middle of a sample (meaning on a boundary that is not block-aligned).","pos":[0,844],"nodes":[{"content":"Software for playback and recording of audio handles audio data in blocks.","pos":[0,74]},{"content":"The sizes of these blocks are multiples of the value of the BlockAlign property.","pos":[75,155]},{"content":"Block alignment value is the number of bytes in an atomic unit (that is, a block) of audio for a particular format.","pos":[156,271]},{"content":"For Pulse Code Modulation (PCM) formats, the formula for calculating block alignment is as follows:      -   Block Alignment = Bytes per Sample x Number of Channels       For example, the block alignment value for 16-bit PCM format mono audio is 2 (2 bytes per sample x 1 channel).","pos":[272,553]},{"content":"For 16-bit PCM format stereo audio, the block alignment value is 4.","pos":[554,621]},{"content":"Data written and read from a device must always start at the beginning of a block.","pos":[628,710]},{"content":"For example, it is illegal to start playback of PCM data in the middle of a sample (meaning on a boundary that is not block-aligned).","pos":[711,844]}]}]},{"pos":[9819,9853],"content":"The value for the block alignment.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value for the block alignment.","pos":[0,34]}]},{"pos":[10375,10411],"content":"Gets the channel count of the audio.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the channel count of the audio.","pos":[0,36]}]},{"pos":[10524,10556],"content":"The value for the channel count.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value for the channel count.","pos":[0,32]}]},{"pos":[11090,11128],"content":"Gets the encoding format of the audio.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the encoding format of the audio.","pos":[0,38]}]},{"pos":[11308,11341],"content":"The encoding format of the audio.","needQuote":true,"needEscape":true,"nodes":[{"content":"The encoding format of the audio.","pos":[0,33]}]},{"pos":[11889,12113],"content":"Returns whether a given object is an instance of <bpt id=\"p1\">&lt;xref href=\"System.Speech.AudioFormat.SpeechAudioFormatInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and equal to the current instance of <bpt id=\"p2\">&lt;xref href=\"System.Speech.AudioFormat.SpeechAudioFormatInfo\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns whether a given object is an instance of <xref href=\"System.Speech.AudioFormat.SpeechAudioFormatInfo\"></xref> and equal to the current instance of <xref href=\"System.Speech.AudioFormat.SpeechAudioFormatInfo\"></xref>."},{"pos":[12125,12284],"content":"The method returns <ph id=\"ph1\">`false`</ph> if the &lt;xref:System.Object&gt; provided by the <ph id=\"ph2\">`obj`</ph> argument cannot be cast to &lt;xref:System.Speech.AudioFormat.SpeechAudioFormatInfo&gt;.","needQuote":true,"needEscape":true,"source":"The method returns `false` if the <xref:System.Object> provided by the `obj` argument cannot be cast to <xref:System.Speech.AudioFormat.SpeechAudioFormatInfo>."},{"pos":[12425,12451],"content":"The object to be compared.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object to be compared.","pos":[0,26]}]},{"pos":[12510,12820],"content":"Returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the current instance of <bpt id=\"p2\">&lt;xref href=\"System.Speech.AudioFormat.SpeechAudioFormatInfo\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> and that obtained from the <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph1\">obj</ph><ept id=\"p3\">&lt;/code&gt;</ept> argument are equal, otherwise returns <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current instance of <xref href=\"System.Speech.AudioFormat.SpeechAudioFormatInfo\"></xref> and that obtained from the <code>obj</code> argument are equal, otherwise returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[13372,13425],"content":"Returns the format-specific data of the audio format.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the format-specific data of the audio format.","pos":[0,53]}]},{"pos":[13562,13611],"content":"A byte array containing the format-specific data.","needQuote":true,"needEscape":true,"nodes":[{"content":"A byte array containing the format-specific data.","pos":[0,49]}]},{"pos":[14140,14182],"content":"Returns the hash code of the audio format.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the hash code of the audio format.","pos":[0,42]}]},{"pos":[14317,14345],"content":"The value for the hash code.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value for the hash code.","pos":[0,28]}]},{"pos":[14888,14936],"content":"Gets the samples per second of the audio format.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the samples per second of the audio format.","pos":[0,48]}]},{"pos":[15053,15090],"content":"The value for the samples per second.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value for the samples per second.","pos":[0,37]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  id: SpeechAudioFormatInfo\n  children:\n  - System.Speech.AudioFormat.SpeechAudioFormatInfo.#ctor(System.Int32,System.Speech.AudioFormat.AudioBitsPerSample,System.Speech.AudioFormat.AudioChannel)\n  - System.Speech.AudioFormat.SpeechAudioFormatInfo.#ctor(System.Speech.AudioFormat.EncodingFormat,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[])\n  - System.Speech.AudioFormat.SpeechAudioFormatInfo.AverageBytesPerSecond\n  - System.Speech.AudioFormat.SpeechAudioFormatInfo.BitsPerSample\n  - System.Speech.AudioFormat.SpeechAudioFormatInfo.BlockAlign\n  - System.Speech.AudioFormat.SpeechAudioFormatInfo.ChannelCount\n  - System.Speech.AudioFormat.SpeechAudioFormatInfo.EncodingFormat\n  - System.Speech.AudioFormat.SpeechAudioFormatInfo.Equals(System.Object)\n  - System.Speech.AudioFormat.SpeechAudioFormatInfo.FormatSpecificData\n  - System.Speech.AudioFormat.SpeechAudioFormatInfo.GetHashCode\n  - System.Speech.AudioFormat.SpeechAudioFormatInfo.SamplesPerSecond\n  langs:\n  - csharp\n  name: SpeechAudioFormatInfo\n  nameWithType: SpeechAudioFormatInfo\n  fullName: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  type: Class\n  summary: Represents information about an audio format.\n  syntax:\n    content: public class SpeechAudioFormatInfo\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.#ctor(System.Int32,System.Speech.AudioFormat.AudioBitsPerSample,System.Speech.AudioFormat.AudioChannel)\n  id: '#ctor(System.Int32,System.Speech.AudioFormat.AudioBitsPerSample,System.Speech.AudioFormat.AudioChannel)'\n  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  langs:\n  - csharp\n  name: SpeechAudioFormatInfo(Int32,AudioBitsPerSample,AudioChannel)\n  nameWithType: SpeechAudioFormatInfo.SpeechAudioFormatInfo(Int32,AudioBitsPerSample,AudioChannel)\n  fullName: System.Speech.AudioFormat.SpeechAudioFormatInfo.SpeechAudioFormatInfo(Int32,AudioBitsPerSample,AudioChannel)\n  type: Constructor\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.AudioFormat\n  summary: Initializes a new instance of the <xref href=\"System.Speech.AudioFormat.SpeechAudioFormatInfo\"></xref> class and specifies the samples per second, bits per sample, and the number of channels.\n  remarks: ''\n  example:\n  - \"The following example shows a typical use of SpeechAudioFormatInfo to specify the format of audio to output to a WAV file. The SpeechAudioFormatInfo instance is an argument to the <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A> method.  \\n  \\n```c#  \\nusing System;  \\nusing System.IO;  \\nusing System.Speech.Synthesis;  \\nusing System.Speech.AudioFormat;  \\n  \\nnamespace SampleSynthesis  \\n{  \\n  class Program  \\n  {  \\n    static void Main(string[] args)  \\n    {  \\n  \\n      // Initialize a new instance of the SpeechSynthesizer.  \\n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \\n      {  \\n  \\n        // Configure the audio output.   \\n        synth.SetOutputToWaveFile(@\\\"C:\\\\temp\\\\test.wav\\\",   \\n          new SpeechAudioFormatInfo(32000, AudioBitsPerSample.Sixteen, AudioChannel.Mono));  \\n  \\n        // Create a SoundPlayer instance to play output audio file.  \\n        System.Media.SoundPlayer m_SoundPlayer =   \\n          new System.Media.SoundPlayer(@\\\"C:\\\\temp\\\\test.wav\\\");  \\n  \\n        // Build a prompt.  \\n        PromptBuilder builder = new PromptBuilder();  \\n        builder.AppendText(\\\"This is sample output to a WAVE file.\\\");  \\n  \\n        // Speak the prompt.  \\n        synth.Speak(builder);  \\n        m_SoundPlayer.Play();  \\n      }  \\n  \\n      Console.WriteLine();  \\n      Console.WriteLine(\\\"Press any key to exit...\\\");  \\n      Console.ReadKey();  \\n    }  \\n  }  \\n}  \\n```\"\n  syntax:\n    content: public SpeechAudioFormatInfo (int samplesPerSecond, System.Speech.AudioFormat.AudioBitsPerSample bitsPerSample, System.Speech.AudioFormat.AudioChannel channel);\n    parameters:\n    - id: samplesPerSecond\n      type: System.Int32\n      description: The value for the samples per second.\n    - id: bitsPerSample\n      type: System.Speech.AudioFormat.AudioBitsPerSample\n      description: The value for the bits per sample.\n    - id: channel\n      type: System.Speech.AudioFormat.AudioChannel\n      description: A member of the <xref href=\"System.Speech.AudioFormat.AudioChannel\"></xref> enumeration (indicating `Mono` or `Stereo`).\n  overload: System.Speech.AudioFormat.SpeechAudioFormatInfo.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.#ctor(System.Speech.AudioFormat.EncodingFormat,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[])\n  id: '#ctor(System.Speech.AudioFormat.EncodingFormat,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[])'\n  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  langs:\n  - csharp\n  name: SpeechAudioFormatInfo(EncodingFormat,Int32,Int32,Int32,Int32,Int32,Byte[])\n  nameWithType: SpeechAudioFormatInfo.SpeechAudioFormatInfo(EncodingFormat,Int32,Int32,Int32,Int32,Int32,Byte[])\n  fullName: System.Speech.AudioFormat.SpeechAudioFormatInfo.SpeechAudioFormatInfo(EncodingFormat,Int32,Int32,Int32,Int32,Int32,Byte[])\n  type: Constructor\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.AudioFormat\n  summary: Initializes a new instance of the <xref href=\"System.Speech.AudioFormat.SpeechAudioFormatInfo\"></xref> class and specifies the encoding format, samples per second, bits per sample, number of channels, average bytes per second, block alignment value, and an array containing format-specific data.\n  syntax:\n    content: public SpeechAudioFormatInfo (System.Speech.AudioFormat.EncodingFormat encodingFormat, int samplesPerSecond, int bitsPerSample, int channelCount, int averageBytesPerSecond, int blockAlign, byte[] formatSpecificData);\n    parameters:\n    - id: encodingFormat\n      type: System.Speech.AudioFormat.EncodingFormat\n      description: The encoding format.\n    - id: samplesPerSecond\n      type: System.Int32\n      description: The value for the samples per second.\n    - id: bitsPerSample\n      type: System.Int32\n      description: The value for the bits per sample.\n    - id: channelCount\n      type: System.Int32\n      description: The value for the channel count.\n    - id: averageBytesPerSecond\n      type: System.Int32\n      description: The value for the average bytes per second.\n    - id: blockAlign\n      type: System.Int32\n      description: The value for the BlockAlign.\n    - id: formatSpecificData\n      type: System.Byte[]\n      description: A byte array containing the format-specific data.\n  overload: System.Speech.AudioFormat.SpeechAudioFormatInfo.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.AverageBytesPerSecond\n  id: AverageBytesPerSecond\n  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  langs:\n  - csharp\n  name: AverageBytesPerSecond\n  nameWithType: SpeechAudioFormatInfo.AverageBytesPerSecond\n  fullName: System.Speech.AudioFormat.SpeechAudioFormatInfo.AverageBytesPerSecond\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.AudioFormat\n  summary: Gets the average bytes per second of the audio.\n  syntax:\n    content: public int AverageBytesPerSecond { get; }\n    return:\n      type: System.Int32\n      description: The value for the average bytes per second.\n  overload: System.Speech.AudioFormat.SpeechAudioFormatInfo.AverageBytesPerSecond*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.BitsPerSample\n  id: BitsPerSample\n  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  langs:\n  - csharp\n  name: BitsPerSample\n  nameWithType: SpeechAudioFormatInfo.BitsPerSample\n  fullName: System.Speech.AudioFormat.SpeechAudioFormatInfo.BitsPerSample\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.AudioFormat\n  summary: Gets the bits per sample of the audio.\n  syntax:\n    content: public int BitsPerSample { get; }\n    return:\n      type: System.Int32\n      description: The value for the bits per sample.\n  overload: System.Speech.AudioFormat.SpeechAudioFormatInfo.BitsPerSample*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.BlockAlign\n  id: BlockAlign\n  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  langs:\n  - csharp\n  name: BlockAlign\n  nameWithType: SpeechAudioFormatInfo.BlockAlign\n  fullName: System.Speech.AudioFormat.SpeechAudioFormatInfo.BlockAlign\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.AudioFormat\n  summary: Gets and sets the block alignment in bytes.\n  remarks: \"Software for playback and recording of audio handles audio data in blocks. The sizes of these blocks are multiples of the value of the BlockAlign property. Block alignment value is the number of bytes in an atomic unit (that is, a block) of audio for a particular format. For Pulse Code Modulation (PCM) formats, the formula for calculating block alignment is as follows:  \\n  \\n-   Block Alignment = Bytes per Sample x Number of Channels  \\n  \\n For example, the block alignment value for 16-bit PCM format mono audio is 2 (2 bytes per sample x 1 channel). For 16-bit PCM format stereo audio, the block alignment value is 4.  \\n  \\n Data written and read from a device must always start at the beginning of a block. For example, it is illegal to start playback of PCM data in the middle of a sample (meaning on a boundary that is not block-aligned).\"\n  syntax:\n    content: public int BlockAlign { get; }\n    return:\n      type: System.Int32\n      description: The value for the block alignment.\n  overload: System.Speech.AudioFormat.SpeechAudioFormatInfo.BlockAlign*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.ChannelCount\n  id: ChannelCount\n  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  langs:\n  - csharp\n  name: ChannelCount\n  nameWithType: SpeechAudioFormatInfo.ChannelCount\n  fullName: System.Speech.AudioFormat.SpeechAudioFormatInfo.ChannelCount\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.AudioFormat\n  summary: Gets the channel count of the audio.\n  syntax:\n    content: public int ChannelCount { get; }\n    return:\n      type: System.Int32\n      description: The value for the channel count.\n  overload: System.Speech.AudioFormat.SpeechAudioFormatInfo.ChannelCount*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.EncodingFormat\n  id: EncodingFormat\n  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  langs:\n  - csharp\n  name: EncodingFormat\n  nameWithType: SpeechAudioFormatInfo.EncodingFormat\n  fullName: System.Speech.AudioFormat.SpeechAudioFormatInfo.EncodingFormat\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.AudioFormat\n  summary: Gets the encoding format of the audio.\n  syntax:\n    content: public System.Speech.AudioFormat.EncodingFormat EncodingFormat { get; }\n    return:\n      type: System.Speech.AudioFormat.EncodingFormat\n      description: The encoding format of the audio.\n  overload: System.Speech.AudioFormat.SpeechAudioFormatInfo.EncodingFormat*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: SpeechAudioFormatInfo.Equals(Object)\n  fullName: System.Speech.AudioFormat.SpeechAudioFormatInfo.Equals(Object)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.AudioFormat\n  summary: Returns whether a given object is an instance of <xref href=\"System.Speech.AudioFormat.SpeechAudioFormatInfo\"></xref> and equal to the current instance of <xref href=\"System.Speech.AudioFormat.SpeechAudioFormatInfo\"></xref>.\n  remarks: The method returns `false` if the <xref:System.Object> provided by the `obj` argument cannot be cast to <xref:System.Speech.AudioFormat.SpeechAudioFormatInfo>.\n  syntax:\n    content: public override bool Equals (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The object to be compared.\n    return:\n      type: System.Boolean\n      description: Returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current instance of <xref href=\"System.Speech.AudioFormat.SpeechAudioFormatInfo\"></xref> and that obtained from the <code>obj</code> argument are equal, otherwise returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Speech.AudioFormat.SpeechAudioFormatInfo.Equals*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.FormatSpecificData\n  id: FormatSpecificData\n  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  langs:\n  - csharp\n  name: FormatSpecificData()\n  nameWithType: SpeechAudioFormatInfo.FormatSpecificData()\n  fullName: System.Speech.AudioFormat.SpeechAudioFormatInfo.FormatSpecificData()\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.AudioFormat\n  summary: Returns the format-specific data of the audio format.\n  syntax:\n    content: public byte[] FormatSpecificData ();\n    parameters: []\n    return:\n      type: System.Byte[]\n      description: A byte array containing the format-specific data.\n  overload: System.Speech.AudioFormat.SpeechAudioFormatInfo.FormatSpecificData*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.GetHashCode\n  id: GetHashCode\n  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: SpeechAudioFormatInfo.GetHashCode()\n  fullName: System.Speech.AudioFormat.SpeechAudioFormatInfo.GetHashCode()\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.AudioFormat\n  summary: Returns the hash code of the audio format.\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: The value for the hash code.\n  overload: System.Speech.AudioFormat.SpeechAudioFormatInfo.GetHashCode*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.SamplesPerSecond\n  id: SamplesPerSecond\n  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  langs:\n  - csharp\n  name: SamplesPerSecond\n  nameWithType: SpeechAudioFormatInfo.SamplesPerSecond\n  fullName: System.Speech.AudioFormat.SpeechAudioFormatInfo.SamplesPerSecond\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.AudioFormat\n  summary: Gets the samples per second of the audio format.\n  syntax:\n    content: public int SamplesPerSecond { get; }\n    return:\n      type: System.Int32\n      description: The value for the samples per second.\n  overload: System.Speech.AudioFormat.SpeechAudioFormatInfo.SamplesPerSecond*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.#ctor(System.Int32,System.Speech.AudioFormat.AudioBitsPerSample,System.Speech.AudioFormat.AudioChannel)\n  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  isExternal: false\n  name: SpeechAudioFormatInfo(Int32,AudioBitsPerSample,AudioChannel)\n  nameWithType: SpeechAudioFormatInfo.SpeechAudioFormatInfo(Int32,AudioBitsPerSample,AudioChannel)\n  fullName: System.Speech.AudioFormat.SpeechAudioFormatInfo.SpeechAudioFormatInfo(Int32,AudioBitsPerSample,AudioChannel)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Speech.AudioFormat.AudioBitsPerSample\n  parent: System.Speech.AudioFormat\n  isExternal: false\n  name: AudioBitsPerSample\n  nameWithType: AudioBitsPerSample\n  fullName: System.Speech.AudioFormat.AudioBitsPerSample\n- uid: System.Speech.AudioFormat.AudioChannel\n  parent: System.Speech.AudioFormat\n  isExternal: false\n  name: AudioChannel\n  nameWithType: AudioChannel\n  fullName: System.Speech.AudioFormat.AudioChannel\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.#ctor(System.Speech.AudioFormat.EncodingFormat,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[])\n  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  isExternal: false\n  name: SpeechAudioFormatInfo(EncodingFormat,Int32,Int32,Int32,Int32,Int32,Byte[])\n  nameWithType: SpeechAudioFormatInfo.SpeechAudioFormatInfo(EncodingFormat,Int32,Int32,Int32,Int32,Int32,Byte[])\n  fullName: System.Speech.AudioFormat.SpeechAudioFormatInfo.SpeechAudioFormatInfo(EncodingFormat,Int32,Int32,Int32,Int32,Int32,Byte[])\n- uid: System.Speech.AudioFormat.EncodingFormat\n  parent: System.Speech.AudioFormat\n  isExternal: false\n  name: EncodingFormat\n  nameWithType: EncodingFormat\n  fullName: System.Speech.AudioFormat.EncodingFormat\n- uid: System.Byte[]\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: Byte[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.AverageBytesPerSecond\n  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  isExternal: false\n  name: AverageBytesPerSecond\n  nameWithType: SpeechAudioFormatInfo.AverageBytesPerSecond\n  fullName: System.Speech.AudioFormat.SpeechAudioFormatInfo.AverageBytesPerSecond\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.BitsPerSample\n  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  isExternal: false\n  name: BitsPerSample\n  nameWithType: SpeechAudioFormatInfo.BitsPerSample\n  fullName: System.Speech.AudioFormat.SpeechAudioFormatInfo.BitsPerSample\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.BlockAlign\n  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  isExternal: false\n  name: BlockAlign\n  nameWithType: SpeechAudioFormatInfo.BlockAlign\n  fullName: System.Speech.AudioFormat.SpeechAudioFormatInfo.BlockAlign\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.ChannelCount\n  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  isExternal: false\n  name: ChannelCount\n  nameWithType: SpeechAudioFormatInfo.ChannelCount\n  fullName: System.Speech.AudioFormat.SpeechAudioFormatInfo.ChannelCount\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.EncodingFormat\n  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  isExternal: false\n  name: EncodingFormat\n  nameWithType: SpeechAudioFormatInfo.EncodingFormat\n  fullName: System.Speech.AudioFormat.SpeechAudioFormatInfo.EncodingFormat\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.Equals(System.Object)\n  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: SpeechAudioFormatInfo.Equals(Object)\n  fullName: System.Speech.AudioFormat.SpeechAudioFormatInfo.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.FormatSpecificData\n  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  isExternal: false\n  name: FormatSpecificData()\n  nameWithType: SpeechAudioFormatInfo.FormatSpecificData()\n  fullName: System.Speech.AudioFormat.SpeechAudioFormatInfo.FormatSpecificData()\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.GetHashCode\n  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: SpeechAudioFormatInfo.GetHashCode()\n  fullName: System.Speech.AudioFormat.SpeechAudioFormatInfo.GetHashCode()\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.SamplesPerSecond\n  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  isExternal: false\n  name: SamplesPerSecond\n  nameWithType: SpeechAudioFormatInfo.SamplesPerSecond\n  fullName: System.Speech.AudioFormat.SpeechAudioFormatInfo.SamplesPerSecond\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.#ctor*\n  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  isExternal: false\n  name: SpeechAudioFormatInfo\n  nameWithType: SpeechAudioFormatInfo.SpeechAudioFormatInfo\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.AverageBytesPerSecond*\n  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  isExternal: false\n  name: AverageBytesPerSecond\n  nameWithType: SpeechAudioFormatInfo.AverageBytesPerSecond\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.BitsPerSample*\n  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  isExternal: false\n  name: BitsPerSample\n  nameWithType: SpeechAudioFormatInfo.BitsPerSample\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.BlockAlign*\n  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  isExternal: false\n  name: BlockAlign\n  nameWithType: SpeechAudioFormatInfo.BlockAlign\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.ChannelCount*\n  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  isExternal: false\n  name: ChannelCount\n  nameWithType: SpeechAudioFormatInfo.ChannelCount\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.EncodingFormat*\n  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  isExternal: false\n  name: EncodingFormat\n  nameWithType: SpeechAudioFormatInfo.EncodingFormat\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.Equals*\n  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  isExternal: false\n  name: Equals\n  nameWithType: SpeechAudioFormatInfo.Equals\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.FormatSpecificData*\n  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  isExternal: false\n  name: FormatSpecificData\n  nameWithType: SpeechAudioFormatInfo.FormatSpecificData\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.GetHashCode*\n  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  isExternal: false\n  name: GetHashCode\n  nameWithType: SpeechAudioFormatInfo.GetHashCode\n- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo.SamplesPerSecond*\n  parent: System.Speech.AudioFormat.SpeechAudioFormatInfo\n  isExternal: false\n  name: SamplesPerSecond\n  nameWithType: SpeechAudioFormatInfo.SamplesPerSecond\n"}