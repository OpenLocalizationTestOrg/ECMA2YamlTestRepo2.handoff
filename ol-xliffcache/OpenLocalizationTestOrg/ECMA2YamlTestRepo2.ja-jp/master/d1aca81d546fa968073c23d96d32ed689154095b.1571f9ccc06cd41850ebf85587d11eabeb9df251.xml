{"nodes":[{"pos":[1870,1972],"content":"Represents the base class from which all implementations of cryptographic hash algorithms must derive.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the base class from which all implementations of cryptographic hash algorithms must derive.","pos":[0,102]}]},{"pos":[1985,2636],"content":"Hash functions are fundamental to modern cryptography. These functions map binary strings of an arbitrary length to small binary strings of a fixed length, known as hash values. A cryptographic hash function has the property that it is computationally infeasible to find two distinct inputs that hash to the same value. Hash functions are commonly used with digital signatures and for data integrity.       The hash is used as a unique value of fixed size representing a large amount of data. Hashes of two sets of data should match if the corresponding data also matches. Small changes to the data result in large unpredictable changes in the hash.","needQuote":false,"needEscape":true,"nodes":[{"content":"Hash functions are fundamental to modern cryptography. These functions map binary strings of an arbitrary length to small binary strings of a fixed length, known as hash values. A cryptographic hash function has the property that it is computationally infeasible to find two distinct inputs that hash to the same value. Hash functions are commonly used with digital signatures and for data integrity.       The hash is used as a unique value of fixed size representing a large amount of data. Hashes of two sets of data should match if the corresponding data also matches. Small changes to the data result in large unpredictable changes in the hash.","pos":[0,649],"nodes":[{"content":"Hash functions are fundamental to modern cryptography.","pos":[0,54]},{"content":"These functions map binary strings of an arbitrary length to small binary strings of a fixed length, known as hash values.","pos":[55,177]},{"content":"A cryptographic hash function has the property that it is computationally infeasible to find two distinct inputs that hash to the same value.","pos":[178,319]},{"content":"Hash functions are commonly used with digital signatures and for data integrity.","pos":[320,400]},{"content":"The hash is used as a unique value of fixed size representing a large amount of data.","pos":[407,492]},{"content":"Hashes of two sets of data should match if the corresponding data also matches.","pos":[493,572]},{"content":"Small changes to the data result in large unpredictable changes in the hash.","pos":[573,649]}]}]},{"pos":[3977,4081],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.HashAlgorithm\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.HashAlgorithm\"></xref> class."},{"pos":[4093,4204],"content":"You cannot create an instance of an abstract class. Application code creates a new instance of a derived class.","needQuote":true,"needEscape":true,"nodes":[{"content":"You cannot create an instance of an abstract class. Application code creates a new instance of a derived class.","pos":[0,111],"nodes":[{"content":"You cannot create an instance of an abstract class.","pos":[0,51]},{"content":"Application code creates a new instance of a derived class.","pos":[52,111]}]}]},{"pos":[4786,4854],"content":"Gets a value indicating whether the current transform can be reused.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value indicating whether the current transform can be reused.","pos":[0,68]}]},{"pos":[4983,5051],"content":"Always <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Always <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>."},{"pos":[5620,5723],"content":"When overridden in a derived class, gets a value indicating whether multiple blocks can be transformed.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, gets a value indicating whether multiple blocks can be transformed.","pos":[0,103]}]},{"pos":[5861,6035],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if multiple blocks can be transformed; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if multiple blocks can be transformed; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[6512,6617],"content":"Releases all resources used by the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.HashAlgorithm\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Releases all resources used by the <xref href=\"System.Security.Cryptography.HashAlgorithm\"></xref> class."},{"pos":[6630,7004],"content":"This method is a simple call to the <xref:System.IDisposable.Dispose%2A?displayProperty=fullName> method.       Calling `Dispose` allows the resources used by the <xref:System.Security.Cryptography.HashAlgorithm> class to be reallocated for other purposes. For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"This method is a simple call to the &lt;xref:System.IDisposable.Dispose%2A?displayProperty=fullName&gt; method.","pos":[0,105],"source":"This method is a simple call to the <xref:System.IDisposable.Dispose%2A?displayProperty=fullName> method."},{"content":"Calling <ph id=\"ph1\">`Dispose`</ph> allows the resources used by the &lt;xref:System.Security.Cryptography.HashAlgorithm&gt; class to be reallocated for other purposes.","pos":[112,256],"source":"       Calling `Dispose` allows the resources used by the <xref:System.Security.Cryptography.HashAlgorithm> class to be reallocated for other purposes."},{"content":"For more information about <ph id=\"ph1\">`Dispose`</ph>, see <bpt id=\"p1\">[</bpt>Cleaning Up Unmanaged Resources<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[257,372],"source":" For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[7603,7656],"content":"Computes the hash value for the specified byte array.","needQuote":true,"needEscape":true,"nodes":[{"content":"Computes the hash value for the specified byte array.","pos":[0,53]}]},{"pos":[8384,8423],"content":"The input to compute the hash code for.","needQuote":true,"needEscape":true,"nodes":[{"content":"The input to compute the hash code for.","pos":[0,39]}]},{"pos":[8481,8504],"content":"The computed hash code.","needQuote":true,"needEscape":true,"nodes":[{"content":"The computed hash code.","pos":[0,23]}]},{"pos":[8689,8773],"content":"<ph id=\"ph1\">&lt;code&gt;buffer&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>buffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[8880,8917],"content":"The object has already been disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object has already been disposed.","pos":[0,37]}]},{"pos":[9378,9451],"content":"Computes the hash value for the specified <xref:System.IO.Stream> object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Computes the hash value for the specified &lt;xref:System.IO.Stream&gt; object.","pos":[0,73],"source":"Computes the hash value for the specified <xref:System.IO.Stream> object."}]},{"pos":[10033,10072],"content":"The input to compute the hash code for.","needQuote":true,"needEscape":true,"nodes":[{"content":"The input to compute the hash code for.","pos":[0,39]}]},{"pos":[10130,10153],"content":"The computed hash code.","needQuote":true,"needEscape":true,"nodes":[{"content":"The computed hash code.","pos":[0,23]}]},{"pos":[10342,10379],"content":"The object has already been disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object has already been disposed.","pos":[0,37]}]},{"pos":[10922,10999],"content":"Computes the hash value for the specified region of the specified byte array.","needQuote":true,"needEscape":true,"nodes":[{"content":"Computes the hash value for the specified region of the specified byte array.","pos":[0,77]}]},{"pos":[11167,11206],"content":"The input to compute the hash code for.","needQuote":true,"needEscape":true,"nodes":[{"content":"The input to compute the hash code for.","pos":[0,39]}]},{"pos":[11268,11330],"content":"The offset into the byte array from which to begin using data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The offset into the byte array from which to begin using data.","pos":[0,62]}]},{"pos":[11391,11439],"content":"The number of bytes in the array to use as data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes in the array to use as data.","pos":[0,48]}]},{"pos":[11497,11520],"content":"The computed hash code.","needQuote":true,"needEscape":true,"nodes":[{"content":"The computed hash code.","pos":[0,23]}]},{"pos":[11698,11797],"content":"<code>count</code> is an invalid value.       -or-       <code>buffer</code> length is invalid.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> is an invalid value.","pos":[0,39],"source":"<code>count</code> is an invalid value."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;buffer&lt;/code&gt;</ph> length is invalid.","pos":[46,95],"source":"       -or-       <code>buffer</code> length is invalid."}]},{"pos":[11901,11985],"content":"<ph id=\"ph1\">&lt;code&gt;buffer&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>buffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[12100,12183],"content":"<code>offset</code> is out of range. This parameter requires a non-negative number.","needQuote":true,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph> is out of range.","pos":[0,36],"source":"<code>offset</code> is out of range."},{"content":"This parameter requires a non-negative number.","pos":[37,83]}]},{"pos":[12290,12327],"content":"The object has already been disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object has already been disposed.","pos":[0,37]}]},{"pos":[12709,12779],"content":"Creates an instance of the default implementation of a hash algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates an instance of the default implementation of a hash algorithm.","pos":[0,70]}]},{"pos":[12791,13246],"content":"By default, this overload uses the <xref:System.Security.Cryptography.SHA1CryptoServiceProvider> implementation of a hash algorithm. If you want to specify a different implementation, use the <xref:System.Security.Cryptography.HashAlgorithm.Create%28System.String%29> overload, which lets you specify an algorithm name, instead. The cryptography configuration system defines the default implementation of <xref:System.Security.Cryptography.HashAlgorithm>.","needQuote":true,"needEscape":true,"nodes":[{"content":"By default, this overload uses the <xref:System.Security.Cryptography.SHA1CryptoServiceProvider> implementation of a hash algorithm. If you want to specify a different implementation, use the <xref:System.Security.Cryptography.HashAlgorithm.Create%28System.String%29> overload, which lets you specify an algorithm name, instead. The cryptography configuration system defines the default implementation of <xref:System.Security.Cryptography.HashAlgorithm>.","pos":[0,455],"nodes":[{"content":"By default, this overload uses the &lt;xref:System.Security.Cryptography.SHA1CryptoServiceProvider&gt; implementation of a hash algorithm.","pos":[0,132],"source":"By default, this overload uses the <xref:System.Security.Cryptography.SHA1CryptoServiceProvider> implementation of a hash algorithm."},{"content":"If you want to specify a different implementation, use the &lt;xref:System.Security.Cryptography.HashAlgorithm.Create%28System.String%29&gt; overload, which lets you specify an algorithm name, instead.","pos":[133,328],"source":" If you want to specify a different implementation, use the <xref:System.Security.Cryptography.HashAlgorithm.Create%28System.String%29> overload, which lets you specify an algorithm name, instead."},{"content":"The cryptography configuration system defines the default implementation of &lt;xref:System.Security.Cryptography.HashAlgorithm&gt;.","pos":[329,455],"source":" The cryptography configuration system defines the default implementation of <xref:System.Security.Cryptography.HashAlgorithm>."}]}]},{"pos":[13443,13592],"content":"A new <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.SHA1CryptoServiceProvider\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance, unless the default settings have been changed using the .","needQuote":true,"needEscape":true,"source":"A new <xref href=\"System.Security.Cryptography.SHA1CryptoServiceProvider\"></xref> instance, unless the default settings have been changed using the ."},{"pos":[14102,14174],"content":"Creates an instance of the specified implementation of a hash algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates an instance of the specified implementation of a hash algorithm.","pos":[0,72]}]},{"pos":[14362,16494],"content":"The hash algorithm implementation to use. The following table shows the valid values for the `hashName` parameter and the algorithms they map to.       <table><thead><tr><th> Parameter value       </th><th> Implements       </th></tr></thead><tbody><tr><td> SHA       </td><td><xref href=\"System.Security.Cryptography.SHA1CryptoServiceProvider\"></xref></td></tr><tr><td> SHA1       </td><td><xref href=\"System.Security.Cryptography.SHA1CryptoServiceProvider\"></xref></td></tr><tr><td> System.Security.Cryptography.SHA1       </td><td><xref href=\"System.Security.Cryptography.SHA1CryptoServiceProvider\"></xref></td></tr><tr><td> System.Security.Cryptography.HashAlgorithm       </td><td><xref href=\"System.Security.Cryptography.SHA1CryptoServiceProvider\"></xref></td></tr><tr><td> MD5       </td><td><xref href=\"System.Security.Cryptography.MD5CryptoServiceProvider\"></xref></td></tr><tr><td> System.Security.Cryptography.MD5       </td><td><xref href=\"System.Security.Cryptography.MD5CryptoServiceProvider\"></xref></td></tr><tr><td> SHA256       </td><td><xref href=\"System.Security.Cryptography.SHA256Managed\"></xref></td></tr><tr><td> SHA-256       </td><td><xref href=\"System.Security.Cryptography.SHA256Managed\"></xref></td></tr><tr><td> System.Security.Cryptography.SHA256       </td><td><xref href=\"System.Security.Cryptography.SHA256Managed\"></xref></td></tr><tr><td> SHA384       </td><td><xref href=\"System.Security.Cryptography.SHA384Managed\"></xref></td></tr><tr><td> SHA-384       </td><td><xref href=\"System.Security.Cryptography.SHA384Managed\"></xref></td></tr><tr><td> System.Security.Cryptography.SHA384       </td><td><xref href=\"System.Security.Cryptography.SHA384Managed\"></xref></td></tr><tr><td> SHA512       </td><td><xref href=\"System.Security.Cryptography.SHA512Managed\"></xref></td></tr><tr><td> SHA-512       </td><td><xref href=\"System.Security.Cryptography.SHA512Managed\"></xref></td></tr><tr><td> System.Security.Cryptography.SHA512       </td><td><xref href=\"System.Security.Cryptography.SHA512Managed\"></xref></td></tr></tbody></table>","needQuote":false,"needEscape":true,"nodes":[{"content":"The hash algorithm implementation to use. The following table shows the valid values for the `hashName` parameter and the algorithms they map to.       ","pos":[0,152],"nodes":[{"content":"The hash algorithm implementation to use.","pos":[0,41]},{"content":"The following table shows the valid values for the <ph id=\"ph1\">`hashName`</ph> parameter and the algorithms they map to.","pos":[42,145],"source":" The following table shows the valid values for the `hashName` parameter and the algorithms they map to."}]},{"content":"Parameter value","pos":[175,190]},{"content":"Implements","pos":[207,217]},{"content":"SHA","pos":[258,261]},{"content":"SHA1","pos":[371,375]},{"content":"System.Security.Cryptography.SHA1","pos":[485,518]},{"content":"System.Security.Cryptography.HashAlgorithm","pos":[628,670]},{"content":"MD5","pos":[780,783]},{"content":"System.Security.Cryptography.MD5","pos":[892,924]},{"content":"SHA256","pos":[1033,1039]},{"content":"SHA-256","pos":[1137,1144]},{"content":"System.Security.Cryptography.SHA256","pos":[1242,1277]},{"content":"SHA384","pos":[1375,1381]},{"content":"SHA-384","pos":[1479,1486]},{"content":"System.Security.Cryptography.SHA384","pos":[1584,1619]},{"content":"SHA512","pos":[1717,1723]},{"content":"SHA-512","pos":[1821,1828]},{"content":"System.Security.Cryptography.SHA512","pos":[1926,1961]}]},{"pos":[16582,16749],"content":"A new instance of the specified hash algorithm, or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">hashName</ph><ept id=\"p2\">&lt;/code&gt;</ept> is not a valid hash algorithm.","needQuote":true,"needEscape":true,"source":"A new instance of the specified hash algorithm, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if <code>hashName</code> is not a valid hash algorithm."},{"pos":[17216,17345],"content":"Releases all resources used by the current instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.HashAlgorithm\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Releases all resources used by the current instance of the <xref href=\"System.Security.Cryptography.HashAlgorithm\"></xref> class."},{"pos":[17358,18289],"content":"Call `Dispose` when you are finished using the <xref:System.Security.Cryptography.HashAlgorithm>. The `Dispose` method leaves the <xref:System.Security.Cryptography.HashAlgorithm> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.Security.Cryptography.HashAlgorithm> so the garbage collector can reclaim the memory that the <xref:System.Security.Cryptography.HashAlgorithm> was occupying.       For more information, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md) and [Implementing a Dispose Method](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] >  Always call `Dispose` before you release your last reference to the <xref:System.Security.Cryptography.HashAlgorithm>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Security.Cryptography.HashAlgorithm> object's `Finalize` method.","needQuote":false,"needEscape":true,"nodes":[{"content":"Call <ph id=\"ph1\">`Dispose`</ph> when you are finished using the &lt;xref:System.Security.Cryptography.HashAlgorithm&gt;.","pos":[0,97],"source":"Call `Dispose` when you are finished using the <xref:System.Security.Cryptography.HashAlgorithm>."},{"content":"The <ph id=\"ph1\">`Dispose`</ph> method leaves the &lt;xref:System.Security.Cryptography.HashAlgorithm&gt; in an unusable state.","pos":[98,201],"source":" The `Dispose` method leaves the <xref:System.Security.Cryptography.HashAlgorithm> in an unusable state."},{"content":"After calling <ph id=\"ph1\">`Dispose`</ph>, you must release all references to the &lt;xref:System.Security.Cryptography.HashAlgorithm&gt; so the garbage collector can reclaim the memory that the &lt;xref:System.Security.Cryptography.HashAlgorithm&gt; was occupying.","pos":[202,437],"source":" After calling `Dispose`, you must release all references to the <xref:System.Security.Cryptography.HashAlgorithm> so the garbage collector can reclaim the memory that the <xref:System.Security.Cryptography.HashAlgorithm> was occupying."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Cleaning Up Unmanaged Resources<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id=\"p2\">[</bpt>Implementing a Dispose Method<ept id=\"p2\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[444,618],"source":"       For more information, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md) and [Implementing a Dispose Method](~/add/includes/ajax-current-ext-md.md)."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Always call <ph id=\"ph2\">`Dispose`</ph> before you release your last reference to the &lt;xref:System.Security.Cryptography.HashAlgorithm&gt;.","pos":[624,755],"source":"      > [!NOTE] >  Always call `Dispose` before you release your last reference to the <xref:System.Security.Cryptography.HashAlgorithm>."},{"content":"Otherwise, the resources it is using will not be freed until the garbage collector calls the &lt;xref:System.Security.Cryptography.HashAlgorithm&gt; object's <ph id=\"ph1\">`Finalize`</ph> method.","pos":[756,926],"source":" Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Security.Cryptography.HashAlgorithm> object's `Finalize` method."}]},{"pos":[18877,19032],"content":"Releases the unmanaged resources used by the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.HashAlgorithm\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and optionally releases the managed resources.","needQuote":true,"needEscape":true,"source":"Releases the unmanaged resources used by the <xref href=\"System.Security.Cryptography.HashAlgorithm\"></xref> and optionally releases the managed resources."},{"pos":[19045,19549],"content":"This method is called by the public `Dispose()` method and the `Finalize` method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. `Finalize` invokes `Dispose` with `disposing` set to `false`.       When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.Cryptography.HashAlgorithm> references. This method invokes the `Dispose()` method of each referenced object.","needQuote":false,"needEscape":true,"nodes":[{"content":"This method is called by the public <ph id=\"ph1\">`Dispose()`</ph> method and the <ph id=\"ph2\">`Finalize`</ph> method.","pos":[0,81],"source":"This method is called by the public `Dispose()` method and the `Finalize` method."},{"content":"<ph id=\"ph1\">`Dispose()`</ph> invokes the protected <ph id=\"ph2\">`Dispose(Boolean)`</ph> method with the <ph id=\"ph3\">`disposing`</ph> parameter set to <ph id=\"ph4\">`true`</ph>.","pos":[82,187],"source":"`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`."},{"content":"<ph id=\"ph1\">`Finalize`</ph> invokes <ph id=\"ph2\">`Dispose`</ph> with <ph id=\"ph3\">`disposing`</ph> set to <ph id=\"ph4\">`false`</ph>.","pos":[188,249],"source":"`Finalize` invokes `Dispose` with `disposing` set to `false`."},{"content":"When the <ph id=\"ph1\">`disposing`</ph> parameter is <ph id=\"ph2\">`true`</ph>, this method releases all resources held by any managed objects that this &lt;xref:System.Security.Cryptography.HashAlgorithm&gt; references.","pos":[256,432],"source":"       When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.Cryptography.HashAlgorithm> references."},{"content":"This method invokes the <ph id=\"ph1\">`Dispose()`</ph> method of each referenced object.","pos":[433,502],"source":" This method invokes the `Dispose()` method of each referenced object."}]},{"pos":[19705,19914],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to release both managed and unmanaged resources; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> to release only unmanaged resources.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only unmanaged resources."},{"pos":[20363,20404],"content":"Gets the value of the computed hash code.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the value of the computed hash code.","pos":[0,41]}]},{"pos":[20416,20688],"content":"The Hash property is a byte array; the <xref:System.Security.Cryptography.HashAlgorithm.HashSize%2A> property is a value that represent bits. Therefore, the number of elements in Hash is one-eighth the size of <xref:System.Security.Cryptography.HashAlgorithm.HashSize%2A>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The Hash property is a byte array; the <xref:System.Security.Cryptography.HashAlgorithm.HashSize%2A> property is a value that represent bits. Therefore, the number of elements in Hash is one-eighth the size of <xref:System.Security.Cryptography.HashAlgorithm.HashSize%2A>.","pos":[0,272],"nodes":[{"content":"The Hash property is a byte array; the &lt;xref:System.Security.Cryptography.HashAlgorithm.HashSize%2A&gt; property is a value that represent bits.","pos":[0,141],"source":"The Hash property is a byte array; the <xref:System.Security.Cryptography.HashAlgorithm.HashSize%2A> property is a value that represent bits."},{"content":"Therefore, the number of elements in Hash is one-eighth the size of &lt;xref:System.Security.Cryptography.HashAlgorithm.HashSize%2A&gt;.","pos":[142,272],"source":" Therefore, the number of elements in Hash is one-eighth the size of <xref:System.Security.Cryptography.HashAlgorithm.HashSize%2A>."}]}]},{"pos":[20805,20849],"content":"The current value of the computed hash code.","needQuote":true,"needEscape":true,"nodes":[{"content":"The current value of the computed hash code.","pos":[0,44]}]},{"pos":[21111,21249],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.HashAlgorithm.HashValue\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Security.Cryptography.HashAlgorithm.HashValue\"></xref> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[21356,21393],"content":"The object has already been disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object has already been disposed.","pos":[0,37]}]},{"pos":[21921,22038],"content":"When overridden in a derived class, routes data written to the object into the hash algorithm for computing the hash.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, routes data written to the object into the hash algorithm for computing the hash.","pos":[0,117]}]},{"pos":[22051,22381],"content":"This method is not called by application code.       This abstract method performs the hash computation. Every write to the cryptographic stream object passes the data through this method. For each block of data, this method updates the state of the hash object so a correct hash value is returned at the end of the data stream.","needQuote":false,"needEscape":true,"nodes":[{"content":"This method is not called by application code.       This abstract method performs the hash computation. Every write to the cryptographic stream object passes the data through this method. For each block of data, this method updates the state of the hash object so a correct hash value is returned at the end of the data stream.","pos":[0,328],"nodes":[{"content":"This method is not called by application code.","pos":[0,46]},{"content":"This abstract method performs the hash computation.","pos":[53,104]},{"content":"Every write to the cryptographic stream object passes the data through this method.","pos":[105,188]},{"content":"For each block of data, this method updates the state of the hash object so a correct hash value is returned at the end of the data stream.","pos":[189,328]}]}]},{"pos":[22557,22596],"content":"The input to compute the hash code for.","needQuote":true,"needEscape":true,"nodes":[{"content":"The input to compute the hash code for.","pos":[0,39]}]},{"pos":[22659,22721],"content":"The offset into the byte array from which to begin using data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The offset into the byte array from which to begin using data.","pos":[0,62]}]},{"pos":[22783,22836],"content":"The number of bytes in the byte array to use as data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes in the byte array to use as data.","pos":[0,53]}]},{"pos":[23315,23450],"content":"When overridden in a derived class, finalizes the hash computation after the last data is processed by the cryptographic stream object.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, finalizes the hash computation after the last data is processed by the cryptographic stream object.","pos":[0,135]}]},{"pos":[23462,23563],"content":"This method finalizes any partial computation and returns the correct hash value for the data stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method finalizes any partial computation and returns the correct hash value for the data stream.","pos":[0,101]}]},{"pos":[23703,23726],"content":"The computed hash code.","needQuote":true,"needEscape":true,"nodes":[{"content":"The computed hash code.","pos":[0,23]}]},{"pos":[24197,24247],"content":"Gets the size, in bits, of the computed hash code.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the size, in bits, of the computed hash code.","pos":[0,50]}]},{"pos":[24364,24409],"content":"The size, in bits, of the computed hash code.","needQuote":true,"needEscape":true,"nodes":[{"content":"The size, in bits, of the computed hash code.","pos":[0,45]}]},{"pos":[24901,24957],"content":"Represents the size, in bits, of the computed hash code.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the size, in bits, of the computed hash code.","pos":[0,56]}]},{"pos":[24970,25224],"content":"The hash algorithm specifies the size of the hash code. For example, <xref:System.Security.Cryptography.SHA1> uses a hash size of 160 bits.       This field is accessed through the <xref:System.Security.Cryptography.HashAlgorithm.HashSize%2A> property.","needQuote":false,"needEscape":true,"nodes":[{"content":"The hash algorithm specifies the size of the hash code. For example, <xref:System.Security.Cryptography.SHA1> uses a hash size of 160 bits.       This field is accessed through the <xref:System.Security.Cryptography.HashAlgorithm.HashSize%2A> property.","pos":[0,252],"nodes":[{"content":"The hash algorithm specifies the size of the hash code.","pos":[0,55]},{"content":"For example, &lt;xref:System.Security.Cryptography.SHA1&gt; uses a hash size of 160 bits.","pos":[56,139],"source":" For example, <xref:System.Security.Cryptography.SHA1> uses a hash size of 160 bits."},{"content":"This field is accessed through the &lt;xref:System.Security.Cryptography.HashAlgorithm.HashSize%2A&gt; property.","pos":[146,252],"source":"       This field is accessed through the <xref:System.Security.Cryptography.HashAlgorithm.HashSize%2A> property."}]}]},{"pos":[25334,25346],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[25753,25800],"content":"Represents the value of the computed hash code.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the value of the computed hash code.","pos":[0,47]}]},{"pos":[25812,25914],"content":"This field is accessed through the <xref:System.Security.Cryptography.HashAlgorithm.Hash%2A> property.","needQuote":true,"needEscape":true,"nodes":[{"content":"This field is accessed through the &lt;xref:System.Security.Cryptography.HashAlgorithm.Hash%2A&gt; property.","pos":[0,102],"source":"This field is accessed through the <xref:System.Security.Cryptography.HashAlgorithm.Hash%2A> property."}]},{"pos":[26023,26035],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[26454,26561],"content":"Initializes an implementation of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.HashAlgorithm\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes an implementation of the <xref href=\"System.Security.Cryptography.HashAlgorithm\"></xref> class."},{"pos":[27141,27203],"content":"When overridden in a derived class, gets the input block size.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, gets the input block size.","pos":[0,62]}]},{"pos":[27215,27268],"content":"Unless overridden, this property returns the value 1.","needQuote":true,"needEscape":true,"nodes":[{"content":"Unless overridden, this property returns the value 1.","pos":[0,53]}]},{"pos":[27391,27412],"content":"The input block size.","needQuote":true,"needEscape":true,"nodes":[{"content":"The input block size.","pos":[0,21]}]},{"pos":[27923,27986],"content":"When overridden in a derived class, gets the output block size.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, gets the output block size.","pos":[0,63]}]},{"pos":[27998,28051],"content":"Unless overridden, this property returns the value 1.","needQuote":true,"needEscape":true,"nodes":[{"content":"Unless overridden, this property returns the value 1.","pos":[0,53]}]},{"pos":[28175,28197],"content":"The output block size.","needQuote":true,"needEscape":true,"nodes":[{"content":"The output block size.","pos":[0,22]}]},{"pos":[28656,28701],"content":"Represents the state of the hash computation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the state of the hash computation.","pos":[0,45]}]},{"pos":[28713,28999],"content":"This field is used to prevent users from changing the key of a keyed hash algorithm during a hash operation. When a key change is legitimate, the value of this field is zero both before and after a hash operation. When a key change is not legitimate, the value of this field is nonzero.","needQuote":true,"needEscape":true,"nodes":[{"content":"This field is used to prevent users from changing the key of a keyed hash algorithm during a hash operation. When a key change is legitimate, the value of this field is zero both before and after a hash operation. When a key change is not legitimate, the value of this field is nonzero.","pos":[0,286],"nodes":[{"content":"This field is used to prevent users from changing the key of a keyed hash algorithm during a hash operation.","pos":[0,108]},{"content":"When a key change is legitimate, the value of this field is zero both before and after a hash operation.","pos":[109,213]},{"content":"When a key change is not legitimate, the value of this field is nonzero.","pos":[214,286]}]}]},{"pos":[29100,29112],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[29780,29958],"content":"Computes the hash value for the specified region of the input byte array and copies the specified region of the input byte array to the specified region of the output byte array.","needQuote":true,"needEscape":true,"nodes":[{"content":"Computes the hash value for the specified region of the input byte array and copies the specified region of the input byte array to the specified region of the output byte array.","pos":[0,178]}]},{"pos":[29971,30552],"content":"You must call the TransformBlock method before calling the <xref:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock%2A> method. You must call both methods before you retrieve the final hash value.       To retrieve the final hash value after calling the <xref:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock%2A> method, get the byte array contained within the <xref:System.Security.Cryptography.HashAlgorithm.Hash%2A> property.       Calling the TransformBlock method with different input and output arrays results in an <xref:System.IO.IOException>.","needQuote":false,"needEscape":true,"nodes":[{"content":"You must call the TransformBlock method before calling the <xref:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock%2A> method. You must call both methods before you retrieve the final hash value.       To retrieve the final hash value after calling the <xref:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock%2A> method, get the byte array contained within the <xref:System.Security.Cryptography.HashAlgorithm.Hash%2A> property.       Calling the TransformBlock method with different input and output arrays results in an <xref:System.IO.IOException>.","pos":[0,577],"nodes":[{"content":"You must call the TransformBlock method before calling the &lt;xref:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock%2A&gt; method.","pos":[0,139],"source":"You must call the TransformBlock method before calling the <xref:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock%2A> method."},{"content":"You must call both methods before you retrieve the final hash value.","pos":[140,208]},{"content":"To retrieve the final hash value after calling the &lt;xref:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock%2A&gt; method, get the byte array contained within the &lt;xref:System.Security.Cryptography.HashAlgorithm.Hash%2A&gt; property.","pos":[215,454],"source":"       To retrieve the final hash value after calling the <xref:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock%2A> method, get the byte array contained within the <xref:System.Security.Cryptography.HashAlgorithm.Hash%2A> property."},{"content":"Calling the TransformBlock method with different input and output arrays results in an &lt;xref:System.IO.IOException&gt;.","pos":[461,577],"source":"       Calling the TransformBlock method with different input and output arrays results in an <xref:System.IO.IOException>."}]}]},{"pos":[31211,31250],"content":"The input to compute the hash code for.","needQuote":true,"needEscape":true,"nodes":[{"content":"The input to compute the hash code for.","pos":[0,39]}]},{"pos":[31317,31385],"content":"The offset into the input byte array from which to begin using data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The offset into the input byte array from which to begin using data.","pos":[0,68]}]},{"pos":[31451,31510],"content":"The number of bytes in the input byte array to use as data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes in the input byte array to use as data.","pos":[0,59]}]},{"pos":[31579,31647],"content":"A copy of the part of the input array used to compute the hash code.","needQuote":true,"needEscape":true,"nodes":[{"content":"A copy of the part of the input array used to compute the hash code.","pos":[0,68]}]},{"pos":[31715,31786],"content":"The offset into the output byte array from which to begin writing data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The offset into the output byte array from which to begin writing data.","pos":[0,71]}]},{"pos":[31843,31871],"content":"The number of bytes written.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes written.","pos":[0,28]}]},{"pos":[32052,32167],"content":"<code>inputCount</code> uses an invalid value.       -or-       <code>inputBuffer</code> has an invalid length.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;inputCount&lt;/code&gt;</ph> uses an invalid value.","pos":[0,46],"source":"<code>inputCount</code> uses an invalid value."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;inputBuffer&lt;/code&gt;</ph> has an invalid length.","pos":[53,111],"source":"       -or-       <code>inputBuffer</code> has an invalid length."}]},{"pos":[32271,32360],"content":"<ph id=\"ph1\">&lt;code&gt;inputBuffer&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>inputBuffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[32475,32563],"content":"<code>inputOffset</code> is out of range. This parameter requires a non-negative number.","needQuote":true,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;inputOffset&lt;/code&gt;</ph> is out of range.","pos":[0,41],"source":"<code>inputOffset</code> is out of range."},{"content":"This parameter requires a non-negative number.","pos":[42,88]}]},{"pos":[32670,32707],"content":"The object has already been disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object has already been disposed.","pos":[0,37]}]},{"pos":[33290,33367],"content":"Computes the hash value for the specified region of the specified byte array.","needQuote":true,"needEscape":true,"nodes":[{"content":"Computes the hash value for the specified region of the specified byte array.","pos":[0,77]}]},{"pos":[33380,33876],"content":"You must call the TransformFinalBlock method after calling the <xref:System.Security.Cryptography.HashAlgorithm.TransformBlock%2A> method but before you retrieve the final hash value.       Note that the return value of this method is not the hash value, but only a copy of the hashed part of the input data.  To retrieve the final hashed value after calling the TransformFinalBlock method, get the byte array contained in the <xref:System.Security.Cryptography.HashAlgorithm.Hash%2A> property.","needQuote":false,"needEscape":true,"nodes":[{"content":"You must call the TransformFinalBlock method after calling the <xref:System.Security.Cryptography.HashAlgorithm.TransformBlock%2A> method but before you retrieve the final hash value.       Note that the return value of this method is not the hash value, but only a copy of the hashed part of the input data.  To retrieve the final hashed value after calling the TransformFinalBlock method, get the byte array contained in the <xref:System.Security.Cryptography.HashAlgorithm.Hash%2A> property.","pos":[0,494],"nodes":[{"content":"You must call the TransformFinalBlock method after calling the &lt;xref:System.Security.Cryptography.HashAlgorithm.TransformBlock%2A&gt; method but before you retrieve the final hash value.","pos":[0,183],"source":"You must call the TransformFinalBlock method after calling the <xref:System.Security.Cryptography.HashAlgorithm.TransformBlock%2A> method but before you retrieve the final hash value."},{"content":"Note that the return value of this method is not the hash value, but only a copy of the hashed part of the input data.","pos":[190,308]},{"content":"To retrieve the final hashed value after calling the TransformFinalBlock method, get the byte array contained in the &lt;xref:System.Security.Cryptography.HashAlgorithm.Hash%2A&gt; property.","pos":[310,494],"source":"  To retrieve the final hashed value after calling the TransformFinalBlock method, get the byte array contained in the <xref:System.Security.Cryptography.HashAlgorithm.Hash%2A> property."}]}]},{"pos":[34504,34543],"content":"The input to compute the hash code for.","needQuote":true,"needEscape":true,"nodes":[{"content":"The input to compute the hash code for.","pos":[0,39]}]},{"pos":[34610,34672],"content":"The offset into the byte array from which to begin using data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The offset into the byte array from which to begin using data.","pos":[0,62]}]},{"pos":[34738,34791],"content":"The number of bytes in the byte array to use as data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes in the byte array to use as data.","pos":[0,53]}]},{"pos":[34849,34913],"content":"An array that is a copy of the part of the input that is hashed.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array that is a copy of the part of the input that is hashed.","pos":[0,64]}]},{"pos":[35099,35221],"content":"<code>inputCount</code> uses an invalid value.       -or-       <code>inputBuffer</code> has an invalid offset length.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;inputCount&lt;/code&gt;</ph> uses an invalid value.","pos":[0,46],"source":"<code>inputCount</code> uses an invalid value."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;inputBuffer&lt;/code&gt;</ph> has an invalid offset length.","pos":[53,118],"source":"       -or-       <code>inputBuffer</code> has an invalid offset length."}]},{"pos":[35325,35414],"content":"<ph id=\"ph1\">&lt;code&gt;inputBuffer&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>inputBuffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[35529,35617],"content":"<code>inputOffset</code> is out of range. This parameter requires a non-negative number.","needQuote":true,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;inputOffset&lt;/code&gt;</ph> is out of range.","pos":[0,41],"source":"<code>inputOffset</code> is out of range."},{"content":"This parameter requires a non-negative number.","pos":[42,88]}]},{"pos":[35724,35761],"content":"The object has already been disposed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object has already been disposed.","pos":[0,37]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.HashAlgorithm\n  id: HashAlgorithm\n  children:\n  - System.Security.Cryptography.HashAlgorithm.#ctor\n  - System.Security.Cryptography.HashAlgorithm.CanReuseTransform\n  - System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks\n  - System.Security.Cryptography.HashAlgorithm.Clear\n  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])\n  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)\n  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)\n  - System.Security.Cryptography.HashAlgorithm.Create\n  - System.Security.Cryptography.HashAlgorithm.Create(System.String)\n  - System.Security.Cryptography.HashAlgorithm.Dispose\n  - System.Security.Cryptography.HashAlgorithm.Dispose(System.Boolean)\n  - System.Security.Cryptography.HashAlgorithm.Hash\n  - System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[],System.Int32,System.Int32)\n  - System.Security.Cryptography.HashAlgorithm.HashFinal\n  - System.Security.Cryptography.HashAlgorithm.HashSize\n  - System.Security.Cryptography.HashAlgorithm.HashSizeValue\n  - System.Security.Cryptography.HashAlgorithm.HashValue\n  - System.Security.Cryptography.HashAlgorithm.Initialize\n  - System.Security.Cryptography.HashAlgorithm.InputBlockSize\n  - System.Security.Cryptography.HashAlgorithm.OutputBlockSize\n  - System.Security.Cryptography.HashAlgorithm.State\n  - System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  - System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  langs:\n  - csharp\n  name: HashAlgorithm\n  nameWithType: HashAlgorithm\n  fullName: System.Security.Cryptography.HashAlgorithm\n  type: Class\n  summary: Represents the base class from which all implementations of cryptographic hash algorithms must derive.\n  remarks: \"Hash functions are fundamental to modern cryptography. These functions map binary strings of an arbitrary length to small binary strings of a fixed length, known as hash values. A cryptographic hash function has the property that it is computationally infeasible to find two distinct inputs that hash to the same value. Hash functions are commonly used with digital signatures and for data integrity.  \\n  \\n The hash is used as a unique value of fixed size representing a large amount of data. Hashes of two sets of data should match if the corresponding data also matches. Small changes to the data result in large unpredictable changes in the hash.\"\n  example:\n  - \"The following code example computes the <xref:System.Security.Cryptography.SHA1CryptoServiceProvider> hash for an array. This example assumes that there is a predefined byte array `dataArray[]`. <xref:System.Security.Cryptography.SHA1CryptoServiceProvider> is a derived class of HashAlgorithm.  \\n  \\n [!code-cs[Classic HashAlgorithm Example#1](~/add/codesnippet/csharp/t-system.security.crypto_106_1.cs)]\\n [!code-cpp[Classic HashAlgorithm Example#1](~/add/codesnippet/cpp/t-system.security.crypto_106_1.cpp)]\\n [!code-vb[Classic HashAlgorithm Example#1](~/add/codesnippet/visualbasic/t-system.security.crypto_106_1.vb)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public abstract class HashAlgorithm : System.Security.Cryptography.ICryptoTransform\n  inheritance:\n  - System.Object\n  implements:\n  - System.Security.Cryptography.ICryptoTransform\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.HashAlgorithm.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.HashAlgorithm\n  langs:\n  - csharp\n  name: HashAlgorithm()\n  nameWithType: HashAlgorithm.HashAlgorithm()\n  fullName: System.Security.Cryptography.HashAlgorithm.HashAlgorithm()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.HashAlgorithm\"></xref> class.\n  remarks: You cannot create an instance of an abstract class. Application code creates a new instance of a derived class.\n  syntax:\n    content: protected HashAlgorithm ();\n    parameters: []\n  overload: System.Security.Cryptography.HashAlgorithm.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.HashAlgorithm.CanReuseTransform\n  id: CanReuseTransform\n  parent: System.Security.Cryptography.HashAlgorithm\n  langs:\n  - csharp\n  name: CanReuseTransform\n  nameWithType: HashAlgorithm.CanReuseTransform\n  fullName: System.Security.Cryptography.HashAlgorithm.CanReuseTransform\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Gets a value indicating whether the current transform can be reused.\n  syntax:\n    content: public virtual bool CanReuseTransform { get; }\n    return:\n      type: System.Boolean\n      description: Always <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.\n  overload: System.Security.Cryptography.HashAlgorithm.CanReuseTransform*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks\n  id: CanTransformMultipleBlocks\n  parent: System.Security.Cryptography.HashAlgorithm\n  langs:\n  - csharp\n  name: CanTransformMultipleBlocks\n  nameWithType: HashAlgorithm.CanTransformMultipleBlocks\n  fullName: System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: When overridden in a derived class, gets a value indicating whether multiple blocks can be transformed.\n  syntax:\n    content: public virtual bool CanTransformMultipleBlocks { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if multiple blocks can be transformed; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.HashAlgorithm.Clear\n  id: Clear\n  parent: System.Security.Cryptography.HashAlgorithm\n  langs:\n  - csharp\n  name: Clear()\n  nameWithType: HashAlgorithm.Clear()\n  fullName: System.Security.Cryptography.HashAlgorithm.Clear()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Releases all resources used by the <xref href=\"System.Security.Cryptography.HashAlgorithm\"></xref> class.\n  remarks: \"This method is a simple call to the <xref:System.IDisposable.Dispose%2A?displayProperty=fullName> method.  \\n  \\n Calling `Dispose` allows the resources used by the <xref:System.Security.Cryptography.HashAlgorithm> class to be reallocated for other purposes. For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public void Clear ();\n    parameters: []\n  overload: System.Security.Cryptography.HashAlgorithm.Clear*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])\n  id: ComputeHash(System.Byte[])\n  parent: System.Security.Cryptography.HashAlgorithm\n  langs:\n  - csharp\n  name: ComputeHash(Byte[])\n  nameWithType: HashAlgorithm.ComputeHash(Byte[])\n  fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash(Byte[])\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Computes the hash value for the specified byte array.\n  remarks: ''\n  example:\n  - \"The following example computes the <xref:System.Security.Cryptography.MD5> hash value of a string and returns the hash as a 32-character, hexadecimal-formatted string.  The hash string created by this code example is compatible with any MD5 hash function (on any platform) that creates a 32-character, hexadecimal-formatted hash string.  \\n  \\n [!code-vb[Security.Cryptography.MD5#1](~/add/codesnippet/visualbasic/m-system.security.crypto_123_1.vb)]\\n [!code-cs[Security.Cryptography.MD5#1](~/add/codesnippet/csharp/m-system.security.crypto_123_1.cs)]\"\n  syntax:\n    content: public byte[] ComputeHash (byte[] buffer);\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: The input to compute the hash code for.\n    return:\n      type: System.Byte[]\n      description: The computed hash code.\n  overload: System.Security.Cryptography.HashAlgorithm.ComputeHash*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>buffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The object has already been disposed.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)\n  id: ComputeHash(System.IO.Stream)\n  parent: System.Security.Cryptography.HashAlgorithm\n  langs:\n  - csharp\n  name: ComputeHash(Stream)\n  nameWithType: HashAlgorithm.ComputeHash(Stream)\n  fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash(Stream)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Computes the hash value for the specified <xref:System.IO.Stream> object.\n  remarks: ''\n  example:\n  - \"The following example calculates the <xref:System.Security.Cryptography.RIPEMD160> hash for all files in a directory.  \\n  \\n [!code-cpp[RIPEMD160#1](~/add/codesnippet/cpp/m-system.security.crypto_23_1.cpp)]\\n [!code-vb[RIPEMD160#1](~/add/codesnippet/visualbasic/m-system.security.crypto_23_1.vb)]\\n [!code-cs[RIPEMD160#1](~/add/codesnippet/csharp/m-system.security.crypto_23_1.cs)]\"\n  syntax:\n    content: public byte[] ComputeHash (System.IO.Stream inputStream);\n    parameters:\n    - id: inputStream\n      type: System.IO.Stream\n      description: The input to compute the hash code for.\n    return:\n      type: System.Byte[]\n      description: The computed hash code.\n  overload: System.Security.Cryptography.HashAlgorithm.ComputeHash*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The object has already been disposed.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)\n  id: ComputeHash(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.HashAlgorithm\n  langs:\n  - csharp\n  name: ComputeHash(Byte[],Int32,Int32)\n  nameWithType: HashAlgorithm.ComputeHash(Byte[],Int32,Int32)\n  fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash(Byte[],Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Computes the hash value for the specified region of the specified byte array.\n  syntax:\n    content: public byte[] ComputeHash (byte[] buffer, int offset, int count);\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: The input to compute the hash code for.\n    - id: offset\n      type: System.Int32\n      description: The offset into the byte array from which to begin using data.\n    - id: count\n      type: System.Int32\n      description: The number of bytes in the array to use as data.\n    return:\n      type: System.Byte[]\n      description: The computed hash code.\n  overload: System.Security.Cryptography.HashAlgorithm.ComputeHash*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>count</code> is an invalid value.  \\n  \\n -or-  \\n  \\n <code>buffer</code> length is invalid.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>buffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>offset</code> is out of range. This parameter requires a non-negative number.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The object has already been disposed.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.HashAlgorithm.Create\n  id: Create\n  parent: System.Security.Cryptography.HashAlgorithm\n  langs:\n  - csharp\n  name: Create()\n  nameWithType: HashAlgorithm.Create()\n  fullName: System.Security.Cryptography.HashAlgorithm.Create()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Creates an instance of the default implementation of a hash algorithm.\n  remarks: By default, this overload uses the <xref:System.Security.Cryptography.SHA1CryptoServiceProvider> implementation of a hash algorithm. If you want to specify a different implementation, use the <xref:System.Security.Cryptography.HashAlgorithm.Create%28System.String%29> overload, which lets you specify an algorithm name, instead. The cryptography configuration system defines the default implementation of <xref:System.Security.Cryptography.HashAlgorithm>.\n  syntax:\n    content: public static System.Security.Cryptography.HashAlgorithm Create ();\n    parameters: []\n    return:\n      type: System.Security.Cryptography.HashAlgorithm\n      description: A new <xref href=\"System.Security.Cryptography.SHA1CryptoServiceProvider\"></xref> instance, unless the default settings have been changed using the .\n  overload: System.Security.Cryptography.HashAlgorithm.Create*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.HashAlgorithm.Create(System.String)\n  id: Create(System.String)\n  parent: System.Security.Cryptography.HashAlgorithm\n  langs:\n  - csharp\n  name: Create(String)\n  nameWithType: HashAlgorithm.Create(String)\n  fullName: System.Security.Cryptography.HashAlgorithm.Create(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Creates an instance of the specified implementation of a hash algorithm.\n  syntax:\n    content: public static System.Security.Cryptography.HashAlgorithm Create (string hashName);\n    parameters:\n    - id: hashName\n      type: System.String\n      description: \"The hash algorithm implementation to use. The following table shows the valid values for the `hashName` parameter and the algorithms they map to.  \\n  \\n <table><thead><tr><th> Parameter value  \\n  \\n </th><th> Implements  \\n  \\n </th></tr></thead><tbody><tr><td> SHA  \\n  \\n </td><td><xref href=\\\"System.Security.Cryptography.SHA1CryptoServiceProvider\\\"></xref></td></tr><tr><td> SHA1  \\n  \\n </td><td><xref href=\\\"System.Security.Cryptography.SHA1CryptoServiceProvider\\\"></xref></td></tr><tr><td> System.Security.Cryptography.SHA1  \\n  \\n </td><td><xref href=\\\"System.Security.Cryptography.SHA1CryptoServiceProvider\\\"></xref></td></tr><tr><td> System.Security.Cryptography.HashAlgorithm  \\n  \\n </td><td><xref href=\\\"System.Security.Cryptography.SHA1CryptoServiceProvider\\\"></xref></td></tr><tr><td> MD5  \\n  \\n </td><td><xref href=\\\"System.Security.Cryptography.MD5CryptoServiceProvider\\\"></xref></td></tr><tr><td> System.Security.Cryptography.MD5  \\n  \\n </td><td><xref href=\\\"System.Security.Cryptography.MD5CryptoServiceProvider\\\"></xref></td></tr><tr><td> SHA256  \\n  \\n </td><td><xref href=\\\"System.Security.Cryptography.SHA256Managed\\\"></xref></td></tr><tr><td> SHA-256  \\n  \\n </td><td><xref href=\\\"System.Security.Cryptography.SHA256Managed\\\"></xref></td></tr><tr><td> System.Security.Cryptography.SHA256  \\n  \\n </td><td><xref href=\\\"System.Security.Cryptography.SHA256Managed\\\"></xref></td></tr><tr><td> SHA384  \\n  \\n </td><td><xref href=\\\"System.Security.Cryptography.SHA384Managed\\\"></xref></td></tr><tr><td> SHA-384  \\n  \\n </td><td><xref href=\\\"System.Security.Cryptography.SHA384Managed\\\"></xref></td></tr><tr><td> System.Security.Cryptography.SHA384  \\n  \\n </td><td><xref href=\\\"System.Security.Cryptography.SHA384Managed\\\"></xref></td></tr><tr><td> SHA512  \\n  \\n </td><td><xref href=\\\"System.Security.Cryptography.SHA512Managed\\\"></xref></td></tr><tr><td> SHA-512  \\n  \\n </td><td><xref href=\\\"System.Security.Cryptography.SHA512Managed\\\"></xref></td></tr><tr><td> System.Security.Cryptography.SHA512  \\n  \\n </td><td><xref href=\\\"System.Security.Cryptography.SHA512Managed\\\"></xref></td></tr></tbody></table>\"\n    return:\n      type: System.Security.Cryptography.HashAlgorithm\n      description: A new instance of the specified hash algorithm, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if <code>hashName</code> is not a valid hash algorithm.\n  overload: System.Security.Cryptography.HashAlgorithm.Create*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.HashAlgorithm.Dispose\n  id: Dispose\n  parent: System.Security.Cryptography.HashAlgorithm\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: HashAlgorithm.Dispose()\n  fullName: System.Security.Cryptography.HashAlgorithm.Dispose()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Releases all resources used by the current instance of the <xref href=\"System.Security.Cryptography.HashAlgorithm\"></xref> class.\n  remarks: \"Call `Dispose` when you are finished using the <xref:System.Security.Cryptography.HashAlgorithm>. The `Dispose` method leaves the <xref:System.Security.Cryptography.HashAlgorithm> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.Security.Cryptography.HashAlgorithm> so the garbage collector can reclaim the memory that the <xref:System.Security.Cryptography.HashAlgorithm> was occupying.  \\n  \\n For more information, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md) and [Implementing a Dispose Method](~/add/includes/ajax-current-ext-md.md).  \\n  \\n> [!NOTE]\\n>  Always call `Dispose` before you release your last reference to the <xref:System.Security.Cryptography.HashAlgorithm>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Security.Cryptography.HashAlgorithm> object's `Finalize` method.\"\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.Security.Cryptography.HashAlgorithm.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.HashAlgorithm.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Security.Cryptography.HashAlgorithm\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: HashAlgorithm.Dispose(Boolean)\n  fullName: System.Security.Cryptography.HashAlgorithm.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Releases the unmanaged resources used by the <xref href=\"System.Security.Cryptography.HashAlgorithm\"></xref> and optionally releases the managed resources.\n  remarks: \"This method is called by the public `Dispose()` method and the `Finalize` method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. `Finalize` invokes `Dispose` with `disposing` set to `false`.  \\n  \\n When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.Cryptography.HashAlgorithm> references. This method invokes the `Dispose()` method of each referenced object.\"\n  syntax:\n    content: protected virtual void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only unmanaged resources.\n  overload: System.Security.Cryptography.HashAlgorithm.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.HashAlgorithm.Hash\n  id: Hash\n  parent: System.Security.Cryptography.HashAlgorithm\n  langs:\n  - csharp\n  name: Hash\n  nameWithType: HashAlgorithm.Hash\n  fullName: System.Security.Cryptography.HashAlgorithm.Hash\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Gets the value of the computed hash code.\n  remarks: The Hash property is a byte array; the <xref:System.Security.Cryptography.HashAlgorithm.HashSize%2A> property is a value that represent bits. Therefore, the number of elements in Hash is one-eighth the size of <xref:System.Security.Cryptography.HashAlgorithm.HashSize%2A>.\n  syntax:\n    content: public virtual byte[] Hash { get; }\n    return:\n      type: System.Byte[]\n      description: The current value of the computed hash code.\n  overload: System.Security.Cryptography.HashAlgorithm.Hash*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicUnexpectedOperationException\n    commentId: T:System.Security.Cryptography.CryptographicUnexpectedOperationException\n    description: <xref href=\"System.Security.Cryptography.HashAlgorithm.HashValue\"></xref> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The object has already been disposed.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[],System.Int32,System.Int32)\n  id: HashCore(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.HashAlgorithm\n  langs:\n  - csharp\n  name: HashCore(Byte[],Int32,Int32)\n  nameWithType: HashAlgorithm.HashCore(Byte[],Int32,Int32)\n  fullName: System.Security.Cryptography.HashAlgorithm.HashCore(Byte[],Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: When overridden in a derived class, routes data written to the object into the hash algorithm for computing the hash.\n  remarks: \"This method is not called by application code.  \\n  \\n This abstract method performs the hash computation. Every write to the cryptographic stream object passes the data through this method. For each block of data, this method updates the state of the hash object so a correct hash value is returned at the end of the data stream.\"\n  syntax:\n    content: protected abstract void HashCore (byte[] array, int ibStart, int cbSize);\n    parameters:\n    - id: array\n      type: System.Byte[]\n      description: The input to compute the hash code for.\n    - id: ibStart\n      type: System.Int32\n      description: The offset into the byte array from which to begin using data.\n    - id: cbSize\n      type: System.Int32\n      description: The number of bytes in the byte array to use as data.\n  overload: System.Security.Cryptography.HashAlgorithm.HashCore*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.HashAlgorithm.HashFinal\n  id: HashFinal\n  parent: System.Security.Cryptography.HashAlgorithm\n  langs:\n  - csharp\n  name: HashFinal()\n  nameWithType: HashAlgorithm.HashFinal()\n  fullName: System.Security.Cryptography.HashAlgorithm.HashFinal()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: When overridden in a derived class, finalizes the hash computation after the last data is processed by the cryptographic stream object.\n  remarks: This method finalizes any partial computation and returns the correct hash value for the data stream.\n  syntax:\n    content: protected abstract byte[] HashFinal ();\n    parameters: []\n    return:\n      type: System.Byte[]\n      description: The computed hash code.\n  overload: System.Security.Cryptography.HashAlgorithm.HashFinal*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.HashAlgorithm.HashSize\n  id: HashSize\n  parent: System.Security.Cryptography.HashAlgorithm\n  langs:\n  - csharp\n  name: HashSize\n  nameWithType: HashAlgorithm.HashSize\n  fullName: System.Security.Cryptography.HashAlgorithm.HashSize\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Gets the size, in bits, of the computed hash code.\n  syntax:\n    content: public virtual int HashSize { get; }\n    return:\n      type: System.Int32\n      description: The size, in bits, of the computed hash code.\n  overload: System.Security.Cryptography.HashAlgorithm.HashSize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.HashAlgorithm.HashSizeValue\n  id: HashSizeValue\n  parent: System.Security.Cryptography.HashAlgorithm\n  langs:\n  - csharp\n  name: HashSizeValue\n  nameWithType: HashAlgorithm.HashSizeValue\n  fullName: System.Security.Cryptography.HashAlgorithm.HashSizeValue\n  type: Field\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Represents the size, in bits, of the computed hash code.\n  remarks: \"The hash algorithm specifies the size of the hash code. For example, <xref:System.Security.Cryptography.SHA1> uses a hash size of 160 bits.  \\n  \\n This field is accessed through the <xref:System.Security.Cryptography.HashAlgorithm.HashSize%2A> property.\"\n  syntax:\n    content: protected int HashSizeValue;\n    return:\n      type: System.Int32\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.HashAlgorithm.HashValue\n  id: HashValue\n  parent: System.Security.Cryptography.HashAlgorithm\n  langs:\n  - csharp\n  name: HashValue\n  nameWithType: HashAlgorithm.HashValue\n  fullName: System.Security.Cryptography.HashAlgorithm.HashValue\n  type: Field\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Represents the value of the computed hash code.\n  remarks: This field is accessed through the <xref:System.Security.Cryptography.HashAlgorithm.Hash%2A> property.\n  syntax:\n    content: protected byte[] HashValue;\n    return:\n      type: System.Byte[]\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.HashAlgorithm.Initialize\n  id: Initialize\n  parent: System.Security.Cryptography.HashAlgorithm\n  langs:\n  - csharp\n  name: Initialize()\n  nameWithType: HashAlgorithm.Initialize()\n  fullName: System.Security.Cryptography.HashAlgorithm.Initialize()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Initializes an implementation of the <xref href=\"System.Security.Cryptography.HashAlgorithm\"></xref> class.\n  syntax:\n    content: public abstract void Initialize ();\n    parameters: []\n  overload: System.Security.Cryptography.HashAlgorithm.Initialize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.HashAlgorithm.InputBlockSize\n  id: InputBlockSize\n  parent: System.Security.Cryptography.HashAlgorithm\n  langs:\n  - csharp\n  name: InputBlockSize\n  nameWithType: HashAlgorithm.InputBlockSize\n  fullName: System.Security.Cryptography.HashAlgorithm.InputBlockSize\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: When overridden in a derived class, gets the input block size.\n  remarks: Unless overridden, this property returns the value 1.\n  syntax:\n    content: public virtual int InputBlockSize { get; }\n    return:\n      type: System.Int32\n      description: The input block size.\n  overload: System.Security.Cryptography.HashAlgorithm.InputBlockSize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.HashAlgorithm.OutputBlockSize\n  id: OutputBlockSize\n  parent: System.Security.Cryptography.HashAlgorithm\n  langs:\n  - csharp\n  name: OutputBlockSize\n  nameWithType: HashAlgorithm.OutputBlockSize\n  fullName: System.Security.Cryptography.HashAlgorithm.OutputBlockSize\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: When overridden in a derived class, gets the output block size.\n  remarks: Unless overridden, this property returns the value 1.\n  syntax:\n    content: public virtual int OutputBlockSize { get; }\n    return:\n      type: System.Int32\n      description: The output block size.\n  overload: System.Security.Cryptography.HashAlgorithm.OutputBlockSize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.HashAlgorithm.State\n  id: State\n  parent: System.Security.Cryptography.HashAlgorithm\n  langs:\n  - csharp\n  name: State\n  nameWithType: HashAlgorithm.State\n  fullName: System.Security.Cryptography.HashAlgorithm.State\n  type: Field\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Represents the state of the hash computation.\n  remarks: This field is used to prevent users from changing the key of a keyed hash algorithm during a hash operation. When a key change is legitimate, the value of this field is zero both before and after a hash operation. When a key change is not legitimate, the value of this field is nonzero.\n  syntax:\n    content: protected int State;\n    return:\n      type: System.Int32\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  id: TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Security.Cryptography.HashAlgorithm\n  langs:\n  - csharp\n  name: TransformBlock(Byte[],Int32,Int32,Byte[],Int32)\n  nameWithType: HashAlgorithm.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)\n  fullName: System.Security.Cryptography.HashAlgorithm.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Computes the hash value for the specified region of the input byte array and copies the specified region of the input byte array to the specified region of the output byte array.\n  remarks: \"You must call the TransformBlock method before calling the <xref:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock%2A> method. You must call both methods before you retrieve the final hash value.  \\n  \\n To retrieve the final hash value after calling the <xref:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock%2A> method, get the byte array contained within the <xref:System.Security.Cryptography.HashAlgorithm.Hash%2A> property.  \\n  \\n Calling the TransformBlock method with different input and output arrays results in an <xref:System.IO.IOException>.\"\n  example:\n  - \"The following code examples use the <xref:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock%2A> method with the TransformBlock method to hash a string.  \\n  \\n [!code-vb[Cryptography.HashAlgorithm.TransformFinalBlock#1](~/add/codesnippet/visualbasic/ecff726a-6c03-4fab-88fc-_1.vb)]\\n [!code-cs[Cryptography.HashAlgorithm.TransformFinalBlock#1](~/add/codesnippet/csharp/ecff726a-6c03-4fab-88fc-_1.cs)]\"\n  syntax:\n    content: public int TransformBlock (byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);\n    parameters:\n    - id: inputBuffer\n      type: System.Byte[]\n      description: The input to compute the hash code for.\n    - id: inputOffset\n      type: System.Int32\n      description: The offset into the input byte array from which to begin using data.\n    - id: inputCount\n      type: System.Int32\n      description: The number of bytes in the input byte array to use as data.\n    - id: outputBuffer\n      type: System.Byte[]\n      description: A copy of the part of the input array used to compute the hash code.\n    - id: outputOffset\n      type: System.Int32\n      description: The offset into the output byte array from which to begin writing data.\n    return:\n      type: System.Int32\n      description: The number of bytes written.\n  overload: System.Security.Cryptography.HashAlgorithm.TransformBlock*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>inputCount</code> uses an invalid value.  \\n  \\n -or-  \\n  \\n <code>inputBuffer</code> has an invalid length.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>inputBuffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>inputOffset</code> is out of range. This parameter requires a non-negative number.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The object has already been disposed.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  id: TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.HashAlgorithm\n  langs:\n  - csharp\n  name: TransformFinalBlock(Byte[],Int32,Int32)\n  nameWithType: HashAlgorithm.TransformFinalBlock(Byte[],Int32,Int32)\n  fullName: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(Byte[],Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Computes the hash value for the specified region of the specified byte array.\n  remarks: \"You must call the TransformFinalBlock method after calling the <xref:System.Security.Cryptography.HashAlgorithm.TransformBlock%2A> method but before you retrieve the final hash value.  \\n  \\n Note that the return value of this method is not the hash value, but only a copy of the hashed part of the input data.  To retrieve the final hashed value after calling the TransformFinalBlock method, get the byte array contained in the <xref:System.Security.Cryptography.HashAlgorithm.Hash%2A> property.\"\n  example:\n  - \"The following code examples use the TransformFinalBlock method with the <xref:System.Security.Cryptography.HashAlgorithm.TransformBlock%2A> method to hash a string.  \\n  \\n [!code-vb[Cryptography.HashAlgorithm.TransformFinalBlock#1](~/add/codesnippet/visualbasic/e884136c-31d4-425b-a9d5-_1.vb)]\\n [!code-cs[Cryptography.HashAlgorithm.TransformFinalBlock#1](~/add/codesnippet/csharp/e884136c-31d4-425b-a9d5-_1.cs)]\"\n  syntax:\n    content: public byte[] TransformFinalBlock (byte[] inputBuffer, int inputOffset, int inputCount);\n    parameters:\n    - id: inputBuffer\n      type: System.Byte[]\n      description: The input to compute the hash code for.\n    - id: inputOffset\n      type: System.Int32\n      description: The offset into the byte array from which to begin using data.\n    - id: inputCount\n      type: System.Int32\n      description: The number of bytes in the byte array to use as data.\n    return:\n      type: System.Byte[]\n      description: An array that is a copy of the part of the input that is hashed.\n  overload: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>inputCount</code> uses an invalid value.  \\n  \\n -or-  \\n  \\n <code>inputBuffer</code> has an invalid offset length.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>inputBuffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>inputOffset</code> is out of range. This parameter requires a non-negative number.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The object has already been disposed.\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ObjectDisposedException\n  isExternal: true\n  name: System.ObjectDisposedException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.Security.Cryptography.CryptographicUnexpectedOperationException\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CryptographicUnexpectedOperationException\n  nameWithType: CryptographicUnexpectedOperationException\n  fullName: System.Security.Cryptography.CryptographicUnexpectedOperationException\n- uid: System.Security.Cryptography.HashAlgorithm.#ctor\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: HashAlgorithm()\n  nameWithType: HashAlgorithm.HashAlgorithm()\n  fullName: System.Security.Cryptography.HashAlgorithm.HashAlgorithm()\n- uid: System.Security.Cryptography.HashAlgorithm.CanReuseTransform\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: CanReuseTransform\n  nameWithType: HashAlgorithm.CanReuseTransform\n  fullName: System.Security.Cryptography.HashAlgorithm.CanReuseTransform\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: CanTransformMultipleBlocks\n  nameWithType: HashAlgorithm.CanTransformMultipleBlocks\n  fullName: System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks\n- uid: System.Security.Cryptography.HashAlgorithm.Clear\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: Clear()\n  nameWithType: HashAlgorithm.Clear()\n  fullName: System.Security.Cryptography.HashAlgorithm.Clear()\n- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: ComputeHash(Byte[])\n  nameWithType: HashAlgorithm.ComputeHash(Byte[])\n  fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash(Byte[])\n- uid: System.Byte[]\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: Byte[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: ComputeHash(Stream)\n  nameWithType: HashAlgorithm.ComputeHash(Stream)\n  fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash(Stream)\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: true\n  name: Stream\n  nameWithType: Stream\n  fullName: System.IO.Stream\n- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: ComputeHash(Byte[],Int32,Int32)\n  nameWithType: HashAlgorithm.ComputeHash(Byte[],Int32,Int32)\n  fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash(Byte[],Int32,Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.HashAlgorithm.Create\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: Create()\n  nameWithType: HashAlgorithm.Create()\n  fullName: System.Security.Cryptography.HashAlgorithm.Create()\n- uid: System.Security.Cryptography.HashAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: HashAlgorithm\n  nameWithType: HashAlgorithm\n  fullName: System.Security.Cryptography.HashAlgorithm\n- uid: System.Security.Cryptography.HashAlgorithm.Create(System.String)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: Create(String)\n  nameWithType: HashAlgorithm.Create(String)\n  fullName: System.Security.Cryptography.HashAlgorithm.Create(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Cryptography.HashAlgorithm.Dispose\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: Dispose()\n  nameWithType: HashAlgorithm.Dispose()\n  fullName: System.Security.Cryptography.HashAlgorithm.Dispose()\n- uid: System.Security.Cryptography.HashAlgorithm.Dispose(System.Boolean)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: HashAlgorithm.Dispose(Boolean)\n  fullName: System.Security.Cryptography.HashAlgorithm.Dispose(Boolean)\n- uid: System.Security.Cryptography.HashAlgorithm.Hash\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: Hash\n  nameWithType: HashAlgorithm.Hash\n  fullName: System.Security.Cryptography.HashAlgorithm.Hash\n- uid: System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: HashCore(Byte[],Int32,Int32)\n  nameWithType: HashAlgorithm.HashCore(Byte[],Int32,Int32)\n  fullName: System.Security.Cryptography.HashAlgorithm.HashCore(Byte[],Int32,Int32)\n- uid: System.Security.Cryptography.HashAlgorithm.HashFinal\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: HashFinal()\n  nameWithType: HashAlgorithm.HashFinal()\n  fullName: System.Security.Cryptography.HashAlgorithm.HashFinal()\n- uid: System.Security.Cryptography.HashAlgorithm.HashSize\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: HashSize\n  nameWithType: HashAlgorithm.HashSize\n  fullName: System.Security.Cryptography.HashAlgorithm.HashSize\n- uid: System.Security.Cryptography.HashAlgorithm.HashSizeValue\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: HashSizeValue\n  nameWithType: HashAlgorithm.HashSizeValue\n  fullName: System.Security.Cryptography.HashAlgorithm.HashSizeValue\n- uid: System.Security.Cryptography.HashAlgorithm.HashValue\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: HashValue\n  nameWithType: HashAlgorithm.HashValue\n  fullName: System.Security.Cryptography.HashAlgorithm.HashValue\n- uid: System.Security.Cryptography.HashAlgorithm.Initialize\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: Initialize()\n  nameWithType: HashAlgorithm.Initialize()\n  fullName: System.Security.Cryptography.HashAlgorithm.Initialize()\n- uid: System.Security.Cryptography.HashAlgorithm.InputBlockSize\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: InputBlockSize\n  nameWithType: HashAlgorithm.InputBlockSize\n  fullName: System.Security.Cryptography.HashAlgorithm.InputBlockSize\n- uid: System.Security.Cryptography.HashAlgorithm.OutputBlockSize\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: OutputBlockSize\n  nameWithType: HashAlgorithm.OutputBlockSize\n  fullName: System.Security.Cryptography.HashAlgorithm.OutputBlockSize\n- uid: System.Security.Cryptography.HashAlgorithm.State\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: State\n  nameWithType: HashAlgorithm.State\n  fullName: System.Security.Cryptography.HashAlgorithm.State\n- uid: System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: TransformBlock(Byte[],Int32,Int32,Byte[],Int32)\n  nameWithType: HashAlgorithm.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)\n  fullName: System.Security.Cryptography.HashAlgorithm.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)\n- uid: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: TransformFinalBlock(Byte[],Int32,Int32)\n  nameWithType: HashAlgorithm.TransformFinalBlock(Byte[],Int32,Int32)\n  fullName: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(Byte[],Int32,Int32)\n- uid: System.Security.Cryptography.HashAlgorithm.#ctor*\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: HashAlgorithm\n  nameWithType: HashAlgorithm.HashAlgorithm\n- uid: System.Security.Cryptography.HashAlgorithm.CanReuseTransform*\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: CanReuseTransform\n  nameWithType: HashAlgorithm.CanReuseTransform\n- uid: System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks*\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: CanTransformMultipleBlocks\n  nameWithType: HashAlgorithm.CanTransformMultipleBlocks\n- uid: System.Security.Cryptography.HashAlgorithm.Clear*\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: Clear\n  nameWithType: HashAlgorithm.Clear\n- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash*\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: ComputeHash\n  nameWithType: HashAlgorithm.ComputeHash\n- uid: System.Security.Cryptography.HashAlgorithm.Create*\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: Create\n  nameWithType: HashAlgorithm.Create\n- uid: System.Security.Cryptography.HashAlgorithm.Dispose*\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: Dispose\n  nameWithType: HashAlgorithm.Dispose\n- uid: System.Security.Cryptography.HashAlgorithm.Hash*\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: Hash\n  nameWithType: HashAlgorithm.Hash\n- uid: System.Security.Cryptography.HashAlgorithm.HashCore*\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: HashCore\n  nameWithType: HashAlgorithm.HashCore\n- uid: System.Security.Cryptography.HashAlgorithm.HashFinal*\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: HashFinal\n  nameWithType: HashAlgorithm.HashFinal\n- uid: System.Security.Cryptography.HashAlgorithm.HashSize*\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: HashSize\n  nameWithType: HashAlgorithm.HashSize\n- uid: System.Security.Cryptography.HashAlgorithm.Initialize*\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: Initialize\n  nameWithType: HashAlgorithm.Initialize\n- uid: System.Security.Cryptography.HashAlgorithm.InputBlockSize*\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: InputBlockSize\n  nameWithType: HashAlgorithm.InputBlockSize\n- uid: System.Security.Cryptography.HashAlgorithm.OutputBlockSize*\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: OutputBlockSize\n  nameWithType: HashAlgorithm.OutputBlockSize\n- uid: System.Security.Cryptography.HashAlgorithm.TransformBlock*\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: TransformBlock\n  nameWithType: HashAlgorithm.TransformBlock\n- uid: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock*\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: TransformFinalBlock\n  nameWithType: HashAlgorithm.TransformFinalBlock\n"}