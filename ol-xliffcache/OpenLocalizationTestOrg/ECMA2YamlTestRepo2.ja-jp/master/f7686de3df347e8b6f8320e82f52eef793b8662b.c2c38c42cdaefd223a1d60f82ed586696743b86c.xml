{"nodes":[{"pos":[2079,2155],"content":"Represents an open connection to a database. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents an open connection to a database. This class cannot be inherited.","pos":[0,76],"nodes":[{"content":"Represents an open connection to a database.","pos":[0,44]},{"content":"This class cannot be inherited.","pos":[45,76]}]}]},{"pos":[2168,4891],"content":"This type is deprecated and will be removed in a future version of the .NET Framework. For more information, see [Oracle and ADO.NET](~/add/includes/ajax-current-ext-md.md).       An OracleConnection object represents a unique connection to an Oracle database. In the case of a client/server database system, it is equivalent to a network connection to the server.       An application that creates an instance of the OracleConnection object can set declarative or imperative security demands that require all direct and indirect callers to have adequate permission to the code. OracleConnection creates security demands by using the <xref:System.Data.OracleClient.OraclePermission> object. Users can verify that their code has adequate permissions by using the <xref:System.Data.OracleClient.OraclePermissionAttribute> object. Users and administrators can also use the Code Access Security Policy Tool (Caspol.exe) to modify security policy at the machine, user, and enterprise levels. For more information, see [Security](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] >  Unlike the **Connection** object in the other .NET Framework data providers (SQL Server, OLE DB, and ODBC), OracleConnection does not support a <xref:System.Data.OracleClient.OracleConnection.ConnectionTimeout%2A> property. Setting a connection time-out either as a property or in the connection string has no effect, and the value returned is always zero. OracleConnection also does not support a <xref:System.Data.OracleClient.OracleConnection.Database%2A> property or a <xref:System.Data.OracleClient.OracleConnection.ChangeDatabase%2A> method.       If the OracleConnection object goes out of scope, it remains open. Therefore, you should always close OracleConnection objects by calling <xref:System.Data.OracleClient.OracleConnection.Close%2A> or **Dispose**, or by using the OracleConnection object within a `Using` statement. Otherwise, the garbage collection might not free them immediately. Such delays can cause errors if the maximum number of connections is reached while a number of connections are waiting to be deleted by the garbage collector. By contrast, closing the connections by calling <xref:System.Data.OracleClient.OracleConnection.Close%2A> uses native resources more efficiently, enhancing scalability and improving overall application performance. To ensure that connections are always closed, open the connection inside of a `Using` block.      > [!NOTE] >  To deploy high-performance applications, you often need to use connection pooling. However, when you use the .NET Framework Data Provider for Oracle, you do not need to enable connection pooling because the provider manages this automatically.","needQuote":false,"needEscape":true,"nodes":[{"content":"This type is deprecated and will be removed in a future version of the .NET Framework.","pos":[0,86]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Oracle and ADO.NET<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[87,173],"source":" For more information, see [Oracle and ADO.NET](~/add/includes/ajax-current-ext-md.md)."},{"content":"An OracleConnection object represents a unique connection to an Oracle database.","pos":[180,260]},{"content":"In the case of a client/server database system, it is equivalent to a network connection to the server.","pos":[261,364]},{"content":"An application that creates an instance of the OracleConnection object can set declarative or imperative security demands that require all direct and indirect callers to have adequate permission to the code.","pos":[371,578]},{"content":"OracleConnection creates security demands by using the &lt;xref:System.Data.OracleClient.OraclePermission&gt; object.","pos":[579,690],"source":" OracleConnection creates security demands by using the <xref:System.Data.OracleClient.OraclePermission> object."},{"content":"Users can verify that their code has adequate permissions by using the &lt;xref:System.Data.OracleClient.OraclePermissionAttribute&gt; object.","pos":[691,827],"source":" Users can verify that their code has adequate permissions by using the <xref:System.Data.OracleClient.OraclePermissionAttribute> object."},{"content":"Users and administrators can also use the Code Access Security Policy Tool (Caspol.exe) to modify security policy at the machine, user, and enterprise levels.","pos":[828,986]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Security<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[987,1063],"source":" For more information, see [Security](~/add/includes/ajax-current-ext-md.md)."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Unlike the <bpt id=\"p1\">**</bpt>Connection<ept id=\"p1\">**</ept> object in the other .NET Framework data providers (SQL Server, OLE DB, and ODBC), OracleConnection does not support a &lt;xref:System.Data.OracleClient.OracleConnection.ConnectionTimeout%2A&gt; property.","pos":[1069,1305],"source":"      > [!NOTE] >  Unlike the **Connection** object in the other .NET Framework data providers (SQL Server, OLE DB, and ODBC), OracleConnection does not support a <xref:System.Data.OracleClient.OracleConnection.ConnectionTimeout%2A> property."},{"content":"Setting a connection time-out either as a property or in the connection string has no effect, and the value returned is always zero.","pos":[1306,1438]},{"content":"OracleConnection also does not support a &lt;xref:System.Data.OracleClient.OracleConnection.Database%2A&gt; property or a &lt;xref:System.Data.OracleClient.OracleConnection.ChangeDatabase%2A&gt; method.","pos":[1439,1629],"source":" OracleConnection also does not support a <xref:System.Data.OracleClient.OracleConnection.Database%2A> property or a <xref:System.Data.OracleClient.OracleConnection.ChangeDatabase%2A> method."},{"content":"If the OracleConnection object goes out of scope, it remains open.","pos":[1636,1702]},{"content":"Therefore, you should always close OracleConnection objects by calling &lt;xref:System.Data.OracleClient.OracleConnection.Close%2A&gt; or <bpt id=\"p1\">**</bpt>Dispose<ept id=\"p1\">**</ept>, or by using the OracleConnection object within a <ph id=\"ph1\">`Using`</ph> statement.","pos":[1703,1915],"source":" Therefore, you should always close OracleConnection objects by calling <xref:System.Data.OracleClient.OracleConnection.Close%2A> or **Dispose**, or by using the OracleConnection object within a `Using` statement."},{"content":"Otherwise, the garbage collection might not free them immediately.","pos":[1916,1982]},{"content":"Such delays can cause errors if the maximum number of connections is reached while a number of connections are waiting to be deleted by the garbage collector.","pos":[1983,2141]},{"content":"By contrast, closing the connections by calling &lt;xref:System.Data.OracleClient.OracleConnection.Close%2A&gt; uses native resources more efficiently, enhancing scalability and improving overall application performance.","pos":[2142,2356],"source":" By contrast, closing the connections by calling <xref:System.Data.OracleClient.OracleConnection.Close%2A> uses native resources more efficiently, enhancing scalability and improving overall application performance."},{"content":"To ensure that connections are always closed, open the connection inside of a <ph id=\"ph1\">`Using`</ph> block.","pos":[2357,2449],"source":" To ensure that connections are always closed, open the connection inside of a `Using` block."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  To deploy high-performance applications, you often need to use connection pooling.","pos":[2455,2550],"source":"      > [!NOTE] >  To deploy high-performance applications, you often need to use connection pooling."},{"content":"However, when you use the .NET Framework Data Provider for Oracle, you do not need to enable connection pooling because the provider manages this automatically.","pos":[2551,2711]}]},{"pos":[7800,7897],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleConnection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Data.OracleClient.OracleConnection\"></xref>."},{"pos":[8907,9047],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleConnection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified connection string.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Data.OracleClient.OracleConnection\"></xref> class with the specified connection string."},{"pos":[9595,9636],"content":"The connection used to open the database.","needQuote":true,"needEscape":true,"nodes":[{"content":"The connection used to open the database.","pos":[0,41]}]},{"pos":[10493,10505],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[10582,10594],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[11129,11166],"content":"Begins a transaction at the database.","needQuote":true,"needEscape":true,"nodes":[{"content":"Begins a transaction at the database.","pos":[0,37]}]},{"pos":[11179,11836],"content":"To commit or roll back the transaction, you must explicitly use the <xref:System.Data.OracleClient.OracleTransaction.Commit%2A> or <xref:System.Data.OracleClient.OracleTransaction.Rollback%2A> methods.       To ensure that the .NET Framework Data Provider for Oracle transaction management model performs correctly, avoid using other transaction management models, such as those provided by the database.      > [!NOTE] >  If you do not specify an isolation level, the default isolation level is used. To specify an isolation level with the BeginTransaction method, use the <xref:System.Data.OracleClient.OracleConnection.BeginTransaction%2A> overload.","needQuote":false,"needEscape":true,"nodes":[{"content":"To commit or roll back the transaction, you must explicitly use the &lt;xref:System.Data.OracleClient.OracleTransaction.Commit%2A&gt; or &lt;xref:System.Data.OracleClient.OracleTransaction.Rollback%2A&gt; methods.","pos":[0,201],"source":"To commit or roll back the transaction, you must explicitly use the <xref:System.Data.OracleClient.OracleTransaction.Commit%2A> or <xref:System.Data.OracleClient.OracleTransaction.Rollback%2A> methods."},{"content":"To ensure that the .NET Framework Data Provider for Oracle transaction management model performs correctly, avoid using other transaction management models, such as those provided by the database.","pos":[208,404]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If you do not specify an isolation level, the default isolation level is used.","pos":[410,501],"source":"      > [!NOTE] >  If you do not specify an isolation level, the default isolation level is used."},{"content":"To specify an isolation level with the BeginTransaction method, use the &lt;xref:System.Data.OracleClient.OracleConnection.BeginTransaction%2A&gt; overload.","pos":[502,652],"source":" To specify an isolation level with the BeginTransaction method, use the <xref:System.Data.OracleClient.OracleConnection.BeginTransaction%2A> overload."}]},{"pos":[12645,12688],"content":"An object representing the new transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object representing the new transaction.","pos":[0,43]}]},{"pos":[12885,12925],"content":"Parallel transactions are not supported.","needQuote":true,"needEscape":true,"nodes":[{"content":"Parallel transactions are not supported.","pos":[0,40]}]},{"pos":[13467,13577],"content":"Begins a transaction at the database with the specified <bpt id=\"p1\">&lt;xref href=\"System.Data.IsolationLevel\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value.","needQuote":true,"needEscape":true,"source":"Begins a transaction at the database with the specified <xref href=\"System.Data.IsolationLevel\"></xref> value."},{"pos":[13590,13996],"content":"To commit or roll back the transaction, you must explicitly use the <xref:System.Data.OracleClient.OracleTransaction.Commit%2A> or <xref:System.Data.OracleClient.OracleTransaction.Rollback%2A> methods.       To ensure that the .NET Framework Data Provider for Oracle transaction management model performs correctly, avoid using other transaction management models, such as those provided by the database.","needQuote":false,"needEscape":true,"nodes":[{"content":"To commit or roll back the transaction, you must explicitly use the <xref:System.Data.OracleClient.OracleTransaction.Commit%2A> or <xref:System.Data.OracleClient.OracleTransaction.Rollback%2A> methods.       To ensure that the .NET Framework Data Provider for Oracle transaction management model performs correctly, avoid using other transaction management models, such as those provided by the database.","pos":[0,404],"nodes":[{"content":"To commit or roll back the transaction, you must explicitly use the &lt;xref:System.Data.OracleClient.OracleTransaction.Commit%2A&gt; or &lt;xref:System.Data.OracleClient.OracleTransaction.Rollback%2A&gt; methods.","pos":[0,201],"source":"To commit or roll back the transaction, you must explicitly use the <xref:System.Data.OracleClient.OracleTransaction.Commit%2A> or <xref:System.Data.OracleClient.OracleTransaction.Rollback%2A> methods."},{"content":"To ensure that the .NET Framework Data Provider for Oracle transaction management model performs correctly, avoid using other transaction management models, such as those provided by the database.","pos":[208,404]}]}]},{"pos":[14862,14914],"content":"The transaction isolation level for this connection.","needQuote":true,"needEscape":true,"nodes":[{"content":"The transaction isolation level for this connection.","pos":[0,52]}]},{"pos":[15001,15044],"content":"An object representing the new transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object representing the new transaction.","pos":[0,43]}]},{"pos":[15241,15281],"content":"Parallel transactions are not supported.","needQuote":true,"needEscape":true,"nodes":[{"content":"Parallel transactions are not supported.","pos":[0,40]}]},{"pos":[15763,15867],"content":"Changes the current database for an open <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleConnection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Changes the current database for an open <xref href=\"System.Data.OracleClient.OracleConnection\"></xref>."},{"pos":[15880,16615],"content":"The `value` parameter must contain a valid database name, and cannot contain a null value, an empty string (\"\"), or a string with only blank characters.      > [!NOTE] >  Unlike the **Connection** object in the other .NET Framework data providers (SQL Server, OLE DB, and ODBC), <xref:System.Data.OracleClient.OracleConnection> does not support a <xref:System.Data.OracleClient.OracleConnection.ConnectionTimeout%2A> property. Setting a connection time-out either as a property or in the connection string has no effect, and the value returned is always zero. <xref:System.Data.OracleClient.OracleConnection> also does not support a <xref:System.Data.OracleClient.OracleConnection.Database%2A> property or a ChangeDatabase method.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`value`</ph> parameter must contain a valid database name, and cannot contain a null value, an empty string (\"\"), or a string with only blank characters.","pos":[0,152],"source":"The `value` parameter must contain a valid database name, and cannot contain a null value, an empty string (\"\"), or a string with only blank characters."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Unlike the <bpt id=\"p1\">**</bpt>Connection<ept id=\"p1\">**</ept> object in the other .NET Framework data providers (SQL Server, OLE DB, and ODBC), &lt;xref:System.Data.OracleClient.OracleConnection&gt; does not support a &lt;xref:System.Data.OracleClient.OracleConnection.ConnectionTimeout%2A&gt; property.","pos":[158,426],"source":"      > [!NOTE] >  Unlike the **Connection** object in the other .NET Framework data providers (SQL Server, OLE DB, and ODBC), <xref:System.Data.OracleClient.OracleConnection> does not support a <xref:System.Data.OracleClient.OracleConnection.ConnectionTimeout%2A> property."},{"content":"Setting a connection time-out either as a property or in the connection string has no effect, and the value returned is always zero.","pos":[427,559]},{"content":"&lt;xref:System.Data.OracleClient.OracleConnection&gt; also does not support a &lt;xref:System.Data.OracleClient.OracleConnection.Database%2A&gt; property or a ChangeDatabase method.","pos":[560,730],"source":" <xref:System.Data.OracleClient.OracleConnection> also does not support a <xref:System.Data.OracleClient.OracleConnection.Database%2A> property or a ChangeDatabase method."}]},{"pos":[16769,16833],"content":"The name of the database to use instead of the current database.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the database to use instead of the current database.","pos":[0,64]}]},{"pos":[17012,17043],"content":"The database name is not valid.","needQuote":true,"needEscape":true,"nodes":[{"content":"The database name is not valid.","pos":[0,31]}]},{"pos":[17154,17181],"content":"The connection is not open.","needQuote":true,"needEscape":true,"nodes":[{"content":"The connection is not open.","pos":[0,27]}]},{"pos":[17308,17335],"content":"Cannot change the database.","needQuote":true,"needEscape":true,"nodes":[{"content":"Cannot change the database.","pos":[0,27]}]},{"pos":[17764,17792],"content":"Empties the connection pool.","needQuote":true,"needEscape":true,"nodes":[{"content":"Empties the connection pool.","pos":[0,28]}]},{"pos":[17804,18039],"content":"ClearAllPools resets (or empties) the connection pool. If connections are in use at the time of the call, they are marked appropriately and are discarded when <xref:System.Data.OracleClient.OracleConnection.Close%2A> is called on them.","needQuote":true,"needEscape":true,"nodes":[{"content":"ClearAllPools resets (or empties) the connection pool. If connections are in use at the time of the call, they are marked appropriately and are discarded when <xref:System.Data.OracleClient.OracleConnection.Close%2A> is called on them.","pos":[0,235],"nodes":[{"content":"ClearAllPools resets (or empties) the connection pool.","pos":[0,54]},{"content":"If connections are in use at the time of the call, they are marked appropriately and are discarded when &lt;xref:System.Data.OracleClient.OracleConnection.Close%2A&gt; is called on them.","pos":[55,235],"source":" If connections are in use at the time of the call, they are marked appropriately and are discarded when <xref:System.Data.OracleClient.OracleConnection.Close%2A> is called on them."}]}]},{"pos":[18747,18816],"content":"Empties the connection pool associated with the specified connection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Empties the connection pool associated with the specified connection.","pos":[0,69]}]},{"pos":[18828,19130],"content":"ClearPool method clears the connection pool that is associated with `connection`. If additional connections associated with `connection` are in use at the time of the call, they are marked appropriately and are discarded when <xref:System.Data.OracleClient.OracleConnection.Close%2A> is called on them.","needQuote":true,"needEscape":true,"nodes":[{"content":"ClearPool method clears the connection pool that is associated with <ph id=\"ph1\">`connection`</ph>.","pos":[0,81],"source":"ClearPool method clears the connection pool that is associated with `connection`."},{"content":"If additional connections associated with <ph id=\"ph1\">`connection`</ph> are in use at the time of the call, they are marked appropriately and are discarded when &lt;xref:System.Data.OracleClient.OracleConnection.Close%2A&gt; is called on them.","pos":[82,302],"source":" If additional connections associated with `connection` are in use at the time of the call, they are marked appropriately and are discarded when <xref:System.Data.OracleClient.OracleConnection.Close%2A> is called on them."}]},{"pos":[19349,19444],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleConnection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to be cleared from the pool.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Data.OracleClient.OracleConnection\"></xref> to be cleared from the pool."},{"pos":[19915,19953],"content":"Closes the connection to the database.","needQuote":true,"needEscape":true,"nodes":[{"content":"Closes the connection to the database.","pos":[0,38]}]},{"pos":[19966,20902],"content":"The Close method rolls back any pending transactions. It then releases the connection to the connection pool, or closes the connection if connection pooling is disabled.       An application can call Close more than once without generating an exception.      > [!NOTE] >  When you use the .NET Framework Data Provider for Oracle, you do not need to enable connection pooling because the provider manages this automatically.      > [!CAUTION] >  Do not call Close on a <xref:System.Data.OracleClient.OracleConnection>, a <xref:System.Data.OracleClient.OracleDataReader>, or any other managed object in the `Finalize` method of your class. In a finalizer, you should only release unmanaged resources that your class owns directly. If your class does not own any unmanaged resources, do not include a `Finalize` method in your class definition. For more information, see [Garbage Collection](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"The Close method rolls back any pending transactions.","pos":[0,53]},{"content":"It then releases the connection to the connection pool, or closes the connection if connection pooling is disabled.","pos":[54,169]},{"content":"An application can call Close more than once without generating an exception.","pos":[176,253]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  When you use the .NET Framework Data Provider for Oracle, you do not need to enable connection pooling because the provider manages this automatically.","pos":[259,423],"source":"      > [!NOTE] >  When you use the .NET Framework Data Provider for Oracle, you do not need to enable connection pooling because the provider manages this automatically."},{"content":"&gt; <ph id=\"ph1\">[!CAUTION]</ph> &gt;  Do not call Close on a &lt;xref:System.Data.OracleClient.OracleConnection&gt;, a &lt;xref:System.Data.OracleClient.OracleDataReader&gt;, or any other managed object in the <ph id=\"ph2\">`Finalize`</ph> method of your class.","pos":[429,637],"source":"      > [!CAUTION] >  Do not call Close on a <xref:System.Data.OracleClient.OracleConnection>, a <xref:System.Data.OracleClient.OracleDataReader>, or any other managed object in the `Finalize` method of your class."},{"content":"In a finalizer, you should only release unmanaged resources that your class owns directly.","pos":[638,728]},{"content":"If your class does not own any unmanaged resources, do not include a <ph id=\"ph1\">`Finalize`</ph> method in your class definition.","pos":[729,841],"source":" If your class does not own any unmanaged resources, do not include a `Finalize` method in your class definition."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Garbage Collection<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[842,928],"source":" For more information, see [Garbage Collection](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[21494,21550],"content":"Gets or sets the string used to open an Oracle database.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the string used to open an Oracle database.","pos":[0,56]}]},{"pos":[21563,27721],"content":"The ConnectionString can be set only when the connection is closed.       You can use the ConnectionString property to connect to a database. The following example illustrates a typical connection string.      ```   \"Data Source=Oracle8i;Integrated Security=yes\"   ```       Many of the settings specified in the string have corresponding read-only properties (for example, `Data Source=MyServer`, which corresponds to the <xref:System.Data.OracleClient.OracleConnection.DataSource%2A> property). When the connection string is set, all of these properties are updated, unless an error is detected, in which case none of the properties are updated. <xref:System.Data.OracleClient.OracleConnection> properties return only default settings or those settings specified in the ConnectionString.       Resetting the ConnectionString on a closed connection resets all connection string values (and related properties), including the password.       The connection string is parsed immediately after being set. If parsing reveals errors in syntax, a run-time exception, such as <xref:System.ArgumentException>, is generated. Other errors can be found only when an attempt is made to open the connection.       The basic format of a connection string is a series of keyword/value pairs separated by semicolons. The equal sign (=) connects each keyword and its value. To include values that contain a semicolon, single-quote character, or double-quote character, the value must be enclosed in double quotes. If the value contains both a semicolon and a double-quote character, the value can be enclosed in single quotes. The single quote is also useful if the value begins with a double-quote character. Conversely, the double quote can be used if the value begins with a single quote. If the value contains both single-quote and double-quote characters, the quote character used to enclose the value must be doubled each time it occurs within the value.       To include preceding or trailing spaces in the string value, the value must be enclosed in either single quotes or double quotes. Any leading or trailing spaces around integer, Boolean, or enumerated values are ignored, even if enclosed in quotes. However, spaces within a string literal keyword or value are preserved. Single or double quotes may be used within a connection string without using delimiters unless a quote character is the first or last character in the value, for example, `Data Source= my'Server` or `Data Source= my\"Server`.       To include an equal sign (=) in a keyword or value, it must be preceded by another equal sign. For example, in the hypothetical connection string      ```   \"key==word=value\"   ```       the keyword is \"key=word\" and the value is \"value\".       If a specific keyword in a keyword/value pair occurs more than once in a connection string, the last occurrence is used in the value set.       Keywords are case insensitive.       The following table lists the valid names for values within the ConnectionString.      |Name|Default|Description|   |----------|-------------|-----------------|   |Data Source<br /><br /> -or-<br /><br /> Server||The name or network address of the instance of Oracle to which to connect.|   |Integrated Security|'false'|Whether the connection is to be a secure connection or not.<br /><br /> Recognized values are `true` (strongly recommended), `false`, `yes`, and `no`.|   |Password||The password for the Oracle account logging on. To maintain a high level of security, we strongly recommend that you use the Integrated Security keyword instead.|   |Persist Security Info|'false'|When set to `false` or `no` (strongly recommended), security-sensitive information such as the password is not returned as part of the connection if the connection is open or has ever been in an open <xref:System.Data.OracleClient.OracleConnection.State%2A>. Resetting the connection string resets all connection string values, including the password.<br /><br /> Recognized values are `true`, `false`, `yes`, and `no`.|   |Unicode|'false'|Specifies whether the .NET Framework Data Provider for Oracle uses UTF16 mode API calls. This keyword is ignored except when using Oracle9i client software.|   |User ID||The Oracle login account. To maintain a high level of security, we strongly recommend that you use the Integrated Security keyword instead.|       The following table lists the valid names for connection pooling values within the ConnectionString.      |Name|Default|Description|   |----------|-------------|-----------------|   |Connection Lifetime|0|When a connection is returned to the pool, its creation time is compared with the current time, and the connection is destroyed if that time span (in seconds) exceeds the value specified by `Connection Lifetime`. This is useful in clustered configurations to force load balancing between a running server and a server just brought online.<br /><br /> A value of zero causes pooled connections to have the maximum connection time-out.|   |Enlist|'true'|When `true` or `yes`, the pooler automatically enlists the connection in the creation thread's current transaction context.<br /><br /> Recognized values are `true`, `false`, `yes`, and `no`.|   |Max Pool Size|100|The maximum number of connections allowed in the pool. Setting the `Max Pool Size` value of the ConnectionString can affect performance. If you plan to create and actively use more than 100 connections, you should increase `Max Pool Size` to a value that approximates the steady-state connection usage for the application.|   |Min Pool Size|0|The minimum number of connections allowed in the pool.|   |Pooling|'true'|When `true` or `yes`, the <xref:System.Data.OracleClient.OracleConnection> object is drawn from the appropriate pool, or if necessary, is created and added to the appropriate pool.<br /><br /> Recognized values are `true`, `false`, `yes`, and `no`.|       When setting keyword or connection pooling values that require a Boolean value, you can use 'yes' instead of 'true', and 'no' instead of 'false'. Integer values are represented as strings.","needQuote":false,"needEscape":true,"nodes":[{"content":"The ConnectionString can be set only when the connection is closed.       You can use the ConnectionString property to connect to a database. The following example illustrates a typical connection string.      ```   \"Data Source=Oracle8i;Integrated Security=yes\"   ```       Many of the settings specified in the string have corresponding read-only properties (for example, `Data Source=MyServer`, which corresponds to the <xref:System.Data.OracleClient.OracleConnection.DataSource%2A> property). When the connection string is set, all of these properties are updated, unless an error is detected, in which case none of the properties are updated. <xref:System.Data.OracleClient.OracleConnection> properties return only default settings or those settings specified in the ConnectionString.       Resetting the ConnectionString on a closed connection resets all connection string values (and related properties), including the password.       The connection string is parsed immediately after being set. If parsing reveals errors in syntax, a run-time exception, such as <xref:System.ArgumentException>, is generated. Other errors can be found only when an attempt is made to open the connection.       The basic format of a connection string is a series of keyword/value pairs separated by semicolons. The equal sign (=) connects each keyword and its value. To include values that contain a semicolon, single-quote character, or double-quote character, the value must be enclosed in double quotes. If the value contains both a semicolon and a double-quote character, the value can be enclosed in single quotes. The single quote is also useful if the value begins with a double-quote character. Conversely, the double quote can be used if the value begins with a single quote. If the value contains both single-quote and double-quote characters, the quote character used to enclose the value must be doubled each time it occurs within the value.       To include preceding or trailing spaces in the string value, the value must be enclosed in either single quotes or double quotes. Any leading or trailing spaces around integer, Boolean, or enumerated values are ignored, even if enclosed in quotes. However, spaces within a string literal keyword or value are preserved. Single or double quotes may be used within a connection string without using delimiters unless a quote character is the first or last character in the value, for example, `Data Source= my'Server` or `Data Source= my\"Server`.       To include an equal sign (=) in a keyword or value, it must be preceded by another equal sign. For example, in the hypothetical connection string      ```   \"key==word=value\"   ```       the keyword is \"key=word\" and the value is \"value\".       If a specific keyword in a keyword/value pair occurs more than once in a connection string, the last occurrence is used in the value set.       Keywords are case insensitive.       The following table lists the valid names for values within the ConnectionString.      |Name|Default|Description|   |----------|-------------|-----------------|   |Data Source","pos":[0,3103],"nodes":[{"content":"The ConnectionString can be set only when the connection is closed.","pos":[0,67]},{"content":"You can use the ConnectionString property to connect to a database.","pos":[74,141]},{"content":"The following example illustrates a typical connection string.","pos":[142,204]},{"content":"<ph id=\"ph1\">```   \"Data Source=Oracle8i;Integrated Security=yes\"   ```</ph>       Many of the settings specified in the string have corresponding read-only properties (for example, <ph id=\"ph2\">`Data Source=MyServer`</ph>, which corresponds to the &lt;xref:System.Data.OracleClient.OracleConnection.DataSource%2A&gt; property).","pos":[210,496],"source":"```   \"Data Source=Oracle8i;Integrated Security=yes\"   ```       Many of the settings specified in the string have corresponding read-only properties (for example, `Data Source=MyServer`, which corresponds to the <xref:System.Data.OracleClient.OracleConnection.DataSource%2A> property)."},{"content":"When the connection string is set, all of these properties are updated, unless an error is detected, in which case none of the properties are updated.","pos":[497,647]},{"content":"&lt;xref:System.Data.OracleClient.OracleConnection&gt; properties return only default settings or those settings specified in the ConnectionString.","pos":[648,789],"source":" <xref:System.Data.OracleClient.OracleConnection> properties return only default settings or those settings specified in the ConnectionString."},{"content":"Resetting the ConnectionString on a closed connection resets all connection string values (and related properties), including the password.","pos":[796,935]},{"content":"The connection string is parsed immediately after being set.","pos":[942,1002]},{"content":"If parsing reveals errors in syntax, a run-time exception, such as &lt;xref:System.ArgumentException&gt;, is generated.","pos":[1003,1116],"source":" If parsing reveals errors in syntax, a run-time exception, such as <xref:System.ArgumentException>, is generated."},{"content":"Other errors can be found only when an attempt is made to open the connection.","pos":[1117,1195]},{"content":"The basic format of a connection string is a series of keyword/value pairs separated by semicolons.","pos":[1202,1301]},{"content":"The equal sign (=) connects each keyword and its value.","pos":[1302,1357]},{"content":"To include values that contain a semicolon, single-quote character, or double-quote character, the value must be enclosed in double quotes.","pos":[1358,1497]},{"content":"If the value contains both a semicolon and a double-quote character, the value can be enclosed in single quotes.","pos":[1498,1610]},{"content":"The single quote is also useful if the value begins with a double-quote character.","pos":[1611,1693]},{"content":"Conversely, the double quote can be used if the value begins with a single quote.","pos":[1694,1775]},{"content":"If the value contains both single-quote and double-quote characters, the quote character used to enclose the value must be doubled each time it occurs within the value.","pos":[1776,1944]},{"content":"To include preceding or trailing spaces in the string value, the value must be enclosed in either single quotes or double quotes.","pos":[1951,2080]},{"content":"Any leading or trailing spaces around integer, Boolean, or enumerated values are ignored, even if enclosed in quotes.","pos":[2081,2198]},{"content":"However, spaces within a string literal keyword or value are preserved.","pos":[2199,2270]},{"content":"Single or double quotes may be used within a connection string without using delimiters unless a quote character is the first or last character in the value, for example, <ph id=\"ph1\">`Data Source= my'Server`</ph> or <ph id=\"ph2\">`Data Source= my\"Server`</ph>.","pos":[2271,2495],"source":" Single or double quotes may be used within a connection string without using delimiters unless a quote character is the first or last character in the value, for example, `Data Source= my'Server` or `Data Source= my\"Server`."},{"content":"To include an equal sign (=) in a keyword or value, it must be preceded by another equal sign.","pos":[2502,2596]},{"content":"For example, in the hypothetical connection string      <ph id=\"ph1\">```   \"key==word=value\"   ```</ph>       the keyword is \"key=word\" and the value is \"value\".","pos":[2597,2740],"source":" For example, in the hypothetical connection string      ```   \"key==word=value\"   ```       the keyword is \"key=word\" and the value is \"value\"."},{"content":"If a specific keyword in a keyword/value pair occurs more than once in a connection string, the last occurrence is used in the value set.","pos":[2747,2884]},{"content":"Keywords are case insensitive.","pos":[2891,2921]},{"content":"The following table lists the valid names for values within the ConnectionString.","pos":[2928,3009]},{"content":"|Name|Default|Description|   |----------|-------------|-----------------|   |Data Source","pos":[3015,3103]}]},{"content":"-or-","pos":[3116,3120]},{"content":"Server||The name or network address of the instance of Oracle to which to connect.|   |Integrated Security|'false'|Whether the connection is to be a secure connection or not.","pos":[3133,3307]},{"content":" Recognized values are `true` (strongly recommended), `false`, `yes`, and `no`.|   |Password||The password for the Oracle account logging on. To maintain a high level of security, we strongly recommend that you use the Integrated Security keyword instead.|   |Persist Security Info|'false'|When set to `false` or `no` (strongly recommended), security-sensitive information such as the password is not returned as part of the connection if the connection is open or has ever been in an open <xref:System.Data.OracleClient.OracleConnection.State%2A>. Resetting the connection string resets all connection string values, including the password.","pos":[3319,3960],"nodes":[{"content":"Recognized values are <ph id=\"ph1\">`true`</ph> (strongly recommended), <ph id=\"ph2\">`false`</ph>, <ph id=\"ph3\">`yes`</ph>, and <ph id=\"ph4\">`no`</ph>.|   |Password||The password for the Oracle account logging on.","pos":[1,141],"source":" Recognized values are `true` (strongly recommended), `false`, `yes`, and `no`.|   |Password||The password for the Oracle account logging on."},{"content":"To maintain a high level of security, we strongly recommend that you use the Integrated Security keyword instead.|   |Persist Security Info|'false'|When set to <ph id=\"ph1\">`false`</ph> or <ph id=\"ph2\">`no`</ph> (strongly recommended), security-sensitive information such as the password is not returned as part of the connection if the connection is open or has ever been in an open &lt;xref:System.Data.OracleClient.OracleConnection.State%2A&gt;.","pos":[142,548],"source":" To maintain a high level of security, we strongly recommend that you use the Integrated Security keyword instead.|   |Persist Security Info|'false'|When set to `false` or `no` (strongly recommended), security-sensitive information such as the password is not returned as part of the connection if the connection is open or has ever been in an open <xref:System.Data.OracleClient.OracleConnection.State%2A>."},{"content":"Resetting the connection string resets all connection string values, including the password.","pos":[549,641]}]},{"content":" Recognized values are `true`, `false`, `yes`, and `no`.|   |Unicode|'false'|Specifies whether the .NET Framework Data Provider for Oracle uses UTF16 mode API calls. This keyword is ignored except when using Oracle9i client software.|   |User ID||The Oracle login account. To maintain a high level of security, we strongly recommend that you use the Integrated Security keyword instead.|       The following table lists the valid names for connection pooling values within the ConnectionString.      |Name|Default|Description|   |----------|-------------|-----------------|   |Connection Lifetime|0|When a connection is returned to the pool, its creation time is compared with the current time, and the connection is destroyed if that time span (in seconds) exceeds the value specified by `Connection Lifetime`. This is useful in clustered configurations to force load balancing between a running server and a server just brought online.","pos":[3972,4909],"nodes":[{"content":"Recognized values are <ph id=\"ph1\">`true`</ph>, <ph id=\"ph2\">`false`</ph>, <ph id=\"ph3\">`yes`</ph>, and <ph id=\"ph4\">`no`</ph>.|   |Unicode|'false'|Specifies whether the .NET Framework Data Provider for Oracle uses UTF16 mode API calls.","pos":[1,165],"source":" Recognized values are `true`, `false`, `yes`, and `no`.|   |Unicode|'false'|Specifies whether the .NET Framework Data Provider for Oracle uses UTF16 mode API calls."},{"content":"This keyword is ignored except when using Oracle9i client software.|   |User ID||The Oracle login account.","pos":[166,272]},{"content":"To maintain a high level of security, we strongly recommend that you use the Integrated Security keyword instead.|       The following table lists the valid names for connection pooling values within the ConnectionString.","pos":[273,494]},{"content":"|Name|Default|Description|   |----------|-------------|-----------------|   |Connection Lifetime|0|When a connection is returned to the pool, its creation time is compared with the current time, and the connection is destroyed if that time span (in seconds) exceeds the value specified by <ph id=\"ph1\">`Connection Lifetime`</ph>.","pos":[500,811],"source":"      |Name|Default|Description|   |----------|-------------|-----------------|   |Connection Lifetime|0|When a connection is returned to the pool, its creation time is compared with the current time, and the connection is destroyed if that time span (in seconds) exceeds the value specified by `Connection Lifetime`."},{"content":"This is useful in clustered configurations to force load balancing between a running server and a server just brought online.","pos":[812,937]}]},{"content":"A value of zero causes pooled connections to have the maximum connection time-out.|   |Enlist|'true'|When <ph id=\"ph1\">`true`</ph> or <ph id=\"ph2\">`yes`</ph>, the pooler automatically enlists the connection in the creation thread's current transaction context.","pos":[4922,5146],"source":" A value of zero causes pooled connections to have the maximum connection time-out.|   |Enlist|'true'|When `true` or `yes`, the pooler automatically enlists the connection in the creation thread's current transaction context."},{"content":" Recognized values are `true`, `false`, `yes`, and `no`.|   |Max Pool Size|100|The maximum number of connections allowed in the pool. Setting the `Max Pool Size` value of the ConnectionString can affect performance. If you plan to create and actively use more than 100 connections, you should increase `Max Pool Size` to a value that approximates the steady-state connection usage for the application.|   |Min Pool Size|0|The minimum number of connections allowed in the pool.|   |Pooling|'true'|When `true` or `yes`, the <xref:System.Data.OracleClient.OracleConnection> object is drawn from the appropriate pool, or if necessary, is created and added to the appropriate pool.","pos":[5158,5834],"nodes":[{"content":"Recognized values are <ph id=\"ph1\">`true`</ph>, <ph id=\"ph2\">`false`</ph>, <ph id=\"ph3\">`yes`</ph>, and <ph id=\"ph4\">`no`</ph>.|   |Max Pool Size|100|The maximum number of connections allowed in the pool.","pos":[1,133],"source":" Recognized values are `true`, `false`, `yes`, and `no`.|   |Max Pool Size|100|The maximum number of connections allowed in the pool."},{"content":"Setting the <ph id=\"ph1\">`Max Pool Size`</ph> value of the ConnectionString can affect performance.","pos":[134,215],"source":" Setting the `Max Pool Size` value of the ConnectionString can affect performance."},{"content":"If you plan to create and actively use more than 100 connections, you should increase <ph id=\"ph1\">`Max Pool Size`</ph> to a value that approximates the steady-state connection usage for the application.|   |Min Pool Size|0|The minimum number of connections allowed in the pool.|   |Pooling|'true'|When <ph id=\"ph2\">`true`</ph> or <ph id=\"ph3\">`yes`</ph>, the &lt;xref:System.Data.OracleClient.OracleConnection&gt; object is drawn from the appropriate pool, or if necessary, is created and added to the appropriate pool.","pos":[216,676],"source":" If you plan to create and actively use more than 100 connections, you should increase `Max Pool Size` to a value that approximates the steady-state connection usage for the application.|   |Min Pool Size|0|The minimum number of connections allowed in the pool.|   |Pooling|'true'|When `true` or `yes`, the <xref:System.Data.OracleClient.OracleConnection> object is drawn from the appropriate pool, or if necessary, is created and added to the appropriate pool."}]},{"content":" Recognized values are `true`, `false`, `yes`, and `no`.|       When setting keyword or connection pooling values that require a Boolean value, you can use 'yes' instead of 'true', and 'no' instead of 'false'. Integer values are represented as strings.","pos":[5846,6098],"nodes":[{"content":"Recognized values are <ph id=\"ph1\">`true`</ph>, <ph id=\"ph2\">`false`</ph>, <ph id=\"ph3\">`yes`</ph>, and <ph id=\"ph4\">`no`</ph>.|       When setting keyword or connection pooling values that require a Boolean value, you can use 'yes' instead of 'true', and 'no' instead of 'false'.","pos":[1,209],"source":" Recognized values are `true`, `false`, `yes`, and `no`.|       When setting keyword or connection pooling values that require a Boolean value, you can use 'yes' instead of 'true', and 'no' instead of 'false'."},{"content":"Integer values are represented as strings.","pos":[210,252]}]}]},{"pos":[28263,28427],"content":"The Oracle connection string that includes settings, such as the server name, needed to establish the initial connection. The default value is an empty string (\"\").","needQuote":true,"needEscape":true,"nodes":[{"content":"The Oracle connection string that includes settings, such as the server name, needed to establish the initial connection. The default value is an empty string (\"\").","pos":[0,164],"nodes":[{"content":"The Oracle connection string that includes settings, such as the server name, needed to establish the initial connection.","pos":[0,121]},{"content":"The default value is an empty string (\"\").","pos":[122,164]}]}]},{"pos":[28961,29064],"content":"Gets the time to wait to establish a connection before terminating the attempt and generating an error.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the time to wait to establish a connection before terminating the attempt and generating an error.","pos":[0,103]}]},{"pos":[29077,29988],"content":"You can set the amount of time a connection waits to time out by using the `Connect Timeout` or `Connection Timeout` keywords in the connection string. A value of 0 indicates no limit, and should be avoided in a <xref:System.Data.OracleClient.OracleConnection.ConnectionString%2A> because an attempt to connect waits indefinitely.      > [!NOTE] >  Unlike the `Connection` object in the other .NET Framework data providers (SQL Server, OLE DB, and ODBC), <xref:System.Data.OracleClient.OracleConnection> does not support a ConnectionTimeout property. Setting a connection time-out either with a property or in the connection string has no effect, and the value returned is always zero. <xref:System.Data.OracleClient.OracleConnection> also does not support a <xref:System.Data.OracleClient.OracleConnection.Database%2A> property or a <xref:System.Data.OracleClient.OracleConnection.ChangeDatabase%2A> method.","needQuote":false,"needEscape":true,"nodes":[{"content":"You can set the amount of time a connection waits to time out by using the <ph id=\"ph1\">`Connect Timeout`</ph> or <ph id=\"ph2\">`Connection Timeout`</ph> keywords in the connection string.","pos":[0,151],"source":"You can set the amount of time a connection waits to time out by using the `Connect Timeout` or `Connection Timeout` keywords in the connection string."},{"content":"A value of 0 indicates no limit, and should be avoided in a &lt;xref:System.Data.OracleClient.OracleConnection.ConnectionString%2A&gt; because an attempt to connect waits indefinitely.","pos":[152,330],"source":" A value of 0 indicates no limit, and should be avoided in a <xref:System.Data.OracleClient.OracleConnection.ConnectionString%2A> because an attempt to connect waits indefinitely."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Unlike the <ph id=\"ph2\">`Connection`</ph> object in the other .NET Framework data providers (SQL Server, OLE DB, and ODBC), &lt;xref:System.Data.OracleClient.OracleConnection&gt; does not support a ConnectionTimeout property.","pos":[336,550],"source":"      > [!NOTE] >  Unlike the `Connection` object in the other .NET Framework data providers (SQL Server, OLE DB, and ODBC), <xref:System.Data.OracleClient.OracleConnection> does not support a ConnectionTimeout property."},{"content":"Setting a connection time-out either with a property or in the connection string has no effect, and the value returned is always zero.","pos":[551,685]},{"content":"&lt;xref:System.Data.OracleClient.OracleConnection&gt; also does not support a &lt;xref:System.Data.OracleClient.OracleConnection.Database%2A&gt; property or a &lt;xref:System.Data.OracleClient.OracleConnection.ChangeDatabase%2A&gt; method.","pos":[686,908],"source":" <xref:System.Data.OracleClient.OracleConnection> also does not support a <xref:System.Data.OracleClient.OracleConnection.Database%2A> property or a <xref:System.Data.OracleClient.OracleConnection.ChangeDatabase%2A> method."}]},{"pos":[30116,30204],"content":"The time (in seconds) to wait for a connection to open. The default value is 15 seconds.","needQuote":true,"needEscape":true,"nodes":[{"content":"The time (in seconds) to wait for a connection to open. The default value is 15 seconds.","pos":[0,88],"nodes":[{"content":"The time (in seconds) to wait for a connection to open.","pos":[0,55]},{"content":"The default value is 15 seconds.","pos":[56,88]}]}]},{"pos":[30386,30421],"content":"The value specified is less than 0.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value specified is less than 0.","pos":[0,35]}]},{"pos":[30850,31023],"content":"Creates and returns an <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object associated with the <bpt id=\"p2\">&lt;xref href=\"System.Data.OracleClient.OracleConnection\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Creates and returns an <xref href=\"System.Data.OracleClient.OracleCommand\"></xref> object associated with the <xref href=\"System.Data.OracleClient.OracleConnection\"></xref>."},{"pos":[31212,31282],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleCommand\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Data.OracleClient.OracleCommand\"></xref> object."},{"pos":[31978,31990],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[32478,32572],"content":"Gets the name of the current database or the database to be used after a connection is opened.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the name of the current database or the database to be used after a connection is opened.","pos":[0,94]}]},{"pos":[32585,33423],"content":"The Database property updates dynamically. If you change the current database using a SQL statement or the <xref:System.Data.OracleClient.OracleConnection.ChangeDatabase%2A> method, an informational message is sent and the property is updated automatically.      > [!NOTE] >  Unlike the `Connection` object in the other .NET Framework data providers (SQL Server, OLE DB, and ODBC), <xref:System.Data.OracleClient.OracleConnection> does not support a <xref:System.Data.OracleClient.OracleConnection.ConnectionTimeout%2A> property. Setting a connection time-out either with a property or in the connection string has no effect, and the value returned is always zero. <xref:System.Data.OracleClient.OracleConnection> also does not support a Database property or a <xref:System.Data.OracleClient.OracleConnection.ChangeDatabase%2A> method.","needQuote":false,"needEscape":true,"nodes":[{"content":"The Database property updates dynamically.","pos":[0,42]},{"content":"If you change the current database using a SQL statement or the &lt;xref:System.Data.OracleClient.OracleConnection.ChangeDatabase%2A&gt; method, an informational message is sent and the property is updated automatically.","pos":[43,257],"source":" If you change the current database using a SQL statement or the <xref:System.Data.OracleClient.OracleConnection.ChangeDatabase%2A> method, an informational message is sent and the property is updated automatically."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Unlike the <ph id=\"ph2\">`Connection`</ph> object in the other .NET Framework data providers (SQL Server, OLE DB, and ODBC), &lt;xref:System.Data.OracleClient.OracleConnection&gt; does not support a &lt;xref:System.Data.OracleClient.OracleConnection.ConnectionTimeout%2A&gt; property.","pos":[263,529],"source":"      > [!NOTE] >  Unlike the `Connection` object in the other .NET Framework data providers (SQL Server, OLE DB, and ODBC), <xref:System.Data.OracleClient.OracleConnection> does not support a <xref:System.Data.OracleClient.OracleConnection.ConnectionTimeout%2A> property."},{"content":"Setting a connection time-out either with a property or in the connection string has no effect, and the value returned is always zero.","pos":[530,664]},{"content":"&lt;xref:System.Data.OracleClient.OracleConnection&gt; also does not support a Database property or a &lt;xref:System.Data.OracleClient.OracleConnection.ChangeDatabase%2A&gt; method.","pos":[665,835],"source":" <xref:System.Data.OracleClient.OracleConnection> also does not support a Database property or a <xref:System.Data.OracleClient.OracleConnection.ChangeDatabase%2A> method."}]},{"pos":[33546,33685],"content":"The name of the current database or the name of the database to be used after a connection is opened. The default value is an empty string.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the current database or the name of the database to be used after a connection is opened. The default value is an empty string.","pos":[0,139],"nodes":[{"content":"The name of the current database or the name of the database to be used after a connection is opened.","pos":[0,101]},{"content":"The default value is an empty string.","pos":[102,139]}]}]},{"pos":[34176,34231],"content":"Gets the name of the Oracle server to which to connect.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the name of the Oracle server to which to connect.","pos":[0,55]}]},{"pos":[34762,34855],"content":"The name of the Oracle server to which to connect. The default value is an empty string (\"\").","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the Oracle server to which to connect. The default value is an empty string (\"\").","pos":[0,93],"nodes":[{"content":"The name of the Oracle server to which to connect.","pos":[0,50]},{"content":"The default value is an empty string (\"\").","pos":[51,93]}]}]},{"pos":[35534,35546],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[36246,36312],"content":"Enlists in the specified transaction as a distributed transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"Enlists in the specified transaction as a distributed transaction.","pos":[0,66]}]},{"pos":[36325,38013],"content":"New in ADO.NET 2.0 is support for using the <xref:System.Data.Common.DbConnection.EnlistTransaction%2A> method to enlist in a distributed transaction. Because it enlists a connection in a <xref:System.Transactions.Transaction> instance, **EnlistTransaction** takes advantage of functionality available in the <xref:System.Transactions> namespace for managing distributed transactions, making it preferable to **EnlistDistributedTransaction** for this purpose. For more information, see [Distributed Transactions](~/add/includes/ajax-current-ext-md.md).       You can continue to enlist in an existing distributed transaction using the       EnlistDistributedTransaction method if auto-enlistment is disabled. Enlisting in an existing distributed transaction ensures that, if the transaction is committed or rolled back, modifications made by the code at the data source are also committed or rolled back.       EnlistDistributedTransaction returns an exception if the <xref:System.Data.OracleClient.OracleConnection> has already started a transaction using <xref:System.Data.OracleClient.OracleConnection.BeginTransaction%2A>. However, if the transaction is a local transaction started at the data source (for example, by explicitly executing the BEGIN TRANSACTION statement using an <xref:System.Data.OracleClient.OracleCommand> object), EnlistDistributedTransaction rolls back the local transaction and enlists in the existing distributed transaction as requested. You will not receive notice that the local transaction was rolled back, and are responsible for managing any local transactions not started using <xref:System.Data.OracleClient.OracleConnection.BeginTransaction%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"New in ADO.NET 2.0 is support for using the &lt;xref:System.Data.Common.DbConnection.EnlistTransaction%2A&gt; method to enlist in a distributed transaction.","pos":[0,150],"source":"New in ADO.NET 2.0 is support for using the <xref:System.Data.Common.DbConnection.EnlistTransaction%2A> method to enlist in a distributed transaction."},{"content":"Because it enlists a connection in a &lt;xref:System.Transactions.Transaction&gt; instance, <bpt id=\"p1\">**</bpt>EnlistTransaction<ept id=\"p1\">**</ept> takes advantage of functionality available in the &lt;xref:System.Transactions&gt; namespace for managing distributed transactions, making it preferable to <bpt id=\"p2\">**</bpt>EnlistDistributedTransaction<ept id=\"p2\">**</ept> for this purpose.","pos":[151,459],"source":" Because it enlists a connection in a <xref:System.Transactions.Transaction> instance, **EnlistTransaction** takes advantage of functionality available in the <xref:System.Transactions> namespace for managing distributed transactions, making it preferable to **EnlistDistributedTransaction** for this purpose."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Distributed Transactions<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[460,552],"source":" For more information, see [Distributed Transactions](~/add/includes/ajax-current-ext-md.md)."},{"content":"You can continue to enlist in an existing distributed transaction using the       EnlistDistributedTransaction method if auto-enlistment is disabled.","pos":[559,708]},{"content":"Enlisting in an existing distributed transaction ensures that, if the transaction is committed or rolled back, modifications made by the code at the data source are also committed or rolled back.","pos":[709,904]},{"content":"EnlistDistributedTransaction returns an exception if the &lt;xref:System.Data.OracleClient.OracleConnection&gt; has already started a transaction using &lt;xref:System.Data.OracleClient.OracleConnection.BeginTransaction%2A&gt;.","pos":[911,1126],"source":"       EnlistDistributedTransaction returns an exception if the <xref:System.Data.OracleClient.OracleConnection> has already started a transaction using <xref:System.Data.OracleClient.OracleConnection.BeginTransaction%2A>."},{"content":"However, if the transaction is a local transaction started at the data source (for example, by explicitly executing the BEGIN TRANSACTION statement using an &lt;xref:System.Data.OracleClient.OracleCommand&gt; object), EnlistDistributedTransaction rolls back the local transaction and enlists in the existing distributed transaction as requested.","pos":[1127,1466],"source":" However, if the transaction is a local transaction started at the data source (for example, by explicitly executing the BEGIN TRANSACTION statement using an <xref:System.Data.OracleClient.OracleCommand> object), EnlistDistributedTransaction rolls back the local transaction and enlists in the existing distributed transaction as requested."},{"content":"You will not receive notice that the local transaction was rolled back, and are responsible for managing any local transactions not started using &lt;xref:System.Data.OracleClient.OracleConnection.BeginTransaction%2A&gt;.","pos":[1467,1682],"source":" You will not receive notice that the local transaction was rolled back, and are responsible for managing any local transactions not started using <xref:System.Data.OracleClient.OracleConnection.BeginTransaction%2A>."}]},{"pos":[38263,38369],"content":"A reference to an existing <bpt id=\"p1\">&lt;xref href=\"System.EnterpriseServices.ITransaction\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> in which to enlist.","needQuote":true,"needEscape":true,"source":"A reference to an existing <xref href=\"System.EnterpriseServices.ITransaction\"></xref> in which to enlist."},{"pos":[39018,39084],"content":"Enlists in the specified transaction as a distributed transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"Enlists in the specified transaction as a distributed transaction.","pos":[0,66]}]},{"pos":[39097,39933],"content":"New in ADO.NET 2.0 is support for using the       <xref:System.Data.Common.DbConnection.EnlistTransaction%2A> method to enlist in a distributed transaction. Because it enlists a connection in a <xref:System.Transactions.Transaction> instance, **EnlistTransaction** takes advantage of functionality available in the <xref:System.Transactions> namespace for managing distributed transactions, making it preferable to **EnlistDistributedTransaction**, which uses a **System.EnterpriseServices.ITransaction** object. It also has slightly different semantics: once a connection is explicitly enlisted on a transaction, it cannot be unenlisted or enlisted in another transaction until the first transaction finishes. For more information about distributed transactions, see [Distributed Transactions](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"New in ADO.NET 2.0 is support for using the       &lt;xref:System.Data.Common.DbConnection.EnlistTransaction%2A&gt; method to enlist in a distributed transaction.","pos":[0,156],"source":"New in ADO.NET 2.0 is support for using the       <xref:System.Data.Common.DbConnection.EnlistTransaction%2A> method to enlist in a distributed transaction."},{"content":"Because it enlists a connection in a &lt;xref:System.Transactions.Transaction&gt; instance, <bpt id=\"p1\">**</bpt>EnlistTransaction<ept id=\"p1\">**</ept> takes advantage of functionality available in the &lt;xref:System.Transactions&gt; namespace for managing distributed transactions, making it preferable to <bpt id=\"p2\">**</bpt>EnlistDistributedTransaction<ept id=\"p2\">**</ept>, which uses a <bpt id=\"p3\">**</bpt>System.EnterpriseServices.ITransaction<ept id=\"p3\">**</ept> object.","pos":[157,512],"source":" Because it enlists a connection in a <xref:System.Transactions.Transaction> instance, **EnlistTransaction** takes advantage of functionality available in the <xref:System.Transactions> namespace for managing distributed transactions, making it preferable to **EnlistDistributedTransaction**, which uses a **System.EnterpriseServices.ITransaction** object."},{"content":"It also has slightly different semantics: once a connection is explicitly enlisted on a transaction, it cannot be unenlisted or enlisted in another transaction until the first transaction finishes.","pos":[513,710]},{"content":"For more information about distributed transactions, see <bpt id=\"p1\">[</bpt>Distributed Transactions<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[711,834],"source":" For more information about distributed transactions, see [Distributed Transactions](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[40145,40244],"content":"A reference to an existing <bpt id=\"p1\">&lt;xref href=\"System.Transactions.Transaction\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> in which to enlist.","needQuote":true,"needEscape":true,"source":"A reference to an existing <xref href=\"System.Transactions.Transaction\"></xref> in which to enlist."},{"pos":[40743,40861],"content":"Returns schema information for the data source of this <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleConnection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns schema information for the data source of this <xref href=\"System.Data.OracleClient.OracleConnection\"></xref>."},{"pos":[41021,41099],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains schema information.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.DataTable\"></xref> that contains schema information."},{"pos":[41638,41803],"content":"Returns schema information for the data source of this <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleConnection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> using the specified string for the schema name.","needQuote":true,"needEscape":true,"source":"Returns schema information for the data source of this <xref href=\"System.Data.OracleClient.OracleConnection\"></xref> using the specified string for the schema name."},{"pos":[41816,42568],"content":"Queries using GetSchema are case sensitive. Because of Oracle's treatment of cases when a schema is first created, this can lead to unexpected results.       If the schema was created without quotes`,` Oracle stores the object name in upper case. If the schema was created with quotes, Oracle stores the object name in the casing provided.       For example, suppose that you create a table called MyTable, using one of the following two statements:       `CREATE TABLE MyTable ...`       `CREATE TABLE \"MyTable\" ...`       To retrieve information about this table via the **GetSchema** method in the first case, you would have to pass \"MYTABLE\" in as an argument. In the second case, you would have to pass \"MyTable\" in as an argument.","needQuote":false,"needEscape":true,"nodes":[{"content":"Queries using GetSchema are case sensitive.","pos":[0,43]},{"content":"Because of Oracle's treatment of cases when a schema is first created, this can lead to unexpected results.","pos":[44,151]},{"content":"If the schema was created without quotes<ph id=\"ph1\">`,`</ph> Oracle stores the object name in upper case.","pos":[158,246],"source":"       If the schema was created without quotes`,` Oracle stores the object name in upper case."},{"content":"If the schema was created with quotes, Oracle stores the object name in the casing provided.","pos":[247,339]},{"content":"For example, suppose that you create a table called MyTable, using one of the following two statements:       <ph id=\"ph1\">`CREATE TABLE MyTable ...`</ph>       <ph id=\"ph2\">`CREATE TABLE \"MyTable\" ...`</ph>       To retrieve information about this table via the <bpt id=\"p1\">**</bpt>GetSchema<ept id=\"p1\">**</ept> method in the first case, you would have to pass \"MYTABLE\" in as an argument.","pos":[346,664],"source":"       For example, suppose that you create a table called MyTable, using one of the following two statements:       `CREATE TABLE MyTable ...`       `CREATE TABLE \"MyTable\" ...`       To retrieve information about this table via the **GetSchema** method in the first case, you would have to pass \"MYTABLE\" in as an argument."},{"content":"In the second case, you would have to pass \"MyTable\" in as an argument.","pos":[665,736]}]},{"pos":[42752,42795],"content":"Specifies the name of the schema to return.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies the name of the schema to return.","pos":[0,43]}]},{"pos":[42861,42939],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains schema information.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.DataTable\"></xref> that contains schema information."},{"pos":[43113,43162],"content":"<ph id=\"ph1\">&lt;code&gt;collectionName&lt;/code&gt;</ph> is specified as null.","needQuote":true,"needEscape":true,"source":"<code>collectionName</code> is specified as null."},{"pos":[43678,43901],"content":"Returns schema information for the data source of this <bpt id=\"p1\">&lt;xref href=\"System.Data.OracleClient.OracleConnection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> using the specified string for the schema name and the specified string array for the restriction values.","needQuote":true,"needEscape":true,"source":"Returns schema information for the data source of this <xref href=\"System.Data.OracleClient.OracleConnection\"></xref> using the specified string for the schema name and the specified string array for the restriction values."},{"pos":[43914,45722],"content":"The `restrictionValues` parameter can supply n depth of values which are specified by the restrictions collection for a specific collection. In order to set values on a given restriction, and not set the values of other restrictions, you need to set the preceding restrictions to null and then put the appropriate value in for the restriction that you would like to specify a value for.       An example of this is the \"Tables\" collection. If the \"Tables\" collection has 3 restrictions: database, owner, and table name; and you want to get back only the tables associated with the owner \"Carl\", then you would need to pass in the following values (at a minimum): null, \"Carl\". If a restriction value is not passed in, the default values are used for that restriction. This is the same mapping as passing in null, which is different than passing in an empty string for the parameter value. In that case, the empty string (\"\") is considered to be the value for the specified parameter.       Queries using <xref:System.Data.OracleClient.OracleConnection.GetSchema%2A> are case sensitive. Because of Oracle's treatment of cases when a schema is first created, this can lead to unexpected results.       If the schema was created without quotes`,` Oracle stores the object name in upper case. If the schema was created with quotes, Oracle stores the object name in the casing provided.       For example, suppose that you create a table called MyTable, using one of the following two statements:       `CREATE TABLE MyTable ...`       `CREATE TABLE \"MyTable\" ...`       To retrieve information about this table via the **GetSchema** method in the first case, you would have to pass \"MYTABLE\" in as an argument. In the second case, you would have to pass \"MyTable\" in as an argument.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <ph id=\"ph1\">`restrictionValues`</ph> parameter can supply n depth of values which are specified by the restrictions collection for a specific collection.","pos":[0,140],"source":"The `restrictionValues` parameter can supply n depth of values which are specified by the restrictions collection for a specific collection."},{"content":"In order to set values on a given restriction, and not set the values of other restrictions, you need to set the preceding restrictions to null and then put the appropriate value in for the restriction that you would like to specify a value for.","pos":[141,386]},{"content":"An example of this is the \"Tables\" collection.","pos":[393,439]},{"content":"If the \"Tables\" collection has 3 restrictions: database, owner, and table name; and you want to get back only the tables associated with the owner \"Carl\", then you would need to pass in the following values (at a minimum): null, \"Carl\".","pos":[440,676]},{"content":"If a restriction value is not passed in, the default values are used for that restriction.","pos":[677,767]},{"content":"This is the same mapping as passing in null, which is different than passing in an empty string for the parameter value.","pos":[768,888]},{"content":"In that case, the empty string (\"\") is considered to be the value for the specified parameter.","pos":[889,983]},{"content":"Queries using &lt;xref:System.Data.OracleClient.OracleConnection.GetSchema%2A&gt; are case sensitive.","pos":[990,1085],"source":"       Queries using <xref:System.Data.OracleClient.OracleConnection.GetSchema%2A> are case sensitive."},{"content":"Because of Oracle's treatment of cases when a schema is first created, this can lead to unexpected results.","pos":[1086,1193]},{"content":"If the schema was created without quotes<ph id=\"ph1\">`,`</ph> Oracle stores the object name in upper case.","pos":[1200,1288],"source":"       If the schema was created without quotes`,` Oracle stores the object name in upper case."},{"content":"If the schema was created with quotes, Oracle stores the object name in the casing provided.","pos":[1289,1381]},{"content":"For example, suppose that you create a table called MyTable, using one of the following two statements:       <ph id=\"ph1\">`CREATE TABLE MyTable ...`</ph>       <ph id=\"ph2\">`CREATE TABLE \"MyTable\" ...`</ph>       To retrieve information about this table via the <bpt id=\"p1\">**</bpt>GetSchema<ept id=\"p1\">**</ept> method in the first case, you would have to pass \"MYTABLE\" in as an argument.","pos":[1388,1706],"source":"       For example, suppose that you create a table called MyTable, using one of the following two statements:       `CREATE TABLE MyTable ...`       `CREATE TABLE \"MyTable\" ...`       To retrieve information about this table via the **GetSchema** method in the first case, you would have to pass \"MYTABLE\" in as an argument."},{"content":"In the second case, you would have to pass \"MyTable\" in as an argument.","pos":[1707,1778]}]},{"pos":[45934,45977],"content":"Specifies the name of the schema to return.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies the name of the schema to return.","pos":[0,43]}]},{"pos":[46053,46106],"content":"A set of restriction values for the requested schema.","needQuote":true,"needEscape":true,"nodes":[{"content":"A set of restriction values for the requested schema.","pos":[0,53]}]},{"pos":[46172,46250],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Data.DataTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains schema information.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Data.DataTable\"></xref> that contains schema information."},{"pos":[46424,46473],"content":"<ph id=\"ph1\">&lt;code&gt;collectionName&lt;/code&gt;</ph> is specified as null.","needQuote":true,"needEscape":true,"source":"<code>collectionName</code> is specified as null."},{"pos":[46885,46948],"content":"Occurs when Oracle sends a warning or an informational message.","needQuote":true,"needEscape":true,"nodes":[{"content":"Occurs when Oracle sends a warning or an informational message.","pos":[0,63]}]},{"pos":[46961,47617],"content":"Because the .NET Framework Data Provider for Oracle uses the Oracle Call Interface (OCI), whenever the data provider receives a Success With Info message, an InfoMessage event is generated. An example would be creating a stored procedure that contains a syntax error. The call to the <xref:System.Data.OracleClient.OracleCommand.ExecuteNonQuery%2A> method would succeed. However an InfoMessage event would be generated informing you of the syntax error.       Clients who want to process warnings or informational messages sent by the server should create an <xref:System.Data.OracleClient.OracleInfoMessageEventHandler> delegate to listen to this event.","needQuote":false,"needEscape":true,"nodes":[{"content":"Because the .NET Framework Data Provider for Oracle uses the Oracle Call Interface (OCI), whenever the data provider receives a Success With Info message, an InfoMessage event is generated. An example would be creating a stored procedure that contains a syntax error. The call to the <xref:System.Data.OracleClient.OracleCommand.ExecuteNonQuery%2A> method would succeed. However an InfoMessage event would be generated informing you of the syntax error.       Clients who want to process warnings or informational messages sent by the server should create an <xref:System.Data.OracleClient.OracleInfoMessageEventHandler> delegate to listen to this event.","pos":[0,654],"nodes":[{"content":"Because the .NET Framework Data Provider for Oracle uses the Oracle Call Interface (OCI), whenever the data provider receives a Success With Info message, an InfoMessage event is generated.","pos":[0,189]},{"content":"An example would be creating a stored procedure that contains a syntax error.","pos":[190,267]},{"content":"The call to the &lt;xref:System.Data.OracleClient.OracleCommand.ExecuteNonQuery%2A&gt; method would succeed.","pos":[268,370],"source":" The call to the <xref:System.Data.OracleClient.OracleCommand.ExecuteNonQuery%2A> method would succeed."},{"content":"However an InfoMessage event would be generated informing you of the syntax error.","pos":[371,453]},{"content":"Clients who want to process warnings or informational messages sent by the server should create an &lt;xref:System.Data.OracleClient.OracleInfoMessageEventHandler&gt; delegate to listen to this event.","pos":[460,654],"source":"       Clients who want to process warnings or informational messages sent by the server should create an <xref:System.Data.OracleClient.OracleInfoMessageEventHandler> delegate to listen to this event."}]}]},{"pos":[47821,47833],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[48234,48378],"content":"Opens a connection to a database with the property settings specified by the <xref:System.Data.OracleClient.OracleConnection.ConnectionString*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Opens a connection to a database with the property settings specified by the &lt;xref:System.Data.OracleClient.OracleConnection.ConnectionString*&gt;.","pos":[0,144],"source":"Opens a connection to a database with the property settings specified by the <xref:System.Data.OracleClient.OracleConnection.ConnectionString*>."}]},{"pos":[48391,48851],"content":"The <xref:System.Data.OracleClient.OracleConnection> draws an open connection from the connection pool if one is available. Otherwise, it establishes a new connection to the database.      > [!NOTE] >  If the <xref:System.Data.OracleClient.OracleConnection> goes out of scope, the connection it represents does not close automatically. Therefore, you must explicitly close the connection by calling <xref:System.Data.OracleClient.OracleConnection.Close%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Data.OracleClient.OracleConnection&gt; draws an open connection from the connection pool if one is available.","pos":[0,123],"source":"The <xref:System.Data.OracleClient.OracleConnection> draws an open connection from the connection pool if one is available."},{"content":"Otherwise, it establishes a new connection to the database.","pos":[124,183]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If the &lt;xref:System.Data.OracleClient.OracleConnection&gt; goes out of scope, the connection it represents does not close automatically.","pos":[189,335],"source":"      > [!NOTE] >  If the <xref:System.Data.OracleClient.OracleConnection> goes out of scope, the connection it represents does not close automatically."},{"content":"Therefore, you must explicitly close the connection by calling &lt;xref:System.Data.OracleClient.OracleConnection.Close%2A&gt;.","pos":[336,457],"source":" Therefore, you must explicitly close the connection by calling <xref:System.Data.OracleClient.OracleConnection.Close%2A>."}]},{"pos":[49109,49136],"content":"The connection is not open.","needQuote":true,"needEscape":true,"nodes":[{"content":"The connection is not open.","pos":[0,27]}]},{"pos":[49263,49290],"content":"Cannot change the database.","needQuote":true,"needEscape":true,"nodes":[{"content":"Cannot change the database.","pos":[0,27]}]},{"pos":[49715,49799],"content":"Gets a string containing the version of the server to which the client is connected.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a string containing the version of the server to which the client is connected.","pos":[0,84]}]},{"pos":[49811,49989],"content":"The ServerVersion property is in Oracle version format. For example, the format for an Oracle8 release is a string in the form \"8.1.7.0.0 Oracle8 Release 8.1.7.0.0 - Production.\"","needQuote":true,"needEscape":true,"nodes":[{"content":"The ServerVersion property is in Oracle version format. For example, the format for an Oracle8 release is a string in the form \"8.1.7.0.0 Oracle8 Release 8.1.7.0.0 - Production.\"","pos":[0,178],"nodes":[{"content":"The ServerVersion property is in Oracle version format.","pos":[0,55]},{"content":"For example, the format for an Oracle8 release is a string in the form \"8.1.7.0.0 Oracle8 Release 8.1.7.0.0 - Production.\"","pos":[56,178]}]}]},{"pos":[50515,50551],"content":"The version of the connected server.","needQuote":true,"needEscape":true,"nodes":[{"content":"The version of the connected server.","pos":[0,36]}]},{"pos":[50745,50770],"content":"The connection is closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The connection is closed.","pos":[0,25]}]},{"pos":[51155,51196],"content":"Gets the current state of the connection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the current state of the connection.","pos":[0,41]}]},{"pos":[51209,51538],"content":"The allowed state changes are:      -   From `Closed` to `Open`, using the `Open` method of the <xref:System.Data.OracleClient.OracleConnection> object.      -   From `Open` to `Closed`, using the <xref:System.Data.OracleClient.OracleConnection.Close%2A> method of the <xref:System.Data.OracleClient.OracleConnection> object.","needQuote":false,"needEscape":true,"nodes":[{"content":"The allowed state changes are:      -   From <ph id=\"ph1\">`Closed`</ph> to <ph id=\"ph2\">`Open`</ph>, using the <ph id=\"ph3\">`Open`</ph> method of the &lt;xref:System.Data.OracleClient.OracleConnection&gt; object.","pos":[0,152],"source":"The allowed state changes are:      -   From `Closed` to `Open`, using the `Open` method of the <xref:System.Data.OracleClient.OracleConnection> object."},{"content":"-   From <ph id=\"ph1\">`Open`</ph> to <ph id=\"ph2\">`Closed`</ph>, using the &lt;xref:System.Data.OracleClient.OracleConnection.Close%2A&gt; method of the &lt;xref:System.Data.OracleClient.OracleConnection&gt; object.","pos":[158,325],"source":"      -   From `Open` to `Closed`, using the <xref:System.Data.OracleClient.OracleConnection.Close%2A> method of the <xref:System.Data.OracleClient.OracleConnection> object."}]},{"pos":[52146,52312],"content":"A bitwise combination of the <xref href=\"System.Data.ConnectionState\"></xref> values. The default is <xref uid=\"langword_csharp_Closed\" name=\"Closed\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"A bitwise combination of the <bpt id=\"p1\">&lt;xref href=\"System.Data.ConnectionState\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","pos":[0,85],"source":"A bitwise combination of the <xref href=\"System.Data.ConnectionState\"></xref> values."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Closed\" name=\"Closed\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[86,166],"source":" The default is <xref uid=\"langword_csharp_Closed\" name=\"Closed\" href=\"\"></xref>."}]},{"pos":[52883,52943],"content":"Creates a new object that is a copy of the current instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a new object that is a copy of the current instance.","pos":[0,60]}]},{"pos":[52955,53151],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.OracleClient.OracleConnection> instance is cast to an <xref:System.ICloneable> interface.","needQuote":true,"needEscape":true,"nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.OracleClient.OracleConnection> instance is cast to an <xref:System.ICloneable> interface.","pos":[0,196],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the &lt;xref:System.Data.OracleClient.OracleConnection&gt; instance is cast to an &lt;xref:System.ICloneable&gt; interface.","pos":[60,196],"source":" It can be used only when the <xref:System.Data.OracleClient.OracleConnection> instance is cast to an <xref:System.ICloneable> interface."}]}]},{"pos":[53279,53325],"content":"A new object that is a copy of this instance..","needQuote":true,"needEscape":true,"nodes":[{"content":"A new object that is a copy of this instance..","pos":[0,46]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Data.OracleClient.OracleConnection\n  id: OracleConnection\n  children:\n  - System.Data.OracleClient.OracleConnection.#ctor\n  - System.Data.OracleClient.OracleConnection.#ctor(System.String)\n  - System.Data.OracleClient.OracleConnection.BeginDbTransaction(System.Data.IsolationLevel)\n  - System.Data.OracleClient.OracleConnection.BeginTransaction\n  - System.Data.OracleClient.OracleConnection.BeginTransaction(System.Data.IsolationLevel)\n  - System.Data.OracleClient.OracleConnection.ChangeDatabase(System.String)\n  - System.Data.OracleClient.OracleConnection.ClearAllPools\n  - System.Data.OracleClient.OracleConnection.ClearPool(System.Data.OracleClient.OracleConnection)\n  - System.Data.OracleClient.OracleConnection.Close\n  - System.Data.OracleClient.OracleConnection.ConnectionString\n  - System.Data.OracleClient.OracleConnection.ConnectionTimeout\n  - System.Data.OracleClient.OracleConnection.CreateCommand\n  - System.Data.OracleClient.OracleConnection.CreateDbCommand\n  - System.Data.OracleClient.OracleConnection.Database\n  - System.Data.OracleClient.OracleConnection.DataSource\n  - System.Data.OracleClient.OracleConnection.Dispose(System.Boolean)\n  - System.Data.OracleClient.OracleConnection.EnlistDistributedTransaction(System.EnterpriseServices.ITransaction)\n  - System.Data.OracleClient.OracleConnection.EnlistTransaction(System.Transactions.Transaction)\n  - System.Data.OracleClient.OracleConnection.GetSchema\n  - System.Data.OracleClient.OracleConnection.GetSchema(System.String)\n  - System.Data.OracleClient.OracleConnection.GetSchema(System.String,System.String[])\n  - System.Data.OracleClient.OracleConnection.InfoMessage\n  - System.Data.OracleClient.OracleConnection.Open\n  - System.Data.OracleClient.OracleConnection.ServerVersion\n  - System.Data.OracleClient.OracleConnection.State\n  - System.Data.OracleClient.OracleConnection.System#ICloneable#Clone\n  langs:\n  - csharp\n  name: OracleConnection\n  nameWithType: OracleConnection\n  fullName: System.Data.OracleClient.OracleConnection\n  type: Class\n  summary: Represents an open connection to a database. This class cannot be inherited.\n  remarks: \"This type is deprecated and will be removed in a future version of the .NET Framework. For more information, see [Oracle and ADO.NET](~/add/includes/ajax-current-ext-md.md).  \\n  \\n An OracleConnection object represents a unique connection to an Oracle database. In the case of a client/server database system, it is equivalent to a network connection to the server.  \\n  \\n An application that creates an instance of the OracleConnection object can set declarative or imperative security demands that require all direct and indirect callers to have adequate permission to the code. OracleConnection creates security demands by using the <xref:System.Data.OracleClient.OraclePermission> object. Users can verify that their code has adequate permissions by using the <xref:System.Data.OracleClient.OraclePermissionAttribute> object. Users and administrators can also use the Code Access Security Policy Tool (Caspol.exe) to modify security policy at the machine, user, and enterprise levels. For more information, see [Security](~/add/includes/ajax-current-ext-md.md).  \\n  \\n> [!NOTE]\\n>  Unlike the **Connection** object in the other .NET Framework data providers (SQL Server, OLE DB, and ODBC), OracleConnection does not support a <xref:System.Data.OracleClient.OracleConnection.ConnectionTimeout%2A> property. Setting a connection time-out either as a property or in the connection string has no effect, and the value returned is always zero. OracleConnection also does not support a <xref:System.Data.OracleClient.OracleConnection.Database%2A> property or a <xref:System.Data.OracleClient.OracleConnection.ChangeDatabase%2A> method.  \\n  \\n If the OracleConnection object goes out of scope, it remains open. Therefore, you should always close OracleConnection objects by calling <xref:System.Data.OracleClient.OracleConnection.Close%2A> or **Dispose**, or by using the OracleConnection object within a `Using` statement. Otherwise, the garbage collection might not free them immediately. Such delays can cause errors if the maximum number of connections is reached while a number of connections are waiting to be deleted by the garbage collector. By contrast, closing the connections by calling <xref:System.Data.OracleClient.OracleConnection.Close%2A> uses native resources more efficiently, enhancing scalability and improving overall application performance. To ensure that connections are always closed, open the connection inside of a `Using` block.  \\n  \\n> [!NOTE]\\n>  To deploy high-performance applications, you often need to use connection pooling. However, when you use the .NET Framework Data Provider for Oracle, you do not need to enable connection pooling because the provider manages this automatically.\"\n  example:\n  - \"The following example creates an <xref:System.Data.OracleClient.OracleCommand> and an OracleConnection. The OracleConnection is opened and set as the <xref:System.Data.OracleClient.OracleCommand.Connection%2A?displayProperty=fullName> property. The example then calls <xref:System.Data.OracleClient.OracleCommand.ExecuteNonQuery%2A>, and closes the connection. To accomplish this, the <xref:System.Data.OracleClient.OracleCommand.ExecuteNonQuery%2A> is passed a connection string and a query string that is an SQL INSERT statement.  \\n  \\n [!code-vb[Classic WebData OracleConnection#1](~/add/codesnippet/visualbasic/t-system.data.oracleclie_5_1.vb)]\\n [!code-cs[Classic WebData OracleConnection#1](~/add/codesnippet/csharp/t-system.data.oracleclie_5_1.cs)]\"\n  syntax:\n    content: >-\n      [System.ComponentModel.DefaultEvent(\"InfoMessage\")]\n\n      [System.Obsolete(\"OracleConnection has been deprecated. http://go.microsoft.com/fwlink/?LinkID=144260\", false)]\n\n      public sealed class OracleConnection : System.Data.Common.DbConnection, ICloneable\n  inheritance:\n  - System.Object\n  - System.MarshalByRefObject\n  - System.ComponentModel.Component\n  - System.Data.Common.DbConnection\n  implements:\n  - System.ICloneable\n  inheritedMembers:\n  - System.ComponentModel.Component.CanRaiseEvents\n  - System.ComponentModel.Component.Container\n  - System.ComponentModel.Component.DesignMode\n  - System.ComponentModel.Component.Dispose\n  - System.ComponentModel.Component.Disposed\n  - System.ComponentModel.Component.Events\n  - System.ComponentModel.Component.GetService(System.Type)\n  - System.ComponentModel.Component.Site\n  - System.ComponentModel.Component.ToString\n  - System.Data.Common.DbConnection.DbProviderFactory\n  - System.Data.Common.DbConnection.OnStateChange(System.Data.StateChangeEventArgs)\n  - System.Data.Common.DbConnection.OpenAsync\n  - System.Data.Common.DbConnection.OpenAsync(System.Threading.CancellationToken)\n  - System.Data.Common.DbConnection.StateChange\n  - System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction\n  - System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction(System.Data.IsolationLevel)\n  - System.Data.Common.DbConnection.System#Data#IDbConnection#CreateCommand\n  - System.MarshalByRefObject.CreateObjRef(System.Type)\n  - System.MarshalByRefObject.GetLifetimeService\n  - System.MarshalByRefObject.InitializeLifetimeService\n  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleConnection.#ctor\n  id: '#ctor'\n  parent: System.Data.OracleClient.OracleConnection\n  langs:\n  - csharp\n  name: OracleConnection()\n  nameWithType: OracleConnection.OracleConnection()\n  fullName: System.Data.OracleClient.OracleConnection.OracleConnection()\n  type: Constructor\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Initializes a new instance of the <xref href=\"System.Data.OracleClient.OracleConnection\"></xref>.\n  remarks: ''\n  example:\n  - \"The following example creates and opens an <xref:System.Data.OracleClient.OracleConnection>.  \\n  \\n [!code-vb[Classic WebData OracleConnection.OracleConnection1#1](~/add/codesnippet/visualbasic/m-system.data.oracleclie_0_1.vb)]\\n [!code-cs[Classic WebData OracleConnection.OracleConnection1#1](~/add/codesnippet/csharp/m-system.data.oracleclie_0_1.cs)]\"\n  syntax:\n    content: public OracleConnection ();\n    parameters: []\n  overload: System.Data.OracleClient.OracleConnection.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleConnection.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Data.OracleClient.OracleConnection\n  langs:\n  - csharp\n  name: OracleConnection(String)\n  nameWithType: OracleConnection.OracleConnection(String)\n  fullName: System.Data.OracleClient.OracleConnection.OracleConnection(String)\n  type: Constructor\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Initializes a new instance of the <xref href=\"System.Data.OracleClient.OracleConnection\"></xref> class with the specified connection string.\n  remarks: ''\n  example:\n  - \"The following example creates and opens an <xref:System.Data.OracleClient.OracleConnection>.  \\n  \\n [!code-vb[Classic WebData OracleConnection.OracleConnection1#1](~/add/codesnippet/visualbasic/m-system.data.oracleclie_9_1.vb)]\\n [!code-cs[Classic WebData OracleConnection.OracleConnection1#1](~/add/codesnippet/csharp/m-system.data.oracleclie_9_1.cs)]\"\n  syntax:\n    content: public OracleConnection (string connectionString);\n    parameters:\n    - id: connectionString\n      type: System.String\n      description: The connection used to open the database.\n  overload: System.Data.OracleClient.OracleConnection.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleConnection.BeginDbTransaction(System.Data.IsolationLevel)\n  id: BeginDbTransaction(System.Data.IsolationLevel)\n  parent: System.Data.OracleClient.OracleConnection\n  langs:\n  - csharp\n  name: BeginDbTransaction(IsolationLevel)\n  nameWithType: OracleConnection.BeginDbTransaction(IsolationLevel)\n  fullName: System.Data.OracleClient.OracleConnection.BeginDbTransaction(IsolationLevel)\n  type: Method\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  syntax:\n    content: protected override System.Data.Common.DbTransaction BeginDbTransaction (System.Data.IsolationLevel isolationLevel);\n    parameters:\n    - id: isolationLevel\n      type: System.Data.IsolationLevel\n      description: To be added.\n    return:\n      type: System.Data.Common.DbTransaction\n      description: To be added.\n  overload: System.Data.OracleClient.OracleConnection.BeginDbTransaction*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleConnection.BeginTransaction\n  id: BeginTransaction\n  parent: System.Data.OracleClient.OracleConnection\n  langs:\n  - csharp\n  name: BeginTransaction()\n  nameWithType: OracleConnection.BeginTransaction()\n  fullName: System.Data.OracleClient.OracleConnection.BeginTransaction()\n  type: Method\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Begins a transaction at the database.\n  remarks: \"To commit or roll back the transaction, you must explicitly use the <xref:System.Data.OracleClient.OracleTransaction.Commit%2A> or <xref:System.Data.OracleClient.OracleTransaction.Rollback%2A> methods.  \\n  \\n To ensure that the .NET Framework Data Provider for Oracle transaction management model performs correctly, avoid using other transaction management models, such as those provided by the database.  \\n  \\n> [!NOTE]\\n>  If you do not specify an isolation level, the default isolation level is used. To specify an isolation level with the BeginTransaction method, use the <xref:System.Data.OracleClient.OracleConnection.BeginTransaction%2A> overload.\"\n  example:\n  - \"The following example creates an <xref:System.Data.OracleClient.OracleConnection> and an <xref:System.Data.OracleClient.OracleTransaction>. It also demonstrates how to use the BeginTransaction, <xref:System.Data.OracleClient.OracleTransaction.Commit%2A>, and <xref:System.Data.OracleClient.OracleTransaction.Rollback%2A> methods.  \\n  \\n [!code-vb[Classic WebData OracleConnection.BeginTransaction#1](~/add/codesnippet/visualbasic/m-system.data.oracleclie_11_1.vb)]\\n [!code-cs[Classic WebData OracleConnection.BeginTransaction#1](~/add/codesnippet/csharp/m-system.data.oracleclie_11_1.cs)]\"\n  syntax:\n    content: public System.Data.OracleClient.OracleTransaction BeginTransaction ();\n    parameters: []\n    return:\n      type: System.Data.OracleClient.OracleTransaction\n      description: An object representing the new transaction.\n  overload: System.Data.OracleClient.OracleConnection.BeginTransaction*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: Parallel transactions are not supported.\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleConnection.BeginTransaction(System.Data.IsolationLevel)\n  id: BeginTransaction(System.Data.IsolationLevel)\n  parent: System.Data.OracleClient.OracleConnection\n  langs:\n  - csharp\n  name: BeginTransaction(IsolationLevel)\n  nameWithType: OracleConnection.BeginTransaction(IsolationLevel)\n  fullName: System.Data.OracleClient.OracleConnection.BeginTransaction(IsolationLevel)\n  type: Method\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Begins a transaction at the database with the specified <xref href=\"System.Data.IsolationLevel\"></xref> value.\n  remarks: \"To commit or roll back the transaction, you must explicitly use the <xref:System.Data.OracleClient.OracleTransaction.Commit%2A> or <xref:System.Data.OracleClient.OracleTransaction.Rollback%2A> methods.  \\n  \\n To ensure that the .NET Framework Data Provider for Oracle transaction management model performs correctly, avoid using other transaction management models, such as those provided by the database.\"\n  example:\n  - \"The following example creates an <xref:System.Data.OracleClient.OracleConnection> and an <xref:System.Data.OracleClient.OracleTransaction>. It also demonstrates how to use the <xref:System.Data.OracleClient.OracleConnection.BeginTransaction%2A>, <xref:System.Data.OracleClient.OracleTransaction.Commit%2A>, and <xref:System.Data.OracleClient.OracleTransaction.Rollback%2A> methods.  \\n  \\n [!code-vb[Classic WebData OracleConnection.BeginTransaction#1](~/add/codesnippet/visualbasic/12fabef6-623c-46b8-b1c3-_1.vb)]\\n [!code-cs[Classic WebData OracleConnection.BeginTransaction#1](~/add/codesnippet/csharp/12fabef6-623c-46b8-b1c3-_1.cs)]\"\n  syntax:\n    content: public System.Data.OracleClient.OracleTransaction BeginTransaction (System.Data.IsolationLevel il);\n    parameters:\n    - id: il\n      type: System.Data.IsolationLevel\n      description: The transaction isolation level for this connection.\n    return:\n      type: System.Data.OracleClient.OracleTransaction\n      description: An object representing the new transaction.\n  overload: System.Data.OracleClient.OracleConnection.BeginTransaction*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: Parallel transactions are not supported.\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleConnection.ChangeDatabase(System.String)\n  id: ChangeDatabase(System.String)\n  parent: System.Data.OracleClient.OracleConnection\n  langs:\n  - csharp\n  name: ChangeDatabase(String)\n  nameWithType: OracleConnection.ChangeDatabase(String)\n  fullName: System.Data.OracleClient.OracleConnection.ChangeDatabase(String)\n  type: Method\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Changes the current database for an open <xref href=\"System.Data.OracleClient.OracleConnection\"></xref>.\n  remarks: \"The `value` parameter must contain a valid database name, and cannot contain a null value, an empty string (\\\"\\\"), or a string with only blank characters.  \\n  \\n> [!NOTE]\\n>  Unlike the **Connection** object in the other .NET Framework data providers (SQL Server, OLE DB, and ODBC), <xref:System.Data.OracleClient.OracleConnection> does not support a <xref:System.Data.OracleClient.OracleConnection.ConnectionTimeout%2A> property. Setting a connection time-out either as a property or in the connection string has no effect, and the value returned is always zero. <xref:System.Data.OracleClient.OracleConnection> also does not support a <xref:System.Data.OracleClient.OracleConnection.Database%2A> property or a ChangeDatabase method.\"\n  syntax:\n    content: public override void ChangeDatabase (string value);\n    parameters:\n    - id: value\n      type: System.String\n      description: The name of the database to use instead of the current database.\n  overload: System.Data.OracleClient.OracleConnection.ChangeDatabase*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The database name is not valid.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The connection is not open.\n  - type: System.Data.OracleClient.OracleException\n    commentId: T:System.Data.OracleClient.OracleException\n    description: Cannot change the database.\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleConnection.ClearAllPools\n  id: ClearAllPools\n  parent: System.Data.OracleClient.OracleConnection\n  langs:\n  - csharp\n  name: ClearAllPools()\n  nameWithType: OracleConnection.ClearAllPools()\n  fullName: System.Data.OracleClient.OracleConnection.ClearAllPools()\n  type: Method\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Empties the connection pool.\n  remarks: ClearAllPools resets (or empties) the connection pool. If connections are in use at the time of the call, they are marked appropriately and are discarded when <xref:System.Data.OracleClient.OracleConnection.Close%2A> is called on them.\n  syntax:\n    content: public static void ClearAllPools ();\n    parameters: []\n  overload: System.Data.OracleClient.OracleConnection.ClearAllPools*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleConnection.ClearPool(System.Data.OracleClient.OracleConnection)\n  id: ClearPool(System.Data.OracleClient.OracleConnection)\n  parent: System.Data.OracleClient.OracleConnection\n  langs:\n  - csharp\n  name: ClearPool(OracleConnection)\n  nameWithType: OracleConnection.ClearPool(OracleConnection)\n  fullName: System.Data.OracleClient.OracleConnection.ClearPool(OracleConnection)\n  type: Method\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Empties the connection pool associated with the specified connection.\n  remarks: ClearPool method clears the connection pool that is associated with `connection`. If additional connections associated with `connection` are in use at the time of the call, they are marked appropriately and are discarded when <xref:System.Data.OracleClient.OracleConnection.Close%2A> is called on them.\n  syntax:\n    content: public static void ClearPool (System.Data.OracleClient.OracleConnection connection);\n    parameters:\n    - id: connection\n      type: System.Data.OracleClient.OracleConnection\n      description: The <xref href=\"System.Data.OracleClient.OracleConnection\"></xref> to be cleared from the pool.\n  overload: System.Data.OracleClient.OracleConnection.ClearPool*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleConnection.Close\n  id: Close\n  parent: System.Data.OracleClient.OracleConnection\n  langs:\n  - csharp\n  name: Close()\n  nameWithType: OracleConnection.Close()\n  fullName: System.Data.OracleClient.OracleConnection.Close()\n  type: Method\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Closes the connection to the database.\n  remarks: \"The Close method rolls back any pending transactions. It then releases the connection to the connection pool, or closes the connection if connection pooling is disabled.  \\n  \\n An application can call Close more than once without generating an exception.  \\n  \\n> [!NOTE]\\n>  When you use the .NET Framework Data Provider for Oracle, you do not need to enable connection pooling because the provider manages this automatically.  \\n  \\n> [!CAUTION]\\n>  Do not call Close on a <xref:System.Data.OracleClient.OracleConnection>, a <xref:System.Data.OracleClient.OracleDataReader>, or any other managed object in the `Finalize` method of your class. In a finalizer, you should only release unmanaged resources that your class owns directly. If your class does not own any unmanaged resources, do not include a `Finalize` method in your class definition. For more information, see [Garbage Collection](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public override void Close ();\n    parameters: []\n  overload: System.Data.OracleClient.OracleConnection.Close*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleConnection.ConnectionString\n  id: ConnectionString\n  parent: System.Data.OracleClient.OracleConnection\n  langs:\n  - csharp\n  name: ConnectionString\n  nameWithType: OracleConnection.ConnectionString\n  fullName: System.Data.OracleClient.OracleConnection.ConnectionString\n  type: Property\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Gets or sets the string used to open an Oracle database.\n  remarks: \"The ConnectionString can be set only when the connection is closed.  \\n  \\n You can use the ConnectionString property to connect to a database. The following example illustrates a typical connection string.  \\n  \\n```  \\n\\\"Data Source=Oracle8i;Integrated Security=yes\\\"  \\n```  \\n  \\n Many of the settings specified in the string have corresponding read-only properties (for example, `Data Source=MyServer`, which corresponds to the <xref:System.Data.OracleClient.OracleConnection.DataSource%2A> property). When the connection string is set, all of these properties are updated, unless an error is detected, in which case none of the properties are updated. <xref:System.Data.OracleClient.OracleConnection> properties return only default settings or those settings specified in the ConnectionString.  \\n  \\n Resetting the ConnectionString on a closed connection resets all connection string values (and related properties), including the password.  \\n  \\n The connection string is parsed immediately after being set. If parsing reveals errors in syntax, a run-time exception, such as <xref:System.ArgumentException>, is generated. Other errors can be found only when an attempt is made to open the connection.  \\n  \\n The basic format of a connection string is a series of keyword/value pairs separated by semicolons. The equal sign (=) connects each keyword and its value. To include values that contain a semicolon, single-quote character, or double-quote character, the value must be enclosed in double quotes. If the value contains both a semicolon and a double-quote character, the value can be enclosed in single quotes. The single quote is also useful if the value begins with a double-quote character. Conversely, the double quote can be used if the value begins with a single quote. If the value contains both single-quote and double-quote characters, the quote character used to enclose the value must be doubled each time it occurs within the value.  \\n  \\n To include preceding or trailing spaces in the string value, the value must be enclosed in either single quotes or double quotes. Any leading or trailing spaces around integer, Boolean, or enumerated values are ignored, even if enclosed in quotes. However, spaces within a string literal keyword or value are preserved. Single or double quotes may be used within a connection string without using delimiters unless a quote character is the first or last character in the value, for example, `Data Source= my'Server` or `Data Source= my\\\"Server`.  \\n  \\n To include an equal sign (=) in a keyword or value, it must be preceded by another equal sign. For example, in the hypothetical connection string  \\n  \\n```  \\n\\\"key==word=value\\\"  \\n```  \\n  \\n the keyword is \\\"key=word\\\" and the value is \\\"value\\\".  \\n  \\n If a specific keyword in a keyword/value pair occurs more than once in a connection string, the last occurrence is used in the value set.  \\n  \\n Keywords are case insensitive.  \\n  \\n The following table lists the valid names for values within the ConnectionString.  \\n  \\n|Name|Default|Description|  \\n|----------|-------------|-----------------|  \\n|Data Source<br /><br /> -or-<br /><br /> Server||The name or network address of the instance of Oracle to which to connect.|  \\n|Integrated Security|'false'|Whether the connection is to be a secure connection or not.<br /><br /> Recognized values are `true` (strongly recommended), `false`, `yes`, and `no`.|  \\n|Password||The password for the Oracle account logging on. To maintain a high level of security, we strongly recommend that you use the Integrated Security keyword instead.|  \\n|Persist Security Info|'false'|When set to `false` or `no` (strongly recommended), security-sensitive information such as the password is not returned as part of the connection if the connection is open or has ever been in an open <xref:System.Data.OracleClient.OracleConnection.State%2A>. Resetting the connection string resets all connection string values, including the password.<br /><br /> Recognized values are `true`, `false`, `yes`, and `no`.|  \\n|Unicode|'false'|Specifies whether the .NET Framework Data Provider for Oracle uses UTF16 mode API calls. This keyword is ignored except when using Oracle9i client software.|  \\n|User ID||The Oracle login account. To maintain a high level of security, we strongly recommend that you use the Integrated Security keyword instead.|  \\n  \\n The following table lists the valid names for connection pooling values within the ConnectionString.  \\n  \\n|Name|Default|Description|  \\n|----------|-------------|-----------------|  \\n|Connection Lifetime|0|When a connection is returned to the pool, its creation time is compared with the current time, and the connection is destroyed if that time span (in seconds) exceeds the value specified by `Connection Lifetime`. This is useful in clustered configurations to force load balancing between a running server and a server just brought online.<br /><br /> A value of zero causes pooled connections to have the maximum connection time-out.|  \\n|Enlist|'true'|When `true` or `yes`, the pooler automatically enlists the connection in the creation thread's current transaction context.<br /><br /> Recognized values are `true`, `false`, `yes`, and `no`.|  \\n|Max Pool Size|100|The maximum number of connections allowed in the pool. Setting the `Max Pool Size` value of the ConnectionString can affect performance. If you plan to create and actively use more than 100 connections, you should increase `Max Pool Size` to a value that approximates the steady-state connection usage for the application.|  \\n|Min Pool Size|0|The minimum number of connections allowed in the pool.|  \\n|Pooling|'true'|When `true` or `yes`, the <xref:System.Data.OracleClient.OracleConnection> object is drawn from the appropriate pool, or if necessary, is created and added to the appropriate pool.<br /><br /> Recognized values are `true`, `false`, `yes`, and `no`.|  \\n  \\n When setting keyword or connection pooling values that require a Boolean value, you can use 'yes' instead of 'true', and 'no' instead of 'false'. Integer values are represented as strings.\"\n  example:\n  - \"The following example creates an <xref:System.Data.OracleClient.OracleConnection> and sets some of its properties in the connection string.  \\n  \\n [!code-vb[Classic WebData OracleConnection.DataSource#1](~/add/codesnippet/visualbasic/p-system.data.oracleclie_15_1.vb)]\\n [!code-cs[Classic WebData OracleConnection.DataSource#1](~/add/codesnippet/csharp/p-system.data.oracleclie_15_1.cs)]\"\n  syntax:\n    content: public override string ConnectionString { get; set; }\n    return:\n      type: System.String\n      description: The Oracle connection string that includes settings, such as the server name, needed to establish the initial connection. The default value is an empty string (\"\").\n  overload: System.Data.OracleClient.OracleConnection.ConnectionString*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleConnection.ConnectionTimeout\n  id: ConnectionTimeout\n  parent: System.Data.OracleClient.OracleConnection\n  langs:\n  - csharp\n  name: ConnectionTimeout\n  nameWithType: OracleConnection.ConnectionTimeout\n  fullName: System.Data.OracleClient.OracleConnection.ConnectionTimeout\n  type: Property\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Gets the time to wait to establish a connection before terminating the attempt and generating an error.\n  remarks: \"You can set the amount of time a connection waits to time out by using the `Connect Timeout` or `Connection Timeout` keywords in the connection string. A value of 0 indicates no limit, and should be avoided in a <xref:System.Data.OracleClient.OracleConnection.ConnectionString%2A> because an attempt to connect waits indefinitely.  \\n  \\n> [!NOTE]\\n>  Unlike the `Connection` object in the other .NET Framework data providers (SQL Server, OLE DB, and ODBC), <xref:System.Data.OracleClient.OracleConnection> does not support a ConnectionTimeout property. Setting a connection time-out either with a property or in the connection string has no effect, and the value returned is always zero. <xref:System.Data.OracleClient.OracleConnection> also does not support a <xref:System.Data.OracleClient.OracleConnection.Database%2A> property or a <xref:System.Data.OracleClient.OracleConnection.ChangeDatabase%2A> method.\"\n  syntax:\n    content: public override int ConnectionTimeout { get; }\n    return:\n      type: System.Int32\n      description: The time (in seconds) to wait for a connection to open. The default value is 15 seconds.\n  overload: System.Data.OracleClient.OracleConnection.ConnectionTimeout*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The value specified is less than 0.\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleConnection.CreateCommand\n  id: CreateCommand\n  parent: System.Data.OracleClient.OracleConnection\n  langs:\n  - csharp\n  name: CreateCommand()\n  nameWithType: OracleConnection.CreateCommand()\n  fullName: System.Data.OracleClient.OracleConnection.CreateCommand()\n  type: Method\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Creates and returns an <xref href=\"System.Data.OracleClient.OracleCommand\"></xref> object associated with the <xref href=\"System.Data.OracleClient.OracleConnection\"></xref>.\n  syntax:\n    content: public System.Data.OracleClient.OracleCommand CreateCommand ();\n    parameters: []\n    return:\n      type: System.Data.OracleClient.OracleCommand\n      description: An <xref href=\"System.Data.OracleClient.OracleCommand\"></xref> object.\n  overload: System.Data.OracleClient.OracleConnection.CreateCommand*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleConnection.CreateDbCommand\n  id: CreateDbCommand\n  parent: System.Data.OracleClient.OracleConnection\n  langs:\n  - csharp\n  name: CreateDbCommand()\n  nameWithType: OracleConnection.CreateDbCommand()\n  fullName: System.Data.OracleClient.OracleConnection.CreateDbCommand()\n  type: Method\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  syntax:\n    content: protected override System.Data.Common.DbCommand CreateDbCommand ();\n    parameters: []\n    return:\n      type: System.Data.Common.DbCommand\n      description: To be added.\n  overload: System.Data.OracleClient.OracleConnection.CreateDbCommand*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleConnection.Database\n  id: Database\n  parent: System.Data.OracleClient.OracleConnection\n  langs:\n  - csharp\n  name: Database\n  nameWithType: OracleConnection.Database\n  fullName: System.Data.OracleClient.OracleConnection.Database\n  type: Property\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Gets the name of the current database or the database to be used after a connection is opened.\n  remarks: \"The Database property updates dynamically. If you change the current database using a SQL statement or the <xref:System.Data.OracleClient.OracleConnection.ChangeDatabase%2A> method, an informational message is sent and the property is updated automatically.  \\n  \\n> [!NOTE]\\n>  Unlike the `Connection` object in the other .NET Framework data providers (SQL Server, OLE DB, and ODBC), <xref:System.Data.OracleClient.OracleConnection> does not support a <xref:System.Data.OracleClient.OracleConnection.ConnectionTimeout%2A> property. Setting a connection time-out either with a property or in the connection string has no effect, and the value returned is always zero. <xref:System.Data.OracleClient.OracleConnection> also does not support a Database property or a <xref:System.Data.OracleClient.OracleConnection.ChangeDatabase%2A> method.\"\n  syntax:\n    content: public override string Database { get; }\n    return:\n      type: System.String\n      description: The name of the current database or the name of the database to be used after a connection is opened. The default value is an empty string.\n  overload: System.Data.OracleClient.OracleConnection.Database*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleConnection.DataSource\n  id: DataSource\n  parent: System.Data.OracleClient.OracleConnection\n  langs:\n  - csharp\n  name: DataSource\n  nameWithType: OracleConnection.DataSource\n  fullName: System.Data.OracleClient.OracleConnection.DataSource\n  type: Property\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Gets the name of the Oracle server to which to connect.\n  remarks: ''\n  example:\n  - \"The following example creates an <xref:System.Data.OracleClient.OracleConnection> and displays some of its read-only properties.  \\n  \\n [!code-vb[Classic WebData OracleConnection.DataSource#1](~/add/codesnippet/visualbasic/p-system.data.oracleclie_7_1.vb)]\\n [!code-cs[Classic WebData OracleConnection.DataSource#1](~/add/codesnippet/csharp/p-system.data.oracleclie_7_1.cs)]\"\n  syntax:\n    content: public override string DataSource { get; }\n    return:\n      type: System.String\n      description: The name of the Oracle server to which to connect. The default value is an empty string (\"\").\n  overload: System.Data.OracleClient.OracleConnection.DataSource*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleConnection.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Data.OracleClient.OracleConnection\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: OracleConnection.Dispose(Boolean)\n  fullName: System.Data.OracleClient.OracleConnection.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  syntax:\n    content: protected override void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: To be added.\n  overload: System.Data.OracleClient.OracleConnection.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleConnection.EnlistDistributedTransaction(System.EnterpriseServices.ITransaction)\n  id: EnlistDistributedTransaction(System.EnterpriseServices.ITransaction)\n  parent: System.Data.OracleClient.OracleConnection\n  langs:\n  - csharp\n  name: EnlistDistributedTransaction(ITransaction)\n  nameWithType: OracleConnection.EnlistDistributedTransaction(ITransaction)\n  fullName: System.Data.OracleClient.OracleConnection.EnlistDistributedTransaction(ITransaction)\n  type: Method\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Enlists in the specified transaction as a distributed transaction.\n  remarks: \"New in ADO.NET 2.0 is support for using the <xref:System.Data.Common.DbConnection.EnlistTransaction%2A> method to enlist in a distributed transaction. Because it enlists a connection in a <xref:System.Transactions.Transaction> instance, **EnlistTransaction** takes advantage of functionality available in the <xref:System.Transactions> namespace for managing distributed transactions, making it preferable to **EnlistDistributedTransaction** for this purpose. For more information, see [Distributed Transactions](~/add/includes/ajax-current-ext-md.md).  \\n  \\n You can continue to enlist in an existing distributed transaction using the  \\n  \\n EnlistDistributedTransaction method if auto-enlistment is disabled. Enlisting in an existing distributed transaction ensures that, if the transaction is committed or rolled back, modifications made by the code at the data source are also committed or rolled back.  \\n  \\n EnlistDistributedTransaction returns an exception if the <xref:System.Data.OracleClient.OracleConnection> has already started a transaction using <xref:System.Data.OracleClient.OracleConnection.BeginTransaction%2A>. However, if the transaction is a local transaction started at the data source (for example, by explicitly executing the BEGIN TRANSACTION statement using an <xref:System.Data.OracleClient.OracleCommand> object), EnlistDistributedTransaction rolls back the local transaction and enlists in the existing distributed transaction as requested. You will not receive notice that the local transaction was rolled back, and are responsible for managing any local transactions not started using <xref:System.Data.OracleClient.OracleConnection.BeginTransaction%2A>.\"\n  syntax:\n    content: public void EnlistDistributedTransaction (System.EnterpriseServices.ITransaction distributedTransaction);\n    parameters:\n    - id: distributedTransaction\n      type: System.EnterpriseServices.ITransaction\n      description: A reference to an existing <xref href=\"System.EnterpriseServices.ITransaction\"></xref> in which to enlist.\n  overload: System.Data.OracleClient.OracleConnection.EnlistDistributedTransaction*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleConnection.EnlistTransaction(System.Transactions.Transaction)\n  id: EnlistTransaction(System.Transactions.Transaction)\n  parent: System.Data.OracleClient.OracleConnection\n  langs:\n  - csharp\n  name: EnlistTransaction(Transaction)\n  nameWithType: OracleConnection.EnlistTransaction(Transaction)\n  fullName: System.Data.OracleClient.OracleConnection.EnlistTransaction(Transaction)\n  type: Method\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Enlists in the specified transaction as a distributed transaction.\n  remarks: \"New in ADO.NET 2.0 is support for using the  \\n  \\n <xref:System.Data.Common.DbConnection.EnlistTransaction%2A> method to enlist in a distributed transaction. Because it enlists a connection in a <xref:System.Transactions.Transaction> instance, **EnlistTransaction** takes advantage of functionality available in the <xref:System.Transactions> namespace for managing distributed transactions, making it preferable to **EnlistDistributedTransaction**, which uses a **System.EnterpriseServices.ITransaction** object. It also has slightly different semantics: once a connection is explicitly enlisted on a transaction, it cannot be unenlisted or enlisted in another transaction until the first transaction finishes. For more information about distributed transactions, see [Distributed Transactions](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public override void EnlistTransaction (System.Transactions.Transaction transaction);\n    parameters:\n    - id: transaction\n      type: System.Transactions.Transaction\n      description: A reference to an existing <xref href=\"System.Transactions.Transaction\"></xref> in which to enlist.\n  overload: System.Data.OracleClient.OracleConnection.EnlistTransaction*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleConnection.GetSchema\n  id: GetSchema\n  parent: System.Data.OracleClient.OracleConnection\n  langs:\n  - csharp\n  name: GetSchema()\n  nameWithType: OracleConnection.GetSchema()\n  fullName: System.Data.OracleClient.OracleConnection.GetSchema()\n  type: Method\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Returns schema information for the data source of this <xref href=\"System.Data.OracleClient.OracleConnection\"></xref>.\n  syntax:\n    content: public override System.Data.DataTable GetSchema ();\n    parameters: []\n    return:\n      type: System.Data.DataTable\n      description: A <xref href=\"System.Data.DataTable\"></xref> that contains schema information.\n  overload: System.Data.OracleClient.OracleConnection.GetSchema*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleConnection.GetSchema(System.String)\n  id: GetSchema(System.String)\n  parent: System.Data.OracleClient.OracleConnection\n  langs:\n  - csharp\n  name: GetSchema(String)\n  nameWithType: OracleConnection.GetSchema(String)\n  fullName: System.Data.OracleClient.OracleConnection.GetSchema(String)\n  type: Method\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Returns schema information for the data source of this <xref href=\"System.Data.OracleClient.OracleConnection\"></xref> using the specified string for the schema name.\n  remarks: \"Queries using GetSchema are case sensitive. Because of Oracle's treatment of cases when a schema is first created, this can lead to unexpected results.  \\n  \\n If the schema was created without quotes`,` Oracle stores the object name in upper case. If the schema was created with quotes, Oracle stores the object name in the casing provided.  \\n  \\n For example, suppose that you create a table called MyTable, using one of the following two statements:  \\n  \\n `CREATE TABLE MyTable ...`  \\n  \\n `CREATE TABLE \\\"MyTable\\\" ...`  \\n  \\n To retrieve information about this table via the **GetSchema** method in the first case, you would have to pass \\\"MYTABLE\\\" in as an argument. In the second case, you would have to pass \\\"MyTable\\\" in as an argument.\"\n  syntax:\n    content: public override System.Data.DataTable GetSchema (string collectionName);\n    parameters:\n    - id: collectionName\n      type: System.String\n      description: Specifies the name of the schema to return.\n    return:\n      type: System.Data.DataTable\n      description: A <xref href=\"System.Data.DataTable\"></xref> that contains schema information.\n  overload: System.Data.OracleClient.OracleConnection.GetSchema*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>collectionName</code> is specified as null.\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleConnection.GetSchema(System.String,System.String[])\n  id: GetSchema(System.String,System.String[])\n  parent: System.Data.OracleClient.OracleConnection\n  langs:\n  - csharp\n  name: GetSchema(String,String[])\n  nameWithType: OracleConnection.GetSchema(String,String[])\n  fullName: System.Data.OracleClient.OracleConnection.GetSchema(String,String[])\n  type: Method\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Returns schema information for the data source of this <xref href=\"System.Data.OracleClient.OracleConnection\"></xref> using the specified string for the schema name and the specified string array for the restriction values.\n  remarks: \"The `restrictionValues` parameter can supply n depth of values which are specified by the restrictions collection for a specific collection. In order to set values on a given restriction, and not set the values of other restrictions, you need to set the preceding restrictions to null and then put the appropriate value in for the restriction that you would like to specify a value for.  \\n  \\n An example of this is the \\\"Tables\\\" collection. If the \\\"Tables\\\" collection has 3 restrictions: database, owner, and table name; and you want to get back only the tables associated with the owner \\\"Carl\\\", then you would need to pass in the following values (at a minimum): null, \\\"Carl\\\". If a restriction value is not passed in, the default values are used for that restriction. This is the same mapping as passing in null, which is different than passing in an empty string for the parameter value. In that case, the empty string (\\\"\\\") is considered to be the value for the specified parameter.  \\n  \\n Queries using <xref:System.Data.OracleClient.OracleConnection.GetSchema%2A> are case sensitive. Because of Oracle's treatment of cases when a schema is first created, this can lead to unexpected results.  \\n  \\n If the schema was created without quotes`,` Oracle stores the object name in upper case. If the schema was created with quotes, Oracle stores the object name in the casing provided.  \\n  \\n For example, suppose that you create a table called MyTable, using one of the following two statements:  \\n  \\n `CREATE TABLE MyTable ...`  \\n  \\n `CREATE TABLE \\\"MyTable\\\" ...`  \\n  \\n To retrieve information about this table via the **GetSchema** method in the first case, you would have to pass \\\"MYTABLE\\\" in as an argument. In the second case, you would have to pass \\\"MyTable\\\" in as an argument.\"\n  syntax:\n    content: public override System.Data.DataTable GetSchema (string collectionName, string[] restrictionValues);\n    parameters:\n    - id: collectionName\n      type: System.String\n      description: Specifies the name of the schema to return.\n    - id: restrictionValues\n      type: System.String[]\n      description: A set of restriction values for the requested schema.\n    return:\n      type: System.Data.DataTable\n      description: A <xref href=\"System.Data.DataTable\"></xref> that contains schema information.\n  overload: System.Data.OracleClient.OracleConnection.GetSchema*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>collectionName</code> is specified as null.\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleConnection.InfoMessage\n  id: InfoMessage\n  parent: System.Data.OracleClient.OracleConnection\n  langs:\n  - csharp\n  name: InfoMessage\n  nameWithType: OracleConnection.InfoMessage\n  fullName: System.Data.OracleClient.OracleConnection.InfoMessage\n  type: Event\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Occurs when Oracle sends a warning or an informational message.\n  remarks: \"Because the .NET Framework Data Provider for Oracle uses the Oracle Call Interface (OCI), whenever the data provider receives a Success With Info message, an InfoMessage event is generated. An example would be creating a stored procedure that contains a syntax error. The call to the <xref:System.Data.OracleClient.OracleCommand.ExecuteNonQuery%2A> method would succeed. However an InfoMessage event would be generated informing you of the syntax error.  \\n  \\n Clients who want to process warnings or informational messages sent by the server should create an <xref:System.Data.OracleClient.OracleInfoMessageEventHandler> delegate to listen to this event.\"\n  syntax:\n    content: public event System.Data.OracleClient.OracleInfoMessageEventHandler InfoMessage;\n    return:\n      type: System.Data.OracleClient.OracleInfoMessageEventHandler\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleConnection.Open\n  id: Open\n  parent: System.Data.OracleClient.OracleConnection\n  langs:\n  - csharp\n  name: Open()\n  nameWithType: OracleConnection.Open()\n  fullName: System.Data.OracleClient.OracleConnection.Open()\n  type: Method\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Opens a connection to a database with the property settings specified by the <xref:System.Data.OracleClient.OracleConnection.ConnectionString*>.\n  remarks: \"The <xref:System.Data.OracleClient.OracleConnection> draws an open connection from the connection pool if one is available. Otherwise, it establishes a new connection to the database.  \\n  \\n> [!NOTE]\\n>  If the <xref:System.Data.OracleClient.OracleConnection> goes out of scope, the connection it represents does not close automatically. Therefore, you must explicitly close the connection by calling <xref:System.Data.OracleClient.OracleConnection.Close%2A>.\"\n  syntax:\n    content: public override void Open ();\n    parameters: []\n  overload: System.Data.OracleClient.OracleConnection.Open*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The connection is not open.\n  - type: System.Data.OracleClient.OracleException\n    commentId: T:System.Data.OracleClient.OracleException\n    description: Cannot change the database.\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleConnection.ServerVersion\n  id: ServerVersion\n  parent: System.Data.OracleClient.OracleConnection\n  langs:\n  - csharp\n  name: ServerVersion\n  nameWithType: OracleConnection.ServerVersion\n  fullName: System.Data.OracleClient.OracleConnection.ServerVersion\n  type: Property\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Gets a string containing the version of the server to which the client is connected.\n  remarks: The ServerVersion property is in Oracle version format. For example, the format for an Oracle8 release is a string in the form \"8.1.7.0.0 Oracle8 Release 8.1.7.0.0 - Production.\"\n  example:\n  - \"The following example creates an <xref:System.Data.OracleClient.OracleConnection> and displays some of its read-only properties.  \\n  \\n [!code-vb[Classic WebData OracleConnection.ServerVersion#1](~/add/codesnippet/visualbasic/p-system.data.oracleclie_3_1.vb)]\\n [!code-cs[Classic WebData OracleConnection.ServerVersion#1](~/add/codesnippet/csharp/p-system.data.oracleclie_3_1.cs)]\"\n  syntax:\n    content: public override string ServerVersion { get; }\n    return:\n      type: System.String\n      description: The version of the connected server.\n  overload: System.Data.OracleClient.OracleConnection.ServerVersion*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The connection is closed.\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleConnection.State\n  id: State\n  parent: System.Data.OracleClient.OracleConnection\n  langs:\n  - csharp\n  name: State\n  nameWithType: OracleConnection.State\n  fullName: System.Data.OracleClient.OracleConnection.State\n  type: Property\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Gets the current state of the connection.\n  remarks: \"The allowed state changes are:  \\n  \\n-   From `Closed` to `Open`, using the `Open` method of the <xref:System.Data.OracleClient.OracleConnection> object.  \\n  \\n-   From `Open` to `Closed`, using the <xref:System.Data.OracleClient.OracleConnection.Close%2A> method of the <xref:System.Data.OracleClient.OracleConnection> object.\"\n  example:\n  - \"The following example creates an instance of a derived class, <xref:System.Data.OracleClient.OracleConnection>, sets its <xref:System.Data.IDbConnection.ConnectionString%2A>, and displays its State.  \\n  \\n [!code-cs[Classic WebData OracleConnection.State#1](~/add/codesnippet/csharp/p-system.data.oracleclie_9_1.cs)]\\n [!code-vb[Classic WebData OracleConnection.State#1](~/add/codesnippet/visualbasic/p-system.data.oracleclie_9_1.vb)]\"\n  syntax:\n    content: public override System.Data.ConnectionState State { get; }\n    return:\n      type: System.Data.ConnectionState\n      description: A bitwise combination of the <xref href=\"System.Data.ConnectionState\"></xref> values. The default is <xref uid=\"langword_csharp_Closed\" name=\"Closed\" href=\"\"></xref>.\n  overload: System.Data.OracleClient.OracleConnection.State*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.OracleClient.OracleConnection.System#ICloneable#Clone\n  id: System#ICloneable#Clone\n  isEii: true\n  parent: System.Data.OracleClient.OracleConnection\n  langs:\n  - csharp\n  name: System.ICloneable.Clone()\n  nameWithType: OracleConnection.System.ICloneable.Clone()\n  fullName: System.Data.OracleClient.OracleConnection.System.ICloneable.Clone()\n  type: Method\n  assemblies:\n  - System.Data.OracleClient\n  namespace: System.Data.OracleClient\n  summary: Creates a new object that is a copy of the current instance.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.OracleClient.OracleConnection> instance is cast to an <xref:System.ICloneable> interface.\n  syntax:\n    content: object ICloneable.Clone ();\n    parameters: []\n    return:\n      type: System.Object\n      description: A new object that is a copy of this instance..\n  overload: System.Data.OracleClient.OracleConnection.System#ICloneable#Clone*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Data.Common.DbConnection\n  isExternal: false\n  name: System.Data.Common.DbConnection\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.Data.OracleClient.OracleException\n  parent: System.Data.OracleClient\n  isExternal: false\n  name: OracleException\n  nameWithType: OracleException\n  fullName: System.Data.OracleClient.OracleException\n- uid: System.Data.OracleClient.OracleConnection.#ctor\n  parent: System.Data.OracleClient.OracleConnection\n  isExternal: false\n  name: OracleConnection()\n  nameWithType: OracleConnection.OracleConnection()\n  fullName: System.Data.OracleClient.OracleConnection.OracleConnection()\n- uid: System.Data.OracleClient.OracleConnection.#ctor(System.String)\n  parent: System.Data.OracleClient.OracleConnection\n  isExternal: false\n  name: OracleConnection(String)\n  nameWithType: OracleConnection.OracleConnection(String)\n  fullName: System.Data.OracleClient.OracleConnection.OracleConnection(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Data.OracleClient.OracleConnection.BeginDbTransaction(System.Data.IsolationLevel)\n  parent: System.Data.OracleClient.OracleConnection\n  isExternal: false\n  name: BeginDbTransaction(IsolationLevel)\n  nameWithType: OracleConnection.BeginDbTransaction(IsolationLevel)\n  fullName: System.Data.OracleClient.OracleConnection.BeginDbTransaction(IsolationLevel)\n- uid: System.Data.Common.DbTransaction\n  parent: System.Data.Common\n  isExternal: false\n  name: DbTransaction\n  nameWithType: DbTransaction\n  fullName: System.Data.Common.DbTransaction\n- uid: System.Data.IsolationLevel\n  parent: System.Data\n  isExternal: false\n  name: IsolationLevel\n  nameWithType: IsolationLevel\n  fullName: System.Data.IsolationLevel\n- uid: System.Data.OracleClient.OracleConnection.BeginTransaction\n  parent: System.Data.OracleClient.OracleConnection\n  isExternal: false\n  name: BeginTransaction()\n  nameWithType: OracleConnection.BeginTransaction()\n  fullName: System.Data.OracleClient.OracleConnection.BeginTransaction()\n- uid: System.Data.OracleClient.OracleTransaction\n  parent: System.Data.OracleClient\n  isExternal: false\n  name: OracleTransaction\n  nameWithType: OracleTransaction\n  fullName: System.Data.OracleClient.OracleTransaction\n- uid: System.Data.OracleClient.OracleConnection.BeginTransaction(System.Data.IsolationLevel)\n  parent: System.Data.OracleClient.OracleConnection\n  isExternal: false\n  name: BeginTransaction(IsolationLevel)\n  nameWithType: OracleConnection.BeginTransaction(IsolationLevel)\n  fullName: System.Data.OracleClient.OracleConnection.BeginTransaction(IsolationLevel)\n- uid: System.Data.OracleClient.OracleConnection.ChangeDatabase(System.String)\n  parent: System.Data.OracleClient.OracleConnection\n  isExternal: false\n  name: ChangeDatabase(String)\n  nameWithType: OracleConnection.ChangeDatabase(String)\n  fullName: System.Data.OracleClient.OracleConnection.ChangeDatabase(String)\n- uid: System.Data.OracleClient.OracleConnection.ClearAllPools\n  parent: System.Data.OracleClient.OracleConnection\n  isExternal: false\n  name: ClearAllPools()\n  nameWithType: OracleConnection.ClearAllPools()\n  fullName: System.Data.OracleClient.OracleConnection.ClearAllPools()\n- uid: System.Data.OracleClient.OracleConnection.ClearPool(System.Data.OracleClient.OracleConnection)\n  parent: System.Data.OracleClient.OracleConnection\n  isExternal: false\n  name: ClearPool(OracleConnection)\n  nameWithType: OracleConnection.ClearPool(OracleConnection)\n  fullName: System.Data.OracleClient.OracleConnection.ClearPool(OracleConnection)\n- uid: System.Data.OracleClient.OracleConnection\n  parent: System.Data.OracleClient\n  isExternal: false\n  name: OracleConnection\n  nameWithType: OracleConnection\n  fullName: System.Data.OracleClient.OracleConnection\n- uid: System.Data.OracleClient.OracleConnection.Close\n  parent: System.Data.OracleClient.OracleConnection\n  isExternal: false\n  name: Close()\n  nameWithType: OracleConnection.Close()\n  fullName: System.Data.OracleClient.OracleConnection.Close()\n- uid: System.Data.OracleClient.OracleConnection.ConnectionString\n  parent: System.Data.OracleClient.OracleConnection\n  isExternal: false\n  name: ConnectionString\n  nameWithType: OracleConnection.ConnectionString\n  fullName: System.Data.OracleClient.OracleConnection.ConnectionString\n- uid: System.Data.OracleClient.OracleConnection.ConnectionTimeout\n  parent: System.Data.OracleClient.OracleConnection\n  isExternal: false\n  name: ConnectionTimeout\n  nameWithType: OracleConnection.ConnectionTimeout\n  fullName: System.Data.OracleClient.OracleConnection.ConnectionTimeout\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Data.OracleClient.OracleConnection.CreateCommand\n  parent: System.Data.OracleClient.OracleConnection\n  isExternal: false\n  name: CreateCommand()\n  nameWithType: OracleConnection.CreateCommand()\n  fullName: System.Data.OracleClient.OracleConnection.CreateCommand()\n- uid: System.Data.OracleClient.OracleCommand\n  parent: System.Data.OracleClient\n  isExternal: false\n  name: OracleCommand\n  nameWithType: OracleCommand\n  fullName: System.Data.OracleClient.OracleCommand\n- uid: System.Data.OracleClient.OracleConnection.CreateDbCommand\n  parent: System.Data.OracleClient.OracleConnection\n  isExternal: false\n  name: CreateDbCommand()\n  nameWithType: OracleConnection.CreateDbCommand()\n  fullName: System.Data.OracleClient.OracleConnection.CreateDbCommand()\n- uid: System.Data.Common.DbCommand\n  parent: System.Data.Common\n  isExternal: false\n  name: DbCommand\n  nameWithType: DbCommand\n  fullName: System.Data.Common.DbCommand\n- uid: System.Data.OracleClient.OracleConnection.Database\n  parent: System.Data.OracleClient.OracleConnection\n  isExternal: false\n  name: Database\n  nameWithType: OracleConnection.Database\n  fullName: System.Data.OracleClient.OracleConnection.Database\n- uid: System.Data.OracleClient.OracleConnection.DataSource\n  parent: System.Data.OracleClient.OracleConnection\n  isExternal: false\n  name: DataSource\n  nameWithType: OracleConnection.DataSource\n  fullName: System.Data.OracleClient.OracleConnection.DataSource\n- uid: System.Data.OracleClient.OracleConnection.Dispose(System.Boolean)\n  parent: System.Data.OracleClient.OracleConnection\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: OracleConnection.Dispose(Boolean)\n  fullName: System.Data.OracleClient.OracleConnection.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Data.OracleClient.OracleConnection.EnlistDistributedTransaction(System.EnterpriseServices.ITransaction)\n  parent: System.Data.OracleClient.OracleConnection\n  isExternal: false\n  name: EnlistDistributedTransaction(ITransaction)\n  nameWithType: OracleConnection.EnlistDistributedTransaction(ITransaction)\n  fullName: System.Data.OracleClient.OracleConnection.EnlistDistributedTransaction(ITransaction)\n- uid: System.EnterpriseServices.ITransaction\n  parent: System.EnterpriseServices\n  isExternal: false\n  name: ITransaction\n  nameWithType: ITransaction\n  fullName: System.EnterpriseServices.ITransaction\n- uid: System.Data.OracleClient.OracleConnection.EnlistTransaction(System.Transactions.Transaction)\n  parent: System.Data.OracleClient.OracleConnection\n  isExternal: false\n  name: EnlistTransaction(Transaction)\n  nameWithType: OracleConnection.EnlistTransaction(Transaction)\n  fullName: System.Data.OracleClient.OracleConnection.EnlistTransaction(Transaction)\n- uid: System.Transactions.Transaction\n  parent: System.Transactions\n  isExternal: false\n  name: Transaction\n  nameWithType: Transaction\n  fullName: System.Transactions.Transaction\n- uid: System.Data.OracleClient.OracleConnection.GetSchema\n  parent: System.Data.OracleClient.OracleConnection\n  isExternal: false\n  name: GetSchema()\n  nameWithType: OracleConnection.GetSchema()\n  fullName: System.Data.OracleClient.OracleConnection.GetSchema()\n- uid: System.Data.DataTable\n  parent: System.Data\n  isExternal: false\n  name: DataTable\n  nameWithType: DataTable\n  fullName: System.Data.DataTable\n- uid: System.Data.OracleClient.OracleConnection.GetSchema(System.String)\n  parent: System.Data.OracleClient.OracleConnection\n  isExternal: false\n  name: GetSchema(String)\n  nameWithType: OracleConnection.GetSchema(String)\n  fullName: System.Data.OracleClient.OracleConnection.GetSchema(String)\n- uid: System.Data.OracleClient.OracleConnection.GetSchema(System.String,System.String[])\n  parent: System.Data.OracleClient.OracleConnection\n  isExternal: false\n  name: GetSchema(String,String[])\n  nameWithType: OracleConnection.GetSchema(String,String[])\n  fullName: System.Data.OracleClient.OracleConnection.GetSchema(String,String[])\n- uid: System.String[]\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String[]\n  spec.csharp:\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: String[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Data.OracleClient.OracleConnection.InfoMessage\n  parent: System.Data.OracleClient.OracleConnection\n  isExternal: false\n  name: InfoMessage\n  nameWithType: OracleConnection.InfoMessage\n  fullName: System.Data.OracleClient.OracleConnection.InfoMessage\n- uid: System.Data.OracleClient.OracleInfoMessageEventHandler\n  parent: System.Data.OracleClient\n  isExternal: false\n  name: OracleInfoMessageEventHandler\n  nameWithType: OracleInfoMessageEventHandler\n  fullName: System.Data.OracleClient.OracleInfoMessageEventHandler\n- uid: System.Data.OracleClient.OracleConnection.Open\n  parent: System.Data.OracleClient.OracleConnection\n  isExternal: false\n  name: Open()\n  nameWithType: OracleConnection.Open()\n  fullName: System.Data.OracleClient.OracleConnection.Open()\n- uid: System.Data.OracleClient.OracleConnection.ServerVersion\n  parent: System.Data.OracleClient.OracleConnection\n  isExternal: false\n  name: ServerVersion\n  nameWithType: OracleConnection.ServerVersion\n  fullName: System.Data.OracleClient.OracleConnection.ServerVersion\n- uid: System.Data.OracleClient.OracleConnection.State\n  parent: System.Data.OracleClient.OracleConnection\n  isExternal: false\n  name: State\n  nameWithType: OracleConnection.State\n  fullName: System.Data.OracleClient.OracleConnection.State\n- uid: System.Data.ConnectionState\n  parent: System.Data\n  isExternal: false\n  name: ConnectionState\n  nameWithType: ConnectionState\n  fullName: System.Data.ConnectionState\n- uid: System.Data.OracleClient.OracleConnection.System#ICloneable#Clone\n  parent: System.Data.OracleClient.OracleConnection\n  isExternal: false\n  name: System.ICloneable.Clone()\n  nameWithType: OracleConnection.System.ICloneable.Clone()\n  fullName: System.Data.OracleClient.OracleConnection.System.ICloneable.Clone()\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Data.OracleClient.OracleConnection.#ctor*\n  parent: System.Data.OracleClient.OracleConnection\n  isExternal: false\n  name: OracleConnection\n  nameWithType: OracleConnection.OracleConnection\n- uid: System.Data.OracleClient.OracleConnection.BeginDbTransaction*\n  parent: System.Data.OracleClient.OracleConnection\n  isExternal: false\n  name: BeginDbTransaction\n  nameWithType: OracleConnection.BeginDbTransaction\n- uid: System.Data.OracleClient.OracleConnection.BeginTransaction*\n  parent: System.Data.OracleClient.OracleConnection\n  isExternal: false\n  name: BeginTransaction\n  nameWithType: OracleConnection.BeginTransaction\n- uid: System.Data.OracleClient.OracleConnection.ChangeDatabase*\n  parent: System.Data.OracleClient.OracleConnection\n  isExternal: false\n  name: ChangeDatabase\n  nameWithType: OracleConnection.ChangeDatabase\n- uid: System.Data.OracleClient.OracleConnection.ClearAllPools*\n  parent: System.Data.OracleClient.OracleConnection\n  isExternal: false\n  name: ClearAllPools\n  nameWithType: OracleConnection.ClearAllPools\n- uid: System.Data.OracleClient.OracleConnection.ClearPool*\n  parent: System.Data.OracleClient.OracleConnection\n  isExternal: false\n  name: ClearPool\n  nameWithType: OracleConnection.ClearPool\n- uid: System.Data.OracleClient.OracleConnection.Close*\n  parent: System.Data.OracleClient.OracleConnection\n  isExternal: false\n  name: Close\n  nameWithType: OracleConnection.Close\n- uid: System.Data.OracleClient.OracleConnection.ConnectionString*\n  parent: System.Data.OracleClient.OracleConnection\n  isExternal: false\n  name: ConnectionString\n  nameWithType: OracleConnection.ConnectionString\n- uid: System.Data.OracleClient.OracleConnection.ConnectionTimeout*\n  parent: System.Data.OracleClient.OracleConnection\n  isExternal: false\n  name: ConnectionTimeout\n  nameWithType: OracleConnection.ConnectionTimeout\n- uid: System.Data.OracleClient.OracleConnection.CreateCommand*\n  parent: System.Data.OracleClient.OracleConnection\n  isExternal: false\n  name: CreateCommand\n  nameWithType: OracleConnection.CreateCommand\n- uid: System.Data.OracleClient.OracleConnection.CreateDbCommand*\n  parent: System.Data.OracleClient.OracleConnection\n  isExternal: false\n  name: CreateDbCommand\n  nameWithType: OracleConnection.CreateDbCommand\n- uid: System.Data.OracleClient.OracleConnection.Database*\n  parent: System.Data.OracleClient.OracleConnection\n  isExternal: false\n  name: Database\n  nameWithType: OracleConnection.Database\n- uid: System.Data.OracleClient.OracleConnection.DataSource*\n  parent: System.Data.OracleClient.OracleConnection\n  isExternal: false\n  name: DataSource\n  nameWithType: OracleConnection.DataSource\n- uid: System.Data.OracleClient.OracleConnection.Dispose*\n  parent: System.Data.OracleClient.OracleConnection\n  isExternal: false\n  name: Dispose\n  nameWithType: OracleConnection.Dispose\n- uid: System.Data.OracleClient.OracleConnection.EnlistDistributedTransaction*\n  parent: System.Data.OracleClient.OracleConnection\n  isExternal: false\n  name: EnlistDistributedTransaction\n  nameWithType: OracleConnection.EnlistDistributedTransaction\n- uid: System.Data.OracleClient.OracleConnection.EnlistTransaction*\n  parent: System.Data.OracleClient.OracleConnection\n  isExternal: false\n  name: EnlistTransaction\n  nameWithType: OracleConnection.EnlistTransaction\n- uid: System.Data.OracleClient.OracleConnection.GetSchema*\n  parent: System.Data.OracleClient.OracleConnection\n  isExternal: false\n  name: GetSchema\n  nameWithType: OracleConnection.GetSchema\n- uid: System.Data.OracleClient.OracleConnection.Open*\n  parent: System.Data.OracleClient.OracleConnection\n  isExternal: false\n  name: Open\n  nameWithType: OracleConnection.Open\n- uid: System.Data.OracleClient.OracleConnection.ServerVersion*\n  parent: System.Data.OracleClient.OracleConnection\n  isExternal: false\n  name: ServerVersion\n  nameWithType: OracleConnection.ServerVersion\n- uid: System.Data.OracleClient.OracleConnection.State*\n  parent: System.Data.OracleClient.OracleConnection\n  isExternal: false\n  name: State\n  nameWithType: OracleConnection.State\n- uid: System.Data.OracleClient.OracleConnection.System#ICloneable#Clone*\n  parent: System.Data.OracleClient.OracleConnection\n  isExternal: false\n  name: System.ICloneable.Clone\n  nameWithType: OracleConnection.System.ICloneable.Clone\n"}