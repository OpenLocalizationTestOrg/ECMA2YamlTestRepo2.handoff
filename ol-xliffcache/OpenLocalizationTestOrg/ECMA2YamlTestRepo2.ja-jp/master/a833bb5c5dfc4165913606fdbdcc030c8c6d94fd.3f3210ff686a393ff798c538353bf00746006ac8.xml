{"nodes":[{"pos":[446,495],"content":"Represents a safe handle to the Windows registry.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents a safe handle to the Windows registry.","pos":[0,49]}]},{"pos":[508,1290],"content":"You can use platform invoke on the native `RegCreateKeyEx` Windows function to obtain a SafeRegistryHandle object, and then use it to create registry keys with the <xref:Microsoft.Win32.RegistryKey.FromHandle%2A?displayProperty=fullName> method.      > [!IMPORTANT] >  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref:System.IDisposable> interface topic.","needQuote":false,"needEscape":true,"nodes":[{"content":"You can use platform invoke on the native <ph id=\"ph1\">`RegCreateKeyEx`</ph> Windows function to obtain a SafeRegistryHandle object, and then use it to create registry keys with the &lt;xref:Microsoft.Win32.RegistryKey.FromHandle%2A?displayProperty=fullName&gt; method.","pos":[0,245],"source":"You can use platform invoke on the native `RegCreateKeyEx` Windows function to obtain a SafeRegistryHandle object, and then use it to create registry keys with the <xref:Microsoft.Win32.RegistryKey.FromHandle%2A?displayProperty=fullName> method."},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  This type implements the &lt;xref:System.IDisposable&gt; interface.","pos":[251,330],"source":"      > [!IMPORTANT] >  This type implements the <xref:System.IDisposable> interface."},{"content":"When you have finished using the type, you should dispose of it either directly or indirectly.","pos":[331,425]},{"content":"To dispose of the type directly, call its &lt;xref:System.IDisposable.Dispose%2A&gt; method in a <ph id=\"ph1\">`try`</ph><ph id=\"ph2\">/</ph><ph id=\"ph3\">`catch`</ph> block.","pos":[426,537],"source":" To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block."},{"content":"To dispose of it indirectly, use a language construct such as <ph id=\"ph1\">`using`</ph> (in C#) or <ph id=\"ph2\">`Using`</ph> (in Visual Basic).","pos":[538,645],"source":" To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic)."},{"content":"For more information, see the “Using an Object that Implements IDisposable” section in the &lt;xref:System.IDisposable&gt; interface topic.","pos":[646,779],"source":" For more information, see the “Using an Object that Implements IDisposable” section in the <xref:System.IDisposable> interface topic."}]},{"pos":[2249,2357],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"Microsoft.Win32.SafeHandles.SafeRegistryHandle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"Microsoft.Win32.SafeHandles.SafeRegistryHandle\"></xref> class."},{"pos":[2369,2424],"content":"Specifying <ph id=\"ph1\">`false`</ph> for <ph id=\"ph2\">`ownsHandle`</ph> is not recommended.","needQuote":true,"needEscape":true,"source":"Specifying `false` for `ownsHandle` is not recommended."},{"pos":[2608,2665],"content":"An object that represents the pre-existing handle to use.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that represents the pre-existing handle to use.","pos":[0,57]}]},{"pos":[2733,2947],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to reliably release the handle during the finalization phase; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> to prevent reliable release.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to reliably release the handle during the finalization phase; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to prevent reliable release."},{"pos":[3594,3606],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: Microsoft.Win32.SafeHandles.SafeRegistryHandle\n  id: SafeRegistryHandle\n  children:\n  - Microsoft.Win32.SafeHandles.SafeRegistryHandle.#ctor(System.IntPtr,System.Boolean)\n  - Microsoft.Win32.SafeHandles.SafeRegistryHandle.ReleaseHandle\n  langs:\n  - csharp\n  name: SafeRegistryHandle\n  nameWithType: SafeRegistryHandle\n  fullName: Microsoft.Win32.SafeHandles.SafeRegistryHandle\n  type: Class\n  summary: Represents a safe handle to the Windows registry.\n  remarks: \"You can use platform invoke on the native `RegCreateKeyEx` Windows function to obtain a SafeRegistryHandle object, and then use it to create registry keys with the <xref:Microsoft.Win32.RegistryKey.FromHandle%2A?displayProperty=fullName> method.  \\n  \\n> [!IMPORTANT]\\n>  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref:System.IDisposable> interface topic.\"\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      public sealed class SafeRegistryHandle : Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid\n  inheritance:\n  - System.Runtime.InteropServices.SafeHandle\n  - Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid\n  implements: []\n  inheritedMembers:\n  - Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.IsInvalid\n  platform:\n  - net462\n- uid: Microsoft.Win32.SafeHandles.SafeRegistryHandle.#ctor(System.IntPtr,System.Boolean)\n  id: '#ctor(System.IntPtr,System.Boolean)'\n  parent: Microsoft.Win32.SafeHandles.SafeRegistryHandle\n  langs:\n  - csharp\n  name: SafeRegistryHandle(IntPtr,Boolean)\n  nameWithType: SafeRegistryHandle.SafeRegistryHandle(IntPtr,Boolean)\n  fullName: Microsoft.Win32.SafeHandles.SafeRegistryHandle.SafeRegistryHandle(IntPtr,Boolean)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: Microsoft.Win32.SafeHandles\n  summary: Initializes a new instance of the <xref href=\"Microsoft.Win32.SafeHandles.SafeRegistryHandle\"></xref> class.\n  remarks: Specifying `false` for `ownsHandle` is not recommended.\n  syntax:\n    content: public SafeRegistryHandle (IntPtr preexistingHandle, bool ownsHandle);\n    parameters:\n    - id: preexistingHandle\n      type: System.IntPtr\n      description: An object that represents the pre-existing handle to use.\n    - id: ownsHandle\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to reliably release the handle during the finalization phase; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to prevent reliable release.\n  overload: Microsoft.Win32.SafeHandles.SafeRegistryHandle.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Win32.SafeHandles.SafeRegistryHandle.ReleaseHandle\n  id: ReleaseHandle\n  parent: Microsoft.Win32.SafeHandles.SafeRegistryHandle\n  langs:\n  - csharp\n  name: ReleaseHandle()\n  nameWithType: SafeRegistryHandle.ReleaseHandle()\n  fullName: Microsoft.Win32.SafeHandles.SafeRegistryHandle.ReleaseHandle()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: Microsoft.Win32.SafeHandles\n  syntax:\n    content: protected override bool ReleaseHandle ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: Microsoft.Win32.SafeHandles.SafeRegistryHandle.ReleaseHandle*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid\n  isExternal: false\n  name: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid\n- uid: Microsoft.Win32.SafeHandles.SafeRegistryHandle.#ctor(System.IntPtr,System.Boolean)\n  parent: Microsoft.Win32.SafeHandles.SafeRegistryHandle\n  isExternal: false\n  name: SafeRegistryHandle(IntPtr,Boolean)\n  nameWithType: SafeRegistryHandle.SafeRegistryHandle(IntPtr,Boolean)\n  fullName: Microsoft.Win32.SafeHandles.SafeRegistryHandle.SafeRegistryHandle(IntPtr,Boolean)\n- uid: System.IntPtr\n  parent: System\n  isExternal: true\n  name: IntPtr\n  nameWithType: IntPtr\n  fullName: System.IntPtr\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: Microsoft.Win32.SafeHandles.SafeRegistryHandle.ReleaseHandle\n  parent: Microsoft.Win32.SafeHandles.SafeRegistryHandle\n  isExternal: false\n  name: ReleaseHandle()\n  nameWithType: SafeRegistryHandle.ReleaseHandle()\n  fullName: Microsoft.Win32.SafeHandles.SafeRegistryHandle.ReleaseHandle()\n- uid: Microsoft.Win32.SafeHandles.SafeRegistryHandle.#ctor*\n  parent: Microsoft.Win32.SafeHandles.SafeRegistryHandle\n  isExternal: false\n  name: SafeRegistryHandle\n  nameWithType: SafeRegistryHandle.SafeRegistryHandle\n- uid: Microsoft.Win32.SafeHandles.SafeRegistryHandle.ReleaseHandle*\n  parent: Microsoft.Win32.SafeHandles.SafeRegistryHandle\n  isExternal: false\n  name: ReleaseHandle\n  nameWithType: SafeRegistryHandle.ReleaseHandle\n"}