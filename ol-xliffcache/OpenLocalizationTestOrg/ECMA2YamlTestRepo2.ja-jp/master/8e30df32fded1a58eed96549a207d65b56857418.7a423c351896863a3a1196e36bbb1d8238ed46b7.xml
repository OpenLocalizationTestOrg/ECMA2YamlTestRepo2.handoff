{"nodes":[{"pos":[542,644],"content":"Provides data for various events that report changes to the mouse wheel delta value of a mouse device.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides data for various events that report changes to the mouse wheel delta value of a mouse device.","pos":[0,102]}]},{"pos":[657,2012],"content":"MouseWheelEventArgs is used with the following events:      -   <xref:System.Windows.UIElement.MouseWheel?displayProperty=fullName>      -   <xref:System.Windows.ContentElement.MouseWheel?displayProperty=fullName>      -   <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName> (attached event)      -   <xref:System.Windows.UIElement.PreviewMouseWheel?displayProperty=fullName>      -   <xref:System.Windows.ContentElement.PreviewMouseWheel?displayProperty=fullName>      -   <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName> (attached event)       The <xref:System.Windows.Input.MouseWheelEventArgs.Delta%2A> property is positive if the mouse wheel is moved upward or forward (away from the user) or negative if the mouse wheel is moved downward or backward (toward the user).       This event is raised even for small mouse wheel movements. For some scenarios, it is appropriate to implement handlers that throttle small mouse wheel deltas by checking whether the delta exceeds a certain threshold. Otherwise, you might invoke your handler for cases where the mouse wheel delta was so small that any UI that is tied to the mouse wheel movement would not update. Exactly how you implement the threshold behavior in a handler and what that threshold should be is entirely implementation-specific.","needQuote":false,"needEscape":true,"nodes":[{"content":"MouseWheelEventArgs is used with the following events:      -   <xref:System.Windows.UIElement.MouseWheel?displayProperty=fullName>      -   <xref:System.Windows.ContentElement.MouseWheel?displayProperty=fullName>      -   <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName> (attached event)      -   <xref:System.Windows.UIElement.PreviewMouseWheel?displayProperty=fullName>      -   <xref:System.Windows.ContentElement.PreviewMouseWheel?displayProperty=fullName>      -   <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName> (attached event)       The <xref:System.Windows.Input.MouseWheelEventArgs.Delta%2A> property is positive if the mouse wheel is moved upward or forward (away from the user) or negative if the mouse wheel is moved downward or backward (toward the user).       This event is raised even for small mouse wheel movements. For some scenarios, it is appropriate to implement handlers that throttle small mouse wheel deltas by checking whether the delta exceeds a certain threshold. Otherwise, you might invoke your handler for cases where the mouse wheel delta was so small that any UI that is tied to the mouse wheel movement would not update. Exactly how you implement the threshold behavior in a handler and what that threshold should be is entirely implementation-specific.","pos":[0,1339],"nodes":[{"content":"MouseWheelEventArgs is used with the following events:      -   &lt;xref:System.Windows.UIElement.MouseWheel?displayProperty=fullName&gt;      -   &lt;xref:System.Windows.ContentElement.MouseWheel?displayProperty=fullName&gt;      -   &lt;xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName&gt; (attached event)      -   &lt;xref:System.Windows.UIElement.PreviewMouseWheel?displayProperty=fullName&gt;      -   &lt;xref:System.Windows.ContentElement.PreviewMouseWheel?displayProperty=fullName&gt;      -   &lt;xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName&gt; (attached event)       The &lt;xref:System.Windows.Input.MouseWheelEventArgs.Delta%2A&gt; property is positive if the mouse wheel is moved upward or forward (away from the user) or negative if the mouse wheel is moved downward or backward (toward the user).","pos":[0,820],"source":"MouseWheelEventArgs is used with the following events:      -   <xref:System.Windows.UIElement.MouseWheel?displayProperty=fullName>      -   <xref:System.Windows.ContentElement.MouseWheel?displayProperty=fullName>      -   <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName> (attached event)      -   <xref:System.Windows.UIElement.PreviewMouseWheel?displayProperty=fullName>      -   <xref:System.Windows.ContentElement.PreviewMouseWheel?displayProperty=fullName>      -   <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName> (attached event)       The <xref:System.Windows.Input.MouseWheelEventArgs.Delta%2A> property is positive if the mouse wheel is moved upward or forward (away from the user) or negative if the mouse wheel is moved downward or backward (toward the user)."},{"content":"This event is raised even for small mouse wheel movements.","pos":[827,885]},{"content":"For some scenarios, it is appropriate to implement handlers that throttle small mouse wheel deltas by checking whether the delta exceeds a certain threshold.","pos":[886,1043]},{"content":"Otherwise, you might invoke your handler for cases where the mouse wheel delta was so small that any UI that is tied to the mouse wheel movement would not update.","pos":[1044,1206]},{"content":"Exactly how you implement the threshold behavior in a handler and what that threshold should be is entirely implementation-specific.","pos":[1207,1339]}]}]},{"pos":[4380,4482],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.MouseWheelEventArgs\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Windows.Input.MouseWheelEventArgs\"></xref> class."},{"pos":[4697,4741],"content":"The mouse device associated with this event.","needQuote":true,"needEscape":true,"nodes":[{"content":"The mouse device associated with this event.","pos":[0,44]}]},{"pos":[4806,4839],"content":"The time when the input occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"The time when the input occurred.","pos":[0,33]}]},{"pos":[4900,4933],"content":"The amount the wheel has changed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The amount the wheel has changed.","pos":[0,33]}]},{"pos":[5383,5455],"content":"Gets a value that indicates the amount that the mouse wheel has changed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that indicates the amount that the mouse wheel has changed.","pos":[0,72]}]},{"pos":[5467,5633],"content":"The effective upper and lower ranges of this value potentially come from device implementations or other callers that raised the event, and are therefore not defined.","needQuote":true,"needEscape":true,"nodes":[{"content":"The effective upper and lower ranges of this value potentially come from device implementations or other callers that raised the event, and are therefore not defined.","pos":[0,166]}]},{"pos":[6323,6538],"content":"The amount the wheel has changed. This value is positive if the mouse wheel is rotated in an upward direction (away from the user) or negative if the mouse wheel is rotated in a downward direction (toward the user).","needQuote":true,"needEscape":true,"nodes":[{"content":"The amount the wheel has changed. This value is positive if the mouse wheel is rotated in an upward direction (away from the user) or negative if the mouse wheel is rotated in a downward direction (toward the user).","pos":[0,215],"nodes":[{"content":"The amount the wheel has changed.","pos":[0,33]},{"content":"This value is positive if the mouse wheel is rotated in an upward direction (away from the user) or negative if the mouse wheel is rotated in a downward direction (toward the user).","pos":[34,215]}]}]},{"pos":[7164,7254],"content":"Invokes event handlers in a type-specific way, which can increase event system efficiency.","needQuote":true,"needEscape":true,"nodes":[{"content":"Invokes event handlers in a type-specific way, which can increase event system efficiency.","pos":[0,90]}]},{"pos":[7266,7588],"content":"This implementation casts the generic handler as a <xref:System.Windows.Input.MouseWheelEventHandler> and then invokes it. For details on this implementation pattern and the reasons for it, see <xref:System.Windows.RoutedEventArgs.InvokeEventHandler%2A> and [Routed Events Overview](~/add/includes/ajax-current-ext-md.md).","needQuote":true,"needEscape":true,"nodes":[{"content":"This implementation casts the generic handler as a &lt;xref:System.Windows.Input.MouseWheelEventHandler&gt; and then invokes it.","pos":[0,122],"source":"This implementation casts the generic handler as a <xref:System.Windows.Input.MouseWheelEventHandler> and then invokes it."},{"content":"For details on this implementation pattern and the reasons for it, see &lt;xref:System.Windows.RoutedEventArgs.InvokeEventHandler%2A&gt; and <bpt id=\"p1\">[</bpt>Routed Events Overview<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[123,322],"source":" For details on this implementation pattern and the reasons for it, see <xref:System.Windows.RoutedEventArgs.InvokeEventHandler%2A> and [Routed Events Overview](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[7792,7843],"content":"The generic handler to call in a type-specific way.","needQuote":true,"needEscape":true,"nodes":[{"content":"The generic handler to call in a type-specific way.","pos":[0,51]}]},{"pos":[7913,7947],"content":"The target to call the handler on.","needQuote":true,"needEscape":true,"nodes":[{"content":"The target to call the handler on.","pos":[0,34]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Input.MouseWheelEventArgs\n  id: MouseWheelEventArgs\n  children:\n  - System.Windows.Input.MouseWheelEventArgs.#ctor(System.Windows.Input.MouseDevice,System.Int32,System.Int32)\n  - System.Windows.Input.MouseWheelEventArgs.Delta\n  - System.Windows.Input.MouseWheelEventArgs.InvokeEventHandler(System.Delegate,System.Object)\n  langs:\n  - csharp\n  name: MouseWheelEventArgs\n  nameWithType: MouseWheelEventArgs\n  fullName: System.Windows.Input.MouseWheelEventArgs\n  type: Class\n  summary: Provides data for various events that report changes to the mouse wheel delta value of a mouse device.\n  remarks: \"MouseWheelEventArgs is used with the following events:  \\n  \\n-   <xref:System.Windows.UIElement.MouseWheel?displayProperty=fullName>  \\n  \\n-   <xref:System.Windows.ContentElement.MouseWheel?displayProperty=fullName>  \\n  \\n-   <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName> (attached event)  \\n  \\n-   <xref:System.Windows.UIElement.PreviewMouseWheel?displayProperty=fullName>  \\n  \\n-   <xref:System.Windows.ContentElement.PreviewMouseWheel?displayProperty=fullName>  \\n  \\n-   <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName> (attached event)  \\n  \\n The <xref:System.Windows.Input.MouseWheelEventArgs.Delta%2A> property is positive if the mouse wheel is moved upward or forward (away from the user) or negative if the mouse wheel is moved downward or backward (toward the user).  \\n  \\n This event is raised even for small mouse wheel movements. For some scenarios, it is appropriate to implement handlers that throttle small mouse wheel deltas by checking whether the delta exceeds a certain threshold. Otherwise, you might invoke your handler for cases where the mouse wheel delta was so small that any UI that is tied to the mouse wheel movement would not update. Exactly how you implement the threshold behavior in a handler and what that threshold should be is entirely implementation-specific.\"\n  example:\n  - \"The following example moves a <xref:System.Windows.Controls.TextBox> up if the mouse wheel <xref:System.Windows.Input.MouseWheelEventArgs.Delta%2A> is positive and moves the <xref:System.Windows.Controls.TextBox> down if the mouse wheel <xref:System.Windows.Input.MouseWheelEventArgs.Delta%2A> is negative. The <xref:System.Windows.Controls.TextBox> is attached to a <xref:System.Windows.Controls.Canvas>.  \\n  \\n [!code-vb[mousesnippetsample#MouseWheelDelta](~/add/codesnippet/visualbasic/mousesnippetsample/window1.xaml.vb#mousewheeldelta)]\\n [!code-cs[mousesnippetsample#MouseWheelDelta](~/add/codesnippet/csharp/MouseSnippetSample/Window1.xaml.cs#mousewheeldelta)]\"\n  syntax:\n    content: 'public class MouseWheelEventArgs : System.Windows.Input.MouseEventArgs'\n  inheritance:\n  - System.EventArgs\n  - System.Windows.RoutedEventArgs\n  - System.Windows.Input.InputEventArgs\n  - System.Windows.Input.MouseEventArgs\n  implements: []\n  inheritedMembers:\n  - System.Windows.Input.InputEventArgs.Device\n  - System.Windows.Input.InputEventArgs.Timestamp\n  - System.Windows.Input.MouseEventArgs.GetPosition(System.Windows.IInputElement)\n  - System.Windows.Input.MouseEventArgs.LeftButton\n  - System.Windows.Input.MouseEventArgs.MiddleButton\n  - System.Windows.Input.MouseEventArgs.MouseDevice\n  - System.Windows.Input.MouseEventArgs.RightButton\n  - System.Windows.Input.MouseEventArgs.StylusDevice\n  - System.Windows.Input.MouseEventArgs.XButton1\n  - System.Windows.Input.MouseEventArgs.XButton2\n  - System.Windows.RoutedEventArgs.Handled\n  - System.Windows.RoutedEventArgs.OnSetSource(System.Object)\n  - System.Windows.RoutedEventArgs.OriginalSource\n  - System.Windows.RoutedEventArgs.RoutedEvent\n  - System.Windows.RoutedEventArgs.Source\n  platform:\n  - net462\n- uid: System.Windows.Input.MouseWheelEventArgs.#ctor(System.Windows.Input.MouseDevice,System.Int32,System.Int32)\n  id: '#ctor(System.Windows.Input.MouseDevice,System.Int32,System.Int32)'\n  parent: System.Windows.Input.MouseWheelEventArgs\n  langs:\n  - csharp\n  name: MouseWheelEventArgs(MouseDevice,Int32,Int32)\n  nameWithType: MouseWheelEventArgs.MouseWheelEventArgs(MouseDevice,Int32,Int32)\n  fullName: System.Windows.Input.MouseWheelEventArgs.MouseWheelEventArgs(MouseDevice,Int32,Int32)\n  type: Constructor\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Input.MouseWheelEventArgs\"></xref> class.\n  syntax:\n    content: public MouseWheelEventArgs (System.Windows.Input.MouseDevice mouse, int timestamp, int delta);\n    parameters:\n    - id: mouse\n      type: System.Windows.Input.MouseDevice\n      description: The mouse device associated with this event.\n    - id: timestamp\n      type: System.Int32\n      description: The time when the input occurred.\n    - id: delta\n      type: System.Int32\n      description: The amount the wheel has changed.\n  overload: System.Windows.Input.MouseWheelEventArgs.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.MouseWheelEventArgs.Delta\n  id: Delta\n  parent: System.Windows.Input.MouseWheelEventArgs\n  langs:\n  - csharp\n  name: Delta\n  nameWithType: MouseWheelEventArgs.Delta\n  fullName: System.Windows.Input.MouseWheelEventArgs.Delta\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets a value that indicates the amount that the mouse wheel has changed.\n  remarks: The effective upper and lower ranges of this value potentially come from device implementations or other callers that raised the event, and are therefore not defined.\n  example:\n  - \"The following example moves a <xref:System.Windows.Controls.TextBox> up if the mouse wheel Delta is positive and moves the <xref:System.Windows.Controls.TextBox> down if the mouse wheel Delta is negative. The <xref:System.Windows.Controls.TextBox> is attached to a <xref:System.Windows.Controls.Canvas>.  \\n  \\n [!code-vb[mousesnippetsample#MouseWheelDelta](~/add/codesnippet/visualbasic/mousesnippetsample/window1.xaml.vb#mousewheeldelta)]\\n [!code-cs[mousesnippetsample#MouseWheelDelta](~/add/codesnippet/csharp/MouseSnippetSample/Window1.xaml.cs#mousewheeldelta)]\"\n  syntax:\n    content: public int Delta { get; }\n    return:\n      type: System.Int32\n      description: The amount the wheel has changed. This value is positive if the mouse wheel is rotated in an upward direction (away from the user) or negative if the mouse wheel is rotated in a downward direction (toward the user).\n  overload: System.Windows.Input.MouseWheelEventArgs.Delta*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.MouseWheelEventArgs.InvokeEventHandler(System.Delegate,System.Object)\n  id: InvokeEventHandler(System.Delegate,System.Object)\n  parent: System.Windows.Input.MouseWheelEventArgs\n  langs:\n  - csharp\n  name: InvokeEventHandler(Delegate,Object)\n  nameWithType: MouseWheelEventArgs.InvokeEventHandler(Delegate,Object)\n  fullName: System.Windows.Input.MouseWheelEventArgs.InvokeEventHandler(Delegate,Object)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Invokes event handlers in a type-specific way, which can increase event system efficiency.\n  remarks: This implementation casts the generic handler as a <xref:System.Windows.Input.MouseWheelEventHandler> and then invokes it. For details on this implementation pattern and the reasons for it, see <xref:System.Windows.RoutedEventArgs.InvokeEventHandler%2A> and [Routed Events Overview](~/add/includes/ajax-current-ext-md.md).\n  syntax:\n    content: protected override void InvokeEventHandler (Delegate genericHandler, object genericTarget);\n    parameters:\n    - id: genericHandler\n      type: System.Delegate\n      description: The generic handler to call in a type-specific way.\n    - id: genericTarget\n      type: System.Object\n      description: The target to call the handler on.\n  overload: System.Windows.Input.MouseWheelEventArgs.InvokeEventHandler*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Windows.Input.MouseEventArgs\n  isExternal: false\n  name: System.Windows.Input.MouseEventArgs\n- uid: System.Windows.Input.MouseWheelEventArgs.#ctor(System.Windows.Input.MouseDevice,System.Int32,System.Int32)\n  parent: System.Windows.Input.MouseWheelEventArgs\n  isExternal: false\n  name: MouseWheelEventArgs(MouseDevice,Int32,Int32)\n  nameWithType: MouseWheelEventArgs.MouseWheelEventArgs(MouseDevice,Int32,Int32)\n  fullName: System.Windows.Input.MouseWheelEventArgs.MouseWheelEventArgs(MouseDevice,Int32,Int32)\n- uid: System.Windows.Input.MouseDevice\n  parent: System.Windows.Input\n  isExternal: false\n  name: MouseDevice\n  nameWithType: MouseDevice\n  fullName: System.Windows.Input.MouseDevice\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Windows.Input.MouseWheelEventArgs.Delta\n  parent: System.Windows.Input.MouseWheelEventArgs\n  isExternal: false\n  name: Delta\n  nameWithType: MouseWheelEventArgs.Delta\n  fullName: System.Windows.Input.MouseWheelEventArgs.Delta\n- uid: System.Windows.Input.MouseWheelEventArgs.InvokeEventHandler(System.Delegate,System.Object)\n  parent: System.Windows.Input.MouseWheelEventArgs\n  isExternal: false\n  name: InvokeEventHandler(Delegate,Object)\n  nameWithType: MouseWheelEventArgs.InvokeEventHandler(Delegate,Object)\n  fullName: System.Windows.Input.MouseWheelEventArgs.InvokeEventHandler(Delegate,Object)\n- uid: System.Delegate\n  parent: System\n  isExternal: true\n  name: Delegate\n  nameWithType: Delegate\n  fullName: System.Delegate\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Windows.Input.MouseWheelEventArgs.#ctor*\n  parent: System.Windows.Input.MouseWheelEventArgs\n  isExternal: false\n  name: MouseWheelEventArgs\n  nameWithType: MouseWheelEventArgs.MouseWheelEventArgs\n- uid: System.Windows.Input.MouseWheelEventArgs.Delta*\n  parent: System.Windows.Input.MouseWheelEventArgs\n  isExternal: false\n  name: Delta\n  nameWithType: MouseWheelEventArgs.Delta\n- uid: System.Windows.Input.MouseWheelEventArgs.InvokeEventHandler*\n  parent: System.Windows.Input.MouseWheelEventArgs\n  isExternal: false\n  name: InvokeEventHandler\n  nameWithType: MouseWheelEventArgs.InvokeEventHandler\n"}