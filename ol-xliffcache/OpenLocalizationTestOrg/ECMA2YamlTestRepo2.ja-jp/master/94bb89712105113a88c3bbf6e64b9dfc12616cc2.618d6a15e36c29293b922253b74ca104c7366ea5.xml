{"nodes":[{"pos":[731,779],"content":"Represents an installed speech synthesis engine.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents an installed speech synthesis engine.","pos":[0,48]}]},{"pos":[792,1765],"content":"A voice is an installed speech synthesis engine, which is also referred to as a text-to-speech engine or a TTS engine. The <xref:System.Speech.Synthesis.SpeechSynthesizer> object uses a voice to generate speech from text. The properties of the VoiceInfo object identify a voice and describe its characteristics. The most defining characteristic of a voice is its <xref:System.Speech.Synthesis.VoiceInfo.Culture%2A>, which defines the single language that a voice can speak.       The <xref:System.Speech.Synthesis.SpeechSynthesizer.Voice%2A> property returns a VoiceInfo object that contains information about the current voice in use by the <xref:System.Speech.Synthesis.SpeechSynthesizer>. You can also use a VoiceInfo object to get information about any of the voices that are installed on the system, as returned by the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices> method. See <xref:System.Speech.Synthesis.InstalledVoice> for more information.","needQuote":false,"needEscape":true,"nodes":[{"content":"A voice is an installed speech synthesis engine, which is also referred to as a text-to-speech engine or a TTS engine. The <xref:System.Speech.Synthesis.SpeechSynthesizer> object uses a voice to generate speech from text. The properties of the VoiceInfo object identify a voice and describe its characteristics. The most defining characteristic of a voice is its <xref:System.Speech.Synthesis.VoiceInfo.Culture%2A>, which defines the single language that a voice can speak.       The <xref:System.Speech.Synthesis.SpeechSynthesizer.Voice%2A> property returns a VoiceInfo object that contains information about the current voice in use by the <xref:System.Speech.Synthesis.SpeechSynthesizer>. You can also use a VoiceInfo object to get information about any of the voices that are installed on the system, as returned by the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices> method. See <xref:System.Speech.Synthesis.InstalledVoice> for more information.","pos":[0,971],"nodes":[{"content":"A voice is an installed speech synthesis engine, which is also referred to as a text-to-speech engine or a TTS engine.","pos":[0,118]},{"content":"The &lt;xref:System.Speech.Synthesis.SpeechSynthesizer&gt; object uses a voice to generate speech from text.","pos":[119,221],"source":" The <xref:System.Speech.Synthesis.SpeechSynthesizer> object uses a voice to generate speech from text."},{"content":"The properties of the VoiceInfo object identify a voice and describe its characteristics.","pos":[222,311]},{"content":"The most defining characteristic of a voice is its &lt;xref:System.Speech.Synthesis.VoiceInfo.Culture%2A&gt;, which defines the single language that a voice can speak.","pos":[312,473],"source":" The most defining characteristic of a voice is its <xref:System.Speech.Synthesis.VoiceInfo.Culture%2A>, which defines the single language that a voice can speak."},{"content":"The &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.Voice%2A&gt; property returns a VoiceInfo object that contains information about the current voice in use by the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer&gt;.","pos":[480,691],"source":"       The <xref:System.Speech.Synthesis.SpeechSynthesizer.Voice%2A> property returns a VoiceInfo object that contains information about the current voice in use by the <xref:System.Speech.Synthesis.SpeechSynthesizer>."},{"content":"You can also use a VoiceInfo object to get information about any of the voices that are installed on the system, as returned by the &lt;xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices&gt; method.","pos":[692,899],"source":" You can also use a VoiceInfo object to get information about any of the voices that are installed on the system, as returned by the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices> method."},{"content":"See &lt;xref:System.Speech.Synthesis.InstalledVoice&gt; for more information.","pos":[900,971],"source":" See <xref:System.Speech.Synthesis.InstalledVoice> for more information."}]}]},{"pos":[5051,5095],"content":"Gets additional information about the voice.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets additional information about the voice.","pos":[0,44]}]},{"pos":[5315,5393],"content":"Returns a collection of name/value pairs that describe and identify the voice.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a collection of name/value pairs that describe and identify the voice.","pos":[0,78]}]},{"pos":[5804,5830],"content":"Gets the age of the voice.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the age of the voice.","pos":[0,26]}]},{"pos":[5842,5968],"content":"The Age property gets a member of the <xref:System.Speech.Synthesis.VoiceAge> enumeration that indicates the age of the voice.","needQuote":true,"needEscape":true,"nodes":[{"content":"The Age property gets a member of the &lt;xref:System.Speech.Synthesis.VoiceAge&gt; enumeration that indicates the age of the voice.","pos":[0,126],"source":"The Age property gets a member of the <xref:System.Speech.Synthesis.VoiceAge> enumeration that indicates the age of the voice."}]},{"pos":[6121,6150],"content":"Returns the age of the voice.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the age of the voice.","pos":[0,29]}]},{"pos":[6570,6600],"content":"Gets the culture of the voice.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the culture of the voice.","pos":[0,30]}]},{"pos":[6612,7210],"content":"The <xref:System.Globalization.CultureInfo> class specifies a unique name for each culture. The name is a combination of an ISO 639 two-letter lowercase culture code associated with a language and an ISO 3166 two-letter uppercase subculture code associated with a country or region. Examples of culture names include \"es-US\" for Spanish as spoken in the US, or \"fr-CA\" for French as spoken in Canada. You can specify a neutral culture by using only the two-digit lowercase language code. For example, \"fr\" specifies the neutral culture for French, and \"de\" specifies the neutral culture for German.","needQuote":true,"needEscape":true,"nodes":[{"content":"The <xref:System.Globalization.CultureInfo> class specifies a unique name for each culture. The name is a combination of an ISO 639 two-letter lowercase culture code associated with a language and an ISO 3166 two-letter uppercase subculture code associated with a country or region. Examples of culture names include \"es-US\" for Spanish as spoken in the US, or \"fr-CA\" for French as spoken in Canada. You can specify a neutral culture by using only the two-digit lowercase language code. For example, \"fr\" specifies the neutral culture for French, and \"de\" specifies the neutral culture for German.","pos":[0,598],"nodes":[{"content":"The &lt;xref:System.Globalization.CultureInfo&gt; class specifies a unique name for each culture.","pos":[0,91],"source":"The <xref:System.Globalization.CultureInfo> class specifies a unique name for each culture."},{"content":"The name is a combination of an ISO 639 two-letter lowercase culture code associated with a language and an ISO 3166 two-letter uppercase subculture code associated with a country or region.","pos":[92,282]},{"content":"Examples of culture names include \"es-US\" for Spanish as spoken in the US, or \"fr-CA\" for French as spoken in Canada.","pos":[283,400]},{"content":"You can specify a neutral culture by using only the two-digit lowercase language code.","pos":[401,487]},{"content":"For example, \"fr\" specifies the neutral culture for French, and \"de\" specifies the neutral culture for German.","pos":[488,598]}]}]},{"pos":[7367,7590],"content":"Returns a <xref:System.Globalization.CultureInfo> object that provides information about a specific culture, such as the names of the culture, the writing system, the calendar used, and how to format dates and sort strings.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a &lt;xref:System.Globalization.CultureInfo&gt; object that provides information about a specific culture, such as the names of the culture, the writing system, the calendar used, and how to format dates and sort strings.","pos":[0,223],"source":"Returns a <xref:System.Globalization.CultureInfo> object that provides information about a specific culture, such as the names of the culture, the writing system, the calendar used, and how to format dates and sort strings."}]},{"pos":[8034,8068],"content":"Gets the description of the voice.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the description of the voice.","pos":[0,34]}]},{"pos":[8184,8221],"content":"Returns the description of the voice.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the description of the voice.","pos":[0,37]}]},{"pos":[8696,8860],"content":"Compares the fields of the voice with the specified <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.VoiceInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object to determine whether they contain the same values.","needQuote":true,"needEscape":true,"source":"Compares the fields of the voice with the specified <xref href=\"System.Speech.Synthesis.VoiceInfo\"></xref> object to determine whether they contain the same values."},{"pos":[8872,9045],"content":"The Equals method takes a <xref:System.Object> type as its parameter. If that object is not of the <xref:System.Speech.Synthesis.VoiceInfo> type, the method returns `False`.","needQuote":true,"needEscape":true,"nodes":[{"content":"The Equals method takes a &lt;xref:System.Object&gt; type as its parameter.","pos":[0,69],"source":"The Equals method takes a <xref:System.Object> type as its parameter."},{"content":"If that object is not of the &lt;xref:System.Speech.Synthesis.VoiceInfo&gt; type, the method returns <ph id=\"ph1\">`False`</ph>.","pos":[70,173],"source":" If that object is not of the <xref:System.Speech.Synthesis.VoiceInfo> type, the method returns `False`."}]},{"pos":[9186,9262],"content":"The specified <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.VoiceInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"The specified <xref href=\"System.Speech.Synthesis.VoiceInfo\"></xref> object."},{"pos":[9321,9570],"content":"Returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the fields of the two <bpt id=\"p2\">&lt;xref href=\"System.Speech.Synthesis.VoiceInfo\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> objects are equal; otherwise returns <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_False\" name=\"False\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Returns <xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"></xref> if the fields of the two <xref href=\"System.Speech.Synthesis.VoiceInfo\"></xref> objects are equal; otherwise returns <xref uid=\"langword_csharp_False\" name=\"False\" href=\"\"></xref>."},{"pos":[9988,10017],"content":"Gets the gender of the voice.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the gender of the voice.","pos":[0,29]}]},{"pos":[10029,10164],"content":"The Gender property gets a member of the <xref:System.Speech.Synthesis.VoiceGender> enumeration that indicates the gender of the voice.","needQuote":true,"needEscape":true,"nodes":[{"content":"The Gender property gets a member of the &lt;xref:System.Speech.Synthesis.VoiceGender&gt; enumeration that indicates the gender of the voice.","pos":[0,135],"source":"The Gender property gets a member of the <xref:System.Speech.Synthesis.VoiceGender> enumeration that indicates the gender of the voice."}]},{"pos":[10326,10358],"content":"Returns the gender of the voice.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the gender of the voice.","pos":[0,32]}]},{"pos":[10805,10851],"content":"Provides a hash code for a <ph id=\"ph1\">`VoiceInfo`</ph> object.","needQuote":true,"needEscape":true,"source":"Provides a hash code for a `VoiceInfo` object."},{"pos":[10986,11076],"content":"A hash code for the current <bpt id=\"p1\">&lt;xref href=\"System.Speech.Synthesis.VoiceInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"A hash code for the current <xref href=\"System.Speech.Synthesis.VoiceInfo\"></xref> object."},{"pos":[11479,11504],"content":"Gets the ID of the voice.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the ID of the voice.","pos":[0,25]}]},{"pos":[11611,11648],"content":"Returns the identifier for the voice.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the identifier for the voice.","pos":[0,37]}]},{"pos":[12052,12079],"content":"Gets the name of the voice.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the name of the voice.","pos":[0,27]}]},{"pos":[12188,12218],"content":"Returns the name of the voice.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the name of the voice.","pos":[0,30]}]},{"pos":[12709,12770],"content":"Gets the collection of audio formats that the voice supports.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the collection of audio formats that the voice supports.","pos":[0,61]}]},{"pos":[13073,13139],"content":"Returns a collection of the audio formats that the voice supports.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a collection of the audio formats that the voice supports.","pos":[0,66]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Speech.Synthesis.VoiceInfo\n  id: VoiceInfo\n  children:\n  - System.Speech.Synthesis.VoiceInfo.AdditionalInfo\n  - System.Speech.Synthesis.VoiceInfo.Age\n  - System.Speech.Synthesis.VoiceInfo.Culture\n  - System.Speech.Synthesis.VoiceInfo.Description\n  - System.Speech.Synthesis.VoiceInfo.Equals(System.Object)\n  - System.Speech.Synthesis.VoiceInfo.Gender\n  - System.Speech.Synthesis.VoiceInfo.GetHashCode\n  - System.Speech.Synthesis.VoiceInfo.Id\n  - System.Speech.Synthesis.VoiceInfo.Name\n  - System.Speech.Synthesis.VoiceInfo.SupportedAudioFormats\n  langs:\n  - csharp\n  name: VoiceInfo\n  nameWithType: VoiceInfo\n  fullName: System.Speech.Synthesis.VoiceInfo\n  type: Class\n  summary: Represents an installed speech synthesis engine.\n  remarks: \"A voice is an installed speech synthesis engine, which is also referred to as a text-to-speech engine or a TTS engine. The <xref:System.Speech.Synthesis.SpeechSynthesizer> object uses a voice to generate speech from text. The properties of the VoiceInfo object identify a voice and describe its characteristics. The most defining characteristic of a voice is its <xref:System.Speech.Synthesis.VoiceInfo.Culture%2A>, which defines the single language that a voice can speak.  \\n  \\n The <xref:System.Speech.Synthesis.SpeechSynthesizer.Voice%2A> property returns a VoiceInfo object that contains information about the current voice in use by the <xref:System.Speech.Synthesis.SpeechSynthesizer>. You can also use a VoiceInfo object to get information about any of the voices that are installed on the system, as returned by the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices> method. See <xref:System.Speech.Synthesis.InstalledVoice> for more information.\"\n  example:\n  - \"The following example is part of a console application that initializes a <xref:System.Speech.Synthesis.SpeechSynthesizer> object and outputs to the console a list of the installed voices (engines for speech synthesis) and demonstrates the information that is available for each voice.  \\n  \\n```c#  \\nusing System;  \\nusing System.Speech.Synthesis;  \\nusing System.Speech.AudioFormat;  \\n  \\nnamespace SampleSynthesis  \\n{  \\n  class Program  \\n  {  \\n    static void Main(string[] args)  \\n    {  \\n  \\n      // Initialize a new instance of the SpeechSynthesizer.  \\n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \\n      {  \\n  \\n        // Output information about all of the installed voices.   \\n        Console.WriteLine(\\\"Installed voices -\\\");  \\n        foreach (InstalledVoice voice in synth.GetInstalledVoices())  \\n        {  \\n          VoiceInfo info = voice.VoiceInfo;  \\n          string AudioFormats = \\\"\\\";  \\n          foreach (SpeechAudioFormatInfo fmt in info.SupportedAudioFormats)  \\n          {  \\n            AudioFormats += String.Format(\\\"{0}\\\\n\\\",  \\n            fmt.EncodingFormat.ToString());  \\n          }  \\n  \\n          Console.WriteLine(\\\" Name:          \\\" + info.Name);  \\n          Console.WriteLine(\\\" Culture:       \\\" + info.Culture);  \\n          Console.WriteLine(\\\" Age:           \\\" + info.Age);  \\n          Console.WriteLine(\\\" Gender:        \\\" + info.Gender);  \\n          Console.WriteLine(\\\" Description:   \\\" + info.Description);  \\n          Console.WriteLine(\\\" ID:            \\\" + info.Id);  \\n          Console.WriteLine(\\\" Enabled:       \\\" + voice.Enabled);  \\n          if (info.SupportedAudioFormats.Count != 0)  \\n          {  \\n            Console.WriteLine( \\\" Audio formats: \\\" + AudioFormats);  \\n          }  \\n          else  \\n          {  \\n            Console.WriteLine(\\\" No supported audio formats found\\\");  \\n          }  \\n  \\n          string AdditionalInfo = \\\"\\\";  \\n          foreach (string key in info.AdditionalInfo.Keys)  \\n          {  \\n            AdditionalInfo += String.Format(\\\"  {0}: {1}\\\\n\\\", key, info.AdditionalInfo[key]);  \\n          }  \\n  \\n          Console.WriteLine(\\\" Additional Info - \\\" + AdditionalInfo);  \\n          Console.WriteLine();  \\n        }  \\n      }  \\n      Console.WriteLine(\\\"Press any key to exit...\\\");  \\n      Console.ReadKey();  \\n    }  \\n  }  \\n}  \\n  \\n```\"\n  syntax:\n    content: >-\n      [System.Diagnostics.DebuggerDisplay(\"{(_name != null ? \"'\" + _name + \"' \" : \"\") +  (_culture != null ? \" '\" + _culture.ToString () + \"' \" : \"\") + (_gender != VoiceGender.NotSet ? \" '\" + _gender.ToString () + \"' \" : \"\") + (_age != VoiceAge.NotSet ? \" '\" + _age.ToString () + \"' \" : \"\") + (_variant > 0 ? \" \" + _variant.ToString () : \"\")}\")]\n\n      public class VoiceInfo\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.VoiceInfo.AdditionalInfo\n  id: AdditionalInfo\n  parent: System.Speech.Synthesis.VoiceInfo\n  langs:\n  - csharp\n  name: AdditionalInfo\n  nameWithType: VoiceInfo.AdditionalInfo\n  fullName: System.Speech.Synthesis.VoiceInfo.AdditionalInfo\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Gets additional information about the voice.\n  syntax:\n    content: public System.Collections.Generic.IDictionary<string,string> AdditionalInfo { get; }\n    return:\n      type: System.Collections.Generic.IDictionary{System.String,System.String}\n      description: Returns a collection of name/value pairs that describe and identify the voice.\n  overload: System.Speech.Synthesis.VoiceInfo.AdditionalInfo*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.VoiceInfo.Age\n  id: Age\n  parent: System.Speech.Synthesis.VoiceInfo\n  langs:\n  - csharp\n  name: Age\n  nameWithType: VoiceInfo.Age\n  fullName: System.Speech.Synthesis.VoiceInfo.Age\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Gets the age of the voice.\n  remarks: The Age property gets a member of the <xref:System.Speech.Synthesis.VoiceAge> enumeration that indicates the age of the voice.\n  syntax:\n    content: public System.Speech.Synthesis.VoiceAge Age { get; }\n    return:\n      type: System.Speech.Synthesis.VoiceAge\n      description: Returns the age of the voice.\n  overload: System.Speech.Synthesis.VoiceInfo.Age*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.VoiceInfo.Culture\n  id: Culture\n  parent: System.Speech.Synthesis.VoiceInfo\n  langs:\n  - csharp\n  name: Culture\n  nameWithType: VoiceInfo.Culture\n  fullName: System.Speech.Synthesis.VoiceInfo.Culture\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Gets the culture of the voice.\n  remarks: The <xref:System.Globalization.CultureInfo> class specifies a unique name for each culture. The name is a combination of an ISO 639 two-letter lowercase culture code associated with a language and an ISO 3166 two-letter uppercase subculture code associated with a country or region. Examples of culture names include \"es-US\" for Spanish as spoken in the US, or \"fr-CA\" for French as spoken in Canada. You can specify a neutral culture by using only the two-digit lowercase language code. For example, \"fr\" specifies the neutral culture for French, and \"de\" specifies the neutral culture for German.\n  syntax:\n    content: public System.Globalization.CultureInfo Culture { get; }\n    return:\n      type: System.Globalization.CultureInfo\n      description: Returns a <xref:System.Globalization.CultureInfo> object that provides information about a specific culture, such as the names of the culture, the writing system, the calendar used, and how to format dates and sort strings.\n  overload: System.Speech.Synthesis.VoiceInfo.Culture*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.VoiceInfo.Description\n  id: Description\n  parent: System.Speech.Synthesis.VoiceInfo\n  langs:\n  - csharp\n  name: Description\n  nameWithType: VoiceInfo.Description\n  fullName: System.Speech.Synthesis.VoiceInfo.Description\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Gets the description of the voice.\n  syntax:\n    content: public string Description { get; }\n    return:\n      type: System.String\n      description: Returns the description of the voice.\n  overload: System.Speech.Synthesis.VoiceInfo.Description*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.VoiceInfo.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Speech.Synthesis.VoiceInfo\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: VoiceInfo.Equals(Object)\n  fullName: System.Speech.Synthesis.VoiceInfo.Equals(Object)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Compares the fields of the voice with the specified <xref href=\"System.Speech.Synthesis.VoiceInfo\"></xref> object to determine whether they contain the same values.\n  remarks: The Equals method takes a <xref:System.Object> type as its parameter. If that object is not of the <xref:System.Speech.Synthesis.VoiceInfo> type, the method returns `False`.\n  syntax:\n    content: public override bool Equals (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The specified <xref href=\"System.Speech.Synthesis.VoiceInfo\"></xref> object.\n    return:\n      type: System.Boolean\n      description: Returns <xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"></xref> if the fields of the two <xref href=\"System.Speech.Synthesis.VoiceInfo\"></xref> objects are equal; otherwise returns <xref uid=\"langword_csharp_False\" name=\"False\" href=\"\"></xref>.\n  overload: System.Speech.Synthesis.VoiceInfo.Equals*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.VoiceInfo.Gender\n  id: Gender\n  parent: System.Speech.Synthesis.VoiceInfo\n  langs:\n  - csharp\n  name: Gender\n  nameWithType: VoiceInfo.Gender\n  fullName: System.Speech.Synthesis.VoiceInfo.Gender\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Gets the gender of the voice.\n  remarks: The Gender property gets a member of the <xref:System.Speech.Synthesis.VoiceGender> enumeration that indicates the gender of the voice.\n  syntax:\n    content: public System.Speech.Synthesis.VoiceGender Gender { get; }\n    return:\n      type: System.Speech.Synthesis.VoiceGender\n      description: Returns the gender of the voice.\n  overload: System.Speech.Synthesis.VoiceInfo.Gender*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.VoiceInfo.GetHashCode\n  id: GetHashCode\n  parent: System.Speech.Synthesis.VoiceInfo\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: VoiceInfo.GetHashCode()\n  fullName: System.Speech.Synthesis.VoiceInfo.GetHashCode()\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Provides a hash code for a `VoiceInfo` object.\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: A hash code for the current <xref href=\"System.Speech.Synthesis.VoiceInfo\"></xref> object.\n  overload: System.Speech.Synthesis.VoiceInfo.GetHashCode*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.VoiceInfo.Id\n  id: Id\n  parent: System.Speech.Synthesis.VoiceInfo\n  langs:\n  - csharp\n  name: Id\n  nameWithType: VoiceInfo.Id\n  fullName: System.Speech.Synthesis.VoiceInfo.Id\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Gets the ID of the voice.\n  syntax:\n    content: public string Id { get; }\n    return:\n      type: System.String\n      description: Returns the identifier for the voice.\n  overload: System.Speech.Synthesis.VoiceInfo.Id*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.VoiceInfo.Name\n  id: Name\n  parent: System.Speech.Synthesis.VoiceInfo\n  langs:\n  - csharp\n  name: Name\n  nameWithType: VoiceInfo.Name\n  fullName: System.Speech.Synthesis.VoiceInfo.Name\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Gets the name of the voice.\n  syntax:\n    content: public string Name { get; }\n    return:\n      type: System.String\n      description: Returns the name of the voice.\n  overload: System.Speech.Synthesis.VoiceInfo.Name*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Synthesis.VoiceInfo.SupportedAudioFormats\n  id: SupportedAudioFormats\n  parent: System.Speech.Synthesis.VoiceInfo\n  langs:\n  - csharp\n  name: SupportedAudioFormats\n  nameWithType: VoiceInfo.SupportedAudioFormats\n  fullName: System.Speech.Synthesis.VoiceInfo.SupportedAudioFormats\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Synthesis\n  summary: Gets the collection of audio formats that the voice supports.\n  syntax:\n    content: public System.Collections.ObjectModel.ReadOnlyCollection<System.Speech.AudioFormat.SpeechAudioFormatInfo> SupportedAudioFormats { get; }\n    return:\n      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Speech.AudioFormat.SpeechAudioFormatInfo}\n      description: Returns a collection of the audio formats that the voice supports.\n  overload: System.Speech.Synthesis.VoiceInfo.SupportedAudioFormats*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Speech.Synthesis.VoiceInfo.AdditionalInfo\n  parent: System.Speech.Synthesis.VoiceInfo\n  isExternal: false\n  name: AdditionalInfo\n  nameWithType: VoiceInfo.AdditionalInfo\n  fullName: System.Speech.Synthesis.VoiceInfo.AdditionalInfo\n- uid: System.Collections.Generic.IDictionary{System.String,System.String}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IDictionary<String,String>\n  nameWithType: IDictionary<String,String>\n  fullName: System.Collections.Generic.IDictionary<System.String,System.String>\n  spec.csharp:\n  - uid: System.Collections.Generic.IDictionary`2\n    name: IDictionary\n    nameWithType: IDictionary\n    fullName: IDictionary<System.String,System.String>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: String\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: String\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Speech.Synthesis.VoiceInfo.Age\n  parent: System.Speech.Synthesis.VoiceInfo\n  isExternal: false\n  name: Age\n  nameWithType: VoiceInfo.Age\n  fullName: System.Speech.Synthesis.VoiceInfo.Age\n- uid: System.Speech.Synthesis.VoiceAge\n  parent: System.Speech.Synthesis\n  isExternal: false\n  name: VoiceAge\n  nameWithType: VoiceAge\n  fullName: System.Speech.Synthesis.VoiceAge\n- uid: System.Speech.Synthesis.VoiceInfo.Culture\n  parent: System.Speech.Synthesis.VoiceInfo\n  isExternal: false\n  name: Culture\n  nameWithType: VoiceInfo.Culture\n  fullName: System.Speech.Synthesis.VoiceInfo.Culture\n- uid: System.Globalization.CultureInfo\n  parent: System.Globalization\n  isExternal: true\n  name: CultureInfo\n  nameWithType: CultureInfo\n  fullName: System.Globalization.CultureInfo\n- uid: System.Speech.Synthesis.VoiceInfo.Description\n  parent: System.Speech.Synthesis.VoiceInfo\n  isExternal: false\n  name: Description\n  nameWithType: VoiceInfo.Description\n  fullName: System.Speech.Synthesis.VoiceInfo.Description\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Speech.Synthesis.VoiceInfo.Equals(System.Object)\n  parent: System.Speech.Synthesis.VoiceInfo\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: VoiceInfo.Equals(Object)\n  fullName: System.Speech.Synthesis.VoiceInfo.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Speech.Synthesis.VoiceInfo.Gender\n  parent: System.Speech.Synthesis.VoiceInfo\n  isExternal: false\n  name: Gender\n  nameWithType: VoiceInfo.Gender\n  fullName: System.Speech.Synthesis.VoiceInfo.Gender\n- uid: System.Speech.Synthesis.VoiceGender\n  parent: System.Speech.Synthesis\n  isExternal: false\n  name: VoiceGender\n  nameWithType: VoiceGender\n  fullName: System.Speech.Synthesis.VoiceGender\n- uid: System.Speech.Synthesis.VoiceInfo.GetHashCode\n  parent: System.Speech.Synthesis.VoiceInfo\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: VoiceInfo.GetHashCode()\n  fullName: System.Speech.Synthesis.VoiceInfo.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Speech.Synthesis.VoiceInfo.Id\n  parent: System.Speech.Synthesis.VoiceInfo\n  isExternal: false\n  name: Id\n  nameWithType: VoiceInfo.Id\n  fullName: System.Speech.Synthesis.VoiceInfo.Id\n- uid: System.Speech.Synthesis.VoiceInfo.Name\n  parent: System.Speech.Synthesis.VoiceInfo\n  isExternal: false\n  name: Name\n  nameWithType: VoiceInfo.Name\n  fullName: System.Speech.Synthesis.VoiceInfo.Name\n- uid: System.Speech.Synthesis.VoiceInfo.SupportedAudioFormats\n  parent: System.Speech.Synthesis.VoiceInfo\n  isExternal: false\n  name: SupportedAudioFormats\n  nameWithType: VoiceInfo.SupportedAudioFormats\n  fullName: System.Speech.Synthesis.VoiceInfo.SupportedAudioFormats\n- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Speech.AudioFormat.SpeechAudioFormatInfo}\n  parent: System.Collections.ObjectModel\n  isExternal: true\n  name: ReadOnlyCollection<SpeechAudioFormatInfo>\n  nameWithType: ReadOnlyCollection<SpeechAudioFormatInfo>\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Speech.AudioFormat.SpeechAudioFormatInfo>\n  spec.csharp:\n  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n    name: ReadOnlyCollection\n    nameWithType: ReadOnlyCollection\n    fullName: ReadOnlyCollection<System.Speech.AudioFormat.SpeechAudioFormatInfo>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Speech.AudioFormat.SpeechAudioFormatInfo\n    name: SpeechAudioFormatInfo\n    nameWithType: SpeechAudioFormatInfo\n    fullName: SpeechAudioFormatInfo\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Speech.Synthesis.VoiceInfo.AdditionalInfo*\n  parent: System.Speech.Synthesis.VoiceInfo\n  isExternal: false\n  name: AdditionalInfo\n  nameWithType: VoiceInfo.AdditionalInfo\n- uid: System.Speech.Synthesis.VoiceInfo.Age*\n  parent: System.Speech.Synthesis.VoiceInfo\n  isExternal: false\n  name: Age\n  nameWithType: VoiceInfo.Age\n- uid: System.Speech.Synthesis.VoiceInfo.Culture*\n  parent: System.Speech.Synthesis.VoiceInfo\n  isExternal: false\n  name: Culture\n  nameWithType: VoiceInfo.Culture\n- uid: System.Speech.Synthesis.VoiceInfo.Description*\n  parent: System.Speech.Synthesis.VoiceInfo\n  isExternal: false\n  name: Description\n  nameWithType: VoiceInfo.Description\n- uid: System.Speech.Synthesis.VoiceInfo.Equals*\n  parent: System.Speech.Synthesis.VoiceInfo\n  isExternal: false\n  name: Equals\n  nameWithType: VoiceInfo.Equals\n- uid: System.Speech.Synthesis.VoiceInfo.Gender*\n  parent: System.Speech.Synthesis.VoiceInfo\n  isExternal: false\n  name: Gender\n  nameWithType: VoiceInfo.Gender\n- uid: System.Speech.Synthesis.VoiceInfo.GetHashCode*\n  parent: System.Speech.Synthesis.VoiceInfo\n  isExternal: false\n  name: GetHashCode\n  nameWithType: VoiceInfo.GetHashCode\n- uid: System.Speech.Synthesis.VoiceInfo.Id*\n  parent: System.Speech.Synthesis.VoiceInfo\n  isExternal: false\n  name: Id\n  nameWithType: VoiceInfo.Id\n- uid: System.Speech.Synthesis.VoiceInfo.Name*\n  parent: System.Speech.Synthesis.VoiceInfo\n  isExternal: false\n  name: Name\n  nameWithType: VoiceInfo.Name\n- uid: System.Speech.Synthesis.VoiceInfo.SupportedAudioFormats*\n  parent: System.Speech.Synthesis.VoiceInfo\n  isExternal: false\n  name: SupportedAudioFormats\n  nameWithType: VoiceInfo.SupportedAudioFormats\n"}