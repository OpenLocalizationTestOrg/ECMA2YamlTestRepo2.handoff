{"nodes":[{"pos":[1449,1475],"content":"Represents a mouse device.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents a mouse device.","pos":[0,26]}]},{"pos":[1488,1904],"content":"The MouseDevice supports the [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] infrastructure and is not intended to be used directly from your code.       For mouse related input, use the <xref:System.Windows.Input.Mouse> class.  The <xref:System.Windows.Input.Mouse> class represents the mouse to an application and provides methods, properties, and events that reflect the state of the mouse.","needQuote":false,"needEscape":true,"nodes":[{"content":"The MouseDevice supports the <ph id=\"ph1\">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph> infrastructure and is not intended to be used directly from your code.","pos":[0,168],"source":"The MouseDevice supports the [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] infrastructure and is not intended to be used directly from your code."},{"content":"For mouse related input, use the &lt;xref:System.Windows.Input.Mouse&gt; class.","pos":[175,248],"source":"       For mouse related input, use the <xref:System.Windows.Input.Mouse> class."},{"content":"The &lt;xref:System.Windows.Input.Mouse&gt; class represents the mouse to an application and provides methods, properties, and events that reflect the state of the mouse.","pos":[250,414],"source":"  The <xref:System.Windows.Input.Mouse> class represents the mouse to an application and provides methods, properties, and events that reflect the state of the mouse."}]},{"pos":[2702,2806],"content":"Gets the <bpt id=\"p1\">&lt;xref href=\"System.Windows.PresentationSource\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that is reporting input for this device.","needQuote":true,"needEscape":true,"source":"Gets the <xref href=\"System.Windows.PresentationSource\"></xref> that is reporting input for this device."},{"pos":[2979,3015],"content":"The source of input for this device.","needQuote":true,"needEscape":true,"nodes":[{"content":"The source of input for this device.","pos":[0,36]}]},{"pos":[3545,3592],"content":"Captures mouse events to the specified element.","needQuote":true,"needEscape":true,"nodes":[{"content":"Captures mouse events to the specified element.","pos":[0,47]}]},{"pos":[3605,4519],"content":"When an element captures the mouse, it receives mouse input whether the cursor is within its borders       If a <xref:System.Windows.Input.CaptureMode> is not specified, the default <xref:System.Windows.Input.CaptureMode> is <xref:System.Windows.Input.CaptureMode>.       To release mouse capture, call Capture passing `null` as the element to capture.       If the mouse is captured when a <xref:System.Windows.Input.Mouse.MouseDown> or <xref:System.Windows.Input.Mouse.MouseUp> event is raised and the input is not going to the element underneath the mouse, <xref:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement> and <xref:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement> are raised first.  This enables the captured element a chance to release capture before the <xref:System.Windows.Input.Mouse.MouseDown> and <xref:System.Windows.Input.Mouse.MouseUp> events are routed.","needQuote":false,"needEscape":true,"nodes":[{"content":"When an element captures the mouse, it receives mouse input whether the cursor is within its borders       If a &lt;xref:System.Windows.Input.CaptureMode&gt; is not specified, the default &lt;xref:System.Windows.Input.CaptureMode&gt; is &lt;xref:System.Windows.Input.CaptureMode&gt;.","pos":[0,265],"source":"When an element captures the mouse, it receives mouse input whether the cursor is within its borders       If a <xref:System.Windows.Input.CaptureMode> is not specified, the default <xref:System.Windows.Input.CaptureMode> is <xref:System.Windows.Input.CaptureMode>."},{"content":"To release mouse capture, call Capture passing <ph id=\"ph1\">`null`</ph> as the element to capture.","pos":[272,352],"source":"       To release mouse capture, call Capture passing `null` as the element to capture."},{"content":"If the mouse is captured when a &lt;xref:System.Windows.Input.Mouse.MouseDown&gt; or &lt;xref:System.Windows.Input.Mouse.MouseUp&gt; event is raised and the input is not going to the element underneath the mouse, &lt;xref:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement&gt; and &lt;xref:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement&gt; are raised first.","pos":[359,725],"source":"       If the mouse is captured when a <xref:System.Windows.Input.Mouse.MouseDown> or <xref:System.Windows.Input.Mouse.MouseUp> event is raised and the input is not going to the element underneath the mouse, <xref:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement> and <xref:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement> are raised first."},{"content":"This enables the captured element a chance to release capture before the &lt;xref:System.Windows.Input.Mouse.MouseDown&gt; and &lt;xref:System.Windows.Input.Mouse.MouseUp&gt; events are routed.","pos":[727,908],"source":"  This enables the captured element a chance to release capture before the <xref:System.Windows.Input.Mouse.MouseDown> and <xref:System.Windows.Input.Mouse.MouseUp> events are routed."}]},{"pos":[4698,4731],"content":"The element to capture the mouse.","needQuote":true,"needEscape":true,"nodes":[{"content":"The element to capture the mouse.","pos":[0,33]}]},{"pos":[4790,4971],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the element was able to capture the mouse; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the element was able to capture the mouse; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[5150,5280],"content":"<ph id=\"ph1\">&lt;code&gt;element&lt;/code&gt;</ph> is not a <bpt id=\"p1\">&lt;xref href=\"System.Windows.UIElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or <bpt id=\"p2\">&lt;xref href=\"System.Windows.ContentElement\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>element</code> is not a <xref href=\"System.Windows.UIElement\"></xref> or <xref href=\"System.Windows.ContentElement\"></xref>."},{"pos":[5836,5956],"content":"Captures mouse input to the specified element using the specified <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.CaptureMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Captures mouse input to the specified element using the specified <xref href=\"System.Windows.Input.CaptureMode\"></xref>."},{"pos":[5969,6767],"content":"When an element captures the mouse, it receives mouse input whether or not the cursor is within its borders.       To release mouse capture, call <xref:System.Windows.Input.MouseDevice.Capture%2A> passing `null` as the element to capture.       If the mouse is captured when a <xref:System.Windows.Input.Mouse.MouseDown> or <xref:System.Windows.Input.Mouse.MouseUp> event is raised and the input is not going to the element underneath the mouse, <xref:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement> and <xref:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement> are raised first.  This enables the captured element a chance to release capture before the <xref:System.Windows.Input.Mouse.MouseDown> and <xref:System.Windows.Input.Mouse.MouseUp> events are routed.","needQuote":false,"needEscape":true,"nodes":[{"content":"When an element captures the mouse, it receives mouse input whether or not the cursor is within its borders.","pos":[0,108]},{"content":"To release mouse capture, call &lt;xref:System.Windows.Input.MouseDevice.Capture%2A&gt; passing <ph id=\"ph1\">`null`</ph> as the element to capture.","pos":[115,238],"source":"       To release mouse capture, call <xref:System.Windows.Input.MouseDevice.Capture%2A> passing `null` as the element to capture."},{"content":"If the mouse is captured when a &lt;xref:System.Windows.Input.Mouse.MouseDown&gt; or &lt;xref:System.Windows.Input.Mouse.MouseUp&gt; event is raised and the input is not going to the element underneath the mouse, &lt;xref:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement&gt; and &lt;xref:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement&gt; are raised first.","pos":[245,611],"source":"       If the mouse is captured when a <xref:System.Windows.Input.Mouse.MouseDown> or <xref:System.Windows.Input.Mouse.MouseUp> event is raised and the input is not going to the element underneath the mouse, <xref:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement> and <xref:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement> are raised first."},{"content":"This enables the captured element a chance to release capture before the &lt;xref:System.Windows.Input.Mouse.MouseDown&gt; and &lt;xref:System.Windows.Input.Mouse.MouseUp&gt; events are routed.","pos":[613,794],"source":"  This enables the captured element a chance to release capture before the <xref:System.Windows.Input.Mouse.MouseDown> and <xref:System.Windows.Input.Mouse.MouseUp> events are routed."}]},{"pos":[6992,7026],"content":"The element to capture the mouse..","needQuote":true,"needEscape":true,"nodes":[{"content":"The element to capture the mouse..","pos":[0,34]}]},{"pos":[7113,7139],"content":"The capture policy to use.","needQuote":true,"needEscape":true,"nodes":[{"content":"The capture policy to use.","pos":[0,26]}]},{"pos":[7198,7379],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the element was able to capture the mouse; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the element was able to capture the mouse; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[7558,7688],"content":"<ph id=\"ph1\">&lt;code&gt;element&lt;/code&gt;</ph> is not a <bpt id=\"p1\">&lt;xref href=\"System.Windows.UIElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or <bpt id=\"p2\">&lt;xref href=\"System.Windows.ContentElement\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>element</code> is not a <xref href=\"System.Windows.UIElement\"></xref> or <xref href=\"System.Windows.ContentElement\"></xref>."},{"pos":[7835,7929],"content":"<ph id=\"ph1\">&lt;code&gt;captureMode&lt;/code&gt;</ph> is not a valid <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.CaptureMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>captureMode</code> is not a valid <xref href=\"System.Windows.Input.CaptureMode\"></xref>."},{"pos":[8285,8374],"content":"Gets the <bpt id=\"p1\">&lt;xref href=\"System.Windows.IInputElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that is captured by the mouse.","needQuote":true,"needEscape":true,"source":"Gets the <xref href=\"System.Windows.IInputElement\"></xref> that is captured by the mouse."},{"pos":[8386,8494],"content":"When an element captures the mouse, it receives mouse input whether or not the cursor is within its borders.","needQuote":true,"needEscape":true,"nodes":[{"content":"When an element captures the mouse, it receives mouse input whether or not the cursor is within its borders.","pos":[0,108]}]},{"pos":[8644,8687],"content":"The element which is captured by the mouse.","needQuote":true,"needEscape":true,"nodes":[{"content":"The element which is captured by the mouse.","pos":[0,43]}]},{"pos":[9135,9192],"content":"Gets the element that the mouse pointer is directly over.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the element that the mouse pointer is directly over.","pos":[0,57]}]},{"pos":[9205,10064],"content":"The mouse is considered directly over an element if the mouse has been captured to that element.       Controls can be composed of multiple elements. DirectlyOver reports the specific element in the composite control the mouse pointer is over and not the control itself.  For example, depending on which part of a <xref:System.Windows.Controls.Button> the pointer is over, the DirectlyOver property could report the <xref:System.Windows.Controls.TextBox> of the <xref:System.Windows.Controls.ContentControl.Content%2A> property or the <xref:Microsoft.Windows.Themes.ButtonChrome>.       Use the <xref:System.Windows.IInputElement.IsMouseOver%2A> property on <xref:System.Windows.UIElement> and <xref:System.Windows.ContentElement> to determine whether the mouse is over an element, which includes its visual child elements or control compositing elements.","needQuote":false,"needEscape":true,"nodes":[{"content":"The mouse is considered directly over an element if the mouse has been captured to that element.       Controls can be composed of multiple elements. DirectlyOver reports the specific element in the composite control the mouse pointer is over and not the control itself.  For example, depending on which part of a <xref:System.Windows.Controls.Button> the pointer is over, the DirectlyOver property could report the <xref:System.Windows.Controls.TextBox> of the <xref:System.Windows.Controls.ContentControl.Content%2A> property or the <xref:Microsoft.Windows.Themes.ButtonChrome>.       Use the <xref:System.Windows.IInputElement.IsMouseOver%2A> property on <xref:System.Windows.UIElement> and <xref:System.Windows.ContentElement> to determine whether the mouse is over an element, which includes its visual child elements or control compositing elements.","pos":[0,855],"nodes":[{"content":"The mouse is considered directly over an element if the mouse has been captured to that element.","pos":[0,96]},{"content":"Controls can be composed of multiple elements.","pos":[103,149]},{"content":"DirectlyOver reports the specific element in the composite control the mouse pointer is over and not the control itself.","pos":[150,270]},{"content":"For example, depending on which part of a &lt;xref:System.Windows.Controls.Button&gt; the pointer is over, the DirectlyOver property could report the &lt;xref:System.Windows.Controls.TextBox&gt; of the &lt;xref:System.Windows.Controls.ContentControl.Content%2A&gt; property or the &lt;xref:Microsoft.Windows.Themes.ButtonChrome&gt;.","pos":[272,580],"source":"  For example, depending on which part of a <xref:System.Windows.Controls.Button> the pointer is over, the DirectlyOver property could report the <xref:System.Windows.Controls.TextBox> of the <xref:System.Windows.Controls.ContentControl.Content%2A> property or the <xref:Microsoft.Windows.Themes.ButtonChrome>."},{"content":"Use the &lt;xref:System.Windows.IInputElement.IsMouseOver%2A&gt; property on &lt;xref:System.Windows.UIElement&gt; and &lt;xref:System.Windows.ContentElement&gt; to determine whether the mouse is over an element, which includes its visual child elements or control compositing elements.","pos":[587,855],"source":"       Use the <xref:System.Windows.IInputElement.IsMouseOver%2A> property on <xref:System.Windows.UIElement> and <xref:System.Windows.ContentElement> to determine whether the mouse is over an element, which includes its visual child elements or control compositing elements."}]}]},{"pos":[10219,10257],"content":"The element the mouse pointer is over.","needQuote":true,"needEscape":true,"nodes":[{"content":"The element the mouse pointer is over.","pos":[0,38]}]},{"pos":[10824,10869],"content":"Gets the state of the specified mouse button.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the state of the specified mouse button.","pos":[0,45]}]},{"pos":[11106,11140],"content":"The button which is being queried.","needQuote":true,"needEscape":true,"nodes":[{"content":"The button which is being queried.","pos":[0,34]}]},{"pos":[11222,11246],"content":"The state of the button.","needQuote":true,"needEscape":true,"nodes":[{"content":"The state of the button.","pos":[0,24]}]},{"pos":[11729,11797],"content":"Calculates the position of the mouse pointer, in client coordinates.","needQuote":true,"needEscape":true,"nodes":[{"content":"Calculates the position of the mouse pointer, in client coordinates.","pos":[0,68]}]},{"pos":[11957,12014],"content":"The position of the mouse pointer, in client coordinates.","needQuote":true,"needEscape":true,"nodes":[{"content":"The position of the mouse pointer, in client coordinates.","pos":[0,57]}]},{"pos":[12624,12765],"content":"Calculates the position of the mouse pointer, in client coordinates, in the specified <bpt id=\"p1\">&lt;xref href=\"System.Windows.PresentationSource\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Calculates the position of the mouse pointer, in client coordinates, in the specified <xref href=\"System.Windows.PresentationSource\"></xref>."},{"pos":[13004,13053],"content":"The source in which to obtain the mouse position.","needQuote":true,"needEscape":true,"nodes":[{"content":"The source in which to obtain the mouse position.","pos":[0,49]}]},{"pos":[13118,13248],"content":"The position of the mouse pointer, in client coordinates, in the specified <bpt id=\"p1\">&lt;xref href=\"System.Windows.PresentationSource\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The position of the mouse pointer, in client coordinates, in the specified <xref href=\"System.Windows.PresentationSource\"></xref>."},{"pos":[13803,13866],"content":"Gets the position of the mouse relative to a specified element.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the position of the mouse relative to a specified element.","pos":[0,63]}]},{"pos":[13878,14057],"content":"The position of the mouse pointer is calculated relative to the specified <xref:System.Windows.IInputElement> with the upper-left corner of element being the point of origin, 0,0.","needQuote":true,"needEscape":true,"nodes":[{"content":"The position of the mouse pointer is calculated relative to the specified &lt;xref:System.Windows.IInputElement&gt; with the upper-left corner of element being the point of origin, 0,0.","pos":[0,179],"source":"The position of the mouse pointer is calculated relative to the specified <xref:System.Windows.IInputElement> with the upper-left corner of element being the point of origin, 0,0."}]},{"pos":[14261,14332],"content":"The frame of reference in which to calculate the position of the mouse.","needQuote":true,"needEscape":true,"nodes":[{"content":"The frame of reference in which to calculate the position of the mouse.","pos":[0,71]}]},{"pos":[14397,14473],"content":"The position of the mouse relative to the parameter <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">relativeTo</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The position of the mouse relative to the parameter <code>relativeTo</code>."},{"pos":[14656,14856],"content":"<ph id=\"ph1\">&lt;code&gt;relativeTo&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or is not a <bpt id=\"p2\">&lt;xref href=\"System.Windows.UIElement\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> or <bpt id=\"p3\">&lt;xref href=\"System.Windows.ContentElement\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>relativeTo</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or is not a <xref href=\"System.Windows.UIElement\"></xref> or <xref href=\"System.Windows.ContentElement\"></xref>."},{"pos":[15261,15313],"content":"Calculates the screen position of the mouse pointer.","needQuote":true,"needEscape":true,"nodes":[{"content":"Calculates the screen position of the mouse pointer.","pos":[0,52]}]},{"pos":[15473,15507],"content":"The position of the mouse pointer.","needQuote":true,"needEscape":true,"nodes":[{"content":"The position of the mouse pointer.","pos":[0,34]}]},{"pos":[15954,16015],"content":"Gets the state of the left mouse button of this mouse device.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the state of the left mouse button of this mouse device.","pos":[0,61]}]},{"pos":[16185,16209],"content":"The state of the button.","needQuote":true,"needEscape":true,"nodes":[{"content":"The state of the button.","pos":[0,24]}]},{"pos":[16659,16711],"content":"The state of the middle button of this mouse device.","needQuote":true,"needEscape":true,"nodes":[{"content":"The state of the middle button of this mouse device.","pos":[0,52]}]},{"pos":[16883,16907],"content":"The state of the button.","needQuote":true,"needEscape":true,"nodes":[{"content":"The state of the button.","pos":[0,24]}]},{"pos":[17369,17420],"content":"Gets or sets the cursor for the entire application.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the cursor for the entire application.","pos":[0,51]}]},{"pos":[17433,17804],"content":"The <xref:System.Windows.Input.Cursor> that OverrideCursor is set to will be applied to the whole application.       To clear the override <xref:System.Windows.Input.Cursor>, set OverrideCursor to `null`.       Setting OverrideCursor to <xref:System.Windows.Input.Cursors.None%2A> will force the mouse cursor not to be displayed, but mouse events are still processed.","needQuote":false,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Windows.Input.Cursor&gt; that OverrideCursor is set to will be applied to the whole application.","pos":[0,110],"source":"The <xref:System.Windows.Input.Cursor> that OverrideCursor is set to will be applied to the whole application."},{"content":"To clear the override &lt;xref:System.Windows.Input.Cursor&gt;, set OverrideCursor to <ph id=\"ph1\">`null`</ph>.","pos":[117,204],"source":"       To clear the override <xref:System.Windows.Input.Cursor>, set OverrideCursor to `null`."},{"content":"Setting OverrideCursor to &lt;xref:System.Windows.Input.Cursors.None%2A&gt; will force the mouse cursor not to be displayed, but mouse events are still processed.","pos":[211,367],"source":"       Setting OverrideCursor to <xref:System.Windows.Input.Cursors.None%2A> will force the mouse cursor not to be displayed, but mouse events are still processed."}]},{"pos":[17964,18077],"content":"The override cursor or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if OverrideCursor is not set.","needQuote":true,"needEscape":true,"source":"The override cursor or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if OverrideCursor is not set."},{"pos":[18526,18582],"content":"Gets the state of the right button of this mouse device.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the state of the right button of this mouse device.","pos":[0,56]}]},{"pos":[18753,18777],"content":"The state of the button.","needQuote":true,"needEscape":true,"nodes":[{"content":"The state of the button.","pos":[0,24]}]},{"pos":[19293,19381],"content":"Sets the mouse pointer to the specified <bpt id=\"p1\">&lt;xref href=\"System.Windows.Input.Cursor\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>","needQuote":true,"needEscape":true,"source":"Sets the mouse pointer to the specified <xref href=\"System.Windows.Input.Cursor\"></xref>"},{"pos":[19393,19525],"content":"Note that this cursor does not apply any particular <xref:System.Windows.UIElement>, but rather it applies to the whole application.","needQuote":true,"needEscape":true,"nodes":[{"content":"Note that this cursor does not apply any particular &lt;xref:System.Windows.UIElement&gt;, but rather it applies to the whole application.","pos":[0,132],"source":"Note that this cursor does not apply any particular <xref:System.Windows.UIElement>, but rather it applies to the whole application."}]},{"pos":[19701,19740],"content":"The cursor to set the mouse pointer to.","needQuote":true,"needEscape":true,"nodes":[{"content":"The cursor to set the mouse pointer to.","pos":[0,39]}]},{"pos":[19799,19962],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the mouse cursor is set; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the mouse cursor is set; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[20410,20444],"content":"Forces the mouse to resynchronize.","needQuote":true,"needEscape":true,"nodes":[{"content":"Forces the mouse to resynchronize.","pos":[0,34]}]},{"pos":[20456,20709],"content":"The <xref:System.Windows.Input.MouseDevice> monitors layout changes and calls Synchronize.  There are cases in which the mouse input system must be forced to update for it to respond to changes.  For example, you must resynchronize the mouse on a timer.","needQuote":true,"needEscape":true,"nodes":[{"content":"The <xref:System.Windows.Input.MouseDevice> monitors layout changes and calls Synchronize.  There are cases in which the mouse input system must be forced to update for it to respond to changes.  For example, you must resynchronize the mouse on a timer.","pos":[0,253],"nodes":[{"content":"The &lt;xref:System.Windows.Input.MouseDevice&gt; monitors layout changes and calls Synchronize.","pos":[0,90],"source":"The <xref:System.Windows.Input.MouseDevice> monitors layout changes and calls Synchronize."},{"content":"There are cases in which the mouse input system must be forced to update for it to respond to changes.","pos":[92,194]},{"content":"For example, you must resynchronize the mouse on a timer.","pos":[196,253]}]}]},{"pos":[21200,21308],"content":"Gets the <bpt id=\"p1\">&lt;xref href=\"System.Windows.IInputElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that the input from this mouse device is sent to.","needQuote":true,"needEscape":true,"source":"Gets the <xref href=\"System.Windows.IInputElement\"></xref> that the input from this mouse device is sent to."},{"pos":[21320,21442],"content":"The target for a <xref:System.Windows.Input.MouseDevice> is the object the mouse is over or the object with mouse capture.","needQuote":true,"needEscape":true,"nodes":[{"content":"The target for a &lt;xref:System.Windows.Input.MouseDevice&gt; is the object the mouse is over or the object with mouse capture.","pos":[0,122],"source":"The target for a <xref:System.Windows.Input.MouseDevice> is the object the mouse is over or the object with mouse capture."}]},{"pos":[21599,21635],"content":"The element that receives the input.","needQuote":true,"needEscape":true,"nodes":[{"content":"The element that receives the input.","pos":[0,36]}]},{"pos":[22085,22119],"content":"Forces the mouse cursor to update.","needQuote":true,"needEscape":true,"nodes":[{"content":"Forces the mouse cursor to update.","pos":[0,34]}]},{"pos":[22622,22687],"content":"Gets the state of the first extended button on this mouse device.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the state of the first extended button on this mouse device.","pos":[0,65]}]},{"pos":[22855,22879],"content":"The state of the button.","needQuote":true,"needEscape":true,"nodes":[{"content":"The state of the button.","pos":[0,24]}]},{"pos":[23307,23373],"content":"Gets the state of the second extended button of this mouse device.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the state of the second extended button of this mouse device.","pos":[0,66]}]},{"pos":[23541,23565],"content":"The state of the button.","needQuote":true,"needEscape":true,"nodes":[{"content":"The state of the button.","pos":[0,24]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Input.MouseDevice\n  id: MouseDevice\n  children:\n  - System.Windows.Input.MouseDevice.ActiveSource\n  - System.Windows.Input.MouseDevice.Capture(System.Windows.IInputElement)\n  - System.Windows.Input.MouseDevice.Capture(System.Windows.IInputElement,System.Windows.Input.CaptureMode)\n  - System.Windows.Input.MouseDevice.Captured\n  - System.Windows.Input.MouseDevice.DirectlyOver\n  - System.Windows.Input.MouseDevice.GetButtonState(System.Windows.Input.MouseButton)\n  - System.Windows.Input.MouseDevice.GetClientPosition\n  - System.Windows.Input.MouseDevice.GetClientPosition(System.Windows.PresentationSource)\n  - System.Windows.Input.MouseDevice.GetPosition(System.Windows.IInputElement)\n  - System.Windows.Input.MouseDevice.GetScreenPosition\n  - System.Windows.Input.MouseDevice.LeftButton\n  - System.Windows.Input.MouseDevice.MiddleButton\n  - System.Windows.Input.MouseDevice.OverrideCursor\n  - System.Windows.Input.MouseDevice.RightButton\n  - System.Windows.Input.MouseDevice.SetCursor(System.Windows.Input.Cursor)\n  - System.Windows.Input.MouseDevice.Synchronize\n  - System.Windows.Input.MouseDevice.Target\n  - System.Windows.Input.MouseDevice.UpdateCursor\n  - System.Windows.Input.MouseDevice.XButton1\n  - System.Windows.Input.MouseDevice.XButton2\n  langs:\n  - csharp\n  name: MouseDevice\n  nameWithType: MouseDevice\n  fullName: System.Windows.Input.MouseDevice\n  type: Class\n  summary: Represents a mouse device.\n  remarks: \"The MouseDevice supports the [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] infrastructure and is not intended to be used directly from your code.  \\n  \\n For mouse related input, use the <xref:System.Windows.Input.Mouse> class.  The <xref:System.Windows.Input.Mouse> class represents the mouse to an application and provides methods, properties, and events that reflect the state of the mouse.\"\n  syntax:\n    content: 'public abstract class MouseDevice : System.Windows.Input.InputDevice'\n  inheritance:\n  - System.Object\n  - System.Windows.Threading.DispatcherObject\n  - System.Windows.Input.InputDevice\n  implements: []\n  inheritedMembers:\n  - System.Windows.Threading.DispatcherObject.CheckAccess\n  - System.Windows.Threading.DispatcherObject.Dispatcher\n  - System.Windows.Threading.DispatcherObject.VerifyAccess\n  platform:\n  - net462\n- uid: System.Windows.Input.MouseDevice.ActiveSource\n  id: ActiveSource\n  parent: System.Windows.Input.MouseDevice\n  langs:\n  - csharp\n  name: ActiveSource\n  nameWithType: MouseDevice.ActiveSource\n  fullName: System.Windows.Input.MouseDevice.ActiveSource\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets the <xref href=\"System.Windows.PresentationSource\"></xref> that is reporting input for this device.\n  syntax:\n    content: public override System.Windows.PresentationSource ActiveSource { get; }\n    return:\n      type: System.Windows.PresentationSource\n      description: The source of input for this device.\n  overload: System.Windows.Input.MouseDevice.ActiveSource*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.MouseDevice.Capture(System.Windows.IInputElement)\n  id: Capture(System.Windows.IInputElement)\n  parent: System.Windows.Input.MouseDevice\n  langs:\n  - csharp\n  name: Capture(IInputElement)\n  nameWithType: MouseDevice.Capture(IInputElement)\n  fullName: System.Windows.Input.MouseDevice.Capture(IInputElement)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Captures mouse events to the specified element.\n  remarks: \"When an element captures the mouse, it receives mouse input whether the cursor is within its borders  \\n  \\n If a <xref:System.Windows.Input.CaptureMode> is not specified, the default <xref:System.Windows.Input.CaptureMode> is <xref:System.Windows.Input.CaptureMode>.  \\n  \\n To release mouse capture, call Capture passing `null` as the element to capture.  \\n  \\n If the mouse is captured when a <xref:System.Windows.Input.Mouse.MouseDown> or <xref:System.Windows.Input.Mouse.MouseUp> event is raised and the input is not going to the element underneath the mouse, <xref:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement> and <xref:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement> are raised first.  This enables the captured element a chance to release capture before the <xref:System.Windows.Input.Mouse.MouseDown> and <xref:System.Windows.Input.Mouse.MouseUp> events are routed.\"\n  syntax:\n    content: public bool Capture (System.Windows.IInputElement element);\n    parameters:\n    - id: element\n      type: System.Windows.IInputElement\n      description: The element to capture the mouse.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the element was able to capture the mouse; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.Input.MouseDevice.Capture*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>element</code> is not a <xref href=\"System.Windows.UIElement\"></xref> or <xref href=\"System.Windows.ContentElement\"></xref>.\n  platform:\n  - net462\n- uid: System.Windows.Input.MouseDevice.Capture(System.Windows.IInputElement,System.Windows.Input.CaptureMode)\n  id: Capture(System.Windows.IInputElement,System.Windows.Input.CaptureMode)\n  parent: System.Windows.Input.MouseDevice\n  langs:\n  - csharp\n  name: Capture(IInputElement,CaptureMode)\n  nameWithType: MouseDevice.Capture(IInputElement,CaptureMode)\n  fullName: System.Windows.Input.MouseDevice.Capture(IInputElement,CaptureMode)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Captures mouse input to the specified element using the specified <xref href=\"System.Windows.Input.CaptureMode\"></xref>.\n  remarks: \"When an element captures the mouse, it receives mouse input whether or not the cursor is within its borders.  \\n  \\n To release mouse capture, call <xref:System.Windows.Input.MouseDevice.Capture%2A> passing `null` as the element to capture.  \\n  \\n If the mouse is captured when a <xref:System.Windows.Input.Mouse.MouseDown> or <xref:System.Windows.Input.Mouse.MouseUp> event is raised and the input is not going to the element underneath the mouse, <xref:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement> and <xref:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement> are raised first.  This enables the captured element a chance to release capture before the <xref:System.Windows.Input.Mouse.MouseDown> and <xref:System.Windows.Input.Mouse.MouseUp> events are routed.\"\n  syntax:\n    content: public bool Capture (System.Windows.IInputElement element, System.Windows.Input.CaptureMode captureMode);\n    parameters:\n    - id: element\n      type: System.Windows.IInputElement\n      description: The element to capture the mouse..\n    - id: captureMode\n      type: System.Windows.Input.CaptureMode\n      description: The capture policy to use.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the element was able to capture the mouse; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.Input.MouseDevice.Capture*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>element</code> is not a <xref href=\"System.Windows.UIElement\"></xref> or <xref href=\"System.Windows.ContentElement\"></xref>.\n  - type: System.ComponentModel.InvalidEnumArgumentException\n    commentId: T:System.ComponentModel.InvalidEnumArgumentException\n    description: <code>captureMode</code> is not a valid <xref href=\"System.Windows.Input.CaptureMode\"></xref>.\n  platform:\n  - net462\n- uid: System.Windows.Input.MouseDevice.Captured\n  id: Captured\n  parent: System.Windows.Input.MouseDevice\n  langs:\n  - csharp\n  name: Captured\n  nameWithType: MouseDevice.Captured\n  fullName: System.Windows.Input.MouseDevice.Captured\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets the <xref href=\"System.Windows.IInputElement\"></xref> that is captured by the mouse.\n  remarks: When an element captures the mouse, it receives mouse input whether or not the cursor is within its borders.\n  syntax:\n    content: public System.Windows.IInputElement Captured { get; }\n    return:\n      type: System.Windows.IInputElement\n      description: The element which is captured by the mouse.\n  overload: System.Windows.Input.MouseDevice.Captured*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.MouseDevice.DirectlyOver\n  id: DirectlyOver\n  parent: System.Windows.Input.MouseDevice\n  langs:\n  - csharp\n  name: DirectlyOver\n  nameWithType: MouseDevice.DirectlyOver\n  fullName: System.Windows.Input.MouseDevice.DirectlyOver\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets the element that the mouse pointer is directly over.\n  remarks: \"The mouse is considered directly over an element if the mouse has been captured to that element.  \\n  \\n Controls can be composed of multiple elements. DirectlyOver reports the specific element in the composite control the mouse pointer is over and not the control itself.  For example, depending on which part of a <xref:System.Windows.Controls.Button> the pointer is over, the DirectlyOver property could report the <xref:System.Windows.Controls.TextBox> of the <xref:System.Windows.Controls.ContentControl.Content%2A> property or the <xref:Microsoft.Windows.Themes.ButtonChrome>.  \\n  \\n Use the <xref:System.Windows.IInputElement.IsMouseOver%2A> property on <xref:System.Windows.UIElement> and <xref:System.Windows.ContentElement> to determine whether the mouse is over an element, which includes its visual child elements or control compositing elements.\"\n  syntax:\n    content: public System.Windows.IInputElement DirectlyOver { get; }\n    return:\n      type: System.Windows.IInputElement\n      description: The element the mouse pointer is over.\n  overload: System.Windows.Input.MouseDevice.DirectlyOver*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.MouseDevice.GetButtonState(System.Windows.Input.MouseButton)\n  id: GetButtonState(System.Windows.Input.MouseButton)\n  parent: System.Windows.Input.MouseDevice\n  langs:\n  - csharp\n  name: GetButtonState(MouseButton)\n  nameWithType: MouseDevice.GetButtonState(MouseButton)\n  fullName: System.Windows.Input.MouseDevice.GetButtonState(MouseButton)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets the state of the specified mouse button.\n  syntax:\n    content: protected System.Windows.Input.MouseButtonState GetButtonState (System.Windows.Input.MouseButton mouseButton);\n    parameters:\n    - id: mouseButton\n      type: System.Windows.Input.MouseButton\n      description: The button which is being queried.\n    return:\n      type: System.Windows.Input.MouseButtonState\n      description: The state of the button.\n  overload: System.Windows.Input.MouseDevice.GetButtonState*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.MouseDevice.GetClientPosition\n  id: GetClientPosition\n  parent: System.Windows.Input.MouseDevice\n  langs:\n  - csharp\n  name: GetClientPosition()\n  nameWithType: MouseDevice.GetClientPosition()\n  fullName: System.Windows.Input.MouseDevice.GetClientPosition()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Calculates the position of the mouse pointer, in client coordinates.\n  syntax:\n    content: protected System.Windows.Point GetClientPosition ();\n    parameters: []\n    return:\n      type: System.Windows.Point\n      description: The position of the mouse pointer, in client coordinates.\n  overload: System.Windows.Input.MouseDevice.GetClientPosition*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.MouseDevice.GetClientPosition(System.Windows.PresentationSource)\n  id: GetClientPosition(System.Windows.PresentationSource)\n  parent: System.Windows.Input.MouseDevice\n  langs:\n  - csharp\n  name: GetClientPosition(PresentationSource)\n  nameWithType: MouseDevice.GetClientPosition(PresentationSource)\n  fullName: System.Windows.Input.MouseDevice.GetClientPosition(PresentationSource)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Calculates the position of the mouse pointer, in client coordinates, in the specified <xref href=\"System.Windows.PresentationSource\"></xref>.\n  syntax:\n    content: protected System.Windows.Point GetClientPosition (System.Windows.PresentationSource presentationSource);\n    parameters:\n    - id: presentationSource\n      type: System.Windows.PresentationSource\n      description: The source in which to obtain the mouse position.\n    return:\n      type: System.Windows.Point\n      description: The position of the mouse pointer, in client coordinates, in the specified <xref href=\"System.Windows.PresentationSource\"></xref>.\n  overload: System.Windows.Input.MouseDevice.GetClientPosition*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.MouseDevice.GetPosition(System.Windows.IInputElement)\n  id: GetPosition(System.Windows.IInputElement)\n  parent: System.Windows.Input.MouseDevice\n  langs:\n  - csharp\n  name: GetPosition(IInputElement)\n  nameWithType: MouseDevice.GetPosition(IInputElement)\n  fullName: System.Windows.Input.MouseDevice.GetPosition(IInputElement)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets the position of the mouse relative to a specified element.\n  remarks: The position of the mouse pointer is calculated relative to the specified <xref:System.Windows.IInputElement> with the upper-left corner of element being the point of origin, 0,0.\n  syntax:\n    content: public System.Windows.Point GetPosition (System.Windows.IInputElement relativeTo);\n    parameters:\n    - id: relativeTo\n      type: System.Windows.IInputElement\n      description: The frame of reference in which to calculate the position of the mouse.\n    return:\n      type: System.Windows.Point\n      description: The position of the mouse relative to the parameter <code>relativeTo</code>.\n  overload: System.Windows.Input.MouseDevice.GetPosition*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>relativeTo</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or is not a <xref href=\"System.Windows.UIElement\"></xref> or <xref href=\"System.Windows.ContentElement\"></xref>.\n  platform:\n  - net462\n- uid: System.Windows.Input.MouseDevice.GetScreenPosition\n  id: GetScreenPosition\n  parent: System.Windows.Input.MouseDevice\n  langs:\n  - csharp\n  name: GetScreenPosition()\n  nameWithType: MouseDevice.GetScreenPosition()\n  fullName: System.Windows.Input.MouseDevice.GetScreenPosition()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Calculates the screen position of the mouse pointer.\n  syntax:\n    content: protected System.Windows.Point GetScreenPosition ();\n    parameters: []\n    return:\n      type: System.Windows.Point\n      description: The position of the mouse pointer.\n  overload: System.Windows.Input.MouseDevice.GetScreenPosition*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.MouseDevice.LeftButton\n  id: LeftButton\n  parent: System.Windows.Input.MouseDevice\n  langs:\n  - csharp\n  name: LeftButton\n  nameWithType: MouseDevice.LeftButton\n  fullName: System.Windows.Input.MouseDevice.LeftButton\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets the state of the left mouse button of this mouse device.\n  syntax:\n    content: public System.Windows.Input.MouseButtonState LeftButton { get; }\n    return:\n      type: System.Windows.Input.MouseButtonState\n      description: The state of the button.\n  overload: System.Windows.Input.MouseDevice.LeftButton*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.MouseDevice.MiddleButton\n  id: MiddleButton\n  parent: System.Windows.Input.MouseDevice\n  langs:\n  - csharp\n  name: MiddleButton\n  nameWithType: MouseDevice.MiddleButton\n  fullName: System.Windows.Input.MouseDevice.MiddleButton\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: The state of the middle button of this mouse device.\n  syntax:\n    content: public System.Windows.Input.MouseButtonState MiddleButton { get; }\n    return:\n      type: System.Windows.Input.MouseButtonState\n      description: The state of the button.\n  overload: System.Windows.Input.MouseDevice.MiddleButton*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.MouseDevice.OverrideCursor\n  id: OverrideCursor\n  parent: System.Windows.Input.MouseDevice\n  langs:\n  - csharp\n  name: OverrideCursor\n  nameWithType: MouseDevice.OverrideCursor\n  fullName: System.Windows.Input.MouseDevice.OverrideCursor\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets or sets the cursor for the entire application.\n  remarks: \"The <xref:System.Windows.Input.Cursor> that OverrideCursor is set to will be applied to the whole application.  \\n  \\n To clear the override <xref:System.Windows.Input.Cursor>, set OverrideCursor to `null`.  \\n  \\n Setting OverrideCursor to <xref:System.Windows.Input.Cursors.None%2A> will force the mouse cursor not to be displayed, but mouse events are still processed.\"\n  syntax:\n    content: public System.Windows.Input.Cursor OverrideCursor { get; set; }\n    return:\n      type: System.Windows.Input.Cursor\n      description: The override cursor or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if OverrideCursor is not set.\n  overload: System.Windows.Input.MouseDevice.OverrideCursor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.MouseDevice.RightButton\n  id: RightButton\n  parent: System.Windows.Input.MouseDevice\n  langs:\n  - csharp\n  name: RightButton\n  nameWithType: MouseDevice.RightButton\n  fullName: System.Windows.Input.MouseDevice.RightButton\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets the state of the right button of this mouse device.\n  syntax:\n    content: public System.Windows.Input.MouseButtonState RightButton { get; }\n    return:\n      type: System.Windows.Input.MouseButtonState\n      description: The state of the button.\n  overload: System.Windows.Input.MouseDevice.RightButton*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.MouseDevice.SetCursor(System.Windows.Input.Cursor)\n  id: SetCursor(System.Windows.Input.Cursor)\n  parent: System.Windows.Input.MouseDevice\n  langs:\n  - csharp\n  name: SetCursor(Cursor)\n  nameWithType: MouseDevice.SetCursor(Cursor)\n  fullName: System.Windows.Input.MouseDevice.SetCursor(Cursor)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Sets the mouse pointer to the specified <xref href=\"System.Windows.Input.Cursor\"></xref>\n  remarks: Note that this cursor does not apply any particular <xref:System.Windows.UIElement>, but rather it applies to the whole application.\n  syntax:\n    content: public bool SetCursor (System.Windows.Input.Cursor cursor);\n    parameters:\n    - id: cursor\n      type: System.Windows.Input.Cursor\n      description: The cursor to set the mouse pointer to.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the mouse cursor is set; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Windows.Input.MouseDevice.SetCursor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.MouseDevice.Synchronize\n  id: Synchronize\n  parent: System.Windows.Input.MouseDevice\n  langs:\n  - csharp\n  name: Synchronize()\n  nameWithType: MouseDevice.Synchronize()\n  fullName: System.Windows.Input.MouseDevice.Synchronize()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Forces the mouse to resynchronize.\n  remarks: The <xref:System.Windows.Input.MouseDevice> monitors layout changes and calls Synchronize.  There are cases in which the mouse input system must be forced to update for it to respond to changes.  For example, you must resynchronize the mouse on a timer.\n  syntax:\n    content: public void Synchronize ();\n    parameters: []\n  overload: System.Windows.Input.MouseDevice.Synchronize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.MouseDevice.Target\n  id: Target\n  parent: System.Windows.Input.MouseDevice\n  langs:\n  - csharp\n  name: Target\n  nameWithType: MouseDevice.Target\n  fullName: System.Windows.Input.MouseDevice.Target\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets the <xref href=\"System.Windows.IInputElement\"></xref> that the input from this mouse device is sent to.\n  remarks: The target for a <xref:System.Windows.Input.MouseDevice> is the object the mouse is over or the object with mouse capture.\n  syntax:\n    content: public override System.Windows.IInputElement Target { get; }\n    return:\n      type: System.Windows.IInputElement\n      description: The element that receives the input.\n  overload: System.Windows.Input.MouseDevice.Target*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.MouseDevice.UpdateCursor\n  id: UpdateCursor\n  parent: System.Windows.Input.MouseDevice\n  langs:\n  - csharp\n  name: UpdateCursor()\n  nameWithType: MouseDevice.UpdateCursor()\n  fullName: System.Windows.Input.MouseDevice.UpdateCursor()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Forces the mouse cursor to update.\n  syntax:\n    content: public void UpdateCursor ();\n    parameters: []\n  overload: System.Windows.Input.MouseDevice.UpdateCursor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.MouseDevice.XButton1\n  id: XButton1\n  parent: System.Windows.Input.MouseDevice\n  langs:\n  - csharp\n  name: XButton1\n  nameWithType: MouseDevice.XButton1\n  fullName: System.Windows.Input.MouseDevice.XButton1\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets the state of the first extended button on this mouse device.\n  syntax:\n    content: public System.Windows.Input.MouseButtonState XButton1 { get; }\n    return:\n      type: System.Windows.Input.MouseButtonState\n      description: The state of the button.\n  overload: System.Windows.Input.MouseDevice.XButton1*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Input.MouseDevice.XButton2\n  id: XButton2\n  parent: System.Windows.Input.MouseDevice\n  langs:\n  - csharp\n  name: XButton2\n  nameWithType: MouseDevice.XButton2\n  fullName: System.Windows.Input.MouseDevice.XButton2\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets the state of the second extended button of this mouse device.\n  syntax:\n    content: public System.Windows.Input.MouseButtonState XButton2 { get; }\n    return:\n      type: System.Windows.Input.MouseButtonState\n      description: The state of the button.\n  overload: System.Windows.Input.MouseDevice.XButton2*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Windows.Input.InputDevice\n  isExternal: false\n  name: System.Windows.Input.InputDevice\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.ComponentModel.InvalidEnumArgumentException\n  parent: System.ComponentModel\n  isExternal: false\n  name: InvalidEnumArgumentException\n  nameWithType: InvalidEnumArgumentException\n  fullName: System.ComponentModel.InvalidEnumArgumentException\n- uid: System.Windows.Input.MouseDevice.ActiveSource\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: ActiveSource\n  nameWithType: MouseDevice.ActiveSource\n  fullName: System.Windows.Input.MouseDevice.ActiveSource\n- uid: System.Windows.PresentationSource\n  parent: System.Windows\n  isExternal: false\n  name: PresentationSource\n  nameWithType: PresentationSource\n  fullName: System.Windows.PresentationSource\n- uid: System.Windows.Input.MouseDevice.Capture(System.Windows.IInputElement)\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: Capture(IInputElement)\n  nameWithType: MouseDevice.Capture(IInputElement)\n  fullName: System.Windows.Input.MouseDevice.Capture(IInputElement)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Windows.IInputElement\n  parent: System.Windows\n  isExternal: false\n  name: IInputElement\n  nameWithType: IInputElement\n  fullName: System.Windows.IInputElement\n- uid: System.Windows.Input.MouseDevice.Capture(System.Windows.IInputElement,System.Windows.Input.CaptureMode)\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: Capture(IInputElement,CaptureMode)\n  nameWithType: MouseDevice.Capture(IInputElement,CaptureMode)\n  fullName: System.Windows.Input.MouseDevice.Capture(IInputElement,CaptureMode)\n- uid: System.Windows.Input.CaptureMode\n  parent: System.Windows.Input\n  isExternal: false\n  name: CaptureMode\n  nameWithType: CaptureMode\n  fullName: System.Windows.Input.CaptureMode\n- uid: System.Windows.Input.MouseDevice.Captured\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: Captured\n  nameWithType: MouseDevice.Captured\n  fullName: System.Windows.Input.MouseDevice.Captured\n- uid: System.Windows.Input.MouseDevice.DirectlyOver\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: DirectlyOver\n  nameWithType: MouseDevice.DirectlyOver\n  fullName: System.Windows.Input.MouseDevice.DirectlyOver\n- uid: System.Windows.Input.MouseDevice.GetButtonState(System.Windows.Input.MouseButton)\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: GetButtonState(MouseButton)\n  nameWithType: MouseDevice.GetButtonState(MouseButton)\n  fullName: System.Windows.Input.MouseDevice.GetButtonState(MouseButton)\n- uid: System.Windows.Input.MouseButtonState\n  parent: System.Windows.Input\n  isExternal: false\n  name: MouseButtonState\n  nameWithType: MouseButtonState\n  fullName: System.Windows.Input.MouseButtonState\n- uid: System.Windows.Input.MouseButton\n  parent: System.Windows.Input\n  isExternal: false\n  name: MouseButton\n  nameWithType: MouseButton\n  fullName: System.Windows.Input.MouseButton\n- uid: System.Windows.Input.MouseDevice.GetClientPosition\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: GetClientPosition()\n  nameWithType: MouseDevice.GetClientPosition()\n  fullName: System.Windows.Input.MouseDevice.GetClientPosition()\n- uid: System.Windows.Point\n  parent: System.Windows\n  isExternal: false\n  name: Point\n  nameWithType: Point\n  fullName: System.Windows.Point\n- uid: System.Windows.Input.MouseDevice.GetClientPosition(System.Windows.PresentationSource)\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: GetClientPosition(PresentationSource)\n  nameWithType: MouseDevice.GetClientPosition(PresentationSource)\n  fullName: System.Windows.Input.MouseDevice.GetClientPosition(PresentationSource)\n- uid: System.Windows.Input.MouseDevice.GetPosition(System.Windows.IInputElement)\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: GetPosition(IInputElement)\n  nameWithType: MouseDevice.GetPosition(IInputElement)\n  fullName: System.Windows.Input.MouseDevice.GetPosition(IInputElement)\n- uid: System.Windows.Input.MouseDevice.GetScreenPosition\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: GetScreenPosition()\n  nameWithType: MouseDevice.GetScreenPosition()\n  fullName: System.Windows.Input.MouseDevice.GetScreenPosition()\n- uid: System.Windows.Input.MouseDevice.LeftButton\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: LeftButton\n  nameWithType: MouseDevice.LeftButton\n  fullName: System.Windows.Input.MouseDevice.LeftButton\n- uid: System.Windows.Input.MouseDevice.MiddleButton\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: MiddleButton\n  nameWithType: MouseDevice.MiddleButton\n  fullName: System.Windows.Input.MouseDevice.MiddleButton\n- uid: System.Windows.Input.MouseDevice.OverrideCursor\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: OverrideCursor\n  nameWithType: MouseDevice.OverrideCursor\n  fullName: System.Windows.Input.MouseDevice.OverrideCursor\n- uid: System.Windows.Input.Cursor\n  parent: System.Windows.Input\n  isExternal: false\n  name: Cursor\n  nameWithType: Cursor\n  fullName: System.Windows.Input.Cursor\n- uid: System.Windows.Input.MouseDevice.RightButton\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: RightButton\n  nameWithType: MouseDevice.RightButton\n  fullName: System.Windows.Input.MouseDevice.RightButton\n- uid: System.Windows.Input.MouseDevice.SetCursor(System.Windows.Input.Cursor)\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: SetCursor(Cursor)\n  nameWithType: MouseDevice.SetCursor(Cursor)\n  fullName: System.Windows.Input.MouseDevice.SetCursor(Cursor)\n- uid: System.Windows.Input.MouseDevice.Synchronize\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: Synchronize()\n  nameWithType: MouseDevice.Synchronize()\n  fullName: System.Windows.Input.MouseDevice.Synchronize()\n- uid: System.Windows.Input.MouseDevice.Target\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: Target\n  nameWithType: MouseDevice.Target\n  fullName: System.Windows.Input.MouseDevice.Target\n- uid: System.Windows.Input.MouseDevice.UpdateCursor\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: UpdateCursor()\n  nameWithType: MouseDevice.UpdateCursor()\n  fullName: System.Windows.Input.MouseDevice.UpdateCursor()\n- uid: System.Windows.Input.MouseDevice.XButton1\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: XButton1\n  nameWithType: MouseDevice.XButton1\n  fullName: System.Windows.Input.MouseDevice.XButton1\n- uid: System.Windows.Input.MouseDevice.XButton2\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: XButton2\n  nameWithType: MouseDevice.XButton2\n  fullName: System.Windows.Input.MouseDevice.XButton2\n- uid: System.Windows.Input.MouseDevice.ActiveSource*\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: ActiveSource\n  nameWithType: MouseDevice.ActiveSource\n- uid: System.Windows.Input.MouseDevice.Capture*\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: Capture\n  nameWithType: MouseDevice.Capture\n- uid: System.Windows.Input.MouseDevice.Captured*\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: Captured\n  nameWithType: MouseDevice.Captured\n- uid: System.Windows.Input.MouseDevice.DirectlyOver*\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: DirectlyOver\n  nameWithType: MouseDevice.DirectlyOver\n- uid: System.Windows.Input.MouseDevice.GetButtonState*\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: GetButtonState\n  nameWithType: MouseDevice.GetButtonState\n- uid: System.Windows.Input.MouseDevice.GetClientPosition*\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: GetClientPosition\n  nameWithType: MouseDevice.GetClientPosition\n- uid: System.Windows.Input.MouseDevice.GetPosition*\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: GetPosition\n  nameWithType: MouseDevice.GetPosition\n- uid: System.Windows.Input.MouseDevice.GetScreenPosition*\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: GetScreenPosition\n  nameWithType: MouseDevice.GetScreenPosition\n- uid: System.Windows.Input.MouseDevice.LeftButton*\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: LeftButton\n  nameWithType: MouseDevice.LeftButton\n- uid: System.Windows.Input.MouseDevice.MiddleButton*\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: MiddleButton\n  nameWithType: MouseDevice.MiddleButton\n- uid: System.Windows.Input.MouseDevice.OverrideCursor*\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: OverrideCursor\n  nameWithType: MouseDevice.OverrideCursor\n- uid: System.Windows.Input.MouseDevice.RightButton*\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: RightButton\n  nameWithType: MouseDevice.RightButton\n- uid: System.Windows.Input.MouseDevice.SetCursor*\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: SetCursor\n  nameWithType: MouseDevice.SetCursor\n- uid: System.Windows.Input.MouseDevice.Synchronize*\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: Synchronize\n  nameWithType: MouseDevice.Synchronize\n- uid: System.Windows.Input.MouseDevice.Target*\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: Target\n  nameWithType: MouseDevice.Target\n- uid: System.Windows.Input.MouseDevice.UpdateCursor*\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: UpdateCursor\n  nameWithType: MouseDevice.UpdateCursor\n- uid: System.Windows.Input.MouseDevice.XButton1*\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: XButton1\n  nameWithType: MouseDevice.XButton1\n- uid: System.Windows.Input.MouseDevice.XButton2*\n  parent: System.Windows.Input.MouseDevice\n  isExternal: false\n  name: XButton2\n  nameWithType: MouseDevice.XButton2\n"}