{"nodes":[{"pos":[503,620],"content":"Provides a base class for Win32 critical handle implementations in which the value of -1 indicates an invalid handle.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides a base class for Win32 critical handle implementations in which the value of -1 indicates an invalid handle.","pos":[0,117]}]},{"pos":[633,1598],"content":"This class derives from the <xref:System.Runtime.InteropServices.CriticalHandle?displayProperty=fullName> class. It describes the format of an invalid handle that uses a value of -1. Further derivations of this class (for example, file or registry handles) can specialize this further.       This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref:System.IDisposable> interface topic.      > [!NOTE] >  See the <xref:System.Runtime.InteropServices.CriticalHandle> class for important information on critical handle security and thread safety.","needQuote":false,"needEscape":true,"nodes":[{"content":"This class derives from the &lt;xref:System.Runtime.InteropServices.CriticalHandle?displayProperty=fullName&gt; class.","pos":[0,112],"source":"This class derives from the <xref:System.Runtime.InteropServices.CriticalHandle?displayProperty=fullName> class."},{"content":"It describes the format of an invalid handle that uses a value of -1.","pos":[113,182]},{"content":"Further derivations of this class (for example, file or registry handles) can specialize this further.","pos":[183,285]},{"content":"This type implements the &lt;xref:System.IDisposable&gt; interface.","pos":[292,353],"source":"       This type implements the <xref:System.IDisposable> interface."},{"content":"When you have finished using the type, you should dispose of it either directly or indirectly.","pos":[354,448]},{"content":"To dispose of the type directly, call its &lt;xref:System.IDisposable.Dispose%2A&gt; method in a <ph id=\"ph1\">`try`</ph><ph id=\"ph2\">/</ph><ph id=\"ph3\">`catch`</ph> block.","pos":[449,560],"source":" To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block."},{"content":"To dispose of it indirectly, use a language construct such as <ph id=\"ph1\">`using`</ph> (in C#) or <ph id=\"ph2\">`Using`</ph> (in Visual Basic).","pos":[561,668],"source":" To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic)."},{"content":"For more information, see the “Using an Object that Implements IDisposable” section in the &lt;xref:System.IDisposable&gt; interface topic.","pos":[669,802],"source":" For more information, see the “Using an Object that Implements IDisposable” section in the <xref:System.IDisposable> interface topic."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  See the &lt;xref:System.Runtime.InteropServices.CriticalHandle&gt; class for important information on critical handle security and thread safety.","pos":[808,960],"source":"      > [!NOTE] >  See the <xref:System.Runtime.InteropServices.CriticalHandle> class for important information on critical handle security and thread safety."}]},{"pos":[2410,2531],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid\"></xref> class."},{"pos":[3176,3234],"content":"Gets a value that indicates whether the handle is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that indicates whether the handle is invalid.","pos":[0,58]}]},{"pos":[3246,3348],"content":"The common language runtime uses this property to determine whether critical finalization is required.","needQuote":true,"needEscape":true,"nodes":[{"content":"The common language runtime uses this property to determine whether critical finalization is required.","pos":[0,102]}]},{"pos":[3470,3633],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the handle is not valid; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the handle is not valid; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid\n  id: CriticalHandleMinusOneIsInvalid\n  children:\n  - Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid.#ctor\n  - Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid.IsInvalid\n  langs:\n  - csharp\n  name: CriticalHandleMinusOneIsInvalid\n  nameWithType: CriticalHandleMinusOneIsInvalid\n  fullName: Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid\n  type: Class\n  summary: Provides a base class for Win32 critical handle implementations in which the value of -1 indicates an invalid handle.\n  remarks: \"This class derives from the <xref:System.Runtime.InteropServices.CriticalHandle?displayProperty=fullName> class. It describes the format of an invalid handle that uses a value of -1. Further derivations of this class (for example, file or registry handles) can specialize this further.  \\n  \\n This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref:System.IDisposable> interface topic.  \\n  \\n> [!NOTE]\\n>  See the <xref:System.Runtime.InteropServices.CriticalHandle> class for important information on critical handle security and thread safety.\"\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      public abstract class CriticalHandleMinusOneIsInvalid : System.Runtime.InteropServices.CriticalHandle\n  inheritance:\n  - System.Runtime.InteropServices.CriticalHandle\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid.#ctor\n  id: '#ctor'\n  parent: Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid\n  langs:\n  - csharp\n  name: CriticalHandleMinusOneIsInvalid()\n  nameWithType: CriticalHandleMinusOneIsInvalid.CriticalHandleMinusOneIsInvalid()\n  fullName: Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid.CriticalHandleMinusOneIsInvalid()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: Microsoft.Win32.SafeHandles\n  summary: Initializes a new instance of the <xref href=\"Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid\"></xref> class.\n  syntax:\n    content: protected CriticalHandleMinusOneIsInvalid ();\n    parameters: []\n  overload: Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid.IsInvalid\n  id: IsInvalid\n  parent: Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid\n  langs:\n  - csharp\n  name: IsInvalid\n  nameWithType: CriticalHandleMinusOneIsInvalid.IsInvalid\n  fullName: Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid.IsInvalid\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: Microsoft.Win32.SafeHandles\n  summary: Gets a value that indicates whether the handle is invalid.\n  remarks: The common language runtime uses this property to determine whether critical finalization is required.\n  syntax:\n    content: public override bool IsInvalid { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the handle is not valid; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid.IsInvalid*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Runtime.InteropServices.CriticalHandle\n  isExternal: false\n  name: System.Runtime.InteropServices.CriticalHandle\n- uid: Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid.#ctor\n  parent: Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid\n  isExternal: false\n  name: CriticalHandleMinusOneIsInvalid()\n  nameWithType: CriticalHandleMinusOneIsInvalid.CriticalHandleMinusOneIsInvalid()\n  fullName: Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid.CriticalHandleMinusOneIsInvalid()\n- uid: Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid.IsInvalid\n  parent: Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid\n  isExternal: false\n  name: IsInvalid\n  nameWithType: CriticalHandleMinusOneIsInvalid.IsInvalid\n  fullName: Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid.IsInvalid\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid.#ctor*\n  parent: Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid\n  isExternal: false\n  name: CriticalHandleMinusOneIsInvalid\n  nameWithType: CriticalHandleMinusOneIsInvalid.CriticalHandleMinusOneIsInvalid\n- uid: Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid.IsInvalid*\n  parent: Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid\n  isExternal: false\n  name: IsInvalid\n  nameWithType: CriticalHandleMinusOneIsInvalid.IsInvalid\n"}