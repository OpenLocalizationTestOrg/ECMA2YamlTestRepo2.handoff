{"nodes":[{"pos":[2478,2530],"content":"Provides helper methods for processing Web requests.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides helper methods for processing Web requests.","pos":[0,52]}]},{"pos":[2542,2701],"content":"The methods and properties of the HttpServerUtility class are exposed through the intrinsic <xref:System.Web.HttpContext.Server%2A> object provided by ASP.NET.","needQuote":true,"needEscape":true,"nodes":[{"content":"The methods and properties of the HttpServerUtility class are exposed through the intrinsic &lt;xref:System.Web.HttpContext.Server%2A&gt; object provided by ASP.NET.","pos":[0,159],"source":"The methods and properties of the HttpServerUtility class are exposed through the intrinsic <xref:System.Web.HttpContext.Server%2A> object provided by ASP.NET."}]},{"pos":[4110,4140],"content":"Clears the previous exception.","needQuote":true,"needEscape":true,"nodes":[{"content":"Clears the previous exception.","pos":[0,30]}]},{"pos":[5030,5132],"content":"Creates a server instance of a COM object identified by the object's programmatic identifier (ProgID).","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a server instance of a COM object identified by the object's programmatic identifier (ProgID).","pos":[0,102]}]},{"pos":[5632,5685],"content":"The class or type of object to create an instance of.","needQuote":true,"needEscape":true,"nodes":[{"content":"The class or type of object to create an instance of.","pos":[0,53]}]},{"pos":[5743,5758],"content":"The new object.","needQuote":true,"needEscape":true,"nodes":[{"content":"The new object.","pos":[0,15]}]},{"pos":[5922,5969],"content":"An instance of the object could not be created.","needQuote":true,"needEscape":true,"nodes":[{"content":"An instance of the object could not be created.","pos":[0,47]}]},{"pos":[6365,6439],"content":"Creates a server instance of a COM object identified by the object's type.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a server instance of a COM object identified by the object's type.","pos":[0,74]}]},{"pos":[6577,6632],"content":"A <xref:System.Type> representing the object to create.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Type&gt; representing the object to create.","pos":[0,55],"source":"A <xref:System.Type> representing the object to create."}]},{"pos":[6690,6705],"content":"The new object.","needQuote":true,"needEscape":true,"nodes":[{"content":"The new object.","pos":[0,15]}]},{"pos":[7228,7322],"content":"Creates a server instance of a COM object identified by the object's class identifier (CLSID).","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a server instance of a COM object identified by the object's class identifier (CLSID).","pos":[0,94]}]},{"pos":[7901,7961],"content":"The class identifier of the object to create an instance of.","needQuote":true,"needEscape":true,"nodes":[{"content":"The class identifier of the object to create an instance of.","pos":[0,60]}]},{"pos":[8019,8034],"content":"The new object.","needQuote":true,"needEscape":true,"nodes":[{"content":"The new object.","pos":[0,15]}]},{"pos":[8207,8254],"content":"An instance of the object could not be created.","needQuote":true,"needEscape":true,"nodes":[{"content":"An instance of the object could not be created.","pos":[0,47]}]},{"pos":[8635,8725],"content":"Executes the handler for the specified virtual path in the context of the current request.","needQuote":true,"needEscape":true,"nodes":[{"content":"Executes the handler for the specified virtual path in the context of the current request.","pos":[0,90]}]},{"pos":[8738,10250],"content":"The Execute method continues execution of the original page after execution of the new page is completed. The <xref:System.Web.HttpServerUtility.Transfer%2A> method unconditionally transfers execution to another handler.       ASP.NET does not verify that the current user is authorized to view the resource delivered by the Execute method. Although the ASP.NET authorization and authentication logic runs before the original resource handler is called, ASP.NET directly calls the handler indicated by the Execute method and does not rerun authentication and authorization logic for the new resource. If your application's security policy requires clients to have appropriate authorization to access the resource, the application should force reauthorization or provide a custom access-control mechanism.       You can force reauthorization by using the <xref:System.Web.HttpResponse.Redirect%2A> method instead of the Execute method. <xref:System.Web.HttpResponse.Redirect%2A> performs a client-side redirect in which the browser requests the new resource. Because this redirect is a new request entering the system, it is subjected to all the authentication and authorization logic of both Internet Information Services (IIS) and ASP.NET security policy.       You can verify that the user has permission to view the resource by incorporating a custom authorization method that uses the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> method before the application calls the Execute method.","needQuote":false,"needEscape":true,"nodes":[{"content":"The Execute method continues execution of the original page after execution of the new page is completed. The <xref:System.Web.HttpServerUtility.Transfer%2A> method unconditionally transfers execution to another handler.       ASP.NET does not verify that the current user is authorized to view the resource delivered by the Execute method. Although the ASP.NET authorization and authentication logic runs before the original resource handler is called, ASP.NET directly calls the handler indicated by the Execute method and does not rerun authentication and authorization logic for the new resource. If your application's security policy requires clients to have appropriate authorization to access the resource, the application should force reauthorization or provide a custom access-control mechanism.       You can force reauthorization by using the <xref:System.Web.HttpResponse.Redirect%2A> method instead of the Execute method. <xref:System.Web.HttpResponse.Redirect%2A> performs a client-side redirect in which the browser requests the new resource. Because this redirect is a new request entering the system, it is subjected to all the authentication and authorization logic of both Internet Information Services (IIS) and ASP.NET security policy.       You can verify that the user has permission to view the resource by incorporating a custom authorization method that uses the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> method before the application calls the Execute method.","pos":[0,1506],"nodes":[{"content":"The Execute method continues execution of the original page after execution of the new page is completed.","pos":[0,105]},{"content":"The &lt;xref:System.Web.HttpServerUtility.Transfer%2A&gt; method unconditionally transfers execution to another handler.","pos":[106,220],"source":" The <xref:System.Web.HttpServerUtility.Transfer%2A> method unconditionally transfers execution to another handler."},{"content":"ASP.NET does not verify that the current user is authorized to view the resource delivered by the Execute method.","pos":[227,340]},{"content":"Although the ASP.NET authorization and authentication logic runs before the original resource handler is called, ASP.NET directly calls the handler indicated by the Execute method and does not rerun authentication and authorization logic for the new resource.","pos":[341,600]},{"content":"If your application's security policy requires clients to have appropriate authorization to access the resource, the application should force reauthorization or provide a custom access-control mechanism.","pos":[601,804]},{"content":"You can force reauthorization by using the &lt;xref:System.Web.HttpResponse.Redirect%2A&gt; method instead of the Execute method.","pos":[811,934],"source":"       You can force reauthorization by using the <xref:System.Web.HttpResponse.Redirect%2A> method instead of the Execute method."},{"content":"&lt;xref:System.Web.HttpResponse.Redirect%2A&gt; performs a client-side redirect in which the browser requests the new resource.","pos":[935,1057],"source":" <xref:System.Web.HttpResponse.Redirect%2A> performs a client-side redirect in which the browser requests the new resource."},{"content":"Because this redirect is a new request entering the system, it is subjected to all the authentication and authorization logic of both Internet Information Services (IIS) and ASP.NET security policy.","pos":[1058,1256]},{"content":"You can verify that the user has permission to view the resource by incorporating a custom authorization method that uses the &lt;xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A&gt; method before the application calls the Execute method.","pos":[1263,1506],"source":"       You can verify that the user has permission to view the resource by incorporating a custom authorization method that uses the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> method before the application calls the Execute method."}]}]},{"pos":[10832,10856],"content":"The URL path to execute.","needQuote":true,"needEscape":true,"nodes":[{"content":"The URL path to execute.","pos":[0,24]}]},{"pos":[11942,12162],"content":"Executes the handler for the specified virtual path in the context of the current request and specifies whether to clear the &lt;xref:System.Web.HttpRequest.QueryString<bpt id=\"p1\">*</bpt>&gt; and &lt;xref:System.Web.HttpRequest.Form<ept id=\"p1\">*</ept>&gt; collections.","needQuote":true,"needEscape":true,"source":"Executes the handler for the specified virtual path in the context of the current request and specifies whether to clear the <xref:System.Web.HttpRequest.QueryString*> and <xref:System.Web.HttpRequest.Form*> collections."},{"pos":[12865,12889],"content":"The URL path to execute.","needQuote":true,"needEscape":true,"nodes":[{"content":"The URL path to execute.","pos":[0,24]}]},{"pos":[12959,13303],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to preserve the &lt;xref:System.Web.HttpRequest.QueryString<bpt id=\"p2\">*</bpt>&gt; and &lt;xref:System.Web.HttpRequest.Form<ept id=\"p2\">*</ept>&gt; collections; <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> to clear the &lt;xref:System.Web.HttpRequest.QueryString<bpt id=\"p4\">*</bpt>&gt; and &lt;xref:System.Web.HttpRequest.Form<ept id=\"p4\">*</ept>&gt; collections.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to preserve the <xref:System.Web.HttpRequest.QueryString*> and <xref:System.Web.HttpRequest.Form*> collections; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to clear the <xref:System.Web.HttpRequest.QueryString*> and <xref:System.Web.HttpRequest.Form*> collections."},{"pos":[14410,14573],"content":"Executes the handler for the specified virtual path in the context of the current request. A <xref:System.IO.TextWriter> captures output from the executed handler.","needQuote":true,"needEscape":true,"nodes":[{"content":"Executes the handler for the specified virtual path in the context of the current request. A <xref:System.IO.TextWriter> captures output from the executed handler.","pos":[0,163],"nodes":[{"content":"Executes the handler for the specified virtual path in the context of the current request.","pos":[0,90]},{"content":"A &lt;xref:System.IO.TextWriter&gt; captures output from the executed handler.","pos":[91,163],"source":" A <xref:System.IO.TextWriter> captures output from the executed handler."}]}]},{"pos":[14586,16115],"content":"The Execute method continues execution of the original request after execution of the virtual path specified is completed. The <xref:System.Web.HttpServerUtility.Transfer%2A> method unconditionally transfers execution to another handler.       ASP.NET does not verify that the current user is authorized to view the resource delivered by the Execute method. Although the ASP.NET authorization and authentication logic runs before the original resource handler is called, ASP.NET directly calls the handler indicated by the Execute method and does not rerun authentication and authorization logic for the new resource. If your application's security policy requires clients to have appropriate authorization to access the resource, the application should force reauthorization or provide a custom access-control mechanism.       You can force reauthorization by using the <xref:System.Web.HttpResponse.Redirect%2A> method instead of the Execute method. <xref:System.Web.HttpResponse.Redirect%2A> performs a client-side redirect in which the browser requests the new resource. Because this redirect is a new request entering the system, it is subjected to all the authentication and authorization logic of both Internet Information Services (IIS) and ASP.NET security policy.       You can verify that the user has permission to view the resource by incorporating a custom authorization method that uses the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> method before the application calls the Execute method.","needQuote":false,"needEscape":true,"nodes":[{"content":"The Execute method continues execution of the original request after execution of the virtual path specified is completed. The <xref:System.Web.HttpServerUtility.Transfer%2A> method unconditionally transfers execution to another handler.       ASP.NET does not verify that the current user is authorized to view the resource delivered by the Execute method. Although the ASP.NET authorization and authentication logic runs before the original resource handler is called, ASP.NET directly calls the handler indicated by the Execute method and does not rerun authentication and authorization logic for the new resource. If your application's security policy requires clients to have appropriate authorization to access the resource, the application should force reauthorization or provide a custom access-control mechanism.       You can force reauthorization by using the <xref:System.Web.HttpResponse.Redirect%2A> method instead of the Execute method. <xref:System.Web.HttpResponse.Redirect%2A> performs a client-side redirect in which the browser requests the new resource. Because this redirect is a new request entering the system, it is subjected to all the authentication and authorization logic of both Internet Information Services (IIS) and ASP.NET security policy.       You can verify that the user has permission to view the resource by incorporating a custom authorization method that uses the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> method before the application calls the Execute method.","pos":[0,1523],"nodes":[{"content":"The Execute method continues execution of the original request after execution of the virtual path specified is completed.","pos":[0,122]},{"content":"The &lt;xref:System.Web.HttpServerUtility.Transfer%2A&gt; method unconditionally transfers execution to another handler.","pos":[123,237],"source":" The <xref:System.Web.HttpServerUtility.Transfer%2A> method unconditionally transfers execution to another handler."},{"content":"ASP.NET does not verify that the current user is authorized to view the resource delivered by the Execute method.","pos":[244,357]},{"content":"Although the ASP.NET authorization and authentication logic runs before the original resource handler is called, ASP.NET directly calls the handler indicated by the Execute method and does not rerun authentication and authorization logic for the new resource.","pos":[358,617]},{"content":"If your application's security policy requires clients to have appropriate authorization to access the resource, the application should force reauthorization or provide a custom access-control mechanism.","pos":[618,821]},{"content":"You can force reauthorization by using the &lt;xref:System.Web.HttpResponse.Redirect%2A&gt; method instead of the Execute method.","pos":[828,951],"source":"       You can force reauthorization by using the <xref:System.Web.HttpResponse.Redirect%2A> method instead of the Execute method."},{"content":"&lt;xref:System.Web.HttpResponse.Redirect%2A&gt; performs a client-side redirect in which the browser requests the new resource.","pos":[952,1074],"source":" <xref:System.Web.HttpResponse.Redirect%2A> performs a client-side redirect in which the browser requests the new resource."},{"content":"Because this redirect is a new request entering the system, it is subjected to all the authentication and authorization logic of both Internet Information Services (IIS) and ASP.NET security policy.","pos":[1075,1273]},{"content":"You can verify that the user has permission to view the resource by incorporating a custom authorization method that uses the &lt;xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A&gt; method before the application calls the Execute method.","pos":[1280,1523],"source":"       You can verify that the user has permission to view the resource by incorporating a custom authorization method that uses the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> method before the application calls the Execute method."}]}]},{"pos":[16809,16833],"content":"The URL path to execute.","needQuote":true,"needEscape":true,"nodes":[{"content":"The URL path to execute.","pos":[0,24]}]},{"pos":[16903,16957],"content":"The <xref:System.IO.TextWriter> to capture the output.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.IO.TextWriter&gt; to capture the output.","pos":[0,54],"source":"The <xref:System.IO.TextWriter> to capture the output."}]},{"pos":[18118,18419],"content":"Executes the handler for the specified virtual path in the context of the current request. A <xref:System.IO.TextWriter> captures output from the page and a Boolean parameter specifies whether to clear the <xref:System.Web.HttpRequest.QueryString*> and <xref:System.Web.HttpRequest.Form*> collections.","needQuote":true,"needEscape":true,"nodes":[{"content":"Executes the handler for the specified virtual path in the context of the current request.","pos":[0,90]},{"content":"A &lt;xref:System.IO.TextWriter&gt; captures output from the page and a Boolean parameter specifies whether to clear the &lt;xref:System.Web.HttpRequest.QueryString<bpt id=\"p1\">*</bpt>&gt; and &lt;xref:System.Web.HttpRequest.Form<ept id=\"p1\">*</ept>&gt; collections.","pos":[91,301],"source":" A <xref:System.IO.TextWriter> captures output from the page and a Boolean parameter specifies whether to clear the <xref:System.Web.HttpRequest.QueryString*> and <xref:System.Web.HttpRequest.Form*> collections."}]},{"pos":[18432,20000],"content":"The <xref:System.Web.HttpServerUtility.Execute%2A> method continues execution of the original request after execution of the specified virtual path is completed. The <xref:System.Web.HttpServerUtility.Transfer%2A> method unconditionally transfers execution to another handler.       ASP.NET does not verify that the current user is authorized to view the resource delivered by the Execute method. Although the ASP.NET authorization and authentication logic runs before the original resource handler is called, ASP.NET directly calls the handler indicated by the Execute method and does not rerun authentication and authorization logic for the new resource. If your application's security policy requires clients to have appropriate authorization to access the resource, the application should force reauthorization or provide a custom access-control mechanism.       You can force reauthorization by using the <xref:System.Web.HttpResponse.Redirect%2A> method instead of the Execute method. <xref:System.Web.HttpResponse.Redirect%2A> performs a client-side redirect in which the browser requests the new resource. Because this redirect is a new request entering the system, it is subjected to all the authentication and authorization logic of both Internet Information Services (IIS) and ASP.NET security policy.       You can verify that the user has permission to view the resource by incorporating a custom authorization method that uses the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> method before the application calls the Execute method.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <xref:System.Web.HttpServerUtility.Execute%2A> method continues execution of the original request after execution of the specified virtual path is completed. The <xref:System.Web.HttpServerUtility.Transfer%2A> method unconditionally transfers execution to another handler.       ASP.NET does not verify that the current user is authorized to view the resource delivered by the Execute method. Although the ASP.NET authorization and authentication logic runs before the original resource handler is called, ASP.NET directly calls the handler indicated by the Execute method and does not rerun authentication and authorization logic for the new resource. If your application's security policy requires clients to have appropriate authorization to access the resource, the application should force reauthorization or provide a custom access-control mechanism.       You can force reauthorization by using the <xref:System.Web.HttpResponse.Redirect%2A> method instead of the Execute method. <xref:System.Web.HttpResponse.Redirect%2A> performs a client-side redirect in which the browser requests the new resource. Because this redirect is a new request entering the system, it is subjected to all the authentication and authorization logic of both Internet Information Services (IIS) and ASP.NET security policy.       You can verify that the user has permission to view the resource by incorporating a custom authorization method that uses the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> method before the application calls the Execute method.","pos":[0,1562],"nodes":[{"content":"The &lt;xref:System.Web.HttpServerUtility.Execute%2A&gt; method continues execution of the original request after execution of the specified virtual path is completed.","pos":[0,161],"source":"The <xref:System.Web.HttpServerUtility.Execute%2A> method continues execution of the original request after execution of the specified virtual path is completed."},{"content":"The &lt;xref:System.Web.HttpServerUtility.Transfer%2A&gt; method unconditionally transfers execution to another handler.","pos":[162,276],"source":" The <xref:System.Web.HttpServerUtility.Transfer%2A> method unconditionally transfers execution to another handler."},{"content":"ASP.NET does not verify that the current user is authorized to view the resource delivered by the Execute method.","pos":[283,396]},{"content":"Although the ASP.NET authorization and authentication logic runs before the original resource handler is called, ASP.NET directly calls the handler indicated by the Execute method and does not rerun authentication and authorization logic for the new resource.","pos":[397,656]},{"content":"If your application's security policy requires clients to have appropriate authorization to access the resource, the application should force reauthorization or provide a custom access-control mechanism.","pos":[657,860]},{"content":"You can force reauthorization by using the &lt;xref:System.Web.HttpResponse.Redirect%2A&gt; method instead of the Execute method.","pos":[867,990],"source":"       You can force reauthorization by using the <xref:System.Web.HttpResponse.Redirect%2A> method instead of the Execute method."},{"content":"&lt;xref:System.Web.HttpResponse.Redirect%2A&gt; performs a client-side redirect in which the browser requests the new resource.","pos":[991,1113],"source":" <xref:System.Web.HttpResponse.Redirect%2A> performs a client-side redirect in which the browser requests the new resource."},{"content":"Because this redirect is a new request entering the system, it is subjected to all the authentication and authorization logic of both Internet Information Services (IIS) and ASP.NET security policy.","pos":[1114,1312]},{"content":"You can verify that the user has permission to view the resource by incorporating a custom authorization method that uses the &lt;xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A&gt; method before the application calls the Execute method.","pos":[1319,1562],"source":"       You can verify that the user has permission to view the resource by incorporating a custom authorization method that uses the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> method before the application calls the Execute method."}]}]},{"pos":[20815,20839],"content":"The URL path to execute.","needQuote":true,"needEscape":true,"nodes":[{"content":"The URL path to execute.","pos":[0,24]}]},{"pos":[20909,20963],"content":"The <xref:System.IO.TextWriter> to capture the output.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.IO.TextWriter&gt; to capture the output.","pos":[0,54],"source":"The <xref:System.IO.TextWriter> to capture the output."}]},{"pos":[21033,21377],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to preserve the &lt;xref:System.Web.HttpRequest.QueryString<bpt id=\"p2\">*</bpt>&gt; and &lt;xref:System.Web.HttpRequest.Form<ept id=\"p2\">*</ept>&gt; collections; <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> to clear the &lt;xref:System.Web.HttpRequest.QueryString<bpt id=\"p4\">*</bpt>&gt; and &lt;xref:System.Web.HttpRequest.Form<ept id=\"p4\">*</ept>&gt; collections.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to preserve the <xref:System.Web.HttpRequest.QueryString*> and <xref:System.Web.HttpRequest.Form*> collections; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to clear the <xref:System.Web.HttpRequest.QueryString*> and <xref:System.Web.HttpRequest.Form*> collections."},{"pos":[21980,22062],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>path</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[22157,22197],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> is not a virtual path.","needQuote":true,"needEscape":true,"source":"<code>path</code> is not a virtual path."},{"pos":[22745,23058],"content":"Executes the handler for the specified virtual path in the context of the current request. A <xref:System.IO.TextWriter> captures output from the executed handler and a Boolean parameter specifies whether to clear the <xref:System.Web.HttpRequest.QueryString*> and <xref:System.Web.HttpRequest.Form*> collections.","needQuote":true,"needEscape":true,"nodes":[{"content":"Executes the handler for the specified virtual path in the context of the current request.","pos":[0,90]},{"content":"A &lt;xref:System.IO.TextWriter&gt; captures output from the executed handler and a Boolean parameter specifies whether to clear the &lt;xref:System.Web.HttpRequest.QueryString<bpt id=\"p1\">*</bpt>&gt; and &lt;xref:System.Web.HttpRequest.Form<ept id=\"p1\">*</ept>&gt; collections.","pos":[91,313],"source":" A <xref:System.IO.TextWriter> captures output from the executed handler and a Boolean parameter specifies whether to clear the <xref:System.Web.HttpRequest.QueryString*> and <xref:System.Web.HttpRequest.Form*> collections."}]},{"pos":[23071,24974],"content":"You can write custom HTTP handlers to process specific, predefined types of HTTP requests in any language that is compliant with the Common Language Specification (CLS). Executable code that is defined in the HTTP handler classes instead of  conventional ASP (also known as classic ASP) pages or ASP.NET pages responds to these specific requests. HTTP handlers allow for interacting with the low-level request and response services of a Web server that is running Internet Information Services (IIS), and they provide functionality that is similar to ISAPI extensions but with a simpler programming model.       ASP.NET does not verify that the current user is authorized to view the resource that is delivered by the Execute method. Although the ASP.NET authorization and authentication logic runs before the original resource handler is called, ASP.NET directly calls the handler that is indicated by the Execute method and does not rerun authentication and authorization logic for the new resource. If the security policy for your application requires clients to have appropriate authorization to gain access to the resource, the application should force reauthorization or provide a custom access-control mechanism.       You can force reauthorization by using the <xref:System.Web.HttpResponse.Redirect%2A> method instead of the Execute method. The <xref:System.Web.HttpResponse.Redirect%2A> performs a client-side redirect in which the browser requests the new resource. Because this redirect is a new request entering the system, it is subjected to all the authentication and authorization logic of both the IIS and ASP.NET security policy.       You can verify that the user has permission to view the resource by incorporating a custom authorization method that uses the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> method before the application calls the Execute method.","needQuote":false,"needEscape":true,"nodes":[{"content":"You can write custom HTTP handlers to process specific, predefined types of HTTP requests in any language that is compliant with the Common Language Specification (CLS). Executable code that is defined in the HTTP handler classes instead of  conventional ASP (also known as classic ASP) pages or ASP.NET pages responds to these specific requests. HTTP handlers allow for interacting with the low-level request and response services of a Web server that is running Internet Information Services (IIS), and they provide functionality that is similar to ISAPI extensions but with a simpler programming model.       ASP.NET does not verify that the current user is authorized to view the resource that is delivered by the Execute method. Although the ASP.NET authorization and authentication logic runs before the original resource handler is called, ASP.NET directly calls the handler that is indicated by the Execute method and does not rerun authentication and authorization logic for the new resource. If the security policy for your application requires clients to have appropriate authorization to gain access to the resource, the application should force reauthorization or provide a custom access-control mechanism.       You can force reauthorization by using the <xref:System.Web.HttpResponse.Redirect%2A> method instead of the Execute method. The <xref:System.Web.HttpResponse.Redirect%2A> performs a client-side redirect in which the browser requests the new resource. Because this redirect is a new request entering the system, it is subjected to all the authentication and authorization logic of both the IIS and ASP.NET security policy.       You can verify that the user has permission to view the resource by incorporating a custom authorization method that uses the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> method before the application calls the Execute method.","pos":[0,1897],"nodes":[{"content":"You can write custom HTTP handlers to process specific, predefined types of HTTP requests in any language that is compliant with the Common Language Specification (CLS).","pos":[0,169]},{"content":"Executable code that is defined in the HTTP handler classes instead of  conventional ASP (also known as classic ASP) pages or ASP.NET pages responds to these specific requests.","pos":[170,346]},{"content":"HTTP handlers allow for interacting with the low-level request and response services of a Web server that is running Internet Information Services (IIS), and they provide functionality that is similar to ISAPI extensions but with a simpler programming model.","pos":[347,605]},{"content":"ASP.NET does not verify that the current user is authorized to view the resource that is delivered by the Execute method.","pos":[612,733]},{"content":"Although the ASP.NET authorization and authentication logic runs before the original resource handler is called, ASP.NET directly calls the handler that is indicated by the Execute method and does not rerun authentication and authorization logic for the new resource.","pos":[734,1001]},{"content":"If the security policy for your application requires clients to have appropriate authorization to gain access to the resource, the application should force reauthorization or provide a custom access-control mechanism.","pos":[1002,1219]},{"content":"You can force reauthorization by using the &lt;xref:System.Web.HttpResponse.Redirect%2A&gt; method instead of the Execute method.","pos":[1226,1349],"source":"       You can force reauthorization by using the <xref:System.Web.HttpResponse.Redirect%2A> method instead of the Execute method."},{"content":"The &lt;xref:System.Web.HttpResponse.Redirect%2A&gt; performs a client-side redirect in which the browser requests the new resource.","pos":[1350,1476],"source":" The <xref:System.Web.HttpResponse.Redirect%2A> performs a client-side redirect in which the browser requests the new resource."},{"content":"Because this redirect is a new request entering the system, it is subjected to all the authentication and authorization logic of both the IIS and ASP.NET security policy.","pos":[1477,1647]},{"content":"You can verify that the user has permission to view the resource by incorporating a custom authorization method that uses the &lt;xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A&gt; method before the application calls the Execute method.","pos":[1654,1897],"source":"       You can verify that the user has permission to view the resource by incorporating a custom authorization method that uses the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> method before the application calls the Execute method."}]}]},{"pos":[25191,25308],"content":"The HTTP handler that implements the <bpt id=\"p1\">&lt;xref href=\"System.Web.IHttpHandler\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to transfer the current request to.","needQuote":true,"needEscape":true,"source":"The HTTP handler that implements the <xref href=\"System.Web.IHttpHandler\"></xref> to transfer the current request to."},{"pos":[25378,25432],"content":"The <xref:System.IO.TextWriter> to capture the output.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.IO.TextWriter&gt; to capture the output.","pos":[0,54],"source":"The <xref:System.IO.TextWriter> to capture the output."}]},{"pos":[25502,25846],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to preserve the &lt;xref:System.Web.HttpRequest.QueryString<bpt id=\"p2\">*</bpt>&gt; and &lt;xref:System.Web.HttpRequest.Form<ept id=\"p2\">*</ept>&gt; collections; <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> to clear the &lt;xref:System.Web.HttpRequest.QueryString<bpt id=\"p4\">*</bpt>&gt; and &lt;xref:System.Web.HttpRequest.Form<ept id=\"p4\">*</ept>&gt; collections.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to preserve the <xref:System.Web.HttpRequest.QueryString*> and <xref:System.Web.HttpRequest.Form*> collections; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to clear the <xref:System.Web.HttpRequest.QueryString*> and <xref:System.Web.HttpRequest.Form*> collections."},{"pos":[26005,26085],"content":"An error occurred while executing the handler specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">handler</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An error occurred while executing the handler specified by <code>handler</code>."},{"pos":[26188,26287],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">handler</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>handler</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[26645,26676],"content":"Returns the previous exception.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the previous exception.","pos":[0,31]}]},{"pos":[27259,27298],"content":"The previous exception that was thrown.","needQuote":true,"needEscape":true,"nodes":[{"content":"The previous exception that was thrown.","pos":[0,39]}]},{"pos":[27766,27828],"content":"Decodes an HTML-encoded string and returns the decoded string.","needQuote":true,"needEscape":true,"nodes":[{"content":"Decodes an HTML-encoded string and returns the decoded string.","pos":[0,62]}]},{"pos":[29618,29644],"content":"The HTML string to decode.","needQuote":true,"needEscape":true,"nodes":[{"content":"The HTML string to decode.","pos":[0,26]}]},{"pos":[29702,29719],"content":"The decoded text.","needQuote":true,"needEscape":true,"nodes":[{"content":"The decoded text.","pos":[0,17]}]},{"pos":[30260,30369],"content":"Decodes an HTML-encoded string and sends the resulting output to a <xref:System.IO.TextWriter> output stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Decodes an HTML-encoded string and sends the resulting output to a &lt;xref:System.IO.TextWriter&gt; output stream.","pos":[0,109],"source":"Decodes an HTML-encoded string and sends the resulting output to a <xref:System.IO.TextWriter> output stream."}]},{"pos":[32163,32189],"content":"The HTML string to decode.","needQuote":true,"needEscape":true,"nodes":[{"content":"The HTML string to decode.","pos":[0,26]}]},{"pos":[32259,32338],"content":"The <xref:System.IO.TextWriter> output stream that contains the decoded string.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.IO.TextWriter&gt; output stream that contains the decoded string.","pos":[0,79],"source":"The <xref:System.IO.TextWriter> output stream that contains the decoded string."}]},{"pos":[32804,32857],"content":"HTML-encodes a string and returns the encoded string.","needQuote":true,"needEscape":true,"nodes":[{"content":"HTML-encodes a string and returns the encoded string.","pos":[0,53]}]},{"pos":[35246,35272],"content":"The text string to encode.","needQuote":true,"needEscape":true,"nodes":[{"content":"The text string to encode.","pos":[0,26]}]},{"pos":[35330,35352],"content":"The HTML-encoded text.","needQuote":true,"needEscape":true,"nodes":[{"content":"The HTML-encoded text.","pos":[0,22]}]},{"pos":[35893,35993],"content":"HTML-encodes a string and sends the resulting output to a <xref:System.IO.TextWriter> output stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"HTML-encodes a string and sends the resulting output to a &lt;xref:System.IO.TextWriter&gt; output stream.","pos":[0,100],"source":"HTML-encodes a string and sends the resulting output to a <xref:System.IO.TextWriter> output stream."}]},{"pos":[37620,37641],"content":"The string to encode.","needQuote":true,"needEscape":true,"nodes":[{"content":"The string to encode.","pos":[0,21]}]},{"pos":[37711,37790],"content":"The <xref:System.IO.TextWriter> output stream that contains the encoded string.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.IO.TextWriter&gt; output stream that contains the encoded string.","pos":[0,79],"source":"The <xref:System.IO.TextWriter> output stream that contains the encoded string."}]},{"pos":[38209,38241],"content":"Gets the server's computer name.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the server's computer name.","pos":[0,32]}]},{"pos":[38717,38748],"content":"The name of the local computer.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the local computer.","pos":[0,31]}]},{"pos":[38911,38945],"content":"The computer name cannot be found.","needQuote":true,"needEscape":true,"nodes":[{"content":"The computer name cannot be found.","pos":[0,34]}]},{"pos":[39326,39404],"content":"Returns the physical file path that corresponds to the specified virtual path.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the physical file path that corresponds to the specified virtual path.","pos":[0,78]}]},{"pos":[41639,41679],"content":"The virtual path in the Web application.","needQuote":true,"needEscape":true,"nodes":[{"content":"The virtual path in the Web application.","pos":[0,40]}]},{"pos":[41737,41816],"content":"The physical file path on the Web server that corresponds to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The physical file path on the Web server that corresponds to <code>path</code>."},{"pos":[41975,42095],"content":"The current <bpt id=\"p1\">&lt;xref href=\"System.Web.HttpContext\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The current <xref href=\"System.Web.HttpContext\"></xref> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[42454,42506],"content":"Gets and sets the request time-out value in seconds.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets and sets the request time-out value in seconds.","pos":[0,52]}]},{"pos":[42519,42904],"content":"The ScriptTimeout property can be set in the Web.config file by setting the `executionTimeout` attribute of the  element. Setting the time-out programmatically with the ScriptTimeout property takes precedence over the Web.config setting.      > [!NOTE] >  If you set the `debug` attribute of the  element to `true` in the Web.config file, the value of ScriptTimeout will be ignored.","needQuote":false,"needEscape":true,"nodes":[{"content":"The ScriptTimeout property can be set in the Web.config file by setting the <ph id=\"ph1\">`executionTimeout`</ph> attribute of the  element.","pos":[0,121],"source":"The ScriptTimeout property can be set in the Web.config file by setting the `executionTimeout` attribute of the  element."},{"content":"Setting the time-out programmatically with the ScriptTimeout property takes precedence over the Web.config setting.","pos":[122,237]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If you set the <ph id=\"ph2\">`debug`</ph> attribute of the  element to <ph id=\"ph3\">`true`</ph> in the Web.config file, the value of ScriptTimeout will be ignored.","pos":[243,382],"source":"      > [!NOTE] >  If you set the `debug` attribute of the  element to `true` in the Web.config file, the value of ScriptTimeout will be ignored."}]},{"pos":[43366,43406],"content":"The time-out value setting for requests.","needQuote":true,"needEscape":true,"nodes":[{"content":"The time-out value setting for requests.","pos":[0,40]}]},{"pos":[43571,43691],"content":"The current <bpt id=\"p1\">&lt;xref href=\"System.Web.HttpContext\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The current <xref href=\"System.Web.HttpContext\"></xref> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[43806,43920],"content":"The time-out period is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or otherwise could not be set.","needQuote":true,"needEscape":true,"source":"The time-out period is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or otherwise could not be set."},{"pos":[44306,44451],"content":"For the current request, terminates execution of the current page and starts execution of a new page by using the specified URL path of the page.","needQuote":true,"needEscape":true,"nodes":[{"content":"For the current request, terminates execution of the current page and starts execution of a new page by using the specified URL path of the page.","pos":[0,145]}]},{"pos":[44464,46171],"content":"The page transferred to should be another .aspx page. For instance, a transfer to an .asp or .asmx page is not valid. The Transfer method preserves the <xref:System.Web.HttpRequest.QueryString%2A> and <xref:System.Web.HttpRequest.Form%2A> collections.       Transfer calls <xref:System.Web.HttpResponse.End%2A>, which throws a <xref:System.Threading.ThreadAbortException> exception upon completion.       ASP.NET does not verify that the current user is authorized to view the resource delivered by the Transfer method. Although the ASP.NET authorization and authentication logic runs before the original resource handler is called, ASP.NET directly calls the handler indicated by the Transfer method and does not rerun authentication and authorization logic for the new resource. If your application's security policy requires clients to have appropriate authorization to access the resource, the application should force reauthorization or provide a custom access-control mechanism.       You can force reauthorization by using the <xref:System.Web.HttpResponse.Redirect%2A> method instead of the Transfer method. The <xref:System.Web.HttpResponse.Redirect%2A> method performs a client-side redirect in which the browser requests the new resource. Because this redirect is a new request entering the system, it is subjected to all the authentication and authorization logic of both Internet Information Services (IIS) and ASP.NET security policy.       You can verify that the user has permission to view the resource by incorporating a custom authorization method that uses the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> method before the application calls the Transfer method.","needQuote":false,"needEscape":true,"nodes":[{"content":"The page transferred to should be another .aspx page. For instance, a transfer to an .asp or .asmx page is not valid. The Transfer method preserves the <xref:System.Web.HttpRequest.QueryString%2A> and <xref:System.Web.HttpRequest.Form%2A> collections.       Transfer calls <xref:System.Web.HttpResponse.End%2A>, which throws a <xref:System.Threading.ThreadAbortException> exception upon completion.       ASP.NET does not verify that the current user is authorized to view the resource delivered by the Transfer method. Although the ASP.NET authorization and authentication logic runs before the original resource handler is called, ASP.NET directly calls the handler indicated by the Transfer method and does not rerun authentication and authorization logic for the new resource. If your application's security policy requires clients to have appropriate authorization to access the resource, the application should force reauthorization or provide a custom access-control mechanism.       You can force reauthorization by using the <xref:System.Web.HttpResponse.Redirect%2A> method instead of the Transfer method. The <xref:System.Web.HttpResponse.Redirect%2A> method performs a client-side redirect in which the browser requests the new resource. Because this redirect is a new request entering the system, it is subjected to all the authentication and authorization logic of both Internet Information Services (IIS) and ASP.NET security policy.       You can verify that the user has permission to view the resource by incorporating a custom authorization method that uses the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> method before the application calls the Transfer method.","pos":[0,1699],"nodes":[{"content":"The page transferred to should be another .aspx page.","pos":[0,53]},{"content":"For instance, a transfer to an .asp or .asmx page is not valid.","pos":[54,117]},{"content":"The Transfer method preserves the &lt;xref:System.Web.HttpRequest.QueryString%2A&gt; and &lt;xref:System.Web.HttpRequest.Form%2A&gt; collections.","pos":[118,251],"source":" The Transfer method preserves the <xref:System.Web.HttpRequest.QueryString%2A> and <xref:System.Web.HttpRequest.Form%2A> collections."},{"content":"Transfer calls &lt;xref:System.Web.HttpResponse.End%2A&gt;, which throws a &lt;xref:System.Threading.ThreadAbortException&gt; exception upon completion.","pos":[258,398],"source":"       Transfer calls <xref:System.Web.HttpResponse.End%2A>, which throws a <xref:System.Threading.ThreadAbortException> exception upon completion."},{"content":"ASP.NET does not verify that the current user is authorized to view the resource delivered by the Transfer method.","pos":[405,519]},{"content":"Although the ASP.NET authorization and authentication logic runs before the original resource handler is called, ASP.NET directly calls the handler indicated by the Transfer method and does not rerun authentication and authorization logic for the new resource.","pos":[520,780]},{"content":"If your application's security policy requires clients to have appropriate authorization to access the resource, the application should force reauthorization or provide a custom access-control mechanism.","pos":[781,984]},{"content":"You can force reauthorization by using the &lt;xref:System.Web.HttpResponse.Redirect%2A&gt; method instead of the Transfer method.","pos":[991,1115],"source":"       You can force reauthorization by using the <xref:System.Web.HttpResponse.Redirect%2A> method instead of the Transfer method."},{"content":"The &lt;xref:System.Web.HttpResponse.Redirect%2A&gt; method performs a client-side redirect in which the browser requests the new resource.","pos":[1116,1249],"source":" The <xref:System.Web.HttpResponse.Redirect%2A> method performs a client-side redirect in which the browser requests the new resource."},{"content":"Because this redirect is a new request entering the system, it is subjected to all the authentication and authorization logic of both Internet Information Services (IIS) and ASP.NET security policy.","pos":[1250,1448]},{"content":"You can verify that the user has permission to view the resource by incorporating a custom authorization method that uses the &lt;xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A&gt; method before the application calls the Transfer method.","pos":[1455,1699],"source":"       You can verify that the user has permission to view the resource by incorporating a custom authorization method that uses the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> method before the application calls the Transfer method."}]}]},{"pos":[46308,46362],"content":"The URL path of the new page on the server to execute.","needQuote":true,"needEscape":true,"nodes":[{"content":"The URL path of the new page on the server to execute.","pos":[0,54]}]},{"pos":[46870,47117],"content":"Terminates execution of the current page and starts execution of a new page by using the specified URL path of the page. Specifies whether to clear the <xref:System.Web.HttpRequest.QueryString*> and <xref:System.Web.HttpRequest.Form*> collections.","needQuote":true,"needEscape":true,"nodes":[{"content":"Terminates execution of the current page and starts execution of a new page by using the specified URL path of the page.","pos":[0,120]},{"content":"Specifies whether to clear the &lt;xref:System.Web.HttpRequest.QueryString<bpt id=\"p1\">*</bpt>&gt; and &lt;xref:System.Web.HttpRequest.Form<ept id=\"p1\">*</ept>&gt; collections.","pos":[121,247],"source":" Specifies whether to clear the <xref:System.Web.HttpRequest.QueryString*> and <xref:System.Web.HttpRequest.Form*> collections."}]},{"pos":[47130,48991],"content":"The page transferred to should be another .aspx page. For instance, a transfer to an .asp or .asmx page is not valid.       Transfer calls <xref:System.Web.HttpResponse.End%2A>, which throws a <xref:System.Threading.ThreadAbortException> exception upon completion.       If you set the `preserveForm` parameter to `true`, the target page will be able to access the view state of the previous page by using the <xref:System.Web.UI.Page.PreviousPage%2A> property.       For security purposes, you should keep the `enableViewStateMac` attribute set to `true`. ASP.NET does not verify that the current user is authorized to view the resource delivered by the Transfer method. Although the ASP.NET authorization and authentication logic runs before the original resource handler is called, ASP.NET directly calls the handler indicated by the Transfer method and does not rerun authentication and authorization logic for the new resource. If your application's security policy requires clients to have appropriate authorization to access the resource, the application should force reauthorization or provide a custom access-control mechanism.       You can force reauthorization by using the <xref:System.Web.HttpResponse.Redirect%2A> method instead of the Transfer method. The <xref:System.Web.HttpResponse.Redirect%2A> method performs a client-side redirect in which the browser requests the new resource. Because this redirect is a new request entering the system, it is subjected to all the authentication and authorization logic of both Internet Information Services (IIS) and ASP.NET security policy.       You can verify that the user has permission to view the resource by incorporating a custom authorization method that uses the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> method before the application calls the Transfer method.","needQuote":false,"needEscape":true,"nodes":[{"content":"The page transferred to should be another .aspx page.","pos":[0,53]},{"content":"For instance, a transfer to an .asp or .asmx page is not valid.","pos":[54,117]},{"content":"Transfer calls &lt;xref:System.Web.HttpResponse.End%2A&gt;, which throws a &lt;xref:System.Threading.ThreadAbortException&gt; exception upon completion.","pos":[124,264],"source":"       Transfer calls <xref:System.Web.HttpResponse.End%2A>, which throws a <xref:System.Threading.ThreadAbortException> exception upon completion."},{"content":"If you set the <ph id=\"ph1\">`preserveForm`</ph> parameter to <ph id=\"ph2\">`true`</ph>, the target page will be able to access the view state of the previous page by using the &lt;xref:System.Web.UI.Page.PreviousPage%2A&gt; property.","pos":[271,461],"source":"       If you set the `preserveForm` parameter to `true`, the target page will be able to access the view state of the previous page by using the <xref:System.Web.UI.Page.PreviousPage%2A> property."},{"content":"For security purposes, you should keep the <ph id=\"ph1\">`enableViewStateMac`</ph> attribute set to <ph id=\"ph2\">`true`</ph>.","pos":[468,556],"source":"       For security purposes, you should keep the `enableViewStateMac` attribute set to `true`."},{"content":"ASP.NET does not verify that the current user is authorized to view the resource delivered by the Transfer method.","pos":[557,671]},{"content":"Although the ASP.NET authorization and authentication logic runs before the original resource handler is called, ASP.NET directly calls the handler indicated by the Transfer method and does not rerun authentication and authorization logic for the new resource.","pos":[672,932]},{"content":"If your application's security policy requires clients to have appropriate authorization to access the resource, the application should force reauthorization or provide a custom access-control mechanism.","pos":[933,1136]},{"content":"You can force reauthorization by using the &lt;xref:System.Web.HttpResponse.Redirect%2A&gt; method instead of the Transfer method.","pos":[1143,1267],"source":"       You can force reauthorization by using the <xref:System.Web.HttpResponse.Redirect%2A> method instead of the Transfer method."},{"content":"The &lt;xref:System.Web.HttpResponse.Redirect%2A&gt; method performs a client-side redirect in which the browser requests the new resource.","pos":[1268,1401],"source":" The <xref:System.Web.HttpResponse.Redirect%2A> method performs a client-side redirect in which the browser requests the new resource."},{"content":"Because this redirect is a new request entering the system, it is subjected to all the authentication and authorization logic of both Internet Information Services (IIS) and ASP.NET security policy.","pos":[1402,1600]},{"content":"You can verify that the user has permission to view the resource by incorporating a custom authorization method that uses the &lt;xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A&gt; method before the application calls the Transfer method.","pos":[1607,1851],"source":"       You can verify that the user has permission to view the resource by incorporating a custom authorization method that uses the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> method before the application calls the Transfer method."}]},{"pos":[49494,49548],"content":"The URL path of the new page on the server to execute.","needQuote":true,"needEscape":true,"nodes":[{"content":"The URL path of the new page on the server to execute.","pos":[0,54]}]},{"pos":[49618,49962],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to preserve the &lt;xref:System.Web.HttpRequest.QueryString<bpt id=\"p2\">*</bpt>&gt; and &lt;xref:System.Web.HttpRequest.Form<ept id=\"p2\">*</ept>&gt; collections; <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> to clear the &lt;xref:System.Web.HttpRequest.QueryString<bpt id=\"p4\">*</bpt>&gt; and &lt;xref:System.Web.HttpRequest.Form<ept id=\"p4\">*</ept>&gt; collections.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to preserve the <xref:System.Web.HttpRequest.QueryString*> and <xref:System.Web.HttpRequest.Form*> collections; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to clear the <xref:System.Web.HttpRequest.QueryString*> and <xref:System.Web.HttpRequest.Form*> collections."},{"pos":[50128,50167],"content":"The current page request is a callback.","needQuote":true,"needEscape":true,"nodes":[{"content":"The current page request is a callback.","pos":[0,39]}]},{"pos":[50645,50960],"content":"Terminates execution of the current page and starts execution of a new request by using a custom HTTP handler that implements the <bpt id=\"p1\">&lt;xref href=\"System.Web.IHttpHandler\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> interface and specifies whether to clear the &lt;xref:System.Web.HttpRequest.QueryString<bpt id=\"p2\">*</bpt>&gt; and &lt;xref:System.Web.HttpRequest.Form<ept id=\"p2\">*</ept>&gt; collections.","needQuote":true,"needEscape":true,"source":"Terminates execution of the current page and starts execution of a new request by using a custom HTTP handler that implements the <xref href=\"System.Web.IHttpHandler\"></xref> interface and specifies whether to clear the <xref:System.Web.HttpRequest.QueryString*> and <xref:System.Web.HttpRequest.Form*> collections."},{"pos":[50973,53190],"content":"You can write custom HTTP handlers to process specific, predefined types of HTTP requests in any language that is compliant with the Common Language Specification (CLS). Executable code that is defined in the HTTP handler classes instead of conventional ASP (also known as classic ASP) pages or ASP.NET pages responds to these specific requests. HTTP handlers allow for interacting with the low-level request and response services of a Web server that is running Internet Information Services (IIS), and they provide functionality that is similar to ISAPI extensions but with a simpler programming model.       If you set the `preserveForm` parameter to `true`, the target page will be able to access the view state of the previous page by using the <xref:System.Web.UI.Page.PreviousPage%2A> property.       For security purposes, you should keep the `enableViewStateMac` attribute set to `true`. ASP.NET does not verify that the current user is authorized to view the resource delivered by the <xref:System.Web.HttpServerUtility.Transfer%2A> method. Although the ASP.NET authorization and authentication logic runs before the original resource handler is called, ASP.NET directly calls the handler indicated by the Transfer method, and does not rerun authentication and authorization logic for the new resource. If the security policy for your application requires clients to have appropriate authorization to access the resource, the application should force reauthorization or provide a custom access-control mechanism.       You can force reauthorization by using the <xref:System.Web.HttpResponse.Redirect%2A> method instead of the Transfer method. The <xref:System.Web.HttpResponse.Redirect%2A> method performs a client-side redirect in which the browser requests the new resource. Because this redirect is a new request entering the system, it is subjected to all the authentication and authorization logic of both the IIS and ASP.NET security policy.       You can verify that the user has permission to view the resource by incorporating a custom authorization method that uses the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> method before the application calls the Transfer method.","needQuote":false,"needEscape":true,"nodes":[{"content":"You can write custom HTTP handlers to process specific, predefined types of HTTP requests in any language that is compliant with the Common Language Specification (CLS).","pos":[0,169]},{"content":"Executable code that is defined in the HTTP handler classes instead of conventional ASP (also known as classic ASP) pages or ASP.NET pages responds to these specific requests.","pos":[170,345]},{"content":"HTTP handlers allow for interacting with the low-level request and response services of a Web server that is running Internet Information Services (IIS), and they provide functionality that is similar to ISAPI extensions but with a simpler programming model.","pos":[346,604]},{"content":"If you set the <ph id=\"ph1\">`preserveForm`</ph> parameter to <ph id=\"ph2\">`true`</ph>, the target page will be able to access the view state of the previous page by using the &lt;xref:System.Web.UI.Page.PreviousPage%2A&gt; property.","pos":[611,801],"source":"       If you set the `preserveForm` parameter to `true`, the target page will be able to access the view state of the previous page by using the <xref:System.Web.UI.Page.PreviousPage%2A> property."},{"content":"For security purposes, you should keep the <ph id=\"ph1\">`enableViewStateMac`</ph> attribute set to <ph id=\"ph2\">`true`</ph>.","pos":[808,896],"source":"       For security purposes, you should keep the `enableViewStateMac` attribute set to `true`."},{"content":"ASP.NET does not verify that the current user is authorized to view the resource delivered by the &lt;xref:System.Web.HttpServerUtility.Transfer%2A&gt; method.","pos":[897,1050],"source":" ASP.NET does not verify that the current user is authorized to view the resource delivered by the <xref:System.Web.HttpServerUtility.Transfer%2A> method."},{"content":"Although the ASP.NET authorization and authentication logic runs before the original resource handler is called, ASP.NET directly calls the handler indicated by the Transfer method, and does not rerun authentication and authorization logic for the new resource.","pos":[1051,1312]},{"content":"If the security policy for your application requires clients to have appropriate authorization to access the resource, the application should force reauthorization or provide a custom access-control mechanism.","pos":[1313,1522]},{"content":"You can force reauthorization by using the &lt;xref:System.Web.HttpResponse.Redirect%2A&gt; method instead of the Transfer method.","pos":[1529,1653],"source":"       You can force reauthorization by using the <xref:System.Web.HttpResponse.Redirect%2A> method instead of the Transfer method."},{"content":"The &lt;xref:System.Web.HttpResponse.Redirect%2A&gt; method performs a client-side redirect in which the browser requests the new resource.","pos":[1654,1787],"source":" The <xref:System.Web.HttpResponse.Redirect%2A> method performs a client-side redirect in which the browser requests the new resource."},{"content":"Because this redirect is a new request entering the system, it is subjected to all the authentication and authorization logic of both the IIS and ASP.NET security policy.","pos":[1788,1958]},{"content":"You can verify that the user has permission to view the resource by incorporating a custom authorization method that uses the &lt;xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A&gt; method before the application calls the Transfer method.","pos":[1965,2209],"source":"       You can verify that the user has permission to view the resource by incorporating a custom authorization method that uses the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> method before the application calls the Transfer method."}]},{"pos":[53379,53496],"content":"The HTTP handler that implements the <bpt id=\"p1\">&lt;xref href=\"System.Web.IHttpHandler\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to transfer the current request to.","needQuote":true,"needEscape":true,"source":"The HTTP handler that implements the <xref href=\"System.Web.IHttpHandler\"></xref> to transfer the current request to."},{"pos":[53566,53910],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to preserve the &lt;xref:System.Web.HttpRequest.QueryString<bpt id=\"p2\">*</bpt>&gt; and &lt;xref:System.Web.HttpRequest.Form<ept id=\"p2\">*</ept>&gt; collections; <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> to clear the &lt;xref:System.Web.HttpRequest.QueryString<bpt id=\"p4\">*</bpt>&gt; and &lt;xref:System.Web.HttpRequest.Form<ept id=\"p4\">*</ept>&gt; collections.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to preserve the <xref:System.Web.HttpRequest.QueryString*> and <xref:System.Web.HttpRequest.Form*> collections; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to clear the <xref:System.Web.HttpRequest.QueryString*> and <xref:System.Web.HttpRequest.Form*> collections."},{"pos":[54076,54115],"content":"The current page request is a callback.","needQuote":true,"needEscape":true,"nodes":[{"content":"The current page request is a callback.","pos":[0,39]}]},{"pos":[54536,54592],"content":"Performs an asynchronous execution of the specified URL.","needQuote":true,"needEscape":true,"nodes":[{"content":"Performs an asynchronous execution of the specified URL.","pos":[0,56]}]},{"pos":[54604,55091],"content":"This method overload calls the <xref:System.Web.HttpServerUtility.TransferRequest%2A> overload with the `preserveForm` parameter set to `false`, the `method` parameter set to `null`, the `headers` parameter set to `null`, and the `preserveUser` parameter set to `true`. For more information, see the \"Remarks\" section in <xref:System.Web.HttpServerUtility.TransferRequest%28System.String%2CSystem.Boolean%2CSystem.String%2CSystem.Collections.Specialized.NameValueCollection%29> overload.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method overload calls the &lt;xref:System.Web.HttpServerUtility.TransferRequest%2A&gt; overload with the <ph id=\"ph1\">`preserveForm`</ph> parameter set to <ph id=\"ph2\">`false`</ph>, the <ph id=\"ph3\">`method`</ph> parameter set to <ph id=\"ph4\">`null`</ph>, the <ph id=\"ph5\">`headers`</ph> parameter set to <ph id=\"ph6\">`null`</ph>, and the <ph id=\"ph7\">`preserveUser`</ph> parameter set to <ph id=\"ph8\">`true`</ph>.","pos":[0,269],"source":"This method overload calls the <xref:System.Web.HttpServerUtility.TransferRequest%2A> overload with the `preserveForm` parameter set to `false`, the `method` parameter set to `null`, the `headers` parameter set to `null`, and the `preserveUser` parameter set to `true`."},{"content":"For more information, see the \"Remarks\" section in &lt;xref:System.Web.HttpServerUtility.TransferRequest%28System.String%2CSystem.Boolean%2CSystem.String%2CSystem.Collections.Specialized.NameValueCollection%29&gt; overload.","pos":[270,487],"source":" For more information, see the \"Remarks\" section in <xref:System.Web.HttpServerUtility.TransferRequest%28System.String%2CSystem.Boolean%2CSystem.String%2CSystem.Collections.Specialized.NameValueCollection%29> overload."}]},{"pos":[55234,55288],"content":"The URL path of the new page on the server to execute.","needQuote":true,"needEscape":true,"nodes":[{"content":"The URL path of the new page on the server to execute.","pos":[0,54]}]},{"pos":[55479,55590],"content":"The request requires the integrated pipeline mode of <ph id=\"ph1\">[!INCLUDE[iisver](~/add/includes/ajax-current-ext-md.md)]</ph>.","needQuote":true,"needEscape":true,"source":"The request requires the integrated pipeline mode of [!INCLUDE[iisver](~/add/includes/ajax-current-ext-md.md)]."},{"pos":[55685,55735],"content":"The server is not available to handle the request.","needQuote":true,"needEscape":true,"nodes":[{"content":"The server is not available to handle the request.","pos":[0,50]}]},{"pos":[55838,55934],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>path</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[56029,56072],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is invalid.","needQuote":true,"needEscape":true,"source":"The <code>path</code> parameter is invalid."},{"pos":[56547,56641],"content":"Performs an asynchronous execution of the specified URL and preserves query string parameters.","needQuote":true,"needEscape":true,"nodes":[{"content":"Performs an asynchronous execution of the specified URL and preserves query string parameters.","pos":[0,94]}]},{"pos":[56654,57307],"content":"This overload calls the <xref:System.Web.HttpServerUtility.TransferRequest%2A> overload with the `preserveForm` parameter set to the value passed in, the `method` parameter set to `null`, the `headers` parameter set to `null`, and the `preserveUser` parameter set to `true`. For more information, see the \"Remarks\" section in <xref:System.Web.HttpServerUtility.TransferRequest%28System.String%2CSystem.Boolean%2CSystem.String%2CSystem.Collections.Specialized.NameValueCollection%29>.       TransferRequest is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"nodes":[{"content":"This overload calls the &lt;xref:System.Web.HttpServerUtility.TransferRequest%2A&gt; overload with the <ph id=\"ph1\">`preserveForm`</ph> parameter set to the value passed in, the <ph id=\"ph2\">`method`</ph> parameter set to <ph id=\"ph3\">`null`</ph>, the <ph id=\"ph4\">`headers`</ph> parameter set to <ph id=\"ph5\">`null`</ph>, and the <ph id=\"ph6\">`preserveUser`</ph> parameter set to <ph id=\"ph7\">`true`</ph>.","pos":[0,274],"source":"This overload calls the <xref:System.Web.HttpServerUtility.TransferRequest%2A> overload with the `preserveForm` parameter set to the value passed in, the `method` parameter set to `null`, the `headers` parameter set to `null`, and the `preserveUser` parameter set to `true`."},{"content":"For more information, see the \"Remarks\" section in &lt;xref:System.Web.HttpServerUtility.TransferRequest%28System.String%2CSystem.Boolean%2CSystem.String%2CSystem.Collections.Specialized.NameValueCollection%29&gt;.","pos":[275,483],"source":" For more information, see the \"Remarks\" section in <xref:System.Web.HttpServerUtility.TransferRequest%28System.String%2CSystem.Boolean%2CSystem.String%2CSystem.Collections.Specialized.NameValueCollection%29>."},{"content":"TransferRequest is introduced in the .NET Framework version 3.5.","pos":[490,554]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Versions and Dependencies<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[556,649],"source":"  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[57470,57524],"content":"The URL path of the new page on the server to execute.","needQuote":true,"needEscape":true,"nodes":[{"content":"The URL path of the new page on the server to execute.","pos":[0,54]}]},{"pos":[57594,57842],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to preserve the &lt;xref:System.Web.HttpRequest.Form<bpt id=\"p2\">*</bpt>&gt; collection; <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> to clear the &lt;xref:System.Web.HttpRequest.Form<ept id=\"p2\">*</ept>&gt; collection.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to preserve the <xref:System.Web.HttpRequest.Form*> collection; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to clear the <xref:System.Web.HttpRequest.Form*> collection."},{"pos":[58033,58144],"content":"The request requires the integrated pipeline mode of <ph id=\"ph1\">[!INCLUDE[iisver](~/add/includes/ajax-current-ext-md.md)]</ph>.","needQuote":true,"needEscape":true,"source":"The request requires the integrated pipeline mode of [!INCLUDE[iisver](~/add/includes/ajax-current-ext-md.md)]."},{"pos":[58239,58289],"content":"The server is not available to handle the request.","needQuote":true,"needEscape":true,"nodes":[{"content":"The server is not available to handle the request.","pos":[0,50]}]},{"pos":[58392,58488],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>path</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[58583,58626],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is invalid.","needQuote":true,"needEscape":true,"source":"The <code>path</code> parameter is invalid."},{"pos":[59312,59412],"content":"Performs an asynchronous execution of the specified URL using the specified HTTP method and headers.","needQuote":true,"needEscape":true,"nodes":[{"content":"Performs an asynchronous execution of the specified URL using the specified HTTP method and headers.","pos":[0,100]}]},{"pos":[59425,61343],"content":"This method is used when running with the integrated pipeline mode in [!INCLUDE[iisver](~/add/includes/ajax-current-ext-md.md)] to allow request processing to be transferred from one resource type to another while executing the target request with the correct request context. For example, you can use the TransferRequest method to transfer a request for an ASPX page to a request for an XML page.       The TransferRequest method performs an asynchronous child execution of the specified URL with the following conditions:      -   If the `path` parameter specifies a query string, it will be used as the new query string. If no query string is included, the query string of the request will be re-used.      -   If the `method` parameter is specified, it will be used. If it is `null`, the HTTP method of the original request will be used.      -   If the `preserveForm` parameter is `true`, the current entity body of the request will be available to the target request. This allows form posts and uploads to be transferred.      -   If the user identity is currently set on the original request, the identity will be transferred to the new request. This allows authenticated requests to re-use the result of the authentication for the new request. If you do not want the user to be transferred, set the user to `null` on the original request before transferring.      -   If the `headers` parameter is specified, the new request will execute with the specified headers. This can be used to modify the request headers and cookies for the new request, or add a special header that specifies where the original request was received.           This method calls the <xref:System.Web.HttpServerUtility.TransferRequest%28System.String%2CSystem.Boolean%2CSystem.String%2CSystem.Collections.Specialized.NameValueCollection%2CSystem.Boolean%29> method overload with the `preserveUser` parameter set to `true`.","needQuote":false,"needEscape":true,"nodes":[{"content":"This method is used when running with the integrated pipeline mode in <ph id=\"ph1\">[!INCLUDE[iisver](~/add/includes/ajax-current-ext-md.md)]</ph> to allow request processing to be transferred from one resource type to another while executing the target request with the correct request context.","pos":[0,276],"source":"This method is used when running with the integrated pipeline mode in [!INCLUDE[iisver](~/add/includes/ajax-current-ext-md.md)] to allow request processing to be transferred from one resource type to another while executing the target request with the correct request context."},{"content":"For example, you can use the TransferRequest method to transfer a request for an ASPX page to a request for an XML page.","pos":[277,397]},{"content":"The TransferRequest method performs an asynchronous child execution of the specified URL with the following conditions:      -   If the <ph id=\"ph1\">`path`</ph> parameter specifies a query string, it will be used as the new query string.","pos":[404,623],"source":"       The TransferRequest method performs an asynchronous child execution of the specified URL with the following conditions:      -   If the `path` parameter specifies a query string, it will be used as the new query string."},{"content":"If no query string is included, the query string of the request will be re-used.","pos":[624,704]},{"content":"-   If the <ph id=\"ph1\">`method`</ph> parameter is specified, it will be used.","pos":[710,770],"source":"      -   If the `method` parameter is specified, it will be used."},{"content":"If it is <ph id=\"ph1\">`null`</ph>, the HTTP method of the original request will be used.","pos":[771,841],"source":" If it is `null`, the HTTP method of the original request will be used."},{"content":"-   If the <ph id=\"ph1\">`preserveForm`</ph> parameter is <ph id=\"ph2\">`true`</ph>, the current entity body of the request will be available to the target request.","pos":[847,973],"source":"      -   If the `preserveForm` parameter is `true`, the current entity body of the request will be available to the target request."},{"content":"This allows form posts and uploads to be transferred.","pos":[974,1027]},{"content":"-   If the user identity is currently set on the original request, the identity will be transferred to the new request.","pos":[1033,1152]},{"content":"This allows authenticated requests to re-use the result of the authentication for the new request.","pos":[1153,1251]},{"content":"If you do not want the user to be transferred, set the user to <ph id=\"ph1\">`null`</ph> on the original request before transferring.","pos":[1252,1366],"source":" If you do not want the user to be transferred, set the user to `null` on the original request before transferring."},{"content":"-   If the <ph id=\"ph1\">`headers`</ph> parameter is specified, the new request will execute with the specified headers.","pos":[1372,1473],"source":"      -   If the `headers` parameter is specified, the new request will execute with the specified headers."},{"content":"This can be used to modify the request headers and cookies for the new request, or add a special header that specifies where the original request was received.","pos":[1474,1633]},{"content":"This method calls the &lt;xref:System.Web.HttpServerUtility.TransferRequest%28System.String%2CSystem.Boolean%2CSystem.String%2CSystem.Collections.Specialized.NameValueCollection%2CSystem.Boolean%29&gt; method overload with the <ph id=\"ph1\">`preserveUser`</ph> parameter set to <ph id=\"ph2\">`true`</ph>.","pos":[1644,1904],"source":"           This method calls the <xref:System.Web.HttpServerUtility.TransferRequest%28System.String%2CSystem.Boolean%2CSystem.String%2CSystem.Collections.Specialized.NameValueCollection%2CSystem.Boolean%29> method overload with the `preserveUser` parameter set to `true`."}]},{"pos":[61581,61635],"content":"The URL path of the new page on the server to execute.","needQuote":true,"needEscape":true,"nodes":[{"content":"The URL path of the new page on the server to execute.","pos":[0,54]}]},{"pos":[61705,61953],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to preserve the &lt;xref:System.Web.HttpRequest.Form<bpt id=\"p2\">*</bpt>&gt; collection; <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> to clear the &lt;xref:System.Web.HttpRequest.Form<ept id=\"p2\">*</ept>&gt; collection.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to preserve the <xref:System.Web.HttpRequest.Form*> collection; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to clear the <xref:System.Web.HttpRequest.Form*> collection."},{"pos":[62016,62075],"content":"The HTTP method to use in the execution of the new request.","needQuote":true,"needEscape":true,"nodes":[{"content":"The HTTP method to use in the execution of the new request.","pos":[0,59]}]},{"pos":[62176,62289],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.NameValueCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> of request headers for the new request.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> of request headers for the new request."},{"pos":[62480,62586],"content":"The request requires <ph id=\"ph1\">[!INCLUDE[iisver](~/add/includes/ajax-current-ext-md.md)]</ph> running in integrated mode.","needQuote":true,"needEscape":true,"source":"The request requires [!INCLUDE[iisver](~/add/includes/ajax-current-ext-md.md)] running in integrated mode."},{"pos":[62681,62731],"content":"The server is not available to handle the request.","needQuote":true,"needEscape":true,"nodes":[{"content":"The server is not available to handle the request.","pos":[0,50]}]},{"pos":[62834,62930],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>path</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[63025,63068],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is invalid.","needQuote":true,"needEscape":true,"source":"The <code>path</code> parameter is invalid."},{"pos":[63808,63975],"content":"Performs an asynchronous execution of the specified URL using the specified HTTP method, headers, and path, and optionally preserves form values and the user identity.","needQuote":true,"needEscape":true,"nodes":[{"content":"Performs an asynchronous execution of the specified URL using the specified HTTP method, headers, and path, and optionally preserves form values and the user identity.","pos":[0,167]}]},{"pos":[63987,64195],"content":"For more information, see the \"Remarks\" section in <xref:System.Web.HttpServerUtility.TransferRequest%28System.String%2CSystem.Boolean%2CSystem.String%2CSystem.Collections.Specialized.NameValueCollection%29>.","needQuote":true,"needEscape":true,"nodes":[{"content":"For more information, see the \"Remarks\" section in &lt;xref:System.Web.HttpServerUtility.TransferRequest%28System.String%2CSystem.Boolean%2CSystem.String%2CSystem.Collections.Specialized.NameValueCollection%29&gt;.","pos":[0,208],"source":"For more information, see the \"Remarks\" section in <xref:System.Web.HttpServerUtility.TransferRequest%28System.String%2CSystem.Boolean%2CSystem.String%2CSystem.Collections.Specialized.NameValueCollection%29>."}]},{"pos":[64451,64460],"content":"The path.","needQuote":true,"needEscape":true,"nodes":[{"content":"The path.","pos":[0,9]}]},{"pos":[64530,64778],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to preserve the &lt;xref:System.Web.HttpRequest.Form<bpt id=\"p2\">*</bpt>&gt; collection; <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> to clear the &lt;xref:System.Web.HttpRequest.Form<ept id=\"p2\">*</ept>&gt; collection.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to preserve the <xref:System.Web.HttpRequest.Form*> collection; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to clear the <xref:System.Web.HttpRequest.Form*> collection."},{"pos":[64841,64883],"content":"The HTTP method to use in the new request.","needQuote":true,"needEscape":true,"nodes":[{"content":"The HTTP method to use in the new request.","pos":[0,42]}]},{"pos":[64984,65115],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.NameValueCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that contains request headers for the new request.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> object that contains request headers for the new request."},{"pos":[65185,65501],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to preserve the user identity; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The other method overloads of this method call this overload with this parameter set to <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to preserve the user identity; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,166],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to preserve the user identity; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The other method overloads of this method call this overload with this parameter set to <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[167,316],"source":" The other method overloads of this method call this overload with this parameter set to <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>."}]},{"pos":[65692,65803],"content":"The request requires the integrated pipeline mode of <ph id=\"ph1\">[!INCLUDE[iisver](~/add/includes/ajax-current-ext-md.md)]</ph>.","needQuote":true,"needEscape":true,"source":"The request requires the integrated pipeline mode of [!INCLUDE[iisver](~/add/includes/ajax-current-ext-md.md)]."},{"pos":[65898,65948],"content":"The server is not available to handle the request.","needQuote":true,"needEscape":true,"nodes":[{"content":"The server is not available to handle the request.","pos":[0,50]}]},{"pos":[66051,66147],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>path</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[66242,66285],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is invalid.","needQuote":true,"needEscape":true,"source":"The <code>path</code> parameter is invalid."},{"pos":[66676,66728],"content":"URL-decodes a string and returns the decoded string.","needQuote":true,"needEscape":true,"nodes":[{"content":"URL-decodes a string and returns the decoded string.","pos":[0,52]}]},{"pos":[66741,67805],"content":"URL encoding ensures that all browsers will correctly transmit text in URL strings. Characters such as a question mark (?), ampersand (&), slash mark (/), and spaces might be truncated or corrupted by some browsers. As a result, these characters must be encoded in `<a>` tags or in query strings where the strings can be re-sent by a browser in a request string.       This method is a convenient way to access the <xref:System.Web.HttpUtility.UrlDecode%2A?displayProperty=fullName> method at run time from an ASP.NET application. Internally, this method uses <xref:System.Web.HttpUtility.UrlDecode%2A?displayProperty=fullName> to decode strings.       In the code-behind file for an ASP.NET web page, access an instance of the <xref:System.Web.HttpServerUtility> class through the `Server` property. In a class that is not in a code-behind file, use `HttpContext.Current.Server` to access an instance of the <xref:System.Web.HttpServerUtility> class.       Outside of a web application, use the <xref:System.Net.WebUtility> class to encode or decode values.","needQuote":false,"needEscape":true,"nodes":[{"content":"URL encoding ensures that all browsers will correctly transmit text in URL strings.","pos":[0,83]},{"content":"Characters such as a question mark (?), ampersand (&amp;), slash mark (/), and spaces might be truncated or corrupted by some browsers.","pos":[84,215],"source":" Characters such as a question mark (?), ampersand (&), slash mark (/), and spaces might be truncated or corrupted by some browsers."},{"content":"As a result, these characters must be encoded in <ph id=\"ph1\">`&lt;a&gt;`</ph> tags or in query strings where the strings can be re-sent by a browser in a request string.","pos":[216,362],"source":" As a result, these characters must be encoded in `<a>` tags or in query strings where the strings can be re-sent by a browser in a request string."},{"content":"This method is a convenient way to access the &lt;xref:System.Web.HttpUtility.UrlDecode%2A?displayProperty=fullName&gt; method at run time from an ASP.NET application.","pos":[369,530],"source":"       This method is a convenient way to access the <xref:System.Web.HttpUtility.UrlDecode%2A?displayProperty=fullName> method at run time from an ASP.NET application."},{"content":"Internally, this method uses &lt;xref:System.Web.HttpUtility.UrlDecode%2A?displayProperty=fullName&gt; to decode strings.","pos":[531,646],"source":" Internally, this method uses <xref:System.Web.HttpUtility.UrlDecode%2A?displayProperty=fullName> to decode strings."},{"content":"In the code-behind file for an ASP.NET web page, access an instance of the &lt;xref:System.Web.HttpServerUtility&gt; class through the <ph id=\"ph1\">`Server`</ph> property.","pos":[653,800],"source":"       In the code-behind file for an ASP.NET web page, access an instance of the <xref:System.Web.HttpServerUtility> class through the `Server` property."},{"content":"In a class that is not in a code-behind file, use <ph id=\"ph1\">`HttpContext.Current.Server`</ph> to access an instance of the &lt;xref:System.Web.HttpServerUtility&gt; class.","pos":[801,951],"source":" In a class that is not in a code-behind file, use `HttpContext.Current.Server` to access an instance of the <xref:System.Web.HttpServerUtility> class."},{"content":"Outside of a web application, use the &lt;xref:System.Net.WebUtility&gt; class to encode or decode values.","pos":[958,1058],"source":"       Outside of a web application, use the <xref:System.Net.WebUtility> class to encode or decode values."}]},{"pos":[68787,68813],"content":"The text string to decode.","needQuote":true,"needEscape":true,"nodes":[{"content":"The text string to decode.","pos":[0,26]}]},{"pos":[68871,68888],"content":"The decoded text.","needQuote":true,"needEscape":true,"nodes":[{"content":"The decoded text.","pos":[0,17]}]},{"pos":[69423,69542],"content":"Decodes an HTML string received in a URL and sends the resulting output to a <xref:System.IO.TextWriter> output stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Decodes an HTML string received in a URL and sends the resulting output to a &lt;xref:System.IO.TextWriter&gt; output stream.","pos":[0,119],"source":"Decodes an HTML string received in a URL and sends the resulting output to a <xref:System.IO.TextWriter> output stream."}]},{"pos":[69555,70386],"content":"URL encoding ensures that all browsers will correctly transmit text in URL strings. Characters such as a question mark (?), ampersand (&), slash mark (/), and spaces might be truncated or corrupted by some browsers. As a result, these characters must be encoded in `<a>` tags or in query strings where the strings can be re-sent by a browser in a request string.       <xref:System.Web.HttpServerUtility.UrlDecode%2A> is a convenient way to access the <xref:System.Web.HttpUtility.UrlDecode%2A?displayProperty=fullName> method at run time from an ASP.NET application. Internally, <xref:System.Web.HttpServerUtility.UrlDecode%2A> uses <xref:System.Web.HttpUtility.UrlDecode%2A?displayProperty=fullName> to decode strings.       To encode or decode values outside of a web application, use the <xref:System.Net.WebUtility> class.","needQuote":false,"needEscape":true,"nodes":[{"content":"URL encoding ensures that all browsers will correctly transmit text in URL strings.","pos":[0,83]},{"content":"Characters such as a question mark (?), ampersand (&amp;), slash mark (/), and spaces might be truncated or corrupted by some browsers.","pos":[84,215],"source":" Characters such as a question mark (?), ampersand (&), slash mark (/), and spaces might be truncated or corrupted by some browsers."},{"content":"As a result, these characters must be encoded in <ph id=\"ph1\">`&lt;a&gt;`</ph> tags or in query strings where the strings can be re-sent by a browser in a request string.","pos":[216,362],"source":" As a result, these characters must be encoded in `<a>` tags or in query strings where the strings can be re-sent by a browser in a request string."},{"content":"&lt;xref:System.Web.HttpServerUtility.UrlDecode%2A&gt; is a convenient way to access the &lt;xref:System.Web.HttpUtility.UrlDecode%2A?displayProperty=fullName&gt; method at run time from an ASP.NET application.","pos":[369,567],"source":"       <xref:System.Web.HttpServerUtility.UrlDecode%2A> is a convenient way to access the <xref:System.Web.HttpUtility.UrlDecode%2A?displayProperty=fullName> method at run time from an ASP.NET application."},{"content":"Internally, &lt;xref:System.Web.HttpServerUtility.UrlDecode%2A&gt; uses &lt;xref:System.Web.HttpUtility.UrlDecode%2A?displayProperty=fullName&gt; to decode strings.","pos":[568,720],"source":" Internally, <xref:System.Web.HttpServerUtility.UrlDecode%2A> uses <xref:System.Web.HttpUtility.UrlDecode%2A?displayProperty=fullName> to decode strings."},{"content":"To encode or decode values outside of a web application, use the &lt;xref:System.Net.WebUtility&gt; class.","pos":[727,827],"source":"       To encode or decode values outside of a web application, use the <xref:System.Net.WebUtility> class."}]},{"pos":[70937,70963],"content":"The HTML string to decode.","needQuote":true,"needEscape":true,"nodes":[{"content":"The HTML string to decode.","pos":[0,26]}]},{"pos":[71033,71112],"content":"The <xref:System.IO.TextWriter> output stream that contains the decoded string.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.IO.TextWriter&gt; output stream that contains the decoded string.","pos":[0,79],"source":"The <xref:System.IO.TextWriter> output stream that contains the decoded string."}]},{"pos":[71572,71624],"content":"URL-encodes a string and returns the encoded string.","needQuote":true,"needEscape":true,"nodes":[{"content":"URL-encodes a string and returns the encoded string.","pos":[0,52]}]},{"pos":[71637,72701],"content":"URL encoding ensures that all browsers will correctly transmit text in URL strings. Characters such as a question mark (?), ampersand (&), slash mark (/), and spaces might be truncated or corrupted by some browsers. As a result, these characters must be encoded in `<a>` tags or in query strings where the strings can be re-sent by a browser in a request string.       This method is a convenient way to access the <xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=fullName> method at run time from an ASP.NET application. Internally, this method uses <xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=fullName> to encode strings.       In the code-behind file for an ASP.NET web page, access an instance of the <xref:System.Web.HttpServerUtility> class through the `Server` property. In a class that is not in a code-behind file, use `HttpContext.Current.Server` to access an instance of the <xref:System.Web.HttpServerUtility> class.       Outside of a web application, use the <xref:System.Net.WebUtility> class to encode or decode values.","needQuote":false,"needEscape":true,"nodes":[{"content":"URL encoding ensures that all browsers will correctly transmit text in URL strings.","pos":[0,83]},{"content":"Characters such as a question mark (?), ampersand (&amp;), slash mark (/), and spaces might be truncated or corrupted by some browsers.","pos":[84,215],"source":" Characters such as a question mark (?), ampersand (&), slash mark (/), and spaces might be truncated or corrupted by some browsers."},{"content":"As a result, these characters must be encoded in <ph id=\"ph1\">`&lt;a&gt;`</ph> tags or in query strings where the strings can be re-sent by a browser in a request string.","pos":[216,362],"source":" As a result, these characters must be encoded in `<a>` tags or in query strings where the strings can be re-sent by a browser in a request string."},{"content":"This method is a convenient way to access the &lt;xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=fullName&gt; method at run time from an ASP.NET application.","pos":[369,530],"source":"       This method is a convenient way to access the <xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=fullName> method at run time from an ASP.NET application."},{"content":"Internally, this method uses &lt;xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=fullName&gt; to encode strings.","pos":[531,646],"source":" Internally, this method uses <xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=fullName> to encode strings."},{"content":"In the code-behind file for an ASP.NET web page, access an instance of the &lt;xref:System.Web.HttpServerUtility&gt; class through the <ph id=\"ph1\">`Server`</ph> property.","pos":[653,800],"source":"       In the code-behind file for an ASP.NET web page, access an instance of the <xref:System.Web.HttpServerUtility> class through the `Server` property."},{"content":"In a class that is not in a code-behind file, use <ph id=\"ph1\">`HttpContext.Current.Server`</ph> to access an instance of the &lt;xref:System.Web.HttpServerUtility&gt; class.","pos":[801,951],"source":" In a class that is not in a code-behind file, use `HttpContext.Current.Server` to access an instance of the <xref:System.Web.HttpServerUtility> class."},{"content":"Outside of a web application, use the &lt;xref:System.Net.WebUtility&gt; class to encode or decode values.","pos":[958,1058],"source":"       Outside of a web application, use the <xref:System.Net.WebUtility> class to encode or decode values."}]},{"pos":[73909,73932],"content":"The text to URL-encode.","needQuote":true,"needEscape":true,"nodes":[{"content":"The text to URL-encode.","pos":[0,23]}]},{"pos":[73990,74011],"content":"The URL-encoded text.","needQuote":true,"needEscape":true,"nodes":[{"content":"The URL-encoded text.","pos":[0,21]}]},{"pos":[74546,74645],"content":"URL-encodes a string and sends the resulting output to a <xref:System.IO.TextWriter> output stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"URL-encodes a string and sends the resulting output to a &lt;xref:System.IO.TextWriter&gt; output stream.","pos":[0,99],"source":"URL-encodes a string and sends the resulting output to a <xref:System.IO.TextWriter> output stream."}]},{"pos":[74658,75489],"content":"URL encoding ensures that all browsers will correctly transmit text in URL strings. Characters such as a question mark (?), ampersand (&), slash mark (/), and spaces might be truncated or corrupted by some browsers. As a result, these characters must be encoded in `<a>` tags or in query strings where the strings can be re-sent by a browser in a request string.       <xref:System.Web.HttpServerUtility.UrlEncode%2A> is a convenient way to access the <xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=fullName> method at run time from an ASP.NET application. Internally, <xref:System.Web.HttpServerUtility.UrlEncode%2A> uses <xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=fullName> to encode strings.       To encode or decode values outside of a web application, use the <xref:System.Net.WebUtility> class.","needQuote":false,"needEscape":true,"nodes":[{"content":"URL encoding ensures that all browsers will correctly transmit text in URL strings.","pos":[0,83]},{"content":"Characters such as a question mark (?), ampersand (&amp;), slash mark (/), and spaces might be truncated or corrupted by some browsers.","pos":[84,215],"source":" Characters such as a question mark (?), ampersand (&), slash mark (/), and spaces might be truncated or corrupted by some browsers."},{"content":"As a result, these characters must be encoded in <ph id=\"ph1\">`&lt;a&gt;`</ph> tags or in query strings where the strings can be re-sent by a browser in a request string.","pos":[216,362],"source":" As a result, these characters must be encoded in `<a>` tags or in query strings where the strings can be re-sent by a browser in a request string."},{"content":"&lt;xref:System.Web.HttpServerUtility.UrlEncode%2A&gt; is a convenient way to access the &lt;xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=fullName&gt; method at run time from an ASP.NET application.","pos":[369,567],"source":"       <xref:System.Web.HttpServerUtility.UrlEncode%2A> is a convenient way to access the <xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=fullName> method at run time from an ASP.NET application."},{"content":"Internally, &lt;xref:System.Web.HttpServerUtility.UrlEncode%2A&gt; uses &lt;xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=fullName&gt; to encode strings.","pos":[568,720],"source":" Internally, <xref:System.Web.HttpServerUtility.UrlEncode%2A> uses <xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=fullName> to encode strings."},{"content":"To encode or decode values outside of a web application, use the &lt;xref:System.Net.WebUtility&gt; class.","pos":[727,827],"source":"       To encode or decode values outside of a web application, use the <xref:System.Net.WebUtility> class."}]},{"pos":[76170,76196],"content":"The text string to encode.","needQuote":true,"needEscape":true,"nodes":[{"content":"The text string to encode.","pos":[0,26]}]},{"pos":[76266,76345],"content":"The <xref:System.IO.TextWriter> output stream that contains the encoded string.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.IO.TextWriter&gt; output stream that contains the encoded string.","pos":[0,79],"source":"The <xref:System.IO.TextWriter> output stream that contains the encoded string."}]},{"pos":[76825,76929],"content":"Do not use; intended only for browser compatibility. Use <xref:System.Web.HttpServerUtility.UrlEncode*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Do not use; intended only for browser compatibility. Use <xref:System.Web.HttpServerUtility.UrlEncode*>.","pos":[0,104],"nodes":[{"content":"Do not use; intended only for browser compatibility.","pos":[0,52]},{"content":"Use &lt;xref:System.Web.HttpServerUtility.UrlEncode*&gt;.","pos":[53,104],"source":" Use <xref:System.Web.HttpServerUtility.UrlEncode*>."}]}]},{"pos":[77066,77089],"content":"The text to URL-encode.","needQuote":true,"needEscape":true,"nodes":[{"content":"The text to URL-encode.","pos":[0,23]}]},{"pos":[77147,77168],"content":"The URL encoded text.","needQuote":true,"needEscape":true,"nodes":[{"content":"The URL encoded text.","pos":[0,21]}]},{"pos":[77657,77734],"content":"Decodes a URL string token to its equivalent byte array using base 64 digits.","needQuote":true,"needEscape":true,"nodes":[{"content":"Decodes a URL string token to its equivalent byte array using base 64 digits.","pos":[0,77]}]},{"pos":[77747,78163],"content":"The UrlTokenDecode method converts a URL string token, which encodes binary data as base 64 digits, to its equivalent byte array representation. Use the UrlTokenDecode method to decode tokens transmitted on the URL and encoded by using the <xref:System.Web.HttpServerUtility.UrlTokenEncode%2A>.       The UrlTokenDecode method will return an empty byte array if the `input` parameter has a length of less than one.","needQuote":false,"needEscape":true,"nodes":[{"content":"The UrlTokenDecode method converts a URL string token, which encodes binary data as base 64 digits, to its equivalent byte array representation.","pos":[0,144]},{"content":"Use the UrlTokenDecode method to decode tokens transmitted on the URL and encoded by using the &lt;xref:System.Web.HttpServerUtility.UrlTokenEncode%2A&gt;.","pos":[145,294],"source":" Use the UrlTokenDecode method to decode tokens transmitted on the URL and encoded by using the <xref:System.Web.HttpServerUtility.UrlTokenEncode%2A>."},{"content":"The UrlTokenDecode method will return an empty byte array if the <ph id=\"ph1\">`input`</ph> parameter has a length of less than one.","pos":[301,414],"source":"       The UrlTokenDecode method will return an empty byte array if the `input` parameter has a length of less than one."}]},{"pos":[78317,78348],"content":"The URL string token to decode.","needQuote":true,"needEscape":true,"nodes":[{"content":"The URL string token to decode.","pos":[0,31]}]},{"pos":[78406,78461],"content":"The byte array containing the decoded URL string token.","needQuote":true,"needEscape":true,"nodes":[{"content":"The byte array containing the decoded URL string token.","pos":[0,55]}]},{"pos":[78635,78745],"content":"The value of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">input</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The value of the <code>input</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[79161,79290],"content":"Encodes a byte array into its equivalent string representation using base 64 digits, which is usable for transmission on the URL.","needQuote":true,"needEscape":true,"nodes":[{"content":"Encodes a byte array into its equivalent string representation using base 64 digits, which is usable for transmission on the URL.","pos":[0,129]}]},{"pos":[79303,79589],"content":"The UrlTokenEncode method converts a byte array into an equivalent string representation encoded with base 64 digits. The resulting string token can be transmitted on the URL.       The UrlTokenEncode will return an empty string if the `input` parameter has a length of less than one.","needQuote":false,"needEscape":true,"nodes":[{"content":"The UrlTokenEncode method converts a byte array into an equivalent string representation encoded with base 64 digits.","pos":[0,117]},{"content":"The resulting string token can be transmitted on the URL.","pos":[118,175]},{"content":"The UrlTokenEncode will return an empty string if the <ph id=\"ph1\">`input`</ph> parameter has a length of less than one.","pos":[182,284],"source":"       The UrlTokenEncode will return an empty string if the `input` parameter has a length of less than one."}]},{"pos":[79743,79768],"content":"The byte array to encode.","needQuote":true,"needEscape":true,"nodes":[{"content":"The byte array to encode.","pos":[0,25]}]},{"pos":[79826,79946],"content":"The string containing the encoded token if the byte array <bpt id=\"p1\">*</bpt>length<ept id=\"p1\">*</ept> is greater than one; otherwise, an empty string (\"\").","needQuote":true,"needEscape":true,"source":"The string containing the encoded token if the byte array *length* is greater than one; otherwise, an empty string (\"\")."},{"pos":[80120,80230],"content":"The value of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">input</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The value of the <code>input</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.HttpServerUtility\n  id: HttpServerUtility\n  children:\n  - System.Web.HttpServerUtility.ClearError\n  - System.Web.HttpServerUtility.CreateObject(System.String)\n  - System.Web.HttpServerUtility.CreateObject(System.Type)\n  - System.Web.HttpServerUtility.CreateObjectFromClsid(System.String)\n  - System.Web.HttpServerUtility.Execute(System.String)\n  - System.Web.HttpServerUtility.Execute(System.String,System.Boolean)\n  - System.Web.HttpServerUtility.Execute(System.String,System.IO.TextWriter)\n  - System.Web.HttpServerUtility.Execute(System.String,System.IO.TextWriter,System.Boolean)\n  - System.Web.HttpServerUtility.Execute(System.Web.IHttpHandler,System.IO.TextWriter,System.Boolean)\n  - System.Web.HttpServerUtility.GetLastError\n  - System.Web.HttpServerUtility.HtmlDecode(System.String)\n  - System.Web.HttpServerUtility.HtmlDecode(System.String,System.IO.TextWriter)\n  - System.Web.HttpServerUtility.HtmlEncode(System.String)\n  - System.Web.HttpServerUtility.HtmlEncode(System.String,System.IO.TextWriter)\n  - System.Web.HttpServerUtility.MachineName\n  - System.Web.HttpServerUtility.MapPath(System.String)\n  - System.Web.HttpServerUtility.ScriptTimeout\n  - System.Web.HttpServerUtility.Transfer(System.String)\n  - System.Web.HttpServerUtility.Transfer(System.String,System.Boolean)\n  - System.Web.HttpServerUtility.Transfer(System.Web.IHttpHandler,System.Boolean)\n  - System.Web.HttpServerUtility.TransferRequest(System.String)\n  - System.Web.HttpServerUtility.TransferRequest(System.String,System.Boolean)\n  - System.Web.HttpServerUtility.TransferRequest(System.String,System.Boolean,System.String,System.Collections.Specialized.NameValueCollection)\n  - System.Web.HttpServerUtility.TransferRequest(System.String,System.Boolean,System.String,System.Collections.Specialized.NameValueCollection,System.Boolean)\n  - System.Web.HttpServerUtility.UrlDecode(System.String)\n  - System.Web.HttpServerUtility.UrlDecode(System.String,System.IO.TextWriter)\n  - System.Web.HttpServerUtility.UrlEncode(System.String)\n  - System.Web.HttpServerUtility.UrlEncode(System.String,System.IO.TextWriter)\n  - System.Web.HttpServerUtility.UrlPathEncode(System.String)\n  - System.Web.HttpServerUtility.UrlTokenDecode(System.String)\n  - System.Web.HttpServerUtility.UrlTokenEncode(System.Byte[])\n  langs:\n  - csharp\n  name: HttpServerUtility\n  nameWithType: HttpServerUtility\n  fullName: System.Web.HttpServerUtility\n  type: Class\n  summary: Provides helper methods for processing Web requests.\n  remarks: The methods and properties of the HttpServerUtility class are exposed through the intrinsic <xref:System.Web.HttpContext.Server%2A> object provided by ASP.NET.\n  example:\n  - \"A Visual Studio Web site project with source code is available to accompany this topic: [Download](http://go.microsoft.com/fwlink/?LinkId=192870).  \\n  \\n The following example demonstrates how to use the <xref:System.Web.HttpServerUtility.HtmlEncode%2A> method and the <xref:System.Web.HttpServerUtility.UrlEncode%2A> method of the HttpServerUtility class. The <xref:System.Web.HttpServerUtility.HtmlEncode%2A> method helps ensure that any user-supplied string input will be rendered as static text in browsers instead of executable script or HTML elements. The <xref:System.Web.HttpServerUtility.UrlEncode%2A> method encodes URLs so that they are correctly transmitted in the HTTP stream.  \\n  \\n [!code-cs[System.Web.HttpServerUtility1#1](~/add/codesnippet/csharp/t-system.web.httpserveru_1.aspx)]\\n [!code-vb[System.Web.HttpServerUtility1#1](~/add/codesnippet/visualbasic/t-system.web.httpserveru_1.aspx)]\"\n  syntax:\n    content: public sealed class HttpServerUtility\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Web.HttpServerUtility.ClearError\n  id: ClearError\n  parent: System.Web.HttpServerUtility\n  langs:\n  - csharp\n  name: ClearError()\n  nameWithType: HttpServerUtility.ClearError()\n  fullName: System.Web.HttpServerUtility.ClearError()\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Clears the previous exception.\n  remarks: ''\n  example:\n  - \"The following example clears the last exception that was thrown.  \\n  \\n [!code-cs[Classic HttpServerUtility.ClearError Example#1](~/add/codesnippet/csharp/m-system.web.httpserveru_6_1.cs)]\\n [!code-vb[Classic HttpServerUtility.ClearError Example#1](~/add/codesnippet/visualbasic/m-system.web.httpserveru_6_1.vb)]\"\n  syntax:\n    content: public void ClearError ();\n    parameters: []\n  overload: System.Web.HttpServerUtility.ClearError*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.HttpServerUtility.CreateObject(System.String)\n  id: CreateObject(System.String)\n  parent: System.Web.HttpServerUtility\n  langs:\n  - csharp\n  name: CreateObject(String)\n  nameWithType: HttpServerUtility.CreateObject(String)\n  fullName: System.Web.HttpServerUtility.CreateObject(String)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Creates a server instance of a COM object identified by the object's programmatic identifier (ProgID).\n  remarks: ''\n  example:\n  - \"The following example creates an object by using the object's ProgID.  \\n  \\n [!code-vb[Classic HttpServerUtility.CreateObject Example#1](~/add/codesnippet/visualbasic/m-system.web.httpserveru_4_1.vb)]\\n [!code-cs[Classic HttpServerUtility.CreateObject Example#1](~/add/codesnippet/csharp/m-system.web.httpserveru_4_1.cs)]\"\n  syntax:\n    content: public object CreateObject (string progID);\n    parameters:\n    - id: progID\n      type: System.String\n      description: The class or type of object to create an instance of.\n    return:\n      type: System.Object\n      description: The new object.\n  overload: System.Web.HttpServerUtility.CreateObject*\n  exceptions:\n  - type: System.Web.HttpException\n    commentId: T:System.Web.HttpException\n    description: An instance of the object could not be created.\n  platform:\n  - net462\n- uid: System.Web.HttpServerUtility.CreateObject(System.Type)\n  id: CreateObject(System.Type)\n  parent: System.Web.HttpServerUtility\n  langs:\n  - csharp\n  name: CreateObject(Type)\n  nameWithType: HttpServerUtility.CreateObject(Type)\n  fullName: System.Web.HttpServerUtility.CreateObject(Type)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Creates a server instance of a COM object identified by the object's type.\n  syntax:\n    content: public object CreateObject (Type type);\n    parameters:\n    - id: type\n      type: System.Type\n      description: A <xref:System.Type> representing the object to create.\n    return:\n      type: System.Object\n      description: The new object.\n  overload: System.Web.HttpServerUtility.CreateObject*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.HttpServerUtility.CreateObjectFromClsid(System.String)\n  id: CreateObjectFromClsid(System.String)\n  parent: System.Web.HttpServerUtility\n  langs:\n  - csharp\n  name: CreateObjectFromClsid(String)\n  nameWithType: HttpServerUtility.CreateObjectFromClsid(String)\n  fullName: System.Web.HttpServerUtility.CreateObjectFromClsid(String)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Creates a server instance of a COM object identified by the object's class identifier (CLSID).\n  remarks: ''\n  example:\n  - \"The following example demonstrates how to use the CreateObjectFromClsid method to create a server instance of a COM object.  \\n  \\n [!code-cs[Classic HttpServerUtility.CreateObjectFromClsid Example#1](~/add/codesnippet/csharp/m-system.web.httpserveru_2_1.cs)]\\n [!code-vb[Classic HttpServerUtility.CreateObjectFromClsid Example#1](~/add/codesnippet/visualbasic/m-system.web.httpserveru_2_1.vb)]\"\n  syntax:\n    content: public object CreateObjectFromClsid (string clsid);\n    parameters:\n    - id: clsid\n      type: System.String\n      description: The class identifier of the object to create an instance of.\n    return:\n      type: System.Object\n      description: The new object.\n  overload: System.Web.HttpServerUtility.CreateObjectFromClsid*\n  exceptions:\n  - type: System.Web.HttpException\n    commentId: T:System.Web.HttpException\n    description: An instance of the object could not be created.\n  platform:\n  - net462\n- uid: System.Web.HttpServerUtility.Execute(System.String)\n  id: Execute(System.String)\n  parent: System.Web.HttpServerUtility\n  langs:\n  - csharp\n  name: Execute(String)\n  nameWithType: HttpServerUtility.Execute(String)\n  fullName: System.Web.HttpServerUtility.Execute(String)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Executes the handler for the specified virtual path in the context of the current request.\n  remarks: \"The Execute method continues execution of the original page after execution of the new page is completed. The <xref:System.Web.HttpServerUtility.Transfer%2A> method unconditionally transfers execution to another handler.  \\n  \\n ASP.NET does not verify that the current user is authorized to view the resource delivered by the Execute method. Although the ASP.NET authorization and authentication logic runs before the original resource handler is called, ASP.NET directly calls the handler indicated by the Execute method and does not rerun authentication and authorization logic for the new resource. If your application's security policy requires clients to have appropriate authorization to access the resource, the application should force reauthorization or provide a custom access-control mechanism.  \\n  \\n You can force reauthorization by using the <xref:System.Web.HttpResponse.Redirect%2A> method instead of the Execute method. <xref:System.Web.HttpResponse.Redirect%2A> performs a client-side redirect in which the browser requests the new resource. Because this redirect is a new request entering the system, it is subjected to all the authentication and authorization logic of both Internet Information Services (IIS) and ASP.NET security policy.  \\n  \\n You can verify that the user has permission to view the resource by incorporating a custom authorization method that uses the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> method before the application calls the Execute method.\"\n  example:\n  - \"The following example displays the .aspx page \\\"Updateinfo.aspx\\\" in the current directory. Program execution returns to the starting page after the Updateinfo.aspx page is displayed.  \\n  \\n [!code-vb[Classic HttpServerUtility.Execute Example#1](~/add/codesnippet/visualbasic/m-system.web.httpserveru_15_1.vb)]\\n [!code-cs[Classic HttpServerUtility.Execute Example#1](~/add/codesnippet/csharp/m-system.web.httpserveru_15_1.cs)]\"\n  syntax:\n    content: public void Execute (string path);\n    parameters:\n    - id: path\n      type: System.String\n      description: The URL path to execute.\n  overload: System.Web.HttpServerUtility.Execute*\n  exceptions:\n  - type: System.Web.HttpException\n    commentId: T:System.Web.HttpException\n    description: \"The current <xref href=\\\"System.Web.HttpContext\\\"></xref> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n \\\\- or -  \\n  \\n An error occurred while executing the handler specified by <code>path</code>.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>path</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n \\\\- or -  \\n  \\n <code>path</code> is not a virtual path.\"\n  platform:\n  - net462\n- uid: System.Web.HttpServerUtility.Execute(System.String,System.Boolean)\n  id: Execute(System.String,System.Boolean)\n  parent: System.Web.HttpServerUtility\n  langs:\n  - csharp\n  name: Execute(String,Boolean)\n  nameWithType: HttpServerUtility.Execute(String,Boolean)\n  fullName: System.Web.HttpServerUtility.Execute(String,Boolean)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Executes the handler for the specified virtual path in the context of the current request and specifies whether to clear the <xref:System.Web.HttpRequest.QueryString*> and <xref:System.Web.HttpRequest.Form*> collections.\n  remarks: ''\n  example:\n  - \"The following example shows how to execute the .aspx page `Updateinfo.aspx` in the current request and preserve the <xref:System.Web.HttpRequest.QueryString%2A> and <xref:System.Web.HttpRequest.Form%2A> collections. Program execution returns to the starting page after `Updateinfo.aspx` is displayed.  \\n  \\n [!code-vb[HttpServerUtility.Execute#1](~/add/codesnippet/visualbasic/m-system.web.httpserveru_16_1.aspx)]\\n [!code-cs[HttpServerUtility.Execute#1](~/add/codesnippet/csharp/m-system.web.httpserveru_16_1.aspx)]\"\n  syntax:\n    content: public void Execute (string path, bool preserveForm);\n    parameters:\n    - id: path\n      type: System.String\n      description: The URL path to execute.\n    - id: preserveForm\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to preserve the <xref:System.Web.HttpRequest.QueryString*> and <xref:System.Web.HttpRequest.Form*> collections; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to clear the <xref:System.Web.HttpRequest.QueryString*> and <xref:System.Web.HttpRequest.Form*> collections.\n  overload: System.Web.HttpServerUtility.Execute*\n  exceptions:\n  - type: System.Web.HttpException\n    commentId: T:System.Web.HttpException\n    description: \"The current <xref href=\\\"System.Web.HttpContext\\\"></xref> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n \\\\- or -  \\n  \\n An error occurred while executing the handler specified by <code>path</code>.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>path</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n \\\\- or -  \\n  \\n <code>path</code> is not a virtual path.\"\n  platform:\n  - net462\n- uid: System.Web.HttpServerUtility.Execute(System.String,System.IO.TextWriter)\n  id: Execute(System.String,System.IO.TextWriter)\n  parent: System.Web.HttpServerUtility\n  langs:\n  - csharp\n  name: Execute(String,TextWriter)\n  nameWithType: HttpServerUtility.Execute(String,TextWriter)\n  fullName: System.Web.HttpServerUtility.Execute(String,TextWriter)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Executes the handler for the specified virtual path in the context of the current request. A <xref:System.IO.TextWriter> captures output from the executed handler.\n  remarks: \"The Execute method continues execution of the original request after execution of the virtual path specified is completed. The <xref:System.Web.HttpServerUtility.Transfer%2A> method unconditionally transfers execution to another handler.  \\n  \\n ASP.NET does not verify that the current user is authorized to view the resource delivered by the Execute method. Although the ASP.NET authorization and authentication logic runs before the original resource handler is called, ASP.NET directly calls the handler indicated by the Execute method and does not rerun authentication and authorization logic for the new resource. If your application's security policy requires clients to have appropriate authorization to access the resource, the application should force reauthorization or provide a custom access-control mechanism.  \\n  \\n You can force reauthorization by using the <xref:System.Web.HttpResponse.Redirect%2A> method instead of the Execute method. <xref:System.Web.HttpResponse.Redirect%2A> performs a client-side redirect in which the browser requests the new resource. Because this redirect is a new request entering the system, it is subjected to all the authentication and authorization logic of both Internet Information Services (IIS) and ASP.NET security policy.  \\n  \\n You can verify that the user has permission to view the resource by incorporating a custom authorization method that uses the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> method before the application calls the Execute method.\"\n  example:\n  - \"The following example executes the `Login.aspx` page on the server in the current directory and receives the output from the page through the <xref:System.IO.StringWriter> object `writer`. It writes the HTML stream received from `writer` to the HTTP output stream.  \\n  \\n [!code-cs[Classic HttpServerUtility.Execute1 Example#1](~/add/codesnippet/csharp/m-system.web.httpserveru_12_1.cs)]\\n [!code-vb[Classic HttpServerUtility.Execute1 Example#1](~/add/codesnippet/visualbasic/m-system.web.httpserveru_12_1.vb)]\"\n  syntax:\n    content: public void Execute (string path, System.IO.TextWriter writer);\n    parameters:\n    - id: path\n      type: System.String\n      description: The URL path to execute.\n    - id: writer\n      type: System.IO.TextWriter\n      description: The <xref:System.IO.TextWriter> to capture the output.\n  overload: System.Web.HttpServerUtility.Execute*\n  exceptions:\n  - type: System.Web.HttpException\n    commentId: T:System.Web.HttpException\n    description: \"The current <xref href=\\\"System.Web.HttpContext\\\"></xref> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n \\\\- or -  \\n  \\n An error occurred while executing the handler specified by <code>path</code>.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>path</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n \\\\- or -  \\n  \\n <code>path</code> is not a virtual path.\"\n  platform:\n  - net462\n- uid: System.Web.HttpServerUtility.Execute(System.String,System.IO.TextWriter,System.Boolean)\n  id: Execute(System.String,System.IO.TextWriter,System.Boolean)\n  parent: System.Web.HttpServerUtility\n  langs:\n  - csharp\n  name: Execute(String,TextWriter,Boolean)\n  nameWithType: HttpServerUtility.Execute(String,TextWriter,Boolean)\n  fullName: System.Web.HttpServerUtility.Execute(String,TextWriter,Boolean)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Executes the handler for the specified virtual path in the context of the current request. A <xref:System.IO.TextWriter> captures output from the page and a Boolean parameter specifies whether to clear the <xref:System.Web.HttpRequest.QueryString*> and <xref:System.Web.HttpRequest.Form*> collections.\n  remarks: \"The <xref:System.Web.HttpServerUtility.Execute%2A> method continues execution of the original request after execution of the specified virtual path is completed. The <xref:System.Web.HttpServerUtility.Transfer%2A> method unconditionally transfers execution to another handler.  \\n  \\n ASP.NET does not verify that the current user is authorized to view the resource delivered by the Execute method. Although the ASP.NET authorization and authentication logic runs before the original resource handler is called, ASP.NET directly calls the handler indicated by the Execute method and does not rerun authentication and authorization logic for the new resource. If your application's security policy requires clients to have appropriate authorization to access the resource, the application should force reauthorization or provide a custom access-control mechanism.  \\n  \\n You can force reauthorization by using the <xref:System.Web.HttpResponse.Redirect%2A> method instead of the Execute method. <xref:System.Web.HttpResponse.Redirect%2A> performs a client-side redirect in which the browser requests the new resource. Because this redirect is a new request entering the system, it is subjected to all the authentication and authorization logic of both Internet Information Services (IIS) and ASP.NET security policy.  \\n  \\n You can verify that the user has permission to view the resource by incorporating a custom authorization method that uses the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> method before the application calls the Execute method.\"\n  example:\n  - \"The following example executes the `Login.aspx` page on the server in the current directory and receives the output from the page through the <xref:System.IO.StringWriter> object `writer`. It writes the HTML stream received from `writer` to the HTTP output stream. The contents of the <xref:System.Web.HttpRequest.Form%2A> and <xref:System.Web.HttpRequest.QueryString%2A> collections are preserved.  \\n  \\n [!code-cs[HttpServerUtility.Execute02#1](~/add/codesnippet/csharp/0d13d28c-0070-4c47-b943-_1.aspx)]\\n [!code-vb[HttpServerUtility.Execute02#1](~/add/codesnippet/visualbasic/0d13d28c-0070-4c47-b943-_1.aspx)]\"\n  syntax:\n    content: public void Execute (string path, System.IO.TextWriter writer, bool preserveForm);\n    parameters:\n    - id: path\n      type: System.String\n      description: The URL path to execute.\n    - id: writer\n      type: System.IO.TextWriter\n      description: The <xref:System.IO.TextWriter> to capture the output.\n    - id: preserveForm\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to preserve the <xref:System.Web.HttpRequest.QueryString*> and <xref:System.Web.HttpRequest.Form*> collections; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to clear the <xref:System.Web.HttpRequest.QueryString*> and <xref:System.Web.HttpRequest.Form*> collections.\n  overload: System.Web.HttpServerUtility.Execute*\n  exceptions:\n  - type: System.Web.HttpException\n    commentId: T:System.Web.HttpException\n    description: \"The current <xref href=\\\"System.Web.HttpContext\\\"></xref> is a null reference (<xref uid=\\\"langword_csharp_Nothing\\\" name=\\\"Nothing\\\" href=\\\"\\\"></xref> in Visual Basic).  \\n  \\n \\\\- or -  \\n  \\n <code>path</code> ends with a period (.).  \\n  \\n \\\\- or -  \\n  \\n An error occurred while executing the handler specified by <code>path</code>.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>path</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>path</code> is not a virtual path.\n  platform:\n  - net462\n- uid: System.Web.HttpServerUtility.Execute(System.Web.IHttpHandler,System.IO.TextWriter,System.Boolean)\n  id: Execute(System.Web.IHttpHandler,System.IO.TextWriter,System.Boolean)\n  parent: System.Web.HttpServerUtility\n  langs:\n  - csharp\n  name: Execute(IHttpHandler,TextWriter,Boolean)\n  nameWithType: HttpServerUtility.Execute(IHttpHandler,TextWriter,Boolean)\n  fullName: System.Web.HttpServerUtility.Execute(IHttpHandler,TextWriter,Boolean)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Executes the handler for the specified virtual path in the context of the current request. A <xref:System.IO.TextWriter> captures output from the executed handler and a Boolean parameter specifies whether to clear the <xref:System.Web.HttpRequest.QueryString*> and <xref:System.Web.HttpRequest.Form*> collections.\n  remarks: \"You can write custom HTTP handlers to process specific, predefined types of HTTP requests in any language that is compliant with the Common Language Specification (CLS). Executable code that is defined in the HTTP handler classes instead of  conventional ASP (also known as classic ASP) pages or ASP.NET pages responds to these specific requests. HTTP handlers allow for interacting with the low-level request and response services of a Web server that is running Internet Information Services (IIS), and they provide functionality that is similar to ISAPI extensions but with a simpler programming model.  \\n  \\n ASP.NET does not verify that the current user is authorized to view the resource that is delivered by the Execute method. Although the ASP.NET authorization and authentication logic runs before the original resource handler is called, ASP.NET directly calls the handler that is indicated by the Execute method and does not rerun authentication and authorization logic for the new resource. If the security policy for your application requires clients to have appropriate authorization to gain access to the resource, the application should force reauthorization or provide a custom access-control mechanism.  \\n  \\n You can force reauthorization by using the <xref:System.Web.HttpResponse.Redirect%2A> method instead of the Execute method. The <xref:System.Web.HttpResponse.Redirect%2A> performs a client-side redirect in which the browser requests the new resource. Because this redirect is a new request entering the system, it is subjected to all the authentication and authorization logic of both the IIS and ASP.NET security policy.  \\n  \\n You can verify that the user has permission to view the resource by incorporating a custom authorization method that uses the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> method before the application calls the Execute method.\"\n  syntax:\n    content: public void Execute (System.Web.IHttpHandler handler, System.IO.TextWriter writer, bool preserveForm);\n    parameters:\n    - id: handler\n      type: System.Web.IHttpHandler\n      description: The HTTP handler that implements the <xref href=\"System.Web.IHttpHandler\"></xref> to transfer the current request to.\n    - id: writer\n      type: System.IO.TextWriter\n      description: The <xref:System.IO.TextWriter> to capture the output.\n    - id: preserveForm\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to preserve the <xref:System.Web.HttpRequest.QueryString*> and <xref:System.Web.HttpRequest.Form*> collections; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to clear the <xref:System.Web.HttpRequest.QueryString*> and <xref:System.Web.HttpRequest.Form*> collections.\n  overload: System.Web.HttpServerUtility.Execute*\n  exceptions:\n  - type: System.Web.HttpException\n    commentId: T:System.Web.HttpException\n    description: An error occurred while executing the handler specified by <code>handler</code>.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>handler</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Web.HttpServerUtility.GetLastError\n  id: GetLastError\n  parent: System.Web.HttpServerUtility\n  langs:\n  - csharp\n  name: GetLastError()\n  nameWithType: HttpServerUtility.GetLastError()\n  fullName: System.Web.HttpServerUtility.GetLastError()\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Returns the previous exception.\n  remarks: ''\n  example:\n  - \"The following example prints a description of the application's last error to the HTTP output stream. It prints \\\"No Errors\\\" if no errors have been encountered.  \\n  \\n [!code-vb[Classic HttpServerUtility.GetLastError Example#1](~/add/codesnippet/visualbasic/m-system.web.httpserveru_8_1.vb)]\\n [!code-cs[Classic HttpServerUtility.GetLastError Example#1](~/add/codesnippet/csharp/m-system.web.httpserveru_8_1.cs)]\"\n  syntax:\n    content: public Exception GetLastError ();\n    parameters: []\n    return:\n      type: System.Exception\n      description: The previous exception that was thrown.\n  overload: System.Web.HttpServerUtility.GetLastError*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.HttpServerUtility.HtmlDecode(System.String)\n  id: HtmlDecode(System.String)\n  parent: System.Web.HttpServerUtility\n  langs:\n  - csharp\n  name: HtmlDecode(String)\n  nameWithType: HttpServerUtility.HtmlDecode(String)\n  fullName: System.Web.HttpServerUtility.HtmlDecode(String)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Decodes an HTML-encoded string and returns the decoded string.\n  remarks: \"HTML encoding makes sure that text is displayed correctly in the browser and not interpreted by the browser as HTML. For example, if a text string contains a less than sign (\\\\<) or greater than sign (>), the browser would interpret these characters as the opening or closing bracket of an HTML tag. When the characters are HTML encoded, they are converted to the strings `<` and `>`, which causes the browser to display the less than sign and greater than sign correctly. HtmlDecode decodes text that has been transmitted to the server.  \\n  \\n This method is a convenient way to access the <xref:System.Web.HttpUtility.HtmlDecode%2A?displayProperty=fullName> method at run time from an ASP.NET application. Internally, this method uses <xref:System.Web.HttpUtility.HtmlDecode%2A?displayProperty=fullName> to decode strings.  \\n  \\n In the code-behind file for an ASP.NET web page, access an instance of the <xref:System.Web.HttpServerUtility> class through the `Server` property. In a class that is not in a code-behind file, use `HttpContext.Current.Server` to access an instance of the <xref:System.Web.HttpServerUtility> class.  \\n  \\n Outside of a web application, use the <xref:System.Net.WebUtility> class to encode or decode values.\"\n  example:\n  - \"The following example contains the function `LoadDecodedFile`, which decodes the data from a file and copies it into one string.  \\n  \\n [!code-cs[Classic HttpServerUtility.HtmlDecode Example#1](~/add/codesnippet/csharp/m-system.web.httpserveru_14_1.aspx)]\\n [!code-vb[Classic HttpServerUtility.HtmlDecode Example#1](~/add/codesnippet/visualbasic/m-system.web.httpserveru_14_1.aspx)]\"\n  syntax:\n    content: public string HtmlDecode (string s);\n    parameters:\n    - id: s\n      type: System.String\n      description: The HTML string to decode.\n    return:\n      type: System.String\n      description: The decoded text.\n  overload: System.Web.HttpServerUtility.HtmlDecode*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.HttpServerUtility.HtmlDecode(System.String,System.IO.TextWriter)\n  id: HtmlDecode(System.String,System.IO.TextWriter)\n  parent: System.Web.HttpServerUtility\n  langs:\n  - csharp\n  name: HtmlDecode(String,TextWriter)\n  nameWithType: HttpServerUtility.HtmlDecode(String,TextWriter)\n  fullName: System.Web.HttpServerUtility.HtmlDecode(String,TextWriter)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Decodes an HTML-encoded string and sends the resulting output to a <xref:System.IO.TextWriter> output stream.\n  remarks: \"HTML encoding makes sure that text is displayed correctly in the browser and not interpreted by the browser as HTML. For example, if a text string contains a less than sign (\\\\<) or greater than sign (>), the browser would interpret these characters as the opening or closing bracket of an HTML tag. When the characters are HTML encoded, they are converted to the strings `<` and `>`, which causes the browser to display the less than sign and greater than sign correctly.  \\n  \\n <xref:System.Web.HttpServerUtility.HtmlDecode%2A> decodes text that has been transmitted to the server.  \\n  \\n <xref:System.Web.HttpServerUtility.HtmlDecode%2A> is a convenient way to access the <xref:System.Web.HttpUtility.HtmlDecode%2A?displayProperty=fullName> method at run time from an ASP.NET application. Internally, <xref:System.Web.HttpServerUtility.HtmlDecode%2A> uses <xref:System.Web.HttpUtility.HtmlDecode%2A?displayProperty=fullName> to decode strings.  \\n  \\n To encode or decode values outside of a web application, use the <xref:System.Net.WebUtility> class.\"\n  example:\n  - \"The following example decodes a string that has been HTML-encoded for transmission over HTTP. It decodes the supplied string named `EncodedString` which contains the text \\\"This is a &lt;Test String&gt;.\\\", and copies it into the string named `DecodedString` as \\\"This is a \\\\<Test String>.\\\".  \\n  \\n [!code-vb[Classic HttpServerUtility.HtmlDecode1 Example#1](~/add/codesnippet/visualbasic/m-system.web.httpserveru_1_1.vb)]\\n [!code-cs[Classic HttpServerUtility.HtmlDecode1 Example#1](~/add/codesnippet/csharp/m-system.web.httpserveru_1_1.cs)]\"\n  syntax:\n    content: public void HtmlDecode (string s, System.IO.TextWriter output);\n    parameters:\n    - id: s\n      type: System.String\n      description: The HTML string to decode.\n    - id: output\n      type: System.IO.TextWriter\n      description: The <xref:System.IO.TextWriter> output stream that contains the decoded string.\n  overload: System.Web.HttpServerUtility.HtmlDecode*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.HttpServerUtility.HtmlEncode(System.String)\n  id: HtmlEncode(System.String)\n  parent: System.Web.HttpServerUtility\n  langs:\n  - csharp\n  name: HtmlEncode(String)\n  nameWithType: HttpServerUtility.HtmlEncode(String)\n  fullName: System.Web.HttpServerUtility.HtmlEncode(String)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: HTML-encodes a string and returns the encoded string.\n  remarks: \"HTML encoding makes sure that text is displayed correctly in the browser and not interpreted by the browser as HTML. For example, if a text string contains a less than sign (\\\\<) or greater than sign (>), the browser would interpret these characters as the opening or closing bracket of an HTML tag. When the characters are HTML encoded, they are converted to the strings `<` and `>`, which causes the browser to display the less than sign and greater than sign correctly.  \\n  \\n This method is a convenient way to access the <xref:System.Web.HttpUtility.HtmlEncode%2A?displayProperty=fullName> method at run time from an ASP.NET application. Internally, this method uses <xref:System.Web.HttpUtility.HtmlEncode%2A?displayProperty=fullName> to encode strings.  \\n  \\n In the code-behind file for an ASP.NET web page, access an instance of the <xref:System.Web.HttpServerUtility> class through the `Server` property. In a class that is not in a code-behind file, use `HttpContext.Current.Server` to access an instance of the <xref:System.Web.HttpServerUtility> class.  \\n  \\n Outside of a web application, use the <xref:System.Net.WebUtility> class to encode or decode values.\"\n  example:\n  - \"The following example shows how to HTML-encode a value that potentially codes unsafe code. The code resides in the code-behind file for a web page. The value to encode is hard-coded in this example only to simplify the example and show the type of value you might HTML-encode. Typically, you would HTML-encode a value that you received from the user or the request. `Result` refers to a `Literal` control.  \\n  \\n [!code-cs[System.Web.HttpServerUtility.HtmlEncode#1](~/add/codesnippet/csharp/m-system.web.httpserveru_10_1.cs)]\\n [!code-vb[System.Web.HttpServerUtility.HtmlEncode#1](~/add/codesnippet/visualbasic/m-system.web.httpserveru_10_1.vb)]  \\n  \\n The next example is similar to the previous example except it shows how to HTML-encode a value from within a class that is not in the code-behind file.  \\n  \\n [!code-cs[System.Web.HttpServerUtility.HtmlEncode#2](~/add/codesnippet/csharp/m-system.web.httpserveru_10_2.cs)]\\n [!code-vb[System.Web.HttpServerUtility.HtmlEncode#2](~/add/codesnippet/visualbasic/m-system.web.httpserveru_10_2.vb)]\"\n  syntax:\n    content: public string HtmlEncode (string s);\n    parameters:\n    - id: s\n      type: System.String\n      description: The text string to encode.\n    return:\n      type: System.String\n      description: The HTML-encoded text.\n  overload: System.Web.HttpServerUtility.HtmlEncode*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.HttpServerUtility.HtmlEncode(System.String,System.IO.TextWriter)\n  id: HtmlEncode(System.String,System.IO.TextWriter)\n  parent: System.Web.HttpServerUtility\n  langs:\n  - csharp\n  name: HtmlEncode(String,TextWriter)\n  nameWithType: HttpServerUtility.HtmlEncode(String,TextWriter)\n  fullName: System.Web.HttpServerUtility.HtmlEncode(String,TextWriter)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: HTML-encodes a string and sends the resulting output to a <xref:System.IO.TextWriter> output stream.\n  remarks: \"HTML encoding ensures that text will be correctly displayed in the browser, not interpreted by the browser as HTML. For example, if a text string contains a less than sign (\\\\<) or greater than sign (>), the browser would interpret these characters as an opening or closing bracket of an HTML tag. The HTML encoding of these two characters is `<` and `>`, respectively, which causes the browser to display the less than sign and greater than sign correctly.  \\n  \\n <xref:System.Web.HttpServerUtility.HtmlEncode%2A> is a convenient way to access the <xref:System.Web.HttpUtility.HtmlEncode%2A?displayProperty=fullName> method at run time from an ASP.NET application. Internally, <xref:System.Web.HttpServerUtility.HtmlEncode%2A> uses <xref:System.Web.HttpUtility.HtmlEncode%2A?displayProperty=fullName> to encode strings.  \\n  \\n To encode or decode values outside of a web application, use the <xref:System.Net.WebUtility> class.\"\n  example:\n  - \"The following example encodes a string for transmission by HTTP. It encodes the string named `TestString`, which contains the text \\\"This is a \\\\<Test String>.\\\", and copies it into the string named `EncodedString` as \\\"This is a &lt;Test String&gt;.\\\".  \\n  \\n [!code-vb[Classic HttpServerUtility.HtmlEncode1 Example#1](~/add/codesnippet/visualbasic/m-system.web.httpserveru_7_1.vb)]\\n [!code-cs[Classic HttpServerUtility.HtmlEncode1 Example#1](~/add/codesnippet/csharp/m-system.web.httpserveru_7_1.cs)]\"\n  syntax:\n    content: public void HtmlEncode (string s, System.IO.TextWriter output);\n    parameters:\n    - id: s\n      type: System.String\n      description: The string to encode.\n    - id: output\n      type: System.IO.TextWriter\n      description: The <xref:System.IO.TextWriter> output stream that contains the encoded string.\n  overload: System.Web.HttpServerUtility.HtmlEncode*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.HttpServerUtility.MachineName\n  id: MachineName\n  parent: System.Web.HttpServerUtility\n  langs:\n  - csharp\n  name: MachineName\n  nameWithType: HttpServerUtility.MachineName\n  fullName: System.Web.HttpServerUtility.MachineName\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Gets the server's computer name.\n  remarks: ''\n  example:\n  - \"The following example stores the server's computer name as a string variable.  \\n  \\n [!code-vb[Classic HttpServerUtility.MachineName Example#1](~/add/codesnippet/visualbasic/p-system.web.httpserveru_0_1.vb)]\\n [!code-cs[Classic HttpServerUtility.MachineName Example#1](~/add/codesnippet/csharp/p-system.web.httpserveru_0_1.cs)]\"\n  syntax:\n    content: public string MachineName { get; }\n    return:\n      type: System.String\n      description: The name of the local computer.\n  overload: System.Web.HttpServerUtility.MachineName*\n  exceptions:\n  - type: System.Web.HttpException\n    commentId: T:System.Web.HttpException\n    description: The computer name cannot be found.\n  platform:\n  - net462\n- uid: System.Web.HttpServerUtility.MapPath(System.String)\n  id: MapPath(System.String)\n  parent: System.Web.HttpServerUtility\n  langs:\n  - csharp\n  name: MapPath(String)\n  nameWithType: HttpServerUtility.MapPath(String)\n  fullName: System.Web.HttpServerUtility.MapPath(String)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Returns the physical file path that corresponds to the specified virtual path.\n  remarks: \"If `path` is `null`, the MapPath method returns the full physical path of the directory that contains the current request for the path. The relative path does not need to specify an existing file or folder for this method to return a value. However, you cannot specify a path outside of the Web application.  \\n  \\n> [!IMPORTANT]\\n>  The MapPath method potentially contains sensitive information about the hosting environment. The return value should not be displayed to users.  \\n  \\n A Web application that resides at `C:\\\\ExampleSites\\\\TestMapPath` would return the following results:  \\n  \\n|Request from|`path`|Returned value|  \\n|------------------|------------|--------------------|  \\n|RootLevelPage.aspx|`null`|C:\\\\ExampleSites\\\\TestMapPath|  \\n|RootLevelPage.aspx|\\\"/DownOneLevel/DownLevelPage.aspx\\\"|C:\\\\ExampleSites\\\\TestMapPath\\\\DownOneLevel\\\\DownLevelPage.aspx|  \\n|RootLevelPage.aspx|\\\"/NotRealFolder\\\"|C:\\\\ExampleSites\\\\TestMapPath\\\\NotRealFolder|  \\n|RootLevelPage.aspx|\\\"../OutsideApplication\\\"|<xref:System.Web.HttpException>|  \\n|/DownOneLevel/DownLevelPage.aspx|`null`|C:\\\\ExampleSites\\\\TestMapPath\\\\DownOneLevel|  \\n|/DownOneLevel/DownLevelPage.aspx|\\\"../RootLevelPage.aspx\\\"|C:\\\\ExampleSites\\\\TestMapPath\\\\RootLevelPage.aspx|\"\n  example:\n  - \"The following example shows how to retrieve the physical file of a relative virtual path. The code resides in the code-behind file for a web page and utilizes the default `Server` object.  \\n  \\n [!code-cs[System.Web.HttpServerUtility.MapPath#1](~/add/codesnippet/csharp/m-system.web.httpserveru_5_1.cs)]\\n [!code-vb[System.Web.HttpServerUtility.MapPath#1](~/add/codesnippet/visualbasic/m-system.web.httpserveru_5_1.vb)]  \\n  \\n The next example is similar to the previous example except it shows how to retrieve a physical path from within a class that is not in the code-behind file.  \\n  \\n [!code-cs[System.Web.HttpServerUtility.MapPath#2](~/add/codesnippet/csharp/m-system.web.httpserveru_5_2.cs)]\\n [!code-vb[System.Web.HttpServerUtility.MapPath#2](~/add/codesnippet/visualbasic/m-system.web.httpserveru_5_2.vb)]\"\n  syntax:\n    content: public string MapPath (string path);\n    parameters:\n    - id: path\n      type: System.String\n      description: The virtual path in the Web application.\n    return:\n      type: System.String\n      description: The physical file path on the Web server that corresponds to <code>path</code>.\n  overload: System.Web.HttpServerUtility.MapPath*\n  exceptions:\n  - type: System.Web.HttpException\n    commentId: T:System.Web.HttpException\n    description: The current <xref href=\"System.Web.HttpContext\"></xref> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Web.HttpServerUtility.ScriptTimeout\n  id: ScriptTimeout\n  parent: System.Web.HttpServerUtility\n  langs:\n  - csharp\n  name: ScriptTimeout\n  nameWithType: HttpServerUtility.ScriptTimeout\n  fullName: System.Web.HttpServerUtility.ScriptTimeout\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Gets and sets the request time-out value in seconds.\n  remarks: \"The ScriptTimeout property can be set in the Web.config file by setting the `executionTimeout` attribute of the  element. Setting the time-out programmatically with the ScriptTimeout property takes precedence over the Web.config setting.  \\n  \\n> [!NOTE]\\n>  If you set the `debug` attribute of the  element to `true` in the Web.config file, the value of ScriptTimeout will be ignored.\"\n  example:\n  - \"The following example sets the request time-out period to 60 seconds.  \\n  \\n [!code-vb[Classic HttpServerUtility.ScriptTimeout Example#1](~/add/codesnippet/visualbasic/p-system.web.httpserveru_1_1.vb)]\\n [!code-cs[Classic HttpServerUtility.ScriptTimeout Example#1](~/add/codesnippet/csharp/p-system.web.httpserveru_1_1.cs)]\"\n  syntax:\n    content: public int ScriptTimeout { get; set; }\n    return:\n      type: System.Int32\n      description: The time-out value setting for requests.\n  overload: System.Web.HttpServerUtility.ScriptTimeout*\n  exceptions:\n  - type: System.Web.HttpException\n    commentId: T:System.Web.HttpException\n    description: The current <xref href=\"System.Web.HttpContext\"></xref> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The time-out period is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or otherwise could not be set.\n  platform:\n  - net462\n- uid: System.Web.HttpServerUtility.Transfer(System.String)\n  id: Transfer(System.String)\n  parent: System.Web.HttpServerUtility\n  langs:\n  - csharp\n  name: Transfer(String)\n  nameWithType: HttpServerUtility.Transfer(String)\n  fullName: System.Web.HttpServerUtility.Transfer(String)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: For the current request, terminates execution of the current page and starts execution of a new page by using the specified URL path of the page.\n  remarks: \"The page transferred to should be another .aspx page. For instance, a transfer to an .asp or .asmx page is not valid. The Transfer method preserves the <xref:System.Web.HttpRequest.QueryString%2A> and <xref:System.Web.HttpRequest.Form%2A> collections.  \\n  \\n Transfer calls <xref:System.Web.HttpResponse.End%2A>, which throws a <xref:System.Threading.ThreadAbortException> exception upon completion.  \\n  \\n ASP.NET does not verify that the current user is authorized to view the resource delivered by the Transfer method. Although the ASP.NET authorization and authentication logic runs before the original resource handler is called, ASP.NET directly calls the handler indicated by the Transfer method and does not rerun authentication and authorization logic for the new resource. If your application's security policy requires clients to have appropriate authorization to access the resource, the application should force reauthorization or provide a custom access-control mechanism.  \\n  \\n You can force reauthorization by using the <xref:System.Web.HttpResponse.Redirect%2A> method instead of the Transfer method. The <xref:System.Web.HttpResponse.Redirect%2A> method performs a client-side redirect in which the browser requests the new resource. Because this redirect is a new request entering the system, it is subjected to all the authentication and authorization logic of both Internet Information Services (IIS) and ASP.NET security policy.  \\n  \\n You can verify that the user has permission to view the resource by incorporating a custom authorization method that uses the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> method before the application calls the Transfer method.\"\n  syntax:\n    content: public void Transfer (string path);\n    parameters:\n    - id: path\n      type: System.String\n      description: The URL path of the new page on the server to execute.\n  overload: System.Web.HttpServerUtility.Transfer*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.HttpServerUtility.Transfer(System.String,System.Boolean)\n  id: Transfer(System.String,System.Boolean)\n  parent: System.Web.HttpServerUtility\n  langs:\n  - csharp\n  name: Transfer(String,Boolean)\n  nameWithType: HttpServerUtility.Transfer(String,Boolean)\n  fullName: System.Web.HttpServerUtility.Transfer(String,Boolean)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Terminates execution of the current page and starts execution of a new page by using the specified URL path of the page. Specifies whether to clear the <xref:System.Web.HttpRequest.QueryString*> and <xref:System.Web.HttpRequest.Form*> collections.\n  remarks: \"The page transferred to should be another .aspx page. For instance, a transfer to an .asp or .asmx page is not valid.  \\n  \\n Transfer calls <xref:System.Web.HttpResponse.End%2A>, which throws a <xref:System.Threading.ThreadAbortException> exception upon completion.  \\n  \\n If you set the `preserveForm` parameter to `true`, the target page will be able to access the view state of the previous page by using the <xref:System.Web.UI.Page.PreviousPage%2A> property.  \\n  \\n For security purposes, you should keep the `enableViewStateMac` attribute set to `true`. ASP.NET does not verify that the current user is authorized to view the resource delivered by the Transfer method. Although the ASP.NET authorization and authentication logic runs before the original resource handler is called, ASP.NET directly calls the handler indicated by the Transfer method and does not rerun authentication and authorization logic for the new resource. If your application's security policy requires clients to have appropriate authorization to access the resource, the application should force reauthorization or provide a custom access-control mechanism.  \\n  \\n You can force reauthorization by using the <xref:System.Web.HttpResponse.Redirect%2A> method instead of the Transfer method. The <xref:System.Web.HttpResponse.Redirect%2A> method performs a client-side redirect in which the browser requests the new resource. Because this redirect is a new request entering the system, it is subjected to all the authentication and authorization logic of both Internet Information Services (IIS) and ASP.NET security policy.  \\n  \\n You can verify that the user has permission to view the resource by incorporating a custom authorization method that uses the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> method before the application calls the Transfer method.\"\n  example:\n  - \"The following example executes a new page in the same directory as the current page.  \\n  \\n [!code-cs[Classic HttpServerUtility.Transfer Example#1](~/add/codesnippet/csharp/m-system.web.httpserveru_3_1.cs)]\\n [!code-vb[Classic HttpServerUtility.Transfer Example#1](~/add/codesnippet/visualbasic/m-system.web.httpserveru_3_1.vb)]\"\n  syntax:\n    content: public void Transfer (string path, bool preserveForm);\n    parameters:\n    - id: path\n      type: System.String\n      description: The URL path of the new page on the server to execute.\n    - id: preserveForm\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to preserve the <xref:System.Web.HttpRequest.QueryString*> and <xref:System.Web.HttpRequest.Form*> collections; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to clear the <xref:System.Web.HttpRequest.QueryString*> and <xref:System.Web.HttpRequest.Form*> collections.\n  overload: System.Web.HttpServerUtility.Transfer*\n  exceptions:\n  - type: System.ApplicationException\n    commentId: T:System.ApplicationException\n    description: The current page request is a callback.\n  platform:\n  - net462\n- uid: System.Web.HttpServerUtility.Transfer(System.Web.IHttpHandler,System.Boolean)\n  id: Transfer(System.Web.IHttpHandler,System.Boolean)\n  parent: System.Web.HttpServerUtility\n  langs:\n  - csharp\n  name: Transfer(IHttpHandler,Boolean)\n  nameWithType: HttpServerUtility.Transfer(IHttpHandler,Boolean)\n  fullName: System.Web.HttpServerUtility.Transfer(IHttpHandler,Boolean)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Terminates execution of the current page and starts execution of a new request by using a custom HTTP handler that implements the <xref href=\"System.Web.IHttpHandler\"></xref> interface and specifies whether to clear the <xref:System.Web.HttpRequest.QueryString*> and <xref:System.Web.HttpRequest.Form*> collections.\n  remarks: \"You can write custom HTTP handlers to process specific, predefined types of HTTP requests in any language that is compliant with the Common Language Specification (CLS). Executable code that is defined in the HTTP handler classes instead of conventional ASP (also known as classic ASP) pages or ASP.NET pages responds to these specific requests. HTTP handlers allow for interacting with the low-level request and response services of a Web server that is running Internet Information Services (IIS), and they provide functionality that is similar to ISAPI extensions but with a simpler programming model.  \\n  \\n If you set the `preserveForm` parameter to `true`, the target page will be able to access the view state of the previous page by using the <xref:System.Web.UI.Page.PreviousPage%2A> property.  \\n  \\n For security purposes, you should keep the `enableViewStateMac` attribute set to `true`. ASP.NET does not verify that the current user is authorized to view the resource delivered by the <xref:System.Web.HttpServerUtility.Transfer%2A> method. Although the ASP.NET authorization and authentication logic runs before the original resource handler is called, ASP.NET directly calls the handler indicated by the Transfer method, and does not rerun authentication and authorization logic for the new resource. If the security policy for your application requires clients to have appropriate authorization to access the resource, the application should force reauthorization or provide a custom access-control mechanism.  \\n  \\n You can force reauthorization by using the <xref:System.Web.HttpResponse.Redirect%2A> method instead of the Transfer method. The <xref:System.Web.HttpResponse.Redirect%2A> method performs a client-side redirect in which the browser requests the new resource. Because this redirect is a new request entering the system, it is subjected to all the authentication and authorization logic of both the IIS and ASP.NET security policy.  \\n  \\n You can verify that the user has permission to view the resource by incorporating a custom authorization method that uses the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> method before the application calls the Transfer method.\"\n  syntax:\n    content: public void Transfer (System.Web.IHttpHandler handler, bool preserveForm);\n    parameters:\n    - id: handler\n      type: System.Web.IHttpHandler\n      description: The HTTP handler that implements the <xref href=\"System.Web.IHttpHandler\"></xref> to transfer the current request to.\n    - id: preserveForm\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to preserve the <xref:System.Web.HttpRequest.QueryString*> and <xref:System.Web.HttpRequest.Form*> collections; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to clear the <xref:System.Web.HttpRequest.QueryString*> and <xref:System.Web.HttpRequest.Form*> collections.\n  overload: System.Web.HttpServerUtility.Transfer*\n  exceptions:\n  - type: System.ApplicationException\n    commentId: T:System.ApplicationException\n    description: The current page request is a callback.\n  platform:\n  - net462\n- uid: System.Web.HttpServerUtility.TransferRequest(System.String)\n  id: TransferRequest(System.String)\n  parent: System.Web.HttpServerUtility\n  langs:\n  - csharp\n  name: TransferRequest(String)\n  nameWithType: HttpServerUtility.TransferRequest(String)\n  fullName: System.Web.HttpServerUtility.TransferRequest(String)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Performs an asynchronous execution of the specified URL.\n  remarks: This method overload calls the <xref:System.Web.HttpServerUtility.TransferRequest%2A> overload with the `preserveForm` parameter set to `false`, the `method` parameter set to `null`, the `headers` parameter set to `null`, and the `preserveUser` parameter set to `true`. For more information, see the \"Remarks\" section in <xref:System.Web.HttpServerUtility.TransferRequest%28System.String%2CSystem.Boolean%2CSystem.String%2CSystem.Collections.Specialized.NameValueCollection%29> overload.\n  syntax:\n    content: public void TransferRequest (string path);\n    parameters:\n    - id: path\n      type: System.String\n      description: The URL path of the new page on the server to execute.\n  overload: System.Web.HttpServerUtility.TransferRequest*\n  exceptions:\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: The request requires the integrated pipeline mode of [!INCLUDE[iisver](~/add/includes/ajax-current-ext-md.md)].\n  - type: System.Web.HttpException\n    commentId: T:System.Web.HttpException\n    description: The server is not available to handle the request.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>path</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>path</code> parameter is invalid.\n  platform:\n  - net462\n- uid: System.Web.HttpServerUtility.TransferRequest(System.String,System.Boolean)\n  id: TransferRequest(System.String,System.Boolean)\n  parent: System.Web.HttpServerUtility\n  langs:\n  - csharp\n  name: TransferRequest(String,Boolean)\n  nameWithType: HttpServerUtility.TransferRequest(String,Boolean)\n  fullName: System.Web.HttpServerUtility.TransferRequest(String,Boolean)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Performs an asynchronous execution of the specified URL and preserves query string parameters.\n  remarks: \"This overload calls the <xref:System.Web.HttpServerUtility.TransferRequest%2A> overload with the `preserveForm` parameter set to the value passed in, the `method` parameter set to `null`, the `headers` parameter set to `null`, and the `preserveUser` parameter set to `true`. For more information, see the \\\"Remarks\\\" section in <xref:System.Web.HttpServerUtility.TransferRequest%28System.String%2CSystem.Boolean%2CSystem.String%2CSystem.Collections.Specialized.NameValueCollection%29>.  \\n  \\n TransferRequest is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: public void TransferRequest (string path, bool preserveForm);\n    parameters:\n    - id: path\n      type: System.String\n      description: The URL path of the new page on the server to execute.\n    - id: preserveForm\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to preserve the <xref:System.Web.HttpRequest.Form*> collection; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to clear the <xref:System.Web.HttpRequest.Form*> collection.\n  overload: System.Web.HttpServerUtility.TransferRequest*\n  exceptions:\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: The request requires the integrated pipeline mode of [!INCLUDE[iisver](~/add/includes/ajax-current-ext-md.md)].\n  - type: System.Web.HttpException\n    commentId: T:System.Web.HttpException\n    description: The server is not available to handle the request.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>path</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>path</code> parameter is invalid.\n  platform:\n  - net462\n- uid: System.Web.HttpServerUtility.TransferRequest(System.String,System.Boolean,System.String,System.Collections.Specialized.NameValueCollection)\n  id: TransferRequest(System.String,System.Boolean,System.String,System.Collections.Specialized.NameValueCollection)\n  parent: System.Web.HttpServerUtility\n  langs:\n  - csharp\n  name: TransferRequest(String,Boolean,String,NameValueCollection)\n  nameWithType: HttpServerUtility.TransferRequest(String,Boolean,String,NameValueCollection)\n  fullName: System.Web.HttpServerUtility.TransferRequest(String,Boolean,String,NameValueCollection)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Performs an asynchronous execution of the specified URL using the specified HTTP method and headers.\n  remarks: \"This method is used when running with the integrated pipeline mode in [!INCLUDE[iisver](~/add/includes/ajax-current-ext-md.md)] to allow request processing to be transferred from one resource type to another while executing the target request with the correct request context. For example, you can use the TransferRequest method to transfer a request for an ASPX page to a request for an XML page.  \\n  \\n The TransferRequest method performs an asynchronous child execution of the specified URL with the following conditions:  \\n  \\n-   If the `path` parameter specifies a query string, it will be used as the new query string. If no query string is included, the query string of the request will be re-used.  \\n  \\n-   If the `method` parameter is specified, it will be used. If it is `null`, the HTTP method of the original request will be used.  \\n  \\n-   If the `preserveForm` parameter is `true`, the current entity body of the request will be available to the target request. This allows form posts and uploads to be transferred.  \\n  \\n-   If the user identity is currently set on the original request, the identity will be transferred to the new request. This allows authenticated requests to re-use the result of the authentication for the new request. If you do not want the user to be transferred, set the user to `null` on the original request before transferring.  \\n  \\n-   If the `headers` parameter is specified, the new request will execute with the specified headers. This can be used to modify the request headers and cookies for the new request, or add a special header that specifies where the original request was received.  \\n  \\n     This method calls the <xref:System.Web.HttpServerUtility.TransferRequest%28System.String%2CSystem.Boolean%2CSystem.String%2CSystem.Collections.Specialized.NameValueCollection%2CSystem.Boolean%29> method overload with the `preserveUser` parameter set to `true`.\"\n  syntax:\n    content: public void TransferRequest (string path, bool preserveForm, string method, System.Collections.Specialized.NameValueCollection headers);\n    parameters:\n    - id: path\n      type: System.String\n      description: The URL path of the new page on the server to execute.\n    - id: preserveForm\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to preserve the <xref:System.Web.HttpRequest.Form*> collection; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to clear the <xref:System.Web.HttpRequest.Form*> collection.\n    - id: method\n      type: System.String\n      description: The HTTP method to use in the execution of the new request.\n    - id: headers\n      type: System.Collections.Specialized.NameValueCollection\n      description: A <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> of request headers for the new request.\n  overload: System.Web.HttpServerUtility.TransferRequest*\n  exceptions:\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: The request requires [!INCLUDE[iisver](~/add/includes/ajax-current-ext-md.md)] running in integrated mode.\n  - type: System.Web.HttpException\n    commentId: T:System.Web.HttpException\n    description: The server is not available to handle the request.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>path</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>path</code> parameter is invalid.\n  platform:\n  - net462\n- uid: System.Web.HttpServerUtility.TransferRequest(System.String,System.Boolean,System.String,System.Collections.Specialized.NameValueCollection,System.Boolean)\n  id: TransferRequest(System.String,System.Boolean,System.String,System.Collections.Specialized.NameValueCollection,System.Boolean)\n  parent: System.Web.HttpServerUtility\n  langs:\n  - csharp\n  name: TransferRequest(String,Boolean,String,NameValueCollection,Boolean)\n  nameWithType: HttpServerUtility.TransferRequest(String,Boolean,String,NameValueCollection,Boolean)\n  fullName: System.Web.HttpServerUtility.TransferRequest(String,Boolean,String,NameValueCollection,Boolean)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Performs an asynchronous execution of the specified URL using the specified HTTP method, headers, and path, and optionally preserves form values and the user identity.\n  remarks: For more information, see the \"Remarks\" section in <xref:System.Web.HttpServerUtility.TransferRequest%28System.String%2CSystem.Boolean%2CSystem.String%2CSystem.Collections.Specialized.NameValueCollection%29>.\n  syntax:\n    content: public void TransferRequest (string path, bool preserveForm, string method, System.Collections.Specialized.NameValueCollection headers, bool preserveUser);\n    parameters:\n    - id: path\n      type: System.String\n      description: The path.\n    - id: preserveForm\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to preserve the <xref:System.Web.HttpRequest.Form*> collection; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to clear the <xref:System.Web.HttpRequest.Form*> collection.\n    - id: method\n      type: System.String\n      description: The HTTP method to use in the new request.\n    - id: headers\n      type: System.Collections.Specialized.NameValueCollection\n      description: A <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> object that contains request headers for the new request.\n    - id: preserveUser\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to preserve the user identity; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The other method overloads of this method call this overload with this parameter set to <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.\n  overload: System.Web.HttpServerUtility.TransferRequest*\n  exceptions:\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: The request requires the integrated pipeline mode of [!INCLUDE[iisver](~/add/includes/ajax-current-ext-md.md)].\n  - type: System.Web.HttpException\n    commentId: T:System.Web.HttpException\n    description: The server is not available to handle the request.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>path</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>path</code> parameter is invalid.\n  platform:\n  - net462\n- uid: System.Web.HttpServerUtility.UrlDecode(System.String)\n  id: UrlDecode(System.String)\n  parent: System.Web.HttpServerUtility\n  langs:\n  - csharp\n  name: UrlDecode(String)\n  nameWithType: HttpServerUtility.UrlDecode(String)\n  fullName: System.Web.HttpServerUtility.UrlDecode(String)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: URL-decodes a string and returns the decoded string.\n  remarks: \"URL encoding ensures that all browsers will correctly transmit text in URL strings. Characters such as a question mark (?), ampersand (&), slash mark (/), and spaces might be truncated or corrupted by some browsers. As a result, these characters must be encoded in `<a>` tags or in query strings where the strings can be re-sent by a browser in a request string.  \\n  \\n This method is a convenient way to access the <xref:System.Web.HttpUtility.UrlDecode%2A?displayProperty=fullName> method at run time from an ASP.NET application. Internally, this method uses <xref:System.Web.HttpUtility.UrlDecode%2A?displayProperty=fullName> to decode strings.  \\n  \\n In the code-behind file for an ASP.NET web page, access an instance of the <xref:System.Web.HttpServerUtility> class through the `Server` property. In a class that is not in a code-behind file, use `HttpContext.Current.Server` to access an instance of the <xref:System.Web.HttpServerUtility> class.  \\n  \\n Outside of a web application, use the <xref:System.Net.WebUtility> class to encode or decode values.\"\n  example:\n  - \"The following example shows how to URL-decode a value that is retrieved from the query string. The code resides in the code-behind file for a web page. `ReturnPage` refers to a `HyperLink` control.  \\n  \\n [!code-vb[System.Web.HttpServerUtility.UrlDecode#1](~/add/codesnippet/visualbasic/m-system.web.httpserveru_9_1.vb)]\\n [!code-cs[System.Web.HttpServerUtility.UrlDecode#1](~/add/codesnippet/csharp/m-system.web.httpserveru_9_1.cs)]  \\n  \\n The next example is similar to the previous example except it shows how to URL-decode a value from within a class that is not in the code-behind file.  \\n  \\n [!code-cs[System.Web.HttpServerUtility.UrlDecode#2](~/add/codesnippet/csharp/m-system.web.httpserveru_9_2.cs)]\\n [!code-vb[System.Web.HttpServerUtility.UrlDecode#2](~/add/codesnippet/visualbasic/m-system.web.httpserveru_9_2.vb)]\"\n  syntax:\n    content: public string UrlDecode (string s);\n    parameters:\n    - id: s\n      type: System.String\n      description: The text string to decode.\n    return:\n      type: System.String\n      description: The decoded text.\n  overload: System.Web.HttpServerUtility.UrlDecode*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.HttpServerUtility.UrlDecode(System.String,System.IO.TextWriter)\n  id: UrlDecode(System.String,System.IO.TextWriter)\n  parent: System.Web.HttpServerUtility\n  langs:\n  - csharp\n  name: UrlDecode(String,TextWriter)\n  nameWithType: HttpServerUtility.UrlDecode(String,TextWriter)\n  fullName: System.Web.HttpServerUtility.UrlDecode(String,TextWriter)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Decodes an HTML string received in a URL and sends the resulting output to a <xref:System.IO.TextWriter> output stream.\n  remarks: \"URL encoding ensures that all browsers will correctly transmit text in URL strings. Characters such as a question mark (?), ampersand (&), slash mark (/), and spaces might be truncated or corrupted by some browsers. As a result, these characters must be encoded in `<a>` tags or in query strings where the strings can be re-sent by a browser in a request string.  \\n  \\n <xref:System.Web.HttpServerUtility.UrlDecode%2A> is a convenient way to access the <xref:System.Web.HttpUtility.UrlDecode%2A?displayProperty=fullName> method at run time from an ASP.NET application. Internally, <xref:System.Web.HttpServerUtility.UrlDecode%2A> uses <xref:System.Web.HttpUtility.UrlDecode%2A?displayProperty=fullName> to decode strings.  \\n  \\n To encode or decode values outside of a web application, use the <xref:System.Net.WebUtility> class.\"\n  example:\n  - \"The following example decodes the string named `EncodedString` (received in a URL) into the string named `DecodedString`.  \\n  \\n [!code-vb[Classic HttpServerUtility.UrlDecode1 Example#1](~/add/codesnippet/visualbasic/m-system.web.httpserveru_11_1.vb)]\\n [!code-cs[Classic HttpServerUtility.UrlDecode1 Example#1](~/add/codesnippet/csharp/m-system.web.httpserveru_11_1.cs)]\"\n  syntax:\n    content: public void UrlDecode (string s, System.IO.TextWriter output);\n    parameters:\n    - id: s\n      type: System.String\n      description: The HTML string to decode.\n    - id: output\n      type: System.IO.TextWriter\n      description: The <xref:System.IO.TextWriter> output stream that contains the decoded string.\n  overload: System.Web.HttpServerUtility.UrlDecode*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.HttpServerUtility.UrlEncode(System.String)\n  id: UrlEncode(System.String)\n  parent: System.Web.HttpServerUtility\n  langs:\n  - csharp\n  name: UrlEncode(String)\n  nameWithType: HttpServerUtility.UrlEncode(String)\n  fullName: System.Web.HttpServerUtility.UrlEncode(String)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: URL-encodes a string and returns the encoded string.\n  remarks: \"URL encoding ensures that all browsers will correctly transmit text in URL strings. Characters such as a question mark (?), ampersand (&), slash mark (/), and spaces might be truncated or corrupted by some browsers. As a result, these characters must be encoded in `<a>` tags or in query strings where the strings can be re-sent by a browser in a request string.  \\n  \\n This method is a convenient way to access the <xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=fullName> method at run time from an ASP.NET application. Internally, this method uses <xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=fullName> to encode strings.  \\n  \\n In the code-behind file for an ASP.NET web page, access an instance of the <xref:System.Web.HttpServerUtility> class through the `Server` property. In a class that is not in a code-behind file, use `HttpContext.Current.Server` to access an instance of the <xref:System.Web.HttpServerUtility> class.  \\n  \\n Outside of a web application, use the <xref:System.Net.WebUtility> class to encode or decode values.\"\n  example:\n  - \"The following example shows how to URL-encode a value that is used as a query string value of a hyperlink. The code resides in the code-behind file for a web page. The value to encode is hard-coded in this example only to simplify the example and show the type of value you might URL-encode. Typically, you would URL-encode a value that you received from the user or the request. `NextPage` refers to a `HyperLink` control.  \\n  \\n [!code-cs[System.Web.HttpServerUtility.UrlEncode#1](~/add/codesnippet/csharp/m-system.web.httpserveru_0_1.cs)]\\n [!code-vb[System.Web.HttpServerUtility.UrlEncode#1](~/add/codesnippet/visualbasic/m-system.web.httpserveru_0_1.vb)]  \\n  \\n The next example is similar to the previous example except it shows how to URL-encode a value from within a class that is not in the code-behind file.  \\n  \\n [!code-cs[System.Web.HttpServerUtility.UrlEncode#2](~/add/codesnippet/csharp/m-system.web.httpserveru_0_2.cs)]\\n [!code-vb[System.Web.HttpServerUtility.UrlEncode#2](~/add/codesnippet/visualbasic/m-system.web.httpserveru_0_2.vb)]\"\n  syntax:\n    content: public string UrlEncode (string s);\n    parameters:\n    - id: s\n      type: System.String\n      description: The text to URL-encode.\n    return:\n      type: System.String\n      description: The URL-encoded text.\n  overload: System.Web.HttpServerUtility.UrlEncode*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.HttpServerUtility.UrlEncode(System.String,System.IO.TextWriter)\n  id: UrlEncode(System.String,System.IO.TextWriter)\n  parent: System.Web.HttpServerUtility\n  langs:\n  - csharp\n  name: UrlEncode(String,TextWriter)\n  nameWithType: HttpServerUtility.UrlEncode(String,TextWriter)\n  fullName: System.Web.HttpServerUtility.UrlEncode(String,TextWriter)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: URL-encodes a string and sends the resulting output to a <xref:System.IO.TextWriter> output stream.\n  remarks: \"URL encoding ensures that all browsers will correctly transmit text in URL strings. Characters such as a question mark (?), ampersand (&), slash mark (/), and spaces might be truncated or corrupted by some browsers. As a result, these characters must be encoded in `<a>` tags or in query strings where the strings can be re-sent by a browser in a request string.  \\n  \\n <xref:System.Web.HttpServerUtility.UrlEncode%2A> is a convenient way to access the <xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=fullName> method at run time from an ASP.NET application. Internally, <xref:System.Web.HttpServerUtility.UrlEncode%2A> uses <xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=fullName> to encode strings.  \\n  \\n To encode or decode values outside of a web application, use the <xref:System.Net.WebUtility> class.\"\n  example:\n  - \"The following example encodes a string for transmission by HTTP. It encodes the string named `TestString`, which contains the text \\\"This is a \\\\<Test String>.\\\", and copies it into the string named `EncodedString` as \\\"This+is+a+%3cTest+String%3e.\\\".  \\n  \\n [!code-cs[Classic HttpServerUtility.UrlEncode1 Example#1](~/add/codesnippet/csharp/m-system.web.httpserveru_13_1.cs)]\\n [!code-vb[Classic HttpServerUtility.UrlEncode1 Example#1](~/add/codesnippet/visualbasic/m-system.web.httpserveru_13_1.vb)]\"\n  syntax:\n    content: public void UrlEncode (string s, System.IO.TextWriter output);\n    parameters:\n    - id: s\n      type: System.String\n      description: The text string to encode.\n    - id: output\n      type: System.IO.TextWriter\n      description: The <xref:System.IO.TextWriter> output stream that contains the encoded string.\n  overload: System.Web.HttpServerUtility.UrlEncode*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.HttpServerUtility.UrlPathEncode(System.String)\n  id: UrlPathEncode(System.String)\n  parent: System.Web.HttpServerUtility\n  langs:\n  - csharp\n  name: UrlPathEncode(String)\n  nameWithType: HttpServerUtility.UrlPathEncode(String)\n  fullName: System.Web.HttpServerUtility.UrlPathEncode(String)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Do not use; intended only for browser compatibility. Use <xref:System.Web.HttpServerUtility.UrlEncode*>.\n  syntax:\n    content: public string UrlPathEncode (string s);\n    parameters:\n    - id: s\n      type: System.String\n      description: The text to URL-encode.\n    return:\n      type: System.String\n      description: The URL encoded text.\n  overload: System.Web.HttpServerUtility.UrlPathEncode*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.HttpServerUtility.UrlTokenDecode(System.String)\n  id: UrlTokenDecode(System.String)\n  parent: System.Web.HttpServerUtility\n  langs:\n  - csharp\n  name: UrlTokenDecode(String)\n  nameWithType: HttpServerUtility.UrlTokenDecode(String)\n  fullName: System.Web.HttpServerUtility.UrlTokenDecode(String)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Decodes a URL string token to its equivalent byte array using base 64 digits.\n  remarks: \"The UrlTokenDecode method converts a URL string token, which encodes binary data as base 64 digits, to its equivalent byte array representation. Use the UrlTokenDecode method to decode tokens transmitted on the URL and encoded by using the <xref:System.Web.HttpServerUtility.UrlTokenEncode%2A>.  \\n  \\n The UrlTokenDecode method will return an empty byte array if the `input` parameter has a length of less than one.\"\n  syntax:\n    content: public static byte[] UrlTokenDecode (string input);\n    parameters:\n    - id: input\n      type: System.String\n      description: The URL string token to decode.\n    return:\n      type: System.Byte[]\n      description: The byte array containing the decoded URL string token.\n  overload: System.Web.HttpServerUtility.UrlTokenDecode*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The value of the <code>input</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Web.HttpServerUtility.UrlTokenEncode(System.Byte[])\n  id: UrlTokenEncode(System.Byte[])\n  parent: System.Web.HttpServerUtility\n  langs:\n  - csharp\n  name: UrlTokenEncode(Byte[])\n  nameWithType: HttpServerUtility.UrlTokenEncode(Byte[])\n  fullName: System.Web.HttpServerUtility.UrlTokenEncode(Byte[])\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Encodes a byte array into its equivalent string representation using base 64 digits, which is usable for transmission on the URL.\n  remarks: \"The UrlTokenEncode method converts a byte array into an equivalent string representation encoded with base 64 digits. The resulting string token can be transmitted on the URL.  \\n  \\n The UrlTokenEncode will return an empty string if the `input` parameter has a length of less than one.\"\n  syntax:\n    content: public static string UrlTokenEncode (byte[] input);\n    parameters:\n    - id: input\n      type: System.Byte[]\n      description: The byte array to encode.\n    return:\n      type: System.String\n      description: The string containing the encoded token if the byte array *length* is greater than one; otherwise, an empty string (\"\").\n  overload: System.Web.HttpServerUtility.UrlTokenEncode*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The value of the <code>input</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Web.HttpException\n  parent: System.Web\n  isExternal: false\n  name: HttpException\n  nameWithType: HttpException\n  fullName: System.Web.HttpException\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.ApplicationException\n  parent: System\n  isExternal: false\n  name: ApplicationException\n  nameWithType: ApplicationException\n  fullName: System.ApplicationException\n- uid: System.PlatformNotSupportedException\n  isExternal: true\n  name: System.PlatformNotSupportedException\n- uid: System.Web.HttpServerUtility.ClearError\n  parent: System.Web.HttpServerUtility\n  isExternal: false\n  name: ClearError()\n  nameWithType: HttpServerUtility.ClearError()\n  fullName: System.Web.HttpServerUtility.ClearError()\n- uid: System.Web.HttpServerUtility.CreateObject(System.String)\n  parent: System.Web.HttpServerUtility\n  isExternal: false\n  name: CreateObject(String)\n  nameWithType: HttpServerUtility.CreateObject(String)\n  fullName: System.Web.HttpServerUtility.CreateObject(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Web.HttpServerUtility.CreateObject(System.Type)\n  parent: System.Web.HttpServerUtility\n  isExternal: false\n  name: CreateObject(Type)\n  nameWithType: HttpServerUtility.CreateObject(Type)\n  fullName: System.Web.HttpServerUtility.CreateObject(Type)\n- uid: System.Type\n  parent: System\n  isExternal: true\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Web.HttpServerUtility.CreateObjectFromClsid(System.String)\n  parent: System.Web.HttpServerUtility\n  isExternal: false\n  name: CreateObjectFromClsid(String)\n  nameWithType: HttpServerUtility.CreateObjectFromClsid(String)\n  fullName: System.Web.HttpServerUtility.CreateObjectFromClsid(String)\n- uid: System.Web.HttpServerUtility.Execute(System.String)\n  parent: System.Web.HttpServerUtility\n  isExternal: false\n  name: Execute(String)\n  nameWithType: HttpServerUtility.Execute(String)\n  fullName: System.Web.HttpServerUtility.Execute(String)\n- uid: System.Web.HttpServerUtility.Execute(System.String,System.Boolean)\n  parent: System.Web.HttpServerUtility\n  isExternal: false\n  name: Execute(String,Boolean)\n  nameWithType: HttpServerUtility.Execute(String,Boolean)\n  fullName: System.Web.HttpServerUtility.Execute(String,Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Web.HttpServerUtility.Execute(System.String,System.IO.TextWriter)\n  parent: System.Web.HttpServerUtility\n  isExternal: false\n  name: Execute(String,TextWriter)\n  nameWithType: HttpServerUtility.Execute(String,TextWriter)\n  fullName: System.Web.HttpServerUtility.Execute(String,TextWriter)\n- uid: System.IO.TextWriter\n  parent: System.IO\n  isExternal: true\n  name: TextWriter\n  nameWithType: TextWriter\n  fullName: System.IO.TextWriter\n- uid: System.Web.HttpServerUtility.Execute(System.String,System.IO.TextWriter,System.Boolean)\n  parent: System.Web.HttpServerUtility\n  isExternal: false\n  name: Execute(String,TextWriter,Boolean)\n  nameWithType: HttpServerUtility.Execute(String,TextWriter,Boolean)\n  fullName: System.Web.HttpServerUtility.Execute(String,TextWriter,Boolean)\n- uid: System.Web.HttpServerUtility.Execute(System.Web.IHttpHandler,System.IO.TextWriter,System.Boolean)\n  parent: System.Web.HttpServerUtility\n  isExternal: false\n  name: Execute(IHttpHandler,TextWriter,Boolean)\n  nameWithType: HttpServerUtility.Execute(IHttpHandler,TextWriter,Boolean)\n  fullName: System.Web.HttpServerUtility.Execute(IHttpHandler,TextWriter,Boolean)\n- uid: System.Web.IHttpHandler\n  parent: System.Web\n  isExternal: false\n  name: IHttpHandler\n  nameWithType: IHttpHandler\n  fullName: System.Web.IHttpHandler\n- uid: System.Web.HttpServerUtility.GetLastError\n  parent: System.Web.HttpServerUtility\n  isExternal: false\n  name: GetLastError()\n  nameWithType: HttpServerUtility.GetLastError()\n  fullName: System.Web.HttpServerUtility.GetLastError()\n- uid: System.Exception\n  parent: System\n  isExternal: true\n  name: Exception\n  nameWithType: Exception\n  fullName: System.Exception\n- uid: System.Web.HttpServerUtility.HtmlDecode(System.String)\n  parent: System.Web.HttpServerUtility\n  isExternal: false\n  name: HtmlDecode(String)\n  nameWithType: HttpServerUtility.HtmlDecode(String)\n  fullName: System.Web.HttpServerUtility.HtmlDecode(String)\n- uid: System.Web.HttpServerUtility.HtmlDecode(System.String,System.IO.TextWriter)\n  parent: System.Web.HttpServerUtility\n  isExternal: false\n  name: HtmlDecode(String,TextWriter)\n  nameWithType: HttpServerUtility.HtmlDecode(String,TextWriter)\n  fullName: System.Web.HttpServerUtility.HtmlDecode(String,TextWriter)\n- uid: System.Web.HttpServerUtility.HtmlEncode(System.String)\n  parent: System.Web.HttpServerUtility\n  isExternal: false\n  name: HtmlEncode(String)\n  nameWithType: HttpServerUtility.HtmlEncode(String)\n  fullName: System.Web.HttpServerUtility.HtmlEncode(String)\n- uid: System.Web.HttpServerUtility.HtmlEncode(System.String,System.IO.TextWriter)\n  parent: System.Web.HttpServerUtility\n  isExternal: false\n  name: HtmlEncode(String,TextWriter)\n  nameWithType: HttpServerUtility.HtmlEncode(String,TextWriter)\n  fullName: System.Web.HttpServerUtility.HtmlEncode(String,TextWriter)\n- uid: System.Web.HttpServerUtility.MachineName\n  parent: System.Web.HttpServerUtility\n  isExternal: false\n  name: MachineName\n  nameWithType: HttpServerUtility.MachineName\n  fullName: System.Web.HttpServerUtility.MachineName\n- uid: System.Web.HttpServerUtility.MapPath(System.String)\n  parent: System.Web.HttpServerUtility\n  isExternal: false\n  name: MapPath(String)\n  nameWithType: HttpServerUtility.MapPath(String)\n  fullName: System.Web.HttpServerUtility.MapPath(String)\n- uid: System.Web.HttpServerUtility.ScriptTimeout\n  parent: System.Web.HttpServerUtility\n  isExternal: false\n  name: ScriptTimeout\n  nameWithType: HttpServerUtility.ScriptTimeout\n  fullName: System.Web.HttpServerUtility.ScriptTimeout\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Web.HttpServerUtility.Transfer(System.String)\n  parent: System.Web.HttpServerUtility\n  isExternal: false\n  name: Transfer(String)\n  nameWithType: HttpServerUtility.Transfer(String)\n  fullName: System.Web.HttpServerUtility.Transfer(String)\n- uid: System.Web.HttpServerUtility.Transfer(System.String,System.Boolean)\n  parent: System.Web.HttpServerUtility\n  isExternal: false\n  name: Transfer(String,Boolean)\n  nameWithType: HttpServerUtility.Transfer(String,Boolean)\n  fullName: System.Web.HttpServerUtility.Transfer(String,Boolean)\n- uid: System.Web.HttpServerUtility.Transfer(System.Web.IHttpHandler,System.Boolean)\n  parent: System.Web.HttpServerUtility\n  isExternal: false\n  name: Transfer(IHttpHandler,Boolean)\n  nameWithType: HttpServerUtility.Transfer(IHttpHandler,Boolean)\n  fullName: System.Web.HttpServerUtility.Transfer(IHttpHandler,Boolean)\n- uid: System.Web.HttpServerUtility.TransferRequest(System.String)\n  parent: System.Web.HttpServerUtility\n  isExternal: false\n  name: TransferRequest(String)\n  nameWithType: HttpServerUtility.TransferRequest(String)\n  fullName: System.Web.HttpServerUtility.TransferRequest(String)\n- uid: System.Web.HttpServerUtility.TransferRequest(System.String,System.Boolean)\n  parent: System.Web.HttpServerUtility\n  isExternal: false\n  name: TransferRequest(String,Boolean)\n  nameWithType: HttpServerUtility.TransferRequest(String,Boolean)\n  fullName: System.Web.HttpServerUtility.TransferRequest(String,Boolean)\n- uid: System.Web.HttpServerUtility.TransferRequest(System.String,System.Boolean,System.String,System.Collections.Specialized.NameValueCollection)\n  parent: System.Web.HttpServerUtility\n  isExternal: false\n  name: TransferRequest(String,Boolean,String,NameValueCollection)\n  nameWithType: HttpServerUtility.TransferRequest(String,Boolean,String,NameValueCollection)\n  fullName: System.Web.HttpServerUtility.TransferRequest(String,Boolean,String,NameValueCollection)\n- uid: System.Collections.Specialized.NameValueCollection\n  parent: System.Collections.Specialized\n  isExternal: false\n  name: NameValueCollection\n  nameWithType: NameValueCollection\n  fullName: System.Collections.Specialized.NameValueCollection\n- uid: System.Web.HttpServerUtility.TransferRequest(System.String,System.Boolean,System.String,System.Collections.Specialized.NameValueCollection,System.Boolean)\n  parent: System.Web.HttpServerUtility\n  isExternal: false\n  name: TransferRequest(String,Boolean,String,NameValueCollection,Boolean)\n  nameWithType: HttpServerUtility.TransferRequest(String,Boolean,String,NameValueCollection,Boolean)\n  fullName: System.Web.HttpServerUtility.TransferRequest(String,Boolean,String,NameValueCollection,Boolean)\n- uid: System.Web.HttpServerUtility.UrlDecode(System.String)\n  parent: System.Web.HttpServerUtility\n  isExternal: false\n  name: UrlDecode(String)\n  nameWithType: HttpServerUtility.UrlDecode(String)\n  fullName: System.Web.HttpServerUtility.UrlDecode(String)\n- uid: System.Web.HttpServerUtility.UrlDecode(System.String,System.IO.TextWriter)\n  parent: System.Web.HttpServerUtility\n  isExternal: false\n  name: UrlDecode(String,TextWriter)\n  nameWithType: HttpServerUtility.UrlDecode(String,TextWriter)\n  fullName: System.Web.HttpServerUtility.UrlDecode(String,TextWriter)\n- uid: System.Web.HttpServerUtility.UrlEncode(System.String)\n  parent: System.Web.HttpServerUtility\n  isExternal: false\n  name: UrlEncode(String)\n  nameWithType: HttpServerUtility.UrlEncode(String)\n  fullName: System.Web.HttpServerUtility.UrlEncode(String)\n- uid: System.Web.HttpServerUtility.UrlEncode(System.String,System.IO.TextWriter)\n  parent: System.Web.HttpServerUtility\n  isExternal: false\n  name: UrlEncode(String,TextWriter)\n  nameWithType: HttpServerUtility.UrlEncode(String,TextWriter)\n  fullName: System.Web.HttpServerUtility.UrlEncode(String,TextWriter)\n- uid: System.Web.HttpServerUtility.UrlPathEncode(System.String)\n  parent: System.Web.HttpServerUtility\n  isExternal: false\n  name: UrlPathEncode(String)\n  nameWithType: HttpServerUtility.UrlPathEncode(String)\n  fullName: System.Web.HttpServerUtility.UrlPathEncode(String)\n- uid: System.Web.HttpServerUtility.UrlTokenDecode(System.String)\n  parent: System.Web.HttpServerUtility\n  isExternal: false\n  name: UrlTokenDecode(String)\n  nameWithType: HttpServerUtility.UrlTokenDecode(String)\n  fullName: System.Web.HttpServerUtility.UrlTokenDecode(String)\n- uid: System.Byte[]\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: Byte[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Web.HttpServerUtility.UrlTokenEncode(System.Byte[])\n  parent: System.Web.HttpServerUtility\n  isExternal: false\n  name: UrlTokenEncode(Byte[])\n  nameWithType: HttpServerUtility.UrlTokenEncode(Byte[])\n  fullName: System.Web.HttpServerUtility.UrlTokenEncode(Byte[])\n- uid: System.Web.HttpServerUtility.ClearError*\n  parent: System.Web.HttpServerUtility\n  isExternal: false\n  name: ClearError\n  nameWithType: HttpServerUtility.ClearError\n- uid: System.Web.HttpServerUtility.CreateObject*\n  parent: System.Web.HttpServerUtility\n  isExternal: false\n  name: CreateObject\n  nameWithType: HttpServerUtility.CreateObject\n- uid: System.Web.HttpServerUtility.CreateObjectFromClsid*\n  parent: System.Web.HttpServerUtility\n  isExternal: false\n  name: CreateObjectFromClsid\n  nameWithType: HttpServerUtility.CreateObjectFromClsid\n- uid: System.Web.HttpServerUtility.Execute*\n  parent: System.Web.HttpServerUtility\n  isExternal: false\n  name: Execute\n  nameWithType: HttpServerUtility.Execute\n- uid: System.Web.HttpServerUtility.GetLastError*\n  parent: System.Web.HttpServerUtility\n  isExternal: false\n  name: GetLastError\n  nameWithType: HttpServerUtility.GetLastError\n- uid: System.Web.HttpServerUtility.HtmlDecode*\n  parent: System.Web.HttpServerUtility\n  isExternal: false\n  name: HtmlDecode\n  nameWithType: HttpServerUtility.HtmlDecode\n- uid: System.Web.HttpServerUtility.HtmlEncode*\n  parent: System.Web.HttpServerUtility\n  isExternal: false\n  name: HtmlEncode\n  nameWithType: HttpServerUtility.HtmlEncode\n- uid: System.Web.HttpServerUtility.MachineName*\n  parent: System.Web.HttpServerUtility\n  isExternal: false\n  name: MachineName\n  nameWithType: HttpServerUtility.MachineName\n- uid: System.Web.HttpServerUtility.MapPath*\n  parent: System.Web.HttpServerUtility\n  isExternal: false\n  name: MapPath\n  nameWithType: HttpServerUtility.MapPath\n- uid: System.Web.HttpServerUtility.ScriptTimeout*\n  parent: System.Web.HttpServerUtility\n  isExternal: false\n  name: ScriptTimeout\n  nameWithType: HttpServerUtility.ScriptTimeout\n- uid: System.Web.HttpServerUtility.Transfer*\n  parent: System.Web.HttpServerUtility\n  isExternal: false\n  name: Transfer\n  nameWithType: HttpServerUtility.Transfer\n- uid: System.Web.HttpServerUtility.TransferRequest*\n  parent: System.Web.HttpServerUtility\n  isExternal: false\n  name: TransferRequest\n  nameWithType: HttpServerUtility.TransferRequest\n- uid: System.Web.HttpServerUtility.UrlDecode*\n  parent: System.Web.HttpServerUtility\n  isExternal: false\n  name: UrlDecode\n  nameWithType: HttpServerUtility.UrlDecode\n- uid: System.Web.HttpServerUtility.UrlEncode*\n  parent: System.Web.HttpServerUtility\n  isExternal: false\n  name: UrlEncode\n  nameWithType: HttpServerUtility.UrlEncode\n- uid: System.Web.HttpServerUtility.UrlPathEncode*\n  parent: System.Web.HttpServerUtility\n  isExternal: false\n  name: UrlPathEncode\n  nameWithType: HttpServerUtility.UrlPathEncode\n- uid: System.Web.HttpServerUtility.UrlTokenDecode*\n  parent: System.Web.HttpServerUtility\n  isExternal: false\n  name: UrlTokenDecode\n  nameWithType: HttpServerUtility.UrlTokenDecode\n- uid: System.Web.HttpServerUtility.UrlTokenEncode*\n  parent: System.Web.HttpServerUtility\n  isExternal: false\n  name: UrlTokenEncode\n  nameWithType: HttpServerUtility.UrlTokenEncode\n"}