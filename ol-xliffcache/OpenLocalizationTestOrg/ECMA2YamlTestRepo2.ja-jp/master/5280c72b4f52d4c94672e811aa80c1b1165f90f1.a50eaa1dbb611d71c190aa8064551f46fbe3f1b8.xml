{"nodes":[{"pos":[476,573],"content":"Represents the access control and audit security for a directory. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the access control and audit security for a directory. This class cannot be inherited.","pos":[0,97],"nodes":[{"content":"Represents the access control and audit security for a directory.","pos":[0,65]},{"content":"This class cannot be inherited.","pos":[66,97]}]}]},{"pos":[586,2840],"content":"The DirectorySecurity class specifies the access rights for a system directory and how access attempts are audited. This class represents access and audit rights as a set of rules. Each access rule is represented by a <xref:System.Security.AccessControl.FileSystemAccessRule> object, while each audit rule is represented by a <xref:System.Security.AccessControl.FileSystemAuditRule> object.       The DirectorySecurity class is an abstraction of the underlying Windows file security system. In this system, each directory has a discretionary access control list (DACL), which controls access to the directory, and a system access control list (SACL), which specifies the access control attempts that are audited. The <xref:System.Security.AccessControl.FileSystemAccessRule> and <xref:System.Security.AccessControl.FileSystemAuditRule> classes are abstractions of the access control entries (ACEs) that comprise DACLs and SACLs.       The DirectorySecurity class hides many of the details of DACLs and SACLs; you do not have to worry about ACE ordering or null DACLS.       Use the <xref:System.Security.AccessControl.FileSecurity> class to retrieve, add, or change the access rules that represent the DACL and SACL of a file.       The following tables lists the methods you can use to access and maintain directory security.      |Task|Methods|   |----------|-------------|   |Add rules|<xref:System.Security.AccessControl.FileSystemSecurity.AddAccessRule%2A?displayProperty=fullName><br /><br /> <xref:System.Security.AccessControl.FileSystemSecurity.AddAuditRule%2A?displayProperty=fullName>|   |Remove rules|<xref:System.Security.AccessControl.FileSystemSecurity.RemoveAccessRule%2A?displayProperty=fullName><br /><br /> <xref:System.Security.AccessControl.FileSystemSecurity.RemoveAuditRule%2A?displayProperty=fullName>|   |Retrieve the access control to a directory|<xref:System.IO.Directory.GetAccessControl%2A?displayProperty=fullName><br /><br /> <xref:System.IO.DirectoryInfo.GetAccessControl%2A?displayProperty=fullName>|   |Persist the access control to a directory|<xref:System.IO.Directory.SetAccessControl%2A?displayProperty=fullName><br /><br /> <xref:System.IO.DirectoryInfo.SetAccessControl%2A?displayProperty=fullName>|","needQuote":false,"needEscape":true,"nodes":[{"content":"The DirectorySecurity class specifies the access rights for a system directory and how access attempts are audited. This class represents access and audit rights as a set of rules. Each access rule is represented by a <xref:System.Security.AccessControl.FileSystemAccessRule> object, while each audit rule is represented by a <xref:System.Security.AccessControl.FileSystemAuditRule> object.       The DirectorySecurity class is an abstraction of the underlying Windows file security system. In this system, each directory has a discretionary access control list (DACL), which controls access to the directory, and a system access control list (SACL), which specifies the access control attempts that are audited. The <xref:System.Security.AccessControl.FileSystemAccessRule> and <xref:System.Security.AccessControl.FileSystemAuditRule> classes are abstractions of the access control entries (ACEs) that comprise DACLs and SACLs.       The DirectorySecurity class hides many of the details of DACLs and SACLs; you do not have to worry about ACE ordering or null DACLS.       Use the <xref:System.Security.AccessControl.FileSecurity> class to retrieve, add, or change the access rules that represent the DACL and SACL of a file.       The following tables lists the methods you can use to access and maintain directory security.      |Task|Methods|   |----------|-------------|   |Add rules|<xref:System.Security.AccessControl.FileSystemSecurity.AddAccessRule%2A?displayProperty=fullName>","pos":[0,1486],"nodes":[{"content":"The DirectorySecurity class specifies the access rights for a system directory and how access attempts are audited.","pos":[0,115]},{"content":"This class represents access and audit rights as a set of rules.","pos":[116,180]},{"content":"Each access rule is represented by a &lt;xref:System.Security.AccessControl.FileSystemAccessRule&gt; object, while each audit rule is represented by a &lt;xref:System.Security.AccessControl.FileSystemAuditRule&gt; object.","pos":[181,390],"source":" Each access rule is represented by a <xref:System.Security.AccessControl.FileSystemAccessRule> object, while each audit rule is represented by a <xref:System.Security.AccessControl.FileSystemAuditRule> object."},{"content":"The DirectorySecurity class is an abstraction of the underlying Windows file security system.","pos":[397,490]},{"content":"In this system, each directory has a discretionary access control list (DACL), which controls access to the directory, and a system access control list (SACL), which specifies the access control attempts that are audited.","pos":[491,712]},{"content":"The &lt;xref:System.Security.AccessControl.FileSystemAccessRule&gt; and &lt;xref:System.Security.AccessControl.FileSystemAuditRule&gt; classes are abstractions of the access control entries (ACEs) that comprise DACLs and SACLs.","pos":[713,928],"source":" The <xref:System.Security.AccessControl.FileSystemAccessRule> and <xref:System.Security.AccessControl.FileSystemAuditRule> classes are abstractions of the access control entries (ACEs) that comprise DACLs and SACLs."},{"content":"The DirectorySecurity class hides many of the details of DACLs and SACLs; you do not have to worry about ACE ordering or null DACLS.","pos":[935,1067]},{"content":"Use the &lt;xref:System.Security.AccessControl.FileSecurity&gt; class to retrieve, add, or change the access rules that represent the DACL and SACL of a file.","pos":[1074,1226],"source":"       Use the <xref:System.Security.AccessControl.FileSecurity> class to retrieve, add, or change the access rules that represent the DACL and SACL of a file."},{"content":"The following tables lists the methods you can use to access and maintain directory security.","pos":[1233,1326]},{"content":"|Task|Methods|   |----------|-------------|   |Add rules|&lt;xref:System.Security.AccessControl.FileSystemSecurity.AddAccessRule%2A?displayProperty=fullName&gt;","pos":[1332,1486],"source":"      |Task|Methods|   |----------|-------------|   |Add rules|<xref:System.Security.AccessControl.FileSystemSecurity.AddAccessRule%2A?displayProperty=fullName>"}]},{"content":"&lt;xref:System.Security.AccessControl.FileSystemSecurity.AddAuditRule%2A?displayProperty=fullName&gt;|   |Remove rules|&lt;xref:System.Security.AccessControl.FileSystemSecurity.RemoveAccessRule%2A?displayProperty=fullName&gt;","pos":[1499,1713],"source":"<xref:System.Security.AccessControl.FileSystemSecurity.AddAuditRule%2A?displayProperty=fullName>|   |Remove rules|<xref:System.Security.AccessControl.FileSystemSecurity.RemoveAccessRule%2A?displayProperty=fullName>"},{"content":"&lt;xref:System.Security.AccessControl.FileSystemSecurity.RemoveAuditRule%2A?displayProperty=fullName&gt;|   |Retrieve the access control to a directory|&lt;xref:System.IO.Directory.GetAccessControl%2A?displayProperty=fullName&gt;","pos":[1726,1944],"source":"<xref:System.Security.AccessControl.FileSystemSecurity.RemoveAuditRule%2A?displayProperty=fullName>|   |Retrieve the access control to a directory|<xref:System.IO.Directory.GetAccessControl%2A?displayProperty=fullName>"},{"content":"&lt;xref:System.IO.DirectoryInfo.GetAccessControl%2A?displayProperty=fullName&gt;|   |Persist the access control to a directory|&lt;xref:System.IO.Directory.SetAccessControl%2A?displayProperty=fullName&gt;","pos":[1957,2150],"source":"<xref:System.IO.DirectoryInfo.GetAccessControl%2A?displayProperty=fullName>|   |Persist the access control to a directory|<xref:System.IO.Directory.SetAccessControl%2A?displayProperty=fullName>"},{"content":"&lt;xref:System.IO.DirectoryInfo.SetAccessControl%2A?displayProperty=fullName&gt;|","pos":[2163,2239],"source":"<xref:System.IO.DirectoryInfo.SetAccessControl%2A?displayProperty=fullName>|"}]},{"pos":[11784,11893],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.DirectorySecurity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.AccessControl.DirectorySecurity\"></xref> class."},{"pos":[11905,12158],"content":"Use this constructor when you want to create an empty <xref:System.Security.AccessControl.DirectorySecurity> object that is not based on an existing directory. You can then populate the object with access control information and apply it to a directory.","needQuote":true,"needEscape":true,"nodes":[{"content":"Use this constructor when you want to create an empty <xref:System.Security.AccessControl.DirectorySecurity> object that is not based on an existing directory. You can then populate the object with access control information and apply it to a directory.","pos":[0,253],"nodes":[{"content":"Use this constructor when you want to create an empty &lt;xref:System.Security.AccessControl.DirectorySecurity&gt; object that is not based on an existing directory.","pos":[0,159],"source":"Use this constructor when you want to create an empty <xref:System.Security.AccessControl.DirectorySecurity> object that is not based on an existing directory."},{"content":"You can then populate the object with access control information and apply it to a directory.","pos":[160,253]}]}]},{"pos":[12429,12497],"content":"The current operating system is not Microsoft Windows 2000 or later.","needQuote":true,"needEscape":true,"nodes":[{"content":"The current operating system is not Microsoft Windows 2000 or later.","pos":[0,68]}]},{"pos":[13155,13410],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.DirectorySecurity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class from a specified directory using the specified values of the <bpt id=\"p2\">&lt;xref href=\"System.Security.AccessControl.AccessControlSections\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> enumeration.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.AccessControl.DirectorySecurity\"></xref> class from a specified directory using the specified values of the <xref href=\"System.Security.AccessControl.AccessControlSections\"></xref> enumeration."},{"pos":[13422,13721],"content":"This constructor retrieves the access control information for the specified directory and then creates a <xref:System.Security.AccessControl.DirectorySecurity> object that encapsulates that information. You can then inspect, add, or delete the access control information for the specified directory.","needQuote":true,"needEscape":true,"nodes":[{"content":"This constructor retrieves the access control information for the specified directory and then creates a <xref:System.Security.AccessControl.DirectorySecurity> object that encapsulates that information. You can then inspect, add, or delete the access control information for the specified directory.","pos":[0,299],"nodes":[{"content":"This constructor retrieves the access control information for the specified directory and then creates a &lt;xref:System.Security.AccessControl.DirectorySecurity&gt; object that encapsulates that information.","pos":[0,202],"source":"This constructor retrieves the access control information for the specified directory and then creates a <xref:System.Security.AccessControl.DirectorySecurity> object that encapsulates that information."},{"content":"You can then inspect, add, or delete the access control information for the specified directory.","pos":[203,299]}]}]},{"pos":[13930,14051],"content":"The location of a directory to create a <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.DirectorySecurity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object from.","needQuote":true,"needEscape":true,"source":"The location of a directory to create a <xref href=\"System.Security.AccessControl.DirectorySecurity\"></xref> object from."},{"pos":[14161,14329],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Security.AccessControl.AccessControlSections\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values that specifies the type of access control list (ACL) information to retrieve.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Security.AccessControl.AccessControlSections\"></xref> values that specifies the type of access control list (ACL) information to retrieve."},{"pos":[14505,14685],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is a zero-length string, contains only white space, or contains one or more invalid characters as defined by &lt;xref:System.IO.Path.InvalidPathChars&gt;.","needQuote":true,"needEscape":true,"source":"The <code>name</code> parameter is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref:System.IO.Path.InvalidPathChars>."},{"pos":[14788,14884],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>name</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[15003,15076],"content":"The specified path is invalid, (for example, it is on an unmapped drive).","needQuote":true,"needEscape":true,"nodes":[{"content":"The specified path is invalid, (for example, it is on an unmapped drive).","pos":[0,73]}]},{"pos":[15185,15253],"content":"The file specified in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter was not found.","needQuote":true,"needEscape":true,"source":"The file specified in the <code>name</code> parameter was not found."},{"pos":[15342,15392],"content":"An I/O error occurred while opening the directory.","needQuote":true,"needEscape":true,"nodes":[{"content":"An I/O error occurred while opening the directory.","pos":[0,50]}]},{"pos":[15495,15551],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is in an invalid format.","needQuote":true,"needEscape":true,"source":"The <code>name</code> parameter is in an invalid format."},{"pos":[15670,15738],"content":"The current operating system is not Microsoft Windows 2000 or later.","needQuote":true,"needEscape":true,"nodes":[{"content":"The current operating system is not Microsoft Windows 2000 or later.","pos":[0,68]}]},{"pos":[15845,16055],"content":"The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.","needQuote":true,"needEscape":true,"nodes":[{"content":"The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.","pos":[0,210],"nodes":[{"content":"The specified path, file name, or both exceed the system-defined maximum length.","pos":[0,80]},{"content":"For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.","pos":[81,210]}]}]},{"pos":[16212,16279],"content":"The current system account does not have administrative privileges.","needQuote":true,"needEscape":true,"nodes":[{"content":"The current system account does not have administrative privileges.","pos":[0,67]}]},{"pos":[16370,16403],"content":"The directory could not be found.","needQuote":true,"needEscape":true,"nodes":[{"content":"The directory could not be found.","pos":[0,33]}]},{"pos":[16519,16740],"content":"The <code>name</code> parameter specified a directory that is read-only.       -or-       This operation is not supported on the current platform.       -or-       The caller does not have the required permission.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter specified a directory that is read-only.","pos":[0,72],"source":"The <code>name</code> parameter specified a directory that is read-only."},{"content":"-or-       This operation is not supported on the current platform.","pos":[79,146]},{"content":"-or-       The caller does not have the required permission.","pos":[153,213]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.AccessControl.DirectorySecurity\n  id: DirectorySecurity\n  children:\n  - System.Security.AccessControl.DirectorySecurity.#ctor\n  - System.Security.AccessControl.DirectorySecurity.#ctor(System.String,System.Security.AccessControl.AccessControlSections)\n  langs:\n  - csharp\n  name: DirectorySecurity\n  nameWithType: DirectorySecurity\n  fullName: System.Security.AccessControl.DirectorySecurity\n  type: Class\n  summary: Represents the access control and audit security for a directory. This class cannot be inherited.\n  remarks: \"The DirectorySecurity class specifies the access rights for a system directory and how access attempts are audited. This class represents access and audit rights as a set of rules. Each access rule is represented by a <xref:System.Security.AccessControl.FileSystemAccessRule> object, while each audit rule is represented by a <xref:System.Security.AccessControl.FileSystemAuditRule> object.  \\n  \\n The DirectorySecurity class is an abstraction of the underlying Windows file security system. In this system, each directory has a discretionary access control list (DACL), which controls access to the directory, and a system access control list (SACL), which specifies the access control attempts that are audited. The <xref:System.Security.AccessControl.FileSystemAccessRule> and <xref:System.Security.AccessControl.FileSystemAuditRule> classes are abstractions of the access control entries (ACEs) that comprise DACLs and SACLs.  \\n  \\n The DirectorySecurity class hides many of the details of DACLs and SACLs; you do not have to worry about ACE ordering or null DACLS.  \\n  \\n Use the <xref:System.Security.AccessControl.FileSecurity> class to retrieve, add, or change the access rules that represent the DACL and SACL of a file.  \\n  \\n The following tables lists the methods you can use to access and maintain directory security.  \\n  \\n|Task|Methods|  \\n|----------|-------------|  \\n|Add rules|<xref:System.Security.AccessControl.FileSystemSecurity.AddAccessRule%2A?displayProperty=fullName><br /><br /> <xref:System.Security.AccessControl.FileSystemSecurity.AddAuditRule%2A?displayProperty=fullName>|  \\n|Remove rules|<xref:System.Security.AccessControl.FileSystemSecurity.RemoveAccessRule%2A?displayProperty=fullName><br /><br /> <xref:System.Security.AccessControl.FileSystemSecurity.RemoveAuditRule%2A?displayProperty=fullName>|  \\n|Retrieve the access control to a directory|<xref:System.IO.Directory.GetAccessControl%2A?displayProperty=fullName><br /><br /> <xref:System.IO.DirectoryInfo.GetAccessControl%2A?displayProperty=fullName>|  \\n|Persist the access control to a directory|<xref:System.IO.Directory.SetAccessControl%2A?displayProperty=fullName><br /><br /> <xref:System.IO.DirectoryInfo.SetAccessControl%2A?displayProperty=fullName>|\"\n  example:\n  - \"The following code example uses the DirectorySecurity class to add and then remove an access control list (ACL) entry from a directory.  You must supply a valid user or group account to run this example.  \\n  \\n [!code-cpp[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/add/codesnippet/cpp/t-system.security.access_1_1.cpp)]\\n [!code-cs[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/add/codesnippet/csharp/t-system.security.access_1_1.cs)]\\n [!code-vb[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/add/codesnippet/visualbasic/t-system.security.access_1_1.vb)]\"\n  syntax:\n    content: 'public sealed class DirectorySecurity : System.Security.AccessControl.FileSystemSecurity'\n  inheritance:\n  - System.Object\n  - System.Security.AccessControl.ObjectSecurity\n  - System.Security.AccessControl.CommonObjectSecurity\n  - System.Security.AccessControl.NativeObjectSecurity\n  - System.Security.AccessControl.FileSystemSecurity\n  implements: []\n  inheritedMembers:\n  - System.Security.AccessControl.CommonObjectSecurity.AddAccessRule(System.Security.AccessControl.AccessRule)\n  - System.Security.AccessControl.CommonObjectSecurity.AddAuditRule(System.Security.AccessControl.AuditRule)\n  - System.Security.AccessControl.CommonObjectSecurity.GetAccessRules(System.Boolean,System.Boolean,System.Type)\n  - System.Security.AccessControl.CommonObjectSecurity.GetAuditRules(System.Boolean,System.Boolean,System.Type)\n  - System.Security.AccessControl.CommonObjectSecurity.ModifyAccess(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AccessRule,System.Boolean@)\n  - System.Security.AccessControl.CommonObjectSecurity.ModifyAudit(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AuditRule,System.Boolean@)\n  - System.Security.AccessControl.CommonObjectSecurity.RemoveAccessRule(System.Security.AccessControl.AccessRule)\n  - System.Security.AccessControl.CommonObjectSecurity.RemoveAccessRuleAll(System.Security.AccessControl.AccessRule)\n  - System.Security.AccessControl.CommonObjectSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.AccessRule)\n  - System.Security.AccessControl.CommonObjectSecurity.RemoveAuditRule(System.Security.AccessControl.AuditRule)\n  - System.Security.AccessControl.CommonObjectSecurity.RemoveAuditRuleAll(System.Security.AccessControl.AuditRule)\n  - System.Security.AccessControl.CommonObjectSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.AuditRule)\n  - System.Security.AccessControl.CommonObjectSecurity.ResetAccessRule(System.Security.AccessControl.AccessRule)\n  - System.Security.AccessControl.CommonObjectSecurity.SetAccessRule(System.Security.AccessControl.AccessRule)\n  - System.Security.AccessControl.CommonObjectSecurity.SetAuditRule(System.Security.AccessControl.AuditRule)\n  - System.Security.AccessControl.FileSystemSecurity.AccessRightType\n  - System.Security.AccessControl.FileSystemSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)\n  - System.Security.AccessControl.FileSystemSecurity.AccessRuleType\n  - System.Security.AccessControl.FileSystemSecurity.AddAccessRule(System.Security.AccessControl.FileSystemAccessRule)\n  - System.Security.AccessControl.FileSystemSecurity.AddAuditRule(System.Security.AccessControl.FileSystemAuditRule)\n  - System.Security.AccessControl.FileSystemSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)\n  - System.Security.AccessControl.FileSystemSecurity.AuditRuleType\n  - System.Security.AccessControl.FileSystemSecurity.RemoveAccessRule(System.Security.AccessControl.FileSystemAccessRule)\n  - System.Security.AccessControl.FileSystemSecurity.RemoveAccessRuleAll(System.Security.AccessControl.FileSystemAccessRule)\n  - System.Security.AccessControl.FileSystemSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.FileSystemAccessRule)\n  - System.Security.AccessControl.FileSystemSecurity.RemoveAuditRule(System.Security.AccessControl.FileSystemAuditRule)\n  - System.Security.AccessControl.FileSystemSecurity.RemoveAuditRuleAll(System.Security.AccessControl.FileSystemAuditRule)\n  - System.Security.AccessControl.FileSystemSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.FileSystemAuditRule)\n  - System.Security.AccessControl.FileSystemSecurity.ResetAccessRule(System.Security.AccessControl.FileSystemAccessRule)\n  - System.Security.AccessControl.FileSystemSecurity.SetAccessRule(System.Security.AccessControl.FileSystemAccessRule)\n  - System.Security.AccessControl.FileSystemSecurity.SetAuditRule(System.Security.AccessControl.FileSystemAuditRule)\n  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.Runtime.InteropServices.SafeHandle,System.Security.AccessControl.AccessControlSections)\n  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.Runtime.InteropServices.SafeHandle,System.Security.AccessControl.AccessControlSections,System.Object)\n  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.String,System.Security.AccessControl.AccessControlSections)\n  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.String,System.Security.AccessControl.AccessControlSections,System.Object)\n  - System.Security.AccessControl.ObjectSecurity.AccessRulesModified\n  - System.Security.AccessControl.ObjectSecurity.AreAccessRulesCanonical\n  - System.Security.AccessControl.ObjectSecurity.AreAccessRulesProtected\n  - System.Security.AccessControl.ObjectSecurity.AreAuditRulesCanonical\n  - System.Security.AccessControl.ObjectSecurity.AreAuditRulesProtected\n  - System.Security.AccessControl.ObjectSecurity.AuditRulesModified\n  - System.Security.AccessControl.ObjectSecurity.GetGroup(System.Type)\n  - System.Security.AccessControl.ObjectSecurity.GetOwner(System.Type)\n  - System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorBinaryForm\n  - System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm(System.Security.AccessControl.AccessControlSections)\n  - System.Security.AccessControl.ObjectSecurity.GroupModified\n  - System.Security.AccessControl.ObjectSecurity.IsContainer\n  - System.Security.AccessControl.ObjectSecurity.IsDS\n  - System.Security.AccessControl.ObjectSecurity.IsSddlConversionSupported\n  - System.Security.AccessControl.ObjectSecurity.ModifyAccessRule(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AccessRule,System.Boolean@)\n  - System.Security.AccessControl.ObjectSecurity.ModifyAuditRule(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AuditRule,System.Boolean@)\n  - System.Security.AccessControl.ObjectSecurity.OwnerModified\n  - System.Security.AccessControl.ObjectSecurity.Persist(System.Boolean,System.String,System.Security.AccessControl.AccessControlSections)\n  - System.Security.AccessControl.ObjectSecurity.PurgeAccessRules(System.Security.Principal.IdentityReference)\n  - System.Security.AccessControl.ObjectSecurity.PurgeAuditRules(System.Security.Principal.IdentityReference)\n  - System.Security.AccessControl.ObjectSecurity.ReadLock\n  - System.Security.AccessControl.ObjectSecurity.ReadUnlock\n  - System.Security.AccessControl.ObjectSecurity.SetAccessRuleProtection(System.Boolean,System.Boolean)\n  - System.Security.AccessControl.ObjectSecurity.SetAuditRuleProtection(System.Boolean,System.Boolean)\n  - System.Security.AccessControl.ObjectSecurity.SetGroup(System.Security.Principal.IdentityReference)\n  - System.Security.AccessControl.ObjectSecurity.SetOwner(System.Security.Principal.IdentityReference)\n  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm(System.Byte[])\n  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm(System.Byte[],System.Security.AccessControl.AccessControlSections)\n  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm(System.String)\n  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm(System.String,System.Security.AccessControl.AccessControlSections)\n  - System.Security.AccessControl.ObjectSecurity.WriteLock\n  - System.Security.AccessControl.ObjectSecurity.WriteUnlock\n  platform:\n  - net462\n- uid: System.Security.AccessControl.DirectorySecurity.#ctor\n  id: '#ctor'\n  parent: System.Security.AccessControl.DirectorySecurity\n  langs:\n  - csharp\n  name: DirectorySecurity()\n  nameWithType: DirectorySecurity.DirectorySecurity()\n  fullName: System.Security.AccessControl.DirectorySecurity.DirectorySecurity()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Initializes a new instance of the <xref href=\"System.Security.AccessControl.DirectorySecurity\"></xref> class.\n  remarks: Use this constructor when you want to create an empty <xref:System.Security.AccessControl.DirectorySecurity> object that is not based on an existing directory. You can then populate the object with access control information and apply it to a directory.\n  syntax:\n    content: public DirectorySecurity ();\n    parameters: []\n  overload: System.Security.AccessControl.DirectorySecurity.#ctor*\n  exceptions:\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: The current operating system is not Microsoft Windows 2000 or later.\n  platform:\n  - net462\n- uid: System.Security.AccessControl.DirectorySecurity.#ctor(System.String,System.Security.AccessControl.AccessControlSections)\n  id: '#ctor(System.String,System.Security.AccessControl.AccessControlSections)'\n  parent: System.Security.AccessControl.DirectorySecurity\n  langs:\n  - csharp\n  name: DirectorySecurity(String,AccessControlSections)\n  nameWithType: DirectorySecurity.DirectorySecurity(String,AccessControlSections)\n  fullName: System.Security.AccessControl.DirectorySecurity.DirectorySecurity(String,AccessControlSections)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Initializes a new instance of the <xref href=\"System.Security.AccessControl.DirectorySecurity\"></xref> class from a specified directory using the specified values of the <xref href=\"System.Security.AccessControl.AccessControlSections\"></xref> enumeration.\n  remarks: This constructor retrieves the access control information for the specified directory and then creates a <xref:System.Security.AccessControl.DirectorySecurity> object that encapsulates that information. You can then inspect, add, or delete the access control information for the specified directory.\n  syntax:\n    content: public DirectorySecurity (string name, System.Security.AccessControl.AccessControlSections includeSections);\n    parameters:\n    - id: name\n      type: System.String\n      description: The location of a directory to create a <xref href=\"System.Security.AccessControl.DirectorySecurity\"></xref> object from.\n    - id: includeSections\n      type: System.Security.AccessControl.AccessControlSections\n      description: One of the <xref href=\"System.Security.AccessControl.AccessControlSections\"></xref> values that specifies the type of access control list (ACL) information to retrieve.\n  overload: System.Security.AccessControl.DirectorySecurity.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>name</code> parameter is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref:System.IO.Path.InvalidPathChars>.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>name</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: The specified path is invalid, (for example, it is on an unmapped drive).\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: The file specified in the <code>name</code> parameter was not found.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred while opening the directory.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The <code>name</code> parameter is in an invalid format.\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: The current operating system is not Microsoft Windows 2000 or later.\n  - type: System.IO.PathTooLongException\n    commentId: T:System.IO.PathTooLongException\n    description: The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.\n  - type: System.Security.AccessControl.PrivilegeNotHeldException\n    commentId: T:System.Security.AccessControl.PrivilegeNotHeldException\n    description: The current system account does not have administrative privileges.\n  - type: System.SystemException\n    commentId: T:System.SystemException\n    description: The directory could not be found.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: \"The <code>name</code> parameter specified a directory that is read-only.  \\n  \\n -or-  \\n  \\n This operation is not supported on the current platform.  \\n  \\n -or-  \\n  \\n The caller does not have the required permission.\"\n  platform:\n  - net462\nreferences:\n- uid: System.Security.AccessControl.FileSystemSecurity\n  isExternal: false\n  name: System.Security.AccessControl.FileSystemSecurity\n- uid: System.PlatformNotSupportedException\n  isExternal: true\n  name: System.PlatformNotSupportedException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.IO.DirectoryNotFoundException\n  isExternal: true\n  name: System.IO.DirectoryNotFoundException\n- uid: System.IO.FileNotFoundException\n  isExternal: true\n  name: System.IO.FileNotFoundException\n- uid: System.IO.IOException\n  isExternal: true\n  name: System.IO.IOException\n- uid: System.NotSupportedException\n  isExternal: true\n  name: System.NotSupportedException\n- uid: System.IO.PathTooLongException\n  isExternal: true\n  name: System.IO.PathTooLongException\n- uid: System.Security.AccessControl.PrivilegeNotHeldException\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: PrivilegeNotHeldException\n  nameWithType: PrivilegeNotHeldException\n  fullName: System.Security.AccessControl.PrivilegeNotHeldException\n- uid: System.SystemException\n  parent: System\n  isExternal: false\n  name: SystemException\n  nameWithType: SystemException\n  fullName: System.SystemException\n- uid: System.UnauthorizedAccessException\n  isExternal: true\n  name: System.UnauthorizedAccessException\n- uid: System.Security.AccessControl.DirectorySecurity.#ctor\n  parent: System.Security.AccessControl.DirectorySecurity\n  isExternal: false\n  name: DirectorySecurity()\n  nameWithType: DirectorySecurity.DirectorySecurity()\n  fullName: System.Security.AccessControl.DirectorySecurity.DirectorySecurity()\n- uid: System.Security.AccessControl.DirectorySecurity.#ctor(System.String,System.Security.AccessControl.AccessControlSections)\n  parent: System.Security.AccessControl.DirectorySecurity\n  isExternal: false\n  name: DirectorySecurity(String,AccessControlSections)\n  nameWithType: DirectorySecurity.DirectorySecurity(String,AccessControlSections)\n  fullName: System.Security.AccessControl.DirectorySecurity.DirectorySecurity(String,AccessControlSections)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.AccessControl.AccessControlSections\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AccessControlSections\n  nameWithType: AccessControlSections\n  fullName: System.Security.AccessControl.AccessControlSections\n- uid: System.Security.AccessControl.DirectorySecurity.#ctor*\n  parent: System.Security.AccessControl.DirectorySecurity\n  isExternal: false\n  name: DirectorySecurity\n  nameWithType: DirectorySecurity.DirectorySecurity\n"}