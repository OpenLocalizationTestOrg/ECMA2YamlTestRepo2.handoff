{"nodes":[{"pos":[3595,3607],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[5376,5388],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[6184,6196],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[6845,6857],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[7514,7526],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[8806,8818],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[8877,8889],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[9635,9647],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[9713,9725],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[10362,10374],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[11143,11155],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[11835,11847],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[11904,11916],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[12652,12664],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[12713,12725],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[13439,13451],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[13497,13509],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[14175,14187],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[14246,14258],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[14985,14997],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[16387,16399],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[16460,16472],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[17360,17372],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[18364,18376],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[18437,18449],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[19367,19379],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[20270,20282],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[21237,21249],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[22130,22142],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[22199,22211],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[23107,23119],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[23178,23190],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[24084,24096],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[24153,24165],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[25107,25119],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[25181,25193],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[26051,26063],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[26920,26932],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[27837,27849],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[27907,27919],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[28804,28816],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[29499,29511],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[30346,30358],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  id: ReadOnlyCollectionBuilder`1\n  children:\n  - System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.#ctor\n  - System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.#ctor(System.Collections.Generic.IEnumerable{`0})\n  - System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.#ctor(System.Int32)\n  - System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Add(`0)\n  - System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Capacity\n  - System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Clear\n  - System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Contains(`0)\n  - System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.CopyTo(`0[],System.Int32)\n  - System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Count\n  - System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.GetEnumerator\n  - System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.IndexOf(`0)\n  - System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Insert(System.Int32,`0)\n  - System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Item(System.Int32)\n  - System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Remove(`0)\n  - System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.RemoveAt(System.Int32)\n  - System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Reverse\n  - System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Reverse(System.Int32,System.Int32)\n  - System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#Generic#ICollection{T}#IsReadOnly\n  - System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  - System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#IsSynchronized\n  - System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#SyncRoot\n  - System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IEnumerable#GetEnumerator\n  - System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Add(System.Object)\n  - System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Contains(System.Object)\n  - System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IndexOf(System.Object)\n  - System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Insert(System.Int32,System.Object)\n  - System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IsFixedSize\n  - System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IsReadOnly\n  - System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Item(System.Int32)\n  - System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Remove(System.Object)\n  - System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.ToArray\n  - System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.ToReadOnlyCollection\n  langs:\n  - csharp\n  name: ReadOnlyCollectionBuilder<T>\n  nameWithType: ReadOnlyCollectionBuilder<T>\n  fullName: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder<T>\n  type: Class\n  syntax:\n    content: 'public sealed class ReadOnlyCollectionBuilder<T> : System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IList<T>, System.Collections.IList'\n    typeParameters:\n    - id: T\n      description: To be added.\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.Generic.ICollection<T>\n  - System.Collections.Generic.IEnumerable<T>\n  - System.Collections.Generic.IList<T>\n  - System.Collections.IList\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.#ctor\n  id: '#ctor'\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  langs:\n  - csharp\n  name: ReadOnlyCollectionBuilder()\n  nameWithType: ReadOnlyCollectionBuilder<T>.ReadOnlyCollectionBuilder()\n  fullName: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder<T>.ReadOnlyCollectionBuilder()\n  type: Constructor\n  assemblies:\n  - System.Core\n  namespace: System.Runtime.CompilerServices\n  syntax:\n    content: public ReadOnlyCollectionBuilder ();\n    parameters: []\n  overload: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.#ctor(System.Collections.Generic.IEnumerable{`0})\n  id: '#ctor(System.Collections.Generic.IEnumerable{`0})'\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  langs:\n  - csharp\n  name: ReadOnlyCollectionBuilder(IEnumerable<T>)\n  nameWithType: ReadOnlyCollectionBuilder<T>.ReadOnlyCollectionBuilder(IEnumerable<T>)\n  fullName: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder<T>.ReadOnlyCollectionBuilder(IEnumerable<T>)\n  type: Constructor\n  assemblies:\n  - System.Core\n  namespace: System.Runtime.CompilerServices\n  syntax:\n    content: public ReadOnlyCollectionBuilder (System.Collections.Generic.IEnumerable<T> collection);\n    parameters:\n    - id: collection\n      type: System.Collections.Generic.IEnumerable{T}\n      description: To be added.\n  overload: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  langs:\n  - csharp\n  name: ReadOnlyCollectionBuilder(Int32)\n  nameWithType: ReadOnlyCollectionBuilder<T>.ReadOnlyCollectionBuilder(Int32)\n  fullName: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder<T>.ReadOnlyCollectionBuilder(Int32)\n  type: Constructor\n  assemblies:\n  - System.Core\n  namespace: System.Runtime.CompilerServices\n  syntax:\n    content: public ReadOnlyCollectionBuilder (int capacity);\n    parameters:\n    - id: capacity\n      type: System.Int32\n      description: To be added.\n  overload: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Add(`0)\n  id: Add(`0)\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  langs:\n  - csharp\n  name: Add(T)\n  nameWithType: ReadOnlyCollectionBuilder<T>.Add(T)\n  fullName: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder<T>.Add(T)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Runtime.CompilerServices\n  syntax:\n    content: public void Add (T item);\n    parameters:\n    - id: item\n      type: T\n      description: To be added.\n  overload: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Add*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Capacity\n  id: Capacity\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  langs:\n  - csharp\n  name: Capacity\n  nameWithType: ReadOnlyCollectionBuilder<T>.Capacity\n  fullName: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder<T>.Capacity\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Runtime.CompilerServices\n  syntax:\n    content: public int Capacity { get; set; }\n    return:\n      type: System.Int32\n      description: To be added.\n  overload: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Capacity*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Clear\n  id: Clear\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  langs:\n  - csharp\n  name: Clear()\n  nameWithType: ReadOnlyCollectionBuilder<T>.Clear()\n  fullName: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder<T>.Clear()\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Runtime.CompilerServices\n  syntax:\n    content: public void Clear ();\n    parameters: []\n  overload: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Clear*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Contains(`0)\n  id: Contains(`0)\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  langs:\n  - csharp\n  name: Contains(T)\n  nameWithType: ReadOnlyCollectionBuilder<T>.Contains(T)\n  fullName: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder<T>.Contains(T)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Runtime.CompilerServices\n  syntax:\n    content: public bool Contains (T item);\n    parameters:\n    - id: item\n      type: T\n      description: To be added.\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Contains*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.CopyTo(`0[],System.Int32)\n  id: CopyTo(`0[],System.Int32)\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  langs:\n  - csharp\n  name: CopyTo(T[],Int32)\n  nameWithType: ReadOnlyCollectionBuilder<T>.CopyTo(T[],Int32)\n  fullName: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder<T>.CopyTo(T[],Int32)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Runtime.CompilerServices\n  syntax:\n    content: public void CopyTo (T[] array, int arrayIndex);\n    parameters:\n    - id: array\n      type: T[]\n      description: To be added.\n    - id: arrayIndex\n      type: System.Int32\n      description: To be added.\n  overload: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.CopyTo*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Count\n  id: Count\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  langs:\n  - csharp\n  name: Count\n  nameWithType: ReadOnlyCollectionBuilder<T>.Count\n  fullName: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder<T>.Count\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Runtime.CompilerServices\n  syntax:\n    content: public int Count { get; }\n    return:\n      type: System.Int32\n      description: To be added.\n  overload: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Count*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.GetEnumerator\n  id: GetEnumerator\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: ReadOnlyCollectionBuilder<T>.GetEnumerator()\n  fullName: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder<T>.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Runtime.CompilerServices\n  syntax:\n    content: public System.Collections.Generic.IEnumerator<T> GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerator{T}\n      description: To be added.\n  overload: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.GetEnumerator*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.IndexOf(`0)\n  id: IndexOf(`0)\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  langs:\n  - csharp\n  name: IndexOf(T)\n  nameWithType: ReadOnlyCollectionBuilder<T>.IndexOf(T)\n  fullName: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder<T>.IndexOf(T)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Runtime.CompilerServices\n  syntax:\n    content: public int IndexOf (T item);\n    parameters:\n    - id: item\n      type: T\n      description: To be added.\n    return:\n      type: System.Int32\n      description: To be added.\n  overload: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.IndexOf*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Insert(System.Int32,`0)\n  id: Insert(System.Int32,`0)\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  langs:\n  - csharp\n  name: Insert(Int32,T)\n  nameWithType: ReadOnlyCollectionBuilder<T>.Insert(Int32,T)\n  fullName: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder<T>.Insert(Int32,T)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Runtime.CompilerServices\n  syntax:\n    content: public void Insert (int index, T item);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: To be added.\n    - id: item\n      type: T\n      description: To be added.\n  overload: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Insert*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  langs:\n  - csharp\n  name: Item(Int32)\n  nameWithType: ReadOnlyCollectionBuilder<T>.Item(Int32)\n  fullName: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder<T>.Item(Int32)\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Runtime.CompilerServices\n  syntax:\n    content: public T this[int index] { get; set; }\n    parameters:\n    - id: index\n      type: System.Int32\n      description: To be added.\n    return:\n      type: T\n      description: To be added.\n  overload: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Item*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Remove(`0)\n  id: Remove(`0)\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  langs:\n  - csharp\n  name: Remove(T)\n  nameWithType: ReadOnlyCollectionBuilder<T>.Remove(T)\n  fullName: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder<T>.Remove(T)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Runtime.CompilerServices\n  syntax:\n    content: public bool Remove (T item);\n    parameters:\n    - id: item\n      type: T\n      description: To be added.\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Remove*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.RemoveAt(System.Int32)\n  id: RemoveAt(System.Int32)\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  langs:\n  - csharp\n  name: RemoveAt(Int32)\n  nameWithType: ReadOnlyCollectionBuilder<T>.RemoveAt(Int32)\n  fullName: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder<T>.RemoveAt(Int32)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Runtime.CompilerServices\n  syntax:\n    content: public void RemoveAt (int index);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: To be added.\n  overload: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.RemoveAt*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Reverse\n  id: Reverse\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  langs:\n  - csharp\n  name: Reverse()\n  nameWithType: ReadOnlyCollectionBuilder<T>.Reverse()\n  fullName: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder<T>.Reverse()\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Runtime.CompilerServices\n  syntax:\n    content: public void Reverse ();\n    parameters: []\n  overload: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Reverse*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Reverse(System.Int32,System.Int32)\n  id: Reverse(System.Int32,System.Int32)\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  langs:\n  - csharp\n  name: Reverse(Int32,Int32)\n  nameWithType: ReadOnlyCollectionBuilder<T>.Reverse(Int32,Int32)\n  fullName: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder<T>.Reverse(Int32,Int32)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Runtime.CompilerServices\n  syntax:\n    content: public void Reverse (int index, int count);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: To be added.\n    - id: count\n      type: System.Int32\n      description: To be added.\n  overload: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Reverse*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#Generic#ICollection{T}#IsReadOnly\n  id: System#Collections#Generic#ICollection{T}#IsReadOnly\n  isEii: true\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  langs:\n  - csharp\n  name: System.Collections.Generic.ICollection\n  nameWithType: ReadOnlyCollectionBuilder<T>.System.Collections.Generic.ICollection\n  fullName: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder<T>.System.Collections.Generic.ICollection\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Runtime.CompilerServices\n  syntax:\n    content: bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#Generic#ICollection<T>#IsReadOnly*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  isEii: true\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  langs:\n  - csharp\n  name: System.Collections.ICollection.CopyTo(Array,Int32)\n  nameWithType: ReadOnlyCollectionBuilder<T>.System.Collections.ICollection.CopyTo(Array,Int32)\n  fullName: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder<T>.System.Collections.ICollection.CopyTo(Array,Int32)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Runtime.CompilerServices\n  syntax:\n    content: void ICollection.CopyTo (Array array, int index);\n    parameters:\n    - id: array\n      type: System.Array\n      description: To be added.\n    - id: index\n      type: System.Int32\n      description: To be added.\n  overload: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#CopyTo*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#IsSynchronized\n  id: System#Collections#ICollection#IsSynchronized\n  isEii: true\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  langs:\n  - csharp\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: ReadOnlyCollectionBuilder<T>.System.Collections.ICollection.IsSynchronized\n  fullName: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder<T>.System.Collections.ICollection.IsSynchronized\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Runtime.CompilerServices\n  syntax:\n    content: bool System.Collections.ICollection.IsSynchronized { get; }\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#IsSynchronized*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#SyncRoot\n  id: System#Collections#ICollection#SyncRoot\n  isEii: true\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  langs:\n  - csharp\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: ReadOnlyCollectionBuilder<T>.System.Collections.ICollection.SyncRoot\n  fullName: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder<T>.System.Collections.ICollection.SyncRoot\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Runtime.CompilerServices\n  syntax:\n    content: object System.Collections.ICollection.SyncRoot { get; }\n    return:\n      type: System.Object\n      description: To be added.\n  overload: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#SyncRoot*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IEnumerable#GetEnumerator\n  id: System#Collections#IEnumerable#GetEnumerator\n  isEii: true\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  langs:\n  - csharp\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: ReadOnlyCollectionBuilder<T>.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder<T>.System.Collections.IEnumerable.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Runtime.CompilerServices\n  syntax:\n    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: To be added.\n  overload: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IEnumerable#GetEnumerator*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Add(System.Object)\n  id: System#Collections#IList#Add(System.Object)\n  isEii: true\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  langs:\n  - csharp\n  name: System.Collections.IList.Add(Object)\n  nameWithType: ReadOnlyCollectionBuilder<T>.System.Collections.IList.Add(Object)\n  fullName: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder<T>.System.Collections.IList.Add(Object)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Runtime.CompilerServices\n  syntax:\n    content: int IList.Add (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: To be added.\n    return:\n      type: System.Int32\n      description: To be added.\n  overload: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Add*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Contains(System.Object)\n  id: System#Collections#IList#Contains(System.Object)\n  isEii: true\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  langs:\n  - csharp\n  name: System.Collections.IList.Contains(Object)\n  nameWithType: ReadOnlyCollectionBuilder<T>.System.Collections.IList.Contains(Object)\n  fullName: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder<T>.System.Collections.IList.Contains(Object)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Runtime.CompilerServices\n  syntax:\n    content: bool IList.Contains (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: To be added.\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Contains*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IndexOf(System.Object)\n  id: System#Collections#IList#IndexOf(System.Object)\n  isEii: true\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  langs:\n  - csharp\n  name: System.Collections.IList.IndexOf(Object)\n  nameWithType: ReadOnlyCollectionBuilder<T>.System.Collections.IList.IndexOf(Object)\n  fullName: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder<T>.System.Collections.IList.IndexOf(Object)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Runtime.CompilerServices\n  syntax:\n    content: int IList.IndexOf (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: To be added.\n    return:\n      type: System.Int32\n      description: To be added.\n  overload: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IndexOf*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Insert(System.Int32,System.Object)\n  id: System#Collections#IList#Insert(System.Int32,System.Object)\n  isEii: true\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  langs:\n  - csharp\n  name: System.Collections.IList.Insert(Int32,Object)\n  nameWithType: ReadOnlyCollectionBuilder<T>.System.Collections.IList.Insert(Int32,Object)\n  fullName: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder<T>.System.Collections.IList.Insert(Int32,Object)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Runtime.CompilerServices\n  syntax:\n    content: void IList.Insert (int index, object value);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: To be added.\n    - id: value\n      type: System.Object\n      description: To be added.\n  overload: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Insert*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IsFixedSize\n  id: System#Collections#IList#IsFixedSize\n  isEii: true\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  langs:\n  - csharp\n  name: System.Collections.IList.IsFixedSize\n  nameWithType: ReadOnlyCollectionBuilder<T>.System.Collections.IList.IsFixedSize\n  fullName: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder<T>.System.Collections.IList.IsFixedSize\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Runtime.CompilerServices\n  syntax:\n    content: bool System.Collections.IList.IsFixedSize { get; }\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IsFixedSize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IsReadOnly\n  id: System#Collections#IList#IsReadOnly\n  isEii: true\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  langs:\n  - csharp\n  name: System.Collections.IList.IsReadOnly\n  nameWithType: ReadOnlyCollectionBuilder<T>.System.Collections.IList.IsReadOnly\n  fullName: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder<T>.System.Collections.IList.IsReadOnly\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Runtime.CompilerServices\n  syntax:\n    content: bool System.Collections.IList.IsReadOnly { get; }\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IsReadOnly*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Item(System.Int32)\n  id: System#Collections#IList#Item(System.Int32)\n  isEii: true\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  langs:\n  - csharp\n  name: System.Collections.IList.Item(Int32)\n  nameWithType: ReadOnlyCollectionBuilder<T>.System.Collections.IList.Item(Int32)\n  fullName: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder<T>.System.Collections.IList.Item(Int32)\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Runtime.CompilerServices\n  syntax:\n    content: object System.Collections.IList.Item[int index] { get; set; }\n    parameters:\n    - id: index\n      type: System.Int32\n      description: To be added.\n    return:\n      type: System.Object\n      description: To be added.\n  overload: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Item*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Remove(System.Object)\n  id: System#Collections#IList#Remove(System.Object)\n  isEii: true\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  langs:\n  - csharp\n  name: System.Collections.IList.Remove(Object)\n  nameWithType: ReadOnlyCollectionBuilder<T>.System.Collections.IList.Remove(Object)\n  fullName: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder<T>.System.Collections.IList.Remove(Object)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Runtime.CompilerServices\n  syntax:\n    content: void IList.Remove (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: To be added.\n  overload: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Remove*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.ToArray\n  id: ToArray\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  langs:\n  - csharp\n  name: ToArray()\n  nameWithType: ReadOnlyCollectionBuilder<T>.ToArray()\n  fullName: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder<T>.ToArray()\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Runtime.CompilerServices\n  syntax:\n    content: public T[] ToArray ();\n    parameters: []\n    return:\n      type: T[]\n      description: To be added.\n  overload: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.ToArray*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.ToReadOnlyCollection\n  id: ToReadOnlyCollection\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  langs:\n  - csharp\n  name: ToReadOnlyCollection()\n  nameWithType: ReadOnlyCollectionBuilder<T>.ToReadOnlyCollection()\n  fullName: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder<T>.ToReadOnlyCollection()\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Runtime.CompilerServices\n  syntax:\n    content: public System.Collections.ObjectModel.ReadOnlyCollection<T> ToReadOnlyCollection ();\n    parameters: []\n    return:\n      type: System.Collections.ObjectModel.ReadOnlyCollection{T}\n      description: To be added.\n  overload: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.ToReadOnlyCollection*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.#ctor\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  isExternal: false\n  name: ReadOnlyCollectionBuilder()\n  nameWithType: ReadOnlyCollectionBuilder<T>.ReadOnlyCollectionBuilder()\n  fullName: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder<T>.ReadOnlyCollectionBuilder()\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.#ctor(System.Collections.Generic.IEnumerable{`0})\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  isExternal: false\n  name: ReadOnlyCollectionBuilder(IEnumerable<T>)\n  nameWithType: ReadOnlyCollectionBuilder<T>.ReadOnlyCollectionBuilder(IEnumerable<T>)\n  fullName: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder<T>.ReadOnlyCollectionBuilder(IEnumerable<T>)\n- uid: System.Collections.Generic.IEnumerable{T}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IEnumerable<T>\n  nameWithType: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: IEnumerable<T>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: T\n    name: T\n    nameWithType: T\n    fullName: T\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.#ctor(System.Int32)\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  isExternal: false\n  name: ReadOnlyCollectionBuilder(Int32)\n  nameWithType: ReadOnlyCollectionBuilder<T>.ReadOnlyCollectionBuilder(Int32)\n  fullName: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder<T>.ReadOnlyCollectionBuilder(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Add(`0)\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  isExternal: false\n  name: Add(T)\n  nameWithType: ReadOnlyCollectionBuilder<T>.Add(T)\n  fullName: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder<T>.Add(T)\n- uid: T\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Capacity\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  isExternal: false\n  name: Capacity\n  nameWithType: ReadOnlyCollectionBuilder<T>.Capacity\n  fullName: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder<T>.Capacity\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Clear\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  isExternal: false\n  name: Clear()\n  nameWithType: ReadOnlyCollectionBuilder<T>.Clear()\n  fullName: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder<T>.Clear()\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Contains(`0)\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  isExternal: false\n  name: Contains(T)\n  nameWithType: ReadOnlyCollectionBuilder<T>.Contains(T)\n  fullName: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder<T>.Contains(T)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.CopyTo(`0[],System.Int32)\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  isExternal: false\n  name: CopyTo(T[],Int32)\n  nameWithType: ReadOnlyCollectionBuilder<T>.CopyTo(T[],Int32)\n  fullName: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder<T>.CopyTo(T[],Int32)\n- uid: T[]\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T[]\n  spec.csharp:\n  - uid: T\n    name: T\n    nameWithType: T\n    fullName: T[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Count\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  isExternal: false\n  name: Count\n  nameWithType: ReadOnlyCollectionBuilder<T>.Count\n  fullName: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder<T>.Count\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.GetEnumerator\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: ReadOnlyCollectionBuilder<T>.GetEnumerator()\n  fullName: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder<T>.GetEnumerator()\n- uid: System.Collections.Generic.IEnumerator{T}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IEnumerator<T>\n  nameWithType: IEnumerator<T>\n  fullName: System.Collections.Generic.IEnumerator<T>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerator`1\n    name: IEnumerator\n    nameWithType: IEnumerator\n    fullName: IEnumerator<T>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: T\n    name: T\n    nameWithType: T\n    fullName: T\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.IndexOf(`0)\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  isExternal: false\n  name: IndexOf(T)\n  nameWithType: ReadOnlyCollectionBuilder<T>.IndexOf(T)\n  fullName: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder<T>.IndexOf(T)\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Insert(System.Int32,`0)\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  isExternal: false\n  name: Insert(Int32,T)\n  nameWithType: ReadOnlyCollectionBuilder<T>.Insert(Int32,T)\n  fullName: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder<T>.Insert(Int32,T)\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Item(System.Int32)\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  isExternal: false\n  name: Item(Int32)\n  nameWithType: ReadOnlyCollectionBuilder<T>.Item(Int32)\n  fullName: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder<T>.Item(Int32)\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Remove(`0)\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  isExternal: false\n  name: Remove(T)\n  nameWithType: ReadOnlyCollectionBuilder<T>.Remove(T)\n  fullName: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder<T>.Remove(T)\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.RemoveAt(System.Int32)\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  isExternal: false\n  name: RemoveAt(Int32)\n  nameWithType: ReadOnlyCollectionBuilder<T>.RemoveAt(Int32)\n  fullName: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder<T>.RemoveAt(Int32)\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Reverse\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  isExternal: false\n  name: Reverse()\n  nameWithType: ReadOnlyCollectionBuilder<T>.Reverse()\n  fullName: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder<T>.Reverse()\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Reverse(System.Int32,System.Int32)\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  isExternal: false\n  name: Reverse(Int32,Int32)\n  nameWithType: ReadOnlyCollectionBuilder<T>.Reverse(Int32,Int32)\n  fullName: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder<T>.Reverse(Int32,Int32)\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#Generic#ICollection{T}#IsReadOnly\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  isExternal: false\n  name: System.Collections.Generic.ICollection\n  nameWithType: ReadOnlyCollectionBuilder<T>.System.Collections.Generic.ICollection\n  fullName: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder<T>.System.Collections.Generic.ICollection\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  isExternal: false\n  name: System.Collections.ICollection.CopyTo(Array,Int32)\n  nameWithType: ReadOnlyCollectionBuilder<T>.System.Collections.ICollection.CopyTo(Array,Int32)\n  fullName: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder<T>.System.Collections.ICollection.CopyTo(Array,Int32)\n- uid: System.Array\n  parent: System\n  isExternal: true\n  name: Array\n  nameWithType: Array\n  fullName: System.Array\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#IsSynchronized\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  isExternal: false\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: ReadOnlyCollectionBuilder<T>.System.Collections.ICollection.IsSynchronized\n  fullName: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder<T>.System.Collections.ICollection.IsSynchronized\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#SyncRoot\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  isExternal: false\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: ReadOnlyCollectionBuilder<T>.System.Collections.ICollection.SyncRoot\n  fullName: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder<T>.System.Collections.ICollection.SyncRoot\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IEnumerable#GetEnumerator\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: ReadOnlyCollectionBuilder<T>.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder<T>.System.Collections.IEnumerable.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: true\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Add(System.Object)\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  isExternal: false\n  name: System.Collections.IList.Add(Object)\n  nameWithType: ReadOnlyCollectionBuilder<T>.System.Collections.IList.Add(Object)\n  fullName: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder<T>.System.Collections.IList.Add(Object)\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Contains(System.Object)\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  isExternal: false\n  name: System.Collections.IList.Contains(Object)\n  nameWithType: ReadOnlyCollectionBuilder<T>.System.Collections.IList.Contains(Object)\n  fullName: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder<T>.System.Collections.IList.Contains(Object)\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IndexOf(System.Object)\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  isExternal: false\n  name: System.Collections.IList.IndexOf(Object)\n  nameWithType: ReadOnlyCollectionBuilder<T>.System.Collections.IList.IndexOf(Object)\n  fullName: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder<T>.System.Collections.IList.IndexOf(Object)\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Insert(System.Int32,System.Object)\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  isExternal: false\n  name: System.Collections.IList.Insert(Int32,Object)\n  nameWithType: ReadOnlyCollectionBuilder<T>.System.Collections.IList.Insert(Int32,Object)\n  fullName: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder<T>.System.Collections.IList.Insert(Int32,Object)\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IsFixedSize\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  isExternal: false\n  name: System.Collections.IList.IsFixedSize\n  nameWithType: ReadOnlyCollectionBuilder<T>.System.Collections.IList.IsFixedSize\n  fullName: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder<T>.System.Collections.IList.IsFixedSize\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IsReadOnly\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  isExternal: false\n  name: System.Collections.IList.IsReadOnly\n  nameWithType: ReadOnlyCollectionBuilder<T>.System.Collections.IList.IsReadOnly\n  fullName: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder<T>.System.Collections.IList.IsReadOnly\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Item(System.Int32)\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  isExternal: false\n  name: System.Collections.IList.Item(Int32)\n  nameWithType: ReadOnlyCollectionBuilder<T>.System.Collections.IList.Item(Int32)\n  fullName: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder<T>.System.Collections.IList.Item(Int32)\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Remove(System.Object)\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  isExternal: false\n  name: System.Collections.IList.Remove(Object)\n  nameWithType: ReadOnlyCollectionBuilder<T>.System.Collections.IList.Remove(Object)\n  fullName: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder<T>.System.Collections.IList.Remove(Object)\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.ToArray\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  isExternal: false\n  name: ToArray()\n  nameWithType: ReadOnlyCollectionBuilder<T>.ToArray()\n  fullName: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder<T>.ToArray()\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.ToReadOnlyCollection\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  isExternal: false\n  name: ToReadOnlyCollection()\n  nameWithType: ReadOnlyCollectionBuilder<T>.ToReadOnlyCollection()\n  fullName: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder<T>.ToReadOnlyCollection()\n- uid: System.Collections.ObjectModel.ReadOnlyCollection{T}\n  parent: System.Collections.ObjectModel\n  isExternal: true\n  name: ReadOnlyCollection<T>\n  nameWithType: ReadOnlyCollection<T>\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>\n  spec.csharp:\n  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n    name: ReadOnlyCollection\n    nameWithType: ReadOnlyCollection\n    fullName: ReadOnlyCollection<T>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: T\n    name: T\n    nameWithType: T\n    fullName: T\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.#ctor*\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  isExternal: false\n  name: ReadOnlyCollectionBuilder<T>\n  nameWithType: ReadOnlyCollectionBuilder<T>.ReadOnlyCollectionBuilder<T>\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Add*\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  isExternal: false\n  name: Add\n  nameWithType: ReadOnlyCollectionBuilder<T>.Add\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Capacity*\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  isExternal: false\n  name: Capacity\n  nameWithType: ReadOnlyCollectionBuilder<T>.Capacity\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Clear*\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  isExternal: false\n  name: Clear\n  nameWithType: ReadOnlyCollectionBuilder<T>.Clear\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Contains*\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  isExternal: false\n  name: Contains\n  nameWithType: ReadOnlyCollectionBuilder<T>.Contains\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.CopyTo*\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  isExternal: false\n  name: CopyTo\n  nameWithType: ReadOnlyCollectionBuilder<T>.CopyTo\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Count*\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  isExternal: false\n  name: Count\n  nameWithType: ReadOnlyCollectionBuilder<T>.Count\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.GetEnumerator*\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  isExternal: false\n  name: GetEnumerator\n  nameWithType: ReadOnlyCollectionBuilder<T>.GetEnumerator\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.IndexOf*\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  isExternal: false\n  name: IndexOf\n  nameWithType: ReadOnlyCollectionBuilder<T>.IndexOf\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Insert*\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  isExternal: false\n  name: Insert\n  nameWithType: ReadOnlyCollectionBuilder<T>.Insert\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Item*\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  isExternal: false\n  name: Item\n  nameWithType: ReadOnlyCollectionBuilder<T>.Item\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Remove*\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  isExternal: false\n  name: Remove\n  nameWithType: ReadOnlyCollectionBuilder<T>.Remove\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.RemoveAt*\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  isExternal: false\n  name: RemoveAt\n  nameWithType: ReadOnlyCollectionBuilder<T>.RemoveAt\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Reverse*\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  isExternal: false\n  name: Reverse\n  nameWithType: ReadOnlyCollectionBuilder<T>.Reverse\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#Generic#ICollection<T>#IsReadOnly*\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  isExternal: false\n  name: System.Collections.Generic.ICollection<T>.IsReadOnly\n  nameWithType: ReadOnlyCollectionBuilder<T>.System.Collections.Generic.ICollection<T>.IsReadOnly\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#CopyTo*\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  isExternal: false\n  name: System.Collections.ICollection.CopyTo\n  nameWithType: ReadOnlyCollectionBuilder<T>.System.Collections.ICollection.CopyTo\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#IsSynchronized*\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  isExternal: false\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: ReadOnlyCollectionBuilder<T>.System.Collections.ICollection.IsSynchronized\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#SyncRoot*\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  isExternal: false\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: ReadOnlyCollectionBuilder<T>.System.Collections.ICollection.SyncRoot\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IEnumerable#GetEnumerator*\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator\n  nameWithType: ReadOnlyCollectionBuilder<T>.System.Collections.IEnumerable.GetEnumerator\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Add*\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  isExternal: false\n  name: System.Collections.IList.Add\n  nameWithType: ReadOnlyCollectionBuilder<T>.System.Collections.IList.Add\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Contains*\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  isExternal: false\n  name: System.Collections.IList.Contains\n  nameWithType: ReadOnlyCollectionBuilder<T>.System.Collections.IList.Contains\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IndexOf*\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  isExternal: false\n  name: System.Collections.IList.IndexOf\n  nameWithType: ReadOnlyCollectionBuilder<T>.System.Collections.IList.IndexOf\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Insert*\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  isExternal: false\n  name: System.Collections.IList.Insert\n  nameWithType: ReadOnlyCollectionBuilder<T>.System.Collections.IList.Insert\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IsFixedSize*\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  isExternal: false\n  name: System.Collections.IList.IsFixedSize\n  nameWithType: ReadOnlyCollectionBuilder<T>.System.Collections.IList.IsFixedSize\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IsReadOnly*\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  isExternal: false\n  name: System.Collections.IList.IsReadOnly\n  nameWithType: ReadOnlyCollectionBuilder<T>.System.Collections.IList.IsReadOnly\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Item*\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  isExternal: false\n  name: System.Collections.IList.Item\n  nameWithType: ReadOnlyCollectionBuilder<T>.System.Collections.IList.Item\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Remove*\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  isExternal: false\n  name: System.Collections.IList.Remove\n  nameWithType: ReadOnlyCollectionBuilder<T>.System.Collections.IList.Remove\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.ToArray*\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  isExternal: false\n  name: ToArray\n  nameWithType: ReadOnlyCollectionBuilder<T>.ToArray\n- uid: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.ToReadOnlyCollection*\n  parent: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1\n  isExternal: false\n  name: ToReadOnlyCollection\n  nameWithType: ReadOnlyCollectionBuilder<T>.ToReadOnlyCollection\n"}