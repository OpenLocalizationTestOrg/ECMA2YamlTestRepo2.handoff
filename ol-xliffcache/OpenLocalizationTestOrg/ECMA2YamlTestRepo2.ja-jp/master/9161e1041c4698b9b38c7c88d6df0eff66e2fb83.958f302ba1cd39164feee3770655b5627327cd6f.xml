{"nodes":[{"pos":[335,483],"content":"Indicates that the modified garbage collection reference represents a reference parameter within a method signature. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Indicates that the modified garbage collection reference represents a reference parameter within a method signature. This class cannot be inherited.","pos":[0,148],"nodes":[{"content":"Indicates that the modified garbage collection reference represents a reference parameter within a method signature.","pos":[0,116]},{"content":"This class cannot be inherited.","pos":[117,148]}]}]},{"pos":[496,2003],"content":"The C++ compiler uses the IsImplicitlyDereferenced modifier to distinguish reference classes that are passed by managed reference from those passed by managed pointer.  The IsImplicitlyDereferenced class and its partner, the <xref:System.Runtime.CompilerServices.IsExplicitlyDereferenced> class, disambiguate reference parameters from pointer parameters.       Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.  When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.  Compilers can apply custom modifiers to methods, parameters, and return values.  The JIT compiler must respond to required modifiers but can ignore optional modifiers.       You can emit custom modifiers into metadata using one of the following techniques:      -   Using methods in the <xref:System.Reflection.Emit.TypeBuilder> class such as <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, and <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.      -   Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to `modopt` and `modreq`, and assembling the file with the [Ilasm.exe (IL Assembler)](~/add/includes/ajax-current-ext-md.md).      -   Using the unmanaged reflection API.","needQuote":false,"needEscape":true,"nodes":[{"content":"The C++ compiler uses the IsImplicitlyDereferenced modifier to distinguish reference classes that are passed by managed reference from those passed by managed pointer.","pos":[0,167]},{"content":"The IsImplicitlyDereferenced class and its partner, the &lt;xref:System.Runtime.CompilerServices.IsExplicitlyDereferenced&gt; class, disambiguate reference parameters from pointer parameters.","pos":[169,354],"source":"  The IsImplicitlyDereferenced class and its partner, the <xref:System.Runtime.CompilerServices.IsExplicitlyDereferenced> class, disambiguate reference parameters from pointer parameters."},{"content":"Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.","pos":[361,524]},{"content":"When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.","pos":[526,638]},{"content":"Compilers can apply custom modifiers to methods, parameters, and return values.","pos":[640,719]},{"content":"The JIT compiler must respond to required modifiers but can ignore optional modifiers.","pos":[721,807]},{"content":"You can emit custom modifiers into metadata using one of the following techniques:      -   Using methods in the &lt;xref:System.Reflection.Emit.TypeBuilder&gt; class such as &lt;xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A&gt;, &lt;xref:System.Reflection.Emit.TypeBuilder.DefineField%2A&gt;, &lt;xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A&gt;, and &lt;xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A&gt;.","pos":[814,1228],"source":"       You can emit custom modifiers into metadata using one of the following techniques:      -   Using methods in the <xref:System.Reflection.Emit.TypeBuilder> class such as <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, and <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>."},{"content":"-   Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to <ph id=\"ph1\">`modopt`</ph> and <ph id=\"ph2\">`modreq`</ph>, and assembling the file with the <bpt id=\"p1\">[</bpt>Ilasm.exe (IL Assembler)<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[1234,1452],"source":"      -   Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to `modopt` and `modreq`, and assembling the file with the [Ilasm.exe (IL Assembler)](~/add/includes/ajax-current-ext-md.md)."},{"content":"-   Using the unmanaged reflection API.","pos":[1458,1497]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Runtime.CompilerServices.IsImplicitlyDereferenced\n  id: IsImplicitlyDereferenced\n  children: []\n  langs:\n  - csharp\n  name: IsImplicitlyDereferenced\n  nameWithType: IsImplicitlyDereferenced\n  fullName: System.Runtime.CompilerServices.IsImplicitlyDereferenced\n  type: Class\n  summary: Indicates that the modified garbage collection reference represents a reference parameter within a method signature. This class cannot be inherited.\n  remarks: \"The C++ compiler uses the IsImplicitlyDereferenced modifier to distinguish reference classes that are passed by managed reference from those passed by managed pointer.  The IsImplicitlyDereferenced class and its partner, the <xref:System.Runtime.CompilerServices.IsExplicitlyDereferenced> class, disambiguate reference parameters from pointer parameters.  \\n  \\n Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.  When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.  Compilers can apply custom modifiers to methods, parameters, and return values.  The JIT compiler must respond to required modifiers but can ignore optional modifiers.  \\n  \\n You can emit custom modifiers into metadata using one of the following techniques:  \\n  \\n-   Using methods in the <xref:System.Reflection.Emit.TypeBuilder> class such as <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, and <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.  \\n  \\n-   Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to `modopt` and `modreq`, and assembling the file with the [Ilasm.exe (IL Assembler)](~/add/includes/ajax-current-ext-md.md).  \\n  \\n-   Using the unmanaged reflection API.\"\n  example:\n  - \"The following example demonstrates how to emit an IsImplicitlyDereferenced object into an assembly using reflection.  \\n  \\n [!code-cpp[Runtime.CompilerServices.IsImplicitlyDereferenced#1](~/add/codesnippet/cpp/t-system.runtime.compile_8_1.cpp)]\"\n  syntax:\n    content: public static class IsImplicitlyDereferenced\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n"}