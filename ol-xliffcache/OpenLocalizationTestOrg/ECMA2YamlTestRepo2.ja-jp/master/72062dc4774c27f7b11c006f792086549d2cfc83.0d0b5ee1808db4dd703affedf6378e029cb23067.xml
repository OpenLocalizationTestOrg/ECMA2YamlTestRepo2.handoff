{"nodes":[{"pos":[1133,1218],"content":"Represents a stack trace, which is an ordered collection of one or more stack frames.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents a stack trace, which is an ordered collection of one or more stack frames.","pos":[0,85]}]},{"pos":[1231,1693],"content":"StackTrace information will be most informative with Debug build configurations. By default, Debug builds include debug symbols, while Release builds do not. The debug symbols contain most of the file, method name, line number, and column information used in constructing <xref:System.Diagnostics.StackFrame> and StackTrace objects.       StackTrace might not report as many method calls as expected, due to code transformations that occur during optimization.","needQuote":false,"needEscape":true,"nodes":[{"content":"StackTrace information will be most informative with Debug build configurations. By default, Debug builds include debug symbols, while Release builds do not. The debug symbols contain most of the file, method name, line number, and column information used in constructing <xref:System.Diagnostics.StackFrame> and StackTrace objects.       StackTrace might not report as many method calls as expected, due to code transformations that occur during optimization.","pos":[0,460],"nodes":[{"content":"StackTrace information will be most informative with Debug build configurations.","pos":[0,80]},{"content":"By default, Debug builds include debug symbols, while Release builds do not.","pos":[81,157]},{"content":"The debug symbols contain most of the file, method name, line number, and column information used in constructing &lt;xref:System.Diagnostics.StackFrame&gt; and StackTrace objects.","pos":[158,332],"source":" The debug symbols contain most of the file, method name, line number, and column information used in constructing <xref:System.Diagnostics.StackFrame> and StackTrace objects."},{"content":"StackTrace might not report as many method calls as expected, due to code transformations that occur during optimization.","pos":[339,460]}]}]},{"pos":[2690,2805],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.StackTrace\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class from the caller's frame.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Diagnostics.StackTrace\"></xref> class from the caller's frame."},{"pos":[2818,3098],"content":"The <xref:System.Diagnostics.StackTrace> is created with the caller's current thread, and does not contain file name, line number, or column information.       Use this default constructor when you want a complete trace with only summary method information about the call stack.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <xref:System.Diagnostics.StackTrace> is created with the caller's current thread, and does not contain file name, line number, or column information.       Use this default constructor when you want a complete trace with only summary method information about the call stack.","pos":[0,278],"nodes":[{"content":"The &lt;xref:System.Diagnostics.StackTrace&gt; is created with the caller's current thread, and does not contain file name, line number, or column information.","pos":[0,153],"source":"The <xref:System.Diagnostics.StackTrace> is created with the caller's current thread, and does not contain file name, line number, or column information."},{"content":"Use this default constructor when you want a complete trace with only summary method information about the call stack.","pos":[160,278]}]}]},{"pos":[4020,4176],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.StackTrace\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class from the caller's frame, optionally capturing source information.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Diagnostics.StackTrace\"></xref> class from the caller's frame, optionally capturing source information."},{"pos":[4188,4273],"content":"The <xref:System.Diagnostics.StackTrace> is created with the caller's current thread.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Diagnostics.StackTrace&gt; is created with the caller's current thread.","pos":[0,85],"source":"The <xref:System.Diagnostics.StackTrace> is created with the caller's current thread."}]},{"pos":[4832,5025],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to capture the file name, line number, and column number; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to capture the file name, line number, and column number; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[5530,5650],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.StackTrace\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class that contains a single frame.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Diagnostics.StackTrace\"></xref> class that contains a single frame."},{"pos":[5662,5739],"content":"Use this constructor when you do not want the overhead of a full stack trace.","needQuote":true,"needEscape":true,"nodes":[{"content":"Use this constructor when you do not want the overhead of a full stack trace.","pos":[0,77]}]},{"pos":[6297,6389],"content":"The frame that the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.StackTrace\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object should contain.","needQuote":true,"needEscape":true,"source":"The frame that the <xref href=\"System.Diagnostics.StackTrace\"></xref> object should contain."},{"pos":[6865,6992],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.StackTrace\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class using the provided exception object.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Diagnostics.StackTrace\"></xref> class using the provided exception object."},{"pos":[7005,7242],"content":"The <xref:System.Diagnostics.StackTrace> is created with the caller's current thread, and does not contain file name, line number, or column information.       The resulting stack trace describes the stack at the time of the exception.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <xref:System.Diagnostics.StackTrace> is created with the caller's current thread, and does not contain file name, line number, or column information.       The resulting stack trace describes the stack at the time of the exception.","pos":[0,235],"nodes":[{"content":"The &lt;xref:System.Diagnostics.StackTrace&gt; is created with the caller's current thread, and does not contain file name, line number, or column information.","pos":[0,153],"source":"The <xref:System.Diagnostics.StackTrace> is created with the caller's current thread, and does not contain file name, line number, or column information."},{"content":"The resulting stack trace describes the stack at the time of the exception.","pos":[160,235]}]}]},{"pos":[7376,7437],"content":"The exception object from which to construct the stack trace.","needQuote":true,"needEscape":true,"nodes":[{"content":"The exception object from which to construct the stack trace.","pos":[0,61]}]},{"pos":[7603,7696],"content":"The parameter <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">e</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The parameter <code>e</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[8086,8242],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.StackTrace\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class from the caller's frame, skipping the specified number of frames.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Diagnostics.StackTrace\"></xref> class from the caller's frame, skipping the specified number of frames."},{"pos":[8255,8623],"content":"The <xref:System.Diagnostics.StackTrace> is created with the caller's current thread, and does not contain file name, line number, or column information.       If the number of frames to skip is greater than or equal to the total number of frames on the call stack at the time the instance is created, the <xref:System.Diagnostics.StackTrace> will contain no frames.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <xref:System.Diagnostics.StackTrace> is created with the caller's current thread, and does not contain file name, line number, or column information.       If the number of frames to skip is greater than or equal to the total number of frames on the call stack at the time the instance is created, the <xref:System.Diagnostics.StackTrace> will contain no frames.","pos":[0,366],"nodes":[{"content":"The &lt;xref:System.Diagnostics.StackTrace&gt; is created with the caller's current thread, and does not contain file name, line number, or column information.","pos":[0,153],"source":"The <xref:System.Diagnostics.StackTrace> is created with the caller's current thread, and does not contain file name, line number, or column information."},{"content":"If the number of frames to skip is greater than or equal to the total number of frames on the call stack at the time the instance is created, the &lt;xref:System.Diagnostics.StackTrace&gt; will contain no frames.","pos":[160,366],"source":"       If the number of frames to skip is greater than or equal to the total number of frames on the call stack at the time the instance is created, the <xref:System.Diagnostics.StackTrace> will contain no frames."}]}]},{"pos":[8765,8829],"content":"The number of frames up the stack from which to start the trace.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of frames up the stack from which to start the trace.","pos":[0,64]}]},{"pos":[9007,9057],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">skipFrames</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is negative.","needQuote":true,"needEscape":true,"source":"The <code>skipFrames</code> parameter is negative."},{"pos":[9521,9693],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.StackTrace\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class, using the provided exception object and optionally capturing source information.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Diagnostics.StackTrace\"></xref> class, using the provided exception object and optionally capturing source information."},{"pos":[9705,9780],"content":"The resulting stack trace describes the stack at the time of the exception.","needQuote":true,"needEscape":true,"nodes":[{"content":"The resulting stack trace describes the stack at the time of the exception.","pos":[0,75]}]},{"pos":[9933,9994],"content":"The exception object from which to construct the stack trace.","needQuote":true,"needEscape":true,"nodes":[{"content":"The exception object from which to construct the stack trace.","pos":[0,61]}]},{"pos":[10065,10258],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to capture the file name, line number, and column number; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to capture the file name, line number, and column number; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[10424,10517],"content":"The parameter <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">e</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The parameter <code>e</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[10971,11142],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.StackTrace\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class using the provided exception object and skipping the specified number of frames.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Diagnostics.StackTrace\"></xref> class using the provided exception object and skipping the specified number of frames."},{"pos":[11155,11558],"content":"The <xref:System.Diagnostics.StackTrace> does not contain file name, line number, or column information.       The resulting stack trace describes the stack at the time of the exception.       If the number of frames to skip is greater than or equal to the total number of frames on the call stack at the time the instance is created, the <xref:System.Diagnostics.StackTrace> will contain no frames.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <xref:System.Diagnostics.StackTrace> does not contain file name, line number, or column information.       The resulting stack trace describes the stack at the time of the exception.       If the number of frames to skip is greater than or equal to the total number of frames on the call stack at the time the instance is created, the <xref:System.Diagnostics.StackTrace> will contain no frames.","pos":[0,399],"nodes":[{"content":"The &lt;xref:System.Diagnostics.StackTrace&gt; does not contain file name, line number, or column information.","pos":[0,104],"source":"The <xref:System.Diagnostics.StackTrace> does not contain file name, line number, or column information."},{"content":"The resulting stack trace describes the stack at the time of the exception.","pos":[111,186]},{"content":"If the number of frames to skip is greater than or equal to the total number of frames on the call stack at the time the instance is created, the &lt;xref:System.Diagnostics.StackTrace&gt; will contain no frames.","pos":[193,399],"source":"       If the number of frames to skip is greater than or equal to the total number of frames on the call stack at the time the instance is created, the <xref:System.Diagnostics.StackTrace> will contain no frames."}]}]},{"pos":[11708,11769],"content":"The exception object from which to construct the stack trace.","needQuote":true,"needEscape":true,"nodes":[{"content":"The exception object from which to construct the stack trace.","pos":[0,61]}]},{"pos":[11835,11899],"content":"The number of frames up the stack from which to start the trace.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of frames up the stack from which to start the trace.","pos":[0,64]}]},{"pos":[12065,12158],"content":"The parameter <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">e</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The parameter <code>e</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[12273,12323],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">skipFrames</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is negative.","needQuote":true,"needEscape":true,"source":"The <code>skipFrames</code> parameter is negative."},{"pos":[12767,12967],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.StackTrace\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class from the caller's frame, skipping the specified number of frames and optionally capturing source information.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Diagnostics.StackTrace\"></xref> class from the caller's frame, skipping the specified number of frames and optionally capturing source information."},{"pos":[12979,13185],"content":"If the number of frames to skip is greater than or equal to the total number of frames on the call stack at the time the instance is created, the <xref:System.Diagnostics.StackTrace> will contain no frames.","needQuote":true,"needEscape":true,"nodes":[{"content":"If the number of frames to skip is greater than or equal to the total number of frames on the call stack at the time the instance is created, the &lt;xref:System.Diagnostics.StackTrace&gt; will contain no frames.","pos":[0,206],"source":"If the number of frames to skip is greater than or equal to the total number of frames on the call stack at the time the instance is created, the <xref:System.Diagnostics.StackTrace> will contain no frames."}]},{"pos":[13755,13819],"content":"The number of frames up the stack from which to start the trace.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of frames up the stack from which to start the trace.","pos":[0,64]}]},{"pos":[13890,14083],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to capture the file name, line number, and column number; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to capture the file name, line number, and column number; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[14261,14311],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">skipFrames</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is negative.","needQuote":true,"needEscape":true,"source":"The <code>skipFrames</code> parameter is negative."},{"pos":[14781,14983],"content":"Initializes a new instance of the <xref href=\"System.Diagnostics.StackTrace\"></xref> class for a specific thread, optionally capturing source information.       Do not use this constructor overload.","needQuote":false,"needEscape":true,"nodes":[{"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.StackTrace\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class for a specific thread, optionally capturing source information.","pos":[0,154],"source":"Initializes a new instance of the <xref href=\"System.Diagnostics.StackTrace\"></xref> class for a specific thread, optionally capturing source information."},{"content":"Do not use this constructor overload.","pos":[161,198]}]},{"pos":[15742,15784],"content":"The thread whose stack trace is requested.","needQuote":true,"needEscape":true,"nodes":[{"content":"The thread whose stack trace is requested.","pos":[0,42]}]},{"pos":[15854,16047],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to capture the file name, line number, and column number; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to capture the file name, line number, and column number; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[16231,16285],"content":"The thread <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">targetThread</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not suspended.","needQuote":true,"needEscape":true,"source":"The thread <code>targetThread</code> is not suspended."},{"pos":[16793,17005],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.StackTrace\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class using the provided exception object, skipping the specified number of frames and optionally capturing source information.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Diagnostics.StackTrace\"></xref> class using the provided exception object, skipping the specified number of frames and optionally capturing source information."},{"pos":[17018,17308],"content":"The resulting stack trace describes the stack at the time of the exception.       If the number of frames to skip is greater than or equal to the total number of frames on the call stack at the time the instance is created, the <xref:System.Diagnostics.StackTrace> will contain no frames.","needQuote":false,"needEscape":true,"nodes":[{"content":"The resulting stack trace describes the stack at the time of the exception.       If the number of frames to skip is greater than or equal to the total number of frames on the call stack at the time the instance is created, the <xref:System.Diagnostics.StackTrace> will contain no frames.","pos":[0,288],"nodes":[{"content":"The resulting stack trace describes the stack at the time of the exception.","pos":[0,75]},{"content":"If the number of frames to skip is greater than or equal to the total number of frames on the call stack at the time the instance is created, the &lt;xref:System.Diagnostics.StackTrace&gt; will contain no frames.","pos":[82,288],"source":"       If the number of frames to skip is greater than or equal to the total number of frames on the call stack at the time the instance is created, the <xref:System.Diagnostics.StackTrace> will contain no frames."}]}]},{"pos":[17478,17539],"content":"The exception object from which to construct the stack trace.","needQuote":true,"needEscape":true,"nodes":[{"content":"The exception object from which to construct the stack trace.","pos":[0,61]}]},{"pos":[17605,17669],"content":"The number of frames up the stack from which to start the trace.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of frames up the stack from which to start the trace.","pos":[0,64]}]},{"pos":[17740,17933],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to capture the file name, line number, and column number; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to capture the file name, line number, and column number; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[18099,18192],"content":"The parameter <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">e</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The parameter <code>e</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[18307,18357],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">skipFrames</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is negative.","needQuote":true,"needEscape":true,"source":"The <code>skipFrames</code> parameter is negative."},{"pos":[18703,18748],"content":"Gets the number of frames in the stack trace.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the number of frames in the stack trace.","pos":[0,45]}]},{"pos":[19266,19306],"content":"The number of frames in the stack trace.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of frames in the stack trace.","pos":[0,40]}]},{"pos":[19760,19791],"content":"Gets the specified stack frame.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the specified stack frame.","pos":[0,31]}]},{"pos":[19803,19881],"content":"Stack frames are numbered starting at 0, which is the last stack frame pushed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Stack frames are numbered starting at 0, which is the last stack frame pushed.","pos":[0,78]}]},{"pos":[20442,20481],"content":"The index of the stack frame requested.","needQuote":true,"needEscape":true,"nodes":[{"content":"The index of the stack frame requested.","pos":[0,39]}]},{"pos":[20555,20581],"content":"The specified stack frame.","needQuote":true,"needEscape":true,"nodes":[{"content":"The specified stack frame.","pos":[0,26]}]},{"pos":[20995,21057],"content":"Returns a copy of all stack frames in the current stack trace.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a copy of all stack frames in the current stack trace.","pos":[0,62]}]},{"pos":[21070,22338],"content":"Use the returned <xref:System.Diagnostics.StackFrame> array to enumerate and examine function calls in the <xref:System.Diagnostics.StackTrace>. The length of the returned array is equal to the <xref:System.Diagnostics.StackTrace.FrameCount%2A> property value.       The <xref:System.Diagnostics.StackFrame> array elements are in reverse chronological order. The <xref:System.Diagnostics.StackFrame> at array index 0 represents the most recent function call in the stack trace and the last frame pushed onto the call stack. The <xref:System.Diagnostics.StackFrame> at array index <xref:System.Diagnostics.StackTrace.FrameCount%2A> minus 1 represents the oldest function call in the stack trace and the first frame pushed onto the call stack.       Use the GetFrames method to obtain all stack frames in a stack trace; use the <xref:System.Diagnostics.StackTrace.GetFrame%2A> method to obtain a specific stack frame in a stack trace. The <xref:System.Diagnostics.StackFrame> indexes are ordered alike by the two methods. For example, the <xref:System.Diagnostics.StackFrame> at index 0 in the array returned by GetFrames is equivalent to the <xref:System.Diagnostics.StackFrame> returned by <xref:System.Diagnostics.StackTrace.GetFrame%2A> with an input index of 0.","needQuote":false,"needEscape":true,"nodes":[{"content":"Use the returned <xref:System.Diagnostics.StackFrame> array to enumerate and examine function calls in the <xref:System.Diagnostics.StackTrace>. The length of the returned array is equal to the <xref:System.Diagnostics.StackTrace.FrameCount%2A> property value.       The <xref:System.Diagnostics.StackFrame> array elements are in reverse chronological order. The <xref:System.Diagnostics.StackFrame> at array index 0 represents the most recent function call in the stack trace and the last frame pushed onto the call stack. The <xref:System.Diagnostics.StackFrame> at array index <xref:System.Diagnostics.StackTrace.FrameCount%2A> minus 1 represents the oldest function call in the stack trace and the first frame pushed onto the call stack.       Use the GetFrames method to obtain all stack frames in a stack trace; use the <xref:System.Diagnostics.StackTrace.GetFrame%2A> method to obtain a specific stack frame in a stack trace. The <xref:System.Diagnostics.StackFrame> indexes are ordered alike by the two methods. For example, the <xref:System.Diagnostics.StackFrame> at index 0 in the array returned by GetFrames is equivalent to the <xref:System.Diagnostics.StackFrame> returned by <xref:System.Diagnostics.StackTrace.GetFrame%2A> with an input index of 0.","pos":[0,1264],"nodes":[{"content":"Use the returned &lt;xref:System.Diagnostics.StackFrame&gt; array to enumerate and examine function calls in the &lt;xref:System.Diagnostics.StackTrace&gt;.","pos":[0,144],"source":"Use the returned <xref:System.Diagnostics.StackFrame> array to enumerate and examine function calls in the <xref:System.Diagnostics.StackTrace>."},{"content":"The length of the returned array is equal to the &lt;xref:System.Diagnostics.StackTrace.FrameCount%2A&gt; property value.","pos":[145,260],"source":" The length of the returned array is equal to the <xref:System.Diagnostics.StackTrace.FrameCount%2A> property value."},{"content":"The &lt;xref:System.Diagnostics.StackFrame&gt; array elements are in reverse chronological order.","pos":[267,358],"source":"       The <xref:System.Diagnostics.StackFrame> array elements are in reverse chronological order."},{"content":"The &lt;xref:System.Diagnostics.StackFrame&gt; at array index 0 represents the most recent function call in the stack trace and the last frame pushed onto the call stack.","pos":[359,523],"source":" The <xref:System.Diagnostics.StackFrame> at array index 0 represents the most recent function call in the stack trace and the last frame pushed onto the call stack."},{"content":"The &lt;xref:System.Diagnostics.StackFrame&gt; at array index &lt;xref:System.Diagnostics.StackTrace.FrameCount%2A&gt; minus 1 represents the oldest function call in the stack trace and the first frame pushed onto the call stack.","pos":[524,741],"source":" The <xref:System.Diagnostics.StackFrame> at array index <xref:System.Diagnostics.StackTrace.FrameCount%2A> minus 1 represents the oldest function call in the stack trace and the first frame pushed onto the call stack."},{"content":"Use the GetFrames method to obtain all stack frames in a stack trace; use the &lt;xref:System.Diagnostics.StackTrace.GetFrame%2A&gt; method to obtain a specific stack frame in a stack trace.","pos":[748,932],"source":"       Use the GetFrames method to obtain all stack frames in a stack trace; use the <xref:System.Diagnostics.StackTrace.GetFrame%2A> method to obtain a specific stack frame in a stack trace."},{"content":"The &lt;xref:System.Diagnostics.StackFrame&gt; indexes are ordered alike by the two methods.","pos":[933,1019],"source":" The <xref:System.Diagnostics.StackFrame> indexes are ordered alike by the two methods."},{"content":"For example, the &lt;xref:System.Diagnostics.StackFrame&gt; at index 0 in the array returned by GetFrames is equivalent to the &lt;xref:System.Diagnostics.StackFrame&gt; returned by &lt;xref:System.Diagnostics.StackTrace.GetFrame%2A&gt; with an input index of 0.","pos":[1020,1264],"source":" For example, the <xref:System.Diagnostics.StackFrame> at index 0 in the array returned by GetFrames is equivalent to the <xref:System.Diagnostics.StackFrame> returned by <xref:System.Diagnostics.StackTrace.GetFrame%2A> with an input index of 0."}]}]},{"pos":[22930,23049],"content":"An array of type <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.StackFrame\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> representing the function calls in the stack trace.","needQuote":true,"needEscape":true,"source":"An array of type <xref href=\"System.Diagnostics.StackFrame\"></xref> representing the function calls in the stack trace."},{"pos":[23487,23586],"content":"Defines the default for the number of methods to omit from the stack trace. This field is constant.","needQuote":true,"needEscape":true,"nodes":[{"content":"Defines the default for the number of methods to omit from the stack trace. This field is constant.","pos":[0,99],"nodes":[{"content":"Defines the default for the number of methods to omit from the stack trace.","pos":[0,75]},{"content":"This field is constant.","pos":[76,99]}]}]},{"pos":[23598,23719],"content":"The default value for the number of methods to skip at the beginning of the stack trace. The value of this constant is 0.","needQuote":true,"needEscape":true,"nodes":[{"content":"The default value for the number of methods to skip at the beginning of the stack trace. The value of this constant is 0.","pos":[0,121],"nodes":[{"content":"The default value for the number of methods to skip at the beginning of the stack trace.","pos":[0,88]},{"content":"The value of this constant is 0.","pos":[89,121]}]}]},{"pos":[23837,23849],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[24206,24258],"content":"Builds a readable representation of the stack trace.","needQuote":true,"needEscape":true,"nodes":[{"content":"Builds a readable representation of the stack trace.","pos":[0,52]}]},{"pos":[24795,24840],"content":"A readable representation of the stack trace.","needQuote":true,"needEscape":true,"nodes":[{"content":"A readable representation of the stack trace.","pos":[0,45]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Diagnostics.StackTrace\n  id: StackTrace\n  children:\n  - System.Diagnostics.StackTrace.#ctor\n  - System.Diagnostics.StackTrace.#ctor(System.Boolean)\n  - System.Diagnostics.StackTrace.#ctor(System.Diagnostics.StackFrame)\n  - System.Diagnostics.StackTrace.#ctor(System.Exception)\n  - System.Diagnostics.StackTrace.#ctor(System.Int32)\n  - System.Diagnostics.StackTrace.#ctor(System.Exception,System.Boolean)\n  - System.Diagnostics.StackTrace.#ctor(System.Exception,System.Int32)\n  - System.Diagnostics.StackTrace.#ctor(System.Int32,System.Boolean)\n  - System.Diagnostics.StackTrace.#ctor(System.Threading.Thread,System.Boolean)\n  - System.Diagnostics.StackTrace.#ctor(System.Exception,System.Int32,System.Boolean)\n  - System.Diagnostics.StackTrace.FrameCount\n  - System.Diagnostics.StackTrace.GetFrame(System.Int32)\n  - System.Diagnostics.StackTrace.GetFrames\n  - System.Diagnostics.StackTrace.METHODS_TO_SKIP\n  - System.Diagnostics.StackTrace.ToString\n  langs:\n  - csharp\n  name: StackTrace\n  nameWithType: StackTrace\n  fullName: System.Diagnostics.StackTrace\n  type: Class\n  summary: Represents a stack trace, which is an ordered collection of one or more stack frames.\n  remarks: \"StackTrace information will be most informative with Debug build configurations. By default, Debug builds include debug symbols, while Release builds do not. The debug symbols contain most of the file, method name, line number, and column information used in constructing <xref:System.Diagnostics.StackFrame> and StackTrace objects.  \\n  \\n StackTrace might not report as many method calls as expected, due to code transformations that occur during optimization.\"\n  example:\n  - \"The following console application demonstrates how to create a simple StackTrace and iterate through its frames to obtain debugging and diagnostic information.  \\n  \\n [!code-cpp[StackTraceSample1#1](~/add/codesnippet/cpp/t-system.diagnostics.sta_1_1.cpp)]\\n [!code-cs[StackTraceSample1#1](~/add/codesnippet/csharp/t-system.diagnostics.sta_1_1.cs)]\\n [!code-vb[StackTraceSample1#1](~/add/codesnippet/visualbasic/t-system.diagnostics.sta_1_1.vb)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class StackTrace\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Diagnostics.StackTrace.#ctor\n  id: '#ctor'\n  parent: System.Diagnostics.StackTrace\n  langs:\n  - csharp\n  name: StackTrace()\n  nameWithType: StackTrace.StackTrace()\n  fullName: System.Diagnostics.StackTrace.StackTrace()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Diagnostics\n  summary: Initializes a new instance of the <xref href=\"System.Diagnostics.StackTrace\"></xref> class from the caller's frame.\n  remarks: \"The <xref:System.Diagnostics.StackTrace> is created with the caller's current thread, and does not contain file name, line number, or column information.  \\n  \\n Use this default constructor when you want a complete trace with only summary method information about the call stack.\"\n  example:\n  - \"The following code example displays the first and last function calls in a stack trace.  \\n  \\n [!code-cpp[StackFrameSample1#8](~/add/codesnippet/cpp/m-system.diagnostics.sta_8_1.cpp)]\\n [!code-vb[StackFrameSample1#8](~/add/codesnippet/visualbasic/m-system.diagnostics.sta_8_1.vb)]\\n [!code-cs[StackFrameSample1#8](~/add/codesnippet/csharp/m-system.diagnostics.sta_8_1.cs)]\"\n  syntax:\n    content: public StackTrace ();\n    parameters: []\n  overload: System.Diagnostics.StackTrace.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.StackTrace.#ctor(System.Boolean)\n  id: '#ctor(System.Boolean)'\n  parent: System.Diagnostics.StackTrace\n  langs:\n  - csharp\n  name: StackTrace(Boolean)\n  nameWithType: StackTrace.StackTrace(Boolean)\n  fullName: System.Diagnostics.StackTrace.StackTrace(Boolean)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Diagnostics\n  summary: Initializes a new instance of the <xref href=\"System.Diagnostics.StackTrace\"></xref> class from the caller's frame, optionally capturing source information.\n  remarks: The <xref:System.Diagnostics.StackTrace> is created with the caller's current thread.\n  example:\n  - \"The following code example demonstrates various <xref:System.Diagnostics.StackTrace> constructor methods.  \\n  \\n [!code-cpp[StackFrameSample1#4](~/add/codesnippet/cpp/m-system.diagnostics.sta_4_1.cpp)]\\n [!code-vb[StackFrameSample1#4](~/add/codesnippet/visualbasic/m-system.diagnostics.sta_4_1.vb)]\\n [!code-cs[StackFrameSample1#4](~/add/codesnippet/csharp/m-system.diagnostics.sta_4_1.cs)]\"\n  syntax:\n    content: public StackTrace (bool fNeedFileInfo);\n    parameters:\n    - id: fNeedFileInfo\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to capture the file name, line number, and column number; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Diagnostics.StackTrace.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.StackTrace.#ctor(System.Diagnostics.StackFrame)\n  id: '#ctor(System.Diagnostics.StackFrame)'\n  parent: System.Diagnostics.StackTrace\n  langs:\n  - csharp\n  name: StackTrace(StackFrame)\n  nameWithType: StackTrace.StackTrace(StackFrame)\n  fullName: System.Diagnostics.StackTrace.StackTrace(StackFrame)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Diagnostics\n  summary: Initializes a new instance of the <xref href=\"System.Diagnostics.StackTrace\"></xref> class that contains a single frame.\n  remarks: Use this constructor when you do not want the overhead of a full stack trace.\n  example:\n  - \"The following code example writes stack trace information to an event log entry.  \\n  \\n [!code-cpp[StackTraceSample3#6](~/add/codesnippet/cpp/m-system.diagnostics.sta_1_1.cpp)]\\n [!code-cs[StackTraceSample3#6](~/add/codesnippet/csharp/m-system.diagnostics.sta_1_1.cs)]\\n [!code-vb[StackTraceSample3#6](~/add/codesnippet/visualbasic/m-system.diagnostics.sta_1_1.vb)]\"\n  syntax:\n    content: public StackTrace (System.Diagnostics.StackFrame frame);\n    parameters:\n    - id: frame\n      type: System.Diagnostics.StackFrame\n      description: The frame that the <xref href=\"System.Diagnostics.StackTrace\"></xref> object should contain.\n  overload: System.Diagnostics.StackTrace.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.StackTrace.#ctor(System.Exception)\n  id: '#ctor(System.Exception)'\n  parent: System.Diagnostics.StackTrace\n  langs:\n  - csharp\n  name: StackTrace(Exception)\n  nameWithType: StackTrace.StackTrace(Exception)\n  fullName: System.Diagnostics.StackTrace.StackTrace(Exception)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Diagnostics\n  summary: Initializes a new instance of the <xref href=\"System.Diagnostics.StackTrace\"></xref> class using the provided exception object.\n  remarks: \"The <xref:System.Diagnostics.StackTrace> is created with the caller's current thread, and does not contain file name, line number, or column information.  \\n  \\n The resulting stack trace describes the stack at the time of the exception.\"\n  syntax:\n    content: public StackTrace (Exception e);\n    parameters:\n    - id: e\n      type: System.Exception\n      description: The exception object from which to construct the stack trace.\n  overload: System.Diagnostics.StackTrace.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The parameter <code>e</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Diagnostics.StackTrace.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Diagnostics.StackTrace\n  langs:\n  - csharp\n  name: StackTrace(Int32)\n  nameWithType: StackTrace.StackTrace(Int32)\n  fullName: System.Diagnostics.StackTrace.StackTrace(Int32)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Diagnostics\n  summary: Initializes a new instance of the <xref href=\"System.Diagnostics.StackTrace\"></xref> class from the caller's frame, skipping the specified number of frames.\n  remarks: \"The <xref:System.Diagnostics.StackTrace> is created with the caller's current thread, and does not contain file name, line number, or column information.  \\n  \\n If the number of frames to skip is greater than or equal to the total number of frames on the call stack at the time the instance is created, the <xref:System.Diagnostics.StackTrace> will contain no frames.\"\n  syntax:\n    content: public StackTrace (int skipFrames);\n    parameters:\n    - id: skipFrames\n      type: System.Int32\n      description: The number of frames up the stack from which to start the trace.\n  overload: System.Diagnostics.StackTrace.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>skipFrames</code> parameter is negative.\n  platform:\n  - net462\n- uid: System.Diagnostics.StackTrace.#ctor(System.Exception,System.Boolean)\n  id: '#ctor(System.Exception,System.Boolean)'\n  parent: System.Diagnostics.StackTrace\n  langs:\n  - csharp\n  name: StackTrace(Exception,Boolean)\n  nameWithType: StackTrace.StackTrace(Exception,Boolean)\n  fullName: System.Diagnostics.StackTrace.StackTrace(Exception,Boolean)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Diagnostics\n  summary: Initializes a new instance of the <xref href=\"System.Diagnostics.StackTrace\"></xref> class, using the provided exception object and optionally capturing source information.\n  remarks: The resulting stack trace describes the stack at the time of the exception.\n  syntax:\n    content: public StackTrace (Exception e, bool fNeedFileInfo);\n    parameters:\n    - id: e\n      type: System.Exception\n      description: The exception object from which to construct the stack trace.\n    - id: fNeedFileInfo\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to capture the file name, line number, and column number; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Diagnostics.StackTrace.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The parameter <code>e</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Diagnostics.StackTrace.#ctor(System.Exception,System.Int32)\n  id: '#ctor(System.Exception,System.Int32)'\n  parent: System.Diagnostics.StackTrace\n  langs:\n  - csharp\n  name: StackTrace(Exception,Int32)\n  nameWithType: StackTrace.StackTrace(Exception,Int32)\n  fullName: System.Diagnostics.StackTrace.StackTrace(Exception,Int32)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Diagnostics\n  summary: Initializes a new instance of the <xref href=\"System.Diagnostics.StackTrace\"></xref> class using the provided exception object and skipping the specified number of frames.\n  remarks: \"The <xref:System.Diagnostics.StackTrace> does not contain file name, line number, or column information.  \\n  \\n The resulting stack trace describes the stack at the time of the exception.  \\n  \\n If the number of frames to skip is greater than or equal to the total number of frames on the call stack at the time the instance is created, the <xref:System.Diagnostics.StackTrace> will contain no frames.\"\n  syntax:\n    content: public StackTrace (Exception e, int skipFrames);\n    parameters:\n    - id: e\n      type: System.Exception\n      description: The exception object from which to construct the stack trace.\n    - id: skipFrames\n      type: System.Int32\n      description: The number of frames up the stack from which to start the trace.\n  overload: System.Diagnostics.StackTrace.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The parameter <code>e</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>skipFrames</code> parameter is negative.\n  platform:\n  - net462\n- uid: System.Diagnostics.StackTrace.#ctor(System.Int32,System.Boolean)\n  id: '#ctor(System.Int32,System.Boolean)'\n  parent: System.Diagnostics.StackTrace\n  langs:\n  - csharp\n  name: StackTrace(Int32,Boolean)\n  nameWithType: StackTrace.StackTrace(Int32,Boolean)\n  fullName: System.Diagnostics.StackTrace.StackTrace(Int32,Boolean)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Diagnostics\n  summary: Initializes a new instance of the <xref href=\"System.Diagnostics.StackTrace\"></xref> class from the caller's frame, skipping the specified number of frames and optionally capturing source information.\n  remarks: If the number of frames to skip is greater than or equal to the total number of frames on the call stack at the time the instance is created, the <xref:System.Diagnostics.StackTrace> will contain no frames.\n  example:\n  - \"The following code example demonstrates various <xref:System.Diagnostics.StackTrace> constructor methods.  \\n  \\n [!code-cpp[StackFrameSample1#4](~/add/codesnippet/cpp/m-system.diagnostics.sta_3_1.cpp)]\\n [!code-vb[StackFrameSample1#4](~/add/codesnippet/visualbasic/m-system.diagnostics.sta_3_1.vb)]\\n [!code-cs[StackFrameSample1#4](~/add/codesnippet/csharp/m-system.diagnostics.sta_3_1.cs)]\"\n  syntax:\n    content: public StackTrace (int skipFrames, bool fNeedFileInfo);\n    parameters:\n    - id: skipFrames\n      type: System.Int32\n      description: The number of frames up the stack from which to start the trace.\n    - id: fNeedFileInfo\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to capture the file name, line number, and column number; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Diagnostics.StackTrace.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>skipFrames</code> parameter is negative.\n  platform:\n  - net462\n- uid: System.Diagnostics.StackTrace.#ctor(System.Threading.Thread,System.Boolean)\n  id: '#ctor(System.Threading.Thread,System.Boolean)'\n  parent: System.Diagnostics.StackTrace\n  langs:\n  - csharp\n  name: StackTrace(Thread,Boolean)\n  nameWithType: StackTrace.StackTrace(Thread,Boolean)\n  fullName: System.Diagnostics.StackTrace.StackTrace(Thread,Boolean)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Diagnostics\n  summary: \"Initializes a new instance of the <xref href=\\\"System.Diagnostics.StackTrace\\\"></xref> class for a specific thread, optionally capturing source information.  \\n  \\n Do not use this constructor overload.\"\n  remarks: >-\n    > [!IMPORTANT]\n\n    >  Do not use this constructor. It is obsolete, and there is no recommended alternative. When you suspend a thread, you have no way of knowing what code it is executing, and deadlocks can occur very easily. For example, if you suspend a thread while it holds locks during a security permission evaluation, other threads in the <xref:System.AppDomain> might be blocked. If you suspend a thread while it is executing a class constructor, other threads in the <xref:System.AppDomain> that attempt to use that class are blocked.\n  syntax:\n    content: public StackTrace (System.Threading.Thread targetThread, bool needFileInfo);\n    parameters:\n    - id: targetThread\n      type: System.Threading.Thread\n      description: The thread whose stack trace is requested.\n    - id: needFileInfo\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to capture the file name, line number, and column number; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Diagnostics.StackTrace.#ctor*\n  exceptions:\n  - type: System.Threading.ThreadStateException\n    commentId: T:System.Threading.ThreadStateException\n    description: The thread <code>targetThread</code> is not suspended.\n  platform:\n  - net462\n- uid: System.Diagnostics.StackTrace.#ctor(System.Exception,System.Int32,System.Boolean)\n  id: '#ctor(System.Exception,System.Int32,System.Boolean)'\n  parent: System.Diagnostics.StackTrace\n  langs:\n  - csharp\n  name: StackTrace(Exception,Int32,Boolean)\n  nameWithType: StackTrace.StackTrace(Exception,Int32,Boolean)\n  fullName: System.Diagnostics.StackTrace.StackTrace(Exception,Int32,Boolean)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Diagnostics\n  summary: Initializes a new instance of the <xref href=\"System.Diagnostics.StackTrace\"></xref> class using the provided exception object, skipping the specified number of frames and optionally capturing source information.\n  remarks: \"The resulting stack trace describes the stack at the time of the exception.  \\n  \\n If the number of frames to skip is greater than or equal to the total number of frames on the call stack at the time the instance is created, the <xref:System.Diagnostics.StackTrace> will contain no frames.\"\n  syntax:\n    content: public StackTrace (Exception e, int skipFrames, bool fNeedFileInfo);\n    parameters:\n    - id: e\n      type: System.Exception\n      description: The exception object from which to construct the stack trace.\n    - id: skipFrames\n      type: System.Int32\n      description: The number of frames up the stack from which to start the trace.\n    - id: fNeedFileInfo\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to capture the file name, line number, and column number; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Diagnostics.StackTrace.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The parameter <code>e</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>skipFrames</code> parameter is negative.\n  platform:\n  - net462\n- uid: System.Diagnostics.StackTrace.FrameCount\n  id: FrameCount\n  parent: System.Diagnostics.StackTrace\n  langs:\n  - csharp\n  name: FrameCount\n  nameWithType: StackTrace.FrameCount\n  fullName: System.Diagnostics.StackTrace.FrameCount\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Diagnostics\n  summary: Gets the number of frames in the stack trace.\n  remarks: ''\n  example:\n  - \"The following code example displays the first and last function calls in a stack trace.  \\n  \\n [!code-cpp[StackFrameSample1#8](~/add/codesnippet/cpp/p-system.diagnostics.sta_1.cpp)]\\n [!code-vb[StackFrameSample1#8](~/add/codesnippet/visualbasic/p-system.diagnostics.sta_1.vb)]\\n [!code-cs[StackFrameSample1#8](~/add/codesnippet/csharp/p-system.diagnostics.sta_1.cs)]\"\n  syntax:\n    content: public virtual int FrameCount { get; }\n    return:\n      type: System.Int32\n      description: The number of frames in the stack trace.\n  overload: System.Diagnostics.StackTrace.FrameCount*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.StackTrace.GetFrame(System.Int32)\n  id: GetFrame(System.Int32)\n  parent: System.Diagnostics.StackTrace\n  langs:\n  - csharp\n  name: GetFrame(Int32)\n  nameWithType: StackTrace.GetFrame(Int32)\n  fullName: System.Diagnostics.StackTrace.GetFrame(Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Diagnostics\n  summary: Gets the specified stack frame.\n  remarks: Stack frames are numbered starting at 0, which is the last stack frame pushed.\n  example:\n  - \"The following code example displays the first and last function calls in a stack trace.  \\n  \\n [!code-cpp[StackFrameSample1#8](~/add/codesnippet/cpp/m-system.diagnostics.sta_17_1.cpp)]\\n [!code-vb[StackFrameSample1#8](~/add/codesnippet/visualbasic/m-system.diagnostics.sta_17_1.vb)]\\n [!code-cs[StackFrameSample1#8](~/add/codesnippet/csharp/m-system.diagnostics.sta_17_1.cs)]\"\n  syntax:\n    content: public virtual System.Diagnostics.StackFrame GetFrame (int index);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The index of the stack frame requested.\n    return:\n      type: System.Diagnostics.StackFrame\n      description: The specified stack frame.\n  overload: System.Diagnostics.StackTrace.GetFrame*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.StackTrace.GetFrames\n  id: GetFrames\n  parent: System.Diagnostics.StackTrace\n  langs:\n  - csharp\n  name: GetFrames()\n  nameWithType: StackTrace.GetFrames()\n  fullName: System.Diagnostics.StackTrace.GetFrames()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Diagnostics\n  summary: Returns a copy of all stack frames in the current stack trace.\n  remarks: \"Use the returned <xref:System.Diagnostics.StackFrame> array to enumerate and examine function calls in the <xref:System.Diagnostics.StackTrace>. The length of the returned array is equal to the <xref:System.Diagnostics.StackTrace.FrameCount%2A> property value.  \\n  \\n The <xref:System.Diagnostics.StackFrame> array elements are in reverse chronological order. The <xref:System.Diagnostics.StackFrame> at array index 0 represents the most recent function call in the stack trace and the last frame pushed onto the call stack. The <xref:System.Diagnostics.StackFrame> at array index <xref:System.Diagnostics.StackTrace.FrameCount%2A> minus 1 represents the oldest function call in the stack trace and the first frame pushed onto the call stack.  \\n  \\n Use the GetFrames method to obtain all stack frames in a stack trace; use the <xref:System.Diagnostics.StackTrace.GetFrame%2A> method to obtain a specific stack frame in a stack trace. The <xref:System.Diagnostics.StackFrame> indexes are ordered alike by the two methods. For example, the <xref:System.Diagnostics.StackFrame> at index 0 in the array returned by GetFrames is equivalent to the <xref:System.Diagnostics.StackFrame> returned by <xref:System.Diagnostics.StackTrace.GetFrame%2A> with an input index of 0.\"\n  example:\n  - \"The following code example demonstrates enumerating the frames in a <xref:System.Diagnostics.StackTrace>.  \\n  \\n [!code-cpp[StackTraceSample2#3](~/add/codesnippet/cpp/m-system.diagnostics.sta_14_1.cpp)]\\n [!code-vb[StackTraceSample2#3](~/add/codesnippet/visualbasic/m-system.diagnostics.sta_14_1.vb)]\\n [!code-cs[StackTraceSample2#3](~/add/codesnippet/csharp/m-system.diagnostics.sta_14_1.cs)]\"\n  syntax:\n    content: public virtual System.Diagnostics.StackFrame[] GetFrames ();\n    parameters: []\n    return:\n      type: System.Diagnostics.StackFrame[]\n      description: An array of type <xref href=\"System.Diagnostics.StackFrame\"></xref> representing the function calls in the stack trace.\n  overload: System.Diagnostics.StackTrace.GetFrames*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.StackTrace.METHODS_TO_SKIP\n  id: METHODS_TO_SKIP\n  parent: System.Diagnostics.StackTrace\n  langs:\n  - csharp\n  name: METHODS_TO_SKIP\n  nameWithType: StackTrace.METHODS_TO_SKIP\n  fullName: System.Diagnostics.StackTrace.METHODS_TO_SKIP\n  type: Field\n  assemblies:\n  - mscorlib\n  namespace: System.Diagnostics\n  summary: Defines the default for the number of methods to omit from the stack trace. This field is constant.\n  remarks: The default value for the number of methods to skip at the beginning of the stack trace. The value of this constant is 0.\n  syntax:\n    content: public const int METHODS_TO_SKIP = 0;\n    return:\n      type: System.Int32\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.StackTrace.ToString\n  id: ToString\n  parent: System.Diagnostics.StackTrace\n  langs:\n  - csharp\n  name: ToString()\n  nameWithType: StackTrace.ToString()\n  fullName: System.Diagnostics.StackTrace.ToString()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Diagnostics\n  summary: Builds a readable representation of the stack trace.\n  remarks: ''\n  example:\n  - \"The following code example writes stack trace information to an event log entry.  \\n  \\n [!code-cpp[StackTraceSample3#6](~/add/codesnippet/cpp/m-system.diagnostics.sta_10_1.cpp)]\\n [!code-cs[StackTraceSample3#6](~/add/codesnippet/csharp/m-system.diagnostics.sta_10_1.cs)]\\n [!code-vb[StackTraceSample3#6](~/add/codesnippet/visualbasic/m-system.diagnostics.sta_10_1.vb)]\"\n  syntax:\n    content: public override string ToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: A readable representation of the stack trace.\n  overload: System.Diagnostics.StackTrace.ToString*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.Threading.ThreadStateException\n  parent: System.Threading\n  isExternal: false\n  name: ThreadStateException\n  nameWithType: ThreadStateException\n  fullName: System.Threading.ThreadStateException\n- uid: System.Diagnostics.StackTrace.#ctor\n  parent: System.Diagnostics.StackTrace\n  isExternal: false\n  name: StackTrace()\n  nameWithType: StackTrace.StackTrace()\n  fullName: System.Diagnostics.StackTrace.StackTrace()\n- uid: System.Diagnostics.StackTrace.#ctor(System.Boolean)\n  parent: System.Diagnostics.StackTrace\n  isExternal: false\n  name: StackTrace(Boolean)\n  nameWithType: StackTrace.StackTrace(Boolean)\n  fullName: System.Diagnostics.StackTrace.StackTrace(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Diagnostics.StackTrace.#ctor(System.Diagnostics.StackFrame)\n  parent: System.Diagnostics.StackTrace\n  isExternal: false\n  name: StackTrace(StackFrame)\n  nameWithType: StackTrace.StackTrace(StackFrame)\n  fullName: System.Diagnostics.StackTrace.StackTrace(StackFrame)\n- uid: System.Diagnostics.StackFrame\n  parent: System.Diagnostics\n  isExternal: false\n  name: StackFrame\n  nameWithType: StackFrame\n  fullName: System.Diagnostics.StackFrame\n- uid: System.Diagnostics.StackTrace.#ctor(System.Exception)\n  parent: System.Diagnostics.StackTrace\n  isExternal: false\n  name: StackTrace(Exception)\n  nameWithType: StackTrace.StackTrace(Exception)\n  fullName: System.Diagnostics.StackTrace.StackTrace(Exception)\n- uid: System.Exception\n  parent: System\n  isExternal: true\n  name: Exception\n  nameWithType: Exception\n  fullName: System.Exception\n- uid: System.Diagnostics.StackTrace.#ctor(System.Int32)\n  parent: System.Diagnostics.StackTrace\n  isExternal: false\n  name: StackTrace(Int32)\n  nameWithType: StackTrace.StackTrace(Int32)\n  fullName: System.Diagnostics.StackTrace.StackTrace(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Diagnostics.StackTrace.#ctor(System.Exception,System.Boolean)\n  parent: System.Diagnostics.StackTrace\n  isExternal: false\n  name: StackTrace(Exception,Boolean)\n  nameWithType: StackTrace.StackTrace(Exception,Boolean)\n  fullName: System.Diagnostics.StackTrace.StackTrace(Exception,Boolean)\n- uid: System.Diagnostics.StackTrace.#ctor(System.Exception,System.Int32)\n  parent: System.Diagnostics.StackTrace\n  isExternal: false\n  name: StackTrace(Exception,Int32)\n  nameWithType: StackTrace.StackTrace(Exception,Int32)\n  fullName: System.Diagnostics.StackTrace.StackTrace(Exception,Int32)\n- uid: System.Diagnostics.StackTrace.#ctor(System.Int32,System.Boolean)\n  parent: System.Diagnostics.StackTrace\n  isExternal: false\n  name: StackTrace(Int32,Boolean)\n  nameWithType: StackTrace.StackTrace(Int32,Boolean)\n  fullName: System.Diagnostics.StackTrace.StackTrace(Int32,Boolean)\n- uid: System.Diagnostics.StackTrace.#ctor(System.Threading.Thread,System.Boolean)\n  parent: System.Diagnostics.StackTrace\n  isExternal: false\n  name: StackTrace(Thread,Boolean)\n  nameWithType: StackTrace.StackTrace(Thread,Boolean)\n  fullName: System.Diagnostics.StackTrace.StackTrace(Thread,Boolean)\n- uid: System.Threading.Thread\n  parent: System.Threading\n  isExternal: false\n  name: Thread\n  nameWithType: Thread\n  fullName: System.Threading.Thread\n- uid: System.Diagnostics.StackTrace.#ctor(System.Exception,System.Int32,System.Boolean)\n  parent: System.Diagnostics.StackTrace\n  isExternal: false\n  name: StackTrace(Exception,Int32,Boolean)\n  nameWithType: StackTrace.StackTrace(Exception,Int32,Boolean)\n  fullName: System.Diagnostics.StackTrace.StackTrace(Exception,Int32,Boolean)\n- uid: System.Diagnostics.StackTrace.FrameCount\n  parent: System.Diagnostics.StackTrace\n  isExternal: false\n  name: FrameCount\n  nameWithType: StackTrace.FrameCount\n  fullName: System.Diagnostics.StackTrace.FrameCount\n- uid: System.Diagnostics.StackTrace.GetFrame(System.Int32)\n  parent: System.Diagnostics.StackTrace\n  isExternal: false\n  name: GetFrame(Int32)\n  nameWithType: StackTrace.GetFrame(Int32)\n  fullName: System.Diagnostics.StackTrace.GetFrame(Int32)\n- uid: System.Diagnostics.StackTrace.GetFrames\n  parent: System.Diagnostics.StackTrace\n  isExternal: false\n  name: GetFrames()\n  nameWithType: StackTrace.GetFrames()\n  fullName: System.Diagnostics.StackTrace.GetFrames()\n- uid: System.Diagnostics.StackFrame[]\n  parent: System.Diagnostics\n  isExternal: false\n  name: StackFrame\n  nameWithType: StackFrame\n  fullName: System.Diagnostics.StackFrame[]\n  spec.csharp:\n  - uid: System.Diagnostics.StackFrame\n    name: StackFrame\n    nameWithType: StackFrame\n    fullName: StackFrame[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Diagnostics.StackTrace.METHODS_TO_SKIP\n  parent: System.Diagnostics.StackTrace\n  isExternal: false\n  name: METHODS_TO_SKIP\n  nameWithType: StackTrace.METHODS_TO_SKIP\n  fullName: System.Diagnostics.StackTrace.METHODS_TO_SKIP\n- uid: System.Diagnostics.StackTrace.ToString\n  parent: System.Diagnostics.StackTrace\n  isExternal: false\n  name: ToString()\n  nameWithType: StackTrace.ToString()\n  fullName: System.Diagnostics.StackTrace.ToString()\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Diagnostics.StackTrace.#ctor*\n  parent: System.Diagnostics.StackTrace\n  isExternal: false\n  name: StackTrace\n  nameWithType: StackTrace.StackTrace\n- uid: System.Diagnostics.StackTrace.FrameCount*\n  parent: System.Diagnostics.StackTrace\n  isExternal: false\n  name: FrameCount\n  nameWithType: StackTrace.FrameCount\n- uid: System.Diagnostics.StackTrace.GetFrame*\n  parent: System.Diagnostics.StackTrace\n  isExternal: false\n  name: GetFrame\n  nameWithType: StackTrace.GetFrame\n- uid: System.Diagnostics.StackTrace.GetFrames*\n  parent: System.Diagnostics.StackTrace\n  isExternal: false\n  name: GetFrames\n  nameWithType: StackTrace.GetFrames\n- uid: System.Diagnostics.StackTrace.ToString*\n  parent: System.Diagnostics.StackTrace\n  isExternal: false\n  name: ToString\n  nameWithType: StackTrace.ToString\n"}