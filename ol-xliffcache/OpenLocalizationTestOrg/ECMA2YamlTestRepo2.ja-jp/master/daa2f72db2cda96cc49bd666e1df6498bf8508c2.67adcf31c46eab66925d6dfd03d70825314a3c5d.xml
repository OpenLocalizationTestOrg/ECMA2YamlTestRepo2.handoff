{"nodes":[{"pos":[803,884],"content":"An abstraction that represents the mapping between a database and domain objects.","needQuote":true,"needEscape":true,"nodes":[{"content":"An abstraction that represents the mapping between a database and domain objects.","pos":[0,81]}]},{"pos":[1384,1480],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Data.Linq.Mapping.MetaModel\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Data.Linq.Mapping.MetaModel\"></xref> class."},{"pos":[1996,2094],"content":"Gets the type of <bpt id=\"p1\">&lt;xref href=\"System.Data.Linq.DataContext\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> type that this model describes.","needQuote":true,"needEscape":true,"source":"Gets the type of <xref href=\"System.Data.Linq.DataContext\"></xref> type that this model describes."},{"pos":[2215,2237],"content":"The data context type.","needQuote":true,"needEscape":true,"nodes":[{"content":"The data context type.","pos":[0,22]}]},{"pos":[2698,2728],"content":"Gets the name of the database.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the name of the database.","pos":[0,30]}]},{"pos":[2854,2884],"content":"The database name as a string.","needQuote":true,"needEscape":true,"nodes":[{"content":"The database name as a string.","pos":[0,30]}]},{"pos":[3435,3543],"content":"Gets the <bpt id=\"p1\">&lt;xref href=\"System.Data.Linq.Mapping.MetaFunction\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that corresponds to a database function.","needQuote":true,"needEscape":true,"source":"Gets the <xref href=\"System.Data.Linq.Mapping.MetaFunction\"></xref> that corresponds to a database function."},{"pos":[3555,3648],"content":"Database functions are user-defined functions, table-valued functions, and stored procedures.","needQuote":true,"needEscape":true,"nodes":[{"content":"Database functions are user-defined functions, table-valued functions, and stored procedures.","pos":[0,93]}]},{"pos":[3870,4005],"content":"The method defined on the <bpt id=\"p1\">&lt;xref href=\"System.Data.Linq.DataContext\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or subordinate class that represents the database function.","needQuote":true,"needEscape":true,"source":"The method defined on the <xref href=\"System.Data.Linq.DataContext\"></xref> or subordinate class that represents the database function."},{"pos":[4087,4145],"content":"The meta-function that corresponds to a database function.","needQuote":true,"needEscape":true,"nodes":[{"content":"The meta-function that corresponds to a database function.","pos":[0,58]}]},{"pos":[4610,4647],"content":"Gets an enumeration of all functions.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets an enumeration of all functions.","pos":[0,37]}]},{"pos":[4922,4987],"content":"An enumeration that can be used to iterate through all functions.","needQuote":true,"needEscape":true,"nodes":[{"content":"An enumeration that can be used to iterate through all functions.","pos":[0,65]}]},{"pos":[5486,5592],"content":"Discovers the <bpt id=\"p1\">&lt;xref href=\"System.Data.Linq.Mapping.MetaType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for the specified &lt;xref:System.Type&gt;.","needQuote":true,"needEscape":true,"source":"Discovers the <xref href=\"System.Data.Linq.Mapping.MetaType\"></xref> for the specified <xref:System.Type>."},{"pos":[5765,5853],"content":"The type for which the <bpt id=\"p1\">&lt;xref href=\"System.Data.Linq.Mapping.MetaType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is sought.","needQuote":true,"needEscape":true,"source":"The type for which the <xref href=\"System.Data.Linq.Mapping.MetaType\"></xref> is sought."},{"pos":[5931,5982],"content":"A meta-type that corresponds to the specified type.","needQuote":true,"needEscape":true,"nodes":[{"content":"A meta-type that corresponds to the specified type.","pos":[0,51]}]},{"pos":[6465,6577],"content":"Gets the <bpt id=\"p1\">&lt;xref href=\"System.Data.Linq.Mapping.MetaTable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> associated with a specified &lt;xref:System.Type&gt;.","needQuote":true,"needEscape":true,"source":"Gets the <xref href=\"System.Data.Linq.Mapping.MetaTable\"></xref> associated with a specified <xref:System.Type>."},{"pos":[6754,6797],"content":"The common language runtime (CLR) row type.","needQuote":true,"needEscape":true,"nodes":[{"content":"The common language runtime (CLR) row type.","pos":[0,43]}]},{"pos":[6876,6928],"content":"A meta-table associated with the specified row type.","needQuote":true,"needEscape":true,"nodes":[{"content":"A meta-table associated with the specified row type.","pos":[0,52]}]},{"pos":[7375,7408],"content":"Get an enumeration of all tables.","needQuote":true,"needEscape":true,"nodes":[{"content":"Get an enumeration of all tables.","pos":[0,33]}]},{"pos":[7674,7732],"content":"An enumerator that can be used to iterate over the tables.","needQuote":true,"needEscape":true,"nodes":[{"content":"An enumerator that can be used to iterate over the tables.","pos":[0,58]}]},{"pos":[8196,8247],"content":"Gets the mapping source that originated this model.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the mapping source that originated this model.","pos":[0,51]}]},{"pos":[8431,8462],"content":"The originating mapping source.","needQuote":true,"needEscape":true,"nodes":[{"content":"The originating mapping source.","pos":[0,31]}]},{"pos":[8925,8956],"content":"Gets or sets the provider type.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the provider type.","pos":[0,31]}]},{"pos":[8968,9428],"content":"If this property is specified, an existing provider type can be used. This will eliminate a round trip to the server to obtain this information. [!INCLUDE[vbtecdlinq](~/add/includes/vbtecdlinq-md.md)] has to know the provider type to establish appropriate query translation rules. [!INCLUDE[vbtecdlinq](~/add/includes/vbtecdlinq-md.md)] supports <xref:System.Data.Linq.SqlClient.Sql2000Provider> and <xref:System.Data.Linq.SqlClient.Sql2005Provider> providers.","needQuote":true,"needEscape":true,"nodes":[{"content":"If this property is specified, an existing provider type can be used.","pos":[0,69]},{"content":"This will eliminate a round trip to the server to obtain this information.","pos":[70,144]},{"content":"<ph id=\"ph1\">[!INCLUDE[vbtecdlinq](~/add/includes/vbtecdlinq-md.md)]</ph> has to know the provider type to establish appropriate query translation rules.","pos":[145,280],"source":"[!INCLUDE[vbtecdlinq](~/add/includes/vbtecdlinq-md.md)] has to know the provider type to establish appropriate query translation rules."},{"content":"<ph id=\"ph1\">[!INCLUDE[vbtecdlinq](~/add/includes/vbtecdlinq-md.md)]</ph> supports &lt;xref:System.Data.Linq.SqlClient.Sql2000Provider&gt; and &lt;xref:System.Data.Linq.SqlClient.Sql2005Provider&gt; providers.","pos":[281,460],"source":"[!INCLUDE[vbtecdlinq](~/add/includes/vbtecdlinq-md.md)] supports <xref:System.Data.Linq.SqlClient.Sql2000Provider> and <xref:System.Data.Linq.SqlClient.Sql2005Provider> providers."}]},{"pos":[9550,9568],"content":"The provider type.","needQuote":true,"needEscape":true,"nodes":[{"content":"The provider type.","pos":[0,18]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Data.Linq.Mapping.MetaModel\n  id: MetaModel\n  children:\n  - System.Data.Linq.Mapping.MetaModel.#ctor\n  - System.Data.Linq.Mapping.MetaModel.ContextType\n  - System.Data.Linq.Mapping.MetaModel.DatabaseName\n  - System.Data.Linq.Mapping.MetaModel.GetFunction(System.Reflection.MethodInfo)\n  - System.Data.Linq.Mapping.MetaModel.GetFunctions\n  - System.Data.Linq.Mapping.MetaModel.GetMetaType(System.Type)\n  - System.Data.Linq.Mapping.MetaModel.GetTable(System.Type)\n  - System.Data.Linq.Mapping.MetaModel.GetTables\n  - System.Data.Linq.Mapping.MetaModel.MappingSource\n  - System.Data.Linq.Mapping.MetaModel.ProviderType\n  langs:\n  - csharp\n  name: MetaModel\n  nameWithType: MetaModel\n  fullName: System.Data.Linq.Mapping.MetaModel\n  type: Class\n  summary: An abstraction that represents the mapping between a database and domain objects.\n  syntax:\n    content: public abstract class MetaModel\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Data.Linq.Mapping.MetaModel.#ctor\n  id: '#ctor'\n  parent: System.Data.Linq.Mapping.MetaModel\n  langs:\n  - csharp\n  name: MetaModel()\n  nameWithType: MetaModel.MetaModel()\n  fullName: System.Data.Linq.Mapping.MetaModel.MetaModel()\n  type: Constructor\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq.Mapping\n  summary: Initializes a new instance of the <xref href=\"System.Data.Linq.Mapping.MetaModel\"></xref> class.\n  syntax:\n    content: protected MetaModel ();\n    parameters: []\n  overload: System.Data.Linq.Mapping.MetaModel.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.Mapping.MetaModel.ContextType\n  id: ContextType\n  parent: System.Data.Linq.Mapping.MetaModel\n  langs:\n  - csharp\n  name: ContextType\n  nameWithType: MetaModel.ContextType\n  fullName: System.Data.Linq.Mapping.MetaModel.ContextType\n  type: Property\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq.Mapping\n  summary: Gets the type of <xref href=\"System.Data.Linq.DataContext\"></xref> type that this model describes.\n  syntax:\n    content: public abstract Type ContextType { get; }\n    return:\n      type: System.Type\n      description: The data context type.\n  overload: System.Data.Linq.Mapping.MetaModel.ContextType*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.Mapping.MetaModel.DatabaseName\n  id: DatabaseName\n  parent: System.Data.Linq.Mapping.MetaModel\n  langs:\n  - csharp\n  name: DatabaseName\n  nameWithType: MetaModel.DatabaseName\n  fullName: System.Data.Linq.Mapping.MetaModel.DatabaseName\n  type: Property\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq.Mapping\n  summary: Gets the name of the database.\n  syntax:\n    content: public abstract string DatabaseName { get; }\n    return:\n      type: System.String\n      description: The database name as a string.\n  overload: System.Data.Linq.Mapping.MetaModel.DatabaseName*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.Mapping.MetaModel.GetFunction(System.Reflection.MethodInfo)\n  id: GetFunction(System.Reflection.MethodInfo)\n  parent: System.Data.Linq.Mapping.MetaModel\n  langs:\n  - csharp\n  name: GetFunction(MethodInfo)\n  nameWithType: MetaModel.GetFunction(MethodInfo)\n  fullName: System.Data.Linq.Mapping.MetaModel.GetFunction(MethodInfo)\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq.Mapping\n  summary: Gets the <xref href=\"System.Data.Linq.Mapping.MetaFunction\"></xref> that corresponds to a database function.\n  remarks: Database functions are user-defined functions, table-valued functions, and stored procedures.\n  syntax:\n    content: public abstract System.Data.Linq.Mapping.MetaFunction GetFunction (System.Reflection.MethodInfo method);\n    parameters:\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: The method defined on the <xref href=\"System.Data.Linq.DataContext\"></xref> or subordinate class that represents the database function.\n    return:\n      type: System.Data.Linq.Mapping.MetaFunction\n      description: The meta-function that corresponds to a database function.\n  overload: System.Data.Linq.Mapping.MetaModel.GetFunction*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.Mapping.MetaModel.GetFunctions\n  id: GetFunctions\n  parent: System.Data.Linq.Mapping.MetaModel\n  langs:\n  - csharp\n  name: GetFunctions()\n  nameWithType: MetaModel.GetFunctions()\n  fullName: System.Data.Linq.Mapping.MetaModel.GetFunctions()\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq.Mapping\n  summary: Gets an enumeration of all functions.\n  syntax:\n    content: public abstract System.Collections.Generic.IEnumerable<System.Data.Linq.Mapping.MetaFunction> GetFunctions ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Data.Linq.Mapping.MetaFunction}\n      description: An enumeration that can be used to iterate through all functions.\n  overload: System.Data.Linq.Mapping.MetaModel.GetFunctions*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.Mapping.MetaModel.GetMetaType(System.Type)\n  id: GetMetaType(System.Type)\n  parent: System.Data.Linq.Mapping.MetaModel\n  langs:\n  - csharp\n  name: GetMetaType(Type)\n  nameWithType: MetaModel.GetMetaType(Type)\n  fullName: System.Data.Linq.Mapping.MetaModel.GetMetaType(Type)\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq.Mapping\n  summary: Discovers the <xref href=\"System.Data.Linq.Mapping.MetaType\"></xref> for the specified <xref:System.Type>.\n  syntax:\n    content: public abstract System.Data.Linq.Mapping.MetaType GetMetaType (Type type);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The type for which the <xref href=\"System.Data.Linq.Mapping.MetaType\"></xref> is sought.\n    return:\n      type: System.Data.Linq.Mapping.MetaType\n      description: A meta-type that corresponds to the specified type.\n  overload: System.Data.Linq.Mapping.MetaModel.GetMetaType*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.Mapping.MetaModel.GetTable(System.Type)\n  id: GetTable(System.Type)\n  parent: System.Data.Linq.Mapping.MetaModel\n  langs:\n  - csharp\n  name: GetTable(Type)\n  nameWithType: MetaModel.GetTable(Type)\n  fullName: System.Data.Linq.Mapping.MetaModel.GetTable(Type)\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq.Mapping\n  summary: Gets the <xref href=\"System.Data.Linq.Mapping.MetaTable\"></xref> associated with a specified <xref:System.Type>.\n  syntax:\n    content: public abstract System.Data.Linq.Mapping.MetaTable GetTable (Type rowType);\n    parameters:\n    - id: rowType\n      type: System.Type\n      description: The common language runtime (CLR) row type.\n    return:\n      type: System.Data.Linq.Mapping.MetaTable\n      description: A meta-table associated with the specified row type.\n  overload: System.Data.Linq.Mapping.MetaModel.GetTable*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.Mapping.MetaModel.GetTables\n  id: GetTables\n  parent: System.Data.Linq.Mapping.MetaModel\n  langs:\n  - csharp\n  name: GetTables()\n  nameWithType: MetaModel.GetTables()\n  fullName: System.Data.Linq.Mapping.MetaModel.GetTables()\n  type: Method\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq.Mapping\n  summary: Get an enumeration of all tables.\n  syntax:\n    content: public abstract System.Collections.Generic.IEnumerable<System.Data.Linq.Mapping.MetaTable> GetTables ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Data.Linq.Mapping.MetaTable}\n      description: An enumerator that can be used to iterate over the tables.\n  overload: System.Data.Linq.Mapping.MetaModel.GetTables*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.Mapping.MetaModel.MappingSource\n  id: MappingSource\n  parent: System.Data.Linq.Mapping.MetaModel\n  langs:\n  - csharp\n  name: MappingSource\n  nameWithType: MetaModel.MappingSource\n  fullName: System.Data.Linq.Mapping.MetaModel.MappingSource\n  type: Property\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq.Mapping\n  summary: Gets the mapping source that originated this model.\n  syntax:\n    content: public abstract System.Data.Linq.Mapping.MappingSource MappingSource { get; }\n    return:\n      type: System.Data.Linq.Mapping.MappingSource\n      description: The originating mapping source.\n  overload: System.Data.Linq.Mapping.MetaModel.MappingSource*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Linq.Mapping.MetaModel.ProviderType\n  id: ProviderType\n  parent: System.Data.Linq.Mapping.MetaModel\n  langs:\n  - csharp\n  name: ProviderType\n  nameWithType: MetaModel.ProviderType\n  fullName: System.Data.Linq.Mapping.MetaModel.ProviderType\n  type: Property\n  assemblies:\n  - System.Data.Linq\n  namespace: System.Data.Linq.Mapping\n  summary: Gets or sets the provider type.\n  remarks: If this property is specified, an existing provider type can be used. This will eliminate a round trip to the server to obtain this information. [!INCLUDE[vbtecdlinq](~/add/includes/vbtecdlinq-md.md)] has to know the provider type to establish appropriate query translation rules. [!INCLUDE[vbtecdlinq](~/add/includes/vbtecdlinq-md.md)] supports <xref:System.Data.Linq.SqlClient.Sql2000Provider> and <xref:System.Data.Linq.SqlClient.Sql2005Provider> providers.\n  syntax:\n    content: public abstract Type ProviderType { get; }\n    return:\n      type: System.Type\n      description: The provider type.\n  overload: System.Data.Linq.Mapping.MetaModel.ProviderType*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Data.Linq.Mapping.MetaModel.#ctor\n  parent: System.Data.Linq.Mapping.MetaModel\n  isExternal: false\n  name: MetaModel()\n  nameWithType: MetaModel.MetaModel()\n  fullName: System.Data.Linq.Mapping.MetaModel.MetaModel()\n- uid: System.Data.Linq.Mapping.MetaModel.ContextType\n  parent: System.Data.Linq.Mapping.MetaModel\n  isExternal: false\n  name: ContextType\n  nameWithType: MetaModel.ContextType\n  fullName: System.Data.Linq.Mapping.MetaModel.ContextType\n- uid: System.Type\n  parent: System\n  isExternal: true\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Data.Linq.Mapping.MetaModel.DatabaseName\n  parent: System.Data.Linq.Mapping.MetaModel\n  isExternal: false\n  name: DatabaseName\n  nameWithType: MetaModel.DatabaseName\n  fullName: System.Data.Linq.Mapping.MetaModel.DatabaseName\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Data.Linq.Mapping.MetaModel.GetFunction(System.Reflection.MethodInfo)\n  parent: System.Data.Linq.Mapping.MetaModel\n  isExternal: false\n  name: GetFunction(MethodInfo)\n  nameWithType: MetaModel.GetFunction(MethodInfo)\n  fullName: System.Data.Linq.Mapping.MetaModel.GetFunction(MethodInfo)\n- uid: System.Data.Linq.Mapping.MetaFunction\n  parent: System.Data.Linq.Mapping\n  isExternal: false\n  name: MetaFunction\n  nameWithType: MetaFunction\n  fullName: System.Data.Linq.Mapping.MetaFunction\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: true\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Data.Linq.Mapping.MetaModel.GetFunctions\n  parent: System.Data.Linq.Mapping.MetaModel\n  isExternal: false\n  name: GetFunctions()\n  nameWithType: MetaModel.GetFunctions()\n  fullName: System.Data.Linq.Mapping.MetaModel.GetFunctions()\n- uid: System.Collections.Generic.IEnumerable{System.Data.Linq.Mapping.MetaFunction}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IEnumerable<MetaFunction>\n  nameWithType: IEnumerable<MetaFunction>\n  fullName: System.Collections.Generic.IEnumerable<System.Data.Linq.Mapping.MetaFunction>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: IEnumerable<System.Data.Linq.Mapping.MetaFunction>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Data.Linq.Mapping.MetaFunction\n    name: MetaFunction\n    nameWithType: MetaFunction\n    fullName: MetaFunction\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Data.Linq.Mapping.MetaModel.GetMetaType(System.Type)\n  parent: System.Data.Linq.Mapping.MetaModel\n  isExternal: false\n  name: GetMetaType(Type)\n  nameWithType: MetaModel.GetMetaType(Type)\n  fullName: System.Data.Linq.Mapping.MetaModel.GetMetaType(Type)\n- uid: System.Data.Linq.Mapping.MetaType\n  parent: System.Data.Linq.Mapping\n  isExternal: false\n  name: MetaType\n  nameWithType: MetaType\n  fullName: System.Data.Linq.Mapping.MetaType\n- uid: System.Data.Linq.Mapping.MetaModel.GetTable(System.Type)\n  parent: System.Data.Linq.Mapping.MetaModel\n  isExternal: false\n  name: GetTable(Type)\n  nameWithType: MetaModel.GetTable(Type)\n  fullName: System.Data.Linq.Mapping.MetaModel.GetTable(Type)\n- uid: System.Data.Linq.Mapping.MetaTable\n  parent: System.Data.Linq.Mapping\n  isExternal: false\n  name: MetaTable\n  nameWithType: MetaTable\n  fullName: System.Data.Linq.Mapping.MetaTable\n- uid: System.Data.Linq.Mapping.MetaModel.GetTables\n  parent: System.Data.Linq.Mapping.MetaModel\n  isExternal: false\n  name: GetTables()\n  nameWithType: MetaModel.GetTables()\n  fullName: System.Data.Linq.Mapping.MetaModel.GetTables()\n- uid: System.Collections.Generic.IEnumerable{System.Data.Linq.Mapping.MetaTable}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IEnumerable<MetaTable>\n  nameWithType: IEnumerable<MetaTable>\n  fullName: System.Collections.Generic.IEnumerable<System.Data.Linq.Mapping.MetaTable>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: IEnumerable<System.Data.Linq.Mapping.MetaTable>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Data.Linq.Mapping.MetaTable\n    name: MetaTable\n    nameWithType: MetaTable\n    fullName: MetaTable\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Data.Linq.Mapping.MetaModel.MappingSource\n  parent: System.Data.Linq.Mapping.MetaModel\n  isExternal: false\n  name: MappingSource\n  nameWithType: MetaModel.MappingSource\n  fullName: System.Data.Linq.Mapping.MetaModel.MappingSource\n- uid: System.Data.Linq.Mapping.MappingSource\n  parent: System.Data.Linq.Mapping\n  isExternal: false\n  name: MappingSource\n  nameWithType: MappingSource\n  fullName: System.Data.Linq.Mapping.MappingSource\n- uid: System.Data.Linq.Mapping.MetaModel.ProviderType\n  parent: System.Data.Linq.Mapping.MetaModel\n  isExternal: false\n  name: ProviderType\n  nameWithType: MetaModel.ProviderType\n  fullName: System.Data.Linq.Mapping.MetaModel.ProviderType\n- uid: System.Data.Linq.Mapping.MetaModel.#ctor*\n  parent: System.Data.Linq.Mapping.MetaModel\n  isExternal: false\n  name: MetaModel\n  nameWithType: MetaModel.MetaModel\n- uid: System.Data.Linq.Mapping.MetaModel.ContextType*\n  parent: System.Data.Linq.Mapping.MetaModel\n  isExternal: false\n  name: ContextType\n  nameWithType: MetaModel.ContextType\n- uid: System.Data.Linq.Mapping.MetaModel.DatabaseName*\n  parent: System.Data.Linq.Mapping.MetaModel\n  isExternal: false\n  name: DatabaseName\n  nameWithType: MetaModel.DatabaseName\n- uid: System.Data.Linq.Mapping.MetaModel.GetFunction*\n  parent: System.Data.Linq.Mapping.MetaModel\n  isExternal: false\n  name: GetFunction\n  nameWithType: MetaModel.GetFunction\n- uid: System.Data.Linq.Mapping.MetaModel.GetFunctions*\n  parent: System.Data.Linq.Mapping.MetaModel\n  isExternal: false\n  name: GetFunctions\n  nameWithType: MetaModel.GetFunctions\n- uid: System.Data.Linq.Mapping.MetaModel.GetMetaType*\n  parent: System.Data.Linq.Mapping.MetaModel\n  isExternal: false\n  name: GetMetaType\n  nameWithType: MetaModel.GetMetaType\n- uid: System.Data.Linq.Mapping.MetaModel.GetTable*\n  parent: System.Data.Linq.Mapping.MetaModel\n  isExternal: false\n  name: GetTable\n  nameWithType: MetaModel.GetTable\n- uid: System.Data.Linq.Mapping.MetaModel.GetTables*\n  parent: System.Data.Linq.Mapping.MetaModel\n  isExternal: false\n  name: GetTables\n  nameWithType: MetaModel.GetTables\n- uid: System.Data.Linq.Mapping.MetaModel.MappingSource*\n  parent: System.Data.Linq.Mapping.MetaModel\n  isExternal: false\n  name: MappingSource\n  nameWithType: MetaModel.MappingSource\n- uid: System.Data.Linq.Mapping.MetaModel.ProviderType*\n  parent: System.Data.Linq.Mapping.MetaModel\n  isExternal: false\n  name: ProviderType\n  nameWithType: MetaModel.ProviderType\n"}