{"nodes":[{"pos":[651,797],"content":"Provides an implementation of <xref:System.IAsyncResult> for use by XML Web service proxies to implement the standard asynchronous method pattern.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides an implementation of &lt;xref:System.IAsyncResult&gt; for use by XML Web service proxies to implement the standard asynchronous method pattern.","pos":[0,146],"source":"Provides an implementation of <xref:System.IAsyncResult> for use by XML Web service proxies to implement the standard asynchronous method pattern."}]},{"pos":[1971,2019],"content":"Cancels an asynchronous XML Web service request.","needQuote":true,"needEscape":true,"nodes":[{"content":"Cancels an asynchronous XML Web service request.","pos":[0,48]}]},{"pos":[3020,3162],"content":"Gets the object provided in the last parameter to the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Begin\" name=\"Begin\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> method asynchronous call.","needQuote":true,"needEscape":true,"source":"Gets the object provided in the last parameter to the <xref uid=\"langword_csharp_Begin\" name=\"Begin\" href=\"\"></xref> method asynchronous call."},{"pos":[3277,3415],"content":"The &lt;xref:System.Object&gt; provided in the last parameter to the <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Begin\" name=\"Begin\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> method call.","needQuote":true,"needEscape":true,"source":"The <xref:System.Object> provided in the last parameter to the <xref uid=\"langword_csharp_Begin\" name=\"Begin\" href=\"\"></xref> method call."},{"pos":[3973,4078],"content":"Gets a <xref:System.Threading.WaitHandle> that is used to wait for an asynchronous operation to complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a &lt;xref:System.Threading.WaitHandle&gt; that is used to wait for an asynchronous operation to complete.","pos":[0,105],"source":"Gets a <xref:System.Threading.WaitHandle> that is used to wait for an asynchronous operation to complete."}]},{"pos":[4091,4421],"content":"The <xref:System.Threading.WaitHandle> can be used to perform a <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>, or <xref:System.Threading.WaitHandle.WaitAll%2A> to wait for the asynchronous call to complete.       For more details, see <xref:System.IAsyncResult.AsyncWaitHandle%2A>.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <xref:System.Threading.WaitHandle> can be used to perform a <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>, or <xref:System.Threading.WaitHandle.WaitAll%2A> to wait for the asynchronous call to complete.       For more details, see <xref:System.IAsyncResult.AsyncWaitHandle%2A>.","pos":[0,328],"nodes":[{"content":"The &lt;xref:System.Threading.WaitHandle&gt; can be used to perform a &lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;, &lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;, or &lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt; to wait for the asynchronous call to complete.","pos":[0,253],"source":"The <xref:System.Threading.WaitHandle> can be used to perform a <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>, or <xref:System.Threading.WaitHandle.WaitAll%2A> to wait for the asynchronous call to complete."},{"content":"For more details, see &lt;xref:System.IAsyncResult.AsyncWaitHandle%2A&gt;.","pos":[260,328],"source":"       For more details, see <xref:System.IAsyncResult.AsyncWaitHandle%2A>."}]}]},{"pos":[4577,4677],"content":"A <xref:System.Threading.WaitHandle> that is used to wait for an asynchronous operation to complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Threading.WaitHandle&gt; that is used to wait for an asynchronous operation to complete.","pos":[0,100],"source":"A <xref:System.Threading.WaitHandle> that is used to wait for an asynchronous operation to complete."}]},{"pos":[5275,5346],"content":"Gets a value indicating whether the Begin call completed synchronously.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value indicating whether the Begin call completed synchronously.","pos":[0,71]}]},{"pos":[5358,5891],"content":"If CompletedSynchronously is set to `true` within the <xref:System.AsyncCallback> delegate, it is probable that the thread that called <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A> is the current thread. In this case, you should be careful about making another asynchronous Begin call from the callback method, since it can cause the stack to grow without bound if the calls continue to complete synchronously. Instead, the call should be completed at the original call site, outside the callback method.","needQuote":true,"needEscape":true,"nodes":[{"content":"If CompletedSynchronously is set to <ph id=\"ph1\">`true`</ph> within the &lt;xref:System.AsyncCallback&gt; delegate, it is probable that the thread that called &lt;xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A&gt; is the current thread.","pos":[0,232],"source":"If CompletedSynchronously is set to `true` within the <xref:System.AsyncCallback> delegate, it is probable that the thread that called <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A> is the current thread."},{"content":"In this case, you should be careful about making another asynchronous Begin call from the callback method, since it can cause the stack to grow without bound if the calls continue to complete synchronously.","pos":[233,439]},{"content":"Instead, the call should be completed at the original call site, outside the callback method.","pos":[440,533]}]},{"pos":[6017,6195],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the Begin call completed synchronously; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the Begin call completed synchronously; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[6745,6832],"content":"Gets a value indicating whether the asynchronous XML Web service request has completed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value indicating whether the asynchronous XML Web service request has completed.","pos":[0,87]}]},{"pos":[6947,7141],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the asynchronous XML Web service request has completed; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the asynchronous XML Web service request has completed; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.Services.Protocols.WebClientAsyncResult\n  id: WebClientAsyncResult\n  children:\n  - System.Web.Services.Protocols.WebClientAsyncResult.Abort\n  - System.Web.Services.Protocols.WebClientAsyncResult.AsyncState\n  - System.Web.Services.Protocols.WebClientAsyncResult.AsyncWaitHandle\n  - System.Web.Services.Protocols.WebClientAsyncResult.CompletedSynchronously\n  - System.Web.Services.Protocols.WebClientAsyncResult.IsCompleted\n  langs:\n  - csharp\n  name: WebClientAsyncResult\n  nameWithType: WebClientAsyncResult\n  fullName: System.Web.Services.Protocols.WebClientAsyncResult\n  type: Class\n  summary: Provides an implementation of <xref:System.IAsyncResult> for use by XML Web service proxies to implement the standard asynchronous method pattern.\n  remarks: \"When you call the `BeginMyMethodName` method, where `MyMethodName` is the synchronous version of the method, on an XML Web service proxy class, an instance of the WebClientAsyncResult is returned. Following the standard asynchronous design pattern, that instance of WebClientAsyncResult must later be passed to `EndMyMethodName` to complete the asynchronous method call.  \\n  \\n For details on calling XML Web services asynchronously, see [&#91;\\\\<topic://cpconInvokingWebServicesAsynchronously>&#93;](http://msdn.microsoft.com/en-us/f9e26a43-063a-440a-8c73-a02f2ccf3ea0).\"\n  syntax:\n    content: 'public class WebClientAsyncResult : IAsyncResult'\n  inheritance:\n  - System.Object\n  implements:\n  - System.IAsyncResult\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Web.Services.Protocols.WebClientAsyncResult.Abort\n  id: Abort\n  parent: System.Web.Services.Protocols.WebClientAsyncResult\n  langs:\n  - csharp\n  name: Abort()\n  nameWithType: WebClientAsyncResult.Abort()\n  fullName: System.Web.Services.Protocols.WebClientAsyncResult.Abort()\n  type: Method\n  assemblies:\n  - System.Web.Services\n  namespace: System.Web.Services.Protocols\n  summary: Cancels an asynchronous XML Web service request.\n  remarks: ''\n  example:\n  - The XML Web service request is canceled if the underlying transport supports the <xref:System.Net.WebRequest.Abort%2A?displayProperty=fullName> method. If the corresponding `End` method is subsequently called after the Abort method, a <xref:System.Net.WebException> is thrown, setting the <xref:System.Net.WebException.Status%2A> property to <xref:System.Net.WebExceptionStatus>.\n  syntax:\n    content: public void Abort ();\n    parameters: []\n  overload: System.Web.Services.Protocols.WebClientAsyncResult.Abort*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Services.Protocols.WebClientAsyncResult.AsyncState\n  id: AsyncState\n  parent: System.Web.Services.Protocols.WebClientAsyncResult\n  langs:\n  - csharp\n  name: AsyncState\n  nameWithType: WebClientAsyncResult.AsyncState\n  fullName: System.Web.Services.Protocols.WebClientAsyncResult.AsyncState\n  type: Property\n  assemblies:\n  - System.Web.Services\n  namespace: System.Web.Services.Protocols\n  summary: Gets the object provided in the last parameter to the <xref uid=\"langword_csharp_Begin\" name=\"Begin\" href=\"\"></xref> method asynchronous call.\n  syntax:\n    content: public object AsyncState { get; }\n    return:\n      type: System.Object\n      description: The <xref:System.Object> provided in the last parameter to the <xref uid=\"langword_csharp_Begin\" name=\"Begin\" href=\"\"></xref> method call.\n  overload: System.Web.Services.Protocols.WebClientAsyncResult.AsyncState*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Services.Protocols.WebClientAsyncResult.AsyncWaitHandle\n  id: AsyncWaitHandle\n  parent: System.Web.Services.Protocols.WebClientAsyncResult\n  langs:\n  - csharp\n  name: AsyncWaitHandle\n  nameWithType: WebClientAsyncResult.AsyncWaitHandle\n  fullName: System.Web.Services.Protocols.WebClientAsyncResult.AsyncWaitHandle\n  type: Property\n  assemblies:\n  - System.Web.Services\n  namespace: System.Web.Services.Protocols\n  summary: Gets a <xref:System.Threading.WaitHandle> that is used to wait for an asynchronous operation to complete.\n  remarks: \"The <xref:System.Threading.WaitHandle> can be used to perform a <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>, or <xref:System.Threading.WaitHandle.WaitAll%2A> to wait for the asynchronous call to complete.  \\n  \\n For more details, see <xref:System.IAsyncResult.AsyncWaitHandle%2A>.\"\n  syntax:\n    content: public System.Threading.WaitHandle AsyncWaitHandle { get; }\n    return:\n      type: System.Threading.WaitHandle\n      description: A <xref:System.Threading.WaitHandle> that is used to wait for an asynchronous operation to complete.\n  overload: System.Web.Services.Protocols.WebClientAsyncResult.AsyncWaitHandle*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Services.Protocols.WebClientAsyncResult.CompletedSynchronously\n  id: CompletedSynchronously\n  parent: System.Web.Services.Protocols.WebClientAsyncResult\n  langs:\n  - csharp\n  name: CompletedSynchronously\n  nameWithType: WebClientAsyncResult.CompletedSynchronously\n  fullName: System.Web.Services.Protocols.WebClientAsyncResult.CompletedSynchronously\n  type: Property\n  assemblies:\n  - System.Web.Services\n  namespace: System.Web.Services.Protocols\n  summary: Gets a value indicating whether the Begin call completed synchronously.\n  remarks: If CompletedSynchronously is set to `true` within the <xref:System.AsyncCallback> delegate, it is probable that the thread that called <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A> is the current thread. In this case, you should be careful about making another asynchronous Begin call from the callback method, since it can cause the stack to grow without bound if the calls continue to complete synchronously. Instead, the call should be completed at the original call site, outside the callback method.\n  syntax:\n    content: public bool CompletedSynchronously { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the Begin call completed synchronously; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Web.Services.Protocols.WebClientAsyncResult.CompletedSynchronously*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.Services.Protocols.WebClientAsyncResult.IsCompleted\n  id: IsCompleted\n  parent: System.Web.Services.Protocols.WebClientAsyncResult\n  langs:\n  - csharp\n  name: IsCompleted\n  nameWithType: WebClientAsyncResult.IsCompleted\n  fullName: System.Web.Services.Protocols.WebClientAsyncResult.IsCompleted\n  type: Property\n  assemblies:\n  - System.Web.Services\n  namespace: System.Web.Services.Protocols\n  summary: Gets a value indicating whether the asynchronous XML Web service request has completed.\n  syntax:\n    content: public bool IsCompleted { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the asynchronous XML Web service request has completed; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Web.Services.Protocols.WebClientAsyncResult.IsCompleted*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Web.Services.Protocols.WebClientAsyncResult.Abort\n  parent: System.Web.Services.Protocols.WebClientAsyncResult\n  isExternal: false\n  name: Abort()\n  nameWithType: WebClientAsyncResult.Abort()\n  fullName: System.Web.Services.Protocols.WebClientAsyncResult.Abort()\n- uid: System.Web.Services.Protocols.WebClientAsyncResult.AsyncState\n  parent: System.Web.Services.Protocols.WebClientAsyncResult\n  isExternal: false\n  name: AsyncState\n  nameWithType: WebClientAsyncResult.AsyncState\n  fullName: System.Web.Services.Protocols.WebClientAsyncResult.AsyncState\n- uid: System.Web.Services.Protocols.WebClientAsyncResult.AsyncWaitHandle\n  parent: System.Web.Services.Protocols.WebClientAsyncResult\n  isExternal: false\n  name: AsyncWaitHandle\n  nameWithType: WebClientAsyncResult.AsyncWaitHandle\n  fullName: System.Web.Services.Protocols.WebClientAsyncResult.AsyncWaitHandle\n- uid: System.Threading.WaitHandle\n  parent: System.Threading\n  isExternal: true\n  name: WaitHandle\n  nameWithType: WaitHandle\n  fullName: System.Threading.WaitHandle\n- uid: System.Web.Services.Protocols.WebClientAsyncResult.CompletedSynchronously\n  parent: System.Web.Services.Protocols.WebClientAsyncResult\n  isExternal: false\n  name: CompletedSynchronously\n  nameWithType: WebClientAsyncResult.CompletedSynchronously\n  fullName: System.Web.Services.Protocols.WebClientAsyncResult.CompletedSynchronously\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Web.Services.Protocols.WebClientAsyncResult.IsCompleted\n  parent: System.Web.Services.Protocols.WebClientAsyncResult\n  isExternal: false\n  name: IsCompleted\n  nameWithType: WebClientAsyncResult.IsCompleted\n  fullName: System.Web.Services.Protocols.WebClientAsyncResult.IsCompleted\n- uid: System.Web.Services.Protocols.WebClientAsyncResult.Abort*\n  parent: System.Web.Services.Protocols.WebClientAsyncResult\n  isExternal: false\n  name: Abort\n  nameWithType: WebClientAsyncResult.Abort\n- uid: System.Web.Services.Protocols.WebClientAsyncResult.AsyncState*\n  parent: System.Web.Services.Protocols.WebClientAsyncResult\n  isExternal: false\n  name: AsyncState\n  nameWithType: WebClientAsyncResult.AsyncState\n- uid: System.Web.Services.Protocols.WebClientAsyncResult.AsyncWaitHandle*\n  parent: System.Web.Services.Protocols.WebClientAsyncResult\n  isExternal: false\n  name: AsyncWaitHandle\n  nameWithType: WebClientAsyncResult.AsyncWaitHandle\n- uid: System.Web.Services.Protocols.WebClientAsyncResult.CompletedSynchronously*\n  parent: System.Web.Services.Protocols.WebClientAsyncResult\n  isExternal: false\n  name: CompletedSynchronously\n  nameWithType: WebClientAsyncResult.CompletedSynchronously\n- uid: System.Web.Services.Protocols.WebClientAsyncResult.IsCompleted*\n  parent: System.Web.Services.Protocols.WebClientAsyncResult\n  isExternal: false\n  name: IsCompleted\n  nameWithType: WebClientAsyncResult.IsCompleted\n"}