{"nodes":[{"pos":[503,684],"content":"Converts task-returning asynchronous methods into methods that use the asynchronous programming model used in previous versions of ASP.NET and that is based on begin and end events.","needQuote":true,"needEscape":true,"nodes":[{"content":"Converts task-returning asynchronous methods into methods that use the asynchronous programming model used in previous versions of ASP.NET and that is based on begin and end events.","pos":[0,181]}]},{"pos":[696,1764],"content":"To handle asynchronous tasks in ASP.NET 4.5, you implement the logic to return a task as a <xref:System.Web.TaskEventHandler> delegate. This model of asynchronous task-based programming supersedes the model used in previous versions of ASP.NET, which bases all event handling on begin and end events. After you implement a <xref:System.Web.TaskEventHandler> delegate, you can then pass it to the <xref:System.Web.EventHandlerTaskAsyncHelper.%23ctor%2A> constructor, which wraps the task-returning logic and converts the handler to the model that uses begin and end events. The EventHandlerTaskAsyncHelper class enables your <xref:System.Web.TaskEventHandler> object to be compatible with the ASP.NET page framework. When you call the <xref:System.Web.UI.Page.AddOnPreRenderCompleteAsync%2A> method to process the task for an asynchronous page, you can use the <xref:System.Web.EventHandlerTaskAsyncHelper.BeginEventHandler%2A> and <xref:System.Web.EventHandlerTaskAsyncHelper.EndEventHandler%2A> properties to pass the converted begin and event handlers to the method.","needQuote":true,"needEscape":true,"nodes":[{"content":"To handle asynchronous tasks in ASP.NET 4.5, you implement the logic to return a task as a <xref:System.Web.TaskEventHandler> delegate. This model of asynchronous task-based programming supersedes the model used in previous versions of ASP.NET, which bases all event handling on begin and end events. After you implement a <xref:System.Web.TaskEventHandler> delegate, you can then pass it to the <xref:System.Web.EventHandlerTaskAsyncHelper.%23ctor%2A> constructor, which wraps the task-returning logic and converts the handler to the model that uses begin and end events. The EventHandlerTaskAsyncHelper class enables your <xref:System.Web.TaskEventHandler> object to be compatible with the ASP.NET page framework. When you call the <xref:System.Web.UI.Page.AddOnPreRenderCompleteAsync%2A> method to process the task for an asynchronous page, you can use the <xref:System.Web.EventHandlerTaskAsyncHelper.BeginEventHandler%2A> and <xref:System.Web.EventHandlerTaskAsyncHelper.EndEventHandler%2A> properties to pass the converted begin and event handlers to the method.","pos":[0,1068],"nodes":[{"content":"To handle asynchronous tasks in ASP.NET 4.5, you implement the logic to return a task as a &lt;xref:System.Web.TaskEventHandler&gt; delegate.","pos":[0,135],"source":"To handle asynchronous tasks in ASP.NET 4.5, you implement the logic to return a task as a <xref:System.Web.TaskEventHandler> delegate."},{"content":"This model of asynchronous task-based programming supersedes the model used in previous versions of ASP.NET, which bases all event handling on begin and end events.","pos":[136,300]},{"content":"After you implement a &lt;xref:System.Web.TaskEventHandler&gt; delegate, you can then pass it to the &lt;xref:System.Web.EventHandlerTaskAsyncHelper.%23ctor%2A&gt; constructor, which wraps the task-returning logic and converts the handler to the model that uses begin and end events.","pos":[301,572],"source":" After you implement a <xref:System.Web.TaskEventHandler> delegate, you can then pass it to the <xref:System.Web.EventHandlerTaskAsyncHelper.%23ctor%2A> constructor, which wraps the task-returning logic and converts the handler to the model that uses begin and end events."},{"content":"The EventHandlerTaskAsyncHelper class enables your &lt;xref:System.Web.TaskEventHandler&gt; object to be compatible with the ASP.NET page framework.","pos":[573,715],"source":" The EventHandlerTaskAsyncHelper class enables your <xref:System.Web.TaskEventHandler> object to be compatible with the ASP.NET page framework."},{"content":"When you call the &lt;xref:System.Web.UI.Page.AddOnPreRenderCompleteAsync%2A&gt; method to process the task for an asynchronous page, you can use the &lt;xref:System.Web.EventHandlerTaskAsyncHelper.BeginEventHandler%2A&gt; and &lt;xref:System.Web.EventHandlerTaskAsyncHelper.EndEventHandler%2A&gt; properties to pass the converted begin and event handlers to the method.","pos":[716,1068],"source":" When you call the <xref:System.Web.UI.Page.AddOnPreRenderCompleteAsync%2A> method to process the task for an asynchronous page, you can use the <xref:System.Web.EventHandlerTaskAsyncHelper.BeginEventHandler%2A> and <xref:System.Web.EventHandlerTaskAsyncHelper.EndEventHandler%2A> properties to pass the converted begin and event handlers to the method."}]}]},{"pos":[2450,2550],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Web.EventHandlerTaskAsyncHelper\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Web.EventHandlerTaskAsyncHelper\"></xref> class."},{"pos":[2741,2763],"content":"The asynchronous task.","needQuote":true,"needEscape":true,"nodes":[{"content":"The asynchronous task.","pos":[0,22]}]},{"pos":[3257,3354],"content":"Represents the <bpt id=\"p1\">&lt;xref href=\"System.Web.BeginEventHandler\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> method for an asynchronous task.","needQuote":true,"needEscape":true,"source":"Represents the <xref href=\"System.Web.BeginEventHandler\"></xref> method for an asynchronous task."},{"pos":[3513,3579],"content":"The method that handles the begin event for the asynchronous task.","needQuote":true,"needEscape":true,"nodes":[{"content":"The method that handles the begin event for the asynchronous task.","pos":[0,66]}]},{"pos":[4075,4170],"content":"Represents the <bpt id=\"p1\">&lt;xref href=\"System.Web.EndEventHandler\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> method for an asynchronous task.","needQuote":true,"needEscape":true,"source":"Represents the <xref href=\"System.Web.EndEventHandler\"></xref> method for an asynchronous task."},{"pos":[4323,4387],"content":"The method that handles the end event for the asynchronous task.","needQuote":true,"needEscape":true,"nodes":[{"content":"The method that handles the end event for the asynchronous task.","pos":[0,64]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.EventHandlerTaskAsyncHelper\n  id: EventHandlerTaskAsyncHelper\n  children:\n  - System.Web.EventHandlerTaskAsyncHelper.#ctor(System.Web.TaskEventHandler)\n  - System.Web.EventHandlerTaskAsyncHelper.BeginEventHandler\n  - System.Web.EventHandlerTaskAsyncHelper.EndEventHandler\n  langs:\n  - csharp\n  name: EventHandlerTaskAsyncHelper\n  nameWithType: EventHandlerTaskAsyncHelper\n  fullName: System.Web.EventHandlerTaskAsyncHelper\n  type: Class\n  summary: Converts task-returning asynchronous methods into methods that use the asynchronous programming model used in previous versions of ASP.NET and that is based on begin and end events.\n  remarks: To handle asynchronous tasks in ASP.NET 4.5, you implement the logic to return a task as a <xref:System.Web.TaskEventHandler> delegate. This model of asynchronous task-based programming supersedes the model used in previous versions of ASP.NET, which bases all event handling on begin and end events. After you implement a <xref:System.Web.TaskEventHandler> delegate, you can then pass it to the <xref:System.Web.EventHandlerTaskAsyncHelper.%23ctor%2A> constructor, which wraps the task-returning logic and converts the handler to the model that uses begin and end events. The EventHandlerTaskAsyncHelper class enables your <xref:System.Web.TaskEventHandler> object to be compatible with the ASP.NET page framework. When you call the <xref:System.Web.UI.Page.AddOnPreRenderCompleteAsync%2A> method to process the task for an asynchronous page, you can use the <xref:System.Web.EventHandlerTaskAsyncHelper.BeginEventHandler%2A> and <xref:System.Web.EventHandlerTaskAsyncHelper.EndEventHandler%2A> properties to pass the converted begin and event handlers to the method.\n  syntax:\n    content: public sealed class EventHandlerTaskAsyncHelper\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Web.EventHandlerTaskAsyncHelper.#ctor(System.Web.TaskEventHandler)\n  id: '#ctor(System.Web.TaskEventHandler)'\n  parent: System.Web.EventHandlerTaskAsyncHelper\n  langs:\n  - csharp\n  name: EventHandlerTaskAsyncHelper(TaskEventHandler)\n  nameWithType: EventHandlerTaskAsyncHelper.EventHandlerTaskAsyncHelper(TaskEventHandler)\n  fullName: System.Web.EventHandlerTaskAsyncHelper.EventHandlerTaskAsyncHelper(TaskEventHandler)\n  type: Constructor\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Initializes a new instance of the <xref href=\"System.Web.EventHandlerTaskAsyncHelper\"></xref> class.\n  syntax:\n    content: public EventHandlerTaskAsyncHelper (System.Web.TaskEventHandler handler);\n    parameters:\n    - id: handler\n      type: System.Web.TaskEventHandler\n      description: The asynchronous task.\n  overload: System.Web.EventHandlerTaskAsyncHelper.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.EventHandlerTaskAsyncHelper.BeginEventHandler\n  id: BeginEventHandler\n  parent: System.Web.EventHandlerTaskAsyncHelper\n  langs:\n  - csharp\n  name: BeginEventHandler\n  nameWithType: EventHandlerTaskAsyncHelper.BeginEventHandler\n  fullName: System.Web.EventHandlerTaskAsyncHelper.BeginEventHandler\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Represents the <xref href=\"System.Web.BeginEventHandler\"></xref> method for an asynchronous task.\n  syntax:\n    content: public System.Web.BeginEventHandler BeginEventHandler { get; }\n    return:\n      type: System.Web.BeginEventHandler\n      description: The method that handles the begin event for the asynchronous task.\n  overload: System.Web.EventHandlerTaskAsyncHelper.BeginEventHandler*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.EventHandlerTaskAsyncHelper.EndEventHandler\n  id: EndEventHandler\n  parent: System.Web.EventHandlerTaskAsyncHelper\n  langs:\n  - csharp\n  name: EndEventHandler\n  nameWithType: EventHandlerTaskAsyncHelper.EndEventHandler\n  fullName: System.Web.EventHandlerTaskAsyncHelper.EndEventHandler\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Represents the <xref href=\"System.Web.EndEventHandler\"></xref> method for an asynchronous task.\n  syntax:\n    content: public System.Web.EndEventHandler EndEventHandler { get; }\n    return:\n      type: System.Web.EndEventHandler\n      description: The method that handles the end event for the asynchronous task.\n  overload: System.Web.EventHandlerTaskAsyncHelper.EndEventHandler*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Web.EventHandlerTaskAsyncHelper.#ctor(System.Web.TaskEventHandler)\n  parent: System.Web.EventHandlerTaskAsyncHelper\n  isExternal: false\n  name: EventHandlerTaskAsyncHelper(TaskEventHandler)\n  nameWithType: EventHandlerTaskAsyncHelper.EventHandlerTaskAsyncHelper(TaskEventHandler)\n  fullName: System.Web.EventHandlerTaskAsyncHelper.EventHandlerTaskAsyncHelper(TaskEventHandler)\n- uid: System.Web.TaskEventHandler\n  parent: System.Web\n  isExternal: false\n  name: TaskEventHandler\n  nameWithType: TaskEventHandler\n  fullName: System.Web.TaskEventHandler\n- uid: System.Web.EventHandlerTaskAsyncHelper.BeginEventHandler\n  parent: System.Web.EventHandlerTaskAsyncHelper\n  isExternal: false\n  name: BeginEventHandler\n  nameWithType: EventHandlerTaskAsyncHelper.BeginEventHandler\n  fullName: System.Web.EventHandlerTaskAsyncHelper.BeginEventHandler\n- uid: System.Web.BeginEventHandler\n  parent: System.Web\n  isExternal: false\n  name: BeginEventHandler\n  nameWithType: BeginEventHandler\n  fullName: System.Web.BeginEventHandler\n- uid: System.Web.EventHandlerTaskAsyncHelper.EndEventHandler\n  parent: System.Web.EventHandlerTaskAsyncHelper\n  isExternal: false\n  name: EndEventHandler\n  nameWithType: EventHandlerTaskAsyncHelper.EndEventHandler\n  fullName: System.Web.EventHandlerTaskAsyncHelper.EndEventHandler\n- uid: System.Web.EndEventHandler\n  parent: System.Web\n  isExternal: false\n  name: EndEventHandler\n  nameWithType: EndEventHandler\n  fullName: System.Web.EndEventHandler\n- uid: System.Web.EventHandlerTaskAsyncHelper.#ctor*\n  parent: System.Web.EventHandlerTaskAsyncHelper\n  isExternal: false\n  name: EventHandlerTaskAsyncHelper\n  nameWithType: EventHandlerTaskAsyncHelper.EventHandlerTaskAsyncHelper\n- uid: System.Web.EventHandlerTaskAsyncHelper.BeginEventHandler*\n  parent: System.Web.EventHandlerTaskAsyncHelper\n  isExternal: false\n  name: BeginEventHandler\n  nameWithType: EventHandlerTaskAsyncHelper.BeginEventHandler\n- uid: System.Web.EventHandlerTaskAsyncHelper.EndEventHandler*\n  parent: System.Web.EventHandlerTaskAsyncHelper\n  isExternal: false\n  name: EndEventHandler\n  nameWithType: EventHandlerTaskAsyncHelper.EndEventHandler\n"}