{"nodes":[{"pos":[4997,5009],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[5794,5806],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[5868,5880],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[5947,5959],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[6528,6540],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[7586,7598],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[7657,7669],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[8321,8333],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[8392,8404],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[8946,8958],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[9586,9598],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[9657,9669],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[10269,10281],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[10943,10955],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[11039,11051],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[12489,12501],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[15206,15218],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[15279,15291],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[16492,16504],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[18092,18104],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[18163,18175],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[19415,19427],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[19515,19527],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[20624,20636],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[21673,21685],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[21744,21756],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[22985,22997],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[23085,23097],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[23156,23168],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[24338,24350],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[25693,25705],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[26669,26681],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[27260,27272],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Speech.Recognition.SemanticValue\n  id: SemanticValue\n  children:\n  - System.Speech.Recognition.SemanticValue.#ctor(System.Object)\n  - System.Speech.Recognition.SemanticValue.#ctor(System.String,System.Object,System.Single)\n  - System.Speech.Recognition.SemanticValue.Confidence\n  - System.Speech.Recognition.SemanticValue.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue})\n  - System.Speech.Recognition.SemanticValue.ContainsKey(System.String)\n  - System.Speech.Recognition.SemanticValue.Count\n  - System.Speech.Recognition.SemanticValue.Equals(System.Object)\n  - System.Speech.Recognition.SemanticValue.GetHashCode\n  - System.Speech.Recognition.SemanticValue.Item(System.String)\n  - System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue})\n  - System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#Clear\n  - System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue}[],System.Int32)\n  - System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#IsReadOnly\n  - System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue})\n  - System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary{System#String,System#Speech#Recognition#SemanticValue}#Add(System.String,System.Speech.Recognition.SemanticValue)\n  - System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary{System#String,System#Speech#Recognition#SemanticValue}#Keys\n  - System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary{System#String,System#Speech#Recognition#SemanticValue}#Remove(System.String)\n  - System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary{System#String,System#Speech#Recognition#SemanticValue}#TryGetValue(System.String,System.Speech.Recognition.SemanticValue@)\n  - System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary{System#String,System#Speech#Recognition#SemanticValue}#Values\n  - System.Speech.Recognition.SemanticValue.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#GetEnumerator\n  - System.Speech.Recognition.SemanticValue.System#Collections#IEnumerable#GetEnumerator\n  - System.Speech.Recognition.SemanticValue.Value\n  langs:\n  - csharp\n  name: SemanticValue\n  nameWithType: SemanticValue\n  fullName: System.Speech.Recognition.SemanticValue\n  type: Class\n  syntax:\n    content: >-\n      [System.Diagnostics.DebuggerDisplay(\"'{_keyName}'= {Value}  -  Children = {_dictionary.Count}\")]\n\n      [System.Diagnostics.DebuggerTypeProxy(typeof(System.Speech.Recognition.SemanticValue/SemanticValueDebugDisplay))]\n\n      public sealed class SemanticValue : System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<string,System.Speech.Recognition.SemanticValue>>, System.Collections.Generic.IDictionary<string,System.Speech.Recognition.SemanticValue>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string,System.Speech.Recognition.SemanticValue>>\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>\n  - System.Collections.Generic.IDictionary<System.String,System.Speech.Recognition.SemanticValue>\n  - System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SemanticValue.#ctor(System.Object)\n  id: '#ctor(System.Object)'\n  parent: System.Speech.Recognition.SemanticValue\n  langs:\n  - csharp\n  name: SemanticValue(Object)\n  nameWithType: SemanticValue.SemanticValue(Object)\n  fullName: System.Speech.Recognition.SemanticValue.SemanticValue(Object)\n  type: Constructor\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  syntax:\n    content: public SemanticValue (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: To be added.\n  overload: System.Speech.Recognition.SemanticValue.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SemanticValue.#ctor(System.String,System.Object,System.Single)\n  id: '#ctor(System.String,System.Object,System.Single)'\n  parent: System.Speech.Recognition.SemanticValue\n  langs:\n  - csharp\n  name: SemanticValue(String,Object,Single)\n  nameWithType: SemanticValue.SemanticValue(String,Object,Single)\n  fullName: System.Speech.Recognition.SemanticValue.SemanticValue(String,Object,Single)\n  type: Constructor\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  syntax:\n    content: public SemanticValue (string keyName, object value, float confidence);\n    parameters:\n    - id: keyName\n      type: System.String\n      description: To be added.\n    - id: value\n      type: System.Object\n      description: To be added.\n    - id: confidence\n      type: System.Single\n      description: To be added.\n  overload: System.Speech.Recognition.SemanticValue.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SemanticValue.Confidence\n  id: Confidence\n  parent: System.Speech.Recognition.SemanticValue\n  langs:\n  - csharp\n  name: Confidence\n  nameWithType: SemanticValue.Confidence\n  fullName: System.Speech.Recognition.SemanticValue.Confidence\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  syntax:\n    content: public float Confidence { get; }\n    return:\n      type: System.Single\n      description: To be added.\n  overload: System.Speech.Recognition.SemanticValue.Confidence*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SemanticValue.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue})\n  id: Contains(System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue})\n  parent: System.Speech.Recognition.SemanticValue\n  langs:\n  - csharp\n  name: Contains(KeyValuePair<String,SemanticValue>)\n  nameWithType: SemanticValue.Contains(KeyValuePair<String,SemanticValue>)\n  fullName: System.Speech.Recognition.SemanticValue.Contains(KeyValuePair<String,SemanticValue>)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  syntax:\n    content: public bool Contains (System.Collections.Generic.KeyValuePair<string,System.Speech.Recognition.SemanticValue> item);\n    parameters:\n    - id: item\n      type: System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue}\n      description: To be added.\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Speech.Recognition.SemanticValue.Contains*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SemanticValue.ContainsKey(System.String)\n  id: ContainsKey(System.String)\n  parent: System.Speech.Recognition.SemanticValue\n  langs:\n  - csharp\n  name: ContainsKey(String)\n  nameWithType: SemanticValue.ContainsKey(String)\n  fullName: System.Speech.Recognition.SemanticValue.ContainsKey(String)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  syntax:\n    content: public bool ContainsKey (string key);\n    parameters:\n    - id: key\n      type: System.String\n      description: To be added.\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Speech.Recognition.SemanticValue.ContainsKey*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SemanticValue.Count\n  id: Count\n  parent: System.Speech.Recognition.SemanticValue\n  langs:\n  - csharp\n  name: Count\n  nameWithType: SemanticValue.Count\n  fullName: System.Speech.Recognition.SemanticValue.Count\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  syntax:\n    content: public int Count { get; }\n    return:\n      type: System.Int32\n      description: To be added.\n  overload: System.Speech.Recognition.SemanticValue.Count*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SemanticValue.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Speech.Recognition.SemanticValue\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: SemanticValue.Equals(Object)\n  fullName: System.Speech.Recognition.SemanticValue.Equals(Object)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  syntax:\n    content: public override bool Equals (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: To be added.\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Speech.Recognition.SemanticValue.Equals*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SemanticValue.GetHashCode\n  id: GetHashCode\n  parent: System.Speech.Recognition.SemanticValue\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: SemanticValue.GetHashCode()\n  fullName: System.Speech.Recognition.SemanticValue.GetHashCode()\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: To be added.\n  overload: System.Speech.Recognition.SemanticValue.GetHashCode*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SemanticValue.Item(System.String)\n  id: Item(System.String)\n  parent: System.Speech.Recognition.SemanticValue\n  langs:\n  - csharp\n  name: Item(String)\n  nameWithType: SemanticValue.Item(String)\n  fullName: System.Speech.Recognition.SemanticValue.Item(String)\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  syntax:\n    content: public System.Speech.Recognition.SemanticValue this[string key] { get; set; }\n    parameters:\n    - id: key\n      type: System.String\n      description: To be added.\n    return:\n      type: System.Speech.Recognition.SemanticValue\n      description: To be added.\n  overload: System.Speech.Recognition.SemanticValue.Item*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue})\n  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue})\n  isEii: true\n  parent: System.Speech.Recognition.SemanticValue\n  langs:\n  - csharp\n  name: System.Collections.Generic.ICollection(KeyValuePair<String,SemanticValue>)\n  nameWithType: SemanticValue.System.Collections.Generic.ICollection(KeyValuePair<String,SemanticValue>)\n  fullName: System.Speech.Recognition.SemanticValue.System.Collections.Generic.ICollection(KeyValuePair<String,SemanticValue>)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  syntax:\n    content: void ICollection<KeyValuePair<string,SemanticValue>>.Add (System.Collections.Generic.KeyValuePair<string,System.Speech.Recognition.SemanticValue> key);\n    parameters:\n    - id: key\n      type: System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue}\n      description: To be added.\n  overload: System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection<System#Collections#Generic#KeyValuePair<System#String,System#Speech#Recognition#SemanticValue>>#Add*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#Clear\n  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#Clear\n  isEii: true\n  parent: System.Speech.Recognition.SemanticValue\n  langs:\n  - csharp\n  name: System.Collections.Generic.ICollection()\n  nameWithType: SemanticValue.System.Collections.Generic.ICollection()\n  fullName: System.Speech.Recognition.SemanticValue.System.Collections.Generic.ICollection()\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  syntax:\n    content: void ICollection<KeyValuePair<string,SemanticValue>>.Clear ();\n    parameters: []\n  overload: System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection<System#Collections#Generic#KeyValuePair<System#String,System#Speech#Recognition#SemanticValue>>#Clear*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue}[],System.Int32)\n  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue}[],System.Int32)\n  isEii: true\n  parent: System.Speech.Recognition.SemanticValue\n  langs:\n  - csharp\n  name: System.Collections.Generic.ICollection(KeyValuePair<String,SemanticValue>,Int32)\n  nameWithType: SemanticValue.System.Collections.Generic.ICollection(KeyValuePair<String,SemanticValue>,Int32)\n  fullName: System.Speech.Recognition.SemanticValue.System.Collections.Generic.ICollection(KeyValuePair<String,SemanticValue>,Int32)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  syntax:\n    content: void ICollection<KeyValuePair<string,SemanticValue>>.CopyTo (System.Collections.Generic.KeyValuePair<string,System.Speech.Recognition.SemanticValue>[] array, int index);\n    parameters:\n    - id: array\n      type: System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue}[]\n      description: To be added.\n    - id: index\n      type: System.Int32\n      description: To be added.\n  overload: System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection<System#Collections#Generic#KeyValuePair<System#String,System#Speech#Recognition#SemanticValue>>#CopyTo*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#IsReadOnly\n  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#IsReadOnly\n  isEii: true\n  parent: System.Speech.Recognition.SemanticValue\n  langs:\n  - csharp\n  name: System.Collections.Generic.ICollection\n  nameWithType: SemanticValue.System.Collections.Generic.ICollection\n  fullName: System.Speech.Recognition.SemanticValue.System.Collections.Generic.ICollection\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  syntax:\n    content: bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>.IsReadOnly { get; }\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection<System#Collections#Generic#KeyValuePair<System#String,System#Speech#Recognition#SemanticValue>>#IsReadOnly*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue})\n  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue})\n  isEii: true\n  parent: System.Speech.Recognition.SemanticValue\n  langs:\n  - csharp\n  name: System.Collections.Generic.ICollection(KeyValuePair<String,SemanticValue>)\n  nameWithType: SemanticValue.System.Collections.Generic.ICollection(KeyValuePair<String,SemanticValue>)\n  fullName: System.Speech.Recognition.SemanticValue.System.Collections.Generic.ICollection(KeyValuePair<String,SemanticValue>)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  syntax:\n    content: bool ICollection<KeyValuePair<string,SemanticValue>>.Remove (System.Collections.Generic.KeyValuePair<string,System.Speech.Recognition.SemanticValue> key);\n    parameters:\n    - id: key\n      type: System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue}\n      description: To be added.\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection<System#Collections#Generic#KeyValuePair<System#String,System#Speech#Recognition#SemanticValue>>#Remove*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary{System#String,System#Speech#Recognition#SemanticValue}#Add(System.String,System.Speech.Recognition.SemanticValue)\n  id: System#Collections#Generic#IDictionary{System#String,System#Speech#Recognition#SemanticValue}#Add(System.String,System.Speech.Recognition.SemanticValue)\n  isEii: true\n  parent: System.Speech.Recognition.SemanticValue\n  langs:\n  - csharp\n  name: System.Collections.Generic.IDictionary(String,SemanticValue)\n  nameWithType: SemanticValue.System.Collections.Generic.IDictionary(String,SemanticValue)\n  fullName: System.Speech.Recognition.SemanticValue.System.Collections.Generic.IDictionary(String,SemanticValue)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  syntax:\n    content: void IDictionary<string,SemanticValue>.Add (string key, System.Speech.Recognition.SemanticValue value);\n    parameters:\n    - id: key\n      type: System.String\n      description: To be added.\n    - id: value\n      type: System.Speech.Recognition.SemanticValue\n      description: To be added.\n  overload: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary<System#String,System#Speech#Recognition#SemanticValue>#Add*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary{System#String,System#Speech#Recognition#SemanticValue}#Keys\n  id: System#Collections#Generic#IDictionary{System#String,System#Speech#Recognition#SemanticValue}#Keys\n  isEii: true\n  parent: System.Speech.Recognition.SemanticValue\n  langs:\n  - csharp\n  name: System.Collections.Generic.IDictionary\n  nameWithType: SemanticValue.System.Collections.Generic.IDictionary\n  fullName: System.Speech.Recognition.SemanticValue.System.Collections.Generic.IDictionary\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  syntax:\n    content: System.Collections.Generic.ICollection<string> System.Collections.Generic.IDictionary<System.String,System.Speech.Recognition.SemanticValue>.Keys { get; }\n    return:\n      type: System.Collections.Generic.ICollection{System.String}\n      description: To be added.\n  overload: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary<System#String,System#Speech#Recognition#SemanticValue>#Keys*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary{System#String,System#Speech#Recognition#SemanticValue}#Remove(System.String)\n  id: System#Collections#Generic#IDictionary{System#String,System#Speech#Recognition#SemanticValue}#Remove(System.String)\n  isEii: true\n  parent: System.Speech.Recognition.SemanticValue\n  langs:\n  - csharp\n  name: System.Collections.Generic.IDictionary(String)\n  nameWithType: SemanticValue.System.Collections.Generic.IDictionary(String)\n  fullName: System.Speech.Recognition.SemanticValue.System.Collections.Generic.IDictionary(String)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  syntax:\n    content: bool IDictionary<string,SemanticValue>.Remove (string key);\n    parameters:\n    - id: key\n      type: System.String\n      description: To be added.\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary<System#String,System#Speech#Recognition#SemanticValue>#Remove*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary{System#String,System#Speech#Recognition#SemanticValue}#TryGetValue(System.String,System.Speech.Recognition.SemanticValue@)\n  id: System#Collections#Generic#IDictionary{System#String,System#Speech#Recognition#SemanticValue}#TryGetValue(System.String,System.Speech.Recognition.SemanticValue@)\n  isEii: true\n  parent: System.Speech.Recognition.SemanticValue\n  langs:\n  - csharp\n  name: System.Collections.Generic.IDictionary(String,SemanticValue)\n  nameWithType: SemanticValue.System.Collections.Generic.IDictionary(String,SemanticValue)\n  fullName: System.Speech.Recognition.SemanticValue.System.Collections.Generic.IDictionary(String,SemanticValue)\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  syntax:\n    content: bool IDictionary<string,SemanticValue>.TryGetValue (string key, out System.Speech.Recognition.SemanticValue value);\n    parameters:\n    - id: key\n      type: System.String\n      description: To be added.\n    - id: value\n      type: System.Speech.Recognition.SemanticValue\n      description: To be added.\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary<System#String,System#Speech#Recognition#SemanticValue>#TryGetValue*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary{System#String,System#Speech#Recognition#SemanticValue}#Values\n  id: System#Collections#Generic#IDictionary{System#String,System#Speech#Recognition#SemanticValue}#Values\n  isEii: true\n  parent: System.Speech.Recognition.SemanticValue\n  langs:\n  - csharp\n  name: System.Collections.Generic.IDictionary\n  nameWithType: SemanticValue.System.Collections.Generic.IDictionary\n  fullName: System.Speech.Recognition.SemanticValue.System.Collections.Generic.IDictionary\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  syntax:\n    content: System.Collections.Generic.ICollection<System.Speech.Recognition.SemanticValue> System.Collections.Generic.IDictionary<System.String,System.Speech.Recognition.SemanticValue>.Values { get; }\n    return:\n      type: System.Collections.Generic.ICollection{System.Speech.Recognition.SemanticValue}\n      description: To be added.\n  overload: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary<System#String,System#Speech#Recognition#SemanticValue>#Values*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#GetEnumerator\n  id: System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#GetEnumerator\n  isEii: true\n  parent: System.Speech.Recognition.SemanticValue\n  langs:\n  - csharp\n  name: System.Collections.Generic.IEnumerable()\n  nameWithType: SemanticValue.System.Collections.Generic.IEnumerable()\n  fullName: System.Speech.Recognition.SemanticValue.System.Collections.Generic.IEnumerable()\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  syntax:\n    content: System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<string,System.Speech.Recognition.SemanticValue>> IEnumerable<KeyValuePair<string,SemanticValue>>.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue}}\n      description: To be added.\n  overload: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IEnumerable<System#Collections#Generic#KeyValuePair<System#String,System#Speech#Recognition#SemanticValue>>#GetEnumerator*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SemanticValue.System#Collections#IEnumerable#GetEnumerator\n  id: System#Collections#IEnumerable#GetEnumerator\n  isEii: true\n  parent: System.Speech.Recognition.SemanticValue\n  langs:\n  - csharp\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: SemanticValue.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.Speech.Recognition.SemanticValue.System.Collections.IEnumerable.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  syntax:\n    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: To be added.\n  overload: System.Speech.Recognition.SemanticValue.System#Collections#IEnumerable#GetEnumerator*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Speech.Recognition.SemanticValue.Value\n  id: Value\n  parent: System.Speech.Recognition.SemanticValue\n  langs:\n  - csharp\n  name: Value\n  nameWithType: SemanticValue.Value\n  fullName: System.Speech.Recognition.SemanticValue.Value\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  syntax:\n    content: public object Value { get; }\n    return:\n      type: System.Object\n      description: To be added.\n  overload: System.Speech.Recognition.SemanticValue.Value*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Speech.Recognition.SemanticValue.#ctor(System.Object)\n  parent: System.Speech.Recognition.SemanticValue\n  isExternal: false\n  name: SemanticValue(Object)\n  nameWithType: SemanticValue.SemanticValue(Object)\n  fullName: System.Speech.Recognition.SemanticValue.SemanticValue(Object)\n- uid: System.Speech.Recognition.SemanticValue.#ctor(System.String,System.Object,System.Single)\n  parent: System.Speech.Recognition.SemanticValue\n  isExternal: false\n  name: SemanticValue(String,Object,Single)\n  nameWithType: SemanticValue.SemanticValue(String,Object,Single)\n  fullName: System.Speech.Recognition.SemanticValue.SemanticValue(String,Object,Single)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Single\n  parent: System\n  isExternal: true\n  name: Single\n  nameWithType: Single\n  fullName: System.Single\n- uid: System.Speech.Recognition.SemanticValue.Confidence\n  parent: System.Speech.Recognition.SemanticValue\n  isExternal: false\n  name: Confidence\n  nameWithType: SemanticValue.Confidence\n  fullName: System.Speech.Recognition.SemanticValue.Confidence\n- uid: System.Speech.Recognition.SemanticValue.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue})\n  parent: System.Speech.Recognition.SemanticValue\n  isExternal: false\n  name: Contains(KeyValuePair<String,SemanticValue>)\n  nameWithType: SemanticValue.Contains(KeyValuePair<String,SemanticValue>)\n  fullName: System.Speech.Recognition.SemanticValue.Contains(KeyValuePair<String,SemanticValue>)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: KeyValuePair<String,SemanticValue>\n  nameWithType: KeyValuePair<String,SemanticValue>\n  fullName: System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>\n  spec.csharp:\n  - uid: System.Collections.Generic.KeyValuePair`2\n    name: KeyValuePair\n    nameWithType: KeyValuePair\n    fullName: KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: String\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Speech.Recognition.SemanticValue\n    name: SemanticValue\n    nameWithType: SemanticValue\n    fullName: SemanticValue\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Speech.Recognition.SemanticValue.ContainsKey(System.String)\n  parent: System.Speech.Recognition.SemanticValue\n  isExternal: false\n  name: ContainsKey(String)\n  nameWithType: SemanticValue.ContainsKey(String)\n  fullName: System.Speech.Recognition.SemanticValue.ContainsKey(String)\n- uid: System.Speech.Recognition.SemanticValue.Count\n  parent: System.Speech.Recognition.SemanticValue\n  isExternal: false\n  name: Count\n  nameWithType: SemanticValue.Count\n  fullName: System.Speech.Recognition.SemanticValue.Count\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Speech.Recognition.SemanticValue.Equals(System.Object)\n  parent: System.Speech.Recognition.SemanticValue\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: SemanticValue.Equals(Object)\n  fullName: System.Speech.Recognition.SemanticValue.Equals(Object)\n- uid: System.Speech.Recognition.SemanticValue.GetHashCode\n  parent: System.Speech.Recognition.SemanticValue\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: SemanticValue.GetHashCode()\n  fullName: System.Speech.Recognition.SemanticValue.GetHashCode()\n- uid: System.Speech.Recognition.SemanticValue.Item(System.String)\n  parent: System.Speech.Recognition.SemanticValue\n  isExternal: false\n  name: Item(String)\n  nameWithType: SemanticValue.Item(String)\n  fullName: System.Speech.Recognition.SemanticValue.Item(String)\n- uid: System.Speech.Recognition.SemanticValue\n  parent: System.Speech.Recognition\n  isExternal: false\n  name: SemanticValue\n  nameWithType: SemanticValue\n  fullName: System.Speech.Recognition.SemanticValue\n- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue})\n  parent: System.Speech.Recognition.SemanticValue\n  isExternal: false\n  name: System.Collections.Generic.ICollection(KeyValuePair<String,SemanticValue>)\n  nameWithType: SemanticValue.System.Collections.Generic.ICollection(KeyValuePair<String,SemanticValue>)\n  fullName: System.Speech.Recognition.SemanticValue.System.Collections.Generic.ICollection(KeyValuePair<String,SemanticValue>)\n- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#Clear\n  parent: System.Speech.Recognition.SemanticValue\n  isExternal: false\n  name: System.Collections.Generic.ICollection()\n  nameWithType: SemanticValue.System.Collections.Generic.ICollection()\n  fullName: System.Speech.Recognition.SemanticValue.System.Collections.Generic.ICollection()\n- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue}[],System.Int32)\n  parent: System.Speech.Recognition.SemanticValue\n  isExternal: false\n  name: System.Collections.Generic.ICollection(KeyValuePair<String,SemanticValue>,Int32)\n  nameWithType: SemanticValue.System.Collections.Generic.ICollection(KeyValuePair<String,SemanticValue>,Int32)\n  fullName: System.Speech.Recognition.SemanticValue.System.Collections.Generic.ICollection(KeyValuePair<String,SemanticValue>,Int32)\n- uid: System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue}[]\n  parent: System.Collections.Generic\n  isExternal: true\n  name: KeyValuePair<String,SemanticValue>\n  nameWithType: KeyValuePair<String,SemanticValue>\n  fullName: System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>[]\n  spec.csharp:\n  - uid: System.Collections.Generic.KeyValuePair`2\n    name: KeyValuePair\n    nameWithType: KeyValuePair\n    fullName: KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>[]\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: String\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Speech.Recognition.SemanticValue\n    name: SemanticValue\n    nameWithType: SemanticValue\n    fullName: SemanticValue\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#IsReadOnly\n  parent: System.Speech.Recognition.SemanticValue\n  isExternal: false\n  name: System.Collections.Generic.ICollection\n  nameWithType: SemanticValue.System.Collections.Generic.ICollection\n  fullName: System.Speech.Recognition.SemanticValue.System.Collections.Generic.ICollection\n- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue})\n  parent: System.Speech.Recognition.SemanticValue\n  isExternal: false\n  name: System.Collections.Generic.ICollection(KeyValuePair<String,SemanticValue>)\n  nameWithType: SemanticValue.System.Collections.Generic.ICollection(KeyValuePair<String,SemanticValue>)\n  fullName: System.Speech.Recognition.SemanticValue.System.Collections.Generic.ICollection(KeyValuePair<String,SemanticValue>)\n- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary{System#String,System#Speech#Recognition#SemanticValue}#Add(System.String,System.Speech.Recognition.SemanticValue)\n  parent: System.Speech.Recognition.SemanticValue\n  isExternal: false\n  name: System.Collections.Generic.IDictionary(String,SemanticValue)\n  nameWithType: SemanticValue.System.Collections.Generic.IDictionary(String,SemanticValue)\n  fullName: System.Speech.Recognition.SemanticValue.System.Collections.Generic.IDictionary(String,SemanticValue)\n- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary{System#String,System#Speech#Recognition#SemanticValue}#Keys\n  parent: System.Speech.Recognition.SemanticValue\n  isExternal: false\n  name: System.Collections.Generic.IDictionary\n  nameWithType: SemanticValue.System.Collections.Generic.IDictionary\n  fullName: System.Speech.Recognition.SemanticValue.System.Collections.Generic.IDictionary\n- uid: System.Collections.Generic.ICollection{System.String}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: ICollection<String>\n  nameWithType: ICollection<String>\n  fullName: System.Collections.Generic.ICollection<System.String>\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1\n    name: ICollection\n    nameWithType: ICollection\n    fullName: ICollection<System.String>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: String\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary{System#String,System#Speech#Recognition#SemanticValue}#Remove(System.String)\n  parent: System.Speech.Recognition.SemanticValue\n  isExternal: false\n  name: System.Collections.Generic.IDictionary(String)\n  nameWithType: SemanticValue.System.Collections.Generic.IDictionary(String)\n  fullName: System.Speech.Recognition.SemanticValue.System.Collections.Generic.IDictionary(String)\n- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary{System#String,System#Speech#Recognition#SemanticValue}#TryGetValue(System.String,System.Speech.Recognition.SemanticValue@)\n  parent: System.Speech.Recognition.SemanticValue\n  isExternal: false\n  name: System.Collections.Generic.IDictionary(String,SemanticValue)\n  nameWithType: SemanticValue.System.Collections.Generic.IDictionary(String,SemanticValue)\n  fullName: System.Speech.Recognition.SemanticValue.System.Collections.Generic.IDictionary(String,SemanticValue)\n- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary{System#String,System#Speech#Recognition#SemanticValue}#Values\n  parent: System.Speech.Recognition.SemanticValue\n  isExternal: false\n  name: System.Collections.Generic.IDictionary\n  nameWithType: SemanticValue.System.Collections.Generic.IDictionary\n  fullName: System.Speech.Recognition.SemanticValue.System.Collections.Generic.IDictionary\n- uid: System.Collections.Generic.ICollection{System.Speech.Recognition.SemanticValue}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: ICollection<SemanticValue>\n  nameWithType: ICollection<SemanticValue>\n  fullName: System.Collections.Generic.ICollection<System.Speech.Recognition.SemanticValue>\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1\n    name: ICollection\n    nameWithType: ICollection\n    fullName: ICollection<System.Speech.Recognition.SemanticValue>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Speech.Recognition.SemanticValue\n    name: SemanticValue\n    nameWithType: SemanticValue\n    fullName: SemanticValue\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#GetEnumerator\n  parent: System.Speech.Recognition.SemanticValue\n  isExternal: false\n  name: System.Collections.Generic.IEnumerable()\n  nameWithType: SemanticValue.System.Collections.Generic.IEnumerable()\n  fullName: System.Speech.Recognition.SemanticValue.System.Collections.Generic.IEnumerable()\n- uid: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue}}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IEnumerator<KeyValuePair<String,SemanticValue>>\n  nameWithType: IEnumerator<KeyValuePair<String,SemanticValue>>\n  fullName: System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerator`1\n    name: IEnumerator\n    nameWithType: IEnumerator\n    fullName: IEnumerator<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Collections.Generic.KeyValuePair`2\n    name: KeyValuePair\n    nameWithType: KeyValuePair\n    fullName: KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: String\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Speech.Recognition.SemanticValue\n    name: SemanticValue\n    nameWithType: SemanticValue\n    fullName: SemanticValue\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Speech.Recognition.SemanticValue.System#Collections#IEnumerable#GetEnumerator\n  parent: System.Speech.Recognition.SemanticValue\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: SemanticValue.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.Speech.Recognition.SemanticValue.System.Collections.IEnumerable.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: true\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.Speech.Recognition.SemanticValue.Value\n  parent: System.Speech.Recognition.SemanticValue\n  isExternal: false\n  name: Value\n  nameWithType: SemanticValue.Value\n  fullName: System.Speech.Recognition.SemanticValue.Value\n- uid: System.Speech.Recognition.SemanticValue.#ctor*\n  parent: System.Speech.Recognition.SemanticValue\n  isExternal: false\n  name: SemanticValue\n  nameWithType: SemanticValue.SemanticValue\n- uid: System.Speech.Recognition.SemanticValue.Confidence*\n  parent: System.Speech.Recognition.SemanticValue\n  isExternal: false\n  name: Confidence\n  nameWithType: SemanticValue.Confidence\n- uid: System.Speech.Recognition.SemanticValue.Contains*\n  parent: System.Speech.Recognition.SemanticValue\n  isExternal: false\n  name: Contains\n  nameWithType: SemanticValue.Contains\n- uid: System.Speech.Recognition.SemanticValue.ContainsKey*\n  parent: System.Speech.Recognition.SemanticValue\n  isExternal: false\n  name: ContainsKey\n  nameWithType: SemanticValue.ContainsKey\n- uid: System.Speech.Recognition.SemanticValue.Count*\n  parent: System.Speech.Recognition.SemanticValue\n  isExternal: false\n  name: Count\n  nameWithType: SemanticValue.Count\n- uid: System.Speech.Recognition.SemanticValue.Equals*\n  parent: System.Speech.Recognition.SemanticValue\n  isExternal: false\n  name: Equals\n  nameWithType: SemanticValue.Equals\n- uid: System.Speech.Recognition.SemanticValue.GetHashCode*\n  parent: System.Speech.Recognition.SemanticValue\n  isExternal: false\n  name: GetHashCode\n  nameWithType: SemanticValue.GetHashCode\n- uid: System.Speech.Recognition.SemanticValue.Item*\n  parent: System.Speech.Recognition.SemanticValue\n  isExternal: false\n  name: Item\n  nameWithType: SemanticValue.Item\n- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection<System#Collections#Generic#KeyValuePair<System#String,System#Speech#Recognition#SemanticValue>>#Add*\n  parent: System.Speech.Recognition.SemanticValue\n  isExternal: false\n  name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>.Add\n  nameWithType: SemanticValue.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>.Add\n- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection<System#Collections#Generic#KeyValuePair<System#String,System#Speech#Recognition#SemanticValue>>#Clear*\n  parent: System.Speech.Recognition.SemanticValue\n  isExternal: false\n  name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>.Clear\n  nameWithType: SemanticValue.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>.Clear\n- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection<System#Collections#Generic#KeyValuePair<System#String,System#Speech#Recognition#SemanticValue>>#CopyTo*\n  parent: System.Speech.Recognition.SemanticValue\n  isExternal: false\n  name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>.CopyTo\n  nameWithType: SemanticValue.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>.CopyTo\n- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection<System#Collections#Generic#KeyValuePair<System#String,System#Speech#Recognition#SemanticValue>>#IsReadOnly*\n  parent: System.Speech.Recognition.SemanticValue\n  isExternal: false\n  name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>.IsReadOnly\n  nameWithType: SemanticValue.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>.IsReadOnly\n- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection<System#Collections#Generic#KeyValuePair<System#String,System#Speech#Recognition#SemanticValue>>#Remove*\n  parent: System.Speech.Recognition.SemanticValue\n  isExternal: false\n  name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>.Remove\n  nameWithType: SemanticValue.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>.Remove\n- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary<System#String,System#Speech#Recognition#SemanticValue>#Add*\n  parent: System.Speech.Recognition.SemanticValue\n  isExternal: false\n  name: System.Collections.Generic.IDictionary<System.String,System.Speech.Recognition.SemanticValue>.Add\n  nameWithType: SemanticValue.System.Collections.Generic.IDictionary<System.String,System.Speech.Recognition.SemanticValue>.Add\n- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary<System#String,System#Speech#Recognition#SemanticValue>#Keys*\n  parent: System.Speech.Recognition.SemanticValue\n  isExternal: false\n  name: System.Collections.Generic.IDictionary<System.String,System.Speech.Recognition.SemanticValue>.Keys\n  nameWithType: SemanticValue.System.Collections.Generic.IDictionary<System.String,System.Speech.Recognition.SemanticValue>.Keys\n- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary<System#String,System#Speech#Recognition#SemanticValue>#Remove*\n  parent: System.Speech.Recognition.SemanticValue\n  isExternal: false\n  name: System.Collections.Generic.IDictionary<System.String,System.Speech.Recognition.SemanticValue>.Remove\n  nameWithType: SemanticValue.System.Collections.Generic.IDictionary<System.String,System.Speech.Recognition.SemanticValue>.Remove\n- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary<System#String,System#Speech#Recognition#SemanticValue>#TryGetValue*\n  parent: System.Speech.Recognition.SemanticValue\n  isExternal: false\n  name: System.Collections.Generic.IDictionary<System.String,System.Speech.Recognition.SemanticValue>.TryGetValue\n  nameWithType: SemanticValue.System.Collections.Generic.IDictionary<System.String,System.Speech.Recognition.SemanticValue>.TryGetValue\n- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary<System#String,System#Speech#Recognition#SemanticValue>#Values*\n  parent: System.Speech.Recognition.SemanticValue\n  isExternal: false\n  name: System.Collections.Generic.IDictionary<System.String,System.Speech.Recognition.SemanticValue>.Values\n  nameWithType: SemanticValue.System.Collections.Generic.IDictionary<System.String,System.Speech.Recognition.SemanticValue>.Values\n- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IEnumerable<System#Collections#Generic#KeyValuePair<System#String,System#Speech#Recognition#SemanticValue>>#GetEnumerator*\n  parent: System.Speech.Recognition.SemanticValue\n  isExternal: false\n  name: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>.GetEnumerator\n  nameWithType: SemanticValue.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>.GetEnumerator\n- uid: System.Speech.Recognition.SemanticValue.System#Collections#IEnumerable#GetEnumerator*\n  parent: System.Speech.Recognition.SemanticValue\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator\n  nameWithType: SemanticValue.System.Collections.IEnumerable.GetEnumerator\n- uid: System.Speech.Recognition.SemanticValue.Value*\n  parent: System.Speech.Recognition.SemanticValue\n  isExternal: false\n  name: Value\n  nameWithType: SemanticValue.Value\n"}