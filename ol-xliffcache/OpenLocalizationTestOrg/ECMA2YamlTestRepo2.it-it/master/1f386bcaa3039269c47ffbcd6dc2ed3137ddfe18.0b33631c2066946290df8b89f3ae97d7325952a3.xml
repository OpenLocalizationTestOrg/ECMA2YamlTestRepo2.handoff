{"nodes":[{"pos":[610,671],"content":"Provides trace event data specific to a thread and a process.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides trace event data specific to a thread and a process.","pos":[0,61]}]},{"pos":[684,1350],"content":"> [!NOTE] >  The TraceEventCache class, designed as a performance optimization for trace listener calls, is of interest only to developers creating custom trace listeners.       The TraceEventCache class is used as a parameter in tracing methods to accurately identify the source of a trace event. Examples of methods that use TraceEventCache are <xref:System.Diagnostics.TraceListener.TraceEvent%2A?displayProperty=fullName> and <xref:System.Diagnostics.TraceFilter.ShouldTrace%2A?displayProperty=fullName>. The <xref:System.Diagnostics.TraceEventCache.LogicalOperationStack%2A> property contains data that can be used to correlate the trace with related traces.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"<ph id=\"ph1\">&gt; [!NOTE]</ph> &gt;  The TraceEventCache class, designed as a performance optimization for trace listener calls, is of interest only to developers creating custom trace listeners.","pos":[0,171],"source":"> [!NOTE] >  The TraceEventCache class, designed as a performance optimization for trace listener calls, is of interest only to developers creating custom trace listeners."},{"content":"The TraceEventCache class is used as a parameter in tracing methods to accurately identify the source of a trace event.","pos":[178,297]},{"content":"Examples of methods that use TraceEventCache are &lt;xref:System.Diagnostics.TraceListener.TraceEvent%2A?displayProperty=fullName&gt; and &lt;xref:System.Diagnostics.TraceFilter.ShouldTrace%2A?displayProperty=fullName&gt;.","pos":[298,508],"source":" Examples of methods that use TraceEventCache are <xref:System.Diagnostics.TraceListener.TraceEvent%2A?displayProperty=fullName> and <xref:System.Diagnostics.TraceFilter.ShouldTrace%2A?displayProperty=fullName>."},{"content":"The &lt;xref:System.Diagnostics.TraceEventCache.LogicalOperationStack%2A&gt; property contains data that can be used to correlate the trace with related traces.","pos":[509,663],"source":" The <xref:System.Diagnostics.TraceEventCache.LogicalOperationStack%2A> property contains data that can be used to correlate the trace with related traces."}]},{"pos":[1856,1952],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceEventCache\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Diagnostics.TraceEventCache\"></xref> class."},{"pos":[2451,2494],"content":"Gets the call stack for the current thread.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the call stack for the current thread.","pos":[0,43]}]},{"pos":[2506,2921],"content":"The Callstack property gets the call stack from the <xref:System.Environment.StackTrace%2A> property of the <xref:System.Environment> class. The property value lists method calls in reverse chronological order. That is, the most recent method call is described first. One line of stack trace information is listed for each method call on the stack. For more information, see <xref:System.Environment.StackTrace%2A>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Callstack property gets the call stack from the <xref:System.Environment.StackTrace%2A> property of the <xref:System.Environment> class. The property value lists method calls in reverse chronological order. That is, the most recent method call is described first. One line of stack trace information is listed for each method call on the stack. For more information, see <xref:System.Environment.StackTrace%2A>.","pos":[0,415],"nodes":[{"content":"The Callstack property gets the call stack from the &lt;xref:System.Environment.StackTrace%2A&gt; property of the &lt;xref:System.Environment&gt; class.","pos":[0,140],"source":"The Callstack property gets the call stack from the <xref:System.Environment.StackTrace%2A> property of the <xref:System.Environment> class."},{"content":"The property value lists method calls in reverse chronological order.","pos":[141,210]},{"content":"That is, the most recent method call is described first.","pos":[211,267]},{"content":"One line of stack trace information is listed for each method call on the stack.","pos":[268,348]},{"content":"For more information, see &lt;xref:System.Environment.StackTrace%2A&gt;.","pos":[349,415],"source":" For more information, see <xref:System.Environment.StackTrace%2A>."}]}]},{"pos":[3035,3119],"content":"A string containing stack trace information. This value can be an empty string (\"\").","needQuote":true,"needEscape":true,"nodes":[{"content":"A string containing stack trace information. This value can be an empty string (\"\").","pos":[0,84],"nodes":[{"content":"A string containing stack trace information.","pos":[0,44]},{"content":"This value can be an empty string (\"\").","pos":[45,84]}]}]},{"pos":[3548,3605],"content":"Gets the date and time at which the event trace occurred.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the date and time at which the event trace occurred.","pos":[0,57]}]},{"pos":[3617,3896],"content":"The first time the property is accessed in an instance of the <xref:System.Diagnostics.TraceEventCache> class, the current time is returned. Subsequent queries of this property in that instance return that same <xref:System.DateTime> value, allowing it to be used as a timestamp.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The first time the property is accessed in an instance of the <xref:System.Diagnostics.TraceEventCache> class, the current time is returned. Subsequent queries of this property in that instance return that same <xref:System.DateTime> value, allowing it to be used as a timestamp.","pos":[0,279],"nodes":[{"content":"The first time the property is accessed in an instance of the &lt;xref:System.Diagnostics.TraceEventCache&gt; class, the current time is returned.","pos":[0,140],"source":"The first time the property is accessed in an instance of the <xref:System.Diagnostics.TraceEventCache> class, the current time is returned."},{"content":"Subsequent queries of this property in that instance return that same &lt;xref:System.DateTime&gt; value, allowing it to be used as a timestamp.","pos":[141,279],"source":" Subsequent queries of this property in that instance return that same <xref:System.DateTime> value, allowing it to be used as a timestamp."}]}]},{"pos":[4013,4125],"content":"A <xref:System.DateTime> structure whose value is a date and time expressed in Coordinated Universal Time (UTC).","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.DateTime&gt; structure whose value is a date and time expressed in Coordinated Universal Time (UTC).","pos":[0,112],"source":"A <xref:System.DateTime> structure whose value is a date and time expressed in Coordinated Universal Time (UTC)."}]},{"pos":[4618,4666],"content":"Gets the correlation data, contained in a stack.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the correlation data, contained in a stack.","pos":[0,48]}]},{"pos":[4678,5490],"content":"The correlation data is stored as an object in the call context with the name \"System.Diagnostics.Trace.CorrelationManagerSlot\". The <xref:System.Diagnostics.CorrelationManager> class provides methods used to store a logical operation identity in a thread-bound context and automatically tag each trace event generated by the thread with the stored identity. The <xref:System.Diagnostics.CorrelationManager> is accessed through the <xref:System.Diagnostics.Trace.CorrelationManager%2A?displayProperty=fullName> property. Each call to the <xref:System.Diagnostics.CorrelationManager.StartLogicalOperation%2A> method pushes a new logical operation identity onto the stack. Each call to the <xref:System.Diagnostics.CorrelationManager.StopLogicalOperation%2A> method pops a logical operation identity from the stack","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The correlation data is stored as an object in the call context with the name \"System.Diagnostics.Trace.CorrelationManagerSlot\". The <xref:System.Diagnostics.CorrelationManager> class provides methods used to store a logical operation identity in a thread-bound context and automatically tag each trace event generated by the thread with the stored identity. The <xref:System.Diagnostics.CorrelationManager> is accessed through the <xref:System.Diagnostics.Trace.CorrelationManager%2A?displayProperty=fullName> property. Each call to the <xref:System.Diagnostics.CorrelationManager.StartLogicalOperation%2A> method pushes a new logical operation identity onto the stack. Each call to the <xref:System.Diagnostics.CorrelationManager.StopLogicalOperation%2A> method pops a logical operation identity from the stack","pos":[0,812],"nodes":[{"content":"The correlation data is stored as an object in the call context with the name \"System.Diagnostics.Trace.CorrelationManagerSlot\".","pos":[0,128]},{"content":"The &lt;xref:System.Diagnostics.CorrelationManager&gt; class provides methods used to store a logical operation identity in a thread-bound context and automatically tag each trace event generated by the thread with the stored identity.","pos":[129,358],"source":" The <xref:System.Diagnostics.CorrelationManager> class provides methods used to store a logical operation identity in a thread-bound context and automatically tag each trace event generated by the thread with the stored identity."},{"content":"The &lt;xref:System.Diagnostics.CorrelationManager&gt; is accessed through the &lt;xref:System.Diagnostics.Trace.CorrelationManager%2A?displayProperty=fullName&gt; property.","pos":[359,520],"source":" The <xref:System.Diagnostics.CorrelationManager> is accessed through the <xref:System.Diagnostics.Trace.CorrelationManager%2A?displayProperty=fullName> property."},{"content":"Each call to the &lt;xref:System.Diagnostics.CorrelationManager.StartLogicalOperation%2A&gt; method pushes a new logical operation identity onto the stack.","pos":[521,670],"source":" Each call to the <xref:System.Diagnostics.CorrelationManager.StartLogicalOperation%2A> method pushes a new logical operation identity onto the stack."},{"content":"Each call to the &lt;xref:System.Diagnostics.CorrelationManager.StopLogicalOperation%2A&gt; method pops a logical operation identity from the stack","pos":[671,812],"source":" Each call to the <xref:System.Diagnostics.CorrelationManager.StopLogicalOperation%2A> method pops a logical operation identity from the stack"}]}]},{"pos":[5645,5721],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Collections.Stack\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> containing correlation data.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Collections.Stack\"></xref> containing correlation data."},{"pos":[6167,6217],"content":"Gets the unique identifier of the current process.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the unique identifier of the current process.","pos":[0,50]}]},{"pos":[6229,6336],"content":"Until the process terminates, the process identifier uniquely identifies the process throughout the system.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Until the process terminates, the process identifier uniquely identifies the process throughout the system.","pos":[0,107]}]},{"pos":[6446,6508],"content":"The system-generated unique identifier of the current process.","needQuote":true,"needEscape":true,"nodes":[{"content":"The system-generated unique identifier of the current process.","pos":[0,62]}]},{"pos":[6937,6993],"content":"Gets a unique identifier for the current managed thread.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a unique identifier for the current managed thread.","pos":[0,56]}]},{"pos":[7005,7153],"content":"The thread identifier is the value of the <xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=fullName> property formatted as a string.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The thread identifier is the value of the &lt;xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=fullName&gt; property formatted as a string.","pos":[0,148],"source":"The thread identifier is the value of the <xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=fullName> property formatted as a string."}]},{"pos":[7266,7343],"content":"A string that represents a unique integer identifier for this managed thread.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string that represents a unique integer identifier for this managed thread.","pos":[0,77]}]},{"pos":[7776,7832],"content":"Gets the current number of ticks in the timer mechanism.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the current number of ticks in the timer mechanism.","pos":[0,56]}]},{"pos":[7844,8400],"content":"The get accessor calls the <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A?displayProperty=fullName> method to get the timestamp. If the <xref:System.Diagnostics.Stopwatch> class uses a high-resolution performance counter, <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> returns the current value of that counter. If the <xref:System.Diagnostics.Stopwatch> class uses the system timer, <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> returns the <xref:System.DateTime.Ticks%2A> property of <xref:System.DateTime.Now%2A?displayProperty=fullName>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The get accessor calls the <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A?displayProperty=fullName> method to get the timestamp. If the <xref:System.Diagnostics.Stopwatch> class uses a high-resolution performance counter, <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> returns the current value of that counter. If the <xref:System.Diagnostics.Stopwatch> class uses the system timer, <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> returns the <xref:System.DateTime.Ticks%2A> property of <xref:System.DateTime.Now%2A?displayProperty=fullName>.","pos":[0,556],"nodes":[{"content":"The get accessor calls the &lt;xref:System.Diagnostics.Stopwatch.GetTimestamp%2A?displayProperty=fullName&gt; method to get the timestamp.","pos":[0,132],"source":"The get accessor calls the <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A?displayProperty=fullName> method to get the timestamp."},{"content":"If the &lt;xref:System.Diagnostics.Stopwatch&gt; class uses a high-resolution performance counter, &lt;xref:System.Diagnostics.Stopwatch.GetTimestamp%2A&gt; returns the current value of that counter.","pos":[133,320],"source":" If the <xref:System.Diagnostics.Stopwatch> class uses a high-resolution performance counter, <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> returns the current value of that counter."},{"content":"If the &lt;xref:System.Diagnostics.Stopwatch&gt; class uses the system timer, &lt;xref:System.Diagnostics.Stopwatch.GetTimestamp%2A&gt; returns the &lt;xref:System.DateTime.Ticks%2A&gt; property of &lt;xref:System.DateTime.Now%2A?displayProperty=fullName&gt;.","pos":[321,556],"source":" If the <xref:System.Diagnostics.Stopwatch> class uses the system timer, <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> returns the <xref:System.DateTime.Ticks%2A> property of <xref:System.DateTime.Now%2A?displayProperty=fullName>."}]}]},{"pos":[8511,8568],"content":"The tick counter value of the underlying timer mechanism.","needQuote":true,"needEscape":true,"nodes":[{"content":"The tick counter value of the underlying timer mechanism.","pos":[0,57]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Diagnostics.TraceEventCache\n  id: TraceEventCache\n  children:\n  - System.Diagnostics.TraceEventCache.#ctor\n  - System.Diagnostics.TraceEventCache.Callstack\n  - System.Diagnostics.TraceEventCache.DateTime\n  - System.Diagnostics.TraceEventCache.LogicalOperationStack\n  - System.Diagnostics.TraceEventCache.ProcessId\n  - System.Diagnostics.TraceEventCache.ThreadId\n  - System.Diagnostics.TraceEventCache.Timestamp\n  langs:\n  - csharp\n  name: TraceEventCache\n  nameWithType: TraceEventCache\n  fullName: System.Diagnostics.TraceEventCache\n  type: Class\n  summary: Provides trace event data specific to a thread and a process.\n  remarks: \"> [!NOTE]\\n>  The TraceEventCache class, designed as a performance optimization for trace listener calls, is of interest only to developers creating custom trace listeners.  \\n  \\n The TraceEventCache class is used as a parameter in tracing methods to accurately identify the source of a trace event. Examples of methods that use TraceEventCache are <xref:System.Diagnostics.TraceListener.TraceEvent%2A?displayProperty=fullName> and <xref:System.Diagnostics.TraceFilter.ShouldTrace%2A?displayProperty=fullName>. The <xref:System.Diagnostics.TraceEventCache.LogicalOperationStack%2A> property contains data that can be used to correlate the trace with related traces.\"\n  syntax:\n    content: public class TraceEventCache\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceEventCache.#ctor\n  id: '#ctor'\n  parent: System.Diagnostics.TraceEventCache\n  langs:\n  - csharp\n  name: TraceEventCache()\n  nameWithType: TraceEventCache.TraceEventCache()\n  fullName: System.Diagnostics.TraceEventCache.TraceEventCache()\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Initializes a new instance of the <xref href=\"System.Diagnostics.TraceEventCache\"></xref> class.\n  syntax:\n    content: public TraceEventCache ();\n    parameters: []\n  overload: System.Diagnostics.TraceEventCache.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceEventCache.Callstack\n  id: Callstack\n  parent: System.Diagnostics.TraceEventCache\n  langs:\n  - csharp\n  name: Callstack\n  nameWithType: TraceEventCache.Callstack\n  fullName: System.Diagnostics.TraceEventCache.Callstack\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Gets the call stack for the current thread.\n  remarks: The Callstack property gets the call stack from the <xref:System.Environment.StackTrace%2A> property of the <xref:System.Environment> class. The property value lists method calls in reverse chronological order. That is, the most recent method call is described first. One line of stack trace information is listed for each method call on the stack. For more information, see <xref:System.Environment.StackTrace%2A>.\n  syntax:\n    content: public string Callstack { get; }\n    return:\n      type: System.String\n      description: A string containing stack trace information. This value can be an empty string (\"\").\n  overload: System.Diagnostics.TraceEventCache.Callstack*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceEventCache.DateTime\n  id: DateTime\n  parent: System.Diagnostics.TraceEventCache\n  langs:\n  - csharp\n  name: DateTime\n  nameWithType: TraceEventCache.DateTime\n  fullName: System.Diagnostics.TraceEventCache.DateTime\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Gets the date and time at which the event trace occurred.\n  remarks: The first time the property is accessed in an instance of the <xref:System.Diagnostics.TraceEventCache> class, the current time is returned. Subsequent queries of this property in that instance return that same <xref:System.DateTime> value, allowing it to be used as a timestamp.\n  syntax:\n    content: public DateTime DateTime { get; }\n    return:\n      type: System.DateTime\n      description: A <xref:System.DateTime> structure whose value is a date and time expressed in Coordinated Universal Time (UTC).\n  overload: System.Diagnostics.TraceEventCache.DateTime*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceEventCache.LogicalOperationStack\n  id: LogicalOperationStack\n  parent: System.Diagnostics.TraceEventCache\n  langs:\n  - csharp\n  name: LogicalOperationStack\n  nameWithType: TraceEventCache.LogicalOperationStack\n  fullName: System.Diagnostics.TraceEventCache.LogicalOperationStack\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Gets the correlation data, contained in a stack.\n  remarks: The correlation data is stored as an object in the call context with the name \"System.Diagnostics.Trace.CorrelationManagerSlot\". The <xref:System.Diagnostics.CorrelationManager> class provides methods used to store a logical operation identity in a thread-bound context and automatically tag each trace event generated by the thread with the stored identity. The <xref:System.Diagnostics.CorrelationManager> is accessed through the <xref:System.Diagnostics.Trace.CorrelationManager%2A?displayProperty=fullName> property. Each call to the <xref:System.Diagnostics.CorrelationManager.StartLogicalOperation%2A> method pushes a new logical operation identity onto the stack. Each call to the <xref:System.Diagnostics.CorrelationManager.StopLogicalOperation%2A> method pops a logical operation identity from the stack\n  syntax:\n    content: public System.Collections.Stack LogicalOperationStack { get; }\n    return:\n      type: System.Collections.Stack\n      description: A <xref href=\"System.Collections.Stack\"></xref> containing correlation data.\n  overload: System.Diagnostics.TraceEventCache.LogicalOperationStack*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceEventCache.ProcessId\n  id: ProcessId\n  parent: System.Diagnostics.TraceEventCache\n  langs:\n  - csharp\n  name: ProcessId\n  nameWithType: TraceEventCache.ProcessId\n  fullName: System.Diagnostics.TraceEventCache.ProcessId\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Gets the unique identifier of the current process.\n  remarks: Until the process terminates, the process identifier uniquely identifies the process throughout the system.\n  syntax:\n    content: public int ProcessId { get; }\n    return:\n      type: System.Int32\n      description: The system-generated unique identifier of the current process.\n  overload: System.Diagnostics.TraceEventCache.ProcessId*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceEventCache.ThreadId\n  id: ThreadId\n  parent: System.Diagnostics.TraceEventCache\n  langs:\n  - csharp\n  name: ThreadId\n  nameWithType: TraceEventCache.ThreadId\n  fullName: System.Diagnostics.TraceEventCache.ThreadId\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Gets a unique identifier for the current managed thread.\n  remarks: The thread identifier is the value of the <xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=fullName> property formatted as a string.\n  syntax:\n    content: public string ThreadId { get; }\n    return:\n      type: System.String\n      description: A string that represents a unique integer identifier for this managed thread.\n  overload: System.Diagnostics.TraceEventCache.ThreadId*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceEventCache.Timestamp\n  id: Timestamp\n  parent: System.Diagnostics.TraceEventCache\n  langs:\n  - csharp\n  name: Timestamp\n  nameWithType: TraceEventCache.Timestamp\n  fullName: System.Diagnostics.TraceEventCache.Timestamp\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Gets the current number of ticks in the timer mechanism.\n  remarks: The get accessor calls the <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A?displayProperty=fullName> method to get the timestamp. If the <xref:System.Diagnostics.Stopwatch> class uses a high-resolution performance counter, <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> returns the current value of that counter. If the <xref:System.Diagnostics.Stopwatch> class uses the system timer, <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> returns the <xref:System.DateTime.Ticks%2A> property of <xref:System.DateTime.Now%2A?displayProperty=fullName>.\n  syntax:\n    content: public long Timestamp { get; }\n    return:\n      type: System.Int64\n      description: The tick counter value of the underlying timer mechanism.\n  overload: System.Diagnostics.TraceEventCache.Timestamp*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Diagnostics.TraceEventCache.#ctor\n  parent: System.Diagnostics.TraceEventCache\n  isExternal: false\n  name: TraceEventCache()\n  nameWithType: TraceEventCache.TraceEventCache()\n  fullName: System.Diagnostics.TraceEventCache.TraceEventCache()\n- uid: System.Diagnostics.TraceEventCache.Callstack\n  parent: System.Diagnostics.TraceEventCache\n  isExternal: false\n  name: Callstack\n  nameWithType: TraceEventCache.Callstack\n  fullName: System.Diagnostics.TraceEventCache.Callstack\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Diagnostics.TraceEventCache.DateTime\n  parent: System.Diagnostics.TraceEventCache\n  isExternal: false\n  name: DateTime\n  nameWithType: TraceEventCache.DateTime\n  fullName: System.Diagnostics.TraceEventCache.DateTime\n- uid: System.DateTime\n  parent: System\n  isExternal: true\n  name: DateTime\n  nameWithType: DateTime\n  fullName: System.DateTime\n- uid: System.Diagnostics.TraceEventCache.LogicalOperationStack\n  parent: System.Diagnostics.TraceEventCache\n  isExternal: false\n  name: LogicalOperationStack\n  nameWithType: TraceEventCache.LogicalOperationStack\n  fullName: System.Diagnostics.TraceEventCache.LogicalOperationStack\n- uid: System.Collections.Stack\n  parent: System.Collections\n  isExternal: false\n  name: Stack\n  nameWithType: Stack\n  fullName: System.Collections.Stack\n- uid: System.Diagnostics.TraceEventCache.ProcessId\n  parent: System.Diagnostics.TraceEventCache\n  isExternal: false\n  name: ProcessId\n  nameWithType: TraceEventCache.ProcessId\n  fullName: System.Diagnostics.TraceEventCache.ProcessId\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Diagnostics.TraceEventCache.ThreadId\n  parent: System.Diagnostics.TraceEventCache\n  isExternal: false\n  name: ThreadId\n  nameWithType: TraceEventCache.ThreadId\n  fullName: System.Diagnostics.TraceEventCache.ThreadId\n- uid: System.Diagnostics.TraceEventCache.Timestamp\n  parent: System.Diagnostics.TraceEventCache\n  isExternal: false\n  name: Timestamp\n  nameWithType: TraceEventCache.Timestamp\n  fullName: System.Diagnostics.TraceEventCache.Timestamp\n- uid: System.Int64\n  parent: System\n  isExternal: true\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.Diagnostics.TraceEventCache.#ctor*\n  parent: System.Diagnostics.TraceEventCache\n  isExternal: false\n  name: TraceEventCache\n  nameWithType: TraceEventCache.TraceEventCache\n- uid: System.Diagnostics.TraceEventCache.Callstack*\n  parent: System.Diagnostics.TraceEventCache\n  isExternal: false\n  name: Callstack\n  nameWithType: TraceEventCache.Callstack\n- uid: System.Diagnostics.TraceEventCache.DateTime*\n  parent: System.Diagnostics.TraceEventCache\n  isExternal: false\n  name: DateTime\n  nameWithType: TraceEventCache.DateTime\n- uid: System.Diagnostics.TraceEventCache.LogicalOperationStack*\n  parent: System.Diagnostics.TraceEventCache\n  isExternal: false\n  name: LogicalOperationStack\n  nameWithType: TraceEventCache.LogicalOperationStack\n- uid: System.Diagnostics.TraceEventCache.ProcessId*\n  parent: System.Diagnostics.TraceEventCache\n  isExternal: false\n  name: ProcessId\n  nameWithType: TraceEventCache.ProcessId\n- uid: System.Diagnostics.TraceEventCache.ThreadId*\n  parent: System.Diagnostics.TraceEventCache\n  isExternal: false\n  name: ThreadId\n  nameWithType: TraceEventCache.ThreadId\n- uid: System.Diagnostics.TraceEventCache.Timestamp*\n  parent: System.Diagnostics.TraceEventCache\n  isExternal: false\n  name: Timestamp\n  nameWithType: TraceEventCache.Timestamp\n"}