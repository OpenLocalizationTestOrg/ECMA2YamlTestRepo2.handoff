{"nodes":[{"pos":[423,501],"content":"Provides an interface for defining an alternate application settings provider.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides an interface for defining an alternate application settings provider.","pos":[0,78]}]},{"pos":[514,1496],"content":"The <xref:System.Configuration.IPersistComponentSettings> interface enables controls and components hosted in an application to persist their application settings in a manner largely transparent to the application. However, in some cases, the application or environment may need to override the settings provider natively used by a component with one of its own choosing. The ISettingsProviderService interface enables the creation of a lightweight service that communicates such an alternate settings provider, typically offered through the owning <xref:System.ComponentModel.Container>.       ISettingsProviderService is commonly used by design-time tools and debuggers that provide special support for application settings. To make such an arrangement function seamlessly, the <xref:System.Configuration.ApplicationSettingsBase> class contains constructors that take a reference to the owning component. These constructors automatically query for compatible settings providers.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <xref:System.Configuration.IPersistComponentSettings> interface enables controls and components hosted in an application to persist their application settings in a manner largely transparent to the application. However, in some cases, the application or environment may need to override the settings provider natively used by a component with one of its own choosing. The ISettingsProviderService interface enables the creation of a lightweight service that communicates such an alternate settings provider, typically offered through the owning <xref:System.ComponentModel.Container>.       ISettingsProviderService is commonly used by design-time tools and debuggers that provide special support for application settings. To make such an arrangement function seamlessly, the <xref:System.Configuration.ApplicationSettingsBase> class contains constructors that take a reference to the owning component. These constructors automatically query for compatible settings providers.","pos":[0,980],"nodes":[{"content":"The &lt;xref:System.Configuration.IPersistComponentSettings&gt; interface enables controls and components hosted in an application to persist their application settings in a manner largely transparent to the application.","pos":[0,214],"source":"The <xref:System.Configuration.IPersistComponentSettings> interface enables controls and components hosted in an application to persist their application settings in a manner largely transparent to the application."},{"content":"However, in some cases, the application or environment may need to override the settings provider natively used by a component with one of its own choosing.","pos":[215,371]},{"content":"The ISettingsProviderService interface enables the creation of a lightweight service that communicates such an alternate settings provider, typically offered through the owning &lt;xref:System.ComponentModel.Container&gt;.","pos":[372,588],"source":" The ISettingsProviderService interface enables the creation of a lightweight service that communicates such an alternate settings provider, typically offered through the owning <xref:System.ComponentModel.Container>."},{"content":"ISettingsProviderService is commonly used by design-time tools and debuggers that provide special support for application settings.","pos":[595,726]},{"content":"To make such an arrangement function seamlessly, the &lt;xref:System.Configuration.ApplicationSettingsBase&gt; class contains constructors that take a reference to the owning component.","pos":[727,906],"source":" To make such an arrangement function seamlessly, the <xref:System.Configuration.ApplicationSettingsBase> class contains constructors that take a reference to the owning component."},{"content":"These constructors automatically query for compatible settings providers.","pos":[907,980]}]}]},{"pos":[2162,2240],"content":"Returns the settings provider compatible with the specified settings property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the settings provider compatible with the specified settings property.","pos":[0,78]}]},{"pos":[2252,2626],"content":"The GetSettingsProvider method enables an <xref:System.Configuration.ISettingsProviderService> to offer its serialization services to any sited component. This method determines if the associated settings provider can persist the specified application settings property type. If it can, this method returns a reference to that settings provider; otherwise it returns `null`.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The GetSettingsProvider method enables an &lt;xref:System.Configuration.ISettingsProviderService&gt; to offer its serialization services to any sited component.","pos":[0,154],"source":"The GetSettingsProvider method enables an <xref:System.Configuration.ISettingsProviderService> to offer its serialization services to any sited component."},{"content":"This method determines if the associated settings provider can persist the specified application settings property type.","pos":[155,275]},{"content":"If it can, this method returns a reference to that settings provider; otherwise it returns <ph id=\"ph1\">`null`</ph>.","pos":[276,374],"source":" If it can, this method returns a reference to that settings provider; otherwise it returns `null`."}]},{"pos":[2869,2960],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Configuration.SettingsProperty\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that requires serialization.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Configuration.SettingsProperty\"></xref> that requires serialization."},{"pos":[3042,3237],"content":"If found, the <bpt id=\"p1\">&lt;xref href=\"System.Configuration.SettingsProvider\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that can persist the specified settings property; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"If found, the <xref href=\"System.Configuration.SettingsProvider\"></xref> that can persist the specified settings property; otherwise, <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Configuration.ISettingsProviderService\n  id: ISettingsProviderService\n  children:\n  - System.Configuration.ISettingsProviderService.GetSettingsProvider(System.Configuration.SettingsProperty)\n  langs:\n  - csharp\n  name: ISettingsProviderService\n  nameWithType: ISettingsProviderService\n  fullName: System.Configuration.ISettingsProviderService\n  type: Interface\n  summary: Provides an interface for defining an alternate application settings provider.\n  remarks: \"The <xref:System.Configuration.IPersistComponentSettings> interface enables controls and components hosted in an application to persist their application settings in a manner largely transparent to the application. However, in some cases, the application or environment may need to override the settings provider natively used by a component with one of its own choosing. The ISettingsProviderService interface enables the creation of a lightweight service that communicates such an alternate settings provider, typically offered through the owning <xref:System.ComponentModel.Container>.  \\n  \\n ISettingsProviderService is commonly used by design-time tools and debuggers that provide special support for application settings. To make such an arrangement function seamlessly, the <xref:System.Configuration.ApplicationSettingsBase> class contains constructors that take a reference to the owning component. These constructors automatically query for compatible settings providers.\"\n  syntax:\n    content: public interface ISettingsProviderService\n  implements: []\n  platform:\n  - net462\n- uid: System.Configuration.ISettingsProviderService.GetSettingsProvider(System.Configuration.SettingsProperty)\n  id: GetSettingsProvider(System.Configuration.SettingsProperty)\n  parent: System.Configuration.ISettingsProviderService\n  langs:\n  - csharp\n  name: GetSettingsProvider(SettingsProperty)\n  nameWithType: ISettingsProviderService.GetSettingsProvider(SettingsProperty)\n  fullName: System.Configuration.ISettingsProviderService.GetSettingsProvider(SettingsProperty)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Configuration\n  summary: Returns the settings provider compatible with the specified settings property.\n  remarks: The GetSettingsProvider method enables an <xref:System.Configuration.ISettingsProviderService> to offer its serialization services to any sited component. This method determines if the associated settings provider can persist the specified application settings property type. If it can, this method returns a reference to that settings provider; otherwise it returns `null`.\n  syntax:\n    content: public System.Configuration.SettingsProvider GetSettingsProvider (System.Configuration.SettingsProperty property);\n    parameters:\n    - id: property\n      type: System.Configuration.SettingsProperty\n      description: The <xref href=\"System.Configuration.SettingsProperty\"></xref> that requires serialization.\n    return:\n      type: System.Configuration.SettingsProvider\n      description: If found, the <xref href=\"System.Configuration.SettingsProvider\"></xref> that can persist the specified settings property; otherwise, <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  overload: System.Configuration.ISettingsProviderService.GetSettingsProvider*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Configuration.ISettingsProviderService.GetSettingsProvider(System.Configuration.SettingsProperty)\n  parent: System.Configuration.ISettingsProviderService\n  isExternal: false\n  name: GetSettingsProvider(SettingsProperty)\n  nameWithType: ISettingsProviderService.GetSettingsProvider(SettingsProperty)\n  fullName: System.Configuration.ISettingsProviderService.GetSettingsProvider(SettingsProperty)\n- uid: System.Configuration.SettingsProvider\n  parent: System.Configuration\n  isExternal: false\n  name: SettingsProvider\n  nameWithType: SettingsProvider\n  fullName: System.Configuration.SettingsProvider\n- uid: System.Configuration.SettingsProperty\n  parent: System.Configuration\n  isExternal: false\n  name: SettingsProperty\n  nameWithType: SettingsProperty\n  fullName: System.Configuration.SettingsProperty\n- uid: System.Configuration.ISettingsProviderService.GetSettingsProvider*\n  parent: System.Configuration.ISettingsProviderService\n  isExternal: false\n  name: GetSettingsProvider\n  nameWithType: ISettingsProviderService.GetSettingsProvider\n"}