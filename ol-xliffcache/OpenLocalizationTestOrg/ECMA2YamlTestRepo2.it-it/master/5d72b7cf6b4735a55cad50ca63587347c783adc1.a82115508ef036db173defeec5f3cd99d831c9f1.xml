{"nodes":[{"pos":[3850,3918],"content":"Represents a vector with two single-precision floating-point values.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents a vector with two single-precision floating-point values.","pos":[0,68]}]},{"pos":[3930,3995],"content":"The Vector2 structure provides support for hardware acceleration.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Vector2 structure provides support for hardware acceleration.","pos":[0,65]}]},{"pos":[4584,4689],"content":"Creates a new <bpt id=\"p1\">&lt;xref href=\"System.Numerics.Vector2\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object whose two elements have the same value.","needQuote":true,"needEscape":true,"source":"Creates a new <xref href=\"System.Numerics.Vector2\"></xref> object whose two elements have the same value."},{"pos":[4820,4857],"content":"The value to assign to both elements.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value to assign to both elements.","pos":[0,37]}]},{"pos":[5335,5393],"content":"Creates a vector whose elements have the specified values.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a vector whose elements have the specified values.","pos":[0,58]}]},{"pos":[5525,5605],"content":"The value to assign to the <bpt id=\"p1\">&lt;xref href=\"System.Numerics.Vector2.X\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> field.","needQuote":true,"needEscape":true,"source":"The value to assign to the <xref href=\"System.Numerics.Vector2.X\"></xref> field."},{"pos":[5663,5743],"content":"The value to assign to the <bpt id=\"p1\">&lt;xref href=\"System.Numerics.Vector2.Y\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> field.","needQuote":true,"needEscape":true,"source":"The value to assign to the <xref href=\"System.Numerics.Vector2.Y\"></xref> field."},{"pos":[6172,6271],"content":"Returns a vector whose elements are the absolute values of each of the specified vector's elements.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a vector whose elements are the absolute values of each of the specified vector's elements.","pos":[0,99]}]},{"pos":[6457,6466],"content":"A vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"A vector.","pos":[0,9]}]},{"pos":[6534,6560],"content":"The absolute value vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The absolute value vector.","pos":[0,26]}]},{"pos":[7059,7085],"content":"Adds two vectors together.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds two vectors together.","pos":[0,26]}]},{"pos":[7300,7324],"content":"The first vector to add.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first vector to add.","pos":[0,24]}]},{"pos":[7396,7421],"content":"The second vector to add.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second vector to add.","pos":[0,25]}]},{"pos":[7489,7507],"content":"The summed vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The summed vector.","pos":[0,18]}]},{"pos":[8088,8145],"content":"Restricts a vector between a minimum and a maximum value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Restricts a vector between a minimum and a maximum value.","pos":[0,57]}]},{"pos":[8393,8416],"content":"The vector to restrict.","needQuote":true,"needEscape":true,"nodes":[{"content":"The vector to restrict.","pos":[0,23]}]},{"pos":[8486,8504],"content":"The minimum value.","needQuote":true,"needEscape":true,"nodes":[{"content":"The minimum value.","pos":[0,18]}]},{"pos":[8574,8592],"content":"The maximum value.","needQuote":true,"needEscape":true,"nodes":[{"content":"The maximum value.","pos":[0,18]}]},{"pos":[8660,8682],"content":"The restricted vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The restricted vector.","pos":[0,22]}]},{"pos":[9113,9168],"content":"Copies the elements of the vector to a specified array.","needQuote":true,"needEscape":true,"nodes":[{"content":"Copies the elements of the vector to a specified array.","pos":[0,55]}]},{"pos":[9423,9445],"content":"The destination array.","needQuote":true,"needEscape":true,"nodes":[{"content":"The destination array.","pos":[0,22]}]},{"pos":[9606,9689],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>array</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[9784,9860],"content":"The number of elements in the current instance is greater than in the array.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of elements in the current instance is greater than in the array.","pos":[0,76]}]},{"pos":[9947,9986],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is multidimensional.","needQuote":true,"needEscape":true,"source":"<code>array</code> is multidimensional."},{"pos":[10401,10495],"content":"Copies the elements of the vector to a specified array starting at a specified index position.","needQuote":true,"needEscape":true,"nodes":[{"content":"Copies the elements of the vector to a specified array starting at a specified index position.","pos":[0,94]}]},{"pos":[10508,10677],"content":"`array` must have a sufficient number of elements to accommodate the two vector elements. In other words, elements `index` and `index` + 1 must already exist in `array`.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"<ph id=\"ph1\">`array`</ph> must have a sufficient number of elements to accommodate the two vector elements.","pos":[0,89],"source":"`array` must have a sufficient number of elements to accommodate the two vector elements."},{"content":"In other words, elements <ph id=\"ph1\">`index`</ph> and <ph id=\"ph2\">`index`</ph> + 1 must already exist in <ph id=\"ph3\">`array`</ph>.","pos":[90,169],"source":" In other words, elements `index` and `index` + 1 must already exist in `array`."}]},{"pos":[10828,10850],"content":"The destination array.","needQuote":true,"needEscape":true,"nodes":[{"content":"The destination array.","pos":[0,22]}]},{"pos":[10911,10970],"content":"The index at which to copy the first element of the vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The index at which to copy the first element of the vector.","pos":[0,59]}]},{"pos":[11131,11214],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>array</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[11309,11385],"content":"The number of elements in the current instance is greater than in the array.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of elements in the current instance is greater than in the array.","pos":[0,76]}]},{"pos":[11501,11624],"content":"<code>index</code> is less than zero.       -or-       <code>index</code> is greater than or equal to the array length.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.","pos":[0,37],"source":"<code>index</code> is less than zero."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is greater than or equal to the array length.","pos":[44,119],"source":"       -or-       <code>index</code> is greater than or equal to the array length."}]},{"pos":[11712,11751],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is multidimensional.","needQuote":true,"needEscape":true,"source":"<code>array</code> is multidimensional."},{"pos":[12217,12278],"content":"Computes the Euclidean distance between the two given points.","needQuote":true,"needEscape":true,"nodes":[{"content":"Computes the Euclidean distance between the two given points.","pos":[0,61]}]},{"pos":[12485,12501],"content":"The first point.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first point.","pos":[0,16]}]},{"pos":[12574,12591],"content":"The second point.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second point.","pos":[0,17]}]},{"pos":[12649,12662],"content":"The distance.","needQuote":true,"needEscape":true,"nodes":[{"content":"The distance.","pos":[0,13]}]},{"pos":[13226,13294],"content":"Returns the Euclidean distance squared between two specified points.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the Euclidean distance squared between two specified points.","pos":[0,68]}]},{"pos":[13508,13524],"content":"The first point.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first point.","pos":[0,16]}]},{"pos":[13597,13614],"content":"The second point.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second point.","pos":[0,17]}]},{"pos":[13672,13693],"content":"The distance squared.","needQuote":true,"needEscape":true,"nodes":[{"content":"The distance squared.","pos":[0,21]}]},{"pos":[14219,14258],"content":"Divides the first vector by the second.","needQuote":true,"needEscape":true,"nodes":[{"content":"Divides the first vector by the second.","pos":[0,39]}]},{"pos":[14476,14493],"content":"The first vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first vector.","pos":[0,17]}]},{"pos":[14565,14583],"content":"The second vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second vector.","pos":[0,18]}]},{"pos":[14651,14690],"content":"The vector resulting from the division.","needQuote":true,"needEscape":true,"nodes":[{"content":"The vector resulting from the division.","pos":[0,39]}]},{"pos":[15184,15241],"content":"Divides the specified vector by a specified scalar value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Divides the specified vector by a specified scalar value.","pos":[0,57]}]},{"pos":[15443,15454],"content":"The vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The vector.","pos":[0,11]}]},{"pos":[15518,15535],"content":"The scalar value.","needQuote":true,"needEscape":true,"nodes":[{"content":"The scalar value.","pos":[0,17]}]},{"pos":[15603,15645],"content":"The vector that results from the division.","needQuote":true,"needEscape":true,"nodes":[{"content":"The vector that results from the division.","pos":[0,42]}]},{"pos":[16147,16186],"content":"Returns the dot product of two vectors.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the dot product of two vectors.","pos":[0,39]}]},{"pos":[16388,16405],"content":"The first vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first vector.","pos":[0,17]}]},{"pos":[16478,16496],"content":"The second vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second vector.","pos":[0,18]}]},{"pos":[16554,16570],"content":"The dot product.","needQuote":true,"needEscape":true,"nodes":[{"content":"The dot product.","pos":[0,16]}]},{"pos":[17012,17094],"content":"Returns a value that indicates whether this instance and another vector are equal.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a value that indicates whether this instance and another vector are equal.","pos":[0,82]}]},{"pos":[17106,17222],"content":"Two vectors are equal if their <xref:System.Numerics.Vector2> and <xref:System.Numerics.Vector2> elements are equal.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Two vectors are equal if their &lt;xref:System.Numerics.Vector2&gt; and &lt;xref:System.Numerics.Vector2&gt; elements are equal.","pos":[0,116],"source":"Two vectors are equal if their <xref:System.Numerics.Vector2> and <xref:System.Numerics.Vector2> elements are equal."}]},{"pos":[17385,17402],"content":"The other vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The other vector.","pos":[0,17]}]},{"pos":[17461,17626],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the two vectors are equal; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the two vectors are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[18048,18134],"content":"Returns a value that indicates whether this instance and a specified object are equal.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a value that indicates whether this instance and a specified object are equal.","pos":[0,86]}]},{"pos":[18146,18338],"content":"The current instance and <ph id=\"ph1\">`obj`</ph> are equal if <ph id=\"ph2\">`obj`</ph> is a &lt;xref:System.Numerics.Vector2&gt; object and their &lt;xref:System.Numerics.Vector2.X&gt; and &lt;xref:System.Numerics.Vector2.Y&gt; elements are equal.","needQuote":true,"needEscape":true,"extradata":"MT","source":"The current instance and `obj` are equal if `obj` is a <xref:System.Numerics.Vector2> object and their <xref:System.Numerics.Vector2.X> and <xref:System.Numerics.Vector2.Y> elements are equal."},{"pos":[18479,18527],"content":"The object to compare with the current instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"The object to compare with the current instance.","pos":[0,48]}]},{"pos":[18586,18997],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current instance and <code>obj</code> are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref><xref uid=\"langword_csharp_\" name=\"\" href=\"\"></xref>. If <code>obj</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, the method returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the current instance and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">obj</ph><ept id=\"p2\">&lt;/code&gt;</ept> are equal; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept><bpt id=\"p4\">&lt;xref uid=\"langword_csharp_\" name=\"\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","pos":[0,243],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current instance and <code>obj</code> are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref><xref uid=\"langword_csharp_\" name=\"\" href=\"\"></xref>."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">obj</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, the method returns <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","pos":[244,411],"source":" If <code>obj</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, the method returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[19396,19436],"content":"Returns the hash code for this instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the hash code for this instance.","pos":[0,40]}]},{"pos":[19571,19585],"content":"The hash code.","needQuote":true,"needEscape":true,"nodes":[{"content":"The hash code.","pos":[0,14]}]},{"pos":[19964,19997],"content":"Returns the length of the vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the length of the vector.","pos":[0,33]}]},{"pos":[20121,20141],"content":"The vector's length.","needQuote":true,"needEscape":true,"nodes":[{"content":"The vector's length.","pos":[0,20]}]},{"pos":[20550,20591],"content":"Returns the length of the vector squared.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the length of the vector squared.","pos":[0,41]}]},{"pos":[20603,20711],"content":"This operation offers better performance than a call to the <xref:System.Numerics.Vector2.Length%2A> method.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This operation offers better performance than a call to the &lt;xref:System.Numerics.Vector2.Length%2A&gt; method.","pos":[0,108],"source":"This operation offers better performance than a call to the <xref:System.Numerics.Vector2.Length%2A> method."}]},{"pos":[20842,20870],"content":"The vector's length squared.","needQuote":true,"needEscape":true,"nodes":[{"content":"The vector's length squared.","pos":[0,28]}]},{"pos":[21433,21514],"content":"Performs a linear interpolation between two vectors based on the given weighting.","needQuote":true,"needEscape":true,"nodes":[{"content":"Performs a linear interpolation between two vectors based on the given weighting.","pos":[0,81]}]},{"pos":[21749,21766],"content":"The first vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first vector.","pos":[0,17]}]},{"pos":[21839,21857],"content":"The second vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second vector.","pos":[0,18]}]},{"pos":[21920,21982],"content":"A value between 0 and 1 that indicates the weight of <ph id=\"ph1\">`value2`</ph>.","needQuote":true,"needEscape":true,"source":"A value between 0 and 1 that indicates the weight of `value2`."},{"pos":[22050,22074],"content":"The interpolated vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The interpolated vector.","pos":[0,24]}]},{"pos":[22574,22680],"content":"Returns a vector whose elements are the maximum of each of the pairs of elements in two specified vectors.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a vector whose elements are the maximum of each of the pairs of elements in two specified vectors.","pos":[0,106]}]},{"pos":[22900,22917],"content":"The first vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first vector.","pos":[0,17]}]},{"pos":[22990,23008],"content":"The second vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second vector.","pos":[0,18]}]},{"pos":[23076,23097],"content":"The maximized vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The maximized vector.","pos":[0,21]}]},{"pos":[23596,23702],"content":"Returns a vector whose elements are the minimum of each of the pairs of elements in two specified vectors.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a vector whose elements are the minimum of each of the pairs of elements in two specified vectors.","pos":[0,106]}]},{"pos":[23922,23939],"content":"The first vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first vector.","pos":[0,17]}]},{"pos":[24012,24030],"content":"The second vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second vector.","pos":[0,18]}]},{"pos":[24098,24119],"content":"The minimized vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The minimized vector.","pos":[0,21]}]},{"pos":[24643,24675],"content":"Multiplies two vectors together.","needQuote":true,"needEscape":true,"nodes":[{"content":"Multiplies two vectors together.","pos":[0,32]}]},{"pos":[24895,24912],"content":"The first vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first vector.","pos":[0,17]}]},{"pos":[24984,25002],"content":"The second vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second vector.","pos":[0,18]}]},{"pos":[25070,25089],"content":"The product vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The product vector.","pos":[0,19]}]},{"pos":[25595,25637],"content":"Multiplies a vector by a specified scalar.","needQuote":true,"needEscape":true,"nodes":[{"content":"Multiplies a vector by a specified scalar.","pos":[0,42]}]},{"pos":[25839,25862],"content":"The vector to multiply.","needQuote":true,"needEscape":true,"nodes":[{"content":"The vector to multiply.","pos":[0,23]}]},{"pos":[25924,25941],"content":"The scalar value.","needQuote":true,"needEscape":true,"nodes":[{"content":"The scalar value.","pos":[0,17]}]},{"pos":[26009,26027],"content":"The scaled vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The scaled vector.","pos":[0,18]}]},{"pos":[26533,26581],"content":"Multiplies a scalar value by a specified vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"Multiplies a scalar value by a specified vector.","pos":[0,48]}]},{"pos":[26773,26790],"content":"The scaled value.","needQuote":true,"needEscape":true,"nodes":[{"content":"The scaled value.","pos":[0,17]}]},{"pos":[26862,26873],"content":"The vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The vector.","pos":[0,11]}]},{"pos":[26941,26959],"content":"The scaled vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The scaled vector.","pos":[0,18]}]},{"pos":[27406,27433],"content":"Negates a specified vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"Negates a specified vector.","pos":[0,27]}]},{"pos":[27622,27643],"content":"The vector to negate.","needQuote":true,"needEscape":true,"nodes":[{"content":"The vector to negate.","pos":[0,21]}]},{"pos":[27711,27730],"content":"The negated vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The negated vector.","pos":[0,19]}]},{"pos":[28190,28281],"content":"Returns a vector with the same direction as the specified vector, but with a length of one.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a vector with the same direction as the specified vector, but with a length of one.","pos":[0,91]}]},{"pos":[28473,28497],"content":"The vector to normalize.","needQuote":true,"needEscape":true,"nodes":[{"content":"The vector to normalize.","pos":[0,24]}]},{"pos":[28565,28587],"content":"The normalized vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The normalized vector.","pos":[0,22]}]},{"pos":[28945,28993],"content":"Gets a vector whose 2 elements are equal to one.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a vector whose 2 elements are equal to one.","pos":[0,48]}]},{"pos":[29135,29220],"content":"A vector whose two elements are equal to one (that is, it returns the vector <ph id=\"ph1\">`(1,1)`</ph>.","needQuote":true,"needEscape":true,"source":"A vector whose two elements are equal to one (that is, it returns the vector `(1,1)`."},{"pos":[29761,29787],"content":"Adds two vectors together.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds two vectors together.","pos":[0,26]}]},{"pos":[29799,29893],"content":"The Addition method defines the addition operation for <xref:System.Numerics.Vector2> objects.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Addition method defines the addition operation for &lt;xref:System.Numerics.Vector2&gt; objects.","pos":[0,94],"source":"The Addition method defines the addition operation for <xref:System.Numerics.Vector2> objects."}]},{"pos":[30116,30140],"content":"The first vector to add.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first vector to add.","pos":[0,24]}]},{"pos":[30212,30237],"content":"The second vector to add.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second vector to add.","pos":[0,25]}]},{"pos":[30305,30323],"content":"The summed vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The summed vector.","pos":[0,18]}]},{"pos":[30872,30911],"content":"Divides the first vector by the second.","needQuote":true,"needEscape":true,"nodes":[{"content":"Divides the first vector by the second.","pos":[0,39]}]},{"pos":[30923,31017],"content":"The Division method defines the division operation for <xref:System.Numerics.Vector2> objects.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Division method defines the division operation for &lt;xref:System.Numerics.Vector2&gt; objects.","pos":[0,94],"source":"The Division method defines the division operation for <xref:System.Numerics.Vector2> objects."}]},{"pos":[31240,31257],"content":"The first vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first vector.","pos":[0,17]}]},{"pos":[31329,31347],"content":"The second vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second vector.","pos":[0,18]}]},{"pos":[31415,31493],"content":"The vector that results from dividing <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept> by <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The vector that results from dividing <code>left</code> by <code>right</code>."},{"pos":[32019,32076],"content":"Divides the specified vector by a specified scalar value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Divides the specified vector by a specified scalar value.","pos":[0,57]}]},{"pos":[32088,32182],"content":"The Division method defines the division operation for <xref:System.Numerics.Vector2> objects.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Division method defines the division operation for &lt;xref:System.Numerics.Vector2&gt; objects.","pos":[0,94],"source":"The Division method defines the division operation for <xref:System.Numerics.Vector2> objects."}]},{"pos":[32392,32403],"content":"The vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The vector.","pos":[0,11]}]},{"pos":[32466,32483],"content":"The scalar value.","needQuote":true,"needEscape":true,"nodes":[{"content":"The scalar value.","pos":[0,17]}]},{"pos":[32551,32578],"content":"The result of the division.","needQuote":true,"needEscape":true,"nodes":[{"content":"The result of the division.","pos":[0,27]}]},{"pos":[33127,33222],"content":"Returns a value that indicates whether each pair of elements in two specified vectors is equal.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a value that indicates whether each pair of elements in two specified vectors is equal.","pos":[0,95]}]},{"pos":[33234,33358],"content":"Two &lt;xref:System.Numerics.Vector2&gt; objects are equal if each value in <ph id=\"ph1\">`left`</ph> is equal to the corresponding value in <ph id=\"ph2\">`right`</ph>.","needQuote":true,"needEscape":true,"extradata":"MT","source":"Two <xref:System.Numerics.Vector2> objects are equal if each value in `left` is equal to the corresponding value in `right`."},{"pos":[33562,33590],"content":"The first vector to compare.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first vector to compare.","pos":[0,28]}]},{"pos":[33662,33691],"content":"The second vector to compare.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second vector to compare.","pos":[0,29]}]},{"pos":[33750,33940],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">left</ph><ept id=\"p2\">&lt;/code&gt;</ept> and <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph2\">right</ph><ept id=\"p3\">&lt;/code&gt;</ept> are equal; otherwise, <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>left</code> and <code>right</code> are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[34499,34574],"content":"Returns a value that indicates whether two specified vectors are not equal.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a value that indicates whether two specified vectors are not equal.","pos":[0,75]}]},{"pos":[34780,34808],"content":"The first vector to compare.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first vector to compare.","pos":[0,28]}]},{"pos":[34880,34909],"content":"The second vector to compare.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second vector to compare.","pos":[0,29]}]},{"pos":[34968,35162],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">left</ph><ept id=\"p2\">&lt;/code&gt;</ept> and <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph2\">right</ph><ept id=\"p3\">&lt;/code&gt;</ept> are not equal; otherwise, <bpt id=\"p4\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p4\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>left</code> and <code>right</code> are not equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[35713,35745],"content":"Multiplies two vectors together.","needQuote":true,"needEscape":true,"nodes":[{"content":"Multiplies two vectors together.","pos":[0,32]}]},{"pos":[35757,35857],"content":"The Multiply method defines the multiplication operation for <xref:System.Numerics.Vector2> objects.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Multiply method defines the multiplication operation for &lt;xref:System.Numerics.Vector2&gt; objects.","pos":[0,100],"source":"The Multiply method defines the multiplication operation for <xref:System.Numerics.Vector2> objects."}]},{"pos":[36080,36097],"content":"The first vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first vector.","pos":[0,17]}]},{"pos":[36169,36187],"content":"The second vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second vector.","pos":[0,18]}]},{"pos":[36255,36274],"content":"The product vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The product vector.","pos":[0,19]}]},{"pos":[36800,36861],"content":"Multiples the specified vector by the specified scalar value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Multiples the specified vector by the specified scalar value.","pos":[0,61]}]},{"pos":[36873,37010],"content":"The <xref:System.Numerics.Vector2.op_Multiply%2A> method defines the multiplication operation for <xref:System.Numerics.Vector2> objects.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.Numerics.Vector2.op_Multiply%2A&gt; method defines the multiplication operation for &lt;xref:System.Numerics.Vector2&gt; objects.","pos":[0,137],"source":"The <xref:System.Numerics.Vector2.op_Multiply%2A> method defines the multiplication operation for <xref:System.Numerics.Vector2> objects."}]},{"pos":[37215,37226],"content":"The vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The vector.","pos":[0,11]}]},{"pos":[37288,37305],"content":"The scalar value.","needQuote":true,"needEscape":true,"nodes":[{"content":"The scalar value.","pos":[0,17]}]},{"pos":[37373,37391],"content":"The scaled vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The scaled vector.","pos":[0,18]}]},{"pos":[37917,37968],"content":"Multiples the scalar value by the specified vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"Multiples the scalar value by the specified vector.","pos":[0,51]}]},{"pos":[37980,38117],"content":"The <xref:System.Numerics.Vector2.op_Multiply%2A> method defines the multiplication operation for <xref:System.Numerics.Vector2> objects.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.Numerics.Vector2.op_Multiply%2A&gt; method defines the multiplication operation for &lt;xref:System.Numerics.Vector2&gt; objects.","pos":[0,137],"source":"The <xref:System.Numerics.Vector2.op_Multiply%2A> method defines the multiplication operation for <xref:System.Numerics.Vector2> objects."}]},{"pos":[38312,38323],"content":"The vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The vector.","pos":[0,11]}]},{"pos":[38395,38412],"content":"The scalar value.","needQuote":true,"needEscape":true,"nodes":[{"content":"The scalar value.","pos":[0,17]}]},{"pos":[38480,38498],"content":"The scaled vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The scaled vector.","pos":[0,18]}]},{"pos":[39062,39105],"content":"Subtracts the second vector from the first.","needQuote":true,"needEscape":true,"nodes":[{"content":"Subtracts the second vector from the first.","pos":[0,43]}]},{"pos":[39117,39217],"content":"The Subtraction method defines the subtraction operation for <xref:System.Numerics.Vector2> objects.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Subtraction method defines the subtraction operation for &lt;xref:System.Numerics.Vector2&gt; objects.","pos":[0,100],"source":"The Subtraction method defines the subtraction operation for <xref:System.Numerics.Vector2> objects."}]},{"pos":[39443,39460],"content":"The first vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first vector.","pos":[0,17]}]},{"pos":[39532,39550],"content":"The second vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second vector.","pos":[0,18]}]},{"pos":[39618,39701],"content":"The vector that results from subtracting <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">right</ph><ept id=\"p1\">&lt;/code&gt;</ept> from <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">left</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The vector that results from subtracting <code>right</code> from <code>left</code>."},{"pos":[40206,40235],"content":"Negates the specified vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"Negates the specified vector.","pos":[0,29]}]},{"pos":[40247,40352],"content":"The UnaryNegation method defines the unary negation operation for <xref:System.Numerics.Vector2> objects.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The UnaryNegation method defines the unary negation operation for &lt;xref:System.Numerics.Vector2&gt; objects.","pos":[0,105],"source":"The UnaryNegation method defines the unary negation operation for <xref:System.Numerics.Vector2> objects."}]},{"pos":[40551,40572],"content":"The vector to negate.","needQuote":true,"needEscape":true,"nodes":[{"content":"The vector to negate.","pos":[0,21]}]},{"pos":[40640,40659],"content":"The negated vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The negated vector.","pos":[0,19]}]},{"pos":[41191,41270],"content":"Returns the reflection of a vector off a surface that has the specified normal.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the reflection of a vector off a surface that has the specified normal.","pos":[0,79]}]},{"pos":[41494,41512],"content":"The source vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The source vector.","pos":[0,18]}]},{"pos":[41585,41631],"content":"The normal of the surface being reflected off.","needQuote":true,"needEscape":true,"nodes":[{"content":"The normal of the surface being reflected off.","pos":[0,46]}]},{"pos":[41699,41720],"content":"The reflected vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The reflected vector.","pos":[0,21]}]},{"pos":[42186,42279],"content":"Returns a vector whose elements are the square root of each of a specified vector's elements.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a vector whose elements are the square root of each of a specified vector's elements.","pos":[0,93]}]},{"pos":[42472,42481],"content":"A vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"A vector.","pos":[0,9]}]},{"pos":[42549,42572],"content":"The square root vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The square root vector.","pos":[0,23]}]},{"pos":[43103,43146],"content":"Subtracts the second vector from the first.","needQuote":true,"needEscape":true,"nodes":[{"content":"Subtracts the second vector from the first.","pos":[0,43]}]},{"pos":[43366,43383],"content":"The first vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first vector.","pos":[0,17]}]},{"pos":[43455,43473],"content":"The second vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The second vector.","pos":[0,18]}]},{"pos":[43541,43563],"content":"The difference vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The difference vector.","pos":[0,22]}]},{"pos":[43949,44032],"content":"Returns the string representation of the current instance using default formatting.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the string representation of the current instance using default formatting.","pos":[0,83]}]},{"pos":[44044,44470],"content":"This method returns a string in which each element of the vector is formatted using the \"G\" (general) format string and the formatting conventions of the current thread culture. The \"\\<\" and \">\" characters are used to begin and end the string, and the current culture's <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A?displayProperty=fullName> property followed by a space is used to separate each element.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method returns a string in which each element of the vector is formatted using the \"G\" (general) format string and the formatting conventions of the current thread culture. The \"\\<\" and \">\" characters are used to begin and end the string, and the current culture's <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A?displayProperty=fullName> property followed by a space is used to separate each element.","pos":[0,426],"nodes":[{"content":"This method returns a string in which each element of the vector is formatted using the \"G\" (general) format string and the formatting conventions of the current thread culture.","pos":[0,177]},{"content":"The \"<ph id=\"ph1\">\\&lt;</ph>\" and \"&gt;\" characters are used to begin and end the string, and the current culture's &lt;xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A?displayProperty=fullName&gt; property followed by a space is used to separate each element.","pos":[178,426],"source":" The \"\\<\" and \">\" characters are used to begin and end the string, and the current culture's <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A?displayProperty=fullName> property followed by a space is used to separate each element."}]}]},{"pos":[44606,44656],"content":"The string representation of the current instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"The string representation of the current instance.","pos":[0,50]}]},{"pos":[45090,45212],"content":"Returns the string representation of the current instance using the specified format string to format individual elements.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the string representation of the current instance using the specified format string to format individual elements.","pos":[0,122]}]},{"pos":[45224,45615],"content":"This method returns a string in which each element of the vector is formatted using `format` and the current culture's formatting conventions. The \"\\<\" and \">\" characters are used to begin and end the string, and the current culture's <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A?displayProperty=fullName> property followed by a space is used to separate each element.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method returns a string in which each element of the vector is formatted using <ph id=\"ph1\">`format`</ph> and the current culture's formatting conventions.","pos":[0,142],"source":"This method returns a string in which each element of the vector is formatted using `format` and the current culture's formatting conventions."},{"content":"The \"<ph id=\"ph1\">\\&lt;</ph>\" and \"&gt;\" characters are used to begin and end the string, and the current culture's &lt;xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A?displayProperty=fullName&gt; property followed by a space is used to separate each element.","pos":[143,391],"source":" The \"\\<\" and \">\" characters are used to begin and end the string, and the current culture's <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A?displayProperty=fullName> property followed by a space is used to separate each element."}]},{"pos":[45757,45929],"content":"A <bpt id=\"p1\">[</bpt>standard<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> or <bpt id=\"p2\">[</bpt>custom numeric format string<ept id=\"p2\">](~/add/includes/ajax-current-ext-md.md)</ept> that defines the format of individual elements.","needQuote":true,"needEscape":true,"source":"A [standard](~/add/includes/ajax-current-ext-md.md) or [custom numeric format string](~/add/includes/ajax-current-ext-md.md) that defines the format of individual elements."},{"pos":[45987,46037],"content":"The string representation of the current instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"The string representation of the current instance.","pos":[0,50]}]},{"pos":[46565,46759],"content":"Returns the string representation of the current instance using the specified format string to format individual elements and the specified format provider to define culture-specific formatting.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the string representation of the current instance using the specified format string to format individual elements and the specified format provider to define culture-specific formatting.","pos":[0,194]}]},{"pos":[46771,47134],"content":"This method returns a string in which each element of the vector is formatted using `format` and `formatProvider`. The \"\\<\" and \">\" characters are used to begin and end the string, and the format provider's <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A?displayProperty=fullName> property followed by a space is used to separate each element.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method returns a string in which each element of the vector is formatted using <ph id=\"ph1\">`format`</ph> and <ph id=\"ph2\">`formatProvider`</ph>.","pos":[0,114],"source":"This method returns a string in which each element of the vector is formatted using `format` and `formatProvider`."},{"content":"The \"<ph id=\"ph1\">\\&lt;</ph>\" and \"&gt;\" characters are used to begin and end the string, and the format provider's &lt;xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A?displayProperty=fullName&gt; property followed by a space is used to separate each element.","pos":[115,363],"source":" The \"\\<\" and \">\" characters are used to begin and end the string, and the format provider's <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A?displayProperty=fullName> property followed by a space is used to separate each element."}]},{"pos":[47308,47480],"content":"A <bpt id=\"p1\">[</bpt>standard<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> or <bpt id=\"p2\">[</bpt>custom numeric format string<ept id=\"p2\">](~/add/includes/ajax-current-ext-md.md)</ept> that defines the format of individual elements.","needQuote":true,"needEscape":true,"source":"A [standard](~/add/includes/ajax-current-ext-md.md) or [custom numeric format string](~/add/includes/ajax-current-ext-md.md) that defines the format of individual elements."},{"pos":[47560,47632],"content":"A format provider that supplies culture-specific formatting information.","needQuote":true,"needEscape":true,"nodes":[{"content":"A format provider that supplies culture-specific formatting information.","pos":[0,72]}]},{"pos":[47690,47740],"content":"The string representation of the current instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"The string representation of the current instance.","pos":[0,50]}]},{"pos":[48284,48330],"content":"Transforms a vector by a specified 3x2 matrix.","needQuote":true,"needEscape":true,"nodes":[{"content":"Transforms a vector by a specified 3x2 matrix.","pos":[0,46]}]},{"pos":[48562,48586],"content":"The vector to transform.","needQuote":true,"needEscape":true,"nodes":[{"content":"The vector to transform.","pos":[0,24]}]},{"pos":[48661,48687],"content":"The transformation matrix.","needQuote":true,"needEscape":true,"nodes":[{"content":"The transformation matrix.","pos":[0,26]}]},{"pos":[48755,48778],"content":"The transformed vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The transformed vector.","pos":[0,23]}]},{"pos":[49323,49369],"content":"Transforms a vector by a specified 4x4 matrix.","needQuote":true,"needEscape":true,"nodes":[{"content":"Transforms a vector by a specified 4x4 matrix.","pos":[0,46]}]},{"pos":[49601,49625],"content":"The vector to transform.","needQuote":true,"needEscape":true,"nodes":[{"content":"The vector to transform.","pos":[0,24]}]},{"pos":[49700,49726],"content":"The transformation matrix.","needQuote":true,"needEscape":true,"nodes":[{"content":"The transformation matrix.","pos":[0,26]}]},{"pos":[49794,49817],"content":"The transformed vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The transformed vector.","pos":[0,23]}]},{"pos":[50367,50430],"content":"Transforms a vector by the specified Quaternion rotation value.","needQuote":true,"needEscape":true,"nodes":[{"content":"Transforms a vector by the specified Quaternion rotation value.","pos":[0,63]}]},{"pos":[50659,50680],"content":"The vector to rotate.","needQuote":true,"needEscape":true,"nodes":[{"content":"The vector to rotate.","pos":[0,21]}]},{"pos":[50758,50780],"content":"The rotation to apply.","needQuote":true,"needEscape":true,"nodes":[{"content":"The rotation to apply.","pos":[0,22]}]},{"pos":[50848,50871],"content":"The transformed vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The transformed vector.","pos":[0,23]}]},{"pos":[51446,51497],"content":"Transforms a vector normal by the given 3x2 matrix.","needQuote":true,"needEscape":true,"nodes":[{"content":"Transforms a vector normal by the given 3x2 matrix.","pos":[0,51]}]},{"pos":[51731,51749],"content":"The source vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The source vector.","pos":[0,18]}]},{"pos":[51824,51835],"content":"The matrix.","needQuote":true,"needEscape":true,"nodes":[{"content":"The matrix.","pos":[0,11]}]},{"pos":[51903,51926],"content":"The transformed vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The transformed vector.","pos":[0,23]}]},{"pos":[52507,52558],"content":"Transforms a vector normal by the given 4x4 matrix.","needQuote":true,"needEscape":true,"nodes":[{"content":"Transforms a vector normal by the given 4x4 matrix.","pos":[0,51]}]},{"pos":[52792,52810],"content":"The source vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The source vector.","pos":[0,18]}]},{"pos":[52885,52896],"content":"The matrix.","needQuote":true,"needEscape":true,"nodes":[{"content":"The matrix.","pos":[0,11]}]},{"pos":[52964,52987],"content":"The transformed vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The transformed vector.","pos":[0,23]}]},{"pos":[53361,53383],"content":"Gets the vector (1,0).","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the vector (1,0).","pos":[0,22]}]},{"pos":[53527,53546],"content":"The vector <ph id=\"ph1\">`(1,0)`</ph>.","needQuote":true,"needEscape":true,"source":"The vector `(1,0)`."},{"pos":[53910,53932],"content":"Gets the vector (0,1).","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the vector (0,1).","pos":[0,22]}]},{"pos":[54076,54095],"content":"The vector <ph id=\"ph1\">`(0,1)`</ph>.","needQuote":true,"needEscape":true,"source":"The vector `(0,1)`."},{"pos":[54436,54466],"content":"The X component of the vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The X component of the vector.","pos":[0,30]}]},{"pos":[54563,54575],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[54873,54903],"content":"The Y component of the vector.","needQuote":true,"needEscape":true,"nodes":[{"content":"The Y component of the vector.","pos":[0,30]}]},{"pos":[55000,55012],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[55328,55380],"content":"Returns a vector whose 2 elements are equal to zero.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a vector whose 2 elements are equal to zero.","pos":[0,52]}]},{"pos":[55523,55609],"content":"A vector whose two elements are equal to zero (that is, it returns the vector <ph id=\"ph1\">`(0,0)`</ph>.","needQuote":true,"needEscape":true,"source":"A vector whose two elements are equal to zero (that is, it returns the vector `(0,0)`."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Numerics.Vector2\n  id: Vector2\n  children:\n  - System.Numerics.Vector2.#ctor(System.Single)\n  - System.Numerics.Vector2.#ctor(System.Single,System.Single)\n  - System.Numerics.Vector2.Abs(System.Numerics.Vector2)\n  - System.Numerics.Vector2.Add(System.Numerics.Vector2,System.Numerics.Vector2)\n  - System.Numerics.Vector2.Clamp(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2)\n  - System.Numerics.Vector2.CopyTo(System.Single[])\n  - System.Numerics.Vector2.CopyTo(System.Single[],System.Int32)\n  - System.Numerics.Vector2.Distance(System.Numerics.Vector2,System.Numerics.Vector2)\n  - System.Numerics.Vector2.DistanceSquared(System.Numerics.Vector2,System.Numerics.Vector2)\n  - System.Numerics.Vector2.Divide(System.Numerics.Vector2,System.Numerics.Vector2)\n  - System.Numerics.Vector2.Divide(System.Numerics.Vector2,System.Single)\n  - System.Numerics.Vector2.Dot(System.Numerics.Vector2,System.Numerics.Vector2)\n  - System.Numerics.Vector2.Equals(System.Numerics.Vector2)\n  - System.Numerics.Vector2.Equals(System.Object)\n  - System.Numerics.Vector2.GetHashCode\n  - System.Numerics.Vector2.Length\n  - System.Numerics.Vector2.LengthSquared\n  - System.Numerics.Vector2.Lerp(System.Numerics.Vector2,System.Numerics.Vector2,System.Single)\n  - System.Numerics.Vector2.Max(System.Numerics.Vector2,System.Numerics.Vector2)\n  - System.Numerics.Vector2.Min(System.Numerics.Vector2,System.Numerics.Vector2)\n  - System.Numerics.Vector2.Multiply(System.Numerics.Vector2,System.Numerics.Vector2)\n  - System.Numerics.Vector2.Multiply(System.Numerics.Vector2,System.Single)\n  - System.Numerics.Vector2.Multiply(System.Single,System.Numerics.Vector2)\n  - System.Numerics.Vector2.Negate(System.Numerics.Vector2)\n  - System.Numerics.Vector2.Normalize(System.Numerics.Vector2)\n  - System.Numerics.Vector2.One\n  - System.Numerics.Vector2.op_Addition(System.Numerics.Vector2,System.Numerics.Vector2)\n  - System.Numerics.Vector2.op_Division(System.Numerics.Vector2,System.Numerics.Vector2)\n  - System.Numerics.Vector2.op_Division(System.Numerics.Vector2,System.Single)\n  - System.Numerics.Vector2.op_Equality(System.Numerics.Vector2,System.Numerics.Vector2)\n  - System.Numerics.Vector2.op_Inequality(System.Numerics.Vector2,System.Numerics.Vector2)\n  - System.Numerics.Vector2.op_Multiply(System.Numerics.Vector2,System.Numerics.Vector2)\n  - System.Numerics.Vector2.op_Multiply(System.Numerics.Vector2,System.Single)\n  - System.Numerics.Vector2.op_Multiply(System.Single,System.Numerics.Vector2)\n  - System.Numerics.Vector2.op_Subtraction(System.Numerics.Vector2,System.Numerics.Vector2)\n  - System.Numerics.Vector2.op_UnaryNegation(System.Numerics.Vector2)\n  - System.Numerics.Vector2.Reflect(System.Numerics.Vector2,System.Numerics.Vector2)\n  - System.Numerics.Vector2.SquareRoot(System.Numerics.Vector2)\n  - System.Numerics.Vector2.Subtract(System.Numerics.Vector2,System.Numerics.Vector2)\n  - System.Numerics.Vector2.ToString\n  - System.Numerics.Vector2.ToString(System.String)\n  - System.Numerics.Vector2.ToString(System.String,System.IFormatProvider)\n  - System.Numerics.Vector2.Transform(System.Numerics.Vector2,System.Numerics.Matrix3x2)\n  - System.Numerics.Vector2.Transform(System.Numerics.Vector2,System.Numerics.Matrix4x4)\n  - System.Numerics.Vector2.Transform(System.Numerics.Vector2,System.Numerics.Quaternion)\n  - System.Numerics.Vector2.TransformNormal(System.Numerics.Vector2,System.Numerics.Matrix3x2)\n  - System.Numerics.Vector2.TransformNormal(System.Numerics.Vector2,System.Numerics.Matrix4x4)\n  - System.Numerics.Vector2.UnitX\n  - System.Numerics.Vector2.UnitY\n  - System.Numerics.Vector2.X\n  - System.Numerics.Vector2.Y\n  - System.Numerics.Vector2.Zero\n  langs:\n  - csharp\n  name: Vector2\n  nameWithType: Vector2\n  fullName: System.Numerics.Vector2\n  type: Struct\n  summary: Represents a vector with two single-precision floating-point values.\n  remarks: The Vector2 structure provides support for hardware acceleration.\n  syntax:\n    content: 'public struct Vector2 : IEquatable<System.Numerics.Vector2>, IFormattable'\n  inheritance:\n  - System.ValueType\n  implements:\n  - System.IEquatable<System.Numerics.Vector2>\n  - System.IFormattable\n  platform:\n  - net462\n- uid: System.Numerics.Vector2.#ctor(System.Single)\n  id: '#ctor(System.Single)'\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  name: Vector2(Single)\n  nameWithType: Vector2.Vector2(Single)\n  fullName: System.Numerics.Vector2.Vector2(Single)\n  type: Constructor\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Creates a new <xref href=\"System.Numerics.Vector2\"></xref> object whose two elements have the same value.\n  syntax:\n    content: public Vector2 (float value);\n    parameters:\n    - id: value\n      type: System.Single\n      description: The value to assign to both elements.\n  overload: System.Numerics.Vector2.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector2.#ctor(System.Single,System.Single)\n  id: '#ctor(System.Single,System.Single)'\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  name: Vector2(Single,Single)\n  nameWithType: Vector2.Vector2(Single,Single)\n  fullName: System.Numerics.Vector2.Vector2(Single,Single)\n  type: Constructor\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Creates a vector whose elements have the specified values.\n  syntax:\n    content: public Vector2 (float x, float y);\n    parameters:\n    - id: x\n      type: System.Single\n      description: The value to assign to the <xref href=\"System.Numerics.Vector2.X\"></xref> field.\n    - id: y\n      type: System.Single\n      description: The value to assign to the <xref href=\"System.Numerics.Vector2.Y\"></xref> field.\n  overload: System.Numerics.Vector2.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector2.Abs(System.Numerics.Vector2)\n  id: Abs(System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  name: Abs(Vector2)\n  nameWithType: Vector2.Abs(Vector2)\n  fullName: System.Numerics.Vector2.Abs(Vector2)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Returns a vector whose elements are the absolute values of each of the specified vector's elements.\n  syntax:\n    content: public static System.Numerics.Vector2 Abs (System.Numerics.Vector2 value);\n    parameters:\n    - id: value\n      type: System.Numerics.Vector2\n      description: A vector.\n    return:\n      type: System.Numerics.Vector2\n      description: The absolute value vector.\n  overload: System.Numerics.Vector2.Abs*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector2.Add(System.Numerics.Vector2,System.Numerics.Vector2)\n  id: Add(System.Numerics.Vector2,System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  name: Add(Vector2,Vector2)\n  nameWithType: Vector2.Add(Vector2,Vector2)\n  fullName: System.Numerics.Vector2.Add(Vector2,Vector2)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Adds two vectors together.\n  syntax:\n    content: public static System.Numerics.Vector2 Add (System.Numerics.Vector2 left, System.Numerics.Vector2 right);\n    parameters:\n    - id: left\n      type: System.Numerics.Vector2\n      description: The first vector to add.\n    - id: right\n      type: System.Numerics.Vector2\n      description: The second vector to add.\n    return:\n      type: System.Numerics.Vector2\n      description: The summed vector.\n  overload: System.Numerics.Vector2.Add*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector2.Clamp(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2)\n  id: Clamp(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  name: Clamp(Vector2,Vector2,Vector2)\n  nameWithType: Vector2.Clamp(Vector2,Vector2,Vector2)\n  fullName: System.Numerics.Vector2.Clamp(Vector2,Vector2,Vector2)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Restricts a vector between a minimum and a maximum value.\n  syntax:\n    content: public static System.Numerics.Vector2 Clamp (System.Numerics.Vector2 value1, System.Numerics.Vector2 min, System.Numerics.Vector2 max);\n    parameters:\n    - id: value1\n      type: System.Numerics.Vector2\n      description: The vector to restrict.\n    - id: min\n      type: System.Numerics.Vector2\n      description: The minimum value.\n    - id: max\n      type: System.Numerics.Vector2\n      description: The maximum value.\n    return:\n      type: System.Numerics.Vector2\n      description: The restricted vector.\n  overload: System.Numerics.Vector2.Clamp*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector2.CopyTo(System.Single[])\n  id: CopyTo(System.Single[])\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  name: CopyTo(Single[])\n  nameWithType: Vector2.CopyTo(Single[])\n  fullName: System.Numerics.Vector2.CopyTo(Single[])\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Copies the elements of the vector to a specified array.\n  remarks: '`array` must have at least two elements. The method copies the vector''s elements starting at index 0.'\n  syntax:\n    content: public void CopyTo (float[] array);\n    parameters:\n    - id: array\n      type: System.Single[]\n      description: The destination array.\n  overload: System.Numerics.Vector2.CopyTo*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>array</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The number of elements in the current instance is greater than in the array.\n  - type: System.RankException\n    commentId: T:System.RankException\n    description: <code>array</code> is multidimensional.\n  platform:\n  - net462\n- uid: System.Numerics.Vector2.CopyTo(System.Single[],System.Int32)\n  id: CopyTo(System.Single[],System.Int32)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  name: CopyTo(Single[],Int32)\n  nameWithType: Vector2.CopyTo(Single[],Int32)\n  fullName: System.Numerics.Vector2.CopyTo(Single[],Int32)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Copies the elements of the vector to a specified array starting at a specified index position.\n  remarks: '`array` must have a sufficient number of elements to accommodate the two vector elements. In other words, elements `index` and `index` + 1 must already exist in `array`.'\n  syntax:\n    content: public void CopyTo (float[] array, int index);\n    parameters:\n    - id: array\n      type: System.Single[]\n      description: The destination array.\n    - id: index\n      type: System.Int32\n      description: The index at which to copy the first element of the vector.\n  overload: System.Numerics.Vector2.CopyTo*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>array</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The number of elements in the current instance is greater than in the array.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>index</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>index</code> is greater than or equal to the array length.\"\n  - type: System.RankException\n    commentId: T:System.RankException\n    description: <code>array</code> is multidimensional.\n  platform:\n  - net462\n- uid: System.Numerics.Vector2.Distance(System.Numerics.Vector2,System.Numerics.Vector2)\n  id: Distance(System.Numerics.Vector2,System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  name: Distance(Vector2,Vector2)\n  nameWithType: Vector2.Distance(Vector2,Vector2)\n  fullName: System.Numerics.Vector2.Distance(Vector2,Vector2)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Computes the Euclidean distance between the two given points.\n  syntax:\n    content: public static float Distance (System.Numerics.Vector2 value1, System.Numerics.Vector2 value2);\n    parameters:\n    - id: value1\n      type: System.Numerics.Vector2\n      description: The first point.\n    - id: value2\n      type: System.Numerics.Vector2\n      description: The second point.\n    return:\n      type: System.Single\n      description: The distance.\n  overload: System.Numerics.Vector2.Distance*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector2.DistanceSquared(System.Numerics.Vector2,System.Numerics.Vector2)\n  id: DistanceSquared(System.Numerics.Vector2,System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  name: DistanceSquared(Vector2,Vector2)\n  nameWithType: Vector2.DistanceSquared(Vector2,Vector2)\n  fullName: System.Numerics.Vector2.DistanceSquared(Vector2,Vector2)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Returns the Euclidean distance squared between two specified points.\n  syntax:\n    content: public static float DistanceSquared (System.Numerics.Vector2 value1, System.Numerics.Vector2 value2);\n    parameters:\n    - id: value1\n      type: System.Numerics.Vector2\n      description: The first point.\n    - id: value2\n      type: System.Numerics.Vector2\n      description: The second point.\n    return:\n      type: System.Single\n      description: The distance squared.\n  overload: System.Numerics.Vector2.DistanceSquared*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector2.Divide(System.Numerics.Vector2,System.Numerics.Vector2)\n  id: Divide(System.Numerics.Vector2,System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  name: Divide(Vector2,Vector2)\n  nameWithType: Vector2.Divide(Vector2,Vector2)\n  fullName: System.Numerics.Vector2.Divide(Vector2,Vector2)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Divides the first vector by the second.\n  syntax:\n    content: public static System.Numerics.Vector2 Divide (System.Numerics.Vector2 left, System.Numerics.Vector2 right);\n    parameters:\n    - id: left\n      type: System.Numerics.Vector2\n      description: The first vector.\n    - id: right\n      type: System.Numerics.Vector2\n      description: The second vector.\n    return:\n      type: System.Numerics.Vector2\n      description: The vector resulting from the division.\n  overload: System.Numerics.Vector2.Divide*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector2.Divide(System.Numerics.Vector2,System.Single)\n  id: Divide(System.Numerics.Vector2,System.Single)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  name: Divide(Vector2,Single)\n  nameWithType: Vector2.Divide(Vector2,Single)\n  fullName: System.Numerics.Vector2.Divide(Vector2,Single)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Divides the specified vector by a specified scalar value.\n  syntax:\n    content: public static System.Numerics.Vector2 Divide (System.Numerics.Vector2 left, float divisor);\n    parameters:\n    - id: left\n      type: System.Numerics.Vector2\n      description: The vector.\n    - id: divisor\n      type: System.Single\n      description: The scalar value.\n    return:\n      type: System.Numerics.Vector2\n      description: The vector that results from the division.\n  overload: System.Numerics.Vector2.Divide*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector2.Dot(System.Numerics.Vector2,System.Numerics.Vector2)\n  id: Dot(System.Numerics.Vector2,System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  name: Dot(Vector2,Vector2)\n  nameWithType: Vector2.Dot(Vector2,Vector2)\n  fullName: System.Numerics.Vector2.Dot(Vector2,Vector2)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Returns the dot product of two vectors.\n  syntax:\n    content: public static float Dot (System.Numerics.Vector2 value1, System.Numerics.Vector2 value2);\n    parameters:\n    - id: value1\n      type: System.Numerics.Vector2\n      description: The first vector.\n    - id: value2\n      type: System.Numerics.Vector2\n      description: The second vector.\n    return:\n      type: System.Single\n      description: The dot product.\n  overload: System.Numerics.Vector2.Dot*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector2.Equals(System.Numerics.Vector2)\n  id: Equals(System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  name: Equals(Vector2)\n  nameWithType: Vector2.Equals(Vector2)\n  fullName: System.Numerics.Vector2.Equals(Vector2)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Returns a value that indicates whether this instance and another vector are equal.\n  remarks: Two vectors are equal if their <xref:System.Numerics.Vector2> and <xref:System.Numerics.Vector2> elements are equal.\n  syntax:\n    content: public bool Equals (System.Numerics.Vector2 other);\n    parameters:\n    - id: other\n      type: System.Numerics.Vector2\n      description: The other vector.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the two vectors are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Numerics.Vector2.Equals*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector2.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: Vector2.Equals(Object)\n  fullName: System.Numerics.Vector2.Equals(Object)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Returns a value that indicates whether this instance and a specified object are equal.\n  remarks: The current instance and `obj` are equal if `obj` is a <xref:System.Numerics.Vector2> object and their <xref:System.Numerics.Vector2.X> and <xref:System.Numerics.Vector2.Y> elements are equal.\n  syntax:\n    content: public override bool Equals (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The object to compare with the current instance.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current instance and <code>obj</code> are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref><xref uid=\"langword_csharp_\" name=\"\" href=\"\"></xref>. If <code>obj</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>, the method returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Numerics.Vector2.Equals*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector2.GetHashCode\n  id: GetHashCode\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: Vector2.GetHashCode()\n  fullName: System.Numerics.Vector2.GetHashCode()\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Returns the hash code for this instance.\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: The hash code.\n  overload: System.Numerics.Vector2.GetHashCode*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector2.Length\n  id: Length\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  name: Length()\n  nameWithType: Vector2.Length()\n  fullName: System.Numerics.Vector2.Length()\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Returns the length of the vector.\n  syntax:\n    content: public float Length ();\n    parameters: []\n    return:\n      type: System.Single\n      description: The vector's length.\n  overload: System.Numerics.Vector2.Length*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector2.LengthSquared\n  id: LengthSquared\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  name: LengthSquared()\n  nameWithType: Vector2.LengthSquared()\n  fullName: System.Numerics.Vector2.LengthSquared()\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Returns the length of the vector squared.\n  remarks: This operation offers better performance than a call to the <xref:System.Numerics.Vector2.Length%2A> method.\n  syntax:\n    content: public float LengthSquared ();\n    parameters: []\n    return:\n      type: System.Single\n      description: The vector's length squared.\n  overload: System.Numerics.Vector2.LengthSquared*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector2.Lerp(System.Numerics.Vector2,System.Numerics.Vector2,System.Single)\n  id: Lerp(System.Numerics.Vector2,System.Numerics.Vector2,System.Single)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  name: Lerp(Vector2,Vector2,Single)\n  nameWithType: Vector2.Lerp(Vector2,Vector2,Single)\n  fullName: System.Numerics.Vector2.Lerp(Vector2,Vector2,Single)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Performs a linear interpolation between two vectors based on the given weighting.\n  syntax:\n    content: public static System.Numerics.Vector2 Lerp (System.Numerics.Vector2 value1, System.Numerics.Vector2 value2, float amount);\n    parameters:\n    - id: value1\n      type: System.Numerics.Vector2\n      description: The first vector.\n    - id: value2\n      type: System.Numerics.Vector2\n      description: The second vector.\n    - id: amount\n      type: System.Single\n      description: A value between 0 and 1 that indicates the weight of `value2`.\n    return:\n      type: System.Numerics.Vector2\n      description: The interpolated vector.\n  overload: System.Numerics.Vector2.Lerp*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector2.Max(System.Numerics.Vector2,System.Numerics.Vector2)\n  id: Max(System.Numerics.Vector2,System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  name: Max(Vector2,Vector2)\n  nameWithType: Vector2.Max(Vector2,Vector2)\n  fullName: System.Numerics.Vector2.Max(Vector2,Vector2)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Returns a vector whose elements are the maximum of each of the pairs of elements in two specified vectors.\n  syntax:\n    content: public static System.Numerics.Vector2 Max (System.Numerics.Vector2 value1, System.Numerics.Vector2 value2);\n    parameters:\n    - id: value1\n      type: System.Numerics.Vector2\n      description: The first vector.\n    - id: value2\n      type: System.Numerics.Vector2\n      description: The second vector.\n    return:\n      type: System.Numerics.Vector2\n      description: The maximized vector.\n  overload: System.Numerics.Vector2.Max*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector2.Min(System.Numerics.Vector2,System.Numerics.Vector2)\n  id: Min(System.Numerics.Vector2,System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  name: Min(Vector2,Vector2)\n  nameWithType: Vector2.Min(Vector2,Vector2)\n  fullName: System.Numerics.Vector2.Min(Vector2,Vector2)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Returns a vector whose elements are the minimum of each of the pairs of elements in two specified vectors.\n  syntax:\n    content: public static System.Numerics.Vector2 Min (System.Numerics.Vector2 value1, System.Numerics.Vector2 value2);\n    parameters:\n    - id: value1\n      type: System.Numerics.Vector2\n      description: The first vector.\n    - id: value2\n      type: System.Numerics.Vector2\n      description: The second vector.\n    return:\n      type: System.Numerics.Vector2\n      description: The minimized vector.\n  overload: System.Numerics.Vector2.Min*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector2.Multiply(System.Numerics.Vector2,System.Numerics.Vector2)\n  id: Multiply(System.Numerics.Vector2,System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  name: Multiply(Vector2,Vector2)\n  nameWithType: Vector2.Multiply(Vector2,Vector2)\n  fullName: System.Numerics.Vector2.Multiply(Vector2,Vector2)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Multiplies two vectors together.\n  syntax:\n    content: public static System.Numerics.Vector2 Multiply (System.Numerics.Vector2 left, System.Numerics.Vector2 right);\n    parameters:\n    - id: left\n      type: System.Numerics.Vector2\n      description: The first vector.\n    - id: right\n      type: System.Numerics.Vector2\n      description: The second vector.\n    return:\n      type: System.Numerics.Vector2\n      description: The product vector.\n  overload: System.Numerics.Vector2.Multiply*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector2.Multiply(System.Numerics.Vector2,System.Single)\n  id: Multiply(System.Numerics.Vector2,System.Single)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  name: Multiply(Vector2,Single)\n  nameWithType: Vector2.Multiply(Vector2,Single)\n  fullName: System.Numerics.Vector2.Multiply(Vector2,Single)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Multiplies a vector by a specified scalar.\n  syntax:\n    content: public static System.Numerics.Vector2 Multiply (System.Numerics.Vector2 left, float right);\n    parameters:\n    - id: left\n      type: System.Numerics.Vector2\n      description: The vector to multiply.\n    - id: right\n      type: System.Single\n      description: The scalar value.\n    return:\n      type: System.Numerics.Vector2\n      description: The scaled vector.\n  overload: System.Numerics.Vector2.Multiply*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector2.Multiply(System.Single,System.Numerics.Vector2)\n  id: Multiply(System.Single,System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  name: Multiply(Single,Vector2)\n  nameWithType: Vector2.Multiply(Single,Vector2)\n  fullName: System.Numerics.Vector2.Multiply(Single,Vector2)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Multiplies a scalar value by a specified vector.\n  syntax:\n    content: public static System.Numerics.Vector2 Multiply (float left, System.Numerics.Vector2 right);\n    parameters:\n    - id: left\n      type: System.Single\n      description: The scaled value.\n    - id: right\n      type: System.Numerics.Vector2\n      description: The vector.\n    return:\n      type: System.Numerics.Vector2\n      description: The scaled vector.\n  overload: System.Numerics.Vector2.Multiply*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector2.Negate(System.Numerics.Vector2)\n  id: Negate(System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  name: Negate(Vector2)\n  nameWithType: Vector2.Negate(Vector2)\n  fullName: System.Numerics.Vector2.Negate(Vector2)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Negates a specified vector.\n  syntax:\n    content: public static System.Numerics.Vector2 Negate (System.Numerics.Vector2 value);\n    parameters:\n    - id: value\n      type: System.Numerics.Vector2\n      description: The vector to negate.\n    return:\n      type: System.Numerics.Vector2\n      description: The negated vector.\n  overload: System.Numerics.Vector2.Negate*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector2.Normalize(System.Numerics.Vector2)\n  id: Normalize(System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  name: Normalize(Vector2)\n  nameWithType: Vector2.Normalize(Vector2)\n  fullName: System.Numerics.Vector2.Normalize(Vector2)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Returns a vector with the same direction as the specified vector, but with a length of one.\n  syntax:\n    content: public static System.Numerics.Vector2 Normalize (System.Numerics.Vector2 value);\n    parameters:\n    - id: value\n      type: System.Numerics.Vector2\n      description: The vector to normalize.\n    return:\n      type: System.Numerics.Vector2\n      description: The normalized vector.\n  overload: System.Numerics.Vector2.Normalize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector2.One\n  id: One\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  name: One\n  nameWithType: Vector2.One\n  fullName: System.Numerics.Vector2.One\n  type: Property\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Gets a vector whose 2 elements are equal to one.\n  syntax:\n    content: public static System.Numerics.Vector2 One { get; }\n    return:\n      type: System.Numerics.Vector2\n      description: A vector whose two elements are equal to one (that is, it returns the vector `(1,1)`.\n  overload: System.Numerics.Vector2.One*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector2.op_Addition(System.Numerics.Vector2,System.Numerics.Vector2)\n  id: op_Addition(System.Numerics.Vector2,System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  name: op_Addition(Vector2,Vector2)\n  nameWithType: Vector2.op_Addition(Vector2,Vector2)\n  fullName: System.Numerics.Vector2.op_Addition(Vector2,Vector2)\n  type: Operator\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Adds two vectors together.\n  remarks: The Addition method defines the addition operation for <xref:System.Numerics.Vector2> objects.\n  syntax:\n    content: public static System.Numerics.Vector2 op_Addition (System.Numerics.Vector2 left, System.Numerics.Vector2 right);\n    parameters:\n    - id: left\n      type: System.Numerics.Vector2\n      description: The first vector to add.\n    - id: right\n      type: System.Numerics.Vector2\n      description: The second vector to add.\n    return:\n      type: System.Numerics.Vector2\n      description: The summed vector.\n  overload: System.Numerics.Vector2.op_Addition*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector2.op_Division(System.Numerics.Vector2,System.Numerics.Vector2)\n  id: op_Division(System.Numerics.Vector2,System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  name: op_Division(Vector2,Vector2)\n  nameWithType: Vector2.op_Division(Vector2,Vector2)\n  fullName: System.Numerics.Vector2.op_Division(Vector2,Vector2)\n  type: Operator\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Divides the first vector by the second.\n  remarks: The Division method defines the division operation for <xref:System.Numerics.Vector2> objects.\n  syntax:\n    content: public static System.Numerics.Vector2 op_Division (System.Numerics.Vector2 left, System.Numerics.Vector2 right);\n    parameters:\n    - id: left\n      type: System.Numerics.Vector2\n      description: The first vector.\n    - id: right\n      type: System.Numerics.Vector2\n      description: The second vector.\n    return:\n      type: System.Numerics.Vector2\n      description: The vector that results from dividing <code>left</code> by <code>right</code>.\n  overload: System.Numerics.Vector2.op_Division*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector2.op_Division(System.Numerics.Vector2,System.Single)\n  id: op_Division(System.Numerics.Vector2,System.Single)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  name: op_Division(Vector2,Single)\n  nameWithType: Vector2.op_Division(Vector2,Single)\n  fullName: System.Numerics.Vector2.op_Division(Vector2,Single)\n  type: Operator\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Divides the specified vector by a specified scalar value.\n  remarks: The Division method defines the division operation for <xref:System.Numerics.Vector2> objects.\n  syntax:\n    content: public static System.Numerics.Vector2 op_Division (System.Numerics.Vector2 value1, float value2);\n    parameters:\n    - id: value1\n      type: System.Numerics.Vector2\n      description: The vector.\n    - id: value2\n      type: System.Single\n      description: The scalar value.\n    return:\n      type: System.Numerics.Vector2\n      description: The result of the division.\n  overload: System.Numerics.Vector2.op_Division*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector2.op_Equality(System.Numerics.Vector2,System.Numerics.Vector2)\n  id: op_Equality(System.Numerics.Vector2,System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  name: op_Equality(Vector2,Vector2)\n  nameWithType: Vector2.op_Equality(Vector2,Vector2)\n  fullName: System.Numerics.Vector2.op_Equality(Vector2,Vector2)\n  type: Operator\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Returns a value that indicates whether each pair of elements in two specified vectors is equal.\n  remarks: Two <xref:System.Numerics.Vector2> objects are equal if each value in `left` is equal to the corresponding value in `right`.\n  syntax:\n    content: public static bool op_Equality (System.Numerics.Vector2 left, System.Numerics.Vector2 right);\n    parameters:\n    - id: left\n      type: System.Numerics.Vector2\n      description: The first vector to compare.\n    - id: right\n      type: System.Numerics.Vector2\n      description: The second vector to compare.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>left</code> and <code>right</code> are equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Numerics.Vector2.op_Equality*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector2.op_Inequality(System.Numerics.Vector2,System.Numerics.Vector2)\n  id: op_Inequality(System.Numerics.Vector2,System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  name: op_Inequality(Vector2,Vector2)\n  nameWithType: Vector2.op_Inequality(Vector2,Vector2)\n  fullName: System.Numerics.Vector2.op_Inequality(Vector2,Vector2)\n  type: Operator\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Returns a value that indicates whether two specified vectors are not equal.\n  syntax:\n    content: public static bool op_Inequality (System.Numerics.Vector2 left, System.Numerics.Vector2 right);\n    parameters:\n    - id: left\n      type: System.Numerics.Vector2\n      description: The first vector to compare.\n    - id: right\n      type: System.Numerics.Vector2\n      description: The second vector to compare.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>left</code> and <code>right</code> are not equal; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Numerics.Vector2.op_Inequality*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector2.op_Multiply(System.Numerics.Vector2,System.Numerics.Vector2)\n  id: op_Multiply(System.Numerics.Vector2,System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  name: op_Multiply(Vector2,Vector2)\n  nameWithType: Vector2.op_Multiply(Vector2,Vector2)\n  fullName: System.Numerics.Vector2.op_Multiply(Vector2,Vector2)\n  type: Operator\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Multiplies two vectors together.\n  remarks: The Multiply method defines the multiplication operation for <xref:System.Numerics.Vector2> objects.\n  syntax:\n    content: public static System.Numerics.Vector2 op_Multiply (System.Numerics.Vector2 left, System.Numerics.Vector2 right);\n    parameters:\n    - id: left\n      type: System.Numerics.Vector2\n      description: The first vector.\n    - id: right\n      type: System.Numerics.Vector2\n      description: The second vector.\n    return:\n      type: System.Numerics.Vector2\n      description: The product vector.\n  overload: System.Numerics.Vector2.op_Multiply*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector2.op_Multiply(System.Numerics.Vector2,System.Single)\n  id: op_Multiply(System.Numerics.Vector2,System.Single)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  name: op_Multiply(Vector2,Single)\n  nameWithType: Vector2.op_Multiply(Vector2,Single)\n  fullName: System.Numerics.Vector2.op_Multiply(Vector2,Single)\n  type: Operator\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Multiples the specified vector by the specified scalar value.\n  remarks: The <xref:System.Numerics.Vector2.op_Multiply%2A> method defines the multiplication operation for <xref:System.Numerics.Vector2> objects.\n  syntax:\n    content: public static System.Numerics.Vector2 op_Multiply (System.Numerics.Vector2 left, float right);\n    parameters:\n    - id: left\n      type: System.Numerics.Vector2\n      description: The vector.\n    - id: right\n      type: System.Single\n      description: The scalar value.\n    return:\n      type: System.Numerics.Vector2\n      description: The scaled vector.\n  overload: System.Numerics.Vector2.op_Multiply*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector2.op_Multiply(System.Single,System.Numerics.Vector2)\n  id: op_Multiply(System.Single,System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  name: op_Multiply(Single,Vector2)\n  nameWithType: Vector2.op_Multiply(Single,Vector2)\n  fullName: System.Numerics.Vector2.op_Multiply(Single,Vector2)\n  type: Operator\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Multiples the scalar value by the specified vector.\n  remarks: The <xref:System.Numerics.Vector2.op_Multiply%2A> method defines the multiplication operation for <xref:System.Numerics.Vector2> objects.\n  syntax:\n    content: public static System.Numerics.Vector2 op_Multiply (float left, System.Numerics.Vector2 right);\n    parameters:\n    - id: left\n      type: System.Single\n      description: The vector.\n    - id: right\n      type: System.Numerics.Vector2\n      description: The scalar value.\n    return:\n      type: System.Numerics.Vector2\n      description: The scaled vector.\n  overload: System.Numerics.Vector2.op_Multiply*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector2.op_Subtraction(System.Numerics.Vector2,System.Numerics.Vector2)\n  id: op_Subtraction(System.Numerics.Vector2,System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  name: op_Subtraction(Vector2,Vector2)\n  nameWithType: Vector2.op_Subtraction(Vector2,Vector2)\n  fullName: System.Numerics.Vector2.op_Subtraction(Vector2,Vector2)\n  type: Operator\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Subtracts the second vector from the first.\n  remarks: The Subtraction method defines the subtraction operation for <xref:System.Numerics.Vector2> objects.\n  syntax:\n    content: public static System.Numerics.Vector2 op_Subtraction (System.Numerics.Vector2 left, System.Numerics.Vector2 right);\n    parameters:\n    - id: left\n      type: System.Numerics.Vector2\n      description: The first vector.\n    - id: right\n      type: System.Numerics.Vector2\n      description: The second vector.\n    return:\n      type: System.Numerics.Vector2\n      description: The vector that results from subtracting <code>right</code> from <code>left</code>.\n  overload: System.Numerics.Vector2.op_Subtraction*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector2.op_UnaryNegation(System.Numerics.Vector2)\n  id: op_UnaryNegation(System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  name: op_UnaryNegation(Vector2)\n  nameWithType: Vector2.op_UnaryNegation(Vector2)\n  fullName: System.Numerics.Vector2.op_UnaryNegation(Vector2)\n  type: Operator\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Negates the specified vector.\n  remarks: The UnaryNegation method defines the unary negation operation for <xref:System.Numerics.Vector2> objects.\n  syntax:\n    content: public static System.Numerics.Vector2 op_UnaryNegation (System.Numerics.Vector2 value);\n    parameters:\n    - id: value\n      type: System.Numerics.Vector2\n      description: The vector to negate.\n    return:\n      type: System.Numerics.Vector2\n      description: The negated vector.\n  overload: System.Numerics.Vector2.op_UnaryNegation*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector2.Reflect(System.Numerics.Vector2,System.Numerics.Vector2)\n  id: Reflect(System.Numerics.Vector2,System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  name: Reflect(Vector2,Vector2)\n  nameWithType: Vector2.Reflect(Vector2,Vector2)\n  fullName: System.Numerics.Vector2.Reflect(Vector2,Vector2)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Returns the reflection of a vector off a surface that has the specified normal.\n  syntax:\n    content: public static System.Numerics.Vector2 Reflect (System.Numerics.Vector2 vector, System.Numerics.Vector2 normal);\n    parameters:\n    - id: vector\n      type: System.Numerics.Vector2\n      description: The source vector.\n    - id: normal\n      type: System.Numerics.Vector2\n      description: The normal of the surface being reflected off.\n    return:\n      type: System.Numerics.Vector2\n      description: The reflected vector.\n  overload: System.Numerics.Vector2.Reflect*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector2.SquareRoot(System.Numerics.Vector2)\n  id: SquareRoot(System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  name: SquareRoot(Vector2)\n  nameWithType: Vector2.SquareRoot(Vector2)\n  fullName: System.Numerics.Vector2.SquareRoot(Vector2)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Returns a vector whose elements are the square root of each of a specified vector's elements.\n  syntax:\n    content: public static System.Numerics.Vector2 SquareRoot (System.Numerics.Vector2 value);\n    parameters:\n    - id: value\n      type: System.Numerics.Vector2\n      description: A vector.\n    return:\n      type: System.Numerics.Vector2\n      description: The square root vector.\n  overload: System.Numerics.Vector2.SquareRoot*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector2.Subtract(System.Numerics.Vector2,System.Numerics.Vector2)\n  id: Subtract(System.Numerics.Vector2,System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  name: Subtract(Vector2,Vector2)\n  nameWithType: Vector2.Subtract(Vector2,Vector2)\n  fullName: System.Numerics.Vector2.Subtract(Vector2,Vector2)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Subtracts the second vector from the first.\n  syntax:\n    content: public static System.Numerics.Vector2 Subtract (System.Numerics.Vector2 left, System.Numerics.Vector2 right);\n    parameters:\n    - id: left\n      type: System.Numerics.Vector2\n      description: The first vector.\n    - id: right\n      type: System.Numerics.Vector2\n      description: The second vector.\n    return:\n      type: System.Numerics.Vector2\n      description: The difference vector.\n  overload: System.Numerics.Vector2.Subtract*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector2.ToString\n  id: ToString\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  name: ToString()\n  nameWithType: Vector2.ToString()\n  fullName: System.Numerics.Vector2.ToString()\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Returns the string representation of the current instance using default formatting.\n  remarks: This method returns a string in which each element of the vector is formatted using the \"G\" (general) format string and the formatting conventions of the current thread culture. The \"\\<\" and \">\" characters are used to begin and end the string, and the current culture's <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A?displayProperty=fullName> property followed by a space is used to separate each element.\n  syntax:\n    content: public override string ToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: The string representation of the current instance.\n  overload: System.Numerics.Vector2.ToString*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector2.ToString(System.String)\n  id: ToString(System.String)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  name: ToString(String)\n  nameWithType: Vector2.ToString(String)\n  fullName: System.Numerics.Vector2.ToString(String)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Returns the string representation of the current instance using the specified format string to format individual elements.\n  remarks: This method returns a string in which each element of the vector is formatted using `format` and the current culture's formatting conventions. The \"\\<\" and \">\" characters are used to begin and end the string, and the current culture's <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A?displayProperty=fullName> property followed by a space is used to separate each element.\n  syntax:\n    content: public string ToString (string format);\n    parameters:\n    - id: format\n      type: System.String\n      description: A [standard](~/add/includes/ajax-current-ext-md.md) or [custom numeric format string](~/add/includes/ajax-current-ext-md.md) that defines the format of individual elements.\n    return:\n      type: System.String\n      description: The string representation of the current instance.\n  overload: System.Numerics.Vector2.ToString*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector2.ToString(System.String,System.IFormatProvider)\n  id: ToString(System.String,System.IFormatProvider)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  name: ToString(String,IFormatProvider)\n  nameWithType: Vector2.ToString(String,IFormatProvider)\n  fullName: System.Numerics.Vector2.ToString(String,IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Returns the string representation of the current instance using the specified format string to format individual elements and the specified format provider to define culture-specific formatting.\n  remarks: This method returns a string in which each element of the vector is formatted using `format` and `formatProvider`. The \"\\<\" and \">\" characters are used to begin and end the string, and the format provider's <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A?displayProperty=fullName> property followed by a space is used to separate each element.\n  syntax:\n    content: public string ToString (string format, IFormatProvider formatProvider);\n    parameters:\n    - id: format\n      type: System.String\n      description: A [standard](~/add/includes/ajax-current-ext-md.md) or [custom numeric format string](~/add/includes/ajax-current-ext-md.md) that defines the format of individual elements.\n    - id: formatProvider\n      type: System.IFormatProvider\n      description: A format provider that supplies culture-specific formatting information.\n    return:\n      type: System.String\n      description: The string representation of the current instance.\n  overload: System.Numerics.Vector2.ToString*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector2.Transform(System.Numerics.Vector2,System.Numerics.Matrix3x2)\n  id: Transform(System.Numerics.Vector2,System.Numerics.Matrix3x2)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  name: Transform(Vector2,Matrix3x2)\n  nameWithType: Vector2.Transform(Vector2,Matrix3x2)\n  fullName: System.Numerics.Vector2.Transform(Vector2,Matrix3x2)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Transforms a vector by a specified 3x2 matrix.\n  syntax:\n    content: public static System.Numerics.Vector2 Transform (System.Numerics.Vector2 position, System.Numerics.Matrix3x2 matrix);\n    parameters:\n    - id: position\n      type: System.Numerics.Vector2\n      description: The vector to transform.\n    - id: matrix\n      type: System.Numerics.Matrix3x2\n      description: The transformation matrix.\n    return:\n      type: System.Numerics.Vector2\n      description: The transformed vector.\n  overload: System.Numerics.Vector2.Transform*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector2.Transform(System.Numerics.Vector2,System.Numerics.Matrix4x4)\n  id: Transform(System.Numerics.Vector2,System.Numerics.Matrix4x4)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  name: Transform(Vector2,Matrix4x4)\n  nameWithType: Vector2.Transform(Vector2,Matrix4x4)\n  fullName: System.Numerics.Vector2.Transform(Vector2,Matrix4x4)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Transforms a vector by a specified 4x4 matrix.\n  syntax:\n    content: public static System.Numerics.Vector2 Transform (System.Numerics.Vector2 position, System.Numerics.Matrix4x4 matrix);\n    parameters:\n    - id: position\n      type: System.Numerics.Vector2\n      description: The vector to transform.\n    - id: matrix\n      type: System.Numerics.Matrix4x4\n      description: The transformation matrix.\n    return:\n      type: System.Numerics.Vector2\n      description: The transformed vector.\n  overload: System.Numerics.Vector2.Transform*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector2.Transform(System.Numerics.Vector2,System.Numerics.Quaternion)\n  id: Transform(System.Numerics.Vector2,System.Numerics.Quaternion)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  name: Transform(Vector2,Quaternion)\n  nameWithType: Vector2.Transform(Vector2,Quaternion)\n  fullName: System.Numerics.Vector2.Transform(Vector2,Quaternion)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Transforms a vector by the specified Quaternion rotation value.\n  syntax:\n    content: public static System.Numerics.Vector2 Transform (System.Numerics.Vector2 value, System.Numerics.Quaternion rotation);\n    parameters:\n    - id: value\n      type: System.Numerics.Vector2\n      description: The vector to rotate.\n    - id: rotation\n      type: System.Numerics.Quaternion\n      description: The rotation to apply.\n    return:\n      type: System.Numerics.Vector2\n      description: The transformed vector.\n  overload: System.Numerics.Vector2.Transform*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector2.TransformNormal(System.Numerics.Vector2,System.Numerics.Matrix3x2)\n  id: TransformNormal(System.Numerics.Vector2,System.Numerics.Matrix3x2)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  name: TransformNormal(Vector2,Matrix3x2)\n  nameWithType: Vector2.TransformNormal(Vector2,Matrix3x2)\n  fullName: System.Numerics.Vector2.TransformNormal(Vector2,Matrix3x2)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Transforms a vector normal by the given 3x2 matrix.\n  syntax:\n    content: public static System.Numerics.Vector2 TransformNormal (System.Numerics.Vector2 normal, System.Numerics.Matrix3x2 matrix);\n    parameters:\n    - id: normal\n      type: System.Numerics.Vector2\n      description: The source vector.\n    - id: matrix\n      type: System.Numerics.Matrix3x2\n      description: The matrix.\n    return:\n      type: System.Numerics.Vector2\n      description: The transformed vector.\n  overload: System.Numerics.Vector2.TransformNormal*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector2.TransformNormal(System.Numerics.Vector2,System.Numerics.Matrix4x4)\n  id: TransformNormal(System.Numerics.Vector2,System.Numerics.Matrix4x4)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  name: TransformNormal(Vector2,Matrix4x4)\n  nameWithType: Vector2.TransformNormal(Vector2,Matrix4x4)\n  fullName: System.Numerics.Vector2.TransformNormal(Vector2,Matrix4x4)\n  type: Method\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Transforms a vector normal by the given 4x4 matrix.\n  syntax:\n    content: public static System.Numerics.Vector2 TransformNormal (System.Numerics.Vector2 normal, System.Numerics.Matrix4x4 matrix);\n    parameters:\n    - id: normal\n      type: System.Numerics.Vector2\n      description: The source vector.\n    - id: matrix\n      type: System.Numerics.Matrix4x4\n      description: The matrix.\n    return:\n      type: System.Numerics.Vector2\n      description: The transformed vector.\n  overload: System.Numerics.Vector2.TransformNormal*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector2.UnitX\n  id: UnitX\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  name: UnitX\n  nameWithType: Vector2.UnitX\n  fullName: System.Numerics.Vector2.UnitX\n  type: Property\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Gets the vector (1,0).\n  syntax:\n    content: public static System.Numerics.Vector2 UnitX { get; }\n    return:\n      type: System.Numerics.Vector2\n      description: The vector `(1,0)`.\n  overload: System.Numerics.Vector2.UnitX*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector2.UnitY\n  id: UnitY\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  name: UnitY\n  nameWithType: Vector2.UnitY\n  fullName: System.Numerics.Vector2.UnitY\n  type: Property\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Gets the vector (0,1).\n  syntax:\n    content: public static System.Numerics.Vector2 UnitY { get; }\n    return:\n      type: System.Numerics.Vector2\n      description: The vector `(0,1)`.\n  overload: System.Numerics.Vector2.UnitY*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector2.X\n  id: X\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  name: X\n  nameWithType: Vector2.X\n  fullName: System.Numerics.Vector2.X\n  type: Field\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: The X component of the vector.\n  syntax:\n    content: public float X;\n    return:\n      type: System.Single\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector2.Y\n  id: Y\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  name: Y\n  nameWithType: Vector2.Y\n  fullName: System.Numerics.Vector2.Y\n  type: Field\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: The Y component of the vector.\n  syntax:\n    content: public float Y;\n    return:\n      type: System.Single\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Numerics.Vector2.Zero\n  id: Zero\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  name: Zero\n  nameWithType: Vector2.Zero\n  fullName: System.Numerics.Vector2.Zero\n  type: Property\n  assemblies:\n  - System.Numerics\n  namespace: System.Numerics\n  summary: Returns a vector whose 2 elements are equal to zero.\n  syntax:\n    content: public static System.Numerics.Vector2 Zero { get; }\n    return:\n      type: System.Numerics.Vector2\n      description: A vector whose two elements are equal to zero (that is, it returns the vector `(0,0)`.\n  overload: System.Numerics.Vector2.Zero*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.ValueType\n  isExternal: false\n  name: System.ValueType\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.RankException\n  isExternal: true\n  name: System.RankException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.Numerics.Vector2.#ctor(System.Single)\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: Vector2(Single)\n  nameWithType: Vector2.Vector2(Single)\n  fullName: System.Numerics.Vector2.Vector2(Single)\n- uid: System.Single\n  parent: System\n  isExternal: true\n  name: Single\n  nameWithType: Single\n  fullName: System.Single\n- uid: System.Numerics.Vector2.#ctor(System.Single,System.Single)\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: Vector2(Single,Single)\n  nameWithType: Vector2.Vector2(Single,Single)\n  fullName: System.Numerics.Vector2.Vector2(Single,Single)\n- uid: System.Numerics.Vector2.Abs(System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: Abs(Vector2)\n  nameWithType: Vector2.Abs(Vector2)\n  fullName: System.Numerics.Vector2.Abs(Vector2)\n- uid: System.Numerics.Vector2\n  parent: System.Numerics\n  isExternal: false\n  name: Vector2\n  nameWithType: Vector2\n  fullName: System.Numerics.Vector2\n- uid: System.Numerics.Vector2.Add(System.Numerics.Vector2,System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: Add(Vector2,Vector2)\n  nameWithType: Vector2.Add(Vector2,Vector2)\n  fullName: System.Numerics.Vector2.Add(Vector2,Vector2)\n- uid: System.Numerics.Vector2.Clamp(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: Clamp(Vector2,Vector2,Vector2)\n  nameWithType: Vector2.Clamp(Vector2,Vector2,Vector2)\n  fullName: System.Numerics.Vector2.Clamp(Vector2,Vector2,Vector2)\n- uid: System.Numerics.Vector2.CopyTo(System.Single[])\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: CopyTo(Single[])\n  nameWithType: Vector2.CopyTo(Single[])\n  fullName: System.Numerics.Vector2.CopyTo(Single[])\n- uid: System.Single[]\n  parent: System\n  isExternal: true\n  name: Single\n  nameWithType: Single\n  fullName: System.Single[]\n  spec.csharp:\n  - uid: System.Single\n    name: Single\n    nameWithType: Single\n    fullName: Single[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Numerics.Vector2.CopyTo(System.Single[],System.Int32)\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: CopyTo(Single[],Int32)\n  nameWithType: Vector2.CopyTo(Single[],Int32)\n  fullName: System.Numerics.Vector2.CopyTo(Single[],Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Numerics.Vector2.Distance(System.Numerics.Vector2,System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: Distance(Vector2,Vector2)\n  nameWithType: Vector2.Distance(Vector2,Vector2)\n  fullName: System.Numerics.Vector2.Distance(Vector2,Vector2)\n- uid: System.Numerics.Vector2.DistanceSquared(System.Numerics.Vector2,System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: DistanceSquared(Vector2,Vector2)\n  nameWithType: Vector2.DistanceSquared(Vector2,Vector2)\n  fullName: System.Numerics.Vector2.DistanceSquared(Vector2,Vector2)\n- uid: System.Numerics.Vector2.Divide(System.Numerics.Vector2,System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: Divide(Vector2,Vector2)\n  nameWithType: Vector2.Divide(Vector2,Vector2)\n  fullName: System.Numerics.Vector2.Divide(Vector2,Vector2)\n- uid: System.Numerics.Vector2.Divide(System.Numerics.Vector2,System.Single)\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: Divide(Vector2,Single)\n  nameWithType: Vector2.Divide(Vector2,Single)\n  fullName: System.Numerics.Vector2.Divide(Vector2,Single)\n- uid: System.Numerics.Vector2.Dot(System.Numerics.Vector2,System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: Dot(Vector2,Vector2)\n  nameWithType: Vector2.Dot(Vector2,Vector2)\n  fullName: System.Numerics.Vector2.Dot(Vector2,Vector2)\n- uid: System.Numerics.Vector2.Equals(System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: Equals(Vector2)\n  nameWithType: Vector2.Equals(Vector2)\n  fullName: System.Numerics.Vector2.Equals(Vector2)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Numerics.Vector2.Equals(System.Object)\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Vector2.Equals(Object)\n  fullName: System.Numerics.Vector2.Equals(Object)\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Numerics.Vector2.GetHashCode\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Vector2.GetHashCode()\n  fullName: System.Numerics.Vector2.GetHashCode()\n- uid: System.Numerics.Vector2.Length\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: Length()\n  nameWithType: Vector2.Length()\n  fullName: System.Numerics.Vector2.Length()\n- uid: System.Numerics.Vector2.LengthSquared\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: LengthSquared()\n  nameWithType: Vector2.LengthSquared()\n  fullName: System.Numerics.Vector2.LengthSquared()\n- uid: System.Numerics.Vector2.Lerp(System.Numerics.Vector2,System.Numerics.Vector2,System.Single)\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: Lerp(Vector2,Vector2,Single)\n  nameWithType: Vector2.Lerp(Vector2,Vector2,Single)\n  fullName: System.Numerics.Vector2.Lerp(Vector2,Vector2,Single)\n- uid: System.Numerics.Vector2.Max(System.Numerics.Vector2,System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: Max(Vector2,Vector2)\n  nameWithType: Vector2.Max(Vector2,Vector2)\n  fullName: System.Numerics.Vector2.Max(Vector2,Vector2)\n- uid: System.Numerics.Vector2.Min(System.Numerics.Vector2,System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: Min(Vector2,Vector2)\n  nameWithType: Vector2.Min(Vector2,Vector2)\n  fullName: System.Numerics.Vector2.Min(Vector2,Vector2)\n- uid: System.Numerics.Vector2.Multiply(System.Numerics.Vector2,System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: Multiply(Vector2,Vector2)\n  nameWithType: Vector2.Multiply(Vector2,Vector2)\n  fullName: System.Numerics.Vector2.Multiply(Vector2,Vector2)\n- uid: System.Numerics.Vector2.Multiply(System.Numerics.Vector2,System.Single)\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: Multiply(Vector2,Single)\n  nameWithType: Vector2.Multiply(Vector2,Single)\n  fullName: System.Numerics.Vector2.Multiply(Vector2,Single)\n- uid: System.Numerics.Vector2.Multiply(System.Single,System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: Multiply(Single,Vector2)\n  nameWithType: Vector2.Multiply(Single,Vector2)\n  fullName: System.Numerics.Vector2.Multiply(Single,Vector2)\n- uid: System.Numerics.Vector2.Negate(System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: Negate(Vector2)\n  nameWithType: Vector2.Negate(Vector2)\n  fullName: System.Numerics.Vector2.Negate(Vector2)\n- uid: System.Numerics.Vector2.Normalize(System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: Normalize(Vector2)\n  nameWithType: Vector2.Normalize(Vector2)\n  fullName: System.Numerics.Vector2.Normalize(Vector2)\n- uid: System.Numerics.Vector2.One\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: One\n  nameWithType: Vector2.One\n  fullName: System.Numerics.Vector2.One\n- uid: System.Numerics.Vector2.op_Addition(System.Numerics.Vector2,System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: op_Addition(Vector2,Vector2)\n  nameWithType: Vector2.op_Addition(Vector2,Vector2)\n  fullName: System.Numerics.Vector2.op_Addition(Vector2,Vector2)\n- uid: System.Numerics.Vector2.op_Division(System.Numerics.Vector2,System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: op_Division(Vector2,Vector2)\n  nameWithType: Vector2.op_Division(Vector2,Vector2)\n  fullName: System.Numerics.Vector2.op_Division(Vector2,Vector2)\n- uid: System.Numerics.Vector2.op_Division(System.Numerics.Vector2,System.Single)\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: op_Division(Vector2,Single)\n  nameWithType: Vector2.op_Division(Vector2,Single)\n  fullName: System.Numerics.Vector2.op_Division(Vector2,Single)\n- uid: System.Numerics.Vector2.op_Equality(System.Numerics.Vector2,System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: op_Equality(Vector2,Vector2)\n  nameWithType: Vector2.op_Equality(Vector2,Vector2)\n  fullName: System.Numerics.Vector2.op_Equality(Vector2,Vector2)\n- uid: System.Numerics.Vector2.op_Inequality(System.Numerics.Vector2,System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: op_Inequality(Vector2,Vector2)\n  nameWithType: Vector2.op_Inequality(Vector2,Vector2)\n  fullName: System.Numerics.Vector2.op_Inequality(Vector2,Vector2)\n- uid: System.Numerics.Vector2.op_Multiply(System.Numerics.Vector2,System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: op_Multiply(Vector2,Vector2)\n  nameWithType: Vector2.op_Multiply(Vector2,Vector2)\n  fullName: System.Numerics.Vector2.op_Multiply(Vector2,Vector2)\n- uid: System.Numerics.Vector2.op_Multiply(System.Numerics.Vector2,System.Single)\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: op_Multiply(Vector2,Single)\n  nameWithType: Vector2.op_Multiply(Vector2,Single)\n  fullName: System.Numerics.Vector2.op_Multiply(Vector2,Single)\n- uid: System.Numerics.Vector2.op_Multiply(System.Single,System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: op_Multiply(Single,Vector2)\n  nameWithType: Vector2.op_Multiply(Single,Vector2)\n  fullName: System.Numerics.Vector2.op_Multiply(Single,Vector2)\n- uid: System.Numerics.Vector2.op_Subtraction(System.Numerics.Vector2,System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: op_Subtraction(Vector2,Vector2)\n  nameWithType: Vector2.op_Subtraction(Vector2,Vector2)\n  fullName: System.Numerics.Vector2.op_Subtraction(Vector2,Vector2)\n- uid: System.Numerics.Vector2.op_UnaryNegation(System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: op_UnaryNegation(Vector2)\n  nameWithType: Vector2.op_UnaryNegation(Vector2)\n  fullName: System.Numerics.Vector2.op_UnaryNegation(Vector2)\n- uid: System.Numerics.Vector2.Reflect(System.Numerics.Vector2,System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: Reflect(Vector2,Vector2)\n  nameWithType: Vector2.Reflect(Vector2,Vector2)\n  fullName: System.Numerics.Vector2.Reflect(Vector2,Vector2)\n- uid: System.Numerics.Vector2.SquareRoot(System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: SquareRoot(Vector2)\n  nameWithType: Vector2.SquareRoot(Vector2)\n  fullName: System.Numerics.Vector2.SquareRoot(Vector2)\n- uid: System.Numerics.Vector2.Subtract(System.Numerics.Vector2,System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: Subtract(Vector2,Vector2)\n  nameWithType: Vector2.Subtract(Vector2,Vector2)\n  fullName: System.Numerics.Vector2.Subtract(Vector2,Vector2)\n- uid: System.Numerics.Vector2.ToString\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: ToString()\n  nameWithType: Vector2.ToString()\n  fullName: System.Numerics.Vector2.ToString()\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Numerics.Vector2.ToString(System.String)\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: ToString(String)\n  nameWithType: Vector2.ToString(String)\n  fullName: System.Numerics.Vector2.ToString(String)\n- uid: System.Numerics.Vector2.ToString(System.String,System.IFormatProvider)\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: ToString(String,IFormatProvider)\n  nameWithType: Vector2.ToString(String,IFormatProvider)\n  fullName: System.Numerics.Vector2.ToString(String,IFormatProvider)\n- uid: System.IFormatProvider\n  parent: System\n  isExternal: true\n  name: IFormatProvider\n  nameWithType: IFormatProvider\n  fullName: System.IFormatProvider\n- uid: System.Numerics.Vector2.Transform(System.Numerics.Vector2,System.Numerics.Matrix3x2)\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: Transform(Vector2,Matrix3x2)\n  nameWithType: Vector2.Transform(Vector2,Matrix3x2)\n  fullName: System.Numerics.Vector2.Transform(Vector2,Matrix3x2)\n- uid: System.Numerics.Matrix3x2\n  parent: System.Numerics\n  isExternal: false\n  name: Matrix3x2\n  nameWithType: Matrix3x2\n  fullName: System.Numerics.Matrix3x2\n- uid: System.Numerics.Vector2.Transform(System.Numerics.Vector2,System.Numerics.Matrix4x4)\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: Transform(Vector2,Matrix4x4)\n  nameWithType: Vector2.Transform(Vector2,Matrix4x4)\n  fullName: System.Numerics.Vector2.Transform(Vector2,Matrix4x4)\n- uid: System.Numerics.Matrix4x4\n  parent: System.Numerics\n  isExternal: false\n  name: Matrix4x4\n  nameWithType: Matrix4x4\n  fullName: System.Numerics.Matrix4x4\n- uid: System.Numerics.Vector2.Transform(System.Numerics.Vector2,System.Numerics.Quaternion)\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: Transform(Vector2,Quaternion)\n  nameWithType: Vector2.Transform(Vector2,Quaternion)\n  fullName: System.Numerics.Vector2.Transform(Vector2,Quaternion)\n- uid: System.Numerics.Quaternion\n  parent: System.Numerics\n  isExternal: false\n  name: Quaternion\n  nameWithType: Quaternion\n  fullName: System.Numerics.Quaternion\n- uid: System.Numerics.Vector2.TransformNormal(System.Numerics.Vector2,System.Numerics.Matrix3x2)\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: TransformNormal(Vector2,Matrix3x2)\n  nameWithType: Vector2.TransformNormal(Vector2,Matrix3x2)\n  fullName: System.Numerics.Vector2.TransformNormal(Vector2,Matrix3x2)\n- uid: System.Numerics.Vector2.TransformNormal(System.Numerics.Vector2,System.Numerics.Matrix4x4)\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: TransformNormal(Vector2,Matrix4x4)\n  nameWithType: Vector2.TransformNormal(Vector2,Matrix4x4)\n  fullName: System.Numerics.Vector2.TransformNormal(Vector2,Matrix4x4)\n- uid: System.Numerics.Vector2.UnitX\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: UnitX\n  nameWithType: Vector2.UnitX\n  fullName: System.Numerics.Vector2.UnitX\n- uid: System.Numerics.Vector2.UnitY\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: UnitY\n  nameWithType: Vector2.UnitY\n  fullName: System.Numerics.Vector2.UnitY\n- uid: System.Numerics.Vector2.X\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: X\n  nameWithType: Vector2.X\n  fullName: System.Numerics.Vector2.X\n- uid: System.Numerics.Vector2.Y\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: Y\n  nameWithType: Vector2.Y\n  fullName: System.Numerics.Vector2.Y\n- uid: System.Numerics.Vector2.Zero\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: Zero\n  nameWithType: Vector2.Zero\n  fullName: System.Numerics.Vector2.Zero\n- uid: System.Numerics.Vector2.#ctor*\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: Vector2\n  nameWithType: Vector2.Vector2\n- uid: System.Numerics.Vector2.Abs*\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: Abs\n  nameWithType: Vector2.Abs\n- uid: System.Numerics.Vector2.Add*\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: Add\n  nameWithType: Vector2.Add\n- uid: System.Numerics.Vector2.Clamp*\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: Clamp\n  nameWithType: Vector2.Clamp\n- uid: System.Numerics.Vector2.CopyTo*\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: CopyTo\n  nameWithType: Vector2.CopyTo\n- uid: System.Numerics.Vector2.Distance*\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: Distance\n  nameWithType: Vector2.Distance\n- uid: System.Numerics.Vector2.DistanceSquared*\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: DistanceSquared\n  nameWithType: Vector2.DistanceSquared\n- uid: System.Numerics.Vector2.Divide*\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: Divide\n  nameWithType: Vector2.Divide\n- uid: System.Numerics.Vector2.Dot*\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: Dot\n  nameWithType: Vector2.Dot\n- uid: System.Numerics.Vector2.Equals*\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: Equals\n  nameWithType: Vector2.Equals\n- uid: System.Numerics.Vector2.GetHashCode*\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: GetHashCode\n  nameWithType: Vector2.GetHashCode\n- uid: System.Numerics.Vector2.Length*\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: Length\n  nameWithType: Vector2.Length\n- uid: System.Numerics.Vector2.LengthSquared*\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: LengthSquared\n  nameWithType: Vector2.LengthSquared\n- uid: System.Numerics.Vector2.Lerp*\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: Lerp\n  nameWithType: Vector2.Lerp\n- uid: System.Numerics.Vector2.Max*\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: Max\n  nameWithType: Vector2.Max\n- uid: System.Numerics.Vector2.Min*\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: Min\n  nameWithType: Vector2.Min\n- uid: System.Numerics.Vector2.Multiply*\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: Multiply\n  nameWithType: Vector2.Multiply\n- uid: System.Numerics.Vector2.Negate*\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: Negate\n  nameWithType: Vector2.Negate\n- uid: System.Numerics.Vector2.Normalize*\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: Normalize\n  nameWithType: Vector2.Normalize\n- uid: System.Numerics.Vector2.One*\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: One\n  nameWithType: Vector2.One\n- uid: System.Numerics.Vector2.op_Addition*\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: op_Addition\n  nameWithType: Vector2.op_Addition\n- uid: System.Numerics.Vector2.op_Division*\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: op_Division\n  nameWithType: Vector2.op_Division\n- uid: System.Numerics.Vector2.op_Equality*\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: op_Equality\n  nameWithType: Vector2.op_Equality\n- uid: System.Numerics.Vector2.op_Inequality*\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: op_Inequality\n  nameWithType: Vector2.op_Inequality\n- uid: System.Numerics.Vector2.op_Multiply*\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: op_Multiply\n  nameWithType: Vector2.op_Multiply\n- uid: System.Numerics.Vector2.op_Subtraction*\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: op_Subtraction\n  nameWithType: Vector2.op_Subtraction\n- uid: System.Numerics.Vector2.op_UnaryNegation*\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: op_UnaryNegation\n  nameWithType: Vector2.op_UnaryNegation\n- uid: System.Numerics.Vector2.Reflect*\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: Reflect\n  nameWithType: Vector2.Reflect\n- uid: System.Numerics.Vector2.SquareRoot*\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: SquareRoot\n  nameWithType: Vector2.SquareRoot\n- uid: System.Numerics.Vector2.Subtract*\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: Subtract\n  nameWithType: Vector2.Subtract\n- uid: System.Numerics.Vector2.ToString*\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: ToString\n  nameWithType: Vector2.ToString\n- uid: System.Numerics.Vector2.Transform*\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: Transform\n  nameWithType: Vector2.Transform\n- uid: System.Numerics.Vector2.TransformNormal*\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: TransformNormal\n  nameWithType: Vector2.TransformNormal\n- uid: System.Numerics.Vector2.UnitX*\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: UnitX\n  nameWithType: Vector2.UnitX\n- uid: System.Numerics.Vector2.UnitY*\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: UnitY\n  nameWithType: Vector2.UnitY\n- uid: System.Numerics.Vector2.Zero*\n  parent: System.Numerics.Vector2\n  isExternal: false\n  name: Zero\n  nameWithType: Vector2.Zero\n"}