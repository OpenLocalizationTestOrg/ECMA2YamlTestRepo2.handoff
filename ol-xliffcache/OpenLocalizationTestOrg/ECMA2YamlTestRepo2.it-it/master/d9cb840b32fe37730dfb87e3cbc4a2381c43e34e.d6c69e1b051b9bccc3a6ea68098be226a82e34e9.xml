{"nodes":[{"pos":[339,472],"content":"The exception that is thrown when a call is made to the <xref:System.Threading.Thread.Abort*> method. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"The exception that is thrown when a call is made to the <xref:System.Threading.Thread.Abort*> method. This class cannot be inherited.","pos":[0,133],"nodes":[{"content":"The exception that is thrown when a call is made to the &lt;xref:System.Threading.Thread.Abort*&gt; method.","pos":[0,101],"source":"The exception that is thrown when a call is made to the <xref:System.Threading.Thread.Abort*> method."},{"content":"This class cannot be inherited.","pos":[102,133]}]}]},{"pos":[485,1925],"content":"When a call is made to the <xref:System.Threading.Thread.Abort%2A> method to destroy a thread, the common language runtime throws a ThreadAbortException. ThreadAbortException is a special exception that can be caught, but it will automatically be raised again at the end of the `catch` block. When this exception is raised, the runtime executes all the `finally` blocks before ending the thread. Because the thread can do an unbounded computation in the `finally` blocks or call <xref:System.Threading.Thread.ResetAbort%2A?displayProperty=fullName> to cancel the abort, there is no guarantee that the thread will ever end. If you want to wait until the aborted thread has ended, you can call the <xref:System.Threading.Thread.Join%2A?displayProperty=fullName> method. <xref:System.Threading.Thread.Join%2A> is a blocking call that does not return until the thread actually stops executing.      > [!NOTE] >  When the common language runtime (CLR) stops background threadsafter all foreground threads in a managed executable have ended, it does not use <xref:System.Threading.Thread.Abort%2A?displayProperty=fullName>. Therefore, you cannot use ThreadAbortException to detect when background threads are being terminated by the CLR.       ThreadAbortException uses the HRESULT COR_E_THREADABORTED, which has the value 0x80131530.      > [!NOTE] >  The value of the inherited <xref:System.Exception.Data%2A> property is always `null`.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"When a call is made to the &lt;xref:System.Threading.Thread.Abort%2A&gt; method to destroy a thread, the common language runtime throws a ThreadAbortException.","pos":[0,153],"source":"When a call is made to the <xref:System.Threading.Thread.Abort%2A> method to destroy a thread, the common language runtime throws a ThreadAbortException."},{"content":"ThreadAbortException is a special exception that can be caught, but it will automatically be raised again at the end of the <ph id=\"ph1\">`catch`</ph> block.","pos":[154,292],"source":" ThreadAbortException is a special exception that can be caught, but it will automatically be raised again at the end of the `catch` block."},{"content":"When this exception is raised, the runtime executes all the <ph id=\"ph1\">`finally`</ph> blocks before ending the thread.","pos":[293,395],"source":" When this exception is raised, the runtime executes all the `finally` blocks before ending the thread."},{"content":"Because the thread can do an unbounded computation in the <ph id=\"ph1\">`finally`</ph> blocks or call &lt;xref:System.Threading.Thread.ResetAbort%2A?displayProperty=fullName&gt; to cancel the abort, there is no guarantee that the thread will ever end.","pos":[396,622],"source":" Because the thread can do an unbounded computation in the `finally` blocks or call <xref:System.Threading.Thread.ResetAbort%2A?displayProperty=fullName> to cancel the abort, there is no guarantee that the thread will ever end."},{"content":"If you want to wait until the aborted thread has ended, you can call the &lt;xref:System.Threading.Thread.Join%2A?displayProperty=fullName&gt; method.","pos":[623,767],"source":" If you want to wait until the aborted thread has ended, you can call the <xref:System.Threading.Thread.Join%2A?displayProperty=fullName> method."},{"content":"&lt;xref:System.Threading.Thread.Join%2A&gt; is a blocking call that does not return until the thread actually stops executing.","pos":[768,889],"source":" <xref:System.Threading.Thread.Join%2A> is a blocking call that does not return until the thread actually stops executing."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  When the common language runtime (CLR) stops background threadsafter all foreground threads in a managed executable have ended, it does not use &lt;xref:System.Threading.Thread.Abort%2A?displayProperty=fullName&gt;.","pos":[895,1117],"source":"      > [!NOTE] >  When the common language runtime (CLR) stops background threadsafter all foreground threads in a managed executable have ended, it does not use <xref:System.Threading.Thread.Abort%2A?displayProperty=fullName>."},{"content":"Therefore, you cannot use ThreadAbortException to detect when background threads are being terminated by the CLR.","pos":[1118,1231]},{"content":"ThreadAbortException uses the HRESULT COR_E_THREADABORTED, which has the value 0x80131530.","pos":[1238,1328]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The value of the inherited &lt;xref:System.Exception.Data%2A&gt; property is always <ph id=\"ph2\">`null`</ph>.","pos":[1334,1432],"source":"      > [!NOTE] >  The value of the inherited <xref:System.Exception.Data%2A> property is always `null`."}]},{"pos":[3378,3468],"content":"Gets an object that contains application-specific information related to the thread abort.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets an object that contains application-specific information related to the thread abort.","pos":[0,90]}]},{"pos":[3480,3776],"content":"The object returned by this property is specified through the `stateInfo` parameter of the <xref:System.Threading.Thread.Abort%2A> method. The exact content and usage of this object is application defined; it is typically used to convey information that is meaningful to the thread being aborted.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The object returned by this property is specified through the <ph id=\"ph1\">`stateInfo`</ph> parameter of the &lt;xref:System.Threading.Thread.Abort%2A&gt; method.","pos":[0,138],"source":"The object returned by this property is specified through the `stateInfo` parameter of the <xref:System.Threading.Thread.Abort%2A> method."},{"content":"The exact content and usage of this object is application defined; it is typically used to convey information that is meaningful to the thread being aborted.","pos":[139,296]}]},{"pos":[4332,4386],"content":"An object containing application-specific information.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object containing application-specific information.","pos":[0,54]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Threading.ThreadAbortException\n  id: ThreadAbortException\n  children:\n  - System.Threading.ThreadAbortException.ExceptionState\n  langs:\n  - csharp\n  name: ThreadAbortException\n  nameWithType: ThreadAbortException\n  fullName: System.Threading.ThreadAbortException\n  type: Class\n  summary: The exception that is thrown when a call is made to the <xref:System.Threading.Thread.Abort*> method. This class cannot be inherited.\n  remarks: \"When a call is made to the <xref:System.Threading.Thread.Abort%2A> method to destroy a thread, the common language runtime throws a ThreadAbortException. ThreadAbortException is a special exception that can be caught, but it will automatically be raised again at the end of the `catch` block. When this exception is raised, the runtime executes all the `finally` blocks before ending the thread. Because the thread can do an unbounded computation in the `finally` blocks or call <xref:System.Threading.Thread.ResetAbort%2A?displayProperty=fullName> to cancel the abort, there is no guarantee that the thread will ever end. If you want to wait until the aborted thread has ended, you can call the <xref:System.Threading.Thread.Join%2A?displayProperty=fullName> method. <xref:System.Threading.Thread.Join%2A> is a blocking call that does not return until the thread actually stops executing.  \\n  \\n> [!NOTE]\\n>  When the common language runtime (CLR) stops background threadsafter all foreground threads in a managed executable have ended, it does not use <xref:System.Threading.Thread.Abort%2A?displayProperty=fullName>. Therefore, you cannot use ThreadAbortException to detect when background threads are being terminated by the CLR.  \\n  \\n ThreadAbortException uses the HRESULT COR_E_THREADABORTED, which has the value 0x80131530.  \\n  \\n> [!NOTE]\\n>  The value of the inherited <xref:System.Exception.Data%2A> property is always `null`.\"\n  example:\n  - \"The following example demonstrates aborting a thread. The thread that receives the `ThreadAbortException` uses the <xref:System.Threading.Thread.ResetAbort%2A> method to cancel the abort request and continue executing.  \\n  \\n [!code-cpp[ThreadAbEx#1](~/add/codesnippet/cpp/t-system.threading.threa_4_1.cpp)]\\n [!code-vb[ThreadAbEx#1](~/add/codesnippet/visualbasic/t-system.threading.threa_4_1.vb)]\\n [!code-cs[ThreadAbEx#1](~/add/codesnippet/csharp/t-system.threading.threa_4_1.cs)]  \\n  \\n This code produces the following output:  \\n  \\n```  \\nThread - working.  \\nMain - aborting my thread.  \\nThread - caught ThreadAbortException - resetting.  \\nException message: Thread was being aborted.  \\nThread - still alive and working.  \\nThread - finished working.  \\nMain ending.  \\n```\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class ThreadAbortException : SystemException\n  inheritance:\n  - System.Exception\n  - System.SystemException\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Threading.ThreadAbortException.ExceptionState\n  id: ExceptionState\n  parent: System.Threading.ThreadAbortException\n  langs:\n  - csharp\n  name: ExceptionState\n  nameWithType: ThreadAbortException.ExceptionState\n  fullName: System.Threading.ThreadAbortException.ExceptionState\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  summary: Gets an object that contains application-specific information related to the thread abort.\n  remarks: The object returned by this property is specified through the `stateInfo` parameter of the <xref:System.Threading.Thread.Abort%2A> method. The exact content and usage of this object is application defined; it is typically used to convey information that is meaningful to the thread being aborted.\n  example:\n  - \"The following code example shows how to pass information to a thread that is being aborted.  \\n  \\n [!code-cs[System.Threading.Thread.Abort2#1](~/add/codesnippet/csharp/p-system.threading.threa_10_1.cs)]\\n [!code-cpp[System.Threading.Thread.Abort2#1](~/add/codesnippet/cpp/p-system.threading.threa_10_1.cpp)]\\n [!code-vb[System.Threading.Thread.Abort2#1](~/add/codesnippet/visualbasic/p-system.threading.threa_10_1.vb)]\"\n  syntax:\n    content: public object ExceptionState { get; }\n    return:\n      type: System.Object\n      description: An object containing application-specific information.\n  overload: System.Threading.ThreadAbortException.ExceptionState*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.SystemException\n  isExternal: false\n  name: System.SystemException\n- uid: System.Threading.ThreadAbortException.ExceptionState\n  parent: System.Threading.ThreadAbortException\n  isExternal: false\n  name: ExceptionState\n  nameWithType: ThreadAbortException.ExceptionState\n  fullName: System.Threading.ThreadAbortException.ExceptionState\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Threading.ThreadAbortException.ExceptionState*\n  parent: System.Threading.ThreadAbortException\n  isExternal: false\n  name: ExceptionState\n  nameWithType: ThreadAbortException.ExceptionState\n"}