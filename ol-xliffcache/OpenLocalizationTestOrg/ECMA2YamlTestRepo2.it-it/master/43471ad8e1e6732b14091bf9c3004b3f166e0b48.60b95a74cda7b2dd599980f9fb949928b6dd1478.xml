{"nodes":[{"pos":[1343,1424],"content":"Defines the identity permission for strong names. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Defines the identity permission for strong names. This class cannot be inherited.","pos":[0,81],"nodes":[{"content":"Defines the identity permission for strong names.","pos":[0,49]},{"content":"This class cannot be inherited.","pos":[50,81]}]}]},{"pos":[1437,4554],"content":"> [!IMPORTANT] >  Starting with the [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)], identity permissions are not used.   >    >  In the .NET Framework versions 1.0 and 1.1, identity permissions cannot have an <xref:System.Security.Permissions.PermissionState> permission state value. In the .NET Framework version 2.0 and later, identity permissions can have any permission state value.  This means that in version 2.0 and later versions, identity permissions have the same behavior as permissions that implement the <xref:System.Security.Permissions.IUnrestrictedPermission> interface. That is, a demand for an identity always succeeds, regardless of the identity of the assembly, if the assembly has been granted full trust.       Use StrongNameIdentityPermission to confirm that the calling code is in a particular strong-named code assembly. Full demands for StrongNameIdentityPermission succeed only if all the assemblies in the stack have the correct evidence to satisfy the demand. Link demands that use the <xref:System.Security.Permissions.StrongNameIdentityPermissionAttribute> attribute succeed only if the immediate caller has the correct evidence.       A strong name identity is based on a cryptographic public key called a binary large object (BLOB),  which is optionally combined with the name and version of a specific assembly. The key defines a unique namespace and provides strong verification that the name is genuine, because the definition of the name must be in an assembly that is signed by the corresponding private key.       Note that the validity of the strong name key is not dependent on a trust relationship or on any certificate necessarily being issued for the key.       In the .NET Framework versions 1.0 and 1.1, demands on the identity permissions are effective even when the calling assembly is fully trusted. That is, even if the calling assembly has full trust, a demand for an identity permission fails if the assembly does not meet the demanded criteria. In the .NET Framework version 2.0 and later, demands for identity permissions are ineffective if the calling assembly has full trust. This ensures consistency for all permissions and eliminates the treatment of identity permissions as a special case.       For a complete description of strong names, see the <xref:System.Security.Policy.StrongName> reference page. For more information about strong-named assemblies, see [Strong-Named Assemblies](~/add/includes/ajax-current-ext-md.md).       The StrongNameIdentityPermission class is used to define strong-name requirements for accessing the public members of a type. The <xref:System.Security.Permissions.StrongNameIdentityPermissionAttribute> attribute can be used to define strong-name requirements at the assembly level. In the .NET Framework version 2.0 and later, you can also use the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute to specify that all nonpublic types in that assembly are visible to another assembly. For more information, see [Friend Assemblies](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"<ph id=\"ph1\">&gt; [!IMPORTANT]</ph> &gt;  Starting with the <ph id=\"ph2\">[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]</ph>, identity permissions are not used.","pos":[0,131],"source":"> [!IMPORTANT] >  Starting with the [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)], identity permissions are not used."},{"content":"&gt;    &gt;  In the .NET Framework versions 1.0 and 1.1, identity permissions cannot have an &lt;xref:System.Security.Permissions.PermissionState&gt; permission state value.","pos":[134,296],"source":"   >    >  In the .NET Framework versions 1.0 and 1.1, identity permissions cannot have an <xref:System.Security.Permissions.PermissionState> permission state value."},{"content":"In the .NET Framework version 2.0 and later, identity permissions can have any permission state value.","pos":[297,399]},{"content":"This means that in version 2.0 and later versions, identity permissions have the same behavior as permissions that implement the &lt;xref:System.Security.Permissions.IUnrestrictedPermission&gt; interface.","pos":[401,599],"source":"  This means that in version 2.0 and later versions, identity permissions have the same behavior as permissions that implement the <xref:System.Security.Permissions.IUnrestrictedPermission> interface."},{"content":"That is, a demand for an identity always succeeds, regardless of the identity of the assembly, if the assembly has been granted full trust.","pos":[600,739]},{"content":"Use StrongNameIdentityPermission to confirm that the calling code is in a particular strong-named code assembly.","pos":[746,858]},{"content":"Full demands for StrongNameIdentityPermission succeed only if all the assemblies in the stack have the correct evidence to satisfy the demand.","pos":[859,1001]},{"content":"Link demands that use the &lt;xref:System.Security.Permissions.StrongNameIdentityPermissionAttribute&gt; attribute succeed only if the immediate caller has the correct evidence.","pos":[1002,1173],"source":" Link demands that use the <xref:System.Security.Permissions.StrongNameIdentityPermissionAttribute> attribute succeed only if the immediate caller has the correct evidence."},{"content":"A strong name identity is based on a cryptographic public key called a binary large object (BLOB),  which is optionally combined with the name and version of a specific assembly.","pos":[1180,1358]},{"content":"The key defines a unique namespace and provides strong verification that the name is genuine, because the definition of the name must be in an assembly that is signed by the corresponding private key.","pos":[1359,1559]},{"content":"Note that the validity of the strong name key is not dependent on a trust relationship or on any certificate necessarily being issued for the key.","pos":[1566,1712]},{"content":"In the .NET Framework versions 1.0 and 1.1, demands on the identity permissions are effective even when the calling assembly is fully trusted.","pos":[1719,1861]},{"content":"That is, even if the calling assembly has full trust, a demand for an identity permission fails if the assembly does not meet the demanded criteria.","pos":[1862,2010]},{"content":"In the .NET Framework version 2.0 and later, demands for identity permissions are ineffective if the calling assembly has full trust.","pos":[2011,2144]},{"content":"This ensures consistency for all permissions and eliminates the treatment of identity permissions as a special case.","pos":[2145,2261]},{"content":"For a complete description of strong names, see the &lt;xref:System.Security.Policy.StrongName&gt; reference page.","pos":[2268,2376],"source":"       For a complete description of strong names, see the <xref:System.Security.Policy.StrongName> reference page."},{"content":"For more information about strong-named assemblies, see <bpt id=\"p1\">[</bpt>Strong-Named Assemblies<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[2377,2498],"source":" For more information about strong-named assemblies, see [Strong-Named Assemblies](~/add/includes/ajax-current-ext-md.md)."},{"content":"The StrongNameIdentityPermission class is used to define strong-name requirements for accessing the public members of a type.","pos":[2505,2630]},{"content":"The &lt;xref:System.Security.Permissions.StrongNameIdentityPermissionAttribute&gt; attribute can be used to define strong-name requirements at the assembly level.","pos":[2631,2787],"source":" The <xref:System.Security.Permissions.StrongNameIdentityPermissionAttribute> attribute can be used to define strong-name requirements at the assembly level."},{"content":"In the .NET Framework version 2.0 and later, you can also use the &lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt; attribute to specify that all nonpublic types in that assembly are visible to another assembly.","pos":[2788,3016],"source":" In the .NET Framework version 2.0 and later, you can also use the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute to specify that all nonpublic types in that assembly are visible to another assembly."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Friend Assemblies<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[3017,3102],"source":" For more information, see [Friend Assemblies](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[6062,6264],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.StrongNameIdentityPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified <bpt id=\"p2\">&lt;xref href=\"System.Security.Permissions.PermissionState\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Permissions.StrongNameIdentityPermission\"></xref> class with the specified <xref href=\"System.Security.Permissions.PermissionState\"></xref>."},{"pos":[6277,7956],"content":"Creates either a fully restricted (`None`) or `Unrestricted` permission.      > [!NOTE] >  In the .NET Framework versions 1.0 and 1.1, identity permissions cannot have an <xref:System.Security.Permissions.PermissionState> permission state value. In the .NET Framework version 2.0 and later, identity permissions can have any permission state value.  This means that in version 2.0 and later versions, identity permissions have the same behavior as permissions that implement the <xref:System.Security.Permissions.IUnrestrictedPermission> interface. That is, a demand for an identity always succeeds, regardless of the identity of the assembly, if the assembly has been granted full trust.       In the .NET Framework versions 1.0 and 1.1, demands on the identity permissions are effective, even when the calling assembly is fully trusted. That is, although the calling assembly has full trust, a demand for an identity permission fails if the assembly does not meet the demanded criteria. In the .NET Framework version 2.0 and later, demands for identity permissions are ineffective if the calling assembly has full trust. This assures consistency for all permissions, eliminating the treatment of identity permissions as a special case.       Use this constructor with a permission state value of <xref:System.Security.Permissions.PermissionState> to create an identity permission that matches no strong names. If you subsequently set the <xref:System.Security.Permissions.StrongNameIdentityPermission.Name%2A> and <xref:System.Security.Permissions.StrongNameIdentityPermission.Version%2A> properties, a specific strong name identity can be represented by the permission.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Creates either a fully restricted (<ph id=\"ph1\">`None`</ph>) or <ph id=\"ph2\">`Unrestricted`</ph> permission.","pos":[0,72],"source":"Creates either a fully restricted (`None`) or `Unrestricted` permission."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  In the .NET Framework versions 1.0 and 1.1, identity permissions cannot have an &lt;xref:System.Security.Permissions.PermissionState&gt; permission state value.","pos":[78,245],"source":"      > [!NOTE] >  In the .NET Framework versions 1.0 and 1.1, identity permissions cannot have an <xref:System.Security.Permissions.PermissionState> permission state value."},{"content":"In the .NET Framework version 2.0 and later, identity permissions can have any permission state value.","pos":[246,348]},{"content":"This means that in version 2.0 and later versions, identity permissions have the same behavior as permissions that implement the &lt;xref:System.Security.Permissions.IUnrestrictedPermission&gt; interface.","pos":[350,548],"source":"  This means that in version 2.0 and later versions, identity permissions have the same behavior as permissions that implement the <xref:System.Security.Permissions.IUnrestrictedPermission> interface."},{"content":"That is, a demand for an identity always succeeds, regardless of the identity of the assembly, if the assembly has been granted full trust.","pos":[549,688]},{"content":"In the .NET Framework versions 1.0 and 1.1, demands on the identity permissions are effective, even when the calling assembly is fully trusted.","pos":[695,838]},{"content":"That is, although the calling assembly has full trust, a demand for an identity permission fails if the assembly does not meet the demanded criteria.","pos":[839,988]},{"content":"In the .NET Framework version 2.0 and later, demands for identity permissions are ineffective if the calling assembly has full trust.","pos":[989,1122]},{"content":"This assures consistency for all permissions, eliminating the treatment of identity permissions as a special case.","pos":[1123,1237]},{"content":"Use this constructor with a permission state value of &lt;xref:System.Security.Permissions.PermissionState&gt; to create an identity permission that matches no strong names.","pos":[1244,1411],"source":"       Use this constructor with a permission state value of <xref:System.Security.Permissions.PermissionState> to create an identity permission that matches no strong names."},{"content":"If you subsequently set the &lt;xref:System.Security.Permissions.StrongNameIdentityPermission.Name%2A&gt; and &lt;xref:System.Security.Permissions.StrongNameIdentityPermission.Version%2A&gt; properties, a specific strong name identity can be represented by the permission.","pos":[1412,1672],"source":" If you subsequently set the <xref:System.Security.Permissions.StrongNameIdentityPermission.Name%2A> and <xref:System.Security.Permissions.StrongNameIdentityPermission.Version%2A> properties, a specific strong name identity can be represented by the permission."}]},{"pos":[8681,8764],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.PermissionState\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Security.Permissions.PermissionState\"></xref> values."},{"pos":[8949,9071],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">state</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not a valid value of <bpt id=\"p2\">&lt;xref href=\"System.Security.Permissions.PermissionState\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>state</code> parameter is not a valid value of <xref href=\"System.Security.Permissions.PermissionState\"></xref>."},{"pos":[9858,10015],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.StrongNameIdentityPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class for the specified strong name identity.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Permissions.StrongNameIdentityPermission\"></xref> class for the specified strong name identity."},{"pos":[10028,10417],"content":"The `name` and `version` parameters can be `null` only when the public key is used to identify the assembly. An empty string (\"\") should not be used in place of `null`. If `name` is an empty string, an <xref:System.ArgumentException> is thrown.       For more information on names and version numbers of assemblies, see [Strong-Named Assemblies](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <ph id=\"ph1\">`name`</ph> and <ph id=\"ph2\">`version`</ph> parameters can be <ph id=\"ph3\">`null`</ph> only when the public key is used to identify the assembly.","pos":[0,108],"source":"The `name` and `version` parameters can be `null` only when the public key is used to identify the assembly."},{"content":"An empty string (\"\") should not be used in place of <ph id=\"ph1\">`null`</ph>.","pos":[109,168],"source":" An empty string (\"\") should not be used in place of `null`."},{"content":"If <ph id=\"ph1\">`name`</ph> is an empty string, an &lt;xref:System.ArgumentException&gt; is thrown.","pos":[169,244],"source":" If `name` is an empty string, an <xref:System.ArgumentException> is thrown."},{"content":"For more information on names and version numbers of assemblies, see <bpt id=\"p1\">[</bpt>Strong-Named Assemblies<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[251,385],"source":"       For more information on names and version numbers of assemblies, see [Strong-Named Assemblies](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[11186,11245],"content":"The public key defining the strong name identity namespace.","needQuote":true,"needEscape":true,"nodes":[{"content":"The public key defining the strong name identity namespace.","pos":[0,59]}]},{"pos":[11306,11401],"content":"The simple name part of the strong name identity. This corresponds to the name of the assembly.","needQuote":true,"needEscape":true,"nodes":[{"content":"The simple name part of the strong name identity. This corresponds to the name of the assembly.","pos":[0,95],"nodes":[{"content":"The simple name part of the strong name identity.","pos":[0,49]},{"content":"This corresponds to the name of the assembly.","pos":[50,95]}]}]},{"pos":[11466,11501],"content":"The version number of the identity.","needQuote":true,"needEscape":true,"nodes":[{"content":"The version number of the identity.","pos":[0,35]}]},{"pos":[11694,11790],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">blob</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>blob</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[11885,11941],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is an empty string (\"\").","needQuote":true,"needEscape":true,"source":"The <code>name</code> parameter is an empty string (\"\")."},{"pos":[12369,12433],"content":"Creates and returns an identical copy of the current permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates and returns an identical copy of the current permission.","pos":[0,64]}]},{"pos":[12445,12535],"content":"A copy of a permission represents the same access to resources as the original permission.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"A copy of a permission represents the same access to resources as the original permission.","pos":[0,90]}]},{"pos":[13661,13694],"content":"A copy of the current permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"A copy of the current permission.","pos":[0,33]}]},{"pos":[14340,14410],"content":"Reconstructs a permission with a specified state from an XML encoding.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reconstructs a permission with a specified state from an XML encoding.","pos":[0,70]}]},{"pos":[14422,14466],"content":"This method is not used by application code.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method is not used by application code.","pos":[0,44]}]},{"pos":[15600,15654],"content":"The XML encoding to use to reconstruct the permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The XML encoding to use to reconstruct the permission.","pos":[0,54]}]},{"pos":[15849,15942],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">e</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>e</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[16038,16182],"content":"The <code>e</code> parameter is not a valid permission element.       -or-       The <code>e</code> parameter's version number is not valid.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">e</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not a valid permission element.","pos":[0,63],"source":"The <code>e</code> parameter is not a valid permission element."},{"content":"-or-       The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">e</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter's version number is not valid.","pos":[70,140],"source":"       -or-       The <code>e</code> parameter's version number is not valid."}]},{"pos":[16727,16840],"content":"Creates and returns a permission that is the intersection of the current permission and the specified permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates and returns a permission that is the intersection of the current permission and the specified permission.","pos":[0,113]}]},{"pos":[16853,17433],"content":"The intersection of two permissions is a permission that describes the set of operations they both describe in common. Only a demand that passes both original permissions will pass the intersection.       The intersection of two identical strong name identity permissions is the same permission. The intersection of two different (not wildcard) expressions is an empty permission. The intersection of a wildcard expression and a matching strong name is the strong name. The intersection of two wildcard expressions that match is the longer, more specific of the two expressions.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The intersection of two permissions is a permission that describes the set of operations they both describe in common. Only a demand that passes both original permissions will pass the intersection.       The intersection of two identical strong name identity permissions is the same permission. The intersection of two different (not wildcard) expressions is an empty permission. The intersection of a wildcard expression and a matching strong name is the strong name. The intersection of two wildcard expressions that match is the longer, more specific of the two expressions.","pos":[0,578],"nodes":[{"content":"The intersection of two permissions is a permission that describes the set of operations they both describe in common.","pos":[0,118]},{"content":"Only a demand that passes both original permissions will pass the intersection.","pos":[119,198]},{"content":"The intersection of two identical strong name identity permissions is the same permission.","pos":[205,295]},{"content":"The intersection of two different (not wildcard) expressions is an empty permission.","pos":[296,380]},{"content":"The intersection of a wildcard expression and a matching strong name is the strong name.","pos":[381,469]},{"content":"The intersection of two wildcard expressions that match is the longer, more specific of the two expressions.","pos":[470,578]}]}]},{"pos":[18634,18743],"content":"A permission to intersect with the current permission. It must be of the same type as the current permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"A permission to intersect with the current permission. It must be of the same type as the current permission.","pos":[0,109],"nodes":[{"content":"A permission to intersect with the current permission.","pos":[0,54]},{"content":"It must be of the same type as the current permission.","pos":[55,109]}]}]},{"pos":[18815,19014],"content":"A new permission that represents the intersection of the current permission and the specified permission, or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the intersection is empty.","needQuote":true,"needEscape":true,"source":"A new permission that represents the intersection of the current permission and the specified permission, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the intersection is empty."},{"pos":[19203,19359],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">target</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> and is not of the same type as the current permission.","needQuote":true,"needEscape":true,"source":"The <code>target</code> parameter is not <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> and is not of the same type as the current permission."},{"pos":[19908,19990],"content":"Determines whether the current permission is a subset of the specified permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether the current permission is a subset of the specified permission.","pos":[0,82]}]},{"pos":[20002,20545],"content":"The current permission is a subset of the specified permission if the current permission specifies a set of operations that is wholly contained by the specified permission. For example, the other properties being equal, an identity with the <xref:System.Security.Permissions.StrongNameIdentityPermission.Name%2A> property containing the wildcard expression MyCompany.MyDepartment.* is identified as a subset of an identity with the <xref:System.Security.Permissions.StrongNameIdentityPermission.Name%2A> property MyCompany.MyDepartment.MyFile.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The current permission is a subset of the specified permission if the current permission specifies a set of operations that is wholly contained by the specified permission. For example, the other properties being equal, an identity with the <xref:System.Security.Permissions.StrongNameIdentityPermission.Name%2A> property containing the wildcard expression MyCompany.MyDepartment.* is identified as a subset of an identity with the <xref:System.Security.Permissions.StrongNameIdentityPermission.Name%2A> property MyCompany.MyDepartment.MyFile.","pos":[0,543],"nodes":[{"content":"The current permission is a subset of the specified permission if the current permission specifies a set of operations that is wholly contained by the specified permission.","pos":[0,172]},{"content":"For example, the other properties being equal, an identity with the &lt;xref:System.Security.Permissions.StrongNameIdentityPermission.Name%2A&gt; property containing the wildcard expression MyCompany.MyDepartment.* is identified as a subset of an identity with the &lt;xref:System.Security.Permissions.StrongNameIdentityPermission.Name%2A&gt; property MyCompany.MyDepartment.MyFile.","pos":[173,543],"source":" For example, the other properties being equal, an identity with the <xref:System.Security.Permissions.StrongNameIdentityPermission.Name%2A> property containing the wildcard expression MyCompany.MyDepartment.* is identified as a subset of an identity with the <xref:System.Security.Permissions.StrongNameIdentityPermission.Name%2A> property MyCompany.MyDepartment.MyFile."}]}]},{"pos":[21724,21854],"content":"A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.","pos":[0,130],"nodes":[{"content":"A permission that is to be tested for the subset relationship.","pos":[0,62]},{"content":"This permission must be of the same type as the current permission.","pos":[63,130]}]}]},{"pos":[21913,22115],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the current permission is a subset of the specified permission; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current permission is a subset of the specified permission; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[22305,22461],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">target</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> and is not of the same type as the current permission.","needQuote":true,"needEscape":true,"source":"The <code>target</code> parameter is not <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> and is not of the same type as the current permission."},{"pos":[22885,22950],"content":"Gets or sets the simple name portion of the strong name identity.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the simple name portion of the strong name identity.","pos":[0,65]}]},{"pos":[22962,23284],"content":"The value of the Name property can be an exact name or can be modified by a wildcard character in the final position; for example, both MyCompany.MyDepartment.MyFile and MyCompany.MyDepartment.* are valid names. If you attempt to set the Name property to an empty string (\"\"), an <xref:System.ArgumentException> is thrown.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The value of the Name property can be an exact name or can be modified by a wildcard character in the final position; for example, both MyCompany.MyDepartment.MyFile and MyCompany.MyDepartment.* are valid names. If you attempt to set the Name property to an empty string (\"\"), an <xref:System.ArgumentException> is thrown.","pos":[0,322],"nodes":[{"content":"The value of the Name property can be an exact name or can be modified by a wildcard character in the final position; for example, both MyCompany.MyDepartment.MyFile and MyCompany.MyDepartment.* are valid names.","pos":[0,211]},{"content":"If you attempt to set the Name property to an empty string (\"\"), an &lt;xref:System.ArgumentException&gt; is thrown.","pos":[212,322],"source":" If you attempt to set the Name property to an empty string (\"\"), an <xref:System.ArgumentException> is thrown."}]}]},{"pos":[23398,23430],"content":"The simple name of the identity.","needQuote":true,"needEscape":true,"nodes":[{"content":"The simple name of the identity.","pos":[0,32]}]},{"pos":[23614,23648],"content":"The value is an empty string (\"\").","needQuote":true,"needEscape":true,"nodes":[{"content":"The value is an empty string (\"\").","pos":[0,34]}]},{"pos":[23751,23832],"content":"The property value cannot be retrieved because it contains an ambiguous identity.","needQuote":true,"needEscape":true,"nodes":[{"content":"The property value cannot be retrieved because it contains an ambiguous identity.","pos":[0,81]}]},{"pos":[24281,24362],"content":"Gets or sets the public key blob that defines the strong name identity namespace.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the public key blob that defines the strong name identity namespace.","pos":[0,81]}]},{"pos":[24564,24768],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.StrongNamePublicKeyBlob\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that contains the public key of the identity, or <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> if there is no key.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Security.Permissions.StrongNamePublicKeyBlob\"></xref> that contains the public key of the identity, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if there is no key."},{"pos":[24965,25055],"content":"The property value is set to <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The property value is set to <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[25158,25239],"content":"The property value cannot be retrieved because it contains an ambiguous identity.","needQuote":true,"needEscape":true,"nodes":[{"content":"The property value cannot be retrieved because it contains an ambiguous identity.","pos":[0,81]}]},{"pos":[25672,25736],"content":"Creates an XML encoding of the permission and its current state.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates an XML encoding of the permission and its current state.","pos":[0,64]}]},{"pos":[25748,25802],"content":"This method is not typically used by application code.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method is not typically used by application code.","pos":[0,54]}]},{"pos":[26714,26781],"content":"An XML encoding of the permission, including any state information.","needQuote":true,"needEscape":true,"nodes":[{"content":"An XML encoding of the permission, including any state information.","pos":[0,67]}]},{"pos":[27398,27492],"content":"Creates a permission that is the union of the current permission and the specified permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a permission that is the union of the current permission and the specified permission.","pos":[0,94]}]},{"pos":[27505,27995],"content":"The result of a call to Union is a permission that represents all the operations represented by both the current permission and the specified permission. Any demand that passes either permission passes their union.       The union of a permission and `null` is the permission that is not `null`. The union of a permission and a subset of that permission is the permission that contains the other. Any other combination results in an <xref:System.ArgumentException> exception being thrown.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The result of a call to Union is a permission that represents all the operations represented by both the current permission and the specified permission.","pos":[0,153]},{"content":"Any demand that passes either permission passes their union.","pos":[154,214]},{"content":"The union of a permission and <ph id=\"ph1\">`null`</ph> is the permission that is not <ph id=\"ph2\">`null`</ph>.","pos":[221,295],"source":"       The union of a permission and `null` is the permission that is not `null`."},{"content":"The union of a permission and a subset of that permission is the permission that contains the other.","pos":[296,396]},{"content":"Any other combination results in an &lt;xref:System.ArgumentException&gt; exception being thrown.","pos":[397,488],"source":" Any other combination results in an <xref:System.ArgumentException> exception being thrown."}]},{"pos":[29188,29295],"content":"A permission to combine with the current permission. It must be of the same type as the current permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"A permission to combine with the current permission. It must be of the same type as the current permission.","pos":[0,107],"nodes":[{"content":"A permission to combine with the current permission.","pos":[0,52]},{"content":"It must be of the same type as the current permission.","pos":[53,107]}]}]},{"pos":[29367,29465],"content":"A new permission that represents the union of the current permission and the specified permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"A new permission that represents the union of the current permission and the specified permission.","pos":[0,98]}]},{"pos":[29651,29902],"content":"The <code>target</code> parameter is not <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> and is not of the same type as the current permission.       -or-       The two permissions are not equal and one is a subset of the other.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">target</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> and is not of the same type as the current permission.","pos":[0,156],"source":"The <code>target</code> parameter is not <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> and is not of the same type as the current permission."},{"content":"-or-       The two permissions are not equal and one is a subset of the other.","pos":[163,241]}]},{"pos":[30342,30390],"content":"Gets or sets the version number of the identity.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the version number of the identity.","pos":[0,48]}]},{"pos":[30509,30537],"content":"The version of the identity.","needQuote":true,"needEscape":true,"nodes":[{"content":"The version of the identity.","pos":[0,28]}]},{"pos":[30732,30813],"content":"The property value cannot be retrieved because it contains an ambiguous identity.","needQuote":true,"needEscape":true,"nodes":[{"content":"The property value cannot be retrieved because it contains an ambiguous identity.","pos":[0,81]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Permissions.StrongNameIdentityPermission\n  id: StrongNameIdentityPermission\n  children:\n  - System.Security.Permissions.StrongNameIdentityPermission.#ctor(System.Security.Permissions.PermissionState)\n  - System.Security.Permissions.StrongNameIdentityPermission.#ctor(System.Security.Permissions.StrongNamePublicKeyBlob,System.String,System.Version)\n  - System.Security.Permissions.StrongNameIdentityPermission.Copy\n  - System.Security.Permissions.StrongNameIdentityPermission.FromXml(System.Security.SecurityElement)\n  - System.Security.Permissions.StrongNameIdentityPermission.Intersect(System.Security.IPermission)\n  - System.Security.Permissions.StrongNameIdentityPermission.IsSubsetOf(System.Security.IPermission)\n  - System.Security.Permissions.StrongNameIdentityPermission.Name\n  - System.Security.Permissions.StrongNameIdentityPermission.PublicKey\n  - System.Security.Permissions.StrongNameIdentityPermission.ToXml\n  - System.Security.Permissions.StrongNameIdentityPermission.Union(System.Security.IPermission)\n  - System.Security.Permissions.StrongNameIdentityPermission.Version\n  langs:\n  - csharp\n  name: StrongNameIdentityPermission\n  nameWithType: StrongNameIdentityPermission\n  fullName: System.Security.Permissions.StrongNameIdentityPermission\n  type: Class\n  summary: Defines the identity permission for strong names. This class cannot be inherited.\n  remarks: \"> [!IMPORTANT]\\n>  Starting with the [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)], identity permissions are not used.  \\n>   \\n>  In the .NET Framework versions 1.0 and 1.1, identity permissions cannot have an <xref:System.Security.Permissions.PermissionState> permission state value. In the .NET Framework version 2.0 and later, identity permissions can have any permission state value.  This means that in version 2.0 and later versions, identity permissions have the same behavior as permissions that implement the <xref:System.Security.Permissions.IUnrestrictedPermission> interface. That is, a demand for an identity always succeeds, regardless of the identity of the assembly, if the assembly has been granted full trust.  \\n  \\n Use StrongNameIdentityPermission to confirm that the calling code is in a particular strong-named code assembly. Full demands for StrongNameIdentityPermission succeed only if all the assemblies in the stack have the correct evidence to satisfy the demand. Link demands that use the <xref:System.Security.Permissions.StrongNameIdentityPermissionAttribute> attribute succeed only if the immediate caller has the correct evidence.  \\n  \\n A strong name identity is based on a cryptographic public key called a binary large object (BLOB),  which is optionally combined with the name and version of a specific assembly. The key defines a unique namespace and provides strong verification that the name is genuine, because the definition of the name must be in an assembly that is signed by the corresponding private key.  \\n  \\n Note that the validity of the strong name key is not dependent on a trust relationship or on any certificate necessarily being issued for the key.  \\n  \\n In the .NET Framework versions 1.0 and 1.1, demands on the identity permissions are effective even when the calling assembly is fully trusted. That is, even if the calling assembly has full trust, a demand for an identity permission fails if the assembly does not meet the demanded criteria. In the .NET Framework version 2.0 and later, demands for identity permissions are ineffective if the calling assembly has full trust. This ensures consistency for all permissions and eliminates the treatment of identity permissions as a special case.  \\n  \\n For a complete description of strong names, see the <xref:System.Security.Policy.StrongName> reference page. For more information about strong-named assemblies, see [Strong-Named Assemblies](~/add/includes/ajax-current-ext-md.md).  \\n  \\n The StrongNameIdentityPermission class is used to define strong-name requirements for accessing the public members of a type. The <xref:System.Security.Permissions.StrongNameIdentityPermissionAttribute> attribute can be used to define strong-name requirements at the assembly level. In the .NET Framework version 2.0 and later, you can also use the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute to specify that all nonpublic types in that assembly are visible to another assembly. For more information, see [Friend Assemblies](~/add/includes/ajax-current-ext-md.md).\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class StrongNameIdentityPermission : System.Security.CodeAccessPermission\n  inheritance:\n  - System.Object\n  - System.Security.CodeAccessPermission\n  implements: []\n  inheritedMembers:\n  - System.Security.CodeAccessPermission.Assert\n  - System.Security.CodeAccessPermission.Demand\n  - System.Security.CodeAccessPermission.Deny\n  - System.Security.CodeAccessPermission.Equals(System.Object)\n  - System.Security.CodeAccessPermission.GetHashCode\n  - System.Security.CodeAccessPermission.PermitOnly\n  - System.Security.CodeAccessPermission.RevertAll\n  - System.Security.CodeAccessPermission.RevertAssert\n  - System.Security.CodeAccessPermission.RevertDeny\n  - System.Security.CodeAccessPermission.RevertPermitOnly\n  - System.Security.CodeAccessPermission.ToString\n  platform:\n  - net462\n- uid: System.Security.Permissions.StrongNameIdentityPermission.#ctor(System.Security.Permissions.PermissionState)\n  id: '#ctor(System.Security.Permissions.PermissionState)'\n  parent: System.Security.Permissions.StrongNameIdentityPermission\n  langs:\n  - csharp\n  name: StrongNameIdentityPermission(PermissionState)\n  nameWithType: StrongNameIdentityPermission.StrongNameIdentityPermission(PermissionState)\n  fullName: System.Security.Permissions.StrongNameIdentityPermission.StrongNameIdentityPermission(PermissionState)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Initializes a new instance of the <xref href=\"System.Security.Permissions.StrongNameIdentityPermission\"></xref> class with the specified <xref href=\"System.Security.Permissions.PermissionState\"></xref>.\n  remarks: \"Creates either a fully restricted (`None`) or `Unrestricted` permission.  \\n  \\n> [!NOTE]\\n>  In the .NET Framework versions 1.0 and 1.1, identity permissions cannot have an <xref:System.Security.Permissions.PermissionState> permission state value. In the .NET Framework version 2.0 and later, identity permissions can have any permission state value.  This means that in version 2.0 and later versions, identity permissions have the same behavior as permissions that implement the <xref:System.Security.Permissions.IUnrestrictedPermission> interface. That is, a demand for an identity always succeeds, regardless of the identity of the assembly, if the assembly has been granted full trust.  \\n  \\n In the .NET Framework versions 1.0 and 1.1, demands on the identity permissions are effective, even when the calling assembly is fully trusted. That is, although the calling assembly has full trust, a demand for an identity permission fails if the assembly does not meet the demanded criteria. In the .NET Framework version 2.0 and later, demands for identity permissions are ineffective if the calling assembly has full trust. This assures consistency for all permissions, eliminating the treatment of identity permissions as a special case.  \\n  \\n Use this constructor with a permission state value of <xref:System.Security.Permissions.PermissionState> to create an identity permission that matches no strong names. If you subsequently set the <xref:System.Security.Permissions.StrongNameIdentityPermission.Name%2A> and <xref:System.Security.Permissions.StrongNameIdentityPermission.Version%2A> properties, a specific strong name identity can be represented by the permission.\"\n  example:\n  - \"The following code example shows the use of the StrongNameIdentityPermission constructor.  \\n  \\n [!code-vb[System.Security.Permissions.StrongNameIdentityPermission#7](~/add/codesnippet/visualbasic/ecc5c20f-4468-431e-a2f0-_1.vb)]\\n [!code-cpp[System.Security.Permissions.StrongNameIdentityPermission#7](~/add/codesnippet/cpp/ecc5c20f-4468-431e-a2f0-_1.cpp)]\\n [!code-cs[System.Security.Permissions.StrongNameIdentityPermission#7](~/add/codesnippet/csharp/ecc5c20f-4468-431e-a2f0-_1.cs)]\"\n  syntax:\n    content: public StrongNameIdentityPermission (System.Security.Permissions.PermissionState state);\n    parameters:\n    - id: state\n      type: System.Security.Permissions.PermissionState\n      description: One of the <xref href=\"System.Security.Permissions.PermissionState\"></xref> values.\n  overload: System.Security.Permissions.StrongNameIdentityPermission.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>state</code> parameter is not a valid value of <xref href=\"System.Security.Permissions.PermissionState\"></xref>.\n  platform:\n  - net462\n- uid: System.Security.Permissions.StrongNameIdentityPermission.#ctor(System.Security.Permissions.StrongNamePublicKeyBlob,System.String,System.Version)\n  id: '#ctor(System.Security.Permissions.StrongNamePublicKeyBlob,System.String,System.Version)'\n  parent: System.Security.Permissions.StrongNameIdentityPermission\n  langs:\n  - csharp\n  name: StrongNameIdentityPermission(StrongNamePublicKeyBlob,String,Version)\n  nameWithType: StrongNameIdentityPermission.StrongNameIdentityPermission(StrongNamePublicKeyBlob,String,Version)\n  fullName: System.Security.Permissions.StrongNameIdentityPermission.StrongNameIdentityPermission(StrongNamePublicKeyBlob,String,Version)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Initializes a new instance of the <xref href=\"System.Security.Permissions.StrongNameIdentityPermission\"></xref> class for the specified strong name identity.\n  remarks: \"The `name` and `version` parameters can be `null` only when the public key is used to identify the assembly. An empty string (\\\"\\\") should not be used in place of `null`. If `name` is an empty string, an <xref:System.ArgumentException> is thrown.  \\n  \\n For more information on names and version numbers of assemblies, see [Strong-Named Assemblies](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"The following code example shows the use of the StrongNameIdentityPermission constructor.  \\n  \\n [!code-vb[System.Security.Permissions.StrongNameIdentityPermission#8](~/add/codesnippet/visualbasic/f67888ca-a49f-49ea-a115-_1.vb)]\\n [!code-cpp[System.Security.Permissions.StrongNameIdentityPermission#8](~/add/codesnippet/cpp/f67888ca-a49f-49ea-a115-_1.cpp)]\\n [!code-cs[System.Security.Permissions.StrongNameIdentityPermission#8](~/add/codesnippet/csharp/f67888ca-a49f-49ea-a115-_1.cs)]\"\n  syntax:\n    content: public StrongNameIdentityPermission (System.Security.Permissions.StrongNamePublicKeyBlob blob, string name, Version version);\n    parameters:\n    - id: blob\n      type: System.Security.Permissions.StrongNamePublicKeyBlob\n      description: The public key defining the strong name identity namespace.\n    - id: name\n      type: System.String\n      description: The simple name part of the strong name identity. This corresponds to the name of the assembly.\n    - id: version\n      type: System.Version\n      description: The version number of the identity.\n  overload: System.Security.Permissions.StrongNameIdentityPermission.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>blob</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>name</code> parameter is an empty string (\"\").\n  platform:\n  - net462\n- uid: System.Security.Permissions.StrongNameIdentityPermission.Copy\n  id: Copy\n  parent: System.Security.Permissions.StrongNameIdentityPermission\n  langs:\n  - csharp\n  name: Copy()\n  nameWithType: StrongNameIdentityPermission.Copy()\n  fullName: System.Security.Permissions.StrongNameIdentityPermission.Copy()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Creates and returns an identical copy of the current permission.\n  remarks: A copy of a permission represents the same access to resources as the original permission.\n  example:\n  - \"The following code example shows the behavior of the Copy method. This example is part of a larger example provided for the <xref:System.Security.Permissions.StrongNameIdentityPermission> class. The best use for this example is to build and execute the entire example, and view its output.  \\n  \\n> [!NOTE]\\n>  The code example is intended to show the behavior of the method, not to demonstrate its use. In general, the methods of permission classes are used by the security infrastructure; they are not typically used in applications.  \\n  \\n [!code-vb[System.Security.Permissions.StrongNameIdentityPermission#5](~/add/codesnippet/visualbasic/m-system.security.permis_15_1.vb)]\\n [!code-cpp[System.Security.Permissions.StrongNameIdentityPermission#5](~/add/codesnippet/cpp/m-system.security.permis_15_1.cpp)]\\n [!code-cs[System.Security.Permissions.StrongNameIdentityPermission#5](~/add/codesnippet/csharp/m-system.security.permis_15_1.cs)]\"\n  syntax:\n    content: public override System.Security.IPermission Copy ();\n    parameters: []\n    return:\n      type: System.Security.IPermission\n      description: A copy of the current permission.\n  overload: System.Security.Permissions.StrongNameIdentityPermission.Copy*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Permissions.StrongNameIdentityPermission.FromXml(System.Security.SecurityElement)\n  id: FromXml(System.Security.SecurityElement)\n  parent: System.Security.Permissions.StrongNameIdentityPermission\n  langs:\n  - csharp\n  name: FromXml(SecurityElement)\n  nameWithType: StrongNameIdentityPermission.FromXml(SecurityElement)\n  fullName: System.Security.Permissions.StrongNameIdentityPermission.FromXml(SecurityElement)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Reconstructs a permission with a specified state from an XML encoding.\n  remarks: This method is not used by application code.\n  example:\n  - \"The following code example shows the behavior of the FromXml method. This example is part of a larger example provided for the <xref:System.Security.Permissions.StrongNameIdentityPermission> class. The best use for this example is to build and execute the entire example, and view its output.  \\n  \\n> [!NOTE]\\n>  The code example is intended to show the behavior of the method, not to demonstrate its use. In general, the methods of permission classes are used by the security infrastructure; they are not typically used in applications.  \\n  \\n [!code-vb[System.Security.Permissions.StrongNameIdentityPermission#6](~/add/codesnippet/visualbasic/ed9c932c-08d5-452f-8a11-_1.vb)]\\n [!code-cpp[System.Security.Permissions.StrongNameIdentityPermission#6](~/add/codesnippet/cpp/ed9c932c-08d5-452f-8a11-_1.cpp)]\\n [!code-cs[System.Security.Permissions.StrongNameIdentityPermission#6](~/add/codesnippet/csharp/ed9c932c-08d5-452f-8a11-_1.cs)]\"\n  syntax:\n    content: public override void FromXml (System.Security.SecurityElement e);\n    parameters:\n    - id: e\n      type: System.Security.SecurityElement\n      description: The XML encoding to use to reconstruct the permission.\n  overload: System.Security.Permissions.StrongNameIdentityPermission.FromXml*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>e</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>e</code> parameter is not a valid permission element.  \\n  \\n -or-  \\n  \\n The <code>e</code> parameter's version number is not valid.\"\n  platform:\n  - net462\n- uid: System.Security.Permissions.StrongNameIdentityPermission.Intersect(System.Security.IPermission)\n  id: Intersect(System.Security.IPermission)\n  parent: System.Security.Permissions.StrongNameIdentityPermission\n  langs:\n  - csharp\n  name: Intersect(IPermission)\n  nameWithType: StrongNameIdentityPermission.Intersect(IPermission)\n  fullName: System.Security.Permissions.StrongNameIdentityPermission.Intersect(IPermission)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Creates and returns a permission that is the intersection of the current permission and the specified permission.\n  remarks: \"The intersection of two permissions is a permission that describes the set of operations they both describe in common. Only a demand that passes both original permissions will pass the intersection.  \\n  \\n The intersection of two identical strong name identity permissions is the same permission. The intersection of two different (not wildcard) expressions is an empty permission. The intersection of a wildcard expression and a matching strong name is the strong name. The intersection of two wildcard expressions that match is the longer, more specific of the two expressions.\"\n  example:\n  - \"The following code example shows the results of the use of the Intersect method, not how to use the method. This example is part of a larger example provided for the <xref:System.Security.Permissions.StrongNameIdentityPermission> class. The best use for this example is to build and execute the entire example, and view its output.  \\n  \\n> [!NOTE]\\n>  The code example is intended to show the behavior of the method, not to demonstrate its use. In general, the methods of permission classes are used by the security infrastructure; they are not typically used in applications.  \\n  \\n [!code-vb[System.Security.Permissions.StrongNameIdentityPermission#4](~/add/codesnippet/visualbasic/fc41bc4b-3965-4525-8b6a-_1.vb)]\\n [!code-cpp[System.Security.Permissions.StrongNameIdentityPermission#4](~/add/codesnippet/cpp/fc41bc4b-3965-4525-8b6a-_1.cpp)]\\n [!code-cs[System.Security.Permissions.StrongNameIdentityPermission#4](~/add/codesnippet/csharp/fc41bc4b-3965-4525-8b6a-_1.cs)]\"\n  syntax:\n    content: public override System.Security.IPermission Intersect (System.Security.IPermission target);\n    parameters:\n    - id: target\n      type: System.Security.IPermission\n      description: A permission to intersect with the current permission. It must be of the same type as the current permission.\n    return:\n      type: System.Security.IPermission\n      description: A new permission that represents the intersection of the current permission and the specified permission, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if the intersection is empty.\n  overload: System.Security.Permissions.StrongNameIdentityPermission.Intersect*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>target</code> parameter is not <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> and is not of the same type as the current permission.\n  platform:\n  - net462\n- uid: System.Security.Permissions.StrongNameIdentityPermission.IsSubsetOf(System.Security.IPermission)\n  id: IsSubsetOf(System.Security.IPermission)\n  parent: System.Security.Permissions.StrongNameIdentityPermission\n  langs:\n  - csharp\n  name: IsSubsetOf(IPermission)\n  nameWithType: StrongNameIdentityPermission.IsSubsetOf(IPermission)\n  fullName: System.Security.Permissions.StrongNameIdentityPermission.IsSubsetOf(IPermission)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Determines whether the current permission is a subset of the specified permission.\n  remarks: The current permission is a subset of the specified permission if the current permission specifies a set of operations that is wholly contained by the specified permission. For example, the other properties being equal, an identity with the <xref:System.Security.Permissions.StrongNameIdentityPermission.Name%2A> property containing the wildcard expression MyCompany.MyDepartment.* is identified as a subset of an identity with the <xref:System.Security.Permissions.StrongNameIdentityPermission.Name%2A> property MyCompany.MyDepartment.MyFile.\n  example:\n  - \"The following code example shows the results of the use of the IsSubsetOf method, not how to use the method. This example is part of a larger example provided for the <xref:System.Security.Permissions.StrongNameIdentityPermission> class. The best use for this example is to build and execute the entire example, and view its output.  \\n  \\n> [!NOTE]\\n>  The code example is intended to show the behavior of the method, not to demonstrate its use. In general, the methods of permission classes are used by the security infrastructure; they are not typically used in applications.  \\n  \\n [!code-vb[System.Security.Permissions.StrongNameIdentityPermission#2](~/add/codesnippet/visualbasic/e4452cd4-0b1f-49b1-baf5-_1.vb)]\\n [!code-cpp[System.Security.Permissions.StrongNameIdentityPermission#2](~/add/codesnippet/cpp/e4452cd4-0b1f-49b1-baf5-_1.cpp)]\\n [!code-cs[System.Security.Permissions.StrongNameIdentityPermission#2](~/add/codesnippet/csharp/e4452cd4-0b1f-49b1-baf5-_1.cs)]\"\n  syntax:\n    content: public override bool IsSubsetOf (System.Security.IPermission target);\n    parameters:\n    - id: target\n      type: System.Security.IPermission\n      description: A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current permission is a subset of the specified permission; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Permissions.StrongNameIdentityPermission.IsSubsetOf*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>target</code> parameter is not <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> and is not of the same type as the current permission.\n  platform:\n  - net462\n- uid: System.Security.Permissions.StrongNameIdentityPermission.Name\n  id: Name\n  parent: System.Security.Permissions.StrongNameIdentityPermission\n  langs:\n  - csharp\n  name: Name\n  nameWithType: StrongNameIdentityPermission.Name\n  fullName: System.Security.Permissions.StrongNameIdentityPermission.Name\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Gets or sets the simple name portion of the strong name identity.\n  remarks: The value of the Name property can be an exact name or can be modified by a wildcard character in the final position; for example, both MyCompany.MyDepartment.MyFile and MyCompany.MyDepartment.* are valid names. If you attempt to set the Name property to an empty string (\"\"), an <xref:System.ArgumentException> is thrown.\n  syntax:\n    content: public string Name { get; set; }\n    return:\n      type: System.String\n      description: The simple name of the identity.\n  overload: System.Security.Permissions.StrongNameIdentityPermission.Name*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The value is an empty string (\"\").\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The property value cannot be retrieved because it contains an ambiguous identity.\n  platform:\n  - net462\n- uid: System.Security.Permissions.StrongNameIdentityPermission.PublicKey\n  id: PublicKey\n  parent: System.Security.Permissions.StrongNameIdentityPermission\n  langs:\n  - csharp\n  name: PublicKey\n  nameWithType: StrongNameIdentityPermission.PublicKey\n  fullName: System.Security.Permissions.StrongNameIdentityPermission.PublicKey\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Gets or sets the public key blob that defines the strong name identity namespace.\n  syntax:\n    content: public System.Security.Permissions.StrongNamePublicKeyBlob PublicKey { get; set; }\n    return:\n      type: System.Security.Permissions.StrongNamePublicKeyBlob\n      description: A <xref href=\"System.Security.Permissions.StrongNamePublicKeyBlob\"></xref> that contains the public key of the identity, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if there is no key.\n  overload: System.Security.Permissions.StrongNameIdentityPermission.PublicKey*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The property value is set to <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The property value cannot be retrieved because it contains an ambiguous identity.\n  platform:\n  - net462\n- uid: System.Security.Permissions.StrongNameIdentityPermission.ToXml\n  id: ToXml\n  parent: System.Security.Permissions.StrongNameIdentityPermission\n  langs:\n  - csharp\n  name: ToXml()\n  nameWithType: StrongNameIdentityPermission.ToXml()\n  fullName: System.Security.Permissions.StrongNameIdentityPermission.ToXml()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Creates an XML encoding of the permission and its current state.\n  remarks: This method is not typically used by application code.\n  example:\n  - \"The following code example shows the behavior of the ToXml method.  \\n  \\n> [!NOTE]\\n>  The code example is intended to show the behavior of the method, not to demonstrate its use. In general, the methods of permission classes are used by the security infrastructure; they are not typically used in applications.  \\n  \\n [!code-vb[System.Security.Permissions.StrongNameIdentityPermission#6](~/add/codesnippet/visualbasic/m-system.security.permis_20_1.vb)]\\n [!code-cpp[System.Security.Permissions.StrongNameIdentityPermission#6](~/add/codesnippet/cpp/m-system.security.permis_20_1.cpp)]\\n [!code-cs[System.Security.Permissions.StrongNameIdentityPermission#6](~/add/codesnippet/csharp/m-system.security.permis_20_1.cs)]\"\n  syntax:\n    content: public override System.Security.SecurityElement ToXml ();\n    parameters: []\n    return:\n      type: System.Security.SecurityElement\n      description: An XML encoding of the permission, including any state information.\n  overload: System.Security.Permissions.StrongNameIdentityPermission.ToXml*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Permissions.StrongNameIdentityPermission.Union(System.Security.IPermission)\n  id: Union(System.Security.IPermission)\n  parent: System.Security.Permissions.StrongNameIdentityPermission\n  langs:\n  - csharp\n  name: Union(IPermission)\n  nameWithType: StrongNameIdentityPermission.Union(IPermission)\n  fullName: System.Security.Permissions.StrongNameIdentityPermission.Union(IPermission)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Creates a permission that is the union of the current permission and the specified permission.\n  remarks: \"The result of a call to Union is a permission that represents all the operations represented by both the current permission and the specified permission. Any demand that passes either permission passes their union.  \\n  \\n The union of a permission and `null` is the permission that is not `null`. The union of a permission and a subset of that permission is the permission that contains the other. Any other combination results in an <xref:System.ArgumentException> exception being thrown.\"\n  example:\n  - \"The following code example shows the results of the use of the Union method, not how to use the method. This example is part of a larger example provided for the <xref:System.Security.Permissions.StrongNameIdentityPermission> class. The best use for this example is to build and execute the entire example, and view its output.  \\n  \\n> [!NOTE]\\n>  The code example is intended to show the behavior of the method, not to demonstrate its use. In general, the methods of permission classes are used by the security infrastructure; they are not typically used in applications.  \\n  \\n [!code-vb[System.Security.Permissions.StrongNameIdentityPermission#3](~/add/codesnippet/visualbasic/3b1a04e0-7bea-4a40-8e18-_1.vb)]\\n [!code-cpp[System.Security.Permissions.StrongNameIdentityPermission#3](~/add/codesnippet/cpp/3b1a04e0-7bea-4a40-8e18-_1.cpp)]\\n [!code-cs[System.Security.Permissions.StrongNameIdentityPermission#3](~/add/codesnippet/csharp/3b1a04e0-7bea-4a40-8e18-_1.cs)]\"\n  syntax:\n    content: public override System.Security.IPermission Union (System.Security.IPermission target);\n    parameters:\n    - id: target\n      type: System.Security.IPermission\n      description: A permission to combine with the current permission. It must be of the same type as the current permission.\n    return:\n      type: System.Security.IPermission\n      description: A new permission that represents the union of the current permission and the specified permission.\n  overload: System.Security.Permissions.StrongNameIdentityPermission.Union*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>target</code> parameter is not <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref> and is not of the same type as the current permission.  \\n  \\n -or-  \\n  \\n The two permissions are not equal and one is a subset of the other.\"\n  platform:\n  - net462\n- uid: System.Security.Permissions.StrongNameIdentityPermission.Version\n  id: Version\n  parent: System.Security.Permissions.StrongNameIdentityPermission\n  langs:\n  - csharp\n  name: Version\n  nameWithType: StrongNameIdentityPermission.Version\n  fullName: System.Security.Permissions.StrongNameIdentityPermission.Version\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Gets or sets the version number of the identity.\n  syntax:\n    content: public Version Version { get; set; }\n    return:\n      type: System.Version\n      description: The version of the identity.\n  overload: System.Security.Permissions.StrongNameIdentityPermission.Version*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The property value cannot be retrieved because it contains an ambiguous identity.\n  platform:\n  - net462\nreferences:\n- uid: System.Security.CodeAccessPermission\n  isExternal: false\n  name: System.Security.CodeAccessPermission\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.NotSupportedException\n  isExternal: true\n  name: System.NotSupportedException\n- uid: System.Security.Permissions.StrongNameIdentityPermission.#ctor(System.Security.Permissions.PermissionState)\n  parent: System.Security.Permissions.StrongNameIdentityPermission\n  isExternal: false\n  name: StrongNameIdentityPermission(PermissionState)\n  nameWithType: StrongNameIdentityPermission.StrongNameIdentityPermission(PermissionState)\n  fullName: System.Security.Permissions.StrongNameIdentityPermission.StrongNameIdentityPermission(PermissionState)\n- uid: System.Security.Permissions.PermissionState\n  parent: System.Security.Permissions\n  isExternal: false\n  name: PermissionState\n  nameWithType: PermissionState\n  fullName: System.Security.Permissions.PermissionState\n- uid: System.Security.Permissions.StrongNameIdentityPermission.#ctor(System.Security.Permissions.StrongNamePublicKeyBlob,System.String,System.Version)\n  parent: System.Security.Permissions.StrongNameIdentityPermission\n  isExternal: false\n  name: StrongNameIdentityPermission(StrongNamePublicKeyBlob,String,Version)\n  nameWithType: StrongNameIdentityPermission.StrongNameIdentityPermission(StrongNamePublicKeyBlob,String,Version)\n  fullName: System.Security.Permissions.StrongNameIdentityPermission.StrongNameIdentityPermission(StrongNamePublicKeyBlob,String,Version)\n- uid: System.Security.Permissions.StrongNamePublicKeyBlob\n  parent: System.Security.Permissions\n  isExternal: false\n  name: StrongNamePublicKeyBlob\n  nameWithType: StrongNamePublicKeyBlob\n  fullName: System.Security.Permissions.StrongNamePublicKeyBlob\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Version\n  parent: System\n  isExternal: true\n  name: Version\n  nameWithType: Version\n  fullName: System.Version\n- uid: System.Security.Permissions.StrongNameIdentityPermission.Copy\n  parent: System.Security.Permissions.StrongNameIdentityPermission\n  isExternal: false\n  name: Copy()\n  nameWithType: StrongNameIdentityPermission.Copy()\n  fullName: System.Security.Permissions.StrongNameIdentityPermission.Copy()\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n- uid: System.Security.Permissions.StrongNameIdentityPermission.FromXml(System.Security.SecurityElement)\n  parent: System.Security.Permissions.StrongNameIdentityPermission\n  isExternal: false\n  name: FromXml(SecurityElement)\n  nameWithType: StrongNameIdentityPermission.FromXml(SecurityElement)\n  fullName: System.Security.Permissions.StrongNameIdentityPermission.FromXml(SecurityElement)\n- uid: System.Security.SecurityElement\n  parent: System.Security\n  isExternal: false\n  name: SecurityElement\n  nameWithType: SecurityElement\n  fullName: System.Security.SecurityElement\n- uid: System.Security.Permissions.StrongNameIdentityPermission.Intersect(System.Security.IPermission)\n  parent: System.Security.Permissions.StrongNameIdentityPermission\n  isExternal: false\n  name: Intersect(IPermission)\n  nameWithType: StrongNameIdentityPermission.Intersect(IPermission)\n  fullName: System.Security.Permissions.StrongNameIdentityPermission.Intersect(IPermission)\n- uid: System.Security.Permissions.StrongNameIdentityPermission.IsSubsetOf(System.Security.IPermission)\n  parent: System.Security.Permissions.StrongNameIdentityPermission\n  isExternal: false\n  name: IsSubsetOf(IPermission)\n  nameWithType: StrongNameIdentityPermission.IsSubsetOf(IPermission)\n  fullName: System.Security.Permissions.StrongNameIdentityPermission.IsSubsetOf(IPermission)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Permissions.StrongNameIdentityPermission.Name\n  parent: System.Security.Permissions.StrongNameIdentityPermission\n  isExternal: false\n  name: Name\n  nameWithType: StrongNameIdentityPermission.Name\n  fullName: System.Security.Permissions.StrongNameIdentityPermission.Name\n- uid: System.Security.Permissions.StrongNameIdentityPermission.PublicKey\n  parent: System.Security.Permissions.StrongNameIdentityPermission\n  isExternal: false\n  name: PublicKey\n  nameWithType: StrongNameIdentityPermission.PublicKey\n  fullName: System.Security.Permissions.StrongNameIdentityPermission.PublicKey\n- uid: System.Security.Permissions.StrongNameIdentityPermission.ToXml\n  parent: System.Security.Permissions.StrongNameIdentityPermission\n  isExternal: false\n  name: ToXml()\n  nameWithType: StrongNameIdentityPermission.ToXml()\n  fullName: System.Security.Permissions.StrongNameIdentityPermission.ToXml()\n- uid: System.Security.Permissions.StrongNameIdentityPermission.Union(System.Security.IPermission)\n  parent: System.Security.Permissions.StrongNameIdentityPermission\n  isExternal: false\n  name: Union(IPermission)\n  nameWithType: StrongNameIdentityPermission.Union(IPermission)\n  fullName: System.Security.Permissions.StrongNameIdentityPermission.Union(IPermission)\n- uid: System.Security.Permissions.StrongNameIdentityPermission.Version\n  parent: System.Security.Permissions.StrongNameIdentityPermission\n  isExternal: false\n  name: Version\n  nameWithType: StrongNameIdentityPermission.Version\n  fullName: System.Security.Permissions.StrongNameIdentityPermission.Version\n- uid: System.Security.Permissions.StrongNameIdentityPermission.#ctor*\n  parent: System.Security.Permissions.StrongNameIdentityPermission\n  isExternal: false\n  name: StrongNameIdentityPermission\n  nameWithType: StrongNameIdentityPermission.StrongNameIdentityPermission\n- uid: System.Security.Permissions.StrongNameIdentityPermission.Copy*\n  parent: System.Security.Permissions.StrongNameIdentityPermission\n  isExternal: false\n  name: Copy\n  nameWithType: StrongNameIdentityPermission.Copy\n- uid: System.Security.Permissions.StrongNameIdentityPermission.FromXml*\n  parent: System.Security.Permissions.StrongNameIdentityPermission\n  isExternal: false\n  name: FromXml\n  nameWithType: StrongNameIdentityPermission.FromXml\n- uid: System.Security.Permissions.StrongNameIdentityPermission.Intersect*\n  parent: System.Security.Permissions.StrongNameIdentityPermission\n  isExternal: false\n  name: Intersect\n  nameWithType: StrongNameIdentityPermission.Intersect\n- uid: System.Security.Permissions.StrongNameIdentityPermission.IsSubsetOf*\n  parent: System.Security.Permissions.StrongNameIdentityPermission\n  isExternal: false\n  name: IsSubsetOf\n  nameWithType: StrongNameIdentityPermission.IsSubsetOf\n- uid: System.Security.Permissions.StrongNameIdentityPermission.Name*\n  parent: System.Security.Permissions.StrongNameIdentityPermission\n  isExternal: false\n  name: Name\n  nameWithType: StrongNameIdentityPermission.Name\n- uid: System.Security.Permissions.StrongNameIdentityPermission.PublicKey*\n  parent: System.Security.Permissions.StrongNameIdentityPermission\n  isExternal: false\n  name: PublicKey\n  nameWithType: StrongNameIdentityPermission.PublicKey\n- uid: System.Security.Permissions.StrongNameIdentityPermission.ToXml*\n  parent: System.Security.Permissions.StrongNameIdentityPermission\n  isExternal: false\n  name: ToXml\n  nameWithType: StrongNameIdentityPermission.ToXml\n- uid: System.Security.Permissions.StrongNameIdentityPermission.Union*\n  parent: System.Security.Permissions.StrongNameIdentityPermission\n  isExternal: false\n  name: Union\n  nameWithType: StrongNameIdentityPermission.Union\n- uid: System.Security.Permissions.StrongNameIdentityPermission.Version*\n  parent: System.Security.Permissions.StrongNameIdentityPermission\n  isExternal: false\n  name: Version\n  nameWithType: StrongNameIdentityPermission.Version\n"}