{"nodes":[{"pos":[3344,3356],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[8349,8361],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[9023,9035],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[9576,9588],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[10676,10688],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[11393,11405],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[12083,12095],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[12884,12896],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[13483,13495],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[13554,13566],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[14197,14209],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[14270,14282],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[14809,14821],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[15488,15500],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[16176,16188],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[16247,16259],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[17005,17017],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[17840,17852],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[18546,18558],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[19130,19142],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[19199,19211],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[19838,19850],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[19900,19912],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[20516,20528],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[20574,20586],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[21144,21156],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[21215,21227],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[21844,21856],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[22635,22647],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[23534,23546],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[24431,24443],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[24504,24516],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[25324,25336],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[26117,26129],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[26974,26986],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[27757,27769],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[27826,27838],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[28624,28636],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[28695,28707],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[29491,29503],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[29560,29572],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[30404,30416],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[30478,30490],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[31238,31250],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[31997,32009],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[32804,32816],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[32874,32886],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[33661,33673],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.FreezableCollection`1\n  id: FreezableCollection`1\n  children:\n  - System.Windows.FreezableCollection`1.#ctor\n  - System.Windows.FreezableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})\n  - System.Windows.FreezableCollection`1.#ctor(System.Int32)\n  - System.Windows.FreezableCollection`1.Add(`0)\n  - System.Windows.FreezableCollection`1.Clear\n  - System.Windows.FreezableCollection`1.Clone\n  - System.Windows.FreezableCollection`1.CloneCore(System.Windows.Freezable)\n  - System.Windows.FreezableCollection`1.CloneCurrentValue\n  - System.Windows.FreezableCollection`1.CloneCurrentValueCore(System.Windows.Freezable)\n  - System.Windows.FreezableCollection`1.Contains(`0)\n  - System.Windows.FreezableCollection`1.CopyTo(`0[],System.Int32)\n  - System.Windows.FreezableCollection`1.Count\n  - System.Windows.FreezableCollection`1.CreateInstanceCore\n  - System.Windows.FreezableCollection`1.FreezeCore(System.Boolean)\n  - System.Windows.FreezableCollection`1.GetAsFrozenCore(System.Windows.Freezable)\n  - System.Windows.FreezableCollection`1.GetCurrentValueAsFrozenCore(System.Windows.Freezable)\n  - System.Windows.FreezableCollection`1.GetEnumerator\n  - System.Windows.FreezableCollection`1.IndexOf(`0)\n  - System.Windows.FreezableCollection`1.Insert(System.Int32,`0)\n  - System.Windows.FreezableCollection`1.Item(System.Int32)\n  - System.Windows.FreezableCollection`1.Remove(`0)\n  - System.Windows.FreezableCollection`1.RemoveAt(System.Int32)\n  - System.Windows.FreezableCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly\n  - System.Windows.FreezableCollection`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator\n  - System.Windows.FreezableCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  - System.Windows.FreezableCollection`1.System#Collections#ICollection#IsSynchronized\n  - System.Windows.FreezableCollection`1.System#Collections#ICollection#SyncRoot\n  - System.Windows.FreezableCollection`1.System#Collections#IEnumerable#GetEnumerator\n  - System.Windows.FreezableCollection`1.System#Collections#IList#Add(System.Object)\n  - System.Windows.FreezableCollection`1.System#Collections#IList#Contains(System.Object)\n  - System.Windows.FreezableCollection`1.System#Collections#IList#IndexOf(System.Object)\n  - System.Windows.FreezableCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)\n  - System.Windows.FreezableCollection`1.System#Collections#IList#IsFixedSize\n  - System.Windows.FreezableCollection`1.System#Collections#IList#IsReadOnly\n  - System.Windows.FreezableCollection`1.System#Collections#IList#Item(System.Int32)\n  - System.Windows.FreezableCollection`1.System#Collections#IList#Remove(System.Object)\n  langs:\n  - csharp\n  name: FreezableCollection<T>\n  nameWithType: FreezableCollection<T>\n  fullName: System.Windows.FreezableCollection<T>\n  type: Class\n  syntax:\n    content: 'public class FreezableCollection<T> : System.Windows.Media.Animation.Animatable, System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IList<T>, System.Collections.IList, System.Collections.Specialized.INotifyCollectionChanged, System.ComponentModel.INotifyPropertyChanged where T : DependencyObject'\n    typeParameters:\n    - id: T\n      description: To be added.\n  inheritance:\n  - System.Object\n  - System.Windows.Threading.DispatcherObject\n  - System.Windows.DependencyObject\n  - System.Windows.Freezable\n  - System.Windows.Media.Animation.Animatable\n  implements:\n  - System.Collections.Generic.ICollection<T>\n  - System.Collections.Generic.IEnumerable<T>\n  - System.Collections.Generic.IList<T>\n  - System.Collections.IList\n  - System.Collections.Specialized.INotifyCollectionChanged\n  - System.ComponentModel.INotifyPropertyChanged\n  inheritedMembers:\n  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)\n  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)\n  - System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)\n  - System.Windows.DependencyObject.DependencyObjectType\n  - System.Windows.DependencyObject.Equals(System.Object)\n  - System.Windows.DependencyObject.GetHashCode\n  - System.Windows.DependencyObject.GetLocalValueEnumerator\n  - System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)\n  - System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)\n  - System.Windows.DependencyObject.IsSealed\n  - System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)\n  - System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)\n  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)\n  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)\n  - System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)\n  - System.Windows.Freezable.CanFreeze\n  - System.Windows.Freezable.Changed\n  - System.Windows.Freezable.CreateInstance\n  - System.Windows.Freezable.Freeze\n  - System.Windows.Freezable.Freeze(System.Windows.Freezable,System.Boolean)\n  - System.Windows.Freezable.GetAsFrozen\n  - System.Windows.Freezable.GetCurrentValueAsFrozen\n  - System.Windows.Freezable.IsFrozen\n  - System.Windows.Freezable.OnChanged\n  - System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)\n  - System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject,System.Windows.DependencyProperty)\n  - System.Windows.Freezable.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  - System.Windows.Freezable.ReadPreamble\n  - System.Windows.Freezable.WritePostscript\n  - System.Windows.Freezable.WritePreamble\n  - System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)\n  - System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)\n  - System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)\n  - System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)\n  - System.Windows.Media.Animation.Animatable.GetAnimationBaseValue(System.Windows.DependencyProperty)\n  - System.Windows.Media.Animation.Animatable.HasAnimatedProperties\n  - System.Windows.Media.Animation.Animatable.ShouldSerializeStoredWeakReference(System.Windows.DependencyObject)\n  - System.Windows.Threading.DispatcherObject.CheckAccess\n  - System.Windows.Threading.DispatcherObject.Dispatcher\n  - System.Windows.Threading.DispatcherObject.VerifyAccess\n  platform:\n  - net462\n- uid: System.Windows.FreezableCollection`1.#ctor\n  id: '#ctor'\n  parent: System.Windows.FreezableCollection`1\n  langs:\n  - csharp\n  name: FreezableCollection()\n  nameWithType: FreezableCollection<T>.FreezableCollection()\n  fullName: System.Windows.FreezableCollection<T>.FreezableCollection()\n  type: Constructor\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  syntax:\n    content: public FreezableCollection ();\n    parameters: []\n  overload: System.Windows.FreezableCollection`1.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FreezableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})\n  id: '#ctor(System.Collections.Generic.IEnumerable{`0})'\n  parent: System.Windows.FreezableCollection`1\n  langs:\n  - csharp\n  name: FreezableCollection(IEnumerable<T>)\n  nameWithType: FreezableCollection<T>.FreezableCollection(IEnumerable<T>)\n  fullName: System.Windows.FreezableCollection<T>.FreezableCollection(IEnumerable<T>)\n  type: Constructor\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  syntax:\n    content: public FreezableCollection (System.Collections.Generic.IEnumerable<T> collection);\n    parameters:\n    - id: collection\n      type: System.Collections.Generic.IEnumerable{T}\n      description: To be added.\n  overload: System.Windows.FreezableCollection`1.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FreezableCollection`1.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Windows.FreezableCollection`1\n  langs:\n  - csharp\n  name: FreezableCollection(Int32)\n  nameWithType: FreezableCollection<T>.FreezableCollection(Int32)\n  fullName: System.Windows.FreezableCollection<T>.FreezableCollection(Int32)\n  type: Constructor\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  syntax:\n    content: public FreezableCollection (int capacity);\n    parameters:\n    - id: capacity\n      type: System.Int32\n      description: To be added.\n  overload: System.Windows.FreezableCollection`1.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FreezableCollection`1.Add(`0)\n  id: Add(`0)\n  parent: System.Windows.FreezableCollection`1\n  langs:\n  - csharp\n  name: Add(T)\n  nameWithType: FreezableCollection<T>.Add(T)\n  fullName: System.Windows.FreezableCollection<T>.Add(T)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  syntax:\n    content: public void Add (T value);\n    parameters:\n    - id: value\n      type: T\n      description: To be added.\n  overload: System.Windows.FreezableCollection`1.Add*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FreezableCollection`1.Clear\n  id: Clear\n  parent: System.Windows.FreezableCollection`1\n  langs:\n  - csharp\n  name: Clear()\n  nameWithType: FreezableCollection<T>.Clear()\n  fullName: System.Windows.FreezableCollection<T>.Clear()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  syntax:\n    content: public void Clear ();\n    parameters: []\n  overload: System.Windows.FreezableCollection`1.Clear*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FreezableCollection`1.Clone\n  id: Clone\n  parent: System.Windows.FreezableCollection`1\n  langs:\n  - csharp\n  name: Clone()\n  nameWithType: FreezableCollection<T>.Clone()\n  fullName: System.Windows.FreezableCollection<T>.Clone()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  syntax:\n    content: public System.Windows.FreezableCollection<T> Clone ();\n    parameters: []\n    return:\n      type: System.Windows.FreezableCollection`1\n      description: To be added.\n  overload: System.Windows.FreezableCollection`1.Clone*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FreezableCollection`1.CloneCore(System.Windows.Freezable)\n  id: CloneCore(System.Windows.Freezable)\n  parent: System.Windows.FreezableCollection`1\n  langs:\n  - csharp\n  name: CloneCore(Freezable)\n  nameWithType: FreezableCollection<T>.CloneCore(Freezable)\n  fullName: System.Windows.FreezableCollection<T>.CloneCore(Freezable)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  syntax:\n    content: protected override void CloneCore (System.Windows.Freezable source);\n    parameters:\n    - id: source\n      type: System.Windows.Freezable\n      description: To be added.\n  overload: System.Windows.FreezableCollection`1.CloneCore*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FreezableCollection`1.CloneCurrentValue\n  id: CloneCurrentValue\n  parent: System.Windows.FreezableCollection`1\n  langs:\n  - csharp\n  name: CloneCurrentValue()\n  nameWithType: FreezableCollection<T>.CloneCurrentValue()\n  fullName: System.Windows.FreezableCollection<T>.CloneCurrentValue()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  syntax:\n    content: public System.Windows.FreezableCollection<T> CloneCurrentValue ();\n    parameters: []\n    return:\n      type: System.Windows.FreezableCollection`1\n      description: To be added.\n  overload: System.Windows.FreezableCollection`1.CloneCurrentValue*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FreezableCollection`1.CloneCurrentValueCore(System.Windows.Freezable)\n  id: CloneCurrentValueCore(System.Windows.Freezable)\n  parent: System.Windows.FreezableCollection`1\n  langs:\n  - csharp\n  name: CloneCurrentValueCore(Freezable)\n  nameWithType: FreezableCollection<T>.CloneCurrentValueCore(Freezable)\n  fullName: System.Windows.FreezableCollection<T>.CloneCurrentValueCore(Freezable)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  syntax:\n    content: protected override void CloneCurrentValueCore (System.Windows.Freezable source);\n    parameters:\n    - id: source\n      type: System.Windows.Freezable\n      description: To be added.\n  overload: System.Windows.FreezableCollection`1.CloneCurrentValueCore*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FreezableCollection`1.Contains(`0)\n  id: Contains(`0)\n  parent: System.Windows.FreezableCollection`1\n  langs:\n  - csharp\n  name: Contains(T)\n  nameWithType: FreezableCollection<T>.Contains(T)\n  fullName: System.Windows.FreezableCollection<T>.Contains(T)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  syntax:\n    content: public bool Contains (T value);\n    parameters:\n    - id: value\n      type: T\n      description: To be added.\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Windows.FreezableCollection`1.Contains*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FreezableCollection`1.CopyTo(`0[],System.Int32)\n  id: CopyTo(`0[],System.Int32)\n  parent: System.Windows.FreezableCollection`1\n  langs:\n  - csharp\n  name: CopyTo(T[],Int32)\n  nameWithType: FreezableCollection<T>.CopyTo(T[],Int32)\n  fullName: System.Windows.FreezableCollection<T>.CopyTo(T[],Int32)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  syntax:\n    content: public void CopyTo (T[] array, int index);\n    parameters:\n    - id: array\n      type: T[]\n      description: To be added.\n    - id: index\n      type: System.Int32\n      description: To be added.\n  overload: System.Windows.FreezableCollection`1.CopyTo*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FreezableCollection`1.Count\n  id: Count\n  parent: System.Windows.FreezableCollection`1\n  langs:\n  - csharp\n  name: Count\n  nameWithType: FreezableCollection<T>.Count\n  fullName: System.Windows.FreezableCollection<T>.Count\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  syntax:\n    content: public int Count { get; }\n    return:\n      type: System.Int32\n      description: To be added.\n  overload: System.Windows.FreezableCollection`1.Count*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FreezableCollection`1.CreateInstanceCore\n  id: CreateInstanceCore\n  parent: System.Windows.FreezableCollection`1\n  langs:\n  - csharp\n  name: CreateInstanceCore()\n  nameWithType: FreezableCollection<T>.CreateInstanceCore()\n  fullName: System.Windows.FreezableCollection<T>.CreateInstanceCore()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  syntax:\n    content: protected override System.Windows.Freezable CreateInstanceCore ();\n    parameters: []\n    return:\n      type: System.Windows.Freezable\n      description: To be added.\n  overload: System.Windows.FreezableCollection`1.CreateInstanceCore*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FreezableCollection`1.FreezeCore(System.Boolean)\n  id: FreezeCore(System.Boolean)\n  parent: System.Windows.FreezableCollection`1\n  langs:\n  - csharp\n  name: FreezeCore(Boolean)\n  nameWithType: FreezableCollection<T>.FreezeCore(Boolean)\n  fullName: System.Windows.FreezableCollection<T>.FreezeCore(Boolean)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  syntax:\n    content: protected override bool FreezeCore (bool isChecking);\n    parameters:\n    - id: isChecking\n      type: System.Boolean\n      description: To be added.\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Windows.FreezableCollection`1.FreezeCore*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FreezableCollection`1.GetAsFrozenCore(System.Windows.Freezable)\n  id: GetAsFrozenCore(System.Windows.Freezable)\n  parent: System.Windows.FreezableCollection`1\n  langs:\n  - csharp\n  name: GetAsFrozenCore(Freezable)\n  nameWithType: FreezableCollection<T>.GetAsFrozenCore(Freezable)\n  fullName: System.Windows.FreezableCollection<T>.GetAsFrozenCore(Freezable)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  syntax:\n    content: protected override void GetAsFrozenCore (System.Windows.Freezable source);\n    parameters:\n    - id: source\n      type: System.Windows.Freezable\n      description: To be added.\n  overload: System.Windows.FreezableCollection`1.GetAsFrozenCore*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FreezableCollection`1.GetCurrentValueAsFrozenCore(System.Windows.Freezable)\n  id: GetCurrentValueAsFrozenCore(System.Windows.Freezable)\n  parent: System.Windows.FreezableCollection`1\n  langs:\n  - csharp\n  name: GetCurrentValueAsFrozenCore(Freezable)\n  nameWithType: FreezableCollection<T>.GetCurrentValueAsFrozenCore(Freezable)\n  fullName: System.Windows.FreezableCollection<T>.GetCurrentValueAsFrozenCore(Freezable)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  syntax:\n    content: protected override void GetCurrentValueAsFrozenCore (System.Windows.Freezable source);\n    parameters:\n    - id: source\n      type: System.Windows.Freezable\n      description: To be added.\n  overload: System.Windows.FreezableCollection`1.GetCurrentValueAsFrozenCore*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FreezableCollection`1.GetEnumerator\n  id: GetEnumerator\n  parent: System.Windows.FreezableCollection`1\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: FreezableCollection<T>.GetEnumerator()\n  fullName: System.Windows.FreezableCollection<T>.GetEnumerator()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  syntax:\n    content: public System.Windows.FreezableCollection<T>.Enumerator GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Windows.FreezableCollection`1.Enumerator\n      description: To be added.\n  overload: System.Windows.FreezableCollection`1.GetEnumerator*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FreezableCollection`1.IndexOf(`0)\n  id: IndexOf(`0)\n  parent: System.Windows.FreezableCollection`1\n  langs:\n  - csharp\n  name: IndexOf(T)\n  nameWithType: FreezableCollection<T>.IndexOf(T)\n  fullName: System.Windows.FreezableCollection<T>.IndexOf(T)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  syntax:\n    content: public int IndexOf (T value);\n    parameters:\n    - id: value\n      type: T\n      description: To be added.\n    return:\n      type: System.Int32\n      description: To be added.\n  overload: System.Windows.FreezableCollection`1.IndexOf*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FreezableCollection`1.Insert(System.Int32,`0)\n  id: Insert(System.Int32,`0)\n  parent: System.Windows.FreezableCollection`1\n  langs:\n  - csharp\n  name: Insert(Int32,T)\n  nameWithType: FreezableCollection<T>.Insert(Int32,T)\n  fullName: System.Windows.FreezableCollection<T>.Insert(Int32,T)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  syntax:\n    content: public void Insert (int index, T value);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: To be added.\n    - id: value\n      type: T\n      description: To be added.\n  overload: System.Windows.FreezableCollection`1.Insert*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FreezableCollection`1.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: System.Windows.FreezableCollection`1\n  langs:\n  - csharp\n  name: Item(Int32)\n  nameWithType: FreezableCollection<T>.Item(Int32)\n  fullName: System.Windows.FreezableCollection<T>.Item(Int32)\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  syntax:\n    content: public T this[int index] { get; set; }\n    parameters:\n    - id: index\n      type: System.Int32\n      description: To be added.\n    return:\n      type: T\n      description: To be added.\n  overload: System.Windows.FreezableCollection`1.Item*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FreezableCollection`1.Remove(`0)\n  id: Remove(`0)\n  parent: System.Windows.FreezableCollection`1\n  langs:\n  - csharp\n  name: Remove(T)\n  nameWithType: FreezableCollection<T>.Remove(T)\n  fullName: System.Windows.FreezableCollection<T>.Remove(T)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  syntax:\n    content: public bool Remove (T value);\n    parameters:\n    - id: value\n      type: T\n      description: To be added.\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Windows.FreezableCollection`1.Remove*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FreezableCollection`1.RemoveAt(System.Int32)\n  id: RemoveAt(System.Int32)\n  parent: System.Windows.FreezableCollection`1\n  langs:\n  - csharp\n  name: RemoveAt(Int32)\n  nameWithType: FreezableCollection<T>.RemoveAt(Int32)\n  fullName: System.Windows.FreezableCollection<T>.RemoveAt(Int32)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  syntax:\n    content: public void RemoveAt (int index);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: To be added.\n  overload: System.Windows.FreezableCollection`1.RemoveAt*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FreezableCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly\n  id: System#Collections#Generic#ICollection{T}#IsReadOnly\n  isEii: true\n  parent: System.Windows.FreezableCollection`1\n  langs:\n  - csharp\n  name: System.Collections.Generic.ICollection\n  nameWithType: FreezableCollection<T>.System.Collections.Generic.ICollection\n  fullName: System.Windows.FreezableCollection<T>.System.Collections.Generic.ICollection\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  syntax:\n    content: bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Windows.FreezableCollection`1.System#Collections#Generic#ICollection<T>#IsReadOnly*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FreezableCollection`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator\n  id: System#Collections#Generic#IEnumerable{T}#GetEnumerator\n  isEii: true\n  parent: System.Windows.FreezableCollection`1\n  langs:\n  - csharp\n  name: System.Collections.Generic.IEnumerable()\n  nameWithType: FreezableCollection<T>.System.Collections.Generic.IEnumerable()\n  fullName: System.Windows.FreezableCollection<T>.System.Collections.Generic.IEnumerable()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  syntax:\n    content: System.Collections.Generic.IEnumerator<T> IEnumerable<T>.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerator{T}\n      description: To be added.\n  overload: System.Windows.FreezableCollection`1.System#Collections#Generic#IEnumerable<T>#GetEnumerator*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FreezableCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  isEii: true\n  parent: System.Windows.FreezableCollection`1\n  langs:\n  - csharp\n  name: System.Collections.ICollection.CopyTo(Array,Int32)\n  nameWithType: FreezableCollection<T>.System.Collections.ICollection.CopyTo(Array,Int32)\n  fullName: System.Windows.FreezableCollection<T>.System.Collections.ICollection.CopyTo(Array,Int32)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  syntax:\n    content: void ICollection.CopyTo (Array array, int index);\n    parameters:\n    - id: array\n      type: System.Array\n      description: To be added.\n    - id: index\n      type: System.Int32\n      description: To be added.\n  overload: System.Windows.FreezableCollection`1.System#Collections#ICollection#CopyTo*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FreezableCollection`1.System#Collections#ICollection#IsSynchronized\n  id: System#Collections#ICollection#IsSynchronized\n  isEii: true\n  parent: System.Windows.FreezableCollection`1\n  langs:\n  - csharp\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: FreezableCollection<T>.System.Collections.ICollection.IsSynchronized\n  fullName: System.Windows.FreezableCollection<T>.System.Collections.ICollection.IsSynchronized\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  syntax:\n    content: bool System.Collections.ICollection.IsSynchronized { get; }\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Windows.FreezableCollection`1.System#Collections#ICollection#IsSynchronized*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FreezableCollection`1.System#Collections#ICollection#SyncRoot\n  id: System#Collections#ICollection#SyncRoot\n  isEii: true\n  parent: System.Windows.FreezableCollection`1\n  langs:\n  - csharp\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: FreezableCollection<T>.System.Collections.ICollection.SyncRoot\n  fullName: System.Windows.FreezableCollection<T>.System.Collections.ICollection.SyncRoot\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  syntax:\n    content: object System.Collections.ICollection.SyncRoot { get; }\n    return:\n      type: System.Object\n      description: To be added.\n  overload: System.Windows.FreezableCollection`1.System#Collections#ICollection#SyncRoot*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FreezableCollection`1.System#Collections#IEnumerable#GetEnumerator\n  id: System#Collections#IEnumerable#GetEnumerator\n  isEii: true\n  parent: System.Windows.FreezableCollection`1\n  langs:\n  - csharp\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: FreezableCollection<T>.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.Windows.FreezableCollection<T>.System.Collections.IEnumerable.GetEnumerator()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  syntax:\n    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: To be added.\n  overload: System.Windows.FreezableCollection`1.System#Collections#IEnumerable#GetEnumerator*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FreezableCollection`1.System#Collections#IList#Add(System.Object)\n  id: System#Collections#IList#Add(System.Object)\n  isEii: true\n  parent: System.Windows.FreezableCollection`1\n  langs:\n  - csharp\n  name: System.Collections.IList.Add(Object)\n  nameWithType: FreezableCollection<T>.System.Collections.IList.Add(Object)\n  fullName: System.Windows.FreezableCollection<T>.System.Collections.IList.Add(Object)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  syntax:\n    content: int IList.Add (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: To be added.\n    return:\n      type: System.Int32\n      description: To be added.\n  overload: System.Windows.FreezableCollection`1.System#Collections#IList#Add*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FreezableCollection`1.System#Collections#IList#Contains(System.Object)\n  id: System#Collections#IList#Contains(System.Object)\n  isEii: true\n  parent: System.Windows.FreezableCollection`1\n  langs:\n  - csharp\n  name: System.Collections.IList.Contains(Object)\n  nameWithType: FreezableCollection<T>.System.Collections.IList.Contains(Object)\n  fullName: System.Windows.FreezableCollection<T>.System.Collections.IList.Contains(Object)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  syntax:\n    content: bool IList.Contains (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: To be added.\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Windows.FreezableCollection`1.System#Collections#IList#Contains*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FreezableCollection`1.System#Collections#IList#IndexOf(System.Object)\n  id: System#Collections#IList#IndexOf(System.Object)\n  isEii: true\n  parent: System.Windows.FreezableCollection`1\n  langs:\n  - csharp\n  name: System.Collections.IList.IndexOf(Object)\n  nameWithType: FreezableCollection<T>.System.Collections.IList.IndexOf(Object)\n  fullName: System.Windows.FreezableCollection<T>.System.Collections.IList.IndexOf(Object)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  syntax:\n    content: int IList.IndexOf (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: To be added.\n    return:\n      type: System.Int32\n      description: To be added.\n  overload: System.Windows.FreezableCollection`1.System#Collections#IList#IndexOf*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FreezableCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)\n  id: System#Collections#IList#Insert(System.Int32,System.Object)\n  isEii: true\n  parent: System.Windows.FreezableCollection`1\n  langs:\n  - csharp\n  name: System.Collections.IList.Insert(Int32,Object)\n  nameWithType: FreezableCollection<T>.System.Collections.IList.Insert(Int32,Object)\n  fullName: System.Windows.FreezableCollection<T>.System.Collections.IList.Insert(Int32,Object)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  syntax:\n    content: void IList.Insert (int index, object value);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: To be added.\n    - id: value\n      type: System.Object\n      description: To be added.\n  overload: System.Windows.FreezableCollection`1.System#Collections#IList#Insert*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FreezableCollection`1.System#Collections#IList#IsFixedSize\n  id: System#Collections#IList#IsFixedSize\n  isEii: true\n  parent: System.Windows.FreezableCollection`1\n  langs:\n  - csharp\n  name: System.Collections.IList.IsFixedSize\n  nameWithType: FreezableCollection<T>.System.Collections.IList.IsFixedSize\n  fullName: System.Windows.FreezableCollection<T>.System.Collections.IList.IsFixedSize\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  syntax:\n    content: bool System.Collections.IList.IsFixedSize { get; }\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Windows.FreezableCollection`1.System#Collections#IList#IsFixedSize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FreezableCollection`1.System#Collections#IList#IsReadOnly\n  id: System#Collections#IList#IsReadOnly\n  isEii: true\n  parent: System.Windows.FreezableCollection`1\n  langs:\n  - csharp\n  name: System.Collections.IList.IsReadOnly\n  nameWithType: FreezableCollection<T>.System.Collections.IList.IsReadOnly\n  fullName: System.Windows.FreezableCollection<T>.System.Collections.IList.IsReadOnly\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  syntax:\n    content: bool System.Collections.IList.IsReadOnly { get; }\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.Windows.FreezableCollection`1.System#Collections#IList#IsReadOnly*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FreezableCollection`1.System#Collections#IList#Item(System.Int32)\n  id: System#Collections#IList#Item(System.Int32)\n  isEii: true\n  parent: System.Windows.FreezableCollection`1\n  langs:\n  - csharp\n  name: System.Collections.IList.Item(Int32)\n  nameWithType: FreezableCollection<T>.System.Collections.IList.Item(Int32)\n  fullName: System.Windows.FreezableCollection<T>.System.Collections.IList.Item(Int32)\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  syntax:\n    content: object System.Collections.IList.Item[int index] { get; set; }\n    parameters:\n    - id: index\n      type: System.Int32\n      description: To be added.\n    return:\n      type: System.Object\n      description: To be added.\n  overload: System.Windows.FreezableCollection`1.System#Collections#IList#Item*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.FreezableCollection`1.System#Collections#IList#Remove(System.Object)\n  id: System#Collections#IList#Remove(System.Object)\n  isEii: true\n  parent: System.Windows.FreezableCollection`1\n  langs:\n  - csharp\n  name: System.Collections.IList.Remove(Object)\n  nameWithType: FreezableCollection<T>.System.Collections.IList.Remove(Object)\n  fullName: System.Windows.FreezableCollection<T>.System.Collections.IList.Remove(Object)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  syntax:\n    content: void IList.Remove (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: To be added.\n  overload: System.Windows.FreezableCollection`1.System#Collections#IList#Remove*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Windows.Media.Animation.Animatable\n  isExternal: false\n  name: System.Windows.Media.Animation.Animatable\n- uid: System.Windows.FreezableCollection`1.#ctor\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: FreezableCollection()\n  nameWithType: FreezableCollection<T>.FreezableCollection()\n  fullName: System.Windows.FreezableCollection<T>.FreezableCollection()\n- uid: System.Windows.FreezableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: FreezableCollection(IEnumerable<T>)\n  nameWithType: FreezableCollection<T>.FreezableCollection(IEnumerable<T>)\n  fullName: System.Windows.FreezableCollection<T>.FreezableCollection(IEnumerable<T>)\n- uid: System.Collections.Generic.IEnumerable{T}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IEnumerable<T>\n  nameWithType: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: IEnumerable<T>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: T\n    name: T\n    nameWithType: T\n    fullName: T\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Windows.FreezableCollection`1.#ctor(System.Int32)\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: FreezableCollection(Int32)\n  nameWithType: FreezableCollection<T>.FreezableCollection(Int32)\n  fullName: System.Windows.FreezableCollection<T>.FreezableCollection(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Windows.FreezableCollection`1.Add(`0)\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: Add(T)\n  nameWithType: FreezableCollection<T>.Add(T)\n  fullName: System.Windows.FreezableCollection<T>.Add(T)\n- uid: T\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.Windows.FreezableCollection`1.Clear\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: Clear()\n  nameWithType: FreezableCollection<T>.Clear()\n  fullName: System.Windows.FreezableCollection<T>.Clear()\n- uid: System.Windows.FreezableCollection`1.Clone\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: Clone()\n  nameWithType: FreezableCollection<T>.Clone()\n  fullName: System.Windows.FreezableCollection<T>.Clone()\n- uid: System.Windows.FreezableCollection`1\n  parent: System.Windows\n  isExternal: false\n  name: FreezableCollection<T>\n  nameWithType: FreezableCollection<T>\n  fullName: System.Windows.FreezableCollection<T>\n- uid: System.Windows.FreezableCollection`1.CloneCore(System.Windows.Freezable)\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: CloneCore(Freezable)\n  nameWithType: FreezableCollection<T>.CloneCore(Freezable)\n  fullName: System.Windows.FreezableCollection<T>.CloneCore(Freezable)\n- uid: System.Windows.Freezable\n  parent: System.Windows\n  isExternal: false\n  name: Freezable\n  nameWithType: Freezable\n  fullName: System.Windows.Freezable\n- uid: System.Windows.FreezableCollection`1.CloneCurrentValue\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: CloneCurrentValue()\n  nameWithType: FreezableCollection<T>.CloneCurrentValue()\n  fullName: System.Windows.FreezableCollection<T>.CloneCurrentValue()\n- uid: System.Windows.FreezableCollection`1.CloneCurrentValueCore(System.Windows.Freezable)\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: CloneCurrentValueCore(Freezable)\n  nameWithType: FreezableCollection<T>.CloneCurrentValueCore(Freezable)\n  fullName: System.Windows.FreezableCollection<T>.CloneCurrentValueCore(Freezable)\n- uid: System.Windows.FreezableCollection`1.Contains(`0)\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: Contains(T)\n  nameWithType: FreezableCollection<T>.Contains(T)\n  fullName: System.Windows.FreezableCollection<T>.Contains(T)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Windows.FreezableCollection`1.CopyTo(`0[],System.Int32)\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: CopyTo(T[],Int32)\n  nameWithType: FreezableCollection<T>.CopyTo(T[],Int32)\n  fullName: System.Windows.FreezableCollection<T>.CopyTo(T[],Int32)\n- uid: T[]\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T[]\n  spec.csharp:\n  - uid: T\n    name: T\n    nameWithType: T\n    fullName: T[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Windows.FreezableCollection`1.Count\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: Count\n  nameWithType: FreezableCollection<T>.Count\n  fullName: System.Windows.FreezableCollection<T>.Count\n- uid: System.Windows.FreezableCollection`1.CreateInstanceCore\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: CreateInstanceCore()\n  nameWithType: FreezableCollection<T>.CreateInstanceCore()\n  fullName: System.Windows.FreezableCollection<T>.CreateInstanceCore()\n- uid: System.Windows.FreezableCollection`1.FreezeCore(System.Boolean)\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: FreezeCore(Boolean)\n  nameWithType: FreezableCollection<T>.FreezeCore(Boolean)\n  fullName: System.Windows.FreezableCollection<T>.FreezeCore(Boolean)\n- uid: System.Windows.FreezableCollection`1.GetAsFrozenCore(System.Windows.Freezable)\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: GetAsFrozenCore(Freezable)\n  nameWithType: FreezableCollection<T>.GetAsFrozenCore(Freezable)\n  fullName: System.Windows.FreezableCollection<T>.GetAsFrozenCore(Freezable)\n- uid: System.Windows.FreezableCollection`1.GetCurrentValueAsFrozenCore(System.Windows.Freezable)\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: GetCurrentValueAsFrozenCore(Freezable)\n  nameWithType: FreezableCollection<T>.GetCurrentValueAsFrozenCore(Freezable)\n  fullName: System.Windows.FreezableCollection<T>.GetCurrentValueAsFrozenCore(Freezable)\n- uid: System.Windows.FreezableCollection`1.GetEnumerator\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: FreezableCollection<T>.GetEnumerator()\n  fullName: System.Windows.FreezableCollection<T>.GetEnumerator()\n- uid: System.Windows.FreezableCollection`1.Enumerator\n  parent: System.Windows\n  isExternal: false\n  name: FreezableCollection<T>+Enumerator\n  nameWithType: FreezableCollection<T>+Enumerator\n  fullName: System.Windows.FreezableCollection<T>+Enumerator\n- uid: System.Windows.FreezableCollection`1.IndexOf(`0)\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: IndexOf(T)\n  nameWithType: FreezableCollection<T>.IndexOf(T)\n  fullName: System.Windows.FreezableCollection<T>.IndexOf(T)\n- uid: System.Windows.FreezableCollection`1.Insert(System.Int32,`0)\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: Insert(Int32,T)\n  nameWithType: FreezableCollection<T>.Insert(Int32,T)\n  fullName: System.Windows.FreezableCollection<T>.Insert(Int32,T)\n- uid: System.Windows.FreezableCollection`1.Item(System.Int32)\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: Item(Int32)\n  nameWithType: FreezableCollection<T>.Item(Int32)\n  fullName: System.Windows.FreezableCollection<T>.Item(Int32)\n- uid: System.Windows.FreezableCollection`1.Remove(`0)\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: Remove(T)\n  nameWithType: FreezableCollection<T>.Remove(T)\n  fullName: System.Windows.FreezableCollection<T>.Remove(T)\n- uid: System.Windows.FreezableCollection`1.RemoveAt(System.Int32)\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: RemoveAt(Int32)\n  nameWithType: FreezableCollection<T>.RemoveAt(Int32)\n  fullName: System.Windows.FreezableCollection<T>.RemoveAt(Int32)\n- uid: System.Windows.FreezableCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: System.Collections.Generic.ICollection\n  nameWithType: FreezableCollection<T>.System.Collections.Generic.ICollection\n  fullName: System.Windows.FreezableCollection<T>.System.Collections.Generic.ICollection\n- uid: System.Windows.FreezableCollection`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: System.Collections.Generic.IEnumerable()\n  nameWithType: FreezableCollection<T>.System.Collections.Generic.IEnumerable()\n  fullName: System.Windows.FreezableCollection<T>.System.Collections.Generic.IEnumerable()\n- uid: System.Collections.Generic.IEnumerator{T}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IEnumerator<T>\n  nameWithType: IEnumerator<T>\n  fullName: System.Collections.Generic.IEnumerator<T>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerator`1\n    name: IEnumerator\n    nameWithType: IEnumerator\n    fullName: IEnumerator<T>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: T\n    name: T\n    nameWithType: T\n    fullName: T\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Windows.FreezableCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: System.Collections.ICollection.CopyTo(Array,Int32)\n  nameWithType: FreezableCollection<T>.System.Collections.ICollection.CopyTo(Array,Int32)\n  fullName: System.Windows.FreezableCollection<T>.System.Collections.ICollection.CopyTo(Array,Int32)\n- uid: System.Array\n  parent: System\n  isExternal: true\n  name: Array\n  nameWithType: Array\n  fullName: System.Array\n- uid: System.Windows.FreezableCollection`1.System#Collections#ICollection#IsSynchronized\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: FreezableCollection<T>.System.Collections.ICollection.IsSynchronized\n  fullName: System.Windows.FreezableCollection<T>.System.Collections.ICollection.IsSynchronized\n- uid: System.Windows.FreezableCollection`1.System#Collections#ICollection#SyncRoot\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: FreezableCollection<T>.System.Collections.ICollection.SyncRoot\n  fullName: System.Windows.FreezableCollection<T>.System.Collections.ICollection.SyncRoot\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Windows.FreezableCollection`1.System#Collections#IEnumerable#GetEnumerator\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: FreezableCollection<T>.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.Windows.FreezableCollection<T>.System.Collections.IEnumerable.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: true\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.Windows.FreezableCollection`1.System#Collections#IList#Add(System.Object)\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: System.Collections.IList.Add(Object)\n  nameWithType: FreezableCollection<T>.System.Collections.IList.Add(Object)\n  fullName: System.Windows.FreezableCollection<T>.System.Collections.IList.Add(Object)\n- uid: System.Windows.FreezableCollection`1.System#Collections#IList#Contains(System.Object)\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: System.Collections.IList.Contains(Object)\n  nameWithType: FreezableCollection<T>.System.Collections.IList.Contains(Object)\n  fullName: System.Windows.FreezableCollection<T>.System.Collections.IList.Contains(Object)\n- uid: System.Windows.FreezableCollection`1.System#Collections#IList#IndexOf(System.Object)\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: System.Collections.IList.IndexOf(Object)\n  nameWithType: FreezableCollection<T>.System.Collections.IList.IndexOf(Object)\n  fullName: System.Windows.FreezableCollection<T>.System.Collections.IList.IndexOf(Object)\n- uid: System.Windows.FreezableCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: System.Collections.IList.Insert(Int32,Object)\n  nameWithType: FreezableCollection<T>.System.Collections.IList.Insert(Int32,Object)\n  fullName: System.Windows.FreezableCollection<T>.System.Collections.IList.Insert(Int32,Object)\n- uid: System.Windows.FreezableCollection`1.System#Collections#IList#IsFixedSize\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: System.Collections.IList.IsFixedSize\n  nameWithType: FreezableCollection<T>.System.Collections.IList.IsFixedSize\n  fullName: System.Windows.FreezableCollection<T>.System.Collections.IList.IsFixedSize\n- uid: System.Windows.FreezableCollection`1.System#Collections#IList#IsReadOnly\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: System.Collections.IList.IsReadOnly\n  nameWithType: FreezableCollection<T>.System.Collections.IList.IsReadOnly\n  fullName: System.Windows.FreezableCollection<T>.System.Collections.IList.IsReadOnly\n- uid: System.Windows.FreezableCollection`1.System#Collections#IList#Item(System.Int32)\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: System.Collections.IList.Item(Int32)\n  nameWithType: FreezableCollection<T>.System.Collections.IList.Item(Int32)\n  fullName: System.Windows.FreezableCollection<T>.System.Collections.IList.Item(Int32)\n- uid: System.Windows.FreezableCollection`1.System#Collections#IList#Remove(System.Object)\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: System.Collections.IList.Remove(Object)\n  nameWithType: FreezableCollection<T>.System.Collections.IList.Remove(Object)\n  fullName: System.Windows.FreezableCollection<T>.System.Collections.IList.Remove(Object)\n- uid: System.Windows.FreezableCollection`1.#ctor*\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: FreezableCollection<T>\n  nameWithType: FreezableCollection<T>.FreezableCollection<T>\n- uid: System.Windows.FreezableCollection`1.Add*\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: Add\n  nameWithType: FreezableCollection<T>.Add\n- uid: System.Windows.FreezableCollection`1.Clear*\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: Clear\n  nameWithType: FreezableCollection<T>.Clear\n- uid: System.Windows.FreezableCollection`1.Clone*\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: Clone\n  nameWithType: FreezableCollection<T>.Clone\n- uid: System.Windows.FreezableCollection`1.CloneCore*\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: CloneCore\n  nameWithType: FreezableCollection<T>.CloneCore\n- uid: System.Windows.FreezableCollection`1.CloneCurrentValue*\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: CloneCurrentValue\n  nameWithType: FreezableCollection<T>.CloneCurrentValue\n- uid: System.Windows.FreezableCollection`1.CloneCurrentValueCore*\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: CloneCurrentValueCore\n  nameWithType: FreezableCollection<T>.CloneCurrentValueCore\n- uid: System.Windows.FreezableCollection`1.Contains*\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: Contains\n  nameWithType: FreezableCollection<T>.Contains\n- uid: System.Windows.FreezableCollection`1.CopyTo*\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: CopyTo\n  nameWithType: FreezableCollection<T>.CopyTo\n- uid: System.Windows.FreezableCollection`1.Count*\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: Count\n  nameWithType: FreezableCollection<T>.Count\n- uid: System.Windows.FreezableCollection`1.CreateInstanceCore*\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: CreateInstanceCore\n  nameWithType: FreezableCollection<T>.CreateInstanceCore\n- uid: System.Windows.FreezableCollection`1.FreezeCore*\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: FreezeCore\n  nameWithType: FreezableCollection<T>.FreezeCore\n- uid: System.Windows.FreezableCollection`1.GetAsFrozenCore*\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: GetAsFrozenCore\n  nameWithType: FreezableCollection<T>.GetAsFrozenCore\n- uid: System.Windows.FreezableCollection`1.GetCurrentValueAsFrozenCore*\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: GetCurrentValueAsFrozenCore\n  nameWithType: FreezableCollection<T>.GetCurrentValueAsFrozenCore\n- uid: System.Windows.FreezableCollection`1.GetEnumerator*\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: GetEnumerator\n  nameWithType: FreezableCollection<T>.GetEnumerator\n- uid: System.Windows.FreezableCollection`1.IndexOf*\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: IndexOf\n  nameWithType: FreezableCollection<T>.IndexOf\n- uid: System.Windows.FreezableCollection`1.Insert*\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: Insert\n  nameWithType: FreezableCollection<T>.Insert\n- uid: System.Windows.FreezableCollection`1.Item*\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: Item\n  nameWithType: FreezableCollection<T>.Item\n- uid: System.Windows.FreezableCollection`1.Remove*\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: Remove\n  nameWithType: FreezableCollection<T>.Remove\n- uid: System.Windows.FreezableCollection`1.RemoveAt*\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: RemoveAt\n  nameWithType: FreezableCollection<T>.RemoveAt\n- uid: System.Windows.FreezableCollection`1.System#Collections#Generic#ICollection<T>#IsReadOnly*\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: System.Collections.Generic.ICollection<T>.IsReadOnly\n  nameWithType: FreezableCollection<T>.System.Collections.Generic.ICollection<T>.IsReadOnly\n- uid: System.Windows.FreezableCollection`1.System#Collections#Generic#IEnumerable<T>#GetEnumerator*\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: System.Collections.Generic.IEnumerable<T>.GetEnumerator\n  nameWithType: FreezableCollection<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator\n- uid: System.Windows.FreezableCollection`1.System#Collections#ICollection#CopyTo*\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: System.Collections.ICollection.CopyTo\n  nameWithType: FreezableCollection<T>.System.Collections.ICollection.CopyTo\n- uid: System.Windows.FreezableCollection`1.System#Collections#ICollection#IsSynchronized*\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: FreezableCollection<T>.System.Collections.ICollection.IsSynchronized\n- uid: System.Windows.FreezableCollection`1.System#Collections#ICollection#SyncRoot*\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: FreezableCollection<T>.System.Collections.ICollection.SyncRoot\n- uid: System.Windows.FreezableCollection`1.System#Collections#IEnumerable#GetEnumerator*\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator\n  nameWithType: FreezableCollection<T>.System.Collections.IEnumerable.GetEnumerator\n- uid: System.Windows.FreezableCollection`1.System#Collections#IList#Add*\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: System.Collections.IList.Add\n  nameWithType: FreezableCollection<T>.System.Collections.IList.Add\n- uid: System.Windows.FreezableCollection`1.System#Collections#IList#Contains*\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: System.Collections.IList.Contains\n  nameWithType: FreezableCollection<T>.System.Collections.IList.Contains\n- uid: System.Windows.FreezableCollection`1.System#Collections#IList#IndexOf*\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: System.Collections.IList.IndexOf\n  nameWithType: FreezableCollection<T>.System.Collections.IList.IndexOf\n- uid: System.Windows.FreezableCollection`1.System#Collections#IList#Insert*\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: System.Collections.IList.Insert\n  nameWithType: FreezableCollection<T>.System.Collections.IList.Insert\n- uid: System.Windows.FreezableCollection`1.System#Collections#IList#IsFixedSize*\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: System.Collections.IList.IsFixedSize\n  nameWithType: FreezableCollection<T>.System.Collections.IList.IsFixedSize\n- uid: System.Windows.FreezableCollection`1.System#Collections#IList#IsReadOnly*\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: System.Collections.IList.IsReadOnly\n  nameWithType: FreezableCollection<T>.System.Collections.IList.IsReadOnly\n- uid: System.Windows.FreezableCollection`1.System#Collections#IList#Item*\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: System.Collections.IList.Item\n  nameWithType: FreezableCollection<T>.System.Collections.IList.Item\n- uid: System.Windows.FreezableCollection`1.System#Collections#IList#Remove*\n  parent: System.Windows.FreezableCollection`1\n  isExternal: false\n  name: System.Collections.IList.Remove\n  nameWithType: FreezableCollection<T>.System.Collections.IList.Remove\n"}