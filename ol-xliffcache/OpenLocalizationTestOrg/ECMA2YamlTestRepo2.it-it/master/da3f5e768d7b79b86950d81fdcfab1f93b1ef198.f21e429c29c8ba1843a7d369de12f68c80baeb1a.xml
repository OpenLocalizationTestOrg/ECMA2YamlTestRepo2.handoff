{"nodes":[{"pos":[990,1067],"content":"Provides a low-level encapsulation of a window handle and a window procedure.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides a low-level encapsulation of a window handle and a window procedure.","pos":[0,77]}]},{"pos":[1080,2169],"content":"This class automatically manages window class creation and registration.       A window is not eligible for garbage collection when it is associated with a window handle. To ensure proper garbage collection, handles must either be destroyed manually using <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> or released using <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>.      > [!NOTE] >  The <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> method is called when the WM_NCDESTROY message is processed. This means there are cases in which when you do not need to manually call <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>, but it is good practice to do so.       The NativeWindow class provides the following properties and methods to manage handles: <xref:System.Windows.Forms.NativeWindow.Handle%2A>, <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>, <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>, <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>, and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This class automatically manages window class creation and registration.","pos":[0,72]},{"content":"A window is not eligible for garbage collection when it is associated with a window handle.","pos":[79,170]},{"content":"To ensure proper garbage collection, handles must either be destroyed manually using &lt;xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A&gt; or released using &lt;xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A&gt;.","pos":[171,390],"source":" To ensure proper garbage collection, handles must either be destroyed manually using <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> or released using <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The &lt;xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A&gt; method is called when the WM_NCDESTROY message is processed.","pos":[396,531],"source":"      > [!NOTE] >  The <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> method is called when the WM_NCDESTROY message is processed."},{"content":"This means there are cases in which when you do not need to manually call &lt;xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A&gt;, but it is good practice to do so.","pos":[532,698],"source":" This means there are cases in which when you do not need to manually call <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>, but it is good practice to do so."},{"content":"The NativeWindow class provides the following properties and methods to manage handles: &lt;xref:System.Windows.Forms.NativeWindow.Handle%2A&gt;, &lt;xref:System.Windows.Forms.NativeWindow.CreateHandle%2A&gt;, &lt;xref:System.Windows.Forms.NativeWindow.AssignHandle%2A&gt;, &lt;xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A&gt;, and &lt;xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A&gt;.","pos":[705,1082],"source":"       The NativeWindow class provides the following properties and methods to manage handles: <xref:System.Windows.Forms.NativeWindow.Handle%2A>, <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>, <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>, <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>, and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>."}]},{"pos":[4710,4802],"content":"Initializes an instance of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Forms.NativeWindow\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes an instance of the <xref href=\"System.Windows.Forms.NativeWindow\"></xref> class."},{"pos":[4814,5040],"content":"This is the default NativeWindow constructor provided by the compiler. The <xref:System.Windows.Forms.NativeWindow> class also has a static constructor that initializes application domain-wide message handlers and hash tables.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This is the default NativeWindow constructor provided by the compiler. The <xref:System.Windows.Forms.NativeWindow> class also has a static constructor that initializes application domain-wide message handlers and hash tables.","pos":[0,226],"nodes":[{"content":"This is the default NativeWindow constructor provided by the compiler.","pos":[0,70]},{"content":"The &lt;xref:System.Windows.Forms.NativeWindow&gt; class also has a static constructor that initializes application domain-wide message handlers and hash tables.","pos":[71,226],"source":" The <xref:System.Windows.Forms.NativeWindow> class also has a static constructor that initializes application domain-wide message handlers and hash tables."}]}]},{"pos":[5612,5644],"content":"Assigns a handle to this window.","needQuote":true,"needEscape":true,"nodes":[{"content":"Assigns a handle to this window.","pos":[0,32]}]},{"pos":[5657,6204],"content":"<xref:System.Windows.Forms.NativeWindow.WndProc%2A> intercepts window messages sent to the `handle` parameter. Use <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> to reset the handle's window procedure to the default window procedure.       The AssignHandle method calls the <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> method to indicate that the value of the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property has changed.      > [!NOTE] >  The handle to assign cannot be in a different application process.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"&lt;xref:System.Windows.Forms.NativeWindow.WndProc%2A&gt; intercepts window messages sent to the <ph id=\"ph1\">`handle`</ph> parameter.","pos":[0,110],"source":"<xref:System.Windows.Forms.NativeWindow.WndProc%2A> intercepts window messages sent to the `handle` parameter."},{"content":"Use &lt;xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A&gt; to reset the handle's window procedure to the default window procedure.","pos":[111,244],"source":" Use <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> to reset the handle's window procedure to the default window procedure."},{"content":"The AssignHandle method calls the &lt;xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A&gt; method to indicate that the value of the &lt;xref:System.Windows.Forms.NativeWindow.Handle%2A&gt; property has changed.","pos":[251,457],"source":"       The AssignHandle method calls the <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> method to indicate that the value of the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property has changed."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The handle to assign cannot be in a different application process.","pos":[463,542],"source":"      > [!NOTE] >  The handle to assign cannot be in a different application process."}]},{"pos":[7863,7899],"content":"The handle to assign to this window.","needQuote":true,"needEscape":true,"nodes":[{"content":"The handle to assign to this window.","pos":[0,36]}]},{"pos":[8052,8085],"content":"This window already has a handle.","needQuote":true,"needEscape":true,"nodes":[{"content":"This window already has a handle.","pos":[0,33]}]},{"pos":[8204,8282],"content":"The windows procedure for the associated native window could not be retrieved.","needQuote":true,"needEscape":true,"nodes":[{"content":"The windows procedure for the associated native window could not be retrieved.","pos":[0,78]}]},{"pos":[8776,8847],"content":"Creates a window and its handle with the specified creation parameters.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a window and its handle with the specified creation parameters.","pos":[0,71]}]},{"pos":[8860,9865],"content":"The `cp` parameter specifies the values that are passed to the native Win32 `CreateWindowEx` method to create a window and its handle.       When the <xref:System.Windows.Forms.CreateParams.ClassName%2A> field is not `null`, the newly created window handle inherits from the specified class. For example, if <xref:System.Windows.Forms.CreateParams.ClassName%2A> is set to `BUTTON`, the newly created window is based on the Win32 `BUTTON` window class. The <xref:System.Windows.Forms.CreateParams.Param%2A> property of the <xref:System.Windows.Forms.CreateParams.ClassName%2A> object must either be `null` or reference an instance of a class that was declared as a structure.       This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview. Some code is not shown for the purpose of brevity. See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.      > [!NOTE] >  The class name provided is registered with the operating system.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <ph id=\"ph1\">`cp`</ph> parameter specifies the values that are passed to the native Win32 <ph id=\"ph2\">`CreateWindowEx`</ph> method to create a window and its handle.","pos":[0,134],"source":"The `cp` parameter specifies the values that are passed to the native Win32 `CreateWindowEx` method to create a window and its handle."},{"content":"When the &lt;xref:System.Windows.Forms.CreateParams.ClassName%2A&gt; field is not <ph id=\"ph1\">`null`</ph>, the newly created window handle inherits from the specified class.","pos":[141,291],"source":"       When the <xref:System.Windows.Forms.CreateParams.ClassName%2A> field is not `null`, the newly created window handle inherits from the specified class."},{"content":"For example, if &lt;xref:System.Windows.Forms.CreateParams.ClassName%2A&gt; is set to <ph id=\"ph1\">`BUTTON`</ph>, the newly created window is based on the Win32 <ph id=\"ph2\">`BUTTON`</ph> window class.","pos":[292,451],"source":" For example, if <xref:System.Windows.Forms.CreateParams.ClassName%2A> is set to `BUTTON`, the newly created window is based on the Win32 `BUTTON` window class."},{"content":"The &lt;xref:System.Windows.Forms.CreateParams.Param%2A&gt; property of the &lt;xref:System.Windows.Forms.CreateParams.ClassName%2A&gt; object must either be <ph id=\"ph1\">`null`</ph> or reference an instance of a class that was declared as a structure.","pos":[452,674],"source":" The <xref:System.Windows.Forms.CreateParams.Param%2A> property of the <xref:System.Windows.Forms.CreateParams.ClassName%2A> object must either be `null` or reference an instance of a class that was declared as a structure."},{"content":"This code is an excerpt from the example shown in the &lt;xref:System.Windows.Forms.NativeWindow&gt; class overview.","pos":[681,791],"source":"       This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview."},{"content":"Some code is not shown for the purpose of brevity.","pos":[792,842]},{"content":"See &lt;xref:System.Windows.Forms.NativeWindow&gt; for the whole code listing.","pos":[843,915],"source":" See <xref:System.Windows.Forms.NativeWindow> for the whole code listing."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The class name provided is registered with the operating system.","pos":[921,998],"source":"      > [!NOTE] >  The class name provided is registered with the operating system."}]},{"pos":[11314,11426],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Windows.Forms.CreateParams\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that specifies the creation parameters for this window.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Windows.Forms.CreateParams\"></xref> that specifies the creation parameters for this window."},{"pos":[11601,11683],"content":"The operating system ran out of resources when trying to create the native window.","needQuote":true,"needEscape":true,"nodes":[{"content":"The operating system ran out of resources when trying to create the native window.","pos":[0,82]}]},{"pos":[11802,11861],"content":"The native Win32 API could not create the specified window.","needQuote":true,"needEscape":true,"nodes":[{"content":"The native Win32 API could not create the specified window.","pos":[0,59]}]},{"pos":[11972,12153],"content":"The handle of the current native window is already assigned; in explanation, the <xref:System.Windows.Forms.NativeWindow.Handle*> property is not equal to <xref:System.IntPtr.Zero>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The handle of the current native window is already assigned; in explanation, the &lt;xref:System.Windows.Forms.NativeWindow.Handle*&gt; property is not equal to &lt;xref:System.IntPtr.Zero&gt;.","pos":[0,181],"source":"The handle of the current native window is already assigned; in explanation, the <xref:System.Windows.Forms.NativeWindow.Handle*> property is not equal to <xref:System.IntPtr.Zero>."}]},{"pos":[12614,12679],"content":"Invokes the default window procedure associated with this window.","needQuote":true,"needEscape":true,"nodes":[{"content":"Invokes the default window procedure associated with this window.","pos":[0,65]}]},{"pos":[12692,13083],"content":"Typically, you only call the DefWndProc method when you are intercepting window messages and would like the default window procedure to handle the message. DefWndProc should not be called to send a window message to the window; call the Win32 `SendMessage` function instead.       It is an error to call DefWndProc when the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property is 0.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Typically, you only call the DefWndProc method when you are intercepting window messages and would like the default window procedure to handle the message.","pos":[0,155]},{"content":"DefWndProc should not be called to send a window message to the window; call the Win32 <ph id=\"ph1\">`SendMessage`</ph> function instead.","pos":[156,274],"source":" DefWndProc should not be called to send a window message to the window; call the Win32 `SendMessage` function instead."},{"content":"It is an error to call DefWndProc when the &lt;xref:System.Windows.Forms.NativeWindow.Handle%2A&gt; property is 0.","pos":[281,389],"source":"       It is an error to call DefWndProc when the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property is 0."}]},{"pos":[13257,13303],"content":"The message that is currently being processed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The message that is currently being processed.","pos":[0,46]}]},{"pos":[13771,13806],"content":"Destroys the window and its handle.","needQuote":true,"needEscape":true,"nodes":[{"content":"Destroys the window and its handle.","pos":[0,35]}]},{"pos":[13819,14365],"content":"This method destroys the window associated with the <xref:System.Windows.Forms.NativeWindow.Handle%2A>, sets the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property to 0, and calls the <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> method to reflect the change. Typically, you only call DestroyHandle when you are done with the native window.      > [!NOTE] >  The <xref:System.Windows.Forms.NativeWindow> class automatically will destroy the associated window and release its resources in response to a WM_DESTROY message.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method destroys the window associated with the &lt;xref:System.Windows.Forms.NativeWindow.Handle%2A&gt;, sets the &lt;xref:System.Windows.Forms.NativeWindow.Handle%2A&gt; property to 0, and calls the &lt;xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A&gt; method to reflect the change.","pos":[0,281],"source":"This method destroys the window associated with the <xref:System.Windows.Forms.NativeWindow.Handle%2A>, sets the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property to 0, and calls the <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> method to reflect the change."},{"content":"Typically, you only call DestroyHandle when you are done with the native window.","pos":[282,362]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The &lt;xref:System.Windows.Forms.NativeWindow&gt; class automatically will destroy the associated window and release its resources in response to a WM_DESTROY message.","pos":[368,543],"source":"      > [!NOTE] >  The <xref:System.Windows.Forms.NativeWindow> class automatically will destroy the associated window and release its resources in response to a WM_DESTROY message."}]},{"pos":[14892,14943],"content":"Releases the resources associated with this window.","needQuote":true,"needEscape":true,"nodes":[{"content":"Releases the resources associated with this window.","pos":[0,51]}]},{"pos":[14955,15161],"content":"The Finalize method removes the Win32 derived class associated with the current <xref:System.Windows.Forms.NativeWindow> instance, releases the handle, and posts a WM_CLOSE message to the associated window.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Finalize method removes the Win32 derived class associated with the current &lt;xref:System.Windows.Forms.NativeWindow&gt; instance, releases the handle, and posts a WM_CLOSE message to the associated window.","pos":[0,206],"source":"The Finalize method removes the Win32 derived class associated with the current <xref:System.Windows.Forms.NativeWindow> instance, releases the handle, and posts a WM_CLOSE message to the associated window."}]},{"pos":[15720,15778],"content":"Retrieves the window associated with the specified handle.","needQuote":true,"needEscape":true,"nodes":[{"content":"Retrieves the window associated with the specified handle.","pos":[0,58]}]},{"pos":[15790,16041],"content":"If you receive a handle from another method, use this method to retrieve the window associated with the handle. The handle must already be owned by another <xref:System.Windows.Forms.NativeWindow> in the current process; otherwise, `null` is returned.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"If you receive a handle from another method, use this method to retrieve the window associated with the handle.","pos":[0,111]},{"content":"The handle must already be owned by another &lt;xref:System.Windows.Forms.NativeWindow&gt; in the current process; otherwise, <ph id=\"ph1\">`null`</ph> is returned.","pos":[112,251],"source":" The handle must already be owned by another <xref:System.Windows.Forms.NativeWindow> in the current process; otherwise, `null` is returned."}]},{"pos":[16219,16240],"content":"A handle to a window.","needQuote":true,"needEscape":true,"nodes":[{"content":"A handle to a window.","pos":[0,21]}]},{"pos":[16318,16547],"content":"The <xref href=\"System.Windows.Forms.NativeWindow\"></xref> associated with the specified handle. This method returns <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> when the handle does not have an associated window.","needQuote":true,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Windows.Forms.NativeWindow\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> associated with the specified handle.","pos":[0,96],"source":"The <xref href=\"System.Windows.Forms.NativeWindow\"></xref> associated with the specified handle."},{"content":"This method returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> when the handle does not have an associated window.","pos":[97,229],"source":" This method returns <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> when the handle does not have an associated window."}]},{"pos":[16976,17008],"content":"Gets the handle for this window.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the handle for this window.","pos":[0,32]}]},{"pos":[17020,17115],"content":"Use this method when calling Windows API methods that require a handle for a window or control.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use this method when calling Windows API methods that require a handle for a window or control.","pos":[0,95]}]},{"pos":[18687,18845],"content":"If successful, an <xref:System.IntPtr> representing the handle to the associated native Win32 window; otherwise, 0 if no handle is associated with the window.","needQuote":true,"needEscape":true,"nodes":[{"content":"If successful, an &lt;xref:System.IntPtr&gt; representing the handle to the associated native Win32 window; otherwise, 0 if no handle is associated with the window.","pos":[0,158],"source":"If successful, an <xref:System.IntPtr> representing the handle to the associated native Win32 window; otherwise, 0 if no handle is associated with the window."}]},{"pos":[19314,19401],"content":"Specifies a notification method that is called when the handle for a window is changed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies a notification method that is called when the handle for a window is changed.","pos":[0,87]}]},{"pos":[19413,19530],"content":"This method is invoked when the value of the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property has changed.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method is invoked when the value of the &lt;xref:System.Windows.Forms.NativeWindow.Handle%2A&gt; property has changed.","pos":[0,117],"source":"This method is invoked when the value of the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property has changed."}]},{"pos":[21870,21944],"content":"When overridden in a derived class, manages an unhandled thread exception.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, manages an unhandled thread exception.","pos":[0,74]}]},{"pos":[21956,22054],"content":"Typically, <xref:System.Windows.Forms.Application.OnThreadException%2A> handles thread exceptions.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Typically, &lt;xref:System.Windows.Forms.Application.OnThreadException%2A&gt; handles thread exceptions.","pos":[0,98],"source":"Typically, <xref:System.Windows.Forms.Application.OnThreadException%2A> handles thread exceptions."}]},{"pos":[22210,22283],"content":"An <xref:System.Exception> that specifies the unhandled thread exception.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Exception&gt; that specifies the unhandled thread exception.","pos":[0,73],"source":"An <xref:System.Exception> that specifies the unhandled thread exception."}]},{"pos":[22758,22806],"content":"Releases the handle associated with this window.","needQuote":true,"needEscape":true,"nodes":[{"content":"Releases the handle associated with this window.","pos":[0,48]}]},{"pos":[22819,23266],"content":"This method does not destroy the window handle. Instead, it sets the handle's window procedure to the default window procedure. It sets the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property to 0 and calls <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> to reflect the change.       A window automatically calls this method if it receives a native Win32 WM_NCDESTROY message, indicating that Windows has destroyed the handle.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method does not destroy the window handle. Instead, it sets the handle's window procedure to the default window procedure. It sets the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property to 0 and calls <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> to reflect the change.       A window automatically calls this method if it receives a native Win32 WM_NCDESTROY message, indicating that Windows has destroyed the handle.","pos":[0,445],"nodes":[{"content":"This method does not destroy the window handle.","pos":[0,47]},{"content":"Instead, it sets the handle's window procedure to the default window procedure.","pos":[48,127]},{"content":"It sets the &lt;xref:System.Windows.Forms.NativeWindow.Handle%2A&gt; property to 0 and calls &lt;xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A&gt; to reflect the change.","pos":[128,296],"source":" It sets the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property to 0 and calls <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> to reflect the change."},{"content":"A window automatically calls this method if it receives a native Win32 WM_NCDESTROY message, indicating that Windows has destroyed the handle.","pos":[303,445]}]}]},{"pos":[25381,25446],"content":"Invokes the default window procedure associated with this window.","needQuote":true,"needEscape":true,"nodes":[{"content":"Invokes the default window procedure associated with this window.","pos":[0,65]}]},{"pos":[25458,25538],"content":"This method is called when a window message is sent to the handle of the window.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method is called when a window message is sent to the handle of the window.","pos":[0,80]}]},{"pos":[27230,27334],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Windows.Forms.Message\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that is associated with the current Windows message.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Windows.Forms.Message\"></xref> that is associated with the current Windows message."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Forms.NativeWindow\n  id: NativeWindow\n  children:\n  - System.Windows.Forms.NativeWindow.#ctor\n  - System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)\n  - System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)\n  - System.Windows.Forms.NativeWindow.DefWndProc(System.Windows.Forms.Message@)\n  - System.Windows.Forms.NativeWindow.DestroyHandle\n  - System.Windows.Forms.NativeWindow.Finalize\n  - System.Windows.Forms.NativeWindow.FromHandle(System.IntPtr)\n  - System.Windows.Forms.NativeWindow.Handle\n  - System.Windows.Forms.NativeWindow.OnHandleChange\n  - System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)\n  - System.Windows.Forms.NativeWindow.ReleaseHandle\n  - System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)\n  langs:\n  - csharp\n  name: NativeWindow\n  nameWithType: NativeWindow\n  fullName: System.Windows.Forms.NativeWindow\n  type: Class\n  summary: Provides a low-level encapsulation of a window handle and a window procedure.\n  remarks: \"This class automatically manages window class creation and registration.  \\n  \\n A window is not eligible for garbage collection when it is associated with a window handle. To ensure proper garbage collection, handles must either be destroyed manually using <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> or released using <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>.  \\n  \\n> [!NOTE]\\n>  The <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> method is called when the WM_NCDESTROY message is processed. This means there are cases in which when you do not need to manually call <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>, but it is good practice to do so.  \\n  \\n The NativeWindow class provides the following properties and methods to manage handles: <xref:System.Windows.Forms.NativeWindow.Handle%2A>, <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>, <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>, <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>, and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>.\"\n  example:\n  - \"The following code example demonstrates intercepting operating system window messages in a window procedure, and creating a window with a specific operating system window class name. The example creates two classes that inherit from NativeWindow that accomplish this.  \\n  \\n The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept the `WM_ACTIVATEAPP` window message. The class demonstrates the usage of the <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> methods to identify the window handle the NativeWindow will use. The handle is assign based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=fullName> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=fullName> events. When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1``ApplicationActivated` method.  \\n  \\n The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to `BUTTON`. The class demonstrates using the <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> method and overriding the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received.  \\n  \\n [!code-cpp[NativeWindow#1](~/add/codesnippet/cpp/t-system.windows.forms.n_0_1.cpp)]\\n [!code-cs[NativeWindow#1](~/add/codesnippet/csharp/t-system.windows.forms.n_0_1.cs)]\\n [!code-vb[NativeWindow#1](~/add/codesnippet/visualbasic/t-system.windows.forms.n_0_1.vb)]\"\n  syntax:\n    content: 'public class NativeWindow : MarshalByRefObject, System.Windows.Forms.IWin32Window'\n  inheritance:\n  - System.Object\n  - System.MarshalByRefObject\n  implements:\n  - System.Windows.Forms.IWin32Window\n  inheritedMembers:\n  - System.MarshalByRefObject.CreateObjRef(System.Type)\n  - System.MarshalByRefObject.GetLifetimeService\n  - System.MarshalByRefObject.InitializeLifetimeService\n  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  platform:\n  - net462\n- uid: System.Windows.Forms.NativeWindow.#ctor\n  id: '#ctor'\n  parent: System.Windows.Forms.NativeWindow\n  langs:\n  - csharp\n  name: NativeWindow()\n  nameWithType: NativeWindow.NativeWindow()\n  fullName: System.Windows.Forms.NativeWindow.NativeWindow()\n  type: Constructor\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Initializes an instance of the <xref href=\"System.Windows.Forms.NativeWindow\"></xref> class.\n  remarks: This is the default NativeWindow constructor provided by the compiler. The <xref:System.Windows.Forms.NativeWindow> class also has a static constructor that initializes application domain-wide message handlers and hash tables.\n  syntax:\n    content: public NativeWindow ();\n    parameters: []\n  overload: System.Windows.Forms.NativeWindow.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)\n  id: AssignHandle(System.IntPtr)\n  parent: System.Windows.Forms.NativeWindow\n  langs:\n  - csharp\n  name: AssignHandle(IntPtr)\n  nameWithType: NativeWindow.AssignHandle(IntPtr)\n  fullName: System.Windows.Forms.NativeWindow.AssignHandle(IntPtr)\n  type: Method\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Assigns a handle to this window.\n  remarks: \"<xref:System.Windows.Forms.NativeWindow.WndProc%2A> intercepts window messages sent to the `handle` parameter. Use <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> to reset the handle's window procedure to the default window procedure.  \\n  \\n The AssignHandle method calls the <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> method to indicate that the value of the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property has changed.  \\n  \\n> [!NOTE]\\n>  The handle to assign cannot be in a different application process.\"\n  example:\n  - \"The following code example demonstrates intercepting operating system window messages in a window procedure. The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.  \\n  \\n The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercepts the `WM_ACTIVATEAPP` window message. The class demonstrates the use of the AssignHandle and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> methods to identify which window handle the <xref:System.Windows.Forms.NativeWindow> will use. The handle is assigned based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=fullName> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=fullName> events. When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1``ApplicationActivated` method.  \\n  \\n This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview. Some code is not shown for the purpose of brevity. See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.  \\n  \\n [!code-cpp[NativeWindow#2](~/add/codesnippet/cpp/m-system.windows.forms.n_4_1.cpp)]\\n [!code-cs[NativeWindow#2](~/add/codesnippet/csharp/m-system.windows.forms.n_4_1.cs)]\\n [!code-vb[NativeWindow#2](~/add/codesnippet/visualbasic/m-system.windows.forms.n_4_1.vb)]\"\n  syntax:\n    content: public void AssignHandle (IntPtr handle);\n    parameters:\n    - id: handle\n      type: System.IntPtr\n      description: The handle to assign to this window.\n  overload: System.Windows.Forms.NativeWindow.AssignHandle*\n  exceptions:\n  - type: System.Exception\n    commentId: T:System.Exception\n    description: This window already has a handle.\n  - type: System.ComponentModel.Win32Exception\n    commentId: T:System.ComponentModel.Win32Exception\n    description: The windows procedure for the associated native window could not be retrieved.\n  platform:\n  - net462\n- uid: System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)\n  id: CreateHandle(System.Windows.Forms.CreateParams)\n  parent: System.Windows.Forms.NativeWindow\n  langs:\n  - csharp\n  name: CreateHandle(CreateParams)\n  nameWithType: NativeWindow.CreateHandle(CreateParams)\n  fullName: System.Windows.Forms.NativeWindow.CreateHandle(CreateParams)\n  type: Method\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Creates a window and its handle with the specified creation parameters.\n  remarks: \"The `cp` parameter specifies the values that are passed to the native Win32 `CreateWindowEx` method to create a window and its handle.  \\n  \\n When the <xref:System.Windows.Forms.CreateParams.ClassName%2A> field is not `null`, the newly created window handle inherits from the specified class. For example, if <xref:System.Windows.Forms.CreateParams.ClassName%2A> is set to `BUTTON`, the newly created window is based on the Win32 `BUTTON` window class. The <xref:System.Windows.Forms.CreateParams.Param%2A> property of the <xref:System.Windows.Forms.CreateParams.ClassName%2A> object must either be `null` or reference an instance of a class that was declared as a structure.  \\n  \\n This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview. Some code is not shown for the purpose of brevity. See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.  \\n  \\n> [!NOTE]\\n>  The class name provided is registered with the operating system.\"\n  example:\n  - \"The following code example demonstrates creating a window with a specific operating system window class name. The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.  \\n  \\n The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to `BUTTON`. This creates a Win32 button window. The location and size of the button is set, along with specifying additional window styles. The class demonstrates how to use the CreateHandle method and override the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received. Although the example looks for the WM_ACTIVATEAPP message, this can be replaced in a real program with window messages specific to the type created.  \\n  \\n> [!NOTE]\\n>  Some control types send their window messages to the window parent instead of the window. See the Windows Platform SDK for more information.  \\n  \\n [!code-cpp[NativeWindow#3](~/add/codesnippet/cpp/4bc4c996-2177-4901-b43d-_1.cpp)]\\n [!code-cs[NativeWindow#3](~/add/codesnippet/csharp/4bc4c996-2177-4901-b43d-_1.cs)]\\n [!code-vb[NativeWindow#3](~/add/codesnippet/visualbasic/4bc4c996-2177-4901-b43d-_1.vb)]\"\n  syntax:\n    content: public virtual void CreateHandle (System.Windows.Forms.CreateParams cp);\n    parameters:\n    - id: cp\n      type: System.Windows.Forms.CreateParams\n      description: A <xref href=\"System.Windows.Forms.CreateParams\"></xref> that specifies the creation parameters for this window.\n  overload: System.Windows.Forms.NativeWindow.CreateHandle*\n  exceptions:\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: The operating system ran out of resources when trying to create the native window.\n  - type: System.ComponentModel.Win32Exception\n    commentId: T:System.ComponentModel.Win32Exception\n    description: The native Win32 API could not create the specified window.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The handle of the current native window is already assigned; in explanation, the <xref:System.Windows.Forms.NativeWindow.Handle*> property is not equal to <xref:System.IntPtr.Zero>.\n  platform:\n  - net462\n- uid: System.Windows.Forms.NativeWindow.DefWndProc(System.Windows.Forms.Message@)\n  id: DefWndProc(System.Windows.Forms.Message@)\n  parent: System.Windows.Forms.NativeWindow\n  langs:\n  - csharp\n  name: DefWndProc(Message)\n  nameWithType: NativeWindow.DefWndProc(Message)\n  fullName: System.Windows.Forms.NativeWindow.DefWndProc(Message)\n  type: Method\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Invokes the default window procedure associated with this window.\n  remarks: \"Typically, you only call the DefWndProc method when you are intercepting window messages and would like the default window procedure to handle the message. DefWndProc should not be called to send a window message to the window; call the Win32 `SendMessage` function instead.  \\n  \\n It is an error to call DefWndProc when the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property is 0.\"\n  syntax:\n    content: public void DefWndProc (ref System.Windows.Forms.Message m);\n    parameters:\n    - id: m\n      type: System.Windows.Forms.Message\n      description: The message that is currently being processed.\n  overload: System.Windows.Forms.NativeWindow.DefWndProc*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.NativeWindow.DestroyHandle\n  id: DestroyHandle\n  parent: System.Windows.Forms.NativeWindow\n  langs:\n  - csharp\n  name: DestroyHandle()\n  nameWithType: NativeWindow.DestroyHandle()\n  fullName: System.Windows.Forms.NativeWindow.DestroyHandle()\n  type: Method\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Destroys the window and its handle.\n  remarks: \"This method destroys the window associated with the <xref:System.Windows.Forms.NativeWindow.Handle%2A>, sets the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property to 0, and calls the <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> method to reflect the change. Typically, you only call DestroyHandle when you are done with the native window.  \\n  \\n> [!NOTE]\\n>  The <xref:System.Windows.Forms.NativeWindow> class automatically will destroy the associated window and release its resources in response to a WM_DESTROY message.\"\n  syntax:\n    content: public virtual void DestroyHandle ();\n    parameters: []\n  overload: System.Windows.Forms.NativeWindow.DestroyHandle*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.NativeWindow.Finalize\n  id: Finalize\n  parent: System.Windows.Forms.NativeWindow\n  langs:\n  - csharp\n  name: Finalize()\n  nameWithType: NativeWindow.Finalize()\n  fullName: System.Windows.Forms.NativeWindow.Finalize()\n  type: Method\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Releases the resources associated with this window.\n  remarks: The Finalize method removes the Win32 derived class associated with the current <xref:System.Windows.Forms.NativeWindow> instance, releases the handle, and posts a WM_CLOSE message to the associated window.\n  syntax:\n    content: ~NativeWindow ();\n    parameters: []\n  overload: System.Windows.Forms.NativeWindow.Finalize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.NativeWindow.FromHandle(System.IntPtr)\n  id: FromHandle(System.IntPtr)\n  parent: System.Windows.Forms.NativeWindow\n  langs:\n  - csharp\n  name: FromHandle(IntPtr)\n  nameWithType: NativeWindow.FromHandle(IntPtr)\n  fullName: System.Windows.Forms.NativeWindow.FromHandle(IntPtr)\n  type: Method\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Retrieves the window associated with the specified handle.\n  remarks: If you receive a handle from another method, use this method to retrieve the window associated with the handle. The handle must already be owned by another <xref:System.Windows.Forms.NativeWindow> in the current process; otherwise, `null` is returned.\n  syntax:\n    content: public static System.Windows.Forms.NativeWindow FromHandle (IntPtr handle);\n    parameters:\n    - id: handle\n      type: System.IntPtr\n      description: A handle to a window.\n    return:\n      type: System.Windows.Forms.NativeWindow\n      description: The <xref href=\"System.Windows.Forms.NativeWindow\"></xref> associated with the specified handle. This method returns <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> when the handle does not have an associated window.\n  overload: System.Windows.Forms.NativeWindow.FromHandle*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.NativeWindow.Handle\n  id: Handle\n  parent: System.Windows.Forms.NativeWindow\n  langs:\n  - csharp\n  name: Handle\n  nameWithType: NativeWindow.Handle\n  fullName: System.Windows.Forms.NativeWindow.Handle\n  type: Property\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Gets the handle for this window.\n  remarks: Use this method when calling Windows API methods that require a handle for a window or control.\n  example:\n  - \"The following code example demonstrates creating a window with a specific operating system window class name. The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this. The example also demonstrates overriding the <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> method to be notified when the Handle changes.  \\n  \\n The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to BUTTON. This creates a Win32 button window. The location and size of the button is set, along with specifying additional window styles. The class demonstrates how to use the <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> method and override the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received. Although the example looks for the WM_ACTIVATEAPP message, this could be replaced in a real program with window messages specific to the type created.  \\n  \\n> [!NOTE]\\n>  Some control types send their window messages to the window parent instead of the window. See the Windows Platform SDK for more information.  \\n  \\n [!code-cpp[NativeWindow#3](~/add/codesnippet/cpp/p-system.windows.forms.n_14_1.cpp)]\\n [!code-cs[NativeWindow#3](~/add/codesnippet/csharp/p-system.windows.forms.n_14_1.cs)]\\n [!code-vb[NativeWindow#3](~/add/codesnippet/visualbasic/p-system.windows.forms.n_14_1.vb)]\"\n  syntax:\n    content: public IntPtr Handle { get; }\n    return:\n      type: System.IntPtr\n      description: If successful, an <xref:System.IntPtr> representing the handle to the associated native Win32 window; otherwise, 0 if no handle is associated with the window.\n  overload: System.Windows.Forms.NativeWindow.Handle*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.NativeWindow.OnHandleChange\n  id: OnHandleChange\n  parent: System.Windows.Forms.NativeWindow\n  langs:\n  - csharp\n  name: OnHandleChange()\n  nameWithType: NativeWindow.OnHandleChange()\n  fullName: System.Windows.Forms.NativeWindow.OnHandleChange()\n  type: Method\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Specifies a notification method that is called when the handle for a window is changed.\n  remarks: This method is invoked when the value of the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property has changed.\n  example:\n  - \"The following code example demonstrates creating a window with a specific operating system window class name. The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this. The example also demonstrates overriding the OnHandleChange method to be notified when the <xref:System.Windows.Forms.NativeWindow.Handle%2A> changes.  \\n  \\n The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to `BUTTON`. This creates a Win32 button window. The location and size of the button is set, along with specifying additional window styles. The class demonstrates how to use the <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> method and override the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received. Although the example looks for the WM_ACTIVATEAPP message, this can be replaced in a real program with window messages specific to the type created.  \\n  \\n This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview. Some code is not shown for the purpose of brevity. See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.  \\n  \\n> [!NOTE]\\n>  Some control types send their window messages to the window parent instead of the window. See the Windows Platform SDK for more information.  \\n  \\n [!code-cpp[NativeWindow#3](~/add/codesnippet/cpp/m-system.windows.forms.n_1_1.cpp)]\\n [!code-cs[NativeWindow#3](~/add/codesnippet/csharp/m-system.windows.forms.n_1_1.cs)]\\n [!code-vb[NativeWindow#3](~/add/codesnippet/visualbasic/m-system.windows.forms.n_1_1.vb)]\"\n  syntax:\n    content: protected virtual void OnHandleChange ();\n    parameters: []\n  overload: System.Windows.Forms.NativeWindow.OnHandleChange*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)\n  id: OnThreadException(System.Exception)\n  parent: System.Windows.Forms.NativeWindow\n  langs:\n  - csharp\n  name: OnThreadException(Exception)\n  nameWithType: NativeWindow.OnThreadException(Exception)\n  fullName: System.Windows.Forms.NativeWindow.OnThreadException(Exception)\n  type: Method\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: When overridden in a derived class, manages an unhandled thread exception.\n  remarks: Typically, <xref:System.Windows.Forms.Application.OnThreadException%2A> handles thread exceptions.\n  syntax:\n    content: protected virtual void OnThreadException (Exception e);\n    parameters:\n    - id: e\n      type: System.Exception\n      description: An <xref:System.Exception> that specifies the unhandled thread exception.\n  overload: System.Windows.Forms.NativeWindow.OnThreadException*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.NativeWindow.ReleaseHandle\n  id: ReleaseHandle\n  parent: System.Windows.Forms.NativeWindow\n  langs:\n  - csharp\n  name: ReleaseHandle()\n  nameWithType: NativeWindow.ReleaseHandle()\n  fullName: System.Windows.Forms.NativeWindow.ReleaseHandle()\n  type: Method\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Releases the handle associated with this window.\n  remarks: \"This method does not destroy the window handle. Instead, it sets the handle's window procedure to the default window procedure. It sets the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property to 0 and calls <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> to reflect the change.  \\n  \\n A window automatically calls this method if it receives a native Win32 WM_NCDESTROY message, indicating that Windows has destroyed the handle.\"\n  example:\n  - \"The following code example demonstrates intercepting operating system window messages in a window procedure. The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.  \\n  \\n The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercepts the `WM_ACTIVATEAPP` window message. The class demonstrates the use of the <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> and ReleaseHandle methods to identify the window handle the <xref:System.Windows.Forms.NativeWindow> will use. The handle is assign based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=fullName> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=fullName> events. When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1``ApplicationActivated` method.  \\n  \\n This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview. Some code is not shown for the purpose of brevity. See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.  \\n  \\n [!code-cpp[NativeWindow#2](~/add/codesnippet/cpp/m-system.windows.forms.n_0_1.cpp)]\\n [!code-cs[NativeWindow#2](~/add/codesnippet/csharp/m-system.windows.forms.n_0_1.cs)]\\n [!code-vb[NativeWindow#2](~/add/codesnippet/visualbasic/m-system.windows.forms.n_0_1.vb)]\"\n  syntax:\n    content: public virtual void ReleaseHandle ();\n    parameters: []\n  overload: System.Windows.Forms.NativeWindow.ReleaseHandle*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)\n  id: WndProc(System.Windows.Forms.Message@)\n  parent: System.Windows.Forms.NativeWindow\n  langs:\n  - csharp\n  name: WndProc(Message)\n  nameWithType: NativeWindow.WndProc(Message)\n  fullName: System.Windows.Forms.NativeWindow.WndProc(Message)\n  type: Method\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Invokes the default window procedure associated with this window.\n  remarks: This method is called when a window message is sent to the handle of the window.\n  example:\n  - \"The following code example demonstrates intercepting operating system window messages in a window procedure. The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.  \\n  \\n The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the WndProc method to intercept the `WM_ACTIVATEAPP` window message. The class demonstrates the use of the <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> methods to identify the window handle the <xref:System.Windows.Forms.NativeWindow> will use. The handle is assigned based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=fullName> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=fullName> events. When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1``ApplicationActivated` method.  \\n  \\n This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview. Some code is not shown for the purpose of brevity. See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.  \\n  \\n [!code-cpp[NativeWindow#2](~/add/codesnippet/cpp/m-system.windows.forms.n_3_1.cpp)]\\n [!code-cs[NativeWindow#2](~/add/codesnippet/csharp/m-system.windows.forms.n_3_1.cs)]\\n [!code-vb[NativeWindow#2](~/add/codesnippet/visualbasic/m-system.windows.forms.n_3_1.vb)]\"\n  syntax:\n    content: protected virtual void WndProc (ref System.Windows.Forms.Message m);\n    parameters:\n    - id: m\n      type: System.Windows.Forms.Message\n      description: A <xref href=\"System.Windows.Forms.Message\"></xref> that is associated with the current Windows message.\n  overload: System.Windows.Forms.NativeWindow.WndProc*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.MarshalByRefObject\n  isExternal: false\n  name: System.MarshalByRefObject\n- uid: System.Exception\n  isExternal: true\n  name: System.Exception\n- uid: System.ComponentModel.Win32Exception\n  parent: System.ComponentModel\n  isExternal: false\n  name: Win32Exception\n  nameWithType: Win32Exception\n  fullName: System.ComponentModel.Win32Exception\n- uid: System.OutOfMemoryException\n  isExternal: true\n  name: System.OutOfMemoryException\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.Windows.Forms.NativeWindow.#ctor\n  parent: System.Windows.Forms.NativeWindow\n  isExternal: false\n  name: NativeWindow()\n  nameWithType: NativeWindow.NativeWindow()\n  fullName: System.Windows.Forms.NativeWindow.NativeWindow()\n- uid: System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)\n  parent: System.Windows.Forms.NativeWindow\n  isExternal: false\n  name: AssignHandle(IntPtr)\n  nameWithType: NativeWindow.AssignHandle(IntPtr)\n  fullName: System.Windows.Forms.NativeWindow.AssignHandle(IntPtr)\n- uid: System.IntPtr\n  parent: System\n  isExternal: true\n  name: IntPtr\n  nameWithType: IntPtr\n  fullName: System.IntPtr\n- uid: System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)\n  parent: System.Windows.Forms.NativeWindow\n  isExternal: false\n  name: CreateHandle(CreateParams)\n  nameWithType: NativeWindow.CreateHandle(CreateParams)\n  fullName: System.Windows.Forms.NativeWindow.CreateHandle(CreateParams)\n- uid: System.Windows.Forms.CreateParams\n  parent: System.Windows.Forms\n  isExternal: false\n  name: CreateParams\n  nameWithType: CreateParams\n  fullName: System.Windows.Forms.CreateParams\n- uid: System.Windows.Forms.NativeWindow.DefWndProc(System.Windows.Forms.Message@)\n  parent: System.Windows.Forms.NativeWindow\n  isExternal: false\n  name: DefWndProc(Message)\n  nameWithType: NativeWindow.DefWndProc(Message)\n  fullName: System.Windows.Forms.NativeWindow.DefWndProc(Message)\n- uid: System.Windows.Forms.Message\n  parent: System.Windows.Forms\n  isExternal: false\n  name: Message\n  nameWithType: Message\n  fullName: System.Windows.Forms.Message\n- uid: System.Windows.Forms.NativeWindow.DestroyHandle\n  parent: System.Windows.Forms.NativeWindow\n  isExternal: false\n  name: DestroyHandle()\n  nameWithType: NativeWindow.DestroyHandle()\n  fullName: System.Windows.Forms.NativeWindow.DestroyHandle()\n- uid: System.Windows.Forms.NativeWindow.Finalize\n  parent: System.Windows.Forms.NativeWindow\n  isExternal: false\n  name: Finalize()\n  nameWithType: NativeWindow.Finalize()\n  fullName: System.Windows.Forms.NativeWindow.Finalize()\n- uid: System.Windows.Forms.NativeWindow.FromHandle(System.IntPtr)\n  parent: System.Windows.Forms.NativeWindow\n  isExternal: false\n  name: FromHandle(IntPtr)\n  nameWithType: NativeWindow.FromHandle(IntPtr)\n  fullName: System.Windows.Forms.NativeWindow.FromHandle(IntPtr)\n- uid: System.Windows.Forms.NativeWindow\n  parent: System.Windows.Forms\n  isExternal: false\n  name: NativeWindow\n  nameWithType: NativeWindow\n  fullName: System.Windows.Forms.NativeWindow\n- uid: System.Windows.Forms.NativeWindow.Handle\n  parent: System.Windows.Forms.NativeWindow\n  isExternal: false\n  name: Handle\n  nameWithType: NativeWindow.Handle\n  fullName: System.Windows.Forms.NativeWindow.Handle\n- uid: System.Windows.Forms.NativeWindow.OnHandleChange\n  parent: System.Windows.Forms.NativeWindow\n  isExternal: false\n  name: OnHandleChange()\n  nameWithType: NativeWindow.OnHandleChange()\n  fullName: System.Windows.Forms.NativeWindow.OnHandleChange()\n- uid: System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)\n  parent: System.Windows.Forms.NativeWindow\n  isExternal: false\n  name: OnThreadException(Exception)\n  nameWithType: NativeWindow.OnThreadException(Exception)\n  fullName: System.Windows.Forms.NativeWindow.OnThreadException(Exception)\n- uid: System.Windows.Forms.NativeWindow.ReleaseHandle\n  parent: System.Windows.Forms.NativeWindow\n  isExternal: false\n  name: ReleaseHandle()\n  nameWithType: NativeWindow.ReleaseHandle()\n  fullName: System.Windows.Forms.NativeWindow.ReleaseHandle()\n- uid: System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)\n  parent: System.Windows.Forms.NativeWindow\n  isExternal: false\n  name: WndProc(Message)\n  nameWithType: NativeWindow.WndProc(Message)\n  fullName: System.Windows.Forms.NativeWindow.WndProc(Message)\n- uid: System.Windows.Forms.NativeWindow.#ctor*\n  parent: System.Windows.Forms.NativeWindow\n  isExternal: false\n  name: NativeWindow\n  nameWithType: NativeWindow.NativeWindow\n- uid: System.Windows.Forms.NativeWindow.AssignHandle*\n  parent: System.Windows.Forms.NativeWindow\n  isExternal: false\n  name: AssignHandle\n  nameWithType: NativeWindow.AssignHandle\n- uid: System.Windows.Forms.NativeWindow.CreateHandle*\n  parent: System.Windows.Forms.NativeWindow\n  isExternal: false\n  name: CreateHandle\n  nameWithType: NativeWindow.CreateHandle\n- uid: System.Windows.Forms.NativeWindow.DefWndProc*\n  parent: System.Windows.Forms.NativeWindow\n  isExternal: false\n  name: DefWndProc\n  nameWithType: NativeWindow.DefWndProc\n- uid: System.Windows.Forms.NativeWindow.DestroyHandle*\n  parent: System.Windows.Forms.NativeWindow\n  isExternal: false\n  name: DestroyHandle\n  nameWithType: NativeWindow.DestroyHandle\n- uid: System.Windows.Forms.NativeWindow.Finalize*\n  parent: System.Windows.Forms.NativeWindow\n  isExternal: false\n  name: Finalize\n  nameWithType: NativeWindow.Finalize\n- uid: System.Windows.Forms.NativeWindow.FromHandle*\n  parent: System.Windows.Forms.NativeWindow\n  isExternal: false\n  name: FromHandle\n  nameWithType: NativeWindow.FromHandle\n- uid: System.Windows.Forms.NativeWindow.Handle*\n  parent: System.Windows.Forms.NativeWindow\n  isExternal: false\n  name: Handle\n  nameWithType: NativeWindow.Handle\n- uid: System.Windows.Forms.NativeWindow.OnHandleChange*\n  parent: System.Windows.Forms.NativeWindow\n  isExternal: false\n  name: OnHandleChange\n  nameWithType: NativeWindow.OnHandleChange\n- uid: System.Windows.Forms.NativeWindow.OnThreadException*\n  parent: System.Windows.Forms.NativeWindow\n  isExternal: false\n  name: OnThreadException\n  nameWithType: NativeWindow.OnThreadException\n- uid: System.Windows.Forms.NativeWindow.ReleaseHandle*\n  parent: System.Windows.Forms.NativeWindow\n  isExternal: false\n  name: ReleaseHandle\n  nameWithType: NativeWindow.ReleaseHandle\n- uid: System.Windows.Forms.NativeWindow.WndProc*\n  parent: System.Windows.Forms.NativeWindow\n  isExternal: false\n  name: WndProc\n  nameWithType: NativeWindow.WndProc\n"}