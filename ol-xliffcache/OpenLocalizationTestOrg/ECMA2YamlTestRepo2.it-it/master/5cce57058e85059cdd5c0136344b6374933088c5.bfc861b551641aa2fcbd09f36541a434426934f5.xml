{"nodes":[{"pos":[1532,1655],"content":"Provides a simple listener that directs tracing or debugging output to an <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.EventLog\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Provides a simple listener that directs tracing or debugging output to an <xref href=\"System.Diagnostics.EventLog\"></xref>."},{"pos":[1668,5353],"content":"An instance of this EventLogTraceListener can be added to the <xref:System.Diagnostics.Debug.Listeners%2A?displayProperty=fullName>, <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName>, or <xref:System.Diagnostics.TraceSource.Listeners%2A?displayProperty=fullName> collections to send output from tracing or debugging to an <xref:System.Diagnostics.EventLog>. You can add the instance in your code or specify it in the application configuration file. To add an EventLogTraceListener using an application configuration file, edit the file that corresponds to the name of your application or the app.config file in a [!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)] project. In this file, insert an element for a EventLogTraceListener type.       The following example adds a EventLogTraceListener object named `myListener` to the <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName> collection. The `initializeData` parameter specifies the name of the event log source that is to be passed to the <xref:System.Diagnostics.EventLogTraceListener.%23ctor%28System.String%29> constructor.      ```   <configuration>     <system.diagnostics>       <trace autoflush=\"false\" indentsize=\"4\">         <listeners>           <add name=\"myListener\"             type=\"System.Diagnostics.EventLogTraceListener\"             initializeData=\"TraceListenerLog\" />         </listeners>       </trace>     </system.diagnostics>   </configuration>   ```       For more information about how to add trace listeners in the application configuration file, see  or .      > [!NOTE] >  If the <xref:System.Diagnostics.EventLog.Source%2A> for the event log that is associated with the EventLogTraceListener instance does not exist, a new event source is created. To create an event source in Windows Vista, Windows XP Professional, or Windows Server 2003, you must have administrative privileges.   >    >  The reason for this requirement is that all event logs, including security, must be searched to determine whether the event source is unique. In Windows Vista, users do not have permission to access the security log; therefore, a <xref:System.Security.SecurityException> is thrown.   >    >  In Windows Vista, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. To execute the code that accesses the security log, you must first elevate your privileges from standard user to administrator. You can do this when you start an application by right-clicking the application icon and indicating that you want to run as an administrator.       The class provides the <xref:System.Diagnostics.EventLogTraceListener.EventLog%2A> property to get or set the event log that receives the tracing or debugging output, and the <xref:System.Diagnostics.EventLogTraceListener.Name%2A> property to hold the name of the EventLogTraceListener.       The <xref:System.Diagnostics.EventLogTraceListener.Close%2A> method closes the event log so it no longer receives tracing or debugging output. The <xref:System.Diagnostics.EventLogTraceListener.Write%2A> and <xref:System.Diagnostics.EventLogTraceListener.WriteLine%2A> methods write a message to the event log.      > [!NOTE] >  To avoid the possibility of writing large amounts of data to the event log, the EventLogTraceListener does not output the optional trace data specified by the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"An instance of this EventLogTraceListener can be added to the &lt;xref:System.Diagnostics.Debug.Listeners%2A?displayProperty=fullName&gt;, &lt;xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName&gt;, or &lt;xref:System.Diagnostics.TraceSource.Listeners%2A?displayProperty=fullName&gt; collections to send output from tracing or debugging to an &lt;xref:System.Diagnostics.EventLog&gt;.","pos":[0,377],"source":"An instance of this EventLogTraceListener can be added to the <xref:System.Diagnostics.Debug.Listeners%2A?displayProperty=fullName>, <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName>, or <xref:System.Diagnostics.TraceSource.Listeners%2A?displayProperty=fullName> collections to send output from tracing or debugging to an <xref:System.Diagnostics.EventLog>."},{"content":"You can add the instance in your code or specify it in the application configuration file.","pos":[378,468]},{"content":"To add an EventLogTraceListener using an application configuration file, edit the file that corresponds to the name of your application or the app.config file in a <ph id=\"ph1\">[!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)]</ph> project.","pos":[469,703],"source":" To add an EventLogTraceListener using an application configuration file, edit the file that corresponds to the name of your application or the app.config file in a [!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)] project."},{"content":"In this file, insert an element for a EventLogTraceListener type.","pos":[704,769]},{"content":"The following example adds a EventLogTraceListener object named <ph id=\"ph1\">`myListener`</ph> to the &lt;xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName&gt; collection.","pos":[776,941],"source":"       The following example adds a EventLogTraceListener object named `myListener` to the <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName> collection."},{"content":"The <ph id=\"ph1\">`initializeData`</ph> parameter specifies the name of the event log source that is to be passed to the &lt;xref:System.Diagnostics.EventLogTraceListener.%23ctor%28System.String%29&gt; constructor.","pos":[942,1131],"source":" The `initializeData` parameter specifies the name of the event log source that is to be passed to the <xref:System.Diagnostics.EventLogTraceListener.%23ctor%28System.String%29> constructor."},{"content":"<ph id=\"ph1\">```   &lt;configuration&gt;     &lt;system.diagnostics&gt;       &lt;trace autoflush=\"false\" indentsize=\"4\"&gt;         &lt;listeners&gt;           &lt;add name=\"myListener\"             type=\"System.Diagnostics.EventLogTraceListener\"             initializeData=\"TraceListenerLog\" /&gt;         &lt;/listeners&gt;       &lt;/trace&gt;     &lt;/system.diagnostics&gt;   &lt;/configuration&gt;   ```</ph>       For more information about how to add trace listeners in the application configuration file, see  or .","pos":[1137,1588],"source":"```   <configuration>     <system.diagnostics>       <trace autoflush=\"false\" indentsize=\"4\">         <listeners>           <add name=\"myListener\"             type=\"System.Diagnostics.EventLogTraceListener\"             initializeData=\"TraceListenerLog\" />         </listeners>       </trace>     </system.diagnostics>   </configuration>   ```       For more information about how to add trace listeners in the application configuration file, see  or ."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If the &lt;xref:System.Diagnostics.EventLog.Source%2A&gt; for the event log that is associated with the EventLogTraceListener instance does not exist, a new event source is created.","pos":[1594,1782],"source":"      > [!NOTE] >  If the <xref:System.Diagnostics.EventLog.Source%2A> for the event log that is associated with the EventLogTraceListener instance does not exist, a new event source is created."},{"content":"To create an event source in Windows Vista, Windows XP Professional, or Windows Server 2003, you must have administrative privileges.","pos":[1783,1916]},{"content":"&gt;    &gt;  The reason for this requirement is that all event logs, including security, must be searched to determine whether the event source is unique.","pos":[1919,2068],"source":"   >    >  The reason for this requirement is that all event logs, including security, must be searched to determine whether the event source is unique."},{"content":"In Windows Vista, users do not have permission to access the security log; therefore, a &lt;xref:System.Security.SecurityException&gt; is thrown.","pos":[2069,2208],"source":" In Windows Vista, users do not have permission to access the security log; therefore, a <xref:System.Security.SecurityException> is thrown."},{"content":"&gt;    &gt;  In Windows Vista, User Account Control (UAC) determines the privileges of a user.","pos":[2211,2300],"source":"   >    >  In Windows Vista, User Account Control (UAC) determines the privileges of a user."},{"content":"If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token.","pos":[2301,2467]},{"content":"By default, you are in the standard user role.","pos":[2468,2514]},{"content":"To execute the code that accesses the security log, you must first elevate your privileges from standard user to administrator.","pos":[2515,2642]},{"content":"You can do this when you start an application by right-clicking the application icon and indicating that you want to run as an administrator.","pos":[2643,2784]},{"content":"The class provides the &lt;xref:System.Diagnostics.EventLogTraceListener.EventLog%2A&gt; property to get or set the event log that receives the tracing or debugging output, and the &lt;xref:System.Diagnostics.EventLogTraceListener.Name%2A&gt; property to hold the name of the EventLogTraceListener.","pos":[2791,3077],"source":"       The class provides the <xref:System.Diagnostics.EventLogTraceListener.EventLog%2A> property to get or set the event log that receives the tracing or debugging output, and the <xref:System.Diagnostics.EventLogTraceListener.Name%2A> property to hold the name of the EventLogTraceListener."},{"content":"The &lt;xref:System.Diagnostics.EventLogTraceListener.Close%2A&gt; method closes the event log so it no longer receives tracing or debugging output.","pos":[3084,3226],"source":"       The <xref:System.Diagnostics.EventLogTraceListener.Close%2A> method closes the event log so it no longer receives tracing or debugging output."},{"content":"The &lt;xref:System.Diagnostics.EventLogTraceListener.Write%2A&gt; and &lt;xref:System.Diagnostics.EventLogTraceListener.WriteLine%2A&gt; methods write a message to the event log.","pos":[3227,3394],"source":" The <xref:System.Diagnostics.EventLogTraceListener.Write%2A> and <xref:System.Diagnostics.EventLogTraceListener.WriteLine%2A> methods write a message to the event log."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  To avoid the possibility of writing large amounts of data to the event log, the EventLogTraceListener does not output the optional trace data specified by the &lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt; property.","pos":[3400,3643],"source":"      > [!NOTE] >  To avoid the possibility of writing large amounts of data to the event log, the EventLogTraceListener does not output the optional trace data specified by the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property."}]},{"pos":[8371,8498],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.EventLogTraceListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class without a trace listener.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Diagnostics.EventLogTraceListener\"></xref> class without a trace listener."},{"pos":[9154,9286],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.EventLogTraceListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class using the specified event log.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Diagnostics.EventLogTraceListener\"></xref> class using the specified event log."},{"pos":[9473,9499],"content":"The event log to write to.","needQuote":true,"needEscape":true,"nodes":[{"content":"The event log to write to.","pos":[0,26]}]},{"pos":[10046,10175],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.EventLogTraceListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class using the specified source.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Diagnostics.EventLogTraceListener\"></xref> class using the specified source."},{"pos":[10323,10364],"content":"The name of an existing event log source.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of an existing event log source.","pos":[0,41]}]},{"pos":[10808,10887],"content":"Closes the event log so that it no longer receives tracing or debugging output.","needQuote":true,"needEscape":true,"nodes":[{"content":"Closes the event log so that it no longer receives tracing or debugging output.","pos":[0,79]}]},{"pos":[11611,11623],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[12080,12119],"content":"Gets or sets the event log to write to.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the event log to write to.","pos":[0,39]}]},{"pos":[12272,12298],"content":"The event log to write to.","needQuote":true,"needEscape":true,"nodes":[{"content":"The event log to write to.","pos":[0,26]}]},{"pos":[12736,12828],"content":"Gets or sets the name of this <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.EventLogTraceListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets or sets the name of this <xref href=\"System.Diagnostics.EventLogTraceListener\"></xref>."},{"pos":[12840,12899],"content":"This property defaults to the source name of the event log.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This property defaults to the source name of the event log.","pos":[0,59]}]},{"pos":[13022,13054],"content":"The name of this trace listener.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of this trace listener.","pos":[0,32]}]},{"pos":[13889,13969],"content":"Writes trace information, a data object, and event information to the event log.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes trace information, a data object, and event information to the event log.","pos":[0,80]}]},{"pos":[13982,15282],"content":"> [!IMPORTANT] >  The <xref:System.Diagnostics.EventLogTraceListener.TraceData%2A> methods are not intended to be called by application code. They are called by methods of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes to output trace data.       The <xref:System.Diagnostics.EventLogTraceListener.TraceData%2A> method, like the <xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A> method is intended for automated tools but also allows the attaching of additional objects, for example an exception instance, to the trace.       The `eventCache` and `source` parameters are used to determine if the event should be traced. `id` is used to create an <xref:System.Diagnostics.EventInstance> object and the <xref:System.Diagnostics.TraceEventType> is equated to an <xref:System.Diagnostics.EventLogEntryType> for the <xref:System.Diagnostics.EventInstance.EntryType%2A> property. The <xref:System.Diagnostics.EventInstance> is written to the event log with the `data` object, formatted as a string, using the <xref:System.Diagnostics.EventLog.WriteEvent%2A> method.      > [!NOTE] >  The maximum value of the `id` parameter is 65,535. If the `id` value specified is greater than 65,535, the maximum value is used.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"<ph id=\"ph1\">&gt; [!IMPORTANT]</ph> &gt;  The &lt;xref:System.Diagnostics.EventLogTraceListener.TraceData%2A&gt; methods are not intended to be called by application code.","pos":[0,141],"source":"> [!IMPORTANT] >  The <xref:System.Diagnostics.EventLogTraceListener.TraceData%2A> methods are not intended to be called by application code."},{"content":"They are called by methods of the &lt;xref:System.Diagnostics.Debug&gt;, &lt;xref:System.Diagnostics.Trace&gt;, and &lt;xref:System.Diagnostics.TraceSource&gt; classes to output trace data.","pos":[142,313],"source":" They are called by methods of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes to output trace data."},{"content":"The &lt;xref:System.Diagnostics.EventLogTraceListener.TraceData%2A&gt; method, like the &lt;xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A&gt; method is intended for automated tools but also allows the attaching of additional objects, for example an exception instance, to the trace.","pos":[320,604],"source":"       The <xref:System.Diagnostics.EventLogTraceListener.TraceData%2A> method, like the <xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A> method is intended for automated tools but also allows the attaching of additional objects, for example an exception instance, to the trace."},{"content":"The <ph id=\"ph1\">`eventCache`</ph> and <ph id=\"ph2\">`source`</ph> parameters are used to determine if the event should be traced.","pos":[611,704],"source":"       The `eventCache` and `source` parameters are used to determine if the event should be traced."},{"content":"<ph id=\"ph1\">`id`</ph> is used to create an &lt;xref:System.Diagnostics.EventInstance&gt; object and the &lt;xref:System.Diagnostics.TraceEventType&gt; is equated to an &lt;xref:System.Diagnostics.EventLogEntryType&gt; for the &lt;xref:System.Diagnostics.EventInstance.EntryType%2A&gt; property.","pos":[705,958],"source":"`id` is used to create an <xref:System.Diagnostics.EventInstance> object and the <xref:System.Diagnostics.TraceEventType> is equated to an <xref:System.Diagnostics.EventLogEntryType> for the <xref:System.Diagnostics.EventInstance.EntryType%2A> property."},{"content":"The &lt;xref:System.Diagnostics.EventInstance&gt; is written to the event log with the <ph id=\"ph1\">`data`</ph> object, formatted as a string, using the &lt;xref:System.Diagnostics.EventLog.WriteEvent%2A&gt; method.","pos":[959,1144],"source":" The <xref:System.Diagnostics.EventInstance> is written to the event log with the `data` object, formatted as a string, using the <xref:System.Diagnostics.EventLog.WriteEvent%2A> method."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The maximum value of the <ph id=\"ph2\">`id`</ph> parameter is 65,535.","pos":[1150,1213],"source":"      > [!NOTE] >  The maximum value of the `id` parameter is 65,535."},{"content":"If the <ph id=\"ph1\">`id`</ph> value specified is greater than 65,535, the maximum value is used.","pos":[1214,1292],"source":" If the `id` value specified is greater than 65,535, the maximum value is used."}]},{"pos":[15570,15657],"content":"An object that contains the current process ID, thread ID, and stack trace information.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that contains the current process ID, thread ID, and stack trace information.","pos":[0,87]}]},{"pos":[15720,15825],"content":"A name used to identify the output; typically the name of the application that generated the trace event.","needQuote":true,"needEscape":true,"nodes":[{"content":"A name used to identify the output; typically the name of the application that generated the trace event.","pos":[0,105]}]},{"pos":[15910,15999],"content":"One of the enumeration values that specifies the type of event that has caused the trace.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the enumeration values that specifies the type of event that has caused the trace.","pos":[0,89]}]},{"pos":[16057,16159],"content":"A numeric identifier for the event. The combination of `source` and `id` uniquely identifies an event.","needQuote":true,"needEscape":true,"nodes":[{"content":"A numeric identifier for the event.","pos":[0,35]},{"content":"The combination of <ph id=\"ph1\">`source`</ph> and <ph id=\"ph2\">`id`</ph> uniquely identifies an event.","pos":[36,102],"source":" The combination of `source` and `id` uniquely identifies an event."}]},{"pos":[16220,16272],"content":"A data object to write to the output file or stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"A data object to write to the output file or stream.","pos":[0,52]}]},{"pos":[16446,16552],"content":"<code>source</code> is not specified.       -or-       The log entry string exceeds 32,766 characters.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is not specified.","pos":[0,37],"source":"<code>source</code> is not specified."},{"content":"-or-       The log entry string exceeds 32,766 characters.","pos":[44,102]}]},{"pos":[17322,17413],"content":"Writes trace information, an array of data objects, and event information to the event log.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes trace information, an array of data objects, and event information to the event log.","pos":[0,91]}]},{"pos":[17426,18934],"content":"> [!IMPORTANT] >  The <xref:System.Diagnostics.EventLogTraceListener.TraceData%2A> methods are not intended to be called by application code. They are called by methods of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes to output trace data.       The <xref:System.Diagnostics.EventLogTraceListener.TraceData%2A> method, like the <xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A> method is intended for automated tools but also allows the attaching of additional objects, for example an exception instance, to the trace.       The `severity` and `id` parameter data is used to create an <xref:System.Diagnostics.EventInstance> object, which is written to the event log with the data from the array of data objects.       The `eventCache` and `source` parameters are used to determine if the event should be traced. `id` is used to create an <xref:System.Diagnostics.EventInstance> object and the <xref:System.Diagnostics.TraceEventType> is equated to an <xref:System.Diagnostics.EventLogEntryType> for the <xref:System.Diagnostics.EventInstance.EntryType%2A> property. The <xref:System.Diagnostics.EventInstance> is written to the event log with the `data` object array, formatted as a string array, using the <xref:System.Diagnostics.EventLog.WriteEvent%2A> method.      > [!NOTE] >  The maximum value of the `id` parameter is 65,535. If the `id` value specified is greater than 65,535, the maximum value is used.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"<ph id=\"ph1\">&gt; [!IMPORTANT]</ph> &gt;  The &lt;xref:System.Diagnostics.EventLogTraceListener.TraceData%2A&gt; methods are not intended to be called by application code.","pos":[0,141],"source":"> [!IMPORTANT] >  The <xref:System.Diagnostics.EventLogTraceListener.TraceData%2A> methods are not intended to be called by application code."},{"content":"They are called by methods of the &lt;xref:System.Diagnostics.Debug&gt;, &lt;xref:System.Diagnostics.Trace&gt;, and &lt;xref:System.Diagnostics.TraceSource&gt; classes to output trace data.","pos":[142,313],"source":" They are called by methods of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes to output trace data."},{"content":"The &lt;xref:System.Diagnostics.EventLogTraceListener.TraceData%2A&gt; method, like the &lt;xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A&gt; method is intended for automated tools but also allows the attaching of additional objects, for example an exception instance, to the trace.","pos":[320,604],"source":"       The <xref:System.Diagnostics.EventLogTraceListener.TraceData%2A> method, like the <xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A> method is intended for automated tools but also allows the attaching of additional objects, for example an exception instance, to the trace."},{"content":"The <ph id=\"ph1\">`severity`</ph> and <ph id=\"ph2\">`id`</ph> parameter data is used to create an &lt;xref:System.Diagnostics.EventInstance&gt; object, which is written to the event log with the data from the array of data objects.","pos":[611,798],"source":"       The `severity` and `id` parameter data is used to create an <xref:System.Diagnostics.EventInstance> object, which is written to the event log with the data from the array of data objects."},{"content":"The <ph id=\"ph1\">`eventCache`</ph> and <ph id=\"ph2\">`source`</ph> parameters are used to determine if the event should be traced.","pos":[805,898],"source":"       The `eventCache` and `source` parameters are used to determine if the event should be traced."},{"content":"<ph id=\"ph1\">`id`</ph> is used to create an &lt;xref:System.Diagnostics.EventInstance&gt; object and the &lt;xref:System.Diagnostics.TraceEventType&gt; is equated to an &lt;xref:System.Diagnostics.EventLogEntryType&gt; for the &lt;xref:System.Diagnostics.EventInstance.EntryType%2A&gt; property.","pos":[899,1152],"source":"`id` is used to create an <xref:System.Diagnostics.EventInstance> object and the <xref:System.Diagnostics.TraceEventType> is equated to an <xref:System.Diagnostics.EventLogEntryType> for the <xref:System.Diagnostics.EventInstance.EntryType%2A> property."},{"content":"The &lt;xref:System.Diagnostics.EventInstance&gt; is written to the event log with the <ph id=\"ph1\">`data`</ph> object array, formatted as a string array, using the &lt;xref:System.Diagnostics.EventLog.WriteEvent%2A&gt; method.","pos":[1153,1350],"source":" The <xref:System.Diagnostics.EventInstance> is written to the event log with the `data` object array, formatted as a string array, using the <xref:System.Diagnostics.EventLog.WriteEvent%2A> method."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The maximum value of the <ph id=\"ph2\">`id`</ph> parameter is 65,535.","pos":[1356,1419],"source":"      > [!NOTE] >  The maximum value of the `id` parameter is 65,535."},{"content":"If the <ph id=\"ph1\">`id`</ph> value specified is greater than 65,535, the maximum value is used.","pos":[1420,1498],"source":" If the `id` value specified is greater than 65,535, the maximum value is used."}]},{"pos":[19224,19311],"content":"An object that contains the current process ID, thread ID, and stack trace information.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that contains the current process ID, thread ID, and stack trace information.","pos":[0,87]}]},{"pos":[19374,19479],"content":"A name used to identify the output; typically the name of the application that generated the trace event.","needQuote":true,"needEscape":true,"nodes":[{"content":"A name used to identify the output; typically the name of the application that generated the trace event.","pos":[0,105]}]},{"pos":[19564,19653],"content":"One of the enumeration values that specifies the type of event that has caused the trace.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the enumeration values that specifies the type of event that has caused the trace.","pos":[0,89]}]},{"pos":[19711,19813],"content":"A numeric identifier for the event. The combination of `source` and `id` uniquely identifies an event.","needQuote":true,"needEscape":true,"nodes":[{"content":"A numeric identifier for the event.","pos":[0,35]},{"content":"The combination of <ph id=\"ph1\">`source`</ph> and <ph id=\"ph2\">`id`</ph> uniquely identifies an event.","pos":[36,102],"source":" The combination of `source` and `id` uniquely identifies an event."}]},{"pos":[19876,19901],"content":"An array of data objects.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of data objects.","pos":[0,25]}]},{"pos":[20075,20181],"content":"<code>source</code> is not specified.       -or-       The log entry string exceeds 32,766 characters.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is not specified.","pos":[0,37],"source":"<code>source</code> is not specified."},{"content":"-or-       The log entry string exceeds 32,766 characters.","pos":[44,102]}]},{"pos":[20946,21022],"content":"Writes trace information, a message, and event information to the event log.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes trace information, a message, and event information to the event log.","pos":[0,76]}]},{"pos":[21035,22293],"content":"> [!IMPORTANT] >  The <xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A> methods are not intended to be called by application code. These methods are called by methods of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes to write trace data.       The <xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A> method is intended to trace events that can be processed automatically by tools. For example a monitoring tool can notify an administrator if a specific event is traced by a specific source.       The `eventCache` and `source` parameters are used to determine if the event should be traced. `id` is used to create an <xref:System.Diagnostics.EventInstance> object and the <xref:System.Diagnostics.TraceEventType> is equated to an <xref:System.Diagnostics.EventLogEntryType> for the <xref:System.Diagnostics.EventInstance.EntryType%2A> property. The <xref:System.Diagnostics.EventInstance> is written to the event log with the `message` data using the <xref:System.Diagnostics.EventLog.WriteEvent%2A> method.      > [!NOTE] >  The maximum value of the `id` parameter is 65,535. If the `id` value specified is greater than 65,535, the maximum value is used.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"<ph id=\"ph1\">&gt; [!IMPORTANT]</ph> &gt;  The &lt;xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A&gt; methods are not intended to be called by application code.","pos":[0,142],"source":"> [!IMPORTANT] >  The <xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A> methods are not intended to be called by application code."},{"content":"These methods are called by methods of the &lt;xref:System.Diagnostics.Debug&gt;, &lt;xref:System.Diagnostics.Trace&gt;, and &lt;xref:System.Diagnostics.TraceSource&gt; classes to write trace data.","pos":[143,322],"source":" These methods are called by methods of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes to write trace data."},{"content":"The &lt;xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A&gt; method is intended to trace events that can be processed automatically by tools.","pos":[329,475],"source":"       The <xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A> method is intended to trace events that can be processed automatically by tools."},{"content":"For example a monitoring tool can notify an administrator if a specific event is traced by a specific source.","pos":[476,585]},{"content":"The <ph id=\"ph1\">`eventCache`</ph> and <ph id=\"ph2\">`source`</ph> parameters are used to determine if the event should be traced.","pos":[592,685],"source":"       The `eventCache` and `source` parameters are used to determine if the event should be traced."},{"content":"<ph id=\"ph1\">`id`</ph> is used to create an &lt;xref:System.Diagnostics.EventInstance&gt; object and the &lt;xref:System.Diagnostics.TraceEventType&gt; is equated to an &lt;xref:System.Diagnostics.EventLogEntryType&gt; for the &lt;xref:System.Diagnostics.EventInstance.EntryType%2A&gt; property.","pos":[686,939],"source":"`id` is used to create an <xref:System.Diagnostics.EventInstance> object and the <xref:System.Diagnostics.TraceEventType> is equated to an <xref:System.Diagnostics.EventLogEntryType> for the <xref:System.Diagnostics.EventInstance.EntryType%2A> property."},{"content":"The &lt;xref:System.Diagnostics.EventInstance&gt; is written to the event log with the <ph id=\"ph1\">`message`</ph> data using the &lt;xref:System.Diagnostics.EventLog.WriteEvent%2A&gt; method.","pos":[940,1102],"source":" The <xref:System.Diagnostics.EventInstance> is written to the event log with the `message` data using the <xref:System.Diagnostics.EventLog.WriteEvent%2A> method."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The maximum value of the <ph id=\"ph2\">`id`</ph> parameter is 65,535.","pos":[1108,1171],"source":"      > [!NOTE] >  The maximum value of the `id` parameter is 65,535."},{"content":"If the <ph id=\"ph1\">`id`</ph> value specified is greater than 65,535, the maximum value is used.","pos":[1172,1250],"source":" If the `id` value specified is greater than 65,535, the maximum value is used."}]},{"pos":[22585,22672],"content":"An object that contains the current process ID, thread ID, and stack trace information.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that contains the current process ID, thread ID, and stack trace information.","pos":[0,87]}]},{"pos":[22735,22840],"content":"A name used to identify the output; typically the name of the application that generated the trace event.","needQuote":true,"needEscape":true,"nodes":[{"content":"A name used to identify the output; typically the name of the application that generated the trace event.","pos":[0,105]}]},{"pos":[22925,23014],"content":"One of the enumeration values that specifies the type of event that has caused the trace.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the enumeration values that specifies the type of event that has caused the trace.","pos":[0,89]}]},{"pos":[23072,23174],"content":"A numeric identifier for the event. The combination of `source` and `id` uniquely identifies an event.","needQuote":true,"needEscape":true,"nodes":[{"content":"A numeric identifier for the event.","pos":[0,35]},{"content":"The combination of <ph id=\"ph1\">`source`</ph> and <ph id=\"ph2\">`id`</ph> uniquely identifies an event.","pos":[36,102],"source":" The combination of `source` and `id` uniquely identifies an event."}]},{"pos":[23238,23256],"content":"The trace message.","needQuote":true,"needEscape":true,"nodes":[{"content":"The trace message.","pos":[0,18]}]},{"pos":[23431,23537],"content":"<code>source</code> is not specified.       -or-       The log entry string exceeds 32,766 characters.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is not specified.","pos":[0,37],"source":"<code>source</code> is not specified."},{"content":"-or-       The log entry string exceeds 32,766 characters.","pos":[44,102]}]},{"pos":[24361,24456],"content":"Writes trace information, a formatted array of objects, and event information to the event log.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes trace information, a formatted array of objects, and event information to the event log.","pos":[0,95]}]},{"pos":[24469,25969],"content":"> [!IMPORTANT] >  The <xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A> methods are not intended to be called by application code. These methods are called by methods of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes to write trace data.       The <xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A> method is intended to trace events that can be processed automatically by tools. For example a monitoring tool can notify an administrator if a specific event is traced by a specific source.       The `eventCache` and `source` parameters are used to determine if the event should be traced. `id` is used to create an <xref:System.Diagnostics.EventInstance> object and the <xref:System.Diagnostics.TraceEventType> is equated to an <xref:System.Diagnostics.EventLogEntryType> for the <xref:System.Diagnostics.EventInstance.EntryType%2A> property. The <xref:System.Diagnostics.EventInstance> is written to the event log, using the <xref:System.Diagnostics.EventLog.WriteEvent%2A> method, with the message obtained from the `format` and `args` parameters. The `args` object array is converted to a string using the <xref:System.String.Format%2A> method, passing the `format` string and `args` array to format the string as the message for the event log.      > [!NOTE] >  The maximum value of the `id` parameter is 65,535. If the `id` value specified is greater than 65,535, the maximum value is used.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"<ph id=\"ph1\">&gt; [!IMPORTANT]</ph> &gt;  The &lt;xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A&gt; methods are not intended to be called by application code.","pos":[0,142],"source":"> [!IMPORTANT] >  The <xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A> methods are not intended to be called by application code."},{"content":"These methods are called by methods of the &lt;xref:System.Diagnostics.Debug&gt;, &lt;xref:System.Diagnostics.Trace&gt;, and &lt;xref:System.Diagnostics.TraceSource&gt; classes to write trace data.","pos":[143,322],"source":" These methods are called by methods of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes to write trace data."},{"content":"The &lt;xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A&gt; method is intended to trace events that can be processed automatically by tools.","pos":[329,475],"source":"       The <xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A> method is intended to trace events that can be processed automatically by tools."},{"content":"For example a monitoring tool can notify an administrator if a specific event is traced by a specific source.","pos":[476,585]},{"content":"The <ph id=\"ph1\">`eventCache`</ph> and <ph id=\"ph2\">`source`</ph> parameters are used to determine if the event should be traced.","pos":[592,685],"source":"       The `eventCache` and `source` parameters are used to determine if the event should be traced."},{"content":"<ph id=\"ph1\">`id`</ph> is used to create an &lt;xref:System.Diagnostics.EventInstance&gt; object and the &lt;xref:System.Diagnostics.TraceEventType&gt; is equated to an &lt;xref:System.Diagnostics.EventLogEntryType&gt; for the &lt;xref:System.Diagnostics.EventInstance.EntryType%2A&gt; property.","pos":[686,939],"source":"`id` is used to create an <xref:System.Diagnostics.EventInstance> object and the <xref:System.Diagnostics.TraceEventType> is equated to an <xref:System.Diagnostics.EventLogEntryType> for the <xref:System.Diagnostics.EventInstance.EntryType%2A> property."},{"content":"The &lt;xref:System.Diagnostics.EventInstance&gt; is written to the event log, using the &lt;xref:System.Diagnostics.EventLog.WriteEvent%2A&gt; method, with the message obtained from the <ph id=\"ph1\">`format`</ph> and <ph id=\"ph2\">`args`</ph> parameters.","pos":[940,1146],"source":" The <xref:System.Diagnostics.EventInstance> is written to the event log, using the <xref:System.Diagnostics.EventLog.WriteEvent%2A> method, with the message obtained from the `format` and `args` parameters."},{"content":"The <ph id=\"ph1\">`args`</ph> object array is converted to a string using the &lt;xref:System.String.Format%2A&gt; method, passing the <ph id=\"ph2\">`format`</ph> string and <ph id=\"ph3\">`args`</ph> array to format the string as the message for the event log.","pos":[1147,1344],"source":" The `args` object array is converted to a string using the <xref:System.String.Format%2A> method, passing the `format` string and `args` array to format the string as the message for the event log."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  The maximum value of the <ph id=\"ph2\">`id`</ph> parameter is 65,535.","pos":[1350,1413],"source":"      > [!NOTE] >  The maximum value of the `id` parameter is 65,535."},{"content":"If the <ph id=\"ph1\">`id`</ph> value specified is greater than 65,535, the maximum value is used.","pos":[1414,1492],"source":" If the `id` value specified is greater than 65,535, the maximum value is used."}]},{"pos":[26275,26362],"content":"An object that contains the current process ID, thread ID, and stack trace information.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that contains the current process ID, thread ID, and stack trace information.","pos":[0,87]}]},{"pos":[26425,26530],"content":"A name used to identify the output; typically the name of the application that generated the trace event.","needQuote":true,"needEscape":true,"nodes":[{"content":"A name used to identify the output; typically the name of the application that generated the trace event.","pos":[0,105]}]},{"pos":[26615,26704],"content":"One of the enumeration values that specifies the type of event that has caused the trace.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the enumeration values that specifies the type of event that has caused the trace.","pos":[0,89]}]},{"pos":[26762,26864],"content":"A numeric identifier for the event. The combination of `source` and `id` uniquely identifies an event.","needQuote":true,"needEscape":true,"nodes":[{"content":"A numeric identifier for the event.","pos":[0,35]},{"content":"The combination of <ph id=\"ph1\">`source`</ph> and <ph id=\"ph2\">`id`</ph> uniquely identifies an event.","pos":[36,102],"source":" The combination of `source` and `id` uniquely identifies an event."}]},{"pos":[26927,27030],"content":"A format string that contains zero or more format items that correspond to objects in the <ph id=\"ph1\">`args`</ph> array.","needQuote":true,"needEscape":true,"source":"A format string that contains zero or more format items that correspond to objects in the `args` array."},{"pos":[27093,27209],"content":"An <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_object\" name=\"object\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> array containing zero or more objects to format.","needQuote":true,"needEscape":true,"source":"An <xref uid=\"langword_csharp_object\" name=\"object\" href=\"\"></xref> array containing zero or more objects to format."},{"pos":[27384,27490],"content":"<code>source</code> is not specified.       -or-       The log entry string exceeds 32,766 characters.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is not specified.","pos":[0,37],"source":"<code>source</code> is not specified."},{"content":"-or-       The log entry string exceeds 32,766 characters.","pos":[44,102]}]},{"pos":[27906,27958],"content":"Writes a message to the event log for this instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes a message to the event log for this instance.","pos":[0,52]}]},{"pos":[28106,28127],"content":"The message to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The message to write.","pos":[0,21]}]},{"pos":[28296,28343],"content":"<ph id=\"ph1\">&lt;code&gt;message&lt;/code&gt;</ph> exceeds 32,766 characters.","needQuote":true,"needEscape":true,"source":"<code>message</code> exceeds 32,766 characters."},{"pos":[28778,28830],"content":"Writes a message to the event log for this instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"Writes a message to the event log for this instance.","pos":[0,52]}]},{"pos":[28982,29003],"content":"The message to write.","needQuote":true,"needEscape":true,"nodes":[{"content":"The message to write.","pos":[0,21]}]},{"pos":[29176,29223],"content":"<ph id=\"ph1\">&lt;code&gt;message&lt;/code&gt;</ph> exceeds 32,766 characters.","needQuote":true,"needEscape":true,"source":"<code>message</code> exceeds 32,766 characters."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Diagnostics.EventLogTraceListener\n  id: EventLogTraceListener\n  children:\n  - System.Diagnostics.EventLogTraceListener.#ctor\n  - System.Diagnostics.EventLogTraceListener.#ctor(System.Diagnostics.EventLog)\n  - System.Diagnostics.EventLogTraceListener.#ctor(System.String)\n  - System.Diagnostics.EventLogTraceListener.Close\n  - System.Diagnostics.EventLogTraceListener.Dispose(System.Boolean)\n  - System.Diagnostics.EventLogTraceListener.EventLog\n  - System.Diagnostics.EventLogTraceListener.Name\n  - System.Diagnostics.EventLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)\n  - System.Diagnostics.EventLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])\n  - System.Diagnostics.EventLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)\n  - System.Diagnostics.EventLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])\n  - System.Diagnostics.EventLogTraceListener.Write(System.String)\n  - System.Diagnostics.EventLogTraceListener.WriteLine(System.String)\n  langs:\n  - csharp\n  name: EventLogTraceListener\n  nameWithType: EventLogTraceListener\n  fullName: System.Diagnostics.EventLogTraceListener\n  type: Class\n  summary: Provides a simple listener that directs tracing or debugging output to an <xref href=\"System.Diagnostics.EventLog\"></xref>.\n  remarks: \"An instance of this EventLogTraceListener can be added to the <xref:System.Diagnostics.Debug.Listeners%2A?displayProperty=fullName>, <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName>, or <xref:System.Diagnostics.TraceSource.Listeners%2A?displayProperty=fullName> collections to send output from tracing or debugging to an <xref:System.Diagnostics.EventLog>. You can add the instance in your code or specify it in the application configuration file. To add an EventLogTraceListener using an application configuration file, edit the file that corresponds to the name of your application or the app.config file in a [!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)] project. In this file, insert an element for a EventLogTraceListener type.  \\n  \\n The following example adds a EventLogTraceListener object named `myListener` to the <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName> collection. The `initializeData` parameter specifies the name of the event log source that is to be passed to the <xref:System.Diagnostics.EventLogTraceListener.%23ctor%28System.String%29> constructor.  \\n  \\n```  \\n<configuration>  \\n  <system.diagnostics>  \\n    <trace autoflush=\\\"false\\\" indentsize=\\\"4\\\">  \\n      <listeners>  \\n        <add name=\\\"myListener\\\"  \\n          type=\\\"System.Diagnostics.EventLogTraceListener\\\"  \\n          initializeData=\\\"TraceListenerLog\\\" />  \\n      </listeners>  \\n    </trace>  \\n  </system.diagnostics>  \\n</configuration>  \\n```  \\n  \\n For more information about how to add trace listeners in the application configuration file, see  or .  \\n  \\n> [!NOTE]\\n>  If the <xref:System.Diagnostics.EventLog.Source%2A> for the event log that is associated with the EventLogTraceListener instance does not exist, a new event source is created. To create an event source in Windows Vista, Windows XP Professional, or Windows Server 2003, you must have administrative privileges.  \\n>   \\n>  The reason for this requirement is that all event logs, including security, must be searched to determine whether the event source is unique. In Windows Vista, users do not have permission to access the security log; therefore, a <xref:System.Security.SecurityException> is thrown.  \\n>   \\n>  In Windows Vista, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. To execute the code that accesses the security log, you must first elevate your privileges from standard user to administrator. You can do this when you start an application by right-clicking the application icon and indicating that you want to run as an administrator.  \\n  \\n The class provides the <xref:System.Diagnostics.EventLogTraceListener.EventLog%2A> property to get or set the event log that receives the tracing or debugging output, and the <xref:System.Diagnostics.EventLogTraceListener.Name%2A> property to hold the name of the EventLogTraceListener.  \\n  \\n The <xref:System.Diagnostics.EventLogTraceListener.Close%2A> method closes the event log so it no longer receives tracing or debugging output. The <xref:System.Diagnostics.EventLogTraceListener.Write%2A> and <xref:System.Diagnostics.EventLogTraceListener.WriteLine%2A> methods write a message to the event log.  \\n  \\n> [!NOTE]\\n>  To avoid the possibility of writing large amounts of data to the event log, the EventLogTraceListener does not output the optional trace data specified by the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.\"\n  example:\n  - \"The following example creates a trace listener that sends output to an event log. First, the code creates a new EventLogTraceListener that uses the source `myEventLogSource`. Next, `myTraceListener` is added to the <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName> collection. Finally, the example sends a line of output to the <xref:System.Diagnostics.Trace.Listeners%2A> object.  \\n  \\n [!code-cs[Classic EventLogTraceListener Example#1](~/add/codesnippet/csharp/t-system.diagnostics.eve_3_1.cs)]\\n [!code-vb[Classic EventLogTraceListener Example#1](~/add/codesnippet/visualbasic/t-system.diagnostics.eve_3_1.vb)]\\n [!code-cpp[Classic EventLogTraceListener Example#1](~/add/codesnippet/cpp/t-system.diagnostics.eve_3_1.cpp)]\"\n  syntax:\n    content: 'public sealed class EventLogTraceListener : System.Diagnostics.TraceListener'\n  inheritance:\n  - System.Object\n  - System.MarshalByRefObject\n  - System.Diagnostics.TraceListener\n  implements: []\n  inheritedMembers:\n  - System.Diagnostics.TraceListener.Attributes\n  - System.Diagnostics.TraceListener.Dispose\n  - System.Diagnostics.TraceListener.Fail(System.String)\n  - System.Diagnostics.TraceListener.Fail(System.String,System.String)\n  - System.Diagnostics.TraceListener.Filter\n  - System.Diagnostics.TraceListener.Flush\n  - System.Diagnostics.TraceListener.GetSupportedAttributes\n  - System.Diagnostics.TraceListener.IndentLevel\n  - System.Diagnostics.TraceListener.IndentSize\n  - System.Diagnostics.TraceListener.IsThreadSafe\n  - System.Diagnostics.TraceListener.NeedIndent\n  - System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)\n  - System.Diagnostics.TraceListener.TraceOutputOptions\n  - System.Diagnostics.TraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)\n  - System.Diagnostics.TraceListener.Write(System.Object)\n  - System.Diagnostics.TraceListener.Write(System.Object,System.String)\n  - System.Diagnostics.TraceListener.Write(System.String,System.String)\n  - System.Diagnostics.TraceListener.WriteIndent\n  - System.Diagnostics.TraceListener.WriteLine(System.Object)\n  - System.Diagnostics.TraceListener.WriteLine(System.Object,System.String)\n  - System.Diagnostics.TraceListener.WriteLine(System.String,System.String)\n  - System.MarshalByRefObject.CreateObjRef(System.Type)\n  - System.MarshalByRefObject.GetLifetimeService\n  - System.MarshalByRefObject.InitializeLifetimeService\n  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  platform:\n  - net462\n- uid: System.Diagnostics.EventLogTraceListener.#ctor\n  id: '#ctor'\n  parent: System.Diagnostics.EventLogTraceListener\n  langs:\n  - csharp\n  name: EventLogTraceListener()\n  nameWithType: EventLogTraceListener.EventLogTraceListener()\n  fullName: System.Diagnostics.EventLogTraceListener.EventLogTraceListener()\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Initializes a new instance of the <xref href=\"System.Diagnostics.EventLogTraceListener\"></xref> class without a trace listener.\n  syntax:\n    content: public EventLogTraceListener ();\n    parameters: []\n  overload: System.Diagnostics.EventLogTraceListener.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.EventLogTraceListener.#ctor(System.Diagnostics.EventLog)\n  id: '#ctor(System.Diagnostics.EventLog)'\n  parent: System.Diagnostics.EventLogTraceListener\n  langs:\n  - csharp\n  name: EventLogTraceListener(EventLog)\n  nameWithType: EventLogTraceListener.EventLogTraceListener(EventLog)\n  fullName: System.Diagnostics.EventLogTraceListener.EventLogTraceListener(EventLog)\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Initializes a new instance of the <xref href=\"System.Diagnostics.EventLogTraceListener\"></xref> class using the specified event log.\n  syntax:\n    content: public EventLogTraceListener (System.Diagnostics.EventLog eventLog);\n    parameters:\n    - id: eventLog\n      type: System.Diagnostics.EventLog\n      description: The event log to write to.\n  overload: System.Diagnostics.EventLogTraceListener.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.EventLogTraceListener.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Diagnostics.EventLogTraceListener\n  langs:\n  - csharp\n  name: EventLogTraceListener(String)\n  nameWithType: EventLogTraceListener.EventLogTraceListener(String)\n  fullName: System.Diagnostics.EventLogTraceListener.EventLogTraceListener(String)\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Initializes a new instance of the <xref href=\"System.Diagnostics.EventLogTraceListener\"></xref> class using the specified source.\n  syntax:\n    content: public EventLogTraceListener (string source);\n    parameters:\n    - id: source\n      type: System.String\n      description: The name of an existing event log source.\n  overload: System.Diagnostics.EventLogTraceListener.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.EventLogTraceListener.Close\n  id: Close\n  parent: System.Diagnostics.EventLogTraceListener\n  langs:\n  - csharp\n  name: Close()\n  nameWithType: EventLogTraceListener.Close()\n  fullName: System.Diagnostics.EventLogTraceListener.Close()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Closes the event log so that it no longer receives tracing or debugging output.\n  syntax:\n    content: public override void Close ();\n    parameters: []\n  overload: System.Diagnostics.EventLogTraceListener.Close*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.EventLogTraceListener.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Diagnostics.EventLogTraceListener\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: EventLogTraceListener.Dispose(Boolean)\n  fullName: System.Diagnostics.EventLogTraceListener.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  syntax:\n    content: protected override void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: To be added.\n  overload: System.Diagnostics.EventLogTraceListener.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.EventLogTraceListener.EventLog\n  id: EventLog\n  parent: System.Diagnostics.EventLogTraceListener\n  langs:\n  - csharp\n  name: EventLog\n  nameWithType: EventLogTraceListener.EventLog\n  fullName: System.Diagnostics.EventLogTraceListener.EventLog\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Gets or sets the event log to write to.\n  syntax:\n    content: public System.Diagnostics.EventLog EventLog { get; set; }\n    return:\n      type: System.Diagnostics.EventLog\n      description: The event log to write to.\n  overload: System.Diagnostics.EventLogTraceListener.EventLog*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.EventLogTraceListener.Name\n  id: Name\n  parent: System.Diagnostics.EventLogTraceListener\n  langs:\n  - csharp\n  name: Name\n  nameWithType: EventLogTraceListener.Name\n  fullName: System.Diagnostics.EventLogTraceListener.Name\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Gets or sets the name of this <xref href=\"System.Diagnostics.EventLogTraceListener\"></xref>.\n  remarks: This property defaults to the source name of the event log.\n  syntax:\n    content: public override string Name { get; set; }\n    return:\n      type: System.String\n      description: The name of this trace listener.\n  overload: System.Diagnostics.EventLogTraceListener.Name*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.EventLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)\n  id: TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)\n  parent: System.Diagnostics.EventLogTraceListener\n  langs:\n  - csharp\n  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object)\n  nameWithType: EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)\n  fullName: System.Diagnostics.EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Writes trace information, a data object, and event information to the event log.\n  remarks: \"> [!IMPORTANT]\\n>  The <xref:System.Diagnostics.EventLogTraceListener.TraceData%2A> methods are not intended to be called by application code. They are called by methods of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes to output trace data.  \\n  \\n The <xref:System.Diagnostics.EventLogTraceListener.TraceData%2A> method, like the <xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A> method is intended for automated tools but also allows the attaching of additional objects, for example an exception instance, to the trace.  \\n  \\n The `eventCache` and `source` parameters are used to determine if the event should be traced. `id` is used to create an <xref:System.Diagnostics.EventInstance> object and the <xref:System.Diagnostics.TraceEventType> is equated to an <xref:System.Diagnostics.EventLogEntryType> for the <xref:System.Diagnostics.EventInstance.EntryType%2A> property. The <xref:System.Diagnostics.EventInstance> is written to the event log with the `data` object, formatted as a string, using the <xref:System.Diagnostics.EventLog.WriteEvent%2A> method.  \\n  \\n> [!NOTE]\\n>  The maximum value of the `id` parameter is 65,535. If the `id` value specified is greater than 65,535, the maximum value is used.\"\n  syntax:\n    content: public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType severity, int id, object data);\n    parameters:\n    - id: eventCache\n      type: System.Diagnostics.TraceEventCache\n      description: An object that contains the current process ID, thread ID, and stack trace information.\n    - id: source\n      type: System.String\n      description: A name used to identify the output; typically the name of the application that generated the trace event.\n    - id: severity\n      type: System.Diagnostics.TraceEventType\n      description: One of the enumeration values that specifies the type of event that has caused the trace.\n    - id: id\n      type: System.Int32\n      description: A numeric identifier for the event. The combination of `source` and `id` uniquely identifies an event.\n    - id: data\n      type: System.Object\n      description: A data object to write to the output file or stream.\n  overload: System.Diagnostics.EventLogTraceListener.TraceData*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>source</code> is not specified.  \\n  \\n -or-  \\n  \\n The log entry string exceeds 32,766 characters.\"\n  platform:\n  - net462\n- uid: System.Diagnostics.EventLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])\n  id: TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])\n  parent: System.Diagnostics.EventLogTraceListener\n  langs:\n  - csharp\n  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])\n  nameWithType: EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])\n  fullName: System.Diagnostics.EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Writes trace information, an array of data objects, and event information to the event log.\n  remarks: \"> [!IMPORTANT]\\n>  The <xref:System.Diagnostics.EventLogTraceListener.TraceData%2A> methods are not intended to be called by application code. They are called by methods of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes to output trace data.  \\n  \\n The <xref:System.Diagnostics.EventLogTraceListener.TraceData%2A> method, like the <xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A> method is intended for automated tools but also allows the attaching of additional objects, for example an exception instance, to the trace.  \\n  \\n The `severity` and `id` parameter data is used to create an <xref:System.Diagnostics.EventInstance> object, which is written to the event log with the data from the array of data objects.  \\n  \\n The `eventCache` and `source` parameters are used to determine if the event should be traced. `id` is used to create an <xref:System.Diagnostics.EventInstance> object and the <xref:System.Diagnostics.TraceEventType> is equated to an <xref:System.Diagnostics.EventLogEntryType> for the <xref:System.Diagnostics.EventInstance.EntryType%2A> property. The <xref:System.Diagnostics.EventInstance> is written to the event log with the `data` object array, formatted as a string array, using the <xref:System.Diagnostics.EventLog.WriteEvent%2A> method.  \\n  \\n> [!NOTE]\\n>  The maximum value of the `id` parameter is 65,535. If the `id` value specified is greater than 65,535, the maximum value is used.\"\n  syntax:\n    content: public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType severity, int id, object[] data);\n    parameters:\n    - id: eventCache\n      type: System.Diagnostics.TraceEventCache\n      description: An object that contains the current process ID, thread ID, and stack trace information.\n    - id: source\n      type: System.String\n      description: A name used to identify the output; typically the name of the application that generated the trace event.\n    - id: severity\n      type: System.Diagnostics.TraceEventType\n      description: One of the enumeration values that specifies the type of event that has caused the trace.\n    - id: id\n      type: System.Int32\n      description: A numeric identifier for the event. The combination of `source` and `id` uniquely identifies an event.\n    - id: data\n      type: System.Object[]\n      description: An array of data objects.\n  overload: System.Diagnostics.EventLogTraceListener.TraceData*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>source</code> is not specified.  \\n  \\n -or-  \\n  \\n The log entry string exceeds 32,766 characters.\"\n  platform:\n  - net462\n- uid: System.Diagnostics.EventLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)\n  id: TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)\n  parent: System.Diagnostics.EventLogTraceListener\n  langs:\n  - csharp\n  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)\n  nameWithType: EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)\n  fullName: System.Diagnostics.EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Writes trace information, a message, and event information to the event log.\n  remarks: \"> [!IMPORTANT]\\n>  The <xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A> methods are not intended to be called by application code. These methods are called by methods of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes to write trace data.  \\n  \\n The <xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A> method is intended to trace events that can be processed automatically by tools. For example a monitoring tool can notify an administrator if a specific event is traced by a specific source.  \\n  \\n The `eventCache` and `source` parameters are used to determine if the event should be traced. `id` is used to create an <xref:System.Diagnostics.EventInstance> object and the <xref:System.Diagnostics.TraceEventType> is equated to an <xref:System.Diagnostics.EventLogEntryType> for the <xref:System.Diagnostics.EventInstance.EntryType%2A> property. The <xref:System.Diagnostics.EventInstance> is written to the event log with the `message` data using the <xref:System.Diagnostics.EventLog.WriteEvent%2A> method.  \\n  \\n> [!NOTE]\\n>  The maximum value of the `id` parameter is 65,535. If the `id` value specified is greater than 65,535, the maximum value is used.\"\n  syntax:\n    content: public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType severity, int id, string message);\n    parameters:\n    - id: eventCache\n      type: System.Diagnostics.TraceEventCache\n      description: An object that contains the current process ID, thread ID, and stack trace information.\n    - id: source\n      type: System.String\n      description: A name used to identify the output; typically the name of the application that generated the trace event.\n    - id: severity\n      type: System.Diagnostics.TraceEventType\n      description: One of the enumeration values that specifies the type of event that has caused the trace.\n    - id: id\n      type: System.Int32\n      description: A numeric identifier for the event. The combination of `source` and `id` uniquely identifies an event.\n    - id: message\n      type: System.String\n      description: The trace message.\n  overload: System.Diagnostics.EventLogTraceListener.TraceEvent*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>source</code> is not specified.  \\n  \\n -or-  \\n  \\n The log entry string exceeds 32,766 characters.\"\n  platform:\n  - net462\n- uid: System.Diagnostics.EventLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])\n  id: TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])\n  parent: System.Diagnostics.EventLogTraceListener\n  langs:\n  - csharp\n  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])\n  nameWithType: EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])\n  fullName: System.Diagnostics.EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Writes trace information, a formatted array of objects, and event information to the event log.\n  remarks: \"> [!IMPORTANT]\\n>  The <xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A> methods are not intended to be called by application code. These methods are called by methods of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes to write trace data.  \\n  \\n The <xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A> method is intended to trace events that can be processed automatically by tools. For example a monitoring tool can notify an administrator if a specific event is traced by a specific source.  \\n  \\n The `eventCache` and `source` parameters are used to determine if the event should be traced. `id` is used to create an <xref:System.Diagnostics.EventInstance> object and the <xref:System.Diagnostics.TraceEventType> is equated to an <xref:System.Diagnostics.EventLogEntryType> for the <xref:System.Diagnostics.EventInstance.EntryType%2A> property. The <xref:System.Diagnostics.EventInstance> is written to the event log, using the <xref:System.Diagnostics.EventLog.WriteEvent%2A> method, with the message obtained from the `format` and `args` parameters. The `args` object array is converted to a string using the <xref:System.String.Format%2A> method, passing the `format` string and `args` array to format the string as the message for the event log.  \\n  \\n> [!NOTE]\\n>  The maximum value of the `id` parameter is 65,535. If the `id` value specified is greater than 65,535, the maximum value is used.\"\n  syntax:\n    content: public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType severity, int id, string format, object[] args);\n    parameters:\n    - id: eventCache\n      type: System.Diagnostics.TraceEventCache\n      description: An object that contains the current process ID, thread ID, and stack trace information.\n    - id: source\n      type: System.String\n      description: A name used to identify the output; typically the name of the application that generated the trace event.\n    - id: severity\n      type: System.Diagnostics.TraceEventType\n      description: One of the enumeration values that specifies the type of event that has caused the trace.\n    - id: id\n      type: System.Int32\n      description: A numeric identifier for the event. The combination of `source` and `id` uniquely identifies an event.\n    - id: format\n      type: System.String\n      description: A format string that contains zero or more format items that correspond to objects in the `args` array.\n    - id: args\n      type: System.Object[]\n      description: An <xref uid=\"langword_csharp_object\" name=\"object\" href=\"\"></xref> array containing zero or more objects to format.\n  overload: System.Diagnostics.EventLogTraceListener.TraceEvent*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>source</code> is not specified.  \\n  \\n -or-  \\n  \\n The log entry string exceeds 32,766 characters.\"\n  platform:\n  - net462\n- uid: System.Diagnostics.EventLogTraceListener.Write(System.String)\n  id: Write(System.String)\n  parent: System.Diagnostics.EventLogTraceListener\n  langs:\n  - csharp\n  name: Write(String)\n  nameWithType: EventLogTraceListener.Write(String)\n  fullName: System.Diagnostics.EventLogTraceListener.Write(String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Writes a message to the event log for this instance.\n  syntax:\n    content: public override void Write (string message);\n    parameters:\n    - id: message\n      type: System.String\n      description: The message to write.\n  overload: System.Diagnostics.EventLogTraceListener.Write*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>message</code> exceeds 32,766 characters.\n  platform:\n  - net462\n- uid: System.Diagnostics.EventLogTraceListener.WriteLine(System.String)\n  id: WriteLine(System.String)\n  parent: System.Diagnostics.EventLogTraceListener\n  langs:\n  - csharp\n  name: WriteLine(String)\n  nameWithType: EventLogTraceListener.WriteLine(String)\n  fullName: System.Diagnostics.EventLogTraceListener.WriteLine(String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Writes a message to the event log for this instance.\n  syntax:\n    content: public override void WriteLine (string message);\n    parameters:\n    - id: message\n      type: System.String\n      description: The message to write.\n  overload: System.Diagnostics.EventLogTraceListener.WriteLine*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>message</code> exceeds 32,766 characters.\n  platform:\n  - net462\nreferences:\n- uid: System.Diagnostics.TraceListener\n  isExternal: false\n  name: System.Diagnostics.TraceListener\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.Diagnostics.EventLogTraceListener.#ctor\n  parent: System.Diagnostics.EventLogTraceListener\n  isExternal: false\n  name: EventLogTraceListener()\n  nameWithType: EventLogTraceListener.EventLogTraceListener()\n  fullName: System.Diagnostics.EventLogTraceListener.EventLogTraceListener()\n- uid: System.Diagnostics.EventLogTraceListener.#ctor(System.Diagnostics.EventLog)\n  parent: System.Diagnostics.EventLogTraceListener\n  isExternal: false\n  name: EventLogTraceListener(EventLog)\n  nameWithType: EventLogTraceListener.EventLogTraceListener(EventLog)\n  fullName: System.Diagnostics.EventLogTraceListener.EventLogTraceListener(EventLog)\n- uid: System.Diagnostics.EventLog\n  parent: System.Diagnostics\n  isExternal: false\n  name: EventLog\n  nameWithType: EventLog\n  fullName: System.Diagnostics.EventLog\n- uid: System.Diagnostics.EventLogTraceListener.#ctor(System.String)\n  parent: System.Diagnostics.EventLogTraceListener\n  isExternal: false\n  name: EventLogTraceListener(String)\n  nameWithType: EventLogTraceListener.EventLogTraceListener(String)\n  fullName: System.Diagnostics.EventLogTraceListener.EventLogTraceListener(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Diagnostics.EventLogTraceListener.Close\n  parent: System.Diagnostics.EventLogTraceListener\n  isExternal: false\n  name: Close()\n  nameWithType: EventLogTraceListener.Close()\n  fullName: System.Diagnostics.EventLogTraceListener.Close()\n- uid: System.Diagnostics.EventLogTraceListener.Dispose(System.Boolean)\n  parent: System.Diagnostics.EventLogTraceListener\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: EventLogTraceListener.Dispose(Boolean)\n  fullName: System.Diagnostics.EventLogTraceListener.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Diagnostics.EventLogTraceListener.EventLog\n  parent: System.Diagnostics.EventLogTraceListener\n  isExternal: false\n  name: EventLog\n  nameWithType: EventLogTraceListener.EventLog\n  fullName: System.Diagnostics.EventLogTraceListener.EventLog\n- uid: System.Diagnostics.EventLogTraceListener.Name\n  parent: System.Diagnostics.EventLogTraceListener\n  isExternal: false\n  name: Name\n  nameWithType: EventLogTraceListener.Name\n  fullName: System.Diagnostics.EventLogTraceListener.Name\n- uid: System.Diagnostics.EventLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)\n  parent: System.Diagnostics.EventLogTraceListener\n  isExternal: false\n  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object)\n  nameWithType: EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)\n  fullName: System.Diagnostics.EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)\n- uid: System.Diagnostics.TraceEventCache\n  parent: System.Diagnostics\n  isExternal: false\n  name: TraceEventCache\n  nameWithType: TraceEventCache\n  fullName: System.Diagnostics.TraceEventCache\n- uid: System.Diagnostics.TraceEventType\n  parent: System.Diagnostics\n  isExternal: false\n  name: TraceEventType\n  nameWithType: TraceEventType\n  fullName: System.Diagnostics.TraceEventType\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Diagnostics.EventLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])\n  parent: System.Diagnostics.EventLogTraceListener\n  isExternal: false\n  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])\n  nameWithType: EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])\n  fullName: System.Diagnostics.EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])\n- uid: System.Object[]\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object[]\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: Object[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Diagnostics.EventLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)\n  parent: System.Diagnostics.EventLogTraceListener\n  isExternal: false\n  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)\n  nameWithType: EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)\n  fullName: System.Diagnostics.EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)\n- uid: System.Diagnostics.EventLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])\n  parent: System.Diagnostics.EventLogTraceListener\n  isExternal: false\n  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])\n  nameWithType: EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])\n  fullName: System.Diagnostics.EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])\n- uid: System.Diagnostics.EventLogTraceListener.Write(System.String)\n  parent: System.Diagnostics.EventLogTraceListener\n  isExternal: false\n  name: Write(String)\n  nameWithType: EventLogTraceListener.Write(String)\n  fullName: System.Diagnostics.EventLogTraceListener.Write(String)\n- uid: System.Diagnostics.EventLogTraceListener.WriteLine(System.String)\n  parent: System.Diagnostics.EventLogTraceListener\n  isExternal: false\n  name: WriteLine(String)\n  nameWithType: EventLogTraceListener.WriteLine(String)\n  fullName: System.Diagnostics.EventLogTraceListener.WriteLine(String)\n- uid: System.Diagnostics.EventLogTraceListener.#ctor*\n  parent: System.Diagnostics.EventLogTraceListener\n  isExternal: false\n  name: EventLogTraceListener\n  nameWithType: EventLogTraceListener.EventLogTraceListener\n- uid: System.Diagnostics.EventLogTraceListener.Close*\n  parent: System.Diagnostics.EventLogTraceListener\n  isExternal: false\n  name: Close\n  nameWithType: EventLogTraceListener.Close\n- uid: System.Diagnostics.EventLogTraceListener.Dispose*\n  parent: System.Diagnostics.EventLogTraceListener\n  isExternal: false\n  name: Dispose\n  nameWithType: EventLogTraceListener.Dispose\n- uid: System.Diagnostics.EventLogTraceListener.EventLog*\n  parent: System.Diagnostics.EventLogTraceListener\n  isExternal: false\n  name: EventLog\n  nameWithType: EventLogTraceListener.EventLog\n- uid: System.Diagnostics.EventLogTraceListener.Name*\n  parent: System.Diagnostics.EventLogTraceListener\n  isExternal: false\n  name: Name\n  nameWithType: EventLogTraceListener.Name\n- uid: System.Diagnostics.EventLogTraceListener.TraceData*\n  parent: System.Diagnostics.EventLogTraceListener\n  isExternal: false\n  name: TraceData\n  nameWithType: EventLogTraceListener.TraceData\n- uid: System.Diagnostics.EventLogTraceListener.TraceEvent*\n  parent: System.Diagnostics.EventLogTraceListener\n  isExternal: false\n  name: TraceEvent\n  nameWithType: EventLogTraceListener.TraceEvent\n- uid: System.Diagnostics.EventLogTraceListener.Write*\n  parent: System.Diagnostics.EventLogTraceListener\n  isExternal: false\n  name: Write\n  nameWithType: EventLogTraceListener.Write\n- uid: System.Diagnostics.EventLogTraceListener.WriteLine*\n  parent: System.Diagnostics.EventLogTraceListener\n  isExternal: false\n  name: WriteLine\n  nameWithType: EventLogTraceListener.WriteLine\n"}