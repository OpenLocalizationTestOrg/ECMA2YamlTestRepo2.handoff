{"nodes":[{"pos":[513,554],"content":"Represents a simple assignment statement.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents a simple assignment statement.","pos":[0,41]}]},{"pos":[566,1066],"content":"CodeAssignStatement can be used to represent a statement that assigns the value of an object to another object, or a reference to another reference. Simple assignment statements are usually of the form \" `value1` = `value2` \", where `value1` is the object being assigned to, and `value2` is being assigned. The <xref:System.CodeDom.CodeAssignStatement.Left%2A> property indicates the object to assign to. The <xref:System.CodeDom.CodeAssignStatement.Right%2A> property indicates the object to assign.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"CodeAssignStatement can be used to represent a statement that assigns the value of an object to another object, or a reference to another reference.","pos":[0,148]},{"content":"Simple assignment statements are usually of the form \" <ph id=\"ph1\">`value1`</ph><ph id=\"ph2\"> = </ph><ph id=\"ph3\">`value2`</ph> \", where <ph id=\"ph4\">`value1`</ph> is the object being assigned to, and <ph id=\"ph5\">`value2`</ph> is being assigned.","pos":[149,306],"source":" Simple assignment statements are usually of the form \" `value1` = `value2` \", where `value1` is the object being assigned to, and `value2` is being assigned."},{"content":"The &lt;xref:System.CodeDom.CodeAssignStatement.Left%2A&gt; property indicates the object to assign to.","pos":[307,404],"source":" The <xref:System.CodeDom.CodeAssignStatement.Left%2A> property indicates the object to assign to."},{"content":"The &lt;xref:System.CodeDom.CodeAssignStatement.Right%2A&gt; property indicates the object to assign.","pos":[405,500],"source":" The <xref:System.CodeDom.CodeAssignStatement.Right%2A> property indicates the object to assign."}]},{"pos":[2455,2551],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.CodeDom.CodeAssignStatement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.CodeDom.CodeAssignStatement\"></xref> class."},{"pos":[3296,3424],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.CodeDom.CodeAssignStatement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class using the specified expressions.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.CodeDom.CodeAssignStatement\"></xref> class using the specified expressions."},{"pos":[3642,3668],"content":"The variable to assign to.","needQuote":true,"needEscape":true,"nodes":[{"content":"The variable to assign to.","pos":[0,26]}]},{"pos":[3746,3766],"content":"The value to assign.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value to assign.","pos":[0,20]}]},{"pos":[4171,4249],"content":"Gets or sets the expression representing the object or reference to assign to.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the expression representing the object or reference to assign to.","pos":[0,78]}]},{"pos":[4402,4507],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.CodeDom.CodeExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that indicates the object or reference to assign to.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.CodeDom.CodeExpression\"></xref> that indicates the object or reference to assign to."},{"pos":[4916,4991],"content":"Gets or sets the expression representing the object or reference to assign.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the expression representing the object or reference to assign.","pos":[0,75]}]},{"pos":[5145,5247],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.CodeDom.CodeExpression\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that indicates the object or reference to assign.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.CodeDom.CodeExpression\"></xref> that indicates the object or reference to assign."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.CodeDom.CodeAssignStatement\n  id: CodeAssignStatement\n  children:\n  - System.CodeDom.CodeAssignStatement.#ctor\n  - System.CodeDom.CodeAssignStatement.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)\n  - System.CodeDom.CodeAssignStatement.Left\n  - System.CodeDom.CodeAssignStatement.Right\n  langs:\n  - csharp\n  name: CodeAssignStatement\n  nameWithType: CodeAssignStatement\n  fullName: System.CodeDom.CodeAssignStatement\n  type: Class\n  summary: Represents a simple assignment statement.\n  remarks: CodeAssignStatement can be used to represent a statement that assigns the value of an object to another object, or a reference to another reference. Simple assignment statements are usually of the form \" `value1` = `value2` \", where `value1` is the object being assigned to, and `value2` is being assigned. The <xref:System.CodeDom.CodeAssignStatement.Left%2A> property indicates the object to assign to. The <xref:System.CodeDom.CodeAssignStatement.Right%2A> property indicates the object to assign.\n  example:\n  - \"The following code creates a CodeAssignStatement that assigns the value 10 to an integer variable named `i` :  \\n  \\n [!code-cs[CodeAssignStatement#1](~/add/codesnippet/csharp/t-system.codedom.codeass_1.cs)]\\n [!code-vb[CodeAssignStatement#1](~/add/codesnippet/visualbasic/t-system.codedom.codeass_1.vb)]\\n [!code-cpp[CodeAssignStatement#1](~/add/codesnippet/cpp/t-system.codedom.codeass_1.cpp)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch)]\n\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class CodeAssignStatement : System.CodeDom.CodeStatement\n  inheritance:\n  - System.Object\n  - System.CodeDom.CodeObject\n  - System.CodeDom.CodeStatement\n  implements: []\n  inheritedMembers:\n  - System.CodeDom.CodeObject.UserData\n  - System.CodeDom.CodeStatement.EndDirectives\n  - System.CodeDom.CodeStatement.LinePragma\n  - System.CodeDom.CodeStatement.StartDirectives\n  platform:\n  - net462\n- uid: System.CodeDom.CodeAssignStatement.#ctor\n  id: '#ctor'\n  parent: System.CodeDom.CodeAssignStatement\n  langs:\n  - csharp\n  name: CodeAssignStatement()\n  nameWithType: CodeAssignStatement.CodeAssignStatement()\n  fullName: System.CodeDom.CodeAssignStatement.CodeAssignStatement()\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.CodeDom\n  summary: Initializes a new instance of the <xref href=\"System.CodeDom.CodeAssignStatement\"></xref> class.\n  syntax:\n    content: public CodeAssignStatement ();\n    parameters: []\n  overload: System.CodeDom.CodeAssignStatement.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.CodeAssignStatement.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)\n  id: '#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)'\n  parent: System.CodeDom.CodeAssignStatement\n  langs:\n  - csharp\n  name: CodeAssignStatement(CodeExpression,CodeExpression)\n  nameWithType: CodeAssignStatement.CodeAssignStatement(CodeExpression,CodeExpression)\n  fullName: System.CodeDom.CodeAssignStatement.CodeAssignStatement(CodeExpression,CodeExpression)\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.CodeDom\n  summary: Initializes a new instance of the <xref href=\"System.CodeDom.CodeAssignStatement\"></xref> class using the specified expressions.\n  syntax:\n    content: public CodeAssignStatement (System.CodeDom.CodeExpression left, System.CodeDom.CodeExpression right);\n    parameters:\n    - id: left\n      type: System.CodeDom.CodeExpression\n      description: The variable to assign to.\n    - id: right\n      type: System.CodeDom.CodeExpression\n      description: The value to assign.\n  overload: System.CodeDom.CodeAssignStatement.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.CodeAssignStatement.Left\n  id: Left\n  parent: System.CodeDom.CodeAssignStatement\n  langs:\n  - csharp\n  name: Left\n  nameWithType: CodeAssignStatement.Left\n  fullName: System.CodeDom.CodeAssignStatement.Left\n  type: Property\n  assemblies:\n  - System\n  namespace: System.CodeDom\n  summary: Gets or sets the expression representing the object or reference to assign to.\n  syntax:\n    content: public System.CodeDom.CodeExpression Left { get; set; }\n    return:\n      type: System.CodeDom.CodeExpression\n      description: A <xref href=\"System.CodeDom.CodeExpression\"></xref> that indicates the object or reference to assign to.\n  overload: System.CodeDom.CodeAssignStatement.Left*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.CodeDom.CodeAssignStatement.Right\n  id: Right\n  parent: System.CodeDom.CodeAssignStatement\n  langs:\n  - csharp\n  name: Right\n  nameWithType: CodeAssignStatement.Right\n  fullName: System.CodeDom.CodeAssignStatement.Right\n  type: Property\n  assemblies:\n  - System\n  namespace: System.CodeDom\n  summary: Gets or sets the expression representing the object or reference to assign.\n  syntax:\n    content: public System.CodeDom.CodeExpression Right { get; set; }\n    return:\n      type: System.CodeDom.CodeExpression\n      description: A <xref href=\"System.CodeDom.CodeExpression\"></xref> that indicates the object or reference to assign.\n  overload: System.CodeDom.CodeAssignStatement.Right*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.CodeDom.CodeStatement\n  isExternal: false\n  name: System.CodeDom.CodeStatement\n- uid: System.CodeDom.CodeAssignStatement.#ctor\n  parent: System.CodeDom.CodeAssignStatement\n  isExternal: false\n  name: CodeAssignStatement()\n  nameWithType: CodeAssignStatement.CodeAssignStatement()\n  fullName: System.CodeDom.CodeAssignStatement.CodeAssignStatement()\n- uid: System.CodeDom.CodeAssignStatement.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)\n  parent: System.CodeDom.CodeAssignStatement\n  isExternal: false\n  name: CodeAssignStatement(CodeExpression,CodeExpression)\n  nameWithType: CodeAssignStatement.CodeAssignStatement(CodeExpression,CodeExpression)\n  fullName: System.CodeDom.CodeAssignStatement.CodeAssignStatement(CodeExpression,CodeExpression)\n- uid: System.CodeDom.CodeExpression\n  parent: System.CodeDom\n  isExternal: false\n  name: CodeExpression\n  nameWithType: CodeExpression\n  fullName: System.CodeDom.CodeExpression\n- uid: System.CodeDom.CodeAssignStatement.Left\n  parent: System.CodeDom.CodeAssignStatement\n  isExternal: false\n  name: Left\n  nameWithType: CodeAssignStatement.Left\n  fullName: System.CodeDom.CodeAssignStatement.Left\n- uid: System.CodeDom.CodeAssignStatement.Right\n  parent: System.CodeDom.CodeAssignStatement\n  isExternal: false\n  name: Right\n  nameWithType: CodeAssignStatement.Right\n  fullName: System.CodeDom.CodeAssignStatement.Right\n- uid: System.CodeDom.CodeAssignStatement.#ctor*\n  parent: System.CodeDom.CodeAssignStatement\n  isExternal: false\n  name: CodeAssignStatement\n  nameWithType: CodeAssignStatement.CodeAssignStatement\n- uid: System.CodeDom.CodeAssignStatement.Left*\n  parent: System.CodeDom.CodeAssignStatement\n  isExternal: false\n  name: Left\n  nameWithType: CodeAssignStatement.Left\n- uid: System.CodeDom.CodeAssignStatement.Right*\n  parent: System.CodeDom.CodeAssignStatement\n  isExternal: false\n  name: Right\n  nameWithType: CodeAssignStatement.Right\n"}