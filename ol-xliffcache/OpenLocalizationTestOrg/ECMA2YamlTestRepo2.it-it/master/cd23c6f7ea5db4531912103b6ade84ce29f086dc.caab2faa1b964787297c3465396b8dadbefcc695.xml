{"nodes":[{"pos":[1492,1534],"content":"Metadata Interface for all CLR types types","needQuote":true,"needEscape":true,"nodes":[{"content":"Metadata Interface for all CLR types types","pos":[0,42]}]},{"pos":[1546,1611],"content":"No content here will be updated; please do not add material here.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"No content here will be updated; please do not add material here.","pos":[0,65]}]},{"pos":[2161,2260],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Data.Common.DbProviderManifest\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Data.Common.DbProviderManifest\"></xref> class."},{"pos":[2874,2951],"content":"Value to pass to GetInformation to get the ConceptualSchemaDefinitionVersion.","needQuote":true,"needEscape":true,"nodes":[{"content":"Value to pass to GetInformation to get the ConceptualSchemaDefinitionVersion.","pos":[0,77]}]},{"pos":[3090,3102],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[3624,3702],"content":"Value to pass to GetInformation to get the ConceptualSchemaDefinitionVersion3.","needQuote":true,"needEscape":true,"nodes":[{"content":"Value to pass to GetInformation to get the ConceptualSchemaDefinitionVersion3.","pos":[0,78]}]},{"pos":[3849,3861],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[4358,4549],"content":"Provider writers should override this method to return the argument with the wildcards and the escape character escaped. This method is only used if SupportsEscapingLikeArgument returns true.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provider writers should override this method to return the argument with the wildcards and the escape character escaped. This method is only used if SupportsEscapingLikeArgument returns true.","pos":[0,191],"nodes":[{"content":"Provider writers should override this method to return the argument with the wildcards and the escape character escaped.","pos":[0,120]},{"content":"This method is only used if SupportsEscapingLikeArgument returns true.","pos":[121,191]}]}]},{"pos":[4713,4740],"content":"The argument to be escaped.","needQuote":true,"needEscape":true,"nodes":[{"content":"The argument to be escaped.","pos":[0,27]}]},{"pos":[4798,4863],"content":"The argument with the wildcards and the escape character escaped.","needQuote":true,"needEscape":true,"nodes":[{"content":"The argument with the wildcards and the escape character escaped.","pos":[0,65]}]},{"pos":[5420,5506],"content":"When overridden in a derived class, this method returns provider-specific information.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, this method returns provider-specific information.","pos":[0,86]}]},{"pos":[5700,5738],"content":"The type of the information to return.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type of the information to return.","pos":[0,38]}]},{"pos":[5803,5889],"content":"The XmlReader object that represents the mapping to the underlying data store catalog.","needQuote":true,"needEscape":true,"nodes":[{"content":"The XmlReader object that represents the mapping to the underlying data store catalog.","pos":[0,86]}]},{"pos":[6465,6594],"content":"When overridden in a derived class, this method maps the specified storage type and a set of facets for that type to an EDM type.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, this method maps the specified storage type and a set of facets for that type to an EDM type.","pos":[0,129]}]},{"pos":[6830,6946],"content":"The TypeUsage instance that describes a storage type and a set of facets for that type to be mapped to the EDM type.","needQuote":true,"needEscape":true,"nodes":[{"content":"The TypeUsage instance that describes a storage type and a set of facets for that type to be mapped to the EDM type.","pos":[0,116]}]},{"pos":[7025,7155],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Data.Metadata.Edm.TypeUsage\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance that describes an EDM type and a set of facets for that type.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Data.Metadata.Edm.TypeUsage\"></xref> instance that describes an EDM type and a set of facets for that type."},{"pos":[7765,7824],"content":"Returns the FacetDescription objects for a particular type.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the FacetDescription objects for a particular type.","pos":[0,59]}]},{"pos":[8120,8169],"content":"The EDM type to return the facet description for.","needQuote":true,"needEscape":true,"nodes":[{"content":"The EDM type to return the facet description for.","pos":[0,49]}]},{"pos":[8306,8362],"content":"The FacetDescription objects for the specified EDM type.","needQuote":true,"needEscape":true,"nodes":[{"content":"The FacetDescription objects for the specified EDM type.","pos":[0,56]}]},{"pos":[8911,8950],"content":"Gets the provider-specific information.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the provider-specific information.","pos":[0,39]}]},{"pos":[9130,9168],"content":"The type of the information to return.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type of the information to return.","pos":[0,38]}]},{"pos":[9233,9267],"content":"The provider-specific information.","needQuote":true,"needEscape":true,"nodes":[{"content":"The provider-specific information.","pos":[0,34]}]},{"pos":[9777,9886],"content":"When overridden in a derived class, returns a collection of EDM functions supported by the provider manifest.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, returns a collection of EDM functions supported by the provider manifest.","pos":[0,109]}]},{"pos":[10186,10216],"content":"A collection of EDM functions.","needQuote":true,"needEscape":true,"nodes":[{"content":"A collection of EDM functions.","pos":[0,30]}]},{"pos":[10803,10931],"content":"When overridden in a derived class, this method maps the specified EDM type and a set of facets for that type to a storage type.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, this method maps the specified EDM type and a set of facets for that type to a storage type.","pos":[0,128]}]},{"pos":[11165,11281],"content":"The TypeUsage instance that describes the EDM type and a set of facets for that type to be mapped to a storage type.","needQuote":true,"needEscape":true,"nodes":[{"content":"The TypeUsage instance that describes the EDM type and a set of facets for that type to be mapped to a storage type.","pos":[0,116]}]},{"pos":[11360,11447],"content":"The TypeUsage instance that describes a storage type and a set of facets for that type.","needQuote":true,"needEscape":true,"nodes":[{"content":"The TypeUsage instance that describes a storage type and a set of facets for that type.","pos":[0,87]}]},{"pos":[11935,12035],"content":"When overridden in a derived class, returns the set of primitive types supported by the data source.","needQuote":true,"needEscape":true,"nodes":[{"content":"When overridden in a derived class, returns the set of primitive types supported by the data source.","pos":[0,100]}]},{"pos":[12335,12381],"content":"The set of types supported by the data source.","needQuote":true,"needEscape":true,"nodes":[{"content":"The set of types supported by the data source.","pos":[0,46]}]},{"pos":[12866,12916],"content":"Gets the namespace used by this provider manifest.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the namespace used by this provider manifest.","pos":[0,50]}]},{"pos":[13043,13088],"content":"The namespace used by this provider manifest.","needQuote":true,"needEscape":true,"nodes":[{"content":"The namespace used by this provider manifest.","pos":[0,45]}]},{"pos":[13610,13682],"content":"Value to pass to GetInformation to get the StoreSchemaDefinitionVersion.","needQuote":true,"needEscape":true,"nodes":[{"content":"Value to pass to GetInformation to get the StoreSchemaDefinitionVersion.","pos":[0,72]}]},{"pos":[13816,13828],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[14325,14398],"content":"Value to pass to GetInformation to get the StoreSchemaDefinitionVersion3.","needQuote":true,"needEscape":true,"nodes":[{"content":"Value to pass to GetInformation to get the StoreSchemaDefinitionVersion3.","pos":[0,73]}]},{"pos":[14540,14552],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[14994,15063],"content":"Value to pass to GetInformation to get the StoreSchemaMappingVersion.","needQuote":true,"needEscape":true,"nodes":[{"content":"Value to pass to GetInformation to get the StoreSchemaMappingVersion.","pos":[0,69]}]},{"pos":[15194,15206],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[15688,15758],"content":"Value to pass to GetInformation to get the StoreSchemaMappingVersion3.","needQuote":true,"needEscape":true,"nodes":[{"content":"Value to pass to GetInformation to get the StoreSchemaMappingVersion3.","pos":[0,70]}]},{"pos":[15897,15909],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[16448,16544],"content":"Indicates if the provider supports escaping strings to be used as patterns in a Like expression.","needQuote":true,"needEscape":true,"nodes":[{"content":"Indicates if the provider supports escaping strings to be used as patterns in a Like expression.","pos":[0,96]}]},{"pos":[16730,16822],"content":"If the provider supports escaping, the character that would be used as the escape character.","needQuote":true,"needEscape":true,"nodes":[{"content":"If the provider supports escaping, the character that would be used as the escape character.","pos":[0,92]}]},{"pos":[16881,17104],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if this provider supports escaping strings to be used as patterns in a Like expression; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"></xref> if this provider supports escaping strings to be used as patterns in a Like expression; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Data.Common.DbProviderManifest\n  id: DbProviderManifest\n  children:\n  - System.Data.Common.DbProviderManifest.#ctor\n  - System.Data.Common.DbProviderManifest.ConceptualSchemaDefinition\n  - System.Data.Common.DbProviderManifest.ConceptualSchemaDefinitionVersion3\n  - System.Data.Common.DbProviderManifest.EscapeLikeArgument(System.String)\n  - System.Data.Common.DbProviderManifest.GetDbInformation(System.String)\n  - System.Data.Common.DbProviderManifest.GetEdmType(System.Data.Metadata.Edm.TypeUsage)\n  - System.Data.Common.DbProviderManifest.GetFacetDescriptions(System.Data.Metadata.Edm.EdmType)\n  - System.Data.Common.DbProviderManifest.GetInformation(System.String)\n  - System.Data.Common.DbProviderManifest.GetStoreFunctions\n  - System.Data.Common.DbProviderManifest.GetStoreType(System.Data.Metadata.Edm.TypeUsage)\n  - System.Data.Common.DbProviderManifest.GetStoreTypes\n  - System.Data.Common.DbProviderManifest.NamespaceName\n  - System.Data.Common.DbProviderManifest.StoreSchemaDefinition\n  - System.Data.Common.DbProviderManifest.StoreSchemaDefinitionVersion3\n  - System.Data.Common.DbProviderManifest.StoreSchemaMapping\n  - System.Data.Common.DbProviderManifest.StoreSchemaMappingVersion3\n  - System.Data.Common.DbProviderManifest.SupportsEscapingLikeArgument(System.Char@)\n  langs:\n  - csharp\n  name: DbProviderManifest\n  nameWithType: DbProviderManifest\n  fullName: System.Data.Common.DbProviderManifest\n  type: Class\n  summary: Metadata Interface for all CLR types types\n  remarks: No content here will be updated; please do not add material here.\n  syntax:\n    content: public abstract class DbProviderManifest\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbProviderManifest.#ctor\n  id: '#ctor'\n  parent: System.Data.Common.DbProviderManifest\n  langs:\n  - csharp\n  name: DbProviderManifest()\n  nameWithType: DbProviderManifest.DbProviderManifest()\n  fullName: System.Data.Common.DbProviderManifest.DbProviderManifest()\n  type: Constructor\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common\n  summary: Initializes a new instance of the <xref href=\"System.Data.Common.DbProviderManifest\"></xref> class.\n  syntax:\n    content: protected DbProviderManifest ();\n    parameters: []\n  overload: System.Data.Common.DbProviderManifest.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbProviderManifest.ConceptualSchemaDefinition\n  id: ConceptualSchemaDefinition\n  parent: System.Data.Common.DbProviderManifest\n  langs:\n  - csharp\n  name: ConceptualSchemaDefinition\n  nameWithType: DbProviderManifest.ConceptualSchemaDefinition\n  fullName: System.Data.Common.DbProviderManifest.ConceptualSchemaDefinition\n  type: Field\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common\n  summary: Value to pass to GetInformation to get the ConceptualSchemaDefinitionVersion.\n  syntax:\n    content: public static readonly string ConceptualSchemaDefinition;\n    return:\n      type: System.String\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbProviderManifest.ConceptualSchemaDefinitionVersion3\n  id: ConceptualSchemaDefinitionVersion3\n  parent: System.Data.Common.DbProviderManifest\n  langs:\n  - csharp\n  name: ConceptualSchemaDefinitionVersion3\n  nameWithType: DbProviderManifest.ConceptualSchemaDefinitionVersion3\n  fullName: System.Data.Common.DbProviderManifest.ConceptualSchemaDefinitionVersion3\n  type: Field\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common\n  summary: Value to pass to GetInformation to get the ConceptualSchemaDefinitionVersion3.\n  syntax:\n    content: public static readonly string ConceptualSchemaDefinitionVersion3;\n    return:\n      type: System.String\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbProviderManifest.EscapeLikeArgument(System.String)\n  id: EscapeLikeArgument(System.String)\n  parent: System.Data.Common.DbProviderManifest\n  langs:\n  - csharp\n  name: EscapeLikeArgument(String)\n  nameWithType: DbProviderManifest.EscapeLikeArgument(String)\n  fullName: System.Data.Common.DbProviderManifest.EscapeLikeArgument(String)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common\n  summary: Provider writers should override this method to return the argument with the wildcards and the escape character escaped. This method is only used if SupportsEscapingLikeArgument returns true.\n  syntax:\n    content: public virtual string EscapeLikeArgument (string argument);\n    parameters:\n    - id: argument\n      type: System.String\n      description: The argument to be escaped.\n    return:\n      type: System.String\n      description: The argument with the wildcards and the escape character escaped.\n  overload: System.Data.Common.DbProviderManifest.EscapeLikeArgument*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbProviderManifest.GetDbInformation(System.String)\n  id: GetDbInformation(System.String)\n  parent: System.Data.Common.DbProviderManifest\n  langs:\n  - csharp\n  name: GetDbInformation(String)\n  nameWithType: DbProviderManifest.GetDbInformation(String)\n  fullName: System.Data.Common.DbProviderManifest.GetDbInformation(String)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common\n  summary: When overridden in a derived class, this method returns provider-specific information.\n  syntax:\n    content: protected abstract System.Xml.XmlReader GetDbInformation (string informationType);\n    parameters:\n    - id: informationType\n      type: System.String\n      description: The type of the information to return.\n    return:\n      type: System.Xml.XmlReader\n      description: The XmlReader object that represents the mapping to the underlying data store catalog.\n  overload: System.Data.Common.DbProviderManifest.GetDbInformation*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbProviderManifest.GetEdmType(System.Data.Metadata.Edm.TypeUsage)\n  id: GetEdmType(System.Data.Metadata.Edm.TypeUsage)\n  parent: System.Data.Common.DbProviderManifest\n  langs:\n  - csharp\n  name: GetEdmType(TypeUsage)\n  nameWithType: DbProviderManifest.GetEdmType(TypeUsage)\n  fullName: System.Data.Common.DbProviderManifest.GetEdmType(TypeUsage)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common\n  summary: When overridden in a derived class, this method maps the specified storage type and a set of facets for that type to an EDM type.\n  syntax:\n    content: public abstract System.Data.Metadata.Edm.TypeUsage GetEdmType (System.Data.Metadata.Edm.TypeUsage storeType);\n    parameters:\n    - id: storeType\n      type: System.Data.Metadata.Edm.TypeUsage\n      description: The TypeUsage instance that describes a storage type and a set of facets for that type to be mapped to the EDM type.\n    return:\n      type: System.Data.Metadata.Edm.TypeUsage\n      description: The <xref href=\"System.Data.Metadata.Edm.TypeUsage\"></xref> instance that describes an EDM type and a set of facets for that type.\n  overload: System.Data.Common.DbProviderManifest.GetEdmType*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbProviderManifest.GetFacetDescriptions(System.Data.Metadata.Edm.EdmType)\n  id: GetFacetDescriptions(System.Data.Metadata.Edm.EdmType)\n  parent: System.Data.Common.DbProviderManifest\n  langs:\n  - csharp\n  name: GetFacetDescriptions(EdmType)\n  nameWithType: DbProviderManifest.GetFacetDescriptions(EdmType)\n  fullName: System.Data.Common.DbProviderManifest.GetFacetDescriptions(EdmType)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common\n  summary: Returns the FacetDescription objects for a particular type.\n  syntax:\n    content: public abstract System.Collections.ObjectModel.ReadOnlyCollection<System.Data.Metadata.Edm.FacetDescription> GetFacetDescriptions (System.Data.Metadata.Edm.EdmType edmType);\n    parameters:\n    - id: edmType\n      type: System.Data.Metadata.Edm.EdmType\n      description: The EDM type to return the facet description for.\n    return:\n      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Metadata.Edm.FacetDescription}\n      description: The FacetDescription objects for the specified EDM type.\n  overload: System.Data.Common.DbProviderManifest.GetFacetDescriptions*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbProviderManifest.GetInformation(System.String)\n  id: GetInformation(System.String)\n  parent: System.Data.Common.DbProviderManifest\n  langs:\n  - csharp\n  name: GetInformation(String)\n  nameWithType: DbProviderManifest.GetInformation(String)\n  fullName: System.Data.Common.DbProviderManifest.GetInformation(String)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common\n  summary: Gets the provider-specific information.\n  syntax:\n    content: public System.Xml.XmlReader GetInformation (string informationType);\n    parameters:\n    - id: informationType\n      type: System.String\n      description: The type of the information to return.\n    return:\n      type: System.Xml.XmlReader\n      description: The provider-specific information.\n  overload: System.Data.Common.DbProviderManifest.GetInformation*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbProviderManifest.GetStoreFunctions\n  id: GetStoreFunctions\n  parent: System.Data.Common.DbProviderManifest\n  langs:\n  - csharp\n  name: GetStoreFunctions()\n  nameWithType: DbProviderManifest.GetStoreFunctions()\n  fullName: System.Data.Common.DbProviderManifest.GetStoreFunctions()\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common\n  summary: When overridden in a derived class, returns a collection of EDM functions supported by the provider manifest.\n  syntax:\n    content: public abstract System.Collections.ObjectModel.ReadOnlyCollection<System.Data.Metadata.Edm.EdmFunction> GetStoreFunctions ();\n    parameters: []\n    return:\n      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Metadata.Edm.EdmFunction}\n      description: A collection of EDM functions.\n  overload: System.Data.Common.DbProviderManifest.GetStoreFunctions*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbProviderManifest.GetStoreType(System.Data.Metadata.Edm.TypeUsage)\n  id: GetStoreType(System.Data.Metadata.Edm.TypeUsage)\n  parent: System.Data.Common.DbProviderManifest\n  langs:\n  - csharp\n  name: GetStoreType(TypeUsage)\n  nameWithType: DbProviderManifest.GetStoreType(TypeUsage)\n  fullName: System.Data.Common.DbProviderManifest.GetStoreType(TypeUsage)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common\n  summary: When overridden in a derived class, this method maps the specified EDM type and a set of facets for that type to a storage type.\n  syntax:\n    content: public abstract System.Data.Metadata.Edm.TypeUsage GetStoreType (System.Data.Metadata.Edm.TypeUsage edmType);\n    parameters:\n    - id: edmType\n      type: System.Data.Metadata.Edm.TypeUsage\n      description: The TypeUsage instance that describes the EDM type and a set of facets for that type to be mapped to a storage type.\n    return:\n      type: System.Data.Metadata.Edm.TypeUsage\n      description: The TypeUsage instance that describes a storage type and a set of facets for that type.\n  overload: System.Data.Common.DbProviderManifest.GetStoreType*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbProviderManifest.GetStoreTypes\n  id: GetStoreTypes\n  parent: System.Data.Common.DbProviderManifest\n  langs:\n  - csharp\n  name: GetStoreTypes()\n  nameWithType: DbProviderManifest.GetStoreTypes()\n  fullName: System.Data.Common.DbProviderManifest.GetStoreTypes()\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common\n  summary: When overridden in a derived class, returns the set of primitive types supported by the data source.\n  syntax:\n    content: public abstract System.Collections.ObjectModel.ReadOnlyCollection<System.Data.Metadata.Edm.PrimitiveType> GetStoreTypes ();\n    parameters: []\n    return:\n      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Metadata.Edm.PrimitiveType}\n      description: The set of types supported by the data source.\n  overload: System.Data.Common.DbProviderManifest.GetStoreTypes*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbProviderManifest.NamespaceName\n  id: NamespaceName\n  parent: System.Data.Common.DbProviderManifest\n  langs:\n  - csharp\n  name: NamespaceName\n  nameWithType: DbProviderManifest.NamespaceName\n  fullName: System.Data.Common.DbProviderManifest.NamespaceName\n  type: Property\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common\n  summary: Gets the namespace used by this provider manifest.\n  syntax:\n    content: public abstract string NamespaceName { get; }\n    return:\n      type: System.String\n      description: The namespace used by this provider manifest.\n  overload: System.Data.Common.DbProviderManifest.NamespaceName*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbProviderManifest.StoreSchemaDefinition\n  id: StoreSchemaDefinition\n  parent: System.Data.Common.DbProviderManifest\n  langs:\n  - csharp\n  name: StoreSchemaDefinition\n  nameWithType: DbProviderManifest.StoreSchemaDefinition\n  fullName: System.Data.Common.DbProviderManifest.StoreSchemaDefinition\n  type: Field\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common\n  summary: Value to pass to GetInformation to get the StoreSchemaDefinitionVersion.\n  syntax:\n    content: public static readonly string StoreSchemaDefinition;\n    return:\n      type: System.String\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbProviderManifest.StoreSchemaDefinitionVersion3\n  id: StoreSchemaDefinitionVersion3\n  parent: System.Data.Common.DbProviderManifest\n  langs:\n  - csharp\n  name: StoreSchemaDefinitionVersion3\n  nameWithType: DbProviderManifest.StoreSchemaDefinitionVersion3\n  fullName: System.Data.Common.DbProviderManifest.StoreSchemaDefinitionVersion3\n  type: Field\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common\n  summary: Value to pass to GetInformation to get the StoreSchemaDefinitionVersion3.\n  syntax:\n    content: public static readonly string StoreSchemaDefinitionVersion3;\n    return:\n      type: System.String\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbProviderManifest.StoreSchemaMapping\n  id: StoreSchemaMapping\n  parent: System.Data.Common.DbProviderManifest\n  langs:\n  - csharp\n  name: StoreSchemaMapping\n  nameWithType: DbProviderManifest.StoreSchemaMapping\n  fullName: System.Data.Common.DbProviderManifest.StoreSchemaMapping\n  type: Field\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common\n  summary: Value to pass to GetInformation to get the StoreSchemaMappingVersion.\n  syntax:\n    content: public static readonly string StoreSchemaMapping;\n    return:\n      type: System.String\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbProviderManifest.StoreSchemaMappingVersion3\n  id: StoreSchemaMappingVersion3\n  parent: System.Data.Common.DbProviderManifest\n  langs:\n  - csharp\n  name: StoreSchemaMappingVersion3\n  nameWithType: DbProviderManifest.StoreSchemaMappingVersion3\n  fullName: System.Data.Common.DbProviderManifest.StoreSchemaMappingVersion3\n  type: Field\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common\n  summary: Value to pass to GetInformation to get the StoreSchemaMappingVersion3.\n  syntax:\n    content: public static readonly string StoreSchemaMappingVersion3;\n    return:\n      type: System.String\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Data.Common.DbProviderManifest.SupportsEscapingLikeArgument(System.Char@)\n  id: SupportsEscapingLikeArgument(System.Char@)\n  parent: System.Data.Common.DbProviderManifest\n  langs:\n  - csharp\n  name: SupportsEscapingLikeArgument(Char)\n  nameWithType: DbProviderManifest.SupportsEscapingLikeArgument(Char)\n  fullName: System.Data.Common.DbProviderManifest.SupportsEscapingLikeArgument(Char)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Common\n  summary: Indicates if the provider supports escaping strings to be used as patterns in a Like expression.\n  syntax:\n    content: public virtual bool SupportsEscapingLikeArgument (out char escapeCharacter);\n    parameters:\n    - id: escapeCharacter\n      type: System.Char\n      description: If the provider supports escaping, the character that would be used as the escape character.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"></xref> if this provider supports escaping strings to be used as patterns in a Like expression; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Data.Common.DbProviderManifest.SupportsEscapingLikeArgument*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Data.Common.DbProviderManifest.#ctor\n  parent: System.Data.Common.DbProviderManifest\n  isExternal: false\n  name: DbProviderManifest()\n  nameWithType: DbProviderManifest.DbProviderManifest()\n  fullName: System.Data.Common.DbProviderManifest.DbProviderManifest()\n- uid: System.Data.Common.DbProviderManifest.ConceptualSchemaDefinition\n  parent: System.Data.Common.DbProviderManifest\n  isExternal: false\n  name: ConceptualSchemaDefinition\n  nameWithType: DbProviderManifest.ConceptualSchemaDefinition\n  fullName: System.Data.Common.DbProviderManifest.ConceptualSchemaDefinition\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Data.Common.DbProviderManifest.ConceptualSchemaDefinitionVersion3\n  parent: System.Data.Common.DbProviderManifest\n  isExternal: false\n  name: ConceptualSchemaDefinitionVersion3\n  nameWithType: DbProviderManifest.ConceptualSchemaDefinitionVersion3\n  fullName: System.Data.Common.DbProviderManifest.ConceptualSchemaDefinitionVersion3\n- uid: System.Data.Common.DbProviderManifest.EscapeLikeArgument(System.String)\n  parent: System.Data.Common.DbProviderManifest\n  isExternal: false\n  name: EscapeLikeArgument(String)\n  nameWithType: DbProviderManifest.EscapeLikeArgument(String)\n  fullName: System.Data.Common.DbProviderManifest.EscapeLikeArgument(String)\n- uid: System.Data.Common.DbProviderManifest.GetDbInformation(System.String)\n  parent: System.Data.Common.DbProviderManifest\n  isExternal: false\n  name: GetDbInformation(String)\n  nameWithType: DbProviderManifest.GetDbInformation(String)\n  fullName: System.Data.Common.DbProviderManifest.GetDbInformation(String)\n- uid: System.Xml.XmlReader\n  parent: System.Xml\n  isExternal: true\n  name: XmlReader\n  nameWithType: XmlReader\n  fullName: System.Xml.XmlReader\n- uid: System.Data.Common.DbProviderManifest.GetEdmType(System.Data.Metadata.Edm.TypeUsage)\n  parent: System.Data.Common.DbProviderManifest\n  isExternal: false\n  name: GetEdmType(TypeUsage)\n  nameWithType: DbProviderManifest.GetEdmType(TypeUsage)\n  fullName: System.Data.Common.DbProviderManifest.GetEdmType(TypeUsage)\n- uid: System.Data.Metadata.Edm.TypeUsage\n  parent: System.Data.Metadata.Edm\n  isExternal: false\n  name: TypeUsage\n  nameWithType: TypeUsage\n  fullName: System.Data.Metadata.Edm.TypeUsage\n- uid: System.Data.Common.DbProviderManifest.GetFacetDescriptions(System.Data.Metadata.Edm.EdmType)\n  parent: System.Data.Common.DbProviderManifest\n  isExternal: false\n  name: GetFacetDescriptions(EdmType)\n  nameWithType: DbProviderManifest.GetFacetDescriptions(EdmType)\n  fullName: System.Data.Common.DbProviderManifest.GetFacetDescriptions(EdmType)\n- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Metadata.Edm.FacetDescription}\n  parent: System.Collections.ObjectModel\n  isExternal: true\n  name: ReadOnlyCollection<FacetDescription>\n  nameWithType: ReadOnlyCollection<FacetDescription>\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Data.Metadata.Edm.FacetDescription>\n  spec.csharp:\n  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n    name: ReadOnlyCollection\n    nameWithType: ReadOnlyCollection\n    fullName: ReadOnlyCollection<System.Data.Metadata.Edm.FacetDescription>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Data.Metadata.Edm.FacetDescription\n    name: FacetDescription\n    nameWithType: FacetDescription\n    fullName: FacetDescription\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Data.Metadata.Edm.EdmType\n  parent: System.Data.Metadata.Edm\n  isExternal: false\n  name: EdmType\n  nameWithType: EdmType\n  fullName: System.Data.Metadata.Edm.EdmType\n- uid: System.Data.Common.DbProviderManifest.GetInformation(System.String)\n  parent: System.Data.Common.DbProviderManifest\n  isExternal: false\n  name: GetInformation(String)\n  nameWithType: DbProviderManifest.GetInformation(String)\n  fullName: System.Data.Common.DbProviderManifest.GetInformation(String)\n- uid: System.Data.Common.DbProviderManifest.GetStoreFunctions\n  parent: System.Data.Common.DbProviderManifest\n  isExternal: false\n  name: GetStoreFunctions()\n  nameWithType: DbProviderManifest.GetStoreFunctions()\n  fullName: System.Data.Common.DbProviderManifest.GetStoreFunctions()\n- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Metadata.Edm.EdmFunction}\n  parent: System.Collections.ObjectModel\n  isExternal: true\n  name: ReadOnlyCollection<EdmFunction>\n  nameWithType: ReadOnlyCollection<EdmFunction>\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Data.Metadata.Edm.EdmFunction>\n  spec.csharp:\n  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n    name: ReadOnlyCollection\n    nameWithType: ReadOnlyCollection\n    fullName: ReadOnlyCollection<System.Data.Metadata.Edm.EdmFunction>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Data.Metadata.Edm.EdmFunction\n    name: EdmFunction\n    nameWithType: EdmFunction\n    fullName: EdmFunction\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Data.Common.DbProviderManifest.GetStoreType(System.Data.Metadata.Edm.TypeUsage)\n  parent: System.Data.Common.DbProviderManifest\n  isExternal: false\n  name: GetStoreType(TypeUsage)\n  nameWithType: DbProviderManifest.GetStoreType(TypeUsage)\n  fullName: System.Data.Common.DbProviderManifest.GetStoreType(TypeUsage)\n- uid: System.Data.Common.DbProviderManifest.GetStoreTypes\n  parent: System.Data.Common.DbProviderManifest\n  isExternal: false\n  name: GetStoreTypes()\n  nameWithType: DbProviderManifest.GetStoreTypes()\n  fullName: System.Data.Common.DbProviderManifest.GetStoreTypes()\n- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Metadata.Edm.PrimitiveType}\n  parent: System.Collections.ObjectModel\n  isExternal: true\n  name: ReadOnlyCollection<PrimitiveType>\n  nameWithType: ReadOnlyCollection<PrimitiveType>\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Data.Metadata.Edm.PrimitiveType>\n  spec.csharp:\n  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n    name: ReadOnlyCollection\n    nameWithType: ReadOnlyCollection\n    fullName: ReadOnlyCollection<System.Data.Metadata.Edm.PrimitiveType>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Data.Metadata.Edm.PrimitiveType\n    name: PrimitiveType\n    nameWithType: PrimitiveType\n    fullName: PrimitiveType\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Data.Common.DbProviderManifest.NamespaceName\n  parent: System.Data.Common.DbProviderManifest\n  isExternal: false\n  name: NamespaceName\n  nameWithType: DbProviderManifest.NamespaceName\n  fullName: System.Data.Common.DbProviderManifest.NamespaceName\n- uid: System.Data.Common.DbProviderManifest.StoreSchemaDefinition\n  parent: System.Data.Common.DbProviderManifest\n  isExternal: false\n  name: StoreSchemaDefinition\n  nameWithType: DbProviderManifest.StoreSchemaDefinition\n  fullName: System.Data.Common.DbProviderManifest.StoreSchemaDefinition\n- uid: System.Data.Common.DbProviderManifest.StoreSchemaDefinitionVersion3\n  parent: System.Data.Common.DbProviderManifest\n  isExternal: false\n  name: StoreSchemaDefinitionVersion3\n  nameWithType: DbProviderManifest.StoreSchemaDefinitionVersion3\n  fullName: System.Data.Common.DbProviderManifest.StoreSchemaDefinitionVersion3\n- uid: System.Data.Common.DbProviderManifest.StoreSchemaMapping\n  parent: System.Data.Common.DbProviderManifest\n  isExternal: false\n  name: StoreSchemaMapping\n  nameWithType: DbProviderManifest.StoreSchemaMapping\n  fullName: System.Data.Common.DbProviderManifest.StoreSchemaMapping\n- uid: System.Data.Common.DbProviderManifest.StoreSchemaMappingVersion3\n  parent: System.Data.Common.DbProviderManifest\n  isExternal: false\n  name: StoreSchemaMappingVersion3\n  nameWithType: DbProviderManifest.StoreSchemaMappingVersion3\n  fullName: System.Data.Common.DbProviderManifest.StoreSchemaMappingVersion3\n- uid: System.Data.Common.DbProviderManifest.SupportsEscapingLikeArgument(System.Char@)\n  parent: System.Data.Common.DbProviderManifest\n  isExternal: false\n  name: SupportsEscapingLikeArgument(Char)\n  nameWithType: DbProviderManifest.SupportsEscapingLikeArgument(Char)\n  fullName: System.Data.Common.DbProviderManifest.SupportsEscapingLikeArgument(Char)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Char\n  parent: System\n  isExternal: true\n  name: Char\n  nameWithType: Char\n  fullName: System.Char\n- uid: System.Data.Common.DbProviderManifest.#ctor*\n  parent: System.Data.Common.DbProviderManifest\n  isExternal: false\n  name: DbProviderManifest\n  nameWithType: DbProviderManifest.DbProviderManifest\n- uid: System.Data.Common.DbProviderManifest.EscapeLikeArgument*\n  parent: System.Data.Common.DbProviderManifest\n  isExternal: false\n  name: EscapeLikeArgument\n  nameWithType: DbProviderManifest.EscapeLikeArgument\n- uid: System.Data.Common.DbProviderManifest.GetDbInformation*\n  parent: System.Data.Common.DbProviderManifest\n  isExternal: false\n  name: GetDbInformation\n  nameWithType: DbProviderManifest.GetDbInformation\n- uid: System.Data.Common.DbProviderManifest.GetEdmType*\n  parent: System.Data.Common.DbProviderManifest\n  isExternal: false\n  name: GetEdmType\n  nameWithType: DbProviderManifest.GetEdmType\n- uid: System.Data.Common.DbProviderManifest.GetFacetDescriptions*\n  parent: System.Data.Common.DbProviderManifest\n  isExternal: false\n  name: GetFacetDescriptions\n  nameWithType: DbProviderManifest.GetFacetDescriptions\n- uid: System.Data.Common.DbProviderManifest.GetInformation*\n  parent: System.Data.Common.DbProviderManifest\n  isExternal: false\n  name: GetInformation\n  nameWithType: DbProviderManifest.GetInformation\n- uid: System.Data.Common.DbProviderManifest.GetStoreFunctions*\n  parent: System.Data.Common.DbProviderManifest\n  isExternal: false\n  name: GetStoreFunctions\n  nameWithType: DbProviderManifest.GetStoreFunctions\n- uid: System.Data.Common.DbProviderManifest.GetStoreType*\n  parent: System.Data.Common.DbProviderManifest\n  isExternal: false\n  name: GetStoreType\n  nameWithType: DbProviderManifest.GetStoreType\n- uid: System.Data.Common.DbProviderManifest.GetStoreTypes*\n  parent: System.Data.Common.DbProviderManifest\n  isExternal: false\n  name: GetStoreTypes\n  nameWithType: DbProviderManifest.GetStoreTypes\n- uid: System.Data.Common.DbProviderManifest.NamespaceName*\n  parent: System.Data.Common.DbProviderManifest\n  isExternal: false\n  name: NamespaceName\n  nameWithType: DbProviderManifest.NamespaceName\n- uid: System.Data.Common.DbProviderManifest.SupportsEscapingLikeArgument*\n  parent: System.Data.Common.DbProviderManifest\n  isExternal: false\n  name: SupportsEscapingLikeArgument\n  nameWithType: DbProviderManifest.SupportsEscapingLikeArgument\n"}