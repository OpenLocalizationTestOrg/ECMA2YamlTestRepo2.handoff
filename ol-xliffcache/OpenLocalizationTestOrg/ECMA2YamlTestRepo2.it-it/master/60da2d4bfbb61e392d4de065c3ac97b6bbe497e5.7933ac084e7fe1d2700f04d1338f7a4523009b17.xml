{"nodes":[{"pos":[643,687],"content":"Provides HTTP content based on a byte array.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides HTTP content based on a byte array.","pos":[0,44]}]},{"pos":[1865,1959],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Net.Http.ByteArrayContent\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Net.Http.ByteArrayContent\"></xref> class."},{"pos":[2104,2193],"content":"The content used to initialize the <bpt id=\"p1\">&lt;xref href=\"System.Net.Http.ByteArrayContent\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The content used to initialize the <xref href=\"System.Net.Http.ByteArrayContent\"></xref>."},{"pos":[2362,2461],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">content</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>content</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[2981,3075],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Net.Http.ByteArrayContent\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Net.Http.ByteArrayContent\"></xref> class."},{"pos":[3087,3191],"content":"Only the range specified by the `offset` parameter and the `count`  parameter is used as content. Syntax","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Only the range specified by the <ph id=\"ph1\">`offset`</ph> parameter and the <ph id=\"ph2\">`count`</ph>  parameter is used as content.","pos":[0,97],"source":"Only the range specified by the `offset` parameter and the `count`  parameter is used as content."},{"content":"Syntax","pos":[98,104]}]},{"pos":[3359,3448],"content":"The content used to initialize the <bpt id=\"p1\">&lt;xref href=\"System.Net.Http.ByteArrayContent\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The content used to initialize the <xref href=\"System.Net.Http.ByteArrayContent\"></xref>."},{"pos":[3510,3636],"content":"The offset, in bytes, in the <ph id=\"ph1\">`content`</ph> parameter used to initialize the <bpt id=\"p1\">&lt;xref href=\"System.Net.Http.ByteArrayContent\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The offset, in bytes, in the `content` parameter used to initialize the <xref href=\"System.Net.Http.ByteArrayContent\"></xref>."},{"pos":[3697,3848],"content":"The number of bytes in the <ph id=\"ph1\">`content`</ph> starting from the <ph id=\"ph2\">`offset`</ph> parameter used to initialize the <bpt id=\"p1\">&lt;xref href=\"System.Net.Http.ByteArrayContent\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The number of bytes in the `content` starting from the `offset` parameter used to initialize the <xref href=\"System.Net.Http.ByteArrayContent\"></xref>."},{"pos":[4017,4116],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">content</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>content</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[4232,4683],"content":"The <code>offset</code> parameter is less than zero.       -or-       The <code>offset</code> parameter is greater than the length of content specified by the <code>content</code> parameter.       -or-       The <code>count </code> parameter is less than zero.       -or-       The <code>count</code> parameter is greater than the length of content specified by the <code>content</code> parameter - minus the <code>offset</code> parameter.","needQuote":false,"needEscape":true,"nodes":[{"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">offset</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is less than zero.","pos":[0,52],"source":"The <code>offset</code> parameter is less than zero."},{"content":"-or-       The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">offset</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is greater than the length of content specified by the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">content</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter.","pos":[59,190],"source":"       -or-       The <code>offset</code> parameter is greater than the length of content specified by the <code>content</code> parameter."},{"content":"-or-       The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">count</ph><ept id=\"p1\"> &lt;/code&gt;</ept> parameter is less than zero.","pos":[197,260],"source":"       -or-       The <code>count </code> parameter is less than zero."},{"content":"-or-       The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">count</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is greater than the length of content specified by the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">content</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter - minus the <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">offset</ph><ept id=\"p3\">&lt;/code&gt;</ept> parameter.","pos":[267,439],"source":"       -or-       The <code>count</code> parameter is greater than the length of content specified by the <code>content</code> parameter - minus the <code>offset</code> parameter."}]},{"pos":[5143,5308],"content":"Creates an HTTP content stream as an asynchronous operation for reading whose backing store is memory from the <bpt id=\"p1\">&lt;xref href=\"System.Net.Http.ByteArrayContent\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Creates an HTTP content stream as an asynchronous operation for reading whose backing store is memory from the <xref href=\"System.Net.Http.ByteArrayContent\"></xref>."},{"pos":[5320,5472],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601>object will complete after all of the content stream has been created.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601>object will complete after all of the content stream has been created.","pos":[0,152],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned &lt;xref:System.Threading.Tasks.Task%601&gt;object will complete after all of the content stream has been created.","pos":[31,152],"source":" The returned <xref:System.Threading.Tasks.Task%601>object will complete after all of the content stream has been created."}]}]},{"pos":[5702,5758],"content":"The task object representing the asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]}]},{"pos":[6440,6558],"content":"Serialize and write the byte array provided in the constructor to an HTTP content stream as an asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Serialize and write the byte array provided in the constructor to an HTTP content stream as an asynchronous operation.","pos":[0,118]}]},{"pos":[6570,6736],"content":"This operation does not block. When the returned <xref:System.Threading.Tasks.Task> object completes, the whole byte array has been written to the `stream` parameter.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This operation does not block.","pos":[0,30]},{"content":"When the returned &lt;xref:System.Threading.Tasks.Task&gt; object completes, the whole byte array has been written to the <ph id=\"ph1\">`stream`</ph> parameter.","pos":[31,166],"source":" When the returned <xref:System.Threading.Tasks.Task> object completes, the whole byte array has been written to the `stream` parameter."}]},{"pos":[6975,6993],"content":"The target stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"The target stream.","pos":[0,18]}]},{"pos":[7071,7215],"content":"Information about the transport, like channel binding token. This parameter may be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Information about the transport, like channel binding token.","pos":[0,60]},{"content":"This parameter may be <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[61,144],"source":" This parameter may be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[7287,7343],"content":"The task object representing the asynchronous operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]}]},{"pos":[7873,7933],"content":"Determines whether a byte array has a valid length in bytes.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether a byte array has a valid length in bytes.","pos":[0,60]}]},{"pos":[7946,8615],"content":"The TryComputeLength method gives a derived content type the ability to calculate the content length. This is useful for content types which are able to easily calculate the content length. If computing the content length is not possible or expensive (would require the system to buffer the whole content where the serialization would be expensive or require the system to allocate a lot of memory), this method can return `false`. If this method returns `false`, this implies that either chunked transfer is needed or the content must get buffered before being sent to the server.       This method always returned `true` for <xref:System.Net.Http.ByteArrayContent>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The TryComputeLength method gives a derived content type the ability to calculate the content length.","pos":[0,101]},{"content":"This is useful for content types which are able to easily calculate the content length.","pos":[102,189]},{"content":"If computing the content length is not possible or expensive (would require the system to buffer the whole content where the serialization would be expensive or require the system to allocate a lot of memory), this method can return <ph id=\"ph1\">`false`</ph>.","pos":[190,431],"source":" If computing the content length is not possible or expensive (would require the system to buffer the whole content where the serialization would be expensive or require the system to allocate a lot of memory), this method can return `false`."},{"content":"If this method returns <ph id=\"ph1\">`false`</ph>, this implies that either chunked transfer is needed or the content must get buffered before being sent to the server.","pos":[432,581],"source":" If this method returns `false`, this implies that either chunked transfer is needed or the content must get buffered before being sent to the server."},{"content":"This method always returned <ph id=\"ph1\">`true`</ph> for &lt;xref:System.Net.Http.ByteArrayContent&gt;.","pos":[588,667],"source":"       This method always returned `true` for <xref:System.Net.Http.ByteArrayContent>."}]},{"pos":[8777,8815],"content":"The length in bytes of the byte array.","needQuote":true,"needEscape":true,"nodes":[{"content":"The length in bytes of the byte array.","pos":[0,38]}]},{"pos":[8874,9051],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph1\">length</ph><ept id=\"p2\">&lt;/code&gt;</ept> is a valid length; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>length</code> is a valid length; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Net.Http.ByteArrayContent\n  id: ByteArrayContent\n  children:\n  - System.Net.Http.ByteArrayContent.#ctor(System.Byte[])\n  - System.Net.Http.ByteArrayContent.#ctor(System.Byte[],System.Int32,System.Int32)\n  - System.Net.Http.ByteArrayContent.CreateContentReadStreamAsync\n  - System.Net.Http.ByteArrayContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)\n  - System.Net.Http.ByteArrayContent.TryComputeLength(System.Int64@)\n  langs:\n  - csharp\n  name: ByteArrayContent\n  nameWithType: ByteArrayContent\n  fullName: System.Net.Http.ByteArrayContent\n  type: Class\n  summary: Provides HTTP content based on a byte array.\n  syntax:\n    content: 'public class ByteArrayContent : System.Net.Http.HttpContent'\n  inheritance:\n  - System.Object\n  - System.Net.Http.HttpContent\n  implements: []\n  inheritedMembers:\n  - System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream)\n  - System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream,System.Net.TransportContext)\n  - System.Net.Http.HttpContent.Dispose\n  - System.Net.Http.HttpContent.Dispose(System.Boolean)\n  - System.Net.Http.HttpContent.Headers\n  - System.Net.Http.HttpContent.LoadIntoBufferAsync\n  - System.Net.Http.HttpContent.LoadIntoBufferAsync(System.Int64)\n  - System.Net.Http.HttpContent.ReadAsByteArrayAsync\n  - System.Net.Http.HttpContent.ReadAsStreamAsync\n  - System.Net.Http.HttpContent.ReadAsStringAsync\n  platform:\n  - net462\n- uid: System.Net.Http.ByteArrayContent.#ctor(System.Byte[])\n  id: '#ctor(System.Byte[])'\n  parent: System.Net.Http.ByteArrayContent\n  langs:\n  - csharp\n  name: ByteArrayContent(Byte[])\n  nameWithType: ByteArrayContent.ByteArrayContent(Byte[])\n  fullName: System.Net.Http.ByteArrayContent.ByteArrayContent(Byte[])\n  type: Constructor\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: Initializes a new instance of the <xref href=\"System.Net.Http.ByteArrayContent\"></xref> class.\n  syntax:\n    content: public ByteArrayContent (byte[] content);\n    parameters:\n    - id: content\n      type: System.Byte[]\n      description: The content used to initialize the <xref href=\"System.Net.Http.ByteArrayContent\"></xref>.\n  overload: System.Net.Http.ByteArrayContent.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>content</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Net.Http.ByteArrayContent.#ctor(System.Byte[],System.Int32,System.Int32)\n  id: '#ctor(System.Byte[],System.Int32,System.Int32)'\n  parent: System.Net.Http.ByteArrayContent\n  langs:\n  - csharp\n  name: ByteArrayContent(Byte[],Int32,Int32)\n  nameWithType: ByteArrayContent.ByteArrayContent(Byte[],Int32,Int32)\n  fullName: System.Net.Http.ByteArrayContent.ByteArrayContent(Byte[],Int32,Int32)\n  type: Constructor\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: Initializes a new instance of the <xref href=\"System.Net.Http.ByteArrayContent\"></xref> class.\n  remarks: Only the range specified by the `offset` parameter and the `count`  parameter is used as content. Syntax\n  syntax:\n    content: public ByteArrayContent (byte[] content, int offset, int count);\n    parameters:\n    - id: content\n      type: System.Byte[]\n      description: The content used to initialize the <xref href=\"System.Net.Http.ByteArrayContent\"></xref>.\n    - id: offset\n      type: System.Int32\n      description: The offset, in bytes, in the `content` parameter used to initialize the <xref href=\"System.Net.Http.ByteArrayContent\"></xref>.\n    - id: count\n      type: System.Int32\n      description: The number of bytes in the `content` starting from the `offset` parameter used to initialize the <xref href=\"System.Net.Http.ByteArrayContent\"></xref>.\n  overload: System.Net.Http.ByteArrayContent.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>content</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"The <code>offset</code> parameter is less than zero.  \\n  \\n -or-  \\n  \\n The <code>offset</code> parameter is greater than the length of content specified by the <code>content</code> parameter.  \\n  \\n -or-  \\n  \\n The <code>count </code> parameter is less than zero.  \\n  \\n -or-  \\n  \\n The <code>count</code> parameter is greater than the length of content specified by the <code>content</code> parameter - minus the <code>offset</code> parameter.\"\n  platform:\n  - net462\n- uid: System.Net.Http.ByteArrayContent.CreateContentReadStreamAsync\n  id: CreateContentReadStreamAsync\n  parent: System.Net.Http.ByteArrayContent\n  langs:\n  - csharp\n  name: CreateContentReadStreamAsync()\n  nameWithType: ByteArrayContent.CreateContentReadStreamAsync()\n  fullName: System.Net.Http.ByteArrayContent.CreateContentReadStreamAsync()\n  type: Method\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: Creates an HTTP content stream as an asynchronous operation for reading whose backing store is memory from the <xref href=\"System.Net.Http.ByteArrayContent\"></xref>.\n  remarks: This operation will not block. The returned <xref:System.Threading.Tasks.Task%601>object will complete after all of the content stream has been created.\n  syntax:\n    content: protected override System.Threading.Tasks.Task<System.IO.Stream> CreateContentReadStreamAsync ();\n    parameters: []\n    return:\n      type: System.Threading.Tasks.Task{System.IO.Stream}\n      description: The task object representing the asynchronous operation.\n  overload: System.Net.Http.ByteArrayContent.CreateContentReadStreamAsync*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Http.ByteArrayContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)\n  id: SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)\n  parent: System.Net.Http.ByteArrayContent\n  langs:\n  - csharp\n  name: SerializeToStreamAsync(Stream,TransportContext)\n  nameWithType: ByteArrayContent.SerializeToStreamAsync(Stream,TransportContext)\n  fullName: System.Net.Http.ByteArrayContent.SerializeToStreamAsync(Stream,TransportContext)\n  type: Method\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: Serialize and write the byte array provided in the constructor to an HTTP content stream as an asynchronous operation.\n  remarks: This operation does not block. When the returned <xref:System.Threading.Tasks.Task> object completes, the whole byte array has been written to the `stream` parameter.\n  syntax:\n    content: protected override System.Threading.Tasks.Task SerializeToStreamAsync (System.IO.Stream stream, System.Net.TransportContext context);\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: The target stream.\n    - id: context\n      type: System.Net.TransportContext\n      description: Information about the transport, like channel binding token. This parameter may be <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n    return:\n      type: System.Threading.Tasks.Task\n      description: The task object representing the asynchronous operation.\n  overload: System.Net.Http.ByteArrayContent.SerializeToStreamAsync*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Http.ByteArrayContent.TryComputeLength(System.Int64@)\n  id: TryComputeLength(System.Int64@)\n  parent: System.Net.Http.ByteArrayContent\n  langs:\n  - csharp\n  name: TryComputeLength(Int64)\n  nameWithType: ByteArrayContent.TryComputeLength(Int64)\n  fullName: System.Net.Http.ByteArrayContent.TryComputeLength(Int64)\n  type: Method\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: Determines whether a byte array has a valid length in bytes.\n  remarks: \"The TryComputeLength method gives a derived content type the ability to calculate the content length. This is useful for content types which are able to easily calculate the content length. If computing the content length is not possible or expensive (would require the system to buffer the whole content where the serialization would be expensive or require the system to allocate a lot of memory), this method can return `false`. If this method returns `false`, this implies that either chunked transfer is needed or the content must get buffered before being sent to the server.  \\n  \\n This method always returned `true` for <xref:System.Net.Http.ByteArrayContent>.\"\n  syntax:\n    content: protected override bool TryComputeLength (out long length);\n    parameters:\n    - id: length\n      type: System.Int64\n      description: The length in bytes of the byte array.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code>length</code> is a valid length; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Net.Http.ByteArrayContent.TryComputeLength*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Net.Http.HttpContent\n  isExternal: false\n  name: System.Net.Http.HttpContent\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.Net.Http.ByteArrayContent.#ctor(System.Byte[])\n  parent: System.Net.Http.ByteArrayContent\n  isExternal: false\n  name: ByteArrayContent(Byte[])\n  nameWithType: ByteArrayContent.ByteArrayContent(Byte[])\n  fullName: System.Net.Http.ByteArrayContent.ByteArrayContent(Byte[])\n- uid: System.Byte[]\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: Byte[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Net.Http.ByteArrayContent.#ctor(System.Byte[],System.Int32,System.Int32)\n  parent: System.Net.Http.ByteArrayContent\n  isExternal: false\n  name: ByteArrayContent(Byte[],Int32,Int32)\n  nameWithType: ByteArrayContent.ByteArrayContent(Byte[],Int32,Int32)\n  fullName: System.Net.Http.ByteArrayContent.ByteArrayContent(Byte[],Int32,Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Net.Http.ByteArrayContent.CreateContentReadStreamAsync\n  parent: System.Net.Http.ByteArrayContent\n  isExternal: false\n  name: CreateContentReadStreamAsync()\n  nameWithType: ByteArrayContent.CreateContentReadStreamAsync()\n  fullName: System.Net.Http.ByteArrayContent.CreateContentReadStreamAsync()\n- uid: System.Threading.Tasks.Task{System.IO.Stream}\n  parent: System.Threading.Tasks\n  isExternal: true\n  name: Task<Stream>\n  nameWithType: Task<Stream>\n  fullName: System.Threading.Tasks.Task<System.IO.Stream>\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: Task<System.IO.Stream>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.IO.Stream\n    name: Stream\n    nameWithType: Stream\n    fullName: Stream\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Net.Http.ByteArrayContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)\n  parent: System.Net.Http.ByteArrayContent\n  isExternal: false\n  name: SerializeToStreamAsync(Stream,TransportContext)\n  nameWithType: ByteArrayContent.SerializeToStreamAsync(Stream,TransportContext)\n  fullName: System.Net.Http.ByteArrayContent.SerializeToStreamAsync(Stream,TransportContext)\n- uid: System.Threading.Tasks.Task\n  parent: System.Threading.Tasks\n  isExternal: true\n  name: Task\n  nameWithType: Task\n  fullName: System.Threading.Tasks.Task\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: true\n  name: Stream\n  nameWithType: Stream\n  fullName: System.IO.Stream\n- uid: System.Net.TransportContext\n  parent: System.Net\n  isExternal: true\n  name: TransportContext\n  nameWithType: TransportContext\n  fullName: System.Net.TransportContext\n- uid: System.Net.Http.ByteArrayContent.TryComputeLength(System.Int64@)\n  parent: System.Net.Http.ByteArrayContent\n  isExternal: false\n  name: TryComputeLength(Int64)\n  nameWithType: ByteArrayContent.TryComputeLength(Int64)\n  fullName: System.Net.Http.ByteArrayContent.TryComputeLength(Int64)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Int64\n  parent: System\n  isExternal: true\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.Net.Http.ByteArrayContent.#ctor*\n  parent: System.Net.Http.ByteArrayContent\n  isExternal: false\n  name: ByteArrayContent\n  nameWithType: ByteArrayContent.ByteArrayContent\n- uid: System.Net.Http.ByteArrayContent.CreateContentReadStreamAsync*\n  parent: System.Net.Http.ByteArrayContent\n  isExternal: false\n  name: CreateContentReadStreamAsync\n  nameWithType: ByteArrayContent.CreateContentReadStreamAsync\n- uid: System.Net.Http.ByteArrayContent.SerializeToStreamAsync*\n  parent: System.Net.Http.ByteArrayContent\n  isExternal: false\n  name: SerializeToStreamAsync\n  nameWithType: ByteArrayContent.SerializeToStreamAsync\n- uid: System.Net.Http.ByteArrayContent.TryComputeLength*\n  parent: System.Net.Http.ByteArrayContent\n  isExternal: false\n  name: TryComputeLength\n  nameWithType: ByteArrayContent.TryComputeLength\n"}