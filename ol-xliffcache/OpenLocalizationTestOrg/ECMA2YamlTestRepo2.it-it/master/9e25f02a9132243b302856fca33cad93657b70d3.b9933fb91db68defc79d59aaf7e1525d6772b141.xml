{"nodes":[{"pos":[572,683],"content":"Wraps an exception that does not derive from the <xref:System.Exception> class. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Wraps an exception that does not derive from the <xref:System.Exception> class. This class cannot be inherited.","pos":[0,111],"nodes":[{"content":"Wraps an exception that does not derive from the &lt;xref:System.Exception&gt; class.","pos":[0,79],"source":"Wraps an exception that does not derive from the <xref:System.Exception> class."},{"content":"This class cannot be inherited.","pos":[80,111]}]}]},{"pos":[696,1736],"content":"Some languages, such as C++, allow you to throw exceptions of any managed type.  Other languages, such as Microsoft C# and Visual Basic, require that every thrown exception be derived from the <xref:System.Exception> class.  To maintain compatibility between languages, the common language runtime (CLR) wraps objects that do not derive from <xref:System.Exception> in a RuntimeWrappedException object.       You can use the <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute> class to specify whether exceptions should appear wrapped inside catch blocks and exception filters for an assembly.  Many language compilers, including the Microsoft C# and Visual Basic compilers, apply this attribute by default to specify the wrapping behavior.       Note that the runtime still wraps exceptions even if you use the <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute> class to specify that you do not want them wrapped.  In this case, exceptions are unwrapped only inside catch blocks or exception filters.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Some languages, such as C++, allow you to throw exceptions of any managed type.  Other languages, such as Microsoft C# and Visual Basic, require that every thrown exception be derived from the <xref:System.Exception> class.  To maintain compatibility between languages, the common language runtime (CLR) wraps objects that do not derive from <xref:System.Exception> in a RuntimeWrappedException object.       You can use the <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute> class to specify whether exceptions should appear wrapped inside catch blocks and exception filters for an assembly.  Many language compilers, including the Microsoft C# and Visual Basic compilers, apply this attribute by default to specify the wrapping behavior.       Note that the runtime still wraps exceptions even if you use the <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute> class to specify that you do not want them wrapped.  In this case, exceptions are unwrapped only inside catch blocks or exception filters.","pos":[0,1036],"nodes":[{"content":"Some languages, such as C++, allow you to throw exceptions of any managed type.","pos":[0,79]},{"content":"Other languages, such as Microsoft C# and Visual Basic, require that every thrown exception be derived from the &lt;xref:System.Exception&gt; class.","pos":[81,223],"source":"  Other languages, such as Microsoft C# and Visual Basic, require that every thrown exception be derived from the <xref:System.Exception> class."},{"content":"To maintain compatibility between languages, the common language runtime (CLR) wraps objects that do not derive from &lt;xref:System.Exception&gt; in a RuntimeWrappedException object.","pos":[225,402],"source":"  To maintain compatibility between languages, the common language runtime (CLR) wraps objects that do not derive from <xref:System.Exception> in a RuntimeWrappedException object."},{"content":"You can use the &lt;xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute&gt; class to specify whether exceptions should appear wrapped inside catch blocks and exception filters for an assembly.","pos":[409,610],"source":"       You can use the <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute> class to specify whether exceptions should appear wrapped inside catch blocks and exception filters for an assembly."},{"content":"Many language compilers, including the Microsoft C# and Visual Basic compilers, apply this attribute by default to specify the wrapping behavior.","pos":[612,757]},{"content":"Note that the runtime still wraps exceptions even if you use the &lt;xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute&gt; class to specify that you do not want them wrapped.","pos":[764,949],"source":"       Note that the runtime still wraps exceptions even if you use the <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute> class to specify that you do not want them wrapped."},{"content":"In this case, exceptions are unwrapped only inside catch blocks or exception filters.","pos":[951,1036]}]}]},{"pos":[2965,3086],"content":"Sets the <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Serialization.SerializationInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object with information about the exception.","needQuote":true,"needEscape":true,"source":"Sets the <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object with information about the exception."},{"pos":[3098,3366],"content":"The GetObjectData method sets a <xref:System.Runtime.Serialization.SerializationInfo> object with all the exception object data targeted for serialization. During deserialization, the exception is reconstituted from the `SerializationInfo` transmitted over the stream.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The GetObjectData method sets a &lt;xref:System.Runtime.Serialization.SerializationInfo&gt; object with all the exception object data targeted for serialization.","pos":[0,155],"source":"The GetObjectData method sets a <xref:System.Runtime.Serialization.SerializationInfo> object with all the exception object data targeted for serialization."},{"content":"During deserialization, the exception is reconstituted from the <ph id=\"ph1\">`SerializationInfo`</ph> transmitted over the stream.","pos":[156,268],"source":" During deserialization, the exception is reconstituted from the `SerializationInfo` transmitted over the stream."}]},{"pos":[3644,3794],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Runtime.Serialization.SerializationInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that holds the serialized object data about the exception being thrown.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object that holds the serialized object data about the exception being thrown."},{"pos":[3890,4023],"content":"The <xref:System.Runtime.Serialization.StreamingContext> object that contains contextual information about the source or destination.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Runtime.Serialization.StreamingContext&gt; object that contains contextual information about the source or destination.","pos":[0,133],"source":"The <xref:System.Runtime.Serialization.StreamingContext> object that contains contextual information about the source or destination."}]},{"pos":[4223,4319],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">info</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>info</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[4799,4923],"content":"Gets the object that was wrapped by the <bpt id=\"p1\">&lt;xref href=\"System.Runtime.CompilerServices.RuntimeWrappedException\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Gets the object that was wrapped by the <xref href=\"System.Runtime.CompilerServices.RuntimeWrappedException\"></xref> object."},{"pos":[4935,5109],"content":"The WrappedException property gets an object that was thrown as an exception from a language that allows exceptions that do not derive from the <xref:System.Exception> class.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The WrappedException property gets an object that was thrown as an exception from a language that allows exceptions that do not derive from the &lt;xref:System.Exception&gt; class.","pos":[0,174],"source":"The WrappedException property gets an object that was thrown as an exception from a language that allows exceptions that do not derive from the <xref:System.Exception> class."}]},{"pos":[5230,5349],"content":"The object that was wrapped by the <bpt id=\"p1\">&lt;xref href=\"System.Runtime.CompilerServices.RuntimeWrappedException\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"The object that was wrapped by the <xref href=\"System.Runtime.CompilerServices.RuntimeWrappedException\"></xref> object."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Runtime.CompilerServices.RuntimeWrappedException\n  id: RuntimeWrappedException\n  children:\n  - System.Runtime.CompilerServices.RuntimeWrappedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  - System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException\n  langs:\n  - csharp\n  name: RuntimeWrappedException\n  nameWithType: RuntimeWrappedException\n  fullName: System.Runtime.CompilerServices.RuntimeWrappedException\n  type: Class\n  summary: Wraps an exception that does not derive from the <xref:System.Exception> class. This class cannot be inherited.\n  remarks: \"Some languages, such as C++, allow you to throw exceptions of any managed type.  Other languages, such as Microsoft C# and Visual Basic, require that every thrown exception be derived from the <xref:System.Exception> class.  To maintain compatibility between languages, the common language runtime (CLR) wraps objects that do not derive from <xref:System.Exception> in a RuntimeWrappedException object.  \\n  \\n You can use the <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute> class to specify whether exceptions should appear wrapped inside catch blocks and exception filters for an assembly.  Many language compilers, including the Microsoft C# and Visual Basic compilers, apply this attribute by default to specify the wrapping behavior.  \\n  \\n Note that the runtime still wraps exceptions even if you use the <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute> class to specify that you do not want them wrapped.  In this case, exceptions are unwrapped only inside catch blocks or exception filters.\"\n  example:\n  - \"The following code example demonstrates how to throw a <xref:System.String> object as an exception in C++ and catch it using a RuntimeWrappedException object.  \\n  \\n [!code-cpp[System.Runtime.CompilerServices.RuntimeWrappedException#1](~/add/codesnippet/cpp/t-system.runtime.compile_12_1.cpp)]\"\n  syntax:\n    content: 'public sealed class RuntimeWrappedException : Exception'\n  inheritance:\n  - System.Exception\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Runtime.CompilerServices.RuntimeWrappedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Runtime.CompilerServices.RuntimeWrappedException\n  langs:\n  - csharp\n  name: GetObjectData(SerializationInfo,StreamingContext)\n  nameWithType: RuntimeWrappedException.GetObjectData(SerializationInfo,StreamingContext)\n  fullName: System.Runtime.CompilerServices.RuntimeWrappedException.GetObjectData(SerializationInfo,StreamingContext)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.CompilerServices\n  summary: Sets the <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object with information about the exception.\n  remarks: The GetObjectData method sets a <xref:System.Runtime.Serialization.SerializationInfo> object with all the exception object data targeted for serialization. During deserialization, the exception is reconstituted from the `SerializationInfo` transmitted over the stream.\n  syntax:\n    content: public override void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);\n    parameters:\n    - id: info\n      type: System.Runtime.Serialization.SerializationInfo\n      description: The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object that holds the serialized object data about the exception being thrown.\n    - id: context\n      type: System.Runtime.Serialization.StreamingContext\n      description: The <xref:System.Runtime.Serialization.StreamingContext> object that contains contextual information about the source or destination.\n  overload: System.Runtime.CompilerServices.RuntimeWrappedException.GetObjectData*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>info</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException\n  id: WrappedException\n  parent: System.Runtime.CompilerServices.RuntimeWrappedException\n  langs:\n  - csharp\n  name: WrappedException\n  nameWithType: RuntimeWrappedException.WrappedException\n  fullName: System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.CompilerServices\n  summary: Gets the object that was wrapped by the <xref href=\"System.Runtime.CompilerServices.RuntimeWrappedException\"></xref> object.\n  remarks: The WrappedException property gets an object that was thrown as an exception from a language that allows exceptions that do not derive from the <xref:System.Exception> class.\n  syntax:\n    content: public object WrappedException { get; }\n    return:\n      type: System.Object\n      description: The object that was wrapped by the <xref href=\"System.Runtime.CompilerServices.RuntimeWrappedException\"></xref> object.\n  overload: System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Exception\n  isExternal: false\n  name: System.Exception\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.Runtime.CompilerServices.RuntimeWrappedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Runtime.CompilerServices.RuntimeWrappedException\n  isExternal: false\n  name: GetObjectData(SerializationInfo,StreamingContext)\n  nameWithType: RuntimeWrappedException.GetObjectData(SerializationInfo,StreamingContext)\n  fullName: System.Runtime.CompilerServices.RuntimeWrappedException.GetObjectData(SerializationInfo,StreamingContext)\n- uid: System.Runtime.Serialization.SerializationInfo\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: SerializationInfo\n  nameWithType: SerializationInfo\n  fullName: System.Runtime.Serialization.SerializationInfo\n- uid: System.Runtime.Serialization.StreamingContext\n  parent: System.Runtime.Serialization\n  isExternal: true\n  name: StreamingContext\n  nameWithType: StreamingContext\n  fullName: System.Runtime.Serialization.StreamingContext\n- uid: System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException\n  parent: System.Runtime.CompilerServices.RuntimeWrappedException\n  isExternal: false\n  name: WrappedException\n  nameWithType: RuntimeWrappedException.WrappedException\n  fullName: System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Runtime.CompilerServices.RuntimeWrappedException.GetObjectData*\n  parent: System.Runtime.CompilerServices.RuntimeWrappedException\n  isExternal: false\n  name: GetObjectData\n  nameWithType: RuntimeWrappedException.GetObjectData\n- uid: System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException*\n  parent: System.Runtime.CompilerServices.RuntimeWrappedException\n  isExternal: false\n  name: WrappedException\n  nameWithType: RuntimeWrappedException.WrappedException\n"}