{"nodes":[{"pos":[923,1070],"content":"Allows security actions for <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.ReflectionPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to be applied to code using declarative security.","needQuote":true,"needEscape":true,"source":"Allows security actions for <xref href=\"System.Security.Permissions.ReflectionPermission\"></xref> to be applied to code using declarative security."},{"pos":[1083,1490],"content":"The scope of the declaration that is allowed depends on the <xref:System.Security.Permissions.SecurityAction> that is used.       The security information declared by a security attribute is stored in the metadata of the attribute target and is accessed by the system at run time. Security attributes are used only for declarative security. For imperative security, use the corresponding permission class.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The scope of the declaration that is allowed depends on the <xref:System.Security.Permissions.SecurityAction> that is used.       The security information declared by a security attribute is stored in the metadata of the attribute target and is accessed by the system at run time. Security attributes are used only for declarative security. For imperative security, use the corresponding permission class.","pos":[0,405],"nodes":[{"content":"The scope of the declaration that is allowed depends on the &lt;xref:System.Security.Permissions.SecurityAction&gt; that is used.","pos":[0,123],"source":"The scope of the declaration that is allowed depends on the <xref:System.Security.Permissions.SecurityAction> that is used."},{"content":"The security information declared by a security attribute is stored in the metadata of the attribute target and is accessed by the system at run time.","pos":[130,280]},{"content":"Security attributes are used only for declarative security.","pos":[281,340]},{"content":"For imperative security, use the corresponding permission class.","pos":[341,405]}]}]},{"pos":[2875,3077],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.ReflectionPermissionAttribute\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified <bpt id=\"p2\">&lt;xref href=\"System.Security.Permissions.SecurityAction\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Permissions.ReflectionPermissionAttribute\"></xref> class with the specified <xref href=\"System.Security.Permissions.SecurityAction\"></xref>."},{"pos":[3298,3380],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.SecurityAction\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Security.Permissions.SecurityAction\"></xref> values."},{"pos":[3966,4062],"content":"Creates and returns a new <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.ReflectionPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Creates and returns a new <xref href=\"System.Security.Permissions.ReflectionPermission\"></xref>."},{"pos":[4075,4389],"content":"This method should only be called by the security system, never by application code.       At compile time, attributes convert security declarations to a serialized form in metadata. Declarative security data in metadata is created from the permission that this method returns that corresponds to this attribute.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method should only be called by the security system, never by application code.       At compile time, attributes convert security declarations to a serialized form in metadata. Declarative security data in metadata is created from the permission that this method returns that corresponds to this attribute.","pos":[0,312],"nodes":[{"content":"This method should only be called by the security system, never by application code.","pos":[0,84]},{"content":"At compile time, attributes convert security declarations to a serialized form in metadata.","pos":[91,182]},{"content":"Declarative security data in metadata is created from the permission that this method returns that corresponds to this attribute.","pos":[183,312]}]}]},{"pos":[4569,4676],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.ReflectionPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that corresponds to this attribute.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Security.Permissions.ReflectionPermission\"></xref> that corresponds to this attribute."},{"pos":[5214,5266],"content":"Gets or sets the current allowed uses of reflection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the current allowed uses of reflection.","pos":[0,52]}]},{"pos":[5466,5594],"content":"One or more of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.ReflectionPermissionFlag\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values combined using a bitwise OR.","needQuote":true,"needEscape":true,"source":"One or more of the <xref href=\"System.Security.Permissions.ReflectionPermissionFlag\"></xref> values combined using a bitwise OR."},{"pos":[5780,5940],"content":"An attempt is made to set this property to an invalid value. See <xref href=\"System.Security.Permissions.ReflectionPermissionFlag\"></xref> for the valid values.","needQuote":true,"needEscape":true,"nodes":[{"content":"An attempt is made to set this property to an invalid value.","pos":[0,60]},{"content":"See <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.ReflectionPermissionFlag\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for the valid values.","pos":[61,160],"source":" See <xref href=\"System.Security.Permissions.ReflectionPermissionFlag\"></xref> for the valid values."}]},{"pos":[6408,6510],"content":"Gets or sets a value that indicates whether invocation of operations on non-public members is allowed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value that indicates whether invocation of operations on non-public members is allowed.","pos":[0,102]}]},{"pos":[6631,6828],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if invocation of operations on non-public members is allowed; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if invocation of operations on non-public members is allowed; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[7407,7566],"content":"Gets or sets a value that indicates whether use of certain features in <bpt id=\"p1\">&lt;xref href=\"System.Reflection.Emit\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, such as emitting debug symbols, is allowed.","needQuote":true,"needEscape":true,"source":"Gets or sets a value that indicates whether use of certain features in <xref href=\"System.Reflection.Emit\"></xref>, such as emitting debug symbols, is allowed."},{"pos":[7579,8272],"content":"> [!NOTE] >  Starting with the [!INCLUDE[net_v20sp1_long](~/add/includes/net-v20sp1-long-md.md)], emitting code no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. Some features of reflection emit, such as emitting debug symbols, still require the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](~/add/includes/ajax-current-ext-md.md).)   >    >  To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/add/includes/ajax-current-ext-md.md)] or later.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"<ph id=\"ph1\">&gt; [!NOTE]</ph> &gt;  Starting with the <ph id=\"ph2\">[!INCLUDE[net_v20sp1_long](~/add/includes/net-v20sp1-long-md.md)]</ph>, emitting code no longer requires &lt;xref:System.Security.Permissions.ReflectionPermission&gt; with the &lt;xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName&gt; flag.","pos":[0,286],"source":"> [!NOTE] >  Starting with the [!INCLUDE[net_v20sp1_long](~/add/includes/net-v20sp1-long-md.md)], emitting code no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag."},{"content":"Some features of reflection emit, such as emitting debug symbols, still require the &lt;xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName&gt; flag.","pos":[287,461],"source":" Some features of reflection emit, such as emitting debug symbols, still require the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag."},{"content":"(See <bpt id=\"p1\">[</bpt>Security Issues in Reflection Emit<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.)   &gt;    &gt;  To use this functionality, your application should target the <ph id=\"ph1\">[!INCLUDE[net_v35_long](~/add/includes/ajax-current-ext-md.md)]</ph> or later.","pos":[462,690],"source":" (See [Security Issues in Reflection Emit](~/add/includes/ajax-current-ext-md.md).)   >    >  To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/add/includes/ajax-current-ext-md.md)] or later."}]},{"pos":[8396,8575],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if use of the affected features is allowed; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if use of the affected features is allowed; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[9196,9490],"content":"Gets or sets a value that indicates whether restricted invocation of non-public members is allowed. Restricted invocation means that the grant set of the assembly that contains the non-public member that is being invoked must be equal to, or a subset of, the grant set of the invoking assembly.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value that indicates whether restricted invocation of non-public members is allowed. Restricted invocation means that the grant set of the assembly that contains the non-public member that is being invoked must be equal to, or a subset of, the grant set of the invoking assembly.","pos":[0,294],"nodes":[{"content":"Gets or sets a value that indicates whether restricted invocation of non-public members is allowed.","pos":[0,99]},{"content":"Restricted invocation means that the grant set of the assembly that contains the non-public member that is being invoked must be equal to, or a subset of, the grant set of the invoking assembly.","pos":[100,294]}]}]},{"pos":[9890,10084],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if restricted invocation of non-public members is allowed; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if restricted invocation of non-public members is allowed; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[10678,10776],"content":"Gets or sets a value that indicates whether reflection on members that are not visible is allowed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value that indicates whether reflection on members that are not visible is allowed.","pos":[0,98]}]},{"pos":[10788,10953],"content":"This property is now obsolete. Reflecting on the metadata of members that are not visible no longer requires <xref:System.Security.Permissions.ReflectionPermission>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This property is now obsolete. Reflecting on the metadata of members that are not visible no longer requires <xref:System.Security.Permissions.ReflectionPermission>.","pos":[0,165],"nodes":[{"content":"This property is now obsolete.","pos":[0,30]},{"content":"Reflecting on the metadata of members that are not visible no longer requires &lt;xref:System.Security.Permissions.ReflectionPermission&gt;.","pos":[31,165],"source":" Reflecting on the metadata of members that are not visible no longer requires <xref:System.Security.Permissions.ReflectionPermission>."}]}]},{"pos":[11077,11270],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if reflection on members that are not visible is allowed; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if reflection on members that are not visible is allowed; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Permissions.ReflectionPermissionAttribute\n  id: ReflectionPermissionAttribute\n  children:\n  - System.Security.Permissions.ReflectionPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)\n  - System.Security.Permissions.ReflectionPermissionAttribute.CreatePermission\n  - System.Security.Permissions.ReflectionPermissionAttribute.Flags\n  - System.Security.Permissions.ReflectionPermissionAttribute.MemberAccess\n  - System.Security.Permissions.ReflectionPermissionAttribute.ReflectionEmit\n  - System.Security.Permissions.ReflectionPermissionAttribute.RestrictedMemberAccess\n  - System.Security.Permissions.ReflectionPermissionAttribute.TypeInformation\n  langs:\n  - csharp\n  name: ReflectionPermissionAttribute\n  nameWithType: ReflectionPermissionAttribute\n  fullName: System.Security.Permissions.ReflectionPermissionAttribute\n  type: Class\n  summary: Allows security actions for <xref href=\"System.Security.Permissions.ReflectionPermission\"></xref> to be applied to code using declarative security.\n  remarks: \"The scope of the declaration that is allowed depends on the <xref:System.Security.Permissions.SecurityAction> that is used.  \\n  \\n The security information declared by a security attribute is stored in the metadata of the attribute target and is accessed by the system at run time. Security attributes are used only for declarative security. For imperative security, use the corresponding permission class.\"\n  syntax:\n    content: >-\n      [System.AttributeUsage(System.AttributeTargets.Assembly | System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Constructor | System.AttributeTargets.Method, AllowMultiple=true, Inherited=false)]\n\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class ReflectionPermissionAttribute : System.Security.Permissions.CodeAccessSecurityAttribute\n  inheritance:\n  - System.Attribute\n  - System.Security.Permissions.SecurityAttribute\n  - System.Security.Permissions.CodeAccessSecurityAttribute\n  implements: []\n  inheritedMembers:\n  - System.Security.Permissions.SecurityAttribute.Action\n  - System.Security.Permissions.SecurityAttribute.Unrestricted\n  platform:\n  - net462\n- uid: System.Security.Permissions.ReflectionPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)\n  id: '#ctor(System.Security.Permissions.SecurityAction)'\n  parent: System.Security.Permissions.ReflectionPermissionAttribute\n  langs:\n  - csharp\n  name: ReflectionPermissionAttribute(SecurityAction)\n  nameWithType: ReflectionPermissionAttribute.ReflectionPermissionAttribute(SecurityAction)\n  fullName: System.Security.Permissions.ReflectionPermissionAttribute.ReflectionPermissionAttribute(SecurityAction)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Initializes a new instance of the <xref href=\"System.Security.Permissions.ReflectionPermissionAttribute\"></xref> class with the specified <xref href=\"System.Security.Permissions.SecurityAction\"></xref>.\n  syntax:\n    content: public ReflectionPermissionAttribute (System.Security.Permissions.SecurityAction action);\n    parameters:\n    - id: action\n      type: System.Security.Permissions.SecurityAction\n      description: One of the <xref href=\"System.Security.Permissions.SecurityAction\"></xref> values.\n  overload: System.Security.Permissions.ReflectionPermissionAttribute.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Permissions.ReflectionPermissionAttribute.CreatePermission\n  id: CreatePermission\n  parent: System.Security.Permissions.ReflectionPermissionAttribute\n  langs:\n  - csharp\n  name: CreatePermission()\n  nameWithType: ReflectionPermissionAttribute.CreatePermission()\n  fullName: System.Security.Permissions.ReflectionPermissionAttribute.CreatePermission()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Creates and returns a new <xref href=\"System.Security.Permissions.ReflectionPermission\"></xref>.\n  remarks: \"This method should only be called by the security system, never by application code.  \\n  \\n At compile time, attributes convert security declarations to a serialized form in metadata. Declarative security data in metadata is created from the permission that this method returns that corresponds to this attribute.\"\n  syntax:\n    content: public override System.Security.IPermission CreatePermission ();\n    parameters: []\n    return:\n      type: System.Security.IPermission\n      description: A <xref href=\"System.Security.Permissions.ReflectionPermission\"></xref> that corresponds to this attribute.\n  overload: System.Security.Permissions.ReflectionPermissionAttribute.CreatePermission*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Permissions.ReflectionPermissionAttribute.Flags\n  id: Flags\n  parent: System.Security.Permissions.ReflectionPermissionAttribute\n  langs:\n  - csharp\n  name: Flags\n  nameWithType: ReflectionPermissionAttribute.Flags\n  fullName: System.Security.Permissions.ReflectionPermissionAttribute.Flags\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Gets or sets the current allowed uses of reflection.\n  syntax:\n    content: public System.Security.Permissions.ReflectionPermissionFlag Flags { get; set; }\n    return:\n      type: System.Security.Permissions.ReflectionPermissionFlag\n      description: One or more of the <xref href=\"System.Security.Permissions.ReflectionPermissionFlag\"></xref> values combined using a bitwise OR.\n  overload: System.Security.Permissions.ReflectionPermissionAttribute.Flags*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: An attempt is made to set this property to an invalid value. See <xref href=\"System.Security.Permissions.ReflectionPermissionFlag\"></xref> for the valid values.\n  platform:\n  - net462\n- uid: System.Security.Permissions.ReflectionPermissionAttribute.MemberAccess\n  id: MemberAccess\n  parent: System.Security.Permissions.ReflectionPermissionAttribute\n  langs:\n  - csharp\n  name: MemberAccess\n  nameWithType: ReflectionPermissionAttribute.MemberAccess\n  fullName: System.Security.Permissions.ReflectionPermissionAttribute.MemberAccess\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Gets or sets a value that indicates whether invocation of operations on non-public members is allowed.\n  syntax:\n    content: public bool MemberAccess { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if invocation of operations on non-public members is allowed; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Permissions.ReflectionPermissionAttribute.MemberAccess*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Permissions.ReflectionPermissionAttribute.ReflectionEmit\n  id: ReflectionEmit\n  parent: System.Security.Permissions.ReflectionPermissionAttribute\n  langs:\n  - csharp\n  name: ReflectionEmit\n  nameWithType: ReflectionPermissionAttribute.ReflectionEmit\n  fullName: System.Security.Permissions.ReflectionPermissionAttribute.ReflectionEmit\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Gets or sets a value that indicates whether use of certain features in <xref href=\"System.Reflection.Emit\"></xref>, such as emitting debug symbols, is allowed.\n  remarks: \"> [!NOTE]\\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/add/includes/net-v20sp1-long-md.md)], emitting code no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. Some features of reflection emit, such as emitting debug symbols, still require the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](~/add/includes/ajax-current-ext-md.md).)  \\n>   \\n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/add/includes/ajax-current-ext-md.md)] or later.\"\n  syntax:\n    content: public bool ReflectionEmit { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if use of the affected features is allowed; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Permissions.ReflectionPermissionAttribute.ReflectionEmit*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Permissions.ReflectionPermissionAttribute.RestrictedMemberAccess\n  id: RestrictedMemberAccess\n  parent: System.Security.Permissions.ReflectionPermissionAttribute\n  langs:\n  - csharp\n  name: RestrictedMemberAccess\n  nameWithType: ReflectionPermissionAttribute.RestrictedMemberAccess\n  fullName: System.Security.Permissions.ReflectionPermissionAttribute.RestrictedMemberAccess\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Gets or sets a value that indicates whether restricted invocation of non-public members is allowed. Restricted invocation means that the grant set of the assembly that contains the non-public member that is being invoked must be equal to, or a subset of, the grant set of the invoking assembly.\n  remarks: >-\n    > [!NOTE]\n\n    >  This property is introduced in the [!INCLUDE[net_v20sp1_long](~/add/includes/net-v20sp1-long-md.md)]. To use this property, your application should target the [!INCLUDE[net_v35_long](~/add/includes/ajax-current-ext-md.md)] or later.\n  syntax:\n    content: public bool RestrictedMemberAccess { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if restricted invocation of non-public members is allowed; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Permissions.ReflectionPermissionAttribute.RestrictedMemberAccess*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Permissions.ReflectionPermissionAttribute.TypeInformation\n  id: TypeInformation\n  parent: System.Security.Permissions.ReflectionPermissionAttribute\n  langs:\n  - csharp\n  name: TypeInformation\n  nameWithType: ReflectionPermissionAttribute.TypeInformation\n  fullName: System.Security.Permissions.ReflectionPermissionAttribute.TypeInformation\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  summary: Gets or sets a value that indicates whether reflection on members that are not visible is allowed.\n  remarks: This property is now obsolete. Reflecting on the metadata of members that are not visible no longer requires <xref:System.Security.Permissions.ReflectionPermission>.\n  syntax:\n    content: public bool TypeInformation { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if reflection on members that are not visible is allowed; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Permissions.ReflectionPermissionAttribute.TypeInformation*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Security.Permissions.CodeAccessSecurityAttribute\n  isExternal: false\n  name: System.Security.Permissions.CodeAccessSecurityAttribute\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.Security.Permissions.ReflectionPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)\n  parent: System.Security.Permissions.ReflectionPermissionAttribute\n  isExternal: false\n  name: ReflectionPermissionAttribute(SecurityAction)\n  nameWithType: ReflectionPermissionAttribute.ReflectionPermissionAttribute(SecurityAction)\n  fullName: System.Security.Permissions.ReflectionPermissionAttribute.ReflectionPermissionAttribute(SecurityAction)\n- uid: System.Security.Permissions.SecurityAction\n  parent: System.Security.Permissions\n  isExternal: false\n  name: SecurityAction\n  nameWithType: SecurityAction\n  fullName: System.Security.Permissions.SecurityAction\n- uid: System.Security.Permissions.ReflectionPermissionAttribute.CreatePermission\n  parent: System.Security.Permissions.ReflectionPermissionAttribute\n  isExternal: false\n  name: CreatePermission()\n  nameWithType: ReflectionPermissionAttribute.CreatePermission()\n  fullName: System.Security.Permissions.ReflectionPermissionAttribute.CreatePermission()\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n- uid: System.Security.Permissions.ReflectionPermissionAttribute.Flags\n  parent: System.Security.Permissions.ReflectionPermissionAttribute\n  isExternal: false\n  name: Flags\n  nameWithType: ReflectionPermissionAttribute.Flags\n  fullName: System.Security.Permissions.ReflectionPermissionAttribute.Flags\n- uid: System.Security.Permissions.ReflectionPermissionFlag\n  parent: System.Security.Permissions\n  isExternal: false\n  name: ReflectionPermissionFlag\n  nameWithType: ReflectionPermissionFlag\n  fullName: System.Security.Permissions.ReflectionPermissionFlag\n- uid: System.Security.Permissions.ReflectionPermissionAttribute.MemberAccess\n  parent: System.Security.Permissions.ReflectionPermissionAttribute\n  isExternal: false\n  name: MemberAccess\n  nameWithType: ReflectionPermissionAttribute.MemberAccess\n  fullName: System.Security.Permissions.ReflectionPermissionAttribute.MemberAccess\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Permissions.ReflectionPermissionAttribute.ReflectionEmit\n  parent: System.Security.Permissions.ReflectionPermissionAttribute\n  isExternal: false\n  name: ReflectionEmit\n  nameWithType: ReflectionPermissionAttribute.ReflectionEmit\n  fullName: System.Security.Permissions.ReflectionPermissionAttribute.ReflectionEmit\n- uid: System.Security.Permissions.ReflectionPermissionAttribute.RestrictedMemberAccess\n  parent: System.Security.Permissions.ReflectionPermissionAttribute\n  isExternal: false\n  name: RestrictedMemberAccess\n  nameWithType: ReflectionPermissionAttribute.RestrictedMemberAccess\n  fullName: System.Security.Permissions.ReflectionPermissionAttribute.RestrictedMemberAccess\n- uid: System.Security.Permissions.ReflectionPermissionAttribute.TypeInformation\n  parent: System.Security.Permissions.ReflectionPermissionAttribute\n  isExternal: false\n  name: TypeInformation\n  nameWithType: ReflectionPermissionAttribute.TypeInformation\n  fullName: System.Security.Permissions.ReflectionPermissionAttribute.TypeInformation\n- uid: System.Security.Permissions.ReflectionPermissionAttribute.#ctor*\n  parent: System.Security.Permissions.ReflectionPermissionAttribute\n  isExternal: false\n  name: ReflectionPermissionAttribute\n  nameWithType: ReflectionPermissionAttribute.ReflectionPermissionAttribute\n- uid: System.Security.Permissions.ReflectionPermissionAttribute.CreatePermission*\n  parent: System.Security.Permissions.ReflectionPermissionAttribute\n  isExternal: false\n  name: CreatePermission\n  nameWithType: ReflectionPermissionAttribute.CreatePermission\n- uid: System.Security.Permissions.ReflectionPermissionAttribute.Flags*\n  parent: System.Security.Permissions.ReflectionPermissionAttribute\n  isExternal: false\n  name: Flags\n  nameWithType: ReflectionPermissionAttribute.Flags\n- uid: System.Security.Permissions.ReflectionPermissionAttribute.MemberAccess*\n  parent: System.Security.Permissions.ReflectionPermissionAttribute\n  isExternal: false\n  name: MemberAccess\n  nameWithType: ReflectionPermissionAttribute.MemberAccess\n- uid: System.Security.Permissions.ReflectionPermissionAttribute.ReflectionEmit*\n  parent: System.Security.Permissions.ReflectionPermissionAttribute\n  isExternal: false\n  name: ReflectionEmit\n  nameWithType: ReflectionPermissionAttribute.ReflectionEmit\n- uid: System.Security.Permissions.ReflectionPermissionAttribute.RestrictedMemberAccess*\n  parent: System.Security.Permissions.ReflectionPermissionAttribute\n  isExternal: false\n  name: RestrictedMemberAccess\n  nameWithType: ReflectionPermissionAttribute.RestrictedMemberAccess\n- uid: System.Security.Permissions.ReflectionPermissionAttribute.TypeInformation*\n  parent: System.Security.Permissions.ReflectionPermissionAttribute\n  isExternal: false\n  name: TypeInformation\n  nameWithType: ReflectionPermissionAttribute.TypeInformation\n"}