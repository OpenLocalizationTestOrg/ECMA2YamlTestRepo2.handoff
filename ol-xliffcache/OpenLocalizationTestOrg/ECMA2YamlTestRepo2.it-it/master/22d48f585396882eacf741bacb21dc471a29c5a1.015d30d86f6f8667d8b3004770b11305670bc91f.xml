{"nodes":[{"pos":[418,482],"content":"Indicates how to open a file when calling file-access functions.","needQuote":true,"needEscape":true,"nodes":[{"content":"Indicates how to open a file when calling file-access functions.","pos":[0,64]}]},{"pos":[495,1136],"content":"When you call file access-related functions, you can use enumeration members in your code in place of the actual values.       The `OpenAccess` enumeration defines constants used to identify whether a file can be read from (`Read`), written to (`Write`), or both (`ReadWrite`). A file opened for `Read` access cannot be modified, only read from. The following table lists the `OpenAccess` enumeration members.       When performing file I/O operations, the `My.Computer.FileSystem` object provides greater performance and ease of use than legacy file I/O methods. For more information, see <xref:Microsoft.VisualBasic.FileSystem> object.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"When you call file access-related functions, you can use enumeration members in your code in place of the actual values.","pos":[0,120]},{"content":"The <ph id=\"ph1\">`OpenAccess`</ph> enumeration defines constants used to identify whether a file can be read from (<ph id=\"ph2\">`Read`</ph>), written to (<ph id=\"ph3\">`Write`</ph>), or both (<ph id=\"ph4\">`ReadWrite`</ph>).","pos":[127,277],"source":"       The `OpenAccess` enumeration defines constants used to identify whether a file can be read from (`Read`), written to (`Write`), or both (`ReadWrite`)."},{"content":"A file opened for <ph id=\"ph1\">`Read`</ph> access cannot be modified, only read from.","pos":[278,345],"source":" A file opened for `Read` access cannot be modified, only read from."},{"content":"The following table lists the <ph id=\"ph1\">`OpenAccess`</ph> enumeration members.","pos":[346,409],"source":" The following table lists the `OpenAccess` enumeration members."},{"content":"When performing file I/O operations, the <ph id=\"ph1\">`My.Computer.FileSystem`</ph> object provides greater performance and ease of use than legacy file I/O methods.","pos":[416,563],"source":"       When performing file I/O operations, the `My.Computer.FileSystem` object provides greater performance and ease of use than legacy file I/O methods."},{"content":"For more information, see &lt;xref:Microsoft.VisualBasic.FileSystem&gt; object.","pos":[564,637],"source":" For more information, see <xref:Microsoft.VisualBasic.FileSystem> object."}]},{"pos":[1567,1620],"content":"Read and write access permitted. This is the default.","needQuote":true,"needEscape":true,"nodes":[{"content":"Read and write access permitted. This is the default.","pos":[0,53],"nodes":[{"content":"Read and write access permitted.","pos":[0,32]},{"content":"This is the default.","pos":[33,53]}]}]},{"pos":[1728,1740],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[2095,2117],"content":"Read access permitted.","needQuote":true,"needEscape":true,"nodes":[{"content":"Read access permitted.","pos":[0,22]}]},{"pos":[2222,2234],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[2614,2646],"content":"Read and write access permitted.","needQuote":true,"needEscape":true,"nodes":[{"content":"Read and write access permitted.","pos":[0,32]}]},{"pos":[2756,2768],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]},{"pos":[3128,3151],"content":"Write access permitted.","needQuote":true,"needEscape":true,"nodes":[{"content":"Write access permitted.","pos":[0,23]}]},{"pos":[3257,3269],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: Microsoft.VisualBasic.OpenAccess\n  id: OpenAccess\n  children:\n  - Microsoft.VisualBasic.OpenAccess.Default\n  - Microsoft.VisualBasic.OpenAccess.Read\n  - Microsoft.VisualBasic.OpenAccess.ReadWrite\n  - Microsoft.VisualBasic.OpenAccess.Write\n  langs:\n  - csharp\n  name: OpenAccess\n  nameWithType: OpenAccess\n  fullName: Microsoft.VisualBasic.OpenAccess\n  type: Enum\n  summary: Indicates how to open a file when calling file-access functions.\n  remarks: \"When you call file access-related functions, you can use enumeration members in your code in place of the actual values.  \\n  \\n The `OpenAccess` enumeration defines constants used to identify whether a file can be read from (`Read`), written to (`Write`), or both (`ReadWrite`). A file opened for `Read` access cannot be modified, only read from. The following table lists the `OpenAccess` enumeration members.  \\n  \\n When performing file I/O operations, the `My.Computer.FileSystem` object provides greater performance and ease of use than legacy file I/O methods. For more information, see <xref:Microsoft.VisualBasic.FileSystem> object.\"\n  syntax:\n    content: public enum OpenAccess\n  inheritance:\n  - System.Enum\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.OpenAccess.Default\n  id: Default\n  parent: Microsoft.VisualBasic.OpenAccess\n  langs:\n  - csharp\n  name: Default\n  nameWithType: OpenAccess.Default\n  fullName: Microsoft.VisualBasic.OpenAccess.Default\n  type: Field\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Read and write access permitted. This is the default.\n  syntax:\n    content: Default\n    return:\n      type: Microsoft.VisualBasic.OpenAccess\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.OpenAccess.Read\n  id: Read\n  parent: Microsoft.VisualBasic.OpenAccess\n  langs:\n  - csharp\n  name: Read\n  nameWithType: OpenAccess.Read\n  fullName: Microsoft.VisualBasic.OpenAccess.Read\n  type: Field\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Read access permitted.\n  syntax:\n    content: Read\n    return:\n      type: Microsoft.VisualBasic.OpenAccess\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.OpenAccess.ReadWrite\n  id: ReadWrite\n  parent: Microsoft.VisualBasic.OpenAccess\n  langs:\n  - csharp\n  name: ReadWrite\n  nameWithType: OpenAccess.ReadWrite\n  fullName: Microsoft.VisualBasic.OpenAccess.ReadWrite\n  type: Field\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Read and write access permitted.\n  syntax:\n    content: ReadWrite\n    return:\n      type: Microsoft.VisualBasic.OpenAccess\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.VisualBasic.OpenAccess.Write\n  id: Write\n  parent: Microsoft.VisualBasic.OpenAccess\n  langs:\n  - csharp\n  name: Write\n  nameWithType: OpenAccess.Write\n  fullName: Microsoft.VisualBasic.OpenAccess.Write\n  type: Field\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Write access permitted.\n  syntax:\n    content: Write\n    return:\n      type: Microsoft.VisualBasic.OpenAccess\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Enum\n  isExternal: false\n  name: System.Enum\n- uid: Microsoft.VisualBasic.OpenAccess.Default\n  parent: Microsoft.VisualBasic.OpenAccess\n  isExternal: false\n  name: Default\n  nameWithType: OpenAccess.Default\n  fullName: Microsoft.VisualBasic.OpenAccess.Default\n- uid: Microsoft.VisualBasic.OpenAccess\n  parent: Microsoft.VisualBasic\n  isExternal: false\n  name: OpenAccess\n  nameWithType: OpenAccess\n  fullName: Microsoft.VisualBasic.OpenAccess\n- uid: Microsoft.VisualBasic.OpenAccess.Read\n  parent: Microsoft.VisualBasic.OpenAccess\n  isExternal: false\n  name: Read\n  nameWithType: OpenAccess.Read\n  fullName: Microsoft.VisualBasic.OpenAccess.Read\n- uid: Microsoft.VisualBasic.OpenAccess.ReadWrite\n  parent: Microsoft.VisualBasic.OpenAccess\n  isExternal: false\n  name: ReadWrite\n  nameWithType: OpenAccess.ReadWrite\n  fullName: Microsoft.VisualBasic.OpenAccess.ReadWrite\n- uid: Microsoft.VisualBasic.OpenAccess.Write\n  parent: Microsoft.VisualBasic.OpenAccess\n  isExternal: false\n  name: Write\n  nameWithType: OpenAccess.Write\n  fullName: Microsoft.VisualBasic.OpenAccess.Write\n"}