<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3e4f31994a036ce0ec8acfb3e4f81d9245b4039d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Windows.Forms.SendKeys.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">40a833f9139ff803443ffaa4892ff02baf92f09f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">535fd4f7ecb4aeb1266cec4c7e0ca8d932b50e53</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides methods for sending keystrokes to an application.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use SendKeys to send keystrokes and keystroke combinations to the active application.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>This class cannot be instantiated.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>To send a keystroke to a class and immediately continue with the flow of your program, use &lt;xref:System.Windows.Forms.SendKeys.Send%2A&gt;.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>To wait for any processes started by the keystroke, use &lt;xref:System.Windows.Forms.SendKeys.SendWait%2A&gt;.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each key is represented by one or more characters.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>To specify a single keyboard character, use the character itself.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, to represent the letter A, pass in the string "A" to the method.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>To represent more than one character, append each additional character to the one preceding it.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>To represent the letters A, B, and C, specify the parameter as "ABC".</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>The plus sign (+), caret (^), percent sign (%), tilde (~), and parentheses () have special meanings to SendKeys.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>To specify one of these characters, enclose it within braces ({}).</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, to specify the plus sign, use "{+}".</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>To specify brace characters, use "{{}" and "{}}".</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>Brackets ([ ]) have no special meaning to SendKeys, but you must enclose them in braces.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>In other applications, brackets do have a special meaning that might be significant when dynamic data exchange (DDE) occurs.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!CAUTION]</ph> &gt;  If your application is intended for international use with a variety of keyboards, the use of &lt;xref:System.Windows.Forms.SendKeys.Send%2A&gt; could yield unpredictable results and should be avoided.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>To specify characters that aren't displayed when you press a key, such as ENTER or TAB, and keys that represent actions rather than characters, use the codes in the following table.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>|Key|Code|   |---------|----------|   |BACKSPACE|{BACKSPACE}, {BS}, or {BKSP}|   |BREAK|{BREAK}|   |CAPS LOCK|{CAPSLOCK}|   |DEL or DELETE|{DELETE} or {DEL}|   |DOWN ARROW|{DOWN}|   |END|{END}|   |ENTER|{ENTER}or ~|   |ESC|{ESC}|   |HELP|{HELP}|   |HOME|{HOME}|   |INS or INSERT|{INSERT} or {INS}|   |LEFT ARROW|{LEFT}|   |NUM LOCK|{NUMLOCK}|   |PAGE DOWN|{PGDN}|   |PAGE UP|{PGUP}|   |PRINT SCREEN|{PRTSC} (reserved for future use)|   |RIGHT ARROW|{RIGHT}|   |SCROLL LOCK|{SCROLLLOCK}|   |TAB|{TAB}|   |UP ARROW|{UP}|   |F1|{F1}|   |F2|{F2}|   |F3|{F3}|   |F4|{F4}|   |F5|{F5}|   |F6|{F6}|   |F7|{F7}|   |F8|{F8}|   |F9|{F9}|   |F10|{F10}|   |F11|{F11}|   |F12|{F12}|   |F13|{F13}|   |F14|{F14}|   |F15|{F15}|   |F16|{F16}|   |Keypad add|{ADD}|   |Keypad subtract|{SUBTRACT}|   |Keypad multiply|{MULTIPLY}|   |Keypad divide|{DIVIDE}|       To specify keys combined with any combination of the SHIFT, CTRL, and ALT keys, precede the key code with one or more of the following codes.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>|Key|Code|   |---------|----------|   |SHIFT|+|   |CTRL|^|   |ALT|%|       To specify that any combination of SHIFT, CTRL, and ALT should be held down while several other keys are pressed, enclose the code for those keys in parentheses.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, to specify to hold down SHIFT while E and C are pressed, use "+(EC)".</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>To specify to hold down SHIFT while E is pressed, followed by C without SHIFT, use "+EC".</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>To specify repeating keys, use the form {key number}.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must put a space between key and number.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, {LEFT 42} means press the LEFT ARROW key 42 times; {h 10} means press H 10 times.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Because there is no managed method to activate another application, you can either use this class within the current application or use native Windows methods, such as <ph id="ph2">`FindWindow`</ph> and <ph id="ph3">`SetForegroundWindow`</ph>, to force focus on other applications.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The SendKeys class has been updated for the .NET Framework 3.0 to enable its use in applications that run on Windows Vista.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>The enhanced security of Windows Vista (known as User Account Control or UAC) prevents the previous implementation from working as expected.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt;    &gt;  The SendKeys class is susceptible to timing issues, which some developers have had to work around.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>The updated implementation is still susceptible to timing issues, but is slightly faster and may require changes to the workarounds.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>The SendKeys class tries to use the previous implementation first, and if that fails, uses the new implementation.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>As a result, the SendKeys class may behave differently on different operating systems.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>Additionally, when the SendKeys class uses the new implementation, the &lt;xref:System.Windows.Forms.SendKeys.SendWait%2A&gt; method will not wait for messages to be processed when they are sent to another process.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt;    &gt;  If your application relies on consistent behavior regardless of the operating system, you can force the SendKeys class to use the new implementation by adding the following application setting to your app.config file.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt;    &gt;  <ph id="ph1">`&lt;appSettings&gt;`</ph>   &gt;    &gt;  <ph id="ph2">`&lt;add key="SendKeys" value="SendInput"/&gt;`</ph>   &gt;    &gt;  <ph id="ph3">`&lt;/appSettings&gt;`</ph>   &gt;    &gt;  To force the SendKeys class to use the previous implementation, use the value <ph id="ph4">`"JournalHook"`</ph> instead.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Processes all the Windows messages currently in the message queue.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use Flush to wait for the application to process keystrokes and other operating system messages that are in the message queue.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is equivalent to calling &lt;xref:System.Windows.Forms.Application.DoEvents%2A?displayProperty=fullName&gt; until there are no more keys to process.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Because there is no managed method to activate another application, you can either use this class within the current application or use native Windows methods, such as <ph id="ph2">`FindWindow`</ph> and <ph id="ph3">`SetForegroundWindow`</ph>, to force focus on other applications.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Sends keystrokes to the active application.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each key is represented by one or more characters.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>To specify a single keyboard character, use the character itself.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, to represent the letter A, pass in the string "A" to the method.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>To represent more than one character, append each additional character to the one preceding it.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>To represent the letters A, B, and C, specify the parameter as "ABC".</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>The plus sign (+), caret (^), percent sign (%), tilde (~), and parentheses () have special meanings to &lt;xref:System.Windows.Forms.SendKeys&gt;.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>To specify one of these characters, enclose it within braces ({}).</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, to specify the plus sign, use "{+}".</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>To specify brace characters, use "{{}" and "{}}".</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>Brackets ([ ]) have no special meaning to &lt;xref:System.Windows.Forms.SendKeys&gt;, but you must enclose them in braces.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>In other applications, brackets do have a special meaning that might be significant when dynamic data exchange (DDE) occurs.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!CAUTION]</ph> &gt;  If your application is intended for international use with a variety of keyboards, the use of Send could yield unpredictable results and should be avoided.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>To specify characters that aren't displayed when you press a key, such as ENTER or TAB, and keys that represent actions rather than characters, use the codes in the following table.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>|Key|Code|   |---------|----------|   |BACKSPACE|{BACKSPACE}, {BS}, or {BKSP}|   |BREAK|{BREAK}|   |CAPS LOCK|{CAPSLOCK}|   |DEL or DELETE|{DELETE} or {DEL}|   |DOWN ARROW|{DOWN}|   |END|{END}|   |ENTER|{ENTER}or ~|   |ESC|{ESC}|   |HELP|{HELP}|   |HOME|{HOME}|   |INS or INSERT|{INSERT} or {INS}|   |LEFT ARROW|{LEFT}|   |NUM LOCK|{NUMLOCK}|   |PAGE DOWN|{PGDN}|   |PAGE UP|{PGUP}|   |PRINT SCREEN|{PRTSC} (reserved for future use)|   |RIGHT ARROW|{RIGHT}|   |SCROLL LOCK|{SCROLLLOCK}|   |TAB|{TAB}|   |UP ARROW|{UP}|   |F1|{F1}|   |F2|{F2}|   |F3|{F3}|   |F4|{F4}|   |F5|{F5}|   |F6|{F6}|   |F7|{F7}|   |F8|{F8}|   |F9|{F9}|   |F10|{F10}|   |F11|{F11}|   |F12|{F12}|   |F13|{F13}|   |F14|{F14}|   |F15|{F15}|   |F16|{F16}|   |Keypad add|{ADD}|   |Keypad subtract|{SUBTRACT}|   |Keypad multiply|{MULTIPLY}|   |Keypad divide|{DIVIDE}|       To specify keys combined with any combination of the SHIFT, CTRL, and ALT keys, precede the key code with one or more of the following codes.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>|Key|Code|   |---------|----------|   |SHIFT|+|   |CTRL|^|   |ALT|%|       To specify that any combination of SHIFT, CTRL, and ALT should be held down while several other keys are pressed, enclose the code for those keys in parentheses.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, to specify to hold down SHIFT while E and C are pressed, use "+(EC)".</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>To specify to hold down SHIFT while E is pressed, followed by C without SHIFT, use "+EC".</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>To specify repeating keys, use the form {key number}.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must put a space between key and number.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, {LEFT 42} means press the LEFT ARROW key 42 times; {h 10} means press H 10 times.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Because there is no managed method to activate another application, you can either use this class within the current application or use native Windows methods, such as <ph id="ph2">`FindWindow`</ph> and <ph id="ph3">`SetForegroundWindow`</ph>, to force focus on other applications.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The &lt;xref:System.Windows.Forms.SendKeys&gt; class has been updated for the .NET Framework 3.0 to enable its use in applications that run on Windows Vista.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>The enhanced security of Windows Vista (known as User Account Control or UAC) prevents the previous implementation from working as expected.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt;    &gt;  The &lt;xref:System.Windows.Forms.SendKeys&gt; class is susceptible to timing issues, which some developers have had to work around.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>The updated implementation is still susceptible to timing issues, but is slightly faster and may require changes to the workarounds.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Forms.SendKeys&gt; class tries to use the previous implementation first, and if that fails, uses the new implementation.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>As a result, the &lt;xref:System.Windows.Forms.SendKeys&gt; class may behave differently on different operating systems.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>Additionally, when the &lt;xref:System.Windows.Forms.SendKeys&gt; class uses the new implementation, the &lt;xref:System.Windows.Forms.SendKeys.SendWait%2A&gt; method will not wait for messages to be processed when they are sent to another process.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt;    &gt;  If your application relies on consistent behavior regardless of the operating system, you can force the &lt;xref:System.Windows.Forms.SendKeys&gt; class to use the new implementation by adding the following application setting to your app.config file.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt;    &gt;  <ph id="ph1">`&lt;appSettings&gt;`</ph>   &gt;    &gt;  <ph id="ph2">`&lt;add key="SendKeys" value="SendInput"/&gt;`</ph>   &gt;    &gt;  <ph id="ph3">`&lt;/appSettings&gt;`</ph>   &gt;    &gt;  To force the &lt;xref:System.Windows.Forms.SendKeys&gt; class to use the previous implementation, use the value <ph id="ph4">`"JournalHook"`</ph> instead.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The string of keystrokes to send.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>There is not an active application to send keystrokes to.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;keys&lt;/code&gt;</ph> does not represent valid keystrokes</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Sends the given keys to the active application, and then waits for the messages to be processed.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use SendWait to send keystrokes or combinations of keystrokes to the active application and wait for the keystroke messages to be processed.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this method to send keystrokes to an application and wait for any processes that are started by the keystrokes to be completed.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>This can be important if the other application must finish before your application can continue.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Because there is no managed method to activate another application, you can either use this class within the current application or use native Windows methods, such as <ph id="ph2">`FindWindow`</ph> and <ph id="ph3">`SetForegroundWindow`</ph>, to force focus on other applications.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The &lt;xref:System.Windows.Forms.SendKeys&gt; class has been updated for the .NET Framework 3.0 to enable its use in applications that run on Windows Vista.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>The enhanced security of Windows Vista (known as User Account Control or UAC) prevents the previous implementation from working as expected.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt;    &gt;  The &lt;xref:System.Windows.Forms.SendKeys&gt; class is susceptible to timing issues, which some developers have had to work around.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>The updated implementation is still susceptible to timing issues, but is slightly faster and may require changes to the workarounds.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Forms.SendKeys&gt; class tries to use the previous implementation first, and if that fails, uses the new implementation.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>As a result, the &lt;xref:System.Windows.Forms.SendKeys&gt; class may behave differently on different operating systems.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>Additionally, when the &lt;xref:System.Windows.Forms.SendKeys&gt; class uses the new implementation, the SendWait method will not wait for messages to be processed when they are sent to another process.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt;    &gt;  If your application relies on consistent behavior regardless of the operating system, you can force the &lt;xref:System.Windows.Forms.SendKeys&gt; class to use the new implementation by adding the following application setting to your app.config file.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt;    &gt;  <ph id="ph1">`&lt;appSettings&gt;`</ph>   &gt;    &gt;  <ph id="ph2">`&lt;add key="SendKeys" value="SendInput"/&gt;`</ph>   &gt;    &gt;  <ph id="ph3">`&lt;/appSettings&gt;`</ph>   &gt;    &gt;  To force the &lt;xref:System.Windows.Forms.SendKeys&gt; class to use the previous implementation, use the value <ph id="ph4">`"JournalHook"`</ph> instead.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The string of keystrokes to send.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>