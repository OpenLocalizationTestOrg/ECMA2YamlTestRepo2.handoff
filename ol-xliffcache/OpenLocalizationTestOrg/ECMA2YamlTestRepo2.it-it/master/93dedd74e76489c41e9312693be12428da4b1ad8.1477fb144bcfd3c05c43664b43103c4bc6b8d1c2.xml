{"nodes":[{"pos":[412,885],"content":"The ManagementCommit attribute marks a method that is called when it is necessary to update a set of read-write properties in one, atomic operation.       Note: the WMI .NET libraries are now considered in final state, and no further development, enhancements, or updates will be available for non-security related issues affecting these libraries. The [MI APIs](https://msdn.microsoft.com/en-us/library/jj152383%28v=vs.80%29.aspx) should be used for all new development.","needQuote":false,"needEscape":true,"nodes":[{"content":"The ManagementCommit attribute marks a method that is called when it is necessary to update a set of read-write properties in one, atomic operation.","pos":[0,148]},{"content":"Note: the WMI .NET libraries are now considered in final state, and no further development, enhancements, or updates will be available for non-security related issues affecting these libraries.","pos":[155,348]},{"content":"The <bpt id=\"p1\">[</bpt>MI APIs<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/jj152383%28v=vs.80%29.aspx)</ept> should be used for all new development.","pos":[349,471],"source":" The [MI APIs](https://msdn.microsoft.com/en-us/library/jj152383%28v=vs.80%29.aspx) should be used for all new development."}]},{"pos":[899,1823],"content":"The read-write properties of a class are marked with the <xref:System.Management.Instrumentation.ManagementConfigurationAttribute> attribute. In addition, each read-write property can be one of two types: <xref:System.Management.Instrumentation.ManagementConfigurationType> or <xref:System.Management.Instrumentation.ManagementConfigurationType>. If a class has read-write properties that are configured as OnCommit, the class should have a method that is marked with the ManagementCommit attribute. The associated method will be called when all OnCommit properties have been set.       The marked method is not thread safe.       If no method is marked with the ManagementCommit attribute, the class manages the configuration updates by itself without any indication that the update has completed.       The method marked with the ManagementCommit attribute does not take any parameters and it has a void return type.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The read-write properties of a class are marked with the <xref:System.Management.Instrumentation.ManagementConfigurationAttribute> attribute. In addition, each read-write property can be one of two types: <xref:System.Management.Instrumentation.ManagementConfigurationType> or <xref:System.Management.Instrumentation.ManagementConfigurationType>. If a class has read-write properties that are configured as OnCommit, the class should have a method that is marked with the ManagementCommit attribute. The associated method will be called when all OnCommit properties have been set.       The marked method is not thread safe.       If no method is marked with the ManagementCommit attribute, the class manages the configuration updates by itself without any indication that the update has completed.       The method marked with the ManagementCommit attribute does not take any parameters and it has a void return type.","pos":[0,918],"nodes":[{"content":"The read-write properties of a class are marked with the &lt;xref:System.Management.Instrumentation.ManagementConfigurationAttribute&gt; attribute.","pos":[0,141],"source":"The read-write properties of a class are marked with the <xref:System.Management.Instrumentation.ManagementConfigurationAttribute> attribute."},{"content":"In addition, each read-write property can be one of two types: &lt;xref:System.Management.Instrumentation.ManagementConfigurationType&gt; or &lt;xref:System.Management.Instrumentation.ManagementConfigurationType&gt;.","pos":[142,346],"source":" In addition, each read-write property can be one of two types: <xref:System.Management.Instrumentation.ManagementConfigurationType> or <xref:System.Management.Instrumentation.ManagementConfigurationType>."},{"content":"If a class has read-write properties that are configured as OnCommit, the class should have a method that is marked with the ManagementCommit attribute.","pos":[347,499]},{"content":"The associated method will be called when all OnCommit properties have been set.","pos":[500,580]},{"content":"The marked method is not thread safe.","pos":[587,624]},{"content":"If no method is marked with the ManagementCommit attribute, the class manages the configuration updates by itself without any indication that the update has completed.","pos":[631,798]},{"content":"The method marked with the ManagementCommit attribute does not take any parameters and it has a void return type.","pos":[805,918]}]}]},{"pos":[3274,3398],"content":"Initializes a new instance of the <xref:System.Management.ManagementCommitAttribute> class. This is the default constructor.","needQuote":true,"needEscape":true,"nodes":[{"content":"Initializes a new instance of the <xref:System.Management.ManagementCommitAttribute> class. This is the default constructor.","pos":[0,124],"nodes":[{"content":"Initializes a new instance of the &lt;xref:System.Management.ManagementCommitAttribute&gt; class.","pos":[0,91],"source":"Initializes a new instance of the <xref:System.Management.ManagementCommitAttribute> class."},{"content":"This is the default constructor.","pos":[92,124]}]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Management.Instrumentation.ManagementCommitAttribute\n  id: ManagementCommitAttribute\n  children:\n  - System.Management.Instrumentation.ManagementCommitAttribute.#ctor\n  langs:\n  - csharp\n  name: ManagementCommitAttribute\n  nameWithType: ManagementCommitAttribute\n  fullName: System.Management.Instrumentation.ManagementCommitAttribute\n  type: Class\n  summary: \"The ManagementCommit attribute marks a method that is called when it is necessary to update a set of read-write properties in one, atomic operation.  \\n  \\n Note: the WMI .NET libraries are now considered in final state, and no further development, enhancements, or updates will be available for non-security related issues affecting these libraries. The [MI APIs](https://msdn.microsoft.com/en-us/library/jj152383%28v=vs.80%29.aspx) should be used for all new development.\"\n  remarks: \"The read-write properties of a class are marked with the <xref:System.Management.Instrumentation.ManagementConfigurationAttribute> attribute. In addition, each read-write property can be one of two types: <xref:System.Management.Instrumentation.ManagementConfigurationType> or <xref:System.Management.Instrumentation.ManagementConfigurationType>. If a class has read-write properties that are configured as OnCommit, the class should have a method that is marked with the ManagementCommit attribute. The associated method will be called when all OnCommit properties have been set.  \\n  \\n The marked method is not thread safe.  \\n  \\n If no method is marked with the ManagementCommit attribute, the class manages the configuration updates by itself without any indication that the update has completed.  \\n  \\n The method marked with the ManagementCommit attribute does not take any parameters and it has a void return type.\"\n  example:\n  - \"[C#]  \\n  \\n```  \\npublic class Process  \\n{  \\n    /// Key attribute marks a key property. Keys are not changeable.  \\n    /// Keys have to be unique information.  \\n    [ManagementKey]  \\n    public int Id   \\n    {  \\n        get {    }  \\n    }  \\n  \\n    /// ManagementConfiguration stands for read/write manageable  \\n    /// property from a read/write field.  \\n    [ManagementConfiguration]  \\n    public string UserDefinedString;  \\n  \\n    [ManagementCommit]  \\n    void SaveOnDevice();  \\n}  \\n```\"\n  syntax:\n    content: >-\n      [System.AttributeUsage(System.AttributeTargets.Method)]\n\n      public sealed class ManagementCommitAttribute : System.Management.Instrumentation.ManagementMemberAttribute\n  inheritance:\n  - System.Attribute\n  - System.Management.Instrumentation.ManagementMemberAttribute\n  implements: []\n  inheritedMembers:\n  - System.Management.Instrumentation.ManagementMemberAttribute.Name\n  platform:\n  - net462\n- uid: System.Management.Instrumentation.ManagementCommitAttribute.#ctor\n  id: '#ctor'\n  parent: System.Management.Instrumentation.ManagementCommitAttribute\n  langs:\n  - csharp\n  name: ManagementCommitAttribute()\n  nameWithType: ManagementCommitAttribute.ManagementCommitAttribute()\n  fullName: System.Management.Instrumentation.ManagementCommitAttribute.ManagementCommitAttribute()\n  type: Constructor\n  assemblies:\n  - System.Core\n  namespace: System.Management.Instrumentation\n  summary: Initializes a new instance of the <xref:System.Management.ManagementCommitAttribute> class. This is the default constructor.\n  syntax:\n    content: public ManagementCommitAttribute ();\n    parameters: []\n  overload: System.Management.Instrumentation.ManagementCommitAttribute.#ctor*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Management.Instrumentation.ManagementMemberAttribute\n  isExternal: false\n  name: System.Management.Instrumentation.ManagementMemberAttribute\n- uid: System.Management.Instrumentation.ManagementCommitAttribute.#ctor\n  parent: System.Management.Instrumentation.ManagementCommitAttribute\n  isExternal: false\n  name: ManagementCommitAttribute()\n  nameWithType: ManagementCommitAttribute.ManagementCommitAttribute()\n  fullName: System.Management.Instrumentation.ManagementCommitAttribute.ManagementCommitAttribute()\n- uid: System.Management.Instrumentation.ManagementCommitAttribute.#ctor*\n  parent: System.Management.Instrumentation.ManagementCommitAttribute\n  isExternal: false\n  name: ManagementCommitAttribute\n  nameWithType: ManagementCommitAttribute.ManagementCommitAttribute\n"}