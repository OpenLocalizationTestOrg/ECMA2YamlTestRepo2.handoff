{"nodes":[{"pos":[562,624],"content":"Represents the security settings of the wsHttpBinding binding.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents the security settings of the wsHttpBinding binding.","pos":[0,62]}]},{"pos":[1825,1937],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.ServiceModel.NonDualMessageSecurityOverHttp\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.ServiceModel.NonDualMessageSecurityOverHttp\"></xref> class."},{"pos":[2619,2703],"content":"Gets or sets a value that indicates whether a security context token is established.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value that indicates whether a security context token is established.","pos":[0,84]}]},{"pos":[2715,2946],"content":"This property controls whether a security context token is established through a WS-SecureConversation exchange between the client and the service. Setting it to `true` requires that the remote party supports WS-SecureConversation.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This property controls whether a security context token is established through a WS-SecureConversation exchange between the client and the service.","pos":[0,147]},{"content":"Setting it to <ph id=\"ph1\">`true`</ph> requires that the remote party supports WS-SecureConversation.","pos":[148,231],"source":" Setting it to `true` requires that the remote party supports WS-SecureConversation."}]},{"pos":[3356,3535],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if a security context token is established; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if a security context token is established; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[4316,4328],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ServiceModel.NonDualMessageSecurityOverHttp\n  id: NonDualMessageSecurityOverHttp\n  children:\n  - System.ServiceModel.NonDualMessageSecurityOverHttp.#ctor\n  - System.ServiceModel.NonDualMessageSecurityOverHttp.EstablishSecurityContext\n  - System.ServiceModel.NonDualMessageSecurityOverHttp.IsSecureConversationEnabled\n  langs:\n  - csharp\n  name: NonDualMessageSecurityOverHttp\n  nameWithType: NonDualMessageSecurityOverHttp\n  fullName: System.ServiceModel.NonDualMessageSecurityOverHttp\n  type: Class\n  summary: Represents the security settings of the wsHttpBinding binding.\n  syntax:\n    content: 'public sealed class NonDualMessageSecurityOverHttp : System.ServiceModel.MessageSecurityOverHttp'\n  inheritance:\n  - System.Object\n  - System.ServiceModel.MessageSecurityOverHttp\n  implements: []\n  inheritedMembers:\n  - System.ServiceModel.MessageSecurityOverHttp.AlgorithmSuite\n  - System.ServiceModel.MessageSecurityOverHttp.ClientCredentialType\n  - System.ServiceModel.MessageSecurityOverHttp.NegotiateServiceCredential\n  - System.ServiceModel.MessageSecurityOverHttp.ShouldSerializeAlgorithmSuite\n  - System.ServiceModel.MessageSecurityOverHttp.ShouldSerializeClientCredentialType\n  - System.ServiceModel.MessageSecurityOverHttp.ShouldSerializeNegotiateServiceCredential\n  platform:\n  - net462\n- uid: System.ServiceModel.NonDualMessageSecurityOverHttp.#ctor\n  id: '#ctor'\n  parent: System.ServiceModel.NonDualMessageSecurityOverHttp\n  langs:\n  - csharp\n  name: NonDualMessageSecurityOverHttp()\n  nameWithType: NonDualMessageSecurityOverHttp.NonDualMessageSecurityOverHttp()\n  fullName: System.ServiceModel.NonDualMessageSecurityOverHttp.NonDualMessageSecurityOverHttp()\n  type: Constructor\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel\n  summary: Initializes a new instance of the <xref href=\"System.ServiceModel.NonDualMessageSecurityOverHttp\"></xref> class.\n  syntax:\n    content: public NonDualMessageSecurityOverHttp ();\n    parameters: []\n  overload: System.ServiceModel.NonDualMessageSecurityOverHttp.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.NonDualMessageSecurityOverHttp.EstablishSecurityContext\n  id: EstablishSecurityContext\n  parent: System.ServiceModel.NonDualMessageSecurityOverHttp\n  langs:\n  - csharp\n  name: EstablishSecurityContext\n  nameWithType: NonDualMessageSecurityOverHttp.EstablishSecurityContext\n  fullName: System.ServiceModel.NonDualMessageSecurityOverHttp.EstablishSecurityContext\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel\n  summary: Gets or sets a value that indicates whether a security context token is established.\n  remarks: This property controls whether a security context token is established through a WS-SecureConversation exchange between the client and the service. Setting it to `true` requires that the remote party supports WS-SecureConversation.\n  example:\n  - \"The following code shows how to set this property.  \\n  \\n [!code-cs[S_UEMessageSecurityOverTCP#8](~/add/codesnippet/csharp/p-system.servicemodel.no_1.cs)]\\n [!code-vb[S_UEMessageSecurityOverTCP#8](~/add/codesnippet/visualbasic/p-system.servicemodel.no_1.vb)]\"\n  syntax:\n    content: public bool EstablishSecurityContext { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if a security context token is established; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ServiceModel.NonDualMessageSecurityOverHttp.EstablishSecurityContext*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.NonDualMessageSecurityOverHttp.IsSecureConversationEnabled\n  id: IsSecureConversationEnabled\n  parent: System.ServiceModel.NonDualMessageSecurityOverHttp\n  langs:\n  - csharp\n  name: IsSecureConversationEnabled()\n  nameWithType: NonDualMessageSecurityOverHttp.IsSecureConversationEnabled()\n  fullName: System.ServiceModel.NonDualMessageSecurityOverHttp.IsSecureConversationEnabled()\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel\n  syntax:\n    content: protected override bool IsSecureConversationEnabled ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: To be added.\n  overload: System.ServiceModel.NonDualMessageSecurityOverHttp.IsSecureConversationEnabled*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.ServiceModel.MessageSecurityOverHttp\n  isExternal: false\n  name: System.ServiceModel.MessageSecurityOverHttp\n- uid: System.ServiceModel.NonDualMessageSecurityOverHttp.#ctor\n  parent: System.ServiceModel.NonDualMessageSecurityOverHttp\n  isExternal: false\n  name: NonDualMessageSecurityOverHttp()\n  nameWithType: NonDualMessageSecurityOverHttp.NonDualMessageSecurityOverHttp()\n  fullName: System.ServiceModel.NonDualMessageSecurityOverHttp.NonDualMessageSecurityOverHttp()\n- uid: System.ServiceModel.NonDualMessageSecurityOverHttp.EstablishSecurityContext\n  parent: System.ServiceModel.NonDualMessageSecurityOverHttp\n  isExternal: false\n  name: EstablishSecurityContext\n  nameWithType: NonDualMessageSecurityOverHttp.EstablishSecurityContext\n  fullName: System.ServiceModel.NonDualMessageSecurityOverHttp.EstablishSecurityContext\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.ServiceModel.NonDualMessageSecurityOverHttp.IsSecureConversationEnabled\n  parent: System.ServiceModel.NonDualMessageSecurityOverHttp\n  isExternal: false\n  name: IsSecureConversationEnabled()\n  nameWithType: NonDualMessageSecurityOverHttp.IsSecureConversationEnabled()\n  fullName: System.ServiceModel.NonDualMessageSecurityOverHttp.IsSecureConversationEnabled()\n- uid: System.ServiceModel.NonDualMessageSecurityOverHttp.#ctor*\n  parent: System.ServiceModel.NonDualMessageSecurityOverHttp\n  isExternal: false\n  name: NonDualMessageSecurityOverHttp\n  nameWithType: NonDualMessageSecurityOverHttp.NonDualMessageSecurityOverHttp\n- uid: System.ServiceModel.NonDualMessageSecurityOverHttp.EstablishSecurityContext*\n  parent: System.ServiceModel.NonDualMessageSecurityOverHttp\n  isExternal: false\n  name: EstablishSecurityContext\n  nameWithType: NonDualMessageSecurityOverHttp.EstablishSecurityContext\n- uid: System.ServiceModel.NonDualMessageSecurityOverHttp.IsSecureConversationEnabled*\n  parent: System.ServiceModel.NonDualMessageSecurityOverHttp\n  isExternal: false\n  name: IsSecureConversationEnabled\n  nameWithType: NonDualMessageSecurityOverHttp.IsSecureConversationEnabled\n"}