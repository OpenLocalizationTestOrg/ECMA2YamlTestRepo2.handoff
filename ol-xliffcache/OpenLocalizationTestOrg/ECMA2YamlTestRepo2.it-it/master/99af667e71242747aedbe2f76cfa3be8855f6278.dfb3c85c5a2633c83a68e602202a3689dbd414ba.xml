{"nodes":[{"pos":[2521,2614],"content":"Provides a thread-safe list of <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects.","needQuote":true,"needEscape":true,"source":"Provides a thread-safe list of <xref href=\"System.Diagnostics.TraceListener\"></xref> objects."},{"pos":[2627,4333],"content":"The TraceListenerCollection list is used to specify the output listeners for the <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName> and the <xref:System.Diagnostics.Debug.Listeners%2A?displayProperty=fullName> collections. You cannot create an instance of this class.       This list is thread-safe, however the methods used to access the list and the enumerator do not take synchronization locks. Instead, the collection is copied, the copy is modified, and a reference is set to the copy of the collection. Methods like <xref:System.Diagnostics.TraceListenerCollection.Add%2A>, <xref:System.Diagnostics.TraceListenerCollection.Remove%2A>, and <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> modify the elements in the collection.       The TraceListenerCollection class provides the <xref:System.Diagnostics.TraceListenerCollection.Count%2A> property for information about the list. It also provides the following methods: <xref:System.Diagnostics.TraceListenerCollection.Contains%2A>, <xref:System.Diagnostics.TraceListenerCollection.GetEnumerator%2A>, <xref:System.Diagnostics.TraceListenerCollection.IndexOf%2A>.       This class also provides the following methods to modify the list: <xref:System.Diagnostics.TraceListenerCollection.Add%2A>, <xref:System.Diagnostics.TraceListenerCollection.Clear%2A>, <xref:System.Diagnostics.TraceListenerCollection.Insert%2A>, and <xref:System.Diagnostics.TraceListenerCollection.Remove%2A>. The <xref:System.Diagnostics.TraceListenerCollection.CopyTo%2A> method copies a part of the list to an array. The <xref:System.Diagnostics.TraceListenerCollection.RemoveAt%2A> method deletes the list member at a specified index number.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The TraceListenerCollection list is used to specify the output listeners for the <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName> and the <xref:System.Diagnostics.Debug.Listeners%2A?displayProperty=fullName> collections. You cannot create an instance of this class.       This list is thread-safe, however the methods used to access the list and the enumerator do not take synchronization locks. Instead, the collection is copied, the copy is modified, and a reference is set to the copy of the collection. Methods like <xref:System.Diagnostics.TraceListenerCollection.Add%2A>, <xref:System.Diagnostics.TraceListenerCollection.Remove%2A>, and <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> modify the elements in the collection.       The TraceListenerCollection class provides the <xref:System.Diagnostics.TraceListenerCollection.Count%2A> property for information about the list. It also provides the following methods: <xref:System.Diagnostics.TraceListenerCollection.Contains%2A>, <xref:System.Diagnostics.TraceListenerCollection.GetEnumerator%2A>, <xref:System.Diagnostics.TraceListenerCollection.IndexOf%2A>.       This class also provides the following methods to modify the list: <xref:System.Diagnostics.TraceListenerCollection.Add%2A>, <xref:System.Diagnostics.TraceListenerCollection.Clear%2A>, <xref:System.Diagnostics.TraceListenerCollection.Insert%2A>, and <xref:System.Diagnostics.TraceListenerCollection.Remove%2A>. The <xref:System.Diagnostics.TraceListenerCollection.CopyTo%2A> method copies a part of the list to an array. The <xref:System.Diagnostics.TraceListenerCollection.RemoveAt%2A> method deletes the list member at a specified index number.","pos":[0,1700],"nodes":[{"content":"The TraceListenerCollection list is used to specify the output listeners for the &lt;xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName&gt; and the &lt;xref:System.Diagnostics.Debug.Listeners%2A?displayProperty=fullName&gt; collections.","pos":[0,241],"source":"The TraceListenerCollection list is used to specify the output listeners for the <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName> and the <xref:System.Diagnostics.Debug.Listeners%2A?displayProperty=fullName> collections."},{"content":"You cannot create an instance of this class.","pos":[242,286]},{"content":"This list is thread-safe, however the methods used to access the list and the enumerator do not take synchronization locks.","pos":[293,416]},{"content":"Instead, the collection is copied, the copy is modified, and a reference is set to the copy of the collection.","pos":[417,527]},{"content":"Methods like &lt;xref:System.Diagnostics.TraceListenerCollection.Add%2A&gt;, &lt;xref:System.Diagnostics.TraceListenerCollection.Remove%2A&gt;, and &lt;xref:System.Diagnostics.TraceListenerCollection.Clear%2A&gt; modify the elements in the collection.","pos":[528,761],"source":" Methods like <xref:System.Diagnostics.TraceListenerCollection.Add%2A>, <xref:System.Diagnostics.TraceListenerCollection.Remove%2A>, and <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> modify the elements in the collection."},{"content":"The TraceListenerCollection class provides the &lt;xref:System.Diagnostics.TraceListenerCollection.Count%2A&gt; property for information about the list.","pos":[768,914],"source":"       The TraceListenerCollection class provides the <xref:System.Diagnostics.TraceListenerCollection.Count%2A> property for information about the list."},{"content":"It also provides the following methods: &lt;xref:System.Diagnostics.TraceListenerCollection.Contains%2A&gt;, &lt;xref:System.Diagnostics.TraceListenerCollection.GetEnumerator%2A&gt;, &lt;xref:System.Diagnostics.TraceListenerCollection.IndexOf%2A&gt;.","pos":[915,1147],"source":" It also provides the following methods: <xref:System.Diagnostics.TraceListenerCollection.Contains%2A>, <xref:System.Diagnostics.TraceListenerCollection.GetEnumerator%2A>, <xref:System.Diagnostics.TraceListenerCollection.IndexOf%2A>."},{"content":"This class also provides the following methods to modify the list: &lt;xref:System.Diagnostics.TraceListenerCollection.Add%2A&gt;, &lt;xref:System.Diagnostics.TraceListenerCollection.Clear%2A&gt;, &lt;xref:System.Diagnostics.TraceListenerCollection.Insert%2A&gt;, and &lt;xref:System.Diagnostics.TraceListenerCollection.Remove%2A&gt;.","pos":[1154,1464],"source":"       This class also provides the following methods to modify the list: <xref:System.Diagnostics.TraceListenerCollection.Add%2A>, <xref:System.Diagnostics.TraceListenerCollection.Clear%2A>, <xref:System.Diagnostics.TraceListenerCollection.Insert%2A>, and <xref:System.Diagnostics.TraceListenerCollection.Remove%2A>."},{"content":"The &lt;xref:System.Diagnostics.TraceListenerCollection.CopyTo%2A&gt; method copies a part of the list to an array.","pos":[1465,1574],"source":" The <xref:System.Diagnostics.TraceListenerCollection.CopyTo%2A> method copies a part of the list to an array."},{"content":"The &lt;xref:System.Diagnostics.TraceListenerCollection.RemoveAt%2A&gt; method deletes the list member at a specified index number.","pos":[1575,1700],"source":" The <xref:System.Diagnostics.TraceListenerCollection.RemoveAt%2A> method deletes the list member at a specified index number."}]}]},{"pos":[5570,5643],"content":"Adds a <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to the list.","needQuote":true,"needEscape":true,"source":"Adds a <xref href=\"System.Diagnostics.TraceListener\"></xref> to the list."},{"pos":[6447,6522],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to add to the list.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Diagnostics.TraceListener\"></xref> to add to the list."},{"pos":[6579,6631],"content":"The position at which the new listener was inserted.","needQuote":true,"needEscape":true,"nodes":[{"content":"The position at which the new listener was inserted.","pos":[0,52]}]},{"pos":[7215,7306],"content":"Adds an array of <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects to the list.","needQuote":true,"needEscape":true,"source":"Adds an array of <xref href=\"System.Diagnostics.TraceListener\"></xref> objects to the list."},{"pos":[7493,7586],"content":"An array of <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects to add to the list.","needQuote":true,"needEscape":true,"source":"An array of <xref href=\"System.Diagnostics.TraceListener\"></xref> objects to add to the list."},{"pos":[7768,7851],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>value</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[8398,8503],"content":"Adds the contents of another <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceListenerCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to the list.","needQuote":true,"needEscape":true,"source":"Adds the contents of another <xref href=\"System.Diagnostics.TraceListenerCollection\"></xref> to the list."},{"pos":[8706,8815],"content":"Another <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceListenerCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> whose contents are added to the list.","needQuote":true,"needEscape":true,"source":"Another <xref href=\"System.Diagnostics.TraceListenerCollection\"></xref> whose contents are added to the list."},{"pos":[8997,9080],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>value</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[9455,9494],"content":"Clears all the listeners from the list.","needQuote":true,"needEscape":true,"nodes":[{"content":"Clears all the listeners from the list.","pos":[0,39]}]},{"pos":[10134,10190],"content":"Checks whether the list contains the specified listener.","needQuote":true,"needEscape":true,"nodes":[{"content":"Checks whether the list contains the specified listener.","pos":[0,56]}]},{"pos":[10202,10331],"content":"The Contains method can confirm the existence of a <xref:System.Diagnostics.TraceListener> before you perform further operations.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Contains method can confirm the existence of a &lt;xref:System.Diagnostics.TraceListener&gt; before you perform further operations.","pos":[0,129],"source":"The Contains method can confirm the existence of a <xref:System.Diagnostics.TraceListener> before you perform further operations."}]},{"pos":[10520,10596],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to find in the list.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Diagnostics.TraceListener\"></xref> to find in the list."},{"pos":[10655,10822],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the listener is in the list; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the listener is in the list; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[11445,11592],"content":"Copies a section of the current <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceListenerCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> list to the specified array at the specified index.","needQuote":true,"needEscape":true,"source":"Copies a section of the current <xref href=\"System.Diagnostics.TraceListenerCollection\"></xref> list to the specified array at the specified index."},{"pos":[11796,11859],"content":"An array of type <xref:System.Array> to copy the elements into.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of type &lt;xref:System.Array&gt; to copy the elements into.","pos":[0,63],"source":"An array of type <xref:System.Array> to copy the elements into."}]},{"pos":[11920,11979],"content":"The starting index number in the current list to copy from.","needQuote":true,"needEscape":true,"nodes":[{"content":"The starting index number in the current list to copy from.","pos":[0,59]}]},{"pos":[12430,12471],"content":"Gets the number of listeners in the list.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the number of listeners in the list.","pos":[0,41]}]},{"pos":[12577,12613],"content":"The number of listeners in the list.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of listeners in the list.","pos":[0,36]}]},{"pos":[13107,13140],"content":"Gets an enumerator for this list.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets an enumerator for this list.","pos":[0,33]}]},{"pos":[13313,13373],"content":"An enumerator of type <xref:System.Collections.IEnumerator>.","needQuote":true,"needEscape":true,"nodes":[{"content":"An enumerator of type &lt;xref:System.Collections.IEnumerator&gt;.","pos":[0,60],"source":"An enumerator of type <xref:System.Collections.IEnumerator>."}]},{"pos":[13952,13993],"content":"Gets the index of the specified listener.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the index of the specified listener.","pos":[0,41]}]},{"pos":[14180,14256],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to find in the list.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Diagnostics.TraceListener\"></xref> to find in the list."},{"pos":[14313,14386],"content":"The index of the listener, if it can be found in the list; otherwise, -1.","needQuote":true,"needEscape":true,"nodes":[{"content":"The index of the listener, if it can be found in the list; otherwise, -1.","pos":[0,73]}]},{"pos":[14998,15042],"content":"Inserts the listener at the specified index.","needQuote":true,"needEscape":true,"nodes":[{"content":"Inserts the listener at the specified index.","pos":[0,44]}]},{"pos":[15055,15327],"content":"If the index equals the number of items in the list, then the listener is appended to the end of the list.       The index is zero-based. Therefore, if you want to insert the listener into the third position, you must call `myTraceListenerColl.Insert(2, myNewListener)`.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If the index equals the number of items in the list, then the listener is appended to the end of the list.","pos":[0,106]},{"content":"The index is zero-based.","pos":[113,137]},{"content":"Therefore, if you want to insert the listener into the third position, you must call <ph id=\"ph1\">`myTraceListenerColl.Insert(2, myNewListener)`</ph>.","pos":[138,270],"source":" Therefore, if you want to insert the listener into the third position, you must call `myTraceListenerColl.Insert(2, myNewListener)`."}]},{"pos":[15503,15600],"content":"The position in the list to insert the new <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The position in the list to insert the new <xref href=\"System.Diagnostics.TraceListener\"></xref>."},{"pos":[15684,15762],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to insert in the list.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Diagnostics.TraceListener\"></xref> to insert in the list."},{"pos":[15954,16010],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">index</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not a valid index in the list.","needQuote":true,"needEscape":true,"source":"The <code>index</code> is not a valid index in the list."},{"pos":[16105,16191],"content":"<ph id=\"ph1\">&lt;code&gt;listener&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>listener</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[16606,16700],"content":"Gets or sets the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> at the specified index.","needQuote":true,"needEscape":true,"source":"Gets or sets the <xref href=\"System.Diagnostics.TraceListener\"></xref> at the specified index."},{"pos":[16712,17026],"content":"The index is zero-based. Therefore, you must subtract one from the numerical position of a particular <xref:System.Diagnostics.TraceListener> to access that <xref:System.Diagnostics.TraceListener>. For example, to get the third <xref:System.Diagnostics.TraceListener>, you need to specify `myTraceListenerColl[2]`.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The index is zero-based.","pos":[0,24]},{"content":"Therefore, you must subtract one from the numerical position of a particular &lt;xref:System.Diagnostics.TraceListener&gt; to access that &lt;xref:System.Diagnostics.TraceListener&gt;.","pos":[25,197],"source":" Therefore, you must subtract one from the numerical position of a particular <xref:System.Diagnostics.TraceListener> to access that <xref:System.Diagnostics.TraceListener>."},{"content":"For example, to get the third &lt;xref:System.Diagnostics.TraceListener&gt;, you need to specify <ph id=\"ph1\">`myTraceListenerColl[2]`</ph>.","pos":[198,314],"source":" For example, to get the third <xref:System.Diagnostics.TraceListener>, you need to specify `myTraceListenerColl[2]`."}]},{"pos":[17188,17291],"content":"The zero-based index of the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to get from the list.","needQuote":true,"needEscape":true,"source":"The zero-based index of the <xref href=\"System.Diagnostics.TraceListener\"></xref> to get from the list."},{"pos":[17368,17449],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> with the specified index.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Diagnostics.TraceListener\"></xref> with the specified index."},{"pos":[17627,17701],"content":"The value is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The value is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[18121,18226],"content":"Gets the first <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> in the list with the specified name.","needQuote":true,"needEscape":true,"source":"Gets the first <xref href=\"System.Diagnostics.TraceListener\"></xref> in the list with the specified name."},{"pos":[18238,18631],"content":"The <xref:System.Diagnostics.TraceListenerCollection.Item%2A> property is case-sensitive when searching for names. That is, if two listeners exist with the names \"Lname\" and \"lname\", <xref:System.Diagnostics.TraceListenerCollection.Item%2A> property will find only the <xref:System.Diagnostics.TraceListener> with the <xref:System.Diagnostics.TraceListener.Name%2A> that you specify, not both.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <xref:System.Diagnostics.TraceListenerCollection.Item%2A> property is case-sensitive when searching for names. That is, if two listeners exist with the names \"Lname\" and \"lname\", <xref:System.Diagnostics.TraceListenerCollection.Item%2A> property will find only the <xref:System.Diagnostics.TraceListener> with the <xref:System.Diagnostics.TraceListener.Name%2A> that you specify, not both.","pos":[0,393],"nodes":[{"content":"The &lt;xref:System.Diagnostics.TraceListenerCollection.Item%2A&gt; property is case-sensitive when searching for names.","pos":[0,114],"source":"The <xref:System.Diagnostics.TraceListenerCollection.Item%2A> property is case-sensitive when searching for names."},{"content":"That is, if two listeners exist with the names \"Lname\" and \"lname\", &lt;xref:System.Diagnostics.TraceListenerCollection.Item%2A&gt; property will find only the &lt;xref:System.Diagnostics.TraceListener&gt; with the &lt;xref:System.Diagnostics.TraceListener.Name%2A&gt; that you specify, not both.","pos":[115,393],"source":" That is, if two listeners exist with the names \"Lname\" and \"lname\", <xref:System.Diagnostics.TraceListenerCollection.Item%2A> property will find only the <xref:System.Diagnostics.TraceListener> with the <xref:System.Diagnostics.TraceListener.Name%2A> that you specify, not both."}]}]},{"pos":[18798,18889],"content":"The name of the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to get from the list.","needQuote":true,"needEscape":true,"source":"The name of the <xref href=\"System.Diagnostics.TraceListener\"></xref> to get from the list."},{"pos":[18966,19276],"content":"The first <xref href=\"System.Diagnostics.TraceListener\"></xref> in the list with the given <xref:System.Diagnostics.TraceListener.Name*>. This item returns <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if no <xref href=\"System.Diagnostics.TraceListener\"></xref> with the given name can be found.","needQuote":true,"needEscape":true,"nodes":[{"content":"The first <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> in the list with the given &lt;xref:System.Diagnostics.TraceListener.Name*&gt;.","pos":[0,137],"source":"The first <xref href=\"System.Diagnostics.TraceListener\"></xref> in the list with the given <xref:System.Diagnostics.TraceListener.Name*>."},{"content":"This item returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if no <bpt id=\"p2\">&lt;xref href=\"System.Diagnostics.TraceListener\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> with the given name can be found.","pos":[138,310],"source":" This item returns <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if no <xref href=\"System.Diagnostics.TraceListener\"></xref> with the given name can be found."}]},{"pos":[19841,19937],"content":"Removes from the collection the specified <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Removes from the collection the specified <xref href=\"System.Diagnostics.TraceListener\"></xref>."},{"pos":[20124,20204],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to remove from the list.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Diagnostics.TraceListener\"></xref> to remove from the list."},{"pos":[20712,20828],"content":"Removes from the collection the first <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> with the specified name.","needQuote":true,"needEscape":true,"source":"Removes from the collection the first <xref href=\"System.Diagnostics.TraceListener\"></xref> with the specified name."},{"pos":[20840,21060],"content":"The `name` parameter is case-sensitive. That is, if two listeners exist with the names \"Rname\" and \"rname\", the <xref:System.Diagnostics.TraceListenerCollection.Remove%2A> method will find the specific listener you name.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <ph id=\"ph1\">`name`</ph> parameter is case-sensitive.","pos":[0,39],"source":"The `name` parameter is case-sensitive."},{"content":"That is, if two listeners exist with the names \"Rname\" and \"rname\", the &lt;xref:System.Diagnostics.TraceListenerCollection.Remove%2A&gt; method will find the specific listener you name.","pos":[40,220],"source":" That is, if two listeners exist with the names \"Rname\" and \"rname\", the <xref:System.Diagnostics.TraceListenerCollection.Remove%2A> method will find the specific listener you name."}]},{"pos":[21194,21288],"content":"The name of the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to remove from the list.","needQuote":true,"needEscape":true,"source":"The name of the <xref href=\"System.Diagnostics.TraceListener\"></xref> to remove from the list."},{"pos":[21801,21910],"content":"Removes from the collection the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> at the specified index.","needQuote":true,"needEscape":true,"source":"Removes from the collection the <xref href=\"System.Diagnostics.TraceListener\"></xref> at the specified index."},{"pos":[21922,22248],"content":"The index is zero-based. Therefore, you must subtract one from the numerical position of a particular <xref:System.Diagnostics.TraceListener> to delete that <xref:System.Diagnostics.TraceListener>. For example, to remove the third <xref:System.Diagnostics.TraceListener>, you need to specify `myTraceListenerColl.RemoveAt(2)`.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The index is zero-based.","pos":[0,24]},{"content":"Therefore, you must subtract one from the numerical position of a particular &lt;xref:System.Diagnostics.TraceListener&gt; to delete that &lt;xref:System.Diagnostics.TraceListener&gt;.","pos":[25,197],"source":" Therefore, you must subtract one from the numerical position of a particular <xref:System.Diagnostics.TraceListener> to delete that <xref:System.Diagnostics.TraceListener>."},{"content":"For example, to remove the third &lt;xref:System.Diagnostics.TraceListener&gt;, you need to specify <ph id=\"ph1\">`myTraceListenerColl.RemoveAt(2)`</ph>.","pos":[198,326],"source":" For example, to remove the third <xref:System.Diagnostics.TraceListener>, you need to specify `myTraceListenerColl.RemoveAt(2)`."}]},{"pos":[22382,22488],"content":"The zero-based index of the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to remove from the list.","needQuote":true,"needEscape":true,"source":"The zero-based index of the <xref href=\"System.Diagnostics.TraceListener\"></xref> to remove from the list."},{"pos":[22682,22738],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">index</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not a valid index in the list.","needQuote":true,"needEscape":true,"source":"The <code>index</code> is not a valid index in the list."},{"pos":[23374,23558],"content":"Copies a section of the current <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceListenerCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to the specified array of <bpt id=\"p2\">&lt;xref href=\"System.Diagnostics.TraceListener\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> objects.","needQuote":true,"needEscape":true,"source":"Copies a section of the current <xref href=\"System.Diagnostics.TraceListenerCollection\"></xref> to the specified array of <xref href=\"System.Diagnostics.TraceListener\"></xref> objects."},{"pos":[23570,23758],"content":"Use the <xref:System.Diagnostics.TraceListenerCollection.CopyTo%2A> method of the <xref:System.Diagnostics.TraceListenerCollection> class to copy all or part of the collection to an array.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use the &lt;xref:System.Diagnostics.TraceListenerCollection.CopyTo%2A&gt; method of the &lt;xref:System.Diagnostics.TraceListenerCollection&gt; class to copy all or part of the collection to an array.","pos":[0,188],"source":"Use the <xref:System.Diagnostics.TraceListenerCollection.CopyTo%2A> method of the <xref:System.Diagnostics.TraceListenerCollection> class to copy all or part of the collection to an array."}]},{"pos":[23908,24160],"content":"The one-dimensional array of <xref href=\"System.Diagnostics.TraceListener\"></xref> objects that is the destination of the elements copied from the <xref href=\"System.Diagnostics.TraceListenerCollection\"></xref>. The array must have zero-based indexing.","needQuote":true,"needEscape":true,"nodes":[{"content":"The one-dimensional array of <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> objects that is the destination of the elements copied from the <bpt id=\"p2\">&lt;xref href=\"System.Diagnostics.TraceListenerCollection\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,211],"source":"The one-dimensional array of <xref href=\"System.Diagnostics.TraceListener\"></xref> objects that is the destination of the elements copied from the <xref href=\"System.Diagnostics.TraceListenerCollection\"></xref>."},{"content":"The array must have zero-based indexing.","pos":[212,252]}]},{"pos":[24221,24277],"content":"The zero-based index in <ph id=\"ph1\">`array`</ph> at which copying begins.","needQuote":true,"needEscape":true,"source":"The zero-based index in `array` at which copying begins."},{"pos":[24973,25113],"content":"Gets a value indicating whether access to the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceListenerCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is synchronized (thread safe).","needQuote":true,"needEscape":true,"source":"Gets a value indicating whether access to the <xref href=\"System.Diagnostics.TraceListenerCollection\"></xref> is synchronized (thread safe)."},{"pos":[25255,25323],"content":"Always <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Always <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>."},{"pos":[25997,26122],"content":"Gets an object that can be used to synchronize access to the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceListenerCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets an object that can be used to synchronize access to the <xref href=\"System.Diagnostics.TraceListenerCollection\"></xref>."},{"pos":[26259,26342],"content":"The current <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceListenerCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"The current <xref href=\"System.Diagnostics.TraceListenerCollection\"></xref> object."},{"pos":[27007,27100],"content":"Adds a trace listener to the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceListenerCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Adds a trace listener to the <xref href=\"System.Diagnostics.TraceListenerCollection\"></xref>."},{"pos":[27112,27230],"content":"Use the <xref:System.Diagnostics.TraceListenerCollection.Add%2A> method to add a new trace listener to the collection.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use the &lt;xref:System.Diagnostics.TraceListenerCollection.Add%2A&gt; method to add a new trace listener to the collection.","pos":[0,118],"source":"Use the <xref:System.Diagnostics.TraceListenerCollection.Add%2A> method to add a new trace listener to the collection."}]},{"pos":[27361,27450],"content":"The object to add to the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceListenerCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The object to add to the <xref href=\"System.Diagnostics.TraceListenerCollection\"></xref>."},{"pos":[27507,27567],"content":"The position into which the new trace listener was inserted.","needQuote":true,"needEscape":true,"nodes":[{"content":"The position into which the new trace listener was inserted.","pos":[0,60]}]},{"pos":[27762,27957],"content":"<code>value</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>value</code> is not a <xref href=\"System.Diagnostics.TraceListener\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,83],"source":"<code>value</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is not a <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[90,183],"source":"       -or-       <code>value</code> is not a <xref href=\"System.Diagnostics.TraceListener\"></xref>."}]},{"pos":[28535,28649],"content":"Determines whether the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceListenerCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> contains a specific object.","needQuote":true,"needEscape":true,"source":"Determines whether the <xref href=\"System.Diagnostics.TraceListenerCollection\"></xref> contains a specific object."},{"pos":[28661,28904],"content":"Use the <xref:System.Diagnostics.TraceListenerCollection.Contains%2A> method of the <xref:System.Diagnostics.TraceListenerCollection> class to determine whether the collection contains a specific <xref:System.Diagnostics.TraceListener> object.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use the &lt;xref:System.Diagnostics.TraceListenerCollection.Contains%2A&gt; method of the &lt;xref:System.Diagnostics.TraceListenerCollection&gt; class to determine whether the collection contains a specific &lt;xref:System.Diagnostics.TraceListener&gt; object.","pos":[0,243],"source":"Use the <xref:System.Diagnostics.TraceListenerCollection.Contains%2A> method of the <xref:System.Diagnostics.TraceListenerCollection> class to determine whether the collection contains a specific <xref:System.Diagnostics.TraceListener> object."}]},{"pos":[29041,29133],"content":"The object to locate in the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceListenerCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The object to locate in the <xref href=\"System.Diagnostics.TraceListenerCollection\"></xref>."},{"pos":[29192,29436],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the &lt;xref:System.Object&gt; is found in the <bpt id=\"p2\">&lt;xref href=\"System.Diagnostics.TraceListenerCollection\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref:System.Object> is found in the <xref href=\"System.Diagnostics.TraceListenerCollection\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[30115,30228],"content":"Determines the index of a specific object in the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceListenerCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Determines the index of a specific object in the <xref href=\"System.Diagnostics.TraceListenerCollection\"></xref>."},{"pos":[30240,30472],"content":"Use the <xref:System.Diagnostics.TraceListenerCollection.IndexOf%2A> method of the <xref:System.Diagnostics.TraceListenerCollection> class to determine the index of a <xref:System.Diagnostics.TraceListener> object in the collection.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use the &lt;xref:System.Diagnostics.TraceListenerCollection.IndexOf%2A&gt; method of the &lt;xref:System.Diagnostics.TraceListenerCollection&gt; class to determine the index of a &lt;xref:System.Diagnostics.TraceListener&gt; object in the collection.","pos":[0,232],"source":"Use the <xref:System.Diagnostics.TraceListenerCollection.IndexOf%2A> method of the <xref:System.Diagnostics.TraceListenerCollection> class to determine the index of a <xref:System.Diagnostics.TraceListener> object in the collection."}]},{"pos":[30607,30699],"content":"The object to locate in the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceListenerCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The object to locate in the <xref href=\"System.Diagnostics.TraceListenerCollection\"></xref>."},{"pos":[30756,30883],"content":"The index of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> if found in the <bpt id=\"p2\">&lt;xref href=\"System.Diagnostics.TraceListenerCollection\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>; otherwise, -1.","needQuote":true,"needEscape":true,"source":"The index of <code>value</code> if found in the <xref href=\"System.Diagnostics.TraceListenerCollection\"></xref>; otherwise, -1."},{"pos":[31600,31768],"content":"Inserts a <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object at the specified position in the <bpt id=\"p2\">&lt;xref href=\"System.Diagnostics.TraceListenerCollection\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Inserts a <xref href=\"System.Diagnostics.TraceListener\"></xref> object at the specified position in the <xref href=\"System.Diagnostics.TraceListenerCollection\"></xref>."},{"pos":[31780,31997],"content":"Use the <xref:System.Diagnostics.TraceListenerCollection.Insert%2A> method of the <xref:System.Diagnostics.TraceListenerCollection> class to insert a <xref:System.Diagnostics.TraceListener> object into the collection.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use the &lt;xref:System.Diagnostics.TraceListenerCollection.Insert%2A&gt; method of the &lt;xref:System.Diagnostics.TraceListenerCollection&gt; class to insert a &lt;xref:System.Diagnostics.TraceListener&gt; object into the collection.","pos":[0,217],"source":"Use the <xref:System.Diagnostics.TraceListenerCollection.Insert%2A> method of the <xref:System.Diagnostics.TraceListenerCollection> class to insert a <xref:System.Diagnostics.TraceListener> object into the collection."}]},{"pos":[32142,32199],"content":"The zero-based index at which <ph id=\"ph1\">`value`</ph> should be inserted.","needQuote":true,"needEscape":true,"source":"The zero-based index at which `value` should be inserted."},{"pos":[32261,32409],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object to insert into the <bpt id=\"p2\">&lt;xref href=\"System.Diagnostics.TraceListenerCollection\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Diagnostics.TraceListener\"></xref> object to insert into the <xref href=\"System.Diagnostics.TraceListenerCollection\"></xref>."},{"pos":[32606,32695],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is not a <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"<code>value</code> is not a <xref href=\"System.Diagnostics.TraceListener\"></xref> object."},{"pos":[33235,33352],"content":"Gets a value indicating whether the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceListenerCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> has a fixed size.","needQuote":true,"needEscape":true,"source":"Gets a value indicating whether the <xref href=\"System.Diagnostics.TraceListenerCollection\"></xref> has a fixed size."},{"pos":[33485,33555],"content":"Always <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Always <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[34200,34312],"content":"Gets a value indicating whether the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceListenerCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is read-only","needQuote":true,"needEscape":true,"source":"Gets a value indicating whether the <xref href=\"System.Diagnostics.TraceListenerCollection\"></xref> is read-only"},{"pos":[34444,34514],"content":"Always <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Always <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[35177,35342],"content":"Gets or sets the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> at the specified index in the <bpt id=\"p2\">&lt;xref href=\"System.Diagnostics.TraceListenerCollection\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets or sets the <xref href=\"System.Diagnostics.TraceListener\"></xref> at the specified index in the <xref href=\"System.Diagnostics.TraceListenerCollection\"></xref>."},{"pos":[35354,35581],"content":"Use the <xref:System.Diagnostics.TraceListenerCollection.Item%2A> property or the indexer of the <xref:System.Diagnostics.TraceListenerCollection> class to get or set a <xref:System.Diagnostics.TraceListener> in the collection.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use the &lt;xref:System.Diagnostics.TraceListenerCollection.Item%2A&gt; property or the indexer of the &lt;xref:System.Diagnostics.TraceListenerCollection&gt; class to get or set a &lt;xref:System.Diagnostics.TraceListener&gt; in the collection.","pos":[0,227],"source":"Use the <xref:System.Diagnostics.TraceListenerCollection.Item%2A> property or the indexer of the <xref:System.Diagnostics.TraceListenerCollection> class to get or set a <xref:System.Diagnostics.TraceListener> in the collection."}]},{"pos":[35743,35786],"content":"The zero-based index of the <ph id=\"ph1\">`value`</ph> to get.","needQuote":true,"needEscape":true,"source":"The zero-based index of the `value` to get."},{"pos":[35844,35925],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceListener\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> at the specified index.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Diagnostics.TraceListener\"></xref> at the specified index."},{"pos":[36595,36686],"content":"Removes an object from the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceListenerCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Removes an object from the <xref href=\"System.Diagnostics.TraceListenerCollection\"></xref>."},{"pos":[36698,36908],"content":"Use the <xref:System.Diagnostics.TraceListenerCollection.Remove%2A> method of the <xref:System.Diagnostics.TraceListenerCollection> class to remove a <xref:System.Diagnostics.TraceListener> from the collection.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use the &lt;xref:System.Diagnostics.TraceListenerCollection.Remove%2A&gt; method of the &lt;xref:System.Diagnostics.TraceListenerCollection&gt; class to remove a &lt;xref:System.Diagnostics.TraceListener&gt; from the collection.","pos":[0,210],"source":"Use the <xref:System.Diagnostics.TraceListenerCollection.Remove%2A> method of the <xref:System.Diagnostics.TraceListenerCollection> class to remove a <xref:System.Diagnostics.TraceListener> from the collection."}]},{"pos":[37043,37137],"content":"The object to remove from the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.TraceListenerCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The object to remove from the <xref href=\"System.Diagnostics.TraceListenerCollection\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Diagnostics.TraceListenerCollection\n  id: TraceListenerCollection\n  children:\n  - System.Diagnostics.TraceListenerCollection.Add(System.Diagnostics.TraceListener)\n  - System.Diagnostics.TraceListenerCollection.AddRange(System.Diagnostics.TraceListener[])\n  - System.Diagnostics.TraceListenerCollection.AddRange(System.Diagnostics.TraceListenerCollection)\n  - System.Diagnostics.TraceListenerCollection.Clear\n  - System.Diagnostics.TraceListenerCollection.Contains(System.Diagnostics.TraceListener)\n  - System.Diagnostics.TraceListenerCollection.CopyTo(System.Diagnostics.TraceListener[],System.Int32)\n  - System.Diagnostics.TraceListenerCollection.Count\n  - System.Diagnostics.TraceListenerCollection.GetEnumerator\n  - System.Diagnostics.TraceListenerCollection.IndexOf(System.Diagnostics.TraceListener)\n  - System.Diagnostics.TraceListenerCollection.Insert(System.Int32,System.Diagnostics.TraceListener)\n  - System.Diagnostics.TraceListenerCollection.Item(System.Int32)\n  - System.Diagnostics.TraceListenerCollection.Item(System.String)\n  - System.Diagnostics.TraceListenerCollection.Remove(System.Diagnostics.TraceListener)\n  - System.Diagnostics.TraceListenerCollection.Remove(System.String)\n  - System.Diagnostics.TraceListenerCollection.RemoveAt(System.Int32)\n  - System.Diagnostics.TraceListenerCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  - System.Diagnostics.TraceListenerCollection.System#Collections#ICollection#IsSynchronized\n  - System.Diagnostics.TraceListenerCollection.System#Collections#ICollection#SyncRoot\n  - System.Diagnostics.TraceListenerCollection.System#Collections#IList#Add(System.Object)\n  - System.Diagnostics.TraceListenerCollection.System#Collections#IList#Contains(System.Object)\n  - System.Diagnostics.TraceListenerCollection.System#Collections#IList#IndexOf(System.Object)\n  - System.Diagnostics.TraceListenerCollection.System#Collections#IList#Insert(System.Int32,System.Object)\n  - System.Diagnostics.TraceListenerCollection.System#Collections#IList#IsFixedSize\n  - System.Diagnostics.TraceListenerCollection.System#Collections#IList#IsReadOnly\n  - System.Diagnostics.TraceListenerCollection.System#Collections#IList#Item(System.Int32)\n  - System.Diagnostics.TraceListenerCollection.System#Collections#IList#Remove(System.Object)\n  langs:\n  - csharp\n  name: TraceListenerCollection\n  nameWithType: TraceListenerCollection\n  fullName: System.Diagnostics.TraceListenerCollection\n  type: Class\n  summary: Provides a thread-safe list of <xref href=\"System.Diagnostics.TraceListener\"></xref> objects.\n  remarks: \"The TraceListenerCollection list is used to specify the output listeners for the <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName> and the <xref:System.Diagnostics.Debug.Listeners%2A?displayProperty=fullName> collections. You cannot create an instance of this class.  \\n  \\n This list is thread-safe, however the methods used to access the list and the enumerator do not take synchronization locks. Instead, the collection is copied, the copy is modified, and a reference is set to the copy of the collection. Methods like <xref:System.Diagnostics.TraceListenerCollection.Add%2A>, <xref:System.Diagnostics.TraceListenerCollection.Remove%2A>, and <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> modify the elements in the collection.  \\n  \\n The TraceListenerCollection class provides the <xref:System.Diagnostics.TraceListenerCollection.Count%2A> property for information about the list. It also provides the following methods: <xref:System.Diagnostics.TraceListenerCollection.Contains%2A>, <xref:System.Diagnostics.TraceListenerCollection.GetEnumerator%2A>, <xref:System.Diagnostics.TraceListenerCollection.IndexOf%2A>.  \\n  \\n This class also provides the following methods to modify the list: <xref:System.Diagnostics.TraceListenerCollection.Add%2A>, <xref:System.Diagnostics.TraceListenerCollection.Clear%2A>, <xref:System.Diagnostics.TraceListenerCollection.Insert%2A>, and <xref:System.Diagnostics.TraceListenerCollection.Remove%2A>. The <xref:System.Diagnostics.TraceListenerCollection.CopyTo%2A> method copies a part of the list to an array. The <xref:System.Diagnostics.TraceListenerCollection.RemoveAt%2A> method deletes the list member at a specified index number.\"\n  example:\n  - \"The following example creates a <xref:System.Diagnostics.TextWriterTraceListener> that writes to the console screen. The code then adds the new listener to the <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName>.  \\n  \\n [!code-cs[Classic Trace.Listeners Example#1](~/add/codesnippet/csharp/t-system.diagnostics.tra_1_1.cs)]\\n [!code-vb[Classic Trace.Listeners Example#1](~/add/codesnippet/visualbasic/t-system.diagnostics.tra_1_1.vb)]\\n [!code-cpp[Classic Trace.Listeners Example#1](~/add/codesnippet/cpp/t-system.diagnostics.tra_1_1.cpp)]\"\n  syntax:\n    content: 'public class TraceListenerCollection : System.Collections.IList'\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.IList\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceListenerCollection.Add(System.Diagnostics.TraceListener)\n  id: Add(System.Diagnostics.TraceListener)\n  parent: System.Diagnostics.TraceListenerCollection\n  langs:\n  - csharp\n  name: Add(TraceListener)\n  nameWithType: TraceListenerCollection.Add(TraceListener)\n  fullName: System.Diagnostics.TraceListenerCollection.Add(TraceListener)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Adds a <xref href=\"System.Diagnostics.TraceListener\"></xref> to the list.\n  remarks: ''\n  example:\n  - \"The following example creates a <xref:System.Diagnostics.TextWriterTraceListener> that outputs to the console screen. The code then adds the new listener to the <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName>.  \\n  \\n [!code-cpp[Classic TraceListenerCollection.Add Example#1](~/add/codesnippet/cpp/06848b43-b480-461b-8d6e-_1.cpp)]\\n [!code-vb[Classic TraceListenerCollection.Add Example#1](~/add/codesnippet/visualbasic/06848b43-b480-461b-8d6e-_1.vb)]\\n [!code-cs[Classic TraceListenerCollection.Add Example#1](~/add/codesnippet/csharp/06848b43-b480-461b-8d6e-_1.cs)]\"\n  syntax:\n    content: public int Add (System.Diagnostics.TraceListener listener);\n    parameters:\n    - id: listener\n      type: System.Diagnostics.TraceListener\n      description: A <xref href=\"System.Diagnostics.TraceListener\"></xref> to add to the list.\n    return:\n      type: System.Int32\n      description: The position at which the new listener was inserted.\n  overload: System.Diagnostics.TraceListenerCollection.Add*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceListenerCollection.AddRange(System.Diagnostics.TraceListener[])\n  id: AddRange(System.Diagnostics.TraceListener[])\n  parent: System.Diagnostics.TraceListenerCollection\n  langs:\n  - csharp\n  name: AddRange(TraceListener[])\n  nameWithType: TraceListenerCollection.AddRange(TraceListener[])\n  fullName: System.Diagnostics.TraceListenerCollection.AddRange(TraceListener[])\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Adds an array of <xref href=\"System.Diagnostics.TraceListener\"></xref> objects to the list.\n  syntax:\n    content: public void AddRange (System.Diagnostics.TraceListener[] value);\n    parameters:\n    - id: value\n      type: System.Diagnostics.TraceListener[]\n      description: An array of <xref href=\"System.Diagnostics.TraceListener\"></xref> objects to add to the list.\n  overload: System.Diagnostics.TraceListenerCollection.AddRange*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>value</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceListenerCollection.AddRange(System.Diagnostics.TraceListenerCollection)\n  id: AddRange(System.Diagnostics.TraceListenerCollection)\n  parent: System.Diagnostics.TraceListenerCollection\n  langs:\n  - csharp\n  name: AddRange(TraceListenerCollection)\n  nameWithType: TraceListenerCollection.AddRange(TraceListenerCollection)\n  fullName: System.Diagnostics.TraceListenerCollection.AddRange(TraceListenerCollection)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Adds the contents of another <xref href=\"System.Diagnostics.TraceListenerCollection\"></xref> to the list.\n  syntax:\n    content: public void AddRange (System.Diagnostics.TraceListenerCollection value);\n    parameters:\n    - id: value\n      type: System.Diagnostics.TraceListenerCollection\n      description: Another <xref href=\"System.Diagnostics.TraceListenerCollection\"></xref> whose contents are added to the list.\n  overload: System.Diagnostics.TraceListenerCollection.AddRange*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>value</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceListenerCollection.Clear\n  id: Clear\n  parent: System.Diagnostics.TraceListenerCollection\n  langs:\n  - csharp\n  name: Clear()\n  nameWithType: TraceListenerCollection.Clear()\n  fullName: System.Diagnostics.TraceListenerCollection.Clear()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Clears all the listeners from the list.\n  syntax:\n    content: public void Clear ();\n    parameters: []\n  overload: System.Diagnostics.TraceListenerCollection.Clear*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceListenerCollection.Contains(System.Diagnostics.TraceListener)\n  id: Contains(System.Diagnostics.TraceListener)\n  parent: System.Diagnostics.TraceListenerCollection\n  langs:\n  - csharp\n  name: Contains(TraceListener)\n  nameWithType: TraceListenerCollection.Contains(TraceListener)\n  fullName: System.Diagnostics.TraceListenerCollection.Contains(TraceListener)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Checks whether the list contains the specified listener.\n  remarks: The Contains method can confirm the existence of a <xref:System.Diagnostics.TraceListener> before you perform further operations.\n  syntax:\n    content: public bool Contains (System.Diagnostics.TraceListener listener);\n    parameters:\n    - id: listener\n      type: System.Diagnostics.TraceListener\n      description: A <xref href=\"System.Diagnostics.TraceListener\"></xref> to find in the list.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the listener is in the list; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Diagnostics.TraceListenerCollection.Contains*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceListenerCollection.CopyTo(System.Diagnostics.TraceListener[],System.Int32)\n  id: CopyTo(System.Diagnostics.TraceListener[],System.Int32)\n  parent: System.Diagnostics.TraceListenerCollection\n  langs:\n  - csharp\n  name: CopyTo(TraceListener[],Int32)\n  nameWithType: TraceListenerCollection.CopyTo(TraceListener[],Int32)\n  fullName: System.Diagnostics.TraceListenerCollection.CopyTo(TraceListener[],Int32)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Copies a section of the current <xref href=\"System.Diagnostics.TraceListenerCollection\"></xref> list to the specified array at the specified index.\n  syntax:\n    content: public void CopyTo (System.Diagnostics.TraceListener[] listeners, int index);\n    parameters:\n    - id: listeners\n      type: System.Diagnostics.TraceListener[]\n      description: An array of type <xref:System.Array> to copy the elements into.\n    - id: index\n      type: System.Int32\n      description: The starting index number in the current list to copy from.\n  overload: System.Diagnostics.TraceListenerCollection.CopyTo*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceListenerCollection.Count\n  id: Count\n  parent: System.Diagnostics.TraceListenerCollection\n  langs:\n  - csharp\n  name: Count\n  nameWithType: TraceListenerCollection.Count\n  fullName: System.Diagnostics.TraceListenerCollection.Count\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Gets the number of listeners in the list.\n  syntax:\n    content: public int Count { get; }\n    return:\n      type: System.Int32\n      description: The number of listeners in the list.\n  overload: System.Diagnostics.TraceListenerCollection.Count*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceListenerCollection.GetEnumerator\n  id: GetEnumerator\n  parent: System.Diagnostics.TraceListenerCollection\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: TraceListenerCollection.GetEnumerator()\n  fullName: System.Diagnostics.TraceListenerCollection.GetEnumerator()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Gets an enumerator for this list.\n  syntax:\n    content: public System.Collections.IEnumerator GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: An enumerator of type <xref:System.Collections.IEnumerator>.\n  overload: System.Diagnostics.TraceListenerCollection.GetEnumerator*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceListenerCollection.IndexOf(System.Diagnostics.TraceListener)\n  id: IndexOf(System.Diagnostics.TraceListener)\n  parent: System.Diagnostics.TraceListenerCollection\n  langs:\n  - csharp\n  name: IndexOf(TraceListener)\n  nameWithType: TraceListenerCollection.IndexOf(TraceListener)\n  fullName: System.Diagnostics.TraceListenerCollection.IndexOf(TraceListener)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Gets the index of the specified listener.\n  syntax:\n    content: public int IndexOf (System.Diagnostics.TraceListener listener);\n    parameters:\n    - id: listener\n      type: System.Diagnostics.TraceListener\n      description: A <xref href=\"System.Diagnostics.TraceListener\"></xref> to find in the list.\n    return:\n      type: System.Int32\n      description: The index of the listener, if it can be found in the list; otherwise, -1.\n  overload: System.Diagnostics.TraceListenerCollection.IndexOf*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceListenerCollection.Insert(System.Int32,System.Diagnostics.TraceListener)\n  id: Insert(System.Int32,System.Diagnostics.TraceListener)\n  parent: System.Diagnostics.TraceListenerCollection\n  langs:\n  - csharp\n  name: Insert(Int32,TraceListener)\n  nameWithType: TraceListenerCollection.Insert(Int32,TraceListener)\n  fullName: System.Diagnostics.TraceListenerCollection.Insert(Int32,TraceListener)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Inserts the listener at the specified index.\n  remarks: \"If the index equals the number of items in the list, then the listener is appended to the end of the list.  \\n  \\n The index is zero-based. Therefore, if you want to insert the listener into the third position, you must call `myTraceListenerColl.Insert(2, myNewListener)`.\"\n  syntax:\n    content: public void Insert (int index, System.Diagnostics.TraceListener listener);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The position in the list to insert the new <xref href=\"System.Diagnostics.TraceListener\"></xref>.\n    - id: listener\n      type: System.Diagnostics.TraceListener\n      description: A <xref href=\"System.Diagnostics.TraceListener\"></xref> to insert in the list.\n  overload: System.Diagnostics.TraceListenerCollection.Insert*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>index</code> is not a valid index in the list.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>listener</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceListenerCollection.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: System.Diagnostics.TraceListenerCollection\n  langs:\n  - csharp\n  name: Item(Int32)\n  nameWithType: TraceListenerCollection.Item(Int32)\n  fullName: System.Diagnostics.TraceListenerCollection.Item(Int32)\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Gets or sets the <xref href=\"System.Diagnostics.TraceListener\"></xref> at the specified index.\n  remarks: The index is zero-based. Therefore, you must subtract one from the numerical position of a particular <xref:System.Diagnostics.TraceListener> to access that <xref:System.Diagnostics.TraceListener>. For example, to get the third <xref:System.Diagnostics.TraceListener>, you need to specify `myTraceListenerColl[2]`.\n  syntax:\n    content: public System.Diagnostics.TraceListener this[int i] { get; set; }\n    parameters:\n    - id: i\n      type: System.Int32\n      description: The zero-based index of the <xref href=\"System.Diagnostics.TraceListener\"></xref> to get from the list.\n    return:\n      type: System.Diagnostics.TraceListener\n      description: A <xref href=\"System.Diagnostics.TraceListener\"></xref> with the specified index.\n  overload: System.Diagnostics.TraceListenerCollection.Item*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The value is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceListenerCollection.Item(System.String)\n  id: Item(System.String)\n  parent: System.Diagnostics.TraceListenerCollection\n  langs:\n  - csharp\n  name: Item(String)\n  nameWithType: TraceListenerCollection.Item(String)\n  fullName: System.Diagnostics.TraceListenerCollection.Item(String)\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Gets the first <xref href=\"System.Diagnostics.TraceListener\"></xref> in the list with the specified name.\n  remarks: The <xref:System.Diagnostics.TraceListenerCollection.Item%2A> property is case-sensitive when searching for names. That is, if two listeners exist with the names \"Lname\" and \"lname\", <xref:System.Diagnostics.TraceListenerCollection.Item%2A> property will find only the <xref:System.Diagnostics.TraceListener> with the <xref:System.Diagnostics.TraceListener.Name%2A> that you specify, not both.\n  syntax:\n    content: public System.Diagnostics.TraceListener this[string name] { get; }\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the <xref href=\"System.Diagnostics.TraceListener\"></xref> to get from the list.\n    return:\n      type: System.Diagnostics.TraceListener\n      description: The first <xref href=\"System.Diagnostics.TraceListener\"></xref> in the list with the given <xref:System.Diagnostics.TraceListener.Name*>. This item returns <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if no <xref href=\"System.Diagnostics.TraceListener\"></xref> with the given name can be found.\n  overload: System.Diagnostics.TraceListenerCollection.Item*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceListenerCollection.Remove(System.Diagnostics.TraceListener)\n  id: Remove(System.Diagnostics.TraceListener)\n  parent: System.Diagnostics.TraceListenerCollection\n  langs:\n  - csharp\n  name: Remove(TraceListener)\n  nameWithType: TraceListenerCollection.Remove(TraceListener)\n  fullName: System.Diagnostics.TraceListenerCollection.Remove(TraceListener)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Removes from the collection the specified <xref href=\"System.Diagnostics.TraceListener\"></xref>.\n  syntax:\n    content: public void Remove (System.Diagnostics.TraceListener listener);\n    parameters:\n    - id: listener\n      type: System.Diagnostics.TraceListener\n      description: A <xref href=\"System.Diagnostics.TraceListener\"></xref> to remove from the list.\n  overload: System.Diagnostics.TraceListenerCollection.Remove*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceListenerCollection.Remove(System.String)\n  id: Remove(System.String)\n  parent: System.Diagnostics.TraceListenerCollection\n  langs:\n  - csharp\n  name: Remove(String)\n  nameWithType: TraceListenerCollection.Remove(String)\n  fullName: System.Diagnostics.TraceListenerCollection.Remove(String)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Removes from the collection the first <xref href=\"System.Diagnostics.TraceListener\"></xref> with the specified name.\n  remarks: The `name` parameter is case-sensitive. That is, if two listeners exist with the names \"Rname\" and \"rname\", the <xref:System.Diagnostics.TraceListenerCollection.Remove%2A> method will find the specific listener you name.\n  syntax:\n    content: public void Remove (string name);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the <xref href=\"System.Diagnostics.TraceListener\"></xref> to remove from the list.\n  overload: System.Diagnostics.TraceListenerCollection.Remove*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceListenerCollection.RemoveAt(System.Int32)\n  id: RemoveAt(System.Int32)\n  parent: System.Diagnostics.TraceListenerCollection\n  langs:\n  - csharp\n  name: RemoveAt(Int32)\n  nameWithType: TraceListenerCollection.RemoveAt(Int32)\n  fullName: System.Diagnostics.TraceListenerCollection.RemoveAt(Int32)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Removes from the collection the <xref href=\"System.Diagnostics.TraceListener\"></xref> at the specified index.\n  remarks: The index is zero-based. Therefore, you must subtract one from the numerical position of a particular <xref:System.Diagnostics.TraceListener> to delete that <xref:System.Diagnostics.TraceListener>. For example, to remove the third <xref:System.Diagnostics.TraceListener>, you need to specify `myTraceListenerColl.RemoveAt(2)`.\n  syntax:\n    content: public void RemoveAt (int index);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index of the <xref href=\"System.Diagnostics.TraceListener\"></xref> to remove from the list.\n  overload: System.Diagnostics.TraceListenerCollection.RemoveAt*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>index</code> is not a valid index in the list.\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceListenerCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  isEii: true\n  parent: System.Diagnostics.TraceListenerCollection\n  langs:\n  - csharp\n  name: System.Collections.ICollection.CopyTo(Array,Int32)\n  nameWithType: TraceListenerCollection.System.Collections.ICollection.CopyTo(Array,Int32)\n  fullName: System.Diagnostics.TraceListenerCollection.System.Collections.ICollection.CopyTo(Array,Int32)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Copies a section of the current <xref href=\"System.Diagnostics.TraceListenerCollection\"></xref> to the specified array of <xref href=\"System.Diagnostics.TraceListener\"></xref> objects.\n  remarks: Use the <xref:System.Diagnostics.TraceListenerCollection.CopyTo%2A> method of the <xref:System.Diagnostics.TraceListenerCollection> class to copy all or part of the collection to an array.\n  syntax:\n    content: void ICollection.CopyTo (Array array, int index);\n    parameters:\n    - id: array\n      type: System.Array\n      description: The one-dimensional array of <xref href=\"System.Diagnostics.TraceListener\"></xref> objects that is the destination of the elements copied from the <xref href=\"System.Diagnostics.TraceListenerCollection\"></xref>. The array must have zero-based indexing.\n    - id: index\n      type: System.Int32\n      description: The zero-based index in `array` at which copying begins.\n  overload: System.Diagnostics.TraceListenerCollection.System#Collections#ICollection#CopyTo*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceListenerCollection.System#Collections#ICollection#IsSynchronized\n  id: System#Collections#ICollection#IsSynchronized\n  isEii: true\n  parent: System.Diagnostics.TraceListenerCollection\n  langs:\n  - csharp\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: TraceListenerCollection.System.Collections.ICollection.IsSynchronized\n  fullName: System.Diagnostics.TraceListenerCollection.System.Collections.ICollection.IsSynchronized\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Gets a value indicating whether access to the <xref href=\"System.Diagnostics.TraceListenerCollection\"></xref> is synchronized (thread safe).\n  syntax:\n    content: bool System.Collections.ICollection.IsSynchronized { get; }\n    return:\n      type: System.Boolean\n      description: Always <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.\n  overload: System.Diagnostics.TraceListenerCollection.System#Collections#ICollection#IsSynchronized*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceListenerCollection.System#Collections#ICollection#SyncRoot\n  id: System#Collections#ICollection#SyncRoot\n  isEii: true\n  parent: System.Diagnostics.TraceListenerCollection\n  langs:\n  - csharp\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: TraceListenerCollection.System.Collections.ICollection.SyncRoot\n  fullName: System.Diagnostics.TraceListenerCollection.System.Collections.ICollection.SyncRoot\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Gets an object that can be used to synchronize access to the <xref href=\"System.Diagnostics.TraceListenerCollection\"></xref>.\n  syntax:\n    content: object System.Collections.ICollection.SyncRoot { get; }\n    return:\n      type: System.Object\n      description: The current <xref href=\"System.Diagnostics.TraceListenerCollection\"></xref> object.\n  overload: System.Diagnostics.TraceListenerCollection.System#Collections#ICollection#SyncRoot*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceListenerCollection.System#Collections#IList#Add(System.Object)\n  id: System#Collections#IList#Add(System.Object)\n  isEii: true\n  parent: System.Diagnostics.TraceListenerCollection\n  langs:\n  - csharp\n  name: System.Collections.IList.Add(Object)\n  nameWithType: TraceListenerCollection.System.Collections.IList.Add(Object)\n  fullName: System.Diagnostics.TraceListenerCollection.System.Collections.IList.Add(Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Adds a trace listener to the <xref href=\"System.Diagnostics.TraceListenerCollection\"></xref>.\n  remarks: Use the <xref:System.Diagnostics.TraceListenerCollection.Add%2A> method to add a new trace listener to the collection.\n  syntax:\n    content: int IList.Add (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: The object to add to the <xref href=\"System.Diagnostics.TraceListenerCollection\"></xref>.\n    return:\n      type: System.Int32\n      description: The position into which the new trace listener was inserted.\n  overload: System.Diagnostics.TraceListenerCollection.System#Collections#IList#Add*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>value</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>value</code> is not a <xref href=\\\"System.Diagnostics.TraceListener\\\"></xref>.\"\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceListenerCollection.System#Collections#IList#Contains(System.Object)\n  id: System#Collections#IList#Contains(System.Object)\n  isEii: true\n  parent: System.Diagnostics.TraceListenerCollection\n  langs:\n  - csharp\n  name: System.Collections.IList.Contains(Object)\n  nameWithType: TraceListenerCollection.System.Collections.IList.Contains(Object)\n  fullName: System.Diagnostics.TraceListenerCollection.System.Collections.IList.Contains(Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Determines whether the <xref href=\"System.Diagnostics.TraceListenerCollection\"></xref> contains a specific object.\n  remarks: Use the <xref:System.Diagnostics.TraceListenerCollection.Contains%2A> method of the <xref:System.Diagnostics.TraceListenerCollection> class to determine whether the collection contains a specific <xref:System.Diagnostics.TraceListener> object.\n  syntax:\n    content: bool IList.Contains (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: The object to locate in the <xref href=\"System.Diagnostics.TraceListenerCollection\"></xref>.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref:System.Object> is found in the <xref href=\"System.Diagnostics.TraceListenerCollection\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Diagnostics.TraceListenerCollection.System#Collections#IList#Contains*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceListenerCollection.System#Collections#IList#IndexOf(System.Object)\n  id: System#Collections#IList#IndexOf(System.Object)\n  isEii: true\n  parent: System.Diagnostics.TraceListenerCollection\n  langs:\n  - csharp\n  name: System.Collections.IList.IndexOf(Object)\n  nameWithType: TraceListenerCollection.System.Collections.IList.IndexOf(Object)\n  fullName: System.Diagnostics.TraceListenerCollection.System.Collections.IList.IndexOf(Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Determines the index of a specific object in the <xref href=\"System.Diagnostics.TraceListenerCollection\"></xref>.\n  remarks: Use the <xref:System.Diagnostics.TraceListenerCollection.IndexOf%2A> method of the <xref:System.Diagnostics.TraceListenerCollection> class to determine the index of a <xref:System.Diagnostics.TraceListener> object in the collection.\n  syntax:\n    content: int IList.IndexOf (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: The object to locate in the <xref href=\"System.Diagnostics.TraceListenerCollection\"></xref>.\n    return:\n      type: System.Int32\n      description: The index of <code>value</code> if found in the <xref href=\"System.Diagnostics.TraceListenerCollection\"></xref>; otherwise, -1.\n  overload: System.Diagnostics.TraceListenerCollection.System#Collections#IList#IndexOf*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceListenerCollection.System#Collections#IList#Insert(System.Int32,System.Object)\n  id: System#Collections#IList#Insert(System.Int32,System.Object)\n  isEii: true\n  parent: System.Diagnostics.TraceListenerCollection\n  langs:\n  - csharp\n  name: System.Collections.IList.Insert(Int32,Object)\n  nameWithType: TraceListenerCollection.System.Collections.IList.Insert(Int32,Object)\n  fullName: System.Diagnostics.TraceListenerCollection.System.Collections.IList.Insert(Int32,Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Inserts a <xref href=\"System.Diagnostics.TraceListener\"></xref> object at the specified position in the <xref href=\"System.Diagnostics.TraceListenerCollection\"></xref>.\n  remarks: Use the <xref:System.Diagnostics.TraceListenerCollection.Insert%2A> method of the <xref:System.Diagnostics.TraceListenerCollection> class to insert a <xref:System.Diagnostics.TraceListener> object into the collection.\n  syntax:\n    content: void IList.Insert (int index, object value);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index at which `value` should be inserted.\n    - id: value\n      type: System.Object\n      description: The <xref href=\"System.Diagnostics.TraceListener\"></xref> object to insert into the <xref href=\"System.Diagnostics.TraceListenerCollection\"></xref>.\n  overload: System.Diagnostics.TraceListenerCollection.System#Collections#IList#Insert*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>value</code> is not a <xref href=\"System.Diagnostics.TraceListener\"></xref> object.\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceListenerCollection.System#Collections#IList#IsFixedSize\n  id: System#Collections#IList#IsFixedSize\n  isEii: true\n  parent: System.Diagnostics.TraceListenerCollection\n  langs:\n  - csharp\n  name: System.Collections.IList.IsFixedSize\n  nameWithType: TraceListenerCollection.System.Collections.IList.IsFixedSize\n  fullName: System.Diagnostics.TraceListenerCollection.System.Collections.IList.IsFixedSize\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Gets a value indicating whether the <xref href=\"System.Diagnostics.TraceListenerCollection\"></xref> has a fixed size.\n  syntax:\n    content: bool System.Collections.IList.IsFixedSize { get; }\n    return:\n      type: System.Boolean\n      description: Always <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Diagnostics.TraceListenerCollection.System#Collections#IList#IsFixedSize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceListenerCollection.System#Collections#IList#IsReadOnly\n  id: System#Collections#IList#IsReadOnly\n  isEii: true\n  parent: System.Diagnostics.TraceListenerCollection\n  langs:\n  - csharp\n  name: System.Collections.IList.IsReadOnly\n  nameWithType: TraceListenerCollection.System.Collections.IList.IsReadOnly\n  fullName: System.Diagnostics.TraceListenerCollection.System.Collections.IList.IsReadOnly\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Gets a value indicating whether the <xref href=\"System.Diagnostics.TraceListenerCollection\"></xref> is read-only\n  syntax:\n    content: bool System.Collections.IList.IsReadOnly { get; }\n    return:\n      type: System.Boolean\n      description: Always <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Diagnostics.TraceListenerCollection.System#Collections#IList#IsReadOnly*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceListenerCollection.System#Collections#IList#Item(System.Int32)\n  id: System#Collections#IList#Item(System.Int32)\n  isEii: true\n  parent: System.Diagnostics.TraceListenerCollection\n  langs:\n  - csharp\n  name: System.Collections.IList.Item(Int32)\n  nameWithType: TraceListenerCollection.System.Collections.IList.Item(Int32)\n  fullName: System.Diagnostics.TraceListenerCollection.System.Collections.IList.Item(Int32)\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Gets or sets the <xref href=\"System.Diagnostics.TraceListener\"></xref> at the specified index in the <xref href=\"System.Diagnostics.TraceListenerCollection\"></xref>.\n  remarks: Use the <xref:System.Diagnostics.TraceListenerCollection.Item%2A> property or the indexer of the <xref:System.Diagnostics.TraceListenerCollection> class to get or set a <xref:System.Diagnostics.TraceListener> in the collection.\n  syntax:\n    content: object System.Collections.IList.Item[int index] { get; set; }\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index of the `value` to get.\n    return:\n      type: System.Object\n      description: The <xref href=\"System.Diagnostics.TraceListener\"></xref> at the specified index.\n  overload: System.Diagnostics.TraceListenerCollection.System#Collections#IList#Item*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.TraceListenerCollection.System#Collections#IList#Remove(System.Object)\n  id: System#Collections#IList#Remove(System.Object)\n  isEii: true\n  parent: System.Diagnostics.TraceListenerCollection\n  langs:\n  - csharp\n  name: System.Collections.IList.Remove(Object)\n  nameWithType: TraceListenerCollection.System.Collections.IList.Remove(Object)\n  fullName: System.Diagnostics.TraceListenerCollection.System.Collections.IList.Remove(Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Removes an object from the <xref href=\"System.Diagnostics.TraceListenerCollection\"></xref>.\n  remarks: Use the <xref:System.Diagnostics.TraceListenerCollection.Remove%2A> method of the <xref:System.Diagnostics.TraceListenerCollection> class to remove a <xref:System.Diagnostics.TraceListener> from the collection.\n  syntax:\n    content: void IList.Remove (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: The object to remove from the <xref href=\"System.Diagnostics.TraceListenerCollection\"></xref>.\n  overload: System.Diagnostics.TraceListenerCollection.System#Collections#IList#Remove*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.Diagnostics.TraceListenerCollection.Add(System.Diagnostics.TraceListener)\n  parent: System.Diagnostics.TraceListenerCollection\n  isExternal: false\n  name: Add(TraceListener)\n  nameWithType: TraceListenerCollection.Add(TraceListener)\n  fullName: System.Diagnostics.TraceListenerCollection.Add(TraceListener)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Diagnostics.TraceListener\n  parent: System.Diagnostics\n  isExternal: false\n  name: TraceListener\n  nameWithType: TraceListener\n  fullName: System.Diagnostics.TraceListener\n- uid: System.Diagnostics.TraceListenerCollection.AddRange(System.Diagnostics.TraceListener[])\n  parent: System.Diagnostics.TraceListenerCollection\n  isExternal: false\n  name: AddRange(TraceListener[])\n  nameWithType: TraceListenerCollection.AddRange(TraceListener[])\n  fullName: System.Diagnostics.TraceListenerCollection.AddRange(TraceListener[])\n- uid: System.Diagnostics.TraceListener[]\n  parent: System.Diagnostics\n  isExternal: false\n  name: TraceListener\n  nameWithType: TraceListener\n  fullName: System.Diagnostics.TraceListener[]\n  spec.csharp:\n  - uid: System.Diagnostics.TraceListener\n    name: TraceListener\n    nameWithType: TraceListener\n    fullName: TraceListener[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Diagnostics.TraceListenerCollection.AddRange(System.Diagnostics.TraceListenerCollection)\n  parent: System.Diagnostics.TraceListenerCollection\n  isExternal: false\n  name: AddRange(TraceListenerCollection)\n  nameWithType: TraceListenerCollection.AddRange(TraceListenerCollection)\n  fullName: System.Diagnostics.TraceListenerCollection.AddRange(TraceListenerCollection)\n- uid: System.Diagnostics.TraceListenerCollection\n  parent: System.Diagnostics\n  isExternal: false\n  name: TraceListenerCollection\n  nameWithType: TraceListenerCollection\n  fullName: System.Diagnostics.TraceListenerCollection\n- uid: System.Diagnostics.TraceListenerCollection.Clear\n  parent: System.Diagnostics.TraceListenerCollection\n  isExternal: false\n  name: Clear()\n  nameWithType: TraceListenerCollection.Clear()\n  fullName: System.Diagnostics.TraceListenerCollection.Clear()\n- uid: System.Diagnostics.TraceListenerCollection.Contains(System.Diagnostics.TraceListener)\n  parent: System.Diagnostics.TraceListenerCollection\n  isExternal: false\n  name: Contains(TraceListener)\n  nameWithType: TraceListenerCollection.Contains(TraceListener)\n  fullName: System.Diagnostics.TraceListenerCollection.Contains(TraceListener)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Diagnostics.TraceListenerCollection.CopyTo(System.Diagnostics.TraceListener[],System.Int32)\n  parent: System.Diagnostics.TraceListenerCollection\n  isExternal: false\n  name: CopyTo(TraceListener[],Int32)\n  nameWithType: TraceListenerCollection.CopyTo(TraceListener[],Int32)\n  fullName: System.Diagnostics.TraceListenerCollection.CopyTo(TraceListener[],Int32)\n- uid: System.Diagnostics.TraceListenerCollection.Count\n  parent: System.Diagnostics.TraceListenerCollection\n  isExternal: false\n  name: Count\n  nameWithType: TraceListenerCollection.Count\n  fullName: System.Diagnostics.TraceListenerCollection.Count\n- uid: System.Diagnostics.TraceListenerCollection.GetEnumerator\n  parent: System.Diagnostics.TraceListenerCollection\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: TraceListenerCollection.GetEnumerator()\n  fullName: System.Diagnostics.TraceListenerCollection.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: true\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.Diagnostics.TraceListenerCollection.IndexOf(System.Diagnostics.TraceListener)\n  parent: System.Diagnostics.TraceListenerCollection\n  isExternal: false\n  name: IndexOf(TraceListener)\n  nameWithType: TraceListenerCollection.IndexOf(TraceListener)\n  fullName: System.Diagnostics.TraceListenerCollection.IndexOf(TraceListener)\n- uid: System.Diagnostics.TraceListenerCollection.Insert(System.Int32,System.Diagnostics.TraceListener)\n  parent: System.Diagnostics.TraceListenerCollection\n  isExternal: false\n  name: Insert(Int32,TraceListener)\n  nameWithType: TraceListenerCollection.Insert(Int32,TraceListener)\n  fullName: System.Diagnostics.TraceListenerCollection.Insert(Int32,TraceListener)\n- uid: System.Diagnostics.TraceListenerCollection.Item(System.Int32)\n  parent: System.Diagnostics.TraceListenerCollection\n  isExternal: false\n  name: Item(Int32)\n  nameWithType: TraceListenerCollection.Item(Int32)\n  fullName: System.Diagnostics.TraceListenerCollection.Item(Int32)\n- uid: System.Diagnostics.TraceListenerCollection.Item(System.String)\n  parent: System.Diagnostics.TraceListenerCollection\n  isExternal: false\n  name: Item(String)\n  nameWithType: TraceListenerCollection.Item(String)\n  fullName: System.Diagnostics.TraceListenerCollection.Item(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Diagnostics.TraceListenerCollection.Remove(System.Diagnostics.TraceListener)\n  parent: System.Diagnostics.TraceListenerCollection\n  isExternal: false\n  name: Remove(TraceListener)\n  nameWithType: TraceListenerCollection.Remove(TraceListener)\n  fullName: System.Diagnostics.TraceListenerCollection.Remove(TraceListener)\n- uid: System.Diagnostics.TraceListenerCollection.Remove(System.String)\n  parent: System.Diagnostics.TraceListenerCollection\n  isExternal: false\n  name: Remove(String)\n  nameWithType: TraceListenerCollection.Remove(String)\n  fullName: System.Diagnostics.TraceListenerCollection.Remove(String)\n- uid: System.Diagnostics.TraceListenerCollection.RemoveAt(System.Int32)\n  parent: System.Diagnostics.TraceListenerCollection\n  isExternal: false\n  name: RemoveAt(Int32)\n  nameWithType: TraceListenerCollection.RemoveAt(Int32)\n  fullName: System.Diagnostics.TraceListenerCollection.RemoveAt(Int32)\n- uid: System.Diagnostics.TraceListenerCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  parent: System.Diagnostics.TraceListenerCollection\n  isExternal: false\n  name: System.Collections.ICollection.CopyTo(Array,Int32)\n  nameWithType: TraceListenerCollection.System.Collections.ICollection.CopyTo(Array,Int32)\n  fullName: System.Diagnostics.TraceListenerCollection.System.Collections.ICollection.CopyTo(Array,Int32)\n- uid: System.Array\n  parent: System\n  isExternal: true\n  name: Array\n  nameWithType: Array\n  fullName: System.Array\n- uid: System.Diagnostics.TraceListenerCollection.System#Collections#ICollection#IsSynchronized\n  parent: System.Diagnostics.TraceListenerCollection\n  isExternal: false\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: TraceListenerCollection.System.Collections.ICollection.IsSynchronized\n  fullName: System.Diagnostics.TraceListenerCollection.System.Collections.ICollection.IsSynchronized\n- uid: System.Diagnostics.TraceListenerCollection.System#Collections#ICollection#SyncRoot\n  parent: System.Diagnostics.TraceListenerCollection\n  isExternal: false\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: TraceListenerCollection.System.Collections.ICollection.SyncRoot\n  fullName: System.Diagnostics.TraceListenerCollection.System.Collections.ICollection.SyncRoot\n- uid: System.Diagnostics.TraceListenerCollection.System#Collections#IList#Add(System.Object)\n  parent: System.Diagnostics.TraceListenerCollection\n  isExternal: false\n  name: System.Collections.IList.Add(Object)\n  nameWithType: TraceListenerCollection.System.Collections.IList.Add(Object)\n  fullName: System.Diagnostics.TraceListenerCollection.System.Collections.IList.Add(Object)\n- uid: System.Diagnostics.TraceListenerCollection.System#Collections#IList#Contains(System.Object)\n  parent: System.Diagnostics.TraceListenerCollection\n  isExternal: false\n  name: System.Collections.IList.Contains(Object)\n  nameWithType: TraceListenerCollection.System.Collections.IList.Contains(Object)\n  fullName: System.Diagnostics.TraceListenerCollection.System.Collections.IList.Contains(Object)\n- uid: System.Diagnostics.TraceListenerCollection.System#Collections#IList#IndexOf(System.Object)\n  parent: System.Diagnostics.TraceListenerCollection\n  isExternal: false\n  name: System.Collections.IList.IndexOf(Object)\n  nameWithType: TraceListenerCollection.System.Collections.IList.IndexOf(Object)\n  fullName: System.Diagnostics.TraceListenerCollection.System.Collections.IList.IndexOf(Object)\n- uid: System.Diagnostics.TraceListenerCollection.System#Collections#IList#Insert(System.Int32,System.Object)\n  parent: System.Diagnostics.TraceListenerCollection\n  isExternal: false\n  name: System.Collections.IList.Insert(Int32,Object)\n  nameWithType: TraceListenerCollection.System.Collections.IList.Insert(Int32,Object)\n  fullName: System.Diagnostics.TraceListenerCollection.System.Collections.IList.Insert(Int32,Object)\n- uid: System.Diagnostics.TraceListenerCollection.System#Collections#IList#IsFixedSize\n  parent: System.Diagnostics.TraceListenerCollection\n  isExternal: false\n  name: System.Collections.IList.IsFixedSize\n  nameWithType: TraceListenerCollection.System.Collections.IList.IsFixedSize\n  fullName: System.Diagnostics.TraceListenerCollection.System.Collections.IList.IsFixedSize\n- uid: System.Diagnostics.TraceListenerCollection.System#Collections#IList#IsReadOnly\n  parent: System.Diagnostics.TraceListenerCollection\n  isExternal: false\n  name: System.Collections.IList.IsReadOnly\n  nameWithType: TraceListenerCollection.System.Collections.IList.IsReadOnly\n  fullName: System.Diagnostics.TraceListenerCollection.System.Collections.IList.IsReadOnly\n- uid: System.Diagnostics.TraceListenerCollection.System#Collections#IList#Item(System.Int32)\n  parent: System.Diagnostics.TraceListenerCollection\n  isExternal: false\n  name: System.Collections.IList.Item(Int32)\n  nameWithType: TraceListenerCollection.System.Collections.IList.Item(Int32)\n  fullName: System.Diagnostics.TraceListenerCollection.System.Collections.IList.Item(Int32)\n- uid: System.Diagnostics.TraceListenerCollection.System#Collections#IList#Remove(System.Object)\n  parent: System.Diagnostics.TraceListenerCollection\n  isExternal: false\n  name: System.Collections.IList.Remove(Object)\n  nameWithType: TraceListenerCollection.System.Collections.IList.Remove(Object)\n  fullName: System.Diagnostics.TraceListenerCollection.System.Collections.IList.Remove(Object)\n- uid: System.Diagnostics.TraceListenerCollection.Add*\n  parent: System.Diagnostics.TraceListenerCollection\n  isExternal: false\n  name: Add\n  nameWithType: TraceListenerCollection.Add\n- uid: System.Diagnostics.TraceListenerCollection.AddRange*\n  parent: System.Diagnostics.TraceListenerCollection\n  isExternal: false\n  name: AddRange\n  nameWithType: TraceListenerCollection.AddRange\n- uid: System.Diagnostics.TraceListenerCollection.Clear*\n  parent: System.Diagnostics.TraceListenerCollection\n  isExternal: false\n  name: Clear\n  nameWithType: TraceListenerCollection.Clear\n- uid: System.Diagnostics.TraceListenerCollection.Contains*\n  parent: System.Diagnostics.TraceListenerCollection\n  isExternal: false\n  name: Contains\n  nameWithType: TraceListenerCollection.Contains\n- uid: System.Diagnostics.TraceListenerCollection.CopyTo*\n  parent: System.Diagnostics.TraceListenerCollection\n  isExternal: false\n  name: CopyTo\n  nameWithType: TraceListenerCollection.CopyTo\n- uid: System.Diagnostics.TraceListenerCollection.Count*\n  parent: System.Diagnostics.TraceListenerCollection\n  isExternal: false\n  name: Count\n  nameWithType: TraceListenerCollection.Count\n- uid: System.Diagnostics.TraceListenerCollection.GetEnumerator*\n  parent: System.Diagnostics.TraceListenerCollection\n  isExternal: false\n  name: GetEnumerator\n  nameWithType: TraceListenerCollection.GetEnumerator\n- uid: System.Diagnostics.TraceListenerCollection.IndexOf*\n  parent: System.Diagnostics.TraceListenerCollection\n  isExternal: false\n  name: IndexOf\n  nameWithType: TraceListenerCollection.IndexOf\n- uid: System.Diagnostics.TraceListenerCollection.Insert*\n  parent: System.Diagnostics.TraceListenerCollection\n  isExternal: false\n  name: Insert\n  nameWithType: TraceListenerCollection.Insert\n- uid: System.Diagnostics.TraceListenerCollection.Item*\n  parent: System.Diagnostics.TraceListenerCollection\n  isExternal: false\n  name: Item\n  nameWithType: TraceListenerCollection.Item\n- uid: System.Diagnostics.TraceListenerCollection.Remove*\n  parent: System.Diagnostics.TraceListenerCollection\n  isExternal: false\n  name: Remove\n  nameWithType: TraceListenerCollection.Remove\n- uid: System.Diagnostics.TraceListenerCollection.RemoveAt*\n  parent: System.Diagnostics.TraceListenerCollection\n  isExternal: false\n  name: RemoveAt\n  nameWithType: TraceListenerCollection.RemoveAt\n- uid: System.Diagnostics.TraceListenerCollection.System#Collections#ICollection#CopyTo*\n  parent: System.Diagnostics.TraceListenerCollection\n  isExternal: false\n  name: System.Collections.ICollection.CopyTo\n  nameWithType: TraceListenerCollection.System.Collections.ICollection.CopyTo\n- uid: System.Diagnostics.TraceListenerCollection.System#Collections#ICollection#IsSynchronized*\n  parent: System.Diagnostics.TraceListenerCollection\n  isExternal: false\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: TraceListenerCollection.System.Collections.ICollection.IsSynchronized\n- uid: System.Diagnostics.TraceListenerCollection.System#Collections#ICollection#SyncRoot*\n  parent: System.Diagnostics.TraceListenerCollection\n  isExternal: false\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: TraceListenerCollection.System.Collections.ICollection.SyncRoot\n- uid: System.Diagnostics.TraceListenerCollection.System#Collections#IList#Add*\n  parent: System.Diagnostics.TraceListenerCollection\n  isExternal: false\n  name: System.Collections.IList.Add\n  nameWithType: TraceListenerCollection.System.Collections.IList.Add\n- uid: System.Diagnostics.TraceListenerCollection.System#Collections#IList#Contains*\n  parent: System.Diagnostics.TraceListenerCollection\n  isExternal: false\n  name: System.Collections.IList.Contains\n  nameWithType: TraceListenerCollection.System.Collections.IList.Contains\n- uid: System.Diagnostics.TraceListenerCollection.System#Collections#IList#IndexOf*\n  parent: System.Diagnostics.TraceListenerCollection\n  isExternal: false\n  name: System.Collections.IList.IndexOf\n  nameWithType: TraceListenerCollection.System.Collections.IList.IndexOf\n- uid: System.Diagnostics.TraceListenerCollection.System#Collections#IList#Insert*\n  parent: System.Diagnostics.TraceListenerCollection\n  isExternal: false\n  name: System.Collections.IList.Insert\n  nameWithType: TraceListenerCollection.System.Collections.IList.Insert\n- uid: System.Diagnostics.TraceListenerCollection.System#Collections#IList#IsFixedSize*\n  parent: System.Diagnostics.TraceListenerCollection\n  isExternal: false\n  name: System.Collections.IList.IsFixedSize\n  nameWithType: TraceListenerCollection.System.Collections.IList.IsFixedSize\n- uid: System.Diagnostics.TraceListenerCollection.System#Collections#IList#IsReadOnly*\n  parent: System.Diagnostics.TraceListenerCollection\n  isExternal: false\n  name: System.Collections.IList.IsReadOnly\n  nameWithType: TraceListenerCollection.System.Collections.IList.IsReadOnly\n- uid: System.Diagnostics.TraceListenerCollection.System#Collections#IList#Item*\n  parent: System.Diagnostics.TraceListenerCollection\n  isExternal: false\n  name: System.Collections.IList.Item\n  nameWithType: TraceListenerCollection.System.Collections.IList.Item\n- uid: System.Diagnostics.TraceListenerCollection.System#Collections#IList#Remove*\n  parent: System.Diagnostics.TraceListenerCollection\n  isExternal: false\n  name: System.Collections.IList.Remove\n  nameWithType: TraceListenerCollection.System.Collections.IList.Remove\n"}