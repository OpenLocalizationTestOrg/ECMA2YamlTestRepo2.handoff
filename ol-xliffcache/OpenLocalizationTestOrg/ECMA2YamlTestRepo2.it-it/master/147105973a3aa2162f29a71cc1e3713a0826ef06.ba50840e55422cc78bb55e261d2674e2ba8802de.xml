{"nodes":[{"pos":[1925,2005],"content":"Defines an object used to draw lines and curves. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Defines an object used to draw lines and curves. This class cannot be inherited.","pos":[0,80],"nodes":[{"content":"Defines an object used to draw lines and curves.","pos":[0,48]},{"content":"This class cannot be inherited.","pos":[49,80]}]}]},{"pos":[2017,2347],"content":"A Pen draws a line of specified width and style. Use the <xref:System.Drawing.Drawing2D.DashStyle> property to draw several varieties of dashed lines. The line drawn by a Pen can be filled in a variety of fill styles, including solid colors and textures. The fill style depends on brush or texture that is used as the fill object.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"A Pen draws a line of specified width and style. Use the <xref:System.Drawing.Drawing2D.DashStyle> property to draw several varieties of dashed lines. The line drawn by a Pen can be filled in a variety of fill styles, including solid colors and textures. The fill style depends on brush or texture that is used as the fill object.","pos":[0,330],"nodes":[{"content":"A Pen draws a line of specified width and style.","pos":[0,48]},{"content":"Use the &lt;xref:System.Drawing.Drawing2D.DashStyle&gt; property to draw several varieties of dashed lines.","pos":[49,150],"source":" Use the <xref:System.Drawing.Drawing2D.DashStyle> property to draw several varieties of dashed lines."},{"content":"The line drawn by a Pen can be filled in a variety of fill styles, including solid colors and textures.","pos":[151,254]},{"content":"The fill style depends on brush or texture that is used as the fill object.","pos":[255,330]}]}]},{"pos":[3914,4055],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Brush\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Drawing.Pen\"></xref> class with the specified <xref href=\"System.Drawing.Brush\"></xref>."},{"pos":[4068,4414],"content":"The <xref:System.Drawing.Pen.Brush%2A> property determines how the <xref:System.Drawing.Pen> draws lines. Lines are drawn as if they are filled rectangles, with the characteristics of the specified <xref:System.Drawing.Brush>.       The <xref:System.Drawing.Pen.Width%2A> property of the new <xref:System.Drawing.Pen> is set to 1 (the default).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <xref:System.Drawing.Pen.Brush%2A> property determines how the <xref:System.Drawing.Pen> draws lines. Lines are drawn as if they are filled rectangles, with the characteristics of the specified <xref:System.Drawing.Brush>.       The <xref:System.Drawing.Pen.Width%2A> property of the new <xref:System.Drawing.Pen> is set to 1 (the default).","pos":[0,344],"nodes":[{"content":"The &lt;xref:System.Drawing.Pen.Brush%2A&gt; property determines how the &lt;xref:System.Drawing.Pen&gt; draws lines.","pos":[0,105],"source":"The <xref:System.Drawing.Pen.Brush%2A> property determines how the <xref:System.Drawing.Pen> draws lines."},{"content":"Lines are drawn as if they are filled rectangles, with the characteristics of the specified &lt;xref:System.Drawing.Brush&gt;.","pos":[106,226],"source":" Lines are drawn as if they are filled rectangles, with the characteristics of the specified <xref:System.Drawing.Brush>."},{"content":"The &lt;xref:System.Drawing.Pen.Width%2A&gt; property of the new &lt;xref:System.Drawing.Pen&gt; is set to 1 (the default).","pos":[233,344],"source":"       The <xref:System.Drawing.Pen.Width%2A> property of the new <xref:System.Drawing.Pen> is set to 1 (the default)."}]}]},{"pos":[5386,5514],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Brush\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the fill properties of this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Brush\"></xref> that determines the fill properties of this <xref href=\"System.Drawing.Pen\"></xref>."},{"pos":[5669,5752],"content":"<ph id=\"ph1\">&lt;code&gt;brush&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>brush</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[6099,6204],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified color.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Drawing.Pen\"></xref> class with the specified color."},{"pos":[6216,6387],"content":"The <xref:System.Drawing.Color> property is set to the color specified by the `color` parameter. The <xref:System.Drawing.Pen.Width%2A> property is set to 1 (the default).","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.Drawing.Color&gt; property is set to the color specified by the <ph id=\"ph1\">`color`</ph> parameter.","pos":[0,96],"source":"The <xref:System.Drawing.Color> property is set to the color specified by the `color` parameter."},{"content":"The &lt;xref:System.Drawing.Pen.Width%2A&gt; property is set to 1 (the default).","pos":[97,171],"source":" The <xref:System.Drawing.Pen.Width%2A> property is set to 1 (the default)."}]},{"pos":[6536,6663],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Color\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that indicates the color of this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Color\"></xref> structure that indicates the color of this <xref href=\"System.Drawing.Pen\"></xref>."},{"pos":[7114,7292],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Brush\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> and &lt;xref:System.Drawing.Pen.Width*&gt;.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Drawing.Pen\"></xref> class with the specified <xref href=\"System.Drawing.Brush\"></xref> and <xref:System.Drawing.Pen.Width*>."},{"pos":[7305,7788],"content":"The <xref:System.Drawing.Brush> is set to the color specified in the `brush` parameter, the <xref:System.Drawing.Pen.Width%2A> property is set to the value specified in the `width` parameter, and the units are set to <xref:System.Drawing.GraphicsUnit>.       Note that the `brush` parameter also specifies the <xref:System.Drawing.Color> property of this <xref:System.Drawing.Pen>.       A `width` of 0 will result in the <xref:System.Drawing.Pen> drawing as if the width were 1.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.Drawing.Brush&gt; is set to the color specified in the <ph id=\"ph1\">`brush`</ph> parameter, the &lt;xref:System.Drawing.Pen.Width%2A&gt; property is set to the value specified in the <ph id=\"ph2\">`width`</ph> parameter, and the units are set to &lt;xref:System.Drawing.GraphicsUnit&gt;.","pos":[0,252],"source":"The <xref:System.Drawing.Brush> is set to the color specified in the `brush` parameter, the <xref:System.Drawing.Pen.Width%2A> property is set to the value specified in the `width` parameter, and the units are set to <xref:System.Drawing.GraphicsUnit>."},{"content":"Note that the <ph id=\"ph1\">`brush`</ph> parameter also specifies the &lt;xref:System.Drawing.Color&gt; property of this &lt;xref:System.Drawing.Pen&gt;.","pos":[259,381],"source":"       Note that the `brush` parameter also specifies the <xref:System.Drawing.Color> property of this <xref:System.Drawing.Pen>."},{"content":"A <ph id=\"ph1\">`width`</ph> of 0 will result in the &lt;xref:System.Drawing.Pen&gt; drawing as if the width were 1.","pos":[388,479],"source":"       A `width` of 0 will result in the <xref:System.Drawing.Pen> drawing as if the width were 1."}]},{"pos":[8778,8906],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Brush\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines the characteristics of this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Brush\"></xref> that determines the characteristics of this <xref href=\"System.Drawing.Pen\"></xref>."},{"pos":[8968,9029],"content":"The width of the new <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The width of the new <xref href=\"System.Drawing.Pen\"></xref>."},{"pos":[9184,9267],"content":"<ph id=\"ph1\">&lt;code&gt;brush&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>brush</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[9663,9852],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Color\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> and &lt;xref:System.Drawing.Pen.Width*&gt; properties.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Drawing.Pen\"></xref> class with the specified <xref href=\"System.Drawing.Color\"></xref> and <xref:System.Drawing.Pen.Width*> properties."},{"pos":[9864,10156],"content":"The <xref:System.Drawing.Color> property is set to the color specified by the `color` parameter. The <xref:System.Drawing.Pen.Width%2A> property is set to the value specified in the `width` parameter. A `width` of 0 will result in the <xref:System.Drawing.Pen> drawing as if the width were 1.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.Drawing.Color&gt; property is set to the color specified by the <ph id=\"ph1\">`color`</ph> parameter.","pos":[0,96],"source":"The <xref:System.Drawing.Color> property is set to the color specified by the `color` parameter."},{"content":"The &lt;xref:System.Drawing.Pen.Width%2A&gt; property is set to the value specified in the <ph id=\"ph1\">`width`</ph> parameter.","pos":[97,200],"source":" The <xref:System.Drawing.Pen.Width%2A> property is set to the value specified in the `width` parameter."},{"content":"A <ph id=\"ph1\">`width`</ph> of 0 will result in the &lt;xref:System.Drawing.Pen&gt; drawing as if the width were 1.","pos":[201,292],"source":" A `width` of 0 will result in the <xref:System.Drawing.Pen> drawing as if the width were 1."}]},{"pos":[11169,11296],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Color\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that indicates the color of this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Color\"></xref> structure that indicates the color of this <xref href=\"System.Drawing.Pen\"></xref>."},{"pos":[11358,11435],"content":"A value indicating the width of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A value indicating the width of this <xref href=\"System.Drawing.Pen\"></xref>."},{"pos":[11793,11869],"content":"Gets or sets the alignment for this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets or sets the alignment for this <xref href=\"System.Drawing.Pen\"></xref>."},{"pos":[11882,13123],"content":"This property determines how the <xref:System.Drawing.Pen> draws closed curves and polygons. The <xref:System.Drawing.Drawing2D.PenAlignment> enumeration specifies five values; however, only two values—<xref:System.Drawing.Drawing2D.PenAlignment> and <xref:System.Drawing.Drawing2D.PenAlignment>—will change the appearance of a drawn line. <xref:System.Drawing.Drawing2D.PenAlignment> is the default value for this property and specifies that the width of the pen is centered on the outline of the curve or polygon. A value of <xref:System.Drawing.Drawing2D.PenAlignment> for this property specifies that the width of the pen is inside the outline of the curve or polygon. The other three values, <xref:System.Drawing.Drawing2D.PenAlignment>, <xref:System.Drawing.Drawing2D.PenAlignment>, and <xref:System.Drawing.Drawing2D.PenAlignment>, will result in a pen that is centered.       A <xref:System.Drawing.Pen> that has its alignment set to <xref:System.Drawing.Drawing2D.PenAlignment> will yield unreliable results, sometimes drawing in the inset position and sometimes in the centered position. Also, an inset pen cannot be used to draw compound lines and cannot draw dashed lines with <xref:System.Drawing.Drawing2D.DashCap> dash caps.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This property determines how the <xref:System.Drawing.Pen> draws closed curves and polygons. The <xref:System.Drawing.Drawing2D.PenAlignment> enumeration specifies five values; however, only two values—<xref:System.Drawing.Drawing2D.PenAlignment> and <xref:System.Drawing.Drawing2D.PenAlignment>—will change the appearance of a drawn line. <xref:System.Drawing.Drawing2D.PenAlignment> is the default value for this property and specifies that the width of the pen is centered on the outline of the curve or polygon. A value of <xref:System.Drawing.Drawing2D.PenAlignment> for this property specifies that the width of the pen is inside the outline of the curve or polygon. The other three values, <xref:System.Drawing.Drawing2D.PenAlignment>, <xref:System.Drawing.Drawing2D.PenAlignment>, and <xref:System.Drawing.Drawing2D.PenAlignment>, will result in a pen that is centered.       A <xref:System.Drawing.Pen> that has its alignment set to <xref:System.Drawing.Drawing2D.PenAlignment> will yield unreliable results, sometimes drawing in the inset position and sometimes in the centered position. Also, an inset pen cannot be used to draw compound lines and cannot draw dashed lines with <xref:System.Drawing.Drawing2D.DashCap> dash caps.","pos":[0,1239],"nodes":[{"content":"This property determines how the &lt;xref:System.Drawing.Pen&gt; draws closed curves and polygons.","pos":[0,92],"source":"This property determines how the <xref:System.Drawing.Pen> draws closed curves and polygons."},{"content":"The &lt;xref:System.Drawing.Drawing2D.PenAlignment&gt; enumeration specifies five values; however, only two values—&lt;xref:System.Drawing.Drawing2D.PenAlignment&gt; and &lt;xref:System.Drawing.Drawing2D.PenAlignment&gt;—will change the appearance of a drawn line.","pos":[93,339],"source":" The <xref:System.Drawing.Drawing2D.PenAlignment> enumeration specifies five values; however, only two values—<xref:System.Drawing.Drawing2D.PenAlignment> and <xref:System.Drawing.Drawing2D.PenAlignment>—will change the appearance of a drawn line."},{"content":"&lt;xref:System.Drawing.Drawing2D.PenAlignment&gt; is the default value for this property and specifies that the width of the pen is centered on the outline of the curve or polygon.","pos":[340,515],"source":" <xref:System.Drawing.Drawing2D.PenAlignment> is the default value for this property and specifies that the width of the pen is centered on the outline of the curve or polygon."},{"content":"A value of &lt;xref:System.Drawing.Drawing2D.PenAlignment&gt; for this property specifies that the width of the pen is inside the outline of the curve or polygon.","pos":[516,672],"source":" A value of <xref:System.Drawing.Drawing2D.PenAlignment> for this property specifies that the width of the pen is inside the outline of the curve or polygon."},{"content":"The other three values, &lt;xref:System.Drawing.Drawing2D.PenAlignment&gt;, &lt;xref:System.Drawing.Drawing2D.PenAlignment&gt;, and &lt;xref:System.Drawing.Drawing2D.PenAlignment&gt;, will result in a pen that is centered.","pos":[673,877],"source":" The other three values, <xref:System.Drawing.Drawing2D.PenAlignment>, <xref:System.Drawing.Drawing2D.PenAlignment>, and <xref:System.Drawing.Drawing2D.PenAlignment>, will result in a pen that is centered."},{"content":"A &lt;xref:System.Drawing.Pen&gt; that has its alignment set to &lt;xref:System.Drawing.Drawing2D.PenAlignment&gt; will yield unreliable results, sometimes drawing in the inset position and sometimes in the centered position.","pos":[884,1097],"source":"       A <xref:System.Drawing.Pen> that has its alignment set to <xref:System.Drawing.Drawing2D.PenAlignment> will yield unreliable results, sometimes drawing in the inset position and sometimes in the centered position."},{"content":"Also, an inset pen cannot be used to draw compound lines and cannot draw dashed lines with &lt;xref:System.Drawing.Drawing2D.DashCap&gt; dash caps.","pos":[1098,1239],"source":" Also, an inset pen cannot be used to draw compound lines and cannot draw dashed lines with <xref:System.Drawing.Drawing2D.DashCap> dash caps."}]}]},{"pos":[13298,13438],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.PenAlignment\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the alignment for this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Drawing2D.PenAlignment\"></xref> that represents the alignment for this <xref href=\"System.Drawing.Pen\"></xref>."},{"pos":[13641,13739],"content":"The specified value is not a member of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.PenAlignment\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The specified value is not a member of <xref href=\"System.Drawing.Drawing2D.PenAlignment\"></xref>."},{"pos":[13834,13998],"content":"The Alignment property is set on an immutable <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, such as those returned by the <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Pens\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"The Alignment property is set on an immutable <xref href=\"System.Drawing.Pen\"></xref>, such as those returned by the <xref href=\"System.Drawing.Pens\"></xref> class."},{"pos":[14281,14415],"content":"Gets or sets the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Brush\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines attributes of this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets or sets the <xref href=\"System.Drawing.Brush\"></xref> that determines attributes of this <xref href=\"System.Drawing.Pen\"></xref>."},{"pos":[14427,14586],"content":"Assigning this property causes the pen to draw filled lines and curves. It overrides the <xref:System.Drawing.Color> property of the <xref:System.Drawing.Pen>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Assigning this property causes the pen to draw filled lines and curves. It overrides the <xref:System.Drawing.Color> property of the <xref:System.Drawing.Pen>.","pos":[0,159],"nodes":[{"content":"Assigning this property causes the pen to draw filled lines and curves.","pos":[0,71]},{"content":"It overrides the &lt;xref:System.Drawing.Color&gt; property of the &lt;xref:System.Drawing.Pen&gt;.","pos":[72,159],"source":" It overrides the <xref:System.Drawing.Color> property of the <xref:System.Drawing.Pen>."}]}]},{"pos":[14722,14841],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Brush\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that determines attributes of this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Brush\"></xref> that determines attributes of this <xref href=\"System.Drawing.Pen\"></xref>."},{"pos":[14988,15148],"content":"The Brush property is set on an immutable <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, such as those returned by the <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Pens\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"The Brush property is set on an immutable <xref href=\"System.Drawing.Pen\"></xref>, such as those returned by the <xref href=\"System.Drawing.Pens\"></xref> class."},{"pos":[15435,15505],"content":"Creates an exact copy of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Creates an exact copy of this <xref href=\"System.Drawing.Pen\"></xref>."},{"pos":[16403,16489],"content":"An &lt;xref:System.Object&gt; that can be cast to a <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An <xref:System.Object> that can be cast to a <xref href=\"System.Drawing.Pen\"></xref>."},{"pos":[16827,16898],"content":"Gets or sets the color of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets or sets the color of this <xref href=\"System.Drawing.Pen\"></xref>."},{"pos":[17034,17162],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Color\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that represents the color of this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Color\"></xref> structure that represents the color of this <xref href=\"System.Drawing.Pen\"></xref>."},{"pos":[17309,17469],"content":"The Color property is set on an immutable <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, such as those returned by the <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Pens\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"The Color property is set on an immutable <xref href=\"System.Drawing.Pen\"></xref>, such as those returned by the <xref href=\"System.Drawing.Pens\"></xref> class."},{"pos":[17792,17929],"content":"Gets or sets an array of values that specifies a compound pen. A compound pen draws a compound line made up of parallel lines and spaces.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets an array of values that specifies a compound pen. A compound pen draws a compound line made up of parallel lines and spaces.","pos":[0,137],"nodes":[{"content":"Gets or sets an array of values that specifies a compound pen.","pos":[0,62]},{"content":"A compound pen draws a compound line made up of parallel lines and spaces.","pos":[63,137]}]}]},{"pos":[17942,19135],"content":"A compound line is made up of alternating parallel lines and spaces of varying widths. The values in the array specify the starting points of each component of the compound line relative to the pen's width. The first value in the array specifies where the first component (a line) begins as a fraction of the distance across the width of the pen. The second value in the array specifies the beginning of the next component (a space) as a fraction of the distance across the width of the pen. The final value in the array specifies where the last component ends.       Suppose you want a pen to draw two parallel lines where the width of the first line is 20 percent of the pen's width, the width of the space that separates the two lines is 50 percent of the pen' s width, and the width of the second line is 30 percent of the pen's width. Start by creating a <xref:System.Drawing.Pen> and an array of real numbers. Set the compound array by passing the array with the values 0.0, 0.2, 0.7, and 1.0 to this property.       Do not set this property if the <xref:System.Drawing.Pen> has its <xref:System.Drawing.Pen.Alignment%2A> property set to <xref:System.Drawing.Drawing2D.PenAlignment>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"A compound line is made up of alternating parallel lines and spaces of varying widths. The values in the array specify the starting points of each component of the compound line relative to the pen's width. The first value in the array specifies where the first component (a line) begins as a fraction of the distance across the width of the pen. The second value in the array specifies the beginning of the next component (a space) as a fraction of the distance across the width of the pen. The final value in the array specifies where the last component ends.       Suppose you want a pen to draw two parallel lines where the width of the first line is 20 percent of the pen's width, the width of the space that separates the two lines is 50 percent of the pen' s width, and the width of the second line is 30 percent of the pen's width. Start by creating a <xref:System.Drawing.Pen> and an array of real numbers. Set the compound array by passing the array with the values 0.0, 0.2, 0.7, and 1.0 to this property.       Do not set this property if the <xref:System.Drawing.Pen> has its <xref:System.Drawing.Pen.Alignment%2A> property set to <xref:System.Drawing.Drawing2D.PenAlignment>.","pos":[0,1189],"nodes":[{"content":"A compound line is made up of alternating parallel lines and spaces of varying widths.","pos":[0,86]},{"content":"The values in the array specify the starting points of each component of the compound line relative to the pen's width.","pos":[87,206]},{"content":"The first value in the array specifies where the first component (a line) begins as a fraction of the distance across the width of the pen.","pos":[207,346]},{"content":"The second value in the array specifies the beginning of the next component (a space) as a fraction of the distance across the width of the pen.","pos":[347,491]},{"content":"The final value in the array specifies where the last component ends.","pos":[492,561]},{"content":"Suppose you want a pen to draw two parallel lines where the width of the first line is 20 percent of the pen's width, the width of the space that separates the two lines is 50 percent of the pen' s width, and the width of the second line is 30 percent of the pen's width.","pos":[568,839]},{"content":"Start by creating a &lt;xref:System.Drawing.Pen&gt; and an array of real numbers.","pos":[840,915],"source":" Start by creating a <xref:System.Drawing.Pen> and an array of real numbers."},{"content":"Set the compound array by passing the array with the values 0.0, 0.2, 0.7, and 1.0 to this property.","pos":[916,1016]},{"content":"Do not set this property if the &lt;xref:System.Drawing.Pen&gt; has its &lt;xref:System.Drawing.Pen.Alignment%2A&gt; property set to &lt;xref:System.Drawing.Drawing2D.PenAlignment&gt;.","pos":[1023,1189],"source":"       Do not set this property if the <xref:System.Drawing.Pen> has its <xref:System.Drawing.Pen.Alignment%2A> property set to <xref:System.Drawing.Drawing2D.PenAlignment>."}]}]},{"pos":[19262,19417],"content":"An array of real numbers that specifies the compound array. The elements in the array must be in increasing order, not less than 0, and not greater than 1.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of real numbers that specifies the compound array. The elements in the array must be in increasing order, not less than 0, and not greater than 1.","pos":[0,155],"nodes":[{"content":"An array of real numbers that specifies the compound array.","pos":[0,59]},{"content":"The elements in the array must be in increasing order, not less than 0, and not greater than 1.","pos":[60,155]}]}]},{"pos":[19572,19740],"content":"The CompoundArray property is set on an immutable <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, such as those returned by the <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Pens\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"The CompoundArray property is set on an immutable <xref href=\"System.Drawing.Pen\"></xref>, such as those returned by the <xref href=\"System.Drawing.Pens\"></xref> class."},{"pos":[20058,20167],"content":"Gets or sets a custom cap to use at the end of lines drawn with this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets or sets a custom cap to use at the end of lines drawn with this <xref href=\"System.Drawing.Pen\"></xref>."},{"pos":[20346,20513],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.CustomLineCap\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the cap used at the end of lines drawn with this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Drawing2D.CustomLineCap\"></xref> that represents the cap used at the end of lines drawn with this <xref href=\"System.Drawing.Pen\"></xref>."},{"pos":[20667,20834],"content":"The CustomEndCap property is set on an immutable <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, such as those returned by the <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Pens\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"The CustomEndCap property is set on an immutable <xref href=\"System.Drawing.Pen\"></xref>, such as those returned by the <xref href=\"System.Drawing.Pens\"></xref> class."},{"pos":[21162,21277],"content":"Gets or sets a custom cap to use at the beginning of lines drawn with this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets or sets a custom cap to use at the beginning of lines drawn with this <xref href=\"System.Drawing.Pen\"></xref>."},{"pos":[21458,21631],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.CustomLineCap\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the cap used at the beginning of lines drawn with this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Drawing2D.CustomLineCap\"></xref> that represents the cap used at the beginning of lines drawn with this <xref href=\"System.Drawing.Pen\"></xref>."},{"pos":[21787,21956],"content":"The CustomStartCap property is set on an immutable <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, such as those returned by the <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Pens\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"The CustomStartCap property is set on an immutable <xref href=\"System.Drawing.Pen\"></xref>, such as those returned by the <xref href=\"System.Drawing.Pens\"></xref> class."},{"pos":[22249,22388],"content":"Gets or sets the cap style used at the end of the dashes that make up dashed lines drawn with this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets or sets the cap style used at the end of the dashes that make up dashed lines drawn with this <xref href=\"System.Drawing.Pen\"></xref>."},{"pos":[22400,22609],"content":"Do not set this property to <xref:System.Drawing.Drawing2D.DashCap> if the <xref:System.Drawing.Pen> has its <xref:System.Drawing.Pen.Alignment%2A> property set to <xref:System.Drawing.Drawing2D.PenAlignment>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Do not set this property to &lt;xref:System.Drawing.Drawing2D.DashCap&gt; if the &lt;xref:System.Drawing.Pen&gt; has its &lt;xref:System.Drawing.Pen.Alignment%2A&gt; property set to &lt;xref:System.Drawing.Drawing2D.PenAlignment&gt;.","pos":[0,209],"source":"Do not set this property to <xref:System.Drawing.Drawing2D.DashCap> if the <xref:System.Drawing.Pen> has its <xref:System.Drawing.Pen.Alignment%2A> property set to <xref:System.Drawing.Drawing2D.PenAlignment>."}]},{"pos":[23595,23823],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.DashCap\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values that represents the cap style used at the beginning and end of the dashes that make up dashed lines drawn with this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Drawing.Drawing2D.DashCap\"></xref> values that represents the cap style used at the beginning and end of the dashes that make up dashed lines drawn with this <xref href=\"System.Drawing.Pen\"></xref>."},{"pos":[24024,24117],"content":"The specified value is not a member of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.DashCap\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The specified value is not a member of <xref href=\"System.Drawing.Drawing2D.DashCap\"></xref>."},{"pos":[24212,24374],"content":"The DashCap property is set on an immutable <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, such as those returned by the <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Pens\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"The DashCap property is set on an immutable <xref href=\"System.Drawing.Pen\"></xref>, such as those returned by the <xref href=\"System.Drawing.Pens\"></xref> class."},{"pos":[24682,24768],"content":"Gets or sets the distance from the start of a line to the beginning of a dash pattern.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the distance from the start of a line to the beginning of a dash pattern.","pos":[0,86]}]},{"pos":[24887,24960],"content":"The distance from the start of a line to the beginning of a dash pattern.","needQuote":true,"needEscape":true,"nodes":[{"content":"The distance from the start of a line to the beginning of a dash pattern.","pos":[0,73]}]},{"pos":[25112,25277],"content":"The DashOffset property is set on an immutable <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, such as those returned by the <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Pens\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"The DashOffset property is set on an immutable <xref href=\"System.Drawing.Pen\"></xref>, such as those returned by the <xref href=\"System.Drawing.Pens\"></xref> class."},{"pos":[25590,25640],"content":"Gets or sets an array of custom dashes and spaces.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets an array of custom dashes and spaces.","pos":[0,50]}]},{"pos":[25653,26327],"content":"Assigning a value other than `null` to this property will set the <xref:System.Drawing.Drawing2D.DashStyle> property for this <xref:System.Drawing.Pen> to <xref:System.Drawing.Drawing2D.DashStyle>.       The elements in the `dashArray` array set the length of each dash and space in the dash pattern. The first element sets the length of a dash, the second element sets the length of a space, the third element sets the length of a dash, and so on. Consequently, each element should be a non-zero positive number.       The length of each dash and space in the dash pattern is the product of the element value in the array and the width of the <xref:System.Drawing.Pen>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Assigning a value other than <ph id=\"ph1\">`null`</ph> to this property will set the &lt;xref:System.Drawing.Drawing2D.DashStyle&gt; property for this &lt;xref:System.Drawing.Pen&gt; to &lt;xref:System.Drawing.Drawing2D.DashStyle&gt;.","pos":[0,197],"source":"Assigning a value other than `null` to this property will set the <xref:System.Drawing.Drawing2D.DashStyle> property for this <xref:System.Drawing.Pen> to <xref:System.Drawing.Drawing2D.DashStyle>."},{"content":"The elements in the <ph id=\"ph1\">`dashArray`</ph> array set the length of each dash and space in the dash pattern.","pos":[204,300],"source":"       The elements in the `dashArray` array set the length of each dash and space in the dash pattern."},{"content":"The first element sets the length of a dash, the second element sets the length of a space, the third element sets the length of a dash, and so on.","pos":[301,448]},{"content":"Consequently, each element should be a non-zero positive number.","pos":[449,513]},{"content":"The length of each dash and space in the dash pattern is the product of the element value in the array and the width of the &lt;xref:System.Drawing.Pen&gt;.","pos":[520,670],"source":"       The length of each dash and space in the dash pattern is the product of the element value in the array and the width of the <xref:System.Drawing.Pen>."}]},{"pos":[27235,27336],"content":"An array of real numbers that specifies the lengths of alternating dashes and spaces in dashed lines.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of real numbers that specifies the lengths of alternating dashes and spaces in dashed lines.","pos":[0,101]}]},{"pos":[27489,27655],"content":"The DashPattern property is set on an immutable <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, such as those returned by the <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Pens\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"The DashPattern property is set on an immutable <xref href=\"System.Drawing.Pen\"></xref>, such as those returned by the <xref href=\"System.Drawing.Pens\"></xref> class."},{"pos":[27958,28059],"content":"Gets or sets the style used for dashed lines drawn with this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets or sets the style used for dashed lines drawn with this <xref href=\"System.Drawing.Pen\"></xref>."},{"pos":[28071,28503],"content":"A value of <xref:System.Drawing.Drawing2D.DashStyle> for this property specifies that a custom pattern of dashes and spaces, defined by the <xref:System.Drawing.Pen.DashPattern%2A> property, makes up lines drawn with this <xref:System.Drawing.Pen>. If the value of this property is <xref:System.Drawing.Drawing2D.DashStyle> and the value of the <xref:System.Drawing.Pen.DashPattern%2A> property is `null`, the pen draws solid lines.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"A value of &lt;xref:System.Drawing.Drawing2D.DashStyle&gt; for this property specifies that a custom pattern of dashes and spaces, defined by the &lt;xref:System.Drawing.Pen.DashPattern%2A&gt; property, makes up lines drawn with this &lt;xref:System.Drawing.Pen&gt;.","pos":[0,248],"source":"A value of <xref:System.Drawing.Drawing2D.DashStyle> for this property specifies that a custom pattern of dashes and spaces, defined by the <xref:System.Drawing.Pen.DashPattern%2A> property, makes up lines drawn with this <xref:System.Drawing.Pen>."},{"content":"If the value of this property is &lt;xref:System.Drawing.Drawing2D.DashStyle&gt; and the value of the &lt;xref:System.Drawing.Pen.DashPattern%2A&gt; property is <ph id=\"ph1\">`null`</ph>, the pen draws solid lines.","pos":[249,432],"source":" If the value of this property is <xref:System.Drawing.Drawing2D.DashStyle> and the value of the <xref:System.Drawing.Pen.DashPattern%2A> property is `null`, the pen draws solid lines."}]},{"pos":[28671,28833],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.DashStyle\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the style used for dashed lines drawn with this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Drawing2D.DashStyle\"></xref> that represents the style used for dashed lines drawn with this <xref href=\"System.Drawing.Pen\"></xref>."},{"pos":[28984,29148],"content":"The DashStyle property is set on an immutable <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, such as those returned by the <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Pens\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"The DashStyle property is set on an immutable <xref href=\"System.Drawing.Pen\"></xref>, such as those returned by the <xref href=\"System.Drawing.Pens\"></xref> class."},{"pos":[29445,29521],"content":"Releases all resources used by this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Releases all resources used by this <xref href=\"System.Drawing.Pen\"></xref>."},{"pos":[29534,30429],"content":"Calling Dispose allows the resources used by this <xref:System.Drawing.Brush> to be reallocated for other purposes.       Call Dispose when you are finished using the <xref:System.Drawing.Pen>. The Dispose method leaves the <xref:System.Drawing.Pen> in an unusable state. After calling Dispose, you must release all references to the <xref:System.Drawing.Pen> so the garbage collector can reclaim the memory that the <xref:System.Drawing.Pen> was occupying. For more information, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md) and [Implementing a Dispose Method](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] >  Always call Dispose before you release your last reference to the <xref:System.Drawing.Pen>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Drawing.Pen> object's `Finalize` method.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Calling Dispose allows the resources used by this &lt;xref:System.Drawing.Brush&gt; to be reallocated for other purposes.","pos":[0,115],"source":"Calling Dispose allows the resources used by this <xref:System.Drawing.Brush> to be reallocated for other purposes."},{"content":"Call Dispose when you are finished using the &lt;xref:System.Drawing.Pen&gt;.","pos":[122,193],"source":"       Call Dispose when you are finished using the <xref:System.Drawing.Pen>."},{"content":"The Dispose method leaves the &lt;xref:System.Drawing.Pen&gt; in an unusable state.","pos":[194,271],"source":" The Dispose method leaves the <xref:System.Drawing.Pen> in an unusable state."},{"content":"After calling Dispose, you must release all references to the &lt;xref:System.Drawing.Pen&gt; so the garbage collector can reclaim the memory that the &lt;xref:System.Drawing.Pen&gt; was occupying.","pos":[272,457],"source":" After calling Dispose, you must release all references to the <xref:System.Drawing.Pen> so the garbage collector can reclaim the memory that the <xref:System.Drawing.Pen> was occupying."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Cleaning Up Unmanaged Resources<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id=\"p2\">[</bpt>Implementing a Dispose Method<ept id=\"p2\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[458,632],"source":" For more information, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md) and [Implementing a Dispose Method](~/add/includes/ajax-current-ext-md.md)."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Always call Dispose before you release your last reference to the &lt;xref:System.Drawing.Pen&gt;.","pos":[638,743],"source":"      > [!NOTE] >  Always call Dispose before you release your last reference to the <xref:System.Drawing.Pen>."},{"content":"Otherwise, the resources it is using will not be freed until the garbage collector calls the &lt;xref:System.Drawing.Pen&gt; object's <ph id=\"ph1\">`Finalize`</ph> method.","pos":[744,890],"source":" Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Drawing.Pen> object's `Finalize` method."}]},{"pos":[31654,31762],"content":"Gets or sets the cap style used at the end of lines drawn with this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets or sets the cap style used at the end of lines drawn with this <xref href=\"System.Drawing.Pen\"></xref>."},{"pos":[32686,32869],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.LineCap\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values that represents the cap style used at the end of lines drawn with this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Drawing.Drawing2D.LineCap\"></xref> values that represents the cap style used at the end of lines drawn with this <xref href=\"System.Drawing.Pen\"></xref>."},{"pos":[33069,33162],"content":"The specified value is not a member of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.LineCap\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The specified value is not a member of <xref href=\"System.Drawing.Drawing2D.LineCap\"></xref>."},{"pos":[33257,33418],"content":"The EndCap property is set on an immutable <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, such as those returned by the <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Pens\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"The EndCap property is set on an immutable <xref href=\"System.Drawing.Pen\"></xref>, such as those returned by the <xref href=\"System.Drawing.Pens\"></xref> class."},{"pos":[33720,33844],"content":"Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.","pos":[0,124]}]},{"pos":[34251,34373],"content":"Gets or sets the join style for the ends of two consecutive lines drawn with this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets or sets the join style for the ends of two consecutive lines drawn with this <xref href=\"System.Drawing.Pen\"></xref>."},{"pos":[34386,34873],"content":"A line join is the common area that is formed by two lines whose ends meet or overlap. There are three line join styles: miter, bevel, and round.  When you specify a line join style for a <xref:System.Drawing.Pen> object, that join style will be applied to all the connected lines in any <xref:System.Drawing.Drawing2D.GraphicsPath> object drawn using that pen.The following illustration shows the results of the beveled line join example.       ![Pens](~/add/media/pens5.gif \"Pens\")","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"A line join is the common area that is formed by two lines whose ends meet or overlap.","pos":[0,86]},{"content":"There are three line join styles: miter, bevel, and round.","pos":[87,145]},{"content":"When you specify a line join style for a &lt;xref:System.Drawing.Pen&gt; object, that join style will be applied to all the connected lines in any &lt;xref:System.Drawing.Drawing2D.GraphicsPath&gt; object drawn using that pen.The following illustration shows the results of the beveled line join example.","pos":[147,439],"source":"  When you specify a line join style for a <xref:System.Drawing.Pen> object, that join style will be applied to all the connected lines in any <xref:System.Drawing.Drawing2D.GraphicsPath> object drawn using that pen.The following illustration shows the results of the beveled line join example."},{"content":"<bpt id=\"p1\">![</bpt>Pens<ept id=\"p1\">]</ept><bpt id=\"p2\">(~/add/media/pens5.gif \"</bpt>Pens<ept id=\"p2\">\")</ept>","pos":[446,483],"source":"![Pens](~/add/media/pens5.gif \"Pens\")"}]},{"pos":[35781,35963],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.LineJoin\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the join style for the ends of two consecutive lines drawn with this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Drawing2D.LineJoin\"></xref> that represents the join style for the ends of two consecutive lines drawn with this <xref href=\"System.Drawing.Pen\"></xref>."},{"pos":[36113,36276],"content":"The LineJoin property is set on an immutable <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, such as those returned by the <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Pens\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"The LineJoin property is set on an immutable <xref href=\"System.Drawing.Pen\"></xref>, such as those returned by the <xref href=\"System.Drawing.Pens\"></xref> class."},{"pos":[36584,36656],"content":"Gets or sets the limit of the thickness of the join on a mitered corner.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the limit of the thickness of the join on a mitered corner.","pos":[0,72]}]},{"pos":[36669,37187],"content":"The miter length is the distance from the intersection of the line walls on the inside of the join to the intersection of the line walls outside of the join. The miter length can be large when the angle between two lines is small. The miter limit is the maximum allowed ratio of miter length to stroke width. The default value is 10.0f.       If the miter length of the join of the intersection exceeds the limit of the join, then the join will be beveled to keep it within the limit of the join of the intersection.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The miter length is the distance from the intersection of the line walls on the inside of the join to the intersection of the line walls outside of the join. The miter length can be large when the angle between two lines is small. The miter limit is the maximum allowed ratio of miter length to stroke width. The default value is 10.0f.       If the miter length of the join of the intersection exceeds the limit of the join, then the join will be beveled to keep it within the limit of the join of the intersection.","pos":[0,516],"nodes":[{"content":"The miter length is the distance from the intersection of the line walls on the inside of the join to the intersection of the line walls outside of the join.","pos":[0,157]},{"content":"The miter length can be large when the angle between two lines is small.","pos":[158,230]},{"content":"The miter limit is the maximum allowed ratio of miter length to stroke width.","pos":[231,308]},{"content":"The default value is 10.0f.","pos":[309,336]},{"content":"If the miter length of the join of the intersection exceeds the limit of the join, then the join will be beveled to keep it within the limit of the join of the intersection.","pos":[343,516]}]}]},{"pos":[37307,37366],"content":"The limit of the thickness of the join on a mitered corner.","needQuote":true,"needEscape":true,"nodes":[{"content":"The limit of the thickness of the join on a mitered corner.","pos":[0,59]}]},{"pos":[37518,37683],"content":"The MiterLimit property is set on an immutable <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, such as those returned by the <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Pens\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"The MiterLimit property is set on an immutable <xref href=\"System.Drawing.Pen\"></xref>, such as those returned by the <xref href=\"System.Drawing.Pens\"></xref> class."},{"pos":[38114,38270],"content":"Multiplies the transformation matrix for this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> by the specified <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Multiplies the transformation matrix for this <xref href=\"System.Drawing.Pen\"></xref> by the specified <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref>."},{"pos":[38282,38427],"content":"This method prepends the multiplication matrix specified in the <ph id=\"ph1\">`matrix`</ph> parameter to the transformation matrix for the multiplication operation.","needQuote":true,"needEscape":true,"extradata":"MT","source":"This method prepends the multiplication matrix specified in the `matrix` parameter to the transformation matrix for the multiplication operation."},{"pos":[39441,39552],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object by which to multiply the transformation matrix.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> object by which to multiply the transformation matrix."},{"pos":[40160,40339],"content":"Multiplies the transformation matrix for this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> by the specified <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> in the specified order.","needQuote":true,"needEscape":true,"source":"Multiplies the transformation matrix for this <xref href=\"System.Drawing.Pen\"></xref> by the specified <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> in the specified order."},{"pos":[40351,40540],"content":"This method uses the &lt;xref:System.Drawing.Drawing2D.MatrixOrder&gt; enumeration element (either prepend or append) specified by the <ph id=\"ph1\">`order`</ph> parameter to carry out the multiplication operation.","needQuote":true,"needEscape":true,"extradata":"MT","source":"This method uses the <xref:System.Drawing.Drawing2D.MatrixOrder> enumeration element (either prepend or append) specified by the `order` parameter to carry out the multiplication operation."},{"pos":[41598,41702],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> by which to multiply the transformation matrix.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> by which to multiply the transformation matrix."},{"pos":[41787,41846],"content":"The order in which to perform the multiplication operation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The order in which to perform the multiplication operation.","pos":[0,59]}]},{"pos":[42206,42286],"content":"Gets the style of lines drawn with this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets the style of lines drawn with this <xref href=\"System.Drawing.Pen\"></xref>."},{"pos":[42298,42485],"content":"A <xref:System.Drawing.Pen> can draw solid lines, filled lines, or textured lines, depending on the style specified by a member of the <xref:System.Drawing.Drawing2D.PenType> enumeration.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"A &lt;xref:System.Drawing.Pen&gt; can draw solid lines, filled lines, or textured lines, depending on the style specified by a member of the &lt;xref:System.Drawing.Drawing2D.PenType&gt; enumeration.","pos":[0,187],"source":"A <xref:System.Drawing.Pen> can draw solid lines, filled lines, or textured lines, depending on the style specified by a member of the <xref:System.Drawing.Drawing2D.PenType> enumeration."}]},{"pos":[42642,42800],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.PenType\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that specifies the style of lines drawn with this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Drawing2D.PenType\"></xref> enumeration that specifies the style of lines drawn with this <xref href=\"System.Drawing.Pen\"></xref>."},{"pos":[43189,43293],"content":"Resets the geometric transformation matrix for this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to identity.","needQuote":true,"needEscape":true,"source":"Resets the geometric transformation matrix for this <xref href=\"System.Drawing.Pen\"></xref> to identity."},{"pos":[44715,44838],"content":"Rotates the local geometric transformation by the specified angle. This method prepends the rotation to the transformation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Rotates the local geometric transformation by the specified angle. This method prepends the rotation to the transformation.","pos":[0,123],"nodes":[{"content":"Rotates the local geometric transformation by the specified angle.","pos":[0,66]},{"content":"This method prepends the rotation to the transformation.","pos":[67,123]}]}]},{"pos":[44850,44989],"content":"Because the shape of a pen is circular, a rotation does not have any visible effect unless the pen is scaled in the x- or y-axis direction.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Because the shape of a pen is circular, a rotation does not have any visible effect unless the pen is scaled in the x- or y-axis direction.","pos":[0,139]}]},{"pos":[46004,46026],"content":"The angle of rotation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The angle of rotation.","pos":[0,22]}]},{"pos":[46586,46675],"content":"Rotates the local geometric transformation by the specified angle in the specified order.","needQuote":true,"needEscape":true,"nodes":[{"content":"Rotates the local geometric transformation by the specified angle in the specified order.","pos":[0,89]}]},{"pos":[46687,46826],"content":"Because the shape of a pen is circular, a rotation does not have any visible effect unless the pen is scaled in the x- or y-axis direction.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Because the shape of a pen is circular, a rotation does not have any visible effect unless the pen is scaled in the x- or y-axis direction.","pos":[0,139]}]},{"pos":[47885,47907],"content":"The angle of rotation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The angle of rotation.","pos":[0,22]}]},{"pos":[47992,48116],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.MatrixOrder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that specifies whether to append or prepend the rotation matrix.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Drawing2D.MatrixOrder\"></xref> that specifies whether to append or prepend the rotation matrix."},{"pos":[48610,48740],"content":"Scales the local geometric transformation by the specified factors. This method prepends the scaling matrix to the transformation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Scales the local geometric transformation by the specified factors. This method prepends the scaling matrix to the transformation.","pos":[0,130],"nodes":[{"content":"Scales the local geometric transformation by the specified factors.","pos":[0,67]},{"content":"This method prepends the scaling matrix to the transformation.","pos":[68,130]}]}]},{"pos":[49711,49783],"content":"The factor by which to scale the transformation in the x-axis direction.","needQuote":true,"needEscape":true,"nodes":[{"content":"The factor by which to scale the transformation in the x-axis direction.","pos":[0,72]}]},{"pos":[49842,49914],"content":"The factor by which to scale the transformation in the y-axis direction.","needQuote":true,"needEscape":true,"nodes":[{"content":"The factor by which to scale the transformation in the y-axis direction.","pos":[0,72]}]},{"pos":[50517,50607],"content":"Scales the local geometric transformation by the specified factors in the specified order.","needQuote":true,"needEscape":true,"nodes":[{"content":"Scales the local geometric transformation by the specified factors in the specified order.","pos":[0,90]}]},{"pos":[51634,51706],"content":"The factor by which to scale the transformation in the x-axis direction.","needQuote":true,"needEscape":true,"nodes":[{"content":"The factor by which to scale the transformation in the x-axis direction.","pos":[0,72]}]},{"pos":[51765,51837],"content":"The factor by which to scale the transformation in the y-axis direction.","needQuote":true,"needEscape":true,"nodes":[{"content":"The factor by which to scale the transformation in the y-axis direction.","pos":[0,72]}]},{"pos":[51922,52045],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.MatrixOrder\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that specifies whether to append or prepend the scaling matrix.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Drawing2D.MatrixOrder\"></xref> that specifies whether to append or prepend the scaling matrix."},{"pos":[52690,52810],"content":"Sets the values that determine the style of cap used to end lines drawn by this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Sets the values that determine the style of cap used to end lines drawn by this <xref href=\"System.Drawing.Pen\"></xref>."},{"pos":[53768,53943],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.LineCap\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the cap style to use at the beginning of lines drawn with this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Drawing2D.LineCap\"></xref> that represents the cap style to use at the beginning of lines drawn with this <xref href=\"System.Drawing.Pen\"></xref>."},{"pos":[54025,54194],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.LineCap\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the cap style to use at the end of lines drawn with this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Drawing2D.LineCap\"></xref> that represents the cap style to use at the end of lines drawn with this <xref href=\"System.Drawing.Pen\"></xref>."},{"pos":[54277,54466],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.LineCap\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the cap style to use at the beginning or end of dashed lines drawn with this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Drawing.Drawing2D.LineCap\"></xref> that represents the cap style to use at the beginning or end of dashed lines drawn with this <xref href=\"System.Drawing.Pen\"></xref>."},{"pos":[54824,54938],"content":"Gets or sets the cap style used at the beginning of lines drawn with this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets or sets the cap style used at the beginning of lines drawn with this <xref href=\"System.Drawing.Pen\"></xref>."},{"pos":[55864,56053],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.LineCap\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values that represents the cap style used at the beginning of lines drawn with this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Drawing.Drawing2D.LineCap\"></xref> values that represents the cap style used at the beginning of lines drawn with this <xref href=\"System.Drawing.Pen\"></xref>."},{"pos":[56255,56348],"content":"The specified value is not a member of <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.LineCap\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The specified value is not a member of <xref href=\"System.Drawing.Drawing2D.LineCap\"></xref>."},{"pos":[56443,56606],"content":"The StartCap property is set on an immutable <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, such as those returned by the <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Pens\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"The StartCap property is set on an immutable <xref href=\"System.Drawing.Pen\"></xref>, such as those returned by the <xref href=\"System.Drawing.Pens\"></xref> class."},{"pos":[56909,57010],"content":"Gets or sets a copy of the geometric transformation for this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets or sets a copy of the geometric transformation for this <xref href=\"System.Drawing.Pen\"></xref>."},{"pos":[57022,57399],"content":"This property defines an elliptical shape for the pen tip. This ellipse is obtained from the default circular shape by applying the transformation matrix. Note that the translation portion of the matrix is ignored. Because the matrix returned and by the Transform property is a copy of the pen's geometric transform, you should dispose of the matrix when you no longer need it.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This property defines an elliptical shape for the pen tip. This ellipse is obtained from the default circular shape by applying the transformation matrix. Note that the translation portion of the matrix is ignored. Because the matrix returned and by the Transform property is a copy of the pen's geometric transform, you should dispose of the matrix when you no longer need it.","pos":[0,377],"nodes":[{"content":"This property defines an elliptical shape for the pen tip.","pos":[0,58]},{"content":"This ellipse is obtained from the default circular shape by applying the transformation matrix.","pos":[59,154]},{"content":"Note that the translation portion of the matrix is ignored.","pos":[155,214]},{"content":"Because the matrix returned and by the Transform property is a copy of the pen's geometric transform, you should dispose of the matrix when you no longer need it.","pos":[215,377]}]}]},{"pos":[57561,57722],"content":"A copy of the <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Drawing2D.Matrix\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that represents the geometric transformation for this <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"A copy of the <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> that represents the geometric transformation for this <xref href=\"System.Drawing.Pen\"></xref>."},{"pos":[57873,58037],"content":"The Transform property is set on an immutable <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, such as those returned by the <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Pens\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"The Transform property is set on an immutable <xref href=\"System.Drawing.Pen\"></xref>, such as those returned by the <xref href=\"System.Drawing.Pens\"></xref> class."},{"pos":[58486,58620],"content":"Translates the local geometric transformation by the specified dimensions. This method prepends the translation to the transformation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Translates the local geometric transformation by the specified dimensions. This method prepends the translation to the transformation.","pos":[0,134],"nodes":[{"content":"Translates the local geometric transformation by the specified dimensions.","pos":[0,74]},{"content":"This method prepends the translation to the transformation.","pos":[75,134]}]}]},{"pos":[58771,58805],"content":"The value of the translation in x.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value of the translation in x.","pos":[0,34]}]},{"pos":[58864,58898],"content":"The value of the translation in y.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value of the translation in y.","pos":[0,34]}]},{"pos":[59525,59622],"content":"Translates the local geometric transformation by the specified dimensions in the specified order.","needQuote":true,"needEscape":true,"nodes":[{"content":"Translates the local geometric transformation by the specified dimensions in the specified order.","pos":[0,97]}]},{"pos":[59817,59851],"content":"The value of the translation in x.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value of the translation in x.","pos":[0,34]}]},{"pos":[59910,59944],"content":"The value of the translation in y.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value of the translation in y.","pos":[0,34]}]},{"pos":[60029,60093],"content":"The order (prepend or append) in which to apply the translation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The order (prepend or append) in which to apply the translation.","pos":[0,64]}]},{"pos":[60444,60601],"content":"Gets or sets the width of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, in units of the <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Graphics\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object used for drawing.","needQuote":true,"needEscape":true,"source":"Gets or sets the width of this <xref href=\"System.Drawing.Pen\"></xref>, in units of the <xref href=\"System.Drawing.Graphics\"></xref> object used for drawing."},{"pos":[60613,60886],"content":"You can access the unit of measure of the <xref:System.Drawing.Graphics> object using its <xref:System.Drawing.Graphics.PageUnit%2A> property. The unit of measure is typically pixels. A Width of 0 will result in the <xref:System.Drawing.Pen> drawing as if the Width were 1.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"You can access the unit of measure of the <xref:System.Drawing.Graphics> object using its <xref:System.Drawing.Graphics.PageUnit%2A> property. The unit of measure is typically pixels. A Width of 0 will result in the <xref:System.Drawing.Pen> drawing as if the Width were 1.","pos":[0,273],"nodes":[{"content":"You can access the unit of measure of the &lt;xref:System.Drawing.Graphics&gt; object using its &lt;xref:System.Drawing.Graphics.PageUnit%2A&gt; property.","pos":[0,142],"source":"You can access the unit of measure of the <xref:System.Drawing.Graphics> object using its <xref:System.Drawing.Graphics.PageUnit%2A> property."},{"content":"The unit of measure is typically pixels.","pos":[143,183]},{"content":"A Width of 0 will result in the &lt;xref:System.Drawing.Pen&gt; drawing as if the Width were 1.","pos":[184,273],"source":" A Width of 0 will result in the <xref:System.Drawing.Pen> drawing as if the Width were 1."}]}]},{"pos":[61747,61805],"content":"The width of this <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The width of this <xref href=\"System.Drawing.Pen\"></xref>."},{"pos":[61952,62112],"content":"The Width property is set on an immutable <bpt id=\"p1\">&lt;xref href=\"System.Drawing.Pen\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, such as those returned by the <bpt id=\"p2\">&lt;xref href=\"System.Drawing.Pens\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"The Width property is set on an immutable <xref href=\"System.Drawing.Pen\"></xref>, such as those returned by the <xref href=\"System.Drawing.Pens\"></xref> class."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Drawing.Pen\n  id: Pen\n  children:\n  - System.Drawing.Pen.#ctor(System.Drawing.Brush)\n  - System.Drawing.Pen.#ctor(System.Drawing.Color)\n  - System.Drawing.Pen.#ctor(System.Drawing.Brush,System.Single)\n  - System.Drawing.Pen.#ctor(System.Drawing.Color,System.Single)\n  - System.Drawing.Pen.Alignment\n  - System.Drawing.Pen.Brush\n  - System.Drawing.Pen.Clone\n  - System.Drawing.Pen.Color\n  - System.Drawing.Pen.CompoundArray\n  - System.Drawing.Pen.CustomEndCap\n  - System.Drawing.Pen.CustomStartCap\n  - System.Drawing.Pen.DashCap\n  - System.Drawing.Pen.DashOffset\n  - System.Drawing.Pen.DashPattern\n  - System.Drawing.Pen.DashStyle\n  - System.Drawing.Pen.Dispose\n  - System.Drawing.Pen.EndCap\n  - System.Drawing.Pen.Finalize\n  - System.Drawing.Pen.LineJoin\n  - System.Drawing.Pen.MiterLimit\n  - System.Drawing.Pen.MultiplyTransform(System.Drawing.Drawing2D.Matrix)\n  - System.Drawing.Pen.MultiplyTransform(System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.MatrixOrder)\n  - System.Drawing.Pen.PenType\n  - System.Drawing.Pen.ResetTransform\n  - System.Drawing.Pen.RotateTransform(System.Single)\n  - System.Drawing.Pen.RotateTransform(System.Single,System.Drawing.Drawing2D.MatrixOrder)\n  - System.Drawing.Pen.ScaleTransform(System.Single,System.Single)\n  - System.Drawing.Pen.ScaleTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)\n  - System.Drawing.Pen.SetLineCap(System.Drawing.Drawing2D.LineCap,System.Drawing.Drawing2D.LineCap,System.Drawing.Drawing2D.DashCap)\n  - System.Drawing.Pen.StartCap\n  - System.Drawing.Pen.Transform\n  - System.Drawing.Pen.TranslateTransform(System.Single,System.Single)\n  - System.Drawing.Pen.TranslateTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)\n  - System.Drawing.Pen.Width\n  langs:\n  - csharp\n  name: Pen\n  nameWithType: Pen\n  fullName: System.Drawing.Pen\n  type: Class\n  summary: Defines an object used to draw lines and curves. This class cannot be inherited.\n  remarks: A Pen draws a line of specified width and style. Use the <xref:System.Drawing.Drawing2D.DashStyle> property to draw several varieties of dashed lines. The line drawn by a Pen can be filled in a variety of fill styles, including solid colors and textures. The fill style depends on brush or texture that is used as the fill object.\n  example:\n  - \"The following code example demonstrates constructing a Pen with a <xref:System.Drawing.Pen.Brush%2A> and the effects of setting the <xref:System.Drawing.Pen.LineJoin%2A> property on a Pen.  \\n  \\n This example is designed to be used with Windows Forms. Paste the code into a form and call the `ShowLineJoin` method when handling the form's <xref:System.Windows.Forms.Control.Paint> event, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  \\n  \\n [!code-cs[System.Drawing.PensExample#1](~/add/codesnippet/csharp/t-system.drawing.pen_1.cs)]\\n [!code-vb[System.Drawing.PensExample#1](~/add/codesnippet/visualbasic/t-system.drawing.pen_1.vb)]\\n [!code-cpp[System.Drawing.PensExample#1](~/add/codesnippet/cpp/t-system.drawing.pen_1.cpp)]\"\n  syntax:\n    content: 'public sealed class Pen : MarshalByRefObject, ICloneable, IDisposable'\n  inheritance:\n  - System.Object\n  - System.MarshalByRefObject\n  implements:\n  - System.ICloneable\n  - System.IDisposable\n  inheritedMembers:\n  - System.MarshalByRefObject.CreateObjRef(System.Type)\n  - System.MarshalByRefObject.GetLifetimeService\n  - System.MarshalByRefObject.InitializeLifetimeService\n  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  platform:\n  - net462\n- uid: System.Drawing.Pen.#ctor(System.Drawing.Brush)\n  id: '#ctor(System.Drawing.Brush)'\n  parent: System.Drawing.Pen\n  langs:\n  - csharp\n  name: Pen(Brush)\n  nameWithType: Pen.Pen(Brush)\n  fullName: System.Drawing.Pen.Pen(Brush)\n  type: Constructor\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Initializes a new instance of the <xref href=\"System.Drawing.Pen\"></xref> class with the specified <xref href=\"System.Drawing.Brush\"></xref>.\n  remarks: \"The <xref:System.Drawing.Pen.Brush%2A> property determines how the <xref:System.Drawing.Pen> draws lines. Lines are drawn as if they are filled rectangles, with the characteristics of the specified <xref:System.Drawing.Brush>.  \\n  \\n The <xref:System.Drawing.Pen.Width%2A> property of the new <xref:System.Drawing.Pen> is set to 1 (the default).\"\n  example:\n  - \"The following code example demonstrates constructing a <xref:System.Drawing.Pen> with a <xref:System.Drawing.Pen.Brush%2A> and the effects of setting the <xref:System.Drawing.Pen.LineJoin%2A> property on a <xref:System.Drawing.Pen>.  \\n  \\n This example is designed to be used with Windows Forms. Paste the code into a form and call the `ShowLineJoin` method when handling the form's <xref:System.Windows.Forms.Control.Paint> event, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  \\n  \\n [!code-cs[System.Drawing.PensExample#1](~/add/codesnippet/csharp/m-system.drawing.pen.sha_2_1.cs)]\\n [!code-vb[System.Drawing.PensExample#1](~/add/codesnippet/visualbasic/m-system.drawing.pen.sha_2_1.vb)]\\n [!code-cpp[System.Drawing.PensExample#1](~/add/codesnippet/cpp/m-system.drawing.pen.sha_2_1.cpp)]\"\n  syntax:\n    content: public Pen (System.Drawing.Brush brush);\n    parameters:\n    - id: brush\n      type: System.Drawing.Brush\n      description: A <xref href=\"System.Drawing.Brush\"></xref> that determines the fill properties of this <xref href=\"System.Drawing.Pen\"></xref>.\n  overload: System.Drawing.Pen.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>brush</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Pen.#ctor(System.Drawing.Color)\n  id: '#ctor(System.Drawing.Color)'\n  parent: System.Drawing.Pen\n  langs:\n  - csharp\n  name: Pen(Color)\n  nameWithType: Pen.Pen(Color)\n  fullName: System.Drawing.Pen.Pen(Color)\n  type: Constructor\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Initializes a new instance of the <xref href=\"System.Drawing.Pen\"></xref> class with the specified color.\n  remarks: The <xref:System.Drawing.Color> property is set to the color specified by the `color` parameter. The <xref:System.Drawing.Pen.Width%2A> property is set to 1 (the default).\n  syntax:\n    content: public Pen (System.Drawing.Color color);\n    parameters:\n    - id: color\n      type: System.Drawing.Color\n      description: A <xref href=\"System.Drawing.Color\"></xref> structure that indicates the color of this <xref href=\"System.Drawing.Pen\"></xref>.\n  overload: System.Drawing.Pen.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Pen.#ctor(System.Drawing.Brush,System.Single)\n  id: '#ctor(System.Drawing.Brush,System.Single)'\n  parent: System.Drawing.Pen\n  langs:\n  - csharp\n  name: Pen(Brush,Single)\n  nameWithType: Pen.Pen(Brush,Single)\n  fullName: System.Drawing.Pen.Pen(Brush,Single)\n  type: Constructor\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Initializes a new instance of the <xref href=\"System.Drawing.Pen\"></xref> class with the specified <xref href=\"System.Drawing.Brush\"></xref> and <xref:System.Drawing.Pen.Width*>.\n  remarks: \"The <xref:System.Drawing.Brush> is set to the color specified in the `brush` parameter, the <xref:System.Drawing.Pen.Width%2A> property is set to the value specified in the `width` parameter, and the units are set to <xref:System.Drawing.GraphicsUnit>.  \\n  \\n Note that the `brush` parameter also specifies the <xref:System.Drawing.Color> property of this <xref:System.Drawing.Pen>.  \\n  \\n A `width` of 0 will result in the <xref:System.Drawing.Pen> drawing as if the width were 1.\"\n  example:\n  - \"The following code example creates a <xref:System.Drawing.Pen> and demonstrates the effects of setting the <xref:System.Drawing.Pen.StartCap%2A> and <xref:System.Drawing.Pen.EndCap%2A> properties on a <xref:System.Drawing.Pen>.  \\n  \\n This example is designed to be used with Windows Forms. Paste the code into a form and call the `ShowStartAndEndCaps` method when handling the form's <xref:System.Windows.Forms.Control.Paint> event, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  \\n  \\n [!code-cs[System.Drawing.ImageExample#3](~/add/codesnippet/csharp/m-system.drawing.pen.sha_0_1.cs)]\\n [!code-cpp[System.Drawing.ImageExample#3](~/add/codesnippet/cpp/m-system.drawing.pen.sha_0_1.cpp)]\\n [!code-vb[System.Drawing.ImageExample#3](~/add/codesnippet/visualbasic/m-system.drawing.pen.sha_0_1.vb)]\"\n  syntax:\n    content: public Pen (System.Drawing.Brush brush, float width);\n    parameters:\n    - id: brush\n      type: System.Drawing.Brush\n      description: A <xref href=\"System.Drawing.Brush\"></xref> that determines the characteristics of this <xref href=\"System.Drawing.Pen\"></xref>.\n    - id: width\n      type: System.Single\n      description: The width of the new <xref href=\"System.Drawing.Pen\"></xref>.\n  overload: System.Drawing.Pen.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>brush</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Drawing.Pen.#ctor(System.Drawing.Color,System.Single)\n  id: '#ctor(System.Drawing.Color,System.Single)'\n  parent: System.Drawing.Pen\n  langs:\n  - csharp\n  name: Pen(Color,Single)\n  nameWithType: Pen.Pen(Color,Single)\n  fullName: System.Drawing.Pen.Pen(Color,Single)\n  type: Constructor\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Initializes a new instance of the <xref href=\"System.Drawing.Pen\"></xref> class with the specified <xref href=\"System.Drawing.Color\"></xref> and <xref:System.Drawing.Pen.Width*> properties.\n  remarks: The <xref:System.Drawing.Color> property is set to the color specified by the `color` parameter. The <xref:System.Drawing.Pen.Width%2A> property is set to the value specified in the `width` parameter. A `width` of 0 will result in the <xref:System.Drawing.Pen> drawing as if the width were 1.\n  example:\n  - \"The following code example demonstrates creating a <xref:System.Drawing.Pen> and the effects of setting the <xref:System.Drawing.Pen.DashCap%2A>, <xref:System.Drawing.Pen.DashPattern%2A>, and <xref:System.Drawing.Graphics.SmoothingMode%2A> properties.  \\n  \\n This example is designed to be used with Windows Forms. Paste the code into a form and call the `ShowPensAndSmoothingMode` method when handling the form's <xref:System.Windows.Forms.Control.Paint> event, passing e as <xref:System.Windows.Forms.PaintEventArgs>.  \\n  \\n [!code-cs[System.Drawing.PensExample#3](~/add/codesnippet/csharp/m-system.drawing.pen.sha_1_1.cs)]\\n [!code-vb[System.Drawing.PensExample#3](~/add/codesnippet/visualbasic/m-system.drawing.pen.sha_1_1.vb)]\\n [!code-cpp[System.Drawing.PensExample#3](~/add/codesnippet/cpp/m-system.drawing.pen.sha_1_1.cpp)]\"\n  syntax:\n    content: public Pen (System.Drawing.Color color, float width);\n    parameters:\n    - id: color\n      type: System.Drawing.Color\n      description: A <xref href=\"System.Drawing.Color\"></xref> structure that indicates the color of this <xref href=\"System.Drawing.Pen\"></xref>.\n    - id: width\n      type: System.Single\n      description: A value indicating the width of this <xref href=\"System.Drawing.Pen\"></xref>.\n  overload: System.Drawing.Pen.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Pen.Alignment\n  id: Alignment\n  parent: System.Drawing.Pen\n  langs:\n  - csharp\n  name: Alignment\n  nameWithType: Pen.Alignment\n  fullName: System.Drawing.Pen.Alignment\n  type: Property\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Gets or sets the alignment for this <xref href=\"System.Drawing.Pen\"></xref>.\n  remarks: \"This property determines how the <xref:System.Drawing.Pen> draws closed curves and polygons. The <xref:System.Drawing.Drawing2D.PenAlignment> enumeration specifies five values; however, only two values—<xref:System.Drawing.Drawing2D.PenAlignment> and <xref:System.Drawing.Drawing2D.PenAlignment>—will change the appearance of a drawn line. <xref:System.Drawing.Drawing2D.PenAlignment> is the default value for this property and specifies that the width of the pen is centered on the outline of the curve or polygon. A value of <xref:System.Drawing.Drawing2D.PenAlignment> for this property specifies that the width of the pen is inside the outline of the curve or polygon. The other three values, <xref:System.Drawing.Drawing2D.PenAlignment>, <xref:System.Drawing.Drawing2D.PenAlignment>, and <xref:System.Drawing.Drawing2D.PenAlignment>, will result in a pen that is centered.  \\n  \\n A <xref:System.Drawing.Pen> that has its alignment set to <xref:System.Drawing.Drawing2D.PenAlignment> will yield unreliable results, sometimes drawing in the inset position and sometimes in the centered position. Also, an inset pen cannot be used to draw compound lines and cannot draw dashed lines with <xref:System.Drawing.Drawing2D.DashCap> dash caps.\"\n  syntax:\n    content: public System.Drawing.Drawing2D.PenAlignment Alignment { get; set; }\n    return:\n      type: System.Drawing.Drawing2D.PenAlignment\n      description: A <xref href=\"System.Drawing.Drawing2D.PenAlignment\"></xref> that represents the alignment for this <xref href=\"System.Drawing.Pen\"></xref>.\n  overload: System.Drawing.Pen.Alignment*\n  exceptions:\n  - type: System.ComponentModel.InvalidEnumArgumentException\n    commentId: T:System.ComponentModel.InvalidEnumArgumentException\n    description: The specified value is not a member of <xref href=\"System.Drawing.Drawing2D.PenAlignment\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The Alignment property is set on an immutable <xref href=\"System.Drawing.Pen\"></xref>, such as those returned by the <xref href=\"System.Drawing.Pens\"></xref> class.\n  platform:\n  - net462\n- uid: System.Drawing.Pen.Brush\n  id: Brush\n  parent: System.Drawing.Pen\n  langs:\n  - csharp\n  name: Brush\n  nameWithType: Pen.Brush\n  fullName: System.Drawing.Pen.Brush\n  type: Property\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Gets or sets the <xref href=\"System.Drawing.Brush\"></xref> that determines attributes of this <xref href=\"System.Drawing.Pen\"></xref>.\n  remarks: Assigning this property causes the pen to draw filled lines and curves. It overrides the <xref:System.Drawing.Color> property of the <xref:System.Drawing.Pen>.\n  syntax:\n    content: public System.Drawing.Brush Brush { get; set; }\n    return:\n      type: System.Drawing.Brush\n      description: A <xref href=\"System.Drawing.Brush\"></xref> that determines attributes of this <xref href=\"System.Drawing.Pen\"></xref>.\n  overload: System.Drawing.Pen.Brush*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The Brush property is set on an immutable <xref href=\"System.Drawing.Pen\"></xref>, such as those returned by the <xref href=\"System.Drawing.Pens\"></xref> class.\n  platform:\n  - net462\n- uid: System.Drawing.Pen.Clone\n  id: Clone\n  parent: System.Drawing.Pen\n  langs:\n  - csharp\n  name: Clone()\n  nameWithType: Pen.Clone()\n  fullName: System.Drawing.Pen.Clone()\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Creates an exact copy of this <xref href=\"System.Drawing.Pen\"></xref>.\n  remarks: ''\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a <xref:System.Drawing.Pen>.  \\n  \\n-   Creates a copy of that pen.  \\n  \\n-   Draws a line to the screen, using the copy of the pen.  \\n  \\n [!code-cpp[System.Drawing.ClassicPenExamples#1](~/add/codesnippet/cpp/m-system.drawing.pen.clone_1.cpp)]\\n [!code-cs[System.Drawing.ClassicPenExamples#1](~/add/codesnippet/csharp/m-system.drawing.pen.clone_1.cs)]\\n [!code-vb[System.Drawing.ClassicPenExamples#1](~/add/codesnippet/visualbasic/m-system.drawing.pen.clone_1.vb)]\"\n  syntax:\n    content: public object Clone ();\n    parameters: []\n    return:\n      type: System.Object\n      description: An <xref:System.Object> that can be cast to a <xref href=\"System.Drawing.Pen\"></xref>.\n  overload: System.Drawing.Pen.Clone*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Pen.Color\n  id: Color\n  parent: System.Drawing.Pen\n  langs:\n  - csharp\n  name: Color\n  nameWithType: Pen.Color\n  fullName: System.Drawing.Pen.Color\n  type: Property\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Gets or sets the color of this <xref href=\"System.Drawing.Pen\"></xref>.\n  syntax:\n    content: public System.Drawing.Color Color { get; set; }\n    return:\n      type: System.Drawing.Color\n      description: A <xref href=\"System.Drawing.Color\"></xref> structure that represents the color of this <xref href=\"System.Drawing.Pen\"></xref>.\n  overload: System.Drawing.Pen.Color*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The Color property is set on an immutable <xref href=\"System.Drawing.Pen\"></xref>, such as those returned by the <xref href=\"System.Drawing.Pens\"></xref> class.\n  platform:\n  - net462\n- uid: System.Drawing.Pen.CompoundArray\n  id: CompoundArray\n  parent: System.Drawing.Pen\n  langs:\n  - csharp\n  name: CompoundArray\n  nameWithType: Pen.CompoundArray\n  fullName: System.Drawing.Pen.CompoundArray\n  type: Property\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Gets or sets an array of values that specifies a compound pen. A compound pen draws a compound line made up of parallel lines and spaces.\n  remarks: \"A compound line is made up of alternating parallel lines and spaces of varying widths. The values in the array specify the starting points of each component of the compound line relative to the pen's width. The first value in the array specifies where the first component (a line) begins as a fraction of the distance across the width of the pen. The second value in the array specifies the beginning of the next component (a space) as a fraction of the distance across the width of the pen. The final value in the array specifies where the last component ends.  \\n  \\n Suppose you want a pen to draw two parallel lines where the width of the first line is 20 percent of the pen's width, the width of the space that separates the two lines is 50 percent of the pen' s width, and the width of the second line is 30 percent of the pen's width. Start by creating a <xref:System.Drawing.Pen> and an array of real numbers. Set the compound array by passing the array with the values 0.0, 0.2, 0.7, and 1.0 to this property.  \\n  \\n Do not set this property if the <xref:System.Drawing.Pen> has its <xref:System.Drawing.Pen.Alignment%2A> property set to <xref:System.Drawing.Drawing2D.PenAlignment>.\"\n  syntax:\n    content: public float[] CompoundArray { get; set; }\n    return:\n      type: System.Single[]\n      description: An array of real numbers that specifies the compound array. The elements in the array must be in increasing order, not less than 0, and not greater than 1.\n  overload: System.Drawing.Pen.CompoundArray*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The CompoundArray property is set on an immutable <xref href=\"System.Drawing.Pen\"></xref>, such as those returned by the <xref href=\"System.Drawing.Pens\"></xref> class.\n  platform:\n  - net462\n- uid: System.Drawing.Pen.CustomEndCap\n  id: CustomEndCap\n  parent: System.Drawing.Pen\n  langs:\n  - csharp\n  name: CustomEndCap\n  nameWithType: Pen.CustomEndCap\n  fullName: System.Drawing.Pen.CustomEndCap\n  type: Property\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Gets or sets a custom cap to use at the end of lines drawn with this <xref href=\"System.Drawing.Pen\"></xref>.\n  syntax:\n    content: public System.Drawing.Drawing2D.CustomLineCap CustomEndCap { get; set; }\n    return:\n      type: System.Drawing.Drawing2D.CustomLineCap\n      description: A <xref href=\"System.Drawing.Drawing2D.CustomLineCap\"></xref> that represents the cap used at the end of lines drawn with this <xref href=\"System.Drawing.Pen\"></xref>.\n  overload: System.Drawing.Pen.CustomEndCap*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The CustomEndCap property is set on an immutable <xref href=\"System.Drawing.Pen\"></xref>, such as those returned by the <xref href=\"System.Drawing.Pens\"></xref> class.\n  platform:\n  - net462\n- uid: System.Drawing.Pen.CustomStartCap\n  id: CustomStartCap\n  parent: System.Drawing.Pen\n  langs:\n  - csharp\n  name: CustomStartCap\n  nameWithType: Pen.CustomStartCap\n  fullName: System.Drawing.Pen.CustomStartCap\n  type: Property\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Gets or sets a custom cap to use at the beginning of lines drawn with this <xref href=\"System.Drawing.Pen\"></xref>.\n  syntax:\n    content: public System.Drawing.Drawing2D.CustomLineCap CustomStartCap { get; set; }\n    return:\n      type: System.Drawing.Drawing2D.CustomLineCap\n      description: A <xref href=\"System.Drawing.Drawing2D.CustomLineCap\"></xref> that represents the cap used at the beginning of lines drawn with this <xref href=\"System.Drawing.Pen\"></xref>.\n  overload: System.Drawing.Pen.CustomStartCap*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The CustomStartCap property is set on an immutable <xref href=\"System.Drawing.Pen\"></xref>, such as those returned by the <xref href=\"System.Drawing.Pens\"></xref> class.\n  platform:\n  - net462\n- uid: System.Drawing.Pen.DashCap\n  id: DashCap\n  parent: System.Drawing.Pen\n  langs:\n  - csharp\n  name: DashCap\n  nameWithType: Pen.DashCap\n  fullName: System.Drawing.Pen.DashCap\n  type: Property\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Gets or sets the cap style used at the end of the dashes that make up dashed lines drawn with this <xref href=\"System.Drawing.Pen\"></xref>.\n  remarks: Do not set this property to <xref:System.Drawing.Drawing2D.DashCap> if the <xref:System.Drawing.Pen> has its <xref:System.Drawing.Pen.Alignment%2A> property set to <xref:System.Drawing.Drawing2D.PenAlignment>.\n  example:\n  - \"The following code example demonstrates creating a <xref:System.Drawing.Pen> and the effects of setting the DashCap, <xref:System.Drawing.Pen.DashPattern%2A>, and <xref:System.Drawing.Graphics.SmoothingMode%2A> properties.  \\n  \\n This example is designed to be used with Windows Forms. Paste the code into a form and call the `ShowPensAndSmoothingMode` method when handling the form's <xref:System.Windows.Forms.Control.Paint> event, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  \\n  \\n [!code-cs[System.Drawing.PensExample#3](~/add/codesnippet/csharp/p-system.drawing.pen.das_0_1.cs)]\\n [!code-vb[System.Drawing.PensExample#3](~/add/codesnippet/visualbasic/p-system.drawing.pen.das_0_1.vb)]\\n [!code-cpp[System.Drawing.PensExample#3](~/add/codesnippet/cpp/p-system.drawing.pen.das_0_1.cpp)]\"\n  syntax:\n    content: public System.Drawing.Drawing2D.DashCap DashCap { get; set; }\n    return:\n      type: System.Drawing.Drawing2D.DashCap\n      description: One of the <xref href=\"System.Drawing.Drawing2D.DashCap\"></xref> values that represents the cap style used at the beginning and end of the dashes that make up dashed lines drawn with this <xref href=\"System.Drawing.Pen\"></xref>.\n  overload: System.Drawing.Pen.DashCap*\n  exceptions:\n  - type: System.ComponentModel.InvalidEnumArgumentException\n    commentId: T:System.ComponentModel.InvalidEnumArgumentException\n    description: The specified value is not a member of <xref href=\"System.Drawing.Drawing2D.DashCap\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The DashCap property is set on an immutable <xref href=\"System.Drawing.Pen\"></xref>, such as those returned by the <xref href=\"System.Drawing.Pens\"></xref> class.\n  platform:\n  - net462\n- uid: System.Drawing.Pen.DashOffset\n  id: DashOffset\n  parent: System.Drawing.Pen\n  langs:\n  - csharp\n  name: DashOffset\n  nameWithType: Pen.DashOffset\n  fullName: System.Drawing.Pen.DashOffset\n  type: Property\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Gets or sets the distance from the start of a line to the beginning of a dash pattern.\n  syntax:\n    content: public float DashOffset { get; set; }\n    return:\n      type: System.Single\n      description: The distance from the start of a line to the beginning of a dash pattern.\n  overload: System.Drawing.Pen.DashOffset*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The DashOffset property is set on an immutable <xref href=\"System.Drawing.Pen\"></xref>, such as those returned by the <xref href=\"System.Drawing.Pens\"></xref> class.\n  platform:\n  - net462\n- uid: System.Drawing.Pen.DashPattern\n  id: DashPattern\n  parent: System.Drawing.Pen\n  langs:\n  - csharp\n  name: DashPattern\n  nameWithType: Pen.DashPattern\n  fullName: System.Drawing.Pen.DashPattern\n  type: Property\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Gets or sets an array of custom dashes and spaces.\n  remarks: \"Assigning a value other than `null` to this property will set the <xref:System.Drawing.Drawing2D.DashStyle> property for this <xref:System.Drawing.Pen> to <xref:System.Drawing.Drawing2D.DashStyle>.  \\n  \\n The elements in the `dashArray` array set the length of each dash and space in the dash pattern. The first element sets the length of a dash, the second element sets the length of a space, the third element sets the length of a dash, and so on. Consequently, each element should be a non-zero positive number.  \\n  \\n The length of each dash and space in the dash pattern is the product of the element value in the array and the width of the <xref:System.Drawing.Pen>.\"\n  example:\n  - \"The following code example demonstrates the effects of setting the <xref:System.Drawing.Pen.DashCap%2A>, DashPattern, and <xref:System.Drawing.Graphics.SmoothingMode%2A> properties.  \\n  \\n This example is designed to be used with Windows Forms. Paste the code into a form and call the `ShowPensAndSmoothingMode` method when handling the form's <xref:System.Windows.Forms.Control.Paint> event, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  \\n  \\n [!code-cs[System.Drawing.PensExample#3](~/add/codesnippet/csharp/p-system.drawing.pen.das_1_1.cs)]\\n [!code-vb[System.Drawing.PensExample#3](~/add/codesnippet/visualbasic/p-system.drawing.pen.das_1_1.vb)]\\n [!code-cpp[System.Drawing.PensExample#3](~/add/codesnippet/cpp/p-system.drawing.pen.das_1_1.cpp)]\"\n  syntax:\n    content: public float[] DashPattern { get; set; }\n    return:\n      type: System.Single[]\n      description: An array of real numbers that specifies the lengths of alternating dashes and spaces in dashed lines.\n  overload: System.Drawing.Pen.DashPattern*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The DashPattern property is set on an immutable <xref href=\"System.Drawing.Pen\"></xref>, such as those returned by the <xref href=\"System.Drawing.Pens\"></xref> class.\n  platform:\n  - net462\n- uid: System.Drawing.Pen.DashStyle\n  id: DashStyle\n  parent: System.Drawing.Pen\n  langs:\n  - csharp\n  name: DashStyle\n  nameWithType: Pen.DashStyle\n  fullName: System.Drawing.Pen.DashStyle\n  type: Property\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Gets or sets the style used for dashed lines drawn with this <xref href=\"System.Drawing.Pen\"></xref>.\n  remarks: A value of <xref:System.Drawing.Drawing2D.DashStyle> for this property specifies that a custom pattern of dashes and spaces, defined by the <xref:System.Drawing.Pen.DashPattern%2A> property, makes up lines drawn with this <xref:System.Drawing.Pen>. If the value of this property is <xref:System.Drawing.Drawing2D.DashStyle> and the value of the <xref:System.Drawing.Pen.DashPattern%2A> property is `null`, the pen draws solid lines.\n  syntax:\n    content: public System.Drawing.Drawing2D.DashStyle DashStyle { get; set; }\n    return:\n      type: System.Drawing.Drawing2D.DashStyle\n      description: A <xref href=\"System.Drawing.Drawing2D.DashStyle\"></xref> that represents the style used for dashed lines drawn with this <xref href=\"System.Drawing.Pen\"></xref>.\n  overload: System.Drawing.Pen.DashStyle*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The DashStyle property is set on an immutable <xref href=\"System.Drawing.Pen\"></xref>, such as those returned by the <xref href=\"System.Drawing.Pens\"></xref> class.\n  platform:\n  - net462\n- uid: System.Drawing.Pen.Dispose\n  id: Dispose\n  parent: System.Drawing.Pen\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: Pen.Dispose()\n  fullName: System.Drawing.Pen.Dispose()\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Releases all resources used by this <xref href=\"System.Drawing.Pen\"></xref>.\n  remarks: \"Calling Dispose allows the resources used by this <xref:System.Drawing.Brush> to be reallocated for other purposes.  \\n  \\n Call Dispose when you are finished using the <xref:System.Drawing.Pen>. The Dispose method leaves the <xref:System.Drawing.Pen> in an unusable state. After calling Dispose, you must release all references to the <xref:System.Drawing.Pen> so the garbage collector can reclaim the memory that the <xref:System.Drawing.Pen> was occupying. For more information, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md) and [Implementing a Dispose Method](~/add/includes/ajax-current-ext-md.md).  \\n  \\n> [!NOTE]\\n>  Always call Dispose before you release your last reference to the <xref:System.Drawing.Pen>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Drawing.Pen> object's `Finalize` method.\"\n  example:\n  - \"The following code example demonstrates the effects of setting the <xref:System.Drawing.Pen.Width%2A> and <xref:System.Drawing.Pen.LineJoin%2A> properties, and shows how to call the Dispose method for a <xref:System.Drawing.Pen>.  \\n  \\n This example is designed to be used with Windows Forms. Paste the code into a form and call the `ShowLineJoin` method when handling the form's <xref:System.Windows.Forms.Control.Paint> event, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  \\n  \\n [!code-cs[System.Drawing.PensExample#1](~/add/codesnippet/csharp/m-system.drawing.pen.dis_1.cs)]\\n [!code-vb[System.Drawing.PensExample#1](~/add/codesnippet/visualbasic/m-system.drawing.pen.dis_1.vb)]\\n [!code-cpp[System.Drawing.PensExample#1](~/add/codesnippet/cpp/m-system.drawing.pen.dis_1.cpp)]\"\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.Drawing.Pen.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Pen.EndCap\n  id: EndCap\n  parent: System.Drawing.Pen\n  langs:\n  - csharp\n  name: EndCap\n  nameWithType: Pen.EndCap\n  fullName: System.Drawing.Pen.EndCap\n  type: Property\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Gets or sets the cap style used at the end of lines drawn with this <xref href=\"System.Drawing.Pen\"></xref>.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates the effects of setting the <xref:System.Drawing.Pen.StartCap%2A> and EndCap properties on a <xref:System.Drawing.Pen>.  \\n  \\n This example is designed to be used with Windows Forms. Paste the code into a form and call the `ShowStartAndEndCaps` method when handling the form's <xref:System.Windows.Forms.Control.Paint> event, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  \\n  \\n [!code-cs[System.Drawing.PensExample#2](~/add/codesnippet/csharp/p-system.drawing.pen.end_1.cs)]\\n [!code-vb[System.Drawing.PensExample#2](~/add/codesnippet/visualbasic/p-system.drawing.pen.end_1.vb)]\\n [!code-cpp[System.Drawing.PensExample#2](~/add/codesnippet/cpp/p-system.drawing.pen.end_1.cpp)]\"\n  syntax:\n    content: public System.Drawing.Drawing2D.LineCap EndCap { get; set; }\n    return:\n      type: System.Drawing.Drawing2D.LineCap\n      description: One of the <xref href=\"System.Drawing.Drawing2D.LineCap\"></xref> values that represents the cap style used at the end of lines drawn with this <xref href=\"System.Drawing.Pen\"></xref>.\n  overload: System.Drawing.Pen.EndCap*\n  exceptions:\n  - type: System.ComponentModel.InvalidEnumArgumentException\n    commentId: T:System.ComponentModel.InvalidEnumArgumentException\n    description: The specified value is not a member of <xref href=\"System.Drawing.Drawing2D.LineCap\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The EndCap property is set on an immutable <xref href=\"System.Drawing.Pen\"></xref>, such as those returned by the <xref href=\"System.Drawing.Pens\"></xref> class.\n  platform:\n  - net462\n- uid: System.Drawing.Pen.Finalize\n  id: Finalize\n  parent: System.Drawing.Pen\n  langs:\n  - csharp\n  name: Finalize()\n  nameWithType: Pen.Finalize()\n  fullName: System.Drawing.Pen.Finalize()\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.\n  syntax:\n    content: ~Pen ();\n    parameters: []\n  overload: System.Drawing.Pen.Finalize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Pen.LineJoin\n  id: LineJoin\n  parent: System.Drawing.Pen\n  langs:\n  - csharp\n  name: LineJoin\n  nameWithType: Pen.LineJoin\n  fullName: System.Drawing.Pen.LineJoin\n  type: Property\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Gets or sets the join style for the ends of two consecutive lines drawn with this <xref href=\"System.Drawing.Pen\"></xref>.\n  remarks: \"A line join is the common area that is formed by two lines whose ends meet or overlap. There are three line join styles: miter, bevel, and round.  When you specify a line join style for a <xref:System.Drawing.Pen> object, that join style will be applied to all the connected lines in any <xref:System.Drawing.Drawing2D.GraphicsPath> object drawn using that pen.The following illustration shows the results of the beveled line join example.  \\n  \\n ![Pens](~/add/media/pens5.gif \\\"Pens\\\")\"\n  example:\n  - \"The following code example demonstrates the effects of setting the <xref:System.Drawing.Pen.Width%2A> and LineJoin properties on a <xref:System.Drawing.Pen>.  \\n  \\n This example is designed to be used with Windows Forms. Paste the code into a form and call the `ShowLineJoin` method when handling the form's <xref:System.Windows.Forms.Control.Paint> event, passing `e` as <xref:System.Windows.Forms.PaintEventArgs> .  \\n  \\n [!code-cs[System.Drawing.PensExample#1](~/add/codesnippet/csharp/p-system.drawing.pen.lin_1.cs)]\\n [!code-vb[System.Drawing.PensExample#1](~/add/codesnippet/visualbasic/p-system.drawing.pen.lin_1.vb)]\\n [!code-cpp[System.Drawing.PensExample#1](~/add/codesnippet/cpp/p-system.drawing.pen.lin_1.cpp)]\"\n  syntax:\n    content: public System.Drawing.Drawing2D.LineJoin LineJoin { get; set; }\n    return:\n      type: System.Drawing.Drawing2D.LineJoin\n      description: A <xref href=\"System.Drawing.Drawing2D.LineJoin\"></xref> that represents the join style for the ends of two consecutive lines drawn with this <xref href=\"System.Drawing.Pen\"></xref>.\n  overload: System.Drawing.Pen.LineJoin*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The LineJoin property is set on an immutable <xref href=\"System.Drawing.Pen\"></xref>, such as those returned by the <xref href=\"System.Drawing.Pens\"></xref> class.\n  platform:\n  - net462\n- uid: System.Drawing.Pen.MiterLimit\n  id: MiterLimit\n  parent: System.Drawing.Pen\n  langs:\n  - csharp\n  name: MiterLimit\n  nameWithType: Pen.MiterLimit\n  fullName: System.Drawing.Pen.MiterLimit\n  type: Property\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Gets or sets the limit of the thickness of the join on a mitered corner.\n  remarks: \"The miter length is the distance from the intersection of the line walls on the inside of the join to the intersection of the line walls outside of the join. The miter length can be large when the angle between two lines is small. The miter limit is the maximum allowed ratio of miter length to stroke width. The default value is 10.0f.  \\n  \\n If the miter length of the join of the intersection exceeds the limit of the join, then the join will be beveled to keep it within the limit of the join of the intersection.\"\n  syntax:\n    content: public float MiterLimit { get; set; }\n    return:\n      type: System.Single\n      description: The limit of the thickness of the join on a mitered corner.\n  overload: System.Drawing.Pen.MiterLimit*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The MiterLimit property is set on an immutable <xref href=\"System.Drawing.Pen\"></xref>, such as those returned by the <xref href=\"System.Drawing.Pens\"></xref> class.\n  platform:\n  - net462\n- uid: System.Drawing.Pen.MultiplyTransform(System.Drawing.Drawing2D.Matrix)\n  id: MultiplyTransform(System.Drawing.Drawing2D.Matrix)\n  parent: System.Drawing.Pen\n  langs:\n  - csharp\n  name: MultiplyTransform(Matrix)\n  nameWithType: Pen.MultiplyTransform(Matrix)\n  fullName: System.Drawing.Pen.MultiplyTransform(Matrix)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Multiplies the transformation matrix for this <xref href=\"System.Drawing.Pen\"></xref> by the specified <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref>.\n  remarks: This method prepends the multiplication matrix specified in the `matrix` parameter to the transformation matrix for the multiplication operation.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a <xref:System.Drawing.Pen>.  \\n  \\n-   Draws a line to the screen.  \\n  \\n-   Multiplies the transformation matrix of the pen by the specified matrix.  \\n  \\n-   Draws a line with the transformed pen.  \\n  \\n [!code-cpp[System.Drawing.ClassicPenExamples#2](~/add/codesnippet/cpp/m-system.drawing.pen.mul_1.cpp)]\\n [!code-cs[System.Drawing.ClassicPenExamples#2](~/add/codesnippet/csharp/m-system.drawing.pen.mul_1.cs)]\\n [!code-vb[System.Drawing.ClassicPenExamples#2](~/add/codesnippet/visualbasic/m-system.drawing.pen.mul_1.vb)]\"\n  syntax:\n    content: public void MultiplyTransform (System.Drawing.Drawing2D.Matrix matrix);\n    parameters:\n    - id: matrix\n      type: System.Drawing.Drawing2D.Matrix\n      description: The <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> object by which to multiply the transformation matrix.\n  overload: System.Drawing.Pen.MultiplyTransform*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Pen.MultiplyTransform(System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.MatrixOrder)\n  id: MultiplyTransform(System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.MatrixOrder)\n  parent: System.Drawing.Pen\n  langs:\n  - csharp\n  name: MultiplyTransform(Matrix,MatrixOrder)\n  nameWithType: Pen.MultiplyTransform(Matrix,MatrixOrder)\n  fullName: System.Drawing.Pen.MultiplyTransform(Matrix,MatrixOrder)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Multiplies the transformation matrix for this <xref href=\"System.Drawing.Pen\"></xref> by the specified <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> in the specified order.\n  remarks: This method uses the <xref:System.Drawing.Drawing2D.MatrixOrder> enumeration element (either prepend or append) specified by the `order` parameter to carry out the multiplication operation.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a <xref:System.Drawing.Pen>.  \\n  \\n-   Draws a line to the screen.  \\n  \\n-   Multiplies the transformation matrix of the pen by the specified matrix.  \\n  \\n-   Draws a line with the transformed pen.  \\n  \\n [!code-cpp[System.Drawing.ClassicPenExamples#3](~/add/codesnippet/cpp/b3caf9f4-4a37-409d-bccb-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicPenExamples#3](~/add/codesnippet/csharp/b3caf9f4-4a37-409d-bccb-_1.cs)]\\n [!code-vb[System.Drawing.ClassicPenExamples#3](~/add/codesnippet/visualbasic/b3caf9f4-4a37-409d-bccb-_1.vb)]\"\n  syntax:\n    content: public void MultiplyTransform (System.Drawing.Drawing2D.Matrix matrix, System.Drawing.Drawing2D.MatrixOrder order);\n    parameters:\n    - id: matrix\n      type: System.Drawing.Drawing2D.Matrix\n      description: The <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> by which to multiply the transformation matrix.\n    - id: order\n      type: System.Drawing.Drawing2D.MatrixOrder\n      description: The order in which to perform the multiplication operation.\n  overload: System.Drawing.Pen.MultiplyTransform*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Pen.PenType\n  id: PenType\n  parent: System.Drawing.Pen\n  langs:\n  - csharp\n  name: PenType\n  nameWithType: Pen.PenType\n  fullName: System.Drawing.Pen.PenType\n  type: Property\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Gets the style of lines drawn with this <xref href=\"System.Drawing.Pen\"></xref>.\n  remarks: A <xref:System.Drawing.Pen> can draw solid lines, filled lines, or textured lines, depending on the style specified by a member of the <xref:System.Drawing.Drawing2D.PenType> enumeration.\n  syntax:\n    content: public System.Drawing.Drawing2D.PenType PenType { get; }\n    return:\n      type: System.Drawing.Drawing2D.PenType\n      description: A <xref href=\"System.Drawing.Drawing2D.PenType\"></xref> enumeration that specifies the style of lines drawn with this <xref href=\"System.Drawing.Pen\"></xref>.\n  overload: System.Drawing.Pen.PenType*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Pen.ResetTransform\n  id: ResetTransform\n  parent: System.Drawing.Pen\n  langs:\n  - csharp\n  name: ResetTransform()\n  nameWithType: Pen.ResetTransform()\n  fullName: System.Drawing.Pen.ResetTransform()\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Resets the geometric transformation matrix for this <xref href=\"System.Drawing.Pen\"></xref> to identity.\n  remarks: ''\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a <xref:System.Drawing.Pen>.  \\n  \\n-   Sets the transformation matrix of the pen to scale 2 times in the x-axis direction.  \\n  \\n-   Draws a line to the screen.  \\n  \\n-   Resets the transformation matrix to identity.  \\n  \\n-   Draws a second line to the screen.  \\n  \\n [!code-cpp[System.Drawing.ClassicPenExamples#4](~/add/codesnippet/cpp/m-system.drawing.pen.res_1.cpp)]\\n [!code-cs[System.Drawing.ClassicPenExamples#4](~/add/codesnippet/csharp/m-system.drawing.pen.res_1.cs)]\\n [!code-vb[System.Drawing.ClassicPenExamples#4](~/add/codesnippet/visualbasic/m-system.drawing.pen.res_1.vb)]\"\n  syntax:\n    content: public void ResetTransform ();\n    parameters: []\n  overload: System.Drawing.Pen.ResetTransform*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Pen.RotateTransform(System.Single)\n  id: RotateTransform(System.Single)\n  parent: System.Drawing.Pen\n  langs:\n  - csharp\n  name: RotateTransform(Single)\n  nameWithType: Pen.RotateTransform(Single)\n  fullName: System.Drawing.Pen.RotateTransform(Single)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Rotates the local geometric transformation by the specified angle. This method prepends the rotation to the transformation.\n  remarks: Because the shape of a pen is circular, a rotation does not have any visible effect unless the pen is scaled in the x- or y-axis direction.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a <xref:System.Drawing.Pen>.  \\n  \\n-   Draws a rectangle using the pen.  \\n  \\n-   Scales the pen by 2 times in the x-axis direction.  \\n  \\n-   Rotates the pen 90 degrees clockwise.  \\n  \\n-   Draws a second rectangle to demonstrate the difference.  \\n  \\n [!code-cpp[System.Drawing.ClassicPenExamples#5](~/add/codesnippet/cpp/m-system.drawing.pen.rot_1.cpp)]\\n [!code-cs[System.Drawing.ClassicPenExamples#5](~/add/codesnippet/csharp/m-system.drawing.pen.rot_1.cs)]\\n [!code-vb[System.Drawing.ClassicPenExamples#5](~/add/codesnippet/visualbasic/m-system.drawing.pen.rot_1.vb)]\"\n  syntax:\n    content: public void RotateTransform (float angle);\n    parameters:\n    - id: angle\n      type: System.Single\n      description: The angle of rotation.\n  overload: System.Drawing.Pen.RotateTransform*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Pen.RotateTransform(System.Single,System.Drawing.Drawing2D.MatrixOrder)\n  id: RotateTransform(System.Single,System.Drawing.Drawing2D.MatrixOrder)\n  parent: System.Drawing.Pen\n  langs:\n  - csharp\n  name: RotateTransform(Single,MatrixOrder)\n  nameWithType: Pen.RotateTransform(Single,MatrixOrder)\n  fullName: System.Drawing.Pen.RotateTransform(Single,MatrixOrder)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Rotates the local geometric transformation by the specified angle in the specified order.\n  remarks: Because the shape of a pen is circular, a rotation does not have any visible effect unless the pen is scaled in the x- or y-axis direction.\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a <xref:System.Drawing.Pen>.  \\n  \\n-   Scales the pen by 2 times in the x-axis direction.  \\n  \\n-   Draws a rectangle using the pen.  \\n  \\n-   Rotates the pen 90 degrees clockwise.  \\n  \\n-   Draws a second rectangle to demonstrate the difference.  \\n  \\n [!code-cpp[System.Drawing.ClassicPenExamples#6](~/add/codesnippet/cpp/35c127d1-4f45-4168-8641-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicPenExamples#6](~/add/codesnippet/csharp/35c127d1-4f45-4168-8641-_1.cs)]\\n [!code-vb[System.Drawing.ClassicPenExamples#6](~/add/codesnippet/visualbasic/35c127d1-4f45-4168-8641-_1.vb)]\"\n  syntax:\n    content: public void RotateTransform (float angle, System.Drawing.Drawing2D.MatrixOrder order);\n    parameters:\n    - id: angle\n      type: System.Single\n      description: The angle of rotation.\n    - id: order\n      type: System.Drawing.Drawing2D.MatrixOrder\n      description: A <xref href=\"System.Drawing.Drawing2D.MatrixOrder\"></xref> that specifies whether to append or prepend the rotation matrix.\n  overload: System.Drawing.Pen.RotateTransform*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Pen.ScaleTransform(System.Single,System.Single)\n  id: ScaleTransform(System.Single,System.Single)\n  parent: System.Drawing.Pen\n  langs:\n  - csharp\n  name: ScaleTransform(Single,Single)\n  nameWithType: Pen.ScaleTransform(Single,Single)\n  fullName: System.Drawing.Pen.ScaleTransform(Single,Single)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Scales the local geometric transformation by the specified factors. This method prepends the scaling matrix to the transformation.\n  remarks: ''\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n Creates a <xref:System.Drawing.Pen>.  \\n  \\n Draws a rectangle using the pen.  \\n  \\n Scales the pen by 2 times in the x-axis direction.  \\n  \\n Draws a second rectangle to demonstrate the difference.  \\n  \\n [!code-cpp[System.Drawing.ClassicPenExamples#7](~/add/codesnippet/cpp/m-system.drawing.pen.sca_1.cpp)]\\n [!code-cs[System.Drawing.ClassicPenExamples#7](~/add/codesnippet/csharp/m-system.drawing.pen.sca_1.cs)]\\n [!code-vb[System.Drawing.ClassicPenExamples#7](~/add/codesnippet/visualbasic/m-system.drawing.pen.sca_1.vb)]\"\n  syntax:\n    content: public void ScaleTransform (float sx, float sy);\n    parameters:\n    - id: sx\n      type: System.Single\n      description: The factor by which to scale the transformation in the x-axis direction.\n    - id: sy\n      type: System.Single\n      description: The factor by which to scale the transformation in the y-axis direction.\n  overload: System.Drawing.Pen.ScaleTransform*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Pen.ScaleTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)\n  id: ScaleTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)\n  parent: System.Drawing.Pen\n  langs:\n  - csharp\n  name: ScaleTransform(Single,Single,MatrixOrder)\n  nameWithType: Pen.ScaleTransform(Single,Single,MatrixOrder)\n  fullName: System.Drawing.Pen.ScaleTransform(Single,Single,MatrixOrder)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Scales the local geometric transformation by the specified factors in the specified order.\n  remarks: ''\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \\n  \\n-   Creates a <xref:System.Drawing.Pen>.  \\n  \\n-   Draws a rectangle using the pen.  \\n  \\n-   Scales the pen by 2 times in the x-axis direction.  \\n  \\n-   Draws a second rectangle to demonstrate the difference.  \\n  \\n [!code-cpp[System.Drawing.ClassicPenExamples#8](~/add/codesnippet/cpp/f408f2ab-3827-481d-becb-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicPenExamples#8](~/add/codesnippet/csharp/f408f2ab-3827-481d-becb-_1.cs)]\\n [!code-vb[System.Drawing.ClassicPenExamples#8](~/add/codesnippet/visualbasic/f408f2ab-3827-481d-becb-_1.vb)]\"\n  syntax:\n    content: public void ScaleTransform (float sx, float sy, System.Drawing.Drawing2D.MatrixOrder order);\n    parameters:\n    - id: sx\n      type: System.Single\n      description: The factor by which to scale the transformation in the x-axis direction.\n    - id: sy\n      type: System.Single\n      description: The factor by which to scale the transformation in the y-axis direction.\n    - id: order\n      type: System.Drawing.Drawing2D.MatrixOrder\n      description: A <xref href=\"System.Drawing.Drawing2D.MatrixOrder\"></xref> that specifies whether to append or prepend the scaling matrix.\n  overload: System.Drawing.Pen.ScaleTransform*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Pen.SetLineCap(System.Drawing.Drawing2D.LineCap,System.Drawing.Drawing2D.LineCap,System.Drawing.Drawing2D.DashCap)\n  id: SetLineCap(System.Drawing.Drawing2D.LineCap,System.Drawing.Drawing2D.LineCap,System.Drawing.Drawing2D.DashCap)\n  parent: System.Drawing.Pen\n  langs:\n  - csharp\n  name: SetLineCap(LineCap,LineCap,DashCap)\n  nameWithType: Pen.SetLineCap(LineCap,LineCap,DashCap)\n  fullName: System.Drawing.Pen.SetLineCap(LineCap,LineCap,DashCap)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Sets the values that determine the style of cap used to end lines drawn by this <xref href=\"System.Drawing.Pen\"></xref>.\n  remarks: ''\n  example:\n  - \"The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code creates a <xref:System.Drawing.Pen> and sets it to draw arrow anchor caps at the beginning of lines:  \\n  \\n [!code-cpp[System.Drawing.ClassicPenExamples#9](~/add/codesnippet/cpp/40b79849-2bf1-4135-844f-_1.cpp)]\\n [!code-cs[System.Drawing.ClassicPenExamples#9](~/add/codesnippet/csharp/40b79849-2bf1-4135-844f-_1.cs)]\\n [!code-vb[System.Drawing.ClassicPenExamples#9](~/add/codesnippet/visualbasic/40b79849-2bf1-4135-844f-_1.vb)]\"\n  syntax:\n    content: public void SetLineCap (System.Drawing.Drawing2D.LineCap startCap, System.Drawing.Drawing2D.LineCap endCap, System.Drawing.Drawing2D.DashCap dashCap);\n    parameters:\n    - id: startCap\n      type: System.Drawing.Drawing2D.LineCap\n      description: A <xref href=\"System.Drawing.Drawing2D.LineCap\"></xref> that represents the cap style to use at the beginning of lines drawn with this <xref href=\"System.Drawing.Pen\"></xref>.\n    - id: endCap\n      type: System.Drawing.Drawing2D.LineCap\n      description: A <xref href=\"System.Drawing.Drawing2D.LineCap\"></xref> that represents the cap style to use at the end of lines drawn with this <xref href=\"System.Drawing.Pen\"></xref>.\n    - id: dashCap\n      type: System.Drawing.Drawing2D.DashCap\n      description: A <xref href=\"System.Drawing.Drawing2D.LineCap\"></xref> that represents the cap style to use at the beginning or end of dashed lines drawn with this <xref href=\"System.Drawing.Pen\"></xref>.\n  overload: System.Drawing.Pen.SetLineCap*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Pen.StartCap\n  id: StartCap\n  parent: System.Drawing.Pen\n  langs:\n  - csharp\n  name: StartCap\n  nameWithType: Pen.StartCap\n  fullName: System.Drawing.Pen.StartCap\n  type: Property\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Gets or sets the cap style used at the beginning of lines drawn with this <xref href=\"System.Drawing.Pen\"></xref>.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates the effects of setting the StartCap and <xref:System.Drawing.Pen.EndCap%2A> properties on a <xref:System.Drawing.Pen>.  \\n  \\n This example is designed to be used with Windows Forms. Paste the code into a form and call the `ShowStartAndEndCaps` method when handling the form's <xref:System.Windows.Forms.Control.Paint> event, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  \\n  \\n [!code-cs[System.Drawing.PensExample#2](~/add/codesnippet/csharp/p-system.drawing.pen.sta_1.cs)]\\n [!code-vb[System.Drawing.PensExample#2](~/add/codesnippet/visualbasic/p-system.drawing.pen.sta_1.vb)]\\n [!code-cpp[System.Drawing.PensExample#2](~/add/codesnippet/cpp/p-system.drawing.pen.sta_1.cpp)]\"\n  syntax:\n    content: public System.Drawing.Drawing2D.LineCap StartCap { get; set; }\n    return:\n      type: System.Drawing.Drawing2D.LineCap\n      description: One of the <xref href=\"System.Drawing.Drawing2D.LineCap\"></xref> values that represents the cap style used at the beginning of lines drawn with this <xref href=\"System.Drawing.Pen\"></xref>.\n  overload: System.Drawing.Pen.StartCap*\n  exceptions:\n  - type: System.ComponentModel.InvalidEnumArgumentException\n    commentId: T:System.ComponentModel.InvalidEnumArgumentException\n    description: The specified value is not a member of <xref href=\"System.Drawing.Drawing2D.LineCap\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The StartCap property is set on an immutable <xref href=\"System.Drawing.Pen\"></xref>, such as those returned by the <xref href=\"System.Drawing.Pens\"></xref> class.\n  platform:\n  - net462\n- uid: System.Drawing.Pen.Transform\n  id: Transform\n  parent: System.Drawing.Pen\n  langs:\n  - csharp\n  name: Transform\n  nameWithType: Pen.Transform\n  fullName: System.Drawing.Pen.Transform\n  type: Property\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Gets or sets a copy of the geometric transformation for this <xref href=\"System.Drawing.Pen\"></xref>.\n  remarks: This property defines an elliptical shape for the pen tip. This ellipse is obtained from the default circular shape by applying the transformation matrix. Note that the translation portion of the matrix is ignored. Because the matrix returned and by the Transform property is a copy of the pen's geometric transform, you should dispose of the matrix when you no longer need it.\n  syntax:\n    content: public System.Drawing.Drawing2D.Matrix Transform { get; set; }\n    return:\n      type: System.Drawing.Drawing2D.Matrix\n      description: A copy of the <xref href=\"System.Drawing.Drawing2D.Matrix\"></xref> that represents the geometric transformation for this <xref href=\"System.Drawing.Pen\"></xref>.\n  overload: System.Drawing.Pen.Transform*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The Transform property is set on an immutable <xref href=\"System.Drawing.Pen\"></xref>, such as those returned by the <xref href=\"System.Drawing.Pens\"></xref> class.\n  platform:\n  - net462\n- uid: System.Drawing.Pen.TranslateTransform(System.Single,System.Single)\n  id: TranslateTransform(System.Single,System.Single)\n  parent: System.Drawing.Pen\n  langs:\n  - csharp\n  name: TranslateTransform(Single,Single)\n  nameWithType: Pen.TranslateTransform(Single,Single)\n  fullName: System.Drawing.Pen.TranslateTransform(Single,Single)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Translates the local geometric transformation by the specified dimensions. This method prepends the translation to the transformation.\n  syntax:\n    content: public void TranslateTransform (float dx, float dy);\n    parameters:\n    - id: dx\n      type: System.Single\n      description: The value of the translation in x.\n    - id: dy\n      type: System.Single\n      description: The value of the translation in y.\n  overload: System.Drawing.Pen.TranslateTransform*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Pen.TranslateTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)\n  id: TranslateTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)\n  parent: System.Drawing.Pen\n  langs:\n  - csharp\n  name: TranslateTransform(Single,Single,MatrixOrder)\n  nameWithType: Pen.TranslateTransform(Single,Single,MatrixOrder)\n  fullName: System.Drawing.Pen.TranslateTransform(Single,Single,MatrixOrder)\n  type: Method\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Translates the local geometric transformation by the specified dimensions in the specified order.\n  syntax:\n    content: public void TranslateTransform (float dx, float dy, System.Drawing.Drawing2D.MatrixOrder order);\n    parameters:\n    - id: dx\n      type: System.Single\n      description: The value of the translation in x.\n    - id: dy\n      type: System.Single\n      description: The value of the translation in y.\n    - id: order\n      type: System.Drawing.Drawing2D.MatrixOrder\n      description: The order (prepend or append) in which to apply the translation.\n  overload: System.Drawing.Pen.TranslateTransform*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Drawing.Pen.Width\n  id: Width\n  parent: System.Drawing.Pen\n  langs:\n  - csharp\n  name: Width\n  nameWithType: Pen.Width\n  fullName: System.Drawing.Pen.Width\n  type: Property\n  assemblies:\n  - System.Drawing\n  namespace: System.Drawing\n  summary: Gets or sets the width of this <xref href=\"System.Drawing.Pen\"></xref>, in units of the <xref href=\"System.Drawing.Graphics\"></xref> object used for drawing.\n  remarks: You can access the unit of measure of the <xref:System.Drawing.Graphics> object using its <xref:System.Drawing.Graphics.PageUnit%2A> property. The unit of measure is typically pixels. A Width of 0 will result in the <xref:System.Drawing.Pen> drawing as if the Width were 1.\n  example:\n  - \"The following code example demonstrates the effects of setting the Width and <xref:System.Drawing.Pen.LineJoin%2A> properties on a <xref:System.Drawing.Pen>.  \\n  \\n This example is designed to be used with Windows Forms. Paste the code into a form and call the `ShowLineJoin` method when handling the form's <xref:System.Windows.Forms.Control.Paint> event, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  \\n  \\n [!code-cs[System.Drawing.PensExample#1](~/add/codesnippet/csharp/p-system.drawing.pen.width_1.cs)]\\n [!code-vb[System.Drawing.PensExample#1](~/add/codesnippet/visualbasic/p-system.drawing.pen.width_1.vb)]\\n [!code-cpp[System.Drawing.PensExample#1](~/add/codesnippet/cpp/p-system.drawing.pen.width_1.cpp)]\"\n  syntax:\n    content: public float Width { get; set; }\n    return:\n      type: System.Single\n      description: The width of this <xref href=\"System.Drawing.Pen\"></xref>.\n  overload: System.Drawing.Pen.Width*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The Width property is set on an immutable <xref href=\"System.Drawing.Pen\"></xref>, such as those returned by the <xref href=\"System.Drawing.Pens\"></xref> class.\n  platform:\n  - net462\nreferences:\n- uid: System.MarshalByRefObject\n  isExternal: false\n  name: System.MarshalByRefObject\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ComponentModel.InvalidEnumArgumentException\n  parent: System.ComponentModel\n  isExternal: false\n  name: InvalidEnumArgumentException\n  nameWithType: InvalidEnumArgumentException\n  fullName: System.ComponentModel.InvalidEnumArgumentException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.Drawing.Pen.#ctor(System.Drawing.Brush)\n  parent: System.Drawing.Pen\n  isExternal: false\n  name: Pen(Brush)\n  nameWithType: Pen.Pen(Brush)\n  fullName: System.Drawing.Pen.Pen(Brush)\n- uid: System.Drawing.Brush\n  parent: System.Drawing\n  isExternal: false\n  name: Brush\n  nameWithType: Brush\n  fullName: System.Drawing.Brush\n- uid: System.Drawing.Pen.#ctor(System.Drawing.Color)\n  parent: System.Drawing.Pen\n  isExternal: false\n  name: Pen(Color)\n  nameWithType: Pen.Pen(Color)\n  fullName: System.Drawing.Pen.Pen(Color)\n- uid: System.Drawing.Color\n  parent: System.Drawing\n  isExternal: false\n  name: Color\n  nameWithType: Color\n  fullName: System.Drawing.Color\n- uid: System.Drawing.Pen.#ctor(System.Drawing.Brush,System.Single)\n  parent: System.Drawing.Pen\n  isExternal: false\n  name: Pen(Brush,Single)\n  nameWithType: Pen.Pen(Brush,Single)\n  fullName: System.Drawing.Pen.Pen(Brush,Single)\n- uid: System.Single\n  parent: System\n  isExternal: true\n  name: Single\n  nameWithType: Single\n  fullName: System.Single\n- uid: System.Drawing.Pen.#ctor(System.Drawing.Color,System.Single)\n  parent: System.Drawing.Pen\n  isExternal: false\n  name: Pen(Color,Single)\n  nameWithType: Pen.Pen(Color,Single)\n  fullName: System.Drawing.Pen.Pen(Color,Single)\n- uid: System.Drawing.Pen.Alignment\n  parent: System.Drawing.Pen\n  isExternal: false\n  name: Alignment\n  nameWithType: Pen.Alignment\n  fullName: System.Drawing.Pen.Alignment\n- uid: System.Drawing.Drawing2D.PenAlignment\n  parent: System.Drawing.Drawing2D\n  isExternal: false\n  name: PenAlignment\n  nameWithType: PenAlignment\n  fullName: System.Drawing.Drawing2D.PenAlignment\n- uid: System.Drawing.Pen.Brush\n  parent: System.Drawing.Pen\n  isExternal: false\n  name: Brush\n  nameWithType: Pen.Brush\n  fullName: System.Drawing.Pen.Brush\n- uid: System.Drawing.Pen.Clone\n  parent: System.Drawing.Pen\n  isExternal: false\n  name: Clone()\n  nameWithType: Pen.Clone()\n  fullName: System.Drawing.Pen.Clone()\n- uid: System.Object\n  parent: System\n  isExternal: true\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Drawing.Pen.Color\n  parent: System.Drawing.Pen\n  isExternal: false\n  name: Color\n  nameWithType: Pen.Color\n  fullName: System.Drawing.Pen.Color\n- uid: System.Drawing.Pen.CompoundArray\n  parent: System.Drawing.Pen\n  isExternal: false\n  name: CompoundArray\n  nameWithType: Pen.CompoundArray\n  fullName: System.Drawing.Pen.CompoundArray\n- uid: System.Single[]\n  parent: System\n  isExternal: true\n  name: Single\n  nameWithType: Single\n  fullName: System.Single[]\n  spec.csharp:\n  - uid: System.Single\n    name: Single\n    nameWithType: Single\n    fullName: Single[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Drawing.Pen.CustomEndCap\n  parent: System.Drawing.Pen\n  isExternal: false\n  name: CustomEndCap\n  nameWithType: Pen.CustomEndCap\n  fullName: System.Drawing.Pen.CustomEndCap\n- uid: System.Drawing.Drawing2D.CustomLineCap\n  parent: System.Drawing.Drawing2D\n  isExternal: false\n  name: CustomLineCap\n  nameWithType: CustomLineCap\n  fullName: System.Drawing.Drawing2D.CustomLineCap\n- uid: System.Drawing.Pen.CustomStartCap\n  parent: System.Drawing.Pen\n  isExternal: false\n  name: CustomStartCap\n  nameWithType: Pen.CustomStartCap\n  fullName: System.Drawing.Pen.CustomStartCap\n- uid: System.Drawing.Pen.DashCap\n  parent: System.Drawing.Pen\n  isExternal: false\n  name: DashCap\n  nameWithType: Pen.DashCap\n  fullName: System.Drawing.Pen.DashCap\n- uid: System.Drawing.Drawing2D.DashCap\n  parent: System.Drawing.Drawing2D\n  isExternal: false\n  name: DashCap\n  nameWithType: DashCap\n  fullName: System.Drawing.Drawing2D.DashCap\n- uid: System.Drawing.Pen.DashOffset\n  parent: System.Drawing.Pen\n  isExternal: false\n  name: DashOffset\n  nameWithType: Pen.DashOffset\n  fullName: System.Drawing.Pen.DashOffset\n- uid: System.Drawing.Pen.DashPattern\n  parent: System.Drawing.Pen\n  isExternal: false\n  name: DashPattern\n  nameWithType: Pen.DashPattern\n  fullName: System.Drawing.Pen.DashPattern\n- uid: System.Drawing.Pen.DashStyle\n  parent: System.Drawing.Pen\n  isExternal: false\n  name: DashStyle\n  nameWithType: Pen.DashStyle\n  fullName: System.Drawing.Pen.DashStyle\n- uid: System.Drawing.Drawing2D.DashStyle\n  parent: System.Drawing.Drawing2D\n  isExternal: false\n  name: DashStyle\n  nameWithType: DashStyle\n  fullName: System.Drawing.Drawing2D.DashStyle\n- uid: System.Drawing.Pen.Dispose\n  parent: System.Drawing.Pen\n  isExternal: false\n  name: Dispose()\n  nameWithType: Pen.Dispose()\n  fullName: System.Drawing.Pen.Dispose()\n- uid: System.Drawing.Pen.EndCap\n  parent: System.Drawing.Pen\n  isExternal: false\n  name: EndCap\n  nameWithType: Pen.EndCap\n  fullName: System.Drawing.Pen.EndCap\n- uid: System.Drawing.Drawing2D.LineCap\n  parent: System.Drawing.Drawing2D\n  isExternal: false\n  name: LineCap\n  nameWithType: LineCap\n  fullName: System.Drawing.Drawing2D.LineCap\n- uid: System.Drawing.Pen.Finalize\n  parent: System.Drawing.Pen\n  isExternal: false\n  name: Finalize()\n  nameWithType: Pen.Finalize()\n  fullName: System.Drawing.Pen.Finalize()\n- uid: System.Drawing.Pen.LineJoin\n  parent: System.Drawing.Pen\n  isExternal: false\n  name: LineJoin\n  nameWithType: Pen.LineJoin\n  fullName: System.Drawing.Pen.LineJoin\n- uid: System.Drawing.Drawing2D.LineJoin\n  parent: System.Drawing.Drawing2D\n  isExternal: false\n  name: LineJoin\n  nameWithType: LineJoin\n  fullName: System.Drawing.Drawing2D.LineJoin\n- uid: System.Drawing.Pen.MiterLimit\n  parent: System.Drawing.Pen\n  isExternal: false\n  name: MiterLimit\n  nameWithType: Pen.MiterLimit\n  fullName: System.Drawing.Pen.MiterLimit\n- uid: System.Drawing.Pen.MultiplyTransform(System.Drawing.Drawing2D.Matrix)\n  parent: System.Drawing.Pen\n  isExternal: false\n  name: MultiplyTransform(Matrix)\n  nameWithType: Pen.MultiplyTransform(Matrix)\n  fullName: System.Drawing.Pen.MultiplyTransform(Matrix)\n- uid: System.Drawing.Drawing2D.Matrix\n  parent: System.Drawing.Drawing2D\n  isExternal: false\n  name: Matrix\n  nameWithType: Matrix\n  fullName: System.Drawing.Drawing2D.Matrix\n- uid: System.Drawing.Pen.MultiplyTransform(System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.MatrixOrder)\n  parent: System.Drawing.Pen\n  isExternal: false\n  name: MultiplyTransform(Matrix,MatrixOrder)\n  nameWithType: Pen.MultiplyTransform(Matrix,MatrixOrder)\n  fullName: System.Drawing.Pen.MultiplyTransform(Matrix,MatrixOrder)\n- uid: System.Drawing.Drawing2D.MatrixOrder\n  parent: System.Drawing.Drawing2D\n  isExternal: false\n  name: MatrixOrder\n  nameWithType: MatrixOrder\n  fullName: System.Drawing.Drawing2D.MatrixOrder\n- uid: System.Drawing.Pen.PenType\n  parent: System.Drawing.Pen\n  isExternal: false\n  name: PenType\n  nameWithType: Pen.PenType\n  fullName: System.Drawing.Pen.PenType\n- uid: System.Drawing.Drawing2D.PenType\n  parent: System.Drawing.Drawing2D\n  isExternal: false\n  name: PenType\n  nameWithType: PenType\n  fullName: System.Drawing.Drawing2D.PenType\n- uid: System.Drawing.Pen.ResetTransform\n  parent: System.Drawing.Pen\n  isExternal: false\n  name: ResetTransform()\n  nameWithType: Pen.ResetTransform()\n  fullName: System.Drawing.Pen.ResetTransform()\n- uid: System.Drawing.Pen.RotateTransform(System.Single)\n  parent: System.Drawing.Pen\n  isExternal: false\n  name: RotateTransform(Single)\n  nameWithType: Pen.RotateTransform(Single)\n  fullName: System.Drawing.Pen.RotateTransform(Single)\n- uid: System.Drawing.Pen.RotateTransform(System.Single,System.Drawing.Drawing2D.MatrixOrder)\n  parent: System.Drawing.Pen\n  isExternal: false\n  name: RotateTransform(Single,MatrixOrder)\n  nameWithType: Pen.RotateTransform(Single,MatrixOrder)\n  fullName: System.Drawing.Pen.RotateTransform(Single,MatrixOrder)\n- uid: System.Drawing.Pen.ScaleTransform(System.Single,System.Single)\n  parent: System.Drawing.Pen\n  isExternal: false\n  name: ScaleTransform(Single,Single)\n  nameWithType: Pen.ScaleTransform(Single,Single)\n  fullName: System.Drawing.Pen.ScaleTransform(Single,Single)\n- uid: System.Drawing.Pen.ScaleTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)\n  parent: System.Drawing.Pen\n  isExternal: false\n  name: ScaleTransform(Single,Single,MatrixOrder)\n  nameWithType: Pen.ScaleTransform(Single,Single,MatrixOrder)\n  fullName: System.Drawing.Pen.ScaleTransform(Single,Single,MatrixOrder)\n- uid: System.Drawing.Pen.SetLineCap(System.Drawing.Drawing2D.LineCap,System.Drawing.Drawing2D.LineCap,System.Drawing.Drawing2D.DashCap)\n  parent: System.Drawing.Pen\n  isExternal: false\n  name: SetLineCap(LineCap,LineCap,DashCap)\n  nameWithType: Pen.SetLineCap(LineCap,LineCap,DashCap)\n  fullName: System.Drawing.Pen.SetLineCap(LineCap,LineCap,DashCap)\n- uid: System.Drawing.Pen.StartCap\n  parent: System.Drawing.Pen\n  isExternal: false\n  name: StartCap\n  nameWithType: Pen.StartCap\n  fullName: System.Drawing.Pen.StartCap\n- uid: System.Drawing.Pen.Transform\n  parent: System.Drawing.Pen\n  isExternal: false\n  name: Transform\n  nameWithType: Pen.Transform\n  fullName: System.Drawing.Pen.Transform\n- uid: System.Drawing.Pen.TranslateTransform(System.Single,System.Single)\n  parent: System.Drawing.Pen\n  isExternal: false\n  name: TranslateTransform(Single,Single)\n  nameWithType: Pen.TranslateTransform(Single,Single)\n  fullName: System.Drawing.Pen.TranslateTransform(Single,Single)\n- uid: System.Drawing.Pen.TranslateTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)\n  parent: System.Drawing.Pen\n  isExternal: false\n  name: TranslateTransform(Single,Single,MatrixOrder)\n  nameWithType: Pen.TranslateTransform(Single,Single,MatrixOrder)\n  fullName: System.Drawing.Pen.TranslateTransform(Single,Single,MatrixOrder)\n- uid: System.Drawing.Pen.Width\n  parent: System.Drawing.Pen\n  isExternal: false\n  name: Width\n  nameWithType: Pen.Width\n  fullName: System.Drawing.Pen.Width\n- uid: System.Drawing.Pen.#ctor*\n  parent: System.Drawing.Pen\n  isExternal: false\n  name: Pen\n  nameWithType: Pen.Pen\n- uid: System.Drawing.Pen.Alignment*\n  parent: System.Drawing.Pen\n  isExternal: false\n  name: Alignment\n  nameWithType: Pen.Alignment\n- uid: System.Drawing.Pen.Brush*\n  parent: System.Drawing.Pen\n  isExternal: false\n  name: Brush\n  nameWithType: Pen.Brush\n- uid: System.Drawing.Pen.Clone*\n  parent: System.Drawing.Pen\n  isExternal: false\n  name: Clone\n  nameWithType: Pen.Clone\n- uid: System.Drawing.Pen.Color*\n  parent: System.Drawing.Pen\n  isExternal: false\n  name: Color\n  nameWithType: Pen.Color\n- uid: System.Drawing.Pen.CompoundArray*\n  parent: System.Drawing.Pen\n  isExternal: false\n  name: CompoundArray\n  nameWithType: Pen.CompoundArray\n- uid: System.Drawing.Pen.CustomEndCap*\n  parent: System.Drawing.Pen\n  isExternal: false\n  name: CustomEndCap\n  nameWithType: Pen.CustomEndCap\n- uid: System.Drawing.Pen.CustomStartCap*\n  parent: System.Drawing.Pen\n  isExternal: false\n  name: CustomStartCap\n  nameWithType: Pen.CustomStartCap\n- uid: System.Drawing.Pen.DashCap*\n  parent: System.Drawing.Pen\n  isExternal: false\n  name: DashCap\n  nameWithType: Pen.DashCap\n- uid: System.Drawing.Pen.DashOffset*\n  parent: System.Drawing.Pen\n  isExternal: false\n  name: DashOffset\n  nameWithType: Pen.DashOffset\n- uid: System.Drawing.Pen.DashPattern*\n  parent: System.Drawing.Pen\n  isExternal: false\n  name: DashPattern\n  nameWithType: Pen.DashPattern\n- uid: System.Drawing.Pen.DashStyle*\n  parent: System.Drawing.Pen\n  isExternal: false\n  name: DashStyle\n  nameWithType: Pen.DashStyle\n- uid: System.Drawing.Pen.Dispose*\n  parent: System.Drawing.Pen\n  isExternal: false\n  name: Dispose\n  nameWithType: Pen.Dispose\n- uid: System.Drawing.Pen.EndCap*\n  parent: System.Drawing.Pen\n  isExternal: false\n  name: EndCap\n  nameWithType: Pen.EndCap\n- uid: System.Drawing.Pen.Finalize*\n  parent: System.Drawing.Pen\n  isExternal: false\n  name: Finalize\n  nameWithType: Pen.Finalize\n- uid: System.Drawing.Pen.LineJoin*\n  parent: System.Drawing.Pen\n  isExternal: false\n  name: LineJoin\n  nameWithType: Pen.LineJoin\n- uid: System.Drawing.Pen.MiterLimit*\n  parent: System.Drawing.Pen\n  isExternal: false\n  name: MiterLimit\n  nameWithType: Pen.MiterLimit\n- uid: System.Drawing.Pen.MultiplyTransform*\n  parent: System.Drawing.Pen\n  isExternal: false\n  name: MultiplyTransform\n  nameWithType: Pen.MultiplyTransform\n- uid: System.Drawing.Pen.PenType*\n  parent: System.Drawing.Pen\n  isExternal: false\n  name: PenType\n  nameWithType: Pen.PenType\n- uid: System.Drawing.Pen.ResetTransform*\n  parent: System.Drawing.Pen\n  isExternal: false\n  name: ResetTransform\n  nameWithType: Pen.ResetTransform\n- uid: System.Drawing.Pen.RotateTransform*\n  parent: System.Drawing.Pen\n  isExternal: false\n  name: RotateTransform\n  nameWithType: Pen.RotateTransform\n- uid: System.Drawing.Pen.ScaleTransform*\n  parent: System.Drawing.Pen\n  isExternal: false\n  name: ScaleTransform\n  nameWithType: Pen.ScaleTransform\n- uid: System.Drawing.Pen.SetLineCap*\n  parent: System.Drawing.Pen\n  isExternal: false\n  name: SetLineCap\n  nameWithType: Pen.SetLineCap\n- uid: System.Drawing.Pen.StartCap*\n  parent: System.Drawing.Pen\n  isExternal: false\n  name: StartCap\n  nameWithType: Pen.StartCap\n- uid: System.Drawing.Pen.Transform*\n  parent: System.Drawing.Pen\n  isExternal: false\n  name: Transform\n  nameWithType: Pen.Transform\n- uid: System.Drawing.Pen.TranslateTransform*\n  parent: System.Drawing.Pen\n  isExternal: false\n  name: TranslateTransform\n  nameWithType: Pen.TranslateTransform\n- uid: System.Drawing.Pen.Width*\n  parent: System.Drawing.Pen\n  isExternal: false\n  name: Width\n  nameWithType: Pen.Width\n"}