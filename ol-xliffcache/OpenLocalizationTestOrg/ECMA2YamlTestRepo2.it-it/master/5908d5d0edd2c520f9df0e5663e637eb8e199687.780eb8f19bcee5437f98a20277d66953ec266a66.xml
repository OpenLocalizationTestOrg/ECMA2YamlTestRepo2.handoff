{"nodes":[{"pos":[2112,2177],"content":"Makes a code block transactional. This class cannot be inherited.","needQuote":true,"needEscape":true,"nodes":[{"content":"Makes a code block transactional. This class cannot be inherited.","pos":[0,65],"nodes":[{"content":"Makes a code block transactional.","pos":[0,33]},{"content":"This class cannot be inherited.","pos":[34,65]}]}]},{"pos":[2190,5554],"content":"The <xref:System.Transactions> infrastructure provides both an explicit programming model based on the <xref:System.Transactions.Transaction> class, as well as an implicit programming model using the TransactionScope class, in which transactions are automatically managed by the infrastructure.      > [!IMPORTANT] >  It is recommended that you create implicit transactions using the TransactionScope class, so that the ambient transaction context is automatically managed for you. You should also use the TransactionScope and <xref:System.Transactions.DependentTransaction> class for applications that require the use of the same transaction across multiple function calls or multiple thread calls. For more information on this model, see the [Implementing An Implicit Transaction Using Transaction Scope](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199) topic. For more information on writing a transactional application, see [Writing A Transactional Application](http://msdn.microsoft.com/en-us/4a7cc4d1-0891-4605-941f-a933b9ce5bc8).       Upon instantiating a TransactionScope by the `new` statement, the transaction manager determines which transaction to participate in. Once determined, the scope always participates in that transaction. The decision is based on two factors: whether an ambient transaction is present and the value of the `TransactionScopeOption` parameter in the constructor.  The ambient transaction is the transaction your code executes in. You can obtain a reference to the ambient transaction by calling the static <xref:System.Transactions.Transaction.Current%2A> property of the <xref:System.Transactions.Transaction> class. For more information on how this parameter is used, please see the \"Transaction Flow Management\" section of the [Implementing An Implicit Transaction Using Transaction Scope](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199) topic.       If no exception occurs within the transaction scope (that is, between the initialization of the TransactionScope object and the calling of its <xref:System.Transactions.TransactionScope.Dispose%2A> method), then the transaction in which the scope participates is allowed to proceed. If an exception does occur within the transaction scope, the transaction in which it participates will be rolled back.       When your application completes all work it wants to perform in a transaction, you should call the <xref:System.Transactions.TransactionScope.Complete%2A> method only once to inform that transaction manager that it is acceptable to commit the transaction. Failing to call this method aborts the transaction.       A call to the <xref:System.Transactions.TransactionScope.Dispose%2A> method marks the end of the transaction scope. Exceptions that occur after calling this method may not affect the transaction.       If you modify the value of <xref:System.Transactions.Transaction.Current%2A> inside a scope, an exception is thrown when <xref:System.Transactions.TransactionScope.Dispose%2A> is called. However, at the end of the scope, the previous value is restored. In addition, if you call <xref:System.Transactions.TransactionScope.Dispose%2A> on <xref:System.Transactions.Transaction.Current%2A> inside a transaction scope that created the transaction, the transaction aborts at the end of the scope.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.Transactions&gt; infrastructure provides both an explicit programming model based on the &lt;xref:System.Transactions.Transaction&gt; class, as well as an implicit programming model using the TransactionScope class, in which transactions are automatically managed by the infrastructure.","pos":[0,294],"source":"The <xref:System.Transactions> infrastructure provides both an explicit programming model based on the <xref:System.Transactions.Transaction> class, as well as an implicit programming model using the TransactionScope class, in which transactions are automatically managed by the infrastructure."},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  It is recommended that you create implicit transactions using the TransactionScope class, so that the ambient transaction context is automatically managed for you.","pos":[300,481],"source":"      > [!IMPORTANT] >  It is recommended that you create implicit transactions using the TransactionScope class, so that the ambient transaction context is automatically managed for you."},{"content":"You should also use the TransactionScope and &lt;xref:System.Transactions.DependentTransaction&gt; class for applications that require the use of the same transaction across multiple function calls or multiple thread calls.","pos":[482,699],"source":" You should also use the TransactionScope and <xref:System.Transactions.DependentTransaction> class for applications that require the use of the same transaction across multiple function calls or multiple thread calls."},{"content":"For more information on this model, see the <bpt id=\"p1\">[</bpt>Implementing An Implicit Transaction Using Transaction Scope<ept id=\"p1\">](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199)</ept> topic.","pos":[700,883],"source":" For more information on this model, see the [Implementing An Implicit Transaction Using Transaction Scope](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199) topic."},{"content":"For more information on writing a transactional application, see <bpt id=\"p1\">[</bpt>Writing A Transactional Application<ept id=\"p1\">](http://msdn.microsoft.com/en-us/4a7cc4d1-0891-4605-941f-a933b9ce5bc8)</ept>.","pos":[884,1057],"source":" For more information on writing a transactional application, see [Writing A Transactional Application](http://msdn.microsoft.com/en-us/4a7cc4d1-0891-4605-941f-a933b9ce5bc8)."},{"content":"Upon instantiating a TransactionScope by the <ph id=\"ph1\">`new`</ph> statement, the transaction manager determines which transaction to participate in.","pos":[1064,1197],"source":"       Upon instantiating a TransactionScope by the `new` statement, the transaction manager determines which transaction to participate in."},{"content":"Once determined, the scope always participates in that transaction.","pos":[1198,1265]},{"content":"The decision is based on two factors: whether an ambient transaction is present and the value of the <ph id=\"ph1\">`TransactionScopeOption`</ph> parameter in the constructor.","pos":[1266,1421],"source":" The decision is based on two factors: whether an ambient transaction is present and the value of the `TransactionScopeOption` parameter in the constructor."},{"content":"The ambient transaction is the transaction your code executes in.","pos":[1423,1488]},{"content":"You can obtain a reference to the ambient transaction by calling the static &lt;xref:System.Transactions.Transaction.Current%2A&gt; property of the &lt;xref:System.Transactions.Transaction&gt; class.","pos":[1489,1676],"source":" You can obtain a reference to the ambient transaction by calling the static <xref:System.Transactions.Transaction.Current%2A> property of the <xref:System.Transactions.Transaction> class."},{"content":"For more information on how this parameter is used, please see the \"Transaction Flow Management\" section of the <bpt id=\"p1\">[</bpt>Implementing An Implicit Transaction Using Transaction Scope<ept id=\"p1\">](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199)</ept> topic.","pos":[1677,1928],"source":" For more information on how this parameter is used, please see the \"Transaction Flow Management\" section of the [Implementing An Implicit Transaction Using Transaction Scope](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199) topic."},{"content":"If no exception occurs within the transaction scope (that is, between the initialization of the TransactionScope object and the calling of its &lt;xref:System.Transactions.TransactionScope.Dispose%2A&gt; method), then the transaction in which the scope participates is allowed to proceed.","pos":[1935,2217],"source":"       If no exception occurs within the transaction scope (that is, between the initialization of the TransactionScope object and the calling of its <xref:System.Transactions.TransactionScope.Dispose%2A> method), then the transaction in which the scope participates is allowed to proceed."},{"content":"If an exception does occur within the transaction scope, the transaction in which it participates will be rolled back.","pos":[2218,2336]},{"content":"When your application completes all work it wants to perform in a transaction, you should call the &lt;xref:System.Transactions.TransactionScope.Complete%2A&gt; method only once to inform that transaction manager that it is acceptable to commit the transaction.","pos":[2343,2598],"source":"       When your application completes all work it wants to perform in a transaction, you should call the <xref:System.Transactions.TransactionScope.Complete%2A> method only once to inform that transaction manager that it is acceptable to commit the transaction."},{"content":"Failing to call this method aborts the transaction.","pos":[2599,2650]},{"content":"A call to the &lt;xref:System.Transactions.TransactionScope.Dispose%2A&gt; method marks the end of the transaction scope.","pos":[2657,2772],"source":"       A call to the <xref:System.Transactions.TransactionScope.Dispose%2A> method marks the end of the transaction scope."},{"content":"Exceptions that occur after calling this method may not affect the transaction.","pos":[2773,2852]},{"content":"If you modify the value of &lt;xref:System.Transactions.Transaction.Current%2A&gt; inside a scope, an exception is thrown when &lt;xref:System.Transactions.TransactionScope.Dispose%2A&gt; is called.","pos":[2859,3045],"source":"       If you modify the value of <xref:System.Transactions.Transaction.Current%2A> inside a scope, an exception is thrown when <xref:System.Transactions.TransactionScope.Dispose%2A> is called."},{"content":"However, at the end of the scope, the previous value is restored.","pos":[3046,3111]},{"content":"In addition, if you call &lt;xref:System.Transactions.TransactionScope.Dispose%2A&gt; on &lt;xref:System.Transactions.Transaction.Current%2A&gt; inside a transaction scope that created the transaction, the transaction aborts at the end of the scope.","pos":[3112,3349],"source":" In addition, if you call <xref:System.Transactions.TransactionScope.Dispose%2A> on <xref:System.Transactions.Transaction.Current%2A> inside a transaction scope that created the transaction, the transaction aborts at the end of the scope."}]},{"pos":[6470,6568],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Transactions.TransactionScope\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Transactions.TransactionScope\"></xref> class."},{"pos":[6580,6907],"content":"This constructor creates a new transaction scope with the transaction scope option equal to <xref:System.Transactions.TransactionScopeOption>. This means that a transaction is required by the new scope and the ambient transaction is used if one already exists. Otherwise, it creates a new transaction before entering the scope.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This constructor creates a new transaction scope with the transaction scope option equal to <xref:System.Transactions.TransactionScopeOption>. This means that a transaction is required by the new scope and the ambient transaction is used if one already exists. Otherwise, it creates a new transaction before entering the scope.","pos":[0,327],"nodes":[{"content":"This constructor creates a new transaction scope with the transaction scope option equal to &lt;xref:System.Transactions.TransactionScopeOption&gt;.","pos":[0,142],"source":"This constructor creates a new transaction scope with the transaction scope option equal to <xref:System.Transactions.TransactionScopeOption>."},{"content":"This means that a transaction is required by the new scope and the ambient transaction is used if one already exists.","pos":[143,260]},{"content":"Otherwise, it creates a new transaction before entering the scope.","pos":[261,327]}]}]},{"pos":[7553,7785],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Transactions.TransactionScope\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class and sets the specified transaction as the ambient transaction, so that transactional work done inside the scope uses this transaction.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Transactions.TransactionScope\"></xref> class and sets the specified transaction as the ambient transaction, so that transactional work done inside the scope uses this transaction."},{"pos":[7991,8116],"content":"The transaction to be set as the ambient transaction, so that transactional work done inside the scope uses this transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"The transaction to be set as the ambient transaction, so that transactional work done inside the scope uses this transaction.","pos":[0,125]}]},{"pos":[8793,9004],"content":"[Supported in the .NET Framework 4.5.1 and later versions]       Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Transactions.TransactionScope\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified asynchronous flow option.","needQuote":false,"needEscape":true,"source":"[Supported in the .NET Framework 4.5.1 and later versions]       Initializes a new instance of the <xref href=\"System.Transactions.TransactionScope\"></xref> class with the specified asynchronous flow option."},{"pos":[9249,9539],"content":"An instance of the <bpt id=\"p1\">&lt;xref href=\"System.Transactions.TransactionScopeAsyncFlowOption\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that describes whether the ambient transaction associated with the transaction scope will flow across thread continuations when using Task or async/await .NET async programming patterns.","needQuote":true,"needEscape":true,"source":"An instance of the <xref href=\"System.Transactions.TransactionScopeAsyncFlowOption\"></xref> enumeration that describes whether the ambient transaction associated with the transaction scope will flow across thread continuations when using Task or async/await .NET async programming patterns."},{"pos":[10170,10300],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Transactions.TransactionScope\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified requirements.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Transactions.TransactionScope\"></xref> class with the specified requirements."},{"pos":[10518,10696],"content":"An instance of the <bpt id=\"p1\">&lt;xref href=\"System.Transactions.TransactionScopeOption\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that describes the transaction requirements associated with this transaction scope.","needQuote":true,"needEscape":true,"source":"An instance of the <xref href=\"System.Transactions.TransactionScopeOption\"></xref> enumeration that describes the transaction requirements associated with this transaction scope."},{"pos":[11331,11597],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Transactions.TransactionScope\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified timeout value, and sets the specified transaction as the ambient transaction, so that transactional work done inside the scope uses this transaction.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Transactions.TransactionScope\"></xref> class with the specified timeout value, and sets the specified transaction as the ambient transaction, so that transactional work done inside the scope uses this transaction."},{"pos":[11826,11951],"content":"The transaction to be set as the ambient transaction, so that transactional work done inside the scope uses this transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"The transaction to be set as the ambient transaction, so that transactional work done inside the scope uses this transaction.","pos":[0,125]}]},{"pos":[12022,12120],"content":"The <xref:System.TimeSpan> after which the transaction scope times out and aborts the transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.TimeSpan&gt; after which the transaction scope times out and aborts the transaction.","pos":[0,98],"source":"The <xref:System.TimeSpan> after which the transaction scope times out and aborts the transaction."}]},{"pos":[12897,13198],"content":"[Supported in the .NET Framework 4.5.1 and later versions]       Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Transactions.TransactionScope\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class and sets the specified transaction as the ambient transaction, so that transactional work done inside the scope uses this transaction.","needQuote":false,"needEscape":true,"source":"[Supported in the .NET Framework 4.5.1 and later versions]       Initializes a new instance of the <xref href=\"System.Transactions.TransactionScope\"></xref> class and sets the specified transaction as the ambient transaction, so that transactional work done inside the scope uses this transaction."},{"pos":[13474,13599],"content":"The transaction to be set as the ambient transaction, so that transactional work done inside the scope uses this transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"The transaction to be set as the ambient transaction, so that transactional work done inside the scope uses this transaction.","pos":[0,125]}]},{"pos":[13709,13999],"content":"An instance of the <bpt id=\"p1\">&lt;xref href=\"System.Transactions.TransactionScopeAsyncFlowOption\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that describes whether the ambient transaction associated with the transaction scope will flow across thread continuations when using Task or async/await .NET async programming patterns.","needQuote":true,"needEscape":true,"source":"An instance of the <xref href=\"System.Transactions.TransactionScopeAsyncFlowOption\"></xref> enumeration that describes whether the ambient transaction associated with the transaction scope will flow across thread continuations when using Task or async/await .NET async programming patterns."},{"pos":[14689,14837],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Transactions.TransactionScope\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified timeout value and requirements.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Transactions.TransactionScope\"></xref> class with the specified timeout value and requirements."},{"pos":[15078,15256],"content":"An instance of the <bpt id=\"p1\">&lt;xref href=\"System.Transactions.TransactionScopeOption\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that describes the transaction requirements associated with this transaction scope.","needQuote":true,"needEscape":true,"source":"An instance of the <xref href=\"System.Transactions.TransactionScopeOption\"></xref> enumeration that describes the transaction requirements associated with this transaction scope."},{"pos":[15327,15425],"content":"The <xref:System.TimeSpan> after which the transaction scope times out and aborts the transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.TimeSpan&gt; after which the transaction scope times out and aborts the transaction.","pos":[0,98],"source":"The <xref:System.TimeSpan> after which the transaction scope times out and aborts the transaction."}]},{"pos":[16191,16321],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Transactions.TransactionScope\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified requirements.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Transactions.TransactionScope\"></xref> class with the specified requirements."},{"pos":[16333,16697],"content":"When you use the `transactionOptions` parameter to specify an <xref:System.Transactions.IsolationLevel>, and the scope creates a transaction later, the new transaction is associated with the specified isolation level. If an isolation level is passed in together with a transaction, the transaction must have an identical isolation level, or an exception is thrown.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"When you use the <ph id=\"ph1\">`transactionOptions`</ph> parameter to specify an &lt;xref:System.Transactions.IsolationLevel&gt;, and the scope creates a transaction later, the new transaction is associated with the specified isolation level.","pos":[0,217],"source":"When you use the `transactionOptions` parameter to specify an <xref:System.Transactions.IsolationLevel>, and the scope creates a transaction later, the new transaction is associated with the specified isolation level."},{"content":"If an isolation level is passed in together with a transaction, the transaction must have an identical isolation level, or an exception is thrown.","pos":[218,364]}]},{"pos":[16974,17152],"content":"An instance of the <bpt id=\"p1\">&lt;xref href=\"System.Transactions.TransactionScopeOption\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that describes the transaction requirements associated with this transaction scope.","needQuote":true,"needEscape":true,"source":"An instance of the <xref href=\"System.Transactions.TransactionScopeOption\"></xref> enumeration that describes the transaction requirements associated with this transaction scope."},{"pos":[17252,17587],"content":"A <xref href=\"System.Transactions.TransactionOptions\"></xref> structure that describes the transaction options to use if a new transaction is created. If an existing transaction is used, the timeout value in this parameter applies to the transaction scope. If that time expires before the scope is disposed, the transaction is aborted.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Transactions.TransactionOptions\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that describes the transaction options to use if a new transaction is created.","pos":[0,150],"source":"A <xref href=\"System.Transactions.TransactionOptions\"></xref> structure that describes the transaction options to use if a new transaction is created."},{"content":"If an existing transaction is used, the timeout value in this parameter applies to the transaction scope.","pos":[151,256]},{"content":"If that time expires before the scope is disposed, the transaction is aborted.","pos":[257,335]}]},{"pos":[18419,18647],"content":"[Supported in the .NET Framework 4.5.1 and later versions]       Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Transactions.TransactionScope\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified requirements and asynchronous flow option.","needQuote":false,"needEscape":true,"source":"[Supported in the .NET Framework 4.5.1 and later versions]       Initializes a new instance of the <xref href=\"System.Transactions.TransactionScope\"></xref> class with the specified requirements and asynchronous flow option."},{"pos":[18935,19113],"content":"An instance of the <bpt id=\"p1\">&lt;xref href=\"System.Transactions.TransactionScopeOption\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that describes the transaction requirements associated with this transaction scope.","needQuote":true,"needEscape":true,"source":"An instance of the <xref href=\"System.Transactions.TransactionScopeOption\"></xref> enumeration that describes the transaction requirements associated with this transaction scope."},{"pos":[19223,19513],"content":"An instance of the <bpt id=\"p1\">&lt;xref href=\"System.Transactions.TransactionScopeAsyncFlowOption\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that describes whether the ambient transaction associated with the transaction scope will flow across thread continuations when using Task or async/await .NET async programming patterns.","needQuote":true,"needEscape":true,"source":"An instance of the <xref href=\"System.Transactions.TransactionScopeAsyncFlowOption\"></xref> enumeration that describes whether the ambient transaction associated with the transaction scope will flow across thread continuations when using Task or async/await .NET async programming patterns."},{"pos":[20348,20653],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Transactions.TransactionScope\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified timeout value and COM+ interoperability requirements, and sets the specified transaction as the ambient transaction, so that transactional work done inside the scope uses this transaction.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Transactions.TransactionScope\"></xref> class with the specified timeout value and COM+ interoperability requirements, and sets the specified transaction as the ambient transaction, so that transactional work done inside the scope uses this transaction."},{"pos":[20666,20884],"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept> This method uses &lt;xref:System.Security.Permissions.SecurityAction&gt; to prevent it from being called from untrusted code; however, only the immediate caller is required to possess the <ph id=\"ph1\">`FullTrust`</ph> permission set.","needQuote":false,"needEscape":true,"extradata":"MT","source":"**Note** This method uses <xref:System.Security.Permissions.SecurityAction> to prevent it from being called from untrusted code; however, only the immediate caller is required to possess the `FullTrust` permission set."},{"pos":[21181,21306],"content":"The transaction to be set as the ambient transaction, so that transactional work done inside the scope uses this transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"The transaction to be set as the ambient transaction, so that transactional work done inside the scope uses this transaction.","pos":[0,125]}]},{"pos":[21377,21475],"content":"The <xref:System.TimeSpan> after which the transaction scope times out and aborts the transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.TimeSpan&gt; after which the transaction scope times out and aborts the transaction.","pos":[0,98],"source":"The <xref:System.TimeSpan> after which the transaction scope times out and aborts the transaction."}]},{"pos":[21583,21766],"content":"An instance of the <bpt id=\"p1\">&lt;xref href=\"System.Transactions.EnterpriseServicesInteropOption\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that describes how the associated transaction interacts with COM+ transactions.","needQuote":true,"needEscape":true,"source":"An instance of the <xref href=\"System.Transactions.EnterpriseServicesInteropOption\"></xref> enumeration that describes how the associated transaction interacts with COM+ transactions."},{"pos":[22602,22937],"content":"[Supported in the .NET Framework 4.5.1 and later versions]       Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Transactions.TransactionScope\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified timeout value, and sets the specified transaction as the ambient transaction, so that transactional work done inside the scope uses this transaction.","needQuote":false,"needEscape":true,"source":"[Supported in the .NET Framework 4.5.1 and later versions]       Initializes a new instance of the <xref href=\"System.Transactions.TransactionScope\"></xref> class with the specified timeout value, and sets the specified transaction as the ambient transaction, so that transactional work done inside the scope uses this transaction."},{"pos":[23236,23361],"content":"The transaction to be set as the ambient transaction, so that transactional work done inside the scope uses this transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"The transaction to be set as the ambient transaction, so that transactional work done inside the scope uses this transaction.","pos":[0,125]}]},{"pos":[23432,23530],"content":"The <xref:System.TimeSpan> after which the transaction scope times out and aborts the transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.TimeSpan&gt; after which the transaction scope times out and aborts the transaction.","pos":[0,98],"source":"The <xref:System.TimeSpan> after which the transaction scope times out and aborts the transaction."}]},{"pos":[23640,23930],"content":"An instance of the <bpt id=\"p1\">&lt;xref href=\"System.Transactions.TransactionScopeAsyncFlowOption\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that describes whether the ambient transaction associated with the transaction scope will flow across thread continuations when using Task or async/await .NET async programming patterns.","needQuote":true,"needEscape":true,"source":"An instance of the <xref href=\"System.Transactions.TransactionScopeAsyncFlowOption\"></xref> enumeration that describes whether the ambient transaction associated with the transaction scope will flow across thread continuations when using Task or async/await .NET async programming patterns."},{"pos":[24821,25065],"content":"[Supported in the .NET Framework 4.5.1 and later versions]       Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Transactions.TransactionScope\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified timeout value, requirements, and asynchronous flow option.","needQuote":false,"needEscape":true,"source":"[Supported in the .NET Framework 4.5.1 and later versions]       Initializes a new instance of the <xref href=\"System.Transactions.TransactionScope\"></xref> class with the specified timeout value, requirements, and asynchronous flow option."},{"pos":[25376,25554],"content":"An instance of the <bpt id=\"p1\">&lt;xref href=\"System.Transactions.TransactionScopeOption\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that describes the transaction requirements associated with this transaction scope.","needQuote":true,"needEscape":true,"source":"An instance of the <xref href=\"System.Transactions.TransactionScopeOption\"></xref> enumeration that describes the transaction requirements associated with this transaction scope."},{"pos":[25625,25723],"content":"The <xref:System.TimeSpan> after which the transaction scope times out and aborts the transaction.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.TimeSpan&gt; after which the transaction scope times out and aborts the transaction.","pos":[0,98],"source":"The <xref:System.TimeSpan> after which the transaction scope times out and aborts the transaction."}]},{"pos":[25833,26123],"content":"An instance of the <bpt id=\"p1\">&lt;xref href=\"System.Transactions.TransactionScopeAsyncFlowOption\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that describes whether the ambient transaction associated with the transaction scope will flow across thread continuations when using Task or async/await .NET async programming patterns.","needQuote":true,"needEscape":true,"source":"An instance of the <xref href=\"System.Transactions.TransactionScopeAsyncFlowOption\"></xref> enumeration that describes whether the ambient transaction associated with the transaction scope will flow across thread continuations when using Task or async/await .NET async programming patterns."},{"pos":[27089,27276],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Transactions.TransactionScope\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified scope and COM+ interoperability requirements, and transaction options.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Transactions.TransactionScope\"></xref> class with the specified scope and COM+ interoperability requirements, and transaction options."},{"pos":[27289,27880],"content":"When you use the `transactionOptions` parameter to specify an <xref:System.Transactions.IsolationLevel>, and the scope creates a transaction later, the new transaction is associated with the specified isolation level. If an isolation level is passed in together with a transaction, the transaction must have an identical isolation level, or an exception is thrown.       **Note** This method uses <xref:System.Security.Permissions.SecurityAction> to prevent it from being called from untrusted code; however, only the immediate caller is required to possess the `FullTrust` permission set.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"When you use the <ph id=\"ph1\">`transactionOptions`</ph> parameter to specify an &lt;xref:System.Transactions.IsolationLevel&gt;, and the scope creates a transaction later, the new transaction is associated with the specified isolation level.","pos":[0,217],"source":"When you use the `transactionOptions` parameter to specify an <xref:System.Transactions.IsolationLevel>, and the scope creates a transaction later, the new transaction is associated with the specified isolation level."},{"content":"If an isolation level is passed in together with a transaction, the transaction must have an identical isolation level, or an exception is thrown.","pos":[218,364]},{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept> This method uses &lt;xref:System.Security.Permissions.SecurityAction&gt; to prevent it from being called from untrusted code; however, only the immediate caller is required to possess the <ph id=\"ph1\">`FullTrust`</ph> permission set.","pos":[371,589],"source":"**Note** This method uses <xref:System.Security.Permissions.SecurityAction> to prevent it from being called from untrusted code; however, only the immediate caller is required to possess the `FullTrust` permission set."}]},{"pos":[28225,28403],"content":"An instance of the <bpt id=\"p1\">&lt;xref href=\"System.Transactions.TransactionScopeOption\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that describes the transaction requirements associated with this transaction scope.","needQuote":true,"needEscape":true,"source":"An instance of the <xref href=\"System.Transactions.TransactionScopeOption\"></xref> enumeration that describes the transaction requirements associated with this transaction scope."},{"pos":[28503,28838],"content":"A <xref href=\"System.Transactions.TransactionOptions\"></xref> structure that describes the transaction options to use if a new transaction is created. If an existing transaction is used, the timeout value in this parameter applies to the transaction scope. If that time expires before the scope is disposed, the transaction is aborted.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Transactions.TransactionOptions\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that describes the transaction options to use if a new transaction is created.","pos":[0,150],"source":"A <xref href=\"System.Transactions.TransactionOptions\"></xref> structure that describes the transaction options to use if a new transaction is created."},{"content":"If an existing transaction is used, the timeout value in this parameter applies to the transaction scope.","pos":[151,256]},{"content":"If that time expires before the scope is disposed, the transaction is aborted.","pos":[257,335]}]},{"pos":[28946,29129],"content":"An instance of the <bpt id=\"p1\">&lt;xref href=\"System.Transactions.EnterpriseServicesInteropOption\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that describes how the associated transaction interacts with COM+ transactions.","needQuote":true,"needEscape":true,"source":"An instance of the <xref href=\"System.Transactions.EnterpriseServicesInteropOption\"></xref> enumeration that describes how the associated transaction interacts with COM+ transactions."},{"pos":[30096,30324],"content":"[Supported in the .NET Framework 4.5.1 and later versions]       Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Transactions.TransactionScope\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified requirements and asynchronous flow option.","needQuote":false,"needEscape":true,"source":"[Supported in the .NET Framework 4.5.1 and later versions]       Initializes a new instance of the <xref href=\"System.Transactions.TransactionScope\"></xref> class with the specified requirements and asynchronous flow option."},{"pos":[30671,30849],"content":"An instance of the <bpt id=\"p1\">&lt;xref href=\"System.Transactions.TransactionScopeOption\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that describes the transaction requirements associated with this transaction scope.","needQuote":true,"needEscape":true,"source":"An instance of the <xref href=\"System.Transactions.TransactionScopeOption\"></xref> enumeration that describes the transaction requirements associated with this transaction scope."},{"pos":[30949,31284],"content":"A <xref href=\"System.Transactions.TransactionOptions\"></xref> structure that describes the transaction options to use if a new transaction is created. If an existing transaction is used, the timeout value in this parameter applies to the transaction scope. If that time expires before the scope is disposed, the transaction is aborted.","needQuote":true,"needEscape":true,"nodes":[{"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Transactions.TransactionOptions\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> structure that describes the transaction options to use if a new transaction is created.","pos":[0,150],"source":"A <xref href=\"System.Transactions.TransactionOptions\"></xref> structure that describes the transaction options to use if a new transaction is created."},{"content":"If an existing transaction is used, the timeout value in this parameter applies to the transaction scope.","pos":[151,256]},{"content":"If that time expires before the scope is disposed, the transaction is aborted.","pos":[257,335]}]},{"pos":[31394,31684],"content":"An instance of the <bpt id=\"p1\">&lt;xref href=\"System.Transactions.TransactionScopeAsyncFlowOption\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration that describes whether the ambient transaction associated with the transaction scope will flow across thread continuations when using Task or async/await .NET async programming patterns.","needQuote":true,"needEscape":true,"source":"An instance of the <xref href=\"System.Transactions.TransactionScopeAsyncFlowOption\"></xref> enumeration that describes whether the ambient transaction associated with the transaction scope will flow across thread continuations when using Task or async/await .NET async programming patterns."},{"pos":[32136,32210],"content":"Indicates that all operations within the scope are completed successfully.","needQuote":true,"needEscape":true,"nodes":[{"content":"Indicates that all operations within the scope are completed successfully.","pos":[0,74]}]},{"pos":[32223,33931],"content":"When you are satisfied that all operations within the scope are completed successfully, you should call this method only once to inform that transaction manager that the state across all resources is consistent, and the transaction can be committed. It is very good practice to put the call as the last statement in the `using` block.       For more information on how this method is used, see the [Implementing An Implicit Transaction Using Transaction Scope](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199) topic.       Failing to call this method aborts the transaction, because the transaction manager interprets this as a system failure, or exceptions thrown within the scope of transaction. However, you should also note that calling this method does not guarantee a commit of the transaction. It is merely a way of informing the transaction manager of your status. After calling this method, you can no longer access the ambient transaction via the <xref:System.Transactions.Transaction.Current%2A> property, and trying to do so results in an exception being thrown.       The actual work of commit between the resources manager happens at the `End Using` statement if the <xref:System.Transactions.TransactionScope> object created the transaction. If it did not create the transaction, the commit occurs whenever <xref:System.Transactions.CommittableTransaction.Commit%2A> is called by the owner of the <xref:System.Transactions.CommittableTransaction> object. At that point the Transaction Manager calls the resource managers and informs them to either commit or rollback, based on whether this method was called on the <xref:System.Transactions.TransactionScope> object.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"When you are satisfied that all operations within the scope are completed successfully, you should call this method only once to inform that transaction manager that the state across all resources is consistent, and the transaction can be committed.","pos":[0,249]},{"content":"It is very good practice to put the call as the last statement in the <ph id=\"ph1\">`using`</ph> block.","pos":[250,334],"source":" It is very good practice to put the call as the last statement in the `using` block."},{"content":"For more information on how this method is used, see the <bpt id=\"p1\">[</bpt>Implementing An Implicit Transaction Using Transaction Scope<ept id=\"p1\">](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199)</ept> topic.","pos":[341,537],"source":"       For more information on how this method is used, see the [Implementing An Implicit Transaction Using Transaction Scope](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199) topic."},{"content":"Failing to call this method aborts the transaction, because the transaction manager interprets this as a system failure, or exceptions thrown within the scope of transaction.","pos":[544,718]},{"content":"However, you should also note that calling this method does not guarantee a commit of the transaction.","pos":[719,821]},{"content":"It is merely a way of informing the transaction manager of your status.","pos":[822,893]},{"content":"After calling this method, you can no longer access the ambient transaction via the &lt;xref:System.Transactions.Transaction.Current%2A&gt; property, and trying to do so results in an exception being thrown.","pos":[894,1095],"source":" After calling this method, you can no longer access the ambient transaction via the <xref:System.Transactions.Transaction.Current%2A> property, and trying to do so results in an exception being thrown."},{"content":"The actual work of commit between the resources manager happens at the <ph id=\"ph1\">`End Using`</ph> statement if the &lt;xref:System.Transactions.TransactionScope&gt; object created the transaction.","pos":[1102,1277],"source":"       The actual work of commit between the resources manager happens at the `End Using` statement if the <xref:System.Transactions.TransactionScope> object created the transaction."},{"content":"If it did not create the transaction, the commit occurs whenever &lt;xref:System.Transactions.CommittableTransaction.Commit%2A&gt; is called by the owner of the &lt;xref:System.Transactions.CommittableTransaction&gt; object.","pos":[1278,1490],"source":" If it did not create the transaction, the commit occurs whenever <xref:System.Transactions.CommittableTransaction.Commit%2A> is called by the owner of the <xref:System.Transactions.CommittableTransaction> object."},{"content":"At that point the Transaction Manager calls the resource managers and informs them to either commit or rollback, based on whether this method was called on the &lt;xref:System.Transactions.TransactionScope&gt; object.","pos":[1491,1702],"source":" At that point the Transaction Manager calls the resource managers and informs them to either commit or rollback, based on whether this method was called on the <xref:System.Transactions.TransactionScope> object."}]},{"pos":[34552,34593],"content":"This method has already been called once.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method has already been called once.","pos":[0,41]}]},{"pos":[34967,34994],"content":"Ends the transaction scope.","needQuote":true,"needEscape":true,"nodes":[{"content":"Ends the transaction scope.","pos":[0,27]}]},{"pos":[35007,37049],"content":"Calling this method marks the end of the transaction scope. If the <xref:System.Transactions.TransactionScope> object created the transaction and <xref:System.Transactions.TransactionScope.Complete%2A> was called on the scope, the <xref:System.Transactions.TransactionScope> object attempts to commit the transaction when this method is called.       The use of the C# `using` construction ensures that this method is called even if an exception occurs. Exceptions that occur after calling this method may not affect the transaction. This method also restores the ambient transaction to it original state. A <xref:System.Transactions.TransactionAbortedException> is thrown if the transaction is not actually committed.       This method is synchronous and blocks until the transaction has been committed or aborted. Because of this, you should be extremely careful when using this method in a Windows Form (WinForm) application, or a deadlock can occur. If you call this method inside one WinForm Control event (for example, clicking a button), and use the synchronous <xref:System.Windows.Forms.Control.Invoke%2A> method to direct the control to perform some UI tasks (for example, changing colors) in the middle of processing the transaction, a deadlock will happen. This is because the <xref:System.Windows.Forms.Control.Invoke%2A> method is synchronous and blocks the worker thread until the UI thread finishes its job. However, in our scenario, the UI thread is also waiting for the worker thread to commit the transaction. The result is that none is able to proceed and the scope waits indefinitely for the Commit to finish. You should use <xref:System.Windows.Forms.Control.BeginInvoke%2A> rather than <xref:System.Windows.Forms.Control.Invoke%2A> wherever possible, because it is asynchronous and thus less prone to deadlock.       For more information on how this method is used, see the [Implementing An Implicit Transaction Using Transaction Scope](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199) topic.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Calling this method marks the end of the transaction scope.","pos":[0,59]},{"content":"If the &lt;xref:System.Transactions.TransactionScope&gt; object created the transaction and &lt;xref:System.Transactions.TransactionScope.Complete%2A&gt; was called on the scope, the &lt;xref:System.Transactions.TransactionScope&gt; object attempts to commit the transaction when this method is called.","pos":[60,344],"source":" If the <xref:System.Transactions.TransactionScope> object created the transaction and <xref:System.Transactions.TransactionScope.Complete%2A> was called on the scope, the <xref:System.Transactions.TransactionScope> object attempts to commit the transaction when this method is called."},{"content":"The use of the C# <ph id=\"ph1\">`using`</ph> construction ensures that this method is called even if an exception occurs.","pos":[351,453],"source":"       The use of the C# `using` construction ensures that this method is called even if an exception occurs."},{"content":"Exceptions that occur after calling this method may not affect the transaction.","pos":[454,533]},{"content":"This method also restores the ambient transaction to it original state.","pos":[534,605]},{"content":"A &lt;xref:System.Transactions.TransactionAbortedException&gt; is thrown if the transaction is not actually committed.","pos":[606,718],"source":" A <xref:System.Transactions.TransactionAbortedException> is thrown if the transaction is not actually committed."},{"content":"This method is synchronous and blocks until the transaction has been committed or aborted.","pos":[725,815]},{"content":"Because of this, you should be extremely careful when using this method in a Windows Form (WinForm) application, or a deadlock can occur.","pos":[816,953]},{"content":"If you call this method inside one WinForm Control event (for example, clicking a button), and use the synchronous &lt;xref:System.Windows.Forms.Control.Invoke%2A&gt; method to direct the control to perform some UI tasks (for example, changing colors) in the middle of processing the transaction, a deadlock will happen.","pos":[954,1268],"source":" If you call this method inside one WinForm Control event (for example, clicking a button), and use the synchronous <xref:System.Windows.Forms.Control.Invoke%2A> method to direct the control to perform some UI tasks (for example, changing colors) in the middle of processing the transaction, a deadlock will happen."},{"content":"This is because the &lt;xref:System.Windows.Forms.Control.Invoke%2A&gt; method is synchronous and blocks the worker thread until the UI thread finishes its job.","pos":[1269,1423],"source":" This is because the <xref:System.Windows.Forms.Control.Invoke%2A> method is synchronous and blocks the worker thread until the UI thread finishes its job."},{"content":"However, in our scenario, the UI thread is also waiting for the worker thread to commit the transaction.","pos":[1424,1528]},{"content":"The result is that none is able to proceed and the scope waits indefinitely for the Commit to finish.","pos":[1529,1630]},{"content":"You should use &lt;xref:System.Windows.Forms.Control.BeginInvoke%2A&gt; rather than &lt;xref:System.Windows.Forms.Control.Invoke%2A&gt; wherever possible, because it is asynchronous and thus less prone to deadlock.","pos":[1631,1833],"source":" You should use <xref:System.Windows.Forms.Control.BeginInvoke%2A> rather than <xref:System.Windows.Forms.Control.Invoke%2A> wherever possible, because it is asynchronous and thus less prone to deadlock."},{"content":"For more information on how this method is used, see the <bpt id=\"p1\">[</bpt>Implementing An Implicit Transaction Using Transaction Scope<ept id=\"p1\">](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199)</ept> topic.","pos":[1840,2036],"source":"       For more information on how this method is used, see the [Implementing An Implicit Transaction Using Transaction Scope](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199) topic."}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Transactions.TransactionScope\n  id: TransactionScope\n  children:\n  - System.Transactions.TransactionScope.#ctor\n  - System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction)\n  - System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeAsyncFlowOption)\n  - System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption)\n  - System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan)\n  - System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.Transactions.TransactionScopeAsyncFlowOption)\n  - System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan)\n  - System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions)\n  - System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionScopeAsyncFlowOption)\n  - System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.EnterpriseServicesInteropOption)\n  - System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)\n  - System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)\n  - System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.EnterpriseServicesInteropOption)\n  - System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.TransactionScopeAsyncFlowOption)\n  - System.Transactions.TransactionScope.Complete\n  - System.Transactions.TransactionScope.Dispose\n  langs:\n  - csharp\n  name: TransactionScope\n  nameWithType: TransactionScope\n  fullName: System.Transactions.TransactionScope\n  type: Class\n  summary: Makes a code block transactional. This class cannot be inherited.\n  remarks: \"The <xref:System.Transactions> infrastructure provides both an explicit programming model based on the <xref:System.Transactions.Transaction> class, as well as an implicit programming model using the TransactionScope class, in which transactions are automatically managed by the infrastructure.  \\n  \\n> [!IMPORTANT]\\n>  It is recommended that you create implicit transactions using the TransactionScope class, so that the ambient transaction context is automatically managed for you. You should also use the TransactionScope and <xref:System.Transactions.DependentTransaction> class for applications that require the use of the same transaction across multiple function calls or multiple thread calls. For more information on this model, see the [Implementing An Implicit Transaction Using Transaction Scope](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199) topic. For more information on writing a transactional application, see [Writing A Transactional Application](http://msdn.microsoft.com/en-us/4a7cc4d1-0891-4605-941f-a933b9ce5bc8).  \\n  \\n Upon instantiating a TransactionScope by the `new` statement, the transaction manager determines which transaction to participate in. Once determined, the scope always participates in that transaction. The decision is based on two factors: whether an ambient transaction is present and the value of the `TransactionScopeOption` parameter in the constructor.  The ambient transaction is the transaction your code executes in. You can obtain a reference to the ambient transaction by calling the static <xref:System.Transactions.Transaction.Current%2A> property of the <xref:System.Transactions.Transaction> class. For more information on how this parameter is used, please see the \\\"Transaction Flow Management\\\" section of the [Implementing An Implicit Transaction Using Transaction Scope](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199) topic.  \\n  \\n If no exception occurs within the transaction scope (that is, between the initialization of the TransactionScope object and the calling of its <xref:System.Transactions.TransactionScope.Dispose%2A> method), then the transaction in which the scope participates is allowed to proceed. If an exception does occur within the transaction scope, the transaction in which it participates will be rolled back.  \\n  \\n When your application completes all work it wants to perform in a transaction, you should call the <xref:System.Transactions.TransactionScope.Complete%2A> method only once to inform that transaction manager that it is acceptable to commit the transaction. Failing to call this method aborts the transaction.  \\n  \\n A call to the <xref:System.Transactions.TransactionScope.Dispose%2A> method marks the end of the transaction scope. Exceptions that occur after calling this method may not affect the transaction.  \\n  \\n If you modify the value of <xref:System.Transactions.Transaction.Current%2A> inside a scope, an exception is thrown when <xref:System.Transactions.TransactionScope.Dispose%2A> is called. However, at the end of the scope, the previous value is restored. In addition, if you call <xref:System.Transactions.TransactionScope.Dispose%2A> on <xref:System.Transactions.Transaction.Current%2A> inside a transaction scope that created the transaction, the transaction aborts at the end of the scope.\"\n  example:\n  - \"The following example demonstrates how to use the TransactionScope class to define a block of code to participate in a transaction.  \\n  \\n [!code-vb[TransactionScope#1](~/add/codesnippet/visualbasic/t-system.transactions.tr_0_1.vb)]\\n [!code-cs[TransactionScope#1](~/add/codesnippet/csharp/t-system.transactions.tr_0_1.cs)]\"\n  syntax:\n    content: 'public sealed class TransactionScope : IDisposable'\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Transactions.TransactionScope.#ctor\n  id: '#ctor'\n  parent: System.Transactions.TransactionScope\n  langs:\n  - csharp\n  name: TransactionScope()\n  nameWithType: TransactionScope.TransactionScope()\n  fullName: System.Transactions.TransactionScope.TransactionScope()\n  type: Constructor\n  assemblies:\n  - System.Transactions\n  namespace: System.Transactions\n  summary: Initializes a new instance of the <xref href=\"System.Transactions.TransactionScope\"></xref> class.\n  remarks: This constructor creates a new transaction scope with the transaction scope option equal to <xref:System.Transactions.TransactionScopeOption>. This means that a transaction is required by the new scope and the ambient transaction is used if one already exists. Otherwise, it creates a new transaction before entering the scope.\n  syntax:\n    content: public TransactionScope ();\n    parameters: []\n  overload: System.Transactions.TransactionScope.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction)\n  id: '#ctor(System.Transactions.Transaction)'\n  parent: System.Transactions.TransactionScope\n  langs:\n  - csharp\n  name: TransactionScope(Transaction)\n  nameWithType: TransactionScope.TransactionScope(Transaction)\n  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction)\n  type: Constructor\n  assemblies:\n  - System.Transactions\n  namespace: System.Transactions\n  summary: Initializes a new instance of the <xref href=\"System.Transactions.TransactionScope\"></xref> class and sets the specified transaction as the ambient transaction, so that transactional work done inside the scope uses this transaction.\n  syntax:\n    content: public TransactionScope (System.Transactions.Transaction transactionToUse);\n    parameters:\n    - id: transactionToUse\n      type: System.Transactions.Transaction\n      description: The transaction to be set as the ambient transaction, so that transactional work done inside the scope uses this transaction.\n  overload: System.Transactions.TransactionScope.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeAsyncFlowOption)\n  id: '#ctor(System.Transactions.TransactionScopeAsyncFlowOption)'\n  parent: System.Transactions.TransactionScope\n  langs:\n  - csharp\n  name: TransactionScope(TransactionScopeAsyncFlowOption)\n  nameWithType: TransactionScope.TransactionScope(TransactionScopeAsyncFlowOption)\n  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeAsyncFlowOption)\n  type: Constructor\n  assemblies:\n  - System.Transactions\n  namespace: System.Transactions\n  summary: \"[Supported in the .NET Framework 4.5.1 and later versions]  \\n  \\n Initializes a new instance of the <xref href=\\\"System.Transactions.TransactionScope\\\"></xref> class with the specified asynchronous flow option.\"\n  syntax:\n    content: public TransactionScope (System.Transactions.TransactionScopeAsyncFlowOption asyncFlowOption);\n    parameters:\n    - id: asyncFlowOption\n      type: System.Transactions.TransactionScopeAsyncFlowOption\n      description: An instance of the <xref href=\"System.Transactions.TransactionScopeAsyncFlowOption\"></xref> enumeration that describes whether the ambient transaction associated with the transaction scope will flow across thread continuations when using Task or async/await .NET async programming patterns.\n  overload: System.Transactions.TransactionScope.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption)\n  id: '#ctor(System.Transactions.TransactionScopeOption)'\n  parent: System.Transactions.TransactionScope\n  langs:\n  - csharp\n  name: TransactionScope(TransactionScopeOption)\n  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption)\n  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption)\n  type: Constructor\n  assemblies:\n  - System.Transactions\n  namespace: System.Transactions\n  summary: Initializes a new instance of the <xref href=\"System.Transactions.TransactionScope\"></xref> class with the specified requirements.\n  syntax:\n    content: public TransactionScope (System.Transactions.TransactionScopeOption scopeOption);\n    parameters:\n    - id: scopeOption\n      type: System.Transactions.TransactionScopeOption\n      description: An instance of the <xref href=\"System.Transactions.TransactionScopeOption\"></xref> enumeration that describes the transaction requirements associated with this transaction scope.\n  overload: System.Transactions.TransactionScope.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan)\n  id: '#ctor(System.Transactions.Transaction,System.TimeSpan)'\n  parent: System.Transactions.TransactionScope\n  langs:\n  - csharp\n  name: TransactionScope(Transaction,TimeSpan)\n  nameWithType: TransactionScope.TransactionScope(Transaction,TimeSpan)\n  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction,TimeSpan)\n  type: Constructor\n  assemblies:\n  - System.Transactions\n  namespace: System.Transactions\n  summary: Initializes a new instance of the <xref href=\"System.Transactions.TransactionScope\"></xref> class with the specified timeout value, and sets the specified transaction as the ambient transaction, so that transactional work done inside the scope uses this transaction.\n  syntax:\n    content: public TransactionScope (System.Transactions.Transaction transactionToUse, TimeSpan scopeTimeout);\n    parameters:\n    - id: transactionToUse\n      type: System.Transactions.Transaction\n      description: The transaction to be set as the ambient transaction, so that transactional work done inside the scope uses this transaction.\n    - id: scopeTimeout\n      type: System.TimeSpan\n      description: The <xref:System.TimeSpan> after which the transaction scope times out and aborts the transaction.\n  overload: System.Transactions.TransactionScope.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.Transactions.TransactionScopeAsyncFlowOption)\n  id: '#ctor(System.Transactions.Transaction,System.Transactions.TransactionScopeAsyncFlowOption)'\n  parent: System.Transactions.TransactionScope\n  langs:\n  - csharp\n  name: TransactionScope(Transaction,TransactionScopeAsyncFlowOption)\n  nameWithType: TransactionScope.TransactionScope(Transaction,TransactionScopeAsyncFlowOption)\n  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction,TransactionScopeAsyncFlowOption)\n  type: Constructor\n  assemblies:\n  - System.Transactions\n  namespace: System.Transactions\n  summary: \"[Supported in the .NET Framework 4.5.1 and later versions]  \\n  \\n Initializes a new instance of the <xref href=\\\"System.Transactions.TransactionScope\\\"></xref> class and sets the specified transaction as the ambient transaction, so that transactional work done inside the scope uses this transaction.\"\n  syntax:\n    content: public TransactionScope (System.Transactions.Transaction transactionToUse, System.Transactions.TransactionScopeAsyncFlowOption asyncFlowOption);\n    parameters:\n    - id: transactionToUse\n      type: System.Transactions.Transaction\n      description: The transaction to be set as the ambient transaction, so that transactional work done inside the scope uses this transaction.\n    - id: asyncFlowOption\n      type: System.Transactions.TransactionScopeAsyncFlowOption\n      description: An instance of the <xref href=\"System.Transactions.TransactionScopeAsyncFlowOption\"></xref> enumeration that describes whether the ambient transaction associated with the transaction scope will flow across thread continuations when using Task or async/await .NET async programming patterns.\n  overload: System.Transactions.TransactionScope.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan)\n  id: '#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan)'\n  parent: System.Transactions.TransactionScope\n  langs:\n  - csharp\n  name: TransactionScope(TransactionScopeOption,TimeSpan)\n  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TimeSpan)\n  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TimeSpan)\n  type: Constructor\n  assemblies:\n  - System.Transactions\n  namespace: System.Transactions\n  summary: Initializes a new instance of the <xref href=\"System.Transactions.TransactionScope\"></xref> class with the specified timeout value and requirements.\n  syntax:\n    content: public TransactionScope (System.Transactions.TransactionScopeOption scopeOption, TimeSpan scopeTimeout);\n    parameters:\n    - id: scopeOption\n      type: System.Transactions.TransactionScopeOption\n      description: An instance of the <xref href=\"System.Transactions.TransactionScopeOption\"></xref> enumeration that describes the transaction requirements associated with this transaction scope.\n    - id: scopeTimeout\n      type: System.TimeSpan\n      description: The <xref:System.TimeSpan> after which the transaction scope times out and aborts the transaction.\n  overload: System.Transactions.TransactionScope.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions)\n  id: '#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions)'\n  parent: System.Transactions.TransactionScope\n  langs:\n  - csharp\n  name: TransactionScope(TransactionScopeOption,TransactionOptions)\n  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions)\n  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions)\n  type: Constructor\n  assemblies:\n  - System.Transactions\n  namespace: System.Transactions\n  summary: Initializes a new instance of the <xref href=\"System.Transactions.TransactionScope\"></xref> class with the specified requirements.\n  remarks: When you use the `transactionOptions` parameter to specify an <xref:System.Transactions.IsolationLevel>, and the scope creates a transaction later, the new transaction is associated with the specified isolation level. If an isolation level is passed in together with a transaction, the transaction must have an identical isolation level, or an exception is thrown.\n  syntax:\n    content: public TransactionScope (System.Transactions.TransactionScopeOption scopeOption, System.Transactions.TransactionOptions transactionOptions);\n    parameters:\n    - id: scopeOption\n      type: System.Transactions.TransactionScopeOption\n      description: An instance of the <xref href=\"System.Transactions.TransactionScopeOption\"></xref> enumeration that describes the transaction requirements associated with this transaction scope.\n    - id: transactionOptions\n      type: System.Transactions.TransactionOptions\n      description: A <xref href=\"System.Transactions.TransactionOptions\"></xref> structure that describes the transaction options to use if a new transaction is created. If an existing transaction is used, the timeout value in this parameter applies to the transaction scope. If that time expires before the scope is disposed, the transaction is aborted.\n  overload: System.Transactions.TransactionScope.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionScopeAsyncFlowOption)\n  id: '#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionScopeAsyncFlowOption)'\n  parent: System.Transactions.TransactionScope\n  langs:\n  - csharp\n  name: TransactionScope(TransactionScopeOption,TransactionScopeAsyncFlowOption)\n  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TransactionScopeAsyncFlowOption)\n  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TransactionScopeAsyncFlowOption)\n  type: Constructor\n  assemblies:\n  - System.Transactions\n  namespace: System.Transactions\n  summary: \"[Supported in the .NET Framework 4.5.1 and later versions]  \\n  \\n Initializes a new instance of the <xref href=\\\"System.Transactions.TransactionScope\\\"></xref> class with the specified requirements and asynchronous flow option.\"\n  syntax:\n    content: public TransactionScope (System.Transactions.TransactionScopeOption scopeOption, System.Transactions.TransactionScopeAsyncFlowOption asyncFlowOption);\n    parameters:\n    - id: scopeOption\n      type: System.Transactions.TransactionScopeOption\n      description: An instance of the <xref href=\"System.Transactions.TransactionScopeOption\"></xref> enumeration that describes the transaction requirements associated with this transaction scope.\n    - id: asyncFlowOption\n      type: System.Transactions.TransactionScopeAsyncFlowOption\n      description: An instance of the <xref href=\"System.Transactions.TransactionScopeAsyncFlowOption\"></xref> enumeration that describes whether the ambient transaction associated with the transaction scope will flow across thread continuations when using Task or async/await .NET async programming patterns.\n  overload: System.Transactions.TransactionScope.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.EnterpriseServicesInteropOption)\n  id: '#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.EnterpriseServicesInteropOption)'\n  parent: System.Transactions.TransactionScope\n  langs:\n  - csharp\n  name: TransactionScope(Transaction,TimeSpan,EnterpriseServicesInteropOption)\n  nameWithType: TransactionScope.TransactionScope(Transaction,TimeSpan,EnterpriseServicesInteropOption)\n  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction,TimeSpan,EnterpriseServicesInteropOption)\n  type: Constructor\n  assemblies:\n  - System.Transactions\n  namespace: System.Transactions\n  summary: Initializes a new instance of the <xref href=\"System.Transactions.TransactionScope\"></xref> class with the specified timeout value and COM+ interoperability requirements, and sets the specified transaction as the ambient transaction, so that transactional work done inside the scope uses this transaction.\n  remarks: '**Note** This method uses <xref:System.Security.Permissions.SecurityAction> to prevent it from being called from untrusted code; however, only the immediate caller is required to possess the `FullTrust` permission set.'\n  syntax:\n    content: public TransactionScope (System.Transactions.Transaction transactionToUse, TimeSpan scopeTimeout, System.Transactions.EnterpriseServicesInteropOption interopOption);\n    parameters:\n    - id: transactionToUse\n      type: System.Transactions.Transaction\n      description: The transaction to be set as the ambient transaction, so that transactional work done inside the scope uses this transaction.\n    - id: scopeTimeout\n      type: System.TimeSpan\n      description: The <xref:System.TimeSpan> after which the transaction scope times out and aborts the transaction.\n    - id: interopOption\n      type: System.Transactions.EnterpriseServicesInteropOption\n      description: An instance of the <xref href=\"System.Transactions.EnterpriseServicesInteropOption\"></xref> enumeration that describes how the associated transaction interacts with COM+ transactions.\n  overload: System.Transactions.TransactionScope.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)\n  id: '#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)'\n  parent: System.Transactions.TransactionScope\n  langs:\n  - csharp\n  name: TransactionScope(Transaction,TimeSpan,TransactionScopeAsyncFlowOption)\n  nameWithType: TransactionScope.TransactionScope(Transaction,TimeSpan,TransactionScopeAsyncFlowOption)\n  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction,TimeSpan,TransactionScopeAsyncFlowOption)\n  type: Constructor\n  assemblies:\n  - System.Transactions\n  namespace: System.Transactions\n  summary: \"[Supported in the .NET Framework 4.5.1 and later versions]  \\n  \\n Initializes a new instance of the <xref href=\\\"System.Transactions.TransactionScope\\\"></xref> class with the specified timeout value, and sets the specified transaction as the ambient transaction, so that transactional work done inside the scope uses this transaction.\"\n  syntax:\n    content: public TransactionScope (System.Transactions.Transaction transactionToUse, TimeSpan scopeTimeout, System.Transactions.TransactionScopeAsyncFlowOption asyncFlowOption);\n    parameters:\n    - id: transactionToUse\n      type: System.Transactions.Transaction\n      description: The transaction to be set as the ambient transaction, so that transactional work done inside the scope uses this transaction.\n    - id: scopeTimeout\n      type: System.TimeSpan\n      description: The <xref:System.TimeSpan> after which the transaction scope times out and aborts the transaction.\n    - id: asyncFlowOption\n      type: System.Transactions.TransactionScopeAsyncFlowOption\n      description: An instance of the <xref href=\"System.Transactions.TransactionScopeAsyncFlowOption\"></xref> enumeration that describes whether the ambient transaction associated with the transaction scope will flow across thread continuations when using Task or async/await .NET async programming patterns.\n  overload: System.Transactions.TransactionScope.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)\n  id: '#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)'\n  parent: System.Transactions.TransactionScope\n  langs:\n  - csharp\n  name: TransactionScope(TransactionScopeOption,TimeSpan,TransactionScopeAsyncFlowOption)\n  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TimeSpan,TransactionScopeAsyncFlowOption)\n  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TimeSpan,TransactionScopeAsyncFlowOption)\n  type: Constructor\n  assemblies:\n  - System.Transactions\n  namespace: System.Transactions\n  summary: \"[Supported in the .NET Framework 4.5.1 and later versions]  \\n  \\n Initializes a new instance of the <xref href=\\\"System.Transactions.TransactionScope\\\"></xref> class with the specified timeout value, requirements, and asynchronous flow option.\"\n  syntax:\n    content: public TransactionScope (System.Transactions.TransactionScopeOption scopeOption, TimeSpan scopeTimeout, System.Transactions.TransactionScopeAsyncFlowOption asyncFlowOption);\n    parameters:\n    - id: scopeOption\n      type: System.Transactions.TransactionScopeOption\n      description: An instance of the <xref href=\"System.Transactions.TransactionScopeOption\"></xref> enumeration that describes the transaction requirements associated with this transaction scope.\n    - id: scopeTimeout\n      type: System.TimeSpan\n      description: The <xref:System.TimeSpan> after which the transaction scope times out and aborts the transaction.\n    - id: asyncFlowOption\n      type: System.Transactions.TransactionScopeAsyncFlowOption\n      description: An instance of the <xref href=\"System.Transactions.TransactionScopeAsyncFlowOption\"></xref> enumeration that describes whether the ambient transaction associated with the transaction scope will flow across thread continuations when using Task or async/await .NET async programming patterns.\n  overload: System.Transactions.TransactionScope.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.EnterpriseServicesInteropOption)\n  id: '#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.EnterpriseServicesInteropOption)'\n  parent: System.Transactions.TransactionScope\n  langs:\n  - csharp\n  name: TransactionScope(TransactionScopeOption,TransactionOptions,EnterpriseServicesInteropOption)\n  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions,EnterpriseServicesInteropOption)\n  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions,EnterpriseServicesInteropOption)\n  type: Constructor\n  assemblies:\n  - System.Transactions\n  namespace: System.Transactions\n  summary: Initializes a new instance of the <xref href=\"System.Transactions.TransactionScope\"></xref> class with the specified scope and COM+ interoperability requirements, and transaction options.\n  remarks: \"When you use the `transactionOptions` parameter to specify an <xref:System.Transactions.IsolationLevel>, and the scope creates a transaction later, the new transaction is associated with the specified isolation level. If an isolation level is passed in together with a transaction, the transaction must have an identical isolation level, or an exception is thrown.  \\n  \\n **Note** This method uses <xref:System.Security.Permissions.SecurityAction> to prevent it from being called from untrusted code; however, only the immediate caller is required to possess the `FullTrust` permission set.\"\n  syntax:\n    content: public TransactionScope (System.Transactions.TransactionScopeOption scopeOption, System.Transactions.TransactionOptions transactionOptions, System.Transactions.EnterpriseServicesInteropOption interopOption);\n    parameters:\n    - id: scopeOption\n      type: System.Transactions.TransactionScopeOption\n      description: An instance of the <xref href=\"System.Transactions.TransactionScopeOption\"></xref> enumeration that describes the transaction requirements associated with this transaction scope.\n    - id: transactionOptions\n      type: System.Transactions.TransactionOptions\n      description: A <xref href=\"System.Transactions.TransactionOptions\"></xref> structure that describes the transaction options to use if a new transaction is created. If an existing transaction is used, the timeout value in this parameter applies to the transaction scope. If that time expires before the scope is disposed, the transaction is aborted.\n    - id: interopOption\n      type: System.Transactions.EnterpriseServicesInteropOption\n      description: An instance of the <xref href=\"System.Transactions.EnterpriseServicesInteropOption\"></xref> enumeration that describes how the associated transaction interacts with COM+ transactions.\n  overload: System.Transactions.TransactionScope.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.TransactionScopeAsyncFlowOption)\n  id: '#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.TransactionScopeAsyncFlowOption)'\n  parent: System.Transactions.TransactionScope\n  langs:\n  - csharp\n  name: TransactionScope(TransactionScopeOption,TransactionOptions,TransactionScopeAsyncFlowOption)\n  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions,TransactionScopeAsyncFlowOption)\n  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions,TransactionScopeAsyncFlowOption)\n  type: Constructor\n  assemblies:\n  - System.Transactions\n  namespace: System.Transactions\n  summary: \"[Supported in the .NET Framework 4.5.1 and later versions]  \\n  \\n Initializes a new instance of the <xref href=\\\"System.Transactions.TransactionScope\\\"></xref> class with the specified requirements and asynchronous flow option.\"\n  syntax:\n    content: public TransactionScope (System.Transactions.TransactionScopeOption scopeOption, System.Transactions.TransactionOptions transactionOptions, System.Transactions.TransactionScopeAsyncFlowOption asyncFlowOption);\n    parameters:\n    - id: scopeOption\n      type: System.Transactions.TransactionScopeOption\n      description: An instance of the <xref href=\"System.Transactions.TransactionScopeOption\"></xref> enumeration that describes the transaction requirements associated with this transaction scope.\n    - id: transactionOptions\n      type: System.Transactions.TransactionOptions\n      description: A <xref href=\"System.Transactions.TransactionOptions\"></xref> structure that describes the transaction options to use if a new transaction is created. If an existing transaction is used, the timeout value in this parameter applies to the transaction scope. If that time expires before the scope is disposed, the transaction is aborted.\n    - id: asyncFlowOption\n      type: System.Transactions.TransactionScopeAsyncFlowOption\n      description: An instance of the <xref href=\"System.Transactions.TransactionScopeAsyncFlowOption\"></xref> enumeration that describes whether the ambient transaction associated with the transaction scope will flow across thread continuations when using Task or async/await .NET async programming patterns.\n  overload: System.Transactions.TransactionScope.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Transactions.TransactionScope.Complete\n  id: Complete\n  parent: System.Transactions.TransactionScope\n  langs:\n  - csharp\n  name: Complete()\n  nameWithType: TransactionScope.Complete()\n  fullName: System.Transactions.TransactionScope.Complete()\n  type: Method\n  assemblies:\n  - System.Transactions\n  namespace: System.Transactions\n  summary: Indicates that all operations within the scope are completed successfully.\n  remarks: \"When you are satisfied that all operations within the scope are completed successfully, you should call this method only once to inform that transaction manager that the state across all resources is consistent, and the transaction can be committed. It is very good practice to put the call as the last statement in the `using` block.  \\n  \\n For more information on how this method is used, see the [Implementing An Implicit Transaction Using Transaction Scope](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199) topic.  \\n  \\n Failing to call this method aborts the transaction, because the transaction manager interprets this as a system failure, or exceptions thrown within the scope of transaction. However, you should also note that calling this method does not guarantee a commit of the transaction. It is merely a way of informing the transaction manager of your status. After calling this method, you can no longer access the ambient transaction via the <xref:System.Transactions.Transaction.Current%2A> property, and trying to do so results in an exception being thrown.  \\n  \\n The actual work of commit between the resources manager happens at the `End Using` statement if the <xref:System.Transactions.TransactionScope> object created the transaction. If it did not create the transaction, the commit occurs whenever <xref:System.Transactions.CommittableTransaction.Commit%2A> is called by the owner of the <xref:System.Transactions.CommittableTransaction> object. At that point the Transaction Manager calls the resource managers and informs them to either commit or rollback, based on whether this method was called on the <xref:System.Transactions.TransactionScope> object.\"\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Transactions.TransactionScope> class to define a block of code to participate in a transaction.  \\n  \\n [!code-vb[TransactionScope#1](~/add/codesnippet/visualbasic/m-system.transactions.tr_1_1.vb)]\\n [!code-cs[TransactionScope#1](~/add/codesnippet/csharp/m-system.transactions.tr_1_1.cs)]\"\n  syntax:\n    content: public void Complete ();\n    parameters: []\n  overload: System.Transactions.TransactionScope.Complete*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: This method has already been called once.\n  platform:\n  - net462\n- uid: System.Transactions.TransactionScope.Dispose\n  id: Dispose\n  parent: System.Transactions.TransactionScope\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: TransactionScope.Dispose()\n  fullName: System.Transactions.TransactionScope.Dispose()\n  type: Method\n  assemblies:\n  - System.Transactions\n  namespace: System.Transactions\n  summary: Ends the transaction scope.\n  remarks: \"Calling this method marks the end of the transaction scope. If the <xref:System.Transactions.TransactionScope> object created the transaction and <xref:System.Transactions.TransactionScope.Complete%2A> was called on the scope, the <xref:System.Transactions.TransactionScope> object attempts to commit the transaction when this method is called.  \\n  \\n The use of the C# `using` construction ensures that this method is called even if an exception occurs. Exceptions that occur after calling this method may not affect the transaction. This method also restores the ambient transaction to it original state. A <xref:System.Transactions.TransactionAbortedException> is thrown if the transaction is not actually committed.  \\n  \\n This method is synchronous and blocks until the transaction has been committed or aborted. Because of this, you should be extremely careful when using this method in a Windows Form (WinForm) application, or a deadlock can occur. If you call this method inside one WinForm Control event (for example, clicking a button), and use the synchronous <xref:System.Windows.Forms.Control.Invoke%2A> method to direct the control to perform some UI tasks (for example, changing colors) in the middle of processing the transaction, a deadlock will happen. This is because the <xref:System.Windows.Forms.Control.Invoke%2A> method is synchronous and blocks the worker thread until the UI thread finishes its job. However, in our scenario, the UI thread is also waiting for the worker thread to commit the transaction. The result is that none is able to proceed and the scope waits indefinitely for the Commit to finish. You should use <xref:System.Windows.Forms.Control.BeginInvoke%2A> rather than <xref:System.Windows.Forms.Control.Invoke%2A> wherever possible, because it is asynchronous and thus less prone to deadlock.  \\n  \\n For more information on how this method is used, see the [Implementing An Implicit Transaction Using Transaction Scope](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199) topic.\"\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Transactions.TransactionScope> class to define a block of code to participate in a transaction.  \\n  \\n [!code-vb[TransactionScope#1](~/add/codesnippet/visualbasic/m-system.transactions.tr_0_1.vb)]\\n [!code-cs[TransactionScope#1](~/add/codesnippet/csharp/m-system.transactions.tr_0_1.cs)]\"\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.Transactions.TransactionScope.Dispose*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.Transactions.TransactionScope.#ctor\n  parent: System.Transactions.TransactionScope\n  isExternal: false\n  name: TransactionScope()\n  nameWithType: TransactionScope.TransactionScope()\n  fullName: System.Transactions.TransactionScope.TransactionScope()\n- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction)\n  parent: System.Transactions.TransactionScope\n  isExternal: false\n  name: TransactionScope(Transaction)\n  nameWithType: TransactionScope.TransactionScope(Transaction)\n  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction)\n- uid: System.Transactions.Transaction\n  parent: System.Transactions\n  isExternal: false\n  name: Transaction\n  nameWithType: Transaction\n  fullName: System.Transactions.Transaction\n- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeAsyncFlowOption)\n  parent: System.Transactions.TransactionScope\n  isExternal: false\n  name: TransactionScope(TransactionScopeAsyncFlowOption)\n  nameWithType: TransactionScope.TransactionScope(TransactionScopeAsyncFlowOption)\n  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeAsyncFlowOption)\n- uid: System.Transactions.TransactionScopeAsyncFlowOption\n  parent: System.Transactions\n  isExternal: false\n  name: TransactionScopeAsyncFlowOption\n  nameWithType: TransactionScopeAsyncFlowOption\n  fullName: System.Transactions.TransactionScopeAsyncFlowOption\n- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption)\n  parent: System.Transactions.TransactionScope\n  isExternal: false\n  name: TransactionScope(TransactionScopeOption)\n  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption)\n  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption)\n- uid: System.Transactions.TransactionScopeOption\n  parent: System.Transactions\n  isExternal: false\n  name: TransactionScopeOption\n  nameWithType: TransactionScopeOption\n  fullName: System.Transactions.TransactionScopeOption\n- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan)\n  parent: System.Transactions.TransactionScope\n  isExternal: false\n  name: TransactionScope(Transaction,TimeSpan)\n  nameWithType: TransactionScope.TransactionScope(Transaction,TimeSpan)\n  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction,TimeSpan)\n- uid: System.TimeSpan\n  parent: System\n  isExternal: true\n  name: TimeSpan\n  nameWithType: TimeSpan\n  fullName: System.TimeSpan\n- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.Transactions.TransactionScopeAsyncFlowOption)\n  parent: System.Transactions.TransactionScope\n  isExternal: false\n  name: TransactionScope(Transaction,TransactionScopeAsyncFlowOption)\n  nameWithType: TransactionScope.TransactionScope(Transaction,TransactionScopeAsyncFlowOption)\n  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction,TransactionScopeAsyncFlowOption)\n- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan)\n  parent: System.Transactions.TransactionScope\n  isExternal: false\n  name: TransactionScope(TransactionScopeOption,TimeSpan)\n  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TimeSpan)\n  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TimeSpan)\n- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions)\n  parent: System.Transactions.TransactionScope\n  isExternal: false\n  name: TransactionScope(TransactionScopeOption,TransactionOptions)\n  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions)\n  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions)\n- uid: System.Transactions.TransactionOptions\n  parent: System.Transactions\n  isExternal: false\n  name: TransactionOptions\n  nameWithType: TransactionOptions\n  fullName: System.Transactions.TransactionOptions\n- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionScopeAsyncFlowOption)\n  parent: System.Transactions.TransactionScope\n  isExternal: false\n  name: TransactionScope(TransactionScopeOption,TransactionScopeAsyncFlowOption)\n  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TransactionScopeAsyncFlowOption)\n  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TransactionScopeAsyncFlowOption)\n- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.EnterpriseServicesInteropOption)\n  parent: System.Transactions.TransactionScope\n  isExternal: false\n  name: TransactionScope(Transaction,TimeSpan,EnterpriseServicesInteropOption)\n  nameWithType: TransactionScope.TransactionScope(Transaction,TimeSpan,EnterpriseServicesInteropOption)\n  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction,TimeSpan,EnterpriseServicesInteropOption)\n- uid: System.Transactions.EnterpriseServicesInteropOption\n  parent: System.Transactions\n  isExternal: false\n  name: EnterpriseServicesInteropOption\n  nameWithType: EnterpriseServicesInteropOption\n  fullName: System.Transactions.EnterpriseServicesInteropOption\n- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)\n  parent: System.Transactions.TransactionScope\n  isExternal: false\n  name: TransactionScope(Transaction,TimeSpan,TransactionScopeAsyncFlowOption)\n  nameWithType: TransactionScope.TransactionScope(Transaction,TimeSpan,TransactionScopeAsyncFlowOption)\n  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction,TimeSpan,TransactionScopeAsyncFlowOption)\n- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)\n  parent: System.Transactions.TransactionScope\n  isExternal: false\n  name: TransactionScope(TransactionScopeOption,TimeSpan,TransactionScopeAsyncFlowOption)\n  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TimeSpan,TransactionScopeAsyncFlowOption)\n  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TimeSpan,TransactionScopeAsyncFlowOption)\n- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.EnterpriseServicesInteropOption)\n  parent: System.Transactions.TransactionScope\n  isExternal: false\n  name: TransactionScope(TransactionScopeOption,TransactionOptions,EnterpriseServicesInteropOption)\n  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions,EnterpriseServicesInteropOption)\n  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions,EnterpriseServicesInteropOption)\n- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.TransactionScopeAsyncFlowOption)\n  parent: System.Transactions.TransactionScope\n  isExternal: false\n  name: TransactionScope(TransactionScopeOption,TransactionOptions,TransactionScopeAsyncFlowOption)\n  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions,TransactionScopeAsyncFlowOption)\n  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions,TransactionScopeAsyncFlowOption)\n- uid: System.Transactions.TransactionScope.Complete\n  parent: System.Transactions.TransactionScope\n  isExternal: false\n  name: Complete()\n  nameWithType: TransactionScope.Complete()\n  fullName: System.Transactions.TransactionScope.Complete()\n- uid: System.Transactions.TransactionScope.Dispose\n  parent: System.Transactions.TransactionScope\n  isExternal: false\n  name: Dispose()\n  nameWithType: TransactionScope.Dispose()\n  fullName: System.Transactions.TransactionScope.Dispose()\n- uid: System.Transactions.TransactionScope.#ctor*\n  parent: System.Transactions.TransactionScope\n  isExternal: false\n  name: TransactionScope\n  nameWithType: TransactionScope.TransactionScope\n- uid: System.Transactions.TransactionScope.Complete*\n  parent: System.Transactions.TransactionScope\n  isExternal: false\n  name: Complete\n  nameWithType: TransactionScope.Complete\n- uid: System.Transactions.TransactionScope.Dispose*\n  parent: System.Transactions.TransactionScope\n  isExternal: false\n  name: Dispose\n  nameWithType: TransactionScope.Dispose\n"}