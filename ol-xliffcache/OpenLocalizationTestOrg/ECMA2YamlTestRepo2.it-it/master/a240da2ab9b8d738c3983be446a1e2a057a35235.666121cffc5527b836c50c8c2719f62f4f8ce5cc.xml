{"nodes":[{"pos":[822,922],"content":"Specifies the values that are used in <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object permissions.","needQuote":true,"needEscape":true,"source":"Specifies the values that are used in <xref href=\"System.Net.PeerToPeer\"></xref> object permissions."},{"pos":[935,1398],"content":"The default permissions allow all local and Intranet zone applications to access PNRP services. If the default permissions are not changed, all link-local and site-local applications have access to Peer-to-Peer services, but global (internet) applications have no access.       Instances of this type have two permission states: they either have no access to the resource(s) protected by the permission, or they have unrestricted full access to those resources.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The default permissions allow all local and Intranet zone applications to access PNRP services. If the default permissions are not changed, all link-local and site-local applications have access to Peer-to-Peer services, but global (internet) applications have no access.       Instances of this type have two permission states: they either have no access to the resource(s) protected by the permission, or they have unrestricted full access to those resources.","pos":[0,461],"nodes":[{"content":"The default permissions allow all local and Intranet zone applications to access PNRP services.","pos":[0,95]},{"content":"If the default permissions are not changed, all link-local and site-local applications have access to Peer-to-Peer services, but global (internet) applications have no access.","pos":[96,271]},{"content":"Instances of this type have two permission states: they either have no access to the resource(s) protected by the permission, or they have unrestricted full access to those resources.","pos":[278,461]}]}]},{"pos":[2814,2955],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.PnrpPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the supplied initial permission state.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Net.PeerToPeer.PnrpPermission\"></xref> class with the supplied initial permission state."},{"pos":[2968,3319],"content":"Instances of this type have two permission states: they either have no access to the resource(s) protected by the permission, or they have unrestricted full access to those resources.       If `state` is Unrestricted, the PnrpPermission instance passes all demands. If `state` contains any other value, the PnrpPermission instance fails all demands.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Instances of this type have two permission states: they either have no access to the resource(s) protected by the permission, or they have unrestricted full access to those resources.","pos":[0,183]},{"content":"If <ph id=\"ph1\">`state`</ph> is Unrestricted, the PnrpPermission instance passes all demands.","pos":[190,265],"source":"       If `state` is Unrestricted, the PnrpPermission instance passes all demands."},{"content":"If <ph id=\"ph1\">`state`</ph> contains any other value, the PnrpPermission instance fails all demands.","pos":[266,349],"source":" If `state` contains any other value, the PnrpPermission instance fails all demands."}]},{"pos":[3526,3628],"content":"One of the values in the <bpt id=\"p1\">&lt;xref href=\"System.Security.Permissions.PermissionState\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> enumeration.","needQuote":true,"needEscape":true,"source":"One of the values in the <xref href=\"System.Security.Permissions.PermissionState\"></xref> enumeration."},{"pos":[4051,4162],"content":"Creates and returns an identical copy of the current <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.PnrpPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Creates and returns an identical copy of the current <xref href=\"System.Net.PeerToPeer.PnrpPermission\"></xref>."},{"pos":[4175,4457],"content":"A copy of a permission represents the same access to resources as the original permission.       Instances of this type have two permission states: they either have no access to the resource(s) protected by the permission, or they have unrestricted full access to those resources.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"A copy of a permission represents the same access to resources as the original permission.       Instances of this type have two permission states: they either have no access to the resource(s) protected by the permission, or they have unrestricted full access to those resources.","pos":[0,280],"nodes":[{"content":"A copy of a permission represents the same access to resources as the original permission.","pos":[0,90]},{"content":"Instances of this type have two permission states: they either have no access to the resource(s) protected by the permission, or they have unrestricted full access to those resources.","pos":[97,280]}]}]},{"pos":[4625,4782],"content":"An object with an IPermission interface, whose instance contains a copy of the current instance of <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.PnrpPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"An object with an IPermission interface, whose instance contains a copy of the current instance of <xref href=\"System.Net.PeerToPeer.PnrpPermission\"></xref>."},{"pos":[4947,5108],"content":"-   The parameter is not a valid <xref href=\"System.Net.PeerToPeer.PnrpPermission\"></xref> element.      -   The parameter's version number is not supported.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">-</ph>   The parameter is not a valid <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.PnrpPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> element.","pos":[0,99],"source":"-   The parameter is not a valid <xref href=\"System.Net.PeerToPeer.PnrpPermission\"></xref> element."},{"content":"-   The parameter's version number is not supported.","pos":[105,157]}]},{"pos":[5212,5387],"content":"The parameter is a <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> reference (<bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> in Visual Basic).","needQuote":true,"needEscape":true,"source":"The parameter is a <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> reference (<xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> in Visual Basic)."},{"pos":[5863,5938],"content":"Reconstructs a security object with a specified state from an XML encoding.","needQuote":true,"needEscape":true,"nodes":[{"content":"Reconstructs a security object with a specified state from an XML encoding.","pos":[0,75]}]},{"pos":[5951,6223],"content":"Represents the XML object model for encoding security objects. This class cannot be inherited.       This class is intended to be a lightweight implementation of a simple XML object model for use within the security system, and not for use as a general XML object model.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Represents the XML object model for encoding security objects. This class cannot be inherited.       This class is intended to be a lightweight implementation of a simple XML object model for use within the security system, and not for use as a general XML object model.","pos":[0,270],"nodes":[{"content":"Represents the XML object model for encoding security objects.","pos":[0,62]},{"content":"This class cannot be inherited.","pos":[63,94]},{"content":"This class is intended to be a lightweight implementation of a simple XML object model for use within the security system, and not for use as a general XML object model.","pos":[101,270]}]}]},{"pos":[6405,6459],"content":"The XML encoding to use to reconstruct the permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"The XML encoding to use to reconstruct the permission.","pos":[0,54]}]},{"pos":[6627,6788],"content":"-   The parameter is not a valid <xref href=\"System.Net.PeerToPeer.PnrpPermission\"></xref> element.      -   The parameter's version number is not supported.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">-</ph>   The parameter is not a valid <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.PnrpPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> element.","pos":[0,99],"source":"-   The parameter is not a valid <xref href=\"System.Net.PeerToPeer.PnrpPermission\"></xref> element."},{"content":"-   The parameter's version number is not supported.","pos":[105,157]}]},{"pos":[6892,7067],"content":"The parameter is a <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> reference (<bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> in Visual Basic).","needQuote":true,"needEscape":true,"source":"The parameter is a <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> reference (<xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> in Visual Basic)."},{"pos":[7533,7693],"content":"Creates and returns a permission that is the intersection of the current <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.PnrpPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and the specified permission.","needQuote":true,"needEscape":true,"source":"Creates and returns a permission that is the intersection of the current <xref href=\"System.Net.PeerToPeer.PnrpPermission\"></xref> and the specified permission."},{"pos":[7706,8391],"content":"The intersection of two permissions is a permission that describes the set of operations they both describe in common. Only a demand that passes both original permissions will pass the intersection.       The following statements are required to be `true` for all implementations of the Intersect method. X and Y represent <xref:System.Security.IPermission> object references that are not a `null` reference (Nothing in Visual Basic).      -   X.Intersect(X) returns a value equal to X.      -   X.Intersect(Y) returns the same value as Y.Intersect(X).      -   X.Intersect(a `null` reference (`Nothing` in Visual Basic)) returns a `null` reference (`Nothing` in Visual Basic).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The intersection of two permissions is a permission that describes the set of operations they both describe in common.","pos":[0,118]},{"content":"Only a demand that passes both original permissions will pass the intersection.","pos":[119,198]},{"content":"The following statements are required to be <ph id=\"ph1\">`true`</ph> for all implementations of the Intersect method.","pos":[205,304],"source":"       The following statements are required to be `true` for all implementations of the Intersect method."},{"content":"X and Y represent &lt;xref:System.Security.IPermission&gt; object references that are not a <ph id=\"ph1\">`null`</ph> reference (Nothing in Visual Basic).","pos":[305,434],"source":" X and Y represent <xref:System.Security.IPermission> object references that are not a `null` reference (Nothing in Visual Basic)."},{"content":"-   X.Intersect(X) returns a value equal to X.      -   X.Intersect(Y) returns the same value as Y.Intersect(X).","pos":[440,552]},{"content":"-   X.Intersect(a <ph id=\"ph1\">`null`</ph> reference (<ph id=\"ph2\">`Nothing`</ph> in Visual Basic)) returns a <ph id=\"ph3\">`null`</ph> reference (<ph id=\"ph4\">`Nothing`</ph> in Visual Basic).","pos":[558,677],"source":"      -   X.Intersect(a `null` reference (`Nothing` in Visual Basic)) returns a `null` reference (`Nothing` in Visual Basic)."}]},{"pos":[8600,8709],"content":"A permission to Intersect with the current permission. It must be of the same type as the current permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"A permission to Intersect with the current permission. It must be of the same type as the current permission.","pos":[0,109],"nodes":[{"content":"A permission to Intersect with the current permission.","pos":[0,54]},{"content":"It must be of the same type as the current permission.","pos":[55,109]}]}]},{"pos":[8781,9144],"content":"A new permission that represents the intersection of the current <xref href=\"System.Net.PeerToPeer.PnrpPermission\"></xref> and the specified permission. This new permission is a <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> reference (<xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> in Visual Basic) if the intersection is empty.","needQuote":true,"needEscape":true,"nodes":[{"content":"A new permission that represents the intersection of the current <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.PnrpPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and the specified permission.","pos":[0,152],"source":"A new permission that represents the intersection of the current <xref href=\"System.Net.PeerToPeer.PnrpPermission\"></xref> and the specified permission."},{"content":"This new permission is a <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> reference (<bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> in Visual Basic) if the intersection is empty.","pos":[153,363],"source":" This new permission is a <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> reference (<xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> in Visual Basic) if the intersection is empty."}]},{"pos":[9313,9566],"content":"The target parameter is not a <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> reference (<bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> in Visual Basic) and is not an instance of the same class as the current permission.","needQuote":true,"needEscape":true,"source":"The target parameter is not a <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> reference (<xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> in Visual Basic) and is not an instance of the same class as the current permission."},{"pos":[10037,10166],"content":"Determines whether the current <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.PnrpPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is a subset of the specified permission.","needQuote":true,"needEscape":true,"source":"Determines whether the current <xref href=\"System.Net.PeerToPeer.PnrpPermission\"></xref> is a subset of the specified permission."},{"pos":[11808,11938],"content":"A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.","pos":[0,130],"nodes":[{"content":"A permission that is to be tested for the subset relationship.","pos":[0,62]},{"content":"This permission must be of the same type as the current permission.","pos":[63,130]}]}]},{"pos":[11997,12246],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the current <bpt id=\"p2\">&lt;xref href=\"System.Net.PeerToPeer.PnrpPermission\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> is a subset of the specified permission; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"></xref> if the current <xref href=\"System.Net.PeerToPeer.PnrpPermission\"></xref> is a subset of the specified permission; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[12416,12669],"content":"The target parameter is not a <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> reference (<bpt id=\"p2\">&lt;xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> in Visual Basic) and is not an instance of the same class as the current permission.","needQuote":true,"needEscape":true,"source":"The target parameter is not a <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> reference (<xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> in Visual Basic) and is not an instance of the same class as the current permission."},{"pos":[13069,13190],"content":"Returns a value specifying whether the current <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.PnrpPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is unrestricted.","needQuote":true,"needEscape":true,"source":"Returns a value specifying whether the current <xref href=\"System.Net.PeerToPeer.PnrpPermission\"></xref> is unrestricted."},{"pos":[13202,13300],"content":"An unrestricted permission represents access to any and all resources protected by the permission.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"An unrestricted permission represents access to any and all resources protected by the permission.","pos":[0,98]}]},{"pos":[13432,13610],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the current permission is unrestricted; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"></xref> if the current permission is unrestricted; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[14047,14158],"content":"Creates an XML encoding of the <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.PnrpPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and its current state.","needQuote":true,"needEscape":true,"source":"Creates an XML encoding of the <xref href=\"System.Net.PeerToPeer.PnrpPermission\"></xref> and its current state."},{"pos":[14334,14477],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Security.SecurityElement\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object that contains an XML encoding of the permission, including any state information.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Security.SecurityElement\"></xref> object that contains an XML encoding of the permission, including any state information."},{"pos":[14996,15137],"content":"Creates a permission that is the union of the current <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.PnrpPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and the specified permission.","needQuote":true,"needEscape":true,"source":"Creates a permission that is the union of the current <xref href=\"System.Net.PeerToPeer.PnrpPermission\"></xref> and the specified permission."},{"pos":[15150,15910],"content":"The result of a call to Union is a permission that represents all the operations represented by both the current <xref:System.Net.PeerToPeer.PnrpPermission> and the specified permission. Any demand that passes either permission passes their union.       The following statements are required to be `true` for all implementations of the Union method. X and Y represent <xref:System.Security.IPermission> objects that are not a `null` reference (`Nothing` in Visual Basic).      -   X.Union(X) returns an object that has the same value as X.      -   X.Union(Y) returns an object that has the same value as the object returned by Y.Union(X).      -   X.Union(a `null` reference (`Nothing` in Visual Basic)) returns an object that has the same value as X.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The result of a call to Union is a permission that represents all the operations represented by both the current &lt;xref:System.Net.PeerToPeer.PnrpPermission&gt; and the specified permission.","pos":[0,186],"source":"The result of a call to Union is a permission that represents all the operations represented by both the current <xref:System.Net.PeerToPeer.PnrpPermission> and the specified permission."},{"content":"Any demand that passes either permission passes their union.","pos":[187,247]},{"content":"The following statements are required to be <ph id=\"ph1\">`true`</ph> for all implementations of the Union method.","pos":[254,349],"source":"       The following statements are required to be `true` for all implementations of the Union method."},{"content":"X and Y represent &lt;xref:System.Security.IPermission&gt; objects that are not a <ph id=\"ph1\">`null`</ph> reference (<ph id=\"ph2\">`Nothing`</ph> in Visual Basic).","pos":[350,471],"source":" X and Y represent <xref:System.Security.IPermission> objects that are not a `null` reference (`Nothing` in Visual Basic)."},{"content":"-   X.Union(X) returns an object that has the same value as X.      -   X.Union(Y) returns an object that has the same value as the object returned by Y.Union(X).","pos":[477,639]},{"content":"-   X.Union(a <ph id=\"ph1\">`null`</ph> reference (<ph id=\"ph2\">`Nothing`</ph> in Visual Basic)) returns an object that has the same value as X.","pos":[645,752],"source":"      -   X.Union(a `null` reference (`Nothing` in Visual Basic)) returns an object that has the same value as X."}]},{"pos":[16115,16222],"content":"A permission to combine with the current permission. It must be of the same type as the current permission.","needQuote":true,"needEscape":true,"nodes":[{"content":"A permission to combine with the current permission. It must be of the same type as the current permission.","pos":[0,107],"nodes":[{"content":"A permission to combine with the current permission.","pos":[0,52]},{"content":"It must be of the same type as the current permission.","pos":[53,107]}]}]},{"pos":[16294,16439],"content":"A new permission that represents the Union of the current <bpt id=\"p1\">&lt;xref href=\"System.Net.PeerToPeer.PnrpPermission\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and the specified permission.","needQuote":true,"needEscape":true,"source":"A new permission that represents the Union of the current <xref href=\"System.Net.PeerToPeer.PnrpPermission\"></xref> and the specified permission."},{"pos":[16604,16645],"content":"<ph id=\"ph1\">&lt;code&gt;target&lt;/code&gt;</ph> parameter is invalid.","needQuote":true,"needEscape":true,"source":"<code>target</code> parameter is invalid."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Net.PeerToPeer.PnrpPermission\n  id: PnrpPermission\n  children:\n  - System.Net.PeerToPeer.PnrpPermission.#ctor(System.Security.Permissions.PermissionState)\n  - System.Net.PeerToPeer.PnrpPermission.Copy\n  - System.Net.PeerToPeer.PnrpPermission.FromXml(System.Security.SecurityElement)\n  - System.Net.PeerToPeer.PnrpPermission.Intersect(System.Security.IPermission)\n  - System.Net.PeerToPeer.PnrpPermission.IsSubsetOf(System.Security.IPermission)\n  - System.Net.PeerToPeer.PnrpPermission.IsUnrestricted\n  - System.Net.PeerToPeer.PnrpPermission.ToXml\n  - System.Net.PeerToPeer.PnrpPermission.Union(System.Security.IPermission)\n  langs:\n  - csharp\n  name: PnrpPermission\n  nameWithType: PnrpPermission\n  fullName: System.Net.PeerToPeer.PnrpPermission\n  type: Class\n  summary: Specifies the values that are used in <xref href=\"System.Net.PeerToPeer\"></xref> object permissions.\n  remarks: \"The default permissions allow all local and Intranet zone applications to access PNRP services. If the default permissions are not changed, all link-local and site-local applications have access to Peer-to-Peer services, but global (internet) applications have no access.  \\n  \\n Instances of this type have two permission states: they either have no access to the resource(s) protected by the permission, or they have unrestricted full access to those resources.\"\n  syntax:\n    content: 'public sealed class PnrpPermission : System.Security.CodeAccessPermission, System.Security.Permissions.IUnrestrictedPermission'\n  inheritance:\n  - System.Object\n  - System.Security.CodeAccessPermission\n  implements:\n  - System.Security.Permissions.IUnrestrictedPermission\n  inheritedMembers:\n  - System.Security.CodeAccessPermission.Assert\n  - System.Security.CodeAccessPermission.Demand\n  - System.Security.CodeAccessPermission.Deny\n  - System.Security.CodeAccessPermission.Equals(System.Object)\n  - System.Security.CodeAccessPermission.GetHashCode\n  - System.Security.CodeAccessPermission.PermitOnly\n  - System.Security.CodeAccessPermission.RevertAll\n  - System.Security.CodeAccessPermission.RevertAssert\n  - System.Security.CodeAccessPermission.RevertDeny\n  - System.Security.CodeAccessPermission.RevertPermitOnly\n  - System.Security.CodeAccessPermission.ToString\n  platform:\n  - net462\n- uid: System.Net.PeerToPeer.PnrpPermission.#ctor(System.Security.Permissions.PermissionState)\n  id: '#ctor(System.Security.Permissions.PermissionState)'\n  parent: System.Net.PeerToPeer.PnrpPermission\n  langs:\n  - csharp\n  name: PnrpPermission(PermissionState)\n  nameWithType: PnrpPermission.PnrpPermission(PermissionState)\n  fullName: System.Net.PeerToPeer.PnrpPermission.PnrpPermission(PermissionState)\n  type: Constructor\n  assemblies:\n  - System.Net\n  namespace: System.Net.PeerToPeer\n  summary: Initializes a new instance of the <xref href=\"System.Net.PeerToPeer.PnrpPermission\"></xref> class with the supplied initial permission state.\n  remarks: \"Instances of this type have two permission states: they either have no access to the resource(s) protected by the permission, or they have unrestricted full access to those resources.  \\n  \\n If `state` is Unrestricted, the PnrpPermission instance passes all demands. If `state` contains any other value, the PnrpPermission instance fails all demands.\"\n  syntax:\n    content: public PnrpPermission (System.Security.Permissions.PermissionState state);\n    parameters:\n    - id: state\n      type: System.Security.Permissions.PermissionState\n      description: One of the values in the <xref href=\"System.Security.Permissions.PermissionState\"></xref> enumeration.\n  overload: System.Net.PeerToPeer.PnrpPermission.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.PeerToPeer.PnrpPermission.Copy\n  id: Copy\n  parent: System.Net.PeerToPeer.PnrpPermission\n  langs:\n  - csharp\n  name: Copy()\n  nameWithType: PnrpPermission.Copy()\n  fullName: System.Net.PeerToPeer.PnrpPermission.Copy()\n  type: Method\n  assemblies:\n  - System.Net\n  namespace: System.Net.PeerToPeer\n  summary: Creates and returns an identical copy of the current <xref href=\"System.Net.PeerToPeer.PnrpPermission\"></xref>.\n  remarks: \"A copy of a permission represents the same access to resources as the original permission.  \\n  \\n Instances of this type have two permission states: they either have no access to the resource(s) protected by the permission, or they have unrestricted full access to those resources.\"\n  syntax:\n    content: public override System.Security.IPermission Copy ();\n    parameters: []\n    return:\n      type: System.Security.IPermission\n      description: An object with an IPermission interface, whose instance contains a copy of the current instance of <xref href=\"System.Net.PeerToPeer.PnrpPermission\"></xref>.\n  overload: System.Net.PeerToPeer.PnrpPermission.Copy*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"-   The parameter is not a valid <xref href=\\\"System.Net.PeerToPeer.PnrpPermission\\\"></xref> element.  \\n  \\n-   The parameter's version number is not supported.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The parameter is a <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> reference (<xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> in Visual Basic).\n  platform:\n  - net462\n- uid: System.Net.PeerToPeer.PnrpPermission.FromXml(System.Security.SecurityElement)\n  id: FromXml(System.Security.SecurityElement)\n  parent: System.Net.PeerToPeer.PnrpPermission\n  langs:\n  - csharp\n  name: FromXml(SecurityElement)\n  nameWithType: PnrpPermission.FromXml(SecurityElement)\n  fullName: System.Net.PeerToPeer.PnrpPermission.FromXml(SecurityElement)\n  type: Method\n  assemblies:\n  - System.Net\n  namespace: System.Net.PeerToPeer\n  summary: Reconstructs a security object with a specified state from an XML encoding.\n  remarks: \"Represents the XML object model for encoding security objects. This class cannot be inherited.  \\n  \\n This class is intended to be a lightweight implementation of a simple XML object model for use within the security system, and not for use as a general XML object model.\"\n  syntax:\n    content: public override void FromXml (System.Security.SecurityElement e);\n    parameters:\n    - id: e\n      type: System.Security.SecurityElement\n      description: The XML encoding to use to reconstruct the permission.\n  overload: System.Net.PeerToPeer.PnrpPermission.FromXml*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"-   The parameter is not a valid <xref href=\\\"System.Net.PeerToPeer.PnrpPermission\\\"></xref> element.  \\n  \\n-   The parameter's version number is not supported.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The parameter is a <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> reference (<xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> in Visual Basic).\n  platform:\n  - net462\n- uid: System.Net.PeerToPeer.PnrpPermission.Intersect(System.Security.IPermission)\n  id: Intersect(System.Security.IPermission)\n  parent: System.Net.PeerToPeer.PnrpPermission\n  langs:\n  - csharp\n  name: Intersect(IPermission)\n  nameWithType: PnrpPermission.Intersect(IPermission)\n  fullName: System.Net.PeerToPeer.PnrpPermission.Intersect(IPermission)\n  type: Method\n  assemblies:\n  - System.Net\n  namespace: System.Net.PeerToPeer\n  summary: Creates and returns a permission that is the intersection of the current <xref href=\"System.Net.PeerToPeer.PnrpPermission\"></xref> and the specified permission.\n  remarks: \"The intersection of two permissions is a permission that describes the set of operations they both describe in common. Only a demand that passes both original permissions will pass the intersection.  \\n  \\n The following statements are required to be `true` for all implementations of the Intersect method. X and Y represent <xref:System.Security.IPermission> object references that are not a `null` reference (Nothing in Visual Basic).  \\n  \\n-   X.Intersect(X) returns a value equal to X.  \\n  \\n-   X.Intersect(Y) returns the same value as Y.Intersect(X).  \\n  \\n-   X.Intersect(a `null` reference (`Nothing` in Visual Basic)) returns a `null` reference (`Nothing` in Visual Basic).\"\n  syntax:\n    content: public override System.Security.IPermission Intersect (System.Security.IPermission target);\n    parameters:\n    - id: target\n      type: System.Security.IPermission\n      description: A permission to Intersect with the current permission. It must be of the same type as the current permission.\n    return:\n      type: System.Security.IPermission\n      description: A new permission that represents the intersection of the current <xref href=\"System.Net.PeerToPeer.PnrpPermission\"></xref> and the specified permission. This new permission is a <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> reference (<xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> in Visual Basic) if the intersection is empty.\n  overload: System.Net.PeerToPeer.PnrpPermission.Intersect*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The target parameter is not a <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> reference (<xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> in Visual Basic) and is not an instance of the same class as the current permission.\n  platform:\n  - net462\n- uid: System.Net.PeerToPeer.PnrpPermission.IsSubsetOf(System.Security.IPermission)\n  id: IsSubsetOf(System.Security.IPermission)\n  parent: System.Net.PeerToPeer.PnrpPermission\n  langs:\n  - csharp\n  name: IsSubsetOf(IPermission)\n  nameWithType: PnrpPermission.IsSubsetOf(IPermission)\n  fullName: System.Net.PeerToPeer.PnrpPermission.IsSubsetOf(IPermission)\n  type: Method\n  assemblies:\n  - System.Net\n  namespace: System.Net.PeerToPeer\n  summary: Determines whether the current <xref href=\"System.Net.PeerToPeer.PnrpPermission\"></xref> is a subset of the specified permission.\n  remarks: \"The current <xref:System.Net.PeerToPeer.PnrpPermission> is a subset of the specified permission if the current permission specifies a set of operations that is wholly contained by the specified permission. For example, a permission that represents access to \\\"*C:\\\\example.txt*\\\" is a subset of a permission that represents access to \\\"*C:\\\\\\\\*\\\". If this method returns `true`, the current permission represents no more access to the protected resource than does the specified permission.  \\n  \\n The following statements are required to be `true` for all implementations of the IsSubsetOf method. X, Y, and Z represent <xref:System.Security.IPermission> objects that are not a `null` reference (`Nothing` in Visual Basic).  \\n  \\n-   X.IsSubsetOf(X) returns `true`.  \\n  \\n-   X.IsSubsetOf(Y) returns the same value as Y.IsSubsetOf(X) if and only if X and Y represent the same set of permissions.  \\n  \\n-   If X.IsSubsetOf(Y) and Y.IsSubsetOf(Z) both return `true`, X.IsSubsetOf(Z) returns `true`.  \\n  \\n-  \\n  \\n If X represents an empty IPermission object with a permission state of *None* and Y represents an IPermission object that is a `null` reference (`Nothing` in Visual Basic), X.IsSubsetOf(Y) returns `true`. If Z is also an empty permission, the compound set operation X.Union(Z).IsSubsetOf(Y) also returns `true` because the <xref:System.Net.PeerToPeer.PnrpPermission.Union%2A> of two empty permissions is an empty permission.\"\n  syntax:\n    content: public override bool IsSubsetOf (System.Security.IPermission target);\n    parameters:\n    - id: target\n      type: System.Security.IPermission\n      description: A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"></xref> if the current <xref href=\"System.Net.PeerToPeer.PnrpPermission\"></xref> is a subset of the specified permission; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Net.PeerToPeer.PnrpPermission.IsSubsetOf*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The target parameter is not a <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> reference (<xref uid=\"langword_csharp_Nothing\" name=\"Nothing\" href=\"\"></xref> in Visual Basic) and is not an instance of the same class as the current permission.\n  platform:\n  - net462\n- uid: System.Net.PeerToPeer.PnrpPermission.IsUnrestricted\n  id: IsUnrestricted\n  parent: System.Net.PeerToPeer.PnrpPermission\n  langs:\n  - csharp\n  name: IsUnrestricted()\n  nameWithType: PnrpPermission.IsUnrestricted()\n  fullName: System.Net.PeerToPeer.PnrpPermission.IsUnrestricted()\n  type: Method\n  assemblies:\n  - System.Net\n  namespace: System.Net.PeerToPeer\n  summary: Returns a value specifying whether the current <xref href=\"System.Net.PeerToPeer.PnrpPermission\"></xref> is unrestricted.\n  remarks: An unrestricted permission represents access to any and all resources protected by the permission.\n  syntax:\n    content: public bool IsUnrestricted ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_True\" name=\"True\" href=\"\"></xref> if the current permission is unrestricted; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Net.PeerToPeer.PnrpPermission.IsUnrestricted*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.PeerToPeer.PnrpPermission.ToXml\n  id: ToXml\n  parent: System.Net.PeerToPeer.PnrpPermission\n  langs:\n  - csharp\n  name: ToXml()\n  nameWithType: PnrpPermission.ToXml()\n  fullName: System.Net.PeerToPeer.PnrpPermission.ToXml()\n  type: Method\n  assemblies:\n  - System.Net\n  namespace: System.Net.PeerToPeer\n  summary: Creates an XML encoding of the <xref href=\"System.Net.PeerToPeer.PnrpPermission\"></xref> and its current state.\n  syntax:\n    content: public override System.Security.SecurityElement ToXml ();\n    parameters: []\n    return:\n      type: System.Security.SecurityElement\n      description: A <xref href=\"System.Security.SecurityElement\"></xref> object that contains an XML encoding of the permission, including any state information.\n  overload: System.Net.PeerToPeer.PnrpPermission.ToXml*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.PeerToPeer.PnrpPermission.Union(System.Security.IPermission)\n  id: Union(System.Security.IPermission)\n  parent: System.Net.PeerToPeer.PnrpPermission\n  langs:\n  - csharp\n  name: Union(IPermission)\n  nameWithType: PnrpPermission.Union(IPermission)\n  fullName: System.Net.PeerToPeer.PnrpPermission.Union(IPermission)\n  type: Method\n  assemblies:\n  - System.Net\n  namespace: System.Net.PeerToPeer\n  summary: Creates a permission that is the union of the current <xref href=\"System.Net.PeerToPeer.PnrpPermission\"></xref> and the specified permission.\n  remarks: \"The result of a call to Union is a permission that represents all the operations represented by both the current <xref:System.Net.PeerToPeer.PnrpPermission> and the specified permission. Any demand that passes either permission passes their union.  \\n  \\n The following statements are required to be `true` for all implementations of the Union method. X and Y represent <xref:System.Security.IPermission> objects that are not a `null` reference (`Nothing` in Visual Basic).  \\n  \\n-   X.Union(X) returns an object that has the same value as X.  \\n  \\n-   X.Union(Y) returns an object that has the same value as the object returned by Y.Union(X).  \\n  \\n-   X.Union(a `null` reference (`Nothing` in Visual Basic)) returns an object that has the same value as X.\"\n  syntax:\n    content: public override System.Security.IPermission Union (System.Security.IPermission target);\n    parameters:\n    - id: target\n      type: System.Security.IPermission\n      description: A permission to combine with the current permission. It must be of the same type as the current permission.\n    return:\n      type: System.Security.IPermission\n      description: A new permission that represents the Union of the current <xref href=\"System.Net.PeerToPeer.PnrpPermission\"></xref> and the specified permission.\n  overload: System.Net.PeerToPeer.PnrpPermission.Union*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>target</code> parameter is invalid.\n  platform:\n  - net462\nreferences:\n- uid: System.Security.CodeAccessPermission\n  isExternal: false\n  name: System.Security.CodeAccessPermission\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.Net.PeerToPeer.PnrpPermission.#ctor(System.Security.Permissions.PermissionState)\n  parent: System.Net.PeerToPeer.PnrpPermission\n  isExternal: false\n  name: PnrpPermission(PermissionState)\n  nameWithType: PnrpPermission.PnrpPermission(PermissionState)\n  fullName: System.Net.PeerToPeer.PnrpPermission.PnrpPermission(PermissionState)\n- uid: System.Security.Permissions.PermissionState\n  parent: System.Security.Permissions\n  isExternal: false\n  name: PermissionState\n  nameWithType: PermissionState\n  fullName: System.Security.Permissions.PermissionState\n- uid: System.Net.PeerToPeer.PnrpPermission.Copy\n  parent: System.Net.PeerToPeer.PnrpPermission\n  isExternal: false\n  name: Copy()\n  nameWithType: PnrpPermission.Copy()\n  fullName: System.Net.PeerToPeer.PnrpPermission.Copy()\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n- uid: System.Net.PeerToPeer.PnrpPermission.FromXml(System.Security.SecurityElement)\n  parent: System.Net.PeerToPeer.PnrpPermission\n  isExternal: false\n  name: FromXml(SecurityElement)\n  nameWithType: PnrpPermission.FromXml(SecurityElement)\n  fullName: System.Net.PeerToPeer.PnrpPermission.FromXml(SecurityElement)\n- uid: System.Security.SecurityElement\n  parent: System.Security\n  isExternal: false\n  name: SecurityElement\n  nameWithType: SecurityElement\n  fullName: System.Security.SecurityElement\n- uid: System.Net.PeerToPeer.PnrpPermission.Intersect(System.Security.IPermission)\n  parent: System.Net.PeerToPeer.PnrpPermission\n  isExternal: false\n  name: Intersect(IPermission)\n  nameWithType: PnrpPermission.Intersect(IPermission)\n  fullName: System.Net.PeerToPeer.PnrpPermission.Intersect(IPermission)\n- uid: System.Net.PeerToPeer.PnrpPermission.IsSubsetOf(System.Security.IPermission)\n  parent: System.Net.PeerToPeer.PnrpPermission\n  isExternal: false\n  name: IsSubsetOf(IPermission)\n  nameWithType: PnrpPermission.IsSubsetOf(IPermission)\n  fullName: System.Net.PeerToPeer.PnrpPermission.IsSubsetOf(IPermission)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Net.PeerToPeer.PnrpPermission.IsUnrestricted\n  parent: System.Net.PeerToPeer.PnrpPermission\n  isExternal: false\n  name: IsUnrestricted()\n  nameWithType: PnrpPermission.IsUnrestricted()\n  fullName: System.Net.PeerToPeer.PnrpPermission.IsUnrestricted()\n- uid: System.Net.PeerToPeer.PnrpPermission.ToXml\n  parent: System.Net.PeerToPeer.PnrpPermission\n  isExternal: false\n  name: ToXml()\n  nameWithType: PnrpPermission.ToXml()\n  fullName: System.Net.PeerToPeer.PnrpPermission.ToXml()\n- uid: System.Net.PeerToPeer.PnrpPermission.Union(System.Security.IPermission)\n  parent: System.Net.PeerToPeer.PnrpPermission\n  isExternal: false\n  name: Union(IPermission)\n  nameWithType: PnrpPermission.Union(IPermission)\n  fullName: System.Net.PeerToPeer.PnrpPermission.Union(IPermission)\n- uid: System.Net.PeerToPeer.PnrpPermission.#ctor*\n  parent: System.Net.PeerToPeer.PnrpPermission\n  isExternal: false\n  name: PnrpPermission\n  nameWithType: PnrpPermission.PnrpPermission\n- uid: System.Net.PeerToPeer.PnrpPermission.Copy*\n  parent: System.Net.PeerToPeer.PnrpPermission\n  isExternal: false\n  name: Copy\n  nameWithType: PnrpPermission.Copy\n- uid: System.Net.PeerToPeer.PnrpPermission.FromXml*\n  parent: System.Net.PeerToPeer.PnrpPermission\n  isExternal: false\n  name: FromXml\n  nameWithType: PnrpPermission.FromXml\n- uid: System.Net.PeerToPeer.PnrpPermission.Intersect*\n  parent: System.Net.PeerToPeer.PnrpPermission\n  isExternal: false\n  name: Intersect\n  nameWithType: PnrpPermission.Intersect\n- uid: System.Net.PeerToPeer.PnrpPermission.IsSubsetOf*\n  parent: System.Net.PeerToPeer.PnrpPermission\n  isExternal: false\n  name: IsSubsetOf\n  nameWithType: PnrpPermission.IsSubsetOf\n- uid: System.Net.PeerToPeer.PnrpPermission.IsUnrestricted*\n  parent: System.Net.PeerToPeer.PnrpPermission\n  isExternal: false\n  name: IsUnrestricted\n  nameWithType: PnrpPermission.IsUnrestricted\n- uid: System.Net.PeerToPeer.PnrpPermission.ToXml*\n  parent: System.Net.PeerToPeer.PnrpPermission\n  isExternal: false\n  name: ToXml\n  nameWithType: PnrpPermission.ToXml\n- uid: System.Net.PeerToPeer.PnrpPermission.Union*\n  parent: System.Net.PeerToPeer.PnrpPermission\n  isExternal: false\n  name: Union\n  nameWithType: PnrpPermission.Union\n"}