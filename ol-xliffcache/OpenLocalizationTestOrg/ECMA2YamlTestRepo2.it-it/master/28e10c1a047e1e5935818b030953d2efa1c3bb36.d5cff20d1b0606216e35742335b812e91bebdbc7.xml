{"nodes":[{"pos":[765,904],"content":"To implement a custom upgrade initiator, inherit from this <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_abstract\" name=\"abstract\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> base class.","needQuote":true,"needEscape":true,"source":"To implement a custom upgrade initiator, inherit from this <xref uid=\"langword_csharp_abstract\" name=\"abstract\" href=\"\"></xref> base class."},{"pos":[917,1325],"content":"An example of a stream upgrade is to build a compression stream directly on top of the transport stream. This class is used with <xref:System.ServiceModel.Channels.StreamUpgradeAcceptor> and <xref:System.ServiceModel.Channels.StreamUpgradeProvider> to implement a custom stream upgrade.       For a detailed description of the upgrade process, see <xref:System.ServiceModel.Channels.StreamUpgradeProvider>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"An example of a stream upgrade is to build a compression stream directly on top of the transport stream. This class is used with <xref:System.ServiceModel.Channels.StreamUpgradeAcceptor> and <xref:System.ServiceModel.Channels.StreamUpgradeProvider> to implement a custom stream upgrade.       For a detailed description of the upgrade process, see <xref:System.ServiceModel.Channels.StreamUpgradeProvider>.","pos":[0,406],"nodes":[{"content":"An example of a stream upgrade is to build a compression stream directly on top of the transport stream.","pos":[0,104]},{"content":"This class is used with &lt;xref:System.ServiceModel.Channels.StreamUpgradeAcceptor&gt; and &lt;xref:System.ServiceModel.Channels.StreamUpgradeProvider&gt; to implement a custom stream upgrade.","pos":[105,286],"source":" This class is used with <xref:System.ServiceModel.Channels.StreamUpgradeAcceptor> and <xref:System.ServiceModel.Channels.StreamUpgradeProvider> to implement a custom stream upgrade."},{"content":"For a detailed description of the upgrade process, see &lt;xref:System.ServiceModel.Channels.StreamUpgradeProvider&gt;.","pos":[293,406],"source":"       For a detailed description of the upgrade process, see <xref:System.ServiceModel.Channels.StreamUpgradeProvider>."}]}]},{"pos":[1949,2062],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.ServiceModel.Channels.StreamUpgradeInitiator\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.ServiceModel.Channels.StreamUpgradeInitiator\"></xref> class."},{"pos":[2915,3071],"content":"This <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_abstract\" name=\"abstract\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> method can be implemented to do asynchronous processing that initiates an upgrade.","needQuote":true,"needEscape":true,"source":"This <xref uid=\"langword_csharp_abstract\" name=\"abstract\" href=\"\"></xref> method can be implemented to do asynchronous processing that initiates an upgrade."},{"pos":[3083,3191],"content":"This method calls <xref:System.ServiceModel.Channels.StreamUpgradeInitiator.InitiateUpgrade%2A> and returns.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method calls &lt;xref:System.ServiceModel.Channels.StreamUpgradeInitiator.InitiateUpgrade%2A&gt; and returns.","pos":[0,108],"source":"This method calls <xref:System.ServiceModel.Channels.StreamUpgradeInitiator.InitiateUpgrade%2A> and returns."}]},{"pos":[3411,3437],"content":"The stream to be upgraded.","needQuote":true,"needEscape":true,"nodes":[{"content":"The stream to be upgraded.","pos":[0,26]}]},{"pos":[3509,3627],"content":"The method to call when the <xref:System.ServiceModel.Channels.StreamUpgradeInitiator.InitiateUpgrade*> has completed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The method to call when the &lt;xref:System.ServiceModel.Channels.StreamUpgradeInitiator.InitiateUpgrade*&gt; has completed.","pos":[0,118],"source":"The method to call when the <xref:System.ServiceModel.Channels.StreamUpgradeInitiator.InitiateUpgrade*> has completed."}]},{"pos":[3689,3749],"content":"State information about the status of the asynchronous call.","needQuote":true,"needEscape":true,"nodes":[{"content":"State information about the status of the asynchronous call.","pos":[0,60]}]},{"pos":[3813,3959],"content":"Returns an <xref:System.IAsyncResult> to be passed into the <xref:System.ServiceModel.Channels.StreamUpgradeInitiator.EndInitiateUpgrade*> method.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an &lt;xref:System.IAsyncResult&gt; to be passed into the &lt;xref:System.ServiceModel.Channels.StreamUpgradeInitiator.EndInitiateUpgrade*&gt; method.","pos":[0,146],"source":"Returns an <xref:System.IAsyncResult> to be passed into the <xref:System.ServiceModel.Channels.StreamUpgradeInitiator.EndInitiateUpgrade*> method."}]},{"pos":[4629,4793],"content":"This method is the asynchronous callback method that is called after <xref:System.ServiceModel.Channels.StreamUpgradeInitiator.BeginInitiateUpgrade*> has completed.","needQuote":true,"needEscape":true,"nodes":[{"content":"This method is the asynchronous callback method that is called after &lt;xref:System.ServiceModel.Channels.StreamUpgradeInitiator.BeginInitiateUpgrade*&gt; has completed.","pos":[0,164],"source":"This method is the asynchronous callback method that is called after <xref:System.ServiceModel.Channels.StreamUpgradeInitiator.BeginInitiateUpgrade*> has completed."}]},{"pos":[4805,4948],"content":"For more information about using this method, see the remarks in <xref:System.ServiceModel.Channels.StreamUpgradeInitiator.InitiateUpgrade%2A>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"For more information about using this method, see the remarks in &lt;xref:System.ServiceModel.Channels.StreamUpgradeInitiator.InitiateUpgrade%2A&gt;.","pos":[0,143],"source":"For more information about using this method, see the remarks in <xref:System.ServiceModel.Channels.StreamUpgradeInitiator.InitiateUpgrade%2A>."}]},{"pos":[5131,5318],"content":"The <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_IAsyncResult\" name=\"IAsyncResult\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> returned from the &lt;xref:System.ServiceModel.Channels.StreamUpgradeInitiator.BeginInitiateUpgrade*&gt; method.","needQuote":true,"needEscape":true,"source":"The <xref uid=\"langword_csharp_IAsyncResult\" name=\"IAsyncResult\" href=\"\"></xref> returned from the <xref:System.ServiceModel.Channels.StreamUpgradeInitiator.BeginInitiateUpgrade*> method."},{"pos":[5379,5407],"content":"Returns the upgraded stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the upgraded stream.","pos":[0,28]}]},{"pos":[5977,6038],"content":"Returns the content type of the next upgrade to be performed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the content type of the next upgrade to be performed.","pos":[0,61]}]},{"pos":[6050,6406],"content":"This method returns a set of upgrade content types supported by the upgrade provider in the order in which they are expected. Upgrade providers that support a single upgrade return only a single value. Upgrade providers that support multiple upgrades return the values in order (for example, compression content type followed by the security content type).","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method returns a set of upgrade content types supported by the upgrade provider in the order in which they are expected. Upgrade providers that support a single upgrade return only a single value. Upgrade providers that support multiple upgrades return the values in order (for example, compression content type followed by the security content type).","pos":[0,356],"nodes":[{"content":"This method returns a set of upgrade content types supported by the upgrade provider in the order in which they are expected.","pos":[0,125]},{"content":"Upgrade providers that support a single upgrade return only a single value.","pos":[126,201]},{"content":"Upgrade providers that support multiple upgrades return the values in order (for example, compression content type followed by the security content type).","pos":[202,356]}]}]},{"pos":[6548,6593],"content":"Returns the content type of the next upgrade.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the content type of the next upgrade.","pos":[0,45]}]},{"pos":[7218,7339],"content":"Initiates the upgrade of the stream by requesting the other end of its connection to upgrade the channel transport layer.","needQuote":true,"needEscape":true,"nodes":[{"content":"Initiates the upgrade of the stream by requesting the other end of its connection to upgrade the channel transport layer.","pos":[0,121]}]},{"pos":[7352,7738],"content":"This method can be called multiple times for each upgrade supported by the upgrade provider. For example, an upgrade provider that supports compression and security would call this method twice: first to upgrade the default transport streaming for compression, and second to upgrade the security. Subsequent calls to this method should pass in the upgrade stream from the previous call.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method can be called multiple times for each upgrade supported by the upgrade provider. For example, an upgrade provider that supports compression and security would call this method twice: first to upgrade the default transport streaming for compression, and second to upgrade the security. Subsequent calls to this method should pass in the upgrade stream from the previous call.","pos":[0,386],"nodes":[{"content":"This method can be called multiple times for each upgrade supported by the upgrade provider.","pos":[0,92]},{"content":"For example, an upgrade provider that supports compression and security would call this method twice: first to upgrade the default transport streaming for compression, and second to upgrade the security.","pos":[93,296]},{"content":"Subsequent calls to this method should pass in the upgrade stream from the previous call.","pos":[297,386]}]}]},{"pos":[7920,7946],"content":"The stream to be upgraded.","needQuote":true,"needEscape":true,"nodes":[{"content":"The stream to be upgraded.","pos":[0,26]}]},{"pos":[8007,8035],"content":"Returns the upgraded stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the upgraded stream.","pos":[0,28]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ServiceModel.Channels.StreamUpgradeInitiator\n  id: StreamUpgradeInitiator\n  children:\n  - System.ServiceModel.Channels.StreamUpgradeInitiator.#ctor\n  - System.ServiceModel.Channels.StreamUpgradeInitiator.BeginInitiateUpgrade(System.IO.Stream,System.AsyncCallback,System.Object)\n  - System.ServiceModel.Channels.StreamUpgradeInitiator.EndInitiateUpgrade(System.IAsyncResult)\n  - System.ServiceModel.Channels.StreamUpgradeInitiator.GetNextUpgrade\n  - System.ServiceModel.Channels.StreamUpgradeInitiator.InitiateUpgrade(System.IO.Stream)\n  langs:\n  - csharp\n  name: StreamUpgradeInitiator\n  nameWithType: StreamUpgradeInitiator\n  fullName: System.ServiceModel.Channels.StreamUpgradeInitiator\n  type: Class\n  summary: To implement a custom upgrade initiator, inherit from this <xref uid=\"langword_csharp_abstract\" name=\"abstract\" href=\"\"></xref> base class.\n  remarks: \"An example of a stream upgrade is to build a compression stream directly on top of the transport stream. This class is used with <xref:System.ServiceModel.Channels.StreamUpgradeAcceptor> and <xref:System.ServiceModel.Channels.StreamUpgradeProvider> to implement a custom stream upgrade.  \\n  \\n For a detailed description of the upgrade process, see <xref:System.ServiceModel.Channels.StreamUpgradeProvider>.\"\n  syntax:\n    content: public abstract class StreamUpgradeInitiator\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Channels.StreamUpgradeInitiator.#ctor\n  id: '#ctor'\n  parent: System.ServiceModel.Channels.StreamUpgradeInitiator\n  langs:\n  - csharp\n  name: StreamUpgradeInitiator()\n  nameWithType: StreamUpgradeInitiator.StreamUpgradeInitiator()\n  fullName: System.ServiceModel.Channels.StreamUpgradeInitiator.StreamUpgradeInitiator()\n  type: Constructor\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Channels\n  summary: Initializes a new instance of the <xref href=\"System.ServiceModel.Channels.StreamUpgradeInitiator\"></xref> class.\n  syntax:\n    content: protected StreamUpgradeInitiator ();\n    parameters: []\n  overload: System.ServiceModel.Channels.StreamUpgradeInitiator.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Channels.StreamUpgradeInitiator.BeginInitiateUpgrade(System.IO.Stream,System.AsyncCallback,System.Object)\n  id: BeginInitiateUpgrade(System.IO.Stream,System.AsyncCallback,System.Object)\n  parent: System.ServiceModel.Channels.StreamUpgradeInitiator\n  langs:\n  - csharp\n  name: BeginInitiateUpgrade(Stream,AsyncCallback,Object)\n  nameWithType: StreamUpgradeInitiator.BeginInitiateUpgrade(Stream,AsyncCallback,Object)\n  fullName: System.ServiceModel.Channels.StreamUpgradeInitiator.BeginInitiateUpgrade(Stream,AsyncCallback,Object)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Channels\n  summary: This <xref uid=\"langword_csharp_abstract\" name=\"abstract\" href=\"\"></xref> method can be implemented to do asynchronous processing that initiates an upgrade.\n  remarks: This method calls <xref:System.ServiceModel.Channels.StreamUpgradeInitiator.InitiateUpgrade%2A> and returns.\n  syntax:\n    content: public abstract IAsyncResult BeginInitiateUpgrade (System.IO.Stream stream, AsyncCallback callback, object state);\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: The stream to be upgraded.\n    - id: callback\n      type: System.AsyncCallback\n      description: The method to call when the <xref:System.ServiceModel.Channels.StreamUpgradeInitiator.InitiateUpgrade*> has completed.\n    - id: state\n      type: System.Object\n      description: State information about the status of the asynchronous call.\n    return:\n      type: System.IAsyncResult\n      description: Returns an <xref:System.IAsyncResult> to be passed into the <xref:System.ServiceModel.Channels.StreamUpgradeInitiator.EndInitiateUpgrade*> method.\n  overload: System.ServiceModel.Channels.StreamUpgradeInitiator.BeginInitiateUpgrade*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Channels.StreamUpgradeInitiator.EndInitiateUpgrade(System.IAsyncResult)\n  id: EndInitiateUpgrade(System.IAsyncResult)\n  parent: System.ServiceModel.Channels.StreamUpgradeInitiator\n  langs:\n  - csharp\n  name: EndInitiateUpgrade(IAsyncResult)\n  nameWithType: StreamUpgradeInitiator.EndInitiateUpgrade(IAsyncResult)\n  fullName: System.ServiceModel.Channels.StreamUpgradeInitiator.EndInitiateUpgrade(IAsyncResult)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Channels\n  summary: This method is the asynchronous callback method that is called after <xref:System.ServiceModel.Channels.StreamUpgradeInitiator.BeginInitiateUpgrade*> has completed.\n  remarks: For more information about using this method, see the remarks in <xref:System.ServiceModel.Channels.StreamUpgradeInitiator.InitiateUpgrade%2A>.\n  syntax:\n    content: public abstract System.IO.Stream EndInitiateUpgrade (IAsyncResult result);\n    parameters:\n    - id: result\n      type: System.IAsyncResult\n      description: The <xref uid=\"langword_csharp_IAsyncResult\" name=\"IAsyncResult\" href=\"\"></xref> returned from the <xref:System.ServiceModel.Channels.StreamUpgradeInitiator.BeginInitiateUpgrade*> method.\n    return:\n      type: System.IO.Stream\n      description: Returns the upgraded stream.\n  overload: System.ServiceModel.Channels.StreamUpgradeInitiator.EndInitiateUpgrade*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Channels.StreamUpgradeInitiator.GetNextUpgrade\n  id: GetNextUpgrade\n  parent: System.ServiceModel.Channels.StreamUpgradeInitiator\n  langs:\n  - csharp\n  name: GetNextUpgrade()\n  nameWithType: StreamUpgradeInitiator.GetNextUpgrade()\n  fullName: System.ServiceModel.Channels.StreamUpgradeInitiator.GetNextUpgrade()\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Channels\n  summary: Returns the content type of the next upgrade to be performed.\n  remarks: This method returns a set of upgrade content types supported by the upgrade provider in the order in which they are expected. Upgrade providers that support a single upgrade return only a single value. Upgrade providers that support multiple upgrades return the values in order (for example, compression content type followed by the security content type).\n  syntax:\n    content: public abstract string GetNextUpgrade ();\n    parameters: []\n    return:\n      type: System.String\n      description: Returns the content type of the next upgrade.\n  overload: System.ServiceModel.Channels.StreamUpgradeInitiator.GetNextUpgrade*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Channels.StreamUpgradeInitiator.InitiateUpgrade(System.IO.Stream)\n  id: InitiateUpgrade(System.IO.Stream)\n  parent: System.ServiceModel.Channels.StreamUpgradeInitiator\n  langs:\n  - csharp\n  name: InitiateUpgrade(Stream)\n  nameWithType: StreamUpgradeInitiator.InitiateUpgrade(Stream)\n  fullName: System.ServiceModel.Channels.StreamUpgradeInitiator.InitiateUpgrade(Stream)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Channels\n  summary: Initiates the upgrade of the stream by requesting the other end of its connection to upgrade the channel transport layer.\n  remarks: 'This method can be called multiple times for each upgrade supported by the upgrade provider. For example, an upgrade provider that supports compression and security would call this method twice: first to upgrade the default transport streaming for compression, and second to upgrade the security. Subsequent calls to this method should pass in the upgrade stream from the previous call.'\n  syntax:\n    content: public abstract System.IO.Stream InitiateUpgrade (System.IO.Stream stream);\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: The stream to be upgraded.\n    return:\n      type: System.IO.Stream\n      description: Returns the upgraded stream.\n  overload: System.ServiceModel.Channels.StreamUpgradeInitiator.InitiateUpgrade*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ServiceModel.Channels.StreamUpgradeInitiator.#ctor\n  parent: System.ServiceModel.Channels.StreamUpgradeInitiator\n  isExternal: false\n  name: StreamUpgradeInitiator()\n  nameWithType: StreamUpgradeInitiator.StreamUpgradeInitiator()\n  fullName: System.ServiceModel.Channels.StreamUpgradeInitiator.StreamUpgradeInitiator()\n- uid: System.ServiceModel.Channels.StreamUpgradeInitiator.BeginInitiateUpgrade(System.IO.Stream,System.AsyncCallback,System.Object)\n  parent: System.ServiceModel.Channels.StreamUpgradeInitiator\n  isExternal: false\n  name: BeginInitiateUpgrade(Stream,AsyncCallback,Object)\n  nameWithType: StreamUpgradeInitiator.BeginInitiateUpgrade(Stream,AsyncCallback,Object)\n  fullName: System.ServiceModel.Channels.StreamUpgradeInitiator.BeginInitiateUpgrade(Stream,AsyncCallback,Object)\n- uid: System.IAsyncResult\n  parent: System\n  isExternal: true\n  name: IAsyncResult\n  nameWithType: IAsyncResult\n  fullName: System.IAsyncResult\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: true\n  name: Stream\n  nameWithType: Stream\n  fullName: System.IO.Stream\n- uid: System.AsyncCallback\n  parent: System\n  isExternal: true\n  name: AsyncCallback\n  nameWithType: AsyncCallback\n  fullName: System.AsyncCallback\n- uid: System.ServiceModel.Channels.StreamUpgradeInitiator.EndInitiateUpgrade(System.IAsyncResult)\n  parent: System.ServiceModel.Channels.StreamUpgradeInitiator\n  isExternal: false\n  name: EndInitiateUpgrade(IAsyncResult)\n  nameWithType: StreamUpgradeInitiator.EndInitiateUpgrade(IAsyncResult)\n  fullName: System.ServiceModel.Channels.StreamUpgradeInitiator.EndInitiateUpgrade(IAsyncResult)\n- uid: System.ServiceModel.Channels.StreamUpgradeInitiator.GetNextUpgrade\n  parent: System.ServiceModel.Channels.StreamUpgradeInitiator\n  isExternal: false\n  name: GetNextUpgrade()\n  nameWithType: StreamUpgradeInitiator.GetNextUpgrade()\n  fullName: System.ServiceModel.Channels.StreamUpgradeInitiator.GetNextUpgrade()\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.ServiceModel.Channels.StreamUpgradeInitiator.InitiateUpgrade(System.IO.Stream)\n  parent: System.ServiceModel.Channels.StreamUpgradeInitiator\n  isExternal: false\n  name: InitiateUpgrade(Stream)\n  nameWithType: StreamUpgradeInitiator.InitiateUpgrade(Stream)\n  fullName: System.ServiceModel.Channels.StreamUpgradeInitiator.InitiateUpgrade(Stream)\n- uid: System.ServiceModel.Channels.StreamUpgradeInitiator.#ctor*\n  parent: System.ServiceModel.Channels.StreamUpgradeInitiator\n  isExternal: false\n  name: StreamUpgradeInitiator\n  nameWithType: StreamUpgradeInitiator.StreamUpgradeInitiator\n- uid: System.ServiceModel.Channels.StreamUpgradeInitiator.BeginInitiateUpgrade*\n  parent: System.ServiceModel.Channels.StreamUpgradeInitiator\n  isExternal: false\n  name: BeginInitiateUpgrade\n  nameWithType: StreamUpgradeInitiator.BeginInitiateUpgrade\n- uid: System.ServiceModel.Channels.StreamUpgradeInitiator.EndInitiateUpgrade*\n  parent: System.ServiceModel.Channels.StreamUpgradeInitiator\n  isExternal: false\n  name: EndInitiateUpgrade\n  nameWithType: StreamUpgradeInitiator.EndInitiateUpgrade\n- uid: System.ServiceModel.Channels.StreamUpgradeInitiator.GetNextUpgrade*\n  parent: System.ServiceModel.Channels.StreamUpgradeInitiator\n  isExternal: false\n  name: GetNextUpgrade\n  nameWithType: StreamUpgradeInitiator.GetNextUpgrade\n- uid: System.ServiceModel.Channels.StreamUpgradeInitiator.InitiateUpgrade*\n  parent: System.ServiceModel.Channels.StreamUpgradeInitiator\n  isExternal: false\n  name: InitiateUpgrade\n  nameWithType: StreamUpgradeInitiator.InitiateUpgrade\n"}