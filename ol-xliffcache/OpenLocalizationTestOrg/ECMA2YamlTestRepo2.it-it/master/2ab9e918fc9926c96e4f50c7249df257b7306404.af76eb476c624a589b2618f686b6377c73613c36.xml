{"nodes":[{"pos":[592,692],"content":"This interface extends IBuildEngine to provide a method allowing building project files in parallel.","needQuote":true,"needEscape":true,"nodes":[{"content":"This interface extends IBuildEngine to provide a method allowing building project files in parallel.","pos":[0,100]}]},{"pos":[1820,1870],"content":"Allows tasks to initiate a build on a project file","needQuote":true,"needEscape":true,"nodes":[{"content":"Allows tasks to initiate a build on a project file","pos":[0,50]}]},{"pos":[2281,2302],"content":"The project to build.","needQuote":true,"needEscape":true,"nodes":[{"content":"The project to build.","pos":[0,21]}]},{"pos":[2372,2422],"content":"The targets in the project to build (can be null).","needQuote":true,"needEscape":true,"nodes":[{"content":"The targets in the project to build (can be null).","pos":[0,50]}]},{"pos":[2515,2700],"content":"An array of <xref:System.Collections.IDictionary> of additional global properties to apply to the child project (array entries can be null).       The keys and should both be strings.","needQuote":false,"needEscape":true,"nodes":[{"content":"An array of <xref:System.Collections.IDictionary> of additional global properties to apply to the child project (array entries can be null).       The keys and should both be strings.","pos":[0,183],"nodes":[{"content":"An array of &lt;xref:System.Collections.IDictionary&gt; of additional global properties to apply to the child project (array entries can be null).","pos":[0,140],"source":"An array of <xref:System.Collections.IDictionary> of additional global properties to apply to the child project (array entries can be null)."},{"content":"The keys and should both be strings.","pos":[147,183]}]}]},{"pos":[2816,2868],"content":"A list of global properties which should be removed.","needQuote":true,"needEscape":true,"nodes":[{"content":"A list of global properties which should be removed.","pos":[0,52]}]},{"pos":[2939,3030],"content":"A tools version recognized by the Engine that will be used during this build (can be null).","needQuote":true,"needEscape":true,"nodes":[{"content":"A tools version recognized by the Engine that will be used during this build (can be null).","pos":[0,91]}]},{"pos":[3107,3170],"content":"Should the target outputs be returned in the BuildEngineResult.","needQuote":true,"needEscape":true,"nodes":[{"content":"Should the target outputs be returned in the BuildEngineResult.","pos":[0,63]}]},{"pos":[3258,3336],"content":"If the build is successful, the outputs of the specified targets are returned.","needQuote":true,"needEscape":true,"nodes":[{"content":"If the build is successful, the outputs of the specified targets are returned.","pos":[0,78]}]},{"pos":[3836,3878],"content":"Waits to reacquire control after yielding.","needQuote":true,"needEscape":true,"nodes":[{"content":"Waits to reacquire control after yielding.","pos":[0,42]}]},{"pos":[4408,4552],"content":"Informs the system that this task has a long-running out-of-process component and other work can be done in the build while that work completes.","needQuote":true,"needEscape":true,"nodes":[{"content":"Informs the system that this task has a long-running out-of-process component and other work can be done in the build while that work completes.","pos":[0,144]}]},{"pos":[4564,5213],"content":"There is only one node (msbuild.exe process) per CPU. Only one project, target, and task can build at any time on a node. If a task is waiting, for example, for a spawned tool or some other event to complete, the task can call Yield, which returns immediately. This lets the node build a target in another project, if any are available.  When the task is ready to continue, it should call <xref:Microsoft.Build.Framework.IBuildEngine3.Reacquire%2A>. As a rough rule, if a task expects that an operation will take more than 20 or 30 seconds, it can choose to call `Yield` before it starts the operation, and `Reaquire` when the operation is complete.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"There is only one node (msbuild.exe process) per CPU.","pos":[0,53]},{"content":"Only one project, target, and task can build at any time on a node.","pos":[54,121]},{"content":"If a task is waiting, for example, for a spawned tool or some other event to complete, the task can call Yield, which returns immediately.","pos":[122,260]},{"content":"This lets the node build a target in another project, if any are available.","pos":[261,336]},{"content":"When the task is ready to continue, it should call &lt;xref:Microsoft.Build.Framework.IBuildEngine3.Reacquire%2A&gt;.","pos":[338,449],"source":"  When the task is ready to continue, it should call <xref:Microsoft.Build.Framework.IBuildEngine3.Reacquire%2A>."},{"content":"As a rough rule, if a task expects that an operation will take more than 20 or 30 seconds, it can choose to call <ph id=\"ph1\">`Yield`</ph> before it starts the operation, and <ph id=\"ph2\">`Reaquire`</ph> when the operation is complete.","pos":[450,649],"source":" As a rough rule, if a task expects that an operation will take more than 20 or 30 seconds, it can choose to call `Yield` before it starts the operation, and `Reaquire` when the operation is complete."}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: Microsoft.Build.Framework.IBuildEngine3\n  id: IBuildEngine3\n  children:\n  - Microsoft.Build.Framework.IBuildEngine3.BuildProjectFilesInParallel(System.String[],System.String[],System.Collections.IDictionary[],System.Collections.Generic.IList{System.String}[],System.String[],System.Boolean)\n  - Microsoft.Build.Framework.IBuildEngine3.Reacquire\n  - Microsoft.Build.Framework.IBuildEngine3.Yield\n  langs:\n  - csharp\n  name: IBuildEngine3\n  nameWithType: IBuildEngine3\n  fullName: Microsoft.Build.Framework.IBuildEngine3\n  type: Interface\n  summary: This interface extends IBuildEngine to provide a method allowing building project files in parallel.\n  syntax:\n    content: 'public interface IBuildEngine3 : Microsoft.Build.Framework.IBuildEngine2'\n  implements:\n  - Microsoft.Build.Framework.IBuildEngine2\n  platform:\n  - net462\n- uid: Microsoft.Build.Framework.IBuildEngine3.BuildProjectFilesInParallel(System.String[],System.String[],System.Collections.IDictionary[],System.Collections.Generic.IList{System.String}[],System.String[],System.Boolean)\n  id: BuildProjectFilesInParallel(System.String[],System.String[],System.Collections.IDictionary[],System.Collections.Generic.IList{System.String}[],System.String[],System.Boolean)\n  parent: Microsoft.Build.Framework.IBuildEngine3\n  langs:\n  - csharp\n  name: BuildProjectFilesInParallel(String[],String[],IDictionary[],IList<String>,String[],Boolean)\n  nameWithType: IBuildEngine3.BuildProjectFilesInParallel(String[],String[],IDictionary[],IList<String>,String[],Boolean)\n  fullName: Microsoft.Build.Framework.IBuildEngine3.BuildProjectFilesInParallel(String[],String[],IDictionary[],IList<String>,String[],Boolean)\n  type: Method\n  assemblies:\n  - Microsoft.Build.Framework\n  namespace: Microsoft.Build.Framework\n  summary: Allows tasks to initiate a build on a project file\n  syntax:\n    content: public Microsoft.Build.Framework.BuildEngineResult BuildProjectFilesInParallel (string[] projectFileNames, string[] targetNames, System.Collections.IDictionary[] globalProperties, System.Collections.Generic.IList<string>[] removeGlobalProperties, string[] toolsVersion, bool returnTargetOutputs);\n    parameters:\n    - id: projectFileNames\n      type: System.String[]\n      description: The project to build.\n    - id: targetNames\n      type: System.String[]\n      description: The targets in the project to build (can be null).\n    - id: globalProperties\n      type: System.Collections.IDictionary[]\n      description: \"An array of <xref:System.Collections.IDictionary> of additional global properties to apply to the child project (array entries can be null).  \\n  \\n The keys and should both be strings.\"\n    - id: removeGlobalProperties\n      type: System.Collections.Generic.IList{System.String}[]\n      description: A list of global properties which should be removed.\n    - id: toolsVersion\n      type: System.String[]\n      description: A tools version recognized by the Engine that will be used during this build (can be null).\n    - id: returnTargetOutputs\n      type: System.Boolean\n      description: Should the target outputs be returned in the BuildEngineResult.\n    return:\n      type: Microsoft.Build.Framework.BuildEngineResult\n      description: If the build is successful, the outputs of the specified targets are returned.\n  overload: Microsoft.Build.Framework.IBuildEngine3.BuildProjectFilesInParallel*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Framework.IBuildEngine3.Reacquire\n  id: Reacquire\n  parent: Microsoft.Build.Framework.IBuildEngine3\n  langs:\n  - csharp\n  name: Reacquire()\n  nameWithType: IBuildEngine3.Reacquire()\n  fullName: Microsoft.Build.Framework.IBuildEngine3.Reacquire()\n  type: Method\n  assemblies:\n  - Microsoft.Build.Framework\n  namespace: Microsoft.Build.Framework\n  summary: Waits to reacquire control after yielding.\n  syntax:\n    content: public void Reacquire ();\n    parameters: []\n  overload: Microsoft.Build.Framework.IBuildEngine3.Reacquire*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Framework.IBuildEngine3.Yield\n  id: Yield\n  parent: Microsoft.Build.Framework.IBuildEngine3\n  langs:\n  - csharp\n  name: Yield()\n  nameWithType: IBuildEngine3.Yield()\n  fullName: Microsoft.Build.Framework.IBuildEngine3.Yield()\n  type: Method\n  assemblies:\n  - Microsoft.Build.Framework\n  namespace: Microsoft.Build.Framework\n  summary: Informs the system that this task has a long-running out-of-process component and other work can be done in the build while that work completes.\n  remarks: There is only one node (msbuild.exe process) per CPU. Only one project, target, and task can build at any time on a node. If a task is waiting, for example, for a spawned tool or some other event to complete, the task can call Yield, which returns immediately. This lets the node build a target in another project, if any are available.  When the task is ready to continue, it should call <xref:Microsoft.Build.Framework.IBuildEngine3.Reacquire%2A>. As a rough rule, if a task expects that an operation will take more than 20 or 30 seconds, it can choose to call `Yield` before it starts the operation, and `Reaquire` when the operation is complete.\n  syntax:\n    content: public void Yield ();\n    parameters: []\n  overload: Microsoft.Build.Framework.IBuildEngine3.Yield*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: Microsoft.Build.Framework.IBuildEngine3.BuildProjectFilesInParallel(System.String[],System.String[],System.Collections.IDictionary[],System.Collections.Generic.IList{System.String}[],System.String[],System.Boolean)\n  parent: Microsoft.Build.Framework.IBuildEngine3\n  isExternal: false\n  name: BuildProjectFilesInParallel(String[],String[],IDictionary[],IList<String>,String[],Boolean)\n  nameWithType: IBuildEngine3.BuildProjectFilesInParallel(String[],String[],IDictionary[],IList<String>,String[],Boolean)\n  fullName: Microsoft.Build.Framework.IBuildEngine3.BuildProjectFilesInParallel(String[],String[],IDictionary[],IList<String>,String[],Boolean)\n- uid: Microsoft.Build.Framework.BuildEngineResult\n  parent: Microsoft.Build.Framework\n  isExternal: false\n  name: BuildEngineResult\n  nameWithType: BuildEngineResult\n  fullName: Microsoft.Build.Framework.BuildEngineResult\n- uid: System.String[]\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String[]\n  spec.csharp:\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: String[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Collections.IDictionary[]\n  parent: System.Collections\n  isExternal: true\n  name: IDictionary\n  nameWithType: IDictionary\n  fullName: System.Collections.IDictionary[]\n  spec.csharp:\n  - uid: System.Collections.IDictionary\n    name: IDictionary\n    nameWithType: IDictionary\n    fullName: IDictionary[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Collections.Generic.IList{System.String}[]\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IList<String>\n  nameWithType: IList<String>\n  fullName: System.Collections.Generic.IList<System.String>[]\n  spec.csharp:\n  - uid: System.Collections.Generic.IList`1\n    name: IList\n    nameWithType: IList\n    fullName: IList<System.String>[]\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: String\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: Microsoft.Build.Framework.IBuildEngine3.Reacquire\n  parent: Microsoft.Build.Framework.IBuildEngine3\n  isExternal: false\n  name: Reacquire()\n  nameWithType: IBuildEngine3.Reacquire()\n  fullName: Microsoft.Build.Framework.IBuildEngine3.Reacquire()\n- uid: Microsoft.Build.Framework.IBuildEngine3.Yield\n  parent: Microsoft.Build.Framework.IBuildEngine3\n  isExternal: false\n  name: Yield()\n  nameWithType: IBuildEngine3.Yield()\n  fullName: Microsoft.Build.Framework.IBuildEngine3.Yield()\n- uid: Microsoft.Build.Framework.IBuildEngine3.BuildProjectFilesInParallel*\n  parent: Microsoft.Build.Framework.IBuildEngine3\n  isExternal: false\n  name: BuildProjectFilesInParallel\n  nameWithType: IBuildEngine3.BuildProjectFilesInParallel\n- uid: Microsoft.Build.Framework.IBuildEngine3.Reacquire*\n  parent: Microsoft.Build.Framework.IBuildEngine3\n  isExternal: false\n  name: Reacquire\n  nameWithType: IBuildEngine3.Reacquire\n- uid: Microsoft.Build.Framework.IBuildEngine3.Yield*\n  parent: Microsoft.Build.Framework.IBuildEngine3\n  isExternal: false\n  name: Yield\n  nameWithType: IBuildEngine3.Yield\n"}