{"nodes":[{"pos":[2922,3000],"content":"Enables ASP.NET to read the HTTP values sent by a client during a Web request.","needQuote":true,"needEscape":true,"nodes":[{"content":"Enables ASP.NET to read the HTTP values sent by a client during a Web request.","pos":[0,78]}]},{"pos":[3013,3702],"content":"The methods and properties of the HttpRequest class are exposed through the `Request` properties of the <xref:System.Web.HttpApplication>, <xref:System.Web.HttpContext>, <xref:System.Web.UI.Page>, and <xref:System.Web.UI.UserControl> classes.       To access data from the <xref:System.Web.HttpRequest.QueryString%2A>, <xref:System.Web.HttpRequest.Form%2A>, <xref:System.Web.HttpRequest.Cookies%2A>, or <xref:System.Web.HttpRequest.ServerVariables%2A> collections, you can write `Request[\"key\"]`, as shown in the example for the <xref:System.Web.HttpRequest.QueryString%2A> property.      > [!NOTE] >  Unicode support for HttpRequest class members requires IIS version 6.0 or later.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The methods and properties of the HttpRequest class are exposed through the <ph id=\"ph1\">`Request`</ph> properties of the &lt;xref:System.Web.HttpApplication&gt;, &lt;xref:System.Web.HttpContext&gt;, &lt;xref:System.Web.UI.Page&gt;, and &lt;xref:System.Web.UI.UserControl&gt; classes.","pos":[0,242],"source":"The methods and properties of the HttpRequest class are exposed through the `Request` properties of the <xref:System.Web.HttpApplication>, <xref:System.Web.HttpContext>, <xref:System.Web.UI.Page>, and <xref:System.Web.UI.UserControl> classes."},{"content":"To access data from the &lt;xref:System.Web.HttpRequest.QueryString%2A&gt;, &lt;xref:System.Web.HttpRequest.Form%2A&gt;, &lt;xref:System.Web.HttpRequest.Cookies%2A&gt;, or &lt;xref:System.Web.HttpRequest.ServerVariables%2A&gt; collections, you can write <ph id=\"ph1\">`Request[\"key\"]`</ph>, as shown in the example for the &lt;xref:System.Web.HttpRequest.QueryString%2A&gt; property.","pos":[249,583],"source":"       To access data from the <xref:System.Web.HttpRequest.QueryString%2A>, <xref:System.Web.HttpRequest.Form%2A>, <xref:System.Web.HttpRequest.Cookies%2A>, or <xref:System.Web.HttpRequest.ServerVariables%2A> collections, you can write `Request[\"key\"]`, as shown in the example for the <xref:System.Web.HttpRequest.QueryString%2A> property."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Unicode support for HttpRequest class members requires IIS version 6.0 or later.","pos":[589,682],"source":"      > [!NOTE] >  Unicode support for HttpRequest class members requires IIS version 6.0 or later."}]},{"pos":[8180,8246],"content":"Initializes an <bpt id=\"p1\">&lt;xref href=\"System.Web.HttpRequest\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Initializes an <xref href=\"System.Web.HttpRequest\"></xref> object."},{"pos":[8258,8604],"content":"You do not need to create your own instance of the <xref:System.Web.HttpRequest> class. The methods and properties of the <xref:System.Web.HttpRequest> class are exposed through the `Request` property of the <xref:System.Web.HttpApplication>, <xref:System.Web.HttpContext>, <xref:System.Web.UI.Page>, and <xref:System.Web.UI.UserControl> classes.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"You do not need to create your own instance of the &lt;xref:System.Web.HttpRequest&gt; class.","pos":[0,87],"source":"You do not need to create your own instance of the <xref:System.Web.HttpRequest> class."},{"content":"The methods and properties of the &lt;xref:System.Web.HttpRequest&gt; class are exposed through the <ph id=\"ph1\">`Request`</ph> property of the &lt;xref:System.Web.HttpApplication&gt;, &lt;xref:System.Web.HttpContext&gt;, &lt;xref:System.Web.UI.Page&gt;, and &lt;xref:System.Web.UI.UserControl&gt; classes.","pos":[88,346],"source":" The methods and properties of the <xref:System.Web.HttpRequest> class are exposed through the `Request` property of the <xref:System.Web.HttpApplication>, <xref:System.Web.HttpContext>, <xref:System.Web.UI.Page>, and <xref:System.Web.UI.UserControl> classes."}]},{"pos":[8778,8827],"content":"The name of the file associated with the request.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the file associated with the request.","pos":[0,49]}]},{"pos":[8887,8944],"content":"The information regarding the URL of the current request.","needQuote":true,"needEscape":true,"nodes":[{"content":"The information regarding the URL of the current request.","pos":[0,57]}]},{"pos":[9012,9086],"content":"The entire query string sent with the request (everything after the<ph id=\"ph1\">`'?'`</ph>).","needQuote":true,"needEscape":true,"source":"The entire query string sent with the request (everything after the`'?'`)."},{"pos":[9444,9610],"content":"Forcibly terminates the underlying TCP connection, causing any outstanding I/O to fail. You might use this method in response to an attack by a malicious HTTP client.","needQuote":true,"needEscape":true,"nodes":[{"content":"Forcibly terminates the underlying TCP connection, causing any outstanding I/O to fail. You might use this method in response to an attack by a malicious HTTP client.","pos":[0,166],"nodes":[{"content":"Forcibly terminates the underlying TCP connection, causing any outstanding I/O to fail.","pos":[0,87]},{"content":"You might use this method in response to an attack by a malicious HTTP client.","pos":[88,166]}]}]},{"pos":[9623,9895],"content":"This method is thread-safe. Any thread may call it at any time.       This method can only be used in integrated mode. If you invoke it in classic mode, an exception is thrown. To determine the pipeline mode, use <xref:System.Web.HttpRuntime.UsingIntegratedPipeline%2A>.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method is thread-safe. Any thread may call it at any time.       This method can only be used in integrated mode. If you invoke it in classic mode, an exception is thrown. To determine the pipeline mode, use <xref:System.Web.HttpRuntime.UsingIntegratedPipeline%2A>.","pos":[0,270],"nodes":[{"content":"This method is thread-safe.","pos":[0,27]},{"content":"Any thread may call it at any time.","pos":[28,63]},{"content":"This method can only be used in integrated mode.","pos":[70,118]},{"content":"If you invoke it in classic mode, an exception is thrown.","pos":[119,176]},{"content":"To determine the pipeline mode, use &lt;xref:System.Web.HttpRuntime.UsingIntegratedPipeline%2A&gt;.","pos":[177,270],"source":" To determine the pipeline mode, use <xref:System.Web.HttpRuntime.UsingIntegratedPipeline%2A>."}]}]},{"pos":[10344,10402],"content":"Gets a string array of client-supported MIME accept types.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a string array of client-supported MIME accept types.","pos":[0,58]}]},{"pos":[10988,11041],"content":"A string array of client-supported MIME accept types.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string array of client-supported MIME accept types.","pos":[0,53]}]},{"pos":[11431,11486],"content":"Gets the anonymous identifier for the user, if present.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the anonymous identifier for the user, if present.","pos":[0,55]}]},{"pos":[11499,12509],"content":"The AnonymousID property assigns a long-lived unique identifier to a non-authenticated user, which can be used to track the user or assign profile properties to that user without storing data in a `Session` object. By default, the AnonymousID property is tracked using a cookie, but it can be set to use the URI when the <xref:System.Web.Configuration.SessionStateSection.Cookieless%2A> attribute in the anonymous identification configuration section is set to either the <xref:System.Web.HttpCookieMode>, <xref:System.Web.HttpCookieMode>, or <xref:System.Web.HttpCookieMode> value. You must explicitly clear the cookie if you no longer want it available, for example when an anonymous user is authenticated.       Anonymous identification is used when there is a need to identify entities that are not authenticated and when authorization is required. For more information, see [anonymousIdentification Element (ASP.NET Settings Schema)](http://msdn.microsoft.com/en-us/2bd927ef-9057-4703-9c55-4cfb6d7d0929)","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The AnonymousID property assigns a long-lived unique identifier to a non-authenticated user, which can be used to track the user or assign profile properties to that user without storing data in a <ph id=\"ph1\">`Session`</ph> object.","pos":[0,214],"source":"The AnonymousID property assigns a long-lived unique identifier to a non-authenticated user, which can be used to track the user or assign profile properties to that user without storing data in a `Session` object."},{"content":"By default, the AnonymousID property is tracked using a cookie, but it can be set to use the URI when the &lt;xref:System.Web.Configuration.SessionStateSection.Cookieless%2A&gt; attribute in the anonymous identification configuration section is set to either the &lt;xref:System.Web.HttpCookieMode&gt;, &lt;xref:System.Web.HttpCookieMode&gt;, or &lt;xref:System.Web.HttpCookieMode&gt; value.","pos":[215,582],"source":" By default, the AnonymousID property is tracked using a cookie, but it can be set to use the URI when the <xref:System.Web.Configuration.SessionStateSection.Cookieless%2A> attribute in the anonymous identification configuration section is set to either the <xref:System.Web.HttpCookieMode>, <xref:System.Web.HttpCookieMode>, or <xref:System.Web.HttpCookieMode> value."},{"content":"You must explicitly clear the cookie if you no longer want it available, for example when an anonymous user is authenticated.","pos":[583,708]},{"content":"Anonymous identification is used when there is a need to identify entities that are not authenticated and when authorization is required.","pos":[715,852]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>anonymousIdentification Element (ASP.NET Settings Schema)<ept id=\"p1\">](http://msdn.microsoft.com/en-us/2bd927ef-9057-4703-9c55-4cfb6d7d0929)</ept>","pos":[853,1008],"source":" For more information, see [anonymousIdentification Element (ASP.NET Settings Schema)](http://msdn.microsoft.com/en-us/2bd927ef-9057-4703-9c55-4cfb6d7d0929)"}]},{"pos":[13977,14037],"content":"A string representing the current anonymous user identifier.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string representing the current anonymous user identifier.","pos":[0,60]}]},{"pos":[14447,14522],"content":"Gets the ASP.NET application's virtual application root path on the server.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the ASP.NET application's virtual application root path on the server.","pos":[0,75]}]},{"pos":[14534,14845],"content":"Use this property to construct a URL relative to the application root from a page or Web user control that is not in the root directory. This allows pages and shared controls that exist at different levels of a directory structure to use the same code to link to resources at fixed locations in the application.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use this property to construct a URL relative to the application root from a page or Web user control that is not in the root directory. This allows pages and shared controls that exist at different levels of a directory structure to use the same code to link to resources at fixed locations in the application.","pos":[0,311],"nodes":[{"content":"Use this property to construct a URL relative to the application root from a page or Web user control that is not in the root directory.","pos":[0,136]},{"content":"This allows pages and shared controls that exist at different levels of a directory structure to use the same code to link to resources at fixed locations in the application.","pos":[137,311]}]}]},{"pos":[16300,16344],"content":"The virtual path of the current application.","needQuote":true,"needEscape":true,"nodes":[{"content":"The virtual path of the current application.","pos":[0,44]}]},{"pos":[16858,17005],"content":"Gets the virtual path of the application root and makes it relative by using the tilde (~) notation for the application root (as in \"~/page.aspx\").","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the virtual path of the application root and makes it relative by using the tilde (~) notation for the application root (as in \"~/page.aspx\").","pos":[0,147]}]},{"pos":[17017,17305],"content":"Use this property to provide URL information that will stay the same even if the application changes location. This allows the same URL-mapping code to be used in a test environment and in the final deployment environment, or to be used by copies of Web applications in different domains.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Use this property to provide URL information that will stay the same even if the application changes location. This allows the same URL-mapping code to be used in a test environment and in the final deployment environment, or to be used by copies of Web applications in different domains.","pos":[0,288],"nodes":[{"content":"Use this property to provide URL information that will stay the same even if the application changes location.","pos":[0,110]},{"content":"This allows the same URL-mapping code to be used in a test environment and in the final deployment environment, or to be used by copies of Web applications in different domains.","pos":[111,288]}]}]},{"pos":[18475,18540],"content":"The virtual path of the application root for the current request.","needQuote":true,"needEscape":true,"nodes":[{"content":"The virtual path of the application root for the current request.","pos":[0,65]}]},{"pos":[18996,19080],"content":"Performs a binary read of a specified number of bytes from the current input stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Performs a binary read of a specified number of bytes from the current input stream.","pos":[0,84]}]},{"pos":[19092,19153],"content":"The BinaryRead method is provided for compatibility with ASP.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The BinaryRead method is provided for compatibility with ASP.","pos":[0,61]}]},{"pos":[19291,19319],"content":"The number of bytes to read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes to read.","pos":[0,28]}]},{"pos":[19377,19390],"content":"A byte array.","needQuote":true,"needEscape":true,"nodes":[{"content":"A byte array.","pos":[0,13]}]},{"pos":[19988,20064],"content":"Gets or sets information about the requesting client's browser capabilities.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets information about the requesting client's browser capabilities.","pos":[0,76]}]},{"pos":[20600,20715],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Web.HttpBrowserCapabilities\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object listing the capabilities of the client's browser.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Web.HttpBrowserCapabilities\"></xref> object listing the capabilities of the client's browser."},{"pos":[21131,21186],"content":"Gets the current request's client security certificate.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the current request's client security certificate.","pos":[0,55]}]},{"pos":[21740,21876],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Web.HttpClientCertificate\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object containing information about the client's security certificate settings.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Web.HttpClientCertificate\"></xref> object containing information about the client's security certificate settings."},{"pos":[22292,22342],"content":"Gets or sets the character set of the entity-body.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the character set of the entity-body.","pos":[0,50]}]},{"pos":[22354,22651],"content":"Default content encoding can be specified in the [globalization Element (ASP.NET Settings Schema)](http://msdn.microsoft.com/en-us/e2dffc8e-ebd2-439b-a2fd-e3ac5e620da7) of a configuration file. If content encoding is also specified by the client, the default configuration settings are overridden.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Default content encoding can be specified in the <bpt id=\"p1\">[</bpt>globalization Element (ASP.NET Settings Schema)<ept id=\"p1\">](http://msdn.microsoft.com/en-us/e2dffc8e-ebd2-439b-a2fd-e3ac5e620da7)</ept> of a configuration file.","pos":[0,193],"source":"Default content encoding can be specified in the [globalization Element (ASP.NET Settings Schema)](http://msdn.microsoft.com/en-us/e2dffc8e-ebd2-439b-a2fd-e3ac5e620da7) of a configuration file."},{"content":"If content encoding is also specified by the client, the default configuration settings are overridden.","pos":[194,297]}]},{"pos":[23186,23264],"content":"An <xref:System.Text.Encoding> object representing the client's character set.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Text.Encoding&gt; object representing the client's character set.","pos":[0,78],"source":"An <xref:System.Text.Encoding> object representing the client's character set."}]},{"pos":[23668,23730],"content":"Specifies the length, in bytes, of content sent by the client.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies the length, in bytes, of content sent by the client.","pos":[0,62]}]},{"pos":[24245,24297],"content":"The length, in bytes, of content sent by the client.","needQuote":true,"needEscape":true,"nodes":[{"content":"The length, in bytes, of content sent by the client.","pos":[0,52]}]},{"pos":[24689,24748],"content":"Gets or sets the MIME content type of the incoming request.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the MIME content type of the incoming request.","pos":[0,59]}]},{"pos":[25410,25590],"content":"A string representing the MIME content type of the incoming request, for example, \"text/html\". Additional common MIME types include \"audio.wav\", \"image/gif\", and \"application/pdf\".","needQuote":true,"needEscape":true,"nodes":[{"content":"A string representing the MIME content type of the incoming request, for example, \"text/html\". Additional common MIME types include \"audio.wav\", \"image/gif\", and \"application/pdf\".","pos":[0,180],"nodes":[{"content":"A string representing the MIME content type of the incoming request, for example, \"text/html\".","pos":[0,94]},{"content":"Additional common MIME types include \"audio.wav\", \"image/gif\", and \"application/pdf\".","pos":[95,180]}]}]},{"pos":[25960,26008],"content":"Gets a collection of cookies sent by the client.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a collection of cookies sent by the client.","pos":[0,48]}]},{"pos":[26021,26717],"content":"ASP.NET includes two intrinsic cookie collections. The collection accessed through the Cookies collection of <xref:System.Web.HttpRequest> contains cookies transmitted by the client to the server in the `Cookie` header. The collection accessed through the <xref:System.Web.HttpResponse.Cookies%2A> collection of <xref:System.Web.HttpResponse> contains new cookies created on the server and transmitted to the client in the `Set-Cookie` header.      > [!NOTE] >  After you add a cookie by using the <xref:System.Web.HttpResponse.Cookies%2A?displayProperty=fullName> collection, the cookie is immediately available in the Cookies collection, even if the response has not been sent to the client.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"ASP.NET includes two intrinsic cookie collections.","pos":[0,50]},{"content":"The collection accessed through the Cookies collection of &lt;xref:System.Web.HttpRequest&gt; contains cookies transmitted by the client to the server in the <ph id=\"ph1\">`Cookie`</ph> header.","pos":[51,219],"source":" The collection accessed through the Cookies collection of <xref:System.Web.HttpRequest> contains cookies transmitted by the client to the server in the `Cookie` header."},{"content":"The collection accessed through the &lt;xref:System.Web.HttpResponse.Cookies%2A&gt; collection of &lt;xref:System.Web.HttpResponse&gt; contains new cookies created on the server and transmitted to the client in the <ph id=\"ph1\">`Set-Cookie`</ph> header.","pos":[220,443],"source":" The collection accessed through the <xref:System.Web.HttpResponse.Cookies%2A> collection of <xref:System.Web.HttpResponse> contains new cookies created on the server and transmitted to the client in the `Set-Cookie` header."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  After you add a cookie by using the &lt;xref:System.Web.HttpResponse.Cookies%2A?displayProperty=fullName&gt; collection, the cookie is immediately available in the Cookies collection, even if the response has not been sent to the client.","pos":[449,693],"source":"      > [!NOTE] >  After you add a cookie by using the <xref:System.Web.HttpResponse.Cookies%2A?displayProperty=fullName> collection, the cookie is immediately available in the Cookies collection, even if the response has not been sent to the client."}]},{"pos":[27298,27404],"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Web.HttpCookieCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object representing the client's cookie variables.","needQuote":true,"needEscape":true,"source":"An <xref href=\"System.Web.HttpCookieCollection\"></xref> object representing the client's cookie variables."},{"pos":[27855,27900],"content":"Gets the virtual path of the current request.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the virtual path of the current request.","pos":[0,45]}]},{"pos":[27912,28396],"content":"CurrentExecutionFilePath returns the file path to the currently executing page handler. For redirect scenarios using <xref:System.Web.HttpServerUtility.Execute%2A> and <xref:System.Web.HttpServerUtility.Transfer%2A> methods this means that the CurrentExecutionFilePath property returns the path to the page redirected to (child page). However, when the client is redirected to another page, the <xref:System.Web.HttpRequest.FilePath%2A> property returns the path to the original page.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"CurrentExecutionFilePath returns the file path to the currently executing page handler. For redirect scenarios using <xref:System.Web.HttpServerUtility.Execute%2A> and <xref:System.Web.HttpServerUtility.Transfer%2A> methods this means that the CurrentExecutionFilePath property returns the path to the page redirected to (child page). However, when the client is redirected to another page, the <xref:System.Web.HttpRequest.FilePath%2A> property returns the path to the original page.","pos":[0,484],"nodes":[{"content":"CurrentExecutionFilePath returns the file path to the currently executing page handler.","pos":[0,87]},{"content":"For redirect scenarios using &lt;xref:System.Web.HttpServerUtility.Execute%2A&gt; and &lt;xref:System.Web.HttpServerUtility.Transfer%2A&gt; methods this means that the CurrentExecutionFilePath property returns the path to the page redirected to (child page).","pos":[88,334],"source":" For redirect scenarios using <xref:System.Web.HttpServerUtility.Execute%2A> and <xref:System.Web.HttpServerUtility.Transfer%2A> methods this means that the CurrentExecutionFilePath property returns the path to the page redirected to (child page)."},{"content":"However, when the client is redirected to another page, the &lt;xref:System.Web.HttpRequest.FilePath%2A&gt; property returns the path to the original page.","pos":[335,484],"source":" However, when the client is redirected to another page, the <xref:System.Web.HttpRequest.FilePath%2A> property returns the path to the original page."}]}]},{"pos":[29116,29156],"content":"The virtual path of the current request.","needQuote":true,"needEscape":true,"nodes":[{"content":"The virtual path of the current request.","pos":[0,40]}]},{"pos":[29669,29795],"content":"Gets the extension of the file name that is specified in the <xref:System.Web.HttpRequest.CurrentExecutionFilePath*> property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the extension of the file name that is specified in the &lt;xref:System.Web.HttpRequest.CurrentExecutionFilePath*&gt; property.","pos":[0,126],"source":"Gets the extension of the file name that is specified in the <xref:System.Web.HttpRequest.CurrentExecutionFilePath*> property."}]},{"pos":[29933,30054],"content":"The extension of the file name that is specified in the <xref:System.Web.HttpRequest.CurrentExecutionFilePath*> property.","needQuote":true,"needEscape":true,"nodes":[{"content":"The extension of the file name that is specified in the &lt;xref:System.Web.HttpRequest.CurrentExecutionFilePath*&gt; property.","pos":[0,121],"source":"The extension of the file name that is specified in the <xref:System.Web.HttpRequest.CurrentExecutionFilePath*> property."}]},{"pos":[30451,30496],"content":"Gets the virtual path of the current request.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the virtual path of the current request.","pos":[0,45]}]},{"pos":[30508,30713],"content":"The FilePath property does not include the <xref:System.Web.HttpRequest.PathInfo%2A> trailer. For example, for the URL http://www.contoso.com/virdir/page.html/tail, the FilePath value is /virdir/page.html.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The FilePath property does not include the <xref:System.Web.HttpRequest.PathInfo%2A> trailer. For example, for the URL http://www.contoso.com/virdir/page.html/tail, the FilePath value is /virdir/page.html.","pos":[0,205],"nodes":[{"content":"The FilePath property does not include the &lt;xref:System.Web.HttpRequest.PathInfo%2A&gt; trailer.","pos":[0,93],"source":"The FilePath property does not include the <xref:System.Web.HttpRequest.PathInfo%2A> trailer."},{"content":"For example, for the URL http://www.contoso.com/virdir/page.html/tail, the FilePath value is /virdir/page.html.","pos":[94,205]}]}]},{"pos":[31403,31443],"content":"The virtual path of the current request.","needQuote":true,"needEscape":true,"nodes":[{"content":"The virtual path of the current request.","pos":[0,40]}]},{"pos":[31800,31878],"content":"Gets the collection of files uploaded by the client, in multipart MIME format.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the collection of files uploaded by the client, in multipart MIME format.","pos":[0,78]}]},{"pos":[31890,31996],"content":"The file collection is populated only when the HTTP request <ph id=\"ph1\">`Content-Type`</ph> value is \"multipart/form-data\".","needQuote":true,"needEscape":true,"extradata":"MT","source":"The file collection is populated only when the HTTP request `Content-Type` value is \"multipart/form-data\"."},{"pos":[32475,32729],"content":"An <xref href=\"System.Web.HttpFileCollection\"></xref> object representing a collection of files uploaded by the client. The items of the <xref href=\"System.Web.HttpFileCollection\"></xref> object are of type <xref href=\"System.Web.HttpPostedFile\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"An <bpt id=\"p1\">&lt;xref href=\"System.Web.HttpFileCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object representing a collection of files uploaded by the client.","pos":[0,119],"source":"An <xref href=\"System.Web.HttpFileCollection\"></xref> object representing a collection of files uploaded by the client."},{"content":"The items of the <bpt id=\"p1\">&lt;xref href=\"System.Web.HttpFileCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object are of type <bpt id=\"p2\">&lt;xref href=\"System.Web.HttpPostedFile\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[120,254],"source":" The items of the <xref href=\"System.Web.HttpFileCollection\"></xref> object are of type <xref href=\"System.Web.HttpPostedFile\"></xref>."}]},{"pos":[33088,33157],"content":"Gets or sets the filter to use when reading the current input stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the filter to use when reading the current input stream.","pos":[0,69]}]},{"pos":[33833,33891],"content":"A <xref:System.IO.Stream> object to be used as the filter.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.IO.Stream&gt; object to be used as the filter.","pos":[0,58],"source":"A <xref:System.IO.Stream> object to be used as the filter."}]},{"pos":[34043,34092],"content":"The specified <xref:System.IO.Stream> is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"The specified &lt;xref:System.IO.Stream&gt; is invalid.","pos":[0,49],"source":"The specified <xref:System.IO.Stream> is invalid."}]},{"pos":[34382,34418],"content":"Gets a collection of form variables.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a collection of form variables.","pos":[0,36]}]},{"pos":[34430,34575],"content":"The Form property is populated when the HTTP request <ph id=\"ph1\">`Content-Type`</ph> value is either \"application/x-www-form-urlencoded\" or \"multipart/form-data\".","needQuote":true,"needEscape":true,"extradata":"MT","source":"The Form property is populated when the HTTP request `Content-Type` value is either \"application/x-www-form-urlencoded\" or \"multipart/form-data\"."},{"pos":[35193,35311],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.NameValueCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> representing a collection of form variables.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> representing a collection of form variables."},{"pos":[35753,35846],"content":"Gets a <xref:System.IO.Stream> object that can be used to read the incoming HTTP entity body.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a &lt;xref:System.IO.Stream&gt; object that can be used to read the incoming HTTP entity body.","pos":[0,93],"source":"Gets a <xref:System.IO.Stream> object that can be used to read the incoming HTTP entity body."}]},{"pos":[35858,36418],"content":"This method is identical to <xref:System.Web.HttpRequest.GetBufferlessInputStream%2A> except that it also copies the bytes that are read to the internal storage that is used by ASP.NET to populate the <xref:System.Web.HttpRequest.Form%2A>, <xref:System.Web.HttpRequest.Files%2A>, and <xref:System.Web.HttpRequest.InputStream%2A> properties. Because this information is preserved, downstream code such as ASP.NET Web Forms pages (.aspx files) will run successfully. This is not the case with the <xref:System.Web.HttpRequest.GetBufferlessInputStream%2A> method.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method is identical to <xref:System.Web.HttpRequest.GetBufferlessInputStream%2A> except that it also copies the bytes that are read to the internal storage that is used by ASP.NET to populate the <xref:System.Web.HttpRequest.Form%2A>, <xref:System.Web.HttpRequest.Files%2A>, and <xref:System.Web.HttpRequest.InputStream%2A> properties. Because this information is preserved, downstream code such as ASP.NET Web Forms pages (.aspx files) will run successfully. This is not the case with the <xref:System.Web.HttpRequest.GetBufferlessInputStream%2A> method.","pos":[0,560],"nodes":[{"content":"This method is identical to &lt;xref:System.Web.HttpRequest.GetBufferlessInputStream%2A&gt; except that it also copies the bytes that are read to the internal storage that is used by ASP.NET to populate the &lt;xref:System.Web.HttpRequest.Form%2A&gt;, &lt;xref:System.Web.HttpRequest.Files%2A&gt;, and &lt;xref:System.Web.HttpRequest.InputStream%2A&gt; properties.","pos":[0,340],"source":"This method is identical to <xref:System.Web.HttpRequest.GetBufferlessInputStream%2A> except that it also copies the bytes that are read to the internal storage that is used by ASP.NET to populate the <xref:System.Web.HttpRequest.Form%2A>, <xref:System.Web.HttpRequest.Files%2A>, and <xref:System.Web.HttpRequest.InputStream%2A> properties."},{"content":"Because this information is preserved, downstream code such as ASP.NET Web Forms pages (.aspx files) will run successfully.","pos":[341,464]},{"content":"This is not the case with the &lt;xref:System.Web.HttpRequest.GetBufferlessInputStream%2A&gt; method.","pos":[465,560],"source":" This is not the case with the <xref:System.Web.HttpRequest.GetBufferlessInputStream%2A> method."}]}]},{"pos":[36572,36660],"content":"A <xref:System.IO.Stream> object that can be used to read the incoming HTTP entity body.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.IO.Stream&gt; object that can be used to read the incoming HTTP entity body.","pos":[0,88],"source":"A <xref:System.IO.Stream> object that can be used to read the incoming HTTP entity body."}]},{"pos":[36829,37456],"content":"The request's entity body has already been loaded and parsed. Examples of properties that cause the entity body to be loaded and parsed include the following:      -   The <xref:System.Web.HttpRequest.Form*> property.      -   The <xref:System.Web.HttpRequest.Files*> property.      -   The <xref:System.Web.HttpRequest.InputStream*> property.      -   The <xref:System.Web.HttpRequest.GetBufferlessInputStream*> method.       To avoid this exception, call the <xref:System.Web.HttpRequest.ReadEntityBodyMode*> method first. This exception is also thrown if the client disconnects while the entity body is being read.","needQuote":false,"needEscape":true,"nodes":[{"content":"The request's entity body has already been loaded and parsed.","pos":[0,61]},{"content":"Examples of properties that cause the entity body to be loaded and parsed include the following:      -   The &lt;xref:System.Web.HttpRequest.Form<bpt id=\"p1\">*</bpt>&gt; property.      -   The &lt;xref:System.Web.HttpRequest.Files<ept id=\"p1\">*</ept>&gt; property.","pos":[62,277],"source":" Examples of properties that cause the entity body to be loaded and parsed include the following:      -   The <xref:System.Web.HttpRequest.Form*> property.      -   The <xref:System.Web.HttpRequest.Files*> property."},{"content":"-   The &lt;xref:System.Web.HttpRequest.InputStream<bpt id=\"p1\">*</bpt>&gt; property.      -   The &lt;xref:System.Web.HttpRequest.GetBufferlessInputStream<ept id=\"p1\">*</ept>&gt; method.","pos":[283,420],"source":"      -   The <xref:System.Web.HttpRequest.InputStream*> property.      -   The <xref:System.Web.HttpRequest.GetBufferlessInputStream*> method."},{"content":"To avoid this exception, call the &lt;xref:System.Web.HttpRequest.ReadEntityBodyMode*&gt; method first.","pos":[427,524],"source":"       To avoid this exception, call the <xref:System.Web.HttpRequest.ReadEntityBodyMode*> method first."},{"content":"This exception is also thrown if the client disconnects while the entity body is being read.","pos":[525,617]}]},{"pos":[37851,37944],"content":"Gets a <xref:System.IO.Stream> object that can be used to read the incoming HTTP entity body.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a &lt;xref:System.IO.Stream&gt; object that can be used to read the incoming HTTP entity body.","pos":[0,93],"source":"Gets a <xref:System.IO.Stream> object that can be used to read the incoming HTTP entity body."}]},{"pos":[37957,39674],"content":"This method provides an alternative to using the <xref:System.Web.HttpRequest.InputStream%2A> property. The <xref:System.Web.HttpRequest.InputStream%2A> property waits until the whole request has been received before it returns a <xref:System.IO.Stream> object. In contrast, the GetBufferlessInputStream method returns the <xref:System.IO.Stream> object immediately. You can use the method to begin processing the entity body before the complete contents of the body have been received.       The entity body (or as much of it as you request and has been received) is returned only when you use the object that is returned by this method to read the stream, by calling methods such as the <xref:System.IO.Stream.Read%2A> method. You use parameters of the <xref:System.IO.Stream.Read%2A> method to specify how much of the entity body to read.       The <xref:System.IO.Stream> object returned by ASP.NET from this method supports both synchronous and asynchronous read methods. The <xref:System.IO.Stream> object implements both the <xref:System.IO.Stream.BeginRead%2A> and <xref:System.IO.Stream.EndRead%2A> methods. The asynchronous methods let you asynchronously read the request entity in chunks, while ASP.NET releases the current thread in between each iteration of an asynchronous read loop.       This method can be useful if the request is uploading a large file and you want to begin accessing the file contents before the upload is finished. However, you should only use this method for scenarios where you want to take over all processing of the entity body. This means that you cannot use this method from an .aspx page, because by the time an .aspx page runs, the entity body has already been read.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method provides an alternative to using the <xref:System.Web.HttpRequest.InputStream%2A> property. The <xref:System.Web.HttpRequest.InputStream%2A> property waits until the whole request has been received before it returns a <xref:System.IO.Stream> object. In contrast, the GetBufferlessInputStream method returns the <xref:System.IO.Stream> object immediately. You can use the method to begin processing the entity body before the complete contents of the body have been received.       The entity body (or as much of it as you request and has been received) is returned only when you use the object that is returned by this method to read the stream, by calling methods such as the <xref:System.IO.Stream.Read%2A> method. You use parameters of the <xref:System.IO.Stream.Read%2A> method to specify how much of the entity body to read.       The <xref:System.IO.Stream> object returned by ASP.NET from this method supports both synchronous and asynchronous read methods. The <xref:System.IO.Stream> object implements both the <xref:System.IO.Stream.BeginRead%2A> and <xref:System.IO.Stream.EndRead%2A> methods. The asynchronous methods let you asynchronously read the request entity in chunks, while ASP.NET releases the current thread in between each iteration of an asynchronous read loop.       This method can be useful if the request is uploading a large file and you want to begin accessing the file contents before the upload is finished. However, you should only use this method for scenarios where you want to take over all processing of the entity body. This means that you cannot use this method from an .aspx page, because by the time an .aspx page runs, the entity body has already been read.","pos":[0,1711],"nodes":[{"content":"This method provides an alternative to using the &lt;xref:System.Web.HttpRequest.InputStream%2A&gt; property.","pos":[0,103],"source":"This method provides an alternative to using the <xref:System.Web.HttpRequest.InputStream%2A> property."},{"content":"The &lt;xref:System.Web.HttpRequest.InputStream%2A&gt; property waits until the whole request has been received before it returns a &lt;xref:System.IO.Stream&gt; object.","pos":[104,261],"source":" The <xref:System.Web.HttpRequest.InputStream%2A> property waits until the whole request has been received before it returns a <xref:System.IO.Stream> object."},{"content":"In contrast, the GetBufferlessInputStream method returns the &lt;xref:System.IO.Stream&gt; object immediately.","pos":[262,366],"source":" In contrast, the GetBufferlessInputStream method returns the <xref:System.IO.Stream> object immediately."},{"content":"You can use the method to begin processing the entity body before the complete contents of the body have been received.","pos":[367,486]},{"content":"The entity body (or as much of it as you request and has been received) is returned only when you use the object that is returned by this method to read the stream, by calling methods such as the &lt;xref:System.IO.Stream.Read%2A&gt; method.","pos":[493,728],"source":"       The entity body (or as much of it as you request and has been received) is returned only when you use the object that is returned by this method to read the stream, by calling methods such as the <xref:System.IO.Stream.Read%2A> method."},{"content":"You use parameters of the &lt;xref:System.IO.Stream.Read%2A&gt; method to specify how much of the entity body to read.","pos":[729,841],"source":" You use parameters of the <xref:System.IO.Stream.Read%2A> method to specify how much of the entity body to read."},{"content":"The &lt;xref:System.IO.Stream&gt; object returned by ASP.NET from this method supports both synchronous and asynchronous read methods.","pos":[848,976],"source":"       The <xref:System.IO.Stream> object returned by ASP.NET from this method supports both synchronous and asynchronous read methods."},{"content":"The &lt;xref:System.IO.Stream&gt; object implements both the &lt;xref:System.IO.Stream.BeginRead%2A&gt; and &lt;xref:System.IO.Stream.EndRead%2A&gt; methods.","pos":[977,1116],"source":" The <xref:System.IO.Stream> object implements both the <xref:System.IO.Stream.BeginRead%2A> and <xref:System.IO.Stream.EndRead%2A> methods."},{"content":"The asynchronous methods let you asynchronously read the request entity in chunks, while ASP.NET releases the current thread in between each iteration of an asynchronous read loop.","pos":[1117,1297]},{"content":"This method can be useful if the request is uploading a large file and you want to begin accessing the file contents before the upload is finished.","pos":[1304,1451]},{"content":"However, you should only use this method for scenarios where you want to take over all processing of the entity body.","pos":[1452,1569]},{"content":"This means that you cannot use this method from an .aspx page, because by the time an .aspx page runs, the entity body has already been read.","pos":[1570,1711]}]}]},{"pos":[39831,39919],"content":"A <xref:System.IO.Stream> object that can be used to read the incoming HTTP entity body.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.IO.Stream&gt; object that can be used to read the incoming HTTP entity body.","pos":[0,88],"source":"A <xref:System.IO.Stream> object that can be used to read the incoming HTTP entity body."}]},{"pos":[40090,40661],"content":"The request's entity body has already been loaded and parsed. Examples of properties that cause the entity body to be loaded and parsed include the following:      -   <xref:System.Web.HttpRequest.Form*>      -   <xref:System.Web.HttpRequest.InputStream*>      -   <xref:System.Web.HttpRequest.Files*>      -   <xref:System.Web.HttpRequest.GetBufferedInputStream*>       To avoid this exception, call the <xref:System.Web.HttpRequest.ReadEntityBodyMode*> method first. This exception is also thrown if the client disconnects while the entity body is being read.","needQuote":false,"needEscape":true,"nodes":[{"content":"The request's entity body has already been loaded and parsed.","pos":[0,61]},{"content":"Examples of properties that cause the entity body to be loaded and parsed include the following:      -   &lt;xref:System.Web.HttpRequest.Form<bpt id=\"p1\">*</bpt>&gt;      -   &lt;xref:System.Web.HttpRequest.InputStream<ept id=\"p1\">*</ept>&gt;      -   &lt;xref:System.Web.HttpRequest.Files<bpt id=\"p2\">*</bpt>&gt;      -   &lt;xref:System.Web.HttpRequest.GetBufferedInputStream<ept id=\"p2\">*</ept>&gt;       To avoid this exception, call the &lt;xref:System.Web.HttpRequest.ReadEntityBodyMode*&gt; method first.","pos":[62,468],"source":" Examples of properties that cause the entity body to be loaded and parsed include the following:      -   <xref:System.Web.HttpRequest.Form*>      -   <xref:System.Web.HttpRequest.InputStream*>      -   <xref:System.Web.HttpRequest.Files*>      -   <xref:System.Web.HttpRequest.GetBufferedInputStream*>       To avoid this exception, call the <xref:System.Web.HttpRequest.ReadEntityBodyMode*> method first."},{"content":"This exception is also thrown if the client disconnects while the entity body is being read.","pos":[469,561]}]},{"pos":[41109,41346],"content":"Gets a <xref:System.IO.Stream> object that can be used to read the incoming HTTP entity body, optionally disabling the request-length limit that is set in the <xref:System.Web.Configuration.HttpRuntimeSection.MaxRequestLength*> property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a &lt;xref:System.IO.Stream&gt; object that can be used to read the incoming HTTP entity body, optionally disabling the request-length limit that is set in the &lt;xref:System.Web.Configuration.HttpRuntimeSection.MaxRequestLength*&gt; property.","pos":[0,237],"source":"Gets a <xref:System.IO.Stream> object that can be used to read the incoming HTTP entity body, optionally disabling the request-length limit that is set in the <xref:System.Web.Configuration.HttpRuntimeSection.MaxRequestLength*> property."}]},{"pos":[41358,41470],"content":"For more information about this method, see the <xref:System.Web.HttpRequest.GetBufferlessInputStream> overload.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"For more information about this method, see the &lt;xref:System.Web.HttpRequest.GetBufferlessInputStream&gt; overload.","pos":[0,112],"source":"For more information about this method, see the <xref:System.Web.HttpRequest.GetBufferlessInputStream> overload."}]},{"pos":[41671,41843],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to disable the request-length limit; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to disable the request-length limit; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[41904,41992],"content":"A <xref:System.IO.Stream> object that can be used to read the incoming HTTP entity body.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.IO.Stream&gt; object that can be used to read the incoming HTTP entity body.","pos":[0,88],"source":"A <xref:System.IO.Stream> object that can be used to read the incoming HTTP entity body."}]},{"pos":[42163,42788],"content":"The request's entity body has already been loaded and parsed. Examples of properties that cause the entity body to be loaded and parsed include the following:      -   The <xref:System.Web.HttpRequest.Form*> property.      -   The <xref:System.Web.HttpRequest.Files*> property.      -   The <xref:System.Web.HttpRequest.InputStream*> property.      -   The <xref:System.Web.HttpRequest.GetBufferedInputStream*> method.       To avoid this exception, call the <xref:System.Web.HttpRequest.ReadEntityBodyMode*> method first. This exception is also thrown if the client disconnects while the entity body is being read.","needQuote":false,"needEscape":true,"nodes":[{"content":"The request's entity body has already been loaded and parsed.","pos":[0,61]},{"content":"Examples of properties that cause the entity body to be loaded and parsed include the following:      -   The &lt;xref:System.Web.HttpRequest.Form<bpt id=\"p1\">*</bpt>&gt; property.      -   The &lt;xref:System.Web.HttpRequest.Files<ept id=\"p1\">*</ept>&gt; property.","pos":[62,277],"source":" Examples of properties that cause the entity body to be loaded and parsed include the following:      -   The <xref:System.Web.HttpRequest.Form*> property.      -   The <xref:System.Web.HttpRequest.Files*> property."},{"content":"-   The &lt;xref:System.Web.HttpRequest.InputStream<bpt id=\"p1\">*</bpt>&gt; property.      -   The &lt;xref:System.Web.HttpRequest.GetBufferedInputStream<ept id=\"p1\">*</ept>&gt; method.","pos":[283,418],"source":"      -   The <xref:System.Web.HttpRequest.InputStream*> property.      -   The <xref:System.Web.HttpRequest.GetBufferedInputStream*> method."},{"content":"To avoid this exception, call the &lt;xref:System.Web.HttpRequest.ReadEntityBodyMode*&gt; method first.","pos":[425,522],"source":"       To avoid this exception, call the <xref:System.Web.HttpRequest.ReadEntityBodyMode*> method first."},{"content":"This exception is also thrown if the client disconnects while the entity body is being read.","pos":[523,615]}]},{"pos":[43094,43128],"content":"Gets a collection of HTTP headers.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a collection of HTTP headers.","pos":[0,34]}]},{"pos":[43140,43273],"content":"For a listing of all possible headers, see <bpt id=\"p1\">[</bpt>Request Header Fields<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=73147)</ept> on the W3C Web site.","needQuote":true,"needEscape":true,"extradata":"MT","source":"For a listing of all possible headers, see [Request Header Fields](http://go.microsoft.com/fwlink/?LinkId=73147) on the W3C Web site."},{"pos":[43809,43894],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.NameValueCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> of headers.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> of headers."},{"pos":[44315,44477],"content":"Gets the &lt;xref:System.Security.Authentication.ExtendedProtection.ChannelBinding&gt; object of the current <bpt id=\"p1\">&lt;xref href=\"System.Web.HttpWorkerRequest\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance.","needQuote":true,"needEscape":true,"source":"Gets the <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> object of the current <xref href=\"System.Web.HttpWorkerRequest\"></xref> instance."},{"pos":[44709,44866],"content":"The &lt;xref:System.Security.Authentication.ExtendedProtection.ChannelBinding&gt; object of the current <bpt id=\"p1\">&lt;xref href=\"System.Web.HttpWorkerRequest\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance.","needQuote":true,"needEscape":true,"source":"The <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> object of the current <xref href=\"System.Web.HttpWorkerRequest\"></xref> instance."},{"pos":[45054,45415],"content":"The current <bpt id=\"p1\">&lt;xref href=\"System.Web.HttpWorkerRequest\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object is not a <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_System.Web.Hosting.IIS7WorkerRequest\" name=\"System.Web.Hosting.IIS7WorkerRequest\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object or a <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_System.Web.Hosting.ISAPIWorkerRequestInProc\" name=\"System.Web.Hosting.ISAPIWorkerRequestInProc\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"The current <xref href=\"System.Web.HttpWorkerRequest\"></xref> object is not a <xref uid=\"langword_csharp_System.Web.Hosting.IIS7WorkerRequest\" name=\"System.Web.Hosting.IIS7WorkerRequest\" href=\"\"></xref> object or a <xref uid=\"langword_csharp_System.Web.Hosting.ISAPIWorkerRequestInProc\" name=\"System.Web.Hosting.ISAPIWorkerRequestInProc\" href=\"\"></xref> object."},{"pos":[45735,45985],"content":"Gets the HTTP data transfer method (such as <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_GET\" name=\"GET\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_POST\" name=\"POST\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, or <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_HEAD\" name=\"HEAD\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>) used by the client.","needQuote":true,"needEscape":true,"source":"Gets the HTTP data transfer method (such as <xref uid=\"langword_csharp_GET\" name=\"GET\" href=\"\"></xref>, <xref uid=\"langword_csharp_POST\" name=\"POST\" href=\"\"></xref>, or <xref uid=\"langword_csharp_HEAD\" name=\"HEAD\" href=\"\"></xref>) used by the client."},{"pos":[46833,46882],"content":"The HTTP data transfer method used by the client.","needQuote":true,"needEscape":true,"nodes":[{"content":"The HTTP data transfer method used by the client.","pos":[0,49]}]},{"pos":[47271,47322],"content":"Gets the contents of the incoming HTTP entity body.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the contents of the incoming HTTP entity body.","pos":[0,51]}]},{"pos":[47805,47898],"content":"A <xref:System.IO.Stream> object representing the contents of the incoming HTTP content body.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.IO.Stream&gt; object representing the contents of the incoming HTTP content body.","pos":[0,93],"source":"A <xref:System.IO.Stream> object representing the contents of the incoming HTTP content body."}]},{"pos":[48317,48374],"content":"Provides IIS with a copy of the HTTP request entity body.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides IIS with a copy of the HTTP request entity body.","pos":[0,57]}]},{"pos":[48387,48819],"content":"IIS does not maintain a copy of the request after it has been read. Therefore, it is recommended that only the handler for an HTTP request should read the request entity.       The InsertEntityBody method overload provides IIS with a copy of the request entity if it was previously read by ASP.NET. This method overload is useful for cases where ASP.NET has read the entity request and you want to reuse the existing request data.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"IIS does not maintain a copy of the request after it has been read. Therefore, it is recommended that only the handler for an HTTP request should read the request entity.       The InsertEntityBody method overload provides IIS with a copy of the request entity if it was previously read by ASP.NET. This method overload is useful for cases where ASP.NET has read the entity request and you want to reuse the existing request data.","pos":[0,430],"nodes":[{"content":"IIS does not maintain a copy of the request after it has been read.","pos":[0,67]},{"content":"Therefore, it is recommended that only the handler for an HTTP request should read the request entity.","pos":[68,170]},{"content":"The InsertEntityBody method overload provides IIS with a copy of the request entity if it was previously read by ASP.NET.","pos":[177,298]},{"content":"This method overload is useful for cases where ASP.NET has read the entity request and you want to reuse the existing request data.","pos":[299,430]}]}]},{"pos":[49081,49145],"content":"The method was invoked on a version of IIS earlier than IIS 7.0.","needQuote":true,"needEscape":true,"nodes":[{"content":"The method was invoked on a version of IIS earlier than IIS 7.0.","pos":[0,64]}]},{"pos":[49635,49745],"content":"Provides IIS with a copy of the HTTP request entity body and with information about the request entity object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides IIS with a copy of the HTTP request entity body and with information about the request entity object.","pos":[0,110]}]},{"pos":[49758,50082],"content":"IIS does not maintain a copy of the request after it has been read. Therefore, it is recommended that only the handler for an HTTP request should read the request entity.       The InsertEntityBody method overload is useful when you want to perform custom processing, such as inserting a different entity body into memory.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"IIS does not maintain a copy of the request after it has been read. Therefore, it is recommended that only the handler for an HTTP request should read the request entity.       The InsertEntityBody method overload is useful when you want to perform custom processing, such as inserting a different entity body into memory.","pos":[0,322],"nodes":[{"content":"IIS does not maintain a copy of the request after it has been read.","pos":[0,67]},{"content":"Therefore, it is recommended that only the handler for an HTTP request should read the request entity.","pos":[68,170]},{"content":"The InsertEntityBody method overload is useful when you want to perform custom processing, such as inserting a different entity body into memory.","pos":[177,322]}]}]},{"pos":[50254,50301],"content":"An array that contains the request entity data.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array that contains the request entity data.","pos":[0,47]}]},{"pos":[50363,50449],"content":"The zero-based position in <ph id=\"ph1\">`buffer`</ph> at which to begin storing the request entity data.","needQuote":true,"needEscape":true,"source":"The zero-based position in `buffer` at which to begin storing the request entity data."},{"pos":[50510,50562],"content":"The number of bytes to read into the <ph id=\"ph1\">`buffer`</ph> array.","needQuote":true,"needEscape":true,"source":"The number of bytes to read into the `buffer` array."},{"pos":[50748,50812],"content":"The method was invoked on a version of IIS earlier than IIS 7.0.","needQuote":true,"needEscape":true,"nodes":[{"content":"The method was invoked on a version of IIS earlier than IIS 7.0.","pos":[0,64]}]},{"pos":[50915,50999],"content":"<ph id=\"ph1\">&lt;code&gt;buffer&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>buffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[51114,51154],"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph> is a negative value.","needQuote":true,"needEscape":true,"source":"<code>offset</code> is a negative value."},{"pos":[51249,51386],"content":"The number of items in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">count</ph><ept id=\"p1\">&lt;/code&gt;</ept> is larger than the available space in <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">buffer</ph><ept id=\"p2\">&lt;/code&gt;</ept>, given the <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">offset</ph><ept id=\"p3\">&lt;/code&gt;</ept> value.","needQuote":true,"needEscape":true,"source":"The number of items in <code>count</code> is larger than the available space in <code>buffer</code>, given the <code>offset</code> value."},{"pos":[51731,51798],"content":"Gets a value indicating whether the request has been authenticated.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value indicating whether the request has been authenticated.","pos":[0,67]}]},{"pos":[52515,52683],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the request is authenticated; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the request is authenticated; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[53057,53128],"content":"Gets a value indicating whether the request is from the local computer.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value indicating whether the request is from the local computer.","pos":[0,71]}]},{"pos":[53140,53308],"content":"The IsLocal property returns <ph id=\"ph1\">`true`</ph> if the IP address of the request originator is 127.0.0.1 or if the IP address of the request is the same as the server's IP address.","needQuote":true,"needEscape":true,"extradata":"MT","source":"The IsLocal property returns `true` if the IP address of the request originator is 127.0.0.1 or if the IP address of the request is the same as the server's IP address."},{"pos":[53419,53597],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the request is from the local computer; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the request is from the local computer; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[54018,54107],"content":"Gets a value indicating whether the HTTP connection uses secure sockets (that is, HTTPS).","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value indicating whether the HTTP connection uses secure sockets (that is, HTTPS).","pos":[0,89]}]},{"pos":[54710,54885],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the connection is an SSL connection; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the connection is an SSL connection; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[55301,55519],"content":"Gets the specified object from the &lt;xref:System.Web.HttpRequest.QueryString<bpt id=\"p1\">*</bpt>&gt;, &lt;xref:System.Web.HttpRequest.Form<ept id=\"p1\">*</ept>&gt;, &lt;xref:System.Web.HttpRequest.Cookies<bpt id=\"p2\">*</bpt>&gt;, or &lt;xref:System.Web.HttpRequest.ServerVariables<ept id=\"p2\">*</ept>&gt; collections.","needQuote":true,"needEscape":true,"source":"Gets the specified object from the <xref:System.Web.HttpRequest.QueryString*>, <xref:System.Web.HttpRequest.Form*>, <xref:System.Web.HttpRequest.Cookies*>, or <xref:System.Web.HttpRequest.ServerVariables*> collections."},{"pos":[55658,55699],"content":"The name of the collection member to get.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the collection member to get.","pos":[0,41]}]},{"pos":[55757,56121],"content":"The <xref:System.Web.HttpRequest.QueryString*>, <xref:System.Web.HttpRequest.Form*>, <xref:System.Web.HttpRequest.Cookies*>, or <xref:System.Web.HttpRequest.ServerVariables*> collection member specified in the <code>key</code> parameter. If the specified <code>key</code> is not found, then <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> is returned.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Web.HttpRequest.QueryString<bpt id=\"p1\">*</bpt>&gt;, &lt;xref:System.Web.HttpRequest.Form<ept id=\"p1\">*</ept>&gt;, &lt;xref:System.Web.HttpRequest.Cookies<bpt id=\"p2\">*</bpt>&gt;, or &lt;xref:System.Web.HttpRequest.ServerVariables<ept id=\"p2\">*</ept>&gt; collection member specified in the <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph1\">key</ph><ept id=\"p3\">&lt;/code&gt;</ept> parameter.","pos":[0,237],"source":"The <xref:System.Web.HttpRequest.QueryString*>, <xref:System.Web.HttpRequest.Form*>, <xref:System.Web.HttpRequest.Cookies*>, or <xref:System.Web.HttpRequest.ServerVariables*> collection member specified in the <code>key</code> parameter."},{"content":"If the specified <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">key</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not found, then <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> is returned.","pos":[238,364],"source":" If the specified <code>key</code> is not found, then <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> is returned."}]},{"pos":[56534,56632],"content":"Gets the <bpt id=\"p1\">&lt;xref href=\"System.Security.Principal.WindowsIdentity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> type for the current user.","needQuote":true,"needEscape":true,"source":"Gets the <xref href=\"System.Security.Principal.WindowsIdentity\"></xref> type for the current user."},{"pos":[56644,57294],"content":"The LogonUserIdentity property exposes the properties and methods of the <xref:System.Security.Principal.WindowsIdentity> object for the currently connected user to Microsoft Internet Information Services (IIS). The instance of the <xref:System.Security.Principal.WindowsIdentity> class that is exposed by LogonUserIdentity tracks the IIS request token and provides easy access to this token for the current HTTP request being processed inside of ASP.NET. An instance of the <xref:System.Security.Principal.WindowsIdentity> class is automatically created so it does not need to be constructed to in order to gain access to its methods and properties.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The LogonUserIdentity property exposes the properties and methods of the <xref:System.Security.Principal.WindowsIdentity> object for the currently connected user to Microsoft Internet Information Services (IIS). The instance of the <xref:System.Security.Principal.WindowsIdentity> class that is exposed by LogonUserIdentity tracks the IIS request token and provides easy access to this token for the current HTTP request being processed inside of ASP.NET. An instance of the <xref:System.Security.Principal.WindowsIdentity> class is automatically created so it does not need to be constructed to in order to gain access to its methods and properties.","pos":[0,650],"nodes":[{"content":"The LogonUserIdentity property exposes the properties and methods of the &lt;xref:System.Security.Principal.WindowsIdentity&gt; object for the currently connected user to Microsoft Internet Information Services (IIS).","pos":[0,211],"source":"The LogonUserIdentity property exposes the properties and methods of the <xref:System.Security.Principal.WindowsIdentity> object for the currently connected user to Microsoft Internet Information Services (IIS)."},{"content":"The instance of the &lt;xref:System.Security.Principal.WindowsIdentity&gt; class that is exposed by LogonUserIdentity tracks the IIS request token and provides easy access to this token for the current HTTP request being processed inside of ASP.NET.","pos":[212,455],"source":" The instance of the <xref:System.Security.Principal.WindowsIdentity> class that is exposed by LogonUserIdentity tracks the IIS request token and provides easy access to this token for the current HTTP request being processed inside of ASP.NET."},{"content":"An instance of the &lt;xref:System.Security.Principal.WindowsIdentity&gt; class is automatically created so it does not need to be constructed to in order to gain access to its methods and properties.","pos":[456,650],"source":" An instance of the <xref:System.Security.Principal.WindowsIdentity> class is automatically created so it does not need to be constructed to in order to gain access to its methods and properties."}]}]},{"pos":[57979,58137],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Security.Principal.WindowsIdentity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object for the current Microsoft Internet Information Services (IIS) authentication settings.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Security.Principal.WindowsIdentity\"></xref> object for the current Microsoft Internet Information Services (IIS) authentication settings."},{"pos":[58316,58482],"content":"The Web application is running in IIS 7 integrated mode and the <bpt id=\"p1\">&lt;xref href=\"System.Web.HttpApplication.PostAuthenticateRequest\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event has not yet been raised.","needQuote":true,"needEscape":true,"source":"The Web application is running in IIS 7 integrated mode and the <xref href=\"System.Web.HttpApplication.PostAuthenticateRequest\"></xref> event has not yet been raised."},{"pos":[58899,58995],"content":"Maps an incoming image-field form parameter to appropriate x-coordinate and y-coordinate values.","needQuote":true,"needEscape":true,"nodes":[{"content":"Maps an incoming image-field form parameter to appropriate x-coordinate and y-coordinate values.","pos":[0,96]}]},{"pos":[59163,59194],"content":"The name of the form image map.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the form image map.","pos":[0,31]}]},{"pos":[59253,59289],"content":"A two-dimensional array of integers.","needQuote":true,"needEscape":true,"nodes":[{"content":"A two-dimensional array of integers.","pos":[0,36]}]},{"pos":[59719,59770],"content":"Maps the specified virtual path to a physical path.","needQuote":true,"needEscape":true,"nodes":[{"content":"Maps the specified virtual path to a physical path.","pos":[0,51]}]},{"pos":[61671,61735],"content":"The virtual path (absolute or relative) for the current request.","needQuote":true,"needEscape":true,"nodes":[{"content":"The virtual path (absolute or relative) for the current request.","pos":[0,64]}]},{"pos":[61793,61863],"content":"The physical path on the server specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">virtualPath</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The physical path on the server specified by <code>virtualPath</code>."},{"pos":[62016,62097],"content":"No <bpt id=\"p1\">&lt;xref href=\"System.Web.HttpContext\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object is defined for the request.","needQuote":true,"needEscape":true,"source":"No <xref href=\"System.Web.HttpContext\"></xref> object is defined for the request."},{"pos":[62557,62608],"content":"Maps the specified virtual path to a physical path.","needQuote":true,"needEscape":true,"nodes":[{"content":"Maps the specified virtual path to a physical path.","pos":[0,51]}]},{"pos":[62994,63058],"content":"The virtual path (absolute or relative) for the current request.","needQuote":true,"needEscape":true,"nodes":[{"content":"The virtual path (absolute or relative) for the current request.","pos":[0,64]}]},{"pos":[63129,63190],"content":"The virtual base directory path used for relative resolution.","needQuote":true,"needEscape":true,"nodes":[{"content":"The virtual base directory path used for relative resolution.","pos":[0,61]}]},{"pos":[63268,63469],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to indicate that <ph id=\"ph1\">`virtualPath`</ph> may belong to another application; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to indicate that `virtualPath` may belong to another application; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[63527,63559],"content":"The physical path on the server.","needQuote":true,"needEscape":true,"nodes":[{"content":"The physical path on the server.","pos":[0,32]}]},{"pos":[63712,63793],"content":"No <bpt id=\"p1\">&lt;xref href=\"System.Web.HttpContext\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object is defined for the request.","needQuote":true,"needEscape":true,"source":"No <xref href=\"System.Web.HttpContext\"></xref> object is defined for the request."},{"pos":[64225,64312],"content":"Maps an incoming image field form parameter into appropriate x and y coordinate values.","needQuote":true,"needEscape":true,"nodes":[{"content":"Maps an incoming image field form parameter into appropriate x and y coordinate values.","pos":[0,87]}]},{"pos":[64486,64514],"content":"The name of the image field.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the image field.","pos":[0,28]}]},{"pos":[64574,64604],"content":"The x and y coordinate values.","needQuote":true,"needEscape":true,"nodes":[{"content":"The x and y coordinate values.","pos":[0,30]}]},{"pos":[64980,65188],"content":"Gets a combined collection of &lt;xref:System.Web.HttpRequest.QueryString<bpt id=\"p1\">*</bpt>&gt;, &lt;xref:System.Web.HttpRequest.Form<ept id=\"p1\">*</ept>&gt;, &lt;xref:System.Web.HttpRequest.Cookies<bpt id=\"p2\">*</bpt>&gt;, and &lt;xref:System.Web.HttpRequest.ServerVariables<ept id=\"p2\">*</ept>&gt; items.","needQuote":true,"needEscape":true,"source":"Gets a combined collection of <xref:System.Web.HttpRequest.QueryString*>, <xref:System.Web.HttpRequest.Form*>, <xref:System.Web.HttpRequest.Cookies*>, and <xref:System.Web.HttpRequest.ServerVariables*> items."},{"pos":[65201,65378],"content":"Name-value pairs are added to the collection in the following order:      1.  Query-string parameters.      2.  Form fields.      3.  Cookies.      4.  Server variables.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Name-value pairs are added to the collection in the following order:      1.  Query-string parameters.      2.  Form fields.      3.  Cookies.      4.  Server variables.","pos":[0,169],"nodes":[{"content":"Name-value pairs are added to the collection in the following order:      1.","pos":[0,76]},{"content":"Query-string parameters.","pos":[78,102]},{"content":"2.","pos":[108,110]},{"content":"Form fields.","pos":[112,124]},{"content":"3.","pos":[130,132]},{"content":"Cookies.","pos":[134,142]},{"content":"4.","pos":[148,150]},{"content":"Server variables.","pos":[152,169]}]}]},{"pos":[65935,66016],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.NameValueCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> object."},{"pos":[66366,66411],"content":"Gets the virtual path of the current request.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the virtual path of the current request.","pos":[0,45]}]},{"pos":[66423,66667],"content":"The Path is the concatenation of the <xref:System.Web.HttpRequest.FilePath%2A> and the <xref:System.Web.HttpRequest.PathInfo%2A> trailer. For example, for the URL http://www.contoso.com/virdir/page.html/tail, the Path is /virdir/page.html/tail.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Path is the concatenation of the <xref:System.Web.HttpRequest.FilePath%2A> and the <xref:System.Web.HttpRequest.PathInfo%2A> trailer. For example, for the URL http://www.contoso.com/virdir/page.html/tail, the Path is /virdir/page.html/tail.","pos":[0,244],"nodes":[{"content":"The Path is the concatenation of the &lt;xref:System.Web.HttpRequest.FilePath%2A&gt; and the &lt;xref:System.Web.HttpRequest.PathInfo%2A&gt; trailer.","pos":[0,137],"source":"The Path is the concatenation of the <xref:System.Web.HttpRequest.FilePath%2A> and the <xref:System.Web.HttpRequest.PathInfo%2A> trailer."},{"content":"For example, for the URL http://www.contoso.com/virdir/page.html/tail, the Path is /virdir/page.html/tail.","pos":[138,244]}]}]},{"pos":[67349,67389],"content":"The virtual path of the current request.","needQuote":true,"needEscape":true,"nodes":[{"content":"The virtual path of the current request.","pos":[0,40]}]},{"pos":[67757,67830],"content":"Gets the additional path information for a resource with a URL extension.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the additional path information for a resource with a URL extension.","pos":[0,73]}]},{"pos":[67842,67928],"content":"For the URL Http://www.contoso.com/virdir/page.html/tail, the PathInfo value is /tail.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"For the URL Http://www.contoso.com/virdir/page.html/tail, the PathInfo value is /tail.","pos":[0,86]}]},{"pos":[68797,68844],"content":"The additional path information for a resource.","needQuote":true,"needEscape":true,"nodes":[{"content":"The additional path information for a resource.","pos":[0,47]}]},{"pos":[69291,69389],"content":"Gets the physical file system path of the currently executing server application's root directory.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the physical file system path of the currently executing server application's root directory.","pos":[0,98]}]},{"pos":[70121,70186],"content":"The file system path of the current application's root directory.","needQuote":true,"needEscape":true,"nodes":[{"content":"The file system path of the current application's root directory.","pos":[0,65]}]},{"pos":[70593,70663],"content":"Gets the physical file system path corresponding to the requested URL.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the physical file system path corresponding to the requested URL.","pos":[0,70]}]},{"pos":[70675,71084],"content":"In redirect scenarios using <xref:System.Web.HttpServerUtility.Execute%2A> and <xref:System.Web.HttpServerUtility.Transfer%2A>, the PhysicalPath property returns the path to the original page. To find the physical path of the currently executing page use the <xref:System.Web.HttpRequest.MapPath%2A> method with the input argument set as the <xref:System.Web.HttpRequest.CurrentExecutionFilePath%2A> property.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"In redirect scenarios using <xref:System.Web.HttpServerUtility.Execute%2A> and <xref:System.Web.HttpServerUtility.Transfer%2A>, the PhysicalPath property returns the path to the original page. To find the physical path of the currently executing page use the <xref:System.Web.HttpRequest.MapPath%2A> method with the input argument set as the <xref:System.Web.HttpRequest.CurrentExecutionFilePath%2A> property.","pos":[0,409],"nodes":[{"content":"In redirect scenarios using &lt;xref:System.Web.HttpServerUtility.Execute%2A&gt; and &lt;xref:System.Web.HttpServerUtility.Transfer%2A&gt;, the PhysicalPath property returns the path to the original page.","pos":[0,192],"source":"In redirect scenarios using <xref:System.Web.HttpServerUtility.Execute%2A> and <xref:System.Web.HttpServerUtility.Transfer%2A>, the PhysicalPath property returns the path to the original page."},{"content":"To find the physical path of the currently executing page use the &lt;xref:System.Web.HttpRequest.MapPath%2A&gt; method with the input argument set as the &lt;xref:System.Web.HttpRequest.CurrentExecutionFilePath%2A&gt; property.","pos":[193,409],"source":" To find the physical path of the currently executing page use the <xref:System.Web.HttpRequest.MapPath%2A> method with the input argument set as the <xref:System.Web.HttpRequest.CurrentExecutionFilePath%2A> property."}]}]},{"pos":[71782,71826],"content":"The file system path of the current request.","needQuote":true,"needEscape":true,"nodes":[{"content":"The file system path of the current request.","pos":[0,44]}]},{"pos":[72217,72268],"content":"Gets the collection of HTTP query string variables.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the collection of HTTP query string variables.","pos":[0,51]}]},{"pos":[73402,73481],"content":"The query string variables sent by the client. Keys and values are URL-decoded.","needQuote":true,"needEscape":true,"nodes":[{"content":"The query string variables sent by the client. Keys and values are URL-decoded.","pos":[0,79],"nodes":[{"content":"The query string variables sent by the client.","pos":[0,46]},{"content":"Keys and values are URL-decoded.","pos":[47,79]}]}]},{"pos":[73846,73886],"content":"Gets the raw URL of the current request.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the raw URL of the current request.","pos":[0,40]}]},{"pos":[73898,74129],"content":"The raw URL is defined as the part of the URL following the domain information. In the URL string http://www.contoso.com/articles/recent.aspx, the raw URL is /articles/recent.aspx. The raw URL includes the query string, if present.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The raw URL is defined as the part of the URL following the domain information. In the URL string http://www.contoso.com/articles/recent.aspx, the raw URL is /articles/recent.aspx. The raw URL includes the query string, if present.","pos":[0,231],"nodes":[{"content":"The raw URL is defined as the part of the URL following the domain information.","pos":[0,79]},{"content":"In the URL string http://www.contoso.com/articles/recent.aspx, the raw URL is /articles/recent.aspx.","pos":[80,180]},{"content":"The raw URL includes the query string, if present.","pos":[181,231]}]}]},{"pos":[74815,74850],"content":"The raw URL of the current request.","needQuote":true,"needEscape":true,"nodes":[{"content":"The raw URL of the current request.","pos":[0,35]}]},{"pos":[75270,75372],"content":"Gets a value that indicates whether the request entity body has been read, and if so, how it was read.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that indicates whether the request entity body has been read, and if so, how it was read.","pos":[0,102]}]},{"pos":[75385,75979],"content":"This method is used to avoid the exception that is thrown if the entity body has already been read and an attempt is made to read it by using an incompatible method. Methods and properties that read the entity body include the following:      -   The <xref:System.Web.HttpRequest.Form%2A> property.      -   The <xref:System.Web.HttpRequest.Files%2A> property.      -   The <xref:System.Web.HttpRequest.InputStream%2A> property.      -   The <xref:System.Web.HttpRequest.GetBufferedInputStream%2A> method.      -   The <xref:System.Web.HttpRequest.GetBufferlessInputStream%2A> method.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method is used to avoid the exception that is thrown if the entity body has already been read and an attempt is made to read it by using an incompatible method. Methods and properties that read the entity body include the following:      -   The <xref:System.Web.HttpRequest.Form%2A> property.      -   The <xref:System.Web.HttpRequest.Files%2A> property.      -   The <xref:System.Web.HttpRequest.InputStream%2A> property.      -   The <xref:System.Web.HttpRequest.GetBufferedInputStream%2A> method.      -   The <xref:System.Web.HttpRequest.GetBufferlessInputStream%2A> method.","pos":[0,584],"nodes":[{"content":"This method is used to avoid the exception that is thrown if the entity body has already been read and an attempt is made to read it by using an incompatible method.","pos":[0,165]},{"content":"Methods and properties that read the entity body include the following:      -   The &lt;xref:System.Web.HttpRequest.Form%2A&gt; property.","pos":[166,298],"source":" Methods and properties that read the entity body include the following:      -   The <xref:System.Web.HttpRequest.Form%2A> property."},{"content":"-   The &lt;xref:System.Web.HttpRequest.Files%2A&gt; property.","pos":[304,360],"source":"      -   The <xref:System.Web.HttpRequest.Files%2A> property."},{"content":"-   The &lt;xref:System.Web.HttpRequest.InputStream%2A&gt; property.","pos":[366,428],"source":"      -   The <xref:System.Web.HttpRequest.InputStream%2A> property."},{"content":"-   The &lt;xref:System.Web.HttpRequest.GetBufferedInputStream%2A&gt; method.","pos":[434,505],"source":"      -   The <xref:System.Web.HttpRequest.GetBufferedInputStream%2A> method."},{"content":"-   The &lt;xref:System.Web.HttpRequest.GetBufferlessInputStream%2A&gt; method.","pos":[511,584],"source":"      -   The <xref:System.Web.HttpRequest.GetBufferlessInputStream%2A> method."}]}]},{"pos":[76142,76234],"content":"The value that indicates how the request entity body was read, or that it has not been read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The value that indicates how the request entity body was read, or that it has not been read.","pos":[0,92]}]},{"pos":[76646,76728],"content":"Gets the <xref:System.Web.Routing.RequestContext> instance of the current request.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the &lt;xref:System.Web.Routing.RequestContext&gt; instance of the current request.","pos":[0,82],"source":"Gets the <xref:System.Web.Routing.RequestContext> instance of the current request."}]},{"pos":[76740,76950],"content":"This property provides access to the <xref:System.Web.Routing.RouteData> object for the current request. For more information about ASP.NET routing, see.[ASP.NET Routing](~/add/includes/ajax-current-ext-md.md).","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This property provides access to the &lt;xref:System.Web.Routing.RouteData&gt; object for the current request.","pos":[0,104],"source":"This property provides access to the <xref:System.Web.Routing.RouteData> object for the current request."},{"content":"For more information about ASP.NET routing, see.<bpt id=\"p1\">[</bpt>ASP.NET Routing<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[105,210],"source":" For more information about ASP.NET routing, see.[ASP.NET Routing](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[77121,77302],"content":"The <xref:System.Web.Routing.RequestContext> instance of the current request. For non-routed requests, the <xref:System.Web.Routing.RequestContext> object that is returned is empty.","needQuote":true,"needEscape":true,"nodes":[{"content":"The <xref:System.Web.Routing.RequestContext> instance of the current request. For non-routed requests, the <xref:System.Web.Routing.RequestContext> object that is returned is empty.","pos":[0,181],"nodes":[{"content":"The &lt;xref:System.Web.Routing.RequestContext&gt; instance of the current request.","pos":[0,77],"source":"The <xref:System.Web.Routing.RequestContext> instance of the current request."},{"content":"For non-routed requests, the &lt;xref:System.Web.Routing.RequestContext&gt; object that is returned is empty.","pos":[78,181],"source":" For non-routed requests, the <xref:System.Web.Routing.RequestContext> object that is returned is empty."}]}]},{"pos":[77695,77882],"content":"Gets or sets the HTTP data transfer method (<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_GET\" name=\"GET\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> or <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_POST\" name=\"POST\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>) used by the client.","needQuote":true,"needEscape":true,"source":"Gets or sets the HTTP data transfer method (<xref uid=\"langword_csharp_GET\" name=\"GET\" href=\"\"></xref> or <xref uid=\"langword_csharp_POST\" name=\"POST\" href=\"\"></xref>) used by the client."},{"pos":[78597,78663],"content":"A string representing the HTTP invocation type sent by the client.","needQuote":true,"needEscape":true,"nodes":[{"content":"A string representing the HTTP invocation type sent by the client.","pos":[0,66]}]},{"pos":[79134,79164],"content":"Saves an HTTP request to disk.","needQuote":true,"needEscape":true,"nodes":[{"content":"Saves an HTTP request to disk.","pos":[0,30]}]},{"pos":[79176,79238],"content":"Saving the request context to disk can be useful in debugging.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Saving the request context to disk can be useful in debugging.","pos":[0,62]}]},{"pos":[79944,79968],"content":"The physical drive path.","needQuote":true,"needEscape":true,"nodes":[{"content":"The physical drive path.","pos":[0,24]}]},{"pos":[80040,80114],"content":"A Boolean value specifying whether an HTTP header should be saved to disk.","needQuote":true,"needEscape":true,"nodes":[{"content":"A Boolean value specifying whether an HTTP header should be saved to disk.","pos":[0,74]}]},{"pos":[80266,80548],"content":"The &lt;xref:System.Web.Configuration.HttpRuntimeSection.RequireRootedSaveAsPath*&gt; property of the <bpt id=\"p1\">&lt;xref href=\"System.Web.Configuration.HttpRuntimeSection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is set to <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> but <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph1\">filename</ph><ept id=\"p3\">&lt;/code&gt;</ept> is not an absolute path.","needQuote":true,"needEscape":true,"source":"The <xref:System.Web.Configuration.HttpRuntimeSection.RequireRootedSaveAsPath*> property of the <xref href=\"System.Web.Configuration.HttpRuntimeSection\"></xref> is set to <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> but <code>filename</code> is not an absolute path."},{"pos":[80893,80935],"content":"Gets a collection of Web server variables.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a collection of Web server variables.","pos":[0,42]}]},{"pos":[80947,81069],"content":"For a list of server variables supported by IIS, see <bpt id=\"p1\">[</bpt>IIS Server Variables<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=52471)</ept>.","needQuote":true,"needEscape":true,"extradata":"MT","source":"For a list of server variables supported by IIS, see [IIS Server Variables](http://go.microsoft.com/fwlink/?LinkId=52471)."},{"pos":[81624,81718],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Collections.Specialized.NameValueCollection\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> of server variables.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> of server variables."},{"pos":[82122,82219],"content":"Gets a <xref:System.Threading.CancellationToken> object that is tripped when a request times out.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a &lt;xref:System.Threading.CancellationToken&gt; object that is tripped when a request times out.","pos":[0,97],"source":"Gets a <xref:System.Threading.CancellationToken> object that is tripped when a request times out."}]},{"pos":[82232,83448],"content":"The timeout period can be specified in the Web.config file (see <xref:System.Web.Configuration.HttpRuntimeSection.ExecutionTimeout%2A?displayProperty=fullName>) or programmatically (see <xref:System.Web.HttpServerUtility.ScriptTimeout%2A?displayProperty=fullName>). The timeout period is measured from the time the request comes in. If the default timeout of 110 seconds is in effect, the cancellation token will be tripped no earlier than 110 seconds after request processing begins. You can change the <xref:System.Web.HttpServerUtility.ScriptTimeout%2A?displayProperty=fullName> property value, and as long this token hasn't tripped yet, the new timeout value will be respected.       Currently the token only provides 15 second granularity, which means that if the timeout value is 110 seconds, the token will be tripped sometime between 110 and 125 seconds after request processing begins. The granularity may change in the future.       Even though this property is thread-safe, there are restrictions on its use. For more information, see <xref:System.Web.HttpResponse.ClientDisconnectedToken%2A?displayProperty=fullName>.       This property is meaningless if WebSockets request processing has started.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The timeout period can be specified in the Web.config file (see <xref:System.Web.Configuration.HttpRuntimeSection.ExecutionTimeout%2A?displayProperty=fullName>) or programmatically (see <xref:System.Web.HttpServerUtility.ScriptTimeout%2A?displayProperty=fullName>). The timeout period is measured from the time the request comes in. If the default timeout of 110 seconds is in effect, the cancellation token will be tripped no earlier than 110 seconds after request processing begins. You can change the <xref:System.Web.HttpServerUtility.ScriptTimeout%2A?displayProperty=fullName> property value, and as long this token hasn't tripped yet, the new timeout value will be respected.       Currently the token only provides 15 second granularity, which means that if the timeout value is 110 seconds, the token will be tripped sometime between 110 and 125 seconds after request processing begins. The granularity may change in the future.       Even though this property is thread-safe, there are restrictions on its use. For more information, see <xref:System.Web.HttpResponse.ClientDisconnectedToken%2A?displayProperty=fullName>.       This property is meaningless if WebSockets request processing has started.","pos":[0,1210],"nodes":[{"content":"The timeout period can be specified in the Web.config file (see &lt;xref:System.Web.Configuration.HttpRuntimeSection.ExecutionTimeout%2A?displayProperty=fullName&gt;) or programmatically (see &lt;xref:System.Web.HttpServerUtility.ScriptTimeout%2A?displayProperty=fullName&gt;).","pos":[0,265],"source":"The timeout period can be specified in the Web.config file (see <xref:System.Web.Configuration.HttpRuntimeSection.ExecutionTimeout%2A?displayProperty=fullName>) or programmatically (see <xref:System.Web.HttpServerUtility.ScriptTimeout%2A?displayProperty=fullName>)."},{"content":"The timeout period is measured from the time the request comes in.","pos":[266,332]},{"content":"If the default timeout of 110 seconds is in effect, the cancellation token will be tripped no earlier than 110 seconds after request processing begins.","pos":[333,484]},{"content":"You can change the &lt;xref:System.Web.HttpServerUtility.ScriptTimeout%2A?displayProperty=fullName&gt; property value, and as long this token hasn't tripped yet, the new timeout value will be respected.","pos":[485,681],"source":" You can change the <xref:System.Web.HttpServerUtility.ScriptTimeout%2A?displayProperty=fullName> property value, and as long this token hasn't tripped yet, the new timeout value will be respected."},{"content":"Currently the token only provides 15 second granularity, which means that if the timeout value is 110 seconds, the token will be tripped sometime between 110 and 125 seconds after request processing begins.","pos":[688,894]},{"content":"The granularity may change in the future.","pos":[895,936]},{"content":"Even though this property is thread-safe, there are restrictions on its use.","pos":[943,1019]},{"content":"For more information, see &lt;xref:System.Web.HttpResponse.ClientDisconnectedToken%2A?displayProperty=fullName&gt;.","pos":[1020,1129],"source":" For more information, see <xref:System.Web.HttpResponse.ClientDisconnectedToken%2A?displayProperty=fullName>."},{"content":"This property is meaningless if WebSockets request processing has started.","pos":[1136,1210]}]}]},{"pos":[83616,83639],"content":"The cancellation token.","needQuote":true,"needEscape":true,"nodes":[{"content":"The cancellation token.","pos":[0,23]}]},{"pos":[84071,84231],"content":"Gets the TLS token binding information. The property enables applications to retrieve token information from incoming HTTP requests for enhanced authentication.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the TLS token binding information. The property enables applications to retrieve token information from incoming HTTP requests for enhanced authentication.","pos":[0,160],"nodes":[{"content":"Gets the TLS token binding information.","pos":[0,39]},{"content":"The property enables applications to retrieve token information from incoming HTTP requests for enhanced authentication.","pos":[40,160]}]}]},{"pos":[84243,84299],"content":"This property returns <ph id=\"ph1\">`null`</ph> on non-windows10 platforms.","needQuote":true,"needEscape":true,"extradata":"MT","source":"This property returns `null` on non-windows10 platforms."},{"pos":[84466,84511],"content":"The binding token for the current connection.","needQuote":true,"needEscape":true,"nodes":[{"content":"The binding token for the current connection.","pos":[0,45]}]},{"pos":[84904,84957],"content":"Gets the number of bytes in the current input stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the number of bytes in the current input stream.","pos":[0,53]}]},{"pos":[85468,85508],"content":"The number of bytes in the input stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes in the input stream.","pos":[0,40]}]},{"pos":[85897,85964],"content":"Gets the HTTP request values without triggering request validation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the HTTP request values without triggering request validation.","pos":[0,67]}]},{"pos":[85977,86595],"content":"Request validation checks for HTML markup and script that might indicate a potential cross-site scripting attack. By default, all values are checked using request validation and if any values contain markup or script, ASP.NET throws an <xref:System.Web.HttpRequestValidationException> exception. Use this method if you anticipate that the request will contain markup (for example, you are allowing users to post content that contains markup) and you want to get the raw value of a request.      > [!IMPORTANT] >  If you use this property, you must manually check the data for potential cross-site scripting attacks.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Request validation checks for HTML markup and script that might indicate a potential cross-site scripting attack.","pos":[0,113]},{"content":"By default, all values are checked using request validation and if any values contain markup or script, ASP.NET throws an &lt;xref:System.Web.HttpRequestValidationException&gt; exception.","pos":[114,295],"source":" By default, all values are checked using request validation and if any values contain markup or script, ASP.NET throws an <xref:System.Web.HttpRequestValidationException> exception."},{"content":"Use this method if you anticipate that the request will contain markup (for example, you are allowing users to post content that contains markup) and you want to get the raw value of a request.","pos":[296,489]},{"content":"&gt; <ph id=\"ph1\">[!IMPORTANT]</ph> &gt;  If you use this property, you must manually check the data for potential cross-site scripting attacks.","pos":[495,615],"source":"      > [!IMPORTANT] >  If you use this property, you must manually check the data for potential cross-site scripting attacks."}]},{"pos":[86763,86839],"content":"The HTTP request values that have not been checked using request validation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The HTTP request values that have not been checked using request validation.","pos":[0,76]}]},{"pos":[87189,87243],"content":"Gets information about the URL of the current request.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets information about the URL of the current request.","pos":[0,54]}]},{"pos":[87789,87861],"content":"A <xref:System.Uri> object that contains the URL of the current request.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Uri&gt; object that contains the URL of the current request.","pos":[0,72],"source":"A <xref:System.Uri> object that contains the URL of the current request."}]},{"pos":[88243,88338],"content":"Gets information about the URL of the client's previous request that linked to the current URL.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets information about the URL of the client's previous request that linked to the current URL.","pos":[0,95]}]},{"pos":[88846,88873],"content":"A <xref:System.Uri> object.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Uri&gt; object.","pos":[0,27],"source":"A <xref:System.Uri> object."}]},{"pos":[89032,89190],"content":"The HTTP <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_Referer\" name=\"Referer\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> request header is malformed and cannot be converted to a &lt;xref:System.Uri&gt; object.","needQuote":true,"needEscape":true,"source":"The HTTP <xref uid=\"langword_csharp_Referer\" name=\"Referer\" href=\"\"></xref> request header is malformed and cannot be converted to a <xref:System.Uri> object."},{"pos":[89505,89558],"content":"Gets the raw user agent string of the client browser.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the raw user agent string of the client browser.","pos":[0,53]}]},{"pos":[90047,90095],"content":"The raw user agent string of the client browser.","needQuote":true,"needEscape":true,"nodes":[{"content":"The raw user agent string of the client browser.","pos":[0,48]}]},{"pos":[90503,90549],"content":"Gets the IP host address of the remote client.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the IP host address of the remote client.","pos":[0,46]}]},{"pos":[91265,91301],"content":"The IP address of the remote client.","needQuote":true,"needEscape":true,"nodes":[{"content":"The IP address of the remote client.","pos":[0,36]}]},{"pos":[91700,91739],"content":"Gets the DNS name of the remote client.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the DNS name of the remote client.","pos":[0,39]}]},{"pos":[92451,92485],"content":"The DNS name of the remote client.","needQuote":true,"needEscape":true,"nodes":[{"content":"The DNS name of the remote client.","pos":[0,34]}]},{"pos":[92886,92944],"content":"Gets a sorted string array of client language preferences.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a sorted string array of client language preferences.","pos":[0,58]}]},{"pos":[93823,93950],"content":"A sorted string array of client language preferences, or <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if empty.","needQuote":true,"needEscape":true,"source":"A sorted string array of client language preferences, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if empty."},{"pos":[94356,94559],"content":"Causes validation to occur for the collections accessed through the &lt;xref:System.Web.HttpRequest.Cookies<bpt id=\"p1\">*</bpt>&gt;, &lt;xref:System.Web.HttpRequest.Form<ept id=\"p1\">*</ept>&gt;, and &lt;xref:System.Web.HttpRequest.QueryString*&gt; properties.","needQuote":true,"needEscape":true,"source":"Causes validation to occur for the collections accessed through the <xref:System.Web.HttpRequest.Cookies*>, <xref:System.Web.HttpRequest.Form*>, and <xref:System.Web.HttpRequest.QueryString*> properties."},{"pos":[94572,95482],"content":"The <xref:System.Web.HttpRequest> class uses input validation flags to track whether to perform validation on the request collections accessed through the <xref:System.Web.HttpRequest.Cookies%2A>, <xref:System.Web.HttpRequest.Form%2A>, and <xref:System.Web.HttpRequest.QueryString%2A> properties. The ValidateInput method sets these flags so that when the get accessors for the <xref:System.Web.HttpRequest.Cookies%2A>, <xref:System.Web.HttpRequest.Form%2A>, or <xref:System.Web.HttpRequest.QueryString%2A> property are invoked, input validation is performed. Validation works by checking all input data against a hard-coded list of potentially dangerous data.       If the validation feature is enabled by page directive or configuration, this method is called during the page's `ProcessRequest` processing phase. The ValidateInput method can be called by your code if the validation feature is not enabled.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.Web.HttpRequest&gt; class uses input validation flags to track whether to perform validation on the request collections accessed through the &lt;xref:System.Web.HttpRequest.Cookies%2A&gt;, &lt;xref:System.Web.HttpRequest.Form%2A&gt;, and &lt;xref:System.Web.HttpRequest.QueryString%2A&gt; properties.","pos":[0,296],"source":"The <xref:System.Web.HttpRequest> class uses input validation flags to track whether to perform validation on the request collections accessed through the <xref:System.Web.HttpRequest.Cookies%2A>, <xref:System.Web.HttpRequest.Form%2A>, and <xref:System.Web.HttpRequest.QueryString%2A> properties."},{"content":"The ValidateInput method sets these flags so that when the get accessors for the &lt;xref:System.Web.HttpRequest.Cookies%2A&gt;, &lt;xref:System.Web.HttpRequest.Form%2A&gt;, or &lt;xref:System.Web.HttpRequest.QueryString%2A&gt; property are invoked, input validation is performed.","pos":[297,559],"source":" The ValidateInput method sets these flags so that when the get accessors for the <xref:System.Web.HttpRequest.Cookies%2A>, <xref:System.Web.HttpRequest.Form%2A>, or <xref:System.Web.HttpRequest.QueryString%2A> property are invoked, input validation is performed."},{"content":"Validation works by checking all input data against a hard-coded list of potentially dangerous data.","pos":[560,660]},{"content":"If the validation feature is enabled by page directive or configuration, this method is called during the page's <ph id=\"ph1\">`ProcessRequest`</ph> processing phase.","pos":[667,814],"source":"       If the validation feature is enabled by page directive or configuration, this method is called during the page's `ProcessRequest` processing phase."},{"content":"The ValidateInput method can be called by your code if the validation feature is not enabled.","pos":[815,908]}]},{"pos":[95748,95804],"content":"Potentially dangerous data was received from the client.","needQuote":true,"needEscape":true,"nodes":[{"content":"Potentially dangerous data was received from the client.","pos":[0,56]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.HttpRequest\n  id: HttpRequest\n  children:\n  - System.Web.HttpRequest.#ctor(System.String,System.String,System.String)\n  - System.Web.HttpRequest.Abort\n  - System.Web.HttpRequest.AcceptTypes\n  - System.Web.HttpRequest.AnonymousID\n  - System.Web.HttpRequest.ApplicationPath\n  - System.Web.HttpRequest.AppRelativeCurrentExecutionFilePath\n  - System.Web.HttpRequest.BinaryRead(System.Int32)\n  - System.Web.HttpRequest.Browser\n  - System.Web.HttpRequest.ClientCertificate\n  - System.Web.HttpRequest.ContentEncoding\n  - System.Web.HttpRequest.ContentLength\n  - System.Web.HttpRequest.ContentType\n  - System.Web.HttpRequest.Cookies\n  - System.Web.HttpRequest.CurrentExecutionFilePath\n  - System.Web.HttpRequest.CurrentExecutionFilePathExtension\n  - System.Web.HttpRequest.FilePath\n  - System.Web.HttpRequest.Files\n  - System.Web.HttpRequest.Filter\n  - System.Web.HttpRequest.Form\n  - System.Web.HttpRequest.GetBufferedInputStream\n  - System.Web.HttpRequest.GetBufferlessInputStream\n  - System.Web.HttpRequest.GetBufferlessInputStream(System.Boolean)\n  - System.Web.HttpRequest.Headers\n  - System.Web.HttpRequest.HttpChannelBinding\n  - System.Web.HttpRequest.HttpMethod\n  - System.Web.HttpRequest.InputStream\n  - System.Web.HttpRequest.InsertEntityBody\n  - System.Web.HttpRequest.InsertEntityBody(System.Byte[],System.Int32,System.Int32)\n  - System.Web.HttpRequest.IsAuthenticated\n  - System.Web.HttpRequest.IsLocal\n  - System.Web.HttpRequest.IsSecureConnection\n  - System.Web.HttpRequest.Item(System.String)\n  - System.Web.HttpRequest.LogonUserIdentity\n  - System.Web.HttpRequest.MapImageCoordinates(System.String)\n  - System.Web.HttpRequest.MapPath(System.String)\n  - System.Web.HttpRequest.MapPath(System.String,System.String,System.Boolean)\n  - System.Web.HttpRequest.MapRawImageCoordinates(System.String)\n  - System.Web.HttpRequest.Params\n  - System.Web.HttpRequest.Path\n  - System.Web.HttpRequest.PathInfo\n  - System.Web.HttpRequest.PhysicalApplicationPath\n  - System.Web.HttpRequest.PhysicalPath\n  - System.Web.HttpRequest.QueryString\n  - System.Web.HttpRequest.RawUrl\n  - System.Web.HttpRequest.ReadEntityBodyMode\n  - System.Web.HttpRequest.RequestContext\n  - System.Web.HttpRequest.RequestType\n  - System.Web.HttpRequest.SaveAs(System.String,System.Boolean)\n  - System.Web.HttpRequest.ServerVariables\n  - System.Web.HttpRequest.TimedOutToken\n  - System.Web.HttpRequest.TlsTokenBindingInfo\n  - System.Web.HttpRequest.TotalBytes\n  - System.Web.HttpRequest.Unvalidated\n  - System.Web.HttpRequest.Url\n  - System.Web.HttpRequest.UrlReferrer\n  - System.Web.HttpRequest.UserAgent\n  - System.Web.HttpRequest.UserHostAddress\n  - System.Web.HttpRequest.UserHostName\n  - System.Web.HttpRequest.UserLanguages\n  - System.Web.HttpRequest.ValidateInput\n  langs:\n  - csharp\n  name: HttpRequest\n  nameWithType: HttpRequest\n  fullName: System.Web.HttpRequest\n  type: Class\n  summary: Enables ASP.NET to read the HTTP values sent by a client during a Web request.\n  remarks: \"The methods and properties of the HttpRequest class are exposed through the `Request` properties of the <xref:System.Web.HttpApplication>, <xref:System.Web.HttpContext>, <xref:System.Web.UI.Page>, and <xref:System.Web.UI.UserControl> classes.  \\n  \\n To access data from the <xref:System.Web.HttpRequest.QueryString%2A>, <xref:System.Web.HttpRequest.Form%2A>, <xref:System.Web.HttpRequest.Cookies%2A>, or <xref:System.Web.HttpRequest.ServerVariables%2A> collections, you can write `Request[\\\"key\\\"]`, as shown in the example for the <xref:System.Web.HttpRequest.QueryString%2A> property.  \\n  \\n> [!NOTE]\\n>  Unicode support for HttpRequest class members requires IIS version 6.0 or later.\"\n  example:\n  - \"The following examples access the HttpRequest instance for the current request by using the <xref:System.Web.UI.Page.Request%2A> property of the <xref:System.Web.UI.Page> class.  \\n  \\n You can use simplified syntax for accessing data from the <xref:System.Web.HttpRequest.QueryString%2A>, <xref:System.Web.HttpRequest.Form%2A>, <xref:System.Web.HttpRequest.Cookies%2A>, or <xref:System.Web.HttpRequest.ServerVariables%2A> collections. You can write `Request[\\\"key\\\"]`.  \\n  \\n The first example shows how to retrieve a query string value when loading a page.  \\n  \\n```c#  \\npublic partial class AddToCart : Page  \\n{  \\n    protected void Page_Load(object sender, EventArgs e)  \\n    {  \\n        string rawId = Request[\\\"ProductID\\\"];  \\n        int productId;  \\n        if (!String.IsNullOrEmpty(rawId) && int.TryParse(rawId, out productId))  \\n        {  \\n            using (ShoppingCartActions usersShoppingCart = new ShoppingCartActions())  \\n            {  \\n                usersShoppingCart.AddToCart(productId);  \\n            }  \\n        }  \\n        else  \\n        {  \\n            throw new Exception(\\\"Tried to call AddToCart.aspx without setting a ProductId.\\\");  \\n        }  \\n        Response.Redirect(\\\"ShoppingCart.aspx\\\");  \\n    }  \\n}  \\n```  \\n  \\n```vb  \\nPublic Class AddToCart  \\n    Inherits Page  \\n  \\n    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs) Handles Me.Load  \\n        Dim rawId = Request(\\\"ProductID\\\")  \\n        Dim productId As Integer  \\n        If Not String.IsNullOrEmpty(rawId) And Integer.TryParse(rawId, productId) Then  \\n            Using usersShoppingCart As New ShoppingCartActions()  \\n                usersShoppingCart.AddToCart(productId)  \\n            End Using  \\n  \\n        Else  \\n            Throw New Exception(\\\"Tried to call AddToCart.aspx without setting a ProductId.\\\")  \\n        End If  \\n        Response.Redirect(\\\"ShoppingCart.aspx\\\")  \\n    End Sub  \\nEnd Class  \\n```  \\n  \\n The next example shows how to check if the request is authenticated and retrieve the raw URL.  \\n  \\n```c#  \\npublic partial class RestrictedPage : Page  \\n{  \\n    protected void Page_Load(object sender, EventArgs e)  \\n    {  \\n        if (!Request.IsAuthenticated)  \\n        {  \\n            var rawUrl = Request.RawUrl;  \\n            Response.Redirect(\\\"/Account/Login?ru=\\\" + Server.HtmlEncode(rawUrl));  \\n        }  \\n    }  \\n}  \\n```  \\n  \\n```vb  \\nPublic Class RestrictedPage  \\n    Inherits Page  \\n  \\n    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs) Handles Me.Load  \\n        If Not Request.IsAuthenticated Then  \\n            Dim rawUrl = Request.RawUrl  \\n            Response.Redirect(\\\"/Account/Login?ru=\\\" + Server.HtmlEncode(rawUrl))  \\n        End If  \\n    End Sub  \\nEnd Class  \\n```  \\n  \\n A Visual Studio Web site project with source code is available to accompany this topic: [Download](http://go.microsoft.com/fwlink/?LinkID=191455).  \\n  \\n This example uses the <xref:System.IO.StreamWriter> class to write the values of several HttpRequest class properties to a file. For properties that are of type string, the values are HTML encoded as they are written to the file. Properties that represent a collection are looped through, and each key/value pair that they contain is written to the file.  \\n  \\n> [!IMPORTANT]\\n>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \\n  \\n [!code-vb[System.Web.HttpRequest_Sample1#1](~/add/codesnippet/visualbasic/t-system.web.httprequest_1.aspx)]\\n [!code-cs[System.Web.HttpRequest_Sample1#1](~/add/codesnippet/csharp/t-system.web.httprequest_1.aspx)]\"\n  syntax:\n    content: public sealed class HttpRequest\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Web.HttpRequest.#ctor(System.String,System.String,System.String)\n  id: '#ctor(System.String,System.String,System.String)'\n  parent: System.Web.HttpRequest\n  langs:\n  - csharp\n  name: HttpRequest(String,String,String)\n  nameWithType: HttpRequest.HttpRequest(String,String,String)\n  fullName: System.Web.HttpRequest.HttpRequest(String,String,String)\n  type: Constructor\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Initializes an <xref href=\"System.Web.HttpRequest\"></xref> object.\n  remarks: You do not need to create your own instance of the <xref:System.Web.HttpRequest> class. The methods and properties of the <xref:System.Web.HttpRequest> class are exposed through the `Request` property of the <xref:System.Web.HttpApplication>, <xref:System.Web.HttpContext>, <xref:System.Web.UI.Page>, and <xref:System.Web.UI.UserControl> classes.\n  syntax:\n    content: public HttpRequest (string filename, string url, string queryString);\n    parameters:\n    - id: filename\n      type: System.String\n      description: The name of the file associated with the request.\n    - id: url\n      type: System.String\n      description: The information regarding the URL of the current request.\n    - id: queryString\n      type: System.String\n      description: The entire query string sent with the request (everything after the`'?'`).\n  overload: System.Web.HttpRequest.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.HttpRequest.Abort\n  id: Abort\n  parent: System.Web.HttpRequest\n  langs:\n  - csharp\n  name: Abort()\n  nameWithType: HttpRequest.Abort()\n  fullName: System.Web.HttpRequest.Abort()\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Forcibly terminates the underlying TCP connection, causing any outstanding I/O to fail. You might use this method in response to an attack by a malicious HTTP client.\n  remarks: \"This method is thread-safe. Any thread may call it at any time.  \\n  \\n This method can only be used in integrated mode. If you invoke it in classic mode, an exception is thrown. To determine the pipeline mode, use <xref:System.Web.HttpRuntime.UsingIntegratedPipeline%2A>.\"\n  syntax:\n    content: public void Abort ();\n    parameters: []\n  overload: System.Web.HttpRequest.Abort*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.HttpRequest.AcceptTypes\n  id: AcceptTypes\n  parent: System.Web.HttpRequest\n  langs:\n  - csharp\n  name: AcceptTypes\n  nameWithType: HttpRequest.AcceptTypes\n  fullName: System.Web.HttpRequest.AcceptTypes\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Gets a string array of client-supported MIME accept types.\n  remarks: ''\n  example:\n  - \"The following code example captures the multiple values returned by the AcceptTypes property into an object variable and writes the number and name of each valueto a separate line of HTTP output.  \\n  \\n [!code-vb[Classic HttpRequest.AcceptTypes Example#1](~/add/codesnippet/visualbasic/p-system.web.httprequest_0_1.vb)]\\n [!code-cs[Classic HttpRequest.AcceptTypes Example#1](~/add/codesnippet/csharp/p-system.web.httprequest_0_1.cs)]\"\n  syntax:\n    content: public string[] AcceptTypes { get; }\n    return:\n      type: System.String[]\n      description: A string array of client-supported MIME accept types.\n  overload: System.Web.HttpRequest.AcceptTypes*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.HttpRequest.AnonymousID\n  id: AnonymousID\n  parent: System.Web.HttpRequest\n  langs:\n  - csharp\n  name: AnonymousID\n  nameWithType: HttpRequest.AnonymousID\n  fullName: System.Web.HttpRequest.AnonymousID\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Gets the anonymous identifier for the user, if present.\n  remarks: \"The AnonymousID property assigns a long-lived unique identifier to a non-authenticated user, which can be used to track the user or assign profile properties to that user without storing data in a `Session` object. By default, the AnonymousID property is tracked using a cookie, but it can be set to use the URI when the <xref:System.Web.Configuration.SessionStateSection.Cookieless%2A> attribute in the anonymous identification configuration section is set to either the <xref:System.Web.HttpCookieMode>, <xref:System.Web.HttpCookieMode>, or <xref:System.Web.HttpCookieMode> value. You must explicitly clear the cookie if you no longer want it available, for example when an anonymous user is authenticated.  \\n  \\n Anonymous identification is used when there is a need to identify entities that are not authenticated and when authorization is required. For more information, see [anonymousIdentification Element (ASP.NET Settings Schema)](http://msdn.microsoft.com/en-us/2bd927ef-9057-4703-9c55-4cfb6d7d0929)\"\n  example:\n  - \"The following example shows how to use the AnonymousID property by handling the <xref:System.Web.Security.AnonymousIdentificationModule.Creating> event in the Global.asax file. This example has two parts:  \\n  \\n-   A method in the Global.asax file that handles the <xref:System.Web.Security.AnonymousIdentificationModule.Creating> event.  \\n  \\n-   A Web Forms page.  \\n  \\n The first part of the code example shows how to set the AnonymousID property by handling the <xref:System.Web.Security.AnonymousIdentificationModule.Creating> event in the Global.asax file. The method that is named `AnonymousIdentification_Creating` sets the AnonymousID property when an anonymous ID is created.  \\n  \\n [!code-cs[System.Web.HttpRequest_AnonymousID#2](~/add/codesnippet/csharp/p-system.web.httprequest_5_1.cs)]\\n [!code-vb[System.Web.HttpRequest_AnonymousID#2](~/add/codesnippet/visualbasic/p-system.web.httprequest_5_1.vb)]  \\n  \\n The second part of the code example shows how to display the new AnonymousID that is created by the `AnonymousIdentification_Creating` event handler in the preceding example.  \\n  \\n [!code-cs[System.Web.HttpRequest_AnonymousID#1](~/add/codesnippet/csharp/p-system.web.httprequest_5_2.aspx)]\\n [!code-vb[System.Web.HttpRequest_AnonymousID#1](~/add/codesnippet/visualbasic/p-system.web.httprequest_5_2.aspx)]\"\n  syntax:\n    content: public string AnonymousID { get; }\n    return:\n      type: System.String\n      description: A string representing the current anonymous user identifier.\n  overload: System.Web.HttpRequest.AnonymousID*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.HttpRequest.ApplicationPath\n  id: ApplicationPath\n  parent: System.Web.HttpRequest\n  langs:\n  - csharp\n  name: ApplicationPath\n  nameWithType: HttpRequest.ApplicationPath\n  fullName: System.Web.HttpRequest.ApplicationPath\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Gets the ASP.NET application's virtual application root path on the server.\n  remarks: Use this property to construct a URL relative to the application root from a page or Web user control that is not in the root directory. This allows pages and shared controls that exist at different levels of a directory structure to use the same code to link to resources at fixed locations in the application.\n  example:\n  - \"The following example uses the <xref:System.IO.StreamWriter.Write%2A> method to HTML-encode and then write the value of the ApplicationPath property to a text file. This code example is part of a larger example provided for the <xref:System.Web.HttpRequest> class. It assumes the existence of a <xref:System.IO.StreamWriter> object named `sw`.  \\n  \\n [!code-vb[System.Web.HttpRequest_Sample1#2](~/add/codesnippet/visualbasic/p-system.web.httprequest_6_1.aspx)]\\n [!code-cs[System.Web.HttpRequest_Sample1#2](~/add/codesnippet/csharp/p-system.web.httprequest_6_1.aspx)]  \\n  \\n The following example uses the ApplicationPath property to programmatically construct a path to a resource that is in a fixed location in the application. The page that references the resource does not have to be located in the same directory as the resource.  \\n  \\n [!code-cs[System.Web.HttpRequest.ApplicationPath#2](~/add/codesnippet/csharp/p-system.web.httprequest_6_2.aspx)]\\n [!code-vb[System.Web.HttpRequest.ApplicationPath#2](~/add/codesnippet/visualbasic/p-system.web.httprequest_6_2.aspx)]  \\n  \\n If you run this example in a Web application that is named WebSite1,  `/WebSite1` will be displayed as the value of the ApplicationPath property and `/WebSite1/images/Image1.gif` will be displayed as the complete path of the image.\"\n  syntax:\n    content: public string ApplicationPath { get; }\n    return:\n      type: System.String\n      description: The virtual path of the current application.\n  overload: System.Web.HttpRequest.ApplicationPath*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.HttpRequest.AppRelativeCurrentExecutionFilePath\n  id: AppRelativeCurrentExecutionFilePath\n  parent: System.Web.HttpRequest\n  langs:\n  - csharp\n  name: AppRelativeCurrentExecutionFilePath\n  nameWithType: HttpRequest.AppRelativeCurrentExecutionFilePath\n  fullName: System.Web.HttpRequest.AppRelativeCurrentExecutionFilePath\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Gets the virtual path of the application root and makes it relative by using the tilde (~) notation for the application root (as in \"~/page.aspx\").\n  remarks: Use this property to provide URL information that will stay the same even if the application changes location. This allows the same URL-mapping code to be used in a test environment and in the final deployment environment, or to be used by copies of Web applications in different domains.\n  example:\n  - \"The following example uses the AppRelativeCurrentExecutionFilePath property to set the URL of an <xref:System.Web.UI.WebControls.Image> control to an image in the same directory as the page. Run this page at different levels of a directory structure to see the resulting AppRelativeCurrentExecutionFilePath property values.  \\n  \\n [!code-vb[System.Web.HttpRequest.AppRelativeCurrentExecutionPath#1](~/add/codesnippet/visualbasic/p-system.web.httprequest_31_1.aspx)]\\n [!code-cs[System.Web.HttpRequest.AppRelativeCurrentExecutionPath#1](~/add/codesnippet/csharp/p-system.web.httprequest_31_1.aspx)]  \\n  \\n The following example uses the AppRelativeCurrentExecutionFilePath property to programmatically set the path to a resource, based on the current path of the page.  \\n  \\n [!code-cs[System.Web.HttpRequest.ApplicationPath#1](~/add/codesnippet/csharp/p-system.web.httprequest_31_2.aspx)]\\n [!code-vb[System.Web.HttpRequest.ApplicationPath#1](~/add/codesnippet/visualbasic/p-system.web.httprequest_31_2.aspx)]\"\n  syntax:\n    content: public string AppRelativeCurrentExecutionFilePath { get; }\n    return:\n      type: System.String\n      description: The virtual path of the application root for the current request.\n  overload: System.Web.HttpRequest.AppRelativeCurrentExecutionFilePath*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.HttpRequest.BinaryRead(System.Int32)\n  id: BinaryRead(System.Int32)\n  parent: System.Web.HttpRequest\n  langs:\n  - csharp\n  name: BinaryRead(Int32)\n  nameWithType: HttpRequest.BinaryRead(Int32)\n  fullName: System.Web.HttpRequest.BinaryRead(Int32)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Performs a binary read of a specified number of bytes from the current input stream.\n  remarks: The BinaryRead method is provided for compatibility with ASP.\n  syntax:\n    content: public byte[] BinaryRead (int count);\n    parameters:\n    - id: count\n      type: System.Int32\n      description: The number of bytes to read.\n    return:\n      type: System.Byte[]\n      description: A byte array.\n  overload: System.Web.HttpRequest.BinaryRead*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>count</code> is 0.  \\n  \\n \\\\- or -  \\n  \\n <code>count</code> is greater than the number of bytes available.\"\n  platform:\n  - net462\n- uid: System.Web.HttpRequest.Browser\n  id: Browser\n  parent: System.Web.HttpRequest\n  langs:\n  - csharp\n  name: Browser\n  nameWithType: HttpRequest.Browser\n  fullName: System.Web.HttpRequest.Browser\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Gets or sets information about the requesting client's browser capabilities.\n  remarks: ''\n  example:\n  - \"The following code example sends a list of the browser's capabilities back to the client in an HTML page.  \\n  \\n [!code-vb[Classic HttpRequest.Browser Example#1](~/add/codesnippet/visualbasic/p-system.web.httprequest_14_1.vb)]\\n [!code-cs[Classic HttpRequest.Browser Example#1](~/add/codesnippet/csharp/p-system.web.httprequest_14_1.cs)]\"\n  syntax:\n    content: public System.Web.HttpBrowserCapabilities Browser { get; set; }\n    return:\n      type: System.Web.HttpBrowserCapabilities\n      description: An <xref href=\"System.Web.HttpBrowserCapabilities\"></xref> object listing the capabilities of the client's browser.\n  overload: System.Web.HttpRequest.Browser*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.HttpRequest.ClientCertificate\n  id: ClientCertificate\n  parent: System.Web.HttpRequest\n  langs:\n  - csharp\n  name: ClientCertificate\n  nameWithType: HttpRequest.ClientCertificate\n  fullName: System.Web.HttpRequest.ClientCertificate\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Gets the current request's client security certificate.\n  remarks: ''\n  example:\n  - \"The following code example sends the client's certificate settings back to the client in an HTML page.  \\n  \\n [!code-vb[Classic HttpRequest.ClientCertificate Example#1](~/add/codesnippet/visualbasic/p-system.web.httprequest_12_1.vb)]\\n [!code-cs[Classic HttpRequest.ClientCertificate Example#1](~/add/codesnippet/csharp/p-system.web.httprequest_12_1.cs)]\"\n  syntax:\n    content: public System.Web.HttpClientCertificate ClientCertificate { get; }\n    return:\n      type: System.Web.HttpClientCertificate\n      description: An <xref href=\"System.Web.HttpClientCertificate\"></xref> object containing information about the client's security certificate settings.\n  overload: System.Web.HttpRequest.ClientCertificate*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.HttpRequest.ContentEncoding\n  id: ContentEncoding\n  parent: System.Web.HttpRequest\n  langs:\n  - csharp\n  name: ContentEncoding\n  nameWithType: HttpRequest.ContentEncoding\n  fullName: System.Web.HttpRequest.ContentEncoding\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Gets or sets the character set of the entity-body.\n  remarks: Default content encoding can be specified in the [globalization Element (ASP.NET Settings Schema)](http://msdn.microsoft.com/en-us/e2dffc8e-ebd2-439b-a2fd-e3ac5e620da7) of a configuration file. If content encoding is also specified by the client, the default configuration settings are overridden.\n  example:\n  - \"The following code example assigns a value representing the description of the current HTTP encoding to a string variable.  \\n  \\n [!code-cs[Classic HttpRequest.ContentEncoding Example#1](~/add/codesnippet/csharp/p-system.web.httprequest_18_1.cs)]\\n [!code-vb[Classic HttpRequest.ContentEncoding Example#1](~/add/codesnippet/visualbasic/p-system.web.httprequest_18_1.vb)]\"\n  syntax:\n    content: public System.Text.Encoding ContentEncoding { get; set; }\n    return:\n      type: System.Text.Encoding\n      description: An <xref:System.Text.Encoding> object representing the client's character set.\n  overload: System.Web.HttpRequest.ContentEncoding*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.HttpRequest.ContentLength\n  id: ContentLength\n  parent: System.Web.HttpRequest\n  langs:\n  - csharp\n  name: ContentLength\n  nameWithType: HttpRequest.ContentLength\n  fullName: System.Web.HttpRequest.ContentLength\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Specifies the length, in bytes, of content sent by the client.\n  remarks: ''\n  example:\n  - \"The following code example assigns the value representing the content length of the incoming request to an integer variable.  \\n  \\n [!code-vb[Classic HttpRequest.ContentLength Example#1](~/add/codesnippet/visualbasic/p-system.web.httprequest_17_1.vb)]\\n [!code-cs[Classic HttpRequest.ContentLength Example#1](~/add/codesnippet/csharp/p-system.web.httprequest_17_1.cs)]\"\n  syntax:\n    content: public int ContentLength { get; }\n    return:\n      type: System.Int32\n      description: The length, in bytes, of content sent by the client.\n  overload: System.Web.HttpRequest.ContentLength*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.HttpRequest.ContentType\n  id: ContentType\n  parent: System.Web.HttpRequest\n  langs:\n  - csharp\n  name: ContentType\n  nameWithType: HttpRequest.ContentType\n  fullName: System.Web.HttpRequest.ContentType\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Gets or sets the MIME content type of the incoming request.\n  remarks: ''\n  example:\n  - \"The following code example assigns the value representing the content type of the incoming request to a string variable.  \\n  \\n [!code-vb[Classic HttpRequest.ContentType Example#1](~/add/codesnippet/visualbasic/p-system.web.httprequest_33_1.vb)]\\n [!code-cs[Classic HttpRequest.ContentType Example#1](~/add/codesnippet/csharp/p-system.web.httprequest_33_1.cs)]  \\n  \\n The following example shows output that might be produced by this code.  \\n  \\n `GET`  \\n  \\n `127.0.0.1`  \\n  \\n `127.0.0.1`  \\n  \\n `GET`\"\n  syntax:\n    content: public string ContentType { get; set; }\n    return:\n      type: System.String\n      description: A string representing the MIME content type of the incoming request, for example, \"text/html\". Additional common MIME types include \"audio.wav\", \"image/gif\", and \"application/pdf\".\n  overload: System.Web.HttpRequest.ContentType*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.HttpRequest.Cookies\n  id: Cookies\n  parent: System.Web.HttpRequest\n  langs:\n  - csharp\n  name: Cookies\n  nameWithType: HttpRequest.Cookies\n  fullName: System.Web.HttpRequest.Cookies\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Gets a collection of cookies sent by the client.\n  remarks: \"ASP.NET includes two intrinsic cookie collections. The collection accessed through the Cookies collection of <xref:System.Web.HttpRequest> contains cookies transmitted by the client to the server in the `Cookie` header. The collection accessed through the <xref:System.Web.HttpResponse.Cookies%2A> collection of <xref:System.Web.HttpResponse> contains new cookies created on the server and transmitted to the client in the `Set-Cookie` header.  \\n  \\n> [!NOTE]\\n>  After you add a cookie by using the <xref:System.Web.HttpResponse.Cookies%2A?displayProperty=fullName> collection, the cookie is immediately available in the Cookies collection, even if the response has not been sent to the client.\"\n  example:\n  - \"The following code example loops through all cookies sent by the client and sends the name, expiration date, security parameter, and values of each cookie to the HTTP output.  \\n  \\n [!code-cs[Classic HttpRequest.Cookies Example#1](~/add/codesnippet/csharp/p-system.web.httprequest_21_1.cs)]\\n [!code-vb[Classic HttpRequest.Cookies Example#1](~/add/codesnippet/visualbasic/p-system.web.httprequest_21_1.vb)]\"\n  syntax:\n    content: public System.Web.HttpCookieCollection Cookies { get; }\n    return:\n      type: System.Web.HttpCookieCollection\n      description: An <xref href=\"System.Web.HttpCookieCollection\"></xref> object representing the client's cookie variables.\n  overload: System.Web.HttpRequest.Cookies*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.HttpRequest.CurrentExecutionFilePath\n  id: CurrentExecutionFilePath\n  parent: System.Web.HttpRequest\n  langs:\n  - csharp\n  name: CurrentExecutionFilePath\n  nameWithType: HttpRequest.CurrentExecutionFilePath\n  fullName: System.Web.HttpRequest.CurrentExecutionFilePath\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Gets the virtual path of the current request.\n  remarks: CurrentExecutionFilePath returns the file path to the currently executing page handler. For redirect scenarios using <xref:System.Web.HttpServerUtility.Execute%2A> and <xref:System.Web.HttpServerUtility.Transfer%2A> methods this means that the CurrentExecutionFilePath property returns the path to the page redirected to (child page). However, when the client is redirected to another page, the <xref:System.Web.HttpRequest.FilePath%2A> property returns the path to the original page.\n  example:\n  - \"The following code example uses the <xref:System.Web.HttpUtility.HtmlEncode%2A> method to HTML-encode the value of the CurrentExecutionFilePath property and the <xref:System.IO.TextWriter.WriteLine%2A> method to write the encoded value to the file. This code example is part of a larger example provided for the <xref:System.Web.HttpRequest> class.  \\n  \\n [!code-vb[System.Web.HttpRequest_Sample1#2](~/add/codesnippet/visualbasic/p-system.web.httprequest_3_1.aspx)]\\n [!code-cs[System.Web.HttpRequest_Sample1#2](~/add/codesnippet/csharp/p-system.web.httprequest_3_1.aspx)]\"\n  syntax:\n    content: public string CurrentExecutionFilePath { get; }\n    return:\n      type: System.String\n      description: The virtual path of the current request.\n  overload: System.Web.HttpRequest.CurrentExecutionFilePath*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.HttpRequest.CurrentExecutionFilePathExtension\n  id: CurrentExecutionFilePathExtension\n  parent: System.Web.HttpRequest\n  langs:\n  - csharp\n  name: CurrentExecutionFilePathExtension\n  nameWithType: HttpRequest.CurrentExecutionFilePathExtension\n  fullName: System.Web.HttpRequest.CurrentExecutionFilePathExtension\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Gets the extension of the file name that is specified in the <xref:System.Web.HttpRequest.CurrentExecutionFilePath*> property.\n  syntax:\n    content: public string CurrentExecutionFilePathExtension { get; }\n    return:\n      type: System.String\n      description: The extension of the file name that is specified in the <xref:System.Web.HttpRequest.CurrentExecutionFilePath*> property.\n  overload: System.Web.HttpRequest.CurrentExecutionFilePathExtension*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.HttpRequest.FilePath\n  id: FilePath\n  parent: System.Web.HttpRequest\n  langs:\n  - csharp\n  name: FilePath\n  nameWithType: HttpRequest.FilePath\n  fullName: System.Web.HttpRequest.FilePath\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Gets the virtual path of the current request.\n  remarks: The FilePath property does not include the <xref:System.Web.HttpRequest.PathInfo%2A> trailer. For example, for the URL http://www.contoso.com/virdir/page.html/tail, the FilePath value is /virdir/page.html.\n  example:\n  - \"The following code example uses the <xref:System.Web.HttpUtility.HtmlEncode%2A> method to HTML-encode the value of the FilePath property and the <xref:System.IO.TextWriter.WriteLine%2A> method to write the encoded value to the file. This code example is part of a larger example provided for the <xref:System.Web.HttpRequest> class.  \\n  \\n [!code-vb[System.Web.HttpRequest_Sample1#2](~/add/codesnippet/visualbasic/p-system.web.httprequest_27_1.aspx)]\\n [!code-cs[System.Web.HttpRequest_Sample1#2](~/add/codesnippet/csharp/p-system.web.httprequest_27_1.aspx)]\"\n  syntax:\n    content: public string FilePath { get; }\n    return:\n      type: System.String\n      description: The virtual path of the current request.\n  overload: System.Web.HttpRequest.FilePath*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.HttpRequest.Files\n  id: Files\n  parent: System.Web.HttpRequest\n  langs:\n  - csharp\n  name: Files\n  nameWithType: HttpRequest.Files\n  fullName: System.Web.HttpRequest.Files\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Gets the collection of files uploaded by the client, in multipart MIME format.\n  remarks: The file collection is populated only when the HTTP request `Content-Type` value is \"multipart/form-data\".\n  example:\n  - \"The following code example displays the names of all files in the Files collection.  \\n  \\n [!code-cs[Classic HttpRequest.Files Example#1](~/add/codesnippet/csharp/p-system.web.httprequest_28_1.cs)]\\n [!code-vb[Classic HttpRequest.Files Example#1](~/add/codesnippet/visualbasic/p-system.web.httprequest_28_1.vb)]\"\n  syntax:\n    content: public System.Web.HttpFileCollection Files { get; }\n    return:\n      type: System.Web.HttpFileCollection\n      description: An <xref href=\"System.Web.HttpFileCollection\"></xref> object representing a collection of files uploaded by the client. The items of the <xref href=\"System.Web.HttpFileCollection\"></xref> object are of type <xref href=\"System.Web.HttpPostedFile\"></xref>.\n  overload: System.Web.HttpRequest.Files*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.HttpRequest.Filter\n  id: Filter\n  parent: System.Web.HttpRequest\n  langs:\n  - csharp\n  name: Filter\n  nameWithType: HttpRequest.Filter\n  fullName: System.Web.HttpRequest.Filter\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Gets or sets the filter to use when reading the current input stream.\n  remarks: ''\n  example:\n  - \"The following code example creates two new classes, `QQQ1` and `QQQ2` that filter the <xref:System.Web.HttpRequest.InputStream%2A>. Put the classes into the Global.asax file in an ASP.NET application's directory so that all input for all ASP.NET Web pages in the application will be filtered.  \\n  \\n [!code-vb[System.Web.HttpRequest.Filter#1](~/add/codesnippet/visualbasic/p-system.web.httprequest_4_1.aspx)]\\n [!code-cs[System.Web.HttpRequest.Filter#1](~/add/codesnippet/csharp/p-system.web.httprequest_4_1.aspx)]\"\n  syntax:\n    content: public System.IO.Stream Filter { get; set; }\n    return:\n      type: System.IO.Stream\n      description: A <xref:System.IO.Stream> object to be used as the filter.\n  overload: System.Web.HttpRequest.Filter*\n  exceptions:\n  - type: System.Web.HttpException\n    commentId: T:System.Web.HttpException\n    description: The specified <xref:System.IO.Stream> is invalid.\n  platform:\n  - net462\n- uid: System.Web.HttpRequest.Form\n  id: Form\n  parent: System.Web.HttpRequest\n  langs:\n  - csharp\n  name: Form\n  nameWithType: HttpRequest.Form\n  fullName: System.Web.HttpRequest.Form\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Gets a collection of form variables.\n  remarks: The Form property is populated when the HTTP request `Content-Type` value is either \"application/x-www-form-urlencoded\" or \"multipart/form-data\".\n  example:\n  - \"The following example shows how to read the values in the form collection posted from a browser. Each name/value pair in the collection represents a control in the form and its value.  \\n  \\n [!code-vb[Classic HttpRequest.Form Example#1](~/add/codesnippet/visualbasic/p-system.web.httprequest_32_1.vb)]\\n [!code-cs[Classic HttpRequest.Form Example#1](~/add/codesnippet/csharp/p-system.web.httprequest_32_1.cs)]\"\n  syntax:\n    content: public System.Collections.Specialized.NameValueCollection Form { get; }\n    return:\n      type: System.Collections.Specialized.NameValueCollection\n      description: A <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> representing a collection of form variables.\n  overload: System.Web.HttpRequest.Form*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.HttpRequest.GetBufferedInputStream\n  id: GetBufferedInputStream\n  parent: System.Web.HttpRequest\n  langs:\n  - csharp\n  name: GetBufferedInputStream()\n  nameWithType: HttpRequest.GetBufferedInputStream()\n  fullName: System.Web.HttpRequest.GetBufferedInputStream()\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Gets a <xref:System.IO.Stream> object that can be used to read the incoming HTTP entity body.\n  remarks: This method is identical to <xref:System.Web.HttpRequest.GetBufferlessInputStream%2A> except that it also copies the bytes that are read to the internal storage that is used by ASP.NET to populate the <xref:System.Web.HttpRequest.Form%2A>, <xref:System.Web.HttpRequest.Files%2A>, and <xref:System.Web.HttpRequest.InputStream%2A> properties. Because this information is preserved, downstream code such as ASP.NET Web Forms pages (.aspx files) will run successfully. This is not the case with the <xref:System.Web.HttpRequest.GetBufferlessInputStream%2A> method.\n  syntax:\n    content: public System.IO.Stream GetBufferedInputStream ();\n    parameters: []\n    return:\n      type: System.IO.Stream\n      description: A <xref:System.IO.Stream> object that can be used to read the incoming HTTP entity body.\n  overload: System.Web.HttpRequest.GetBufferedInputStream*\n  exceptions:\n  - type: System.Web.HttpException\n    commentId: T:System.Web.HttpException\n    description: \"The request's entity body has already been loaded and parsed. Examples of properties that cause the entity body to be loaded and parsed include the following:  \\n  \\n-   The <xref:System.Web.HttpRequest.Form*> property.  \\n  \\n-   The <xref:System.Web.HttpRequest.Files*> property.  \\n  \\n-   The <xref:System.Web.HttpRequest.InputStream*> property.  \\n  \\n-   The <xref:System.Web.HttpRequest.GetBufferlessInputStream*> method.  \\n  \\n To avoid this exception, call the <xref:System.Web.HttpRequest.ReadEntityBodyMode*> method first. This exception is also thrown if the client disconnects while the entity body is being read.\"\n  platform:\n  - net462\n- uid: System.Web.HttpRequest.GetBufferlessInputStream\n  id: GetBufferlessInputStream\n  parent: System.Web.HttpRequest\n  langs:\n  - csharp\n  name: GetBufferlessInputStream()\n  nameWithType: HttpRequest.GetBufferlessInputStream()\n  fullName: System.Web.HttpRequest.GetBufferlessInputStream()\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Gets a <xref:System.IO.Stream> object that can be used to read the incoming HTTP entity body.\n  remarks: \"This method provides an alternative to using the <xref:System.Web.HttpRequest.InputStream%2A> property. The <xref:System.Web.HttpRequest.InputStream%2A> property waits until the whole request has been received before it returns a <xref:System.IO.Stream> object. In contrast, the GetBufferlessInputStream method returns the <xref:System.IO.Stream> object immediately. You can use the method to begin processing the entity body before the complete contents of the body have been received.  \\n  \\n The entity body (or as much of it as you request and has been received) is returned only when you use the object that is returned by this method to read the stream, by calling methods such as the <xref:System.IO.Stream.Read%2A> method. You use parameters of the <xref:System.IO.Stream.Read%2A> method to specify how much of the entity body to read.  \\n  \\n The <xref:System.IO.Stream> object returned by ASP.NET from this method supports both synchronous and asynchronous read methods. The <xref:System.IO.Stream> object implements both the <xref:System.IO.Stream.BeginRead%2A> and <xref:System.IO.Stream.EndRead%2A> methods. The asynchronous methods let you asynchronously read the request entity in chunks, while ASP.NET releases the current thread in between each iteration of an asynchronous read loop.  \\n  \\n This method can be useful if the request is uploading a large file and you want to begin accessing the file contents before the upload is finished. However, you should only use this method for scenarios where you want to take over all processing of the entity body. This means that you cannot use this method from an .aspx page, because by the time an .aspx page runs, the entity body has already been read.\"\n  syntax:\n    content: public System.IO.Stream GetBufferlessInputStream ();\n    parameters: []\n    return:\n      type: System.IO.Stream\n      description: A <xref:System.IO.Stream> object that can be used to read the incoming HTTP entity body.\n  overload: System.Web.HttpRequest.GetBufferlessInputStream*\n  exceptions:\n  - type: System.Web.HttpException\n    commentId: T:System.Web.HttpException\n    description: \"The request's entity body has already been loaded and parsed. Examples of properties that cause the entity body to be loaded and parsed include the following:  \\n  \\n-   <xref:System.Web.HttpRequest.Form*>  \\n  \\n-   <xref:System.Web.HttpRequest.InputStream*>  \\n  \\n-   <xref:System.Web.HttpRequest.Files*>  \\n  \\n-   <xref:System.Web.HttpRequest.GetBufferedInputStream*>  \\n  \\n To avoid this exception, call the <xref:System.Web.HttpRequest.ReadEntityBodyMode*> method first. This exception is also thrown if the client disconnects while the entity body is being read.\"\n  platform:\n  - net462\n- uid: System.Web.HttpRequest.GetBufferlessInputStream(System.Boolean)\n  id: GetBufferlessInputStream(System.Boolean)\n  parent: System.Web.HttpRequest\n  langs:\n  - csharp\n  name: GetBufferlessInputStream(Boolean)\n  nameWithType: HttpRequest.GetBufferlessInputStream(Boolean)\n  fullName: System.Web.HttpRequest.GetBufferlessInputStream(Boolean)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Gets a <xref:System.IO.Stream> object that can be used to read the incoming HTTP entity body, optionally disabling the request-length limit that is set in the <xref:System.Web.Configuration.HttpRuntimeSection.MaxRequestLength*> property.\n  remarks: For more information about this method, see the <xref:System.Web.HttpRequest.GetBufferlessInputStream> overload.\n  syntax:\n    content: public System.IO.Stream GetBufferlessInputStream (bool disableMaxRequestLength);\n    parameters:\n    - id: disableMaxRequestLength\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to disable the request-length limit; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n    return:\n      type: System.IO.Stream\n      description: A <xref:System.IO.Stream> object that can be used to read the incoming HTTP entity body.\n  overload: System.Web.HttpRequest.GetBufferlessInputStream*\n  exceptions:\n  - type: System.Web.HttpException\n    commentId: T:System.Web.HttpException\n    description: \"The request's entity body has already been loaded and parsed. Examples of properties that cause the entity body to be loaded and parsed include the following:  \\n  \\n-   The <xref:System.Web.HttpRequest.Form*> property.  \\n  \\n-   The <xref:System.Web.HttpRequest.Files*> property.  \\n  \\n-   The <xref:System.Web.HttpRequest.InputStream*> property.  \\n  \\n-   The <xref:System.Web.HttpRequest.GetBufferedInputStream*> method.  \\n  \\n To avoid this exception, call the <xref:System.Web.HttpRequest.ReadEntityBodyMode*> method first. This exception is also thrown if the client disconnects while the entity body is being read.\"\n  platform:\n  - net462\n- uid: System.Web.HttpRequest.Headers\n  id: Headers\n  parent: System.Web.HttpRequest\n  langs:\n  - csharp\n  name: Headers\n  nameWithType: HttpRequest.Headers\n  fullName: System.Web.HttpRequest.Headers\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Gets a collection of HTTP headers.\n  remarks: For a listing of all possible headers, see [Request Header Fields](http://go.microsoft.com/fwlink/?LinkId=73147) on the W3C Web site.\n  example:\n  - \"The following code example displays the names and values of all headers in the HTTP request.  \\n  \\n [!code-cs[Classic HttpRequest.Headers Example#1](~/add/codesnippet/csharp/p-system.web.httprequest_24_1.cs)]\\n [!code-vb[Classic HttpRequest.Headers Example#1](~/add/codesnippet/visualbasic/p-system.web.httprequest_24_1.vb)]\"\n  syntax:\n    content: public System.Collections.Specialized.NameValueCollection Headers { get; }\n    return:\n      type: System.Collections.Specialized.NameValueCollection\n      description: A <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> of headers.\n  overload: System.Web.HttpRequest.Headers*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.HttpRequest.HttpChannelBinding\n  id: HttpChannelBinding\n  parent: System.Web.HttpRequest\n  langs:\n  - csharp\n  name: HttpChannelBinding\n  nameWithType: HttpRequest.HttpChannelBinding\n  fullName: System.Web.HttpRequest.HttpChannelBinding\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Gets the <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> object of the current <xref href=\"System.Web.HttpWorkerRequest\"></xref> instance.\n  syntax:\n    content: public System.Security.Authentication.ExtendedProtection.ChannelBinding HttpChannelBinding { get; }\n    return:\n      type: System.Security.Authentication.ExtendedProtection.ChannelBinding\n      description: The <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> object of the current <xref href=\"System.Web.HttpWorkerRequest\"></xref> instance.\n  overload: System.Web.HttpRequest.HttpChannelBinding*\n  exceptions:\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: The current <xref href=\"System.Web.HttpWorkerRequest\"></xref> object is not a <xref uid=\"langword_csharp_System.Web.Hosting.IIS7WorkerRequest\" name=\"System.Web.Hosting.IIS7WorkerRequest\" href=\"\"></xref> object or a <xref uid=\"langword_csharp_System.Web.Hosting.ISAPIWorkerRequestInProc\" name=\"System.Web.Hosting.ISAPIWorkerRequestInProc\" href=\"\"></xref> object.\n  platform:\n  - net462\n- uid: System.Web.HttpRequest.HttpMethod\n  id: HttpMethod\n  parent: System.Web.HttpRequest\n  langs:\n  - csharp\n  name: HttpMethod\n  nameWithType: HttpRequest.HttpMethod\n  fullName: System.Web.HttpRequest.HttpMethod\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Gets the HTTP data transfer method (such as <xref uid=\"langword_csharp_GET\" name=\"GET\" href=\"\"></xref>, <xref uid=\"langword_csharp_POST\" name=\"POST\" href=\"\"></xref>, or <xref uid=\"langword_csharp_HEAD\" name=\"HEAD\" href=\"\"></xref>) used by the client.\n  remarks: ''\n  example:\n  - \"The following code example uses the <xref:System.Web.HttpUtility.HtmlEncode%2A> method to HTML-encode the value of the HttpMethod property and the <xref:System.IO.TextWriter.WriteLine%2A> method to write the encoded value to the file. This code example is part of a larger example provided for the <xref:System.Web.HttpRequest> class.  \\n  \\n [!code-vb[System.Web.HttpRequest_Sample1#7](~/add/codesnippet/visualbasic/p-system.web.httprequest_2_1.aspx)]\\n [!code-cs[System.Web.HttpRequest_Sample1#7](~/add/codesnippet/csharp/p-system.web.httprequest_2_1.aspx)]  \\n  \\n The following example shows output that is produced by this code.  \\n  \\n `GET`  \\n  \\n `127.0.0.1`  \\n  \\n `127.0.0.1`  \\n  \\n `GET`\"\n  syntax:\n    content: public string HttpMethod { get; }\n    return:\n      type: System.String\n      description: The HTTP data transfer method used by the client.\n  overload: System.Web.HttpRequest.HttpMethod*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.HttpRequest.InputStream\n  id: InputStream\n  parent: System.Web.HttpRequest\n  langs:\n  - csharp\n  name: InputStream\n  nameWithType: HttpRequest.InputStream\n  fullName: System.Web.HttpRequest.InputStream\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Gets the contents of the incoming HTTP entity body.\n  remarks: ''\n  example:\n  - \"The following code example copies the contents of an InputStream into a string.  \\n  \\n [!code-cs[Classic HttpRequest.InputStream Example#1](~/add/codesnippet/csharp/p-system.web.httprequest_10_1.aspx)]\\n [!code-vb[Classic HttpRequest.InputStream Example#1](~/add/codesnippet/visualbasic/p-system.web.httprequest_10_1.vb)]\"\n  syntax:\n    content: public System.IO.Stream InputStream { get; }\n    return:\n      type: System.IO.Stream\n      description: A <xref:System.IO.Stream> object representing the contents of the incoming HTTP content body.\n  overload: System.Web.HttpRequest.InputStream*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.HttpRequest.InsertEntityBody\n  id: InsertEntityBody\n  parent: System.Web.HttpRequest\n  langs:\n  - csharp\n  name: InsertEntityBody()\n  nameWithType: HttpRequest.InsertEntityBody()\n  fullName: System.Web.HttpRequest.InsertEntityBody()\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Provides IIS with a copy of the HTTP request entity body.\n  remarks: \"IIS does not maintain a copy of the request after it has been read. Therefore, it is recommended that only the handler for an HTTP request should read the request entity.  \\n  \\n The InsertEntityBody method overload provides IIS with a copy of the request entity if it was previously read by ASP.NET. This method overload is useful for cases where ASP.NET has read the entity request and you want to reuse the existing request data.\"\n  syntax:\n    content: public void InsertEntityBody ();\n    parameters: []\n  overload: System.Web.HttpRequest.InsertEntityBody*\n  exceptions:\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: The method was invoked on a version of IIS earlier than IIS 7.0.\n  platform:\n  - net462\n- uid: System.Web.HttpRequest.InsertEntityBody(System.Byte[],System.Int32,System.Int32)\n  id: InsertEntityBody(System.Byte[],System.Int32,System.Int32)\n  parent: System.Web.HttpRequest\n  langs:\n  - csharp\n  name: InsertEntityBody(Byte[],Int32,Int32)\n  nameWithType: HttpRequest.InsertEntityBody(Byte[],Int32,Int32)\n  fullName: System.Web.HttpRequest.InsertEntityBody(Byte[],Int32,Int32)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Provides IIS with a copy of the HTTP request entity body and with information about the request entity object.\n  remarks: \"IIS does not maintain a copy of the request after it has been read. Therefore, it is recommended that only the handler for an HTTP request should read the request entity.  \\n  \\n The InsertEntityBody method overload is useful when you want to perform custom processing, such as inserting a different entity body into memory.\"\n  syntax:\n    content: public void InsertEntityBody (byte[] buffer, int offset, int count);\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: An array that contains the request entity data.\n    - id: offset\n      type: System.Int32\n      description: The zero-based position in `buffer` at which to begin storing the request entity data.\n    - id: count\n      type: System.Int32\n      description: The number of bytes to read into the `buffer` array.\n  overload: System.Web.HttpRequest.InsertEntityBody*\n  exceptions:\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: The method was invoked on a version of IIS earlier than IIS 7.0.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>buffer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>offset</code> is a negative value.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The number of items in <code>count</code> is larger than the available space in <code>buffer</code>, given the <code>offset</code> value.\n  platform:\n  - net462\n- uid: System.Web.HttpRequest.IsAuthenticated\n  id: IsAuthenticated\n  parent: System.Web.HttpRequest\n  langs:\n  - csharp\n  name: IsAuthenticated\n  nameWithType: HttpRequest.IsAuthenticated\n  fullName: System.Web.HttpRequest.IsAuthenticated\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Gets a value indicating whether the request has been authenticated.\n  remarks: ''\n  example:\n  - \"The following code example uses the IsAuthenticated property to determine whether the current request has been authenticated. If it has not been authenticated, the request is redirected to another page where users can enter their credentials into the Web application. This is a common technique used in the default page for an application.  \\n  \\n [!code-vb[System.Web.HttpRequest_Sample3#1](~/add/codesnippet/visualbasic/p-system.web.httprequest_15_1.aspx)]\\n [!code-cs[System.Web.HttpRequest_Sample3#1](~/add/codesnippet/csharp/p-system.web.httprequest_15_1.aspx)]\"\n  syntax:\n    content: public bool IsAuthenticated { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the request is authenticated; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Web.HttpRequest.IsAuthenticated*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.HttpRequest.IsLocal\n  id: IsLocal\n  parent: System.Web.HttpRequest\n  langs:\n  - csharp\n  name: IsLocal\n  nameWithType: HttpRequest.IsLocal\n  fullName: System.Web.HttpRequest.IsLocal\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Gets a value indicating whether the request is from the local computer.\n  remarks: The IsLocal property returns `true` if the IP address of the request originator is 127.0.0.1 or if the IP address of the request is the same as the server's IP address.\n  syntax:\n    content: public bool IsLocal { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the request is from the local computer; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Web.HttpRequest.IsLocal*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.HttpRequest.IsSecureConnection\n  id: IsSecureConnection\n  parent: System.Web.HttpRequest\n  langs:\n  - csharp\n  name: IsSecureConnection\n  nameWithType: HttpRequest.IsSecureConnection\n  fullName: System.Web.HttpRequest.IsSecureConnection\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Gets a value indicating whether the HTTP connection uses secure sockets (that is, HTTPS).\n  remarks: ''\n  example:\n  - \"The following code example determines whether the IsSecureConnection property is set to false. If it is, the <xref:System.Web.HttpResponse.SuppressContent%2A> property is set to true to stop the response from being sent.  \\n  \\n [!code-cs[System.Web.HttpResponse_Sample5#3](~/add/codesnippet/csharp/p-system.web.httprequest_13_1.aspx)]\\n [!code-vb[System.Web.HttpResponse_Sample5#3](~/add/codesnippet/visualbasic/p-system.web.httprequest_13_1.aspx)]\"\n  syntax:\n    content: public bool IsSecureConnection { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the connection is an SSL connection; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Web.HttpRequest.IsSecureConnection*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.HttpRequest.Item(System.String)\n  id: Item(System.String)\n  parent: System.Web.HttpRequest\n  langs:\n  - csharp\n  name: Item(String)\n  nameWithType: HttpRequest.Item(String)\n  fullName: System.Web.HttpRequest.Item(String)\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Gets the specified object from the <xref:System.Web.HttpRequest.QueryString*>, <xref:System.Web.HttpRequest.Form*>, <xref:System.Web.HttpRequest.Cookies*>, or <xref:System.Web.HttpRequest.ServerVariables*> collections.\n  syntax:\n    content: public string this[string key] { get; }\n    parameters:\n    - id: key\n      type: System.String\n      description: The name of the collection member to get.\n    return:\n      type: System.String\n      description: The <xref:System.Web.HttpRequest.QueryString*>, <xref:System.Web.HttpRequest.Form*>, <xref:System.Web.HttpRequest.Cookies*>, or <xref:System.Web.HttpRequest.ServerVariables*> collection member specified in the <code>key</code> parameter. If the specified <code>key</code> is not found, then <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> is returned.\n  overload: System.Web.HttpRequest.Item*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.HttpRequest.LogonUserIdentity\n  id: LogonUserIdentity\n  parent: System.Web.HttpRequest\n  langs:\n  - csharp\n  name: LogonUserIdentity\n  nameWithType: HttpRequest.LogonUserIdentity\n  fullName: System.Web.HttpRequest.LogonUserIdentity\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Gets the <xref href=\"System.Security.Principal.WindowsIdentity\"></xref> type for the current user.\n  remarks: The LogonUserIdentity property exposes the properties and methods of the <xref:System.Security.Principal.WindowsIdentity> object for the currently connected user to Microsoft Internet Information Services (IIS). The instance of the <xref:System.Security.Principal.WindowsIdentity> class that is exposed by LogonUserIdentity tracks the IIS request token and provides easy access to this token for the current HTTP request being processed inside of ASP.NET. An instance of the <xref:System.Security.Principal.WindowsIdentity> class is automatically created so it does not need to be constructed to in order to gain access to its methods and properties.\n  example:\n  - \"The following code example shows how to retrieve the LogonUserIdentity property for the current user and write out the values of each item in a text file. Place this code on the ASP.NET page referenced by the form's `ACTION` attribute.  \\n  \\n [!code-vb[System.Web.HttpRequest_LogonUserIdentity#1](~/add/codesnippet/visualbasic/p-system.web.httprequest_35_1.aspx)]\\n [!code-cs[System.Web.HttpRequest_LogonUserIdentity#1](~/add/codesnippet/csharp/p-system.web.httprequest_35_1.aspx)]\"\n  syntax:\n    content: public System.Security.Principal.WindowsIdentity LogonUserIdentity { get; }\n    return:\n      type: System.Security.Principal.WindowsIdentity\n      description: A <xref href=\"System.Security.Principal.WindowsIdentity\"></xref> object for the current Microsoft Internet Information Services (IIS) authentication settings.\n  overload: System.Web.HttpRequest.LogonUserIdentity*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The Web application is running in IIS 7 integrated mode and the <xref href=\"System.Web.HttpApplication.PostAuthenticateRequest\"></xref> event has not yet been raised.\n  platform:\n  - net462\n- uid: System.Web.HttpRequest.MapImageCoordinates(System.String)\n  id: MapImageCoordinates(System.String)\n  parent: System.Web.HttpRequest\n  langs:\n  - csharp\n  name: MapImageCoordinates(String)\n  nameWithType: HttpRequest.MapImageCoordinates(String)\n  fullName: System.Web.HttpRequest.MapImageCoordinates(String)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Maps an incoming image-field form parameter to appropriate x-coordinate and y-coordinate values.\n  syntax:\n    content: public int[] MapImageCoordinates (string imageFieldName);\n    parameters:\n    - id: imageFieldName\n      type: System.String\n      description: The name of the form image map.\n    return:\n      type: System.Int32[]\n      description: A two-dimensional array of integers.\n  overload: System.Web.HttpRequest.MapImageCoordinates*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.HttpRequest.MapPath(System.String)\n  id: MapPath(System.String)\n  parent: System.Web.HttpRequest\n  langs:\n  - csharp\n  name: MapPath(String)\n  nameWithType: HttpRequest.MapPath(String)\n  fullName: System.Web.HttpRequest.MapPath(String)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Maps the specified virtual path to a physical path.\n  remarks: >-\n    > [!CAUTION]\n\n    >  The MapPath property potentially contains sensitive information about the hosting environment. The return value should not be displayed to users.\n  example:\n  - \"The following code example uses the MapPath method to convert a virtual path to a fully qualified physical path on the server. This example has two parts:  \\n  \\n-   An .aspx page maps the path, reads the file, and displays results of the read operation.  \\n  \\n-   A class, `UpperCaseFilterStream`, that changes all characters passed through it to uppercase.  \\n  \\n The first part of the example shows how to convert a virtual path to a fully qualified physical path using the MapPath method. This physical path is then passed to a <xref:System.IO.StreamReader> object, which obtains the contents of the file. The <xref:System.Web.HttpResponse.Write%2A> method is then called to display the content of the file on the page. The <xref:System.Web.HttpResponse.Filter%2A> property is used to attach a filter to the response stream that makes the text displayed to the page all uppercase.  \\n  \\n [!code-vb[System.Web.HttpRequest_Samples2#1](~/add/codesnippet/visualbasic/m-system.web.httprequest_0_1.aspx)]\\n [!code-cs[System.Web.HttpRequest_Samples2#1](~/add/codesnippet/csharp/m-system.web.httprequest_0_1.aspx)]  \\n  \\n The second part of the example shows a class that inherits from <xref:System.IO.Stream> and converts all characters in a stream to uppercase. Put this code in the `App_Code` folder for your application.  \\n  \\n [!code-cs[System.Web.HttpRequest_Samples2#2](~/add/codesnippet/csharp/m-system.web.httprequest_0_2.cs)]\\n [!code-vb[System.Web.HttpRequest_Samples2#2](~/add/codesnippet/visualbasic/m-system.web.httprequest_0_2.vb)]\"\n  syntax:\n    content: public string MapPath (string virtualPath);\n    parameters:\n    - id: virtualPath\n      type: System.String\n      description: The virtual path (absolute or relative) for the current request.\n    return:\n      type: System.String\n      description: The physical path on the server specified by <code>virtualPath</code>.\n  overload: System.Web.HttpRequest.MapPath*\n  exceptions:\n  - type: System.Web.HttpException\n    commentId: T:System.Web.HttpException\n    description: No <xref href=\"System.Web.HttpContext\"></xref> object is defined for the request.\n  platform:\n  - net462\n- uid: System.Web.HttpRequest.MapPath(System.String,System.String,System.Boolean)\n  id: MapPath(System.String,System.String,System.Boolean)\n  parent: System.Web.HttpRequest\n  langs:\n  - csharp\n  name: MapPath(String,String,Boolean)\n  nameWithType: HttpRequest.MapPath(String,String,Boolean)\n  fullName: System.Web.HttpRequest.MapPath(String,String,Boolean)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Maps the specified virtual path to a physical path.\n  remarks: >-\n    > [!CAUTION]\n\n    >  The MapPath property potentially contains sensitive information about the hosting environment. The return value should not be displayed to users.\n  syntax:\n    content: public string MapPath (string virtualPath, string baseVirtualDir, bool allowCrossAppMapping);\n    parameters:\n    - id: virtualPath\n      type: System.String\n      description: The virtual path (absolute or relative) for the current request.\n    - id: baseVirtualDir\n      type: System.String\n      description: The virtual base directory path used for relative resolution.\n    - id: allowCrossAppMapping\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to indicate that `virtualPath` may belong to another application; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n    return:\n      type: System.String\n      description: The physical path on the server.\n  overload: System.Web.HttpRequest.MapPath*\n  exceptions:\n  - type: System.Web.HttpException\n    commentId: T:System.Web.HttpException\n    description: No <xref href=\"System.Web.HttpContext\"></xref> object is defined for the request.\n  platform:\n  - net462\n- uid: System.Web.HttpRequest.MapRawImageCoordinates(System.String)\n  id: MapRawImageCoordinates(System.String)\n  parent: System.Web.HttpRequest\n  langs:\n  - csharp\n  name: MapRawImageCoordinates(String)\n  nameWithType: HttpRequest.MapRawImageCoordinates(String)\n  fullName: System.Web.HttpRequest.MapRawImageCoordinates(String)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Maps an incoming image field form parameter into appropriate x and y coordinate values.\n  syntax:\n    content: public double[] MapRawImageCoordinates (string imageFieldName);\n    parameters:\n    - id: imageFieldName\n      type: System.String\n      description: The name of the image field.\n    return:\n      type: System.Double[]\n      description: The x and y coordinate values.\n  overload: System.Web.HttpRequest.MapRawImageCoordinates*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.HttpRequest.Params\n  id: Params\n  parent: System.Web.HttpRequest\n  langs:\n  - csharp\n  name: Params\n  nameWithType: HttpRequest.Params\n  fullName: System.Web.HttpRequest.Params\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Gets a combined collection of <xref:System.Web.HttpRequest.QueryString*>, <xref:System.Web.HttpRequest.Form*>, <xref:System.Web.HttpRequest.Cookies*>, and <xref:System.Web.HttpRequest.ServerVariables*> items.\n  remarks: \"Name-value pairs are added to the collection in the following order:  \\n  \\n1.  Query-string parameters.  \\n  \\n2.  Form fields.  \\n  \\n3.  Cookies.  \\n  \\n4.  Server variables.\"\n  example:\n  - \"The following code example shows how to loop through the Params property for a page and how to display each key/value pair.  \\n  \\n [!code-cs[System.Web.HttpRequest.Params#1](~/add/codesnippet/csharp/p-system.web.httprequest_7_1.aspx)]\\n [!code-vb[System.Web.HttpRequest.Params#1](~/add/codesnippet/visualbasic/p-system.web.httprequest_7_1.aspx)]\"\n  syntax:\n    content: public System.Collections.Specialized.NameValueCollection Params { get; }\n    return:\n      type: System.Collections.Specialized.NameValueCollection\n      description: A <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> object.\n  overload: System.Web.HttpRequest.Params*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.HttpRequest.Path\n  id: Path\n  parent: System.Web.HttpRequest\n  langs:\n  - csharp\n  name: Path\n  nameWithType: HttpRequest.Path\n  fullName: System.Web.HttpRequest.Path\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Gets the virtual path of the current request.\n  remarks: The Path is the concatenation of the <xref:System.Web.HttpRequest.FilePath%2A> and the <xref:System.Web.HttpRequest.PathInfo%2A> trailer. For example, for the URL http://www.contoso.com/virdir/page.html/tail, the Path is /virdir/page.html/tail.\n  example:\n  - \"The following code example uses the <xref:System.Web.HttpUtility.HtmlEncode%2A> method to HTML-encode the value of the Path property and the <xref:System.IO.TextWriter.WriteLine%2A> method to write the encoded value to the file. This code example is part of a larger example provided for the <xref:System.Web.HttpRequest> class.  \\n  \\n [!code-vb[System.Web.HttpRequest_Sample1#2](~/add/codesnippet/visualbasic/p-system.web.httprequest_29_1.aspx)]\\n [!code-cs[System.Web.HttpRequest_Sample1#2](~/add/codesnippet/csharp/p-system.web.httprequest_29_1.aspx)]\"\n  syntax:\n    content: public string Path { get; }\n    return:\n      type: System.String\n      description: The virtual path of the current request.\n  overload: System.Web.HttpRequest.Path*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.HttpRequest.PathInfo\n  id: PathInfo\n  parent: System.Web.HttpRequest\n  langs:\n  - csharp\n  name: PathInfo\n  nameWithType: HttpRequest.PathInfo\n  fullName: System.Web.HttpRequest.PathInfo\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Gets the additional path information for a resource with a URL extension.\n  remarks: For the URL Http://www.contoso.com/virdir/page.html/tail, the PathInfo value is /tail.\n  example:\n  - \"The following code example determines whether the PathInfo property contains an empty string. If it does, the <xref:System.IO.StreamWriter.Write%2A> method writes a string indicating this to a file. If it does not, the <xref:System.Web.HttpUtility.HtmlEncode%2A> method HTML-encodes the value of the PathInfo property and the <xref:System.IO.TextWriter.WriteLine%2A> method writes the encoded value to the file. This code example is part of a larger example provided for the <xref:System.Web.HttpRequest> class.  \\n  \\n [!code-vb[System.Web.HttpRequest_Sample1#4](~/add/codesnippet/visualbasic/p-system.web.httprequest_19_1.aspx)]\\n [!code-cs[System.Web.HttpRequest_Sample1#4](~/add/codesnippet/csharp/p-system.web.httprequest_19_1.aspx)]\"\n  syntax:\n    content: public string PathInfo { get; }\n    return:\n      type: System.String\n      description: The additional path information for a resource.\n  overload: System.Web.HttpRequest.PathInfo*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.HttpRequest.PhysicalApplicationPath\n  id: PhysicalApplicationPath\n  parent: System.Web.HttpRequest\n  langs:\n  - csharp\n  name: PhysicalApplicationPath\n  nameWithType: HttpRequest.PhysicalApplicationPath\n  fullName: System.Web.HttpRequest.PhysicalApplicationPath\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Gets the physical file system path of the currently executing server application's root directory.\n  remarks: ''\n  example:\n  - \"The following code example uses the <xref:System.Web.HttpUtility.HtmlEncode%2A> method to HTML-encode the value of the PhysicalApplicationPath property and the <xref:System.IO.TextWriter.WriteLine%2A> method to write the encoded value to the file. This code example is part of a larger example provided for the <xref:System.Web.HttpRequest> class.  \\n  \\n [!code-vb[System.Web.HttpRequest_Sample1#5](~/add/codesnippet/visualbasic/p-system.web.httprequest_1_1.aspx)]\\n [!code-cs[System.Web.HttpRequest_Sample1#5](~/add/codesnippet/csharp/p-system.web.httprequest_1_1.aspx)]\"\n  syntax:\n    content: public string PhysicalApplicationPath { get; }\n    return:\n      type: System.String\n      description: The file system path of the current application's root directory.\n  overload: System.Web.HttpRequest.PhysicalApplicationPath*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.HttpRequest.PhysicalPath\n  id: PhysicalPath\n  parent: System.Web.HttpRequest\n  langs:\n  - csharp\n  name: PhysicalPath\n  nameWithType: HttpRequest.PhysicalPath\n  fullName: System.Web.HttpRequest.PhysicalPath\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Gets the physical file system path corresponding to the requested URL.\n  remarks: In redirect scenarios using <xref:System.Web.HttpServerUtility.Execute%2A> and <xref:System.Web.HttpServerUtility.Transfer%2A>, the PhysicalPath property returns the path to the original page. To find the physical path of the currently executing page use the <xref:System.Web.HttpRequest.MapPath%2A> method with the input argument set as the <xref:System.Web.HttpRequest.CurrentExecutionFilePath%2A> property.\n  example:\n  - \"The following code example uses the <xref:System.Web.HttpUtility.HtmlEncode%2A> method to HTML-encode the value of the PhysicalPath property and the <xref:System.IO.TextWriter.WriteLine%2A> method to write the encoded value to the file. This code example is part of a larger example provided for the <xref:System.Web.HttpRequest> class.  \\n  \\n [!code-vb[System.Web.HttpRequest_Sample1#5](~/add/codesnippet/visualbasic/p-system.web.httprequest_20_1.aspx)]\\n [!code-cs[System.Web.HttpRequest_Sample1#5](~/add/codesnippet/csharp/p-system.web.httprequest_20_1.aspx)]\"\n  syntax:\n    content: public string PhysicalPath { get; }\n    return:\n      type: System.String\n      description: The file system path of the current request.\n  overload: System.Web.HttpRequest.PhysicalPath*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.HttpRequest.QueryString\n  id: QueryString\n  parent: System.Web.HttpRequest\n  langs:\n  - csharp\n  name: QueryString\n  nameWithType: HttpRequest.QueryString\n  fullName: System.Web.HttpRequest.QueryString\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Gets the collection of HTTP query string variables.\n  remarks: ''\n  example:\n  - \"The following code example shows two ways to get the value of a query string variable named “fullname”. In each case, if the URL is `http://www.contoso.com/default.aspx?fullname=Fadi%20Fakhouri`, then the value returned is \\\"Fadi Fakhouri\\\" because the `%20` is URL-decoded into a space character. If the URL doesn’t have a `fullname` query string ID, the returned value would be `null`.  \\n  \\n The first line of code looks for the key “fullname” only in the query string; the second line looks for the key “fullname” in all of the HTTP request collections. For more information about the second line, see <xref:System.Web.HttpRequest.Item%2A>.  \\n  \\n```c#  \\nstring fullname1 = Request.QueryString[\\\"fullname\\\"];  \\nstring fullname2 = Request[\\\"fullname\\\"];  \\n  \\n```  \\n  \\n```vb  \\nDim fullname1 As String = Request.QueryString(\\\"fullname\\\")  \\nDim fullname2 As String = Request(\\\"fullname\\\")  \\n```\"\n  syntax:\n    content: public System.Collections.Specialized.NameValueCollection QueryString { get; }\n    return:\n      type: System.Collections.Specialized.NameValueCollection\n      description: The query string variables sent by the client. Keys and values are URL-decoded.\n  overload: System.Web.HttpRequest.QueryString*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.HttpRequest.RawUrl\n  id: RawUrl\n  parent: System.Web.HttpRequest\n  langs:\n  - csharp\n  name: RawUrl\n  nameWithType: HttpRequest.RawUrl\n  fullName: System.Web.HttpRequest.RawUrl\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Gets the raw URL of the current request.\n  remarks: The raw URL is defined as the part of the URL following the domain information. In the URL string http://www.contoso.com/articles/recent.aspx, the raw URL is /articles/recent.aspx. The raw URL includes the query string, if present.\n  example:\n  - \"The following code example uses the <xref:System.Web.HttpUtility.HtmlEncode%2A> method to HTML-encode the value of the RawUrl property and the <xref:System.IO.TextWriter.WriteLine%2A> method to write the encoded value to the file. This code example is part of a larger example provided for the <xref:System.Web.HttpRequest> class.  \\n  \\n [!code-vb[System.Web.HttpRequest_Sample1#5](~/add/codesnippet/visualbasic/p-system.web.httprequest_22_1.aspx)]\\n [!code-cs[System.Web.HttpRequest_Sample1#5](~/add/codesnippet/csharp/p-system.web.httprequest_22_1.aspx)]\"\n  syntax:\n    content: public string RawUrl { get; }\n    return:\n      type: System.String\n      description: The raw URL of the current request.\n  overload: System.Web.HttpRequest.RawUrl*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.HttpRequest.ReadEntityBodyMode\n  id: ReadEntityBodyMode\n  parent: System.Web.HttpRequest\n  langs:\n  - csharp\n  name: ReadEntityBodyMode\n  nameWithType: HttpRequest.ReadEntityBodyMode\n  fullName: System.Web.HttpRequest.ReadEntityBodyMode\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Gets a value that indicates whether the request entity body has been read, and if so, how it was read.\n  remarks: \"This method is used to avoid the exception that is thrown if the entity body has already been read and an attempt is made to read it by using an incompatible method. Methods and properties that read the entity body include the following:  \\n  \\n-   The <xref:System.Web.HttpRequest.Form%2A> property.  \\n  \\n-   The <xref:System.Web.HttpRequest.Files%2A> property.  \\n  \\n-   The <xref:System.Web.HttpRequest.InputStream%2A> property.  \\n  \\n-   The <xref:System.Web.HttpRequest.GetBufferedInputStream%2A> method.  \\n  \\n-   The <xref:System.Web.HttpRequest.GetBufferlessInputStream%2A> method.\"\n  syntax:\n    content: public System.Web.ReadEntityBodyMode ReadEntityBodyMode { get; }\n    return:\n      type: System.Web.ReadEntityBodyMode\n      description: The value that indicates how the request entity body was read, or that it has not been read.\n  overload: System.Web.HttpRequest.ReadEntityBodyMode*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.HttpRequest.RequestContext\n  id: RequestContext\n  parent: System.Web.HttpRequest\n  langs:\n  - csharp\n  name: RequestContext\n  nameWithType: HttpRequest.RequestContext\n  fullName: System.Web.HttpRequest.RequestContext\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Gets the <xref:System.Web.Routing.RequestContext> instance of the current request.\n  remarks: This property provides access to the <xref:System.Web.Routing.RouteData> object for the current request. For more information about ASP.NET routing, see.[ASP.NET Routing](~/add/includes/ajax-current-ext-md.md).\n  syntax:\n    content: public System.Web.Routing.RequestContext RequestContext { get; set; }\n    return:\n      type: System.Web.Routing.RequestContext\n      description: The <xref:System.Web.Routing.RequestContext> instance of the current request. For non-routed requests, the <xref:System.Web.Routing.RequestContext> object that is returned is empty.\n  overload: System.Web.HttpRequest.RequestContext*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.HttpRequest.RequestType\n  id: RequestType\n  parent: System.Web.HttpRequest\n  langs:\n  - csharp\n  name: RequestType\n  nameWithType: HttpRequest.RequestType\n  fullName: System.Web.HttpRequest.RequestType\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Gets or sets the HTTP data transfer method (<xref uid=\"langword_csharp_GET\" name=\"GET\" href=\"\"></xref> or <xref uid=\"langword_csharp_POST\" name=\"POST\" href=\"\"></xref>) used by the client.\n  remarks: ''\n  example:\n  - \"The following code example uses the <xref:System.Web.HttpUtility.HtmlEncode%2A> method to HTML-encode the value of the RequestType property and the <xref:System.IO.TextWriter.WriteLine%2A> method to write the encoded value to the file. This code example is part of a larger example provided for the <xref:System.Web.HttpRequest> class.  \\n  \\n [!code-vb[System.Web.HttpRequest_Sample1#7](~/add/codesnippet/visualbasic/p-system.web.httprequest_25_1.aspx)]\\n [!code-cs[System.Web.HttpRequest_Sample1#7](~/add/codesnippet/csharp/p-system.web.httprequest_25_1.aspx)]\"\n  syntax:\n    content: public string RequestType { get; set; }\n    return:\n      type: System.String\n      description: A string representing the HTTP invocation type sent by the client.\n  overload: System.Web.HttpRequest.RequestType*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.HttpRequest.SaveAs(System.String,System.Boolean)\n  id: SaveAs(System.String,System.Boolean)\n  parent: System.Web.HttpRequest\n  langs:\n  - csharp\n  name: SaveAs(String,Boolean)\n  nameWithType: HttpRequest.SaveAs(String,Boolean)\n  fullName: System.Web.HttpRequest.SaveAs(String,Boolean)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Saves an HTTP request to disk.\n  remarks: Saving the request context to disk can be useful in debugging.\n  example:\n  - \"The following code example calls the SaveAs method when a page is loaded. The call specifies that the request be saved as a text file in a directory where the ASP.NET process identity has been granted write permissions, and that any header information included in the request is included in the file.  \\n  \\n [!code-cs[System.Web.HttpRequest_Sample6#1](~/add/codesnippet/csharp/m-system.web.httprequest_1_1.aspx)]\\n [!code-vb[System.Web.HttpRequest_Sample6#1](~/add/codesnippet/visualbasic/m-system.web.httprequest_1_1.aspx)]\"\n  syntax:\n    content: public void SaveAs (string filename, bool includeHeaders);\n    parameters:\n    - id: filename\n      type: System.String\n      description: The physical drive path.\n    - id: includeHeaders\n      type: System.Boolean\n      description: A Boolean value specifying whether an HTTP header should be saved to disk.\n  overload: System.Web.HttpRequest.SaveAs*\n  exceptions:\n  - type: System.Web.HttpException\n    commentId: T:System.Web.HttpException\n    description: The <xref:System.Web.Configuration.HttpRuntimeSection.RequireRootedSaveAsPath*> property of the <xref href=\"System.Web.Configuration.HttpRuntimeSection\"></xref> is set to <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> but <code>filename</code> is not an absolute path.\n  platform:\n  - net462\n- uid: System.Web.HttpRequest.ServerVariables\n  id: ServerVariables\n  parent: System.Web.HttpRequest\n  langs:\n  - csharp\n  name: ServerVariables\n  nameWithType: HttpRequest.ServerVariables\n  fullName: System.Web.HttpRequest.ServerVariables\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Gets a collection of Web server variables.\n  remarks: For a list of server variables supported by IIS, see [IIS Server Variables](http://go.microsoft.com/fwlink/?LinkId=52471).\n  example:\n  - \"The following code example displays the names and values of all named server variables.  \\n  \\n [!code-cs[Classic HttpRequest.ServerVariables Example#1](~/add/codesnippet/csharp/p-system.web.httprequest_30_1.cs)]\\n [!code-vb[Classic HttpRequest.ServerVariables Example#1](~/add/codesnippet/visualbasic/p-system.web.httprequest_30_1.vb)]\"\n  syntax:\n    content: public System.Collections.Specialized.NameValueCollection ServerVariables { get; }\n    return:\n      type: System.Collections.Specialized.NameValueCollection\n      description: A <xref href=\"System.Collections.Specialized.NameValueCollection\"></xref> of server variables.\n  overload: System.Web.HttpRequest.ServerVariables*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.HttpRequest.TimedOutToken\n  id: TimedOutToken\n  parent: System.Web.HttpRequest\n  langs:\n  - csharp\n  name: TimedOutToken\n  nameWithType: HttpRequest.TimedOutToken\n  fullName: System.Web.HttpRequest.TimedOutToken\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Gets a <xref:System.Threading.CancellationToken> object that is tripped when a request times out.\n  remarks: \"The timeout period can be specified in the Web.config file (see <xref:System.Web.Configuration.HttpRuntimeSection.ExecutionTimeout%2A?displayProperty=fullName>) or programmatically (see <xref:System.Web.HttpServerUtility.ScriptTimeout%2A?displayProperty=fullName>). The timeout period is measured from the time the request comes in. If the default timeout of 110 seconds is in effect, the cancellation token will be tripped no earlier than 110 seconds after request processing begins. You can change the <xref:System.Web.HttpServerUtility.ScriptTimeout%2A?displayProperty=fullName> property value, and as long this token hasn't tripped yet, the new timeout value will be respected.  \\n  \\n Currently the token only provides 15 second granularity, which means that if the timeout value is 110 seconds, the token will be tripped sometime between 110 and 125 seconds after request processing begins. The granularity may change in the future.  \\n  \\n Even though this property is thread-safe, there are restrictions on its use. For more information, see <xref:System.Web.HttpResponse.ClientDisconnectedToken%2A?displayProperty=fullName>.  \\n  \\n This property is meaningless if WebSockets request processing has started.\"\n  syntax:\n    content: public System.Threading.CancellationToken TimedOutToken { get; }\n    return:\n      type: System.Threading.CancellationToken\n      description: The cancellation token.\n  overload: System.Web.HttpRequest.TimedOutToken*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.HttpRequest.TlsTokenBindingInfo\n  id: TlsTokenBindingInfo\n  parent: System.Web.HttpRequest\n  langs:\n  - csharp\n  name: TlsTokenBindingInfo\n  nameWithType: HttpRequest.TlsTokenBindingInfo\n  fullName: System.Web.HttpRequest.TlsTokenBindingInfo\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Gets the TLS token binding information. The property enables applications to retrieve token information from incoming HTTP requests for enhanced authentication.\n  remarks: This property returns `null` on non-windows10 platforms.\n  syntax:\n    content: public System.Web.ITlsTokenBindingInfo TlsTokenBindingInfo { get; }\n    return:\n      type: System.Web.ITlsTokenBindingInfo\n      description: The binding token for the current connection.\n  overload: System.Web.HttpRequest.TlsTokenBindingInfo*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.HttpRequest.TotalBytes\n  id: TotalBytes\n  parent: System.Web.HttpRequest\n  langs:\n  - csharp\n  name: TotalBytes\n  nameWithType: HttpRequest.TotalBytes\n  fullName: System.Web.HttpRequest.TotalBytes\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Gets the number of bytes in the current input stream.\n  remarks: ''\n  example:\n  - \"The following code example determines whether the TotalBytes property value is greater than 1000 bytes and writes that information to a file.  \\n  \\n [!code-vb[System.Web.HttpRequest_Sample1#6](~/add/codesnippet/visualbasic/p-system.web.httprequest_23_1.aspx)]\\n [!code-cs[System.Web.HttpRequest_Sample1#6](~/add/codesnippet/csharp/p-system.web.httprequest_23_1.aspx)]\"\n  syntax:\n    content: public int TotalBytes { get; }\n    return:\n      type: System.Int32\n      description: The number of bytes in the input stream.\n  overload: System.Web.HttpRequest.TotalBytes*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.HttpRequest.Unvalidated\n  id: Unvalidated\n  parent: System.Web.HttpRequest\n  langs:\n  - csharp\n  name: Unvalidated\n  nameWithType: HttpRequest.Unvalidated\n  fullName: System.Web.HttpRequest.Unvalidated\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Gets the HTTP request values without triggering request validation.\n  remarks: \"Request validation checks for HTML markup and script that might indicate a potential cross-site scripting attack. By default, all values are checked using request validation and if any values contain markup or script, ASP.NET throws an <xref:System.Web.HttpRequestValidationException> exception. Use this method if you anticipate that the request will contain markup (for example, you are allowing users to post content that contains markup) and you want to get the raw value of a request.  \\n  \\n> [!IMPORTANT]\\n>  If you use this property, you must manually check the data for potential cross-site scripting attacks.\"\n  syntax:\n    content: public System.Web.UnvalidatedRequestValues Unvalidated { get; }\n    return:\n      type: System.Web.UnvalidatedRequestValues\n      description: The HTTP request values that have not been checked using request validation.\n  overload: System.Web.HttpRequest.Unvalidated*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.HttpRequest.Url\n  id: Url\n  parent: System.Web.HttpRequest\n  langs:\n  - csharp\n  name: Url\n  nameWithType: HttpRequest.Url\n  fullName: System.Web.HttpRequest.Url\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Gets information about the URL of the current request.\n  remarks: ''\n  example:\n  - \"The following code example assigns the <xref:System.Uri> object of the current request to an object variable and displays the value of two properties of the URL object to the HTTP output.  \\n  \\n [!code-cs[Classic HttpRequest.Url Example#1](~/add/codesnippet/csharp/p-system.web.httprequest_34_1.cs)]\\n [!code-vb[Classic HttpRequest.Url Example#1](~/add/codesnippet/visualbasic/p-system.web.httprequest_34_1.vb)]\"\n  syntax:\n    content: public Uri Url { get; }\n    return:\n      type: System.Uri\n      description: A <xref:System.Uri> object that contains the URL of the current request.\n  overload: System.Web.HttpRequest.Url*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.HttpRequest.UrlReferrer\n  id: UrlReferrer\n  parent: System.Web.HttpRequest\n  langs:\n  - csharp\n  name: UrlReferrer\n  nameWithType: HttpRequest.UrlReferrer\n  fullName: System.Web.HttpRequest.UrlReferrer\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Gets information about the URL of the client's previous request that linked to the current URL.\n  remarks: ''\n  example:\n  - \"The following code example displays the value of two properties of the URL that referred the client to the current application.  \\n  \\n [!code-cs[Classic HttpRequest.UrlReferrer Example#1](~/add/codesnippet/csharp/p-system.web.httprequest_8_1.cs)]\\n [!code-vb[Classic HttpRequest.UrlReferrer Example#1](~/add/codesnippet/visualbasic/p-system.web.httprequest_8_1.vb)]\"\n  syntax:\n    content: public Uri UrlReferrer { get; }\n    return:\n      type: System.Uri\n      description: A <xref:System.Uri> object.\n  overload: System.Web.HttpRequest.UrlReferrer*\n  exceptions:\n  - type: System.UriFormatException\n    commentId: T:System.UriFormatException\n    description: The HTTP <xref uid=\"langword_csharp_Referer\" name=\"Referer\" href=\"\"></xref> request header is malformed and cannot be converted to a <xref:System.Uri> object.\n  platform:\n  - net462\n- uid: System.Web.HttpRequest.UserAgent\n  id: UserAgent\n  parent: System.Web.HttpRequest\n  langs:\n  - csharp\n  name: UserAgent\n  nameWithType: HttpRequest.UserAgent\n  fullName: System.Web.HttpRequest.UserAgent\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Gets the raw user agent string of the client browser.\n  remarks: ''\n  example:\n  - \"The following code example assigns the type identification of the requesting browser to a string variable.  \\n  \\n [!code-cs[Classic HttpRequest.UserAgent Example#1](~/add/codesnippet/csharp/p-system.web.httprequest_26_1.cs)]\\n [!code-vb[Classic HttpRequest.UserAgent Example#1](~/add/codesnippet/visualbasic/p-system.web.httprequest_26_1.vb)]\"\n  syntax:\n    content: public string UserAgent { get; }\n    return:\n      type: System.String\n      description: The raw user agent string of the client browser.\n  overload: System.Web.HttpRequest.UserAgent*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.HttpRequest.UserHostAddress\n  id: UserHostAddress\n  parent: System.Web.HttpRequest\n  langs:\n  - csharp\n  name: UserHostAddress\n  nameWithType: HttpRequest.UserHostAddress\n  fullName: System.Web.HttpRequest.UserHostAddress\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Gets the IP host address of the remote client.\n  remarks: ''\n  example:\n  - \"The following code example uses the <xref:System.Web.HttpUtility.HtmlEncode%2A> method to HTML-encode the value of the UserHostAddress property and the <xref:System.IO.TextWriter.WriteLine%2A> method to write the encoded value to the file. This code example is part of a larger example provided for the <xref:System.Web.HttpRequest> class.  \\n  \\n [!code-vb[System.Web.HttpRequest_Sample1#7](~/add/codesnippet/visualbasic/p-system.web.httprequest_9_1.aspx)]\\n [!code-cs[System.Web.HttpRequest_Sample1#7](~/add/codesnippet/csharp/p-system.web.httprequest_9_1.aspx)]\"\n  syntax:\n    content: public string UserHostAddress { get; }\n    return:\n      type: System.String\n      description: The IP address of the remote client.\n  overload: System.Web.HttpRequest.UserHostAddress*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.HttpRequest.UserHostName\n  id: UserHostName\n  parent: System.Web.HttpRequest\n  langs:\n  - csharp\n  name: UserHostName\n  nameWithType: HttpRequest.UserHostName\n  fullName: System.Web.HttpRequest.UserHostName\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Gets the DNS name of the remote client.\n  remarks: ''\n  example:\n  - \"The following code example uses the <xref:System.Web.HttpUtility.HtmlEncode%2A> method to HTML-encode the value of the UserHostName property and the <xref:System.IO.TextWriter.WriteLine%2A> method to write the encoded value to the file. This code example is part of a larger example provided for the <xref:System.Web.HttpRequest> class.  \\n  \\n [!code-vb[System.Web.HttpRequest_Sample1#7](~/add/codesnippet/visualbasic/p-system.web.httprequest_11_1.aspx)]\\n [!code-cs[System.Web.HttpRequest_Sample1#7](~/add/codesnippet/csharp/p-system.web.httprequest_11_1.aspx)]\"\n  syntax:\n    content: public string UserHostName { get; }\n    return:\n      type: System.String\n      description: The DNS name of the remote client.\n  overload: System.Web.HttpRequest.UserHostName*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.HttpRequest.UserLanguages\n  id: UserLanguages\n  parent: System.Web.HttpRequest\n  langs:\n  - csharp\n  name: UserLanguages\n  nameWithType: HttpRequest.UserLanguages\n  fullName: System.Web.HttpRequest.UserLanguages\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Gets a sorted string array of client language preferences.\n  remarks: ''\n  example:\n  - \"The following code example captures the multiple values returned by the UserLanguages property into a string array and writes each language name to a separate line of HTTP output.  \\n  \\n The language names are provided by the browser, and there is no definitive list of all possible codes.  Typically these consist of a two-character codes for the language, a hyphen, and a two-character code for the culture, such as \\\"en-us\\\" for U.S. English and \\\"fr-ca\\\" for Canadian French.  \\n  \\n [!code-vb[Classic HttpRequest.UserLanguages Example#1](~/add/codesnippet/visualbasic/p-system.web.httprequest_16_1.vb)]\\n [!code-cs[Classic HttpRequest.UserLanguages Example#1](~/add/codesnippet/csharp/p-system.web.httprequest_16_1.cs)]\"\n  syntax:\n    content: public string[] UserLanguages { get; }\n    return:\n      type: System.String[]\n      description: A sorted string array of client language preferences, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if empty.\n  overload: System.Web.HttpRequest.UserLanguages*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Web.HttpRequest.ValidateInput\n  id: ValidateInput\n  parent: System.Web.HttpRequest\n  langs:\n  - csharp\n  name: ValidateInput()\n  nameWithType: HttpRequest.ValidateInput()\n  fullName: System.Web.HttpRequest.ValidateInput()\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web\n  summary: Causes validation to occur for the collections accessed through the <xref:System.Web.HttpRequest.Cookies*>, <xref:System.Web.HttpRequest.Form*>, and <xref:System.Web.HttpRequest.QueryString*> properties.\n  remarks: \"The <xref:System.Web.HttpRequest> class uses input validation flags to track whether to perform validation on the request collections accessed through the <xref:System.Web.HttpRequest.Cookies%2A>, <xref:System.Web.HttpRequest.Form%2A>, and <xref:System.Web.HttpRequest.QueryString%2A> properties. The ValidateInput method sets these flags so that when the get accessors for the <xref:System.Web.HttpRequest.Cookies%2A>, <xref:System.Web.HttpRequest.Form%2A>, or <xref:System.Web.HttpRequest.QueryString%2A> property are invoked, input validation is performed. Validation works by checking all input data against a hard-coded list of potentially dangerous data.  \\n  \\n If the validation feature is enabled by page directive or configuration, this method is called during the page's `ProcessRequest` processing phase. The ValidateInput method can be called by your code if the validation feature is not enabled.\"\n  syntax:\n    content: public void ValidateInput ();\n    parameters: []\n  overload: System.Web.HttpRequest.ValidateInput*\n  exceptions:\n  - type: System.Web.HttpRequestValidationException\n    commentId: T:System.Web.HttpRequestValidationException\n    description: Potentially dangerous data was received from the client.\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.Web.HttpException\n  parent: System.Web\n  isExternal: false\n  name: HttpException\n  nameWithType: HttpException\n  fullName: System.Web.HttpException\n- uid: System.PlatformNotSupportedException\n  isExternal: true\n  name: System.PlatformNotSupportedException\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.UriFormatException\n  isExternal: true\n  name: System.UriFormatException\n- uid: System.Web.HttpRequestValidationException\n  parent: System.Web\n  isExternal: false\n  name: HttpRequestValidationException\n  nameWithType: HttpRequestValidationException\n  fullName: System.Web.HttpRequestValidationException\n- uid: System.Web.HttpRequest.#ctor(System.String,System.String,System.String)\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: HttpRequest(String,String,String)\n  nameWithType: HttpRequest.HttpRequest(String,String,String)\n  fullName: System.Web.HttpRequest.HttpRequest(String,String,String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Web.HttpRequest.Abort\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: Abort()\n  nameWithType: HttpRequest.Abort()\n  fullName: System.Web.HttpRequest.Abort()\n- uid: System.Web.HttpRequest.AcceptTypes\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: AcceptTypes\n  nameWithType: HttpRequest.AcceptTypes\n  fullName: System.Web.HttpRequest.AcceptTypes\n- uid: System.String[]\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String[]\n  spec.csharp:\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: String[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Web.HttpRequest.AnonymousID\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: AnonymousID\n  nameWithType: HttpRequest.AnonymousID\n  fullName: System.Web.HttpRequest.AnonymousID\n- uid: System.Web.HttpRequest.ApplicationPath\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: ApplicationPath\n  nameWithType: HttpRequest.ApplicationPath\n  fullName: System.Web.HttpRequest.ApplicationPath\n- uid: System.Web.HttpRequest.AppRelativeCurrentExecutionFilePath\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: AppRelativeCurrentExecutionFilePath\n  nameWithType: HttpRequest.AppRelativeCurrentExecutionFilePath\n  fullName: System.Web.HttpRequest.AppRelativeCurrentExecutionFilePath\n- uid: System.Web.HttpRequest.BinaryRead(System.Int32)\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: BinaryRead(Int32)\n  nameWithType: HttpRequest.BinaryRead(Int32)\n  fullName: System.Web.HttpRequest.BinaryRead(Int32)\n- uid: System.Byte[]\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: Byte[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Web.HttpRequest.Browser\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: Browser\n  nameWithType: HttpRequest.Browser\n  fullName: System.Web.HttpRequest.Browser\n- uid: System.Web.HttpBrowserCapabilities\n  parent: System.Web\n  isExternal: false\n  name: HttpBrowserCapabilities\n  nameWithType: HttpBrowserCapabilities\n  fullName: System.Web.HttpBrowserCapabilities\n- uid: System.Web.HttpRequest.ClientCertificate\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: ClientCertificate\n  nameWithType: HttpRequest.ClientCertificate\n  fullName: System.Web.HttpRequest.ClientCertificate\n- uid: System.Web.HttpClientCertificate\n  parent: System.Web\n  isExternal: false\n  name: HttpClientCertificate\n  nameWithType: HttpClientCertificate\n  fullName: System.Web.HttpClientCertificate\n- uid: System.Web.HttpRequest.ContentEncoding\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: ContentEncoding\n  nameWithType: HttpRequest.ContentEncoding\n  fullName: System.Web.HttpRequest.ContentEncoding\n- uid: System.Text.Encoding\n  parent: System.Text\n  isExternal: true\n  name: Encoding\n  nameWithType: Encoding\n  fullName: System.Text.Encoding\n- uid: System.Web.HttpRequest.ContentLength\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: ContentLength\n  nameWithType: HttpRequest.ContentLength\n  fullName: System.Web.HttpRequest.ContentLength\n- uid: System.Web.HttpRequest.ContentType\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: ContentType\n  nameWithType: HttpRequest.ContentType\n  fullName: System.Web.HttpRequest.ContentType\n- uid: System.Web.HttpRequest.Cookies\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: Cookies\n  nameWithType: HttpRequest.Cookies\n  fullName: System.Web.HttpRequest.Cookies\n- uid: System.Web.HttpCookieCollection\n  parent: System.Web\n  isExternal: false\n  name: HttpCookieCollection\n  nameWithType: HttpCookieCollection\n  fullName: System.Web.HttpCookieCollection\n- uid: System.Web.HttpRequest.CurrentExecutionFilePath\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: CurrentExecutionFilePath\n  nameWithType: HttpRequest.CurrentExecutionFilePath\n  fullName: System.Web.HttpRequest.CurrentExecutionFilePath\n- uid: System.Web.HttpRequest.CurrentExecutionFilePathExtension\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: CurrentExecutionFilePathExtension\n  nameWithType: HttpRequest.CurrentExecutionFilePathExtension\n  fullName: System.Web.HttpRequest.CurrentExecutionFilePathExtension\n- uid: System.Web.HttpRequest.FilePath\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: FilePath\n  nameWithType: HttpRequest.FilePath\n  fullName: System.Web.HttpRequest.FilePath\n- uid: System.Web.HttpRequest.Files\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: Files\n  nameWithType: HttpRequest.Files\n  fullName: System.Web.HttpRequest.Files\n- uid: System.Web.HttpFileCollection\n  parent: System.Web\n  isExternal: false\n  name: HttpFileCollection\n  nameWithType: HttpFileCollection\n  fullName: System.Web.HttpFileCollection\n- uid: System.Web.HttpRequest.Filter\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: Filter\n  nameWithType: HttpRequest.Filter\n  fullName: System.Web.HttpRequest.Filter\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: true\n  name: Stream\n  nameWithType: Stream\n  fullName: System.IO.Stream\n- uid: System.Web.HttpRequest.Form\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: Form\n  nameWithType: HttpRequest.Form\n  fullName: System.Web.HttpRequest.Form\n- uid: System.Collections.Specialized.NameValueCollection\n  parent: System.Collections.Specialized\n  isExternal: false\n  name: NameValueCollection\n  nameWithType: NameValueCollection\n  fullName: System.Collections.Specialized.NameValueCollection\n- uid: System.Web.HttpRequest.GetBufferedInputStream\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: GetBufferedInputStream()\n  nameWithType: HttpRequest.GetBufferedInputStream()\n  fullName: System.Web.HttpRequest.GetBufferedInputStream()\n- uid: System.Web.HttpRequest.GetBufferlessInputStream\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: GetBufferlessInputStream()\n  nameWithType: HttpRequest.GetBufferlessInputStream()\n  fullName: System.Web.HttpRequest.GetBufferlessInputStream()\n- uid: System.Web.HttpRequest.GetBufferlessInputStream(System.Boolean)\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: GetBufferlessInputStream(Boolean)\n  nameWithType: HttpRequest.GetBufferlessInputStream(Boolean)\n  fullName: System.Web.HttpRequest.GetBufferlessInputStream(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Web.HttpRequest.Headers\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: Headers\n  nameWithType: HttpRequest.Headers\n  fullName: System.Web.HttpRequest.Headers\n- uid: System.Web.HttpRequest.HttpChannelBinding\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: HttpChannelBinding\n  nameWithType: HttpRequest.HttpChannelBinding\n  fullName: System.Web.HttpRequest.HttpChannelBinding\n- uid: System.Security.Authentication.ExtendedProtection.ChannelBinding\n  parent: System.Security.Authentication.ExtendedProtection\n  isExternal: true\n  name: ChannelBinding\n  nameWithType: ChannelBinding\n  fullName: System.Security.Authentication.ExtendedProtection.ChannelBinding\n- uid: System.Web.HttpRequest.HttpMethod\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: HttpMethod\n  nameWithType: HttpRequest.HttpMethod\n  fullName: System.Web.HttpRequest.HttpMethod\n- uid: System.Web.HttpRequest.InputStream\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: InputStream\n  nameWithType: HttpRequest.InputStream\n  fullName: System.Web.HttpRequest.InputStream\n- uid: System.Web.HttpRequest.InsertEntityBody\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: InsertEntityBody()\n  nameWithType: HttpRequest.InsertEntityBody()\n  fullName: System.Web.HttpRequest.InsertEntityBody()\n- uid: System.Web.HttpRequest.InsertEntityBody(System.Byte[],System.Int32,System.Int32)\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: InsertEntityBody(Byte[],Int32,Int32)\n  nameWithType: HttpRequest.InsertEntityBody(Byte[],Int32,Int32)\n  fullName: System.Web.HttpRequest.InsertEntityBody(Byte[],Int32,Int32)\n- uid: System.Web.HttpRequest.IsAuthenticated\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: IsAuthenticated\n  nameWithType: HttpRequest.IsAuthenticated\n  fullName: System.Web.HttpRequest.IsAuthenticated\n- uid: System.Web.HttpRequest.IsLocal\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: IsLocal\n  nameWithType: HttpRequest.IsLocal\n  fullName: System.Web.HttpRequest.IsLocal\n- uid: System.Web.HttpRequest.IsSecureConnection\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: IsSecureConnection\n  nameWithType: HttpRequest.IsSecureConnection\n  fullName: System.Web.HttpRequest.IsSecureConnection\n- uid: System.Web.HttpRequest.Item(System.String)\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: Item(String)\n  nameWithType: HttpRequest.Item(String)\n  fullName: System.Web.HttpRequest.Item(String)\n- uid: System.Web.HttpRequest.LogonUserIdentity\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: LogonUserIdentity\n  nameWithType: HttpRequest.LogonUserIdentity\n  fullName: System.Web.HttpRequest.LogonUserIdentity\n- uid: System.Security.Principal.WindowsIdentity\n  parent: System.Security.Principal\n  isExternal: false\n  name: WindowsIdentity\n  nameWithType: WindowsIdentity\n  fullName: System.Security.Principal.WindowsIdentity\n- uid: System.Web.HttpRequest.MapImageCoordinates(System.String)\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: MapImageCoordinates(String)\n  nameWithType: HttpRequest.MapImageCoordinates(String)\n  fullName: System.Web.HttpRequest.MapImageCoordinates(String)\n- uid: System.Int32[]\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32[]\n  spec.csharp:\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: Int32[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Web.HttpRequest.MapPath(System.String)\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: MapPath(String)\n  nameWithType: HttpRequest.MapPath(String)\n  fullName: System.Web.HttpRequest.MapPath(String)\n- uid: System.Web.HttpRequest.MapPath(System.String,System.String,System.Boolean)\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: MapPath(String,String,Boolean)\n  nameWithType: HttpRequest.MapPath(String,String,Boolean)\n  fullName: System.Web.HttpRequest.MapPath(String,String,Boolean)\n- uid: System.Web.HttpRequest.MapRawImageCoordinates(System.String)\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: MapRawImageCoordinates(String)\n  nameWithType: HttpRequest.MapRawImageCoordinates(String)\n  fullName: System.Web.HttpRequest.MapRawImageCoordinates(String)\n- uid: System.Double[]\n  parent: System\n  isExternal: true\n  name: Double\n  nameWithType: Double\n  fullName: System.Double[]\n  spec.csharp:\n  - uid: System.Double\n    name: Double\n    nameWithType: Double\n    fullName: Double[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Web.HttpRequest.Params\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: Params\n  nameWithType: HttpRequest.Params\n  fullName: System.Web.HttpRequest.Params\n- uid: System.Web.HttpRequest.Path\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: Path\n  nameWithType: HttpRequest.Path\n  fullName: System.Web.HttpRequest.Path\n- uid: System.Web.HttpRequest.PathInfo\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: PathInfo\n  nameWithType: HttpRequest.PathInfo\n  fullName: System.Web.HttpRequest.PathInfo\n- uid: System.Web.HttpRequest.PhysicalApplicationPath\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: PhysicalApplicationPath\n  nameWithType: HttpRequest.PhysicalApplicationPath\n  fullName: System.Web.HttpRequest.PhysicalApplicationPath\n- uid: System.Web.HttpRequest.PhysicalPath\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: PhysicalPath\n  nameWithType: HttpRequest.PhysicalPath\n  fullName: System.Web.HttpRequest.PhysicalPath\n- uid: System.Web.HttpRequest.QueryString\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: QueryString\n  nameWithType: HttpRequest.QueryString\n  fullName: System.Web.HttpRequest.QueryString\n- uid: System.Web.HttpRequest.RawUrl\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: RawUrl\n  nameWithType: HttpRequest.RawUrl\n  fullName: System.Web.HttpRequest.RawUrl\n- uid: System.Web.HttpRequest.ReadEntityBodyMode\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: ReadEntityBodyMode\n  nameWithType: HttpRequest.ReadEntityBodyMode\n  fullName: System.Web.HttpRequest.ReadEntityBodyMode\n- uid: System.Web.ReadEntityBodyMode\n  parent: System.Web\n  isExternal: false\n  name: ReadEntityBodyMode\n  nameWithType: ReadEntityBodyMode\n  fullName: System.Web.ReadEntityBodyMode\n- uid: System.Web.HttpRequest.RequestContext\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: RequestContext\n  nameWithType: HttpRequest.RequestContext\n  fullName: System.Web.HttpRequest.RequestContext\n- uid: System.Web.Routing.RequestContext\n  parent: System.Web.Routing\n  isExternal: true\n  name: RequestContext\n  nameWithType: RequestContext\n  fullName: System.Web.Routing.RequestContext\n- uid: System.Web.HttpRequest.RequestType\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: RequestType\n  nameWithType: HttpRequest.RequestType\n  fullName: System.Web.HttpRequest.RequestType\n- uid: System.Web.HttpRequest.SaveAs(System.String,System.Boolean)\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: SaveAs(String,Boolean)\n  nameWithType: HttpRequest.SaveAs(String,Boolean)\n  fullName: System.Web.HttpRequest.SaveAs(String,Boolean)\n- uid: System.Web.HttpRequest.ServerVariables\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: ServerVariables\n  nameWithType: HttpRequest.ServerVariables\n  fullName: System.Web.HttpRequest.ServerVariables\n- uid: System.Web.HttpRequest.TimedOutToken\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: TimedOutToken\n  nameWithType: HttpRequest.TimedOutToken\n  fullName: System.Web.HttpRequest.TimedOutToken\n- uid: System.Threading.CancellationToken\n  parent: System.Threading\n  isExternal: true\n  name: CancellationToken\n  nameWithType: CancellationToken\n  fullName: System.Threading.CancellationToken\n- uid: System.Web.HttpRequest.TlsTokenBindingInfo\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: TlsTokenBindingInfo\n  nameWithType: HttpRequest.TlsTokenBindingInfo\n  fullName: System.Web.HttpRequest.TlsTokenBindingInfo\n- uid: System.Web.ITlsTokenBindingInfo\n  parent: System.Web\n  isExternal: false\n  name: ITlsTokenBindingInfo\n  nameWithType: ITlsTokenBindingInfo\n  fullName: System.Web.ITlsTokenBindingInfo\n- uid: System.Web.HttpRequest.TotalBytes\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: TotalBytes\n  nameWithType: HttpRequest.TotalBytes\n  fullName: System.Web.HttpRequest.TotalBytes\n- uid: System.Web.HttpRequest.Unvalidated\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: Unvalidated\n  nameWithType: HttpRequest.Unvalidated\n  fullName: System.Web.HttpRequest.Unvalidated\n- uid: System.Web.UnvalidatedRequestValues\n  parent: System.Web\n  isExternal: false\n  name: UnvalidatedRequestValues\n  nameWithType: UnvalidatedRequestValues\n  fullName: System.Web.UnvalidatedRequestValues\n- uid: System.Web.HttpRequest.Url\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: Url\n  nameWithType: HttpRequest.Url\n  fullName: System.Web.HttpRequest.Url\n- uid: System.Uri\n  parent: System\n  isExternal: true\n  name: Uri\n  nameWithType: Uri\n  fullName: System.Uri\n- uid: System.Web.HttpRequest.UrlReferrer\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: UrlReferrer\n  nameWithType: HttpRequest.UrlReferrer\n  fullName: System.Web.HttpRequest.UrlReferrer\n- uid: System.Web.HttpRequest.UserAgent\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: UserAgent\n  nameWithType: HttpRequest.UserAgent\n  fullName: System.Web.HttpRequest.UserAgent\n- uid: System.Web.HttpRequest.UserHostAddress\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: UserHostAddress\n  nameWithType: HttpRequest.UserHostAddress\n  fullName: System.Web.HttpRequest.UserHostAddress\n- uid: System.Web.HttpRequest.UserHostName\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: UserHostName\n  nameWithType: HttpRequest.UserHostName\n  fullName: System.Web.HttpRequest.UserHostName\n- uid: System.Web.HttpRequest.UserLanguages\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: UserLanguages\n  nameWithType: HttpRequest.UserLanguages\n  fullName: System.Web.HttpRequest.UserLanguages\n- uid: System.Web.HttpRequest.ValidateInput\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: ValidateInput()\n  nameWithType: HttpRequest.ValidateInput()\n  fullName: System.Web.HttpRequest.ValidateInput()\n- uid: System.Web.HttpRequest.#ctor*\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: HttpRequest\n  nameWithType: HttpRequest.HttpRequest\n- uid: System.Web.HttpRequest.Abort*\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: Abort\n  nameWithType: HttpRequest.Abort\n- uid: System.Web.HttpRequest.AcceptTypes*\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: AcceptTypes\n  nameWithType: HttpRequest.AcceptTypes\n- uid: System.Web.HttpRequest.AnonymousID*\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: AnonymousID\n  nameWithType: HttpRequest.AnonymousID\n- uid: System.Web.HttpRequest.ApplicationPath*\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: ApplicationPath\n  nameWithType: HttpRequest.ApplicationPath\n- uid: System.Web.HttpRequest.AppRelativeCurrentExecutionFilePath*\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: AppRelativeCurrentExecutionFilePath\n  nameWithType: HttpRequest.AppRelativeCurrentExecutionFilePath\n- uid: System.Web.HttpRequest.BinaryRead*\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: BinaryRead\n  nameWithType: HttpRequest.BinaryRead\n- uid: System.Web.HttpRequest.Browser*\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: Browser\n  nameWithType: HttpRequest.Browser\n- uid: System.Web.HttpRequest.ClientCertificate*\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: ClientCertificate\n  nameWithType: HttpRequest.ClientCertificate\n- uid: System.Web.HttpRequest.ContentEncoding*\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: ContentEncoding\n  nameWithType: HttpRequest.ContentEncoding\n- uid: System.Web.HttpRequest.ContentLength*\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: ContentLength\n  nameWithType: HttpRequest.ContentLength\n- uid: System.Web.HttpRequest.ContentType*\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: ContentType\n  nameWithType: HttpRequest.ContentType\n- uid: System.Web.HttpRequest.Cookies*\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: Cookies\n  nameWithType: HttpRequest.Cookies\n- uid: System.Web.HttpRequest.CurrentExecutionFilePath*\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: CurrentExecutionFilePath\n  nameWithType: HttpRequest.CurrentExecutionFilePath\n- uid: System.Web.HttpRequest.CurrentExecutionFilePathExtension*\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: CurrentExecutionFilePathExtension\n  nameWithType: HttpRequest.CurrentExecutionFilePathExtension\n- uid: System.Web.HttpRequest.FilePath*\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: FilePath\n  nameWithType: HttpRequest.FilePath\n- uid: System.Web.HttpRequest.Files*\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: Files\n  nameWithType: HttpRequest.Files\n- uid: System.Web.HttpRequest.Filter*\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: Filter\n  nameWithType: HttpRequest.Filter\n- uid: System.Web.HttpRequest.Form*\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: Form\n  nameWithType: HttpRequest.Form\n- uid: System.Web.HttpRequest.GetBufferedInputStream*\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: GetBufferedInputStream\n  nameWithType: HttpRequest.GetBufferedInputStream\n- uid: System.Web.HttpRequest.GetBufferlessInputStream*\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: GetBufferlessInputStream\n  nameWithType: HttpRequest.GetBufferlessInputStream\n- uid: System.Web.HttpRequest.Headers*\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: Headers\n  nameWithType: HttpRequest.Headers\n- uid: System.Web.HttpRequest.HttpChannelBinding*\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: HttpChannelBinding\n  nameWithType: HttpRequest.HttpChannelBinding\n- uid: System.Web.HttpRequest.HttpMethod*\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: HttpMethod\n  nameWithType: HttpRequest.HttpMethod\n- uid: System.Web.HttpRequest.InputStream*\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: InputStream\n  nameWithType: HttpRequest.InputStream\n- uid: System.Web.HttpRequest.InsertEntityBody*\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: InsertEntityBody\n  nameWithType: HttpRequest.InsertEntityBody\n- uid: System.Web.HttpRequest.IsAuthenticated*\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: IsAuthenticated\n  nameWithType: HttpRequest.IsAuthenticated\n- uid: System.Web.HttpRequest.IsLocal*\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: IsLocal\n  nameWithType: HttpRequest.IsLocal\n- uid: System.Web.HttpRequest.IsSecureConnection*\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: IsSecureConnection\n  nameWithType: HttpRequest.IsSecureConnection\n- uid: System.Web.HttpRequest.Item*\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: Item\n  nameWithType: HttpRequest.Item\n- uid: System.Web.HttpRequest.LogonUserIdentity*\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: LogonUserIdentity\n  nameWithType: HttpRequest.LogonUserIdentity\n- uid: System.Web.HttpRequest.MapImageCoordinates*\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: MapImageCoordinates\n  nameWithType: HttpRequest.MapImageCoordinates\n- uid: System.Web.HttpRequest.MapPath*\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: MapPath\n  nameWithType: HttpRequest.MapPath\n- uid: System.Web.HttpRequest.MapRawImageCoordinates*\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: MapRawImageCoordinates\n  nameWithType: HttpRequest.MapRawImageCoordinates\n- uid: System.Web.HttpRequest.Params*\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: Params\n  nameWithType: HttpRequest.Params\n- uid: System.Web.HttpRequest.Path*\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: Path\n  nameWithType: HttpRequest.Path\n- uid: System.Web.HttpRequest.PathInfo*\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: PathInfo\n  nameWithType: HttpRequest.PathInfo\n- uid: System.Web.HttpRequest.PhysicalApplicationPath*\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: PhysicalApplicationPath\n  nameWithType: HttpRequest.PhysicalApplicationPath\n- uid: System.Web.HttpRequest.PhysicalPath*\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: PhysicalPath\n  nameWithType: HttpRequest.PhysicalPath\n- uid: System.Web.HttpRequest.QueryString*\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: QueryString\n  nameWithType: HttpRequest.QueryString\n- uid: System.Web.HttpRequest.RawUrl*\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: RawUrl\n  nameWithType: HttpRequest.RawUrl\n- uid: System.Web.HttpRequest.ReadEntityBodyMode*\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: ReadEntityBodyMode\n  nameWithType: HttpRequest.ReadEntityBodyMode\n- uid: System.Web.HttpRequest.RequestContext*\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: RequestContext\n  nameWithType: HttpRequest.RequestContext\n- uid: System.Web.HttpRequest.RequestType*\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: RequestType\n  nameWithType: HttpRequest.RequestType\n- uid: System.Web.HttpRequest.SaveAs*\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: SaveAs\n  nameWithType: HttpRequest.SaveAs\n- uid: System.Web.HttpRequest.ServerVariables*\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: ServerVariables\n  nameWithType: HttpRequest.ServerVariables\n- uid: System.Web.HttpRequest.TimedOutToken*\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: TimedOutToken\n  nameWithType: HttpRequest.TimedOutToken\n- uid: System.Web.HttpRequest.TlsTokenBindingInfo*\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: TlsTokenBindingInfo\n  nameWithType: HttpRequest.TlsTokenBindingInfo\n- uid: System.Web.HttpRequest.TotalBytes*\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: TotalBytes\n  nameWithType: HttpRequest.TotalBytes\n- uid: System.Web.HttpRequest.Unvalidated*\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: Unvalidated\n  nameWithType: HttpRequest.Unvalidated\n- uid: System.Web.HttpRequest.Url*\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: Url\n  nameWithType: HttpRequest.Url\n- uid: System.Web.HttpRequest.UrlReferrer*\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: UrlReferrer\n  nameWithType: HttpRequest.UrlReferrer\n- uid: System.Web.HttpRequest.UserAgent*\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: UserAgent\n  nameWithType: HttpRequest.UserAgent\n- uid: System.Web.HttpRequest.UserHostAddress*\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: UserHostAddress\n  nameWithType: HttpRequest.UserHostAddress\n- uid: System.Web.HttpRequest.UserHostName*\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: UserHostName\n  nameWithType: HttpRequest.UserHostName\n- uid: System.Web.HttpRequest.UserLanguages*\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: UserLanguages\n  nameWithType: HttpRequest.UserLanguages\n- uid: System.Web.HttpRequest.ValidateInput*\n  parent: System.Web.HttpRequest\n  isExternal: false\n  name: ValidateInput\n  nameWithType: HttpRequest.ValidateInput\n"}