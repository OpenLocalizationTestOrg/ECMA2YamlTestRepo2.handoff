{"nodes":[{"pos":[2133,2200],"content":"Represents an OLE compound file that contains an encrypted package.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents an OLE compound file that contains an encrypted package.","pos":[0,67]}]},{"pos":[2212,2534],"content":"EncryptedPackageEnvelope has no public constructors.  An EncryptedPackageEnvelope is created by use of the static <xref:System.IO.Packaging.EncryptedPackageEnvelope.Create%2A>, <xref:System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage%2A>, or <xref:System.IO.Packaging.EncryptedPackageEnvelope.Open%2A> methods.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"EncryptedPackageEnvelope has no public constructors.  An EncryptedPackageEnvelope is created by use of the static <xref:System.IO.Packaging.EncryptedPackageEnvelope.Create%2A>, <xref:System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage%2A>, or <xref:System.IO.Packaging.EncryptedPackageEnvelope.Open%2A> methods.","pos":[0,322],"nodes":[{"content":"EncryptedPackageEnvelope has no public constructors.","pos":[0,52]},{"content":"An EncryptedPackageEnvelope is created by use of the static &lt;xref:System.IO.Packaging.EncryptedPackageEnvelope.Create%2A&gt;, &lt;xref:System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage%2A&gt;, or &lt;xref:System.IO.Packaging.EncryptedPackageEnvelope.Open%2A&gt; methods.","pos":[54,322],"source":"  An EncryptedPackageEnvelope is created by use of the static <xref:System.IO.Packaging.EncryptedPackageEnvelope.Create%2A>, <xref:System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage%2A>, or <xref:System.IO.Packaging.EncryptedPackageEnvelope.Open%2A> methods."}]}]},{"pos":[3092,3161],"content":"Closes the encrypted package and the OLE compound file that holds it.","needQuote":true,"needEscape":true,"nodes":[{"content":"Closes the encrypted package and the OLE compound file that holds it.","pos":[0,69]}]},{"pos":[4459,4572],"content":"Creates and returns an <bpt id=\"p1\">&lt;xref href=\"System.IO.Packaging.EncryptedPackageEnvelope\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> on the specified stream.","needQuote":true,"needEscape":true,"source":"Creates and returns an <xref href=\"System.IO.Packaging.EncryptedPackageEnvelope\"></xref> on the specified stream."},{"pos":[4584,4639],"content":"The current user has read/write access to the new file.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The current user has read/write access to the new file.","pos":[0,55]}]},{"pos":[4981,5020],"content":"The stream on which to create the file.","needQuote":true,"needEscape":true,"nodes":[{"content":"The stream on which to create the file.","pos":[0,39]}]},{"pos":[5125,5183],"content":"The publish license that is embedded in the compound file.","needQuote":true,"needEscape":true,"nodes":[{"content":"The publish license that is embedded in the compound file.","pos":[0,58]}]},{"pos":[5288,5394],"content":"An object that determines what operations the current user is allowed to perform on the encrypted content.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that determines what operations the current user is allowed to perform on the encrypted content.","pos":[0,106]}]},{"pos":[5483,5567],"content":"The newly created <bpt id=\"p1\">&lt;xref href=\"System.IO.Packaging.EncryptedPackageEnvelope\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The newly created <xref href=\"System.IO.Packaging.EncryptedPackageEnvelope\"></xref>."},{"pos":[5749,5841],"content":"<ph id=\"ph1\">&lt;code&gt;envelopeStream&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>envelopeStream</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[5944,6007],"content":"<ph id=\"ph1\">&lt;code&gt;envelopeStream&lt;/code&gt;</ph> does not provide read/write access.","needQuote":true,"needEscape":true,"source":"<code>envelopeStream</code> does not provide read/write access."},{"pos":[6730,6856],"content":"Creates and returns an <bpt id=\"p1\">&lt;xref href=\"System.IO.Packaging.EncryptedPackageEnvelope\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and gives it the specified file name.","needQuote":true,"needEscape":true,"source":"Creates and returns an <xref href=\"System.IO.Packaging.EncryptedPackageEnvelope\"></xref> and gives it the specified file name."},{"pos":[6869,6997],"content":"If a file with the specified name already exists, it is overwritten.       The current user has read/write access to the file.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If a file with the specified name already exists, it is overwritten.       The current user has read/write access to the file.","pos":[0,126],"nodes":[{"content":"If a file with the specified name already exists, it is overwritten.","pos":[0,68]},{"content":"The current user has read/write access to the file.","pos":[75,126]}]}]},{"pos":[7331,7365],"content":"The name of the OLE compound file.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the OLE compound file.","pos":[0,34]}]},{"pos":[7470,7528],"content":"The publish license that is embedded in the compound file.","needQuote":true,"needEscape":true,"nodes":[{"content":"The publish license that is embedded in the compound file.","pos":[0,58]}]},{"pos":[7633,7739],"content":"An object that determines what operations the current user is allowed to perform on the encrypted content.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that determines what operations the current user is allowed to perform on the encrypted content.","pos":[0,106]}]},{"pos":[7828,7912],"content":"The newly created <bpt id=\"p1\">&lt;xref href=\"System.IO.Packaging.EncryptedPackageEnvelope\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The newly created <xref href=\"System.IO.Packaging.EncryptedPackageEnvelope\"></xref>."},{"pos":[8094,8188],"content":"<ph id=\"ph1\">&lt;code&gt;envelopeFileName&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>envelopeFileName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[9027,9201],"content":"Creates and returns an <bpt id=\"p1\">&lt;xref href=\"System.IO.Packaging.EncryptedPackageEnvelope\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> (on the specified stream) that uses the specified unencrypted package as its content.","needQuote":true,"needEscape":true,"source":"Creates and returns an <xref href=\"System.IO.Packaging.EncryptedPackageEnvelope\"></xref> (on the specified stream) that uses the specified unencrypted package as its content."},{"pos":[9213,9268],"content":"The current user has read/write access to the new file.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The current user has read/write access to the new file.","pos":[0,55]}]},{"pos":[10141,10180],"content":"The stream on which to create the file.","needQuote":true,"needEscape":true,"nodes":[{"content":"The stream on which to create the file.","pos":[0,39]}]},{"pos":[10253,10310],"content":"The stream representing the existing unencrypted package.","needQuote":true,"needEscape":true,"nodes":[{"content":"The stream representing the existing unencrypted package.","pos":[0,57]}]},{"pos":[10415,10473],"content":"The publish license that is embedded in the compound file.","needQuote":true,"needEscape":true,"nodes":[{"content":"The publish license that is embedded in the compound file.","pos":[0,58]}]},{"pos":[10578,10684],"content":"An object that determines what operations the current user is allowed to perform on the encrypted content.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that determines what operations the current user is allowed to perform on the encrypted content.","pos":[0,106]}]},{"pos":[10773,10857],"content":"The newly created <bpt id=\"p1\">&lt;xref href=\"System.IO.Packaging.EncryptedPackageEnvelope\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The newly created <xref href=\"System.IO.Packaging.EncryptedPackageEnvelope\"></xref>."},{"pos":[11050,11172],"content":"<ph id=\"ph1\">&lt;code&gt;envelopeStream&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;packageStream&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>envelopeStream</code> or <code>packageStream</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[11275,11338],"content":"<ph id=\"ph1\">&lt;code&gt;envelopeStream&lt;/code&gt;</ph> does not provide read/write access.","needQuote":true,"needEscape":true,"source":"<code>envelopeStream</code> does not provide read/write access."},{"pos":[12171,12357],"content":"Creates and returns an <bpt id=\"p1\">&lt;xref href=\"System.IO.Packaging.EncryptedPackageEnvelope\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that uses the specified unencrypted package as its content, and gives it the specified file name.","needQuote":true,"needEscape":true,"source":"Creates and returns an <xref href=\"System.IO.Packaging.EncryptedPackageEnvelope\"></xref> that uses the specified unencrypted package as its content, and gives it the specified file name."},{"pos":[12370,12498],"content":"If a file with the specified name already exists, it is overwritten.       The current user has read/write access to the file.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"If a file with the specified name already exists, it is overwritten.       The current user has read/write access to the file.","pos":[0,126],"nodes":[{"content":"If a file with the specified name already exists, it is overwritten.","pos":[0,68]},{"content":"The current user has read/write access to the file.","pos":[75,126]}]}]},{"pos":[13308,13342],"content":"The name of the OLE compound file.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the OLE compound file.","pos":[0,34]}]},{"pos":[13415,13472],"content":"The stream representing the existing unencrypted package.","needQuote":true,"needEscape":true,"nodes":[{"content":"The stream representing the existing unencrypted package.","pos":[0,57]}]},{"pos":[13577,13635],"content":"The publish license that is embedded in the compound file.","needQuote":true,"needEscape":true,"nodes":[{"content":"The publish license that is embedded in the compound file.","pos":[0,58]}]},{"pos":[13740,13846],"content":"An object that determines what operations the current user is allowed to perform on the encrypted content.","needQuote":true,"needEscape":true,"nodes":[{"content":"An object that determines what operations the current user is allowed to perform on the encrypted content.","pos":[0,106]}]},{"pos":[13935,14019],"content":"The newly created <bpt id=\"p1\">&lt;xref href=\"System.IO.Packaging.EncryptedPackageEnvelope\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The newly created <xref href=\"System.IO.Packaging.EncryptedPackageEnvelope\"></xref>."},{"pos":[14212,14336],"content":"<ph id=\"ph1\">&lt;code&gt;envelopeFileName&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;packageStream&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>envelopeFileName</code> or <code>packageStream</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[14734,14835],"content":"Releases all resources used by the <bpt id=\"p1\">&lt;xref href=\"System.IO.Packaging.EncryptedPackageEnvelope\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Releases all resources used by the <xref href=\"System.IO.Packaging.EncryptedPackageEnvelope\"></xref>."},{"pos":[14848,15786],"content":"Call Dispose when finished with a <xref:System.IO.Packaging.EncryptedPackageEnvelope>. The Dispose method leaves the <xref:System.IO.Packaging.EncryptedPackageEnvelope> in an unusable state. After calling Dispose, you must release all references to the <xref:System.IO.Packaging.EncryptedPackageEnvelope> so the garbage collector can reclaim the memory that the <xref:System.IO.Packaging.EncryptedPackageEnvelope> was occupying. For more information, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md) and [Implementing a Dispose Method](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] >  Always call Dispose before you release your last reference to the <xref:System.IO.Packaging.EncryptedPackageEnvelope>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.IO.Packaging.EncryptedPackageEnvelope> object's <xref:System.Object.Finalize%2A> method.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Call Dispose when finished with a &lt;xref:System.IO.Packaging.EncryptedPackageEnvelope&gt;.","pos":[0,86],"source":"Call Dispose when finished with a <xref:System.IO.Packaging.EncryptedPackageEnvelope>."},{"content":"The Dispose method leaves the &lt;xref:System.IO.Packaging.EncryptedPackageEnvelope&gt; in an unusable state.","pos":[87,190],"source":" The Dispose method leaves the <xref:System.IO.Packaging.EncryptedPackageEnvelope> in an unusable state."},{"content":"After calling Dispose, you must release all references to the &lt;xref:System.IO.Packaging.EncryptedPackageEnvelope&gt; so the garbage collector can reclaim the memory that the &lt;xref:System.IO.Packaging.EncryptedPackageEnvelope&gt; was occupying.","pos":[191,428],"source":" After calling Dispose, you must release all references to the <xref:System.IO.Packaging.EncryptedPackageEnvelope> so the garbage collector can reclaim the memory that the <xref:System.IO.Packaging.EncryptedPackageEnvelope> was occupying."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Cleaning Up Unmanaged Resources<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id=\"p2\">[</bpt>Implementing a Dispose Method<ept id=\"p2\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[429,603],"source":" For more information, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md) and [Implementing a Dispose Method](~/add/includes/ajax-current-ext-md.md)."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Always call Dispose before you release your last reference to the &lt;xref:System.IO.Packaging.EncryptedPackageEnvelope&gt;.","pos":[609,740],"source":"      > [!NOTE] >  Always call Dispose before you release your last reference to the <xref:System.IO.Packaging.EncryptedPackageEnvelope>."},{"content":"Otherwise, the resources it is using will not be freed until the garbage collector calls the &lt;xref:System.IO.Packaging.EncryptedPackageEnvelope&gt; object's &lt;xref:System.Object.Finalize%2A&gt; method.","pos":[741,935],"source":" Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.IO.Packaging.EncryptedPackageEnvelope> object's <xref:System.Object.Finalize%2A> method."}]},{"pos":[16387,16544],"content":"Releases the unmanaged resources used by the <bpt id=\"p1\">&lt;xref href=\"System.IO.Packaging.EncryptedPackageEnvelope\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and optionally releases the managed resources.","needQuote":true,"needEscape":true,"source":"Releases the unmanaged resources used by the <xref href=\"System.IO.Packaging.EncryptedPackageEnvelope\"></xref> and optionally releases the managed resources."},{"pos":[16557,17104],"content":"This method is called by the public `Dispose()`method and the <xref:System.Object.Finalize%2A> method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.       When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.IO.Packaging.EncryptedPackageEnvelope> references. This method invokes the `Dispose()` method of each referenced object.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method is called by the public <ph id=\"ph1\">`Dispose()`</ph>method and the &lt;xref:System.Object.Finalize%2A&gt; method.","pos":[0,102],"source":"This method is called by the public `Dispose()`method and the <xref:System.Object.Finalize%2A> method."},{"content":"<ph id=\"ph1\">`Dispose()`</ph> invokes the protected <ph id=\"ph2\">`Dispose(Boolean)`</ph> method with the <ph id=\"ph3\">`disposing`</ph> parameter set to <ph id=\"ph4\">`true`</ph>.","pos":[103,208],"source":"`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`."},{"content":"&lt;xref:System.Object.Finalize%2A&gt; invokes <ph id=\"ph1\">`Dispose`</ph> with <ph id=\"ph2\">`disposing`</ph> set to <ph id=\"ph3\">`false`</ph>.","pos":[209,292],"source":" <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`."},{"content":"When the <ph id=\"ph1\">`disposing`</ph> parameter is true, this method releases all resources held by any managed objects that this &lt;xref:System.IO.Packaging.EncryptedPackageEnvelope&gt; references.","pos":[299,475],"source":"       When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.IO.Packaging.EncryptedPackageEnvelope> references."},{"content":"This method invokes the <ph id=\"ph1\">`Dispose()`</ph> method of each referenced object.","pos":[476,545],"source":" This method invokes the `Dispose()` method of each referenced object."}]},{"pos":[17260,17469],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to release both managed and unmanaged resources; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> to release only unmanaged resources.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only unmanaged resources."},{"pos":[17981,18073],"content":"Gets a value that specifies whether the file was opened with access to read, write, or both.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that specifies whether the file was opened with access to read, write, or both.","pos":[0,92]}]},{"pos":[18213,18296],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.IO.FileAccess\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value that was used to open the file.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.IO.FileAccess\"></xref> value that was used to open the file."},{"pos":[18774,18894],"content":"Flush the stream for both the <bpt id=\"p1\">&lt;xref href=\"System.IO.Packaging.EncryptedPackageEnvelope\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and its package content.","needQuote":true,"needEscape":true,"source":"Flush the stream for both the <xref href=\"System.IO.Packaging.EncryptedPackageEnvelope\"></xref> and its package content."},{"pos":[19452,19556],"content":"Gets the encrypted package inside the <bpt id=\"p1\">&lt;xref href=\"System.IO.Packaging.EncryptedPackageEnvelope\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets the encrypted package inside the <xref href=\"System.IO.Packaging.EncryptedPackageEnvelope\"></xref>."},{"pos":[19720,19789],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.IO.Packaging.Package\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> in the envelope.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.IO.Packaging.Package\"></xref> in the envelope."},{"pos":[20422,20532],"content":"Gets a value specifying whether the specified stream is an OLE compound file with an encrypted package stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value specifying whether the specified stream is an OLE compound file with an encrypted package stream.","pos":[0,110]}]},{"pos":[20710,20736],"content":"The stream that is tested.","needQuote":true,"needEscape":true,"nodes":[{"content":"The stream that is tested.","pos":[0,26]}]},{"pos":[20795,21012],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the specified stream is an OLE compound file with an encrypted package stream; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified stream is an OLE compound file with an encrypted package stream; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[21214,21298],"content":"<ph id=\"ph1\">&lt;code&gt;stream&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>stream</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[21839,21947],"content":"Gets a value specifying whether the specified file is an OLE compound file with an encrypted package stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value specifying whether the specified file is an OLE compound file with an encrypted package stream.","pos":[0,108]}]},{"pos":[22499,22523],"content":"The file that is tested.","needQuote":true,"needEscape":true,"nodes":[{"content":"The file that is tested.","pos":[0,24]}]},{"pos":[22582,22797],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the specified file is an OLE compound file with an encrypted package stream; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified file is an OLE compound file with an encrypted package stream; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[22999,23085],"content":"<ph id=\"ph1\">&lt;code&gt;fileName&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>fileName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[23522,23573],"content":"Open the encrypted package in the specified stream.","needQuote":true,"needEscape":true,"nodes":[{"content":"Open the encrypted package in the specified stream.","pos":[0,51]}]},{"pos":[23585,23627],"content":"The stream must have an encrypted package.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The stream must have an encrypted package.","pos":[0,42]}]},{"pos":[23839,23883],"content":"The stream containing the encrypted package.","needQuote":true,"needEscape":true,"nodes":[{"content":"The stream containing the encrypted package.","pos":[0,44]}]},{"pos":[23972,24057],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.IO.Packaging.EncryptedPackageEnvelope\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that is opened.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.IO.Packaging.EncryptedPackageEnvelope\"></xref> that is opened."},{"pos":[24568,24643],"content":"Open the encrypted package in the specified file as read only and unshared.","needQuote":true,"needEscape":true,"nodes":[{"content":"Open the encrypted package in the specified file as read only and unshared.","pos":[0,75]}]},{"pos":[24656,24747],"content":"The file must have an encrypted package.       The opened file is read only and unshared.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The file must have an encrypted package.       The opened file is read only and unshared.","pos":[0,89],"nodes":[{"content":"The file must have an encrypted package.","pos":[0,40]},{"content":"The opened file is read only and unshared.","pos":[47,89]}]}]},{"pos":[24951,24993],"content":"The file containing the encrypted package.","needQuote":true,"needEscape":true,"nodes":[{"content":"The file containing the encrypted package.","pos":[0,42]}]},{"pos":[25082,25167],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.IO.Packaging.EncryptedPackageEnvelope\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that is opened.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.IO.Packaging.EncryptedPackageEnvelope\"></xref> that is opened."},{"pos":[25753,25844],"content":"Open the encrypted package in the specified file as unshared and with the specified access.","needQuote":true,"needEscape":true,"nodes":[{"content":"Open the encrypted package in the specified file as unshared and with the specified access.","pos":[0,91]}]},{"pos":[25857,25934],"content":"The file must have an encrypted package.       The opened file is unshared.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The file must have an encrypted package.       The opened file is unshared.","pos":[0,75],"nodes":[{"content":"The file must have an encrypted package.","pos":[0,40]},{"content":"The opened file is unshared.","pos":[47,75]}]}]},{"pos":[26167,26209],"content":"The file containing the encrypted package.","needQuote":true,"needEscape":true,"nodes":[{"content":"The file containing the encrypted package.","pos":[0,42]}]},{"pos":[26279,26298],"content":"The type of access.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type of access.","pos":[0,19]}]},{"pos":[26387,26472],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.IO.Packaging.EncryptedPackageEnvelope\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that is opened.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.IO.Packaging.EncryptedPackageEnvelope\"></xref> that is opened."},{"pos":[27128,27223],"content":"Open the encrypted package in the specified file and gives it the specified access and sharing.","needQuote":true,"needEscape":true,"nodes":[{"content":"Open the encrypted package in the specified file and gives it the specified access and sharing.","pos":[0,95]}]},{"pos":[27235,27275],"content":"The file must have an encrypted package.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The file must have an encrypted package.","pos":[0,40]}]},{"pos":[27536,27578],"content":"The file containing the encrypted package.","needQuote":true,"needEscape":true,"nodes":[{"content":"The file containing the encrypted package.","pos":[0,42]}]},{"pos":[27648,27667],"content":"The type of access.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type of access.","pos":[0,19]}]},{"pos":[27737,27757],"content":"The type of sharing.","needQuote":true,"needEscape":true,"nodes":[{"content":"The type of sharing.","pos":[0,20]}]},{"pos":[27846,27931],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.IO.Packaging.EncryptedPackageEnvelope\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that is opened.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.IO.Packaging.EncryptedPackageEnvelope\"></xref> that is opened."},{"pos":[28455,28547],"content":"Gets the core package properties (such as Title and Subject) of the rights managed document.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the core package properties (such as Title and Subject) of the rights managed document.","pos":[0,92]}]},{"pos":[28559,28841],"content":"These core properties are stored in the standard OLE property streams (\\005SummaryInformation and \\005DocumentSummaryInformation). The core properties are also stored in the package itself. It is the responsibility of the application to keep the two sets of properties synchronized.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"These core properties are stored in the standard OLE property streams (\\005SummaryInformation and \\005DocumentSummaryInformation). The core properties are also stored in the package itself. It is the responsibility of the application to keep the two sets of properties synchronized.","pos":[0,282],"nodes":[{"content":"These core properties are stored in the standard OLE property streams (\\005SummaryInformation and \\005DocumentSummaryInformation).","pos":[0,130]},{"content":"The core properties are also stored in the package itself.","pos":[131,189]},{"content":"It is the responsibility of the application to keep the two sets of properties synchronized.","pos":[190,282]}]}]},{"pos":[29018,29097],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.IO.Packaging.PackageProperties\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for the package.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.IO.Packaging.PackageProperties\"></xref> for the package."},{"pos":[29684,30050],"content":"Gets the rights management information stored in the <bpt id=\"p1\">&lt;xref href=\"System.IO.Packaging.EncryptedPackageEnvelope\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>; specifically, the <bpt id=\"p2\">&lt;xref href=\"System.Security.RightsManagement.PublishLicense\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> and the <bpt id=\"p3\">&lt;xref href=\"System.Security.RightsManagement.UseLicense\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>s stored in the OLE compound file that embodies the rights-management protected package","needQuote":true,"needEscape":true,"source":"Gets the rights management information stored in the <xref href=\"System.IO.Packaging.EncryptedPackageEnvelope\"></xref>; specifically, the <xref href=\"System.Security.RightsManagement.PublishLicense\"></xref> and the <xref href=\"System.Security.RightsManagement.UseLicense\"></xref>s stored in the OLE compound file that embodies the rights-management protected package"},{"pos":[30736,30825],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.IO.Packaging.RightsManagementInformation\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for the package.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.IO.Packaging.RightsManagementInformation\"></xref> for the package."},{"pos":[31342,31437],"content":"Gets an object that provides access to the compound file streams outside the encrypted package.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets an object that provides access to the compound file streams outside the encrypted package.","pos":[0,95]}]},{"pos":[31596,31736],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.IO.Packaging.StorageInfo\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> representing streams in the OLE compound file that are outside the encrypted package.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.IO.Packaging.StorageInfo\"></xref> representing streams in the OLE compound file that are outside the encrypted package."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.IO.Packaging.EncryptedPackageEnvelope\n  id: EncryptedPackageEnvelope\n  children:\n  - System.IO.Packaging.EncryptedPackageEnvelope.Close\n  - System.IO.Packaging.EncryptedPackageEnvelope.Create(System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)\n  - System.IO.Packaging.EncryptedPackageEnvelope.Create(System.String,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)\n  - System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(System.IO.Stream,System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)\n  - System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(System.String,System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)\n  - System.IO.Packaging.EncryptedPackageEnvelope.Dispose\n  - System.IO.Packaging.EncryptedPackageEnvelope.Dispose(System.Boolean)\n  - System.IO.Packaging.EncryptedPackageEnvelope.FileOpenAccess\n  - System.IO.Packaging.EncryptedPackageEnvelope.Flush\n  - System.IO.Packaging.EncryptedPackageEnvelope.GetPackage\n  - System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(System.IO.Stream)\n  - System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(System.String)\n  - System.IO.Packaging.EncryptedPackageEnvelope.Open(System.IO.Stream)\n  - System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String)\n  - System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String,System.IO.FileAccess)\n  - System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String,System.IO.FileAccess,System.IO.FileShare)\n  - System.IO.Packaging.EncryptedPackageEnvelope.PackageProperties\n  - System.IO.Packaging.EncryptedPackageEnvelope.RightsManagementInformation\n  - System.IO.Packaging.EncryptedPackageEnvelope.StorageInfo\n  langs:\n  - csharp\n  name: EncryptedPackageEnvelope\n  nameWithType: EncryptedPackageEnvelope\n  fullName: System.IO.Packaging.EncryptedPackageEnvelope\n  type: Class\n  summary: Represents an OLE compound file that contains an encrypted package.\n  remarks: EncryptedPackageEnvelope has no public constructors.  An EncryptedPackageEnvelope is created by use of the static <xref:System.IO.Packaging.EncryptedPackageEnvelope.Create%2A>, <xref:System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage%2A>, or <xref:System.IO.Packaging.EncryptedPackageEnvelope.Open%2A> methods.\n  syntax:\n    content: 'public class EncryptedPackageEnvelope : IDisposable'\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.IO.Packaging.EncryptedPackageEnvelope.Close\n  id: Close\n  parent: System.IO.Packaging.EncryptedPackageEnvelope\n  langs:\n  - csharp\n  name: Close()\n  nameWithType: EncryptedPackageEnvelope.Close()\n  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Close()\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.IO.Packaging\n  summary: Closes the encrypted package and the OLE compound file that holds it.\n  remarks: ''\n  example:\n  - \"The following example shows how to use this method to close an <xref:System.IO.Packaging.EncryptedPackageEnvelope>.  \\n  \\n [!code-vb[RightsManagedPackagePublish#RmPkgPubEncrypt](~/add/codesnippet/visualbasic/rmpackagepublish/window1.xaml.vb#rmpkgpubencrypt)]\\n [!code-cs[RightsManagedPackagePublish#RmPkgPubEncrypt](~/add/codesnippet/csharp/RmPackagePublish/Window1.xaml.cs#rmpkgpubencrypt)]\"\n  syntax:\n    content: public void Close ();\n    parameters: []\n  overload: System.IO.Packaging.EncryptedPackageEnvelope.Close*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IO.Packaging.EncryptedPackageEnvelope.Create(System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)\n  id: Create(System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)\n  parent: System.IO.Packaging.EncryptedPackageEnvelope\n  langs:\n  - csharp\n  name: Create(Stream,PublishLicense,CryptoProvider)\n  nameWithType: EncryptedPackageEnvelope.Create(Stream,PublishLicense,CryptoProvider)\n  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Create(Stream,PublishLicense,CryptoProvider)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.IO.Packaging\n  summary: Creates and returns an <xref href=\"System.IO.Packaging.EncryptedPackageEnvelope\"></xref> on the specified stream.\n  remarks: The current user has read/write access to the new file.\n  syntax:\n    content: public static System.IO.Packaging.EncryptedPackageEnvelope Create (System.IO.Stream envelopeStream, System.Security.RightsManagement.PublishLicense publishLicense, System.Security.RightsManagement.CryptoProvider cryptoProvider);\n    parameters:\n    - id: envelopeStream\n      type: System.IO.Stream\n      description: The stream on which to create the file.\n    - id: publishLicense\n      type: System.Security.RightsManagement.PublishLicense\n      description: The publish license that is embedded in the compound file.\n    - id: cryptoProvider\n      type: System.Security.RightsManagement.CryptoProvider\n      description: An object that determines what operations the current user is allowed to perform on the encrypted content.\n    return:\n      type: System.IO.Packaging.EncryptedPackageEnvelope\n      description: The newly created <xref href=\"System.IO.Packaging.EncryptedPackageEnvelope\"></xref>.\n  overload: System.IO.Packaging.EncryptedPackageEnvelope.Create*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>envelopeStream</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>envelopeStream</code> does not provide read/write access.\n  platform:\n  - net462\n- uid: System.IO.Packaging.EncryptedPackageEnvelope.Create(System.String,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)\n  id: Create(System.String,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)\n  parent: System.IO.Packaging.EncryptedPackageEnvelope\n  langs:\n  - csharp\n  name: Create(String,PublishLicense,CryptoProvider)\n  nameWithType: EncryptedPackageEnvelope.Create(String,PublishLicense,CryptoProvider)\n  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Create(String,PublishLicense,CryptoProvider)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.IO.Packaging\n  summary: Creates and returns an <xref href=\"System.IO.Packaging.EncryptedPackageEnvelope\"></xref> and gives it the specified file name.\n  remarks: \"If a file with the specified name already exists, it is overwritten.  \\n  \\n The current user has read/write access to the file.\"\n  syntax:\n    content: public static System.IO.Packaging.EncryptedPackageEnvelope Create (string envelopeFileName, System.Security.RightsManagement.PublishLicense publishLicense, System.Security.RightsManagement.CryptoProvider cryptoProvider);\n    parameters:\n    - id: envelopeFileName\n      type: System.String\n      description: The name of the OLE compound file.\n    - id: publishLicense\n      type: System.Security.RightsManagement.PublishLicense\n      description: The publish license that is embedded in the compound file.\n    - id: cryptoProvider\n      type: System.Security.RightsManagement.CryptoProvider\n      description: An object that determines what operations the current user is allowed to perform on the encrypted content.\n    return:\n      type: System.IO.Packaging.EncryptedPackageEnvelope\n      description: The newly created <xref href=\"System.IO.Packaging.EncryptedPackageEnvelope\"></xref>.\n  overload: System.IO.Packaging.EncryptedPackageEnvelope.Create*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>envelopeFileName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(System.IO.Stream,System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)\n  id: CreateFromPackage(System.IO.Stream,System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)\n  parent: System.IO.Packaging.EncryptedPackageEnvelope\n  langs:\n  - csharp\n  name: CreateFromPackage(Stream,Stream,PublishLicense,CryptoProvider)\n  nameWithType: EncryptedPackageEnvelope.CreateFromPackage(Stream,Stream,PublishLicense,CryptoProvider)\n  fullName: System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(Stream,Stream,PublishLicense,CryptoProvider)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.IO.Packaging\n  summary: Creates and returns an <xref href=\"System.IO.Packaging.EncryptedPackageEnvelope\"></xref> (on the specified stream) that uses the specified unencrypted package as its content.\n  remarks: The current user has read/write access to the new file.\n  example:\n  - \"The following example shows how to use the <xref:System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage%2A> method to instantiate an <xref:System.IO.Packaging.EncryptedPackageEnvelope>.  \\n  \\n [!code-vb[RightsManagedPackagePublish#RmPkgPubEncrypt](~/add/codesnippet/visualbasic/rmpackagepublish/window1.xaml.vb#rmpkgpubencrypt)]\\n [!code-cs[RightsManagedPackagePublish#RmPkgPubEncrypt](~/add/codesnippet/csharp/RmPackagePublish/Window1.xaml.cs#rmpkgpubencrypt)]\"\n  syntax:\n    content: public static System.IO.Packaging.EncryptedPackageEnvelope CreateFromPackage (System.IO.Stream envelopeStream, System.IO.Stream packageStream, System.Security.RightsManagement.PublishLicense publishLicense, System.Security.RightsManagement.CryptoProvider cryptoProvider);\n    parameters:\n    - id: envelopeStream\n      type: System.IO.Stream\n      description: The stream on which to create the file.\n    - id: packageStream\n      type: System.IO.Stream\n      description: The stream representing the existing unencrypted package.\n    - id: publishLicense\n      type: System.Security.RightsManagement.PublishLicense\n      description: The publish license that is embedded in the compound file.\n    - id: cryptoProvider\n      type: System.Security.RightsManagement.CryptoProvider\n      description: An object that determines what operations the current user is allowed to perform on the encrypted content.\n    return:\n      type: System.IO.Packaging.EncryptedPackageEnvelope\n      description: The newly created <xref href=\"System.IO.Packaging.EncryptedPackageEnvelope\"></xref>.\n  overload: System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>envelopeStream</code> or <code>packageStream</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>envelopeStream</code> does not provide read/write access.\n  platform:\n  - net462\n- uid: System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(System.String,System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)\n  id: CreateFromPackage(System.String,System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)\n  parent: System.IO.Packaging.EncryptedPackageEnvelope\n  langs:\n  - csharp\n  name: CreateFromPackage(String,Stream,PublishLicense,CryptoProvider)\n  nameWithType: EncryptedPackageEnvelope.CreateFromPackage(String,Stream,PublishLicense,CryptoProvider)\n  fullName: System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(String,Stream,PublishLicense,CryptoProvider)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.IO.Packaging\n  summary: Creates and returns an <xref href=\"System.IO.Packaging.EncryptedPackageEnvelope\"></xref> that uses the specified unencrypted package as its content, and gives it the specified file name.\n  remarks: \"If a file with the specified name already exists, it is overwritten.  \\n  \\n The current user has read/write access to the file.\"\n  example:\n  - \"The following example shows how to use the CreateFromPackage method to instantiate an <xref:System.IO.Packaging.EncryptedPackageEnvelope>.  \\n  \\n [!code-vb[RightsManagedPackagePublish#RmPkgPubEncrypt](~/add/codesnippet/visualbasic/rmpackagepublish/window1.xaml.vb#rmpkgpubencrypt)]\\n [!code-cs[RightsManagedPackagePublish#RmPkgPubEncrypt](~/add/codesnippet/csharp/RmPackagePublish/Window1.xaml.cs#rmpkgpubencrypt)]\"\n  syntax:\n    content: public static System.IO.Packaging.EncryptedPackageEnvelope CreateFromPackage (string envelopeFileName, System.IO.Stream packageStream, System.Security.RightsManagement.PublishLicense publishLicense, System.Security.RightsManagement.CryptoProvider cryptoProvider);\n    parameters:\n    - id: envelopeFileName\n      type: System.String\n      description: The name of the OLE compound file.\n    - id: packageStream\n      type: System.IO.Stream\n      description: The stream representing the existing unencrypted package.\n    - id: publishLicense\n      type: System.Security.RightsManagement.PublishLicense\n      description: The publish license that is embedded in the compound file.\n    - id: cryptoProvider\n      type: System.Security.RightsManagement.CryptoProvider\n      description: An object that determines what operations the current user is allowed to perform on the encrypted content.\n    return:\n      type: System.IO.Packaging.EncryptedPackageEnvelope\n      description: The newly created <xref href=\"System.IO.Packaging.EncryptedPackageEnvelope\"></xref>.\n  overload: System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>envelopeFileName</code> or <code>packageStream</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.IO.Packaging.EncryptedPackageEnvelope.Dispose\n  id: Dispose\n  parent: System.IO.Packaging.EncryptedPackageEnvelope\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: EncryptedPackageEnvelope.Dispose()\n  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Dispose()\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.IO.Packaging\n  summary: Releases all resources used by the <xref href=\"System.IO.Packaging.EncryptedPackageEnvelope\"></xref>.\n  remarks: \"Call Dispose when finished with a <xref:System.IO.Packaging.EncryptedPackageEnvelope>. The Dispose method leaves the <xref:System.IO.Packaging.EncryptedPackageEnvelope> in an unusable state. After calling Dispose, you must release all references to the <xref:System.IO.Packaging.EncryptedPackageEnvelope> so the garbage collector can reclaim the memory that the <xref:System.IO.Packaging.EncryptedPackageEnvelope> was occupying. For more information, see [Cleaning Up Unmanaged Resources](~/add/includes/ajax-current-ext-md.md) and [Implementing a Dispose Method](~/add/includes/ajax-current-ext-md.md).  \\n  \\n> [!NOTE]\\n>  Always call Dispose before you release your last reference to the <xref:System.IO.Packaging.EncryptedPackageEnvelope>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.IO.Packaging.EncryptedPackageEnvelope> object's <xref:System.Object.Finalize%2A> method.\"\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.IO.Packaging.EncryptedPackageEnvelope.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IO.Packaging.EncryptedPackageEnvelope.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.IO.Packaging.EncryptedPackageEnvelope\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: EncryptedPackageEnvelope.Dispose(Boolean)\n  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.IO.Packaging\n  summary: Releases the unmanaged resources used by the <xref href=\"System.IO.Packaging.EncryptedPackageEnvelope\"></xref> and optionally releases the managed resources.\n  remarks: \"This method is called by the public `Dispose()`method and the <xref:System.Object.Finalize%2A> method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.  \\n  \\n When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.IO.Packaging.EncryptedPackageEnvelope> references. This method invokes the `Dispose()` method of each referenced object.\"\n  syntax:\n    content: protected virtual void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only unmanaged resources.\n  overload: System.IO.Packaging.EncryptedPackageEnvelope.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IO.Packaging.EncryptedPackageEnvelope.FileOpenAccess\n  id: FileOpenAccess\n  parent: System.IO.Packaging.EncryptedPackageEnvelope\n  langs:\n  - csharp\n  name: FileOpenAccess\n  nameWithType: EncryptedPackageEnvelope.FileOpenAccess\n  fullName: System.IO.Packaging.EncryptedPackageEnvelope.FileOpenAccess\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.IO.Packaging\n  summary: Gets a value that specifies whether the file was opened with access to read, write, or both.\n  syntax:\n    content: public System.IO.FileAccess FileOpenAccess { get; }\n    return:\n      type: System.IO.FileAccess\n      description: The <xref href=\"System.IO.FileAccess\"></xref> value that was used to open the file.\n  overload: System.IO.Packaging.EncryptedPackageEnvelope.FileOpenAccess*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IO.Packaging.EncryptedPackageEnvelope.Flush\n  id: Flush\n  parent: System.IO.Packaging.EncryptedPackageEnvelope\n  langs:\n  - csharp\n  name: Flush()\n  nameWithType: EncryptedPackageEnvelope.Flush()\n  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Flush()\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.IO.Packaging\n  summary: Flush the stream for both the <xref href=\"System.IO.Packaging.EncryptedPackageEnvelope\"></xref> and its package content.\n  syntax:\n    content: public void Flush ();\n    parameters: []\n  overload: System.IO.Packaging.EncryptedPackageEnvelope.Flush*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IO.Packaging.EncryptedPackageEnvelope.GetPackage\n  id: GetPackage\n  parent: System.IO.Packaging.EncryptedPackageEnvelope\n  langs:\n  - csharp\n  name: GetPackage()\n  nameWithType: EncryptedPackageEnvelope.GetPackage()\n  fullName: System.IO.Packaging.EncryptedPackageEnvelope.GetPackage()\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.IO.Packaging\n  summary: Gets the encrypted package inside the <xref href=\"System.IO.Packaging.EncryptedPackageEnvelope\"></xref>.\n  syntax:\n    content: public System.IO.Packaging.Package GetPackage ();\n    parameters: []\n    return:\n      type: System.IO.Packaging.Package\n      description: The <xref href=\"System.IO.Packaging.Package\"></xref> in the envelope.\n  overload: System.IO.Packaging.EncryptedPackageEnvelope.GetPackage*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(System.IO.Stream)\n  id: IsEncryptedPackageEnvelope(System.IO.Stream)\n  parent: System.IO.Packaging.EncryptedPackageEnvelope\n  langs:\n  - csharp\n  name: IsEncryptedPackageEnvelope(Stream)\n  nameWithType: EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(Stream)\n  fullName: System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(Stream)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.IO.Packaging\n  summary: Gets a value specifying whether the specified stream is an OLE compound file with an encrypted package stream.\n  syntax:\n    content: public static bool IsEncryptedPackageEnvelope (System.IO.Stream stream);\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: The stream that is tested.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified stream is an OLE compound file with an encrypted package stream; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>stream</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(System.String)\n  id: IsEncryptedPackageEnvelope(System.String)\n  parent: System.IO.Packaging.EncryptedPackageEnvelope\n  langs:\n  - csharp\n  name: IsEncryptedPackageEnvelope(String)\n  nameWithType: EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(String)\n  fullName: System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(String)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.IO.Packaging\n  summary: Gets a value specifying whether the specified file is an OLE compound file with an encrypted package stream.\n  remarks: ''\n  example:\n  - \"The following example shows how to use this method to test for encryption.  \\n  \\n [!code-vb[RightsManagedPackagePublish#RmPkgPubEncrypt](~/add/codesnippet/visualbasic/rmpackagepublish/window1.xaml.vb#rmpkgpubencrypt)]\\n [!code-cs[RightsManagedPackagePublish#RmPkgPubEncrypt](~/add/codesnippet/csharp/RmPackagePublish/Window1.xaml.cs#rmpkgpubencrypt)]\"\n  syntax:\n    content: public static bool IsEncryptedPackageEnvelope (string fileName);\n    parameters:\n    - id: fileName\n      type: System.String\n      description: The file that is tested.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the specified file is an OLE compound file with an encrypted package stream; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>fileName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.IO.Packaging.EncryptedPackageEnvelope.Open(System.IO.Stream)\n  id: Open(System.IO.Stream)\n  parent: System.IO.Packaging.EncryptedPackageEnvelope\n  langs:\n  - csharp\n  name: Open(Stream)\n  nameWithType: EncryptedPackageEnvelope.Open(Stream)\n  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Open(Stream)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.IO.Packaging\n  summary: Open the encrypted package in the specified stream.\n  remarks: The stream must have an encrypted package.\n  syntax:\n    content: public static System.IO.Packaging.EncryptedPackageEnvelope Open (System.IO.Stream envelopeStream);\n    parameters:\n    - id: envelopeStream\n      type: System.IO.Stream\n      description: The stream containing the encrypted package.\n    return:\n      type: System.IO.Packaging.EncryptedPackageEnvelope\n      description: The <xref href=\"System.IO.Packaging.EncryptedPackageEnvelope\"></xref> that is opened.\n  overload: System.IO.Packaging.EncryptedPackageEnvelope.Open*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String)\n  id: Open(System.String)\n  parent: System.IO.Packaging.EncryptedPackageEnvelope\n  langs:\n  - csharp\n  name: Open(String)\n  nameWithType: EncryptedPackageEnvelope.Open(String)\n  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Open(String)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.IO.Packaging\n  summary: Open the encrypted package in the specified file as read only and unshared.\n  remarks: \"The file must have an encrypted package.  \\n  \\n The opened file is read only and unshared.\"\n  syntax:\n    content: public static System.IO.Packaging.EncryptedPackageEnvelope Open (string envelopeFileName);\n    parameters:\n    - id: envelopeFileName\n      type: System.String\n      description: The file containing the encrypted package.\n    return:\n      type: System.IO.Packaging.EncryptedPackageEnvelope\n      description: The <xref href=\"System.IO.Packaging.EncryptedPackageEnvelope\"></xref> that is opened.\n  overload: System.IO.Packaging.EncryptedPackageEnvelope.Open*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String,System.IO.FileAccess)\n  id: Open(System.String,System.IO.FileAccess)\n  parent: System.IO.Packaging.EncryptedPackageEnvelope\n  langs:\n  - csharp\n  name: Open(String,FileAccess)\n  nameWithType: EncryptedPackageEnvelope.Open(String,FileAccess)\n  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Open(String,FileAccess)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.IO.Packaging\n  summary: Open the encrypted package in the specified file as unshared and with the specified access.\n  remarks: \"The file must have an encrypted package.  \\n  \\n The opened file is unshared.\"\n  syntax:\n    content: public static System.IO.Packaging.EncryptedPackageEnvelope Open (string envelopeFileName, System.IO.FileAccess access);\n    parameters:\n    - id: envelopeFileName\n      type: System.String\n      description: The file containing the encrypted package.\n    - id: access\n      type: System.IO.FileAccess\n      description: The type of access.\n    return:\n      type: System.IO.Packaging.EncryptedPackageEnvelope\n      description: The <xref href=\"System.IO.Packaging.EncryptedPackageEnvelope\"></xref> that is opened.\n  overload: System.IO.Packaging.EncryptedPackageEnvelope.Open*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String,System.IO.FileAccess,System.IO.FileShare)\n  id: Open(System.String,System.IO.FileAccess,System.IO.FileShare)\n  parent: System.IO.Packaging.EncryptedPackageEnvelope\n  langs:\n  - csharp\n  name: Open(String,FileAccess,FileShare)\n  nameWithType: EncryptedPackageEnvelope.Open(String,FileAccess,FileShare)\n  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Open(String,FileAccess,FileShare)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.IO.Packaging\n  summary: Open the encrypted package in the specified file and gives it the specified access and sharing.\n  remarks: The file must have an encrypted package.\n  syntax:\n    content: public static System.IO.Packaging.EncryptedPackageEnvelope Open (string envelopeFileName, System.IO.FileAccess access, System.IO.FileShare sharing);\n    parameters:\n    - id: envelopeFileName\n      type: System.String\n      description: The file containing the encrypted package.\n    - id: access\n      type: System.IO.FileAccess\n      description: The type of access.\n    - id: sharing\n      type: System.IO.FileShare\n      description: The type of sharing.\n    return:\n      type: System.IO.Packaging.EncryptedPackageEnvelope\n      description: The <xref href=\"System.IO.Packaging.EncryptedPackageEnvelope\"></xref> that is opened.\n  overload: System.IO.Packaging.EncryptedPackageEnvelope.Open*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IO.Packaging.EncryptedPackageEnvelope.PackageProperties\n  id: PackageProperties\n  parent: System.IO.Packaging.EncryptedPackageEnvelope\n  langs:\n  - csharp\n  name: PackageProperties\n  nameWithType: EncryptedPackageEnvelope.PackageProperties\n  fullName: System.IO.Packaging.EncryptedPackageEnvelope.PackageProperties\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.IO.Packaging\n  summary: Gets the core package properties (such as Title and Subject) of the rights managed document.\n  remarks: These core properties are stored in the standard OLE property streams (\\005SummaryInformation and \\005DocumentSummaryInformation). The core properties are also stored in the package itself. It is the responsibility of the application to keep the two sets of properties synchronized.\n  syntax:\n    content: public System.IO.Packaging.PackageProperties PackageProperties { get; }\n    return:\n      type: System.IO.Packaging.PackageProperties\n      description: The <xref href=\"System.IO.Packaging.PackageProperties\"></xref> for the package.\n  overload: System.IO.Packaging.EncryptedPackageEnvelope.PackageProperties*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IO.Packaging.EncryptedPackageEnvelope.RightsManagementInformation\n  id: RightsManagementInformation\n  parent: System.IO.Packaging.EncryptedPackageEnvelope\n  langs:\n  - csharp\n  name: RightsManagementInformation\n  nameWithType: EncryptedPackageEnvelope.RightsManagementInformation\n  fullName: System.IO.Packaging.EncryptedPackageEnvelope.RightsManagementInformation\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.IO.Packaging\n  summary: Gets the rights management information stored in the <xref href=\"System.IO.Packaging.EncryptedPackageEnvelope\"></xref>; specifically, the <xref href=\"System.Security.RightsManagement.PublishLicense\"></xref> and the <xref href=\"System.Security.RightsManagement.UseLicense\"></xref>s stored in the OLE compound file that embodies the rights-management protected package\n  remarks: ''\n  example:\n  - \"The following example shows how to obtain <xref:System.IO.Packaging.RightsManagementInformation> for an encrypted package by use the RightsManagementInformation property.  \\n  \\n [!code-vb[RightsManagedPackagePublish#RmPkgPubEncrypt](~/add/codesnippet/visualbasic/rmpackagepublish/window1.xaml.vb#rmpkgpubencrypt)]\\n [!code-cs[RightsManagedPackagePublish#RmPkgPubEncrypt](~/add/codesnippet/csharp/RmPackagePublish/Window1.xaml.cs#rmpkgpubencrypt)]\"\n  syntax:\n    content: public System.IO.Packaging.RightsManagementInformation RightsManagementInformation { get; }\n    return:\n      type: System.IO.Packaging.RightsManagementInformation\n      description: The <xref href=\"System.IO.Packaging.RightsManagementInformation\"></xref> for the package.\n  overload: System.IO.Packaging.EncryptedPackageEnvelope.RightsManagementInformation*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IO.Packaging.EncryptedPackageEnvelope.StorageInfo\n  id: StorageInfo\n  parent: System.IO.Packaging.EncryptedPackageEnvelope\n  langs:\n  - csharp\n  name: StorageInfo\n  nameWithType: EncryptedPackageEnvelope.StorageInfo\n  fullName: System.IO.Packaging.EncryptedPackageEnvelope.StorageInfo\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.IO.Packaging\n  summary: Gets an object that provides access to the compound file streams outside the encrypted package.\n  syntax:\n    content: public System.IO.Packaging.StorageInfo StorageInfo { get; }\n    return:\n      type: System.IO.Packaging.StorageInfo\n      description: A <xref href=\"System.IO.Packaging.StorageInfo\"></xref> representing streams in the OLE compound file that are outside the encrypted package.\n  overload: System.IO.Packaging.EncryptedPackageEnvelope.StorageInfo*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.NotSupportedException\n  isExternal: true\n  name: System.NotSupportedException\n- uid: System.IO.Packaging.EncryptedPackageEnvelope.Close\n  parent: System.IO.Packaging.EncryptedPackageEnvelope\n  isExternal: false\n  name: Close()\n  nameWithType: EncryptedPackageEnvelope.Close()\n  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Close()\n- uid: System.IO.Packaging.EncryptedPackageEnvelope.Create(System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)\n  parent: System.IO.Packaging.EncryptedPackageEnvelope\n  isExternal: false\n  name: Create(Stream,PublishLicense,CryptoProvider)\n  nameWithType: EncryptedPackageEnvelope.Create(Stream,PublishLicense,CryptoProvider)\n  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Create(Stream,PublishLicense,CryptoProvider)\n- uid: System.IO.Packaging.EncryptedPackageEnvelope\n  parent: System.IO.Packaging\n  isExternal: false\n  name: EncryptedPackageEnvelope\n  nameWithType: EncryptedPackageEnvelope\n  fullName: System.IO.Packaging.EncryptedPackageEnvelope\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: true\n  name: Stream\n  nameWithType: Stream\n  fullName: System.IO.Stream\n- uid: System.Security.RightsManagement.PublishLicense\n  parent: System.Security.RightsManagement\n  isExternal: false\n  name: PublishLicense\n  nameWithType: PublishLicense\n  fullName: System.Security.RightsManagement.PublishLicense\n- uid: System.Security.RightsManagement.CryptoProvider\n  parent: System.Security.RightsManagement\n  isExternal: false\n  name: CryptoProvider\n  nameWithType: CryptoProvider\n  fullName: System.Security.RightsManagement.CryptoProvider\n- uid: System.IO.Packaging.EncryptedPackageEnvelope.Create(System.String,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)\n  parent: System.IO.Packaging.EncryptedPackageEnvelope\n  isExternal: false\n  name: Create(String,PublishLicense,CryptoProvider)\n  nameWithType: EncryptedPackageEnvelope.Create(String,PublishLicense,CryptoProvider)\n  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Create(String,PublishLicense,CryptoProvider)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(System.IO.Stream,System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)\n  parent: System.IO.Packaging.EncryptedPackageEnvelope\n  isExternal: false\n  name: CreateFromPackage(Stream,Stream,PublishLicense,CryptoProvider)\n  nameWithType: EncryptedPackageEnvelope.CreateFromPackage(Stream,Stream,PublishLicense,CryptoProvider)\n  fullName: System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(Stream,Stream,PublishLicense,CryptoProvider)\n- uid: System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(System.String,System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)\n  parent: System.IO.Packaging.EncryptedPackageEnvelope\n  isExternal: false\n  name: CreateFromPackage(String,Stream,PublishLicense,CryptoProvider)\n  nameWithType: EncryptedPackageEnvelope.CreateFromPackage(String,Stream,PublishLicense,CryptoProvider)\n  fullName: System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(String,Stream,PublishLicense,CryptoProvider)\n- uid: System.IO.Packaging.EncryptedPackageEnvelope.Dispose\n  parent: System.IO.Packaging.EncryptedPackageEnvelope\n  isExternal: false\n  name: Dispose()\n  nameWithType: EncryptedPackageEnvelope.Dispose()\n  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Dispose()\n- uid: System.IO.Packaging.EncryptedPackageEnvelope.Dispose(System.Boolean)\n  parent: System.IO.Packaging.EncryptedPackageEnvelope\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: EncryptedPackageEnvelope.Dispose(Boolean)\n  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.IO.Packaging.EncryptedPackageEnvelope.FileOpenAccess\n  parent: System.IO.Packaging.EncryptedPackageEnvelope\n  isExternal: false\n  name: FileOpenAccess\n  nameWithType: EncryptedPackageEnvelope.FileOpenAccess\n  fullName: System.IO.Packaging.EncryptedPackageEnvelope.FileOpenAccess\n- uid: System.IO.FileAccess\n  parent: System.IO\n  isExternal: false\n  name: FileAccess\n  nameWithType: FileAccess\n  fullName: System.IO.FileAccess\n- uid: System.IO.Packaging.EncryptedPackageEnvelope.Flush\n  parent: System.IO.Packaging.EncryptedPackageEnvelope\n  isExternal: false\n  name: Flush()\n  nameWithType: EncryptedPackageEnvelope.Flush()\n  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Flush()\n- uid: System.IO.Packaging.EncryptedPackageEnvelope.GetPackage\n  parent: System.IO.Packaging.EncryptedPackageEnvelope\n  isExternal: false\n  name: GetPackage()\n  nameWithType: EncryptedPackageEnvelope.GetPackage()\n  fullName: System.IO.Packaging.EncryptedPackageEnvelope.GetPackage()\n- uid: System.IO.Packaging.Package\n  parent: System.IO.Packaging\n  isExternal: false\n  name: Package\n  nameWithType: Package\n  fullName: System.IO.Packaging.Package\n- uid: System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(System.IO.Stream)\n  parent: System.IO.Packaging.EncryptedPackageEnvelope\n  isExternal: false\n  name: IsEncryptedPackageEnvelope(Stream)\n  nameWithType: EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(Stream)\n  fullName: System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(Stream)\n- uid: System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(System.String)\n  parent: System.IO.Packaging.EncryptedPackageEnvelope\n  isExternal: false\n  name: IsEncryptedPackageEnvelope(String)\n  nameWithType: EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(String)\n  fullName: System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(String)\n- uid: System.IO.Packaging.EncryptedPackageEnvelope.Open(System.IO.Stream)\n  parent: System.IO.Packaging.EncryptedPackageEnvelope\n  isExternal: false\n  name: Open(Stream)\n  nameWithType: EncryptedPackageEnvelope.Open(Stream)\n  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Open(Stream)\n- uid: System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String)\n  parent: System.IO.Packaging.EncryptedPackageEnvelope\n  isExternal: false\n  name: Open(String)\n  nameWithType: EncryptedPackageEnvelope.Open(String)\n  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Open(String)\n- uid: System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String,System.IO.FileAccess)\n  parent: System.IO.Packaging.EncryptedPackageEnvelope\n  isExternal: false\n  name: Open(String,FileAccess)\n  nameWithType: EncryptedPackageEnvelope.Open(String,FileAccess)\n  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Open(String,FileAccess)\n- uid: System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String,System.IO.FileAccess,System.IO.FileShare)\n  parent: System.IO.Packaging.EncryptedPackageEnvelope\n  isExternal: false\n  name: Open(String,FileAccess,FileShare)\n  nameWithType: EncryptedPackageEnvelope.Open(String,FileAccess,FileShare)\n  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Open(String,FileAccess,FileShare)\n- uid: System.IO.FileShare\n  parent: System.IO\n  isExternal: false\n  name: FileShare\n  nameWithType: FileShare\n  fullName: System.IO.FileShare\n- uid: System.IO.Packaging.EncryptedPackageEnvelope.PackageProperties\n  parent: System.IO.Packaging.EncryptedPackageEnvelope\n  isExternal: false\n  name: PackageProperties\n  nameWithType: EncryptedPackageEnvelope.PackageProperties\n  fullName: System.IO.Packaging.EncryptedPackageEnvelope.PackageProperties\n- uid: System.IO.Packaging.PackageProperties\n  parent: System.IO.Packaging\n  isExternal: false\n  name: PackageProperties\n  nameWithType: PackageProperties\n  fullName: System.IO.Packaging.PackageProperties\n- uid: System.IO.Packaging.EncryptedPackageEnvelope.RightsManagementInformation\n  parent: System.IO.Packaging.EncryptedPackageEnvelope\n  isExternal: false\n  name: RightsManagementInformation\n  nameWithType: EncryptedPackageEnvelope.RightsManagementInformation\n  fullName: System.IO.Packaging.EncryptedPackageEnvelope.RightsManagementInformation\n- uid: System.IO.Packaging.RightsManagementInformation\n  parent: System.IO.Packaging\n  isExternal: false\n  name: RightsManagementInformation\n  nameWithType: RightsManagementInformation\n  fullName: System.IO.Packaging.RightsManagementInformation\n- uid: System.IO.Packaging.EncryptedPackageEnvelope.StorageInfo\n  parent: System.IO.Packaging.EncryptedPackageEnvelope\n  isExternal: false\n  name: StorageInfo\n  nameWithType: EncryptedPackageEnvelope.StorageInfo\n  fullName: System.IO.Packaging.EncryptedPackageEnvelope.StorageInfo\n- uid: System.IO.Packaging.StorageInfo\n  parent: System.IO.Packaging\n  isExternal: false\n  name: StorageInfo\n  nameWithType: StorageInfo\n  fullName: System.IO.Packaging.StorageInfo\n- uid: System.IO.Packaging.EncryptedPackageEnvelope.Close*\n  parent: System.IO.Packaging.EncryptedPackageEnvelope\n  isExternal: false\n  name: Close\n  nameWithType: EncryptedPackageEnvelope.Close\n- uid: System.IO.Packaging.EncryptedPackageEnvelope.Create*\n  parent: System.IO.Packaging.EncryptedPackageEnvelope\n  isExternal: false\n  name: Create\n  nameWithType: EncryptedPackageEnvelope.Create\n- uid: System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage*\n  parent: System.IO.Packaging.EncryptedPackageEnvelope\n  isExternal: false\n  name: CreateFromPackage\n  nameWithType: EncryptedPackageEnvelope.CreateFromPackage\n- uid: System.IO.Packaging.EncryptedPackageEnvelope.Dispose*\n  parent: System.IO.Packaging.EncryptedPackageEnvelope\n  isExternal: false\n  name: Dispose\n  nameWithType: EncryptedPackageEnvelope.Dispose\n- uid: System.IO.Packaging.EncryptedPackageEnvelope.FileOpenAccess*\n  parent: System.IO.Packaging.EncryptedPackageEnvelope\n  isExternal: false\n  name: FileOpenAccess\n  nameWithType: EncryptedPackageEnvelope.FileOpenAccess\n- uid: System.IO.Packaging.EncryptedPackageEnvelope.Flush*\n  parent: System.IO.Packaging.EncryptedPackageEnvelope\n  isExternal: false\n  name: Flush\n  nameWithType: EncryptedPackageEnvelope.Flush\n- uid: System.IO.Packaging.EncryptedPackageEnvelope.GetPackage*\n  parent: System.IO.Packaging.EncryptedPackageEnvelope\n  isExternal: false\n  name: GetPackage\n  nameWithType: EncryptedPackageEnvelope.GetPackage\n- uid: System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope*\n  parent: System.IO.Packaging.EncryptedPackageEnvelope\n  isExternal: false\n  name: IsEncryptedPackageEnvelope\n  nameWithType: EncryptedPackageEnvelope.IsEncryptedPackageEnvelope\n- uid: System.IO.Packaging.EncryptedPackageEnvelope.Open*\n  parent: System.IO.Packaging.EncryptedPackageEnvelope\n  isExternal: false\n  name: Open\n  nameWithType: EncryptedPackageEnvelope.Open\n- uid: System.IO.Packaging.EncryptedPackageEnvelope.PackageProperties*\n  parent: System.IO.Packaging.EncryptedPackageEnvelope\n  isExternal: false\n  name: PackageProperties\n  nameWithType: EncryptedPackageEnvelope.PackageProperties\n- uid: System.IO.Packaging.EncryptedPackageEnvelope.RightsManagementInformation*\n  parent: System.IO.Packaging.EncryptedPackageEnvelope\n  isExternal: false\n  name: RightsManagementInformation\n  nameWithType: EncryptedPackageEnvelope.RightsManagementInformation\n- uid: System.IO.Packaging.EncryptedPackageEnvelope.StorageInfo*\n  parent: System.IO.Packaging.EncryptedPackageEnvelope\n  isExternal: false\n  name: StorageInfo\n  nameWithType: EncryptedPackageEnvelope.StorageInfo\n"}