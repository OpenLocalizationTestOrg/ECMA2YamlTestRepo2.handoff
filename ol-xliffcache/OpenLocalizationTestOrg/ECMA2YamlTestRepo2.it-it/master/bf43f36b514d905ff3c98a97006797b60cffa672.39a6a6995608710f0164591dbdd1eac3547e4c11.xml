{"nodes":[{"pos":[799,992],"content":"Computes a Message Authentication Code (MAC) using <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.TripleDES\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for the input data <bpt id=\"p2\">&lt;xref href=\"System.Security.Cryptography.CryptoStream\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Computes a Message Authentication Code (MAC) using <xref href=\"System.Security.Cryptography.TripleDES\"></xref> for the input data <xref href=\"System.Security.Cryptography.CryptoStream\"></xref>."},{"pos":[1005,1710],"content":"A MAC can be used to determine whether a message sent over an insecure channel has been tampered with, provided that the sender and receiver share a secret key. The sender computes the MAC for the original data, and sends both as a single message. The receiver recomputes the MAC on the received message, and checks that the computed MAC matches the transmitted MAC.       Any change to the data or the MAC results in a mismatch, because knowledge of the secret key is required to change the message and reproduce the correct MAC. Therefore, if the codes match, the message is authenticated.       MACTripleDES uses a key that is 16 or 24 bytes long, and produces a hash sequence that is 8 bytes long.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"A MAC can be used to determine whether a message sent over an insecure channel has been tampered with, provided that the sender and receiver share a secret key. The sender computes the MAC for the original data, and sends both as a single message. The receiver recomputes the MAC on the received message, and checks that the computed MAC matches the transmitted MAC.       Any change to the data or the MAC results in a mismatch, because knowledge of the secret key is required to change the message and reproduce the correct MAC. Therefore, if the codes match, the message is authenticated.       MACTripleDES uses a key that is 16 or 24 bytes long, and produces a hash sequence that is 8 bytes long.","pos":[0,701],"nodes":[{"content":"A MAC can be used to determine whether a message sent over an insecure channel has been tampered with, provided that the sender and receiver share a secret key.","pos":[0,160]},{"content":"The sender computes the MAC for the original data, and sends both as a single message.","pos":[161,247]},{"content":"The receiver recomputes the MAC on the received message, and checks that the computed MAC matches the transmitted MAC.","pos":[248,366]},{"content":"Any change to the data or the MAC results in a mismatch, because knowledge of the secret key is required to change the message and reproduce the correct MAC.","pos":[373,530]},{"content":"Therefore, if the codes match, the message is authenticated.","pos":[531,591]},{"content":"MACTripleDES uses a key that is 16 or 24 bytes long, and produces a hash sequence that is 8 bytes long.","pos":[598,701]}]}]},{"pos":[4402,4505],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.MACTripleDES\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.MACTripleDES\"></xref> class."},{"pos":[4517,4615],"content":"This constructor uses the default implementation of <xref:System.Security.Cryptography.TripleDES>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This constructor uses the default implementation of &lt;xref:System.Security.Cryptography.TripleDES&gt;.","pos":[0,98],"source":"This constructor uses the default implementation of <xref:System.Security.Cryptography.TripleDES>."}]},{"pos":[5208,5339],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.MACTripleDES\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified key data.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.MACTripleDES\"></xref> class with the specified key data."},{"pos":[5351,5506],"content":"This constructor uses the default implementation of <xref:System.Security.Cryptography.TripleDES>. The `rgbKey` parameter must be 16 or 24 bytes in length.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This constructor uses the default implementation of &lt;xref:System.Security.Cryptography.TripleDES&gt;.","pos":[0,98],"source":"This constructor uses the default implementation of <xref:System.Security.Cryptography.TripleDES>."},{"content":"The <ph id=\"ph1\">`rgbKey`</ph> parameter must be 16 or 24 bytes in length.","pos":[99,155],"source":" The `rgbKey` parameter must be 16 or 24 bytes in length."}]},{"pos":[5771,5864],"content":"The secret key for <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.MACTripleDES\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> encryption.","needQuote":true,"needEscape":true,"source":"The secret key for <xref href=\"System.Security.Cryptography.MACTripleDES\"></xref> encryption."},{"pos":[6042,6140],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">rgbKey</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>rgbKey</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[6638,6871],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.MACTripleDES\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified key data and using the specified implementation of <bpt id=\"p2\">&lt;xref href=\"System.Security.Cryptography.TripleDES\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.MACTripleDES\"></xref> class with the specified key data and using the specified implementation of <xref href=\"System.Security.Cryptography.TripleDES\"></xref>."},{"pos":[6884,7142],"content":"The `strTripleDES` parameter is the friendly name of the <xref:System.Security.Cryptography.TripleDES> implementation type. The default implementation is System.Security.Cryptography.TripleDES.       The `rgbKey` parameter must be 16 or 24 bytes in length.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <ph id=\"ph1\">`strTripleDES`</ph> parameter is the friendly name of the &lt;xref:System.Security.Cryptography.TripleDES&gt; implementation type.","pos":[0,123],"source":"The `strTripleDES` parameter is the friendly name of the <xref:System.Security.Cryptography.TripleDES> implementation type."},{"content":"The default implementation is System.Security.Cryptography.TripleDES.","pos":[124,193]},{"content":"The <ph id=\"ph1\">`rgbKey`</ph> parameter must be 16 or 24 bytes in length.","pos":[200,256],"source":"       The `rgbKey` parameter must be 16 or 24 bytes in length."}]},{"pos":[7309,7407],"content":"The name of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.TripleDES\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> implementation to use.","needQuote":true,"needEscape":true,"source":"The name of the <xref href=\"System.Security.Cryptography.TripleDES\"></xref> implementation to use."},{"pos":[7470,7563],"content":"The secret key for <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.MACTripleDES\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> encryption.","needQuote":true,"needEscape":true,"source":"The secret key for <xref href=\"System.Security.Cryptography.MACTripleDES\"></xref> encryption."},{"pos":[7741,7839],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">rgbKey</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>rgbKey</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[8026,8166],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">strTripleDES</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not a valid name of a <bpt id=\"p2\">&lt;xref href=\"System.Security.Cryptography.TripleDES\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> implementation.","needQuote":true,"needEscape":true,"source":"The <code>strTripleDES</code> parameter is not a valid name of a <xref href=\"System.Security.Cryptography.TripleDES\"></xref> implementation."},{"pos":[8602,8709],"content":"Releases the resources used by the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.MACTripleDES\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance.","needQuote":true,"needEscape":true,"source":"Releases the resources used by the <xref href=\"System.Security.Cryptography.MACTripleDES\"></xref> instance."},{"pos":[8722,9221],"content":"This method is called by the public `Dispose()` method and the `Finalize` method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the disposing parameter set to `true`. `Finalize` invokes `Dispose` with disposing set to `false`.       When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.Cryptography.MACTripleDES> references. This method invokes the `Dispose()` method of each referenced object.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method is called by the public <ph id=\"ph1\">`Dispose()`</ph> method and the <ph id=\"ph2\">`Finalize`</ph> method.","pos":[0,81],"source":"This method is called by the public `Dispose()` method and the `Finalize` method."},{"content":"<ph id=\"ph1\">`Dispose()`</ph> invokes the protected <ph id=\"ph2\">`Dispose(Boolean)`</ph> method with the disposing parameter set to <ph id=\"ph3\">`true`</ph>.","pos":[82,185],"source":"`Dispose()` invokes the protected `Dispose(Boolean)` method with the disposing parameter set to `true`."},{"content":"<ph id=\"ph1\">`Finalize`</ph> invokes <ph id=\"ph2\">`Dispose`</ph> with disposing set to <ph id=\"ph3\">`false`</ph>.","pos":[186,245],"source":"`Finalize` invokes `Dispose` with disposing set to `false`."},{"content":"When the <ph id=\"ph1\">`disposing`</ph> parameter is <ph id=\"ph2\">`true`</ph>, this method releases all resources held by any managed objects that this &lt;xref:System.Security.Cryptography.MACTripleDES&gt; references.","pos":[252,427],"source":"       When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.Cryptography.MACTripleDES> references."},{"content":"This method invokes the <ph id=\"ph1\">`Dispose()`</ph> method of each referenced object.","pos":[428,497],"source":" This method invokes the `Dispose()` method of each referenced object."}]},{"pos":[9378,9629],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the method is called from an <ph id=\"ph1\">&amp;lt;</ph>xref:System.IDisposable.Dispose%2A?displayProperty=fullName<ph id=\"ph2\">&amp;gt;</ph> implementation; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the method is called from an &lt;xref:System.IDisposable.Dispose%2A?displayProperty=fullName&gt; implementation; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[10233,10398],"content":"Routes data written to the object into the <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.TripleDES\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> encryptor for computing the Message Authentication Code (MAC).","needQuote":true,"needEscape":true,"source":"Routes data written to the object into the <xref href=\"System.Security.Cryptography.TripleDES\"></xref> encryptor for computing the Message Authentication Code (MAC)."},{"pos":[10577,10592],"content":"The input data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The input data.","pos":[0,15]}]},{"pos":[10655,10717],"content":"The offset into the byte array from which to begin using data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The offset into the byte array from which to begin using data.","pos":[0,62]}]},{"pos":[10779,10827],"content":"The number of bytes in the array to use as data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes in the array to use as data.","pos":[0,48]}]},{"pos":[11301,11396],"content":"Returns the computed Message Authentication Code (MAC) after all data is written to the object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the computed Message Authentication Code (MAC) after all data is written to the object.","pos":[0,95]}]},{"pos":[11408,11647],"content":"You can read this value only after all data is written, and you cannot write more data afterward. Create a new instance of <xref:System.Security.Cryptography.MACTripleDES> for each separate segment of data to compute the MAC for that data.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"You can read this value only after all data is written, and you cannot write more data afterward. Create a new instance of <xref:System.Security.Cryptography.MACTripleDES> for each separate segment of data to compute the MAC for that data.","pos":[0,239],"nodes":[{"content":"You can read this value only after all data is written, and you cannot write more data afterward.","pos":[0,97]},{"content":"Create a new instance of &lt;xref:System.Security.Cryptography.MACTripleDES&gt; for each separate segment of data to compute the MAC for that data.","pos":[98,239],"source":" Create a new instance of <xref:System.Security.Cryptography.MACTripleDES> for each separate segment of data to compute the MAC for that data."}]}]},{"pos":[11787,11804],"content":"The computed MAC.","needQuote":true,"needEscape":true,"nodes":[{"content":"The computed MAC.","pos":[0,17]}]},{"pos":[12284,12374],"content":"Initializes an instance of <bpt id=\"p1\">&lt;xref href=\"System.Security.Cryptography.MACTripleDES\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Initializes an instance of <xref href=\"System.Security.Cryptography.MACTripleDES\"></xref>."},{"pos":[12386,12442],"content":"This method calls the default constructor for the class.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method calls the default constructor for the class.","pos":[0,56]}]},{"pos":[12982,13042],"content":"Gets or sets the padding mode used in the hashing algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the padding mode used in the hashing algorithm.","pos":[0,60]}]},{"pos":[13055,13584],"content":"Most plain text messages do not consist of a number of bytes that completely fill blocks. Often, there are not enough bytes to fill the last block. When this happens, a padding string is added to the text. For example, if the block length is 64 bits and the last block contains only 40 bits, 24 bits of padding are added. See <xref:System.Security.Cryptography.PaddingMode> for a description of specific modes.       This field is accessed through the <xref:System.Security.Cryptography.SymmetricAlgorithm.Padding%2A> property.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Most plain text messages do not consist of a number of bytes that completely fill blocks. Often, there are not enough bytes to fill the last block. When this happens, a padding string is added to the text. For example, if the block length is 64 bits and the last block contains only 40 bits, 24 bits of padding are added. See <xref:System.Security.Cryptography.PaddingMode> for a description of specific modes.       This field is accessed through the <xref:System.Security.Cryptography.SymmetricAlgorithm.Padding%2A> property.","pos":[0,527],"nodes":[{"content":"Most plain text messages do not consist of a number of bytes that completely fill blocks.","pos":[0,89]},{"content":"Often, there are not enough bytes to fill the last block.","pos":[90,147]},{"content":"When this happens, a padding string is added to the text.","pos":[148,205]},{"content":"For example, if the block length is 64 bits and the last block contains only 40 bits, 24 bits of padding are added.","pos":[206,321]},{"content":"See &lt;xref:System.Security.Cryptography.PaddingMode&gt; for a description of specific modes.","pos":[322,410],"source":" See <xref:System.Security.Cryptography.PaddingMode> for a description of specific modes."},{"content":"This field is accessed through the &lt;xref:System.Security.Cryptography.SymmetricAlgorithm.Padding%2A&gt; property.","pos":[417,527],"source":"       This field is accessed through the <xref:System.Security.Cryptography.SymmetricAlgorithm.Padding%2A> property."}]}]},{"pos":[13763,13810],"content":"The padding mode used in the hashing algorithm.","needQuote":true,"needEscape":true,"nodes":[{"content":"The padding mode used in the hashing algorithm.","pos":[0,47]}]},{"pos":[14036,14099],"content":"The property cannot be set because the padding mode is invalid.","needQuote":true,"needEscape":true,"nodes":[{"content":"The property cannot be set because the padding mode is invalid.","pos":[0,63]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.MACTripleDES\n  id: MACTripleDES\n  children:\n  - System.Security.Cryptography.MACTripleDES.#ctor\n  - System.Security.Cryptography.MACTripleDES.#ctor(System.Byte[])\n  - System.Security.Cryptography.MACTripleDES.#ctor(System.String,System.Byte[])\n  - System.Security.Cryptography.MACTripleDES.Dispose(System.Boolean)\n  - System.Security.Cryptography.MACTripleDES.HashCore(System.Byte[],System.Int32,System.Int32)\n  - System.Security.Cryptography.MACTripleDES.HashFinal\n  - System.Security.Cryptography.MACTripleDES.Initialize\n  - System.Security.Cryptography.MACTripleDES.Padding\n  langs:\n  - csharp\n  name: MACTripleDES\n  nameWithType: MACTripleDES\n  fullName: System.Security.Cryptography.MACTripleDES\n  type: Class\n  summary: Computes a Message Authentication Code (MAC) using <xref href=\"System.Security.Cryptography.TripleDES\"></xref> for the input data <xref href=\"System.Security.Cryptography.CryptoStream\"></xref>.\n  remarks: \"A MAC can be used to determine whether a message sent over an insecure channel has been tampered with, provided that the sender and receiver share a secret key. The sender computes the MAC for the original data, and sends both as a single message. The receiver recomputes the MAC on the received message, and checks that the computed MAC matches the transmitted MAC.  \\n  \\n Any change to the data or the MAC results in a mismatch, because knowledge of the secret key is required to change the message and reproduce the correct MAC. Therefore, if the codes match, the message is authenticated.  \\n  \\n MACTripleDES uses a key that is 16 or 24 bytes long, and produces a hash sequence that is 8 bytes long.\"\n  example:\n  - \"The following example creates a MAC for a file named `input.txt`, which is located in the folder that contains the example executable. The MAC and the original text are written to a file named `encrypted.hsh` in the same folder. The signed file is then read, and the MAC is calculated for the text portion of the file and compared to the MAC that is included with the text.  \\n  \\n [!code-vb[MAC3DES#1](~/add/codesnippet/visualbasic/t-system.security.crypto_8_1.vb)]\\n [!code-cs[MAC3DES#1](~/add/codesnippet/csharp/t-system.security.crypto_8_1.cs)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class MACTripleDES : System.Security.Cryptography.KeyedHashAlgorithm\n  inheritance:\n  - System.Object\n  - System.Security.Cryptography.HashAlgorithm\n  - System.Security.Cryptography.KeyedHashAlgorithm\n  implements: []\n  inheritedMembers:\n  - System.Security.Cryptography.HashAlgorithm.CanReuseTransform\n  - System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks\n  - System.Security.Cryptography.HashAlgorithm.Clear\n  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])\n  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)\n  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)\n  - System.Security.Cryptography.HashAlgorithm.Dispose\n  - System.Security.Cryptography.HashAlgorithm.Hash\n  - System.Security.Cryptography.HashAlgorithm.HashSize\n  - System.Security.Cryptography.HashAlgorithm.HashSizeValue\n  - System.Security.Cryptography.HashAlgorithm.HashValue\n  - System.Security.Cryptography.HashAlgorithm.InputBlockSize\n  - System.Security.Cryptography.HashAlgorithm.OutputBlockSize\n  - System.Security.Cryptography.HashAlgorithm.State\n  - System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  - System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  - System.Security.Cryptography.KeyedHashAlgorithm.Create\n  - System.Security.Cryptography.KeyedHashAlgorithm.Create(System.String)\n  - System.Security.Cryptography.KeyedHashAlgorithm.Key\n  - System.Security.Cryptography.KeyedHashAlgorithm.KeyValue\n  platform:\n  - net462\n- uid: System.Security.Cryptography.MACTripleDES.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.MACTripleDES\n  langs:\n  - csharp\n  name: MACTripleDES()\n  nameWithType: MACTripleDES.MACTripleDES()\n  fullName: System.Security.Cryptography.MACTripleDES.MACTripleDES()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.MACTripleDES\"></xref> class.\n  remarks: This constructor uses the default implementation of <xref:System.Security.Cryptography.TripleDES>.\n  syntax:\n    content: public MACTripleDES ();\n    parameters: []\n  overload: System.Security.Cryptography.MACTripleDES.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.MACTripleDES.#ctor(System.Byte[])\n  id: '#ctor(System.Byte[])'\n  parent: System.Security.Cryptography.MACTripleDES\n  langs:\n  - csharp\n  name: MACTripleDES(Byte[])\n  nameWithType: MACTripleDES.MACTripleDES(Byte[])\n  fullName: System.Security.Cryptography.MACTripleDES.MACTripleDES(Byte[])\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.MACTripleDES\"></xref> class with the specified key data.\n  remarks: This constructor uses the default implementation of <xref:System.Security.Cryptography.TripleDES>. The `rgbKey` parameter must be 16 or 24 bytes in length.\n  example:\n  - For an example of how to use this constructor, see the <xref:System.Security.Cryptography.MACTripleDES> class.\n  syntax:\n    content: public MACTripleDES (byte[] rgbKey);\n    parameters:\n    - id: rgbKey\n      type: System.Byte[]\n      description: The secret key for <xref href=\"System.Security.Cryptography.MACTripleDES\"></xref> encryption.\n  overload: System.Security.Cryptography.MACTripleDES.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>rgbKey</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.MACTripleDES.#ctor(System.String,System.Byte[])\n  id: '#ctor(System.String,System.Byte[])'\n  parent: System.Security.Cryptography.MACTripleDES\n  langs:\n  - csharp\n  name: MACTripleDES(String,Byte[])\n  nameWithType: MACTripleDES.MACTripleDES(String,Byte[])\n  fullName: System.Security.Cryptography.MACTripleDES.MACTripleDES(String,Byte[])\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.MACTripleDES\"></xref> class with the specified key data and using the specified implementation of <xref href=\"System.Security.Cryptography.TripleDES\"></xref>.\n  remarks: \"The `strTripleDES` parameter is the friendly name of the <xref:System.Security.Cryptography.TripleDES> implementation type. The default implementation is System.Security.Cryptography.TripleDES.  \\n  \\n The `rgbKey` parameter must be 16 or 24 bytes in length.\"\n  syntax:\n    content: public MACTripleDES (string strTripleDES, byte[] rgbKey);\n    parameters:\n    - id: strTripleDES\n      type: System.String\n      description: The name of the <xref href=\"System.Security.Cryptography.TripleDES\"></xref> implementation to use.\n    - id: rgbKey\n      type: System.Byte[]\n      description: The secret key for <xref href=\"System.Security.Cryptography.MACTripleDES\"></xref> encryption.\n  overload: System.Security.Cryptography.MACTripleDES.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>rgbKey</code> parameter is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.Security.Cryptography.CryptographicUnexpectedOperationException\n    commentId: T:System.Security.Cryptography.CryptographicUnexpectedOperationException\n    description: The <code>strTripleDES</code> parameter is not a valid name of a <xref href=\"System.Security.Cryptography.TripleDES\"></xref> implementation.\n  platform:\n  - net462\n- uid: System.Security.Cryptography.MACTripleDES.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Security.Cryptography.MACTripleDES\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: MACTripleDES.Dispose(Boolean)\n  fullName: System.Security.Cryptography.MACTripleDES.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Releases the resources used by the <xref href=\"System.Security.Cryptography.MACTripleDES\"></xref> instance.\n  remarks: \"This method is called by the public `Dispose()` method and the `Finalize` method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the disposing parameter set to `true`. `Finalize` invokes `Dispose` with disposing set to `false`.  \\n  \\n When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.Cryptography.MACTripleDES> references. This method invokes the `Dispose()` method of each referenced object.\"\n  syntax:\n    content: protected override void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the method is called from an &lt;xref:System.IDisposable.Dispose%2A?displayProperty=fullName&gt; implementation; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Cryptography.MACTripleDES.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.MACTripleDES.HashCore(System.Byte[],System.Int32,System.Int32)\n  id: HashCore(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.MACTripleDES\n  langs:\n  - csharp\n  name: HashCore(Byte[],Int32,Int32)\n  nameWithType: MACTripleDES.HashCore(Byte[],Int32,Int32)\n  fullName: System.Security.Cryptography.MACTripleDES.HashCore(Byte[],Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Routes data written to the object into the <xref href=\"System.Security.Cryptography.TripleDES\"></xref> encryptor for computing the Message Authentication Code (MAC).\n  syntax:\n    content: protected override void HashCore (byte[] rgbData, int ibStart, int cbSize);\n    parameters:\n    - id: rgbData\n      type: System.Byte[]\n      description: The input data.\n    - id: ibStart\n      type: System.Int32\n      description: The offset into the byte array from which to begin using data.\n    - id: cbSize\n      type: System.Int32\n      description: The number of bytes in the array to use as data.\n  overload: System.Security.Cryptography.MACTripleDES.HashCore*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.MACTripleDES.HashFinal\n  id: HashFinal\n  parent: System.Security.Cryptography.MACTripleDES\n  langs:\n  - csharp\n  name: HashFinal()\n  nameWithType: MACTripleDES.HashFinal()\n  fullName: System.Security.Cryptography.MACTripleDES.HashFinal()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Returns the computed Message Authentication Code (MAC) after all data is written to the object.\n  remarks: You can read this value only after all data is written, and you cannot write more data afterward. Create a new instance of <xref:System.Security.Cryptography.MACTripleDES> for each separate segment of data to compute the MAC for that data.\n  syntax:\n    content: protected override byte[] HashFinal ();\n    parameters: []\n    return:\n      type: System.Byte[]\n      description: The computed MAC.\n  overload: System.Security.Cryptography.MACTripleDES.HashFinal*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.MACTripleDES.Initialize\n  id: Initialize\n  parent: System.Security.Cryptography.MACTripleDES\n  langs:\n  - csharp\n  name: Initialize()\n  nameWithType: MACTripleDES.Initialize()\n  fullName: System.Security.Cryptography.MACTripleDES.Initialize()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Initializes an instance of <xref href=\"System.Security.Cryptography.MACTripleDES\"></xref>.\n  remarks: This method calls the default constructor for the class.\n  syntax:\n    content: public override void Initialize ();\n    parameters: []\n  overload: System.Security.Cryptography.MACTripleDES.Initialize*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Cryptography.MACTripleDES.Padding\n  id: Padding\n  parent: System.Security.Cryptography.MACTripleDES\n  langs:\n  - csharp\n  name: Padding\n  nameWithType: MACTripleDES.Padding\n  fullName: System.Security.Cryptography.MACTripleDES.Padding\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  summary: Gets or sets the padding mode used in the hashing algorithm.\n  remarks: \"Most plain text messages do not consist of a number of bytes that completely fill blocks. Often, there are not enough bytes to fill the last block. When this happens, a padding string is added to the text. For example, if the block length is 64 bits and the last block contains only 40 bits, 24 bits of padding are added. See <xref:System.Security.Cryptography.PaddingMode> for a description of specific modes.  \\n  \\n This field is accessed through the <xref:System.Security.Cryptography.SymmetricAlgorithm.Padding%2A> property.\"\n  syntax:\n    content: public System.Security.Cryptography.PaddingMode Padding { get; set; }\n    return:\n      type: System.Security.Cryptography.PaddingMode\n      description: The padding mode used in the hashing algorithm.\n  overload: System.Security.Cryptography.MACTripleDES.Padding*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: The property cannot be set because the padding mode is invalid.\n  platform:\n  - net462\nreferences:\n- uid: System.Security.Cryptography.KeyedHashAlgorithm\n  isExternal: false\n  name: System.Security.Cryptography.KeyedHashAlgorithm\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.Security.Cryptography.CryptographicUnexpectedOperationException\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CryptographicUnexpectedOperationException\n  nameWithType: CryptographicUnexpectedOperationException\n  fullName: System.Security.Cryptography.CryptographicUnexpectedOperationException\n- uid: System.Security.Cryptography.CryptographicException\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CryptographicException\n  nameWithType: CryptographicException\n  fullName: System.Security.Cryptography.CryptographicException\n- uid: System.Security.Cryptography.MACTripleDES.#ctor\n  parent: System.Security.Cryptography.MACTripleDES\n  isExternal: false\n  name: MACTripleDES()\n  nameWithType: MACTripleDES.MACTripleDES()\n  fullName: System.Security.Cryptography.MACTripleDES.MACTripleDES()\n- uid: System.Security.Cryptography.MACTripleDES.#ctor(System.Byte[])\n  parent: System.Security.Cryptography.MACTripleDES\n  isExternal: false\n  name: MACTripleDES(Byte[])\n  nameWithType: MACTripleDES.MACTripleDES(Byte[])\n  fullName: System.Security.Cryptography.MACTripleDES.MACTripleDES(Byte[])\n- uid: System.Byte[]\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: Byte[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Security.Cryptography.MACTripleDES.#ctor(System.String,System.Byte[])\n  parent: System.Security.Cryptography.MACTripleDES\n  isExternal: false\n  name: MACTripleDES(String,Byte[])\n  nameWithType: MACTripleDES.MACTripleDES(String,Byte[])\n  fullName: System.Security.Cryptography.MACTripleDES.MACTripleDES(String,Byte[])\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Cryptography.MACTripleDES.Dispose(System.Boolean)\n  parent: System.Security.Cryptography.MACTripleDES\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: MACTripleDES.Dispose(Boolean)\n  fullName: System.Security.Cryptography.MACTripleDES.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.MACTripleDES.HashCore(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.MACTripleDES\n  isExternal: false\n  name: HashCore(Byte[],Int32,Int32)\n  nameWithType: MACTripleDES.HashCore(Byte[],Int32,Int32)\n  fullName: System.Security.Cryptography.MACTripleDES.HashCore(Byte[],Int32,Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.MACTripleDES.HashFinal\n  parent: System.Security.Cryptography.MACTripleDES\n  isExternal: false\n  name: HashFinal()\n  nameWithType: MACTripleDES.HashFinal()\n  fullName: System.Security.Cryptography.MACTripleDES.HashFinal()\n- uid: System.Security.Cryptography.MACTripleDES.Initialize\n  parent: System.Security.Cryptography.MACTripleDES\n  isExternal: false\n  name: Initialize()\n  nameWithType: MACTripleDES.Initialize()\n  fullName: System.Security.Cryptography.MACTripleDES.Initialize()\n- uid: System.Security.Cryptography.MACTripleDES.Padding\n  parent: System.Security.Cryptography.MACTripleDES\n  isExternal: false\n  name: Padding\n  nameWithType: MACTripleDES.Padding\n  fullName: System.Security.Cryptography.MACTripleDES.Padding\n- uid: System.Security.Cryptography.PaddingMode\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: PaddingMode\n  nameWithType: PaddingMode\n  fullName: System.Security.Cryptography.PaddingMode\n- uid: System.Security.Cryptography.MACTripleDES.#ctor*\n  parent: System.Security.Cryptography.MACTripleDES\n  isExternal: false\n  name: MACTripleDES\n  nameWithType: MACTripleDES.MACTripleDES\n- uid: System.Security.Cryptography.MACTripleDES.Dispose*\n  parent: System.Security.Cryptography.MACTripleDES\n  isExternal: false\n  name: Dispose\n  nameWithType: MACTripleDES.Dispose\n- uid: System.Security.Cryptography.MACTripleDES.HashCore*\n  parent: System.Security.Cryptography.MACTripleDES\n  isExternal: false\n  name: HashCore\n  nameWithType: MACTripleDES.HashCore\n- uid: System.Security.Cryptography.MACTripleDES.HashFinal*\n  parent: System.Security.Cryptography.MACTripleDES\n  isExternal: false\n  name: HashFinal\n  nameWithType: MACTripleDES.HashFinal\n- uid: System.Security.Cryptography.MACTripleDES.Initialize*\n  parent: System.Security.Cryptography.MACTripleDES\n  isExternal: false\n  name: Initialize\n  nameWithType: MACTripleDES.Initialize\n- uid: System.Security.Cryptography.MACTripleDES.Padding*\n  parent: System.Security.Cryptography.MACTripleDES\n  isExternal: false\n  name: Padding\n  nameWithType: MACTripleDES.Padding\n"}