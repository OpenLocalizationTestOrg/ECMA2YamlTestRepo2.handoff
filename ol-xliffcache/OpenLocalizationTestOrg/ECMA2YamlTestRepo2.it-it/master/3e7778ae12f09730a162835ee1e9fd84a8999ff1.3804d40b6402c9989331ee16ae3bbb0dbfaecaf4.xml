{"nodes":[{"pos":[895,964],"content":"Enables code to check the Windows group membership of a Windows user.","needQuote":true,"needEscape":true,"nodes":[{"content":"Enables code to check the Windows group membership of a Windows user.","pos":[0,69]}]},{"pos":[976,1227],"content":"The WindowsPrincipal class is primarily used to check the role of a Windows user. The <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A?displayProperty=fullName> method overloads let you check the user role by using different role contexts.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The WindowsPrincipal class is primarily used to check the role of a Windows user. The <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A?displayProperty=fullName> method overloads let you check the user role by using different role contexts.","pos":[0,251],"nodes":[{"content":"The WindowsPrincipal class is primarily used to check the role of a Windows user.","pos":[0,81]},{"content":"The &lt;xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A?displayProperty=fullName&gt; method overloads let you check the user role by using different role contexts.","pos":[82,251],"source":" The <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A?displayProperty=fullName> method overloads let you check the user role by using different role contexts."}]}]},{"pos":[4366,4563],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Principal.WindowsPrincipal\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class by using the specified <bpt id=\"p2\">&lt;xref href=\"System.Security.Principal.WindowsIdentity\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> object.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Security.Principal.WindowsPrincipal\"></xref> class by using the specified <xref href=\"System.Security.Principal.WindowsIdentity\"></xref> object."},{"pos":[5351,5470],"content":"The object from which to construct the new instance of <bpt id=\"p1\">&lt;xref href=\"System.Security.Principal.WindowsPrincipal\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The object from which to construct the new instance of <xref href=\"System.Security.Principal.WindowsPrincipal\"></xref>."},{"pos":[5649,5737],"content":"<ph id=\"ph1\">&lt;code&gt;ntIdentity&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>ntIdentity</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[6145,6196],"content":"Gets all Windows device claims from this principal.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets all Windows device claims from this principal.","pos":[0,51]}]},{"pos":[6438,6500],"content":"A collection of all Windows device claims from this principal.","needQuote":true,"needEscape":true,"nodes":[{"content":"A collection of all Windows device claims from this principal.","pos":[0,62]}]},{"pos":[6974,7017],"content":"Gets the identity of the current principal.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the identity of the current principal.","pos":[0,43]}]},{"pos":[7728,7827],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Security.Principal.WindowsIdentity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> object of the current principal.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Security.Principal.WindowsIdentity\"></xref> object of the current principal."},{"pos":[8344,8464],"content":"Determines whether the current principal belongs to the Windows user group with the specified relative identifier (RID).","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether the current principal belongs to the Windows user group with the specified relative identifier (RID).","pos":[0,120]}]},{"pos":[12121,12211],"content":"The RID of the Windows user group in which to check for the principal’s membership status.","needQuote":true,"needEscape":true,"nodes":[{"content":"The RID of the Windows user group in which to check for the principal’s membership status.","pos":[0,90]}]},{"pos":[12270,12510],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the current principal is a member of the specified Windows user group, that is, in a particular role; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current principal is a member of the specified Windows user group, that is, in a particular role; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[13130,13250],"content":"Determines whether the current principal belongs to the Windows user group with the specified security identifier (SID).","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether the current principal belongs to the Windows user group with the specified security identifier (SID).","pos":[0,120]}]},{"pos":[13263,14757],"content":"The <xref:System.Security.Principal.SecurityIdentifier> uniquely identifies a user or group on Windows 2000, Windows Server, and Windows XP implementations. When testing for newly created role information, such as a new user or a new group, it is important to log out and log in to force the propagation of role information within the domain. Not doing so can cause the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> test to return `false`. This method is not supported on Windows 98 or Windows Millennium Edition.      > [!NOTE] >  In Windows Vista, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. When you attempt to perform a task that requires administrative privileges, you can dynamically elevate your role by using the Consent dialog box. The code that executes the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> method does not display the Consent dialog box. The code returns false if you are in the standard user role, even if you are in the Built-in Administrators group. You can elevate your privileges before you execute the code by right-clicking the application icon and indicating that you want to run as an administrator.       For performance reasons, this is the preferable overload to determine a user's role.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.Security.Principal.SecurityIdentifier&gt; uniquely identifies a user or group on Windows 2000, Windows Server, and Windows XP implementations.","pos":[0,156],"source":"The <xref:System.Security.Principal.SecurityIdentifier> uniquely identifies a user or group on Windows 2000, Windows Server, and Windows XP implementations."},{"content":"When testing for newly created role information, such as a new user or a new group, it is important to log out and log in to force the propagation of role information within the domain.","pos":[157,342]},{"content":"Not doing so can cause the &lt;xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A&gt; test to return <ph id=\"ph1\">`false`</ph>.","pos":[343,455],"source":" Not doing so can cause the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> test to return `false`."},{"content":"This method is not supported on Windows 98 or Windows Millennium Edition.","pos":[456,529]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  In Windows Vista, User Account Control (UAC) determines the privileges of a user.","pos":[535,629],"source":"      > [!NOTE] >  In Windows Vista, User Account Control (UAC) determines the privileges of a user."},{"content":"If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token.","pos":[630,796]},{"content":"By default, you are in the standard user role.","pos":[797,843]},{"content":"When you attempt to perform a task that requires administrative privileges, you can dynamically elevate your role by using the Consent dialog box.","pos":[844,990]},{"content":"The code that executes the &lt;xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A&gt; method does not display the Consent dialog box.","pos":[991,1127],"source":" The code that executes the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> method does not display the Consent dialog box."},{"content":"The code returns false if you are in the standard user role, even if you are in the Built-in Administrators group.","pos":[1128,1242]},{"content":"You can elevate your privileges before you execute the code by right-clicking the application icon and indicating that you want to run as an administrator.","pos":[1243,1398]},{"content":"For performance reasons, this is the preferable overload to determine a user's role.","pos":[1405,1489]}]},{"pos":[15608,15722],"content":"A <bpt id=\"p1\">&lt;xref href=\"System.Security.Principal.SecurityIdentifier\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that uniquely identifies a Windows user group.","needQuote":true,"needEscape":true,"source":"A <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref> that uniquely identifies a Windows user group."},{"pos":[15781,15990],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the current principal is a member of the specified Windows user group; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current principal is a member of the specified Windows user group; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[16172,16253],"content":"<ph id=\"ph1\">&lt;code&gt;sid&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>sid</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[16366,16397],"content":"Windows returned a Win32 error.","needQuote":true,"needEscape":true,"nodes":[{"content":"Windows returned a Win32 error.","pos":[0,31]}]},{"pos":[16935,17095],"content":"Determines whether the current principal belongs to the Windows user group with the specified <bpt id=\"p1\">&lt;xref href=\"System.Security.Principal.WindowsBuiltInRole\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Determines whether the current principal belongs to the Windows user group with the specified <xref href=\"System.Security.Principal.WindowsBuiltInRole\"></xref>."},{"pos":[17108,18582],"content":"When testing for newly created role information, such as a new user or a new group, it is important to log out and log in to force the propagation of role information within the domain. Not doing so can cause the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> test to return `false`. This method is not supported on Windows 98 or Windows Millennium Edition.       For performance reasons, the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%28System.Security.Principal.SecurityIdentifier%29> overload is recommended as the preferable overload for determining the user's role.      > [!NOTE] >  In Windows Vista, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. When you attempt to perform a task that requires administrative privileges, you can dynamically elevate your role by using the Consent dialog box. The code that executes the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> method does not display the Consent dialog box. The code returns false if you are in the standard user role, even if you are in the Built-in Administrators group. You can elevate your privileges before you execute the code by right-clicking the application icon and indicating that you want to run as an administrator.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"When testing for newly created role information, such as a new user or a new group, it is important to log out and log in to force the propagation of role information within the domain.","pos":[0,185]},{"content":"Not doing so can cause the &lt;xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A&gt; test to return <ph id=\"ph1\">`false`</ph>.","pos":[186,298],"source":" Not doing so can cause the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> test to return `false`."},{"content":"This method is not supported on Windows 98 or Windows Millennium Edition.","pos":[299,372]},{"content":"For performance reasons, the &lt;xref:System.Security.Principal.WindowsPrincipal.IsInRole%28System.Security.Principal.SecurityIdentifier%29&gt; overload is recommended as the preferable overload for determining the user's role.","pos":[379,600],"source":"       For performance reasons, the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%28System.Security.Principal.SecurityIdentifier%29> overload is recommended as the preferable overload for determining the user's role."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  In Windows Vista, User Account Control (UAC) determines the privileges of a user.","pos":[606,700],"source":"      > [!NOTE] >  In Windows Vista, User Account Control (UAC) determines the privileges of a user."},{"content":"If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token.","pos":[701,867]},{"content":"By default, you are in the standard user role.","pos":[868,914]},{"content":"When you attempt to perform a task that requires administrative privileges, you can dynamically elevate your role by using the Consent dialog box.","pos":[915,1061]},{"content":"The code that executes the &lt;xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A&gt; method does not display the Consent dialog box.","pos":[1062,1198],"source":" The code that executes the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> method does not display the Consent dialog box."},{"content":"The code returns false if you are in the standard user role, even if you are in the Built-in Administrators group.","pos":[1199,1313]},{"content":"You can elevate your privileges before you execute the code by right-clicking the application icon and indicating that you want to run as an administrator.","pos":[1314,1469]}]},{"pos":[19424,19508],"content":"One of the <bpt id=\"p1\">&lt;xref href=\"System.Security.Principal.WindowsBuiltInRole\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> values.","needQuote":true,"needEscape":true,"source":"One of the <xref href=\"System.Security.Principal.WindowsBuiltInRole\"></xref> values."},{"pos":[19567,19776],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the current principal is a member of the specified Windows user group; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current principal is a member of the specified Windows user group; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[19950,20055],"content":"<ph id=\"ph1\">&lt;code&gt;role&lt;/code&gt;</ph> is not a valid <bpt id=\"p1\">&lt;xref href=\"System.Security.Principal.WindowsBuiltInRole\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> value.","needQuote":true,"needEscape":true,"source":"<code>role</code> is not a valid <xref href=\"System.Security.Principal.WindowsBuiltInRole\"></xref> value."},{"pos":[20495,20594],"content":"Determines whether the current principal belongs to the Windows user group with the specified name.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether the current principal belongs to the Windows user group with the specified name.","pos":[0,99]}]},{"pos":[24316,24381],"content":"The name of the Windows user group for which to check membership.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the Windows user group for which to check membership.","pos":[0,65]}]},{"pos":[24440,24649],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the current principal is a member of the specified Windows user group; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current principal is a member of the specified Windows user group; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[25129,25178],"content":"Gets all Windows user claims from this principal.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets all Windows user claims from this principal.","pos":[0,49]}]},{"pos":[25418,25478],"content":"A collection of all Windows user claims from this principal.","needQuote":true,"needEscape":true,"nodes":[{"content":"A collection of all Windows user claims from this principal.","pos":[0,60]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Principal.WindowsPrincipal\n  id: WindowsPrincipal\n  children:\n  - System.Security.Principal.WindowsPrincipal.#ctor(System.Security.Principal.WindowsIdentity)\n  - System.Security.Principal.WindowsPrincipal.DeviceClaims\n  - System.Security.Principal.WindowsPrincipal.Identity\n  - System.Security.Principal.WindowsPrincipal.IsInRole(System.Int32)\n  - System.Security.Principal.WindowsPrincipal.IsInRole(System.Security.Principal.SecurityIdentifier)\n  - System.Security.Principal.WindowsPrincipal.IsInRole(System.Security.Principal.WindowsBuiltInRole)\n  - System.Security.Principal.WindowsPrincipal.IsInRole(System.String)\n  - System.Security.Principal.WindowsPrincipal.UserClaims\n  langs:\n  - csharp\n  name: WindowsPrincipal\n  nameWithType: WindowsPrincipal\n  fullName: System.Security.Principal.WindowsPrincipal\n  type: Class\n  summary: Enables code to check the Windows group membership of a Windows user.\n  remarks: The WindowsPrincipal class is primarily used to check the role of a Windows user. The <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A?displayProperty=fullName> method overloads let you check the user role by using different role contexts.\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> method overloads. The <xref:System.Security.Principal.WindowsBuiltInRole> enumeration is used as the source for the relative identifiers (RIDs) that identify the built-in roles. The RIDs are used to determine the roles of the current principal.  \\n  \\n [!code-cs[System.Security.Principal.WindowsBuiltInRole Example#1](~/add/codesnippet/csharp/t-system.security.princi_6_1.cs)]\\n [!code-cpp[System.Security.Principal.WindowsBuiltInRole Example#1](~/add/codesnippet/cpp/t-system.security.princi_6_1.cpp)]\\n [!code-vb[System.Security.Principal.WindowsBuiltInRole Example#1](~/add/codesnippet/visualbasic/t-system.security.princi_6_1.vb)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class WindowsPrincipal : System.Security.Claims.ClaimsPrincipal\n  inheritance:\n  - System.Object\n  - System.Security.Claims.ClaimsPrincipal\n  implements: []\n  inheritedMembers:\n  - System.Security.Claims.ClaimsPrincipal.AddIdentities(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})\n  - System.Security.Claims.ClaimsPrincipal.AddIdentity(System.Security.Claims.ClaimsIdentity)\n  - System.Security.Claims.ClaimsPrincipal.Claims\n  - System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector\n  - System.Security.Claims.ClaimsPrincipal.Clone\n  - System.Security.Claims.ClaimsPrincipal.CreateClaimsIdentity(System.IO.BinaryReader)\n  - System.Security.Claims.ClaimsPrincipal.Current\n  - System.Security.Claims.ClaimsPrincipal.CustomSerializationData\n  - System.Security.Claims.ClaimsPrincipal.FindAll(System.Predicate{System.Security.Claims.Claim})\n  - System.Security.Claims.ClaimsPrincipal.FindAll(System.String)\n  - System.Security.Claims.ClaimsPrincipal.FindFirst(System.Predicate{System.Security.Claims.Claim})\n  - System.Security.Claims.ClaimsPrincipal.FindFirst(System.String)\n  - System.Security.Claims.ClaimsPrincipal.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  - System.Security.Claims.ClaimsPrincipal.HasClaim(System.Predicate{System.Security.Claims.Claim})\n  - System.Security.Claims.ClaimsPrincipal.HasClaim(System.String,System.String)\n  - System.Security.Claims.ClaimsPrincipal.Identities\n  - System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector\n  - System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter)\n  - System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter,System.Byte[])\n  platform:\n  - net462\n- uid: System.Security.Principal.WindowsPrincipal.#ctor(System.Security.Principal.WindowsIdentity)\n  id: '#ctor(System.Security.Principal.WindowsIdentity)'\n  parent: System.Security.Principal.WindowsPrincipal\n  langs:\n  - csharp\n  name: WindowsPrincipal(WindowsIdentity)\n  nameWithType: WindowsPrincipal.WindowsPrincipal(WindowsIdentity)\n  fullName: System.Security.Principal.WindowsPrincipal.WindowsPrincipal(WindowsIdentity)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Principal\n  summary: Initializes a new instance of the <xref href=\"System.Security.Principal.WindowsPrincipal\"></xref> class by using the specified <xref href=\"System.Security.Principal.WindowsIdentity\"></xref> object.\n  remarks: ''\n  example:\n  - \"The following example creates a new <xref:System.Security.Principal.WindowsPrincipal> object from the current <xref:System.Security.Principal.WindowsIdentity> object.  \\n  \\n [!code-cpp[Classic WindowsPrincipal.WindowsPrincipal Example#1](~/add/codesnippet/cpp/95e6ca5c-553a-4cf6-a488-_1.cpp)]\\n [!code-cs[Classic WindowsPrincipal.WindowsPrincipal Example#1](~/add/codesnippet/csharp/95e6ca5c-553a-4cf6-a488-_1.cs)]\\n [!code-vb[Classic WindowsPrincipal.WindowsPrincipal Example#1](~/add/codesnippet/visualbasic/95e6ca5c-553a-4cf6-a488-_1.vb)]\"\n  syntax:\n    content: public WindowsPrincipal (System.Security.Principal.WindowsIdentity ntIdentity);\n    parameters:\n    - id: ntIdentity\n      type: System.Security.Principal.WindowsIdentity\n      description: The object from which to construct the new instance of <xref href=\"System.Security.Principal.WindowsPrincipal\"></xref>.\n  overload: System.Security.Principal.WindowsPrincipal.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>ntIdentity</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Security.Principal.WindowsPrincipal.DeviceClaims\n  id: DeviceClaims\n  parent: System.Security.Principal.WindowsPrincipal\n  langs:\n  - csharp\n  name: DeviceClaims\n  nameWithType: WindowsPrincipal.DeviceClaims\n  fullName: System.Security.Principal.WindowsPrincipal.DeviceClaims\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Principal\n  summary: Gets all Windows device claims from this principal.\n  syntax:\n    content: public virtual System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> DeviceClaims { get; }\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}\n      description: A collection of all Windows device claims from this principal.\n  overload: System.Security.Principal.WindowsPrincipal.DeviceClaims*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Principal.WindowsPrincipal.Identity\n  id: Identity\n  parent: System.Security.Principal.WindowsPrincipal\n  langs:\n  - csharp\n  name: Identity\n  nameWithType: WindowsPrincipal.Identity\n  fullName: System.Security.Principal.WindowsPrincipal.Identity\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Principal\n  summary: Gets the identity of the current principal.\n  remarks: ''\n  example:\n  - \"The following example retrieves the name of the user by using the Identity property of the <xref:System.Security.Principal.WindowsPrincipal> object.  \\n  \\n [!code-cpp[Classic WindowsPrincipal.Identity Example#1](~/add/codesnippet/cpp/p-system.security.princi_6_1.cpp)]\\n [!code-vb[Classic WindowsPrincipal.Identity Example#1](~/add/codesnippet/visualbasic/p-system.security.princi_6_1.vb)]\\n [!code-cs[Classic WindowsPrincipal.Identity Example#1](~/add/codesnippet/csharp/p-system.security.princi_6_1.cs)]\"\n  syntax:\n    content: public override System.Security.Principal.IIdentity Identity { get; }\n    return:\n      type: System.Security.Principal.IIdentity\n      description: The <xref href=\"System.Security.Principal.WindowsIdentity\"></xref> object of the current principal.\n  overload: System.Security.Principal.WindowsPrincipal.Identity*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Principal.WindowsPrincipal.IsInRole(System.Int32)\n  id: IsInRole(System.Int32)\n  parent: System.Security.Principal.WindowsPrincipal\n  langs:\n  - csharp\n  name: IsInRole(Int32)\n  nameWithType: WindowsPrincipal.IsInRole(Int32)\n  fullName: System.Security.Principal.WindowsPrincipal.IsInRole(Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Principal\n  summary: Determines whether the current principal belongs to the Windows user group with the specified relative identifier (RID).\n  remarks: \"When testing for newly created role information, such as a new user or a new group, it is important to log out and log in to force the propagation of role information within the domain. Not doing so can cause the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> test to return `false`. This method is not supported on Windows 98 or Windows Millennium Edition.  \\n  \\n For performance reasons, the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%28System.Security.Principal.SecurityIdentifier%29> overload is recommended as the preferable overload for determining the user's role.  \\n  \\n> [!NOTE]\\n>  In Windows Vista, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. When you attempt to perform a task that requires administrative privileges, you can dynamically elevate your role by using the Consent dialog box. The code that executes the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> method does not display the Consent dialog box. The code returns false if you are in the standard user role, even if you are in the Built-in Administrators group. You can elevate your privileges before you execute the code by right-clicking the application icon and indicating that you want to run as an administrator.  \\n  \\n Relative identifiers (RIDs) are components of a Windows user group's security identifier (SID) and are supported to help prevent cross-platform localization issues. Many user accounts, local groups, and global groups have a default RID value that is constant across all versions of Windows.  \\n  \\n For example, the RID for the BUILTIN\\\\Administrators role is 0x220. Using 0x220 as the input parameter for the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> method results in `true` being returned if the current principal is an administrator.  \\n  \\n The following tables list the default RID values.  \\n  \\n|Built-in users|RID|  \\n|---------------------|---------|  \\n|DOMAINNAME\\\\Administrator|0x1F4|  \\n|DOMAINNAME\\\\Guest|0x1F5|  \\n  \\n|Built-in global groups|RID|  \\n|-----------------------------|---------|  \\n|DOMAINNAME\\\\Domain Admins|0x200|  \\n|DOMAINNAME\\\\Domain Users|0x201|  \\n|DOMAINNAME\\\\Domain Guests|0x202|  \\n  \\n|Built-in local groups|RID|  \\n|----------------------------|---------|  \\n|BUILTIN\\\\Administrators|0x220|  \\n|BUILTIN\\\\Users|0x221|  \\n|BUILTIN\\\\Guests|0x222|  \\n|BUILTIN\\\\Account Operators|0x224|  \\n|BUILTIN\\\\Server Operators|0x225|  \\n|BUILTIN\\\\Print Operators|0x226|  \\n|BUILTIN\\\\Backup Operators|0x227|  \\n|BUILTIN\\\\Replicator|0x228|\"\n  example:\n  - \"The following code example demonstrates the use of  the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> methods. The <xref:System.Security.Principal.WindowsBuiltInRole> enumeration is used as the source for the RIDs that identify the built-in roles. The RIDs are used to determine the roles of the current principal.  \\n  \\n [!code-cs[System.Security.Principal.WindowsBuiltInRole Example#1](~/add/codesnippet/csharp/m-system.security.princi_6_1.cs)]\\n [!code-cpp[System.Security.Principal.WindowsBuiltInRole Example#1](~/add/codesnippet/cpp/m-system.security.princi_6_1.cpp)]\\n [!code-vb[System.Security.Principal.WindowsBuiltInRole Example#1](~/add/codesnippet/visualbasic/m-system.security.princi_6_1.vb)]\"\n  syntax:\n    content: public virtual bool IsInRole (int rid);\n    parameters:\n    - id: rid\n      type: System.Int32\n      description: The RID of the Windows user group in which to check for the principal’s membership status.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current principal is a member of the specified Windows user group, that is, in a particular role; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Principal.WindowsPrincipal.IsInRole*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Principal.WindowsPrincipal.IsInRole(System.Security.Principal.SecurityIdentifier)\n  id: IsInRole(System.Security.Principal.SecurityIdentifier)\n  parent: System.Security.Principal.WindowsPrincipal\n  langs:\n  - csharp\n  name: IsInRole(SecurityIdentifier)\n  nameWithType: WindowsPrincipal.IsInRole(SecurityIdentifier)\n  fullName: System.Security.Principal.WindowsPrincipal.IsInRole(SecurityIdentifier)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Principal\n  summary: Determines whether the current principal belongs to the Windows user group with the specified security identifier (SID).\n  remarks: \"The <xref:System.Security.Principal.SecurityIdentifier> uniquely identifies a user or group on Windows 2000, Windows Server, and Windows XP implementations. When testing for newly created role information, such as a new user or a new group, it is important to log out and log in to force the propagation of role information within the domain. Not doing so can cause the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> test to return `false`. This method is not supported on Windows 98 or Windows Millennium Edition.  \\n  \\n> [!NOTE]\\n>  In Windows Vista, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. When you attempt to perform a task that requires administrative privileges, you can dynamically elevate your role by using the Consent dialog box. The code that executes the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> method does not display the Consent dialog box. The code returns false if you are in the standard user role, even if you are in the Built-in Administrators group. You can elevate your privileges before you execute the code by right-clicking the application icon and indicating that you want to run as an administrator.  \\n  \\n For performance reasons, this is the preferable overload to determine a user's role.\"\n  example:\n  - \"The following code example demonstrates the use of the IsInRole method. The <xref:System.Security.Principal.WellKnownSidType> enumeration value is used to determine whether the current principal is an administrator. For the full code example, see the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%28System.Int32%29?displayProperty=fullName> method.  \\n  \\n [!code-cs[System.Security.Principal.WindowsBuiltInRole Example#5](~/add/codesnippet/csharp/d77961a9-c853-4372-a84b-_1.cs)]\\n [!code-vb[System.Security.Principal.WindowsBuiltInRole Example#5](~/add/codesnippet/visualbasic/d77961a9-c853-4372-a84b-_1.vb)]\"\n  syntax:\n    content: public virtual bool IsInRole (System.Security.Principal.SecurityIdentifier sid);\n    parameters:\n    - id: sid\n      type: System.Security.Principal.SecurityIdentifier\n      description: A <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref> that uniquely identifies a Windows user group.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current principal is a member of the specified Windows user group; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Principal.WindowsPrincipal.IsInRole*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>sid</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: Windows returned a Win32 error.\n  platform:\n  - net462\n- uid: System.Security.Principal.WindowsPrincipal.IsInRole(System.Security.Principal.WindowsBuiltInRole)\n  id: IsInRole(System.Security.Principal.WindowsBuiltInRole)\n  parent: System.Security.Principal.WindowsPrincipal\n  langs:\n  - csharp\n  name: IsInRole(WindowsBuiltInRole)\n  nameWithType: WindowsPrincipal.IsInRole(WindowsBuiltInRole)\n  fullName: System.Security.Principal.WindowsPrincipal.IsInRole(WindowsBuiltInRole)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Principal\n  summary: Determines whether the current principal belongs to the Windows user group with the specified <xref href=\"System.Security.Principal.WindowsBuiltInRole\"></xref>.\n  remarks: \"When testing for newly created role information, such as a new user or a new group, it is important to log out and log in to force the propagation of role information within the domain. Not doing so can cause the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> test to return `false`. This method is not supported on Windows 98 or Windows Millennium Edition.  \\n  \\n For performance reasons, the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%28System.Security.Principal.SecurityIdentifier%29> overload is recommended as the preferable overload for determining the user's role.  \\n  \\n> [!NOTE]\\n>  In Windows Vista, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. When you attempt to perform a task that requires administrative privileges, you can dynamically elevate your role by using the Consent dialog box. The code that executes the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> method does not display the Consent dialog box. The code returns false if you are in the standard user role, even if you are in the Built-in Administrators group. You can elevate your privileges before you execute the code by right-clicking the application icon and indicating that you want to run as an administrator.\"\n  example:\n  - \"The following example uses the <xref:System.Security.Principal.WindowsBuiltInRole> enumeration is used to determine whether the current principal is an <xref:System.Security.Principal.WindowsBuiltInRole>. For the full code example, see the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%28System.Int32%29?displayProperty=fullName> method.  \\n  \\n [!code-cs[System.Security.Principal.WindowsBuiltInRole Example#4](~/add/codesnippet/csharp/045134c5-625f-4bfe-be2f-_1.cs)]\\n [!code-vb[System.Security.Principal.WindowsBuiltInRole Example#4](~/add/codesnippet/visualbasic/045134c5-625f-4bfe-be2f-_1.vb)]\"\n  syntax:\n    content: public virtual bool IsInRole (System.Security.Principal.WindowsBuiltInRole role);\n    parameters:\n    - id: role\n      type: System.Security.Principal.WindowsBuiltInRole\n      description: One of the <xref href=\"System.Security.Principal.WindowsBuiltInRole\"></xref> values.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current principal is a member of the specified Windows user group; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Principal.WindowsPrincipal.IsInRole*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>role</code> is not a valid <xref href=\"System.Security.Principal.WindowsBuiltInRole\"></xref> value.\n  platform:\n  - net462\n- uid: System.Security.Principal.WindowsPrincipal.IsInRole(System.String)\n  id: IsInRole(System.String)\n  parent: System.Security.Principal.WindowsPrincipal\n  langs:\n  - csharp\n  name: IsInRole(String)\n  nameWithType: WindowsPrincipal.IsInRole(String)\n  fullName: System.Security.Principal.WindowsPrincipal.IsInRole(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Principal\n  summary: Determines whether the current principal belongs to the Windows user group with the specified name.\n  remarks: \"When testing for newly created role information, such as a new user or a new group, it is important to log out and log in to force the propagation of role information within the domain. Not doing so can cause the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> test to return `false`. This method is not supported on Windows 98 or Windows Millennium Edition.  \\n  \\n For performance reasons, the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%28System.Security.Principal.SecurityIdentifier%29> overload is recommended as the preferable overload for determining the user's role.  \\n  \\n> [!NOTE]\\n>  In Windows Vista, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. When you attempt to perform a task that requires administrative privileges, you can dynamically elevate your role by using the Consent dialog box. The code that executes the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> method does not display the Consent dialog box. The code returns false if you are in the standard user role, even if you are in the Built-in Administrators group. You can elevate your privileges before you execute the code by right-clicking the application icon and indicating that you want to run as an administrator.  \\n  \\n For built-in roles, the `role` string should be in the form \\\"BUILTIN\\\\\\\\*RoleNameHere*\\\". For example, to test for membership in the Windows administrator role, the string representing the role should be \\\"BUILTIN\\\\Administrators\\\". Note that the backslash might need to be escaped. The following table lists the built-in roles.  \\n  \\n> [!NOTE]\\n>  The spelling for the BUILTIN roles in string format differs from the spelling used in the <xref:System.Security.Principal.WindowsBuiltInRole> enumeration. For example, the spelling for an administrator in the enumeration is \\\"Administrator\\\", not \\\"Administrators\\\". When using this overload, use the spelling for the role from the following table.  \\n  \\n|Built-in local groups|  \\n|----------------------------|  \\n|BUILTIN\\\\Administrators|  \\n|BUILTIN\\\\Users|  \\n|BUILTIN\\\\Guests|  \\n|BUILTIN\\\\Account Operators|  \\n|BUILTIN\\\\Server Operators|  \\n|BUILTIN\\\\Print Operators|  \\n|BUILTIN\\\\Backup Operators|  \\n|BUILTIN\\\\Replicator|  \\n  \\n For machine-specific roles, the `role` string should be in the form \\\"MachineName\\\\\\\\*RoleNameHere*\\\".  \\n  \\n For domain-specific roles, the `role` string should be in the form \\\"DomainName\\\\\\\\*RoleNameHere*\\\"; for example, `\\\"SomeDomain\\\\Domain Users`\\\".  \\n  \\n> [!NOTE]\\n>  In the .NET Framework version 1.0, the `role` parameter is case-sensitive. In the .NET Framework version 1.1 and later, the `role` parameter is case-insensitive.\"\n  example:\n  - \"The following code example demonstrates the use of the IsInRole method.  \\n  \\n The strings `BUILTIN\\\\Administrators` and `BUILTIN\\\\Users` are used to determine whether the current principal is an administrator or a user. For the full code example, see the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%28System.Int32%29?displayProperty=fullName> method.  \\n  \\n [!code-cs[System.Security.Principal.WindowsBuiltInRole Example#3](~/add/codesnippet/csharp/m-system.security.princi_1_1.cs)]\\n [!code-vb[System.Security.Principal.WindowsBuiltInRole Example#3](~/add/codesnippet/visualbasic/m-system.security.princi_1_1.vb)]\"\n  syntax:\n    content: public override bool IsInRole (string role);\n    parameters:\n    - id: role\n      type: System.String\n      description: The name of the Windows user group for which to check membership.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current principal is a member of the specified Windows user group; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Security.Principal.WindowsPrincipal.IsInRole*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Security.Principal.WindowsPrincipal.UserClaims\n  id: UserClaims\n  parent: System.Security.Principal.WindowsPrincipal\n  langs:\n  - csharp\n  name: UserClaims\n  nameWithType: WindowsPrincipal.UserClaims\n  fullName: System.Security.Principal.WindowsPrincipal.UserClaims\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Principal\n  summary: Gets all Windows user claims from this principal.\n  syntax:\n    content: public virtual System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> UserClaims { get; }\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}\n      description: A collection of all Windows user claims from this principal.\n  overload: System.Security.Principal.WindowsPrincipal.UserClaims*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Security.Claims.ClaimsPrincipal\n  isExternal: false\n  name: System.Security.Claims.ClaimsPrincipal\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.Security.SecurityException\n  isExternal: true\n  name: System.Security.SecurityException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.Security.Principal.WindowsPrincipal.#ctor(System.Security.Principal.WindowsIdentity)\n  parent: System.Security.Principal.WindowsPrincipal\n  isExternal: false\n  name: WindowsPrincipal(WindowsIdentity)\n  nameWithType: WindowsPrincipal.WindowsPrincipal(WindowsIdentity)\n  fullName: System.Security.Principal.WindowsPrincipal.WindowsPrincipal(WindowsIdentity)\n- uid: System.Security.Principal.WindowsIdentity\n  parent: System.Security.Principal\n  isExternal: false\n  name: WindowsIdentity\n  nameWithType: WindowsIdentity\n  fullName: System.Security.Principal.WindowsIdentity\n- uid: System.Security.Principal.WindowsPrincipal.DeviceClaims\n  parent: System.Security.Principal.WindowsPrincipal\n  isExternal: false\n  name: DeviceClaims\n  nameWithType: WindowsPrincipal.DeviceClaims\n  fullName: System.Security.Principal.WindowsPrincipal.DeviceClaims\n- uid: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IEnumerable<Claim>\n  nameWithType: IEnumerable<Claim>\n  fullName: System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: IEnumerable<System.Security.Claims.Claim>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Security.Claims.Claim\n    name: Claim\n    nameWithType: Claim\n    fullName: Claim\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Security.Principal.WindowsPrincipal.Identity\n  parent: System.Security.Principal.WindowsPrincipal\n  isExternal: false\n  name: Identity\n  nameWithType: WindowsPrincipal.Identity\n  fullName: System.Security.Principal.WindowsPrincipal.Identity\n- uid: System.Security.Principal.IIdentity\n  parent: System.Security.Principal\n  isExternal: true\n  name: IIdentity\n  nameWithType: IIdentity\n  fullName: System.Security.Principal.IIdentity\n- uid: System.Security.Principal.WindowsPrincipal.IsInRole(System.Int32)\n  parent: System.Security.Principal.WindowsPrincipal\n  isExternal: false\n  name: IsInRole(Int32)\n  nameWithType: WindowsPrincipal.IsInRole(Int32)\n  fullName: System.Security.Principal.WindowsPrincipal.IsInRole(Int32)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Principal.WindowsPrincipal.IsInRole(System.Security.Principal.SecurityIdentifier)\n  parent: System.Security.Principal.WindowsPrincipal\n  isExternal: false\n  name: IsInRole(SecurityIdentifier)\n  nameWithType: WindowsPrincipal.IsInRole(SecurityIdentifier)\n  fullName: System.Security.Principal.WindowsPrincipal.IsInRole(SecurityIdentifier)\n- uid: System.Security.Principal.SecurityIdentifier\n  parent: System.Security.Principal\n  isExternal: false\n  name: SecurityIdentifier\n  nameWithType: SecurityIdentifier\n  fullName: System.Security.Principal.SecurityIdentifier\n- uid: System.Security.Principal.WindowsPrincipal.IsInRole(System.Security.Principal.WindowsBuiltInRole)\n  parent: System.Security.Principal.WindowsPrincipal\n  isExternal: false\n  name: IsInRole(WindowsBuiltInRole)\n  nameWithType: WindowsPrincipal.IsInRole(WindowsBuiltInRole)\n  fullName: System.Security.Principal.WindowsPrincipal.IsInRole(WindowsBuiltInRole)\n- uid: System.Security.Principal.WindowsBuiltInRole\n  parent: System.Security.Principal\n  isExternal: false\n  name: WindowsBuiltInRole\n  nameWithType: WindowsBuiltInRole\n  fullName: System.Security.Principal.WindowsBuiltInRole\n- uid: System.Security.Principal.WindowsPrincipal.IsInRole(System.String)\n  parent: System.Security.Principal.WindowsPrincipal\n  isExternal: false\n  name: IsInRole(String)\n  nameWithType: WindowsPrincipal.IsInRole(String)\n  fullName: System.Security.Principal.WindowsPrincipal.IsInRole(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Principal.WindowsPrincipal.UserClaims\n  parent: System.Security.Principal.WindowsPrincipal\n  isExternal: false\n  name: UserClaims\n  nameWithType: WindowsPrincipal.UserClaims\n  fullName: System.Security.Principal.WindowsPrincipal.UserClaims\n- uid: System.Security.Principal.WindowsPrincipal.#ctor*\n  parent: System.Security.Principal.WindowsPrincipal\n  isExternal: false\n  name: WindowsPrincipal\n  nameWithType: WindowsPrincipal.WindowsPrincipal\n- uid: System.Security.Principal.WindowsPrincipal.DeviceClaims*\n  parent: System.Security.Principal.WindowsPrincipal\n  isExternal: false\n  name: DeviceClaims\n  nameWithType: WindowsPrincipal.DeviceClaims\n- uid: System.Security.Principal.WindowsPrincipal.Identity*\n  parent: System.Security.Principal.WindowsPrincipal\n  isExternal: false\n  name: Identity\n  nameWithType: WindowsPrincipal.Identity\n- uid: System.Security.Principal.WindowsPrincipal.IsInRole*\n  parent: System.Security.Principal.WindowsPrincipal\n  isExternal: false\n  name: IsInRole\n  nameWithType: WindowsPrincipal.IsInRole\n- uid: System.Security.Principal.WindowsPrincipal.UserClaims*\n  parent: System.Security.Principal.WindowsPrincipal\n  isExternal: false\n  name: UserClaims\n  nameWithType: WindowsPrincipal.UserClaims\n"}