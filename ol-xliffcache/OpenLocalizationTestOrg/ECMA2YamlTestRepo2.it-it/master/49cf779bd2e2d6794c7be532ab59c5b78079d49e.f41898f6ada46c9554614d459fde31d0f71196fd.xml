{"nodes":[{"pos":[2216,2299],"content":"This class represents all of the settings which must be specified to start a build.","needQuote":true,"needEscape":true,"nodes":[{"content":"This class represents all of the settings which must be specified to start a build.","pos":[0,83]}]},{"pos":[2841,2866],"content":"Creates build parameters.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates build parameters.","pos":[0,25]}]},{"pos":[2878,2947],"content":"Constructor for use in setting all build properties programmatically.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Constructor for use in setting all build properties programmatically.","pos":[0,69]}]},{"pos":[3654,3726],"content":"Creates build parameters and initializes them from a project collection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates build parameters and initializes them from a project collection.","pos":[0,72]}]},{"pos":[3959,4035],"content":"The ProjectCollection from which the BuildParameters should populate itself.","needQuote":true,"needEscape":true,"nodes":[{"content":"The ProjectCollection from which the BuildParameters should populate itself.","pos":[0,76]}]},{"pos":[4579,4653],"content":"Gets the environment variables which were set when this build was created.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the environment variables which were set when this build was created.","pos":[0,74]}]},{"pos":[4882,4939],"content":"Returns environment variables set when build was created.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns environment variables set when build was created.","pos":[0,57]}]},{"pos":[5481,5535],"content":"Gets or sets the desired thread priority for building.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the desired thread priority for building.","pos":[0,54]}]},{"pos":[5707,5747],"content":"Returns the thread priority for building","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the thread priority for building","pos":[0,40]}]},{"pos":[6219,6267],"content":"Creates a clone of this build parameters object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a clone of this build parameters object.","pos":[0,48]}]},{"pos":[6279,6379],"content":"This method creates a clone of the logger collections, but does not deeply clone the loggers within.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method creates a clone of the logger collections, but does not deeply clone the loggers within.","pos":[0,100]}]},{"pos":[6566,6614],"content":"Returns a clone of this build parameters object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a clone of this build parameters object.","pos":[0,48]}]},{"pos":[7078,7139],"content":"Gets or sets the name of the culture to use during the build.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the name of the culture to use during the build.","pos":[0,61]}]},{"pos":[7301,7321],"content":"Returns the culture.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the culture.","pos":[0,20]}]},{"pos":[7847,7900],"content":"Gets or sets the default tools version for the build.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the default tools version for the build.","pos":[0,53]}]},{"pos":[8029,8055],"content":"Returns the tools version.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the tools version.","pos":[0,26]}]},{"pos":[8573,8681],"content":"Gets or sets a switch that specifies whether the build should emit a detailed summary at the end of the log.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a switch that specifies whether the build should emit a detailed summary at the end of the log.","pos":[0,108]}]},{"pos":[8805,8920],"content":"Returns the value of a switch that specifies whether the build should emit a detailed summary at the end of the log","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the value of a switch that specifies whether the build should emit a detailed summary at the end of the log","pos":[0,115]}]},{"pos":[9444,9513],"content":"Gets or sets the flag determining whether to use the in process node.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the flag determining whether to use the in process node.","pos":[0,69]}]},{"pos":[9639,9656],"content":"Returns the flag.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the flag.","pos":[0,17]}]},{"pos":[10172,10292],"content":"Gets or sets a flag determining whether out-of-process nodes should persist after the build and wait for further builds.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a flag determining whether out-of-process nodes should persist after the build and wait for further builds.","pos":[0,120]}]},{"pos":[10416,10433],"content":"Returns the flag.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the flag.","pos":[0,17]}]},{"pos":[10977,11032],"content":"Gets an immutable collection of environment properties.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets an immutable collection of environment properties.","pos":[0,55]}]},{"pos":[11259,11317],"content":"Returns an immutable collection of environment properties.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an immutable collection of environment properties.","pos":[0,58]}]},{"pos":[11847,11909],"content":"Gets or sets the collection of forwarding logger descriptions.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the collection of forwarding logger descriptions.","pos":[0,62]}]},{"pos":[12189,12246],"content":"Returns the collection of forwarding logger descriptions.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the collection of forwarding logger descriptions.","pos":[0,57]}]},{"pos":[12789,12810],"content":"Gets a given toolset.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a given toolset.","pos":[0,21]}]},{"pos":[12994,13018],"content":"The toolset to retrieve.","needQuote":true,"needEscape":true,"nodes":[{"content":"The toolset to retrieve.","pos":[0,24]}]},{"pos":[13097,13117],"content":"Returns the toolset.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the toolset.","pos":[0,20]}]},{"pos":[13631,13689],"content":"Gets or sets an immutable collection of global properties.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets an immutable collection of global properties.","pos":[0,58]}]},{"pos":[13916,13969],"content":"Returns an immutable collection of global properties.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns an immutable collection of global properties.","pos":[0,53]}]},{"pos":[14469,14566],"content":"Gets or sets a service that allows the host to provide additional control over the build process.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a service that allows the host to provide additional control over the build process.","pos":[0,97]}]},{"pos":[14745,14770],"content":"Returns the host service.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the host service.","pos":[0,25]}]},{"pos":[15326,15400],"content":"Gets or sets a switch that enables or disables legacy threading semantics.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a switch that enables or disables legacy threading semantics.","pos":[0,74]}]},{"pos":[15412,15679],"content":"Legacy threading semantics indicate that if a submission is to be built only on the in-proc node and the submission is executed synchronously, then all of its requests will be built on the thread which invoked the build rather than a thread owned by the BuildManager.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Legacy threading semantics indicate that if a submission is to be built only on the in-proc node and the submission is executed synchronously, then all of its requests will be built on the thread which invoked the build rather than a thread owned by the BuildManager.","pos":[0,267]}]},{"pos":[15812,15915],"content":"Returns a switch that enables or disables legacy threading semantics; true if enabled, false otherwise.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a switch that enables or disables legacy threading semantics; true if enabled, false otherwise.","pos":[0,103]}]},{"pos":[16398,16461],"content":"Gets or sets the collection of loggers to use during the build.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the collection of loggers to use during the build.","pos":[0,63]}]},{"pos":[16705,16763],"content":"Returns the collection of loggers to use during the build.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the collection of loggers to use during the build.","pos":[0,58]}]},{"pos":[17334,17412],"content":"Gets or sets the flag determining whether the build logs the input parameters.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the flag determining whether the build logs the input parameters.","pos":[0,78]}]},{"pos":[17549,17566],"content":"Returns the flag.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the flag.","pos":[0,17]}]},{"pos":[18083,18160],"content":"Gets or sets the flag determining whether the build logs the task parameters.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the flag determining whether the build logs the task parameters.","pos":[0,77]}]},{"pos":[18282,18299],"content":"Returns the flag.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the flag.","pos":[0,17]}]},{"pos":[18796,18856],"content":"Gets or sets the maximum number of nodes this build may use.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the maximum number of nodes this build may use.","pos":[0,60]}]},{"pos":[18974,19029],"content":"Returns the maximum number of nodes this build may use.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the maximum number of nodes this build may use.","pos":[0,55]}]},{"pos":[19535,19622],"content":"Gets or sets the amount of memory the build should limit itself to using, in megabytes.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the amount of memory the build should limit itself to using, in megabytes.","pos":[0,87]}]},{"pos":[19742,19824],"content":"Returns the amount of memory the build should limit itself to using, in megabytes.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the amount of memory the build should limit itself to using, in megabytes.","pos":[0,82]}]},{"pos":[20337,20392],"content":"Gets or sets the location of the build node executable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the location of the build node executable.","pos":[0,55]}]},{"pos":[20517,20567],"content":"Returns the location of the build node executable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the location of the build node executable.","pos":[0,50]}]},{"pos":[21111,21198],"content":"Gets or sets a flag that determines if non-critical logging events should be discarded.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a flag that determines if non-critical logging events should be discarded.","pos":[0,87]}]},{"pos":[21328,21410],"content":"Returns a flag that determines if non-critical logging events should be discarded.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a flag that determines if non-critical logging events should be discarded.","pos":[0,82]}]},{"pos":[21910,22015],"content":"Gets or sets a switch that specifies whether the build should reset the configuration and results caches.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a switch that specifies whether the build should reset the configuration and results caches.","pos":[0,105]}]},{"pos":[22135,22288],"content":"Returns a switch that specifies whether the build should reset the configuration and results caches; true if the caches should be reset, false otherwise.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a switch that specifies whether the build should reset the configuration and results caches; true if the caches should be reset, false otherwise.","pos":[0,153]}]},{"pos":[22843,23026],"content":"Gets or sets a switch specifying if the operating environment, such as the current directory and environment, should be saved and restored between project builds and task invocations.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a switch specifying if the operating environment, such as the current directory and environment, should be saved and restored between project builds and task invocations.","pos":[0,183]}]},{"pos":[23038,23196],"content":"This should be set to false for any other build managers running in the system so that we do not have two build managers trampling on each others environment.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"This should be set to false for any other build managers running in the system so that we do not have two build managers trampling on each others environment.","pos":[0,158]}]},{"pos":[23329,23522],"content":"Returns a switch indicating whether the operating environment should be saved and restored between project builds and task invocations; true if the environment should be saved, false otherwise.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a switch indicating whether the operating environment should be saved and restored between project builds and task invocations; true if the environment should be saved, false otherwise.","pos":[0,193]}]},{"pos":[24125,24303],"content":"Gets or sets the flag determining whether to shut down the in process node when the build finishes. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the flag determining whether to shut down the in process node when the build finishes.","pos":[0,99]},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[100,178],"source":" The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[24443,24460],"content":"Returns the flag.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the flag.","pos":[0,17]}]},{"pos":[25045,25091],"content":"Gets or sets locations to search for toolsets.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets locations to search for toolsets.","pos":[0,46]}]},{"pos":[25314,25355],"content":"Returns locations to search for toolsets.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns locations to search for toolsets.","pos":[0,41]}]},{"pos":[25845,25870],"content":"Gets all of the toolsets.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets all of the toolsets.","pos":[0,25]}]},{"pos":[26112,26140],"content":"Returns all of the toolsets.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns all of the toolsets.","pos":[0,28]}]},{"pos":[26617,26681],"content":"Gets or sets the name of the UI culture to use during the build.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the name of the UI culture to use during the build.","pos":[0,64]}]},{"pos":[26845,26904],"content":"Returns the name of the UI culture to use during the build.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the name of the UI culture to use during the build.","pos":[0,59]}]},{"pos":[27442,27551],"content":"Gets or sets a switch that specifies whether synchronous logging is used when there is only a single process.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a switch that specifies whether synchronous logging is used when there is only a single process.","pos":[0,109]}]},{"pos":[27681,27855],"content":"Returns a switch that specifies whether synchronous logging is used when there is only a single process; if true, use synchronous logging, otherwise use asynchronous logging.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a switch that specifies whether synchronous logging is used when there is only a single process; if true, use synchronous logging, otherwise use asynchronous logging.","pos":[0,174]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: Microsoft.Build.Execution.BuildParameters\n  id: BuildParameters\n  children:\n  - Microsoft.Build.Execution.BuildParameters.#ctor\n  - Microsoft.Build.Execution.BuildParameters.#ctor(Microsoft.Build.Evaluation.ProjectCollection)\n  - Microsoft.Build.Execution.BuildParameters.BuildProcessEnvironment\n  - Microsoft.Build.Execution.BuildParameters.BuildThreadPriority\n  - Microsoft.Build.Execution.BuildParameters.Clone\n  - Microsoft.Build.Execution.BuildParameters.Culture\n  - Microsoft.Build.Execution.BuildParameters.DefaultToolsVersion\n  - Microsoft.Build.Execution.BuildParameters.DetailedSummary\n  - Microsoft.Build.Execution.BuildParameters.DisableInProcNode\n  - Microsoft.Build.Execution.BuildParameters.EnableNodeReuse\n  - Microsoft.Build.Execution.BuildParameters.EnvironmentProperties\n  - Microsoft.Build.Execution.BuildParameters.ForwardingLoggers\n  - Microsoft.Build.Execution.BuildParameters.GetToolset(System.String)\n  - Microsoft.Build.Execution.BuildParameters.GlobalProperties\n  - Microsoft.Build.Execution.BuildParameters.HostServices\n  - Microsoft.Build.Execution.BuildParameters.LegacyThreadingSemantics\n  - Microsoft.Build.Execution.BuildParameters.Loggers\n  - Microsoft.Build.Execution.BuildParameters.LogInitialPropertiesAndItems\n  - Microsoft.Build.Execution.BuildParameters.LogTaskInputs\n  - Microsoft.Build.Execution.BuildParameters.MaxNodeCount\n  - Microsoft.Build.Execution.BuildParameters.MemoryUseLimit\n  - Microsoft.Build.Execution.BuildParameters.NodeExeLocation\n  - Microsoft.Build.Execution.BuildParameters.OnlyLogCriticalEvents\n  - Microsoft.Build.Execution.BuildParameters.ResetCaches\n  - Microsoft.Build.Execution.BuildParameters.SaveOperatingEnvironment\n  - Microsoft.Build.Execution.BuildParameters.ShutdownInProcNodeOnBuildFinish\n  - Microsoft.Build.Execution.BuildParameters.ToolsetDefinitionLocations\n  - Microsoft.Build.Execution.BuildParameters.Toolsets\n  - Microsoft.Build.Execution.BuildParameters.UICulture\n  - Microsoft.Build.Execution.BuildParameters.UseSynchronousLogging\n  langs:\n  - csharp\n  name: BuildParameters\n  nameWithType: BuildParameters\n  fullName: Microsoft.Build.Execution.BuildParameters\n  type: Class\n  summary: This class represents all of the settings which must be specified to start a build.\n  syntax:\n    content: public class BuildParameters\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Execution.BuildParameters.#ctor\n  id: '#ctor'\n  parent: Microsoft.Build.Execution.BuildParameters\n  langs:\n  - csharp\n  name: BuildParameters()\n  nameWithType: BuildParameters.BuildParameters()\n  fullName: Microsoft.Build.Execution.BuildParameters.BuildParameters()\n  type: Constructor\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Execution\n  summary: Creates build parameters.\n  remarks: Constructor for use in setting all build properties programmatically.\n  syntax:\n    content: public BuildParameters ();\n    parameters: []\n  overload: Microsoft.Build.Execution.BuildParameters.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Execution.BuildParameters.#ctor(Microsoft.Build.Evaluation.ProjectCollection)\n  id: '#ctor(Microsoft.Build.Evaluation.ProjectCollection)'\n  parent: Microsoft.Build.Execution.BuildParameters\n  langs:\n  - csharp\n  name: BuildParameters(ProjectCollection)\n  nameWithType: BuildParameters.BuildParameters(ProjectCollection)\n  fullName: Microsoft.Build.Execution.BuildParameters.BuildParameters(ProjectCollection)\n  type: Constructor\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Execution\n  summary: Creates build parameters and initializes them from a project collection.\n  syntax:\n    content: public BuildParameters (Microsoft.Build.Evaluation.ProjectCollection projectCollection);\n    parameters:\n    - id: projectCollection\n      type: Microsoft.Build.Evaluation.ProjectCollection\n      description: The ProjectCollection from which the BuildParameters should populate itself.\n  overload: Microsoft.Build.Execution.BuildParameters.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Execution.BuildParameters.BuildProcessEnvironment\n  id: BuildProcessEnvironment\n  parent: Microsoft.Build.Execution.BuildParameters\n  langs:\n  - csharp\n  name: BuildProcessEnvironment\n  nameWithType: BuildParameters.BuildProcessEnvironment\n  fullName: Microsoft.Build.Execution.BuildParameters.BuildProcessEnvironment\n  type: Property\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Execution\n  summary: Gets the environment variables which were set when this build was created.\n  syntax:\n    content: public System.Collections.Generic.IDictionary<string,string> BuildProcessEnvironment { get; }\n    return:\n      type: System.Collections.Generic.IDictionary{System.String,System.String}\n      description: Returns environment variables set when build was created.\n  overload: Microsoft.Build.Execution.BuildParameters.BuildProcessEnvironment*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Execution.BuildParameters.BuildThreadPriority\n  id: BuildThreadPriority\n  parent: Microsoft.Build.Execution.BuildParameters\n  langs:\n  - csharp\n  name: BuildThreadPriority\n  nameWithType: BuildParameters.BuildThreadPriority\n  fullName: Microsoft.Build.Execution.BuildParameters.BuildThreadPriority\n  type: Property\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Execution\n  summary: Gets or sets the desired thread priority for building.\n  syntax:\n    content: public System.Threading.ThreadPriority BuildThreadPriority { get; set; }\n    return:\n      type: System.Threading.ThreadPriority\n      description: Returns the thread priority for building\n  overload: Microsoft.Build.Execution.BuildParameters.BuildThreadPriority*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Execution.BuildParameters.Clone\n  id: Clone\n  parent: Microsoft.Build.Execution.BuildParameters\n  langs:\n  - csharp\n  name: Clone()\n  nameWithType: BuildParameters.Clone()\n  fullName: Microsoft.Build.Execution.BuildParameters.Clone()\n  type: Method\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Execution\n  summary: Creates a clone of this build parameters object.\n  remarks: This method creates a clone of the logger collections, but does not deeply clone the loggers within.\n  syntax:\n    content: public Microsoft.Build.Execution.BuildParameters Clone ();\n    parameters: []\n    return:\n      type: Microsoft.Build.Execution.BuildParameters\n      description: Returns a clone of this build parameters object.\n  overload: Microsoft.Build.Execution.BuildParameters.Clone*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Execution.BuildParameters.Culture\n  id: Culture\n  parent: Microsoft.Build.Execution.BuildParameters\n  langs:\n  - csharp\n  name: Culture\n  nameWithType: BuildParameters.Culture\n  fullName: Microsoft.Build.Execution.BuildParameters.Culture\n  type: Property\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Execution\n  summary: Gets or sets the name of the culture to use during the build.\n  syntax:\n    content: public System.Globalization.CultureInfo Culture { get; set; }\n    return:\n      type: System.Globalization.CultureInfo\n      description: Returns the culture.\n  overload: Microsoft.Build.Execution.BuildParameters.Culture*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Execution.BuildParameters.DefaultToolsVersion\n  id: DefaultToolsVersion\n  parent: Microsoft.Build.Execution.BuildParameters\n  langs:\n  - csharp\n  name: DefaultToolsVersion\n  nameWithType: BuildParameters.DefaultToolsVersion\n  fullName: Microsoft.Build.Execution.BuildParameters.DefaultToolsVersion\n  type: Property\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Execution\n  summary: Gets or sets the default tools version for the build.\n  syntax:\n    content: public string DefaultToolsVersion { get; set; }\n    return:\n      type: System.String\n      description: Returns the tools version.\n  overload: Microsoft.Build.Execution.BuildParameters.DefaultToolsVersion*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Execution.BuildParameters.DetailedSummary\n  id: DetailedSummary\n  parent: Microsoft.Build.Execution.BuildParameters\n  langs:\n  - csharp\n  name: DetailedSummary\n  nameWithType: BuildParameters.DetailedSummary\n  fullName: Microsoft.Build.Execution.BuildParameters.DetailedSummary\n  type: Property\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Execution\n  summary: Gets or sets a switch that specifies whether the build should emit a detailed summary at the end of the log.\n  syntax:\n    content: public bool DetailedSummary { get; set; }\n    return:\n      type: System.Boolean\n      description: Returns the value of a switch that specifies whether the build should emit a detailed summary at the end of the log\n  overload: Microsoft.Build.Execution.BuildParameters.DetailedSummary*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Execution.BuildParameters.DisableInProcNode\n  id: DisableInProcNode\n  parent: Microsoft.Build.Execution.BuildParameters\n  langs:\n  - csharp\n  name: DisableInProcNode\n  nameWithType: BuildParameters.DisableInProcNode\n  fullName: Microsoft.Build.Execution.BuildParameters.DisableInProcNode\n  type: Property\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Execution\n  summary: Gets or sets the flag determining whether to use the in process node.\n  syntax:\n    content: public bool DisableInProcNode { get; set; }\n    return:\n      type: System.Boolean\n      description: Returns the flag.\n  overload: Microsoft.Build.Execution.BuildParameters.DisableInProcNode*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Execution.BuildParameters.EnableNodeReuse\n  id: EnableNodeReuse\n  parent: Microsoft.Build.Execution.BuildParameters\n  langs:\n  - csharp\n  name: EnableNodeReuse\n  nameWithType: BuildParameters.EnableNodeReuse\n  fullName: Microsoft.Build.Execution.BuildParameters.EnableNodeReuse\n  type: Property\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Execution\n  summary: Gets or sets a flag determining whether out-of-process nodes should persist after the build and wait for further builds.\n  syntax:\n    content: public bool EnableNodeReuse { get; set; }\n    return:\n      type: System.Boolean\n      description: Returns the flag.\n  overload: Microsoft.Build.Execution.BuildParameters.EnableNodeReuse*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Execution.BuildParameters.EnvironmentProperties\n  id: EnvironmentProperties\n  parent: Microsoft.Build.Execution.BuildParameters\n  langs:\n  - csharp\n  name: EnvironmentProperties\n  nameWithType: BuildParameters.EnvironmentProperties\n  fullName: Microsoft.Build.Execution.BuildParameters.EnvironmentProperties\n  type: Property\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Execution\n  summary: Gets an immutable collection of environment properties.\n  syntax:\n    content: public System.Collections.Generic.IDictionary<string,string> EnvironmentProperties { get; }\n    return:\n      type: System.Collections.Generic.IDictionary{System.String,System.String}\n      description: Returns an immutable collection of environment properties.\n  overload: Microsoft.Build.Execution.BuildParameters.EnvironmentProperties*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Execution.BuildParameters.ForwardingLoggers\n  id: ForwardingLoggers\n  parent: Microsoft.Build.Execution.BuildParameters\n  langs:\n  - csharp\n  name: ForwardingLoggers\n  nameWithType: BuildParameters.ForwardingLoggers\n  fullName: Microsoft.Build.Execution.BuildParameters.ForwardingLoggers\n  type: Property\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Execution\n  summary: Gets or sets the collection of forwarding logger descriptions.\n  syntax:\n    content: public System.Collections.Generic.IEnumerable<Microsoft.Build.Logging.ForwardingLoggerRecord> ForwardingLoggers { get; set; }\n    return:\n      type: System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord}\n      description: Returns the collection of forwarding logger descriptions.\n  overload: Microsoft.Build.Execution.BuildParameters.ForwardingLoggers*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Execution.BuildParameters.GetToolset(System.String)\n  id: GetToolset(System.String)\n  parent: Microsoft.Build.Execution.BuildParameters\n  langs:\n  - csharp\n  name: GetToolset(String)\n  nameWithType: BuildParameters.GetToolset(String)\n  fullName: Microsoft.Build.Execution.BuildParameters.GetToolset(String)\n  type: Method\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Execution\n  summary: Gets a given toolset.\n  syntax:\n    content: public Microsoft.Build.Evaluation.Toolset GetToolset (string toolsVersion);\n    parameters:\n    - id: toolsVersion\n      type: System.String\n      description: The toolset to retrieve.\n    return:\n      type: Microsoft.Build.Evaluation.Toolset\n      description: Returns the toolset.\n  overload: Microsoft.Build.Execution.BuildParameters.GetToolset*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Execution.BuildParameters.GlobalProperties\n  id: GlobalProperties\n  parent: Microsoft.Build.Execution.BuildParameters\n  langs:\n  - csharp\n  name: GlobalProperties\n  nameWithType: BuildParameters.GlobalProperties\n  fullName: Microsoft.Build.Execution.BuildParameters.GlobalProperties\n  type: Property\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Execution\n  summary: Gets or sets an immutable collection of global properties.\n  syntax:\n    content: public System.Collections.Generic.IDictionary<string,string> GlobalProperties { get; set; }\n    return:\n      type: System.Collections.Generic.IDictionary{System.String,System.String}\n      description: Returns an immutable collection of global properties.\n  overload: Microsoft.Build.Execution.BuildParameters.GlobalProperties*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Execution.BuildParameters.HostServices\n  id: HostServices\n  parent: Microsoft.Build.Execution.BuildParameters\n  langs:\n  - csharp\n  name: HostServices\n  nameWithType: BuildParameters.HostServices\n  fullName: Microsoft.Build.Execution.BuildParameters.HostServices\n  type: Property\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Execution\n  summary: Gets or sets a service that allows the host to provide additional control over the build process.\n  syntax:\n    content: public Microsoft.Build.Execution.HostServices HostServices { get; set; }\n    return:\n      type: Microsoft.Build.Execution.HostServices\n      description: Returns the host service.\n  overload: Microsoft.Build.Execution.BuildParameters.HostServices*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Execution.BuildParameters.LegacyThreadingSemantics\n  id: LegacyThreadingSemantics\n  parent: Microsoft.Build.Execution.BuildParameters\n  langs:\n  - csharp\n  name: LegacyThreadingSemantics\n  nameWithType: BuildParameters.LegacyThreadingSemantics\n  fullName: Microsoft.Build.Execution.BuildParameters.LegacyThreadingSemantics\n  type: Property\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Execution\n  summary: Gets or sets a switch that enables or disables legacy threading semantics.\n  remarks: Legacy threading semantics indicate that if a submission is to be built only on the in-proc node and the submission is executed synchronously, then all of its requests will be built on the thread which invoked the build rather than a thread owned by the BuildManager.\n  syntax:\n    content: public bool LegacyThreadingSemantics { get; set; }\n    return:\n      type: System.Boolean\n      description: Returns a switch that enables or disables legacy threading semantics; true if enabled, false otherwise.\n  overload: Microsoft.Build.Execution.BuildParameters.LegacyThreadingSemantics*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Execution.BuildParameters.Loggers\n  id: Loggers\n  parent: Microsoft.Build.Execution.BuildParameters\n  langs:\n  - csharp\n  name: Loggers\n  nameWithType: BuildParameters.Loggers\n  fullName: Microsoft.Build.Execution.BuildParameters.Loggers\n  type: Property\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Execution\n  summary: Gets or sets the collection of loggers to use during the build.\n  syntax:\n    content: public System.Collections.Generic.IEnumerable<Microsoft.Build.Framework.ILogger> Loggers { get; set; }\n    return:\n      type: System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger}\n      description: Returns the collection of loggers to use during the build.\n  overload: Microsoft.Build.Execution.BuildParameters.Loggers*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Execution.BuildParameters.LogInitialPropertiesAndItems\n  id: LogInitialPropertiesAndItems\n  parent: Microsoft.Build.Execution.BuildParameters\n  langs:\n  - csharp\n  name: LogInitialPropertiesAndItems\n  nameWithType: BuildParameters.LogInitialPropertiesAndItems\n  fullName: Microsoft.Build.Execution.BuildParameters.LogInitialPropertiesAndItems\n  type: Property\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Execution\n  summary: Gets or sets the flag determining whether the build logs the input parameters.\n  syntax:\n    content: public bool LogInitialPropertiesAndItems { get; set; }\n    return:\n      type: System.Boolean\n      description: Returns the flag.\n  overload: Microsoft.Build.Execution.BuildParameters.LogInitialPropertiesAndItems*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Execution.BuildParameters.LogTaskInputs\n  id: LogTaskInputs\n  parent: Microsoft.Build.Execution.BuildParameters\n  langs:\n  - csharp\n  name: LogTaskInputs\n  nameWithType: BuildParameters.LogTaskInputs\n  fullName: Microsoft.Build.Execution.BuildParameters.LogTaskInputs\n  type: Property\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Execution\n  summary: Gets or sets the flag determining whether the build logs the task parameters.\n  syntax:\n    content: public bool LogTaskInputs { get; set; }\n    return:\n      type: System.Boolean\n      description: Returns the flag.\n  overload: Microsoft.Build.Execution.BuildParameters.LogTaskInputs*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Execution.BuildParameters.MaxNodeCount\n  id: MaxNodeCount\n  parent: Microsoft.Build.Execution.BuildParameters\n  langs:\n  - csharp\n  name: MaxNodeCount\n  nameWithType: BuildParameters.MaxNodeCount\n  fullName: Microsoft.Build.Execution.BuildParameters.MaxNodeCount\n  type: Property\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Execution\n  summary: Gets or sets the maximum number of nodes this build may use.\n  syntax:\n    content: public int MaxNodeCount { get; set; }\n    return:\n      type: System.Int32\n      description: Returns the maximum number of nodes this build may use.\n  overload: Microsoft.Build.Execution.BuildParameters.MaxNodeCount*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Execution.BuildParameters.MemoryUseLimit\n  id: MemoryUseLimit\n  parent: Microsoft.Build.Execution.BuildParameters\n  langs:\n  - csharp\n  name: MemoryUseLimit\n  nameWithType: BuildParameters.MemoryUseLimit\n  fullName: Microsoft.Build.Execution.BuildParameters.MemoryUseLimit\n  type: Property\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Execution\n  summary: Gets or sets the amount of memory the build should limit itself to using, in megabytes.\n  syntax:\n    content: public int MemoryUseLimit { get; set; }\n    return:\n      type: System.Int32\n      description: Returns the amount of memory the build should limit itself to using, in megabytes.\n  overload: Microsoft.Build.Execution.BuildParameters.MemoryUseLimit*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Execution.BuildParameters.NodeExeLocation\n  id: NodeExeLocation\n  parent: Microsoft.Build.Execution.BuildParameters\n  langs:\n  - csharp\n  name: NodeExeLocation\n  nameWithType: BuildParameters.NodeExeLocation\n  fullName: Microsoft.Build.Execution.BuildParameters.NodeExeLocation\n  type: Property\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Execution\n  summary: Gets or sets the location of the build node executable.\n  syntax:\n    content: public string NodeExeLocation { get; set; }\n    return:\n      type: System.String\n      description: Returns the location of the build node executable.\n  overload: Microsoft.Build.Execution.BuildParameters.NodeExeLocation*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Execution.BuildParameters.OnlyLogCriticalEvents\n  id: OnlyLogCriticalEvents\n  parent: Microsoft.Build.Execution.BuildParameters\n  langs:\n  - csharp\n  name: OnlyLogCriticalEvents\n  nameWithType: BuildParameters.OnlyLogCriticalEvents\n  fullName: Microsoft.Build.Execution.BuildParameters.OnlyLogCriticalEvents\n  type: Property\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Execution\n  summary: Gets or sets a flag that determines if non-critical logging events should be discarded.\n  syntax:\n    content: public bool OnlyLogCriticalEvents { get; set; }\n    return:\n      type: System.Boolean\n      description: Returns a flag that determines if non-critical logging events should be discarded.\n  overload: Microsoft.Build.Execution.BuildParameters.OnlyLogCriticalEvents*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Execution.BuildParameters.ResetCaches\n  id: ResetCaches\n  parent: Microsoft.Build.Execution.BuildParameters\n  langs:\n  - csharp\n  name: ResetCaches\n  nameWithType: BuildParameters.ResetCaches\n  fullName: Microsoft.Build.Execution.BuildParameters.ResetCaches\n  type: Property\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Execution\n  summary: Gets or sets a switch that specifies whether the build should reset the configuration and results caches.\n  syntax:\n    content: public bool ResetCaches { get; set; }\n    return:\n      type: System.Boolean\n      description: Returns a switch that specifies whether the build should reset the configuration and results caches; true if the caches should be reset, false otherwise.\n  overload: Microsoft.Build.Execution.BuildParameters.ResetCaches*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Execution.BuildParameters.SaveOperatingEnvironment\n  id: SaveOperatingEnvironment\n  parent: Microsoft.Build.Execution.BuildParameters\n  langs:\n  - csharp\n  name: SaveOperatingEnvironment\n  nameWithType: BuildParameters.SaveOperatingEnvironment\n  fullName: Microsoft.Build.Execution.BuildParameters.SaveOperatingEnvironment\n  type: Property\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Execution\n  summary: Gets or sets a switch specifying if the operating environment, such as the current directory and environment, should be saved and restored between project builds and task invocations.\n  remarks: This should be set to false for any other build managers running in the system so that we do not have two build managers trampling on each others environment.\n  syntax:\n    content: public bool SaveOperatingEnvironment { get; set; }\n    return:\n      type: System.Boolean\n      description: Returns a switch indicating whether the operating environment should be saved and restored between project builds and task invocations; true if the environment should be saved, false otherwise.\n  overload: Microsoft.Build.Execution.BuildParameters.SaveOperatingEnvironment*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Execution.BuildParameters.ShutdownInProcNodeOnBuildFinish\n  id: ShutdownInProcNodeOnBuildFinish\n  parent: Microsoft.Build.Execution.BuildParameters\n  langs:\n  - csharp\n  name: ShutdownInProcNodeOnBuildFinish\n  nameWithType: BuildParameters.ShutdownInProcNodeOnBuildFinish\n  fullName: Microsoft.Build.Execution.BuildParameters.ShutdownInProcNodeOnBuildFinish\n  type: Property\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Execution\n  summary: Gets or sets the flag determining whether to shut down the in process node when the build finishes. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  syntax:\n    content: public bool ShutdownInProcNodeOnBuildFinish { get; set; }\n    return:\n      type: System.Boolean\n      description: Returns the flag.\n  overload: Microsoft.Build.Execution.BuildParameters.ShutdownInProcNodeOnBuildFinish*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Execution.BuildParameters.ToolsetDefinitionLocations\n  id: ToolsetDefinitionLocations\n  parent: Microsoft.Build.Execution.BuildParameters\n  langs:\n  - csharp\n  name: ToolsetDefinitionLocations\n  nameWithType: BuildParameters.ToolsetDefinitionLocations\n  fullName: Microsoft.Build.Execution.BuildParameters.ToolsetDefinitionLocations\n  type: Property\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Execution\n  summary: Gets or sets locations to search for toolsets.\n  syntax:\n    content: public Microsoft.Build.Evaluation.ToolsetDefinitionLocations ToolsetDefinitionLocations { get; set; }\n    return:\n      type: Microsoft.Build.Evaluation.ToolsetDefinitionLocations\n      description: Returns locations to search for toolsets.\n  overload: Microsoft.Build.Execution.BuildParameters.ToolsetDefinitionLocations*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Execution.BuildParameters.Toolsets\n  id: Toolsets\n  parent: Microsoft.Build.Execution.BuildParameters\n  langs:\n  - csharp\n  name: Toolsets\n  nameWithType: BuildParameters.Toolsets\n  fullName: Microsoft.Build.Execution.BuildParameters.Toolsets\n  type: Property\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Execution\n  summary: Gets all of the toolsets.\n  syntax:\n    content: public System.Collections.Generic.ICollection<Microsoft.Build.Evaluation.Toolset> Toolsets { get; }\n    return:\n      type: System.Collections.Generic.ICollection{Microsoft.Build.Evaluation.Toolset}\n      description: Returns all of the toolsets.\n  overload: Microsoft.Build.Execution.BuildParameters.Toolsets*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Execution.BuildParameters.UICulture\n  id: UICulture\n  parent: Microsoft.Build.Execution.BuildParameters\n  langs:\n  - csharp\n  name: UICulture\n  nameWithType: BuildParameters.UICulture\n  fullName: Microsoft.Build.Execution.BuildParameters.UICulture\n  type: Property\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Execution\n  summary: Gets or sets the name of the UI culture to use during the build.\n  syntax:\n    content: public System.Globalization.CultureInfo UICulture { get; set; }\n    return:\n      type: System.Globalization.CultureInfo\n      description: Returns the name of the UI culture to use during the build.\n  overload: Microsoft.Build.Execution.BuildParameters.UICulture*\n  exceptions: []\n  platform:\n  - net462\n- uid: Microsoft.Build.Execution.BuildParameters.UseSynchronousLogging\n  id: UseSynchronousLogging\n  parent: Microsoft.Build.Execution.BuildParameters\n  langs:\n  - csharp\n  name: UseSynchronousLogging\n  nameWithType: BuildParameters.UseSynchronousLogging\n  fullName: Microsoft.Build.Execution.BuildParameters.UseSynchronousLogging\n  type: Property\n  assemblies:\n  - Microsoft.Build\n  namespace: Microsoft.Build.Execution\n  summary: Gets or sets a switch that specifies whether synchronous logging is used when there is only a single process.\n  syntax:\n    content: public bool UseSynchronousLogging { get; set; }\n    return:\n      type: System.Boolean\n      description: Returns a switch that specifies whether synchronous logging is used when there is only a single process; if true, use synchronous logging, otherwise use asynchronous logging.\n  overload: Microsoft.Build.Execution.BuildParameters.UseSynchronousLogging*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: Microsoft.Build.Execution.BuildParameters.#ctor\n  parent: Microsoft.Build.Execution.BuildParameters\n  isExternal: false\n  name: BuildParameters()\n  nameWithType: BuildParameters.BuildParameters()\n  fullName: Microsoft.Build.Execution.BuildParameters.BuildParameters()\n- uid: Microsoft.Build.Execution.BuildParameters.#ctor(Microsoft.Build.Evaluation.ProjectCollection)\n  parent: Microsoft.Build.Execution.BuildParameters\n  isExternal: false\n  name: BuildParameters(ProjectCollection)\n  nameWithType: BuildParameters.BuildParameters(ProjectCollection)\n  fullName: Microsoft.Build.Execution.BuildParameters.BuildParameters(ProjectCollection)\n- uid: Microsoft.Build.Evaluation.ProjectCollection\n  parent: Microsoft.Build.Evaluation\n  isExternal: false\n  name: ProjectCollection\n  nameWithType: ProjectCollection\n  fullName: Microsoft.Build.Evaluation.ProjectCollection\n- uid: Microsoft.Build.Execution.BuildParameters.BuildProcessEnvironment\n  parent: Microsoft.Build.Execution.BuildParameters\n  isExternal: false\n  name: BuildProcessEnvironment\n  nameWithType: BuildParameters.BuildProcessEnvironment\n  fullName: Microsoft.Build.Execution.BuildParameters.BuildProcessEnvironment\n- uid: System.Collections.Generic.IDictionary{System.String,System.String}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IDictionary<String,String>\n  nameWithType: IDictionary<String,String>\n  fullName: System.Collections.Generic.IDictionary<System.String,System.String>\n  spec.csharp:\n  - uid: System.Collections.Generic.IDictionary`2\n    name: IDictionary\n    nameWithType: IDictionary\n    fullName: IDictionary<System.String,System.String>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: String\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: String\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: Microsoft.Build.Execution.BuildParameters.BuildThreadPriority\n  parent: Microsoft.Build.Execution.BuildParameters\n  isExternal: false\n  name: BuildThreadPriority\n  nameWithType: BuildParameters.BuildThreadPriority\n  fullName: Microsoft.Build.Execution.BuildParameters.BuildThreadPriority\n- uid: System.Threading.ThreadPriority\n  parent: System.Threading\n  isExternal: false\n  name: ThreadPriority\n  nameWithType: ThreadPriority\n  fullName: System.Threading.ThreadPriority\n- uid: Microsoft.Build.Execution.BuildParameters.Clone\n  parent: Microsoft.Build.Execution.BuildParameters\n  isExternal: false\n  name: Clone()\n  nameWithType: BuildParameters.Clone()\n  fullName: Microsoft.Build.Execution.BuildParameters.Clone()\n- uid: Microsoft.Build.Execution.BuildParameters\n  parent: Microsoft.Build.Execution\n  isExternal: false\n  name: BuildParameters\n  nameWithType: BuildParameters\n  fullName: Microsoft.Build.Execution.BuildParameters\n- uid: Microsoft.Build.Execution.BuildParameters.Culture\n  parent: Microsoft.Build.Execution.BuildParameters\n  isExternal: false\n  name: Culture\n  nameWithType: BuildParameters.Culture\n  fullName: Microsoft.Build.Execution.BuildParameters.Culture\n- uid: System.Globalization.CultureInfo\n  parent: System.Globalization\n  isExternal: true\n  name: CultureInfo\n  nameWithType: CultureInfo\n  fullName: System.Globalization.CultureInfo\n- uid: Microsoft.Build.Execution.BuildParameters.DefaultToolsVersion\n  parent: Microsoft.Build.Execution.BuildParameters\n  isExternal: false\n  name: DefaultToolsVersion\n  nameWithType: BuildParameters.DefaultToolsVersion\n  fullName: Microsoft.Build.Execution.BuildParameters.DefaultToolsVersion\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: Microsoft.Build.Execution.BuildParameters.DetailedSummary\n  parent: Microsoft.Build.Execution.BuildParameters\n  isExternal: false\n  name: DetailedSummary\n  nameWithType: BuildParameters.DetailedSummary\n  fullName: Microsoft.Build.Execution.BuildParameters.DetailedSummary\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: Microsoft.Build.Execution.BuildParameters.DisableInProcNode\n  parent: Microsoft.Build.Execution.BuildParameters\n  isExternal: false\n  name: DisableInProcNode\n  nameWithType: BuildParameters.DisableInProcNode\n  fullName: Microsoft.Build.Execution.BuildParameters.DisableInProcNode\n- uid: Microsoft.Build.Execution.BuildParameters.EnableNodeReuse\n  parent: Microsoft.Build.Execution.BuildParameters\n  isExternal: false\n  name: EnableNodeReuse\n  nameWithType: BuildParameters.EnableNodeReuse\n  fullName: Microsoft.Build.Execution.BuildParameters.EnableNodeReuse\n- uid: Microsoft.Build.Execution.BuildParameters.EnvironmentProperties\n  parent: Microsoft.Build.Execution.BuildParameters\n  isExternal: false\n  name: EnvironmentProperties\n  nameWithType: BuildParameters.EnvironmentProperties\n  fullName: Microsoft.Build.Execution.BuildParameters.EnvironmentProperties\n- uid: Microsoft.Build.Execution.BuildParameters.ForwardingLoggers\n  parent: Microsoft.Build.Execution.BuildParameters\n  isExternal: false\n  name: ForwardingLoggers\n  nameWithType: BuildParameters.ForwardingLoggers\n  fullName: Microsoft.Build.Execution.BuildParameters.ForwardingLoggers\n- uid: System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IEnumerable<ForwardingLoggerRecord>\n  nameWithType: IEnumerable<ForwardingLoggerRecord>\n  fullName: System.Collections.Generic.IEnumerable<Microsoft.Build.Logging.ForwardingLoggerRecord>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: IEnumerable<Microsoft.Build.Logging.ForwardingLoggerRecord>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: Microsoft.Build.Logging.ForwardingLoggerRecord\n    name: ForwardingLoggerRecord\n    nameWithType: ForwardingLoggerRecord\n    fullName: ForwardingLoggerRecord\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: Microsoft.Build.Execution.BuildParameters.GetToolset(System.String)\n  parent: Microsoft.Build.Execution.BuildParameters\n  isExternal: false\n  name: GetToolset(String)\n  nameWithType: BuildParameters.GetToolset(String)\n  fullName: Microsoft.Build.Execution.BuildParameters.GetToolset(String)\n- uid: Microsoft.Build.Evaluation.Toolset\n  parent: Microsoft.Build.Evaluation\n  isExternal: false\n  name: Toolset\n  nameWithType: Toolset\n  fullName: Microsoft.Build.Evaluation.Toolset\n- uid: Microsoft.Build.Execution.BuildParameters.GlobalProperties\n  parent: Microsoft.Build.Execution.BuildParameters\n  isExternal: false\n  name: GlobalProperties\n  nameWithType: BuildParameters.GlobalProperties\n  fullName: Microsoft.Build.Execution.BuildParameters.GlobalProperties\n- uid: Microsoft.Build.Execution.BuildParameters.HostServices\n  parent: Microsoft.Build.Execution.BuildParameters\n  isExternal: false\n  name: HostServices\n  nameWithType: BuildParameters.HostServices\n  fullName: Microsoft.Build.Execution.BuildParameters.HostServices\n- uid: Microsoft.Build.Execution.HostServices\n  parent: Microsoft.Build.Execution\n  isExternal: false\n  name: HostServices\n  nameWithType: HostServices\n  fullName: Microsoft.Build.Execution.HostServices\n- uid: Microsoft.Build.Execution.BuildParameters.LegacyThreadingSemantics\n  parent: Microsoft.Build.Execution.BuildParameters\n  isExternal: false\n  name: LegacyThreadingSemantics\n  nameWithType: BuildParameters.LegacyThreadingSemantics\n  fullName: Microsoft.Build.Execution.BuildParameters.LegacyThreadingSemantics\n- uid: Microsoft.Build.Execution.BuildParameters.Loggers\n  parent: Microsoft.Build.Execution.BuildParameters\n  isExternal: false\n  name: Loggers\n  nameWithType: BuildParameters.Loggers\n  fullName: Microsoft.Build.Execution.BuildParameters.Loggers\n- uid: System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: IEnumerable<ILogger>\n  nameWithType: IEnumerable<ILogger>\n  fullName: System.Collections.Generic.IEnumerable<Microsoft.Build.Framework.ILogger>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: IEnumerable<Microsoft.Build.Framework.ILogger>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: Microsoft.Build.Framework.ILogger\n    name: ILogger\n    nameWithType: ILogger\n    fullName: ILogger\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: Microsoft.Build.Execution.BuildParameters.LogInitialPropertiesAndItems\n  parent: Microsoft.Build.Execution.BuildParameters\n  isExternal: false\n  name: LogInitialPropertiesAndItems\n  nameWithType: BuildParameters.LogInitialPropertiesAndItems\n  fullName: Microsoft.Build.Execution.BuildParameters.LogInitialPropertiesAndItems\n- uid: Microsoft.Build.Execution.BuildParameters.LogTaskInputs\n  parent: Microsoft.Build.Execution.BuildParameters\n  isExternal: false\n  name: LogTaskInputs\n  nameWithType: BuildParameters.LogTaskInputs\n  fullName: Microsoft.Build.Execution.BuildParameters.LogTaskInputs\n- uid: Microsoft.Build.Execution.BuildParameters.MaxNodeCount\n  parent: Microsoft.Build.Execution.BuildParameters\n  isExternal: false\n  name: MaxNodeCount\n  nameWithType: BuildParameters.MaxNodeCount\n  fullName: Microsoft.Build.Execution.BuildParameters.MaxNodeCount\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: Microsoft.Build.Execution.BuildParameters.MemoryUseLimit\n  parent: Microsoft.Build.Execution.BuildParameters\n  isExternal: false\n  name: MemoryUseLimit\n  nameWithType: BuildParameters.MemoryUseLimit\n  fullName: Microsoft.Build.Execution.BuildParameters.MemoryUseLimit\n- uid: Microsoft.Build.Execution.BuildParameters.NodeExeLocation\n  parent: Microsoft.Build.Execution.BuildParameters\n  isExternal: false\n  name: NodeExeLocation\n  nameWithType: BuildParameters.NodeExeLocation\n  fullName: Microsoft.Build.Execution.BuildParameters.NodeExeLocation\n- uid: Microsoft.Build.Execution.BuildParameters.OnlyLogCriticalEvents\n  parent: Microsoft.Build.Execution.BuildParameters\n  isExternal: false\n  name: OnlyLogCriticalEvents\n  nameWithType: BuildParameters.OnlyLogCriticalEvents\n  fullName: Microsoft.Build.Execution.BuildParameters.OnlyLogCriticalEvents\n- uid: Microsoft.Build.Execution.BuildParameters.ResetCaches\n  parent: Microsoft.Build.Execution.BuildParameters\n  isExternal: false\n  name: ResetCaches\n  nameWithType: BuildParameters.ResetCaches\n  fullName: Microsoft.Build.Execution.BuildParameters.ResetCaches\n- uid: Microsoft.Build.Execution.BuildParameters.SaveOperatingEnvironment\n  parent: Microsoft.Build.Execution.BuildParameters\n  isExternal: false\n  name: SaveOperatingEnvironment\n  nameWithType: BuildParameters.SaveOperatingEnvironment\n  fullName: Microsoft.Build.Execution.BuildParameters.SaveOperatingEnvironment\n- uid: Microsoft.Build.Execution.BuildParameters.ShutdownInProcNodeOnBuildFinish\n  parent: Microsoft.Build.Execution.BuildParameters\n  isExternal: false\n  name: ShutdownInProcNodeOnBuildFinish\n  nameWithType: BuildParameters.ShutdownInProcNodeOnBuildFinish\n  fullName: Microsoft.Build.Execution.BuildParameters.ShutdownInProcNodeOnBuildFinish\n- uid: Microsoft.Build.Execution.BuildParameters.ToolsetDefinitionLocations\n  parent: Microsoft.Build.Execution.BuildParameters\n  isExternal: false\n  name: ToolsetDefinitionLocations\n  nameWithType: BuildParameters.ToolsetDefinitionLocations\n  fullName: Microsoft.Build.Execution.BuildParameters.ToolsetDefinitionLocations\n- uid: Microsoft.Build.Evaluation.ToolsetDefinitionLocations\n  parent: Microsoft.Build.Evaluation\n  isExternal: false\n  name: ToolsetDefinitionLocations\n  nameWithType: ToolsetDefinitionLocations\n  fullName: Microsoft.Build.Evaluation.ToolsetDefinitionLocations\n- uid: Microsoft.Build.Execution.BuildParameters.Toolsets\n  parent: Microsoft.Build.Execution.BuildParameters\n  isExternal: false\n  name: Toolsets\n  nameWithType: BuildParameters.Toolsets\n  fullName: Microsoft.Build.Execution.BuildParameters.Toolsets\n- uid: System.Collections.Generic.ICollection{Microsoft.Build.Evaluation.Toolset}\n  parent: System.Collections.Generic\n  isExternal: true\n  name: ICollection<Toolset>\n  nameWithType: ICollection<Toolset>\n  fullName: System.Collections.Generic.ICollection<Microsoft.Build.Evaluation.Toolset>\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1\n    name: ICollection\n    nameWithType: ICollection\n    fullName: ICollection<Microsoft.Build.Evaluation.Toolset>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: Microsoft.Build.Evaluation.Toolset\n    name: Toolset\n    nameWithType: Toolset\n    fullName: Toolset\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: Microsoft.Build.Execution.BuildParameters.UICulture\n  parent: Microsoft.Build.Execution.BuildParameters\n  isExternal: false\n  name: UICulture\n  nameWithType: BuildParameters.UICulture\n  fullName: Microsoft.Build.Execution.BuildParameters.UICulture\n- uid: Microsoft.Build.Execution.BuildParameters.UseSynchronousLogging\n  parent: Microsoft.Build.Execution.BuildParameters\n  isExternal: false\n  name: UseSynchronousLogging\n  nameWithType: BuildParameters.UseSynchronousLogging\n  fullName: Microsoft.Build.Execution.BuildParameters.UseSynchronousLogging\n- uid: Microsoft.Build.Execution.BuildParameters.#ctor*\n  parent: Microsoft.Build.Execution.BuildParameters\n  isExternal: false\n  name: BuildParameters\n  nameWithType: BuildParameters.BuildParameters\n- uid: Microsoft.Build.Execution.BuildParameters.BuildProcessEnvironment*\n  parent: Microsoft.Build.Execution.BuildParameters\n  isExternal: false\n  name: BuildProcessEnvironment\n  nameWithType: BuildParameters.BuildProcessEnvironment\n- uid: Microsoft.Build.Execution.BuildParameters.BuildThreadPriority*\n  parent: Microsoft.Build.Execution.BuildParameters\n  isExternal: false\n  name: BuildThreadPriority\n  nameWithType: BuildParameters.BuildThreadPriority\n- uid: Microsoft.Build.Execution.BuildParameters.Clone*\n  parent: Microsoft.Build.Execution.BuildParameters\n  isExternal: false\n  name: Clone\n  nameWithType: BuildParameters.Clone\n- uid: Microsoft.Build.Execution.BuildParameters.Culture*\n  parent: Microsoft.Build.Execution.BuildParameters\n  isExternal: false\n  name: Culture\n  nameWithType: BuildParameters.Culture\n- uid: Microsoft.Build.Execution.BuildParameters.DefaultToolsVersion*\n  parent: Microsoft.Build.Execution.BuildParameters\n  isExternal: false\n  name: DefaultToolsVersion\n  nameWithType: BuildParameters.DefaultToolsVersion\n- uid: Microsoft.Build.Execution.BuildParameters.DetailedSummary*\n  parent: Microsoft.Build.Execution.BuildParameters\n  isExternal: false\n  name: DetailedSummary\n  nameWithType: BuildParameters.DetailedSummary\n- uid: Microsoft.Build.Execution.BuildParameters.DisableInProcNode*\n  parent: Microsoft.Build.Execution.BuildParameters\n  isExternal: false\n  name: DisableInProcNode\n  nameWithType: BuildParameters.DisableInProcNode\n- uid: Microsoft.Build.Execution.BuildParameters.EnableNodeReuse*\n  parent: Microsoft.Build.Execution.BuildParameters\n  isExternal: false\n  name: EnableNodeReuse\n  nameWithType: BuildParameters.EnableNodeReuse\n- uid: Microsoft.Build.Execution.BuildParameters.EnvironmentProperties*\n  parent: Microsoft.Build.Execution.BuildParameters\n  isExternal: false\n  name: EnvironmentProperties\n  nameWithType: BuildParameters.EnvironmentProperties\n- uid: Microsoft.Build.Execution.BuildParameters.ForwardingLoggers*\n  parent: Microsoft.Build.Execution.BuildParameters\n  isExternal: false\n  name: ForwardingLoggers\n  nameWithType: BuildParameters.ForwardingLoggers\n- uid: Microsoft.Build.Execution.BuildParameters.GetToolset*\n  parent: Microsoft.Build.Execution.BuildParameters\n  isExternal: false\n  name: GetToolset\n  nameWithType: BuildParameters.GetToolset\n- uid: Microsoft.Build.Execution.BuildParameters.GlobalProperties*\n  parent: Microsoft.Build.Execution.BuildParameters\n  isExternal: false\n  name: GlobalProperties\n  nameWithType: BuildParameters.GlobalProperties\n- uid: Microsoft.Build.Execution.BuildParameters.HostServices*\n  parent: Microsoft.Build.Execution.BuildParameters\n  isExternal: false\n  name: HostServices\n  nameWithType: BuildParameters.HostServices\n- uid: Microsoft.Build.Execution.BuildParameters.LegacyThreadingSemantics*\n  parent: Microsoft.Build.Execution.BuildParameters\n  isExternal: false\n  name: LegacyThreadingSemantics\n  nameWithType: BuildParameters.LegacyThreadingSemantics\n- uid: Microsoft.Build.Execution.BuildParameters.Loggers*\n  parent: Microsoft.Build.Execution.BuildParameters\n  isExternal: false\n  name: Loggers\n  nameWithType: BuildParameters.Loggers\n- uid: Microsoft.Build.Execution.BuildParameters.LogInitialPropertiesAndItems*\n  parent: Microsoft.Build.Execution.BuildParameters\n  isExternal: false\n  name: LogInitialPropertiesAndItems\n  nameWithType: BuildParameters.LogInitialPropertiesAndItems\n- uid: Microsoft.Build.Execution.BuildParameters.LogTaskInputs*\n  parent: Microsoft.Build.Execution.BuildParameters\n  isExternal: false\n  name: LogTaskInputs\n  nameWithType: BuildParameters.LogTaskInputs\n- uid: Microsoft.Build.Execution.BuildParameters.MaxNodeCount*\n  parent: Microsoft.Build.Execution.BuildParameters\n  isExternal: false\n  name: MaxNodeCount\n  nameWithType: BuildParameters.MaxNodeCount\n- uid: Microsoft.Build.Execution.BuildParameters.MemoryUseLimit*\n  parent: Microsoft.Build.Execution.BuildParameters\n  isExternal: false\n  name: MemoryUseLimit\n  nameWithType: BuildParameters.MemoryUseLimit\n- uid: Microsoft.Build.Execution.BuildParameters.NodeExeLocation*\n  parent: Microsoft.Build.Execution.BuildParameters\n  isExternal: false\n  name: NodeExeLocation\n  nameWithType: BuildParameters.NodeExeLocation\n- uid: Microsoft.Build.Execution.BuildParameters.OnlyLogCriticalEvents*\n  parent: Microsoft.Build.Execution.BuildParameters\n  isExternal: false\n  name: OnlyLogCriticalEvents\n  nameWithType: BuildParameters.OnlyLogCriticalEvents\n- uid: Microsoft.Build.Execution.BuildParameters.ResetCaches*\n  parent: Microsoft.Build.Execution.BuildParameters\n  isExternal: false\n  name: ResetCaches\n  nameWithType: BuildParameters.ResetCaches\n- uid: Microsoft.Build.Execution.BuildParameters.SaveOperatingEnvironment*\n  parent: Microsoft.Build.Execution.BuildParameters\n  isExternal: false\n  name: SaveOperatingEnvironment\n  nameWithType: BuildParameters.SaveOperatingEnvironment\n- uid: Microsoft.Build.Execution.BuildParameters.ShutdownInProcNodeOnBuildFinish*\n  parent: Microsoft.Build.Execution.BuildParameters\n  isExternal: false\n  name: ShutdownInProcNodeOnBuildFinish\n  nameWithType: BuildParameters.ShutdownInProcNodeOnBuildFinish\n- uid: Microsoft.Build.Execution.BuildParameters.ToolsetDefinitionLocations*\n  parent: Microsoft.Build.Execution.BuildParameters\n  isExternal: false\n  name: ToolsetDefinitionLocations\n  nameWithType: BuildParameters.ToolsetDefinitionLocations\n- uid: Microsoft.Build.Execution.BuildParameters.Toolsets*\n  parent: Microsoft.Build.Execution.BuildParameters\n  isExternal: false\n  name: Toolsets\n  nameWithType: BuildParameters.Toolsets\n- uid: Microsoft.Build.Execution.BuildParameters.UICulture*\n  parent: Microsoft.Build.Execution.BuildParameters\n  isExternal: false\n  name: UICulture\n  nameWithType: BuildParameters.UICulture\n- uid: Microsoft.Build.Execution.BuildParameters.UseSynchronousLogging*\n  parent: Microsoft.Build.Execution.BuildParameters\n  isExternal: false\n  name: UseSynchronousLogging\n  nameWithType: BuildParameters.UseSynchronousLogging\n"}