{"nodes":[{"pos":[1043,1260],"content":"Defines an abstract base class for a <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityTokenHandler\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that processes security tokens of type <bpt id=\"p2\">&lt;xref href=\"System.IdentityModel.Tokens.UserNameSecurityToken\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Defines an abstract base class for a <xref href=\"System.IdentityModel.Tokens.SecurityTokenHandler\"></xref> that processes security tokens of type <xref href=\"System.IdentityModel.Tokens.UserNameSecurityToken\"></xref>."},{"pos":[3988,4134],"content":"Called from constructors in derived classes to initialize the <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Tokens.UserNameSecurityTokenHandler\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Called from constructors in derived classes to initialize the <xref href=\"System.IdentityModel.Tokens.UserNameSecurityTokenHandler\"></xref> class."},{"pos":[4863,4993],"content":"Indicates whether the current XML element can be read as a <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Tokens.UserNameSecurityToken\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Indicates whether the current XML element can be read as a <xref href=\"System.IdentityModel.Tokens.UserNameSecurityToken\"></xref>."},{"pos":[5167,5246],"content":"An XML reader positioned at a start element. The reader should not be advanced.","needQuote":true,"needEscape":true,"nodes":[{"content":"An XML reader positioned at a start element. The reader should not be advanced.","pos":[0,79],"nodes":[{"content":"An XML reader positioned at a start element.","pos":[0,44]},{"content":"The reader should not be advanced.","pos":[45,79]}]}]},{"pos":[5305,5543],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the reader is pointing to a <bpt id=\"p2\">&lt;xref href=\"System.IdentityModel.Tokens.UserNameSecurityToken\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the reader is pointing to a <xref href=\"System.IdentityModel.Tokens.UserNameSecurityToken\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[6124,6269],"content":"Gets a value that indicates whether this handler can write tokens of type <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Tokens.UserNameSecurityToken\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets a value that indicates whether this handler can write tokens of type <xref href=\"System.IdentityModel.Tokens.UserNameSecurityToken\"></xref>."},{"pos":[6395,6711],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the handler can write tokens of type <xref href=\"System.IdentityModel.Tokens.UserNameSecurityToken\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. Always <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the handler can write tokens of type <bpt id=\"p2\">&lt;xref href=\"System.IdentityModel.Tokens.UserNameSecurityToken\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","pos":[0,247],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the handler can write tokens of type <xref href=\"System.IdentityModel.Tokens.UserNameSecurityToken\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"Always <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[248,316],"source":" Always <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>."}]},{"pos":[7347,7451],"content":"Returns the URIs used in requests to identify a token of the type that can be processed by this handler.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the URIs used in requests to identify a token of the type that can be processed by this handler.","pos":[0,104]}]},{"pos":[7606,7678],"content":"The set of URIs that identify the token type that this handler supports.","needQuote":true,"needEscape":true,"nodes":[{"content":"The set of URIs that identify the token type that this handler supports.","pos":[0,72]}]},{"pos":[8325,8430],"content":"Reads a <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Tokens.UserNameSecurityToken\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> from the specified reader.","needQuote":true,"needEscape":true,"source":"Reads a <xref href=\"System.IdentityModel.Tokens.UserNameSecurityToken\"></xref> from the specified reader."},{"pos":[8638,8697],"content":"An XML reader positioned at the start element of the token.","needQuote":true,"needEscape":true,"nodes":[{"content":"An XML reader positioned at the start element of the token.","pos":[0,59]}]},{"pos":[8783,8846],"content":"The username security token that was deserialized from the XML.","needQuote":true,"needEscape":true,"nodes":[{"content":"The username security token that was deserialized from the XML.","pos":[0,63]}]},{"pos":[9043,9127],"content":"<ph id=\"ph1\">&lt;code&gt;reader&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>reader</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[9220,9245],"content":"The token cannot be read.","needQuote":true,"needEscape":true,"nodes":[{"content":"The token cannot be read.","pos":[0,25]}]},{"pos":[9348,9390],"content":"The password was not in plain text format.","needQuote":true,"needEscape":true,"nodes":[{"content":"The password was not in plain text format.","pos":[0,42]}]},{"pos":[9501,9586],"content":"An unknown element was found in the security token or the username was not specified.","needQuote":true,"needEscape":true,"nodes":[{"content":"An unknown element was found in the security token or the username was not specified.","pos":[0,85]}]},{"pos":[10072,10361],"content":"Gets or sets a value that specifies whether the password will be retained in the bootstrap token that is attached to the <bpt id=\"p1\">&lt;xref href=\"System.Security.Claims.ClaimsIdentity\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> that is returned by the &lt;xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken*&gt; method.","needQuote":true,"needEscape":true,"source":"Gets or sets a value that specifies whether the password will be retained in the bootstrap token that is attached to the <xref href=\"System.Security.Claims.ClaimsIdentity\"></xref> that is returned by the <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken*> method."},{"pos":[10492,10765],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the password should be retained in the bootstrap token; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the password should be retained in the bootstrap token; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","pos":[0,194],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the password should be retained in the bootstrap token; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[195,273],"source":" The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[11328,11398],"content":"Gets the <xref:System.Type> of the tokens that this handler processes.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the &lt;xref:System.Type&gt; of the tokens that this handler processes.","pos":[0,70],"source":"Gets the <xref:System.Type> of the tokens that this handler processes."}]},{"pos":[11517,11600],"content":"The type of <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Tokens.UserNameSecurityToken\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The type of <xref href=\"System.IdentityModel.Tokens.UserNameSecurityToken\"></xref>."},{"pos":[12364,12467],"content":"Serializes the specified <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Tokens.UserNameSecurityToken\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to XML.","needQuote":true,"needEscape":true,"source":"Serializes the specified <xref href=\"System.IdentityModel.Tokens.UserNameSecurityToken\"></xref> to XML."},{"pos":[12688,12733],"content":"The XML writer to use to serialize the token.","needQuote":true,"needEscape":true,"nodes":[{"content":"The XML writer to use to serialize the token.","pos":[0,45]}]},{"pos":[12823,12846],"content":"The token to serialize.","needQuote":true,"needEscape":true,"nodes":[{"content":"The token to serialize.","pos":[0,23]}]},{"pos":[13045,13246],"content":"<code>writer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.       -or-       <code>token</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.","needQuote":false,"needEscape":true,"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;writer&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[0,84],"source":"<code>writer</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"content":"-or-       <ph id=\"ph1\">&lt;code&gt;token&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[91,185],"source":"       -or-       <code>token</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."}]},{"pos":[13358,13471],"content":"<ph id=\"ph1\">&lt;code&gt;token&lt;/code&gt;</ph> is not assignable from <bpt id=\"p1\">&lt;xref href=\"System.IdentityModel.Tokens.UserNameSecurityToken\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>token</code> is not assignable from <xref href=\"System.IdentityModel.Tokens.UserNameSecurityToken\"></xref>."}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.IdentityModel.Tokens.UserNameSecurityTokenHandler\n  id: UserNameSecurityTokenHandler\n  children:\n  - System.IdentityModel.Tokens.UserNameSecurityTokenHandler.#ctor\n  - System.IdentityModel.Tokens.UserNameSecurityTokenHandler.CanReadToken(System.Xml.XmlReader)\n  - System.IdentityModel.Tokens.UserNameSecurityTokenHandler.CanWriteToken\n  - System.IdentityModel.Tokens.UserNameSecurityTokenHandler.GetTokenTypeIdentifiers\n  - System.IdentityModel.Tokens.UserNameSecurityTokenHandler.ReadToken(System.Xml.XmlReader)\n  - System.IdentityModel.Tokens.UserNameSecurityTokenHandler.RetainPassword\n  - System.IdentityModel.Tokens.UserNameSecurityTokenHandler.TokenType\n  - System.IdentityModel.Tokens.UserNameSecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)\n  langs:\n  - csharp\n  name: UserNameSecurityTokenHandler\n  nameWithType: UserNameSecurityTokenHandler\n  fullName: System.IdentityModel.Tokens.UserNameSecurityTokenHandler\n  type: Class\n  summary: Defines an abstract base class for a <xref href=\"System.IdentityModel.Tokens.SecurityTokenHandler\"></xref> that processes security tokens of type <xref href=\"System.IdentityModel.Tokens.UserNameSecurityToken\"></xref>.\n  syntax:\n    content: 'public abstract class UserNameSecurityTokenHandler : System.IdentityModel.Tokens.SecurityTokenHandler'\n  inheritance:\n  - System.Object\n  - System.IdentityModel.Tokens.SecurityTokenHandler\n  implements: []\n  inheritedMembers:\n  - System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)\n  - System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.String)\n  - System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken\n  - System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)\n  - System.IdentityModel.Tokens.SecurityTokenHandler.Configuration\n  - System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection\n  - System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)\n  - System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)\n  - System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken(System.IdentityModel.Tokens.SecurityToken)\n  - System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)\n  - System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)\n  - System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)\n  - System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)\n  - System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationFailure(System.IdentityModel.Tokens.SecurityToken,System.String)\n  - System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationSuccess(System.IdentityModel.Tokens.SecurityToken)\n  - System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)\n  - System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)\n  - System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken)\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.UserNameSecurityTokenHandler.#ctor\n  id: '#ctor'\n  parent: System.IdentityModel.Tokens.UserNameSecurityTokenHandler\n  langs:\n  - csharp\n  name: UserNameSecurityTokenHandler()\n  nameWithType: UserNameSecurityTokenHandler.UserNameSecurityTokenHandler()\n  fullName: System.IdentityModel.Tokens.UserNameSecurityTokenHandler.UserNameSecurityTokenHandler()\n  type: Constructor\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Called from constructors in derived classes to initialize the <xref href=\"System.IdentityModel.Tokens.UserNameSecurityTokenHandler\"></xref> class.\n  syntax:\n    content: protected UserNameSecurityTokenHandler ();\n    parameters: []\n  overload: System.IdentityModel.Tokens.UserNameSecurityTokenHandler.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.UserNameSecurityTokenHandler.CanReadToken(System.Xml.XmlReader)\n  id: CanReadToken(System.Xml.XmlReader)\n  parent: System.IdentityModel.Tokens.UserNameSecurityTokenHandler\n  langs:\n  - csharp\n  name: CanReadToken(XmlReader)\n  nameWithType: UserNameSecurityTokenHandler.CanReadToken(XmlReader)\n  fullName: System.IdentityModel.Tokens.UserNameSecurityTokenHandler.CanReadToken(XmlReader)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Indicates whether the current XML element can be read as a <xref href=\"System.IdentityModel.Tokens.UserNameSecurityToken\"></xref>.\n  syntax:\n    content: public override bool CanReadToken (System.Xml.XmlReader reader);\n    parameters:\n    - id: reader\n      type: System.Xml.XmlReader\n      description: An XML reader positioned at a start element. The reader should not be advanced.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the reader is pointing to a <xref href=\"System.IdentityModel.Tokens.UserNameSecurityToken\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.IdentityModel.Tokens.UserNameSecurityTokenHandler.CanReadToken*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.UserNameSecurityTokenHandler.CanWriteToken\n  id: CanWriteToken\n  parent: System.IdentityModel.Tokens.UserNameSecurityTokenHandler\n  langs:\n  - csharp\n  name: CanWriteToken\n  nameWithType: UserNameSecurityTokenHandler.CanWriteToken\n  fullName: System.IdentityModel.Tokens.UserNameSecurityTokenHandler.CanWriteToken\n  type: Property\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Gets a value that indicates whether this handler can write tokens of type <xref href=\"System.IdentityModel.Tokens.UserNameSecurityToken\"></xref>.\n  syntax:\n    content: public override bool CanWriteToken { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the handler can write tokens of type <xref href=\"System.IdentityModel.Tokens.UserNameSecurityToken\"></xref>; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. Always <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.\n  overload: System.IdentityModel.Tokens.UserNameSecurityTokenHandler.CanWriteToken*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.UserNameSecurityTokenHandler.GetTokenTypeIdentifiers\n  id: GetTokenTypeIdentifiers\n  parent: System.IdentityModel.Tokens.UserNameSecurityTokenHandler\n  langs:\n  - csharp\n  name: GetTokenTypeIdentifiers()\n  nameWithType: UserNameSecurityTokenHandler.GetTokenTypeIdentifiers()\n  fullName: System.IdentityModel.Tokens.UserNameSecurityTokenHandler.GetTokenTypeIdentifiers()\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Returns the URIs used in requests to identify a token of the type that can be processed by this handler.\n  syntax:\n    content: public override string[] GetTokenTypeIdentifiers ();\n    parameters: []\n    return:\n      type: System.String[]\n      description: The set of URIs that identify the token type that this handler supports.\n  overload: System.IdentityModel.Tokens.UserNameSecurityTokenHandler.GetTokenTypeIdentifiers*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.UserNameSecurityTokenHandler.ReadToken(System.Xml.XmlReader)\n  id: ReadToken(System.Xml.XmlReader)\n  parent: System.IdentityModel.Tokens.UserNameSecurityTokenHandler\n  langs:\n  - csharp\n  name: ReadToken(XmlReader)\n  nameWithType: UserNameSecurityTokenHandler.ReadToken(XmlReader)\n  fullName: System.IdentityModel.Tokens.UserNameSecurityTokenHandler.ReadToken(XmlReader)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Reads a <xref href=\"System.IdentityModel.Tokens.UserNameSecurityToken\"></xref> from the specified reader.\n  syntax:\n    content: public override System.IdentityModel.Tokens.SecurityToken ReadToken (System.Xml.XmlReader reader);\n    parameters:\n    - id: reader\n      type: System.Xml.XmlReader\n      description: An XML reader positioned at the start element of the token.\n    return:\n      type: System.IdentityModel.Tokens.SecurityToken\n      description: The username security token that was deserialized from the XML.\n  overload: System.IdentityModel.Tokens.UserNameSecurityTokenHandler.ReadToken*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>reader</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.Xml.XmlException\n    commentId: T:System.Xml.XmlException\n    description: The token cannot be read.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The password was not in plain text format.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: An unknown element was found in the security token or the username was not specified.\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.UserNameSecurityTokenHandler.RetainPassword\n  id: RetainPassword\n  parent: System.IdentityModel.Tokens.UserNameSecurityTokenHandler\n  langs:\n  - csharp\n  name: RetainPassword\n  nameWithType: UserNameSecurityTokenHandler.RetainPassword\n  fullName: System.IdentityModel.Tokens.UserNameSecurityTokenHandler.RetainPassword\n  type: Property\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Gets or sets a value that specifies whether the password will be retained in the bootstrap token that is attached to the <xref href=\"System.Security.Claims.ClaimsIdentity\"></xref> that is returned by the <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken*> method.\n  syntax:\n    content: public virtual bool RetainPassword { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the password should be retained in the bootstrap token; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.IdentityModel.Tokens.UserNameSecurityTokenHandler.RetainPassword*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.UserNameSecurityTokenHandler.TokenType\n  id: TokenType\n  parent: System.IdentityModel.Tokens.UserNameSecurityTokenHandler\n  langs:\n  - csharp\n  name: TokenType\n  nameWithType: UserNameSecurityTokenHandler.TokenType\n  fullName: System.IdentityModel.Tokens.UserNameSecurityTokenHandler.TokenType\n  type: Property\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Gets the <xref:System.Type> of the tokens that this handler processes.\n  syntax:\n    content: public override Type TokenType { get; }\n    return:\n      type: System.Type\n      description: The type of <xref href=\"System.IdentityModel.Tokens.UserNameSecurityToken\"></xref>.\n  overload: System.IdentityModel.Tokens.UserNameSecurityTokenHandler.TokenType*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.IdentityModel.Tokens.UserNameSecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)\n  id: WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)\n  parent: System.IdentityModel.Tokens.UserNameSecurityTokenHandler\n  langs:\n  - csharp\n  name: WriteToken(XmlWriter,SecurityToken)\n  nameWithType: UserNameSecurityTokenHandler.WriteToken(XmlWriter,SecurityToken)\n  fullName: System.IdentityModel.Tokens.UserNameSecurityTokenHandler.WriteToken(XmlWriter,SecurityToken)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Serializes the specified <xref href=\"System.IdentityModel.Tokens.UserNameSecurityToken\"></xref> to XML.\n  syntax:\n    content: public override void WriteToken (System.Xml.XmlWriter writer, System.IdentityModel.Tokens.SecurityToken token);\n    parameters:\n    - id: writer\n      type: System.Xml.XmlWriter\n      description: The XML writer to use to serialize the token.\n    - id: token\n      type: System.IdentityModel.Tokens.SecurityToken\n      description: The token to serialize.\n  overload: System.IdentityModel.Tokens.UserNameSecurityTokenHandler.WriteToken*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>writer</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>token</code> is <xref uid=\\\"langword_csharp_null\\\" name=\\\"null\\\" href=\\\"\\\"></xref>.\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>token</code> is not assignable from <xref href=\"System.IdentityModel.Tokens.UserNameSecurityToken\"></xref>.\n  platform:\n  - net462\nreferences:\n- uid: System.IdentityModel.Tokens.SecurityTokenHandler\n  isExternal: false\n  name: System.IdentityModel.Tokens.SecurityTokenHandler\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.Xml.XmlException\n  isExternal: true\n  name: System.Xml.XmlException\n- uid: System.NotSupportedException\n  isExternal: true\n  name: System.NotSupportedException\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.IdentityModel.Tokens.UserNameSecurityTokenHandler.#ctor\n  parent: System.IdentityModel.Tokens.UserNameSecurityTokenHandler\n  isExternal: false\n  name: UserNameSecurityTokenHandler()\n  nameWithType: UserNameSecurityTokenHandler.UserNameSecurityTokenHandler()\n  fullName: System.IdentityModel.Tokens.UserNameSecurityTokenHandler.UserNameSecurityTokenHandler()\n- uid: System.IdentityModel.Tokens.UserNameSecurityTokenHandler.CanReadToken(System.Xml.XmlReader)\n  parent: System.IdentityModel.Tokens.UserNameSecurityTokenHandler\n  isExternal: false\n  name: CanReadToken(XmlReader)\n  nameWithType: UserNameSecurityTokenHandler.CanReadToken(XmlReader)\n  fullName: System.IdentityModel.Tokens.UserNameSecurityTokenHandler.CanReadToken(XmlReader)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Xml.XmlReader\n  parent: System.Xml\n  isExternal: true\n  name: XmlReader\n  nameWithType: XmlReader\n  fullName: System.Xml.XmlReader\n- uid: System.IdentityModel.Tokens.UserNameSecurityTokenHandler.CanWriteToken\n  parent: System.IdentityModel.Tokens.UserNameSecurityTokenHandler\n  isExternal: false\n  name: CanWriteToken\n  nameWithType: UserNameSecurityTokenHandler.CanWriteToken\n  fullName: System.IdentityModel.Tokens.UserNameSecurityTokenHandler.CanWriteToken\n- uid: System.IdentityModel.Tokens.UserNameSecurityTokenHandler.GetTokenTypeIdentifiers\n  parent: System.IdentityModel.Tokens.UserNameSecurityTokenHandler\n  isExternal: false\n  name: GetTokenTypeIdentifiers()\n  nameWithType: UserNameSecurityTokenHandler.GetTokenTypeIdentifiers()\n  fullName: System.IdentityModel.Tokens.UserNameSecurityTokenHandler.GetTokenTypeIdentifiers()\n- uid: System.String[]\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String[]\n  spec.csharp:\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: String[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.IdentityModel.Tokens.UserNameSecurityTokenHandler.ReadToken(System.Xml.XmlReader)\n  parent: System.IdentityModel.Tokens.UserNameSecurityTokenHandler\n  isExternal: false\n  name: ReadToken(XmlReader)\n  nameWithType: UserNameSecurityTokenHandler.ReadToken(XmlReader)\n  fullName: System.IdentityModel.Tokens.UserNameSecurityTokenHandler.ReadToken(XmlReader)\n- uid: System.IdentityModel.Tokens.SecurityToken\n  parent: System.IdentityModel.Tokens\n  isExternal: false\n  name: SecurityToken\n  nameWithType: SecurityToken\n  fullName: System.IdentityModel.Tokens.SecurityToken\n- uid: System.IdentityModel.Tokens.UserNameSecurityTokenHandler.RetainPassword\n  parent: System.IdentityModel.Tokens.UserNameSecurityTokenHandler\n  isExternal: false\n  name: RetainPassword\n  nameWithType: UserNameSecurityTokenHandler.RetainPassword\n  fullName: System.IdentityModel.Tokens.UserNameSecurityTokenHandler.RetainPassword\n- uid: System.IdentityModel.Tokens.UserNameSecurityTokenHandler.TokenType\n  parent: System.IdentityModel.Tokens.UserNameSecurityTokenHandler\n  isExternal: false\n  name: TokenType\n  nameWithType: UserNameSecurityTokenHandler.TokenType\n  fullName: System.IdentityModel.Tokens.UserNameSecurityTokenHandler.TokenType\n- uid: System.Type\n  parent: System\n  isExternal: true\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.IdentityModel.Tokens.UserNameSecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)\n  parent: System.IdentityModel.Tokens.UserNameSecurityTokenHandler\n  isExternal: false\n  name: WriteToken(XmlWriter,SecurityToken)\n  nameWithType: UserNameSecurityTokenHandler.WriteToken(XmlWriter,SecurityToken)\n  fullName: System.IdentityModel.Tokens.UserNameSecurityTokenHandler.WriteToken(XmlWriter,SecurityToken)\n- uid: System.Xml.XmlWriter\n  parent: System.Xml\n  isExternal: true\n  name: XmlWriter\n  nameWithType: XmlWriter\n  fullName: System.Xml.XmlWriter\n- uid: System.IdentityModel.Tokens.UserNameSecurityTokenHandler.#ctor*\n  parent: System.IdentityModel.Tokens.UserNameSecurityTokenHandler\n  isExternal: false\n  name: UserNameSecurityTokenHandler\n  nameWithType: UserNameSecurityTokenHandler.UserNameSecurityTokenHandler\n- uid: System.IdentityModel.Tokens.UserNameSecurityTokenHandler.CanReadToken*\n  parent: System.IdentityModel.Tokens.UserNameSecurityTokenHandler\n  isExternal: false\n  name: CanReadToken\n  nameWithType: UserNameSecurityTokenHandler.CanReadToken\n- uid: System.IdentityModel.Tokens.UserNameSecurityTokenHandler.CanWriteToken*\n  parent: System.IdentityModel.Tokens.UserNameSecurityTokenHandler\n  isExternal: false\n  name: CanWriteToken\n  nameWithType: UserNameSecurityTokenHandler.CanWriteToken\n- uid: System.IdentityModel.Tokens.UserNameSecurityTokenHandler.GetTokenTypeIdentifiers*\n  parent: System.IdentityModel.Tokens.UserNameSecurityTokenHandler\n  isExternal: false\n  name: GetTokenTypeIdentifiers\n  nameWithType: UserNameSecurityTokenHandler.GetTokenTypeIdentifiers\n- uid: System.IdentityModel.Tokens.UserNameSecurityTokenHandler.ReadToken*\n  parent: System.IdentityModel.Tokens.UserNameSecurityTokenHandler\n  isExternal: false\n  name: ReadToken\n  nameWithType: UserNameSecurityTokenHandler.ReadToken\n- uid: System.IdentityModel.Tokens.UserNameSecurityTokenHandler.RetainPassword*\n  parent: System.IdentityModel.Tokens.UserNameSecurityTokenHandler\n  isExternal: false\n  name: RetainPassword\n  nameWithType: UserNameSecurityTokenHandler.RetainPassword\n- uid: System.IdentityModel.Tokens.UserNameSecurityTokenHandler.TokenType*\n  parent: System.IdentityModel.Tokens.UserNameSecurityTokenHandler\n  isExternal: false\n  name: TokenType\n  nameWithType: UserNameSecurityTokenHandler.TokenType\n- uid: System.IdentityModel.Tokens.UserNameSecurityTokenHandler.WriteToken*\n  parent: System.IdentityModel.Tokens.UserNameSecurityTokenHandler\n  isExternal: false\n  name: WriteToken\n  nameWithType: UserNameSecurityTokenHandler.WriteToken\n"}