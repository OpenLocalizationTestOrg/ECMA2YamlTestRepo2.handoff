{"nodes":[{"pos":[1094,1362],"content":"Allows you to subscribe to incoming events. Each time a desired event is published to an event log, the <xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten\"></xref> event is raised, and the method that handles this event will be executed.","needQuote":true,"needEscape":true,"nodes":[{"content":"Allows you to subscribe to incoming events.","pos":[0,43]},{"content":"Each time a desired event is published to an event log, the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event is raised, and the method that handles this event will be executed.","pos":[44,268],"source":" Each time a desired event is published to an event log, the <xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten\"></xref> event is raised, and the method that handles this event will be executed."}]},{"pos":[1374,1710],"content":"The instances of this class are created from <xref:System.Diagnostics.Eventing.Reader.EventLogQuery> objects, which specify a query for the event subscription. When an event is logged that matches the criteria expressed in the query, then the <xref:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten> event is raised.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The instances of this class are created from <xref:System.Diagnostics.Eventing.Reader.EventLogQuery> objects, which specify a query for the event subscription. When an event is logged that matches the criteria expressed in the query, then the <xref:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten> event is raised.","pos":[0,336],"nodes":[{"content":"The instances of this class are created from &lt;xref:System.Diagnostics.Eventing.Reader.EventLogQuery&gt; objects, which specify a query for the event subscription.","pos":[0,159],"source":"The instances of this class are created from <xref:System.Diagnostics.Eventing.Reader.EventLogQuery> objects, which specify a query for the event subscription."},{"content":"When an event is logged that matches the criteria expressed in the query, then the &lt;xref:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten&gt; event is raised.","pos":[160,336],"source":" When an event is logged that matches the criteria expressed in the query, then the <xref:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten> event is raised."}]}]},{"pos":[2632,2773],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class by specifying an event query.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher\"></xref> class by specifying an event query."},{"pos":[3000,3236],"content":"Specifies a query for the event subscription. When an event is logged that matches the criteria expressed in the query, then the <xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten\"></xref> event is raised.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies a query for the event subscription.","pos":[0,45]},{"content":"When an event is logged that matches the criteria expressed in the query, then the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event is raised.","pos":[46,236],"source":" When an event is logged that matches the criteria expressed in the query, then the <xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten\"></xref> event is raised."}]},{"pos":[3820,3979],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class by specifying the name or path to an event log.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher\"></xref> class by specifying the name or path to an event log."},{"pos":[4117,4329],"content":"The path or name of the event log monitor for events. If any event is logged in this event log, then the <xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten\"></xref> event is raised.","needQuote":true,"needEscape":true,"nodes":[{"content":"The path or name of the event log monitor for events.","pos":[0,53]},{"content":"If any event is logged in this event log, then the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event is raised.","pos":[54,212],"source":" If any event is logged in this event log, then the <xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten\"></xref> event is raised."}]},{"pos":[5144,5348],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class by specifying an event query and a bookmark that is used as starting position for the query.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher\"></xref> class by specifying an event query and a bookmark that is used as starting position for the query."},{"pos":[5634,5870],"content":"Specifies a query for the event subscription. When an event is logged that matches the criteria expressed in the query, then the <xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten\"></xref> event is raised.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies a query for the event subscription.","pos":[0,45]},{"content":"When an event is logged that matches the criteria expressed in the query, then the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event is raised.","pos":[46,236],"source":" When an event is logged that matches the criteria expressed in the query, then the <xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten\"></xref> event is raised."}]},{"pos":[5970,6152],"content":"The bookmark (placeholder) used as a starting position in the event log or stream of events. Only events that have been logged after the bookmark event will be returned by the query.","needQuote":true,"needEscape":true,"nodes":[{"content":"The bookmark (placeholder) used as a starting position in the event log or stream of events. Only events that have been logged after the bookmark event will be returned by the query.","pos":[0,182],"nodes":[{"content":"The bookmark (placeholder) used as a starting position in the event log or stream of events.","pos":[0,92]},{"content":"Only events that have been logged after the bookmark event will be returned by the query.","pos":[93,182]}]}]},{"pos":[7021,7322],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class by specifying an event query, a bookmark that is used as starting position for the query, and a Boolean value that determines whether to read the events that already exist in the event log.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher\"></xref> class by specifying an event query, a bookmark that is used as starting position for the query, and a Boolean value that determines whether to read the events that already exist in the event log."},{"pos":[7633,7869],"content":"Specifies a query for the event subscription. When an event is logged that matches the criteria expressed in the query, then the <xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten\"></xref> event is raised.","needQuote":true,"needEscape":true,"nodes":[{"content":"Specifies a query for the event subscription.","pos":[0,45]},{"content":"When an event is logged that matches the criteria expressed in the query, then the <bpt id=\"p1\">&lt;xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> event is raised.","pos":[46,236],"source":" When an event is logged that matches the criteria expressed in the query, then the <xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten\"></xref> event is raised."}]},{"pos":[7969,8151],"content":"The bookmark (placeholder) used as a starting position in the event log or stream of events. Only events that have been logged after the bookmark event will be returned by the query.","needQuote":true,"needEscape":true,"nodes":[{"content":"The bookmark (placeholder) used as a starting position in the event log or stream of events. Only events that have been logged after the bookmark event will be returned by the query.","pos":[0,182],"nodes":[{"content":"The bookmark (placeholder) used as a starting position in the event log or stream of events.","pos":[0,92]},{"content":"Only events that have been logged after the bookmark event will be returned by the query.","pos":[93,182]}]}]},{"pos":[8227,8559],"content":"A Boolean value that determines whether to read the events that already exist in the event log. If this value is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, then the existing events are read and if this value is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, then the existing events are not read.","needQuote":true,"needEscape":true,"nodes":[{"content":"A Boolean value that determines whether to read the events that already exist in the event log.","pos":[0,95]},{"content":"If this value is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>, then the existing events are read and if this value is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>, then the existing events are not read.","pos":[96,332],"source":" If this value is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, then the existing events are read and if this value is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, then the existing events are not read."}]},{"pos":[9068,9115],"content":"Releases all the resources used by this object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Releases all the resources used by this object.","pos":[0,47]}]},{"pos":[9745,9845],"content":"Releases the unmanaged resources used by this object, and optionally releases the managed resources.","needQuote":true,"needEscape":true,"nodes":[{"content":"Releases the unmanaged resources used by this object, and optionally releases the managed resources.","pos":[0,100]}]},{"pos":[10000,10209],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to release both managed and unmanaged resources; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> to release only unmanaged resources.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only unmanaged resources."},{"pos":[10716,10794],"content":"Determines whether this object starts delivering events to the event delegate.","needQuote":true,"needEscape":true,"nodes":[{"content":"Determines whether this object starts delivering events to the event delegate.","pos":[0,78]}]},{"pos":[10910,11151],"content":"Returns <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> when this object can deliver events to the event delegate, and returns <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> when this object has stopped delivery.","needQuote":true,"needEscape":true,"source":"Returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> when this object can deliver events to the event delegate, and returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> when this object has stopped delivery."},{"pos":[11710,11880],"content":"Allows setting a delegate (event handler method) that gets called every time an event is published that matches the criteria specified in the event query for this object.","needQuote":true,"needEscape":true,"nodes":[{"content":"Allows setting a delegate (event handler method) that gets called every time an event is published that matches the criteria specified in the event query for this object.","pos":[0,170]}]},{"pos":[12328,12340],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher\n  id: EventLogWatcher\n  children:\n  - System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery)\n  - System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.String)\n  - System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark)\n  - System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark,System.Boolean)\n  - System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose\n  - System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose(System.Boolean)\n  - System.Diagnostics.Eventing.Reader.EventLogWatcher.Enabled\n  - System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten\n  langs:\n  - csharp\n  name: EventLogWatcher\n  nameWithType: EventLogWatcher\n  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher\n  type: Class\n  summary: Allows you to subscribe to incoming events. Each time a desired event is published to an event log, the <xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten\"></xref> event is raised, and the method that handles this event will be executed.\n  remarks: The instances of this class are created from <xref:System.Diagnostics.Eventing.Reader.EventLogQuery> objects, which specify a query for the event subscription. When an event is logged that matches the criteria expressed in the query, then the <xref:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten> event is raised.\n  example:\n  - 'For example code using this class, see [How to: Subscribe to Events in an Event Log](http://msdn.microsoft.com/en-us/62e006d3-9fab-4fdf-a8f8-e23d05498cd4).'\n  syntax:\n    content: 'public class EventLogWatcher : IDisposable'\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery)\n  id: '#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery)'\n  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher\n  langs:\n  - csharp\n  name: EventLogWatcher(EventLogQuery)\n  nameWithType: EventLogWatcher.EventLogWatcher(EventLogQuery)\n  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.EventLogWatcher(EventLogQuery)\n  type: Constructor\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing.Reader\n  summary: Initializes a new instance of the <xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher\"></xref> class by specifying an event query.\n  syntax:\n    content: public EventLogWatcher (System.Diagnostics.Eventing.Reader.EventLogQuery eventQuery);\n    parameters:\n    - id: eventQuery\n      type: System.Diagnostics.Eventing.Reader.EventLogQuery\n      description: Specifies a query for the event subscription. When an event is logged that matches the criteria expressed in the query, then the <xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten\"></xref> event is raised.\n  overload: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher\n  langs:\n  - csharp\n  name: EventLogWatcher(String)\n  nameWithType: EventLogWatcher.EventLogWatcher(String)\n  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.EventLogWatcher(String)\n  type: Constructor\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing.Reader\n  summary: Initializes a new instance of the <xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher\"></xref> class by specifying the name or path to an event log.\n  syntax:\n    content: public EventLogWatcher (string path);\n    parameters:\n    - id: path\n      type: System.String\n      description: The path or name of the event log monitor for events. If any event is logged in this event log, then the <xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten\"></xref> event is raised.\n  overload: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark)\n  id: '#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark)'\n  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher\n  langs:\n  - csharp\n  name: EventLogWatcher(EventLogQuery,EventBookmark)\n  nameWithType: EventLogWatcher.EventLogWatcher(EventLogQuery,EventBookmark)\n  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.EventLogWatcher(EventLogQuery,EventBookmark)\n  type: Constructor\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing.Reader\n  summary: Initializes a new instance of the <xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher\"></xref> class by specifying an event query and a bookmark that is used as starting position for the query.\n  syntax:\n    content: public EventLogWatcher (System.Diagnostics.Eventing.Reader.EventLogQuery eventQuery, System.Diagnostics.Eventing.Reader.EventBookmark bookmark);\n    parameters:\n    - id: eventQuery\n      type: System.Diagnostics.Eventing.Reader.EventLogQuery\n      description: Specifies a query for the event subscription. When an event is logged that matches the criteria expressed in the query, then the <xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten\"></xref> event is raised.\n    - id: bookmark\n      type: System.Diagnostics.Eventing.Reader.EventBookmark\n      description: The bookmark (placeholder) used as a starting position in the event log or stream of events. Only events that have been logged after the bookmark event will be returned by the query.\n  overload: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark,System.Boolean)\n  id: '#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark,System.Boolean)'\n  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher\n  langs:\n  - csharp\n  name: EventLogWatcher(EventLogQuery,EventBookmark,Boolean)\n  nameWithType: EventLogWatcher.EventLogWatcher(EventLogQuery,EventBookmark,Boolean)\n  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.EventLogWatcher(EventLogQuery,EventBookmark,Boolean)\n  type: Constructor\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing.Reader\n  summary: Initializes a new instance of the <xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher\"></xref> class by specifying an event query, a bookmark that is used as starting position for the query, and a Boolean value that determines whether to read the events that already exist in the event log.\n  syntax:\n    content: public EventLogWatcher (System.Diagnostics.Eventing.Reader.EventLogQuery eventQuery, System.Diagnostics.Eventing.Reader.EventBookmark bookmark, bool readExistingEvents);\n    parameters:\n    - id: eventQuery\n      type: System.Diagnostics.Eventing.Reader.EventLogQuery\n      description: Specifies a query for the event subscription. When an event is logged that matches the criteria expressed in the query, then the <xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten\"></xref> event is raised.\n    - id: bookmark\n      type: System.Diagnostics.Eventing.Reader.EventBookmark\n      description: The bookmark (placeholder) used as a starting position in the event log or stream of events. Only events that have been logged after the bookmark event will be returned by the query.\n    - id: readExistingEvents\n      type: System.Boolean\n      description: A Boolean value that determines whether to read the events that already exist in the event log. If this value is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, then the existing events are read and if this value is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, then the existing events are not read.\n  overload: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose\n  id: Dispose\n  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: EventLogWatcher.Dispose()\n  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose()\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing.Reader\n  summary: Releases all the resources used by this object.\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: EventLogWatcher.Dispose(Boolean)\n  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing.Reader\n  summary: Releases the unmanaged resources used by this object, and optionally releases the managed resources.\n  syntax:\n    content: protected virtual void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only unmanaged resources.\n  overload: System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.Enabled\n  id: Enabled\n  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher\n  langs:\n  - csharp\n  name: Enabled\n  nameWithType: EventLogWatcher.Enabled\n  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.Enabled\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing.Reader\n  summary: Determines whether this object starts delivering events to the event delegate.\n  syntax:\n    content: public bool Enabled { get; set; }\n    return:\n      type: System.Boolean\n      description: Returns <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> when this object can deliver events to the event delegate, and returns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> when this object has stopped delivery.\n  overload: System.Diagnostics.Eventing.Reader.EventLogWatcher.Enabled*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten\n  id: EventRecordWritten\n  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher\n  langs:\n  - csharp\n  name: EventRecordWritten\n  nameWithType: EventLogWatcher.EventRecordWritten\n  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten\n  type: Event\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing.Reader\n  summary: Allows setting a delegate (event handler method) that gets called every time an event is published that matches the criteria specified in the event query for this object.\n  remarks: ''\n  example:\n  - 'For example code using this class, see [How to: Subscribe to Events in an Event Log](http://msdn.microsoft.com/en-us/62e006d3-9fab-4fdf-a8f8-e23d05498cd4).'\n  syntax:\n    content: public event EventHandler<System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs> EventRecordWritten;\n    return:\n      type: System.EventHandler{System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs}\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery)\n  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher\n  isExternal: false\n  name: EventLogWatcher(EventLogQuery)\n  nameWithType: EventLogWatcher.EventLogWatcher(EventLogQuery)\n  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.EventLogWatcher(EventLogQuery)\n- uid: System.Diagnostics.Eventing.Reader.EventLogQuery\n  parent: System.Diagnostics.Eventing.Reader\n  isExternal: false\n  name: EventLogQuery\n  nameWithType: EventLogQuery\n  fullName: System.Diagnostics.Eventing.Reader.EventLogQuery\n- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.String)\n  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher\n  isExternal: false\n  name: EventLogWatcher(String)\n  nameWithType: EventLogWatcher.EventLogWatcher(String)\n  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.EventLogWatcher(String)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark)\n  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher\n  isExternal: false\n  name: EventLogWatcher(EventLogQuery,EventBookmark)\n  nameWithType: EventLogWatcher.EventLogWatcher(EventLogQuery,EventBookmark)\n  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.EventLogWatcher(EventLogQuery,EventBookmark)\n- uid: System.Diagnostics.Eventing.Reader.EventBookmark\n  parent: System.Diagnostics.Eventing.Reader\n  isExternal: false\n  name: EventBookmark\n  nameWithType: EventBookmark\n  fullName: System.Diagnostics.Eventing.Reader.EventBookmark\n- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark,System.Boolean)\n  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher\n  isExternal: false\n  name: EventLogWatcher(EventLogQuery,EventBookmark,Boolean)\n  nameWithType: EventLogWatcher.EventLogWatcher(EventLogQuery,EventBookmark,Boolean)\n  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.EventLogWatcher(EventLogQuery,EventBookmark,Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose\n  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher\n  isExternal: false\n  name: Dispose()\n  nameWithType: EventLogWatcher.Dispose()\n  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose()\n- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose(System.Boolean)\n  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: EventLogWatcher.Dispose(Boolean)\n  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose(Boolean)\n- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.Enabled\n  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher\n  isExternal: false\n  name: Enabled\n  nameWithType: EventLogWatcher.Enabled\n  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.Enabled\n- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten\n  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher\n  isExternal: false\n  name: EventRecordWritten\n  nameWithType: EventLogWatcher.EventRecordWritten\n  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten\n- uid: System.EventHandler{System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs}\n  parent: System\n  isExternal: true\n  name: EventHandler<EventRecordWrittenEventArgs>\n  nameWithType: EventHandler<EventRecordWrittenEventArgs>\n  fullName: System.EventHandler<System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs>\n  spec.csharp:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    nameWithType: EventHandler\n    fullName: EventHandler<System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs\n    name: EventRecordWrittenEventArgs\n    nameWithType: EventRecordWrittenEventArgs\n    fullName: EventRecordWrittenEventArgs\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor*\n  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher\n  isExternal: false\n  name: EventLogWatcher\n  nameWithType: EventLogWatcher.EventLogWatcher\n- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose*\n  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher\n  isExternal: false\n  name: Dispose\n  nameWithType: EventLogWatcher.Dispose\n- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.Enabled*\n  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher\n  isExternal: false\n  name: Enabled\n  nameWithType: EventLogWatcher.Enabled\n"}