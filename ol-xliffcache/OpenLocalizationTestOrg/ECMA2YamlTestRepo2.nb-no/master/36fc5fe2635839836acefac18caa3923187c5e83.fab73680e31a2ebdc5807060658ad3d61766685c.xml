{"nodes":[{"pos":[2610,2643],"content":"Resolves security context tokens.","needQuote":true,"needEscape":true,"nodes":[{"content":"Resolves security context tokens.","pos":[0,33]}]},{"pos":[4953,5087],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver\"></xref> class."},{"pos":[5099,5257],"content":"If <ph id=\"ph1\">`removeOldestTokensOnCacheFull`</ph> is <ph id=\"ph2\">`false`</ph>, <ph id=\"ph3\">`AddContext`</ph> throws a &lt;xref:System.ServiceModel.QuotaExceededException&gt; if the cache capacity has been reached.","needQuote":true,"needEscape":true,"extradata":"MT","source":"If `removeOldestTokensOnCacheFull` is `false`, `AddContext` throws a <xref:System.ServiceModel.QuotaExceededException> if the cache capacity has been reached."},{"pos":[5496,5535],"content":"The size of the security context cache.","needQuote":true,"needEscape":true,"nodes":[{"content":"The size of the security context cache.","pos":[0,39]}]},{"pos":[5622,5820],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the oldest tokens should be removed when the cache is full; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the oldest tokens should be removed when the cache is full; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[6693,6901],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class with the specified security context cache capacity and clock skew maximum.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver\"></xref> class with the specified security context cache capacity and clock skew maximum."},{"pos":[7160,7199],"content":"The size of the security context cache.","needQuote":true,"needEscape":true,"nodes":[{"content":"The size of the security context cache.","pos":[0,39]}]},{"pos":[7286,7484],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the oldest tokens should be removed when the cache is full; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the oldest tokens should be removed when the cache is full; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[7552,7631],"content":"The maximum allowable time difference between client and server clock settings.","needQuote":true,"needEscape":true,"nodes":[{"content":"The maximum allowable time difference between client and server clock settings.","pos":[0,79]}]},{"pos":[8489,8547],"content":"Adds a security context security token to the token cache.","needQuote":true,"needEscape":true,"nodes":[{"content":"Adds a security context security token to the token cache.","pos":[0,58]}]},{"pos":[8796,8823],"content":"The security context token.","needQuote":true,"needEscape":true,"nodes":[{"content":"The security context token.","pos":[0,27]}]},{"pos":[9065,9307],"content":"The &lt;xref:System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveOldestTokensOnCacheFull*&gt; property is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and the cache capacity has been reached or exceeded.","needQuote":true,"needEscape":true,"source":"The <xref:System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveOldestTokensOnCacheFull*> property is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> and the cache capacity has been reached or exceeded."},{"pos":[9855,9889],"content":"Clears the token cache of content.","needQuote":true,"needEscape":true,"nodes":[{"content":"Clears the token cache of content.","pos":[0,34]}]},{"pos":[10602,10689],"content":"Returns the maximum allowable time difference between client and server clock settings.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns the maximum allowable time difference between client and server clock settings.","pos":[0,87]}]},{"pos":[10807,10886],"content":"The maximum allowable time difference between client and server clock settings.","needQuote":true,"needEscape":true,"nodes":[{"content":"The maximum allowable time difference between client and server clock settings.","pos":[0,79]}]},{"pos":[11618,11709],"content":"Gets a collection of security context security token IDs that match a specified context ID.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a collection of security context security token IDs that match a specified context ID.","pos":[0,91]}]},{"pos":[11983,12017],"content":"The specified security context ID.","needQuote":true,"needEscape":true,"nodes":[{"content":"The specified security context ID.","pos":[0,34]}]},{"pos":[12169,12217],"content":"A generic collection of security context tokens.","needQuote":true,"needEscape":true,"nodes":[{"content":"A generic collection of security context tokens.","pos":[0,48]}]},{"pos":[13001,13096],"content":"Gets the security context security token ID that matches a specified context ID and generation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the security context security token ID that matches a specified context ID and generation.","pos":[0,95]}]},{"pos":[13355,13389],"content":"The specified security context ID.","needQuote":true,"needEscape":true,"nodes":[{"content":"The specified security context ID.","pos":[0,34]}]},{"pos":[13462,13477],"content":"The generation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The generation.","pos":[0,15]}]},{"pos":[13586,13622],"content":"The matching security context token.","needQuote":true,"needEscape":true,"nodes":[{"content":"The matching security context token.","pos":[0,36]}]},{"pos":[14370,14434],"content":"Removes all tokens from the cache that match a given context ID.","needQuote":true,"needEscape":true,"nodes":[{"content":"Removes all tokens from the cache that match a given context ID.","pos":[0,64]}]},{"pos":[14608,14642],"content":"The specified security context ID.","needQuote":true,"needEscape":true,"nodes":[{"content":"The specified security context ID.","pos":[0,34]}]},{"pos":[15444,15524],"content":"Removes the token from the cache that matches a given context ID and generation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Removes the token from the cache that matches a given context ID and generation.","pos":[0,80]}]},{"pos":[15726,15760],"content":"The specified security context ID.","needQuote":true,"needEscape":true,"nodes":[{"content":"The specified security context ID.","pos":[0,34]}]},{"pos":[15833,15848],"content":"The generation.","needQuote":true,"needEscape":true,"nodes":[{"content":"The generation.","pos":[0,15]}]},{"pos":[16589,16684],"content":"Gets a value that indicates whether the oldest tokens should be removed when the cache is full.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets a value that indicates whether the oldest tokens should be removed when the cache is full.","pos":[0,95]}]},{"pos":[16817,17015],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the oldest tokens should be removed when the cache is full; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the oldest tokens should be removed when the cache is full; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[17792,17835],"content":"Gets the security context token cache size.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the security context token cache size.","pos":[0,43]}]},{"pos":[17969,18007],"content":"The security context token cache size.","needQuote":true,"needEscape":true,"nodes":[{"content":"The security context token cache size.","pos":[0,38]}]},{"pos":[18908,18945],"content":"Attempts to add a token to the cache.","needQuote":true,"needEscape":true,"nodes":[{"content":"Attempts to add a token to the cache.","pos":[0,37]}]},{"pos":[19197,19224],"content":"The security context token.","needQuote":true,"needEscape":true,"nodes":[{"content":"The security context token.","pos":[0,27]}]},{"pos":[19283,19468],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the token was added successfully to the cache; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the token was added successfully to the cache; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[19685,19772],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">token</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"The <code>token</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[19867,19921],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">token</ph><ept id=\"p1\">&lt;/code&gt;</ept> date or time is outside limits.","needQuote":true,"needEscape":true,"source":"The <code>token</code> date or time is outside limits."},{"pos":[20842,20925],"content":"Attempts to resolve the security key core, given a specified key identifier clause.","needQuote":true,"needEscape":true,"nodes":[{"content":"Attempts to resolve the security key core, given a specified key identifier clause.","pos":[0,83]}]},{"pos":[21260,21295],"content":"The security key identifier clause.","needQuote":true,"needEscape":true,"nodes":[{"content":"The security key identifier clause.","pos":[0,35]}]},{"pos":[21381,21474],"content":"When this method returns, contains resolved key core. This parameter is passed uninitialized.","needQuote":true,"needEscape":true,"nodes":[{"content":"When this method returns, contains resolved key core. This parameter is passed uninitialized.","pos":[0,93],"nodes":[{"content":"When this method returns, contains resolved key core.","pos":[0,53]},{"content":"This parameter is passed uninitialized.","pos":[54,93]}]}]},{"pos":[21533,21711],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the key core was successfully resolved; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the key core was successfully resolved; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[22711,22775],"content":"Attempts to resolve the token, given a specified key identifier.","needQuote":true,"needEscape":true,"nodes":[{"content":"Attempts to resolve the token, given a specified key identifier.","pos":[0,64]}]},{"pos":[23084,23112],"content":"The security key identifier.","needQuote":true,"needEscape":true,"nodes":[{"content":"The security key identifier.","pos":[0,28]}]},{"pos":[23202,23299],"content":"When this method returns, contains the resolved key core. This parameter is passed uninitialized.","needQuote":true,"needEscape":true,"nodes":[{"content":"When this method returns, contains the resolved key core. This parameter is passed uninitialized.","pos":[0,97],"nodes":[{"content":"When this method returns, contains the resolved key core.","pos":[0,57]},{"content":"This parameter is passed uninitialized.","pos":[58,97]}]}]},{"pos":[23358,23537],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the key token was successfully resolved; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the key token was successfully resolved; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[24561,24632],"content":"Attempts to resolve the token, given a specified key identifier clause.","needQuote":true,"needEscape":true,"nodes":[{"content":"Attempts to resolve the token, given a specified key identifier clause.","pos":[0,71]}]},{"pos":[24965,25000],"content":"The security key identifier clause.","needQuote":true,"needEscape":true,"nodes":[{"content":"The security key identifier clause.","pos":[0,35]}]},{"pos":[25090,25187],"content":"When this method returns, contains the resolved key core. This parameter is passed uninitialized.","needQuote":true,"needEscape":true,"nodes":[{"content":"When this method returns, contains the resolved key core. This parameter is passed uninitialized.","pos":[0,97],"nodes":[{"content":"When this method returns, contains the resolved key core.","pos":[0,57]},{"content":"This parameter is passed uninitialized.","pos":[58,97]}]}]},{"pos":[25246,25425],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the key token was successfully resolved; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the key token was successfully resolved; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[26426,26479],"content":"Updates the expiration date for a token in the cache.","needQuote":true,"needEscape":true,"nodes":[{"content":"Updates the expiration date for a token in the cache.","pos":[0,53]}]},{"pos":[26771,26792],"content":"The security context.","needQuote":true,"needEscape":true,"nodes":[{"content":"The security context.","pos":[0,21]}]},{"pos":[26865,26898],"content":"The new expiration time and date.","needQuote":true,"needEscape":true,"nodes":[{"content":"The new expiration time and date.","pos":[0,33]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver\n  id: SecurityContextSecurityTokenResolver\n  children:\n  - System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.#ctor(System.Int32,System.Boolean)\n  - System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.#ctor(System.Int32,System.Boolean,System.TimeSpan)\n  - System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.AddContext(System.ServiceModel.Security.Tokens.SecurityContextSecurityToken)\n  - System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.ClearContexts\n  - System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.ClockSkew\n  - System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.GetAllContexts(System.Xml.UniqueId)\n  - System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.GetContext(System.Xml.UniqueId,System.Xml.UniqueId)\n  - System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveAllContexts(System.Xml.UniqueId)\n  - System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveContext(System.Xml.UniqueId,System.Xml.UniqueId)\n  - System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveOldestTokensOnCacheFull\n  - System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.SecurityContextTokenCacheCapacity\n  - System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.TryAddContext(System.ServiceModel.Security.Tokens.SecurityContextSecurityToken)\n  - System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveSecurityKeyCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityKey@)\n  - System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifier,System.IdentityModel.Tokens.SecurityToken@)\n  - System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityToken@)\n  - System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.UpdateContextCachingTime(System.ServiceModel.Security.Tokens.SecurityContextSecurityToken,System.DateTime)\n  langs:\n  - csharp\n  name: SecurityContextSecurityTokenResolver\n  nameWithType: SecurityContextSecurityTokenResolver\n  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver\n  type: Class\n  summary: Resolves security context tokens.\n  syntax:\n    content: 'public class SecurityContextSecurityTokenResolver : System.IdentityModel.Selectors.SecurityTokenResolver, System.ServiceModel.Security.Tokens.ISecurityContextSecurityTokenCache'\n  inheritance:\n  - System.Object\n  - System.IdentityModel.Selectors.SecurityTokenResolver\n  implements:\n  - System.ServiceModel.Security.Tokens.ISecurityContextSecurityTokenCache\n  inheritedMembers:\n  - System.IdentityModel.Selectors.SecurityTokenResolver.CreateDefaultSecurityTokenResolver(System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Tokens.SecurityToken},System.Boolean)\n  - System.IdentityModel.Selectors.SecurityTokenResolver.LoadCustomConfiguration(System.Xml.XmlNodeList)\n  - System.IdentityModel.Selectors.SecurityTokenResolver.ResolveSecurityKey(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)\n  - System.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(System.IdentityModel.Tokens.SecurityKeyIdentifier)\n  - System.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)\n  - System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKey(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityKey@)\n  - System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(System.IdentityModel.Tokens.SecurityKeyIdentifier,System.IdentityModel.Tokens.SecurityToken@)\n  - System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityToken@)\n  platform:\n  - net462\n- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.#ctor(System.Int32,System.Boolean)\n  id: '#ctor(System.Int32,System.Boolean)'\n  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver\n  langs:\n  - csharp\n  name: SecurityContextSecurityTokenResolver(Int32,Boolean)\n  nameWithType: SecurityContextSecurityTokenResolver.SecurityContextSecurityTokenResolver(Int32,Boolean)\n  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.SecurityContextSecurityTokenResolver(Int32,Boolean)\n  type: Constructor\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Security.Tokens\n  summary: Initializes a new instance of the <xref href=\"System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver\"></xref> class.\n  remarks: If `removeOldestTokensOnCacheFull` is `false`, `AddContext` throws a <xref:System.ServiceModel.QuotaExceededException> if the cache capacity has been reached.\n  syntax:\n    content: public SecurityContextSecurityTokenResolver (int securityContextCacheCapacity, bool removeOldestTokensOnCacheFull);\n    parameters:\n    - id: securityContextCacheCapacity\n      type: System.Int32\n      description: The size of the security context cache.\n    - id: removeOldestTokensOnCacheFull\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the oldest tokens should be removed when the cache is full; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.#ctor(System.Int32,System.Boolean,System.TimeSpan)\n  id: '#ctor(System.Int32,System.Boolean,System.TimeSpan)'\n  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver\n  langs:\n  - csharp\n  name: SecurityContextSecurityTokenResolver(Int32,Boolean,TimeSpan)\n  nameWithType: SecurityContextSecurityTokenResolver.SecurityContextSecurityTokenResolver(Int32,Boolean,TimeSpan)\n  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.SecurityContextSecurityTokenResolver(Int32,Boolean,TimeSpan)\n  type: Constructor\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Security.Tokens\n  summary: Initializes a new instance of the <xref href=\"System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver\"></xref> class with the specified security context cache capacity and clock skew maximum.\n  syntax:\n    content: public SecurityContextSecurityTokenResolver (int securityContextCacheCapacity, bool removeOldestTokensOnCacheFull, TimeSpan clockSkew);\n    parameters:\n    - id: securityContextCacheCapacity\n      type: System.Int32\n      description: The size of the security context cache.\n    - id: removeOldestTokensOnCacheFull\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the oldest tokens should be removed when the cache is full; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n    - id: clockSkew\n      type: System.TimeSpan\n      description: The maximum allowable time difference between client and server clock settings.\n  overload: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.AddContext(System.ServiceModel.Security.Tokens.SecurityContextSecurityToken)\n  id: AddContext(System.ServiceModel.Security.Tokens.SecurityContextSecurityToken)\n  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver\n  langs:\n  - csharp\n  name: AddContext(SecurityContextSecurityToken)\n  nameWithType: SecurityContextSecurityTokenResolver.AddContext(SecurityContextSecurityToken)\n  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.AddContext(SecurityContextSecurityToken)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Security.Tokens\n  summary: Adds a security context security token to the token cache.\n  syntax:\n    content: public void AddContext (System.ServiceModel.Security.Tokens.SecurityContextSecurityToken token);\n    parameters:\n    - id: token\n      type: System.ServiceModel.Security.Tokens.SecurityContextSecurityToken\n      description: The security context token.\n  overload: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.AddContext*\n  exceptions:\n  - type: System.ServiceModel.QuotaExceededException\n    commentId: T:System.ServiceModel.QuotaExceededException\n    description: The <xref:System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveOldestTokensOnCacheFull*> property is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> and the cache capacity has been reached or exceeded.\n  platform:\n  - net462\n- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.ClearContexts\n  id: ClearContexts\n  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver\n  langs:\n  - csharp\n  name: ClearContexts()\n  nameWithType: SecurityContextSecurityTokenResolver.ClearContexts()\n  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.ClearContexts()\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Security.Tokens\n  summary: Clears the token cache of content.\n  syntax:\n    content: public void ClearContexts ();\n    parameters: []\n  overload: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.ClearContexts*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.ClockSkew\n  id: ClockSkew\n  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver\n  langs:\n  - csharp\n  name: ClockSkew\n  nameWithType: SecurityContextSecurityTokenResolver.ClockSkew\n  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.ClockSkew\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Security.Tokens\n  summary: Returns the maximum allowable time difference between client and server clock settings.\n  syntax:\n    content: public TimeSpan ClockSkew { get; }\n    return:\n      type: System.TimeSpan\n      description: The maximum allowable time difference between client and server clock settings.\n  overload: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.ClockSkew*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.GetAllContexts(System.Xml.UniqueId)\n  id: GetAllContexts(System.Xml.UniqueId)\n  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver\n  langs:\n  - csharp\n  name: GetAllContexts(UniqueId)\n  nameWithType: SecurityContextSecurityTokenResolver.GetAllContexts(UniqueId)\n  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.GetAllContexts(UniqueId)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Security.Tokens\n  summary: Gets a collection of security context security token IDs that match a specified context ID.\n  syntax:\n    content: public System.Collections.ObjectModel.Collection<System.ServiceModel.Security.Tokens.SecurityContextSecurityToken> GetAllContexts (System.Xml.UniqueId contextId);\n    parameters:\n    - id: contextId\n      type: System.Xml.UniqueId\n      description: The specified security context ID.\n    return:\n      type: System.Collections.ObjectModel.Collection{System.ServiceModel.Security.Tokens.SecurityContextSecurityToken}\n      description: A generic collection of security context tokens.\n  overload: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.GetAllContexts*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.GetContext(System.Xml.UniqueId,System.Xml.UniqueId)\n  id: GetContext(System.Xml.UniqueId,System.Xml.UniqueId)\n  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver\n  langs:\n  - csharp\n  name: GetContext(UniqueId,UniqueId)\n  nameWithType: SecurityContextSecurityTokenResolver.GetContext(UniqueId,UniqueId)\n  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.GetContext(UniqueId,UniqueId)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Security.Tokens\n  summary: Gets the security context security token ID that matches a specified context ID and generation.\n  syntax:\n    content: public System.ServiceModel.Security.Tokens.SecurityContextSecurityToken GetContext (System.Xml.UniqueId contextId, System.Xml.UniqueId generation);\n    parameters:\n    - id: contextId\n      type: System.Xml.UniqueId\n      description: The specified security context ID.\n    - id: generation\n      type: System.Xml.UniqueId\n      description: The generation.\n    return:\n      type: System.ServiceModel.Security.Tokens.SecurityContextSecurityToken\n      description: The matching security context token.\n  overload: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.GetContext*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveAllContexts(System.Xml.UniqueId)\n  id: RemoveAllContexts(System.Xml.UniqueId)\n  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver\n  langs:\n  - csharp\n  name: RemoveAllContexts(UniqueId)\n  nameWithType: SecurityContextSecurityTokenResolver.RemoveAllContexts(UniqueId)\n  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveAllContexts(UniqueId)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Security.Tokens\n  summary: Removes all tokens from the cache that match a given context ID.\n  syntax:\n    content: public void RemoveAllContexts (System.Xml.UniqueId contextId);\n    parameters:\n    - id: contextId\n      type: System.Xml.UniqueId\n      description: The specified security context ID.\n  overload: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveAllContexts*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveContext(System.Xml.UniqueId,System.Xml.UniqueId)\n  id: RemoveContext(System.Xml.UniqueId,System.Xml.UniqueId)\n  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver\n  langs:\n  - csharp\n  name: RemoveContext(UniqueId,UniqueId)\n  nameWithType: SecurityContextSecurityTokenResolver.RemoveContext(UniqueId,UniqueId)\n  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveContext(UniqueId,UniqueId)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Security.Tokens\n  summary: Removes the token from the cache that matches a given context ID and generation.\n  syntax:\n    content: public void RemoveContext (System.Xml.UniqueId contextId, System.Xml.UniqueId generation);\n    parameters:\n    - id: contextId\n      type: System.Xml.UniqueId\n      description: The specified security context ID.\n    - id: generation\n      type: System.Xml.UniqueId\n      description: The generation.\n  overload: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveContext*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveOldestTokensOnCacheFull\n  id: RemoveOldestTokensOnCacheFull\n  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver\n  langs:\n  - csharp\n  name: RemoveOldestTokensOnCacheFull\n  nameWithType: SecurityContextSecurityTokenResolver.RemoveOldestTokensOnCacheFull\n  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveOldestTokensOnCacheFull\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Security.Tokens\n  summary: Gets a value that indicates whether the oldest tokens should be removed when the cache is full.\n  syntax:\n    content: public bool RemoveOldestTokensOnCacheFull { get; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the oldest tokens should be removed when the cache is full; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveOldestTokensOnCacheFull*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.SecurityContextTokenCacheCapacity\n  id: SecurityContextTokenCacheCapacity\n  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver\n  langs:\n  - csharp\n  name: SecurityContextTokenCacheCapacity\n  nameWithType: SecurityContextSecurityTokenResolver.SecurityContextTokenCacheCapacity\n  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.SecurityContextTokenCacheCapacity\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Security.Tokens\n  summary: Gets the security context token cache size.\n  syntax:\n    content: public int SecurityContextTokenCacheCapacity { get; }\n    return:\n      type: System.Int32\n      description: The security context token cache size.\n  overload: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.SecurityContextTokenCacheCapacity*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.TryAddContext(System.ServiceModel.Security.Tokens.SecurityContextSecurityToken)\n  id: TryAddContext(System.ServiceModel.Security.Tokens.SecurityContextSecurityToken)\n  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver\n  langs:\n  - csharp\n  name: TryAddContext(SecurityContextSecurityToken)\n  nameWithType: SecurityContextSecurityTokenResolver.TryAddContext(SecurityContextSecurityToken)\n  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.TryAddContext(SecurityContextSecurityToken)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Security.Tokens\n  summary: Attempts to add a token to the cache.\n  syntax:\n    content: public bool TryAddContext (System.ServiceModel.Security.Tokens.SecurityContextSecurityToken token);\n    parameters:\n    - id: token\n      type: System.ServiceModel.Security.Tokens.SecurityContextSecurityToken\n      description: The security context token.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the token was added successfully to the cache; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.TryAddContext*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>token</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>token</code> date or time is outside limits.\n  platform:\n  - net462\n- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveSecurityKeyCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityKey@)\n  id: TryResolveSecurityKeyCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityKey@)\n  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver\n  langs:\n  - csharp\n  name: TryResolveSecurityKeyCore(SecurityKeyIdentifierClause,SecurityKey)\n  nameWithType: SecurityContextSecurityTokenResolver.TryResolveSecurityKeyCore(SecurityKeyIdentifierClause,SecurityKey)\n  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveSecurityKeyCore(SecurityKeyIdentifierClause,SecurityKey)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Security.Tokens\n  summary: Attempts to resolve the security key core, given a specified key identifier clause.\n  syntax:\n    content: protected override bool TryResolveSecurityKeyCore (System.IdentityModel.Tokens.SecurityKeyIdentifierClause keyIdentifierClause, out System.IdentityModel.Tokens.SecurityKey key);\n    parameters:\n    - id: keyIdentifierClause\n      type: System.IdentityModel.Tokens.SecurityKeyIdentifierClause\n      description: The security key identifier clause.\n    - id: key\n      type: System.IdentityModel.Tokens.SecurityKey\n      description: When this method returns, contains resolved key core. This parameter is passed uninitialized.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the key core was successfully resolved; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveSecurityKeyCore*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifier,System.IdentityModel.Tokens.SecurityToken@)\n  id: TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifier,System.IdentityModel.Tokens.SecurityToken@)\n  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver\n  langs:\n  - csharp\n  name: TryResolveTokenCore(SecurityKeyIdentifier,SecurityToken)\n  nameWithType: SecurityContextSecurityTokenResolver.TryResolveTokenCore(SecurityKeyIdentifier,SecurityToken)\n  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveTokenCore(SecurityKeyIdentifier,SecurityToken)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Security.Tokens\n  summary: Attempts to resolve the token, given a specified key identifier.\n  syntax:\n    content: protected override bool TryResolveTokenCore (System.IdentityModel.Tokens.SecurityKeyIdentifier keyIdentifier, out System.IdentityModel.Tokens.SecurityToken token);\n    parameters:\n    - id: keyIdentifier\n      type: System.IdentityModel.Tokens.SecurityKeyIdentifier\n      description: The security key identifier.\n    - id: token\n      type: System.IdentityModel.Tokens.SecurityToken\n      description: When this method returns, contains the resolved key core. This parameter is passed uninitialized.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the key token was successfully resolved; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveTokenCore*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityToken@)\n  id: TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityToken@)\n  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver\n  langs:\n  - csharp\n  name: TryResolveTokenCore(SecurityKeyIdentifierClause,SecurityToken)\n  nameWithType: SecurityContextSecurityTokenResolver.TryResolveTokenCore(SecurityKeyIdentifierClause,SecurityToken)\n  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveTokenCore(SecurityKeyIdentifierClause,SecurityToken)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Security.Tokens\n  summary: Attempts to resolve the token, given a specified key identifier clause.\n  syntax:\n    content: protected override bool TryResolveTokenCore (System.IdentityModel.Tokens.SecurityKeyIdentifierClause keyIdentifierClause, out System.IdentityModel.Tokens.SecurityToken token);\n    parameters:\n    - id: keyIdentifierClause\n      type: System.IdentityModel.Tokens.SecurityKeyIdentifierClause\n      description: The security key identifier clause.\n    - id: token\n      type: System.IdentityModel.Tokens.SecurityToken\n      description: When this method returns, contains the resolved key core. This parameter is passed uninitialized.\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the key token was successfully resolved; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveTokenCore*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.UpdateContextCachingTime(System.ServiceModel.Security.Tokens.SecurityContextSecurityToken,System.DateTime)\n  id: UpdateContextCachingTime(System.ServiceModel.Security.Tokens.SecurityContextSecurityToken,System.DateTime)\n  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver\n  langs:\n  - csharp\n  name: UpdateContextCachingTime(SecurityContextSecurityToken,DateTime)\n  nameWithType: SecurityContextSecurityTokenResolver.UpdateContextCachingTime(SecurityContextSecurityToken,DateTime)\n  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.UpdateContextCachingTime(SecurityContextSecurityToken,DateTime)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Security.Tokens\n  summary: Updates the expiration date for a token in the cache.\n  syntax:\n    content: public void UpdateContextCachingTime (System.ServiceModel.Security.Tokens.SecurityContextSecurityToken context, DateTime expirationTime);\n    parameters:\n    - id: context\n      type: System.ServiceModel.Security.Tokens.SecurityContextSecurityToken\n      description: The security context.\n    - id: expirationTime\n      type: System.DateTime\n      description: The new expiration time and date.\n  overload: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.UpdateContextCachingTime*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.IdentityModel.Selectors.SecurityTokenResolver\n  isExternal: false\n  name: System.IdentityModel.Selectors.SecurityTokenResolver\n- uid: System.ServiceModel.QuotaExceededException\n  isExternal: true\n  name: System.ServiceModel.QuotaExceededException\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.#ctor(System.Int32,System.Boolean)\n  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver\n  isExternal: false\n  name: SecurityContextSecurityTokenResolver(Int32,Boolean)\n  nameWithType: SecurityContextSecurityTokenResolver.SecurityContextSecurityTokenResolver(Int32,Boolean)\n  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.SecurityContextSecurityTokenResolver(Int32,Boolean)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.#ctor(System.Int32,System.Boolean,System.TimeSpan)\n  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver\n  isExternal: false\n  name: SecurityContextSecurityTokenResolver(Int32,Boolean,TimeSpan)\n  nameWithType: SecurityContextSecurityTokenResolver.SecurityContextSecurityTokenResolver(Int32,Boolean,TimeSpan)\n  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.SecurityContextSecurityTokenResolver(Int32,Boolean,TimeSpan)\n- uid: System.TimeSpan\n  parent: System\n  isExternal: true\n  name: TimeSpan\n  nameWithType: TimeSpan\n  fullName: System.TimeSpan\n- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.AddContext(System.ServiceModel.Security.Tokens.SecurityContextSecurityToken)\n  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver\n  isExternal: false\n  name: AddContext(SecurityContextSecurityToken)\n  nameWithType: SecurityContextSecurityTokenResolver.AddContext(SecurityContextSecurityToken)\n  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.AddContext(SecurityContextSecurityToken)\n- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityToken\n  parent: System.ServiceModel.Security.Tokens\n  isExternal: false\n  name: SecurityContextSecurityToken\n  nameWithType: SecurityContextSecurityToken\n  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityToken\n- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.ClearContexts\n  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver\n  isExternal: false\n  name: ClearContexts()\n  nameWithType: SecurityContextSecurityTokenResolver.ClearContexts()\n  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.ClearContexts()\n- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.ClockSkew\n  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver\n  isExternal: false\n  name: ClockSkew\n  nameWithType: SecurityContextSecurityTokenResolver.ClockSkew\n  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.ClockSkew\n- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.GetAllContexts(System.Xml.UniqueId)\n  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver\n  isExternal: false\n  name: GetAllContexts(UniqueId)\n  nameWithType: SecurityContextSecurityTokenResolver.GetAllContexts(UniqueId)\n  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.GetAllContexts(UniqueId)\n- uid: System.Collections.ObjectModel.Collection{System.ServiceModel.Security.Tokens.SecurityContextSecurityToken}\n  parent: System.Collections.ObjectModel\n  isExternal: true\n  name: Collection<SecurityContextSecurityToken>\n  nameWithType: Collection<SecurityContextSecurityToken>\n  fullName: System.Collections.ObjectModel.Collection<System.ServiceModel.Security.Tokens.SecurityContextSecurityToken>\n  spec.csharp:\n  - uid: System.Collections.ObjectModel.Collection`1\n    name: Collection\n    nameWithType: Collection\n    fullName: Collection<System.ServiceModel.Security.Tokens.SecurityContextSecurityToken>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityToken\n    name: SecurityContextSecurityToken\n    nameWithType: SecurityContextSecurityToken\n    fullName: SecurityContextSecurityToken\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Xml.UniqueId\n  parent: System.Xml\n  isExternal: true\n  name: UniqueId\n  nameWithType: UniqueId\n  fullName: System.Xml.UniqueId\n- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.GetContext(System.Xml.UniqueId,System.Xml.UniqueId)\n  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver\n  isExternal: false\n  name: GetContext(UniqueId,UniqueId)\n  nameWithType: SecurityContextSecurityTokenResolver.GetContext(UniqueId,UniqueId)\n  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.GetContext(UniqueId,UniqueId)\n- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveAllContexts(System.Xml.UniqueId)\n  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver\n  isExternal: false\n  name: RemoveAllContexts(UniqueId)\n  nameWithType: SecurityContextSecurityTokenResolver.RemoveAllContexts(UniqueId)\n  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveAllContexts(UniqueId)\n- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveContext(System.Xml.UniqueId,System.Xml.UniqueId)\n  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver\n  isExternal: false\n  name: RemoveContext(UniqueId,UniqueId)\n  nameWithType: SecurityContextSecurityTokenResolver.RemoveContext(UniqueId,UniqueId)\n  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveContext(UniqueId,UniqueId)\n- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveOldestTokensOnCacheFull\n  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver\n  isExternal: false\n  name: RemoveOldestTokensOnCacheFull\n  nameWithType: SecurityContextSecurityTokenResolver.RemoveOldestTokensOnCacheFull\n  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveOldestTokensOnCacheFull\n- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.SecurityContextTokenCacheCapacity\n  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver\n  isExternal: false\n  name: SecurityContextTokenCacheCapacity\n  nameWithType: SecurityContextSecurityTokenResolver.SecurityContextTokenCacheCapacity\n  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.SecurityContextTokenCacheCapacity\n- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.TryAddContext(System.ServiceModel.Security.Tokens.SecurityContextSecurityToken)\n  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver\n  isExternal: false\n  name: TryAddContext(SecurityContextSecurityToken)\n  nameWithType: SecurityContextSecurityTokenResolver.TryAddContext(SecurityContextSecurityToken)\n  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.TryAddContext(SecurityContextSecurityToken)\n- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveSecurityKeyCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityKey@)\n  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver\n  isExternal: false\n  name: TryResolveSecurityKeyCore(SecurityKeyIdentifierClause,SecurityKey)\n  nameWithType: SecurityContextSecurityTokenResolver.TryResolveSecurityKeyCore(SecurityKeyIdentifierClause,SecurityKey)\n  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveSecurityKeyCore(SecurityKeyIdentifierClause,SecurityKey)\n- uid: System.IdentityModel.Tokens.SecurityKeyIdentifierClause\n  parent: System.IdentityModel.Tokens\n  isExternal: false\n  name: SecurityKeyIdentifierClause\n  nameWithType: SecurityKeyIdentifierClause\n  fullName: System.IdentityModel.Tokens.SecurityKeyIdentifierClause\n- uid: System.IdentityModel.Tokens.SecurityKey\n  parent: System.IdentityModel.Tokens\n  isExternal: false\n  name: SecurityKey\n  nameWithType: SecurityKey\n  fullName: System.IdentityModel.Tokens.SecurityKey\n- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifier,System.IdentityModel.Tokens.SecurityToken@)\n  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver\n  isExternal: false\n  name: TryResolveTokenCore(SecurityKeyIdentifier,SecurityToken)\n  nameWithType: SecurityContextSecurityTokenResolver.TryResolveTokenCore(SecurityKeyIdentifier,SecurityToken)\n  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveTokenCore(SecurityKeyIdentifier,SecurityToken)\n- uid: System.IdentityModel.Tokens.SecurityKeyIdentifier\n  parent: System.IdentityModel.Tokens\n  isExternal: false\n  name: SecurityKeyIdentifier\n  nameWithType: SecurityKeyIdentifier\n  fullName: System.IdentityModel.Tokens.SecurityKeyIdentifier\n- uid: System.IdentityModel.Tokens.SecurityToken\n  parent: System.IdentityModel.Tokens\n  isExternal: false\n  name: SecurityToken\n  nameWithType: SecurityToken\n  fullName: System.IdentityModel.Tokens.SecurityToken\n- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityToken@)\n  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver\n  isExternal: false\n  name: TryResolveTokenCore(SecurityKeyIdentifierClause,SecurityToken)\n  nameWithType: SecurityContextSecurityTokenResolver.TryResolveTokenCore(SecurityKeyIdentifierClause,SecurityToken)\n  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveTokenCore(SecurityKeyIdentifierClause,SecurityToken)\n- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.UpdateContextCachingTime(System.ServiceModel.Security.Tokens.SecurityContextSecurityToken,System.DateTime)\n  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver\n  isExternal: false\n  name: UpdateContextCachingTime(SecurityContextSecurityToken,DateTime)\n  nameWithType: SecurityContextSecurityTokenResolver.UpdateContextCachingTime(SecurityContextSecurityToken,DateTime)\n  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.UpdateContextCachingTime(SecurityContextSecurityToken,DateTime)\n- uid: System.DateTime\n  parent: System\n  isExternal: true\n  name: DateTime\n  nameWithType: DateTime\n  fullName: System.DateTime\n- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.#ctor*\n  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver\n  isExternal: false\n  name: SecurityContextSecurityTokenResolver\n  nameWithType: SecurityContextSecurityTokenResolver.SecurityContextSecurityTokenResolver\n- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.AddContext*\n  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver\n  isExternal: false\n  name: AddContext\n  nameWithType: SecurityContextSecurityTokenResolver.AddContext\n- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.ClearContexts*\n  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver\n  isExternal: false\n  name: ClearContexts\n  nameWithType: SecurityContextSecurityTokenResolver.ClearContexts\n- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.ClockSkew*\n  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver\n  isExternal: false\n  name: ClockSkew\n  nameWithType: SecurityContextSecurityTokenResolver.ClockSkew\n- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.GetAllContexts*\n  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver\n  isExternal: false\n  name: GetAllContexts\n  nameWithType: SecurityContextSecurityTokenResolver.GetAllContexts\n- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.GetContext*\n  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver\n  isExternal: false\n  name: GetContext\n  nameWithType: SecurityContextSecurityTokenResolver.GetContext\n- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveAllContexts*\n  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver\n  isExternal: false\n  name: RemoveAllContexts\n  nameWithType: SecurityContextSecurityTokenResolver.RemoveAllContexts\n- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveContext*\n  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver\n  isExternal: false\n  name: RemoveContext\n  nameWithType: SecurityContextSecurityTokenResolver.RemoveContext\n- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveOldestTokensOnCacheFull*\n  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver\n  isExternal: false\n  name: RemoveOldestTokensOnCacheFull\n  nameWithType: SecurityContextSecurityTokenResolver.RemoveOldestTokensOnCacheFull\n- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.SecurityContextTokenCacheCapacity*\n  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver\n  isExternal: false\n  name: SecurityContextTokenCacheCapacity\n  nameWithType: SecurityContextSecurityTokenResolver.SecurityContextTokenCacheCapacity\n- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.TryAddContext*\n  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver\n  isExternal: false\n  name: TryAddContext\n  nameWithType: SecurityContextSecurityTokenResolver.TryAddContext\n- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveSecurityKeyCore*\n  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver\n  isExternal: false\n  name: TryResolveSecurityKeyCore\n  nameWithType: SecurityContextSecurityTokenResolver.TryResolveSecurityKeyCore\n- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveTokenCore*\n  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver\n  isExternal: false\n  name: TryResolveTokenCore\n  nameWithType: SecurityContextSecurityTokenResolver.TryResolveTokenCore\n- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.UpdateContextCachingTime*\n  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver\n  isExternal: false\n  name: UpdateContextCachingTime\n  nameWithType: SecurityContextSecurityTokenResolver.UpdateContextCachingTime\n"}