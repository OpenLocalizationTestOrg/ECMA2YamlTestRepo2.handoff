{"nodes":[{"pos":[617,738],"content":"Represents an easing function that creates an animation that accelerates and/or decelerates using an exponential formula.","needQuote":true,"needEscape":true,"nodes":[{"content":"Represents an easing function that creates an animation that accelerates and/or decelerates using an exponential formula.","pos":[0,121]}]},{"pos":[751,2367],"content":"You can control whether the animation accelerates, decelerates or both by specifying the <xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>. The following graph demonstrates the different values of <xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A> where *f*(*t*) represents the animation progress and *t* represents time.       ![ExponentialEase graphs of different easingmodes.](~/add/media/exponentialease-graph.png \"ExponentialEase graphs of different easingmodes.\")       The formula used for this function is the following.       ![Mathematical formula for ExponentialEase](~/add/media/exponentialease-formula.png \"Mathematical formula for ExponentialEase\")       Using the formula above, the following graph illustrates the effect of several different values for the <xref:System.Windows.Media.Animation.ExponentialEase.Exponent%2A> property:       ![Exponential Ease for three Exponent values](~/add/media/expo-easeproperty.png \"Exponential Ease for three Exponent values\")       There are several other easing functions besides ExponentialEase which you can explore using the following Silverlight sample.       [Run this sample](http://go.microsoft.com/fwlink/?LinkId=139798&sref=easing_functions_gallery)       In addition to using the easing functions included in the run-time, you can create your own custom easing functions by inheriting from <xref:System.Windows.Media.Animation.EasingFunctionBase>.      <a name=\"xamlObjectElementUsage_ExponentialEase\"></a>    ## XAML Object Element Usage      ```   <ExponentialEase .../>   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"You can control whether the animation accelerates, decelerates or both by specifying the &lt;xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A&gt;.","pos":[0,160],"source":"You can control whether the animation accelerates, decelerates or both by specifying the <xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>."},{"content":"The following graph demonstrates the different values of &lt;xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A&gt; where <bpt id=\"p1\">*</bpt>f<ept id=\"p1\">*</ept>(<bpt id=\"p2\">*</bpt>t<ept id=\"p2\">*</ept>) represents the animation progress and <bpt id=\"p3\">*</bpt>t<ept id=\"p3\">*</ept> represents time.","pos":[161,362],"source":" The following graph demonstrates the different values of <xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A> where *f*(*t*) represents the animation progress and *t* represents time."},{"content":"<bpt id=\"p1\">![</bpt>ExponentialEase graphs of different easingmodes.<ept id=\"p1\">]</ept><bpt id=\"p2\">(~/add/media/exponentialease-graph.png \"</bpt>ExponentialEase graphs of different easingmodes.<ept id=\"p2\">\")</ept>","pos":[369,510],"source":"![ExponentialEase graphs of different easingmodes.](~/add/media/exponentialease-graph.png \"ExponentialEase graphs of different easingmodes.\")"},{"content":"The formula used for this function is the following.","pos":[517,569]},{"content":"<bpt id=\"p1\">![</bpt>Mathematical formula for ExponentialEase<ept id=\"p1\">]</ept><bpt id=\"p2\">(~/add/media/exponentialease-formula.png \"</bpt>Mathematical formula for ExponentialEase<ept id=\"p2\">\")</ept>       Using the formula above, the following graph illustrates the effect of several different values for the &lt;xref:System.Windows.Media.Animation.ExponentialEase.Exponent%2A&gt; property:       <bpt id=\"p3\">![</bpt>Exponential Ease for three Exponent values<ept id=\"p3\">]</ept><bpt id=\"p4\">(~/add/media/expo-easeproperty.png \"</bpt>Exponential Ease for three Exponent values<ept id=\"p4\">\")</ept>       There are several other easing functions besides ExponentialEase which you can explore using the following Silverlight sample.","pos":[576,1154],"source":"![Mathematical formula for ExponentialEase](~/add/media/exponentialease-formula.png \"Mathematical formula for ExponentialEase\")       Using the formula above, the following graph illustrates the effect of several different values for the <xref:System.Windows.Media.Animation.ExponentialEase.Exponent%2A> property:       ![Exponential Ease for three Exponent values](~/add/media/expo-easeproperty.png \"Exponential Ease for three Exponent values\")       There are several other easing functions besides ExponentialEase which you can explore using the following Silverlight sample."},{"content":"<bpt id=\"p1\">[</bpt>Run this sample<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=139798&amp;sref=easing_functions_gallery)</ept>       In addition to using the easing functions included in the run-time, you can create your own custom easing functions by inheriting from &lt;xref:System.Windows.Media.Animation.EasingFunctionBase&gt;.","pos":[1161,1454],"source":"[Run this sample](http://go.microsoft.com/fwlink/?LinkId=139798&sref=easing_functions_gallery)       In addition to using the easing functions included in the run-time, you can create your own custom easing functions by inheriting from <xref:System.Windows.Media.Animation.EasingFunctionBase>."},{"content":"<bpt id=\"p1\">&lt;a name=\"xamlObjectElementUsage_ExponentialEase\"&gt;</bpt><ept id=\"p1\">&lt;/a&gt;</ept>    ## XAML Object Element Usage      <ph id=\"ph1\">```   &lt;ExponentialEase .../&gt;   ```</ph>","pos":[1460,1585],"source":"<a name=\"xamlObjectElementUsage_ExponentialEase\"></a>    ## XAML Object Element Usage      ```   <ExponentialEase .../>   ```"}]},{"pos":[6440,6548],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Media.Animation.ExponentialEase\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Windows.Media.Animation.ExponentialEase\"></xref> class."},{"pos":[7166,7318],"content":"Creates a new instance of the <xref href=\"System.Windows.Freezable\"></xref> derived class. When creating a derived class, you must override this method.","needQuote":true,"needEscape":true,"nodes":[{"content":"Creates a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Freezable\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> derived class.","pos":[0,90],"source":"Creates a new instance of the <xref href=\"System.Windows.Freezable\"></xref> derived class."},{"content":"When creating a derived class, you must override this method.","pos":[91,152]}]},{"pos":[7330,7562],"content":"Animation classes inherit indirectly from <xref:System.Windows.Freezable>. Because of this, you need to override the <xref:System.Windows.Media.Animation.BackEase.CreateInstanceCore%2A> method to construct a custom animation object.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Animation classes inherit indirectly from <xref:System.Windows.Freezable>. Because of this, you need to override the <xref:System.Windows.Media.Animation.BackEase.CreateInstanceCore%2A> method to construct a custom animation object.","pos":[0,232],"nodes":[{"content":"Animation classes inherit indirectly from &lt;xref:System.Windows.Freezable&gt;.","pos":[0,74],"source":"Animation classes inherit indirectly from <xref:System.Windows.Freezable>."},{"content":"Because of this, you need to override the &lt;xref:System.Windows.Media.Animation.BackEase.CreateInstanceCore%2A&gt; method to construct a custom animation object.","pos":[75,232],"source":" Because of this, you need to override the <xref:System.Windows.Media.Animation.BackEase.CreateInstanceCore%2A> method to construct a custom animation object."}]}]},{"pos":[8206,8223],"content":"The new instance.","needQuote":true,"needEscape":true,"nodes":[{"content":"The new instance.","pos":[0,17]}]},{"pos":[8793,8978],"content":"Provides the logic portion of the easing function that you can override to produce the <bpt id=\"p1\">&lt;xref href=\"System.Windows.Media.Animation.EasingMode\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> mode of the custom easing function.","needQuote":true,"needEscape":true,"source":"Provides the logic portion of the easing function that you can override to produce the <xref href=\"System.Windows.Media.Animation.EasingMode\"></xref> mode of the custom easing function."},{"pos":[8991,9569],"content":"This method transforms normalized time to control the pace of an animation for the <xref:System.Windows.Media.Animation.EasingMode> case of <xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>.       You only have to specify your easing function for the <xref:System.Windows.Media.Animation.EasingMode> case because the implementation of the <xref:System.Windows.Media.Animation.EasingFunctionBase.Ease%2A> method transforms `normalizedTime` for the <xref:System.Windows.Media.Animation.EasingMode> and <xref:System.Windows.Media.Animation.EasingMode> cases.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method transforms normalized time to control the pace of an animation for the &lt;xref:System.Windows.Media.Animation.EasingMode&gt; case of &lt;xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A&gt;.","pos":[0,211],"source":"This method transforms normalized time to control the pace of an animation for the <xref:System.Windows.Media.Animation.EasingMode> case of <xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>."},{"content":"You only have to specify your easing function for the &lt;xref:System.Windows.Media.Animation.EasingMode&gt; case because the implementation of the &lt;xref:System.Windows.Media.Animation.EasingFunctionBase.Ease%2A&gt; method transforms <ph id=\"ph1\">`normalizedTime`</ph> for the &lt;xref:System.Windows.Media.Animation.EasingMode&gt; and &lt;xref:System.Windows.Media.Animation.EasingMode&gt; cases.","pos":[218,576],"source":"       You only have to specify your easing function for the <xref:System.Windows.Media.Animation.EasingMode> case because the implementation of the <xref:System.Windows.Media.Animation.EasingFunctionBase.Ease%2A> method transforms `normalizedTime` for the <xref:System.Windows.Media.Animation.EasingMode> and <xref:System.Windows.Media.Animation.EasingMode> cases."}]},{"pos":[9742,9786],"content":"Normalized time (progress) of the animation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Normalized time (progress) of the animation.","pos":[0,44]}]},{"pos":[9844,9894],"content":"A double that represents the transformed progress.","needQuote":true,"needEscape":true,"nodes":[{"content":"A double that represents the transformed progress.","pos":[0,50]}]},{"pos":[10394,10473],"content":"Gets or sets the exponent used to determine the interpolation of the animation.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the exponent used to determine the interpolation of the animation.","pos":[0,79]}]},{"pos":[10486,11269],"content":"[!INCLUDE[DP_ID_field_label](~/add/includes/dp-id-field-label-md.md)] <xref:System.Windows.Media.Animation.ExponentialEase.ExponentProperty>       The formula used by <xref:System.Windows.Media.Animation.ExponentialEase> is the following.       ![Mathematical formula for ExponentialEase](~/add/media/exponentialease-formula.png \"Mathematical formula for ExponentialEase\")       Using the previous formula, the following graph illustrates the effect of several different values for the Exponent property:       ![Exponential Ease for three Exponent values](~/add/media/expo-easeproperty.png \"Exponential Ease for three Exponent values\")      <a name=\"xamlAttributeUsage_Exponent\"></a>    ## XAML Attribute Usage      ```   <object Exponent=\"double\" .../>   ```","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"<ph id=\"ph1\">[!INCLUDE[DP_ID_field_label](~/add/includes/dp-id-field-label-md.md)]</ph> &lt;xref:System.Windows.Media.Animation.ExponentialEase.ExponentProperty&gt;       The formula used by &lt;xref:System.Windows.Media.Animation.ExponentialEase&gt; is the following.","pos":[0,238],"source":"[!INCLUDE[DP_ID_field_label](~/add/includes/dp-id-field-label-md.md)] <xref:System.Windows.Media.Animation.ExponentialEase.ExponentProperty>       The formula used by <xref:System.Windows.Media.Animation.ExponentialEase> is the following."},{"content":"<bpt id=\"p1\">![</bpt>Mathematical formula for ExponentialEase<ept id=\"p1\">]</ept><bpt id=\"p2\">(~/add/media/exponentialease-formula.png \"</bpt>Mathematical formula for ExponentialEase<ept id=\"p2\">\")</ept>       Using the previous formula, the following graph illustrates the effect of several different values for the Exponent property:       <bpt id=\"p3\">![</bpt>Exponential Ease for three Exponent values<ept id=\"p3\">]</ept><bpt id=\"p4\">(~/add/media/expo-easeproperty.png \"</bpt>Exponential Ease for three Exponent values<ept id=\"p4\">\")</ept>      <bpt id=\"p5\">&lt;a name=\"xamlAttributeUsage_Exponent\"&gt;</bpt><ept id=\"p5\">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id=\"ph1\">```   &lt;object Exponent=\"double\" .../&gt;   ```</ph>","pos":[245,760],"source":"![Mathematical formula for ExponentialEase](~/add/media/exponentialease-formula.png \"Mathematical formula for ExponentialEase\")       Using the previous formula, the following graph illustrates the effect of several different values for the Exponent property:       ![Exponential Ease for three Exponent values](~/add/media/expo-easeproperty.png \"Exponential Ease for three Exponent values\")      <a name=\"xamlAttributeUsage_Exponent\"></a>    ## XAML Attribute Usage      ```   <object Exponent=\"double\" .../>   ```"}]},{"pos":[11388,11472],"content":"The exponent used to determine the interpolation of the animation. The default is 2.","needQuote":true,"needEscape":true,"nodes":[{"content":"The exponent used to determine the interpolation of the animation. The default is 2.","pos":[0,84],"nodes":[{"content":"The exponent used to determine the interpolation of the animation.","pos":[0,66]},{"content":"The default is 2.","pos":[67,84]}]}]},{"pos":[12007,12106],"content":"Identifies the <xref:System.Windows.Media.Animation.ExponentialEase.Exponent*> dependency property.","needQuote":true,"needEscape":true,"nodes":[{"content":"Identifies the &lt;xref:System.Windows.Media.Animation.ExponentialEase.Exponent*&gt; dependency property.","pos":[0,99],"source":"Identifies the <xref:System.Windows.Media.Animation.ExponentialEase.Exponent*> dependency property."}]},{"pos":[12282,12294],"content":"To be added.","needQuote":true,"needEscape":true,"nodes":[{"content":"To be added.","pos":[0,12]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Media.Animation.ExponentialEase\n  id: ExponentialEase\n  children:\n  - System.Windows.Media.Animation.ExponentialEase.#ctor\n  - System.Windows.Media.Animation.ExponentialEase.CreateInstanceCore\n  - System.Windows.Media.Animation.ExponentialEase.EaseInCore(System.Double)\n  - System.Windows.Media.Animation.ExponentialEase.Exponent\n  - System.Windows.Media.Animation.ExponentialEase.ExponentProperty\n  langs:\n  - csharp\n  name: ExponentialEase\n  nameWithType: ExponentialEase\n  fullName: System.Windows.Media.Animation.ExponentialEase\n  type: Class\n  summary: Represents an easing function that creates an animation that accelerates and/or decelerates using an exponential formula.\n  remarks: \"You can control whether the animation accelerates, decelerates or both by specifying the <xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>. The following graph demonstrates the different values of <xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A> where *f*(*t*) represents the animation progress and *t* represents time.  \\n  \\n ![ExponentialEase graphs of different easingmodes.](~/add/media/exponentialease-graph.png \\\"ExponentialEase graphs of different easingmodes.\\\")  \\n  \\n The formula used for this function is the following.  \\n  \\n ![Mathematical formula for ExponentialEase](~/add/media/exponentialease-formula.png \\\"Mathematical formula for ExponentialEase\\\")  \\n  \\n Using the formula above, the following graph illustrates the effect of several different values for the <xref:System.Windows.Media.Animation.ExponentialEase.Exponent%2A> property:  \\n  \\n ![Exponential Ease for three Exponent values](~/add/media/expo-easeproperty.png \\\"Exponential Ease for three Exponent values\\\")  \\n  \\n There are several other easing functions besides ExponentialEase which you can explore using the following Silverlight sample.  \\n  \\n [Run this sample](http://go.microsoft.com/fwlink/?LinkId=139798&sref=easing_functions_gallery)  \\n  \\n In addition to using the easing functions included in the run-time, you can create your own custom easing functions by inheriting from <xref:System.Windows.Media.Animation.EasingFunctionBase>.  \\n  \\n<a name=\\\"xamlObjectElementUsage_ExponentialEase\\\"></a>   \\n## XAML Object Element Usage  \\n  \\n```  \\n<ExponentialEase .../>  \\n```\"\n  example:\n  - \"The following example applies a ExponentialEase easing function to a <xref:System.Windows.Media.Animation.DoubleAnimation> to create a decelerating animation.  \\n  \\n [!code-xml[ExponentialEase#ExponentialEase](~/add/codesnippet/xaml/exponentialease/window1.xaml#exponentialease)]\\n [!code-xml[ExponentialEase#ExponentialEase](~/add/codesnippet/xaml/t-system.windows.media.a_12_1.xaml)]\"\n  syntax:\n    content: 'public class ExponentialEase : System.Windows.Media.Animation.EasingFunctionBase'\n  inheritance:\n  - System.Object\n  - System.Windows.Threading.DispatcherObject\n  - System.Windows.DependencyObject\n  - System.Windows.Freezable\n  - System.Windows.Media.Animation.EasingFunctionBase\n  implements: []\n  inheritedMembers:\n  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)\n  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)\n  - System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)\n  - System.Windows.DependencyObject.DependencyObjectType\n  - System.Windows.DependencyObject.Equals(System.Object)\n  - System.Windows.DependencyObject.GetHashCode\n  - System.Windows.DependencyObject.GetLocalValueEnumerator\n  - System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)\n  - System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)\n  - System.Windows.DependencyObject.IsSealed\n  - System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)\n  - System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)\n  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)\n  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)\n  - System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)\n  - System.Windows.Freezable.CanFreeze\n  - System.Windows.Freezable.Changed\n  - System.Windows.Freezable.Clone\n  - System.Windows.Freezable.CloneCore(System.Windows.Freezable)\n  - System.Windows.Freezable.CloneCurrentValue\n  - System.Windows.Freezable.CloneCurrentValueCore(System.Windows.Freezable)\n  - System.Windows.Freezable.CreateInstance\n  - System.Windows.Freezable.Freeze\n  - System.Windows.Freezable.Freeze(System.Windows.Freezable,System.Boolean)\n  - System.Windows.Freezable.FreezeCore(System.Boolean)\n  - System.Windows.Freezable.GetAsFrozen\n  - System.Windows.Freezable.GetAsFrozenCore(System.Windows.Freezable)\n  - System.Windows.Freezable.GetCurrentValueAsFrozen\n  - System.Windows.Freezable.GetCurrentValueAsFrozenCore(System.Windows.Freezable)\n  - System.Windows.Freezable.IsFrozen\n  - System.Windows.Freezable.OnChanged\n  - System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)\n  - System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject,System.Windows.DependencyProperty)\n  - System.Windows.Freezable.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  - System.Windows.Freezable.ReadPreamble\n  - System.Windows.Freezable.WritePostscript\n  - System.Windows.Freezable.WritePreamble\n  - System.Windows.Media.Animation.EasingFunctionBase.Ease(System.Double)\n  - System.Windows.Media.Animation.EasingFunctionBase.EasingMode\n  - System.Windows.Media.Animation.EasingFunctionBase.EasingModeProperty\n  - System.Windows.Threading.DispatcherObject.CheckAccess\n  - System.Windows.Threading.DispatcherObject.Dispatcher\n  - System.Windows.Threading.DispatcherObject.VerifyAccess\n  platform:\n  - net462\n- uid: System.Windows.Media.Animation.ExponentialEase.#ctor\n  id: '#ctor'\n  parent: System.Windows.Media.Animation.ExponentialEase\n  langs:\n  - csharp\n  name: ExponentialEase()\n  nameWithType: ExponentialEase.ExponentialEase()\n  fullName: System.Windows.Media.Animation.ExponentialEase.ExponentialEase()\n  type: Constructor\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media.Animation\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Media.Animation.ExponentialEase\"></xref> class.\n  syntax:\n    content: public ExponentialEase ();\n    parameters: []\n  overload: System.Windows.Media.Animation.ExponentialEase.#ctor*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Media.Animation.ExponentialEase.CreateInstanceCore\n  id: CreateInstanceCore\n  parent: System.Windows.Media.Animation.ExponentialEase\n  langs:\n  - csharp\n  name: CreateInstanceCore()\n  nameWithType: ExponentialEase.CreateInstanceCore()\n  fullName: System.Windows.Media.Animation.ExponentialEase.CreateInstanceCore()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media.Animation\n  summary: Creates a new instance of the <xref href=\"System.Windows.Freezable\"></xref> derived class. When creating a derived class, you must override this method.\n  remarks: Animation classes inherit indirectly from <xref:System.Windows.Freezable>. Because of this, you need to override the <xref:System.Windows.Media.Animation.BackEase.CreateInstanceCore%2A> method to construct a custom animation object.\n  example:\n  - \"The following example shows a typical implementation of <xref:System.Windows.Freezable.CreateInstanceCore%2A>.  \\n  \\n [!code-vb[freezablesample_procedural#CreateInstanceCoreExample](~/add/codesnippet/visualbasic/freezablesample_visualbasic/freezablesample.vb#createinstancecoreexample)]\\n [!code-cs[freezablesample_procedural#CreateInstanceCoreExample](~/add/codesnippet/csharp/freezablesample_csharp/freezablesample.cs#createinstancecoreexample)]\"\n  syntax:\n    content: protected override System.Windows.Freezable CreateInstanceCore ();\n    parameters: []\n    return:\n      type: System.Windows.Freezable\n      description: The new instance.\n  overload: System.Windows.Media.Animation.ExponentialEase.CreateInstanceCore*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Media.Animation.ExponentialEase.EaseInCore(System.Double)\n  id: EaseInCore(System.Double)\n  parent: System.Windows.Media.Animation.ExponentialEase\n  langs:\n  - csharp\n  name: EaseInCore(Double)\n  nameWithType: ExponentialEase.EaseInCore(Double)\n  fullName: System.Windows.Media.Animation.ExponentialEase.EaseInCore(Double)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media.Animation\n  summary: Provides the logic portion of the easing function that you can override to produce the <xref href=\"System.Windows.Media.Animation.EasingMode\"></xref> mode of the custom easing function.\n  remarks: \"This method transforms normalized time to control the pace of an animation for the <xref:System.Windows.Media.Animation.EasingMode> case of <xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>.  \\n  \\n You only have to specify your easing function for the <xref:System.Windows.Media.Animation.EasingMode> case because the implementation of the <xref:System.Windows.Media.Animation.EasingFunctionBase.Ease%2A> method transforms `normalizedTime` for the <xref:System.Windows.Media.Animation.EasingMode> and <xref:System.Windows.Media.Animation.EasingMode> cases.\"\n  syntax:\n    content: protected override double EaseInCore (double normalizedTime);\n    parameters:\n    - id: normalizedTime\n      type: System.Double\n      description: Normalized time (progress) of the animation.\n    return:\n      type: System.Double\n      description: A double that represents the transformed progress.\n  overload: System.Windows.Media.Animation.ExponentialEase.EaseInCore*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Media.Animation.ExponentialEase.Exponent\n  id: Exponent\n  parent: System.Windows.Media.Animation.ExponentialEase\n  langs:\n  - csharp\n  name: Exponent\n  nameWithType: ExponentialEase.Exponent\n  fullName: System.Windows.Media.Animation.ExponentialEase.Exponent\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media.Animation\n  summary: Gets or sets the exponent used to determine the interpolation of the animation.\n  remarks: \"[!INCLUDE[DP_ID_field_label](~/add/includes/dp-id-field-label-md.md)] <xref:System.Windows.Media.Animation.ExponentialEase.ExponentProperty>  \\n  \\n The formula used by <xref:System.Windows.Media.Animation.ExponentialEase> is the following.  \\n  \\n ![Mathematical formula for ExponentialEase](~/add/media/exponentialease-formula.png \\\"Mathematical formula for ExponentialEase\\\")  \\n  \\n Using the previous formula, the following graph illustrates the effect of several different values for the Exponent property:  \\n  \\n ![Exponential Ease for three Exponent values](~/add/media/expo-easeproperty.png \\\"Exponential Ease for three Exponent values\\\")  \\n  \\n<a name=\\\"xamlAttributeUsage_Exponent\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object Exponent=\\\"double\\\" .../>  \\n```\"\n  syntax:\n    content: public double Exponent { get; set; }\n    return:\n      type: System.Double\n      description: The exponent used to determine the interpolation of the animation. The default is 2.\n  overload: System.Windows.Media.Animation.ExponentialEase.Exponent*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Windows.Media.Animation.ExponentialEase.ExponentProperty\n  id: ExponentProperty\n  parent: System.Windows.Media.Animation.ExponentialEase\n  langs:\n  - csharp\n  name: ExponentProperty\n  nameWithType: ExponentialEase.ExponentProperty\n  fullName: System.Windows.Media.Animation.ExponentialEase.ExponentProperty\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media.Animation\n  summary: Identifies the <xref:System.Windows.Media.Animation.ExponentialEase.Exponent*> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty ExponentProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: To be added.\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Windows.Media.Animation.EasingFunctionBase\n  isExternal: false\n  name: System.Windows.Media.Animation.EasingFunctionBase\n- uid: System.Windows.Media.Animation.ExponentialEase.#ctor\n  parent: System.Windows.Media.Animation.ExponentialEase\n  isExternal: false\n  name: ExponentialEase()\n  nameWithType: ExponentialEase.ExponentialEase()\n  fullName: System.Windows.Media.Animation.ExponentialEase.ExponentialEase()\n- uid: System.Windows.Media.Animation.ExponentialEase.CreateInstanceCore\n  parent: System.Windows.Media.Animation.ExponentialEase\n  isExternal: false\n  name: CreateInstanceCore()\n  nameWithType: ExponentialEase.CreateInstanceCore()\n  fullName: System.Windows.Media.Animation.ExponentialEase.CreateInstanceCore()\n- uid: System.Windows.Freezable\n  parent: System.Windows\n  isExternal: false\n  name: Freezable\n  nameWithType: Freezable\n  fullName: System.Windows.Freezable\n- uid: System.Windows.Media.Animation.ExponentialEase.EaseInCore(System.Double)\n  parent: System.Windows.Media.Animation.ExponentialEase\n  isExternal: false\n  name: EaseInCore(Double)\n  nameWithType: ExponentialEase.EaseInCore(Double)\n  fullName: System.Windows.Media.Animation.ExponentialEase.EaseInCore(Double)\n- uid: System.Double\n  parent: System\n  isExternal: true\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: System.Windows.Media.Animation.ExponentialEase.Exponent\n  parent: System.Windows.Media.Animation.ExponentialEase\n  isExternal: false\n  name: Exponent\n  nameWithType: ExponentialEase.Exponent\n  fullName: System.Windows.Media.Animation.ExponentialEase.Exponent\n- uid: System.Windows.Media.Animation.ExponentialEase.ExponentProperty\n  parent: System.Windows.Media.Animation.ExponentialEase\n  isExternal: false\n  name: ExponentProperty\n  nameWithType: ExponentialEase.ExponentProperty\n  fullName: System.Windows.Media.Animation.ExponentialEase.ExponentProperty\n- uid: System.Windows.DependencyProperty\n  parent: System.Windows\n  isExternal: false\n  name: DependencyProperty\n  nameWithType: DependencyProperty\n  fullName: System.Windows.DependencyProperty\n- uid: System.Windows.Media.Animation.ExponentialEase.#ctor*\n  parent: System.Windows.Media.Animation.ExponentialEase\n  isExternal: false\n  name: ExponentialEase\n  nameWithType: ExponentialEase.ExponentialEase\n- uid: System.Windows.Media.Animation.ExponentialEase.CreateInstanceCore*\n  parent: System.Windows.Media.Animation.ExponentialEase\n  isExternal: false\n  name: CreateInstanceCore\n  nameWithType: ExponentialEase.CreateInstanceCore\n- uid: System.Windows.Media.Animation.ExponentialEase.EaseInCore*\n  parent: System.Windows.Media.Animation.ExponentialEase\n  isExternal: false\n  name: EaseInCore\n  nameWithType: ExponentialEase.EaseInCore\n- uid: System.Windows.Media.Animation.ExponentialEase.Exponent*\n  parent: System.Windows.Media.Animation.ExponentialEase\n  isExternal: false\n  name: Exponent\n  nameWithType: ExponentialEase.Exponent\n"}