{"nodes":[{"pos":[3106,3161],"content":"Provides User Datagram Protocol (UDP) network services.","needQuote":true,"needEscape":true,"nodes":[{"content":"Provides User Datagram Protocol (UDP) network services.","pos":[0,55]}]},{"pos":[5905,5995],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Net.Sockets.UdpClient\"></xref> class."},{"pos":[6008,6903],"content":"This constructor creates a new <xref:System.Net.Sockets.UdpClient> and allows the underlying service provider to assign the most appropriate local IPv4 address and port number. If this constructor is used, the <xref:System.Net.Sockets.UdpClient> instance is set with an address family of IPv4 that cannot be changed or overwritten by a connect method call with an IPv6 target.      > [!NOTE] >  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.       This constructor is not suitable for joining a multicast group because it does not perform socket binding. Also, it works only with IPv4 address types.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This constructor creates a new &lt;xref:System.Net.Sockets.UdpClient&gt; and allows the underlying service provider to assign the most appropriate local IPv4 address and port number.","pos":[0,176],"source":"This constructor creates a new <xref:System.Net.Sockets.UdpClient> and allows the underlying service provider to assign the most appropriate local IPv4 address and port number."},{"content":"If this constructor is used, the &lt;xref:System.Net.Sockets.UdpClient&gt; instance is set with an address family of IPv4 that cannot be changed or overwritten by a connect method call with an IPv6 target.","pos":[177,376],"source":" If this constructor is used, the <xref:System.Net.Sockets.UdpClient> instance is set with an address family of IPv4 that cannot be changed or overwritten by a connect method call with an IPv6 target."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If you receive a &lt;xref:System.Net.Sockets.SocketException&gt;, use &lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt; to obtain the specific error code.","pos":[382,573],"source":"      > [!NOTE] >  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code."},{"content":"Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[574,732]},{"content":"This constructor is not suitable for joining a multicast group because it does not perform socket binding.","pos":[739,845]},{"content":"Also, it works only with IPv4 address types.","pos":[846,890]}]},{"pos":[7694,7784],"content":"An error occurred when accessing the socket. See the Remarks section for more information.","needQuote":true,"needEscape":true,"nodes":[{"content":"An error occurred when accessing the socket. See the Remarks section for more information.","pos":[0,90],"nodes":[{"content":"An error occurred when accessing the socket.","pos":[0,44]},{"content":"See the Remarks section for more information.","pos":[45,90]}]}]},{"pos":[8165,8302],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class and binds it to the local port number provided.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Net.Sockets.UdpClient\"></xref> class and binds it to the local port number provided."},{"pos":[8315,9317],"content":"This constructor creates an underlying <xref:System.Net.Sockets.Socket> and binds it to the port number from which you intend to communicate. Use this constructor if you are only interested in setting the local port number. The underlying service provider will assign the local IP address. If you pass 0 to the constructor, the underlying service provider will assign a port number. If this constructor is used, the <xref:System.Net.Sockets.UdpClient> instance is set with an address family of IPv4 that cannot be changed or overwritten by a connect method call with an IPv6 target.      > [!NOTE] >  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.       This constructor works only with IPv4 address types.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This constructor creates an underlying &lt;xref:System.Net.Sockets.Socket&gt; and binds it to the port number from which you intend to communicate.","pos":[0,141],"source":"This constructor creates an underlying <xref:System.Net.Sockets.Socket> and binds it to the port number from which you intend to communicate."},{"content":"Use this constructor if you are only interested in setting the local port number.","pos":[142,223]},{"content":"The underlying service provider will assign the local IP address.","pos":[224,289]},{"content":"If you pass 0 to the constructor, the underlying service provider will assign a port number.","pos":[290,382]},{"content":"If this constructor is used, the &lt;xref:System.Net.Sockets.UdpClient&gt; instance is set with an address family of IPv4 that cannot be changed or overwritten by a connect method call with an IPv6 target.","pos":[383,582],"source":" If this constructor is used, the <xref:System.Net.Sockets.UdpClient> instance is set with an address family of IPv4 that cannot be changed or overwritten by a connect method call with an IPv6 target."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If you receive a &lt;xref:System.Net.Sockets.SocketException&gt;, use &lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt; to obtain the specific error code.","pos":[588,779],"source":"      > [!NOTE] >  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code."},{"content":"Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[780,938]},{"content":"This constructor works only with IPv4 address types.","pos":[945,997]}]},{"pos":[9984,10043],"content":"The local port number from which you intend to communicate.","needQuote":true,"needEscape":true,"nodes":[{"content":"The local port number from which you intend to communicate.","pos":[0,59]}]},{"pos":[10220,10355],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">port</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is greater than &lt;xref:System.Net.IPEndPoint.MaxPort&gt; or less than &lt;xref:System.Net.IPEndPoint.MinPort&gt;.","needQuote":true,"needEscape":true,"source":"The <code>port</code> parameter is greater than <xref:System.Net.IPEndPoint.MaxPort> or less than <xref:System.Net.IPEndPoint.MinPort>."},{"pos":[10470,10560],"content":"An error occurred when accessing the socket. See the Remarks section for more information.","needQuote":true,"needEscape":true,"nodes":[{"content":"An error occurred when accessing the socket. See the Remarks section for more information.","pos":[0,90],"nodes":[{"content":"An error occurred when accessing the socket.","pos":[0,44]},{"content":"See the Remarks section for more information.","pos":[45,90]}]}]},{"pos":[10974,11109],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class and binds it to the specified local endpoint.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Net.Sockets.UdpClient\"></xref> class and binds it to the specified local endpoint."},{"pos":[11122,12260],"content":"This constructor creates a new <xref:System.Net.Sockets.UdpClient> and binds it to the <xref:System.Net.IPEndPoint> specified by the `localEP` parameter. Before you call this constructor, you must create an <xref:System.Net.IPEndPoint> using the IP address and port number from which you intend to send and receive data. You do not need to specify a local IP address and port number for sending and receiving data. If you do not, the underlying service provider will assign the most appropriate local IP address and port number.       If this constructor is used, the <xref:System.Net.Sockets.UdpClient> instance is set with the address family specified by the `localEP` parameter  that cannot be changed or overwritten by a connect method call with a different address family.      > [!NOTE] >  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This constructor creates a new &lt;xref:System.Net.Sockets.UdpClient&gt; and binds it to the &lt;xref:System.Net.IPEndPoint&gt; specified by the <ph id=\"ph1\">`localEP`</ph> parameter.","pos":[0,153],"source":"This constructor creates a new <xref:System.Net.Sockets.UdpClient> and binds it to the <xref:System.Net.IPEndPoint> specified by the `localEP` parameter."},{"content":"Before you call this constructor, you must create an &lt;xref:System.Net.IPEndPoint&gt; using the IP address and port number from which you intend to send and receive data.","pos":[154,320],"source":" Before you call this constructor, you must create an <xref:System.Net.IPEndPoint> using the IP address and port number from which you intend to send and receive data."},{"content":"You do not need to specify a local IP address and port number for sending and receiving data.","pos":[321,414]},{"content":"If you do not, the underlying service provider will assign the most appropriate local IP address and port number.","pos":[415,528]},{"content":"If this constructor is used, the &lt;xref:System.Net.Sockets.UdpClient&gt; instance is set with the address family specified by the <ph id=\"ph1\">`localEP`</ph> parameter  that cannot be changed or overwritten by a connect method call with a different address family.","pos":[535,777],"source":"       If this constructor is used, the <xref:System.Net.Sockets.UdpClient> instance is set with the address family specified by the `localEP` parameter  that cannot be changed or overwritten by a connect method call with a different address family."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If you receive a &lt;xref:System.Net.Sockets.SocketException&gt;, use &lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt; to obtain the specific error code.","pos":[783,974],"source":"      > [!NOTE] >  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code."},{"content":"Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[975,1133]}]},{"pos":[12961,13066],"content":"An <xref:System.Net.IPEndPoint> that respresents the local endpoint to which you bind the UDP connection.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Net.IPEndPoint&gt; that respresents the local endpoint to which you bind the UDP connection.","pos":[0,105],"source":"An <xref:System.Net.IPEndPoint> that respresents the local endpoint to which you bind the UDP connection."}]},{"pos":[13231,13316],"content":"<ph id=\"ph1\">&lt;code&gt;localEP&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>localEP</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[13431,13521],"content":"An error occurred when accessing the socket. See the Remarks section for more information.","needQuote":true,"needEscape":true,"nodes":[{"content":"An error occurred when accessing the socket. See the Remarks section for more information.","pos":[0,90],"nodes":[{"content":"An error occurred when accessing the socket.","pos":[0,44]},{"content":"See the Remarks section for more information.","pos":[45,90]}]}]},{"pos":[13966,14056],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Net.Sockets.UdpClient\"></xref> class."},{"pos":[14069,15166],"content":"The `family` parameter determines whether the listener uses an IP version 4 address (IPv4) or an IP version 6 (IPv6) address. To use an IPv4 address, pass the <xref:System.Net.Sockets.AddressFamily> value. To use an IPv6 address, pass the <xref:System.Net.Sockets.AddressFamily> value. Passing any other value will cause the method to throw an <xref:System.ArgumentException>.       If this constructor is used, the <xref:System.Net.Sockets.UdpClient> instance is set with the address family specified by the `family` parameter  that cannot be changed or overwritten by a connect method call with a different address family.      > [!NOTE] >  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.       The UdpClient is not suitable for joining a multicast group because it does not perform socket binding.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The <ph id=\"ph1\">`family`</ph> parameter determines whether the listener uses an IP version 4 address (IPv4) or an IP version 6 (IPv6) address.","pos":[0,125],"source":"The `family` parameter determines whether the listener uses an IP version 4 address (IPv4) or an IP version 6 (IPv6) address."},{"content":"To use an IPv4 address, pass the &lt;xref:System.Net.Sockets.AddressFamily&gt; value.","pos":[126,205],"source":" To use an IPv4 address, pass the <xref:System.Net.Sockets.AddressFamily> value."},{"content":"To use an IPv6 address, pass the &lt;xref:System.Net.Sockets.AddressFamily&gt; value.","pos":[206,285],"source":" To use an IPv6 address, pass the <xref:System.Net.Sockets.AddressFamily> value."},{"content":"Passing any other value will cause the method to throw an &lt;xref:System.ArgumentException&gt;.","pos":[286,376],"source":" Passing any other value will cause the method to throw an <xref:System.ArgumentException>."},{"content":"If this constructor is used, the &lt;xref:System.Net.Sockets.UdpClient&gt; instance is set with the address family specified by the <ph id=\"ph1\">`family`</ph> parameter  that cannot be changed or overwritten by a connect method call with a different address family.","pos":[383,624],"source":"       If this constructor is used, the <xref:System.Net.Sockets.UdpClient> instance is set with the address family specified by the `family` parameter  that cannot be changed or overwritten by a connect method call with a different address family."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If you receive a &lt;xref:System.Net.Sockets.SocketException&gt;, use &lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt; to obtain the specific error code.","pos":[630,821],"source":"      > [!NOTE] >  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code."},{"content":"Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[822,980]},{"content":"The UdpClient is not suitable for joining a multicast group because it does not perform socket binding.","pos":[987,1090]}]},{"pos":[15348,15457],"content":"One of the <xref:System.Net.Sockets.AddressFamily> values that specifies the addressing scheme of the socket.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the &lt;xref:System.Net.Sockets.AddressFamily&gt; values that specifies the addressing scheme of the socket.","pos":[0,109],"source":"One of the <xref:System.Net.Sockets.AddressFamily> values that specifies the addressing scheme of the socket."}]},{"pos":[15614,15724],"content":"<ph id=\"ph1\">&lt;code&gt;family&lt;/code&gt;</ph> is not <ph id=\"ph2\">&lt;xref:System.Net.Sockets.AddressFamily&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Net.Sockets.AddressFamily&gt;</ph>.","needQuote":true,"needEscape":true,"source":"<code>family</code> is not <xref:System.Net.Sockets.AddressFamily> or <xref:System.Net.Sockets.AddressFamily>."},{"pos":[15839,15929],"content":"An error occurred when accessing the socket. See the Remarks section for more information.","needQuote":true,"needEscape":true,"nodes":[{"content":"An error occurred when accessing the socket. See the Remarks section for more information.","pos":[0,90],"nodes":[{"content":"An error occurred when accessing the socket.","pos":[0,44]},{"content":"See the Remarks section for more information.","pos":[45,90]}]}]},{"pos":[16418,16555],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class and binds it to the local port number provided.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Net.Sockets.UdpClient\"></xref> class and binds it to the local port number provided."},{"pos":[16568,17695],"content":"This constructor creates an underlying <xref:System.Net.Sockets.Socket> and binds it to the port number from which you intend to communicate.       The `family` parameter determines whether the listener uses an IP version 4 address (IPv4) or an IP version 6 (IPv6) address. To use an IPv4 address, pass the <xref:System.Net.Sockets.AddressFamily> value. To use an IPv6 address, pass the <xref:System.Net.Sockets.AddressFamily> value. Passing any other value will cause the method to throw an <xref:System.ArgumentException>.       If this constructor is used, the <xref:System.Net.Sockets.UdpClient> instance is set with the address family specified by the `family` parameter  that cannot be changed or overwritten by a connect method call with a different address family.      > [!NOTE] >  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This constructor creates an underlying &lt;xref:System.Net.Sockets.Socket&gt; and binds it to the port number from which you intend to communicate.","pos":[0,141],"source":"This constructor creates an underlying <xref:System.Net.Sockets.Socket> and binds it to the port number from which you intend to communicate."},{"content":"The <ph id=\"ph1\">`family`</ph> parameter determines whether the listener uses an IP version 4 address (IPv4) or an IP version 6 (IPv6) address.","pos":[148,273],"source":"       The `family` parameter determines whether the listener uses an IP version 4 address (IPv4) or an IP version 6 (IPv6) address."},{"content":"To use an IPv4 address, pass the &lt;xref:System.Net.Sockets.AddressFamily&gt; value.","pos":[274,353],"source":" To use an IPv4 address, pass the <xref:System.Net.Sockets.AddressFamily> value."},{"content":"To use an IPv6 address, pass the &lt;xref:System.Net.Sockets.AddressFamily&gt; value.","pos":[354,433],"source":" To use an IPv6 address, pass the <xref:System.Net.Sockets.AddressFamily> value."},{"content":"Passing any other value will cause the method to throw an &lt;xref:System.ArgumentException&gt;.","pos":[434,524],"source":" Passing any other value will cause the method to throw an <xref:System.ArgumentException>."},{"content":"If this constructor is used, the &lt;xref:System.Net.Sockets.UdpClient&gt; instance is set with the address family specified by the <ph id=\"ph1\">`family`</ph> parameter  that cannot be changed or overwritten by a connect method call with a different address family.","pos":[531,772],"source":"       If this constructor is used, the <xref:System.Net.Sockets.UdpClient> instance is set with the address family specified by the `family` parameter  that cannot be changed or overwritten by a connect method call with a different address family."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If you receive a &lt;xref:System.Net.Sockets.SocketException&gt;, use &lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt; to obtain the specific error code.","pos":[778,969],"source":"      > [!NOTE] >  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code."},{"content":"Once you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[970,1120]}]},{"pos":[18341,18402],"content":"The port on which to listen for incoming connection attempts.","needQuote":true,"needEscape":true,"nodes":[{"content":"The port on which to listen for incoming connection attempts.","pos":[0,61]}]},{"pos":[18484,18593],"content":"One of the <xref:System.Net.Sockets.AddressFamily> values that specifies the addressing scheme of the socket.","needQuote":true,"needEscape":true,"nodes":[{"content":"One of the &lt;xref:System.Net.Sockets.AddressFamily&gt; values that specifies the addressing scheme of the socket.","pos":[0,109],"source":"One of the <xref:System.Net.Sockets.AddressFamily> values that specifies the addressing scheme of the socket."}]},{"pos":[18750,18860],"content":"<ph id=\"ph1\">&lt;code&gt;family&lt;/code&gt;</ph> is not <ph id=\"ph2\">&lt;xref:System.Net.Sockets.AddressFamily&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Net.Sockets.AddressFamily&gt;</ph>.","needQuote":true,"needEscape":true,"source":"<code>family</code> is not <xref:System.Net.Sockets.AddressFamily> or <xref:System.Net.Sockets.AddressFamily>."},{"pos":[18975,19096],"content":"<ph id=\"ph1\">&lt;code&gt;port&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;xref:System.Net.IPEndPoint.MaxPort&gt;</ph> or less than <ph id=\"ph3\">&lt;xref:System.Net.IPEndPoint.MinPort&gt;</ph>.","needQuote":true,"needEscape":true,"source":"<code>port</code> is greater than <xref:System.Net.IPEndPoint.MaxPort> or less than <xref:System.Net.IPEndPoint.MinPort>."},{"pos":[19211,19301],"content":"An error occurred when accessing the socket. See the Remarks section for more information.","needQuote":true,"needEscape":true,"nodes":[{"content":"An error occurred when accessing the socket. See the Remarks section for more information.","pos":[0,90],"nodes":[{"content":"An error occurred when accessing the socket.","pos":[0,44]},{"content":"See the Remarks section for more information.","pos":[45,90]}]}]},{"pos":[19731,19859],"content":"Initializes a new instance of the <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> class and establishes a default remote host.","needQuote":true,"needEscape":true,"source":"Initializes a new instance of the <xref href=\"System.Net.Sockets.UdpClient\"></xref> class and establishes a default remote host."},{"pos":[19872,20887],"content":"This constructor initializes a new <xref:System.Net.Sockets.UdpClient> and establishes a remote host using the `hostname` and `port` parameters. Establishing a default remote host is optional. If you use this constructor, you do not have to specify a remote host in each call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method. Specifying a default remote host limits you to that host only. You can change the default remote host at any time by calling the <xref:System.Net.Sockets.UdpClient.Connect%2A> method. If you want to specify a remote host in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method, do not use this constructor.      > [!NOTE] >  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This constructor initializes a new &lt;xref:System.Net.Sockets.UdpClient&gt; and establishes a remote host using the <ph id=\"ph1\">`hostname`</ph> and <ph id=\"ph2\">`port`</ph> parameters.","pos":[0,144],"source":"This constructor initializes a new <xref:System.Net.Sockets.UdpClient> and establishes a remote host using the `hostname` and `port` parameters."},{"content":"Establishing a default remote host is optional.","pos":[145,192]},{"content":"If you use this constructor, you do not have to specify a remote host in each call to the &lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt; method.","pos":[193,334],"source":" If you use this constructor, you do not have to specify a remote host in each call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method."},{"content":"Specifying a default remote host limits you to that host only.","pos":[335,397]},{"content":"You can change the default remote host at any time by calling the &lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt; method.","pos":[398,518],"source":" You can change the default remote host at any time by calling the <xref:System.Net.Sockets.UdpClient.Connect%2A> method."},{"content":"If you want to specify a remote host in your call to the &lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt; method, do not use this constructor.","pos":[519,656],"source":" If you want to specify a remote host in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method, do not use this constructor."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If you receive a &lt;xref:System.Net.Sockets.SocketException&gt;, use &lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt; to obtain the specific error code.","pos":[662,853],"source":"      > [!NOTE] >  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code."},{"content":"Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[854,1012]}]},{"pos":[21588,21651],"content":"The name of the remote DNS host to which you intend to connect.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the remote DNS host to which you intend to connect.","pos":[0,63]}]},{"pos":[21711,21765],"content":"The remote port number to which you intend to connect.","needQuote":true,"needEscape":true,"nodes":[{"content":"The remote port number to which you intend to connect.","pos":[0,54]}]},{"pos":[21930,22016],"content":"<ph id=\"ph1\">&lt;code&gt;hostname&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>hostname</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[22131,22242],"content":"<ph id=\"ph1\">&lt;code&gt;port&lt;/code&gt;</ph> is not between <ph id=\"ph2\">&lt;xref:System.Net.IPEndPoint.MinPort&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Net.IPEndPoint.MaxPort&gt;</ph>.","needQuote":true,"needEscape":true,"source":"<code>port</code> is not between <xref:System.Net.IPEndPoint.MinPort> and <xref:System.Net.IPEndPoint.MaxPort>."},{"pos":[22357,22447],"content":"An error occurred when accessing the socket. See the Remarks section for more information.","needQuote":true,"needEscape":true,"nodes":[{"content":"An error occurred when accessing the socket. See the Remarks section for more information.","pos":[0,90],"nodes":[{"content":"An error occurred when accessing the socket.","pos":[0,44]},{"content":"See the Remarks section for more information.","pos":[45,90]}]}]},{"pos":[22767,22850],"content":"Gets or sets a value indicating whether a default remote host has been established.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a value indicating whether a default remote host has been established.","pos":[0,83]}]},{"pos":[22862,23288],"content":"Classes deriving from <xref:System.Net.Sockets.UdpClient> can use this property to determine if a default remote host has been established. You can establish a default remote host by using the appropriate constructor or by calling the <xref:System.Net.Sockets.UdpClient.Connect%2A> method. If you do establish a default remote host, you cannot specify a remote host in your call to <xref:System.Net.Sockets.UdpClient.Send%2A>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Classes deriving from <xref:System.Net.Sockets.UdpClient> can use this property to determine if a default remote host has been established. You can establish a default remote host by using the appropriate constructor or by calling the <xref:System.Net.Sockets.UdpClient.Connect%2A> method. If you do establish a default remote host, you cannot specify a remote host in your call to <xref:System.Net.Sockets.UdpClient.Send%2A>.","pos":[0,426],"nodes":[{"content":"Classes deriving from &lt;xref:System.Net.Sockets.UdpClient&gt; can use this property to determine if a default remote host has been established.","pos":[0,139],"source":"Classes deriving from <xref:System.Net.Sockets.UdpClient> can use this property to determine if a default remote host has been established."},{"content":"You can establish a default remote host by using the appropriate constructor or by calling the &lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt; method.","pos":[140,289],"source":" You can establish a default remote host by using the appropriate constructor or by calling the <xref:System.Net.Sockets.UdpClient.Connect%2A> method."},{"content":"If you do establish a default remote host, you cannot specify a remote host in your call to &lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt;.","pos":[290,426],"source":" If you do establish a default remote host, you cannot specify a remote host in your call to <xref:System.Net.Sockets.UdpClient.Send%2A>."}]}]},{"pos":[23406,23568],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if a connection is active; otherwise, <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if a connection is active; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[24066,24194],"content":"Enables or disables Network Address Translation (NAT) traversal on a <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> instance.","needQuote":true,"needEscape":true,"source":"Enables or disables Network Address Translation (NAT) traversal on a <xref href=\"System.Net.Sockets.UdpClient\"></xref> instance."},{"pos":[24207,25182],"content":"The AllowNatTraversal method is used to enable or disable NAT traversal for a <xref:System.Net.Sockets.UdpClient> instance. NAT traversal may be provided using Teredo, 6to4, or an ISATAP tunnel.       When the `allowed` parameter is false, the <xref:System.Net.Sockets.SocketOptionName> option on the associated socket is set to <xref:System.Net.Sockets.IPProtectionLevel>. This explicitly disables NAT traversal for a <xref:System.Net.Sockets.UdpClient> instance.       When the `allowed` parameter is true, the <xref:System.Net.Sockets.SocketOptionName> option on the associated socket is set to <xref:System.Net.Sockets.IPProtectionLevel>. This may allow NAT traversal for a <xref:System.Net.Sockets.UdpClient> depending on firewall rules in place on the system.       A Teredo address is an IPv6 address with the prefix of 2001::/32. Teredo addresses can be returned through normal DNS name resolution or enumerated as an IPv6 address assigned to a local interface.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The AllowNatTraversal method is used to enable or disable NAT traversal for a &lt;xref:System.Net.Sockets.UdpClient&gt; instance.","pos":[0,123],"source":"The AllowNatTraversal method is used to enable or disable NAT traversal for a <xref:System.Net.Sockets.UdpClient> instance."},{"content":"NAT traversal may be provided using Teredo, 6to4, or an ISATAP tunnel.","pos":[124,194]},{"content":"When the <ph id=\"ph1\">`allowed`</ph> parameter is false, the &lt;xref:System.Net.Sockets.SocketOptionName&gt; option on the associated socket is set to &lt;xref:System.Net.Sockets.IPProtectionLevel&gt;.","pos":[201,373],"source":"       When the `allowed` parameter is false, the <xref:System.Net.Sockets.SocketOptionName> option on the associated socket is set to <xref:System.Net.Sockets.IPProtectionLevel>."},{"content":"This explicitly disables NAT traversal for a &lt;xref:System.Net.Sockets.UdpClient&gt; instance.","pos":[374,464],"source":" This explicitly disables NAT traversal for a <xref:System.Net.Sockets.UdpClient> instance."},{"content":"When the <ph id=\"ph1\">`allowed`</ph> parameter is true, the &lt;xref:System.Net.Sockets.SocketOptionName&gt; option on the associated socket is set to &lt;xref:System.Net.Sockets.IPProtectionLevel&gt;.","pos":[471,642],"source":"       When the `allowed` parameter is true, the <xref:System.Net.Sockets.SocketOptionName> option on the associated socket is set to <xref:System.Net.Sockets.IPProtectionLevel>."},{"content":"This may allow NAT traversal for a &lt;xref:System.Net.Sockets.UdpClient&gt; depending on firewall rules in place on the system.","pos":[643,765],"source":" This may allow NAT traversal for a <xref:System.Net.Sockets.UdpClient> depending on firewall rules in place on the system."},{"content":"A Teredo address is an IPv6 address with the prefix of 2001::/32.","pos":[772,837]},{"content":"Teredo addresses can be returned through normal DNS name resolution or enumerated as an IPv6 address assigned to a local interface.","pos":[838,969]}]},{"pos":[25333,25407],"content":"A Boolean value that specifies whether to enable or disable NAT traversal.","needQuote":true,"needEscape":true,"nodes":[{"content":"A Boolean value that specifies whether to enable or disable NAT traversal.","pos":[0,74]}]},{"pos":[25819,25895],"content":"Gets the amount of data received from the network that is available to read.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets the amount of data received from the network that is available to read.","pos":[0,76]}]},{"pos":[25908,26709],"content":"The Available property is used to determine the amount of data queued in the network buffer for reading. If data is available, call <xref:System.Net.Sockets.NetworkStream.Read%2A> to get the data. If no data is available, the Available property returns 0.       If the remote host shuts down or closes the connection, the Available property throws a <xref:System.Net.Sockets.SocketException>.      > [!NOTE] >  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library)/ for a detailed description of the error.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Available property is used to determine the amount of data queued in the network buffer for reading.","pos":[0,104]},{"content":"If data is available, call &lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt; to get the data.","pos":[105,196],"source":" If data is available, call <xref:System.Net.Sockets.NetworkStream.Read%2A> to get the data."},{"content":"If no data is available, the Available property returns 0.","pos":[197,255]},{"content":"If the remote host shuts down or closes the connection, the Available property throws a &lt;xref:System.Net.Sockets.SocketException&gt;.","pos":[262,392],"source":"       If the remote host shuts down or closes the connection, the Available property throws a <xref:System.Net.Sockets.SocketException>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If you receive a &lt;xref:System.Net.Sockets.SocketException&gt;, use &lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt; to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at <bpt id=\"p1\">[</bpt>http://msdn.microsoft.com/library<ept id=\"p1\">](http://msdn.microsoft.com/library)</ept>/ for a detailed description of the error.","pos":[398,796],"source":"      > [!NOTE] >  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library)/ for a detailed description of the error."}]},{"pos":[27116,27170],"content":"The number of bytes of data received from the network.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes of data received from the network.","pos":[0,54]}]},{"pos":[27351,27453],"content":"An error occurred while attempting to access the socket. See the Remarks section for more information.","needQuote":true,"needEscape":true,"nodes":[{"content":"An error occurred while attempting to access the socket. See the Remarks section for more information.","pos":[0,102],"nodes":[{"content":"An error occurred while attempting to access the socket.","pos":[0,56]},{"content":"See the Remarks section for more information.","pos":[57,102]}]}]},{"pos":[27560,27613],"content":"The <xref:System.Net.Sockets.Socket> has been closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Net.Sockets.Socket&gt; has been closed.","pos":[0,53],"source":"The <xref:System.Net.Sockets.Socket> has been closed."}]},{"pos":[28099,28153],"content":"Receives a datagram from a remote host asynchronously.","needQuote":true,"needEscape":true,"nodes":[{"content":"Receives a datagram from a remote host asynchronously.","pos":[0,54]}]},{"pos":[28166,28707],"content":"The asynchronous BeginReceive operation must be completed by calling the <xref:System.Net.Sockets.UdpClient.EndReceive%2A> method. Typically, the method is invoked by the `requestCallback` delegate.       This method does not block until the operation is complete. To block until the operation is complete, use the <xref:System.Net.Sockets.UdpClient.Receive%2A> method.       For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The asynchronous BeginReceive operation must be completed by calling the &lt;xref:System.Net.Sockets.UdpClient.EndReceive%2A&gt; method.","pos":[0,130],"source":"The asynchronous BeginReceive operation must be completed by calling the <xref:System.Net.Sockets.UdpClient.EndReceive%2A> method."},{"content":"Typically, the method is invoked by the <ph id=\"ph1\">`requestCallback`</ph> delegate.","pos":[131,198],"source":" Typically, the method is invoked by the `requestCallback` delegate."},{"content":"This method does not block until the operation is complete.","pos":[205,264]},{"content":"To block until the operation is complete, use the &lt;xref:System.Net.Sockets.UdpClient.Receive%2A&gt; method.","pos":[265,369],"source":" To block until the operation is complete, use the <xref:System.Net.Sockets.UdpClient.Receive%2A> method."},{"content":"For detailed information about using the asynchronous programming model, see <bpt id=\"p1\">[</bpt>Calling Synchronous Methods Asynchronously<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[376,537],"source":"       For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[29228,29336],"content":"An <xref:System.AsyncCallback> delegate that references the method to invoke when the operation is complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.AsyncCallback&gt; delegate that references the method to invoke when the operation is complete.","pos":[0,108],"source":"An <xref:System.AsyncCallback> delegate that references the method to invoke when the operation is complete."}]},{"pos":[29398,29562],"content":"A user-defined object that contains information about the receive operation. This object is passed to the `requestCallback` delegate when the operation is complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"A user-defined object that contains information about the receive operation.","pos":[0,76]},{"content":"This object is passed to the <ph id=\"ph1\">`requestCallback`</ph> delegate when the operation is complete.","pos":[77,164],"source":" This object is passed to the `requestCallback` delegate when the operation is complete."}]},{"pos":[29626,29704],"content":"An <xref:System.IAsyncResult> object that references the asynchronous receive.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.IAsyncResult&gt; object that references the asynchronous receive.","pos":[0,78],"source":"An <xref:System.IAsyncResult> object that references the asynchronous receive."}]},{"pos":[30340,30489],"content":"Sends a datagram to a remote host asynchronously. The destination was specified previously by a call to <xref:System.Net.Sockets.UdpClient.Connect*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sends a datagram to a remote host asynchronously. The destination was specified previously by a call to <xref:System.Net.Sockets.UdpClient.Connect*>.","pos":[0,149],"nodes":[{"content":"Sends a datagram to a remote host asynchronously.","pos":[0,49]},{"content":"The destination was specified previously by a call to &lt;xref:System.Net.Sockets.UdpClient.Connect*&gt;.","pos":[50,149],"source":" The destination was specified previously by a call to <xref:System.Net.Sockets.UdpClient.Connect*>."}]}]},{"pos":[30502,31049],"content":"The asynchronous BeginSend operation must be completed by calling the <xref:System.Net.Sockets.UdpClient.EndSend%2A> method. Typically, the method is invoked by the `requestCallback` delegate.       This method does not block until the operation completes. To block until the operation is complete, use one of the <xref:System.Net.Sockets.UdpClient.Send%2A> method overloads.       For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The asynchronous BeginSend operation must be completed by calling the &lt;xref:System.Net.Sockets.UdpClient.EndSend%2A&gt; method.","pos":[0,124],"source":"The asynchronous BeginSend operation must be completed by calling the <xref:System.Net.Sockets.UdpClient.EndSend%2A> method."},{"content":"Typically, the method is invoked by the <ph id=\"ph1\">`requestCallback`</ph> delegate.","pos":[125,192],"source":" Typically, the method is invoked by the `requestCallback` delegate."},{"content":"This method does not block until the operation completes.","pos":[199,256]},{"content":"To block until the operation is complete, use one of the &lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt; method overloads.","pos":[257,375],"source":" To block until the operation is complete, use one of the <xref:System.Net.Sockets.UdpClient.Send%2A> method overloads."},{"content":"For detailed information about using the asynchronous programming model, see <bpt id=\"p1\">[</bpt>Calling Synchronous Methods Asynchronously<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[382,543],"source":"       For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[31777,31838],"content":"A <xref:System.Byte> array that contains the data to be sent.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Byte&gt; array that contains the data to be sent.","pos":[0,61],"source":"A <xref:System.Byte> array that contains the data to be sent."}]},{"pos":[31899,31927],"content":"The number of bytes to send.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes to send.","pos":[0,28]}]},{"pos":[32006,32114],"content":"An <xref:System.AsyncCallback> delegate that references the method to invoke when the operation is complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.AsyncCallback&gt; delegate that references the method to invoke when the operation is complete.","pos":[0,108],"source":"An <xref:System.AsyncCallback> delegate that references the method to invoke when the operation is complete."}]},{"pos":[32176,32337],"content":"A user-defined object that contains information about the send operation. This object is passed to the `requestCallback` delegate when the operation is complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"A user-defined object that contains information about the send operation.","pos":[0,73]},{"content":"This object is passed to the <ph id=\"ph1\">`requestCallback`</ph> delegate when the operation is complete.","pos":[74,161],"source":" This object is passed to the `requestCallback` delegate when the operation is complete."}]},{"pos":[32401,32476],"content":"An <xref:System.IAsyncResult> object that references the asynchronous send.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.IAsyncResult&gt; object that references the asynchronous send.","pos":[0,75],"source":"An <xref:System.IAsyncResult> object that references the asynchronous send."}]},{"pos":[33186,33297],"content":"Sends a datagram to a destination asynchronously. The destination is specified by a <xref:System.Net.EndPoint>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sends a datagram to a destination asynchronously. The destination is specified by a <xref:System.Net.EndPoint>.","pos":[0,111],"nodes":[{"content":"Sends a datagram to a destination asynchronously.","pos":[0,49]},{"content":"The destination is specified by a &lt;xref:System.Net.EndPoint&gt;.","pos":[50,111],"source":" The destination is specified by a <xref:System.Net.EndPoint>."}]}]},{"pos":[33310,33859],"content":"The asynchronous BeginSend operation must be completed by calling the <xref:System.Net.Sockets.UdpClient.EndSend%2A> method. Typically, the method is invoked by the `requestCallback` delegate.       This method does not block until the operation is complete. To block until the operation is complete, use one of the <xref:System.Net.Sockets.UdpClient.Send%2A> method overloads.       For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The asynchronous BeginSend operation must be completed by calling the &lt;xref:System.Net.Sockets.UdpClient.EndSend%2A&gt; method.","pos":[0,124],"source":"The asynchronous BeginSend operation must be completed by calling the <xref:System.Net.Sockets.UdpClient.EndSend%2A> method."},{"content":"Typically, the method is invoked by the <ph id=\"ph1\">`requestCallback`</ph> delegate.","pos":[125,192],"source":" Typically, the method is invoked by the `requestCallback` delegate."},{"content":"This method does not block until the operation is complete.","pos":[199,258]},{"content":"To block until the operation is complete, use one of the &lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt; method overloads.","pos":[259,377],"source":" To block until the operation is complete, use one of the <xref:System.Net.Sockets.UdpClient.Send%2A> method overloads."},{"content":"For detailed information about using the asynchronous programming model, see <bpt id=\"p1\">[</bpt>Calling Synchronous Methods Asynchronously<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[384,545],"source":"       For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[34658,34719],"content":"A <xref:System.Byte> array that contains the data to be sent.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Byte&gt; array that contains the data to be sent.","pos":[0,61],"source":"A <xref:System.Byte> array that contains the data to be sent."}]},{"pos":[34780,34808],"content":"The number of bytes to send.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes to send.","pos":[0,28]}]},{"pos":[34881,34957],"content":"The <xref:System.Net.EndPoint> that represents the destination for the data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Net.EndPoint&gt; that represents the destination for the data.","pos":[0,76],"source":"The <xref:System.Net.EndPoint> that represents the destination for the data."}]},{"pos":[35036,35144],"content":"An <xref:System.AsyncCallback> delegate that references the method to invoke when the operation is complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.AsyncCallback&gt; delegate that references the method to invoke when the operation is complete.","pos":[0,108],"source":"An <xref:System.AsyncCallback> delegate that references the method to invoke when the operation is complete."}]},{"pos":[35206,35367],"content":"A user-defined object that contains information about the send operation. This object is passed to the `requestCallback` delegate when the operation is complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"A user-defined object that contains information about the send operation.","pos":[0,73]},{"content":"This object is passed to the <ph id=\"ph1\">`requestCallback`</ph> delegate when the operation is complete.","pos":[74,161],"source":" This object is passed to the `requestCallback` delegate when the operation is complete."}]},{"pos":[35431,35506],"content":"An <xref:System.IAsyncResult> object that references the asynchronous send.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.IAsyncResult&gt; object that references the asynchronous send.","pos":[0,75],"source":"An <xref:System.IAsyncResult> object that references the asynchronous send."}]},{"pos":[36232,36344],"content":"Sends a datagram to a destination asynchronously. The destination is specified by the host name and port number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sends a datagram to a destination asynchronously. The destination is specified by the host name and port number.","pos":[0,112],"nodes":[{"content":"Sends a datagram to a destination asynchronously.","pos":[0,49]},{"content":"The destination is specified by the host name and port number.","pos":[50,112]}]}]},{"pos":[36357,36906],"content":"The asynchronous BeginSend operation must be completed by calling the <xref:System.Net.Sockets.UdpClient.EndSend%2A> method. Typically, the method is invoked by the `requestCallback` delegate.       This method does not block until the operation is complete. To block until the operation is complete, use one of the <xref:System.Net.Sockets.UdpClient.Send%2A> method overloads.       For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The asynchronous BeginSend operation must be completed by calling the &lt;xref:System.Net.Sockets.UdpClient.EndSend%2A&gt; method.","pos":[0,124],"source":"The asynchronous BeginSend operation must be completed by calling the <xref:System.Net.Sockets.UdpClient.EndSend%2A> method."},{"content":"Typically, the method is invoked by the <ph id=\"ph1\">`requestCallback`</ph> delegate.","pos":[125,192],"source":" Typically, the method is invoked by the `requestCallback` delegate."},{"content":"This method does not block until the operation is complete.","pos":[199,258]},{"content":"To block until the operation is complete, use one of the &lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt; method overloads.","pos":[259,377],"source":" To block until the operation is complete, use one of the <xref:System.Net.Sockets.UdpClient.Send%2A> method overloads."},{"content":"For detailed information about using the asynchronous programming model, see <bpt id=\"p1\">[</bpt>Calling Synchronous Methods Asynchronously<ept id=\"p1\">](~/add/includes/ajax-current-ext-md.md)</ept>.","pos":[384,545],"source":"       For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md)."}]},{"pos":[37700,37761],"content":"A <xref:System.Byte> array that contains the data to be sent.","needQuote":true,"needEscape":true,"nodes":[{"content":"A &lt;xref:System.Byte&gt; array that contains the data to be sent.","pos":[0,61],"source":"A <xref:System.Byte> array that contains the data to be sent."}]},{"pos":[37822,37850],"content":"The number of bytes to send.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes to send.","pos":[0,28]}]},{"pos":[37915,37936],"content":"The destination host.","needQuote":true,"needEscape":true,"nodes":[{"content":"The destination host.","pos":[0,21]}]},{"pos":[37996,38024],"content":"The destination port number.","needQuote":true,"needEscape":true,"nodes":[{"content":"The destination port number.","pos":[0,28]}]},{"pos":[38103,38211],"content":"An <xref:System.AsyncCallback> delegate that references the method to invoke when the operation is complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.AsyncCallback&gt; delegate that references the method to invoke when the operation is complete.","pos":[0,108],"source":"An <xref:System.AsyncCallback> delegate that references the method to invoke when the operation is complete."}]},{"pos":[38273,38434],"content":"A user-defined object that contains information about the send operation. This object is passed to the `requestCallback` delegate when the operation is complete.","needQuote":true,"needEscape":true,"nodes":[{"content":"A user-defined object that contains information about the send operation.","pos":[0,73]},{"content":"This object is passed to the <ph id=\"ph1\">`requestCallback`</ph> delegate when the operation is complete.","pos":[74,161],"source":" This object is passed to the `requestCallback` delegate when the operation is complete."}]},{"pos":[38498,38573],"content":"An <xref:System.IAsyncResult> object that references the asynchronous send.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.IAsyncResult&gt; object that references the asynchronous send.","pos":[0,75],"source":"An <xref:System.IAsyncResult> object that references the asynchronous send."}]},{"pos":[38962,39031],"content":"Gets or sets the underlying network <xref:System.Net.Sockets.Socket>.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets the underlying network &lt;xref:System.Net.Sockets.Socket&gt;.","pos":[0,69],"source":"Gets or sets the underlying network <xref:System.Net.Sockets.Socket>."}]},{"pos":[39043,39744],"content":"<xref:System.Net.Sockets.UdpClient> creates a <xref:System.Net.Sockets.Socket> used to send and receive data over a network. Classes deriving from <xref:System.Net.Sockets.UdpClient> can use this property to get or set this <xref:System.Net.Sockets.Socket>. Use the underlying <xref:System.Net.Sockets.Socket> returned from Client if you require access beyond that which <xref:System.Net.Sockets.UdpClient> provides. You can also use Client to set the underlying <xref:System.Net.Sockets.Socket> to an existing <xref:System.Net.Sockets.Socket>. This is useful if you want to take advantage of the simplicity of <xref:System.Net.Sockets.UdpClient> using a pre-existing <xref:System.Net.Sockets.Socket>.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"<xref:System.Net.Sockets.UdpClient> creates a <xref:System.Net.Sockets.Socket> used to send and receive data over a network. Classes deriving from <xref:System.Net.Sockets.UdpClient> can use this property to get or set this <xref:System.Net.Sockets.Socket>. Use the underlying <xref:System.Net.Sockets.Socket> returned from Client if you require access beyond that which <xref:System.Net.Sockets.UdpClient> provides. You can also use Client to set the underlying <xref:System.Net.Sockets.Socket> to an existing <xref:System.Net.Sockets.Socket>. This is useful if you want to take advantage of the simplicity of <xref:System.Net.Sockets.UdpClient> using a pre-existing <xref:System.Net.Sockets.Socket>.","pos":[0,701],"nodes":[{"content":"&lt;xref:System.Net.Sockets.UdpClient&gt; creates a &lt;xref:System.Net.Sockets.Socket&gt; used to send and receive data over a network.","pos":[0,124],"source":"<xref:System.Net.Sockets.UdpClient> creates a <xref:System.Net.Sockets.Socket> used to send and receive data over a network."},{"content":"Classes deriving from &lt;xref:System.Net.Sockets.UdpClient&gt; can use this property to get or set this &lt;xref:System.Net.Sockets.Socket&gt;.","pos":[125,257],"source":" Classes deriving from <xref:System.Net.Sockets.UdpClient> can use this property to get or set this <xref:System.Net.Sockets.Socket>."},{"content":"Use the underlying &lt;xref:System.Net.Sockets.Socket&gt; returned from Client if you require access beyond that which &lt;xref:System.Net.Sockets.UdpClient&gt; provides.","pos":[258,416],"source":" Use the underlying <xref:System.Net.Sockets.Socket> returned from Client if you require access beyond that which <xref:System.Net.Sockets.UdpClient> provides."},{"content":"You can also use Client to set the underlying &lt;xref:System.Net.Sockets.Socket&gt; to an existing &lt;xref:System.Net.Sockets.Socket&gt;.","pos":[417,544],"source":" You can also use Client to set the underlying <xref:System.Net.Sockets.Socket> to an existing <xref:System.Net.Sockets.Socket>."},{"content":"This is useful if you want to take advantage of the simplicity of &lt;xref:System.Net.Sockets.UdpClient&gt; using a pre-existing &lt;xref:System.Net.Sockets.Socket&gt;.","pos":[545,701],"source":" This is useful if you want to take advantage of the simplicity of <xref:System.Net.Sockets.UdpClient> using a pre-existing <xref:System.Net.Sockets.Socket>."}]}]},{"pos":[40466,40522],"content":"The underlying Network <xref:System.Net.Sockets.Socket>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The underlying Network &lt;xref:System.Net.Sockets.Socket&gt;.","pos":[0,56],"source":"The underlying Network <xref:System.Net.Sockets.Socket>."}]},{"pos":[40907,40933],"content":"Closes the UDP connection.","needQuote":true,"needEscape":true,"nodes":[{"content":"Closes the UDP connection.","pos":[0,26]}]},{"pos":[40946,41477],"content":"The Close disables the underlying <xref:System.Net.Sockets.Socket> and releases all managed and unmanaged resources associated with the <xref:System.Net.Sockets.UdpClient>.      > [!NOTE] >  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Close disables the underlying &lt;xref:System.Net.Sockets.Socket&gt; and releases all managed and unmanaged resources associated with the &lt;xref:System.Net.Sockets.UdpClient&gt;.","pos":[0,172],"source":"The Close disables the underlying <xref:System.Net.Sockets.Socket> and releases all managed and unmanaged resources associated with the <xref:System.Net.Sockets.UdpClient>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If you receive a &lt;xref:System.Net.Sockets.SocketException&gt;, use &lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt; to obtain the specific error code.","pos":[178,369],"source":"      > [!NOTE] >  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code."},{"content":"Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[370,528]}]},{"pos":[42240,42330],"content":"An error occurred when accessing the socket. See the Remarks section for more information.","needQuote":true,"needEscape":true,"nodes":[{"content":"An error occurred when accessing the socket. See the Remarks section for more information.","pos":[0,90],"nodes":[{"content":"An error occurred when accessing the socket.","pos":[0,44]},{"content":"See the Remarks section for more information.","pos":[45,90]}]}]},{"pos":[42735,42806],"content":"Establishes a default remote host using the specified network endpoint.","needQuote":true,"needEscape":true,"nodes":[{"content":"Establishes a default remote host using the specified network endpoint.","pos":[0,71]}]},{"pos":[42819,45167],"content":"The <xref:System.Net.Sockets.UdpClient.Connect%2A> method establishes a default remote host using the value specified in the `endPoint` parameter. Once established, you do not have to specify a remote host in each call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method.       Establishing a default remote host is optional. Specifying a default remote host limits you to that host only. If you want to send datagrams to a different remote host, you must make another call to the <xref:System.Net.Sockets.UdpClient.Connect%2A> method or create another <xref:System.Net.Sockets.UdpClient> without a default remote host. If you have established a default remote host and you also provide a remote host in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method, <xref:System.Net.Sockets.UdpClient.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.       If you call the <xref:System.Net.Sockets.Socket.Connect%2A> method, any datagrams that arrive from an address other than the specified default will be discarded. You cannot set the default remote host to a broadcast address using this method unless you inherit from <xref:System.Net.Sockets.UdpClient>, use the Client method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>.       You can however, broadcast data to the default broadcast address, 255.255.255.255, if you specify <xref:System.Net.IPAddress.Broadcast?displayProperty=fullName> in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method. If your application requires greater control over broadcast addresses, you can also revert to using the <xref:System.Net.Sockets.Socket> class.      > [!NOTE] >  Since the UDP protocol is connectionless, the <xref:System.Net.Sockets.UdpClient.Connect%2A> method does not block. Do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method if you intend to receive multicasted datagrams.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt; method establishes a default remote host using the value specified in the <ph id=\"ph1\">`endPoint`</ph> parameter.","pos":[0,146],"source":"The <xref:System.Net.Sockets.UdpClient.Connect%2A> method establishes a default remote host using the value specified in the `endPoint` parameter."},{"content":"Once established, you do not have to specify a remote host in each call to the &lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt; method.","pos":[147,277],"source":" Once established, you do not have to specify a remote host in each call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method."},{"content":"Establishing a default remote host is optional.","pos":[284,331]},{"content":"Specifying a default remote host limits you to that host only.","pos":[332,394]},{"content":"If you want to send datagrams to a different remote host, you must make another call to the &lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt; method or create another &lt;xref:System.Net.Sockets.UdpClient&gt; without a default remote host.","pos":[395,625],"source":" If you want to send datagrams to a different remote host, you must make another call to the <xref:System.Net.Sockets.UdpClient.Connect%2A> method or create another <xref:System.Net.Sockets.UdpClient> without a default remote host."},{"content":"If you have established a default remote host and you also provide a remote host in your call to the &lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt; method, &lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt; will throw a &lt;xref:System.Net.Sockets.SocketException&gt;.","pos":[626,878],"source":" If you have established a default remote host and you also provide a remote host in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method, <xref:System.Net.Sockets.UdpClient.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>."},{"content":"If you receive a &lt;xref:System.Net.Sockets.SocketException&gt;, use &lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt; to obtain the specific error code.","pos":[879,1057],"source":" If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code."},{"content":"Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[1058,1216]},{"content":"If you call the &lt;xref:System.Net.Sockets.Socket.Connect%2A&gt; method, any datagrams that arrive from an address other than the specified default will be discarded.","pos":[1223,1384],"source":"       If you call the <xref:System.Net.Sockets.Socket.Connect%2A> method, any datagrams that arrive from an address other than the specified default will be discarded."},{"content":"You cannot set the default remote host to a broadcast address using this method unless you inherit from &lt;xref:System.Net.Sockets.UdpClient&gt;, use the Client method to obtain the underlying &lt;xref:System.Net.Sockets.Socket&gt;, and set the socket option to &lt;xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName&gt;.","pos":[1385,1704],"source":" You cannot set the default remote host to a broadcast address using this method unless you inherit from <xref:System.Net.Sockets.UdpClient>, use the Client method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>."},{"content":"You can however, broadcast data to the default broadcast address, 255.255.255.255, if you specify &lt;xref:System.Net.IPAddress.Broadcast?displayProperty=fullName&gt; in your call to the &lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt; method.","pos":[1711,1943],"source":"       You can however, broadcast data to the default broadcast address, 255.255.255.255, if you specify <xref:System.Net.IPAddress.Broadcast?displayProperty=fullName> in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method."},{"content":"If your application requires greater control over broadcast addresses, you can also revert to using the &lt;xref:System.Net.Sockets.Socket&gt; class.","pos":[1944,2087],"source":" If your application requires greater control over broadcast addresses, you can also revert to using the <xref:System.Net.Sockets.Socket> class."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Since the UDP protocol is connectionless, the &lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt; method does not block.","pos":[2093,2221],"source":"      > [!NOTE] >  Since the UDP protocol is connectionless, the <xref:System.Net.Sockets.UdpClient.Connect%2A> method does not block."},{"content":"Do not call the &lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt; method if you intend to receive multicasted datagrams.","pos":[2222,2339],"source":" Do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method if you intend to receive multicasted datagrams."}]},{"pos":[45834,45935],"content":"An <xref:System.Net.IPEndPoint> that specifies the network endpoint to which you intend to send data.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Net.IPEndPoint&gt; that specifies the network endpoint to which you intend to send data.","pos":[0,101],"source":"An <xref:System.Net.IPEndPoint> that specifies the network endpoint to which you intend to send data."}]},{"pos":[46114,46204],"content":"An error occurred when accessing the socket. See the Remarks section for more information.","needQuote":true,"needEscape":true,"nodes":[{"content":"An error occurred when accessing the socket. See the Remarks section for more information.","pos":[0,90],"nodes":[{"content":"An error occurred when accessing the socket.","pos":[0,44]},{"content":"See the Remarks section for more information.","pos":[45,90]}]}]},{"pos":[46307,46393],"content":"<ph id=\"ph1\">&lt;code&gt;endPoint&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>endPoint</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[46500,46564],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is closed.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Net.Sockets.UdpClient\"></xref> is closed."},{"pos":[47008,47089],"content":"Establishes a default remote host using the specified IP address and port number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Establishes a default remote host using the specified IP address and port number.","pos":[0,81]}]},{"pos":[47102,49459],"content":"The <xref:System.Net.Sockets.UdpClient.Connect%2A> method establishes a default remote host using the values specified in the `addr` and `port` parameters. Once established, you do not have to specify a remote host in each call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method.       Establishing a default remote host is optional. Specifying a default remote host limits you to that host only. If you want to send datagrams to a different remote host, you must make another call to the <xref:System.Net.Sockets.UdpClient.Connect%2A> method or create another <xref:System.Net.Sockets.UdpClient> without a default remote host. If you have established a default remote host and you also provide a remote host in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method, <xref:System.Net.Sockets.UdpClient.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.       If you call the <xref:System.Net.Sockets.Socket.Connect%2A> method, any datagrams that arrive from an address other than the specified default will be discarded. You cannot set the default remote host to a broadcast address using this method unless you inherit from <xref:System.Net.Sockets.UdpClient>, use the client method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>.       You can however, broadcast data to the default broadcast address, 255.255.255.255, if you specify <xref:System.Net.IPAddress.Broadcast?displayProperty=fullName> in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method. If your application requires greater control over broadcast addresses, you can also revert to using the <xref:System.Net.Sockets.Socket> class.      > [!NOTE] >  Since the UDP protocol is connectionless, the <xref:System.Net.Sockets.UdpClient.Connect%2A> method does not block. Do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method if you intend to receive multicasted datagrams.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt; method establishes a default remote host using the values specified in the <ph id=\"ph1\">`addr`</ph> and <ph id=\"ph2\">`port`</ph> parameters.","pos":[0,155],"source":"The <xref:System.Net.Sockets.UdpClient.Connect%2A> method establishes a default remote host using the values specified in the `addr` and `port` parameters."},{"content":"Once established, you do not have to specify a remote host in each call to the &lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt; method.","pos":[156,286],"source":" Once established, you do not have to specify a remote host in each call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method."},{"content":"Establishing a default remote host is optional.","pos":[293,340]},{"content":"Specifying a default remote host limits you to that host only.","pos":[341,403]},{"content":"If you want to send datagrams to a different remote host, you must make another call to the &lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt; method or create another &lt;xref:System.Net.Sockets.UdpClient&gt; without a default remote host.","pos":[404,634],"source":" If you want to send datagrams to a different remote host, you must make another call to the <xref:System.Net.Sockets.UdpClient.Connect%2A> method or create another <xref:System.Net.Sockets.UdpClient> without a default remote host."},{"content":"If you have established a default remote host and you also provide a remote host in your call to the &lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt; method, &lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt; will throw a &lt;xref:System.Net.Sockets.SocketException&gt;.","pos":[635,887],"source":" If you have established a default remote host and you also provide a remote host in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method, <xref:System.Net.Sockets.UdpClient.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>."},{"content":"If you receive a &lt;xref:System.Net.Sockets.SocketException&gt;, use &lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt; to obtain the specific error code.","pos":[888,1066],"source":" If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code."},{"content":"Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[1067,1225]},{"content":"If you call the &lt;xref:System.Net.Sockets.Socket.Connect%2A&gt; method, any datagrams that arrive from an address other than the specified default will be discarded.","pos":[1232,1393],"source":"       If you call the <xref:System.Net.Sockets.Socket.Connect%2A> method, any datagrams that arrive from an address other than the specified default will be discarded."},{"content":"You cannot set the default remote host to a broadcast address using this method unless you inherit from &lt;xref:System.Net.Sockets.UdpClient&gt;, use the client method to obtain the underlying &lt;xref:System.Net.Sockets.Socket&gt;, and set the socket option to &lt;xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName&gt;.","pos":[1394,1713],"source":" You cannot set the default remote host to a broadcast address using this method unless you inherit from <xref:System.Net.Sockets.UdpClient>, use the client method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>."},{"content":"You can however, broadcast data to the default broadcast address, 255.255.255.255, if you specify &lt;xref:System.Net.IPAddress.Broadcast?displayProperty=fullName&gt; in your call to the &lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt; method.","pos":[1720,1952],"source":"       You can however, broadcast data to the default broadcast address, 255.255.255.255, if you specify <xref:System.Net.IPAddress.Broadcast?displayProperty=fullName> in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method."},{"content":"If your application requires greater control over broadcast addresses, you can also revert to using the &lt;xref:System.Net.Sockets.Socket&gt; class.","pos":[1953,2096],"source":" If your application requires greater control over broadcast addresses, you can also revert to using the <xref:System.Net.Sockets.Socket> class."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Since the UDP protocol is connectionless, the &lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt; method does not block.","pos":[2102,2230],"source":"      > [!NOTE] >  Since the UDP protocol is connectionless, the <xref:System.Net.Sockets.UdpClient.Connect%2A> method does not block."},{"content":"Do not call the &lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt; method if you intend to receive multicasted datagrams.","pos":[2231,2348],"source":" Do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method if you intend to receive multicasted datagrams."}]},{"pos":[50119,50203],"content":"The <xref:System.Net.IPAddress> of the remote host to which you intend to send data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Net.IPAddress&gt; of the remote host to which you intend to send data.","pos":[0,84],"source":"The <xref:System.Net.IPAddress> of the remote host to which you intend to send data."}]},{"pos":[50263,50309],"content":"The port number to which you intend send data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The port number to which you intend send data.","pos":[0,46]}]},{"pos":[50480,50540],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is closed.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Net.Sockets.UdpClient\"></xref> is closed."},{"pos":[50643,50725],"content":"<ph id=\"ph1\">&lt;code&gt;addr&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>addr</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[50840,50951],"content":"<ph id=\"ph1\">&lt;code&gt;port&lt;/code&gt;</ph> is not between <ph id=\"ph2\">&lt;xref:System.Net.IPEndPoint.MinPort&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Net.IPEndPoint.MaxPort&gt;</ph>.","needQuote":true,"needEscape":true,"source":"<code>port</code> is not between <xref:System.Net.IPEndPoint.MinPort> and <xref:System.Net.IPEndPoint.MaxPort>."},{"pos":[51066,51156],"content":"An error occurred when accessing the socket. See the Remarks section for more information.","needQuote":true,"needEscape":true,"nodes":[{"content":"An error occurred when accessing the socket. See the Remarks section for more information.","pos":[0,90],"nodes":[{"content":"An error occurred when accessing the socket.","pos":[0,44]},{"content":"See the Remarks section for more information.","pos":[45,90]}]}]},{"pos":[51577,51657],"content":"Establishes a default remote host using the specified host name and port number.","needQuote":true,"needEscape":true,"nodes":[{"content":"Establishes a default remote host using the specified host name and port number.","pos":[0,80]}]},{"pos":[51670,53883],"content":"The Connect method establishes a default remote host using the values specified in the `port` and `hostname` parameters. Once established, you do not have to specify a remote host in each call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method.       Establishing a default remote host is optional. Specifying a default remote host limits you to that host only. If you want to send datagrams to a different remote host, you must make another call to the Connect method or create another <xref:System.Net.Sockets.UdpClient> without a default remote host.       If you have established a default remote host and you also provide a remote host in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method, <xref:System.Net.Sockets.UdpClient.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.       If you call the <xref:System.Net.Sockets.Socket.Connect%2A> method, any datagrams that arrive from an address other than the specified default will be discarded. You cannot set the default remote host to a broadcast address using this method unless you inherit from <xref:System.Net.Sockets.UdpClient>, use the client method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>.       You can however, broadcast data to the default broadcast address, 255.255.255.255, if you specify <xref:System.Net.IPAddress.Broadcast?displayProperty=fullName> in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method. If your application requires greater control over broadcast addresses, you can also revert to using the <xref:System.Net.Sockets.Socket> class.      > [!NOTE] >  Since the UDP protocol is connectionless, the Connect method does not block. Do not call the Connect method if you intend to receive multicasted datagrams.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Connect method establishes a default remote host using the values specified in the <ph id=\"ph1\">`port`</ph> and <ph id=\"ph2\">`hostname`</ph> parameters.","pos":[0,120],"source":"The Connect method establishes a default remote host using the values specified in the `port` and `hostname` parameters."},{"content":"Once established, you do not have to specify a remote host in each call to the &lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt; method.","pos":[121,251],"source":" Once established, you do not have to specify a remote host in each call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method."},{"content":"Establishing a default remote host is optional.","pos":[258,305]},{"content":"Specifying a default remote host limits you to that host only.","pos":[306,368]},{"content":"If you want to send datagrams to a different remote host, you must make another call to the Connect method or create another &lt;xref:System.Net.Sockets.UdpClient&gt; without a default remote host.","pos":[369,560],"source":" If you want to send datagrams to a different remote host, you must make another call to the Connect method or create another <xref:System.Net.Sockets.UdpClient> without a default remote host."},{"content":"If you have established a default remote host and you also provide a remote host in your call to the &lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt; method, &lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt; will throw a &lt;xref:System.Net.Sockets.SocketException&gt;.","pos":[567,819],"source":"       If you have established a default remote host and you also provide a remote host in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method, <xref:System.Net.Sockets.UdpClient.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>."},{"content":"If you receive a &lt;xref:System.Net.Sockets.SocketException&gt;, use &lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt; to obtain the specific error code.","pos":[820,998],"source":" If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code."},{"content":"Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[999,1157]},{"content":"If you call the &lt;xref:System.Net.Sockets.Socket.Connect%2A&gt; method, any datagrams that arrive from an address other than the specified default will be discarded.","pos":[1164,1325],"source":"       If you call the <xref:System.Net.Sockets.Socket.Connect%2A> method, any datagrams that arrive from an address other than the specified default will be discarded."},{"content":"You cannot set the default remote host to a broadcast address using this method unless you inherit from &lt;xref:System.Net.Sockets.UdpClient&gt;, use the client method to obtain the underlying &lt;xref:System.Net.Sockets.Socket&gt;, and set the socket option to &lt;xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName&gt;.","pos":[1326,1645],"source":" You cannot set the default remote host to a broadcast address using this method unless you inherit from <xref:System.Net.Sockets.UdpClient>, use the client method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>."},{"content":"You can however, broadcast data to the default broadcast address, 255.255.255.255, if you specify &lt;xref:System.Net.IPAddress.Broadcast?displayProperty=fullName&gt; in your call to the &lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt; method.","pos":[1652,1884],"source":"       You can however, broadcast data to the default broadcast address, 255.255.255.255, if you specify <xref:System.Net.IPAddress.Broadcast?displayProperty=fullName> in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method."},{"content":"If your application requires greater control over broadcast addresses, you can also revert to using the &lt;xref:System.Net.Sockets.Socket&gt; class.","pos":[1885,2028],"source":" If your application requires greater control over broadcast addresses, you can also revert to using the <xref:System.Net.Sockets.Socket> class."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Since the UDP protocol is connectionless, the Connect method does not block.","pos":[2034,2123],"source":"      > [!NOTE] >  Since the UDP protocol is connectionless, the Connect method does not block."},{"content":"Do not call the Connect method if you intend to receive multicasted datagrams.","pos":[2124,2202]}]},{"pos":[54531,54593],"content":"The DNS name of the remote host to which you intend send data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The DNS name of the remote host to which you intend send data.","pos":[0,62]}]},{"pos":[54653,54721],"content":"The port number on the remote host to which you intend to send data.","needQuote":true,"needEscape":true,"nodes":[{"content":"The port number on the remote host to which you intend to send data.","pos":[0,68]}]},{"pos":[54892,54956],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is closed.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Net.Sockets.UdpClient\"></xref> is closed."},{"pos":[55071,55182],"content":"<ph id=\"ph1\">&lt;code&gt;port&lt;/code&gt;</ph> is not between <ph id=\"ph2\">&lt;xref:System.Net.IPEndPoint.MinPort&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Net.IPEndPoint.MaxPort&gt;</ph>.","needQuote":true,"needEscape":true,"source":"<code>port</code> is not between <xref:System.Net.IPEndPoint.MinPort> and <xref:System.Net.IPEndPoint.MaxPort>."},{"pos":[55297,55387],"content":"An error occurred when accessing the socket. See the Remarks section for more information.","needQuote":true,"needEscape":true,"nodes":[{"content":"An error occurred when accessing the socket. See the Remarks section for more information.","pos":[0,90],"nodes":[{"content":"An error occurred when accessing the socket.","pos":[0,44]},{"content":"See the Remarks section for more information.","pos":[45,90]}]}]},{"pos":[55716,55823],"content":"Releases the managed and unmanaged resources used by the <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Releases the managed and unmanaged resources used by the <xref href=\"System.Net.Sockets.UdpClient\"></xref>."},{"pos":[56338,56479],"content":"Releases the unmanaged resources used by the <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> and optionally releases the managed resources.","needQuote":true,"needEscape":true,"source":"Releases the unmanaged resources used by the <xref href=\"System.Net.Sockets.UdpClient\"></xref> and optionally releases the managed resources."},{"pos":[56492,57023],"content":"This method is called by the public `Dispose()`method and the <xref:System.Object.Finalize%2A> method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.       When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.Net.Sockets.UdpClient> references. This method invokes the `Dispose()` method of each referenced object.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method is called by the public <ph id=\"ph1\">`Dispose()`</ph>method and the &lt;xref:System.Object.Finalize%2A&gt; method.","pos":[0,102],"source":"This method is called by the public `Dispose()`method and the <xref:System.Object.Finalize%2A> method."},{"content":"<ph id=\"ph1\">`Dispose()`</ph> invokes the protected <ph id=\"ph2\">`Dispose(Boolean)`</ph> method with the <ph id=\"ph3\">`disposing`</ph> parameter set to <ph id=\"ph4\">`true`</ph>.","pos":[103,208],"source":"`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`."},{"content":"&lt;xref:System.Object.Finalize%2A&gt; invokes <ph id=\"ph1\">`Dispose`</ph> with <ph id=\"ph2\">`disposing`</ph> set to <ph id=\"ph3\">`false`</ph>.","pos":[209,292],"source":" <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`."},{"content":"When the <ph id=\"ph1\">`disposing`</ph> parameter is true, this method releases all resources held by any managed objects that this &lt;xref:System.Net.Sockets.UdpClient&gt; references.","pos":[299,459],"source":"       When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.Net.Sockets.UdpClient> references."},{"content":"This method invokes the <ph id=\"ph1\">`Dispose()`</ph> method of each referenced object.","pos":[460,529],"source":" This method invokes the `Dispose()` method of each referenced object."}]},{"pos":[57179,57388],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to release both managed and unmanaged resources; <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> to release only unmanaged resources.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only unmanaged resources."},{"pos":[57805,57982],"content":"Gets or sets a &lt;xref:System.Boolean&gt; value that specifies whether the <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> allows Internet Protocol (IP) datagrams to be fragmented.","needQuote":true,"needEscape":true,"source":"Gets or sets a <xref:System.Boolean> value that specifies whether the <xref href=\"System.Net.Sockets.UdpClient\"></xref> allows Internet Protocol (IP) datagrams to be fragmented."},{"pos":[57994,58426],"content":"Datagrams require fragmentation when their size exceeds the Maximum Transfer Unit (MTU) of the transmission medium. Datagrams may be fragmented by the sending host or by an intermediate router. If a datagram must be fragmented, and the <xref:System.Net.Sockets.Socket.DontFragment%2A> option is set, the datagram is discarded, and an Internet Control Message Protocol (ICMP) error message is sent back to the sender of the datagram.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Datagrams require fragmentation when their size exceeds the Maximum Transfer Unit (MTU) of the transmission medium. Datagrams may be fragmented by the sending host or by an intermediate router. If a datagram must be fragmented, and the <xref:System.Net.Sockets.Socket.DontFragment%2A> option is set, the datagram is discarded, and an Internet Control Message Protocol (ICMP) error message is sent back to the sender of the datagram.","pos":[0,432],"nodes":[{"content":"Datagrams require fragmentation when their size exceeds the Maximum Transfer Unit (MTU) of the transmission medium.","pos":[0,115]},{"content":"Datagrams may be fragmented by the sending host or by an intermediate router.","pos":[116,193]},{"content":"If a datagram must be fragmented, and the &lt;xref:System.Net.Sockets.Socket.DontFragment%2A&gt; option is set, the datagram is discarded, and an Internet Control Message Protocol (ICMP) error message is sent back to the sender of the datagram.","pos":[194,432],"source":" If a datagram must be fragmented, and the <xref:System.Net.Sockets.Socket.DontFragment%2A> option is set, the datagram is discarded, and an Internet Control Message Protocol (ICMP) error message is sent back to the sender of the datagram."}]}]},{"pos":[58882,59182],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Net.Sockets.UdpClient\"></xref> allows datagram fragmentation; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the <bpt id=\"p2\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> allows datagram fragmentation; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","pos":[0,223],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Net.Sockets.UdpClient\"></xref> allows datagram fragmentation; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[224,300],"source":" The default is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>."}]},{"pos":[59354,59506],"content":"This property can be set only for sockets that use the <xref:System.Net.Sockets.AddressFamily> flag or the <xref:System.Net.Sockets.AddressFamily> flag.","needQuote":true,"needEscape":true,"nodes":[{"content":"This property can be set only for sockets that use the &lt;xref:System.Net.Sockets.AddressFamily&gt; flag or the &lt;xref:System.Net.Sockets.AddressFamily&gt; flag.","pos":[0,152],"source":"This property can be set only for sockets that use the <xref:System.Net.Sockets.AddressFamily> flag or the <xref:System.Net.Sockets.AddressFamily> flag."}]},{"pos":[59961,59986],"content":"Leaves a multicast group.","needQuote":true,"needEscape":true,"nodes":[{"content":"Leaves a multicast group.","pos":[0,25]}]},{"pos":[59999,60868],"content":"The DropMulticastGroup method withdraws the <xref:System.Net.Sockets.UdpClient> from the multicast group identified by the specified <xref:System.Net.IPAddress>. After calling the DropMulticastGroup method, the underlying <xref:System.Net.Sockets.Socket> sends an Internet Group Management Protocol (IGMP) packet to the router, removing the router from the multicast group. After a <xref:System.Net.Sockets.UdpClient> withdraws from the group, it will no longer be able to receive datagrams sent to that group.      > [!NOTE] >  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The DropMulticastGroup method withdraws the &lt;xref:System.Net.Sockets.UdpClient&gt; from the multicast group identified by the specified &lt;xref:System.Net.IPAddress&gt;.","pos":[0,161],"source":"The DropMulticastGroup method withdraws the <xref:System.Net.Sockets.UdpClient> from the multicast group identified by the specified <xref:System.Net.IPAddress>."},{"content":"After calling the DropMulticastGroup method, the underlying &lt;xref:System.Net.Sockets.Socket&gt; sends an Internet Group Management Protocol (IGMP) packet to the router, removing the router from the multicast group.","pos":[162,373],"source":" After calling the DropMulticastGroup method, the underlying <xref:System.Net.Sockets.Socket> sends an Internet Group Management Protocol (IGMP) packet to the router, removing the router from the multicast group."},{"content":"After a &lt;xref:System.Net.Sockets.UdpClient&gt; withdraws from the group, it will no longer be able to receive datagrams sent to that group.","pos":[374,510],"source":" After a <xref:System.Net.Sockets.UdpClient> withdraws from the group, it will no longer be able to receive datagrams sent to that group."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If you receive a &lt;xref:System.Net.Sockets.SocketException&gt;, use &lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt; to obtain the specific error code.","pos":[516,707],"source":"      > [!NOTE] >  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code."},{"content":"Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[708,866]}]},{"pos":[61546,61610],"content":"The <xref:System.Net.IPAddress> of the multicast group to leave.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Net.IPAddress&gt; of the multicast group to leave.","pos":[0,64],"source":"The <xref:System.Net.IPAddress> of the multicast group to leave."}]},{"pos":[61792,61856],"content":"The underlying <xref:System.Net.Sockets.Socket> has been closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The underlying &lt;xref:System.Net.Sockets.Socket&gt; has been closed.","pos":[0,64],"source":"The underlying <xref:System.Net.Sockets.Socket> has been closed."}]},{"pos":[61971,62061],"content":"An error occurred when accessing the socket. See the Remarks section for more information.","needQuote":true,"needEscape":true,"nodes":[{"content":"An error occurred when accessing the socket. See the Remarks section for more information.","pos":[0,90],"nodes":[{"content":"An error occurred when accessing the socket.","pos":[0,44]},{"content":"See the Remarks section for more information.","pos":[45,90]}]}]},{"pos":[62156,62293],"content":"The IP address is not compatible with the <xref:System.Net.Sockets.AddressFamily> value that defines the addressing scheme of the socket.","needQuote":true,"needEscape":true,"nodes":[{"content":"The IP address is not compatible with the &lt;xref:System.Net.Sockets.AddressFamily&gt; value that defines the addressing scheme of the socket.","pos":[0,137],"source":"The IP address is not compatible with the <xref:System.Net.Sockets.AddressFamily> value that defines the addressing scheme of the socket."}]},{"pos":[62396,62487],"content":"<ph id=\"ph1\">&lt;code&gt;multicastAddr&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>multicastAddr</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[62986,63011],"content":"Leaves a multicast group.","needQuote":true,"needEscape":true,"nodes":[{"content":"Leaves a multicast group.","pos":[0,25]}]},{"pos":[63024,63907],"content":"The DropMulticastGroup method withdraws the <xref:System.Net.Sockets.UdpClient> from the multicast group identified by the specified <xref:System.Net.IPAddress>. After calling the DropMulticastGroup method, the underlying <xref:System.Net.Sockets.Socket> sends an Internet Group Management Protocol (IGMP) packet to the router, removing the router from the multicast group. After a <xref:System.Net.Sockets.UdpClient> withdraws from the group, it will no longer be able to receive datagrams sent to that group.      > [!NOTE] >  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The DropMulticastGroup method withdraws the &lt;xref:System.Net.Sockets.UdpClient&gt; from the multicast group identified by the specified &lt;xref:System.Net.IPAddress&gt;.","pos":[0,161],"source":"The DropMulticastGroup method withdraws the <xref:System.Net.Sockets.UdpClient> from the multicast group identified by the specified <xref:System.Net.IPAddress>."},{"content":"After calling the DropMulticastGroup method, the underlying &lt;xref:System.Net.Sockets.Socket&gt; sends an Internet Group Management Protocol (IGMP) packet to the router, removing the router from the multicast group.","pos":[162,373],"source":" After calling the DropMulticastGroup method, the underlying <xref:System.Net.Sockets.Socket> sends an Internet Group Management Protocol (IGMP) packet to the router, removing the router from the multicast group."},{"content":"After a &lt;xref:System.Net.Sockets.UdpClient&gt; withdraws from the group, it will no longer be able to receive datagrams sent to that group.","pos":[374,510],"source":" After a <xref:System.Net.Sockets.UdpClient> withdraws from the group, it will no longer be able to receive datagrams sent to that group."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If you receive a &lt;xref:System.Net.Sockets.SocketException&gt;, use the &lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt; property to obtain the specific error code.","pos":[516,720],"source":"      > [!NOTE] >  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code."},{"content":"After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[721,880]}]},{"pos":[64597,64661],"content":"The <xref:System.Net.IPAddress> of the multicast group to leave.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Net.IPAddress&gt; of the multicast group to leave.","pos":[0,64],"source":"The <xref:System.Net.IPAddress> of the multicast group to leave."}]},{"pos":[64724,64774],"content":"The local address of the multicast group to leave.","needQuote":true,"needEscape":true,"nodes":[{"content":"The local address of the multicast group to leave.","pos":[0,50]}]},{"pos":[64956,65020],"content":"The underlying <xref:System.Net.Sockets.Socket> has been closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The underlying &lt;xref:System.Net.Sockets.Socket&gt; has been closed.","pos":[0,64],"source":"The underlying <xref:System.Net.Sockets.Socket> has been closed."}]},{"pos":[65135,65225],"content":"An error occurred when accessing the socket. See the Remarks section for more information.","needQuote":true,"needEscape":true,"nodes":[{"content":"An error occurred when accessing the socket. See the Remarks section for more information.","pos":[0,90],"nodes":[{"content":"An error occurred when accessing the socket.","pos":[0,44]},{"content":"See the Remarks section for more information.","pos":[45,90]}]}]},{"pos":[65320,65457],"content":"The IP address is not compatible with the <xref:System.Net.Sockets.AddressFamily> value that defines the addressing scheme of the socket.","needQuote":true,"needEscape":true,"nodes":[{"content":"The IP address is not compatible with the &lt;xref:System.Net.Sockets.AddressFamily&gt; value that defines the addressing scheme of the socket.","pos":[0,137],"source":"The IP address is not compatible with the <xref:System.Net.Sockets.AddressFamily> value that defines the addressing scheme of the socket."}]},{"pos":[65560,65651],"content":"<ph id=\"ph1\">&lt;code&gt;multicastAddr&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>multicastAddr</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[66016,66174],"content":"Gets or sets a &lt;xref:System.Boolean&gt; value that specifies whether the <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> may send or receive broadcast packets.","needQuote":true,"needEscape":true,"source":"Gets or sets a <xref:System.Boolean> value that specifies whether the <xref href=\"System.Net.Sockets.UdpClient\"></xref> may send or receive broadcast packets."},{"pos":[66186,66674],"content":"Broadcasting is limited to a specific subnet. You can broadcast to your local subnet by sending a packet to 255.255.255.255; or, you can use the directed broadcast address, which is the network portion of an Internet Protocol (IP) address with all bits set in the host portion. For example, if your IP address is 192.168.1.40 (a Class C address, with the network portion as the first three octets, and the host portion is the last octet), your directed broadcast address is 192.168.1.255.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Broadcasting is limited to a specific subnet. You can broadcast to your local subnet by sending a packet to 255.255.255.255; or, you can use the directed broadcast address, which is the network portion of an Internet Protocol (IP) address with all bits set in the host portion. For example, if your IP address is 192.168.1.40 (a Class C address, with the network portion as the first three octets, and the host portion is the last octet), your directed broadcast address is 192.168.1.255.","pos":[0,488],"nodes":[{"content":"Broadcasting is limited to a specific subnet.","pos":[0,45]},{"content":"You can broadcast to your local subnet by sending a packet to 255.255.255.255; or, you can use the directed broadcast address, which is the network portion of an Internet Protocol (IP) address with all bits set in the host portion.","pos":[46,277]},{"content":"For example, if your IP address is 192.168.1.40 (a Class C address, with the network portion as the first three octets, and the host portion is the last octet), your directed broadcast address is 192.168.1.255.","pos":[278,488]}]}]},{"pos":[67100,67397],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Net.Sockets.UdpClient\"></xref> allows broadcast packets; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the <bpt id=\"p2\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> allows broadcast packets; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","pos":[0,218],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Net.Sockets.UdpClient\"></xref> allows broadcast packets; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","pos":[219,297],"source":" The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."}]},{"pos":[67973,68009],"content":"Ends a pending asynchronous receive.","needQuote":true,"needEscape":true,"nodes":[{"content":"Ends a pending asynchronous receive.","pos":[0,36]}]},{"pos":[68022,68185],"content":"This method blocks until the operation is complete.       To perform this operation synchronously, use the <xref:System.Net.Sockets.UdpClient.Receive%2A> method.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method blocks until the operation is complete.       To perform this operation synchronously, use the <xref:System.Net.Sockets.UdpClient.Receive%2A> method.","pos":[0,161],"nodes":[{"content":"This method blocks until the operation is complete.","pos":[0,51]},{"content":"To perform this operation synchronously, use the &lt;xref:System.Net.Sockets.UdpClient.Receive%2A&gt; method.","pos":[58,161],"source":"       To perform this operation synchronously, use the <xref:System.Net.Sockets.UdpClient.Receive%2A> method."}]}]},{"pos":[68753,68862],"content":"An <xref:System.IAsyncResult> object returned by a call to <xref:System.Net.Sockets.UdpClient.BeginReceive*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.IAsyncResult&gt; object returned by a call to &lt;xref:System.Net.Sockets.UdpClient.BeginReceive*&gt;.","pos":[0,109],"source":"An <xref:System.IAsyncResult> object returned by a call to <xref:System.Net.Sockets.UdpClient.BeginReceive*>."}]},{"pos":[68935,68965],"content":"The specified remote endpoint.","needQuote":true,"needEscape":true,"nodes":[{"content":"The specified remote endpoint.","pos":[0,30]}]},{"pos":[69023,69107],"content":"If successful, the number of bytes received. If unsuccessful, this method returns 0.","needQuote":true,"needEscape":true,"nodes":[{"content":"If successful, the number of bytes received. If unsuccessful, this method returns 0.","pos":[0,84],"nodes":[{"content":"If successful, the number of bytes received.","pos":[0,44]},{"content":"If unsuccessful, this method returns 0.","pos":[45,84]}]}]},{"pos":[69277,69366],"content":"<ph id=\"ph1\">&lt;code&gt;asyncResult&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>asyncResult</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[69461,69577],"content":"<ph id=\"ph1\">&lt;code&gt;asyncResult&lt;/code&gt;</ph> was not returned by a call to the <ph id=\"ph2\">&lt;xref:System.Net.Sockets.UdpClient.BeginReceive*&gt;</ph> method.","needQuote":true,"needEscape":true,"source":"<code>asyncResult</code> was not returned by a call to the <xref:System.Net.Sockets.UdpClient.BeginReceive*> method."},{"pos":[69688,69747],"content":"EndReceive was previously called for the asynchronous read.","needQuote":true,"needEscape":true,"nodes":[{"content":"EndReceive was previously called for the asynchronous read.","pos":[0,59]}]},{"pos":[69862,70000],"content":"An error occurred when attempting to access the underlying <xref:System.Net.Sockets.Socket>. See the Remarks section for more information.","needQuote":true,"needEscape":true,"nodes":[{"content":"An error occurred when attempting to access the underlying <xref:System.Net.Sockets.Socket>. See the Remarks section for more information.","pos":[0,138],"nodes":[{"content":"An error occurred when attempting to access the underlying &lt;xref:System.Net.Sockets.Socket&gt;.","pos":[0,92],"source":"An error occurred when attempting to access the underlying <xref:System.Net.Sockets.Socket>."},{"content":"See the Remarks section for more information.","pos":[93,138]}]}]},{"pos":[70107,70171],"content":"The underlying <xref:System.Net.Sockets.Socket> has been closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The underlying &lt;xref:System.Net.Sockets.Socket&gt; has been closed.","pos":[0,64],"source":"The underlying <xref:System.Net.Sockets.Socket> has been closed."}]},{"pos":[70578,70611],"content":"Ends a pending asynchronous send.","needQuote":true,"needEscape":true,"nodes":[{"content":"Ends a pending asynchronous send.","pos":[0,33]}]},{"pos":[70624,70784],"content":"This method blocks until the operation is complete.       To perform this operation synchronously, use the <xref:System.Net.Sockets.UdpClient.Send%2A> method.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method blocks until the operation is complete.       To perform this operation synchronously, use the <xref:System.Net.Sockets.UdpClient.Send%2A> method.","pos":[0,158],"nodes":[{"content":"This method blocks until the operation is complete.","pos":[0,51]},{"content":"To perform this operation synchronously, use the &lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt; method.","pos":[58,158],"source":"       To perform this operation synchronously, use the <xref:System.Net.Sockets.UdpClient.Send%2A> method."}]}]},{"pos":[71310,71416],"content":"An <xref:System.IAsyncResult> object returned by a call to <xref:System.Net.Sockets.UdpClient.BeginSend*>.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.IAsyncResult&gt; object returned by a call to &lt;xref:System.Net.Sockets.UdpClient.BeginSend*&gt;.","pos":[0,106],"source":"An <xref:System.IAsyncResult> object returned by a call to <xref:System.Net.Sockets.UdpClient.BeginSend*>."}]},{"pos":[71473,71570],"content":"If successful, the number of bytes sent to the <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"If successful, the number of bytes sent to the <xref href=\"System.Net.Sockets.UdpClient\"></xref>."},{"pos":[71737,71826],"content":"<ph id=\"ph1\">&lt;code&gt;asyncResult&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>asyncResult</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[71921,72031],"content":"<ph id=\"ph1\">&lt;code&gt;asyncResult&lt;/code&gt;</ph> was not returned by a call to the <ph id=\"ph2\">&lt;xref:System.Net.Sockets.Socket.BeginSend*&gt;</ph> method.","needQuote":true,"needEscape":true,"source":"<code>asyncResult</code> was not returned by a call to the <xref:System.Net.Sockets.Socket.BeginSend*> method."},{"pos":[72142,72232],"content":"<xref:System.Net.Sockets.Socket.EndSend*> was previously called for the asynchronous read.","needQuote":true,"needEscape":true,"nodes":[{"content":"&lt;xref:System.Net.Sockets.Socket.EndSend*&gt; was previously called for the asynchronous read.","pos":[0,90],"source":"<xref:System.Net.Sockets.Socket.EndSend*> was previously called for the asynchronous read."}]},{"pos":[72347,72459],"content":"An error occurred when attempting to access the underlying socket. See the Remarks section for more information.","needQuote":true,"needEscape":true,"nodes":[{"content":"An error occurred when attempting to access the underlying socket. See the Remarks section for more information.","pos":[0,112],"nodes":[{"content":"An error occurred when attempting to access the underlying socket.","pos":[0,66]},{"content":"See the Remarks section for more information.","pos":[67,112]}]}]},{"pos":[72566,72630],"content":"The underlying <xref:System.Net.Sockets.Socket> has been closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The underlying &lt;xref:System.Net.Sockets.Socket&gt; has been closed.","pos":[0,64],"source":"The underlying <xref:System.Net.Sockets.Socket> has been closed."}]},{"pos":[73015,73172],"content":"Gets or sets a &lt;xref:System.Boolean&gt; value that specifies whether the <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> allows only one client to use a port.","needQuote":true,"needEscape":true,"source":"Gets or sets a <xref:System.Boolean> value that specifies whether the <xref href=\"System.Net.Sockets.UdpClient\"></xref> allows only one client to use a port."},{"pos":[73185,74080],"content":"By default, multiple clients can use a specific port; however, only one of the clients can perform operations on the network traffic sent to the port. You can use the ExclusiveAddressUse property to prevent multiple clients from using a specific port.       This property must be set before the underlying socket is bound to a client port. If you call <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%29?displayProperty=fullName>, <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%2CSystem.Net.Sockets.AddressFamily%29?displayProperty=fullName>, <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.IPEndPoint%29?displayProperty=fullName>, or <xref:System.Net.Sockets.UdpClient.%23ctor%28System.String%2CSystem.Int32%29?displayProperty=fullName>, the client port is bound as a side effect of the constructor, and you cannot subsequently set the ExclusiveAddressUse property","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"By default, multiple clients can use a specific port; however, only one of the clients can perform operations on the network traffic sent to the port. You can use the ExclusiveAddressUse property to prevent multiple clients from using a specific port.       This property must be set before the underlying socket is bound to a client port. If you call <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%29?displayProperty=fullName>, <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%2CSystem.Net.Sockets.AddressFamily%29?displayProperty=fullName>, <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.IPEndPoint%29?displayProperty=fullName>, or <xref:System.Net.Sockets.UdpClient.%23ctor%28System.String%2CSystem.Int32%29?displayProperty=fullName>, the client port is bound as a side effect of the constructor, and you cannot subsequently set the ExclusiveAddressUse property","pos":[0,893],"nodes":[{"content":"By default, multiple clients can use a specific port; however, only one of the clients can perform operations on the network traffic sent to the port.","pos":[0,150]},{"content":"You can use the ExclusiveAddressUse property to prevent multiple clients from using a specific port.","pos":[151,251]},{"content":"This property must be set before the underlying socket is bound to a client port.","pos":[258,339]},{"content":"If you call &lt;xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%29?displayProperty=fullName&gt;, &lt;xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%2CSystem.Net.Sockets.AddressFamily%29?displayProperty=fullName&gt;, &lt;xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.IPEndPoint%29?displayProperty=fullName&gt;, or &lt;xref:System.Net.Sockets.UdpClient.%23ctor%28System.String%2CSystem.Int32%29?displayProperty=fullName&gt;, the client port is bound as a side effect of the constructor, and you cannot subsequently set the ExclusiveAddressUse property","pos":[340,893],"source":" If you call <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%29?displayProperty=fullName>, <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%2CSystem.Net.Sockets.AddressFamily%29?displayProperty=fullName>, <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.IPEndPoint%29?displayProperty=fullName>, or <xref:System.Net.Sockets.UdpClient.%23ctor%28System.String%2CSystem.Int32%29?displayProperty=fullName>, the client port is bound as a side effect of the constructor, and you cannot subsequently set the ExclusiveAddressUse property"}]}]},{"pos":[74563,75034],"content":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Net.Sockets.UdpClient\"></xref> allows only one client to use a specific port; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> for Windows Server 2003 and Windows XP Service Pack 2 and later, and <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> for all other versions.","needQuote":true,"needEscape":true,"nodes":[{"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the <bpt id=\"p2\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> allows only one client to use a specific port; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","pos":[0,239],"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Net.Sockets.UdpClient\"></xref> allows only one client to use a specific port; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"content":"The default is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> for Windows Server 2003 and Windows XP Service Pack 2 and later, and <bpt id=\"p2\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> for all other versions.","pos":[240,471],"source":" The default is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> for Windows Server 2003 and Windows XP Service Pack 2 and later, and <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> for all other versions."}]},{"pos":[75225,75291],"content":"An error occurred when attempting to access the underlying socket.","needQuote":true,"needEscape":true,"nodes":[{"content":"An error occurred when attempting to access the underlying socket.","pos":[0,66]}]},{"pos":[75398,75462],"content":"The underlying <xref:System.Net.Sockets.Socket> has been closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The underlying &lt;xref:System.Net.Sockets.Socket&gt; has been closed.","pos":[0,64],"source":"The underlying <xref:System.Net.Sockets.Socket> has been closed."}]},{"pos":[75917,75995],"content":"Adds a <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to a multicast group.","needQuote":true,"needEscape":true,"source":"Adds a <xref href=\"System.Net.Sockets.UdpClient\"></xref> to a multicast group."},{"pos":[76008,78539],"content":"The JoinMulticastGroup method subscribes the <xref:System.Net.Sockets.UdpClient> to a multicast group using the specified <xref:System.Net.IPAddress>. After calling the JoinMulticastGroup method, the underlying <xref:System.Net.Sockets.Socket> sends an Internet Group Management Protocol (IGMP) packet to the router requesting membership to the multicast group. The multicast address range is 224.0.0.0 to 239.255.255.255. If you specify an address outside this range or if the router to which the request is made is not multicast enabled, <xref:System.Net.Sockets.UdpClient> will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error. Once the <xref:System.Net.Sockets.UdpClient> is listed with the router as a member of the multicast group, it will be able to receive multicasted datagrams sent to the specified <xref:System.Net.IPAddress>.      > [!NOTE] >  You must create the <xref:System.Net.Sockets.UdpClient> using the multicast port number; otherwise, you will not be able to receive multicasted datagrams. Do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method prior to calling the JoinMulticastGroup method, or the <xref:System.Net.Sockets.UdpClient.Receive%2A> method will not work. You do not need to belong to a multicast group to send datagrams to a multicast IP address.       Before joining a multicast group, make sure the socket is bound to the port or endpoint. You do that by calling one of the constructors that accept a port or an endpoint as a parameter.       To stop receiving multicasted datagrams, call the <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method and provide the <xref:System.Net.IPAddress> of the group from which you would like to withdraw.      > [!NOTE] >  In the IPv6 case, there are several multicast address ranges you can choose from. Please, refer to the IETF RFC 2375.      > [!NOTE] >  You cannot call <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> on a <xref:System.Net.Sockets.UdpClient> constructed without a specific local port (that is, using the <xref:System.Net.Sockets.UdpClient.%23ctor> or <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29> constructor).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The JoinMulticastGroup method subscribes the &lt;xref:System.Net.Sockets.UdpClient&gt; to a multicast group using the specified &lt;xref:System.Net.IPAddress&gt;.","pos":[0,150],"source":"The JoinMulticastGroup method subscribes the <xref:System.Net.Sockets.UdpClient> to a multicast group using the specified <xref:System.Net.IPAddress>."},{"content":"After calling the JoinMulticastGroup method, the underlying &lt;xref:System.Net.Sockets.Socket&gt; sends an Internet Group Management Protocol (IGMP) packet to the router requesting membership to the multicast group.","pos":[151,361],"source":" After calling the JoinMulticastGroup method, the underlying <xref:System.Net.Sockets.Socket> sends an Internet Group Management Protocol (IGMP) packet to the router requesting membership to the multicast group."},{"content":"The multicast address range is 224.0.0.0 to 239.255.255.255.","pos":[362,422]},{"content":"If you specify an address outside this range or if the router to which the request is made is not multicast enabled, &lt;xref:System.Net.Sockets.UdpClient&gt; will throw a &lt;xref:System.Net.Sockets.SocketException&gt;.","pos":[423,631],"source":" If you specify an address outside this range or if the router to which the request is made is not multicast enabled, <xref:System.Net.Sockets.UdpClient> will throw a <xref:System.Net.Sockets.SocketException>."},{"content":"If you receive a &lt;xref:System.Net.Sockets.SocketException&gt;, use &lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt; to obtain the specific error code.","pos":[632,810],"source":" If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code."},{"content":"Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[811,969]},{"content":"Once the &lt;xref:System.Net.Sockets.UdpClient&gt; is listed with the router as a member of the multicast group, it will be able to receive multicasted datagrams sent to the specified &lt;xref:System.Net.IPAddress&gt;.","pos":[970,1176],"source":" Once the <xref:System.Net.Sockets.UdpClient> is listed with the router as a member of the multicast group, it will be able to receive multicasted datagrams sent to the specified <xref:System.Net.IPAddress>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  You must create the &lt;xref:System.Net.Sockets.UdpClient&gt; using the multicast port number; otherwise, you will not be able to receive multicasted datagrams.","pos":[1182,1349],"source":"      > [!NOTE] >  You must create the <xref:System.Net.Sockets.UdpClient> using the multicast port number; otherwise, you will not be able to receive multicasted datagrams."},{"content":"Do not call the &lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt; method prior to calling the JoinMulticastGroup method, or the &lt;xref:System.Net.Sockets.UdpClient.Receive%2A&gt; method will not work.","pos":[1350,1543],"source":" Do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method prior to calling the JoinMulticastGroup method, or the <xref:System.Net.Sockets.UdpClient.Receive%2A> method will not work."},{"content":"You do not need to belong to a multicast group to send datagrams to a multicast IP address.","pos":[1544,1635]},{"content":"Before joining a multicast group, make sure the socket is bound to the port or endpoint.","pos":[1642,1730]},{"content":"You do that by calling one of the constructors that accept a port or an endpoint as a parameter.","pos":[1731,1827]},{"content":"To stop receiving multicasted datagrams, call the &lt;xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A&gt; method and provide the &lt;xref:System.Net.IPAddress&gt; of the group from which you would like to withdraw.","pos":[1834,2044],"source":"       To stop receiving multicasted datagrams, call the <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method and provide the <xref:System.Net.IPAddress> of the group from which you would like to withdraw."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  In the IPv6 case, there are several multicast address ranges you can choose from.","pos":[2050,2144],"source":"      > [!NOTE] >  In the IPv6 case, there are several multicast address ranges you can choose from."},{"content":"Please, refer to the IETF RFC 2375.","pos":[2145,2180]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  You cannot call &lt;xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A&gt; on a &lt;xref:System.Net.Sockets.UdpClient&gt; constructed without a specific local port (that is, using the &lt;xref:System.Net.Sockets.UdpClient.%23ctor&gt; or &lt;xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29&gt; constructor).","pos":[2186,2518],"source":"      > [!NOTE] >  You cannot call <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> on a <xref:System.Net.Sockets.UdpClient> constructed without a specific local port (that is, using the <xref:System.Net.Sockets.UdpClient.%23ctor> or <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29> constructor)."}]},{"pos":[79222,79294],"content":"The multicast <xref:System.Net.IPAddress> of the group you want to join.","needQuote":true,"needEscape":true,"nodes":[{"content":"The multicast &lt;xref:System.Net.IPAddress&gt; of the group you want to join.","pos":[0,72],"source":"The multicast <xref:System.Net.IPAddress> of the group you want to join."}]},{"pos":[79476,79540],"content":"The underlying <xref:System.Net.Sockets.Socket> has been closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The underlying &lt;xref:System.Net.Sockets.Socket&gt; has been closed.","pos":[0,64],"source":"The underlying <xref:System.Net.Sockets.Socket> has been closed."}]},{"pos":[79655,79745],"content":"An error occurred when accessing the socket. See the Remarks section for more information.","needQuote":true,"needEscape":true,"nodes":[{"content":"An error occurred when accessing the socket. See the Remarks section for more information.","pos":[0,90],"nodes":[{"content":"An error occurred when accessing the socket.","pos":[0,44]},{"content":"See the Remarks section for more information.","pos":[45,90]}]}]},{"pos":[79840,79977],"content":"The IP address is not compatible with the <xref:System.Net.Sockets.AddressFamily> value that defines the addressing scheme of the socket.","needQuote":true,"needEscape":true,"nodes":[{"content":"The IP address is not compatible with the &lt;xref:System.Net.Sockets.AddressFamily&gt; value that defines the addressing scheme of the socket.","pos":[0,137],"source":"The IP address is not compatible with the <xref:System.Net.Sockets.AddressFamily> value that defines the addressing scheme of the socket."}]},{"pos":[80476,80554],"content":"Adds a <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to a multicast group.","needQuote":true,"needEscape":true,"source":"Adds a <xref href=\"System.Net.Sockets.UdpClient\"></xref> to a multicast group."},{"pos":[80567,81344],"content":"Before joining a multicast group, be sure the socket is bound to the port or endpoint. You can do this by calling one of the constructors that accepts a port or an endpoint as parameter.       The `infindex` parameter is used to identify a hardware interface on the same link.      > [!NOTE] >  There are several multicast address ranges to choose from. Refer to the IETF RFC 2375.      > [!NOTE] >  You cannot call <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> on a <xref:System.Net.Sockets.UdpClient> constructed without a specific local port (that is, using the <xref:System.Net.Sockets.UdpClient.%23ctor?displayProperty=fullName> or <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29?displayProperty=fullName> constructor).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Before joining a multicast group, be sure the socket is bound to the port or endpoint.","pos":[0,86]},{"content":"You can do this by calling one of the constructors that accepts a port or an endpoint as parameter.","pos":[87,186]},{"content":"The <ph id=\"ph1\">`infindex`</ph> parameter is used to identify a hardware interface on the same link.","pos":[193,276],"source":"       The `infindex` parameter is used to identify a hardware interface on the same link."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  There are several multicast address ranges to choose from.","pos":[282,353],"source":"      > [!NOTE] >  There are several multicast address ranges to choose from."},{"content":"Refer to the IETF RFC 2375.","pos":[354,381]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  You cannot call &lt;xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A&gt; on a &lt;xref:System.Net.Sockets.UdpClient&gt; constructed without a specific local port (that is, using the &lt;xref:System.Net.Sockets.UdpClient.%23ctor?displayProperty=fullName&gt; or &lt;xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29?displayProperty=fullName&gt; constructor).","pos":[387,769],"source":"      > [!NOTE] >  You cannot call <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> on a <xref:System.Net.Sockets.UdpClient> constructed without a specific local port (that is, using the <xref:System.Net.Sockets.UdpClient.%23ctor?displayProperty=fullName> or <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29?displayProperty=fullName> constructor)."}]},{"pos":[81919,82013],"content":"The interface index associated with the local IP address on which to join the multicast group.","needQuote":true,"needEscape":true,"nodes":[{"content":"The interface index associated with the local IP address on which to join the multicast group.","pos":[0,94]}]},{"pos":[82090,82162],"content":"The multicast <xref:System.Net.IPAddress> of the group you want to join.","needQuote":true,"needEscape":true,"nodes":[{"content":"The multicast &lt;xref:System.Net.IPAddress&gt; of the group you want to join.","pos":[0,72],"source":"The multicast <xref:System.Net.IPAddress> of the group you want to join."}]},{"pos":[82344,82408],"content":"The underlying <xref:System.Net.Sockets.Socket> has been closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The underlying &lt;xref:System.Net.Sockets.Socket&gt; has been closed.","pos":[0,64],"source":"The underlying <xref:System.Net.Sockets.Socket> has been closed."}]},{"pos":[82523,82613],"content":"An error occurred when accessing the socket. See the Remarks section for more information.","needQuote":true,"needEscape":true,"nodes":[{"content":"An error occurred when accessing the socket. See the Remarks section for more information.","pos":[0,90],"nodes":[{"content":"An error occurred when accessing the socket.","pos":[0,44]},{"content":"See the Remarks section for more information.","pos":[45,90]}]}]},{"pos":[83112,83228],"content":"Adds a <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to a multicast group with the specified Time to Live (TTL).","needQuote":true,"needEscape":true,"source":"Adds a <xref href=\"System.Net.Sockets.UdpClient\"></xref> to a multicast group with the specified Time to Live (TTL)."},{"pos":[83241,85830],"content":"The <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method subscribes the <xref:System.Net.Sockets.UdpClient> to a multicast group using the specified <xref:System.Net.IPAddress>. After calling the <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method, the underlying <xref:System.Net.Sockets.Socket> sends an Internet Group Management Protocol (IGMP) packet to the router requesting membership to the multicast group. The multicast address range is 224.0.0.0 to 239.255.255.255. If you specify an address outside this range or if the router to which the request is made is not multicast enabled, <xref:System.Net.Sockets.UdpClient> will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error. The `timeToLive` parameter specifies how many router hops will be allowed for a multicasted datagram before being discarded. Once the <xref:System.Net.Sockets.UdpClient> is listed with the router as a member of the multicast group, it will be able to receive multicasted datagrams sent to the specified <xref:System.Net.IPAddress>.      > [!NOTE] >  You must create the <xref:System.Net.Sockets.UdpClient> using the multicast port number otherwise you will not be able to receive multicasted datagrams. Do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method prior to calling the <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method or the receive method will not work. You do not need to belong to a multicast group to send datagrams to a multicast IP address.       Before joining a multicast group make sure the socket is bound to the port or endpoint. You do that by calling one of the constructors that accept as parameter a port or an endpoint.       To stop receiving multicasted datagrams, call the <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method and provide the <xref:System.Net.IPAddress> of the group from which you would like to withdraw.      > [!NOTE] >  You cannot call <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> on a <xref:System.Net.Sockets.UdpClient> constructed without a specific local port (that is, using the <xref:System.Net.Sockets.UdpClient.%23ctor> or <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29> constructor).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A&gt; method subscribes the &lt;xref:System.Net.Sockets.UdpClient&gt; to a multicast group using the specified &lt;xref:System.Net.IPAddress&gt;.","pos":[0,189],"source":"The <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method subscribes the <xref:System.Net.Sockets.UdpClient> to a multicast group using the specified <xref:System.Net.IPAddress>."},{"content":"After calling the &lt;xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A&gt; method, the underlying &lt;xref:System.Net.Sockets.Socket&gt; sends an Internet Group Management Protocol (IGMP) packet to the router requesting membership to the multicast group.","pos":[190,439],"source":" After calling the <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method, the underlying <xref:System.Net.Sockets.Socket> sends an Internet Group Management Protocol (IGMP) packet to the router requesting membership to the multicast group."},{"content":"The multicast address range is 224.0.0.0 to 239.255.255.255.","pos":[440,500]},{"content":"If you specify an address outside this range or if the router to which the request is made is not multicast enabled, &lt;xref:System.Net.Sockets.UdpClient&gt; will throw a &lt;xref:System.Net.Sockets.SocketException&gt;.","pos":[501,709],"source":" If you specify an address outside this range or if the router to which the request is made is not multicast enabled, <xref:System.Net.Sockets.UdpClient> will throw a <xref:System.Net.Sockets.SocketException>."},{"content":"If you receive a &lt;xref:System.Net.Sockets.SocketException&gt;, use &lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt; to obtain the specific error code.","pos":[710,888],"source":" If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code."},{"content":"Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[889,1047]},{"content":"The <ph id=\"ph1\">`timeToLive`</ph> parameter specifies how many router hops will be allowed for a multicasted datagram before being discarded.","pos":[1048,1172],"source":" The `timeToLive` parameter specifies how many router hops will be allowed for a multicasted datagram before being discarded."},{"content":"Once the &lt;xref:System.Net.Sockets.UdpClient&gt; is listed with the router as a member of the multicast group, it will be able to receive multicasted datagrams sent to the specified &lt;xref:System.Net.IPAddress&gt;.","pos":[1173,1379],"source":" Once the <xref:System.Net.Sockets.UdpClient> is listed with the router as a member of the multicast group, it will be able to receive multicasted datagrams sent to the specified <xref:System.Net.IPAddress>."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  You must create the &lt;xref:System.Net.Sockets.UdpClient&gt; using the multicast port number otherwise you will not be able to receive multicasted datagrams.","pos":[1385,1550],"source":"      > [!NOTE] >  You must create the <xref:System.Net.Sockets.UdpClient> using the multicast port number otherwise you will not be able to receive multicasted datagrams."},{"content":"Do not call the &lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt; method prior to calling the &lt;xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A&gt; method or the receive method will not work.","pos":[1551,1743],"source":" Do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method prior to calling the <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method or the receive method will not work."},{"content":"You do not need to belong to a multicast group to send datagrams to a multicast IP address.","pos":[1744,1835]},{"content":"Before joining a multicast group make sure the socket is bound to the port or endpoint.","pos":[1842,1929]},{"content":"You do that by calling one of the constructors that accept as parameter a port or an endpoint.","pos":[1930,2024]},{"content":"To stop receiving multicasted datagrams, call the &lt;xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A&gt; method and provide the &lt;xref:System.Net.IPAddress&gt; of the group from which you would like to withdraw.","pos":[2031,2241],"source":"       To stop receiving multicasted datagrams, call the <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method and provide the <xref:System.Net.IPAddress> of the group from which you would like to withdraw."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  You cannot call &lt;xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A&gt; on a &lt;xref:System.Net.Sockets.UdpClient&gt; constructed without a specific local port (that is, using the &lt;xref:System.Net.Sockets.UdpClient.%23ctor&gt; or &lt;xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29&gt; constructor).","pos":[2247,2579],"source":"      > [!NOTE] >  You cannot call <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> on a <xref:System.Net.Sockets.UdpClient> constructed without a specific local port (that is, using the <xref:System.Net.Sockets.UdpClient.%23ctor> or <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29> constructor)."}]},{"pos":[86587,86650],"content":"The <xref:System.Net.IPAddress> of the multicast group to join.","needQuote":true,"needEscape":true,"nodes":[{"content":"The &lt;xref:System.Net.IPAddress&gt; of the multicast group to join.","pos":[0,63],"source":"The <xref:System.Net.IPAddress> of the multicast group to join."}]},{"pos":[86716,86764],"content":"The Time to Live (TTL), measured in router hops.","needQuote":true,"needEscape":true,"nodes":[{"content":"The Time to Live (TTL), measured in router hops.","pos":[0,48]}]},{"pos":[86954,86995],"content":"The TTL provided is not between 0 and 255","needQuote":true,"needEscape":true,"nodes":[{"content":"The TTL provided is not between 0 and 255","pos":[0,41]}]},{"pos":[87102,87166],"content":"The underlying <xref:System.Net.Sockets.Socket> has been closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The underlying &lt;xref:System.Net.Sockets.Socket&gt; has been closed.","pos":[0,64],"source":"The underlying <xref:System.Net.Sockets.Socket> has been closed."}]},{"pos":[87281,87371],"content":"An error occurred when accessing the socket. See the Remarks section for more information.","needQuote":true,"needEscape":true,"nodes":[{"content":"An error occurred when accessing the socket. See the Remarks section for more information.","pos":[0,90],"nodes":[{"content":"An error occurred when accessing the socket.","pos":[0,44]},{"content":"See the Remarks section for more information.","pos":[45,90]}]}]},{"pos":[87474,87565],"content":"<ph id=\"ph1\">&lt;code&gt;multicastAddr&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>multicastAddr</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[87660,87797],"content":"The IP address is not compatible with the <xref:System.Net.Sockets.AddressFamily> value that defines the addressing scheme of the socket.","needQuote":true,"needEscape":true,"nodes":[{"content":"The IP address is not compatible with the &lt;xref:System.Net.Sockets.AddressFamily&gt; value that defines the addressing scheme of the socket.","pos":[0,137],"source":"The IP address is not compatible with the <xref:System.Net.Sockets.AddressFamily> value that defines the addressing scheme of the socket."}]},{"pos":[88324,88402],"content":"Adds a <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> to a multicast group.","needQuote":true,"needEscape":true,"source":"Adds a <xref href=\"System.Net.Sockets.UdpClient\"></xref> to a multicast group."},{"pos":[88415,89068],"content":"Before you join a multicast group, be sure that the socket is bound to the port or endpoint. You can do this by calling one of the constructors that accepts a port or an endpoint as parameter.      > [!NOTE] >  There are several multicast address ranges to choose from. You can find them in the IETF RFC 2375.      > [!NOTE] >  You cannot call <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> on a <xref:System.Net.Sockets.UdpClient> constructed without a specific local port (that is, using the <xref:System.Net.Sockets.UdpClient.%23ctor> or <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29> constructor).","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"Before you join a multicast group, be sure that the socket is bound to the port or endpoint.","pos":[0,92]},{"content":"You can do this by calling one of the constructors that accepts a port or an endpoint as parameter.","pos":[93,192]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  There are several multicast address ranges to choose from.","pos":[198,269],"source":"      > [!NOTE] >  There are several multicast address ranges to choose from."},{"content":"You can find them in the IETF RFC 2375.","pos":[270,309]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  You cannot call &lt;xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A&gt; on a &lt;xref:System.Net.Sockets.UdpClient&gt; constructed without a specific local port (that is, using the &lt;xref:System.Net.Sockets.UdpClient.%23ctor&gt; or &lt;xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29&gt; constructor).","pos":[315,647],"source":"      > [!NOTE] >  You cannot call <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> on a <xref:System.Net.Sockets.UdpClient> constructed without a specific local port (that is, using the <xref:System.Net.Sockets.UdpClient.%23ctor> or <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29> constructor)."}]},{"pos":[89588,89660],"content":"The multicast <xref:System.Net.IPAddress> of the group you want to join.","needQuote":true,"needEscape":true,"nodes":[{"content":"The multicast &lt;xref:System.Net.IPAddress&gt; of the group you want to join.","pos":[0,72],"source":"The multicast <xref:System.Net.IPAddress> of the group you want to join."}]},{"pos":[89736,89774],"content":"The local <xref:System.Net.IPAddress>.","needQuote":true,"needEscape":true,"nodes":[{"content":"The local &lt;xref:System.Net.IPAddress&gt;.","pos":[0,38],"source":"The local <xref:System.Net.IPAddress>."}]},{"pos":[89956,90020],"content":"The underlying <xref:System.Net.Sockets.Socket> has been closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The underlying &lt;xref:System.Net.Sockets.Socket&gt; has been closed.","pos":[0,64],"source":"The underlying <xref:System.Net.Sockets.Socket> has been closed."}]},{"pos":[90135,90225],"content":"An error occurred when accessing the socket. See the Remarks section for more information.","needQuote":true,"needEscape":true,"nodes":[{"content":"An error occurred when accessing the socket. See the Remarks section for more information.","pos":[0,90],"nodes":[{"content":"An error occurred when accessing the socket.","pos":[0,44]},{"content":"See the Remarks section for more information.","pos":[45,90]}]}]},{"pos":[90600,90734],"content":"Gets or sets a <xref:System.Boolean> value that specifies whether outgoing multicast packets are delivered to the sending application.","needQuote":true,"needEscape":true,"nodes":[{"content":"Gets or sets a &lt;xref:System.Boolean&gt; value that specifies whether outgoing multicast packets are delivered to the sending application.","pos":[0,134],"source":"Gets or sets a <xref:System.Boolean> value that specifies whether outgoing multicast packets are delivered to the sending application."}]},{"pos":[90746,90987],"content":"Multicast is a scalable method for many-to-many communication on the Internet. If a process subscribes to a multicast address, any packets sent by that process are received by every other process that has subscribed to the multicast address.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"Multicast is a scalable method for many-to-many communication on the Internet. If a process subscribes to a multicast address, any packets sent by that process are received by every other process that has subscribed to the multicast address.","pos":[0,241],"nodes":[{"content":"Multicast is a scalable method for many-to-many communication on the Internet.","pos":[0,78]},{"content":"If a process subscribes to a multicast address, any packets sent by that process are received by every other process that has subscribed to the multicast address.","pos":[79,241]}]}]},{"pos":[91417,91646],"content":"<bpt id=\"p1\">&lt;xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> if the <bpt id=\"p2\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;</bpt><ept id=\"p2\">&lt;/xref&gt;</ept> receives outgoing multicast packets; otherwise, <bpt id=\"p3\">&lt;xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"&gt;</bpt><ept id=\"p3\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Net.Sockets.UdpClient\"></xref> receives outgoing multicast packets; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."},{"pos":[92130,92184],"content":"Returns a UDP datagram that was sent by a remote host.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a UDP datagram that was sent by a remote host.","pos":[0,54]}]},{"pos":[92197,93360],"content":"The Receive method will block until a datagram arrives from a remote host. When data is available, the Receive method will read the first enqueued datagram and return the data portion as a byte array. This method populates the `remoteEP` parameter with the <xref:System.Net.IPAddress> and port number of the sender.       If you specify a default remote host in the <xref:System.Net.Sockets.UdpClient.Connect%2A> method, the Receive method will accept datagrams from that host only. All other datagrams will be discarded.       If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.      > [!NOTE] >  If you intend to receive multicasted datagrams, do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method prior to calling the Receive method. The <xref:System.Net.Sockets.UdpClient> you use to receive datagrams must be created using the multicast port number.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Receive method will block until a datagram arrives from a remote host.","pos":[0,74]},{"content":"When data is available, the Receive method will read the first enqueued datagram and return the data portion as a byte array.","pos":[75,200]},{"content":"This method populates the <ph id=\"ph1\">`remoteEP`</ph> parameter with the &lt;xref:System.Net.IPAddress&gt; and port number of the sender.","pos":[201,315],"source":" This method populates the `remoteEP` parameter with the <xref:System.Net.IPAddress> and port number of the sender."},{"content":"If you specify a default remote host in the &lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt; method, the Receive method will accept datagrams from that host only.","pos":[322,482],"source":"       If you specify a default remote host in the <xref:System.Net.Sockets.UdpClient.Connect%2A> method, the Receive method will accept datagrams from that host only."},{"content":"All other datagrams will be discarded.","pos":[483,521]},{"content":"If you receive a &lt;xref:System.Net.Sockets.SocketException&gt;, use &lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt; to obtain the specific error code.","pos":[528,706],"source":"       If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code."},{"content":"Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[707,865]},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  If you intend to receive multicasted datagrams, do not call the &lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt; method prior to calling the Receive method.","pos":[871,1038],"source":"      > [!NOTE] >  If you intend to receive multicasted datagrams, do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method prior to calling the Receive method."},{"content":"The &lt;xref:System.Net.Sockets.UdpClient&gt; you use to receive datagrams must be created using the multicast port number.","pos":[1039,1156],"source":" The <xref:System.Net.Sockets.UdpClient> you use to receive datagrams must be created using the multicast port number."}]},{"pos":[94168,94261],"content":"An <xref:System.Net.IPEndPoint> that represents the remote host from which the data was sent.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Net.IPEndPoint&gt; that represents the remote host from which the data was sent.","pos":[0,93],"source":"An <xref:System.Net.IPEndPoint> that represents the remote host from which the data was sent."}]},{"pos":[94319,94383],"content":"An array of type <xref:System.Byte> that contains datagram data.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of type &lt;xref:System.Byte&gt; that contains datagram data.","pos":[0,64],"source":"An array of type <xref:System.Byte> that contains datagram data."}]},{"pos":[94554,94618],"content":"The underlying <xref:System.Net.Sockets.Socket> has been closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The underlying &lt;xref:System.Net.Sockets.Socket&gt; has been closed.","pos":[0,64],"source":"The underlying <xref:System.Net.Sockets.Socket> has been closed."}]},{"pos":[94733,94823],"content":"An error occurred when accessing the socket. See the Remarks section for more information.","needQuote":true,"needEscape":true,"nodes":[{"content":"An error occurred when accessing the socket. See the Remarks section for more information.","pos":[0,90],"nodes":[{"content":"An error occurred when accessing the socket.","pos":[0,44]},{"content":"See the Remarks section for more information.","pos":[45,90]}]}]},{"pos":[95177,95246],"content":"Returns a UDP datagram asynchronously that was sent by a remote host.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns a UDP datagram asynchronously that was sent by a remote host.","pos":[0,69]}]},{"pos":[95259,96240],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601>> object will complete after the UDP packet has been received.       If you specify a default remote host in the <xref:System.Net.Sockets.UdpClient.Connect%2A> method, this method will accept datagrams from that host only. All other datagrams will be discarded.       If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.      > [!WARNING] >  If you intend to receive multicasted datagrams, do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method prior to calling this method. The <xref:System.Net.Sockets.UdpClient> you use to receive datagrams must be created using the multicast port number.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned &lt;xref:System.Threading.Tasks.Task%601&gt;&gt; object will complete after the UDP packet has been received.","pos":[31,144],"source":" The returned <xref:System.Threading.Tasks.Task%601>> object will complete after the UDP packet has been received."},{"content":"If you specify a default remote host in the &lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt; method, this method will accept datagrams from that host only.","pos":[151,304],"source":"       If you specify a default remote host in the <xref:System.Net.Sockets.UdpClient.Connect%2A> method, this method will accept datagrams from that host only."},{"content":"All other datagrams will be discarded.","pos":[305,343]},{"content":"If you receive a &lt;xref:System.Net.Sockets.SocketException&gt;, use &lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt; to obtain the specific error code.","pos":[350,528],"source":"       If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code."},{"content":"Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[529,687]},{"content":"&gt; <ph id=\"ph1\">[!WARNING]</ph> &gt;  If you intend to receive multicasted datagrams, do not call the &lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt; method prior to calling this method.","pos":[693,856],"source":"      > [!WARNING] >  If you intend to receive multicasted datagrams, do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method prior to calling this method."},{"content":"The &lt;xref:System.Net.Sockets.UdpClient&gt; you use to receive datagrams must be created using the multicast port number.","pos":[857,974],"source":" The <xref:System.Net.Sockets.UdpClient> you use to receive datagrams must be created using the multicast port number."}]},{"pos":[96482,96600],"content":"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;.       The task object representing the asynchronous operation.","needQuote":false,"needEscape":true,"nodes":[{"content":"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;.       The task object representing the asynchronous operation.","pos":[0,116],"nodes":[{"content":"Returns <ph id=\"ph1\">&amp;lt;</ph>xref:System.Threading.Tasks.Task%601<ph id=\"ph2\">&amp;gt;</ph>.","pos":[0,53],"source":"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;."},{"content":"The task object representing the asynchronous operation.","pos":[60,116]}]}]},{"pos":[96777,96841],"content":"The underlying <xref:System.Net.Sockets.Socket> has been closed.","needQuote":true,"needEscape":true,"nodes":[{"content":"The underlying &lt;xref:System.Net.Sockets.Socket&gt; has been closed.","pos":[0,64],"source":"The underlying <xref:System.Net.Sockets.Socket> has been closed."}]},{"pos":[96956,97046],"content":"An error occurred when accessing the socket. See the Remarks section for more information.","needQuote":true,"needEscape":true,"nodes":[{"content":"An error occurred when accessing the socket. See the Remarks section for more information.","pos":[0,90],"nodes":[{"content":"An error occurred when accessing the socket.","pos":[0,44]},{"content":"See the Remarks section for more information.","pos":[45,90]}]}]},{"pos":[97452,97490],"content":"Sends a UDP datagram to a remote host.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sends a UDP datagram to a remote host.","pos":[0,38]}]},{"pos":[97503,98509],"content":"This overload sends datagrams to the remote host established in the <xref:System.Net.Sockets.UdpClient.Connect%2A> method and returns the number of bytes sent. If you do not call <xref:System.Net.Sockets.UdpClient.Connect%2A> before calling this overload, the <xref:System.Net.Sockets.UdpClient.Send%2A> method will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.       If you want to send datagrams to a different remote host, you must call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method and specify the desired remote host. Use either of the other <xref:System.Net.Sockets.UdpClient.Send%2A> method overloads to send datagrams to a broadcast address.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This overload sends datagrams to the remote host established in the <xref:System.Net.Sockets.UdpClient.Connect%2A> method and returns the number of bytes sent. If you do not call <xref:System.Net.Sockets.UdpClient.Connect%2A> before calling this overload, the <xref:System.Net.Sockets.UdpClient.Send%2A> method will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.       If you want to send datagrams to a different remote host, you must call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method and specify the desired remote host. Use either of the other <xref:System.Net.Sockets.UdpClient.Send%2A> method overloads to send datagrams to a broadcast address.","pos":[0,1004],"nodes":[{"content":"This overload sends datagrams to the remote host established in the &lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt; method and returns the number of bytes sent.","pos":[0,159],"source":"This overload sends datagrams to the remote host established in the <xref:System.Net.Sockets.UdpClient.Connect%2A> method and returns the number of bytes sent."},{"content":"If you do not call &lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt; before calling this overload, the &lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt; method will throw a &lt;xref:System.Net.Sockets.SocketException&gt;.","pos":[160,366],"source":" If you do not call <xref:System.Net.Sockets.UdpClient.Connect%2A> before calling this overload, the <xref:System.Net.Sockets.UdpClient.Send%2A> method will throw a <xref:System.Net.Sockets.SocketException>."},{"content":"If you receive a &lt;xref:System.Net.Sockets.SocketException&gt;, use &lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt; to obtain the specific error code.","pos":[367,545],"source":" If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code."},{"content":"Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[546,704]},{"content":"If you want to send datagrams to a different remote host, you must call the &lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt; method and specify the desired remote host.","pos":[711,877],"source":"       If you want to send datagrams to a different remote host, you must call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method and specify the desired remote host."},{"content":"Use either of the other &lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt; method overloads to send datagrams to a broadcast address.","pos":[878,1004],"source":" Use either of the other <xref:System.Net.Sockets.UdpClient.Send%2A> method overloads to send datagrams to a broadcast address."}]}]},{"pos":[99224,99349],"content":"An array of type <xref:System.Byte> that specifies the UDP datagram that you intend to send represented as an array of bytes.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of type &lt;xref:System.Byte&gt; that specifies the UDP datagram that you intend to send represented as an array of bytes.","pos":[0,125],"source":"An array of type <xref:System.Byte> that specifies the UDP datagram that you intend to send represented as an array of bytes."}]},{"pos":[99410,99446],"content":"The number of bytes in the datagram.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes in the datagram.","pos":[0,36]}]},{"pos":[99503,99528],"content":"The number of bytes sent.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes sent.","pos":[0,25]}]},{"pos":[99692,99775],"content":"<ph id=\"ph1\">&lt;code&gt;dgram&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>dgram</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[99886,99986],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> has already established a default remote host.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Net.Sockets.UdpClient\"></xref> has already established a default remote host."},{"pos":[100093,100157],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is closed.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Net.Sockets.UdpClient\"></xref> is closed."},{"pos":[100272,100362],"content":"An error occurred when accessing the socket. See the Remarks section for more information.","needQuote":true,"needEscape":true,"nodes":[{"content":"An error occurred when accessing the socket. See the Remarks section for more information.","pos":[0,90],"nodes":[{"content":"An error occurred when accessing the socket.","pos":[0,44]},{"content":"See the Remarks section for more information.","pos":[45,90]}]}]},{"pos":[100845,100911],"content":"Sends a UDP datagram to the host at the specified remote endpoint.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sends a UDP datagram to the host at the specified remote endpoint.","pos":[0,66]}]},{"pos":[100924,102545],"content":"The Send method sends datagrams to the specified endpoint and returns the number of bytes successfully sent. Before calling this overload, you must first create an <xref:System.Net.IPEndPoint> using the IP address and port number of the remote host to which your datagrams will be delivered. You can send datagrams to the default broadcast address, 255.255.255.255, by specifying <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> for the <xref:System.Net.IPAddress.Address%2A> property of the <xref:System.Net.IPEndPoint>. After you have created this <xref:System.Net.IPEndPoint>, pass it to the Send method as the `endPoint` parameter.       If you want to send datagrams to any other broadcast address, use the <xref:System.Net.Sockets.UdpClient.Client%2A> method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>. You can also revert to using the <xref:System.Net.Sockets.Socket> class.      > [!NOTE] >  Do not provide an `endPoint` parameter to this method if you have already established a remote host with the <xref:System.Net.Sockets.UdpClient.Connect%2A> method. If you do, the Send method will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The Send method sends datagrams to the specified endpoint and returns the number of bytes successfully sent.","pos":[0,108]},{"content":"Before calling this overload, you must first create an &lt;xref:System.Net.IPEndPoint&gt; using the IP address and port number of the remote host to which your datagrams will be delivered.","pos":[109,291],"source":" Before calling this overload, you must first create an <xref:System.Net.IPEndPoint> using the IP address and port number of the remote host to which your datagrams will be delivered."},{"content":"You can send datagrams to the default broadcast address, 255.255.255.255, by specifying &lt;xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName&gt; for the &lt;xref:System.Net.IPAddress.Address%2A&gt; property of the &lt;xref:System.Net.IPEndPoint&gt;.","pos":[292,540],"source":" You can send datagrams to the default broadcast address, 255.255.255.255, by specifying <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> for the <xref:System.Net.IPAddress.Address%2A> property of the <xref:System.Net.IPEndPoint>."},{"content":"After you have created this &lt;xref:System.Net.IPEndPoint&gt;, pass it to the Send method as the <ph id=\"ph1\">`endPoint`</ph> parameter.","pos":[541,654],"source":" After you have created this <xref:System.Net.IPEndPoint>, pass it to the Send method as the `endPoint` parameter."},{"content":"If you want to send datagrams to any other broadcast address, use the &lt;xref:System.Net.Sockets.UdpClient.Client%2A&gt; method to obtain the underlying &lt;xref:System.Net.Sockets.Socket&gt;, and set the socket option to &lt;xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName&gt;.","pos":[661,940],"source":"       If you want to send datagrams to any other broadcast address, use the <xref:System.Net.Sockets.UdpClient.Client%2A> method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>."},{"content":"You can also revert to using the &lt;xref:System.Net.Sockets.Socket&gt; class.","pos":[941,1013],"source":" You can also revert to using the <xref:System.Net.Sockets.Socket> class."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Do not provide an <ph id=\"ph2\">`endPoint`</ph> parameter to this method if you have already established a remote host with the &lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt; method.","pos":[1019,1195],"source":"      > [!NOTE] >  Do not provide an `endPoint` parameter to this method if you have already established a remote host with the <xref:System.Net.Sockets.UdpClient.Connect%2A> method."},{"content":"If you do, the Send method will throw a &lt;xref:System.Net.Sockets.SocketException&gt;.","pos":[1196,1278],"source":" If you do, the Send method will throw a <xref:System.Net.Sockets.SocketException>."},{"content":"If you receive a &lt;xref:System.Net.Sockets.SocketException&gt;, use &lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt; to obtain the specific error code.","pos":[1279,1457],"source":" If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code."},{"content":"Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[1458,1616]}]},{"pos":[103251,103377],"content":"An array of type <xref:System.Byte> that specifies the UDP datagram that you intend to send, represented as an array of bytes.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of type &lt;xref:System.Byte&gt; that specifies the UDP datagram that you intend to send, represented as an array of bytes.","pos":[0,126],"source":"An array of type <xref:System.Byte> that specifies the UDP datagram that you intend to send, represented as an array of bytes."}]},{"pos":[103438,103474],"content":"The number of bytes in the datagram.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes in the datagram.","pos":[0,36]}]},{"pos":[103547,103643],"content":"An <xref:System.Net.IPEndPoint> that represents the host and port to which to send the datagram.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Net.IPEndPoint&gt; that represents the host and port to which to send the datagram.","pos":[0,96],"source":"An <xref:System.Net.IPEndPoint> that represents the host and port to which to send the datagram."}]},{"pos":[103700,103725],"content":"The number of bytes sent.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes sent.","pos":[0,25]}]},{"pos":[103889,103972],"content":"<ph id=\"ph1\">&lt;code&gt;dgram&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>dgram</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[104083,104179],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> has already established a default remote host.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Net.Sockets.UdpClient\"></xref> has already established a default remote host."},{"pos":[104286,104346],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is closed.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Net.Sockets.UdpClient\"></xref> is closed."},{"pos":[104461,104551],"content":"An error occurred when accessing the socket. See the Remarks section for more information.","needQuote":true,"needEscape":true,"nodes":[{"content":"An error occurred when accessing the socket. See the Remarks section for more information.","pos":[0,90],"nodes":[{"content":"An error occurred when accessing the socket.","pos":[0,44]},{"content":"See the Remarks section for more information.","pos":[45,90]}]}]},{"pos":[105050,105118],"content":"Sends a UDP datagram to a specified port on a specified remote host.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sends a UDP datagram to a specified port on a specified remote host.","pos":[0,68]}]},{"pos":[105131,106451],"content":"The <xref:System.Net.Sockets.UdpClient.Send%2A> method sends datagrams to the values specified by the `hostname` and `port` parameters and returns the number of bytes successfully sent. You can send datagrams to the default broadcast address by specifying \"255.255.255.255\" for the `hostname` parameter value.       If you want to send datagrams to any other broadcast address, use the <xref:System.Net.Sockets.UdpClient.Client%2A> method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>. You can also revert to using the <xref:System.Net.Sockets.Socket> class.      > [!NOTE] >  Do not provide a host name or port number to this method if you have already established a remote host with the <xref:System.Net.Sockets.UdpClient.Connect%2A> method. If you do, the <xref:System.Net.Sockets.UdpClient.Send%2A> method will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"The &lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt; method sends datagrams to the values specified by the <ph id=\"ph1\">`hostname`</ph> and <ph id=\"ph2\">`port`</ph> parameters and returns the number of bytes successfully sent.","pos":[0,185],"source":"The <xref:System.Net.Sockets.UdpClient.Send%2A> method sends datagrams to the values specified by the `hostname` and `port` parameters and returns the number of bytes successfully sent."},{"content":"You can send datagrams to the default broadcast address by specifying \"255.255.255.255\" for the <ph id=\"ph1\">`hostname`</ph> parameter value.","pos":[186,309],"source":" You can send datagrams to the default broadcast address by specifying \"255.255.255.255\" for the `hostname` parameter value."},{"content":"If you want to send datagrams to any other broadcast address, use the &lt;xref:System.Net.Sockets.UdpClient.Client%2A&gt; method to obtain the underlying &lt;xref:System.Net.Sockets.Socket&gt;, and set the socket option to &lt;xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName&gt;.","pos":[316,595],"source":"       If you want to send datagrams to any other broadcast address, use the <xref:System.Net.Sockets.UdpClient.Client%2A> method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>."},{"content":"You can also revert to using the &lt;xref:System.Net.Sockets.Socket&gt; class.","pos":[596,668],"source":" You can also revert to using the <xref:System.Net.Sockets.Socket> class."},{"content":"&gt; <ph id=\"ph1\">[!NOTE]</ph> &gt;  Do not provide a host name or port number to this method if you have already established a remote host with the &lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt; method.","pos":[674,853],"source":"      > [!NOTE] >  Do not provide a host name or port number to this method if you have already established a remote host with the <xref:System.Net.Sockets.UdpClient.Connect%2A> method."},{"content":"If you do, the &lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt; method will throw a &lt;xref:System.Net.Sockets.SocketException&gt;.","pos":[854,975],"source":" If you do, the <xref:System.Net.Sockets.UdpClient.Send%2A> method will throw a <xref:System.Net.Sockets.SocketException>."},{"content":"If you receive a &lt;xref:System.Net.Sockets.SocketException&gt;, use &lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt; to obtain the specific error code.","pos":[976,1154],"source":" If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code."},{"content":"Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[1155,1313]}]},{"pos":[107190,107315],"content":"An array of type <xref:System.Byte> that specifies the UDP datagram that you intend to send represented as an array of bytes.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of type &lt;xref:System.Byte&gt; that specifies the UDP datagram that you intend to send represented as an array of bytes.","pos":[0,125],"source":"An array of type <xref:System.Byte> that specifies the UDP datagram that you intend to send represented as an array of bytes."}]},{"pos":[107376,107412],"content":"The number of bytes in the datagram.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes in the datagram.","pos":[0,36]}]},{"pos":[107477,107546],"content":"The name of the remote host to which you intend to send the datagram.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the remote host to which you intend to send the datagram.","pos":[0,69]}]},{"pos":[107606,107666],"content":"The remote port number with which you intend to communicate.","needQuote":true,"needEscape":true,"nodes":[{"content":"The remote port number with which you intend to communicate.","pos":[0,60]}]},{"pos":[107723,107748],"content":"The number of bytes sent.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes sent.","pos":[0,25]}]},{"pos":[107912,107995],"content":"<ph id=\"ph1\">&lt;code&gt;dgram&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>dgram</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[108106,108206],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> has already established a default remote host.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Net.Sockets.UdpClient\"></xref> has already established a default remote host."},{"pos":[108313,108377],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is closed.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Net.Sockets.UdpClient\"></xref> is closed."},{"pos":[108492,108582],"content":"An error occurred when accessing the socket. See the Remarks section for more information.","needQuote":true,"needEscape":true,"nodes":[{"content":"An error occurred when accessing the socket. See the Remarks section for more information.","pos":[0,90],"nodes":[{"content":"An error occurred when accessing the socket.","pos":[0,44]},{"content":"See the Remarks section for more information.","pos":[45,90]}]}]},{"pos":[109013,109066],"content":"Sends a UDP datagram asynchronously to a remote host.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sends a UDP datagram asynchronously to a remote host.","pos":[0,53]}]},{"pos":[109079,110009],"content":"This overload sends datagrams to the remote host established in the <xref:System.Net.Sockets.UdpClient.Connect%2A> method. If you do not call <xref:System.Net.Sockets.UdpClient.Connect%2A> before calling this overload, the method will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.       If you want to send datagrams to a different remote host, you must call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method and specify the desired remote host. Use either of the other <xref:System.Net.Sockets.UdpClient.SendAsync%2A> method overloads to send datagrams to a broadcast address.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This overload sends datagrams to the remote host established in the <xref:System.Net.Sockets.UdpClient.Connect%2A> method. If you do not call <xref:System.Net.Sockets.UdpClient.Connect%2A> before calling this overload, the method will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.       If you want to send datagrams to a different remote host, you must call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method and specify the desired remote host. Use either of the other <xref:System.Net.Sockets.UdpClient.SendAsync%2A> method overloads to send datagrams to a broadcast address.","pos":[0,928],"nodes":[{"content":"This overload sends datagrams to the remote host established in the &lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt; method.","pos":[0,122],"source":"This overload sends datagrams to the remote host established in the <xref:System.Net.Sockets.UdpClient.Connect%2A> method."},{"content":"If you do not call &lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt; before calling this overload, the method will throw a &lt;xref:System.Net.Sockets.SocketException&gt;.","pos":[123,285],"source":" If you do not call <xref:System.Net.Sockets.UdpClient.Connect%2A> before calling this overload, the method will throw a <xref:System.Net.Sockets.SocketException>."},{"content":"If you receive a &lt;xref:System.Net.Sockets.SocketException&gt;, use &lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt; to obtain the specific error code.","pos":[286,464],"source":" If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code."},{"content":"Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[465,623]},{"content":"If you want to send datagrams to a different remote host, you must call the &lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt; method and specify the desired remote host.","pos":[630,796],"source":"       If you want to send datagrams to a different remote host, you must call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method and specify the desired remote host."},{"content":"Use either of the other &lt;xref:System.Net.Sockets.UdpClient.SendAsync%2A&gt; method overloads to send datagrams to a broadcast address.","pos":[797,928],"source":" Use either of the other <xref:System.Net.Sockets.UdpClient.SendAsync%2A> method overloads to send datagrams to a broadcast address."}]}]},{"pos":[110194,110319],"content":"An array of type <xref:System.Byte> that specifies the UDP datagram that you intend to send represented as an array of bytes.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of type &lt;xref:System.Byte&gt; that specifies the UDP datagram that you intend to send represented as an array of bytes.","pos":[0,125],"source":"An array of type <xref:System.Byte> that specifies the UDP datagram that you intend to send represented as an array of bytes."}]},{"pos":[110380,110416],"content":"The number of bytes in the datagram.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes in the datagram.","pos":[0,36]}]},{"pos":[110502,110555],"content":"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns <ph id=\"ph1\">&amp;lt;</ph>xref:System.Threading.Tasks.Task%601<ph id=\"ph2\">&amp;gt;</ph>.","pos":[0,53],"source":"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;."}]},{"pos":[110724,110807],"content":"<ph id=\"ph1\">&lt;code&gt;dgram&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>dgram</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[110918,111018],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> has already established a default remote host.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Net.Sockets.UdpClient\"></xref> has already established a default remote host."},{"pos":[111125,111189],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is closed.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Net.Sockets.UdpClient\"></xref> is closed."},{"pos":[111304,111394],"content":"An error occurred when accessing the socket. See the Remarks section for more information.","needQuote":true,"needEscape":true,"nodes":[{"content":"An error occurred when accessing the socket. See the Remarks section for more information.","pos":[0,90],"nodes":[{"content":"An error occurred when accessing the socket.","pos":[0,44]},{"content":"See the Remarks section for more information.","pos":[45,90]}]}]},{"pos":[111902,111955],"content":"Sends a UDP datagram asynchronously to a remote host.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sends a UDP datagram asynchronously to a remote host.","pos":[0,53]}]},{"pos":[111968,113530],"content":"This method sends datagrams to the specified endpoint. Before calling this overload, you must first create an <xref:System.Net.IPEndPoint> using the IP address and port number of the remote host to which your datagrams will be delivered. You can send datagrams to the default broadcast address, 255.255.255.255, by specifying <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> for the <xref:System.Net.IPAddress.Address%2A> property of the <xref:System.Net.IPEndPoint>. After you have created this <xref:System.Net.IPEndPoint>, pass it to this method as the `endPoint` parameter.       If you want to send datagrams to any other broadcast address, use the <xref:System.Net.Sockets.UdpClient.Client%2A> method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>. You can also revert to using the <xref:System.Net.Sockets.Socket> class.      > [!WARNING] >  Do not provide an `endPoint` parameter to this method if you have already established a remote host with the <xref:System.Net.Sockets.UdpClient.Connect%2A> method. If you do, this method will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method sends datagrams to the specified endpoint.","pos":[0,54]},{"content":"Before calling this overload, you must first create an &lt;xref:System.Net.IPEndPoint&gt; using the IP address and port number of the remote host to which your datagrams will be delivered.","pos":[55,237],"source":" Before calling this overload, you must first create an <xref:System.Net.IPEndPoint> using the IP address and port number of the remote host to which your datagrams will be delivered."},{"content":"You can send datagrams to the default broadcast address, 255.255.255.255, by specifying &lt;xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName&gt; for the &lt;xref:System.Net.IPAddress.Address%2A&gt; property of the &lt;xref:System.Net.IPEndPoint&gt;.","pos":[238,486],"source":" You can send datagrams to the default broadcast address, 255.255.255.255, by specifying <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> for the <xref:System.Net.IPAddress.Address%2A> property of the <xref:System.Net.IPEndPoint>."},{"content":"After you have created this &lt;xref:System.Net.IPEndPoint&gt;, pass it to this method as the <ph id=\"ph1\">`endPoint`</ph> parameter.","pos":[487,596],"source":" After you have created this <xref:System.Net.IPEndPoint>, pass it to this method as the `endPoint` parameter."},{"content":"If you want to send datagrams to any other broadcast address, use the &lt;xref:System.Net.Sockets.UdpClient.Client%2A&gt; method to obtain the underlying &lt;xref:System.Net.Sockets.Socket&gt;, and set the socket option to &lt;xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName&gt;.","pos":[603,882],"source":"       If you want to send datagrams to any other broadcast address, use the <xref:System.Net.Sockets.UdpClient.Client%2A> method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>."},{"content":"You can also revert to using the &lt;xref:System.Net.Sockets.Socket&gt; class.","pos":[883,955],"source":" You can also revert to using the <xref:System.Net.Sockets.Socket> class."},{"content":"&gt; <ph id=\"ph1\">[!WARNING]</ph> &gt;  Do not provide an <ph id=\"ph2\">`endPoint`</ph> parameter to this method if you have already established a remote host with the &lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt; method.","pos":[961,1140],"source":"      > [!WARNING] >  Do not provide an `endPoint` parameter to this method if you have already established a remote host with the <xref:System.Net.Sockets.UdpClient.Connect%2A> method."},{"content":"If you do, this method will throw a &lt;xref:System.Net.Sockets.SocketException&gt;.","pos":[1141,1219],"source":" If you do, this method will throw a <xref:System.Net.Sockets.SocketException>."},{"content":"If you receive a &lt;xref:System.Net.Sockets.SocketException&gt;, use &lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt; to obtain the specific error code.","pos":[1220,1398],"source":" If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code."},{"content":"Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[1399,1557]}]},{"pos":[113747,113872],"content":"An array of type <xref:System.Byte> that specifies the UDP datagram that you intend to send represented as an array of bytes.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of type &lt;xref:System.Byte&gt; that specifies the UDP datagram that you intend to send represented as an array of bytes.","pos":[0,125],"source":"An array of type <xref:System.Byte> that specifies the UDP datagram that you intend to send represented as an array of bytes."}]},{"pos":[113933,113969],"content":"The number of bytes in the datagram.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes in the datagram.","pos":[0,36]}]},{"pos":[114042,114138],"content":"An <xref:System.Net.IPEndPoint> that represents the host and port to which to send the datagram.","needQuote":true,"needEscape":true,"nodes":[{"content":"An &lt;xref:System.Net.IPEndPoint&gt; that represents the host and port to which to send the datagram.","pos":[0,96],"source":"An <xref:System.Net.IPEndPoint> that represents the host and port to which to send the datagram."}]},{"pos":[114224,114277],"content":"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns <ph id=\"ph1\">&amp;lt;</ph>xref:System.Threading.Tasks.Task%601<ph id=\"ph2\">&amp;gt;</ph>.","pos":[0,53],"source":"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;."}]},{"pos":[114446,114529],"content":"<ph id=\"ph1\">&lt;code&gt;dgram&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>dgram</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[114640,114736],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> has already established a default remote host.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Net.Sockets.UdpClient\"></xref> has already established a default remote host."},{"pos":[114843,114903],"content":"<bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is closed.","needQuote":true,"needEscape":true,"source":"<xref href=\"System.Net.Sockets.UdpClient\"></xref> is closed."},{"pos":[115018,115108],"content":"An error occurred when accessing the socket. See the Remarks section for more information.","needQuote":true,"needEscape":true,"nodes":[{"content":"An error occurred when accessing the socket. See the Remarks section for more information.","pos":[0,90],"nodes":[{"content":"An error occurred when accessing the socket.","pos":[0,44]},{"content":"See the Remarks section for more information.","pos":[45,90]}]}]},{"pos":[115632,115685],"content":"Sends a UDP datagram asynchronously to a remote host.","needQuote":true,"needEscape":true,"nodes":[{"content":"Sends a UDP datagram asynchronously to a remote host.","pos":[0,53]}]},{"pos":[115698,116885],"content":"This method sends datagrams to the values specified by the `hostname` and `port` parameters. You can send datagrams to the default broadcast address by specifying \"255.255.255.255\" for the `hostname` parameter value.       If you want to send datagrams to any other broadcast address, use the <xref:System.Net.Sockets.UdpClient.Client%2A> method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>. You can also revert to using the <xref:System.Net.Sockets.Socket> class.      > [!WARNING] >  Do not provide a host name or port number to this method if you have already established a remote host with the <xref:System.Net.Sockets.UdpClient.Connect%2A> method. If you do, this method will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","needQuote":false,"needEscape":true,"extradata":"MT","nodes":[{"content":"This method sends datagrams to the values specified by the <ph id=\"ph1\">`hostname`</ph> and <ph id=\"ph2\">`port`</ph> parameters.","pos":[0,92],"source":"This method sends datagrams to the values specified by the `hostname` and `port` parameters."},{"content":"You can send datagrams to the default broadcast address by specifying \"255.255.255.255\" for the <ph id=\"ph1\">`hostname`</ph> parameter value.","pos":[93,216],"source":" You can send datagrams to the default broadcast address by specifying \"255.255.255.255\" for the `hostname` parameter value."},{"content":"If you want to send datagrams to any other broadcast address, use the &lt;xref:System.Net.Sockets.UdpClient.Client%2A&gt; method to obtain the underlying &lt;xref:System.Net.Sockets.Socket&gt;, and set the socket option to &lt;xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName&gt;.","pos":[223,502],"source":"       If you want to send datagrams to any other broadcast address, use the <xref:System.Net.Sockets.UdpClient.Client%2A> method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>."},{"content":"You can also revert to using the &lt;xref:System.Net.Sockets.Socket&gt; class.","pos":[503,575],"source":" You can also revert to using the <xref:System.Net.Sockets.Socket> class."},{"content":"&gt; <ph id=\"ph1\">[!WARNING]</ph> &gt;  Do not provide a host name or port number to this method if you have already established a remote host with the &lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt; method.","pos":[581,763],"source":"      > [!WARNING] >  Do not provide a host name or port number to this method if you have already established a remote host with the <xref:System.Net.Sockets.UdpClient.Connect%2A> method."},{"content":"If you do, this method will throw a &lt;xref:System.Net.Sockets.SocketException&gt;.","pos":[764,842],"source":" If you do, this method will throw a <xref:System.Net.Sockets.SocketException>."},{"content":"If you receive a &lt;xref:System.Net.Sockets.SocketException&gt;, use &lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt; to obtain the specific error code.","pos":[843,1021],"source":" If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code."},{"content":"Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[1022,1180]}]},{"pos":[117097,117222],"content":"An array of type <xref:System.Byte> that specifies the UDP datagram that you intend to send represented as an array of bytes.","needQuote":true,"needEscape":true,"nodes":[{"content":"An array of type &lt;xref:System.Byte&gt; that specifies the UDP datagram that you intend to send represented as an array of bytes.","pos":[0,125],"source":"An array of type <xref:System.Byte> that specifies the UDP datagram that you intend to send represented as an array of bytes."}]},{"pos":[117283,117319],"content":"The number of bytes in the datagram.","needQuote":true,"needEscape":true,"nodes":[{"content":"The number of bytes in the datagram.","pos":[0,36]}]},{"pos":[117384,117453],"content":"The name of the remote host to which you intend to send the datagram.","needQuote":true,"needEscape":true,"nodes":[{"content":"The name of the remote host to which you intend to send the datagram.","pos":[0,69]}]},{"pos":[117513,117573],"content":"The remote port number with which you intend to communicate.","needQuote":true,"needEscape":true,"nodes":[{"content":"The remote port number with which you intend to communicate.","pos":[0,60]}]},{"pos":[117659,117712],"content":"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;.","needQuote":true,"needEscape":true,"nodes":[{"content":"Returns <ph id=\"ph1\">&amp;lt;</ph>xref:System.Threading.Tasks.Task%601<ph id=\"ph2\">&amp;gt;</ph>.","pos":[0,53],"source":"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;."}]},{"pos":[117881,117964],"content":"<ph id=\"ph1\">&lt;code&gt;dgram&lt;/code&gt;</ph> is <bpt id=\"p1\">&lt;xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"<code>dgram</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."},{"pos":[118075,118175],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> has already established a default remote host.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Net.Sockets.UdpClient\"></xref> has already established a default remote host."},{"pos":[118282,118346],"content":"The <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept> is closed.","needQuote":true,"needEscape":true,"source":"The <xref href=\"System.Net.Sockets.UdpClient\"></xref> is closed."},{"pos":[118461,118551],"content":"An error occurred when accessing the socket. See the Remarks section for more information.","needQuote":true,"needEscape":true,"nodes":[{"content":"An error occurred when accessing the socket. See the Remarks section for more information.","pos":[0,90],"nodes":[{"content":"An error occurred when accessing the socket.","pos":[0,44]},{"content":"See the Remarks section for more information.","pos":[45,90]}]}]},{"pos":[118856,119017],"content":"Gets or sets a value that specifies the Time to Live (TTL) value of Internet Protocol (IP) packets sent by the <bpt id=\"p1\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;</bpt><ept id=\"p1\">&lt;/xref&gt;</ept>.","needQuote":true,"needEscape":true,"source":"Gets or sets a value that specifies the Time to Live (TTL) value of Internet Protocol (IP) packets sent by the <xref href=\"System.Net.Sockets.UdpClient\"></xref>."},{"pos":[119029,119246],"content":"The TTL value indicates the maximum number of routers a packet can traverse before the router discards the packet and an Internet Control Message Protocol (ICMP) \"TTL exceeded\" error message is returned to the sender.","needQuote":true,"needEscape":true,"extradata":"MT","nodes":[{"content":"The TTL value indicates the maximum number of routers a packet can traverse before the router discards the packet and an Internet Control Message Protocol (ICMP) \"TTL exceeded\" error message is returned to the sender.","pos":[0,217]}]},{"pos":[119647,119661],"content":"The TTL value.","needQuote":true,"needEscape":true,"nodes":[{"content":"The TTL value.","pos":[0,14]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Net.Sockets.UdpClient\n  id: UdpClient\n  children:\n  - System.Net.Sockets.UdpClient.#ctor\n  - System.Net.Sockets.UdpClient.#ctor(System.Int32)\n  - System.Net.Sockets.UdpClient.#ctor(System.Net.IPEndPoint)\n  - System.Net.Sockets.UdpClient.#ctor(System.Net.Sockets.AddressFamily)\n  - System.Net.Sockets.UdpClient.#ctor(System.Int32,System.Net.Sockets.AddressFamily)\n  - System.Net.Sockets.UdpClient.#ctor(System.String,System.Int32)\n  - System.Net.Sockets.UdpClient.Active\n  - System.Net.Sockets.UdpClient.AllowNatTraversal(System.Boolean)\n  - System.Net.Sockets.UdpClient.Available\n  - System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)\n  - System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.AsyncCallback,System.Object)\n  - System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.Net.IPEndPoint,System.AsyncCallback,System.Object)\n  - System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.String,System.Int32,System.AsyncCallback,System.Object)\n  - System.Net.Sockets.UdpClient.Client\n  - System.Net.Sockets.UdpClient.Close\n  - System.Net.Sockets.UdpClient.Connect(System.Net.IPEndPoint)\n  - System.Net.Sockets.UdpClient.Connect(System.Net.IPAddress,System.Int32)\n  - System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)\n  - System.Net.Sockets.UdpClient.Dispose\n  - System.Net.Sockets.UdpClient.Dispose(System.Boolean)\n  - System.Net.Sockets.UdpClient.DontFragment\n  - System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)\n  - System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress,System.Int32)\n  - System.Net.Sockets.UdpClient.EnableBroadcast\n  - System.Net.Sockets.UdpClient.EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)\n  - System.Net.Sockets.UdpClient.EndSend(System.IAsyncResult)\n  - System.Net.Sockets.UdpClient.ExclusiveAddressUse\n  - System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)\n  - System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Int32,System.Net.IPAddress)\n  - System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Int32)\n  - System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Net.IPAddress)\n  - System.Net.Sockets.UdpClient.MulticastLoopback\n  - System.Net.Sockets.UdpClient.Receive(System.Net.IPEndPoint@)\n  - System.Net.Sockets.UdpClient.ReceiveAsync\n  - System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32)\n  - System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)\n  - System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.String,System.Int32)\n  - System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32)\n  - System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.Net.IPEndPoint)\n  - System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.String,System.Int32)\n  - System.Net.Sockets.UdpClient.Ttl\n  langs:\n  - csharp\n  name: UdpClient\n  nameWithType: UdpClient\n  fullName: System.Net.Sockets.UdpClient\n  type: Class\n  summary: Provides User Datagram Protocol (UDP) network services.\n  remarks: \"The UdpClient class provides simple methods for sending and receiving connectionless UDP datagrams in blocking synchronous mode. Because UDP is a connectionless transport protocol, you do not need to establish a remote host connection prior to sending and receiving data. You do, however, have the option of establishing a default remote host in one of the following two ways:  \\n  \\n-   Create an instance of the UdpClient class using the remote host name and port number as parameters.  \\n  \\n-   Create an instance of the UdpClient class and then call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method.  \\n  \\n You can use any of the send methods provided in the UdpClient to send data to a remote device. Use the <xref:System.Net.Sockets.UdpClient.Receive%2A> method to receive data from remote hosts.  \\n  \\n> [!NOTE]\\n>  Do not call [Send(Byte\\\\[\\\\], Int32, IPEndPoint)](assetId:///M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)?qualifyHint=False&autoUpgrade=True) using a host name or <xref:System.Net.IPEndPoint> if you have already specified a default remote host. If you do, UdpClient will throw an exception.  \\n  \\n UdpClient methods also allow you to send and receive multicast datagrams. Use the <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method to subscribe a UdpClient to a multicast group. Use the <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method to unsubscribe a UdpClient from a multicast group.\"\n  example:\n  - \"The following example establishes a UdpClient connection using the host name www.contoso.com on port 11000. A small string message is sent to two separate remote host machines. The <xref:System.Net.Sockets.UdpClient.Receive%2A> method blocks execution until a message is received. Using the <xref:System.Net.IPEndPoint> passed to <xref:System.Net.Sockets.UdpClient.Receive%2A>, the identity of the responding host is revealed.  \\n  \\n [!code-vb[Classic UdpClientExample#1](~/add/codesnippet/visualbasic/t-system.net.sockets.udp_1.vb)]\\n [!code-cpp[Classic UdpClientExample#1](~/add/codesnippet/cpp/t-system.net.sockets.udp_1.cpp)]\\n [!code-cs[Classic UdpClientExample#1](~/add/codesnippet/csharp/t-system.net.sockets.udp_1.cs)]\"\n  syntax:\n    content: 'public class UdpClient : IDisposable'\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers: []\n  platform:\n  - net462\n- uid: System.Net.Sockets.UdpClient.#ctor\n  id: '#ctor'\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: UdpClient()\n  nameWithType: UdpClient.UdpClient()\n  fullName: System.Net.Sockets.UdpClient.UdpClient()\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Initializes a new instance of the <xref href=\"System.Net.Sockets.UdpClient\"></xref> class.\n  remarks: \"This constructor creates a new <xref:System.Net.Sockets.UdpClient> and allows the underlying service provider to assign the most appropriate local IPv4 address and port number. If this constructor is used, the <xref:System.Net.Sockets.UdpClient> instance is set with an address family of IPv4 that cannot be changed or overwritten by a connect method call with an IPv6 target.  \\n  \\n> [!NOTE]\\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.  \\n  \\n This constructor is not suitable for joining a multicast group because it does not perform socket binding. Also, it works only with IPv4 address types.\"\n  example:\n  - \"The following example demonstrates how to use the default constructor to create an instance of the <xref:System.Net.Sockets.UdpClient> class.  \\n  \\n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#4](~/add/codesnippet/csharp/m-system.net.sockets.udp_11_1.cs)]\\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#4](~/add/codesnippet/cpp/m-system.net.sockets.udp_11_1.cpp)]\\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#4](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_11_1.vb)]\"\n  syntax:\n    content: public UdpClient ();\n    parameters: []\n  overload: System.Net.Sockets.UdpClient.#ctor*\n  exceptions:\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when accessing the socket. See the Remarks section for more information.\n  platform:\n  - net462\n- uid: System.Net.Sockets.UdpClient.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: UdpClient(Int32)\n  nameWithType: UdpClient.UdpClient(Int32)\n  fullName: System.Net.Sockets.UdpClient.UdpClient(Int32)\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Initializes a new instance of the <xref href=\"System.Net.Sockets.UdpClient\"></xref> class and binds it to the local port number provided.\n  remarks: \"This constructor creates an underlying <xref:System.Net.Sockets.Socket> and binds it to the port number from which you intend to communicate. Use this constructor if you are only interested in setting the local port number. The underlying service provider will assign the local IP address. If you pass 0 to the constructor, the underlying service provider will assign a port number. If this constructor is used, the <xref:System.Net.Sockets.UdpClient> instance is set with an address family of IPv4 that cannot be changed or overwritten by a connect method call with an IPv6 target.  \\n  \\n> [!NOTE]\\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.  \\n  \\n This constructor works only with IPv4 address types.\"\n  example:\n  - \"The following example demonstrates using a local port number to create an instance of the <xref:System.Net.Sockets.UdpClient> class.  \\n  \\n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#1](~/add/codesnippet/csharp/m-system.net.sockets.udp_4_1.cs)]\\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#1](~/add/codesnippet/cpp/m-system.net.sockets.udp_4_1.cpp)]\\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#1](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_4_1.vb)]\"\n  syntax:\n    content: public UdpClient (int port);\n    parameters:\n    - id: port\n      type: System.Int32\n      description: The local port number from which you intend to communicate.\n  overload: System.Net.Sockets.UdpClient.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>port</code> parameter is greater than <xref:System.Net.IPEndPoint.MaxPort> or less than <xref:System.Net.IPEndPoint.MinPort>.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when accessing the socket. See the Remarks section for more information.\n  platform:\n  - net462\n- uid: System.Net.Sockets.UdpClient.#ctor(System.Net.IPEndPoint)\n  id: '#ctor(System.Net.IPEndPoint)'\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: UdpClient(IPEndPoint)\n  nameWithType: UdpClient.UdpClient(IPEndPoint)\n  fullName: System.Net.Sockets.UdpClient.UdpClient(IPEndPoint)\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Initializes a new instance of the <xref href=\"System.Net.Sockets.UdpClient\"></xref> class and binds it to the specified local endpoint.\n  remarks: \"This constructor creates a new <xref:System.Net.Sockets.UdpClient> and binds it to the <xref:System.Net.IPEndPoint> specified by the `localEP` parameter. Before you call this constructor, you must create an <xref:System.Net.IPEndPoint> using the IP address and port number from which you intend to send and receive data. You do not need to specify a local IP address and port number for sending and receiving data. If you do not, the underlying service provider will assign the most appropriate local IP address and port number.  \\n  \\n If this constructor is used, the <xref:System.Net.Sockets.UdpClient> instance is set with the address family specified by the `localEP` parameter  that cannot be changed or overwritten by a connect method call with a different address family.  \\n  \\n> [!NOTE]\\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.\"\n  example:\n  - \"The following example demonstrates how to create an instance of the <xref:System.Net.Sockets.UdpClient> class using a local endpoint.  \\n  \\n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#2](~/add/codesnippet/csharp/m-system.net.sockets.udp_9_1.cs)]\\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#2](~/add/codesnippet/cpp/m-system.net.sockets.udp_9_1.cpp)]\\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#2](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_9_1.vb)]\"\n  syntax:\n    content: public UdpClient (System.Net.IPEndPoint localEP);\n    parameters:\n    - id: localEP\n      type: System.Net.IPEndPoint\n      description: An <xref:System.Net.IPEndPoint> that respresents the local endpoint to which you bind the UDP connection.\n  overload: System.Net.Sockets.UdpClient.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>localEP</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when accessing the socket. See the Remarks section for more information.\n  platform:\n  - net462\n- uid: System.Net.Sockets.UdpClient.#ctor(System.Net.Sockets.AddressFamily)\n  id: '#ctor(System.Net.Sockets.AddressFamily)'\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: UdpClient(AddressFamily)\n  nameWithType: UdpClient.UdpClient(AddressFamily)\n  fullName: System.Net.Sockets.UdpClient.UdpClient(AddressFamily)\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Initializes a new instance of the <xref href=\"System.Net.Sockets.UdpClient\"></xref> class.\n  remarks: \"The `family` parameter determines whether the listener uses an IP version 4 address (IPv4) or an IP version 6 (IPv6) address. To use an IPv4 address, pass the <xref:System.Net.Sockets.AddressFamily> value. To use an IPv6 address, pass the <xref:System.Net.Sockets.AddressFamily> value. Passing any other value will cause the method to throw an <xref:System.ArgumentException>.  \\n  \\n If this constructor is used, the <xref:System.Net.Sockets.UdpClient> instance is set with the address family specified by the `family` parameter  that cannot be changed or overwritten by a connect method call with a different address family.  \\n  \\n> [!NOTE]\\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.  \\n  \\n The UdpClient is not suitable for joining a multicast group because it does not perform socket binding.\"\n  syntax:\n    content: public UdpClient (System.Net.Sockets.AddressFamily family);\n    parameters:\n    - id: family\n      type: System.Net.Sockets.AddressFamily\n      description: One of the <xref:System.Net.Sockets.AddressFamily> values that specifies the addressing scheme of the socket.\n  overload: System.Net.Sockets.UdpClient.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>family</code> is not <xref:System.Net.Sockets.AddressFamily> or <xref:System.Net.Sockets.AddressFamily>.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when accessing the socket. See the Remarks section for more information.\n  platform:\n  - net462\n- uid: System.Net.Sockets.UdpClient.#ctor(System.Int32,System.Net.Sockets.AddressFamily)\n  id: '#ctor(System.Int32,System.Net.Sockets.AddressFamily)'\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: UdpClient(Int32,AddressFamily)\n  nameWithType: UdpClient.UdpClient(Int32,AddressFamily)\n  fullName: System.Net.Sockets.UdpClient.UdpClient(Int32,AddressFamily)\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Initializes a new instance of the <xref href=\"System.Net.Sockets.UdpClient\"></xref> class and binds it to the local port number provided.\n  remarks: \"This constructor creates an underlying <xref:System.Net.Sockets.Socket> and binds it to the port number from which you intend to communicate.  \\n  \\n The `family` parameter determines whether the listener uses an IP version 4 address (IPv4) or an IP version 6 (IPv6) address. To use an IPv4 address, pass the <xref:System.Net.Sockets.AddressFamily> value. To use an IPv6 address, pass the <xref:System.Net.Sockets.AddressFamily> value. Passing any other value will cause the method to throw an <xref:System.ArgumentException>.  \\n  \\n If this constructor is used, the <xref:System.Net.Sockets.UdpClient> instance is set with the address family specified by the `family` parameter  that cannot be changed or overwritten by a connect method call with a different address family.  \\n  \\n> [!NOTE]\\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.\"\n  example:\n  - \"The following code example shows how to create a UDP client to use in a multicast group.  \\n  \\n [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#3](~/add/codesnippet/cpp/c2c91fdb-fd73-47cc-8239-_1.cpp)]\\n [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#3](~/add/codesnippet/visualbasic/c2c91fdb-fd73-47cc-8239-_1.vb)]\\n [!code-cs[System.Net.Sockets.UdpClient.JoinMulticastGroup#3](~/add/codesnippet/csharp/c2c91fdb-fd73-47cc-8239-_1.cs)]\"\n  syntax:\n    content: public UdpClient (int port, System.Net.Sockets.AddressFamily family);\n    parameters:\n    - id: port\n      type: System.Int32\n      description: The port on which to listen for incoming connection attempts.\n    - id: family\n      type: System.Net.Sockets.AddressFamily\n      description: One of the <xref:System.Net.Sockets.AddressFamily> values that specifies the addressing scheme of the socket.\n  overload: System.Net.Sockets.UdpClient.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>family</code> is not <xref:System.Net.Sockets.AddressFamily> or <xref:System.Net.Sockets.AddressFamily>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>port</code> is greater than <xref:System.Net.IPEndPoint.MaxPort> or less than <xref:System.Net.IPEndPoint.MinPort>.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when accessing the socket. See the Remarks section for more information.\n  platform:\n  - net462\n- uid: System.Net.Sockets.UdpClient.#ctor(System.String,System.Int32)\n  id: '#ctor(System.String,System.Int32)'\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: UdpClient(String,Int32)\n  nameWithType: UdpClient.UdpClient(String,Int32)\n  fullName: System.Net.Sockets.UdpClient.UdpClient(String,Int32)\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Initializes a new instance of the <xref href=\"System.Net.Sockets.UdpClient\"></xref> class and establishes a default remote host.\n  remarks: \"This constructor initializes a new <xref:System.Net.Sockets.UdpClient> and establishes a remote host using the `hostname` and `port` parameters. Establishing a default remote host is optional. If you use this constructor, you do not have to specify a remote host in each call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method. Specifying a default remote host limits you to that host only. You can change the default remote host at any time by calling the <xref:System.Net.Sockets.UdpClient.Connect%2A> method. If you want to specify a remote host in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method, do not use this constructor.  \\n  \\n> [!NOTE]\\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.\"\n  example:\n  - \"The following example demonstrates how to create an instance of the <xref:System.Net.Sockets.UdpClient> class using a host name and port number.  \\n  \\n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#3](~/add/codesnippet/csharp/m-system.net.sockets.udp_7_1.cs)]\\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#3](~/add/codesnippet/cpp/m-system.net.sockets.udp_7_1.cpp)]\\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#3](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_7_1.vb)]\"\n  syntax:\n    content: public UdpClient (string hostname, int port);\n    parameters:\n    - id: hostname\n      type: System.String\n      description: The name of the remote DNS host to which you intend to connect.\n    - id: port\n      type: System.Int32\n      description: The remote port number to which you intend to connect.\n  overload: System.Net.Sockets.UdpClient.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>hostname</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>port</code> is not between <xref:System.Net.IPEndPoint.MinPort> and <xref:System.Net.IPEndPoint.MaxPort>.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when accessing the socket. See the Remarks section for more information.\n  platform:\n  - net462\n- uid: System.Net.Sockets.UdpClient.Active\n  id: Active\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: Active\n  nameWithType: UdpClient.Active\n  fullName: System.Net.Sockets.UdpClient.Active\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Gets or sets a value indicating whether a default remote host has been established.\n  remarks: Classes deriving from <xref:System.Net.Sockets.UdpClient> can use this property to determine if a default remote host has been established. You can establish a default remote host by using the appropriate constructor or by calling the <xref:System.Net.Sockets.UdpClient.Connect%2A> method. If you do establish a default remote host, you cannot specify a remote host in your call to <xref:System.Net.Sockets.UdpClient.Send%2A>.\n  syntax:\n    content: protected bool Active { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if a connection is active; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Net.Sockets.UdpClient.Active*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Sockets.UdpClient.AllowNatTraversal(System.Boolean)\n  id: AllowNatTraversal(System.Boolean)\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: AllowNatTraversal(Boolean)\n  nameWithType: UdpClient.AllowNatTraversal(Boolean)\n  fullName: System.Net.Sockets.UdpClient.AllowNatTraversal(Boolean)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Enables or disables Network Address Translation (NAT) traversal on a <xref href=\"System.Net.Sockets.UdpClient\"></xref> instance.\n  remarks: \"The AllowNatTraversal method is used to enable or disable NAT traversal for a <xref:System.Net.Sockets.UdpClient> instance. NAT traversal may be provided using Teredo, 6to4, or an ISATAP tunnel.  \\n  \\n When the `allowed` parameter is false, the <xref:System.Net.Sockets.SocketOptionName> option on the associated socket is set to <xref:System.Net.Sockets.IPProtectionLevel>. This explicitly disables NAT traversal for a <xref:System.Net.Sockets.UdpClient> instance.  \\n  \\n When the `allowed` parameter is true, the <xref:System.Net.Sockets.SocketOptionName> option on the associated socket is set to <xref:System.Net.Sockets.IPProtectionLevel>. This may allow NAT traversal for a <xref:System.Net.Sockets.UdpClient> depending on firewall rules in place on the system.  \\n  \\n A Teredo address is an IPv6 address with the prefix of 2001::/32. Teredo addresses can be returned through normal DNS name resolution or enumerated as an IPv6 address assigned to a local interface.\"\n  syntax:\n    content: public void AllowNatTraversal (bool allowed);\n    parameters:\n    - id: allowed\n      type: System.Boolean\n      description: A Boolean value that specifies whether to enable or disable NAT traversal.\n  overload: System.Net.Sockets.UdpClient.AllowNatTraversal*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Sockets.UdpClient.Available\n  id: Available\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: Available\n  nameWithType: UdpClient.Available\n  fullName: System.Net.Sockets.UdpClient.Available\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Gets the amount of data received from the network that is available to read.\n  remarks: \"The Available property is used to determine the amount of data queued in the network buffer for reading. If data is available, call <xref:System.Net.Sockets.NetworkStream.Read%2A> to get the data. If no data is available, the Available property returns 0.  \\n  \\n If the remote host shuts down or closes the connection, the Available property throws a <xref:System.Net.Sockets.SocketException>.  \\n  \\n> [!NOTE]\\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library)/ for a detailed description of the error.\"\n  example:\n  - \"The following code example shows the use of the Available property.  \\n  \\n [!code-cs[System.Net.Sockets.UdpClient#1](~/add/codesnippet/csharp/p-system.net.sockets.udp_1_1.cs)]\\n [!code-cpp[System.Net.Sockets.UdpClient#1](~/add/codesnippet/cpp/p-system.net.sockets.udp_1_1.cpp)]\"\n  syntax:\n    content: public int Available { get; }\n    return:\n      type: System.Int32\n      description: The number of bytes of data received from the network.\n  overload: System.Net.Sockets.UdpClient.Available*\n  exceptions:\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred while attempting to access the socket. See the Remarks section for more information.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref:System.Net.Sockets.Socket> has been closed.\n  platform:\n  - net462\n- uid: System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)\n  id: BeginReceive(System.AsyncCallback,System.Object)\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: BeginReceive(AsyncCallback,Object)\n  nameWithType: UdpClient.BeginReceive(AsyncCallback,Object)\n  fullName: System.Net.Sockets.UdpClient.BeginReceive(AsyncCallback,Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Receives a datagram from a remote host asynchronously.\n  remarks: \"The asynchronous BeginReceive operation must be completed by calling the <xref:System.Net.Sockets.UdpClient.EndReceive%2A> method. Typically, the method is invoked by the `requestCallback` delegate.  \\n  \\n This method does not block until the operation is complete. To block until the operation is complete, use the <xref:System.Net.Sockets.UdpClient.Receive%2A> method.  \\n  \\n For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"The following code example uses BeginReceive to asynchronously receive a server response.  \\n  \\n [!code-cpp[System.Net.Sockets.UdpClient1#1](~/add/codesnippet/cpp/m-system.net.sockets.udp_12_1.cpp)]\\n [!code-cs[System.Net.Sockets.UdpClient1#1](~/add/codesnippet/csharp/m-system.net.sockets.udp_12_1.cs)]\"\n  syntax:\n    content: public IAsyncResult BeginReceive (AsyncCallback requestCallback, object state);\n    parameters:\n    - id: requestCallback\n      type: System.AsyncCallback\n      description: An <xref:System.AsyncCallback> delegate that references the method to invoke when the operation is complete.\n    - id: state\n      type: System.Object\n      description: A user-defined object that contains information about the receive operation. This object is passed to the `requestCallback` delegate when the operation is complete.\n    return:\n      type: System.IAsyncResult\n      description: An <xref:System.IAsyncResult> object that references the asynchronous receive.\n  overload: System.Net.Sockets.UdpClient.BeginReceive*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.AsyncCallback,System.Object)\n  id: BeginSend(System.Byte[],System.Int32,System.AsyncCallback,System.Object)\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: BeginSend(Byte[],Int32,AsyncCallback,Object)\n  nameWithType: UdpClient.BeginSend(Byte[],Int32,AsyncCallback,Object)\n  fullName: System.Net.Sockets.UdpClient.BeginSend(Byte[],Int32,AsyncCallback,Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Sends a datagram to a remote host asynchronously. The destination was specified previously by a call to <xref:System.Net.Sockets.UdpClient.Connect*>.\n  remarks: \"The asynchronous BeginSend operation must be completed by calling the <xref:System.Net.Sockets.UdpClient.EndSend%2A> method. Typically, the method is invoked by the `requestCallback` delegate.  \\n  \\n This method does not block until the operation completes. To block until the operation is complete, use one of the <xref:System.Net.Sockets.UdpClient.Send%2A> method overloads.  \\n  \\n For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"The following code example uses BeginSend to asynchronously send a server request.  \\n  \\n [!code-cpp[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/cpp/8a1303c1-e75f-4620-9cd1-_1.cpp)]\\n [!code-cs[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/csharp/8a1303c1-e75f-4620-9cd1-_1.cs)]  \\n  \\n [!code-cpp[System.Net.Sockets.UdpClient1#3](~/add/codesnippet/cpp/8a1303c1-e75f-4620-9cd1-_2.cpp)]\\n [!code-cs[System.Net.Sockets.UdpClient1#3](~/add/codesnippet/csharp/8a1303c1-e75f-4620-9cd1-_2.cs)]\"\n  syntax:\n    content: public IAsyncResult BeginSend (byte[] datagram, int bytes, AsyncCallback requestCallback, object state);\n    parameters:\n    - id: datagram\n      type: System.Byte[]\n      description: A <xref:System.Byte> array that contains the data to be sent.\n    - id: bytes\n      type: System.Int32\n      description: The number of bytes to send.\n    - id: requestCallback\n      type: System.AsyncCallback\n      description: An <xref:System.AsyncCallback> delegate that references the method to invoke when the operation is complete.\n    - id: state\n      type: System.Object\n      description: A user-defined object that contains information about the send operation. This object is passed to the `requestCallback` delegate when the operation is complete.\n    return:\n      type: System.IAsyncResult\n      description: An <xref:System.IAsyncResult> object that references the asynchronous send.\n  overload: System.Net.Sockets.UdpClient.BeginSend*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.Net.IPEndPoint,System.AsyncCallback,System.Object)\n  id: BeginSend(System.Byte[],System.Int32,System.Net.IPEndPoint,System.AsyncCallback,System.Object)\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: BeginSend(Byte[],Int32,IPEndPoint,AsyncCallback,Object)\n  nameWithType: UdpClient.BeginSend(Byte[],Int32,IPEndPoint,AsyncCallback,Object)\n  fullName: System.Net.Sockets.UdpClient.BeginSend(Byte[],Int32,IPEndPoint,AsyncCallback,Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Sends a datagram to a destination asynchronously. The destination is specified by a <xref:System.Net.EndPoint>.\n  remarks: \"The asynchronous BeginSend operation must be completed by calling the <xref:System.Net.Sockets.UdpClient.EndSend%2A> method. Typically, the method is invoked by the `requestCallback` delegate.  \\n  \\n This method does not block until the operation is complete. To block until the operation is complete, use one of the <xref:System.Net.Sockets.UdpClient.Send%2A> method overloads.  \\n  \\n For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"The following code example uses <xref:System.Net.Sockets.UdpClient.BeginSend%2A> to asynchronously send a server request.  \\n  \\n [!code-cpp[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/cpp/baa8f51b-e44a-4d9b-997b-_1.cpp)]\\n [!code-cs[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/csharp/baa8f51b-e44a-4d9b-997b-_1.cs)]  \\n  \\n [!code-cpp[System.Net.Sockets.UdpClient1#4](~/add/codesnippet/cpp/baa8f51b-e44a-4d9b-997b-_2.cpp)]\\n [!code-cs[System.Net.Sockets.UdpClient1#4](~/add/codesnippet/csharp/baa8f51b-e44a-4d9b-997b-_2.cs)]\"\n  syntax:\n    content: public IAsyncResult BeginSend (byte[] datagram, int bytes, System.Net.IPEndPoint endPoint, AsyncCallback requestCallback, object state);\n    parameters:\n    - id: datagram\n      type: System.Byte[]\n      description: A <xref:System.Byte> array that contains the data to be sent.\n    - id: bytes\n      type: System.Int32\n      description: The number of bytes to send.\n    - id: endPoint\n      type: System.Net.IPEndPoint\n      description: The <xref:System.Net.EndPoint> that represents the destination for the data.\n    - id: requestCallback\n      type: System.AsyncCallback\n      description: An <xref:System.AsyncCallback> delegate that references the method to invoke when the operation is complete.\n    - id: state\n      type: System.Object\n      description: A user-defined object that contains information about the send operation. This object is passed to the `requestCallback` delegate when the operation is complete.\n    return:\n      type: System.IAsyncResult\n      description: An <xref:System.IAsyncResult> object that references the asynchronous send.\n  overload: System.Net.Sockets.UdpClient.BeginSend*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.String,System.Int32,System.AsyncCallback,System.Object)\n  id: BeginSend(System.Byte[],System.Int32,System.String,System.Int32,System.AsyncCallback,System.Object)\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: BeginSend(Byte[],Int32,String,Int32,AsyncCallback,Object)\n  nameWithType: UdpClient.BeginSend(Byte[],Int32,String,Int32,AsyncCallback,Object)\n  fullName: System.Net.Sockets.UdpClient.BeginSend(Byte[],Int32,String,Int32,AsyncCallback,Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Sends a datagram to a destination asynchronously. The destination is specified by the host name and port number.\n  remarks: \"The asynchronous BeginSend operation must be completed by calling the <xref:System.Net.Sockets.UdpClient.EndSend%2A> method. Typically, the method is invoked by the `requestCallback` delegate.  \\n  \\n This method does not block until the operation is complete. To block until the operation is complete, use one of the <xref:System.Net.Sockets.UdpClient.Send%2A> method overloads.  \\n  \\n For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md).\"\n  example:\n  - \"The following code example uses <xref:System.Net.Sockets.UdpClient.BeginSend%2A> to asynchronously send a server request.  \\n  \\n [!code-cpp[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/cpp/b00a89c3-67f5-4a47-8f24-_1.cpp)]\\n [!code-cs[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/csharp/b00a89c3-67f5-4a47-8f24-_1.cs)]  \\n  \\n [!code-cpp[System.Net.Sockets.UdpClient1#5](~/add/codesnippet/cpp/b00a89c3-67f5-4a47-8f24-_2.cpp)]\\n [!code-cs[System.Net.Sockets.UdpClient1#5](~/add/codesnippet/csharp/b00a89c3-67f5-4a47-8f24-_2.cs)]\"\n  syntax:\n    content: public IAsyncResult BeginSend (byte[] datagram, int bytes, string hostname, int port, AsyncCallback requestCallback, object state);\n    parameters:\n    - id: datagram\n      type: System.Byte[]\n      description: A <xref:System.Byte> array that contains the data to be sent.\n    - id: bytes\n      type: System.Int32\n      description: The number of bytes to send.\n    - id: hostname\n      type: System.String\n      description: The destination host.\n    - id: port\n      type: System.Int32\n      description: The destination port number.\n    - id: requestCallback\n      type: System.AsyncCallback\n      description: An <xref:System.AsyncCallback> delegate that references the method to invoke when the operation is complete.\n    - id: state\n      type: System.Object\n      description: A user-defined object that contains information about the send operation. This object is passed to the `requestCallback` delegate when the operation is complete.\n    return:\n      type: System.IAsyncResult\n      description: An <xref:System.IAsyncResult> object that references the asynchronous send.\n  overload: System.Net.Sockets.UdpClient.BeginSend*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Sockets.UdpClient.Client\n  id: Client\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: Client\n  nameWithType: UdpClient.Client\n  fullName: System.Net.Sockets.UdpClient.Client\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Gets or sets the underlying network <xref:System.Net.Sockets.Socket>.\n  remarks: <xref:System.Net.Sockets.UdpClient> creates a <xref:System.Net.Sockets.Socket> used to send and receive data over a network. Classes deriving from <xref:System.Net.Sockets.UdpClient> can use this property to get or set this <xref:System.Net.Sockets.Socket>. Use the underlying <xref:System.Net.Sockets.Socket> returned from Client if you require access beyond that which <xref:System.Net.Sockets.UdpClient> provides. You can also use Client to set the underlying <xref:System.Net.Sockets.Socket> to an existing <xref:System.Net.Sockets.Socket>. This is useful if you want to take advantage of the simplicity of <xref:System.Net.Sockets.UdpClient> using a pre-existing <xref:System.Net.Sockets.Socket>.\n  example:\n  - \"The following example demonstrates the use of the Client property. In this example, broadcasting is enabled for the underlying <xref:System.Net.Sockets.Socket>.  \\n  \\n [!code-cs[Classic UdpClient.ProtectedMethodsAndPropertiesExample#1](~/add/codesnippet/csharp/p-system.net.sockets.udp_0_1.cs)]\\n [!code-cpp[Classic UdpClient.ProtectedMethodsAndPropertiesExample#1](~/add/codesnippet/cpp/p-system.net.sockets.udp_0_1.cpp)]\\n [!code-vb[Classic UdpClient.ProtectedMethodsAndPropertiesExample#1](~/add/codesnippet/visualbasic/p-system.net.sockets.udp_0_1.vb)]\"\n  syntax:\n    content: public System.Net.Sockets.Socket Client { get; set; }\n    return:\n      type: System.Net.Sockets.Socket\n      description: The underlying Network <xref:System.Net.Sockets.Socket>.\n  overload: System.Net.Sockets.UdpClient.Client*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Sockets.UdpClient.Close\n  id: Close\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: Close()\n  nameWithType: UdpClient.Close()\n  fullName: System.Net.Sockets.UdpClient.Close()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Closes the UDP connection.\n  remarks: \"The Close disables the underlying <xref:System.Net.Sockets.Socket> and releases all managed and unmanaged resources associated with the <xref:System.Net.Sockets.UdpClient>.  \\n  \\n> [!NOTE]\\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.\"\n  example:\n  - \"The following example demonstrates closing a <xref:System.Net.Sockets.UdpClient> by calling the Close method.  \\n  \\n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#15](~/add/codesnippet/csharp/m-system.net.sockets.udp_10_1.cs)]\\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#15](~/add/codesnippet/cpp/m-system.net.sockets.udp_10_1.cpp)]\\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#15](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_10_1.vb)]\"\n  syntax:\n    content: public void Close ();\n    parameters: []\n  overload: System.Net.Sockets.UdpClient.Close*\n  exceptions:\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when accessing the socket. See the Remarks section for more information.\n  platform:\n  - net462\n- uid: System.Net.Sockets.UdpClient.Connect(System.Net.IPEndPoint)\n  id: Connect(System.Net.IPEndPoint)\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: Connect(IPEndPoint)\n  nameWithType: UdpClient.Connect(IPEndPoint)\n  fullName: System.Net.Sockets.UdpClient.Connect(IPEndPoint)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Establishes a default remote host using the specified network endpoint.\n  remarks: \"The <xref:System.Net.Sockets.UdpClient.Connect%2A> method establishes a default remote host using the value specified in the `endPoint` parameter. Once established, you do not have to specify a remote host in each call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method.  \\n  \\n Establishing a default remote host is optional. Specifying a default remote host limits you to that host only. If you want to send datagrams to a different remote host, you must make another call to the <xref:System.Net.Sockets.UdpClient.Connect%2A> method or create another <xref:System.Net.Sockets.UdpClient> without a default remote host. If you have established a default remote host and you also provide a remote host in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method, <xref:System.Net.Sockets.UdpClient.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.  \\n  \\n If you call the <xref:System.Net.Sockets.Socket.Connect%2A> method, any datagrams that arrive from an address other than the specified default will be discarded. You cannot set the default remote host to a broadcast address using this method unless you inherit from <xref:System.Net.Sockets.UdpClient>, use the Client method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>.  \\n  \\n You can however, broadcast data to the default broadcast address, 255.255.255.255, if you specify <xref:System.Net.IPAddress.Broadcast?displayProperty=fullName> in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method. If your application requires greater control over broadcast addresses, you can also revert to using the <xref:System.Net.Sockets.Socket> class.  \\n  \\n> [!NOTE]\\n>  Since the UDP protocol is connectionless, the <xref:System.Net.Sockets.UdpClient.Connect%2A> method does not block. Do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method if you intend to receive multicasted datagrams.\"\n  example:\n  - \"The following example uses an <xref:System.Net.IPEndPoint> to establish a default remote host.  \\n  \\n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#7](~/add/codesnippet/csharp/m-system.net.sockets.udp_1_1.cs)]\\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#7](~/add/codesnippet/cpp/m-system.net.sockets.udp_1_1.cpp)]\\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#7](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_1_1.vb)]\"\n  syntax:\n    content: public void Connect (System.Net.IPEndPoint endPoint);\n    parameters:\n    - id: endPoint\n      type: System.Net.IPEndPoint\n      description: An <xref:System.Net.IPEndPoint> that specifies the network endpoint to which you intend to send data.\n  overload: System.Net.Sockets.UdpClient.Connect*\n  exceptions:\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when accessing the socket. See the Remarks section for more information.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>endPoint</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Net.Sockets.UdpClient\"></xref> is closed.\n  platform:\n  - net462\n- uid: System.Net.Sockets.UdpClient.Connect(System.Net.IPAddress,System.Int32)\n  id: Connect(System.Net.IPAddress,System.Int32)\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: Connect(IPAddress,Int32)\n  nameWithType: UdpClient.Connect(IPAddress,Int32)\n  fullName: System.Net.Sockets.UdpClient.Connect(IPAddress,Int32)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Establishes a default remote host using the specified IP address and port number.\n  remarks: \"The <xref:System.Net.Sockets.UdpClient.Connect%2A> method establishes a default remote host using the values specified in the `addr` and `port` parameters. Once established, you do not have to specify a remote host in each call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method.  \\n  \\n Establishing a default remote host is optional. Specifying a default remote host limits you to that host only. If you want to send datagrams to a different remote host, you must make another call to the <xref:System.Net.Sockets.UdpClient.Connect%2A> method or create another <xref:System.Net.Sockets.UdpClient> without a default remote host. If you have established a default remote host and you also provide a remote host in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method, <xref:System.Net.Sockets.UdpClient.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.  \\n  \\n If you call the <xref:System.Net.Sockets.Socket.Connect%2A> method, any datagrams that arrive from an address other than the specified default will be discarded. You cannot set the default remote host to a broadcast address using this method unless you inherit from <xref:System.Net.Sockets.UdpClient>, use the client method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>.  \\n  \\n You can however, broadcast data to the default broadcast address, 255.255.255.255, if you specify <xref:System.Net.IPAddress.Broadcast?displayProperty=fullName> in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method. If your application requires greater control over broadcast addresses, you can also revert to using the <xref:System.Net.Sockets.Socket> class.  \\n  \\n> [!NOTE]\\n>  Since the UDP protocol is connectionless, the <xref:System.Net.Sockets.UdpClient.Connect%2A> method does not block. Do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method if you intend to receive multicasted datagrams.\"\n  example:\n  - \"The following example uses an IP address and port number to connect with a remote host.  \\n  \\n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#6](~/add/codesnippet/csharp/m-system.net.sockets.udp_6_1.cs)]\\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#6](~/add/codesnippet/cpp/m-system.net.sockets.udp_6_1.cpp)]\\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#6](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_6_1.vb)]\"\n  syntax:\n    content: public void Connect (System.Net.IPAddress addr, int port);\n    parameters:\n    - id: addr\n      type: System.Net.IPAddress\n      description: The <xref:System.Net.IPAddress> of the remote host to which you intend to send data.\n    - id: port\n      type: System.Int32\n      description: The port number to which you intend send data.\n  overload: System.Net.Sockets.UdpClient.Connect*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: <xref href=\"System.Net.Sockets.UdpClient\"></xref> is closed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>addr</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>port</code> is not between <xref:System.Net.IPEndPoint.MinPort> and <xref:System.Net.IPEndPoint.MaxPort>.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when accessing the socket. See the Remarks section for more information.\n  platform:\n  - net462\n- uid: System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)\n  id: Connect(System.String,System.Int32)\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: Connect(String,Int32)\n  nameWithType: UdpClient.Connect(String,Int32)\n  fullName: System.Net.Sockets.UdpClient.Connect(String,Int32)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Establishes a default remote host using the specified host name and port number.\n  remarks: \"The Connect method establishes a default remote host using the values specified in the `port` and `hostname` parameters. Once established, you do not have to specify a remote host in each call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method.  \\n  \\n Establishing a default remote host is optional. Specifying a default remote host limits you to that host only. If you want to send datagrams to a different remote host, you must make another call to the Connect method or create another <xref:System.Net.Sockets.UdpClient> without a default remote host.  \\n  \\n If you have established a default remote host and you also provide a remote host in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method, <xref:System.Net.Sockets.UdpClient.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.  \\n  \\n If you call the <xref:System.Net.Sockets.Socket.Connect%2A> method, any datagrams that arrive from an address other than the specified default will be discarded. You cannot set the default remote host to a broadcast address using this method unless you inherit from <xref:System.Net.Sockets.UdpClient>, use the client method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>.  \\n  \\n You can however, broadcast data to the default broadcast address, 255.255.255.255, if you specify <xref:System.Net.IPAddress.Broadcast?displayProperty=fullName> in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method. If your application requires greater control over broadcast addresses, you can also revert to using the <xref:System.Net.Sockets.Socket> class.  \\n  \\n> [!NOTE]\\n>  Since the UDP protocol is connectionless, the Connect method does not block. Do not call the Connect method if you intend to receive multicasted datagrams.\"\n  example:\n  - \"The following example uses the host name and port number to connect to a remote host.  \\n  \\n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#5](~/add/codesnippet/csharp/m-system.net.sockets.udp_13_1.cs)]\\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#5](~/add/codesnippet/cpp/m-system.net.sockets.udp_13_1.cpp)]\\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#5](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_13_1.vb)]\"\n  syntax:\n    content: public void Connect (string hostname, int port);\n    parameters:\n    - id: hostname\n      type: System.String\n      description: The DNS name of the remote host to which you intend send data.\n    - id: port\n      type: System.Int32\n      description: The port number on the remote host to which you intend to send data.\n  overload: System.Net.Sockets.UdpClient.Connect*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Net.Sockets.UdpClient\"></xref> is closed.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>port</code> is not between <xref:System.Net.IPEndPoint.MinPort> and <xref:System.Net.IPEndPoint.MaxPort>.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when accessing the socket. See the Remarks section for more information.\n  platform:\n  - net462\n- uid: System.Net.Sockets.UdpClient.Dispose\n  id: Dispose\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: UdpClient.Dispose()\n  fullName: System.Net.Sockets.UdpClient.Dispose()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Releases the managed and unmanaged resources used by the <xref href=\"System.Net.Sockets.UdpClient\"></xref>.\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.Net.Sockets.UdpClient.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Sockets.UdpClient.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: UdpClient.Dispose(Boolean)\n  fullName: System.Net.Sockets.UdpClient.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Releases the unmanaged resources used by the <xref href=\"System.Net.Sockets.UdpClient\"></xref> and optionally releases the managed resources.\n  remarks: \"This method is called by the public `Dispose()`method and the <xref:System.Object.Finalize%2A> method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.  \\n  \\n When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.Net.Sockets.UdpClient> references. This method invokes the `Dispose()` method of each referenced object.\"\n  syntax:\n    content: protected virtual void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to release both managed and unmanaged resources; <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to release only unmanaged resources.\n  overload: System.Net.Sockets.UdpClient.Dispose*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Sockets.UdpClient.DontFragment\n  id: DontFragment\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: DontFragment\n  nameWithType: UdpClient.DontFragment\n  fullName: System.Net.Sockets.UdpClient.DontFragment\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Gets or sets a <xref:System.Boolean> value that specifies whether the <xref href=\"System.Net.Sockets.UdpClient\"></xref> allows Internet Protocol (IP) datagrams to be fragmented.\n  remarks: Datagrams require fragmentation when their size exceeds the Maximum Transfer Unit (MTU) of the transmission medium. Datagrams may be fragmented by the sending host or by an intermediate router. If a datagram must be fragmented, and the <xref:System.Net.Sockets.Socket.DontFragment%2A> option is set, the datagram is discarded, and an Internet Control Message Protocol (ICMP) error message is sent back to the sender of the datagram.\n  example:\n  - \"The following code example shows the use of the <xref:System.Net.Sockets.Socket.DontFragment%2A> property.  \\n  \\n [!code-cs[System.Net.Sockets.UdpClient#2](~/add/codesnippet/csharp/p-system.net.sockets.udp_5_1.cs)]\\n [!code-cpp[System.Net.Sockets.UdpClient#2](~/add/codesnippet/cpp/p-system.net.sockets.udp_5_1.cpp)]\"\n  syntax:\n    content: public bool DontFragment { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Net.Sockets.UdpClient\"></xref> allows datagram fragmentation; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>.\n  overload: System.Net.Sockets.UdpClient.DontFragment*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This property can be set only for sockets that use the <xref:System.Net.Sockets.AddressFamily> flag or the <xref:System.Net.Sockets.AddressFamily> flag.\n  platform:\n  - net462\n- uid: System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)\n  id: DropMulticastGroup(System.Net.IPAddress)\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: DropMulticastGroup(IPAddress)\n  nameWithType: UdpClient.DropMulticastGroup(IPAddress)\n  fullName: System.Net.Sockets.UdpClient.DropMulticastGroup(IPAddress)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Leaves a multicast group.\n  remarks: \"The DropMulticastGroup method withdraws the <xref:System.Net.Sockets.UdpClient> from the multicast group identified by the specified <xref:System.Net.IPAddress>. After calling the DropMulticastGroup method, the underlying <xref:System.Net.Sockets.Socket> sends an Internet Group Management Protocol (IGMP) packet to the router, removing the router from the multicast group. After a <xref:System.Net.Sockets.UdpClient> withdraws from the group, it will no longer be able to receive datagrams sent to that group.  \\n  \\n> [!NOTE]\\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.\"\n  example:\n  - \"The following example demonstrates how to drop a multicast group by providing a multicast address.  \\n  \\n [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/add/codesnippet/cpp/m-system.net.sockets.udp_3_1.cpp)]\\n [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_3_1.vb)]\\n [!code-cs[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/add/codesnippet/csharp/m-system.net.sockets.udp_3_1.cs)]\"\n  syntax:\n    content: public void DropMulticastGroup (System.Net.IPAddress multicastAddr);\n    parameters:\n    - id: multicastAddr\n      type: System.Net.IPAddress\n      description: The <xref:System.Net.IPAddress> of the multicast group to leave.\n  overload: System.Net.Sockets.UdpClient.DropMulticastGroup*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The underlying <xref:System.Net.Sockets.Socket> has been closed.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when accessing the socket. See the Remarks section for more information.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The IP address is not compatible with the <xref:System.Net.Sockets.AddressFamily> value that defines the addressing scheme of the socket.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>multicastAddr</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress,System.Int32)\n  id: DropMulticastGroup(System.Net.IPAddress,System.Int32)\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: DropMulticastGroup(IPAddress,Int32)\n  nameWithType: UdpClient.DropMulticastGroup(IPAddress,Int32)\n  fullName: System.Net.Sockets.UdpClient.DropMulticastGroup(IPAddress,Int32)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Leaves a multicast group.\n  remarks: \"The DropMulticastGroup method withdraws the <xref:System.Net.Sockets.UdpClient> from the multicast group identified by the specified <xref:System.Net.IPAddress>. After calling the DropMulticastGroup method, the underlying <xref:System.Net.Sockets.Socket> sends an Internet Group Management Protocol (IGMP) packet to the router, removing the router from the multicast group. After a <xref:System.Net.Sockets.UdpClient> withdraws from the group, it will no longer be able to receive datagrams sent to that group.  \\n  \\n> [!NOTE]\\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.\"\n  example:\n  - \"The following code example demonstrates how to drop a multicast group by providing a multicast address.  \\n  \\n [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/add/codesnippet/cpp/d83f3217-6e3e-43a5-a5d8-_1.cpp)]\\n [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/add/codesnippet/visualbasic/d83f3217-6e3e-43a5-a5d8-_1.vb)]\\n [!code-cs[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/add/codesnippet/csharp/d83f3217-6e3e-43a5-a5d8-_1.cs)]\"\n  syntax:\n    content: public void DropMulticastGroup (System.Net.IPAddress multicastAddr, int ifindex);\n    parameters:\n    - id: multicastAddr\n      type: System.Net.IPAddress\n      description: The <xref:System.Net.IPAddress> of the multicast group to leave.\n    - id: ifindex\n      type: System.Int32\n      description: The local address of the multicast group to leave.\n  overload: System.Net.Sockets.UdpClient.DropMulticastGroup*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The underlying <xref:System.Net.Sockets.Socket> has been closed.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when accessing the socket. See the Remarks section for more information.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The IP address is not compatible with the <xref:System.Net.Sockets.AddressFamily> value that defines the addressing scheme of the socket.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>multicastAddr</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  platform:\n  - net462\n- uid: System.Net.Sockets.UdpClient.EnableBroadcast\n  id: EnableBroadcast\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: EnableBroadcast\n  nameWithType: UdpClient.EnableBroadcast\n  fullName: System.Net.Sockets.UdpClient.EnableBroadcast\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Gets or sets a <xref:System.Boolean> value that specifies whether the <xref href=\"System.Net.Sockets.UdpClient\"></xref> may send or receive broadcast packets.\n  remarks: Broadcasting is limited to a specific subnet. You can broadcast to your local subnet by sending a packet to 255.255.255.255; or, you can use the directed broadcast address, which is the network portion of an Internet Protocol (IP) address with all bits set in the host portion. For example, if your IP address is 192.168.1.40 (a Class C address, with the network portion as the first three octets, and the host portion is the last octet), your directed broadcast address is 192.168.1.255.\n  example:\n  - \"The following code example shows the use of the EnableBroadcast property.  \\n  \\n [!code-cs[System.Net.Sockets.UdpClient#3](~/add/codesnippet/csharp/p-system.net.sockets.udp_3_1.cs)]\\n [!code-cpp[System.Net.Sockets.UdpClient#3](~/add/codesnippet/cpp/p-system.net.sockets.udp_3_1.cpp)]\"\n  syntax:\n    content: public bool EnableBroadcast { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Net.Sockets.UdpClient\"></xref> allows broadcast packets; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Net.Sockets.UdpClient.EnableBroadcast*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Sockets.UdpClient.EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)\n  id: EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: EndReceive(IAsyncResult,IPEndPoint)\n  nameWithType: UdpClient.EndReceive(IAsyncResult,IPEndPoint)\n  fullName: System.Net.Sockets.UdpClient.EndReceive(IAsyncResult,IPEndPoint)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Ends a pending asynchronous receive.\n  remarks: \"This method blocks until the operation is complete.  \\n  \\n To perform this operation synchronously, use the <xref:System.Net.Sockets.UdpClient.Receive%2A> method.\"\n  example:\n  - \"The following code example uses <xref:System.Net.Sockets.UdpClient.BeginSend%2A> to complete an asynchronous receive of a server response.  \\n  \\n [!code-cpp[System.Net.Sockets.UdpClient1#1](~/add/codesnippet/cpp/5ace0ab2-d0e9-4f1f-a415-_1.cpp)]\\n [!code-cs[System.Net.Sockets.UdpClient1#1](~/add/codesnippet/csharp/5ace0ab2-d0e9-4f1f-a415-_1.cs)]\"\n  syntax:\n    content: public byte[] EndReceive (IAsyncResult asyncResult, ref System.Net.IPEndPoint remoteEP);\n    parameters:\n    - id: asyncResult\n      type: System.IAsyncResult\n      description: An <xref:System.IAsyncResult> object returned by a call to <xref:System.Net.Sockets.UdpClient.BeginReceive*>.\n    - id: remoteEP\n      type: System.Net.IPEndPoint\n      description: The specified remote endpoint.\n    return:\n      type: System.Byte[]\n      description: If successful, the number of bytes received. If unsuccessful, this method returns 0.\n  overload: System.Net.Sockets.UdpClient.EndReceive*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>asyncResult</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>asyncResult</code> was not returned by a call to the <xref:System.Net.Sockets.UdpClient.BeginReceive*> method.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: EndReceive was previously called for the asynchronous read.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when attempting to access the underlying <xref:System.Net.Sockets.Socket>. See the Remarks section for more information.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The underlying <xref:System.Net.Sockets.Socket> has been closed.\n  platform:\n  - net462\n- uid: System.Net.Sockets.UdpClient.EndSend(System.IAsyncResult)\n  id: EndSend(System.IAsyncResult)\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: EndSend(IAsyncResult)\n  nameWithType: UdpClient.EndSend(IAsyncResult)\n  fullName: System.Net.Sockets.UdpClient.EndSend(IAsyncResult)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Ends a pending asynchronous send.\n  remarks: \"This method blocks until the operation is complete.  \\n  \\n To perform this operation synchronously, use the <xref:System.Net.Sockets.UdpClient.Send%2A> method.\"\n  example:\n  - \"The following code example uses <xref:System.Net.Sockets.UdpClient.BeginSend%2A> to complete an asynchronous send of a server request.  \\n  \\n [!code-cpp[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/cpp/m-system.net.sockets.udp_0_1.cpp)]\\n [!code-cs[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/csharp/m-system.net.sockets.udp_0_1.cs)]\"\n  syntax:\n    content: public int EndSend (IAsyncResult asyncResult);\n    parameters:\n    - id: asyncResult\n      type: System.IAsyncResult\n      description: An <xref:System.IAsyncResult> object returned by a call to <xref:System.Net.Sockets.UdpClient.BeginSend*>.\n    return:\n      type: System.Int32\n      description: If successful, the number of bytes sent to the <xref href=\"System.Net.Sockets.UdpClient\"></xref>.\n  overload: System.Net.Sockets.UdpClient.EndSend*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>asyncResult</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>asyncResult</code> was not returned by a call to the <xref:System.Net.Sockets.Socket.BeginSend*> method.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <xref:System.Net.Sockets.Socket.EndSend*> was previously called for the asynchronous read.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when attempting to access the underlying socket. See the Remarks section for more information.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The underlying <xref:System.Net.Sockets.Socket> has been closed.\n  platform:\n  - net462\n- uid: System.Net.Sockets.UdpClient.ExclusiveAddressUse\n  id: ExclusiveAddressUse\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: ExclusiveAddressUse\n  nameWithType: UdpClient.ExclusiveAddressUse\n  fullName: System.Net.Sockets.UdpClient.ExclusiveAddressUse\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Gets or sets a <xref:System.Boolean> value that specifies whether the <xref href=\"System.Net.Sockets.UdpClient\"></xref> allows only one client to use a port.\n  remarks: \"By default, multiple clients can use a specific port; however, only one of the clients can perform operations on the network traffic sent to the port. You can use the ExclusiveAddressUse property to prevent multiple clients from using a specific port.  \\n  \\n This property must be set before the underlying socket is bound to a client port. If you call <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%29?displayProperty=fullName>, <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%2CSystem.Net.Sockets.AddressFamily%29?displayProperty=fullName>, <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.IPEndPoint%29?displayProperty=fullName>, or <xref:System.Net.Sockets.UdpClient.%23ctor%28System.String%2CSystem.Int32%29?displayProperty=fullName>, the client port is bound as a side effect of the constructor, and you cannot subsequently set the ExclusiveAddressUse property\"\n  example:\n  - \"The following code example creates a <xref:System.Net.Sockets.UdpClient>, and gets and sets the ExclusiveAddressUse property.  \\n  \\n [!code-cs[System.Net.Sockets.UdpClient#4](~/add/codesnippet/csharp/p-system.net.sockets.udp_4_1.cs)]\\n [!code-cpp[System.Net.Sockets.UdpClient#4](~/add/codesnippet/cpp/p-system.net.sockets.udp_4_1.cpp)]\"\n  syntax:\n    content: public bool ExclusiveAddressUse { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Net.Sockets.UdpClient\"></xref> allows only one client to use a specific port; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>. The default is <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> for Windows Server 2003 and Windows XP Service Pack 2 and later, and <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> for all other versions.\n  overload: System.Net.Sockets.UdpClient.ExclusiveAddressUse*\n  exceptions:\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when attempting to access the underlying socket.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The underlying <xref:System.Net.Sockets.Socket> has been closed.\n  platform:\n  - net462\n- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)\n  id: JoinMulticastGroup(System.Net.IPAddress)\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: JoinMulticastGroup(IPAddress)\n  nameWithType: UdpClient.JoinMulticastGroup(IPAddress)\n  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(IPAddress)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Adds a <xref href=\"System.Net.Sockets.UdpClient\"></xref> to a multicast group.\n  remarks: \"The JoinMulticastGroup method subscribes the <xref:System.Net.Sockets.UdpClient> to a multicast group using the specified <xref:System.Net.IPAddress>. After calling the JoinMulticastGroup method, the underlying <xref:System.Net.Sockets.Socket> sends an Internet Group Management Protocol (IGMP) packet to the router requesting membership to the multicast group. The multicast address range is 224.0.0.0 to 239.255.255.255. If you specify an address outside this range or if the router to which the request is made is not multicast enabled, <xref:System.Net.Sockets.UdpClient> will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error. Once the <xref:System.Net.Sockets.UdpClient> is listed with the router as a member of the multicast group, it will be able to receive multicasted datagrams sent to the specified <xref:System.Net.IPAddress>.  \\n  \\n> [!NOTE]\\n>  You must create the <xref:System.Net.Sockets.UdpClient> using the multicast port number; otherwise, you will not be able to receive multicasted datagrams. Do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method prior to calling the JoinMulticastGroup method, or the <xref:System.Net.Sockets.UdpClient.Receive%2A> method will not work. You do not need to belong to a multicast group to send datagrams to a multicast IP address.  \\n  \\n Before joining a multicast group, make sure the socket is bound to the port or endpoint. You do that by calling one of the constructors that accept a port or an endpoint as a parameter.  \\n  \\n To stop receiving multicasted datagrams, call the <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method and provide the <xref:System.Net.IPAddress> of the group from which you would like to withdraw.  \\n  \\n> [!NOTE]\\n>  In the IPv6 case, there are several multicast address ranges you can choose from. Please, refer to the IETF RFC 2375.  \\n  \\n> [!NOTE]\\n>  You cannot call <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> on a <xref:System.Net.Sockets.UdpClient> constructed without a specific local port (that is, using the <xref:System.Net.Sockets.UdpClient.%23ctor> or <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29> constructor).\"\n  example:\n  - \"The following code example demonstrates how to join a multicast group by providing a multicast address.  \\n  \\n [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#1](~/add/codesnippet/cpp/m-system.net.sockets.udp_8_1.cpp)]\\n [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#1](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_8_1.vb)]\\n [!code-cs[System.Net.Sockets.UdpClient.JoinMulticastGroup#1](~/add/codesnippet/csharp/m-system.net.sockets.udp_8_1.cs)]\"\n  syntax:\n    content: public void JoinMulticastGroup (System.Net.IPAddress multicastAddr);\n    parameters:\n    - id: multicastAddr\n      type: System.Net.IPAddress\n      description: The multicast <xref:System.Net.IPAddress> of the group you want to join.\n  overload: System.Net.Sockets.UdpClient.JoinMulticastGroup*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The underlying <xref:System.Net.Sockets.Socket> has been closed.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when accessing the socket. See the Remarks section for more information.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The IP address is not compatible with the <xref:System.Net.Sockets.AddressFamily> value that defines the addressing scheme of the socket.\n  platform:\n  - net462\n- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Int32,System.Net.IPAddress)\n  id: JoinMulticastGroup(System.Int32,System.Net.IPAddress)\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: JoinMulticastGroup(Int32,IPAddress)\n  nameWithType: UdpClient.JoinMulticastGroup(Int32,IPAddress)\n  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(Int32,IPAddress)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Adds a <xref href=\"System.Net.Sockets.UdpClient\"></xref> to a multicast group.\n  remarks: \"Before joining a multicast group, be sure the socket is bound to the port or endpoint. You can do this by calling one of the constructors that accepts a port or an endpoint as parameter.  \\n  \\n The `infindex` parameter is used to identify a hardware interface on the same link.  \\n  \\n> [!NOTE]\\n>  There are several multicast address ranges to choose from. Refer to the IETF RFC 2375.  \\n  \\n> [!NOTE]\\n>  You cannot call <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> on a <xref:System.Net.Sockets.UdpClient> constructed without a specific local port (that is, using the <xref:System.Net.Sockets.UdpClient.%23ctor?displayProperty=fullName> or <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29?displayProperty=fullName> constructor).\"\n  example:\n  - >-\n    [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#5](~/add/codesnippet/cpp/f675abdc-8a60-48f5-a8c6-_1.cpp)]\n     [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#5](~/add/codesnippet/visualbasic/f675abdc-8a60-48f5-a8c6-_1.vb)]\n     [!code-cs[System.Net.Sockets.UdpClient.JoinMulticastGroup#5](~/add/codesnippet/csharp/f675abdc-8a60-48f5-a8c6-_1.cs)]\n  syntax:\n    content: public void JoinMulticastGroup (int ifindex, System.Net.IPAddress multicastAddr);\n    parameters:\n    - id: ifindex\n      type: System.Int32\n      description: The interface index associated with the local IP address on which to join the multicast group.\n    - id: multicastAddr\n      type: System.Net.IPAddress\n      description: The multicast <xref:System.Net.IPAddress> of the group you want to join.\n  overload: System.Net.Sockets.UdpClient.JoinMulticastGroup*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The underlying <xref:System.Net.Sockets.Socket> has been closed.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when accessing the socket. See the Remarks section for more information.\n  platform:\n  - net462\n- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Int32)\n  id: JoinMulticastGroup(System.Net.IPAddress,System.Int32)\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: JoinMulticastGroup(IPAddress,Int32)\n  nameWithType: UdpClient.JoinMulticastGroup(IPAddress,Int32)\n  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(IPAddress,Int32)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Adds a <xref href=\"System.Net.Sockets.UdpClient\"></xref> to a multicast group with the specified Time to Live (TTL).\n  remarks: \"The <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method subscribes the <xref:System.Net.Sockets.UdpClient> to a multicast group using the specified <xref:System.Net.IPAddress>. After calling the <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method, the underlying <xref:System.Net.Sockets.Socket> sends an Internet Group Management Protocol (IGMP) packet to the router requesting membership to the multicast group. The multicast address range is 224.0.0.0 to 239.255.255.255. If you specify an address outside this range or if the router to which the request is made is not multicast enabled, <xref:System.Net.Sockets.UdpClient> will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error. The `timeToLive` parameter specifies how many router hops will be allowed for a multicasted datagram before being discarded. Once the <xref:System.Net.Sockets.UdpClient> is listed with the router as a member of the multicast group, it will be able to receive multicasted datagrams sent to the specified <xref:System.Net.IPAddress>.  \\n  \\n> [!NOTE]\\n>  You must create the <xref:System.Net.Sockets.UdpClient> using the multicast port number otherwise you will not be able to receive multicasted datagrams. Do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method prior to calling the <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method or the receive method will not work. You do not need to belong to a multicast group to send datagrams to a multicast IP address.  \\n  \\n Before joining a multicast group make sure the socket is bound to the port or endpoint. You do that by calling one of the constructors that accept as parameter a port or an endpoint.  \\n  \\n To stop receiving multicasted datagrams, call the <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method and provide the <xref:System.Net.IPAddress> of the group from which you would like to withdraw.  \\n  \\n> [!NOTE]\\n>  You cannot call <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> on a <xref:System.Net.Sockets.UdpClient> constructed without a specific local port (that is, using the <xref:System.Net.Sockets.UdpClient.%23ctor> or <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29> constructor).\"\n  example:\n  - \"The following example demonstrates how to join a multicast group by providing two parameters, a multicast address, and a number that represents the TTL.  \\n  \\n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#13](~/add/codesnippet/csharp/2ab5d1d5-1bd6-4398-ae63-_1.cs)]\\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#13](~/add/codesnippet/cpp/2ab5d1d5-1bd6-4398-ae63-_1.cpp)]\\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#13](~/add/codesnippet/visualbasic/2ab5d1d5-1bd6-4398-ae63-_1.vb)]\"\n  syntax:\n    content: public void JoinMulticastGroup (System.Net.IPAddress multicastAddr, int timeToLive);\n    parameters:\n    - id: multicastAddr\n      type: System.Net.IPAddress\n      description: The <xref:System.Net.IPAddress> of the multicast group to join.\n    - id: timeToLive\n      type: System.Int32\n      description: The Time to Live (TTL), measured in router hops.\n  overload: System.Net.Sockets.UdpClient.JoinMulticastGroup*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The TTL provided is not between 0 and 255\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The underlying <xref:System.Net.Sockets.Socket> has been closed.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when accessing the socket. See the Remarks section for more information.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>multicastAddr</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The IP address is not compatible with the <xref:System.Net.Sockets.AddressFamily> value that defines the addressing scheme of the socket.\n  platform:\n  - net462\n- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Net.IPAddress)\n  id: JoinMulticastGroup(System.Net.IPAddress,System.Net.IPAddress)\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: JoinMulticastGroup(IPAddress,IPAddress)\n  nameWithType: UdpClient.JoinMulticastGroup(IPAddress,IPAddress)\n  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(IPAddress,IPAddress)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Adds a <xref href=\"System.Net.Sockets.UdpClient\"></xref> to a multicast group.\n  remarks: \"Before you join a multicast group, be sure that the socket is bound to the port or endpoint. You can do this by calling one of the constructors that accepts a port or an endpoint as parameter.  \\n  \\n> [!NOTE]\\n>  There are several multicast address ranges to choose from. You can find them in the IETF RFC 2375.  \\n  \\n> [!NOTE]\\n>  You cannot call <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> on a <xref:System.Net.Sockets.UdpClient> constructed without a specific local port (that is, using the <xref:System.Net.Sockets.UdpClient.%23ctor> or <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29> constructor).\"\n  example:\n  - \"The following code example shows the use of the JoinMulticastGroup method.  \\n  \\n [!code-cs[System.Net.Sockets.UdpClient#6](~/add/codesnippet/csharp/83ef7d63-bccd-4c55-a88d-_1.cs)]\\n [!code-cpp[System.Net.Sockets.UdpClient#6](~/add/codesnippet/cpp/83ef7d63-bccd-4c55-a88d-_1.cpp)]\"\n  syntax:\n    content: public void JoinMulticastGroup (System.Net.IPAddress multicastAddr, System.Net.IPAddress localAddress);\n    parameters:\n    - id: multicastAddr\n      type: System.Net.IPAddress\n      description: The multicast <xref:System.Net.IPAddress> of the group you want to join.\n    - id: localAddress\n      type: System.Net.IPAddress\n      description: The local <xref:System.Net.IPAddress>.\n  overload: System.Net.Sockets.UdpClient.JoinMulticastGroup*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The underlying <xref:System.Net.Sockets.Socket> has been closed.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when accessing the socket. See the Remarks section for more information.\n  platform:\n  - net462\n- uid: System.Net.Sockets.UdpClient.MulticastLoopback\n  id: MulticastLoopback\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: MulticastLoopback\n  nameWithType: UdpClient.MulticastLoopback\n  fullName: System.Net.Sockets.UdpClient.MulticastLoopback\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Gets or sets a <xref:System.Boolean> value that specifies whether outgoing multicast packets are delivered to the sending application.\n  remarks: Multicast is a scalable method for many-to-many communication on the Internet. If a process subscribes to a multicast address, any packets sent by that process are received by every other process that has subscribed to the multicast address.\n  example:\n  - \"The following code example shows the use of the MulticastLoopback property.  \\n  \\n [!code-cs[System.Net.Sockets.UdpClient#7](~/add/codesnippet/csharp/p-system.net.sockets.udp_2_1.cs)]\\n [!code-cpp[System.Net.Sockets.UdpClient#7](~/add/codesnippet/cpp/p-system.net.sockets.udp_2_1.cpp)]\"\n  syntax:\n    content: public bool MulticastLoopback { get; set; }\n    return:\n      type: System.Boolean\n      description: <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the <xref href=\"System.Net.Sockets.UdpClient\"></xref> receives outgoing multicast packets; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n  overload: System.Net.Sockets.UdpClient.MulticastLoopback*\n  exceptions: []\n  platform:\n  - net462\n- uid: System.Net.Sockets.UdpClient.Receive(System.Net.IPEndPoint@)\n  id: Receive(System.Net.IPEndPoint@)\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: Receive(IPEndPoint)\n  nameWithType: UdpClient.Receive(IPEndPoint)\n  fullName: System.Net.Sockets.UdpClient.Receive(IPEndPoint)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Returns a UDP datagram that was sent by a remote host.\n  remarks: \"The Receive method will block until a datagram arrives from a remote host. When data is available, the Receive method will read the first enqueued datagram and return the data portion as a byte array. This method populates the `remoteEP` parameter with the <xref:System.Net.IPAddress> and port number of the sender.  \\n  \\n If you specify a default remote host in the <xref:System.Net.Sockets.UdpClient.Connect%2A> method, the Receive method will accept datagrams from that host only. All other datagrams will be discarded.  \\n  \\n If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.  \\n  \\n> [!NOTE]\\n>  If you intend to receive multicasted datagrams, do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method prior to calling the Receive method. The <xref:System.Net.Sockets.UdpClient> you use to receive datagrams must be created using the multicast port number.\"\n  example:\n  - \"The following example demonstrates the Receive method. The Receive method blocks execution until it receives a message. Using the <xref:System.Net.IPEndPoint> passed to Receive, the identity of the responding host is revealed.  \\n  \\n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#11](~/add/codesnippet/csharp/m-system.net.sockets.udp_5_1.cs)]\\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#11](~/add/codesnippet/cpp/m-system.net.sockets.udp_5_1.cpp)]\\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#11](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_5_1.vb)]\"\n  syntax:\n    content: public byte[] Receive (ref System.Net.IPEndPoint remoteEP);\n    parameters:\n    - id: remoteEP\n      type: System.Net.IPEndPoint\n      description: An <xref:System.Net.IPEndPoint> that represents the remote host from which the data was sent.\n    return:\n      type: System.Byte[]\n      description: An array of type <xref:System.Byte> that contains datagram data.\n  overload: System.Net.Sockets.UdpClient.Receive*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The underlying <xref:System.Net.Sockets.Socket> has been closed.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when accessing the socket. See the Remarks section for more information.\n  platform:\n  - net462\n- uid: System.Net.Sockets.UdpClient.ReceiveAsync\n  id: ReceiveAsync\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: ReceiveAsync()\n  nameWithType: UdpClient.ReceiveAsync()\n  fullName: System.Net.Sockets.UdpClient.ReceiveAsync()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Returns a UDP datagram asynchronously that was sent by a remote host.\n  remarks: \"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601>> object will complete after the UDP packet has been received.  \\n  \\n If you specify a default remote host in the <xref:System.Net.Sockets.UdpClient.Connect%2A> method, this method will accept datagrams from that host only. All other datagrams will be discarded.  \\n  \\n If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.  \\n  \\n> [!WARNING]\\n>  If you intend to receive multicasted datagrams, do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method prior to calling this method. The <xref:System.Net.Sockets.UdpClient> you use to receive datagrams must be created using the multicast port number.\"\n  syntax:\n    content: public System.Threading.Tasks.Task<System.Net.Sockets.UdpReceiveResult> ReceiveAsync ();\n    parameters: []\n    return:\n      type: System.Threading.Tasks.Task{System.Net.Sockets.UdpReceiveResult}\n      description: \"Returns &lt;xref:System.Threading.Tasks.Task%601&gt;.  \\n  \\n The task object representing the asynchronous operation.\"\n  overload: System.Net.Sockets.UdpClient.ReceiveAsync*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The underlying <xref:System.Net.Sockets.Socket> has been closed.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when accessing the socket. See the Remarks section for more information.\n  platform:\n  - net462\n- uid: System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32)\n  id: Send(System.Byte[],System.Int32)\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: Send(Byte[],Int32)\n  nameWithType: UdpClient.Send(Byte[],Int32)\n  fullName: System.Net.Sockets.UdpClient.Send(Byte[],Int32)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Sends a UDP datagram to a remote host.\n  remarks: \"This overload sends datagrams to the remote host established in the <xref:System.Net.Sockets.UdpClient.Connect%2A> method and returns the number of bytes sent. If you do not call <xref:System.Net.Sockets.UdpClient.Connect%2A> before calling this overload, the <xref:System.Net.Sockets.UdpClient.Send%2A> method will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.  \\n  \\n If you want to send datagrams to a different remote host, you must call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method and specify the desired remote host. Use either of the other <xref:System.Net.Sockets.UdpClient.Send%2A> method overloads to send datagrams to a broadcast address.\"\n  example:\n  - \"The following example demonstrates the <xref:System.Net.Sockets.UdpClient.Send%2A> method. You must establish a default remote host prior to using this overload.  \\n  \\n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#10](~/add/codesnippet/csharp/m-system.net.sockets.udp_2_1.cs)]\\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#10](~/add/codesnippet/cpp/m-system.net.sockets.udp_2_1.cpp)]\\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#10](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_2_1.vb)]\"\n  syntax:\n    content: public int Send (byte[] dgram, int bytes);\n    parameters:\n    - id: dgram\n      type: System.Byte[]\n      description: An array of type <xref:System.Byte> that specifies the UDP datagram that you intend to send represented as an array of bytes.\n    - id: bytes\n      type: System.Int32\n      description: The number of bytes in the datagram.\n    return:\n      type: System.Int32\n      description: The number of bytes sent.\n  overload: System.Net.Sockets.UdpClient.Send*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>dgram</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The <xref href=\"System.Net.Sockets.UdpClient\"></xref> has already established a default remote host.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Net.Sockets.UdpClient\"></xref> is closed.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when accessing the socket. See the Remarks section for more information.\n  platform:\n  - net462\n- uid: System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)\n  id: Send(System.Byte[],System.Int32,System.Net.IPEndPoint)\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: Send(Byte[],Int32,IPEndPoint)\n  nameWithType: UdpClient.Send(Byte[],Int32,IPEndPoint)\n  fullName: System.Net.Sockets.UdpClient.Send(Byte[],Int32,IPEndPoint)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Sends a UDP datagram to the host at the specified remote endpoint.\n  remarks: \"The Send method sends datagrams to the specified endpoint and returns the number of bytes successfully sent. Before calling this overload, you must first create an <xref:System.Net.IPEndPoint> using the IP address and port number of the remote host to which your datagrams will be delivered. You can send datagrams to the default broadcast address, 255.255.255.255, by specifying <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> for the <xref:System.Net.IPAddress.Address%2A> property of the <xref:System.Net.IPEndPoint>. After you have created this <xref:System.Net.IPEndPoint>, pass it to the Send method as the `endPoint` parameter.  \\n  \\n If you want to send datagrams to any other broadcast address, use the <xref:System.Net.Sockets.UdpClient.Client%2A> method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>. You can also revert to using the <xref:System.Net.Sockets.Socket> class.  \\n  \\n> [!NOTE]\\n>  Do not provide an `endPoint` parameter to this method if you have already established a remote host with the <xref:System.Net.Sockets.UdpClient.Connect%2A> method. If you do, the Send method will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.\"\n  example:\n  - \"The following example demonstrates the Send method. This example uses an <xref:System.Net.IPEndPoint> to specify the target host.  \\n  \\n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#8](~/add/codesnippet/csharp/2c594ef1-b462-42a1-adc5-_1.cs)]\\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#8](~/add/codesnippet/cpp/2c594ef1-b462-42a1-adc5-_1.cpp)]\\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#8](~/add/codesnippet/visualbasic/2c594ef1-b462-42a1-adc5-_1.vb)]\"\n  syntax:\n    content: public int Send (byte[] dgram, int bytes, System.Net.IPEndPoint endPoint);\n    parameters:\n    - id: dgram\n      type: System.Byte[]\n      description: An array of type <xref:System.Byte> that specifies the UDP datagram that you intend to send, represented as an array of bytes.\n    - id: bytes\n      type: System.Int32\n      description: The number of bytes in the datagram.\n    - id: endPoint\n      type: System.Net.IPEndPoint\n      description: An <xref:System.Net.IPEndPoint> that represents the host and port to which to send the datagram.\n    return:\n      type: System.Int32\n      description: The number of bytes sent.\n  overload: System.Net.Sockets.UdpClient.Send*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>dgram</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <xref href=\"System.Net.Sockets.UdpClient\"></xref> has already established a default remote host.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: <xref href=\"System.Net.Sockets.UdpClient\"></xref> is closed.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when accessing the socket. See the Remarks section for more information.\n  platform:\n  - net462\n- uid: System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.String,System.Int32)\n  id: Send(System.Byte[],System.Int32,System.String,System.Int32)\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: Send(Byte[],Int32,String,Int32)\n  nameWithType: UdpClient.Send(Byte[],Int32,String,Int32)\n  fullName: System.Net.Sockets.UdpClient.Send(Byte[],Int32,String,Int32)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Sends a UDP datagram to a specified port on a specified remote host.\n  remarks: \"The <xref:System.Net.Sockets.UdpClient.Send%2A> method sends datagrams to the values specified by the `hostname` and `port` parameters and returns the number of bytes successfully sent. You can send datagrams to the default broadcast address by specifying \\\"255.255.255.255\\\" for the `hostname` parameter value.  \\n  \\n If you want to send datagrams to any other broadcast address, use the <xref:System.Net.Sockets.UdpClient.Client%2A> method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>. You can also revert to using the <xref:System.Net.Sockets.Socket> class.  \\n  \\n> [!NOTE]\\n>  Do not provide a host name or port number to this method if you have already established a remote host with the <xref:System.Net.Sockets.UdpClient.Connect%2A> method. If you do, the <xref:System.Net.Sockets.UdpClient.Send%2A> method will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.\"\n  example:\n  - \"The following example demonstrates the <xref:System.Net.Sockets.UdpClient.Send%2A> method. This example uses a host name and a port number to identify the target host.  \\n  \\n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#9](~/add/codesnippet/csharp/5d28964f-8575-4595-a91e-_1.cs)]\\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#9](~/add/codesnippet/cpp/5d28964f-8575-4595-a91e-_1.cpp)]\\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#9](~/add/codesnippet/visualbasic/5d28964f-8575-4595-a91e-_1.vb)]\"\n  syntax:\n    content: public int Send (byte[] dgram, int bytes, string hostname, int port);\n    parameters:\n    - id: dgram\n      type: System.Byte[]\n      description: An array of type <xref:System.Byte> that specifies the UDP datagram that you intend to send represented as an array of bytes.\n    - id: bytes\n      type: System.Int32\n      description: The number of bytes in the datagram.\n    - id: hostname\n      type: System.String\n      description: The name of the remote host to which you intend to send the datagram.\n    - id: port\n      type: System.Int32\n      description: The remote port number with which you intend to communicate.\n    return:\n      type: System.Int32\n      description: The number of bytes sent.\n  overload: System.Net.Sockets.UdpClient.Send*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>dgram</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The <xref href=\"System.Net.Sockets.UdpClient\"></xref> has already established a default remote host.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Net.Sockets.UdpClient\"></xref> is closed.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when accessing the socket. See the Remarks section for more information.\n  platform:\n  - net462\n- uid: System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32)\n  id: SendAsync(System.Byte[],System.Int32)\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: SendAsync(Byte[],Int32)\n  nameWithType: UdpClient.SendAsync(Byte[],Int32)\n  fullName: System.Net.Sockets.UdpClient.SendAsync(Byte[],Int32)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Sends a UDP datagram asynchronously to a remote host.\n  remarks: \"This overload sends datagrams to the remote host established in the <xref:System.Net.Sockets.UdpClient.Connect%2A> method. If you do not call <xref:System.Net.Sockets.UdpClient.Connect%2A> before calling this overload, the method will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.  \\n  \\n If you want to send datagrams to a different remote host, you must call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method and specify the desired remote host. Use either of the other <xref:System.Net.Sockets.UdpClient.SendAsync%2A> method overloads to send datagrams to a broadcast address.\"\n  syntax:\n    content: public System.Threading.Tasks.Task<int> SendAsync (byte[] datagram, int bytes);\n    parameters:\n    - id: datagram\n      type: System.Byte[]\n      description: An array of type <xref:System.Byte> that specifies the UDP datagram that you intend to send represented as an array of bytes.\n    - id: bytes\n      type: System.Int32\n      description: The number of bytes in the datagram.\n    return:\n      type: System.Threading.Tasks.Task{System.Int32}\n      description: Returns &lt;xref:System.Threading.Tasks.Task%601&gt;.\n  overload: System.Net.Sockets.UdpClient.SendAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>dgram</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The <xref href=\"System.Net.Sockets.UdpClient\"></xref> has already established a default remote host.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Net.Sockets.UdpClient\"></xref> is closed.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when accessing the socket. See the Remarks section for more information.\n  platform:\n  - net462\n- uid: System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.Net.IPEndPoint)\n  id: SendAsync(System.Byte[],System.Int32,System.Net.IPEndPoint)\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: SendAsync(Byte[],Int32,IPEndPoint)\n  nameWithType: UdpClient.SendAsync(Byte[],Int32,IPEndPoint)\n  fullName: System.Net.Sockets.UdpClient.SendAsync(Byte[],Int32,IPEndPoint)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Sends a UDP datagram asynchronously to a remote host.\n  remarks: \"This method sends datagrams to the specified endpoint. Before calling this overload, you must first create an <xref:System.Net.IPEndPoint> using the IP address and port number of the remote host to which your datagrams will be delivered. You can send datagrams to the default broadcast address, 255.255.255.255, by specifying <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> for the <xref:System.Net.IPAddress.Address%2A> property of the <xref:System.Net.IPEndPoint>. After you have created this <xref:System.Net.IPEndPoint>, pass it to this method as the `endPoint` parameter.  \\n  \\n If you want to send datagrams to any other broadcast address, use the <xref:System.Net.Sockets.UdpClient.Client%2A> method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>. You can also revert to using the <xref:System.Net.Sockets.Socket> class.  \\n  \\n> [!WARNING]\\n>  Do not provide an `endPoint` parameter to this method if you have already established a remote host with the <xref:System.Net.Sockets.UdpClient.Connect%2A> method. If you do, this method will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.\"\n  syntax:\n    content: public System.Threading.Tasks.Task<int> SendAsync (byte[] datagram, int bytes, System.Net.IPEndPoint endPoint);\n    parameters:\n    - id: datagram\n      type: System.Byte[]\n      description: An array of type <xref:System.Byte> that specifies the UDP datagram that you intend to send represented as an array of bytes.\n    - id: bytes\n      type: System.Int32\n      description: The number of bytes in the datagram.\n    - id: endPoint\n      type: System.Net.IPEndPoint\n      description: An <xref:System.Net.IPEndPoint> that represents the host and port to which to send the datagram.\n    return:\n      type: System.Threading.Tasks.Task{System.Int32}\n      description: Returns &lt;xref:System.Threading.Tasks.Task%601&gt;.\n  overload: System.Net.Sockets.UdpClient.SendAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>dgram</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <xref href=\"System.Net.Sockets.UdpClient\"></xref> has already established a default remote host.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: <xref href=\"System.Net.Sockets.UdpClient\"></xref> is closed.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when accessing the socket. See the Remarks section for more information.\n  platform:\n  - net462\n- uid: System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.String,System.Int32)\n  id: SendAsync(System.Byte[],System.Int32,System.String,System.Int32)\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: SendAsync(Byte[],Int32,String,Int32)\n  nameWithType: UdpClient.SendAsync(Byte[],Int32,String,Int32)\n  fullName: System.Net.Sockets.UdpClient.SendAsync(Byte[],Int32,String,Int32)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Sends a UDP datagram asynchronously to a remote host.\n  remarks: \"This method sends datagrams to the values specified by the `hostname` and `port` parameters. You can send datagrams to the default broadcast address by specifying \\\"255.255.255.255\\\" for the `hostname` parameter value.  \\n  \\n If you want to send datagrams to any other broadcast address, use the <xref:System.Net.Sockets.UdpClient.Client%2A> method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>. You can also revert to using the <xref:System.Net.Sockets.Socket> class.  \\n  \\n> [!WARNING]\\n>  Do not provide a host name or port number to this method if you have already established a remote host with the <xref:System.Net.Sockets.UdpClient.Connect%2A> method. If you do, this method will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.\"\n  syntax:\n    content: public System.Threading.Tasks.Task<int> SendAsync (byte[] datagram, int bytes, string hostname, int port);\n    parameters:\n    - id: datagram\n      type: System.Byte[]\n      description: An array of type <xref:System.Byte> that specifies the UDP datagram that you intend to send represented as an array of bytes.\n    - id: bytes\n      type: System.Int32\n      description: The number of bytes in the datagram.\n    - id: hostname\n      type: System.String\n      description: The name of the remote host to which you intend to send the datagram.\n    - id: port\n      type: System.Int32\n      description: The remote port number with which you intend to communicate.\n    return:\n      type: System.Threading.Tasks.Task{System.Int32}\n      description: Returns &lt;xref:System.Threading.Tasks.Task%601&gt;.\n  overload: System.Net.Sockets.UdpClient.SendAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>dgram</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The <xref href=\"System.Net.Sockets.UdpClient\"></xref> has already established a default remote host.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Net.Sockets.UdpClient\"></xref> is closed.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when accessing the socket. See the Remarks section for more information.\n  platform:\n  - net462\n- uid: System.Net.Sockets.UdpClient.Ttl\n  id: Ttl\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: Ttl\n  nameWithType: UdpClient.Ttl\n  fullName: System.Net.Sockets.UdpClient.Ttl\n  type: Property\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  summary: Gets or sets a value that specifies the Time to Live (TTL) value of Internet Protocol (IP) packets sent by the <xref href=\"System.Net.Sockets.UdpClient\"></xref>.\n  remarks: The TTL value indicates the maximum number of routers a packet can traverse before the router discards the packet and an Internet Control Message Protocol (ICMP) \"TTL exceeded\" error message is returned to the sender.\n  example:\n  - \"The following code example shows the use of the Ttl property.  \\n  \\n [!code-cs[System.Net.Sockets.UdpClient#5](~/add/codesnippet/csharp/p-system.net.sockets.udp_6_1.cs)]\\n [!code-cpp[System.Net.Sockets.UdpClient#5](~/add/codesnippet/cpp/p-system.net.sockets.udp_6_1.cpp)]\"\n  syntax:\n    content: public short Ttl { get; set; }\n    return:\n      type: System.Int16\n      description: The TTL value.\n  overload: System.Net.Sockets.UdpClient.Ttl*\n  exceptions: []\n  platform:\n  - net462\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Net.Sockets.SocketException\n  isExternal: true\n  name: System.Net.Sockets.SocketException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: true\n  name: System.ArgumentOutOfRangeException\n- uid: System.ArgumentNullException\n  isExternal: true\n  name: System.ArgumentNullException\n- uid: System.ArgumentException\n  isExternal: true\n  name: System.ArgumentException\n- uid: System.ObjectDisposedException\n  isExternal: true\n  name: System.ObjectDisposedException\n- uid: System.NotSupportedException\n  isExternal: true\n  name: System.NotSupportedException\n- uid: System.InvalidOperationException\n  isExternal: true\n  name: System.InvalidOperationException\n- uid: System.Net.Sockets.UdpClient.#ctor\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: UdpClient()\n  nameWithType: UdpClient.UdpClient()\n  fullName: System.Net.Sockets.UdpClient.UdpClient()\n- uid: System.Net.Sockets.UdpClient.#ctor(System.Int32)\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: UdpClient(Int32)\n  nameWithType: UdpClient.UdpClient(Int32)\n  fullName: System.Net.Sockets.UdpClient.UdpClient(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: true\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Net.Sockets.UdpClient.#ctor(System.Net.IPEndPoint)\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: UdpClient(IPEndPoint)\n  nameWithType: UdpClient.UdpClient(IPEndPoint)\n  fullName: System.Net.Sockets.UdpClient.UdpClient(IPEndPoint)\n- uid: System.Net.IPEndPoint\n  parent: System.Net\n  isExternal: true\n  name: IPEndPoint\n  nameWithType: IPEndPoint\n  fullName: System.Net.IPEndPoint\n- uid: System.Net.Sockets.UdpClient.#ctor(System.Net.Sockets.AddressFamily)\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: UdpClient(AddressFamily)\n  nameWithType: UdpClient.UdpClient(AddressFamily)\n  fullName: System.Net.Sockets.UdpClient.UdpClient(AddressFamily)\n- uid: System.Net.Sockets.AddressFamily\n  parent: System.Net.Sockets\n  isExternal: true\n  name: AddressFamily\n  nameWithType: AddressFamily\n  fullName: System.Net.Sockets.AddressFamily\n- uid: System.Net.Sockets.UdpClient.#ctor(System.Int32,System.Net.Sockets.AddressFamily)\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: UdpClient(Int32,AddressFamily)\n  nameWithType: UdpClient.UdpClient(Int32,AddressFamily)\n  fullName: System.Net.Sockets.UdpClient.UdpClient(Int32,AddressFamily)\n- uid: System.Net.Sockets.UdpClient.#ctor(System.String,System.Int32)\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: UdpClient(String,Int32)\n  nameWithType: UdpClient.UdpClient(String,Int32)\n  fullName: System.Net.Sockets.UdpClient.UdpClient(String,Int32)\n- uid: System.String\n  parent: System\n  isExternal: true\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Net.Sockets.UdpClient.Active\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: Active\n  nameWithType: UdpClient.Active\n  fullName: System.Net.Sockets.UdpClient.Active\n- uid: System.Boolean\n  parent: System\n  isExternal: true\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Net.Sockets.UdpClient.AllowNatTraversal(System.Boolean)\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: AllowNatTraversal(Boolean)\n  nameWithType: UdpClient.AllowNatTraversal(Boolean)\n  fullName: System.Net.Sockets.UdpClient.AllowNatTraversal(Boolean)\n- uid: System.Net.Sockets.UdpClient.Available\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: Available\n  nameWithType: UdpClient.Available\n  fullName: System.Net.Sockets.UdpClient.Available\n- uid: System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: BeginReceive(AsyncCallback,Object)\n  nameWithType: UdpClient.BeginReceive(AsyncCallback,Object)\n  fullName: System.Net.Sockets.UdpClient.BeginReceive(AsyncCallback,Object)\n- uid: System.IAsyncResult\n  parent: System\n  isExternal: true\n  name: IAsyncResult\n  nameWithType: IAsyncResult\n  fullName: System.IAsyncResult\n- uid: System.AsyncCallback\n  parent: System\n  isExternal: true\n  name: AsyncCallback\n  nameWithType: AsyncCallback\n  fullName: System.AsyncCallback\n- uid: System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.AsyncCallback,System.Object)\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: BeginSend(Byte[],Int32,AsyncCallback,Object)\n  nameWithType: UdpClient.BeginSend(Byte[],Int32,AsyncCallback,Object)\n  fullName: System.Net.Sockets.UdpClient.BeginSend(Byte[],Int32,AsyncCallback,Object)\n- uid: System.Byte[]\n  parent: System\n  isExternal: true\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: Byte[]\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.Net.IPEndPoint,System.AsyncCallback,System.Object)\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: BeginSend(Byte[],Int32,IPEndPoint,AsyncCallback,Object)\n  nameWithType: UdpClient.BeginSend(Byte[],Int32,IPEndPoint,AsyncCallback,Object)\n  fullName: System.Net.Sockets.UdpClient.BeginSend(Byte[],Int32,IPEndPoint,AsyncCallback,Object)\n- uid: System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.String,System.Int32,System.AsyncCallback,System.Object)\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: BeginSend(Byte[],Int32,String,Int32,AsyncCallback,Object)\n  nameWithType: UdpClient.BeginSend(Byte[],Int32,String,Int32,AsyncCallback,Object)\n  fullName: System.Net.Sockets.UdpClient.BeginSend(Byte[],Int32,String,Int32,AsyncCallback,Object)\n- uid: System.Net.Sockets.UdpClient.Client\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: Client\n  nameWithType: UdpClient.Client\n  fullName: System.Net.Sockets.UdpClient.Client\n- uid: System.Net.Sockets.Socket\n  parent: System.Net.Sockets\n  isExternal: true\n  name: Socket\n  nameWithType: Socket\n  fullName: System.Net.Sockets.Socket\n- uid: System.Net.Sockets.UdpClient.Close\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: Close()\n  nameWithType: UdpClient.Close()\n  fullName: System.Net.Sockets.UdpClient.Close()\n- uid: System.Net.Sockets.UdpClient.Connect(System.Net.IPEndPoint)\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: Connect(IPEndPoint)\n  nameWithType: UdpClient.Connect(IPEndPoint)\n  fullName: System.Net.Sockets.UdpClient.Connect(IPEndPoint)\n- uid: System.Net.Sockets.UdpClient.Connect(System.Net.IPAddress,System.Int32)\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: Connect(IPAddress,Int32)\n  nameWithType: UdpClient.Connect(IPAddress,Int32)\n  fullName: System.Net.Sockets.UdpClient.Connect(IPAddress,Int32)\n- uid: System.Net.IPAddress\n  parent: System.Net\n  isExternal: true\n  name: IPAddress\n  nameWithType: IPAddress\n  fullName: System.Net.IPAddress\n- uid: System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: Connect(String,Int32)\n  nameWithType: UdpClient.Connect(String,Int32)\n  fullName: System.Net.Sockets.UdpClient.Connect(String,Int32)\n- uid: System.Net.Sockets.UdpClient.Dispose\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: Dispose()\n  nameWithType: UdpClient.Dispose()\n  fullName: System.Net.Sockets.UdpClient.Dispose()\n- uid: System.Net.Sockets.UdpClient.Dispose(System.Boolean)\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: UdpClient.Dispose(Boolean)\n  fullName: System.Net.Sockets.UdpClient.Dispose(Boolean)\n- uid: System.Net.Sockets.UdpClient.DontFragment\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: DontFragment\n  nameWithType: UdpClient.DontFragment\n  fullName: System.Net.Sockets.UdpClient.DontFragment\n- uid: System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: DropMulticastGroup(IPAddress)\n  nameWithType: UdpClient.DropMulticastGroup(IPAddress)\n  fullName: System.Net.Sockets.UdpClient.DropMulticastGroup(IPAddress)\n- uid: System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress,System.Int32)\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: DropMulticastGroup(IPAddress,Int32)\n  nameWithType: UdpClient.DropMulticastGroup(IPAddress,Int32)\n  fullName: System.Net.Sockets.UdpClient.DropMulticastGroup(IPAddress,Int32)\n- uid: System.Net.Sockets.UdpClient.EnableBroadcast\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: EnableBroadcast\n  nameWithType: UdpClient.EnableBroadcast\n  fullName: System.Net.Sockets.UdpClient.EnableBroadcast\n- uid: System.Net.Sockets.UdpClient.EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: EndReceive(IAsyncResult,IPEndPoint)\n  nameWithType: UdpClient.EndReceive(IAsyncResult,IPEndPoint)\n  fullName: System.Net.Sockets.UdpClient.EndReceive(IAsyncResult,IPEndPoint)\n- uid: System.Net.Sockets.UdpClient.EndSend(System.IAsyncResult)\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: EndSend(IAsyncResult)\n  nameWithType: UdpClient.EndSend(IAsyncResult)\n  fullName: System.Net.Sockets.UdpClient.EndSend(IAsyncResult)\n- uid: System.Net.Sockets.UdpClient.ExclusiveAddressUse\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: ExclusiveAddressUse\n  nameWithType: UdpClient.ExclusiveAddressUse\n  fullName: System.Net.Sockets.UdpClient.ExclusiveAddressUse\n- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: JoinMulticastGroup(IPAddress)\n  nameWithType: UdpClient.JoinMulticastGroup(IPAddress)\n  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(IPAddress)\n- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Int32,System.Net.IPAddress)\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: JoinMulticastGroup(Int32,IPAddress)\n  nameWithType: UdpClient.JoinMulticastGroup(Int32,IPAddress)\n  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(Int32,IPAddress)\n- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Int32)\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: JoinMulticastGroup(IPAddress,Int32)\n  nameWithType: UdpClient.JoinMulticastGroup(IPAddress,Int32)\n  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(IPAddress,Int32)\n- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Net.IPAddress)\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: JoinMulticastGroup(IPAddress,IPAddress)\n  nameWithType: UdpClient.JoinMulticastGroup(IPAddress,IPAddress)\n  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(IPAddress,IPAddress)\n- uid: System.Net.Sockets.UdpClient.MulticastLoopback\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: MulticastLoopback\n  nameWithType: UdpClient.MulticastLoopback\n  fullName: System.Net.Sockets.UdpClient.MulticastLoopback\n- uid: System.Net.Sockets.UdpClient.Receive(System.Net.IPEndPoint@)\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: Receive(IPEndPoint)\n  nameWithType: UdpClient.Receive(IPEndPoint)\n  fullName: System.Net.Sockets.UdpClient.Receive(IPEndPoint)\n- uid: System.Net.Sockets.UdpClient.ReceiveAsync\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: ReceiveAsync()\n  nameWithType: UdpClient.ReceiveAsync()\n  fullName: System.Net.Sockets.UdpClient.ReceiveAsync()\n- uid: System.Threading.Tasks.Task{System.Net.Sockets.UdpReceiveResult}\n  parent: System.Threading.Tasks\n  isExternal: true\n  name: Task<UdpReceiveResult>\n  nameWithType: Task<UdpReceiveResult>\n  fullName: System.Threading.Tasks.Task<System.Net.Sockets.UdpReceiveResult>\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: Task<System.Net.Sockets.UdpReceiveResult>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Net.Sockets.UdpReceiveResult\n    name: UdpReceiveResult\n    nameWithType: UdpReceiveResult\n    fullName: UdpReceiveResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32)\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: Send(Byte[],Int32)\n  nameWithType: UdpClient.Send(Byte[],Int32)\n  fullName: System.Net.Sockets.UdpClient.Send(Byte[],Int32)\n- uid: System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: Send(Byte[],Int32,IPEndPoint)\n  nameWithType: UdpClient.Send(Byte[],Int32,IPEndPoint)\n  fullName: System.Net.Sockets.UdpClient.Send(Byte[],Int32,IPEndPoint)\n- uid: System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.String,System.Int32)\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: Send(Byte[],Int32,String,Int32)\n  nameWithType: UdpClient.Send(Byte[],Int32,String,Int32)\n  fullName: System.Net.Sockets.UdpClient.Send(Byte[],Int32,String,Int32)\n- uid: System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32)\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: SendAsync(Byte[],Int32)\n  nameWithType: UdpClient.SendAsync(Byte[],Int32)\n  fullName: System.Net.Sockets.UdpClient.SendAsync(Byte[],Int32)\n- uid: System.Threading.Tasks.Task{System.Int32}\n  parent: System.Threading.Tasks\n  isExternal: true\n  name: Task<Int32>\n  nameWithType: Task<Int32>\n  fullName: System.Threading.Tasks.Task<System.Int32>\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: Task<System.Int32>\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: Int32\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.Net.IPEndPoint)\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: SendAsync(Byte[],Int32,IPEndPoint)\n  nameWithType: UdpClient.SendAsync(Byte[],Int32,IPEndPoint)\n  fullName: System.Net.Sockets.UdpClient.SendAsync(Byte[],Int32,IPEndPoint)\n- uid: System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.String,System.Int32)\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: SendAsync(Byte[],Int32,String,Int32)\n  nameWithType: UdpClient.SendAsync(Byte[],Int32,String,Int32)\n  fullName: System.Net.Sockets.UdpClient.SendAsync(Byte[],Int32,String,Int32)\n- uid: System.Net.Sockets.UdpClient.Ttl\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: Ttl\n  nameWithType: UdpClient.Ttl\n  fullName: System.Net.Sockets.UdpClient.Ttl\n- uid: System.Int16\n  parent: System\n  isExternal: true\n  name: Int16\n  nameWithType: Int16\n  fullName: System.Int16\n- uid: System.Net.Sockets.UdpClient.#ctor*\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: UdpClient\n  nameWithType: UdpClient.UdpClient\n- uid: System.Net.Sockets.UdpClient.Active*\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: Active\n  nameWithType: UdpClient.Active\n- uid: System.Net.Sockets.UdpClient.AllowNatTraversal*\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: AllowNatTraversal\n  nameWithType: UdpClient.AllowNatTraversal\n- uid: System.Net.Sockets.UdpClient.Available*\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: Available\n  nameWithType: UdpClient.Available\n- uid: System.Net.Sockets.UdpClient.BeginReceive*\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: BeginReceive\n  nameWithType: UdpClient.BeginReceive\n- uid: System.Net.Sockets.UdpClient.BeginSend*\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: BeginSend\n  nameWithType: UdpClient.BeginSend\n- uid: System.Net.Sockets.UdpClient.Client*\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: Client\n  nameWithType: UdpClient.Client\n- uid: System.Net.Sockets.UdpClient.Close*\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: Close\n  nameWithType: UdpClient.Close\n- uid: System.Net.Sockets.UdpClient.Connect*\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: Connect\n  nameWithType: UdpClient.Connect\n- uid: System.Net.Sockets.UdpClient.Dispose*\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: Dispose\n  nameWithType: UdpClient.Dispose\n- uid: System.Net.Sockets.UdpClient.DontFragment*\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: DontFragment\n  nameWithType: UdpClient.DontFragment\n- uid: System.Net.Sockets.UdpClient.DropMulticastGroup*\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: DropMulticastGroup\n  nameWithType: UdpClient.DropMulticastGroup\n- uid: System.Net.Sockets.UdpClient.EnableBroadcast*\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: EnableBroadcast\n  nameWithType: UdpClient.EnableBroadcast\n- uid: System.Net.Sockets.UdpClient.EndReceive*\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: EndReceive\n  nameWithType: UdpClient.EndReceive\n- uid: System.Net.Sockets.UdpClient.EndSend*\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: EndSend\n  nameWithType: UdpClient.EndSend\n- uid: System.Net.Sockets.UdpClient.ExclusiveAddressUse*\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: ExclusiveAddressUse\n  nameWithType: UdpClient.ExclusiveAddressUse\n- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup*\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: JoinMulticastGroup\n  nameWithType: UdpClient.JoinMulticastGroup\n- uid: System.Net.Sockets.UdpClient.MulticastLoopback*\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: MulticastLoopback\n  nameWithType: UdpClient.MulticastLoopback\n- uid: System.Net.Sockets.UdpClient.Receive*\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: Receive\n  nameWithType: UdpClient.Receive\n- uid: System.Net.Sockets.UdpClient.ReceiveAsync*\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: ReceiveAsync\n  nameWithType: UdpClient.ReceiveAsync\n- uid: System.Net.Sockets.UdpClient.Send*\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: Send\n  nameWithType: UdpClient.Send\n- uid: System.Net.Sockets.UdpClient.SendAsync*\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: SendAsync\n  nameWithType: UdpClient.SendAsync\n- uid: System.Net.Sockets.UdpClient.Ttl*\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: Ttl\n  nameWithType: UdpClient.Ttl\n"}